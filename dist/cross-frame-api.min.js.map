{"version":3,"file":"cross-frame-api.min.js","sources":["../src/CrossFrameAPI.ts","../src/constants/error_codes.ts"],"sourcesContent":["// src/CrossFrameAPI.ts\nimport { MessageData, MessageResponse } from \"./types/CrossFrame\";\nimport { global_errors } from \"./constants/error_codes\";\n\n/**\n * Client-side SCORM façade running in your content frame.\n * Returns cached/default values synchronously, then fires off an async\n * postMessage to the LMS frame to refresh cache and error state.\n */\nexport default class CrossFrameAPI {\n  private _cache = new Map<string, string>();\n  private _lastError = \"0\";\n  private _pending = new Map<string, { resolve: (v: any) => void; reject: (e: any) => void }>();\n  private _counter = 0;\n  private readonly _origin: string;\n\n  private _handler: ProxyHandler<CrossFrameAPI> = {\n    get: (target, prop, receiver) => {\n      // If it's an existing property/method, return it\n      if (typeof prop !== \"string\" || prop in target) {\n        const v = Reflect.get(target, prop, receiver);\n        return typeof v === \"function\" ? v.bind(target) : v;\n      }\n\n      // Otherwise treat prop as a SCORM call\n      const methodName = prop;\n      const isGet = methodName.endsWith(\"GetValue\");\n      const isSet = methodName.startsWith(\"LMSSet\") || methodName.endsWith(\"SetValue\");\n      const isInit = methodName === \"Initialize\" || methodName === \"LMSInitialize\";\n      const isFinish = methodName === \"Terminate\" || methodName === \"LMSFinish\";\n      const isCommit = methodName === \"Commit\" || methodName === \"LMSCommit\";\n\n      return (...args: any[]): string => {\n        // Synchronous cache update for setter calls\n        if (isSet && args.length >= 2) {\n          target._cache.set(args[0], String(args[1]));\n          target._lastError = \"0\";\n        }\n\n        // Fire off async postMessage to refresh cache & error\n        target\n          ._post(methodName, args)\n          .then((res) => {\n            if (isGet && args.length >= 1) {\n              target._cache.set(args[0], String(res));\n              target._lastError = \"0\";\n            }\n            if (methodName === \"GetLastError\" || methodName === \"LMSGetLastError\") {\n              target._lastError = String(res);\n            }\n          })\n          .catch((err) => target._capture(methodName, err));\n\n        // Return synchronously\n        if (isGet && args.length >= 1) {\n          return target._cache.get(args[0]) ?? \"\";\n        }\n        if (isInit || isFinish || isCommit || isSet) {\n          // Immediately return “true”\n          const result = \"true\";\n          // Then warm cache:\n          target\n            ._post(\"getFlattenedCMI\", [])\n            .then((all: Record<string, string>) => {\n              Object.entries(all).forEach(([key, val]) => {\n                target._cache.set(key, val);\n              });\n              // reset error\n              target._lastError = \"0\";\n            })\n            .catch((err) => target._capture(\"getFlattenedCMI\", err));\n          return result;\n        }\n        if (methodName === \"GetLastError\" || methodName === \"LMSGetLastError\") {\n          return target._lastError;\n        }\n        return \"\";\n      };\n    },\n  };\n\n  constructor(targetOrigin: string = \"*\") {\n    this._origin = targetOrigin;\n    window.addEventListener(\"message\", this._onMessage.bind(this));\n    return new Proxy(this, this._handler);\n  }\n\n  /** Send a message to the LMS frame and return a promise for its response */\n  private _post(method: string, params: any[]): Promise<any> {\n    const messageId = `cfapi-${Date.now()}-${this._counter++}`;\n\n    // Deep‐clean params of non-cloneables (e.g. functions)\n    const safeParams = params.map((p) => {\n      if (typeof p === \"function\") {\n        console.warn(\"Dropping function param when posting SCORM call:\", method);\n        return undefined;\n      }\n      return p;\n    });\n\n    return new Promise((resolve, reject) => {\n      this._pending.set(messageId, { resolve, reject });\n      const msg: MessageData = { messageId, method, params: safeParams };\n      window.parent.postMessage(msg, this._origin);\n      // Optional timeout\n      setTimeout(() => {\n        if (this._pending.has(messageId)) {\n          this._pending.delete(messageId);\n          reject(new Error(`Timeout calling ${method}`));\n        }\n      }, 5000);\n    });\n  }\n\n  /** Handle incoming postMessage responses from the LMS frame */\n  private _onMessage(ev: MessageEvent) {\n    const data = ev.data as MessageResponse;\n    if (!data?.messageId) return;\n    const pending = this._pending.get(data.messageId);\n    if (!pending) return;\n    this._pending.delete(data.messageId);\n    if (data.error) pending.reject(data.error);\n    else pending.resolve(data.result);\n  }\n\n  /** Capture and cache SCORM errors */\n  private _capture(method: string, err: any) {\n    console.error(`CrossFrameAPI ${method} error:`, err);\n    const code = (/(\\d{3})/.exec(err.message) || [])[1] || global_errors.GENERAL;\n    this._lastError = String(code);\n    this._cache.set(`error_${code}`, err.message);\n  }\n}\n","export type ErrorCode = {\n  [key: string]: number;\n};\n\nexport const global_errors: ErrorCode = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nexport const scorm12_errors: ErrorCode = {\n  ...global_errors,\n  RETRIEVE_BEFORE_INIT: 301,\n  STORE_BEFORE_INIT: 301,\n  COMMIT_BEFORE_INIT: 301,\n  ARGUMENT_ERROR: 201,\n  CHILDREN_ERROR: 202,\n  COUNT_ERROR: 203,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 401,\n  VALUE_NOT_INITIALIZED: 301,\n  INVALID_SET_VALUE: 402,\n  READ_ONLY_ELEMENT: 403,\n  WRITE_ONLY_ELEMENT: 404,\n  TYPE_MISMATCH: 405,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n\nexport const scorm2004_errors: ErrorCode = {\n  ...global_errors,\n  INITIALIZATION_FAILED: 102,\n  INITIALIZED: 103,\n  TERMINATED: 104,\n  TERMINATION_FAILURE: 111,\n  TERMINATION_BEFORE_INIT: 112,\n  MULTIPLE_TERMINATIONS: 113,\n  RETRIEVE_BEFORE_INIT: 122,\n  RETRIEVE_AFTER_TERM: 123,\n  STORE_BEFORE_INIT: 132,\n  STORE_AFTER_TERM: 133,\n  COMMIT_BEFORE_INIT: 142,\n  COMMIT_AFTER_TERM: 143,\n  ARGUMENT_ERROR: 201,\n  GENERAL_GET_FAILURE: 301,\n  GENERAL_SET_FAILURE: 351,\n  GENERAL_COMMIT_FAILURE: 391,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 402,\n  VALUE_NOT_INITIALIZED: 403,\n  READ_ONLY_ELEMENT: 404,\n  WRITE_ONLY_ELEMENT: 405,\n  TYPE_MISMATCH: 406,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n"],"names":["constructor","targetOrigin","this","_cache","Map","_lastError","_pending","_counter","_handler","get","target","prop","receiver","v","Reflect","bind","methodName","isGet","endsWith","isSet","startsWith","isInit","isFinish","isCommit","_len","arguments","length","args","Array","_key","set","String","_post","then","res","catch","err","_capture","result","all","Object","entries","forEach","_ref","key","val","_origin","window","addEventListener","_onMessage","Proxy","method","params","messageId","Date","now","safeParams","map","p","console","warn","Promise","resolve","reject","parent","postMessage","setTimeout","has","delete","Error","ev","data","pending","error","code","exec","message"],"mappings":"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"}