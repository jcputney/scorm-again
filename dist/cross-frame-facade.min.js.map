{"version":3,"file":"cross-frame-facade.min.js","sources":["../src/facades/CrossFrameFacade.ts"],"sourcesContent":["/**\n * CrossFrameFacade.ts\n *\n * This file implements a cross-frame facade for the scorm-again API.\n * It allows communication between frames from different domains using the postMessage API.\n */\n\nimport BaseAPI from \"../BaseAPI\";\n\n/**\n * Type for the message data\n */\nexport type MessageData = {\n  messageId: string;\n  method: string;\n  params: unknown[];\n  sab?: SharedArrayBuffer;\n};\n\n/**\n * Type for the message response\n */\nexport type MessageResponse = {\n  messageId: string;\n  result?: unknown;\n  error?: {\n    message: string;\n    stack?: string;\n  };\n  sab?: SharedArrayBuffer;\n};\n\n/**\n * Interface for the CrossFrameFacade\n */\nexport interface ICrossFrameFacade {\n  /**\n   * Initialize the SCORM API (SCORM 1.2 style) - Asynchronous version\n   * @returns Promise that resolves to true if initialization was successful\n   */\n  initialize(): Promise<boolean>;\n\n  /**\n   * Initialize the SCORM API (SCORM 1.2 style) - Synchronous version\n   * @returns \"true\" if initialization was successful, \"false\" otherwise\n   */\n  lmsInitialize(): string;\n\n  /**\n   * Initialize the SCORM API (SCORM 2004 style) - Asynchronous version\n   * @returns Promise that resolves to true if initialization was successful\n   */\n  Initialize(): Promise<boolean>;\n\n  /**\n   * Initialize the SCORM API (SCORM 2004 style) - Synchronous version\n   * @returns \"true\" if initialization was successful, \"false\" otherwise\n   */\n  LMSInitialize(): string;\n\n  /**\n   * Terminate the SCORM API (SCORM 1.2 style) - Asynchronous version\n   * @returns Promise that resolves to true if termination was successful\n   */\n  terminate(): Promise<boolean>;\n\n  /**\n   * Terminate the SCORM API (SCORM 1.2 style) - Synchronous version\n   * @returns \"true\" if termination was successful, \"false\" otherwise\n   */\n  lmsFinish(): string;\n\n  /**\n   * Terminate the SCORM API (SCORM 2004 style) - Asynchronous version\n   * @returns Promise that resolves to true if termination was successful\n   */\n  Terminate(): Promise<boolean>;\n\n  /**\n   * Terminate the SCORM API (SCORM 2004 style) - Synchronous version\n   * @returns \"true\" if termination was successful, \"false\" otherwise\n   */\n  LMSFinish(): string;\n\n  /**\n   * Get a value from the SCORM API (SCORM 1.2 style) - Asynchronous version\n   * @param element The CMI element to get\n   * @returns Promise that resolves to the value of the CMI element\n   */\n  getValue(element: string): Promise<string>;\n\n  /**\n   * Get a value from the SCORM API (SCORM 1.2 style) - Synchronous version\n   * @param element The CMI element to get\n   * @returns The value of the CMI element\n   */\n  lmsGetValue(element: string): string;\n\n  /**\n   * Get a value from the SCORM API (SCORM 2004 style) - Asynchronous version\n   * @param element The CMI element to get\n   * @returns Promise that resolves to the value of the CMI element\n   */\n  GetValue(element: string): Promise<string>;\n\n  /**\n   * Get a value from the SCORM API (SCORM 2004 style) - Synchronous version\n   * @param element The CMI element to get\n   * @returns The value of the CMI element\n   */\n  LMSGetValue(element: string): string;\n\n  /**\n   * Set a value in the SCORM API (SCORM 1.2 style) - Asynchronous version\n   * @param element The CMI element to set\n   * @param value The value to set\n   * @returns Promise that resolves to true if the value was set successfully\n   */\n  setValue(element: string, value: string | number | boolean): Promise<boolean>;\n\n  /**\n   * Set a value in the SCORM API (SCORM 1.2 style) - Synchronous version\n   * @param element The CMI element to set\n   * @param value The value to set\n   * @returns \"true\" if the value was set successfully, \"false\" otherwise\n   */\n  lmsSetValue(element: string, value: string | number | boolean): string;\n\n  /**\n   * Set a value in the SCORM API (SCORM 2004 style) - Asynchronous version\n   * @param element The CMI element to set\n   * @param value The value to set\n   * @returns Promise that resolves to true if the value was set successfully\n   */\n  SetValue(element: string, value: string | number | boolean): Promise<boolean>;\n\n  /**\n   * Set a value in the SCORM API (SCORM 2004 style) - Synchronous version\n   * @param element The CMI element to set\n   * @param value The value to set\n   * @returns \"true\" if the value was set successfully, \"false\" otherwise\n   */\n  LMSSetValue(element: string, value: string | number | boolean): string;\n\n  /**\n   * Commit changes to the LMS (SCORM 1.2 style) - Asynchronous version\n   * @returns Promise that resolves to true if the commit was successful\n   */\n  commit(): Promise<boolean>;\n\n  /**\n   * Commit changes to the LMS (SCORM 1.2 style) - Synchronous version\n   * @returns \"true\" if the commit was successful, \"false\" otherwise\n   */\n  lmsCommit(): string;\n\n  /**\n   * Commit changes to the LMS (SCORM 2004 style) - Asynchronous version\n   * @returns Promise that resolves to true if the commit was successful\n   */\n  Commit(): Promise<boolean>;\n\n  /**\n   * Commit changes to the LMS (SCORM 2004 style) - Synchronous version\n   * @returns \"true\" if the commit was successful, \"false\" otherwise\n   */\n  LMSCommit(): string;\n\n  /**\n   * Get the last error code (SCORM 1.2 style) - Asynchronous version\n   * @returns Promise that resolves to the last error code as a string\n   */\n  getLastError(): Promise<string>;\n\n  /**\n   * Get the last error code (SCORM 1.2 style) - Synchronous version\n   * @returns The last error code as a string\n   */\n  lmsGetLastError(): string;\n\n  /**\n   * Get the last error code (SCORM 2004 style) - Asynchronous version\n   * @returns Promise that resolves to the last error code as a string\n   */\n  GetLastError(): Promise<string>;\n\n  /**\n   * Get the last error code (SCORM 2004 style) - Synchronous version\n   * @returns The last error code as a string\n   */\n  LMSGetLastError(): string;\n\n  /**\n   * Get the error string for an error code (SCORM 1.2 style) - Asynchronous version\n   * @param errorCode The error code\n   * @returns Promise that resolves to the error string\n   */\n  getErrorString(errorCode: string | number): Promise<string>;\n\n  /**\n   * Get the error string for an error code (SCORM 1.2 style) - Synchronous version\n   * @param errorCode The error code\n   * @returns The error string\n   */\n  lmsGetErrorString(errorCode: string | number): string;\n\n  /**\n   * Get the error string for an error code (SCORM 2004 style) - Asynchronous version\n   * @param errorCode The error code\n   * @returns Promise that resolves to the error string\n   */\n  GetErrorString(errorCode: string | number): Promise<string>;\n\n  /**\n   * Get the error string for an error code (SCORM 2004 style) - Synchronous version\n   * @param errorCode The error code\n   * @returns The error string\n   */\n  LMSGetErrorString(errorCode: string | number): string;\n\n  /**\n   * Get diagnostic information for an error code (SCORM 1.2 style) - Asynchronous version\n   * @param errorCode The error code\n   * @returns Promise that resolves to the diagnostic information\n   */\n  getDiagnostic(errorCode: string | number): Promise<string>;\n\n  /**\n   * Get diagnostic information for an error code (SCORM 1.2 style) - Synchronous version\n   * @param errorCode The error code\n   * @returns The diagnostic information\n   */\n  lmsGetDiagnostic(errorCode: string | number): string;\n\n  /**\n   * Get diagnostic information for an error code (SCORM 2004 style) - Asynchronous version\n   * @param errorCode The error code\n   * @returns Promise that resolves to the diagnostic information\n   */\n  GetDiagnostic(errorCode: string | number): Promise<string>;\n\n  /**\n   * Get diagnostic information for an error code (SCORM 2004 style) - Synchronous version\n   * @param errorCode The error code\n   * @returns The diagnostic information\n   */\n  LMSGetDiagnostic(errorCode: string | number): string;\n\n  /**\n   * Check if the API is currently initialized - Asynchronous version\n   * @returns Promise that resolves to true if the API is initialized\n   */\n  isInitialized(): Promise<boolean>;\n\n  /**\n   * Check if the API is currently initialized - Synchronous version\n   * @returns True if the API is initialized, false otherwise\n   */\n  getIsInitialized(): boolean;\n\n  /**\n   * Register an event listener\n   * @param event The event name\n   * @param callback The callback function\n   */\n  on(event: string, callback: (...args: unknown[]) => void): void;\n\n  /**\n   * Remove an event listener\n   * @param event The event name\n   * @param callback The callback function\n   */\n  off(event: string, callback: (...args: unknown[]) => void): void;\n}\n\n/**\n * Server-side facade that runs in the parent frame where the API is initialized.\n * This facade listens for messages from the client-side facade and proxies them to the actual API.\n */\nexport class CrossFrameLMS {\n  private readonly _api: BaseAPI;\n  private readonly _targetOrigin: string = \"*\";\n\n  /**\n   * Constructor\n   * @param {BaseAPI} api The API instance to use\n   * @param targetOrigin The target origin for postMessage (default: \"*\")\n   */\n  constructor(api: BaseAPI, targetOrigin?: string) {\n    this._api = api;\n\n    // Set target origin if provided\n    if (targetOrigin) {\n      this._targetOrigin = targetOrigin;\n    }\n\n    // Listen for messages from the client-side facade\n    window.addEventListener(\"message\", this._handleMessage.bind(this));\n\n    // Set up event forwarding\n    this._setupEventForwarding();\n  }\n\n  /**\n   * Handle messages from the client-side facade\n   * @param event The message event\n   */\n  private _handleMessage(event: MessageEvent) {\n    const data = event.data as MessageData;\n\n    // Ignore messages that don't have the expected format\n    if (!data || !data.messageId || !data.method) {\n      return;\n    }\n\n    // Process the message\n    this._processMessage(data, event.source as Window, event.origin);\n  }\n\n  /**\n   * Process a message from the client-side facade\n   * @param data The message data\n   * @param source The source window\n   * @param origin The origin of the message\n   */\n  private _processMessage(data: MessageData, source: Window, origin: string) {\n    const { messageId, method, params, sab } = data;\n    let result: any;\n    let error: any;\n\n    try {\n      // Call the appropriate method on the API\n      if (typeof (this._api as unknown as Record<string, Function>)[method] === \"function\") {\n        result = (this._api as unknown as Record<string, Function>)[method](...params);\n      } else {\n        throw new Error(`Method ${method} not found on API`);\n      }\n    } catch (e: unknown) {\n      if (e instanceof Error) {\n        error = {\n          message: e.message,\n          stack: e.stack,\n        };\n      } else {\n        error = {\n          message: String(e),\n        };\n      }\n    }\n\n    // Send the response back to the client-side facade\n    const response: MessageResponse = {\n      messageId,\n      result,\n      error,\n      sab,\n    };\n\n    source.postMessage(response, this._targetOrigin, sab ? [sab] : undefined);\n  }\n\n  /**\n   * Set up event forwarding from the API to the client-side facade\n   */\n  private _setupEventForwarding() {\n    // Forward all events from the API to the client-side facades\n    this._api.on(\"*\", (event: string, ...args: any[]) => {\n      // Get all frames that might contain client-side facades\n      // We get the frames each time an event is triggered to ensure we have the latest frames\n      const frames = Array.from(document.querySelectorAll(\"iframe\"));\n\n      // Send the event to all frames\n      frames.forEach((frame) => {\n        if (frame.contentWindow) {\n          frame.contentWindow.postMessage(\n            {\n              event,\n              args,\n            },\n            this._targetOrigin,\n          );\n        }\n      });\n    });\n  }\n}\n\n/**\n * Client-side facade that runs in the child frame where the module is loaded.\n * This facade sends messages to the server-side facade and provides the same interface as the actual API.\n */\nexport class CrossFrameAPI implements ICrossFrameFacade {\n  private _targetOrigin: string = \"*\";\n  private _pendingRequests: Map<\n    string,\n    {\n      resolve: (value: unknown) => void;\n      reject: (reason?: unknown) => void;\n      source?: Window; // Source window for forwarding responses\n    }\n  > = new Map();\n  private _eventListeners: Map<string, Set<(...args: unknown[]) => void>> = new Map();\n  private _messageIdCounter: number = 0;\n  private _childFrames: Set<Window> = new Set(); // Track child frames that have sent messages\n  private _isInitialized: boolean = false;\n  private _lastError: string = \"0\";\n  private _cache: Map<string, string> = new Map(); // Cache for synchronous operations\n  private _sabBuffers: Map<string, SharedArrayBuffer> = new Map();\n\n  private _syncCall(method: string, params: any[], timeoutMs = 5000): any {\n    // In a test environment, this method might be mocked\n    // so we need to ensure it's testable\n    try {\n      const sab = new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT);\n      const int32 = new Int32Array(sab);\n      const messageId = `${Date.now()}-sync-${this._messageIdCounter++}`;\n      // store sab for matching responses\n      this._sabBuffers.set(messageId, sab);\n      // send the call, transferring sab\n      window.parent.postMessage({ messageId, method, params, sab }, this._targetOrigin, [sab]);\n      // block until notified\n      const status = Atomics.wait(int32, 0, 0, timeoutMs);\n      // cleanup\n      this._sabBuffers.delete(messageId);\n      const pending = this._pendingRequests.get(messageId) || {};\n      this._pendingRequests.delete(messageId);\n      if (status === \"timed-out\") {\n        throw new Error(`SCORM ${method} timeout after ${timeoutMs}ms`);\n      }\n      if ((pending as any).error) throw (pending as any).error;\n      return (pending as any).result;\n    } catch (e) {\n      // If SharedArrayBuffer or Atomics are not available (e.g., in test environment)\n      // or if there's any other error, rethrow it to be handled by the caller\n      if (e instanceof Error) {\n        console.error(`Error in synchronous call to ${method}:`, e);\n        this._lastError = \"101\"; // General exception\n      } else {\n        console.error(`Unknown error in synchronous call to ${method}:`, e);\n        this._lastError = \"101\"; // General exception\n      }\n      throw e;\n    }\n  }\n\n  /**\n   * Constructor\n   * @param targetOrigin The target origin for postMessage (default: \"*\")\n   */\n  constructor(targetOrigin?: string) {\n    // Set target origin if provided\n    if (targetOrigin) {\n      this._targetOrigin = targetOrigin;\n    }\n\n    // Listen for messages from the server-side facade and child frames\n    window.addEventListener(\"message\", this._handleMessage.bind(this));\n  }\n\n  /**\n   * Handle messages from the server-side facade and child frames\n   * @param event The message event\n   */\n  private _handleMessage(event: MessageEvent) {\n    const data = event.data;\n    const source = event.source as Window;\n\n    // Check if the message is from a child frame\n    const isFromChildFrame = source !== window.parent && source !== window;\n\n    // Handle method responses from parent frame\n    if (\n      data.messageId &&\n      (data.result !== undefined || data.error !== undefined) &&\n      !isFromChildFrame\n    ) {\n      this._handleMethodResponse(data);\n    }\n\n    // Handle method requests from child frames\n    if (data.messageId && data.method && isFromChildFrame) {\n      // Add the child frame to our set of known frames\n      this._childFrames.add(source);\n\n      // Forward the message to the parent frame, but keep track of the source\n      const { messageId, method, params } = data;\n      const forwardedMessageId = `forwarded-${messageId}`;\n\n      // Store the promise callbacks with the source window\n      this._pendingRequests.set(forwardedMessageId, {\n        resolve: (result) => {\n          // Forward the result back to the child frame\n          source.postMessage(\n            {\n              messageId,\n              result,\n            },\n            this._targetOrigin,\n          );\n        },\n        reject: (error) => {\n          // Forward the error back to the child frame\n          source.postMessage(\n            {\n              messageId,\n              error,\n            },\n            this._targetOrigin,\n          );\n        },\n        source,\n      });\n\n      // Forward the message to the parent frame\n      window.parent.postMessage(\n        {\n          messageId: forwardedMessageId,\n          method,\n          params,\n        },\n        this._targetOrigin,\n      );\n\n      // Set a timeout to clean up if no response is received\n      setTimeout(() => {\n        if (this._pendingRequests.has(forwardedMessageId)) {\n          const request = this._pendingRequests.get(forwardedMessageId);\n          this._pendingRequests.delete(forwardedMessageId);\n          if (request?.source) {\n            request.source.postMessage(\n              {\n                messageId,\n                error: {\n                  message: `Timeout waiting for response to method ${method}`,\n                },\n              },\n              this._targetOrigin,\n            );\n          }\n        }\n      }, 5000);\n    }\n\n    // Handle events from parent frame\n    if (data.event && !isFromChildFrame) {\n      this._handleEvent(data.event, ...(data.args || []));\n\n      // Forward events to child frames\n      this._forwardEventToChildFrames(data.event, data.args || []);\n    }\n  }\n\n  /**\n   * Handle a method response from the server-side facade\n   * @param data The response data\n   */\n  private _handleMethodResponse(data: MessageResponse) {\n    const { messageId, result, error } = data;\n    if (data.sab) {\n      const int32 = new Int32Array(data.sab);\n      Atomics.store(int32, 0, 1);\n      Atomics.notify(int32, 0);\n    }\n    const pendingRequest = this._pendingRequests.get(messageId);\n    if (pendingRequest) {\n      const { resolve, reject } = pendingRequest;\n      if (error) {\n        reject(error);\n      } else {\n        resolve(result);\n      }\n      this._pendingRequests.delete(messageId);\n    }\n  }\n\n  /**\n   * Handle an event from the server-side facade\n   * @param event The event name\n   * @param args The event arguments\n   */\n  private _handleEvent(event: string, ...args: any[]) {\n    const listeners = this._eventListeners.get(event);\n\n    if (listeners) {\n      listeners.forEach((listener) => {\n        try {\n          listener(...args);\n        } catch (e: unknown) {\n          console.error(`Error in event listener for ${event}:`, e);\n        }\n      });\n    }\n\n    // Also trigger listeners for the \"*\" event\n    const allListeners = this._eventListeners.get(\"*\");\n\n    if (allListeners) {\n      allListeners.forEach((listener) => {\n        try {\n          listener(event, ...args);\n        } catch (e: unknown) {\n          console.error(`Error in \"*\" event listener for ${event}:`, e);\n        }\n      });\n    }\n  }\n\n  /**\n   * Forward an event to all child frames\n   * @param event The event name\n   * @param args The event arguments\n   */\n  private _forwardEventToChildFrames(event: string, args: unknown[]) {\n    // Send the event to all child frames\n    this._childFrames.forEach((frame) => {\n      try {\n        frame.postMessage(\n          {\n            event,\n            args,\n          },\n          this._targetOrigin,\n        );\n      } catch (e: unknown) {\n        console.error(`Error forwarding event to child frame:`, e);\n      }\n    });\n  }\n\n  /**\n   * Send a message to the server-side facade\n   * @param method The method to call\n   * @param params The parameters to pass to the method\n   * @returns A promise that resolves with the result of the method call\n   */\n  private _sendMessage(\n    method: string,\n    params: (string | number | boolean)[] = [],\n  ): Promise<unknown> {\n    // In test environments, we need to handle the case where window.parent.postMessage\n    // might not be properly mocked, which can lead to unhandled promise rejections\n    if (\n      typeof window === \"undefined\" ||\n      typeof window.parent === \"undefined\" ||\n      typeof window.parent.postMessage !== \"function\"\n    ) {\n      // Return a resolved promise with an empty string in test environments\n      return Promise.resolve(\"\");\n    }\n\n    return new Promise((resolve, reject) => {\n      const messageId = `${Date.now()}-${this._messageIdCounter++}`;\n\n      // Store the promise callbacks\n      this._pendingRequests.set(messageId, { resolve, reject });\n\n      try {\n        // Send the message to the parent frame\n        window.parent.postMessage(\n          {\n            messageId,\n            method,\n            params,\n          },\n          this._targetOrigin,\n        );\n\n        // Set a timeout to reject the promise if no response is received\n        setTimeout(() => {\n          if (this._pendingRequests.has(messageId)) {\n            this._pendingRequests.delete(messageId);\n            reject(new Error(`Timeout waiting for response to method ${method}`));\n          }\n        }, 5000);\n      } catch (e) {\n        // If there's an error sending the message, clean up and reject the promise\n        this._pendingRequests.delete(messageId);\n        reject(e);\n      }\n    });\n  }\n\n  /**\n   * Initialize the SCORM API (SCORM 1.2 style) - Asynchronous version\n   * @returns Promise that resolves to true if initialization was successful\n   */\n  async initialize(): Promise<boolean> {\n    const result = await this._sendMessage(\"lmsInitialize\");\n    this._isInitialized = result === \"true\";\n    return this._isInitialized;\n  }\n\n  /**\n   * Initialize the SCORM API (SCORM 1.2 style) - Synchronous version\n   * @returns \"true\" if initialization was successful, \"false\" otherwise\n   */\n  lmsInitialize(): string {\n    try {\n      return String(this._syncCall(\"lmsInitialize\", []));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"false\";\n    }\n  }\n\n  /**\n   * Initialize the SCORM API (SCORM 2004 style) - Asynchronous version\n   * @returns Promise that resolves to true if initialization was successful\n   */\n  async Initialize(): Promise<boolean> {\n    return this.initialize();\n  }\n\n  /**\n   * Initialize the SCORM API (SCORM 2004 style) - Synchronous version\n   * @returns \"true\" if initialization was successful, \"false\" otherwise\n   */\n  LMSInitialize(): string {\n    try {\n      return String(this._syncCall(\"LMSInitialize\", []));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"false\";\n    }\n  }\n\n  /**\n   * Terminate the SCORM API (SCORM 1.2 style) - Asynchronous version\n   * @returns Promise that resolves to true if termination was successful\n   */\n  async terminate(): Promise<boolean> {\n    const result = await this._sendMessage(\"lmsFinish\");\n    const success = result === \"true\";\n    if (success) {\n      this._isInitialized = false;\n    }\n    return success;\n  }\n\n  /**\n   * Terminate the SCORM API (SCORM 1.2 style) - Synchronous version\n   * @returns \"true\" if termination was successful, \"false\" otherwise\n   */\n  lmsFinish(): string {\n    try {\n      return String(this._syncCall(\"lmsFinish\", []));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"false\";\n    }\n  }\n\n  /**\n   * Terminate the SCORM API (SCORM 2004 style) - Asynchronous version\n   * @returns Promise that resolves to true if termination was successful\n   */\n  async Terminate(): Promise<boolean> {\n    return this.terminate();\n  }\n\n  /**\n   * Terminate the SCORM API (SCORM 2004 style) - Synchronous version\n   * @returns \"true\" if termination was successful, \"false\" otherwise\n   */\n  LMSFinish(): string {\n    try {\n      return String(this._syncCall(\"LMSFinish\", []));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"false\";\n    }\n  }\n\n  /**\n   * Get a value from the SCORM API (SCORM 1.2 style) - Asynchronous version\n   * @param element The CMI element to get\n   * @returns Promise that resolves to the value of the CMI element\n   */\n  async getValue(element: string): Promise<string> {\n    try {\n      const result = await this._sendMessage(\"lmsGetValue\", [element]);\n      const value = String(result);\n      // Cache the result for synchronous operations\n      this._cache.set(element, value);\n      return value;\n    } catch (e) {\n      this._lastError = \"101\"; // General exception\n      console.error(`Error in getValue(${element}):`, e);\n      return \"\";\n    }\n  }\n\n  /**\n   * Get a value from the SCORM API (SCORM 1.2 style) - Synchronous version\n   * @param element The CMI element to get\n   * @returns The value of the CMI element\n   */\n  lmsGetValue(element: string): string {\n    try {\n      return String(this._syncCall(\"lmsGetValue\", [element]));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"\";\n    }\n  }\n\n  /**\n   * Get a value from the SCORM API (SCORM 2004 style) - Asynchronous version\n   * @param element The CMI element to get\n   * @returns Promise that resolves to the value of the CMI element\n   */\n  async GetValue(element: string): Promise<string> {\n    return this.getValue(element);\n  }\n\n  /**\n   * Get a value from the SCORM API (SCORM 2004 style) - Synchronous version\n   * @param element The CMI element to get\n   * @returns The value of the CMI element\n   */\n  LMSGetValue(element: string): string {\n    try {\n      return String(this._syncCall(\"LMSGetValue\", [element]));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"\";\n    }\n  }\n\n  /**\n   * Set a value in the SCORM API (SCORM 1.2 style) - Asynchronous version\n   * @param element The CMI element to set\n   * @param value The value to set\n   * @returns Promise that resolves to true if the value was set successfully\n   */\n  async setValue(element: string, value: string | number | boolean): Promise<boolean> {\n    try {\n      const result = await this._sendMessage(\"lmsSetValue\", [element, value]);\n      const success = result === \"true\";\n      if (success) {\n        // Update the cache with the new value\n        this._cache.set(element, String(value));\n      }\n      return success;\n    } catch (e) {\n      this._lastError = \"101\"; // General exception\n      console.error(`Error in setValue(${element}, ${value}):`, e);\n      return false;\n    }\n  }\n\n  /**\n   * Set a value in the SCORM API (SCORM 1.2 style) - Synchronous version\n   * @param element The CMI element to set\n   * @param value The value to set\n   * @returns \"true\" if the value was set successfully, \"false\" otherwise\n   */\n  lmsSetValue(element: string, value: string | number | boolean): string {\n    try {\n      return String(this._syncCall(\"lmsSetValue\", [element, value]));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"false\";\n    }\n  }\n\n  /**\n   * Set a value in the SCORM API (SCORM 2004 style) - Asynchronous version\n   * @param element The CMI element to set\n   * @param value The value to set\n   * @returns Promise that resolves to true if the value was set successfully\n   */\n  async SetValue(element: string, value: string | number | boolean): Promise<boolean> {\n    return this.setValue(element, value);\n  }\n\n  /**\n   * Set a value in the SCORM API (SCORM 2004 style) - Synchronous version\n   * @param element The CMI element to set\n   * @param value The value to set\n   * @returns \"true\" if the value was set successfully, \"false\" otherwise\n   */\n  LMSSetValue(element: string, value: string | number | boolean): string {\n    try {\n      return String(this._syncCall(\"LMSSetValue\", [element, value]));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"false\";\n    }\n  }\n\n  /**\n   * Commit changes to the LMS (SCORM 1.2 style) - Asynchronous version\n   * @returns Promise that resolves to true if the commit was successful\n   */\n  async commit(): Promise<boolean> {\n    try {\n      const result = await this._sendMessage(\"lmsCommit\");\n      return result === \"true\";\n    } catch (e) {\n      this._lastError = \"101\"; // General exception\n      console.error(\"Error in commit:\", e);\n      return false;\n    }\n  }\n\n  /**\n   * Commit changes to the LMS (SCORM 1.2 style) - Synchronous version\n   * @returns \"true\" if the commit was successful, \"false\" otherwise\n   */\n  lmsCommit(): string {\n    try {\n      return String(this._syncCall(\"lmsCommit\", []));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"false\";\n    }\n  }\n\n  /**\n   * Commit changes to the LMS (SCORM 2004 style) - Asynchronous version\n   * @returns Promise that resolves to true if the commit was successful\n   */\n  async Commit(): Promise<boolean> {\n    return this.commit();\n  }\n\n  /**\n   * Commit changes to the LMS (SCORM 2004 style) - Synchronous version\n   * @returns \"true\" if the commit was successful, \"false\" otherwise\n   */\n  LMSCommit(): string {\n    try {\n      return String(this._syncCall(\"LMSCommit\", []));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"false\";\n    }\n  }\n\n  /**\n   * Get the last error code (SCORM 1.2 style) - Asynchronous version\n   * @returns Promise that resolves to the last error code as a string\n   */\n  async getLastError(): Promise<string> {\n    try {\n      const result = await this._sendMessage(\"lmsGetLastError\");\n      this._lastError = String(result);\n      return this._lastError;\n    } catch (e) {\n      console.error(\"Error in getLastError:\", e);\n      return \"101\"; // General exception\n    }\n  }\n\n  /**\n   * Get the last error code (SCORM 1.2 style) - Synchronous version\n   * @returns The last error code as a string\n   */\n  lmsGetLastError(): string {\n    try {\n      return String(this._syncCall(\"lmsGetLastError\", []));\n    } catch (e) {\n      return \"101\";\n    }\n  }\n\n  /**\n   * Get the last error code (SCORM 2004 style) - Asynchronous version\n   * @returns Promise that resolves to the last error code as a string\n   */\n  async GetLastError(): Promise<string> {\n    return this.getLastError();\n  }\n\n  /**\n   * Get the last error code (SCORM 2004 style) - Synchronous version\n   * @returns The last error code as a string\n   */\n  LMSGetLastError(): string {\n    try {\n      return String(this._syncCall(\"LMSGetLastError\", []));\n    } catch (e) {\n      return \"101\";\n    }\n  }\n\n  /**\n   * Get the error string for an error code (SCORM 1.2 style) - Asynchronous version\n   * @param errorCode The error code\n   * @returns Promise that resolves to the error string\n   */\n  async getErrorString(errorCode: string | number): Promise<string> {\n    try {\n      const result = await this._sendMessage(\"lmsGetErrorString\", [errorCode]);\n      const errorString = String(result);\n      // Cache the result for synchronous operations\n      this._cache.set(`error_${errorCode}`, errorString);\n      return errorString;\n    } catch (e) {\n      console.error(`Error in getErrorString(${errorCode}):`, e);\n      return \"\";\n    }\n  }\n\n  /**\n   * Get the error string for an error code (SCORM 1.2 style) - Synchronous version\n   * @param errorCode The error code\n   * @returns The error string\n   */\n  lmsGetErrorString(errorCode: string | number): string {\n    try {\n      return String(this._syncCall(\"lmsGetErrorString\", [errorCode]));\n    } catch (e) {\n      return \"No error\";\n    }\n  }\n\n  /**\n   * Get the error string for an error code (SCORM 2004 style) - Asynchronous version\n   * @param errorCode The error code\n   * @returns Promise that resolves to the error string\n   */\n  async GetErrorString(errorCode: string | number): Promise<string> {\n    return this.getErrorString(errorCode);\n  }\n\n  /**\n   * Get the error string for an error code (SCORM 2004 style) - Synchronous version\n   * @param errorCode The error code\n   * @returns The error string\n   */\n  LMSGetErrorString(errorCode: string | number): string {\n    try {\n      return String(this._syncCall(\"LMSGetErrorString\", [errorCode]));\n    } catch (e) {\n      return \"No error\";\n    }\n  }\n\n  /**\n   * Get diagnostic information for an error code (SCORM 1.2 style) - Asynchronous version\n   * @param errorCode The error code\n   * @returns Promise that resolves to the diagnostic information\n   */\n  async getDiagnostic(errorCode: string | number): Promise<string> {\n    try {\n      const result = await this._sendMessage(\"lmsGetDiagnostic\", [errorCode]);\n      const diagnostic = String(result);\n      // Cache the result for synchronous operations\n      this._cache.set(`diagnostic_${errorCode}`, diagnostic);\n      return diagnostic;\n    } catch (e) {\n      console.error(`Error in getDiagnostic(${errorCode}):`, e);\n      return \"\";\n    }\n  }\n\n  /**\n   * Get diagnostic information for an error code (SCORM 1.2 style) - Synchronous version\n   * @param errorCode The error code\n   * @returns The diagnostic information\n   */\n  lmsGetDiagnostic(errorCode: string | number): string {\n    try {\n      return String(this._syncCall(\"lmsGetDiagnostic\", [errorCode]));\n    } catch (e) {\n      return \"No diagnostic information available\";\n    }\n  }\n\n  /**\n   * Get diagnostic information for an error code (SCORM 2004 style) - Asynchronous version\n   * @param errorCode The error code\n   * @returns Promise that resolves to the diagnostic information\n   */\n  async GetDiagnostic(errorCode: string | number): Promise<string> {\n    return this.getDiagnostic(errorCode);\n  }\n\n  /**\n   * Get diagnostic information for an error code (SCORM 2004 style) - Synchronous version\n   * @param errorCode The error code\n   * @returns The diagnostic information\n   */\n  LMSGetDiagnostic(errorCode: string | number): string {\n    try {\n      return String(this._syncCall(\"LMSGetDiagnostic\", [errorCode]));\n    } catch (e) {\n      return \"No diagnostic information available\";\n    }\n  }\n\n  /**\n   * Check if the API is currently initialized - Asynchronous version\n   * @returns Promise that resolves to true if the API is initialized\n   */\n  async isInitialized(): Promise<boolean> {\n    try {\n      const result = await this._sendMessage(\"isInitialized\");\n      this._isInitialized = Boolean(result);\n      return this._isInitialized;\n    } catch (e) {\n      console.error(\"Error in isInitialized:\", e);\n      return this._isInitialized;\n    }\n  }\n\n  /**\n   * Check if the API is currently initialized - Synchronous version\n   * @returns True if the API is initialized, false otherwise\n   */\n  getIsInitialized(): boolean {\n    // In test environments, starting an async operation can cause issues\n    // with unhandled promise rejections, so we'll just return the current value\n    return this._isInitialized;\n  }\n\n  /**\n   * Register an event listener\n   * @param event The event name\n   * @param callback The callback function\n   */\n  on(event: string, callback: (...args: unknown[]) => void): void {\n    if (!this._eventListeners.has(event)) {\n      this._eventListeners.set(event, new Set());\n    }\n\n    const listeners = this._eventListeners.get(event);\n    if (listeners) {\n      listeners.add(callback);\n    }\n  }\n\n  /**\n   * Remove an event listener\n   * @param event The event name\n   * @param callback The callback function\n   */\n  off(event: string, callback: (...args: unknown[]) => void): void {\n    const listeners = this._eventListeners.get(event);\n\n    if (listeners) {\n      listeners.delete(callback);\n\n      if (listeners.size === 0) {\n        this._eventListeners.delete(event);\n      }\n    }\n  }\n}\n\n/**\n * Factory function to create a CrossFrameServer instance\n * @param {BaseAPI} api The API instance to use\n * @param targetOrigin The target origin for postMessage\n * @returns A CrossFrameServer instance\n */\nexport function createCrossFrameServer(api: BaseAPI, targetOrigin?: string): CrossFrameLMS {\n  return new CrossFrameLMS(api, targetOrigin);\n}\n\n/**\n * Factory function to create a CrossFrameClient instance\n * @param targetOrigin The target origin for postMessage\n * @returns A CrossFrameClient instance\n */\nexport function createCrossFrameClient(targetOrigin?: string): CrossFrameAPI {\n  return new CrossFrameAPI(targetOrigin);\n}\n"],"names":["CrossFrameLMS","constructor","api","targetOrigin","this","_targetOrigin","_api","window","addEventListener","_handleMessage","bind","_setupEventForwarding","event","data","messageId","method","_processMessage","source","origin","params","sab","result","error","Error","e","message","stack","String","postMessage","_this","on","_len","arguments","length","args","Array","_key","from","document","querySelectorAll","forEach","frame","contentWindow","CrossFrameAPI","_pendingRequests","Map","_eventListeners","_messageIdCounter","_childFrames","Set","_isInitialized","_lastError","_cache","_sabBuffers","_syncCall","timeoutMs","undefined","SharedArrayBuffer","Int32Array","BYTES_PER_ELEMENT","int32","Date","now","set","parent","status","Atomics","wait","delete","pending","get","console","isFromChildFrame","_handleMethodResponse","add","forwardedMessageId","resolve","reject","setTimeout","has","request","_handleEvent","_forwardEventToChildFrames","store","notify","pendingRequest","_len2","_key2","listeners","listener","allListeners","_sendMessage","Promise","initialize","lmsInitialize","Initialize","LMSInitialize","terminate","success","lmsFinish","Terminate","LMSFinish","getValue","element","value","lmsGetValue","GetValue","LMSGetValue","setValue","lmsSetValue","SetValue","LMSSetValue","commit","lmsCommit","Commit","LMSCommit","getLastError","lmsGetLastError","GetLastError","LMSGetLastError","getErrorString","errorCode","errorString","lmsGetErrorString","GetErrorString","LMSGetErrorString","getDiagnostic","diagnostic","lmsGetDiagnostic","GetDiagnostic","LMSGetDiagnostic","isInitialized","getIsInitialized","callback","off","size"],"mappings":"gCAuRO,MAAMA,cASXC,WAAAA,CAAYC,IAAcC,cAP1BC,KAAiBC,cAAwB,IAQvCD,KAAKE,KAAOJ,IAGRC,eACFC,KAAKC,cAAgBF,cAIvBI,OAAOC,iBAAiB,UAAWJ,KAAKK,eAAeC,KAAKN,OAG5DA,KAAKO,uBACP,CAMQF,cAAAA,CAAeG,OACrB,MAAMC,KAAOD,MAAMC,KAGdA,MAASA,KAAKC,WAAcD,KAAKE,QAKtCX,KAAKY,gBAAgBH,KAAMD,MAAMK,OAAkBL,MAAMM,OAC3D,CAQQF,eAAAA,CAAgBH,KAAmBI,OAAgBC,QACzD,MAAMJ,UAAEA,UAAAC,OAAWA,OAAQI,OAAAA,OAAAC,IAAQA,KAAQP,KACvC,IAAAQ,OACAC,MAEA,IAEF,GAA0E,mBAA9DlB,KAAKE,KAA6CS,QAG5D,MAAUQ,MAAM,UAAUR,2BAF1BM,OAAUjB,KAAKE,KAA6CS,WAAWI,cAIlEK,GAEGF,MADNE,aAAaD,MACP,CACNE,QAASD,EAAEC,QACXC,MAAOF,EAAEE,OAGH,CACND,QAAgBD,EAAPG,GAGf,CAUOV,OAAAW,YAP2B,CAChCd,oBACAO,cACAC,YACAF,SAG2BhB,KAAKC,cAAee,IAAM,CAACA,UAAO,EACjE,CAKQT,qBAAAA,GAAwB,IAAAkB,MAAAzB,KAE9BA,KAAKE,KAAKwB,GAAG,KAAK,SAAClB,OAAkC,IAAAmB,IAAAA,KAAAC,UAAAC,OAAhBC,KAAgBC,MAAAJ,KAAAA,EAAAA,UAAAK,KAAA,EAAAL,KAAAK,KAAAA,OAAhBF,KAAgBE,KAAAJ,GAAAA,UAAAI,MAGpCD,MAAME,KAAKC,SAASC,iBAAiB,WAG7CC,SAASC,QACVA,MAAMC,eACRD,MAAMC,cAAcd,YAClB,CACEhB,YACAsB,WAEFL,MAAKxB,cAET,GAEJ,GACF,EAOK,MAAMsC,cA0DX1C,WAAAA,CAAYE,cAzDZC,KAAQC,cAAwB,IACxBD,KAAAwC,qBAOAC,IACAzC,KAAA0C,oBAAsED,IAC9EzC,KAAQ2C,kBAA4B,EAC5B3C,KAAA4C,iBAAgCC,IACxC7C,KAAQ8C,gBAA0B,EAClC9C,KAAQ+C,WAAqB,IACrB/C,KAAAgD,WAAkCP,IAClCzC,KAAAiD,gBAAkDR,IA4CpD1C,eACFC,KAAKC,cAAgBF,cAIvBI,OAAOC,iBAAiB,UAAWJ,KAAKK,eAAeC,KAAKN,MAC9D,CAhDQkD,SAAAA,CAAUvC,OAAgBI,QAAsC,IAAvBoC,UAAAvB,UAAAC,OAAA,QAAAuB,IAAAxB,UAAA,GAAAA,UAAA,GAAY,IAGvD,IACF,MAAMZ,IAAM,IAAIqC,kBAAkBC,WAAWC,mBACvCC,MAAQ,IAAIF,WAAWtC,KACvBN,UAAY,GAAG+C,KAAKC,cAAc1D,KAAK2C,sBAExC3C,KAAAiD,YAAYU,IAAIjD,UAAWM,KAEhCb,OAAOyD,OAAOpC,YAAY,CAAEd,oBAAWC,cAAQI,cAAQC,SAAOhB,KAAKC,cAAe,CAACe,MAEnF,MAAM6C,OAASC,QAAQC,KAAKP,MAAO,EAAG,EAAGL,WAEpCnD,KAAAiD,YAAYe,OAAOtD,WACxB,MAAMuD,QAAUjE,KAAKwC,iBAAiB0B,IAAIxD,YAAc,CAAC,EAEzD,GADKV,KAAAwC,iBAAiBwB,OAAOtD,WACd,cAAXmD,OACF,MAAU1C,MAAM,SAASR,wBAAwBwC,eAE9C,GAAAc,QAAgB/C,MAAO,MAAO+C,QAAgB/C,MACnD,OAAQ+C,QAAgBhD,aACjBG,GAUD,MAPFA,aAAaD,OACfgD,QAAQjD,MAAM,gCAAgCP,UAAWS,GACzDpB,KAAK+C,WAAa,QAElBoB,QAAQjD,MAAM,wCAAwCP,UAAWS,GACjEpB,KAAK+C,WAAa,OAEd3B,CACR,CACF,CAoBQf,cAAAA,CAAeG,OACrB,MAAMC,KAAOD,MAAMC,KACbI,OAASL,MAAMK,OAGfuD,iBAAmBvD,SAAWV,OAAOyD,QAAU/C,SAAWV,OAYhE,IAREM,KAAKC,gBACY,IAAhBD,KAAKQ,aAAuC,IAAfR,KAAKS,OAClCkD,kBAEDpE,KAAKqE,sBAAsB5D,MAIzBA,KAAKC,WAAaD,KAAKE,QAAUyD,iBAAkB,CAEhDpE,KAAA4C,aAAa0B,IAAIzD,QAGtB,MAAMH,UAAEA,UAAAC,OAAWA,OAAQI,OAAAA,QAAWN,KAChC8D,mBAAqB,aAAa7D,UAGnCV,KAAAwC,iBAAiBmB,IAAIY,mBAAoB,CAC5CC,QAAUvD,SAEDJ,OAAAW,YACL,CACEd,oBACAO,eAEFjB,KAAKC,cACP,EAEFwE,OAASvD,QAEAL,OAAAW,YACL,CACEd,oBACAQ,aAEFlB,KAAKC,cACP,EAEFY,gBAIFV,OAAOyD,OAAOpC,YACZ,CACEd,UAAW6D,mBACX5D,cACAI,eAEFf,KAAKC,eAIPyE,YAAW,KACT,GAAI1E,KAAKwC,iBAAiBmC,IAAIJ,oBAAqB,CACjD,MAAMK,QAAU5E,KAAKwC,iBAAiB0B,IAAIK,oBACrCvE,KAAAwC,iBAAiBwB,OAAOO,oBACzBK,SAAS/D,QACX+D,QAAQ/D,OAAOW,YACb,CACEd,oBACAQ,MAAO,CACLG,QAAS,0CAA0CV,SAGvDX,KAAKC,cAGX,IACC,IACL,CAGIQ,KAAKD,QAAU4D,mBACjBpE,KAAK6E,aAAapE,KAAKD,SAAWC,KAAKqB,MAAQ,IAG/C9B,KAAK8E,2BAA2BrE,KAAKD,MAAOC,KAAKqB,MAAQ,IAE7D,CAMQuC,qBAAAA,CAAsB5D,MAC5B,MAAMC,UAAEA,UAAAO,OAAWA,OAAQC,MAAAA,OAAUT,KACrC,GAAIA,KAAKO,IAAK,CACZ,MAAMwC,MAAQ,IAAIF,WAAW7C,KAAKO,KAC1B8C,QAAAiB,MAAMvB,MAAO,EAAG,GAChBM,QAAAkB,OAAOxB,MAAO,EACxB,CACA,MAAMyB,eAAiBjF,KAAKwC,iBAAiB0B,IAAIxD,WACjD,GAAIuE,eAAgB,CACZ,MAAAT,QAAEA,QAASC,OAAAA,QAAWQ,eACxB/D,MACFuD,OAAOvD,OAEPsD,QAAQvD,QAELjB,KAAAwC,iBAAiBwB,OAAOtD,UAC/B,CACF,CAOQmE,YAAAA,CAAarE,OAA+B,IAAA0E,IAAAA,MAAAtD,UAAAC,OAAbC,KAAaC,MAAAmD,MAAAA,EAAAA,WAAAC,MAAA,EAAAD,MAAAC,MAAAA,QAAbrD,KAAaqD,MAAAvD,GAAAA,UAAAuD,OAClD,MAAMC,UAAYpF,KAAK0C,gBAAgBwB,IAAI1D,OAEvC4E,WACQA,UAAAhD,SAASiD,WACb,IACFA,YAAYvD,YACLV,GACP+C,QAAQjD,MAAM,+BAA+BV,SAAUY,EACzD,KAKJ,MAAMkE,aAAetF,KAAK0C,gBAAgBwB,IAAI,KAE1CoB,cACWA,aAAAlD,SAASiD,WAChB,IACOA,SAAA7E,SAAUsB,YACZV,GACP+C,QAAQjD,MAAM,mCAAmCV,SAAUY,EAC7D,IAGN,CAOQ0D,0BAAAA,CAA2BtE,MAAesB,MAE3C9B,KAAA4C,aAAaR,SAASC,QACrB,IACIA,MAAAb,YACJ,CACEhB,YACAsB,WAEF9B,KAAKC,qBAEAmB,GACC+C,QAAAjD,MAAM,yCAA0CE,EAC1D,IAEJ,CAQQmE,YAAAA,CACN5E,QAEkB,IADlBI,OAAwCa,UAAAC,OAAA,QAAAuB,IAAAxB,UAAA,GAAAA,UAAA,GAAA,GAKtC,MAAkB,oBAAXzB,aACkB,IAAlBA,OAAOyD,QACuB,mBAA9BzD,OAAOyD,OAAOpC,YAGdgE,QAAQhB,QAAQ,IAGlB,IAAIgB,SAAQ,CAAChB,QAASC,UAC3B,MAAM/D,UAAY,GAAG+C,KAAKC,SAAS1D,KAAK2C,sBAGxC3C,KAAKwC,iBAAiBmB,IAAIjD,UAAW,CAAE8D,gBAASC,gBAE5C,IAEFtE,OAAOyD,OAAOpC,YACZ,CACEd,oBACAC,cACAI,eAEFf,KAAKC,eAIPyE,YAAW,KACL1E,KAAKwC,iBAAiBmC,IAAIjE,aACvBV,KAAAwC,iBAAiBwB,OAAOtD,WAC7B+D,OAAWtD,MAAM,0CAA0CR,SAC7D,GACC,WACIS,GAEFpB,KAAAwC,iBAAiBwB,OAAOtD,WAC7B+D,OAAOrD,EACT,IAEJ,CAMA,gBAAMqE,GACJ,MAAMxE,aAAejB,KAAKuF,aAAa,iBAEvC,OADAvF,KAAK8C,eAA4B,SAAX7B,OACfjB,KAAK8C,cACd,CAMA4C,aAAAA,GACM,IACF,OAAc1F,KAAKkD,UAAU,gBAAiB,IAAvC3B,SACAH,GAEA,OADPpB,KAAK+C,WAAa,MACX,OACT,CACF,CAMA,gBAAM4C,GACJ,OAAO3F,KAAKyF,YACd,CAMAG,aAAAA,GACM,IACF,OAAc5F,KAAKkD,UAAU,gBAAiB,IAAvC3B,SACAH,GAEA,OADPpB,KAAK+C,WAAa,MACX,OACT,CACF,CAMA,eAAM8C,GACJ,MACMC,QAAqB,eADN9F,KAAKuF,aAAa,aAKhC,OAHHO,UACF9F,KAAK8C,gBAAiB,GAEjBgD,OACT,CAMAC,SAAAA,GACM,IACF,OAAc/F,KAAKkD,UAAU,YAAa,IAAnC3B,SACAH,GAEA,OADPpB,KAAK+C,WAAa,MACX,OACT,CACF,CAMA,eAAMiD,GACJ,OAAOhG,KAAK6F,WACd,CAMAI,SAAAA,GACM,IACF,OAAcjG,KAAKkD,UAAU,YAAa,IAAnC3B,SACAH,GAEA,OADPpB,KAAK+C,WAAa,MACX,OACT,CACF,CAOA,cAAMmD,CAASC,SACT,IACF,MACMC,YADepG,KAAKuF,aAAa,cAAe,CAACY,UACzC5E,GAGP,OADFvB,KAAAgD,OAAOW,IAAIwC,QAASC,OAClBA,YACAhF,GAGA,OAFPpB,KAAK+C,WAAa,MAClBoB,QAAQjD,MAAM,qBAAqBiF,YAAa/E,GACzC,EACT,CACF,CAOAiF,WAAAA,CAAYF,SACN,IACF,OAAcnG,KAAKkD,UAAU,cAAe,CAACiD,UAAtC5E,SACAH,GAEA,OADPpB,KAAK+C,WAAa,MACX,EACT,CACF,CAOA,cAAMuD,CAASH,SACN,OAAAnG,KAAKkG,SAASC,QACvB,CAOAI,WAAAA,CAAYJ,SACN,IACF,OAAcnG,KAAKkD,UAAU,cAAe,CAACiD,UAAtC5E,SACAH,GAEA,OADPpB,KAAK+C,WAAa,MACX,EACT,CACF,CAQA,cAAMyD,CAASL,QAAiBC,OAC1B,IACI,MACAN,QAAqB,eADN9F,KAAKuF,aAAa,cAAe,CAACY,QAASC,QAMzD,OAJHN,SAEF9F,KAAKgD,OAAOW,IAAIwC,QAAgBC,MAAP7E,IAEpBuE,cACA1E,GAGA,OAFPpB,KAAK+C,WAAa,MAClBoB,QAAQjD,MAAM,qBAAqBiF,YAAYC,UAAWhF,IACnD,CACT,CACF,CAQAqF,WAAAA,CAAYN,QAAiBC,OACvB,IACK,OAAOpG,KAAKkD,UAAU,cAAe,CAACiD,QAASC,QAA/C7E,SACAH,GAEA,OADPpB,KAAK+C,WAAa,MACX,OACT,CACF,CAQA,cAAM2D,CAASP,QAAiBC,OACvB,OAAApG,KAAKwG,SAASL,QAASC,MAChC,CAQAO,WAAAA,CAAYR,QAAiBC,OACvB,IACK,OAAOpG,KAAKkD,UAAU,cAAe,CAACiD,QAASC,QAA/C7E,SACAH,GAEA,OADPpB,KAAK+C,WAAa,MACX,OACT,CACF,CAMA,YAAM6D,GACA,IAEF,MAAkB,eADG5G,KAAKuF,aAAa,mBAEhCnE,GAGA,OAFPpB,KAAK+C,WAAa,MACVoB,QAAAjD,MAAM,mBAAoBE,IAC3B,CACT,CACF,CAMAyF,SAAAA,GACM,IACF,OAAc7G,KAAKkD,UAAU,YAAa,IAAnC3B,SACAH,GAEA,OADPpB,KAAK+C,WAAa,MACX,OACT,CACF,CAMA,YAAM+D,GACJ,OAAO9G,KAAK4G,QACd,CAMAG,SAAAA,GACM,IACF,OAAc/G,KAAKkD,UAAU,YAAa,IAAnC3B,SACAH,GAEA,OADPpB,KAAK+C,WAAa,MACX,OACT,CACF,CAMA,kBAAMiE,GACA,IACF,MAAM/F,aAAejB,KAAKuF,aAAa,mBAEvC,OADKvF,KAAA+C,WAAoB9B,OAAPM,GACXvB,KAAK+C,iBACL3B,GAEA,OADC+C,QAAAjD,MAAM,yBAA0BE,GACjC,KACT,CACF,CAMA6F,eAAAA,GACM,IACF,OAAcjH,KAAKkD,UAAU,kBAAmB,IAAzC3B,SACAH,GACA,MAAA,KACT,CACF,CAMA,kBAAM8F,GACJ,OAAOlH,KAAKgH,cACd,CAMAG,eAAAA,GACM,IACF,OAAcnH,KAAKkD,UAAU,kBAAmB,IAAzC3B,SACAH,GACA,MAAA,KACT,CACF,CAOA,oBAAMgG,CAAeC,WACf,IACF,MACMC,kBADetH,KAAKuF,aAAa,oBAAqB,CAAC8B,YACzC9F,GAGb,OADPvB,KAAKgD,OAAOW,IAAI,SAAS0D,UAAaC,aAC/BA,kBACAlG,GAEA,OADP+C,QAAQjD,MAAM,2BAA2BmG,cAAejG,GACjD,EACT,CACF,CAOAmG,iBAAAA,CAAkBF,WACZ,IACF,OAAcrH,KAAKkD,UAAU,oBAAqB,CAACmE,YAA5C9F,SACAH,GACA,MAAA,UACT,CACF,CAOA,oBAAMoG,CAAeH,WACZ,OAAArH,KAAKoH,eAAeC,UAC7B,CAOAI,iBAAAA,CAAkBJ,WACZ,IACF,OAAcrH,KAAKkD,UAAU,oBAAqB,CAACmE,YAA5C9F,SACAH,GACA,MAAA,UACT,CACF,CAOA,mBAAMsG,CAAcL,WACd,IACF,MACMM,iBADe3H,KAAKuF,aAAa,mBAAoB,CAAC8B,YACzC9F,GAGZ,OADPvB,KAAKgD,OAAOW,IAAI,cAAc0D,UAAaM,YACpCA,iBACAvG,GAEA,OADP+C,QAAQjD,MAAM,0BAA0BmG,cAAejG,GAChD,EACT,CACF,CAOAwG,gBAAAA,CAAiBP,WACX,IACF,OAAcrH,KAAKkD,UAAU,mBAAoB,CAACmE,YAA3C9F,SACAH,GACA,MAAA,qCACT,CACF,CAOA,mBAAMyG,CAAcR,WACX,OAAArH,KAAK0H,cAAcL,UAC5B,CAOAS,gBAAAA,CAAiBT,WACX,IACF,OAAcrH,KAAKkD,UAAU,mBAAoB,CAACmE,YAA3C9F,SACAH,GACA,MAAA,qCACT,CACF,CAMA,mBAAM2G,GACA,IACF,MAAM9G,aAAejB,KAAKuF,aAAa,iBAEvC,OADKvF,KAAA8C,iBAAyB7B,OACvBjB,KAAK8C,qBACL1B,GAEP,OADQ+C,QAAAjD,MAAM,0BAA2BE,GAClCpB,KAAK8C,cACd,CACF,CAMAkF,gBAAAA,GAGE,OAAOhI,KAAK8C,cACd,CAOApB,EAAAA,CAAGlB,MAAeyH,UACXjI,KAAK0C,gBAAgBiC,IAAInE,QAC5BR,KAAK0C,gBAAgBiB,IAAInD,MAAO,IAAIqC,KAGtC,MAAMuC,UAAYpF,KAAK0C,gBAAgBwB,IAAI1D,OACvC4E,WACFA,UAAUd,IAAI2D,SAElB,CAOAC,GAAAA,CAAI1H,MAAeyH,UACjB,MAAM7C,UAAYpF,KAAK0C,gBAAgBwB,IAAI1D,OAEvC4E,YACFA,UAAUpB,OAAOiE,UAEM,IAAnB7C,UAAU+C,MACPnI,KAAA0C,gBAAgBsB,OAAOxD,OAGlC,yGAkBK,SAAgCT,cAC9B,OAAA,IAAIwC,cAAcxC,aAC3B,iCAXgB,SAAuBD,IAAcC,cAC5C,OAAA,IAAIH,cAAcE,IAAKC,aAChC"}