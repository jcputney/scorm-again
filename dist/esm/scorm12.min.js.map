{"version":3,"file":"scorm12.min.js","sources":["../../src/constants/api_constants.ts","../../src/constants/error_codes.ts","../../src/constants/regex.ts","../../src/exceptions.ts","../../src/exceptions/scorm12_exceptions.ts","../../src/cmi/common/base_cmi.ts","../../src/utilities.ts","../../src/cmi/common/validation.ts","../../src/cmi/scorm12/validation.ts","../../src/services/ValidationService.ts","../../src/cmi/common/score.ts","../../src/cmi/aicc/core.ts","../../src/cmi/common/array.ts","../../src/cmi/scorm12/objectives.ts","../../src/cmi/scorm12/student_data.ts","../../src/cmi/scorm12/student_preference.ts","../../src/cmi/scorm12/interactions.ts","../../src/cmi/scorm12/cmi.ts","../../src/cmi/scorm12/nav.ts","../../src/constants/enums.ts","../../src/constants/default_settings.ts","../../src/types/scheduled_commit.ts","../../src/services/HttpService.ts","../../src/services/EventService.ts","../../src/services/SerializationService.ts","../../src/services/LoggingService.ts","../../src/services/ErrorHandlingService.ts","../../src/services/OfflineStorageService.ts","../../src/BaseAPI.ts","../../src/Scorm12API.ts"],"sourcesContent":["interface ErrorDescription {\n  basicMessage: string;\n  detailMessage: string;\n}\n\ninterface ErrorDescriptions {\n  [key: string]: ErrorDescription;\n}\n\ninterface ScormConstants {\n  cmi_children: string;\n  core_children: string;\n  score_children: string;\n  comments_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface AiccConstants extends ScormConstants {\n  student_demographics_children: string;\n  tries_children: string;\n  attempt_records_children: string;\n  paths_children: string;\n}\n\ninterface Scorm2004Constants {\n  cmi_children: string;\n  comments_children: string;\n  score_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  adl_data_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface GlobalConstants {\n  SCORM_TRUE: string;\n  SCORM_FALSE: string;\n  STATE_NOT_INITIALIZED: number;\n  STATE_INITIALIZED: number;\n  STATE_TERMINATED: number;\n}\n\nexport const global_constants: GlobalConstants = {\n  SCORM_TRUE: \"true\",\n  SCORM_FALSE: \"false\",\n  STATE_NOT_INITIALIZED: 0,\n  STATE_INITIALIZED: 1,\n  STATE_TERMINATED: 2,\n};\n\nexport const scorm12_constants: ScormConstants = {\n  // Children lists\n  cmi_children:\n    \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions\",\n  core_children:\n    \"student_id,student_name,lesson_location,credit,lesson_status,entry,score,total_time,lesson_mode,exit,session_time\",\n  score_children: \"raw,min,max\",\n  comments_children: \"content,location,time\",\n  objectives_children: \"id,score,status\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio,language,speed,text\",\n  interactions_children:\n    \"id,objectives,time,type,correct_responses,weighting,student_response,result,latency\",\n  error_descriptions: {\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage: \"No specific error code exists to describe the error.\",\n    },\n    \"201\": {\n      basicMessage: \"Invalid argument error\",\n      detailMessage:\n        \"Indicates that an argument represents an invalid data model element or is otherwise incorrect.\",\n    },\n    \"202\": {\n      basicMessage: \"Element cannot have children\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_children\" for a data model element that does not support the \"_children\" suffix.',\n    },\n    \"203\": {\n      basicMessage: \"Element not an array - cannot have count\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_count\" for a data model element that does not support the \"_count\" suffix.',\n    },\n    \"301\": {\n      basicMessage: \"Not initialized\",\n      detailMessage: \"Indicates that an API call was made before the call to lmsInitialize.\",\n    },\n    \"401\": {\n      basicMessage: \"Not implemented error\",\n      detailMessage:\n        \"The data model element indicated in a call to LMSGetValue or LMSSetValue is valid, but was not implemented by this LMS. SCORM 1.2 defines a set of data model elements as being optional for an LMS to implement.\",\n    },\n    \"402\": {\n      basicMessage: \"Invalid set value, element is a keyword\",\n      detailMessage:\n        'Indicates that LMSSetValue was called on a data model element that represents a keyword (elements that end in \"_children\" and \"_count\").',\n    },\n    \"403\": {\n      basicMessage: \"Element is read only\",\n      detailMessage: \"LMSSetValue was called with a data model element that can only be read.\",\n    },\n    \"404\": {\n      basicMessage: \"Element is write only\",\n      detailMessage: \"LMSGetValue was called on a data model element that can only be written to.\",\n    },\n    \"405\": {\n      basicMessage: \"Incorrect Data Type\",\n      detailMessage:\n        \"LMSSetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a LMSSetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\nexport const aicc_constants: AiccConstants = {\n  ...scorm12_constants,\n  ...{\n    cmi_children:\n      \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions,evaluation\",\n    student_preference_children:\n      \"audio,language,lesson_type,speed,text,text_color,text_location,text_size,video,windows\",\n    student_data_children: \"attempt_number,tries,mastery_score,max_time_allowed,time_limit_action\",\n    student_demographics_children:\n      \"city,class,company,country,experience,familiar_name,instructor_name,title,native_language,state,street_address,telephone,years_experience\",\n    tries_children: \"time,status,score\",\n    attempt_records_children: \"score,lesson_status\",\n    paths_children: \"location_id,date,time,status,why_left,time_in_element\",\n  },\n};\n\nexport const scorm2004_constants: Scorm2004Constants = {\n  // Children lists\n  cmi_children:\n    \"_version,comments_from_learner,comments_from_lms,completion_status,credit,entry,exit,interactions,launch_data,learner_id,learner_name,learner_preference,location,max_time_allowed,mode,objectives,progress_measure,scaled_passing_score,score,session_time,success_status,suspend_data,time_limit_action,total_time\",\n  comments_children: \"comment,timestamp,location\",\n  score_children: \"max,raw,scaled,min\",\n  objectives_children: \"progress_measure,completion_status,success_status,description,score,id\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio_level,audio_captioning,delivery_speed,language\",\n  interactions_children:\n    \"id,type,objectives,timestamp,correct_responses,weighting,learner_response,result,latency,description\",\n  adl_data_children: \"id,store\",\n  error_descriptions: {\n    \"0\": {\n      basicMessage: \"No Error\",\n      detailMessage: \"No error occurred, the previous API call was successful.\",\n    },\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage: \"No specific error code exists to describe the error.\",\n    },\n    \"102\": {\n      basicMessage: \"General Initialization Failure\",\n      detailMessage: \"Call to Initialize failed for an unknown reason.\",\n    },\n    \"103\": {\n      basicMessage: \"Already Initialized\",\n      detailMessage: \"Call to Initialize failed because Initialize was already called.\",\n    },\n    \"104\": {\n      basicMessage: \"Content Instance Terminated\",\n      detailMessage: \"Call to Initialize failed because Terminate was already called.\",\n    },\n    \"111\": {\n      basicMessage: \"General Termination Failure\",\n      detailMessage: \"Call to Terminate failed for an unknown reason.\",\n    },\n    \"112\": {\n      basicMessage: \"Termination Before Initialization\",\n      detailMessage: \"Call to Terminate failed because it was made before the call to Initialize.\",\n    },\n    \"113\": {\n      basicMessage: \"Termination After Termination\",\n      detailMessage: \"Call to Terminate failed because Terminate was already called.\",\n    },\n    \"122\": {\n      basicMessage: \"Retrieve Data Before Initialization\",\n      detailMessage: \"Call to GetValue failed because it was made before the call to Initialize.\",\n    },\n    \"123\": {\n      basicMessage: \"Retrieve Data After Termination\",\n      detailMessage: \"Call to GetValue failed because it was made after the call to Terminate.\",\n    },\n    \"132\": {\n      basicMessage: \"Store Data Before Initialization\",\n      detailMessage: \"Call to SetValue failed because it was made before the call to Initialize.\",\n    },\n    \"133\": {\n      basicMessage: \"Store Data After Termination\",\n      detailMessage: \"Call to SetValue failed because it was made after the call to Terminate.\",\n    },\n    \"142\": {\n      basicMessage: \"Commit Before Initialization\",\n      detailMessage: \"Call to Commit failed because it was made before the call to Initialize.\",\n    },\n    \"143\": {\n      basicMessage: \"Commit After Termination\",\n      detailMessage: \"Call to Commit failed because it was made after the call to Terminate.\",\n    },\n    \"201\": {\n      basicMessage: \"General Argument Error\",\n      detailMessage:\n        \"An invalid argument was passed to an API method (usually indicates that Initialize, Commit or Terminate did not receive the expected empty string argument.\",\n    },\n    \"301\": {\n      basicMessage: \"General Get Failure\",\n      detailMessage:\n        \"Indicates a failed GetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"351\": {\n      basicMessage: \"General Set Failure\",\n      detailMessage:\n        \"Indicates a failed SetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"391\": {\n      basicMessage: \"General Commit Failure\",\n      detailMessage:\n        \"Indicates a failed Commit call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"401\": {\n      basicMessage: \"Undefined Data Model Element\",\n      detailMessage:\n        \"The data model element name passed to GetValue or SetValue is not a valid SCORM data model element.\",\n    },\n    \"402\": {\n      basicMessage: \"Unimplemented Data Model Element\",\n      detailMessage:\n        \"The data model element indicated in a call to GetValue or SetValue is valid, but was not implemented by this LMS. In SCORM 2004, this error would indicate an LMS that is not fully SCORM conformant.\",\n    },\n    \"403\": {\n      basicMessage: \"Data Model Element Value Not Initialized\",\n      detailMessage:\n        \"Attempt to read a data model element that has not been initialized by the LMS or through a SetValue call. This error condition is often reached during normal execution of a SCO.\",\n    },\n    \"404\": {\n      basicMessage: \"Data Model Element Is Read Only\",\n      detailMessage: \"SetValue was called with a data model element that can only be read.\",\n    },\n    \"405\": {\n      basicMessage: \"Data Model Element Is Write Only\",\n      detailMessage: \"GetValue was called on a data model element that can only be written to.\",\n    },\n    \"406\": {\n      basicMessage: \"Data Model Element Type Mismatch\",\n      detailMessage:\n        \"SetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Data Model Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a SetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\n","export type ErrorCode = {\n  [key: string]: number;\n};\n\nexport const global_errors: ErrorCode = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nexport const scorm12_errors: ErrorCode = {\n  ...global_errors,\n  RETRIEVE_BEFORE_INIT: 301,\n  STORE_BEFORE_INIT: 301,\n  COMMIT_BEFORE_INIT: 301,\n  ARGUMENT_ERROR: 201,\n  CHILDREN_ERROR: 202,\n  COUNT_ERROR: 203,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 401,\n  VALUE_NOT_INITIALIZED: 301,\n  INVALID_SET_VALUE: 402,\n  READ_ONLY_ELEMENT: 403,\n  WRITE_ONLY_ELEMENT: 404,\n  TYPE_MISMATCH: 405,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n\nexport const scorm2004_errors: ErrorCode = {\n  ...global_errors,\n  INITIALIZATION_FAILED: 102,\n  INITIALIZED: 103,\n  TERMINATED: 104,\n  TERMINATION_FAILURE: 111,\n  TERMINATION_BEFORE_INIT: 112,\n  MULTIPLE_TERMINATION: 113,\n  MULTIPLE_TERMINATIONS: 113,\n  RETRIEVE_BEFORE_INIT: 122,\n  RETRIEVE_AFTER_TERM: 123,\n  STORE_BEFORE_INIT: 132,\n  STORE_AFTER_TERM: 133,\n  COMMIT_BEFORE_INIT: 142,\n  COMMIT_AFTER_TERM: 143,\n  ARGUMENT_ERROR: 201,\n  GENERAL_GET_FAILURE: 301,\n  GENERAL_SET_FAILURE: 351,\n  GENERAL_COMMIT_FAILURE: 391,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 402,\n  VALUE_NOT_INITIALIZED: 403,\n  READ_ONLY_ELEMENT: 404,\n  WRITE_ONLY_ELEMENT: 405,\n  TYPE_MISMATCH: 406,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n","export const scorm12_regex = {\n  CMIString256: \"^[\\\\s\\\\S]{0,255}$\",\n  CMIString4096: \"^[\\\\s\\\\S]{0,4096}$\",\n  CMITime: \"^(?:[01]\\\\d|2[0123]):(?:[012345]\\\\d):(?:[012345]\\\\d)$\",\n  CMITimespan: \"^([0-9]{2,}):([0-9]{2}):([0-9]{2})(.[0-9]{1,2})?$\",\n\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{0,3})(\\\\.[0-9]*)?$\",\n\n  CMIIdentifier: \"^[\\\\u0021-\\\\u007E\\\\s]{0,255}$\",\n  // Allow storing larger responses for interactions\n  // Some content packages may exceed the 255 character limit\n  // defined in the SCORM 1.2 specification.  The previous\n  // expression truncated these values which resulted in\n  // a \"101: General Exception\" being thrown when long\n  // answers were supplied.  To support these packages we\n  // relax the limitation and accept any length string.\n  CMIFeedback: \"^.*$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMIStatus: \"^(passed|completed|failed|incomplete|browsed)$\",\n  CMIStatus2: \"^(passed|completed|failed|incomplete|browsed|not attempted)$\",\n  CMIExit: \"^(time-out|suspend|logout|)$\",\n  CMIType: \"^(true-false|choice|fill-in|matching|performance|sequencing|likert|numeric)$\",\n  CMIResult: \"^(correct|wrong|unanticipated|neutral|([0-9]{0,3})?(\\\\.[0-9]*)?)$\",\n  NAVEvent:\n    \"^(previous|continue|start|resumeAll|choice|jump|exit|exitAll|abandon|abandonAll|suspendAll|retry|retryAll|_none_)$\",\n  // Data ranges\n  score_range: \"0#100\",\n  audio_range: \"-1#100\",\n  speed_range: \"-100#100\",\n  weighting_range: \"-100#100\",\n  text_range: \"-1#1\",\n};\nexport const aicc_regex = {\n  ...scorm12_regex,\n  ...{\n    // AICC identifiers may contain letters, numbers, underscores,\n    // periods, and hyphens up to 255 characters in length.\n    // The previous expression only allowed \"\\w\" characters which\n    // excluded periods and hyphens.\n    CMIIdentifier: \"^[A-Za-z0-9._-]{1,255}$\",\n  },\n};\nexport const scorm2004_regex = {\n  CMIString200: \"^[\\\\u0000-\\\\uFFFF]{0,200}$\",\n  CMIString250: \"^[\\\\u0000-\\\\uFFFF]{0,250}$\",\n  CMIString1000: \"^[\\\\u0000-\\\\uFFFF]{0,1000}$\",\n  CMIString4000: \"^[\\\\u0000-\\\\uFFFF]{0,4000}$\",\n  CMIString64000: \"^[\\\\u0000-\\\\uFFFF]{0,64000}$\",\n  CMILang: \"^([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?$|^$\",\n\n  CMILangString250: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,250}$)?$\",\n\n  CMILangcr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?}))(.*?)$\",\n\n  CMILangString250cr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?})?(.{0,250})?)?$\",\n\n  CMILangString4000: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,4000}$)?$\",\n\n  CMITime:\n    \"^(19[7-9]{1}[0-9]{1}|20[0-2]{1}[0-9]{1}|203[0-8]{1})((-(0[1-9]{1}|1[0-2]{1}))((-(0[1-9]{1}|[1-2]{1}[0-9]{1}|3[0-1]{1}))(T([0-1]{1}[0-9]{1}|2[0-3]{1})((:[0-5]{1}[0-9]{1})((:[0-5]{1}[0-9]{1})((\\\\.[0-9]{1,6})((Z|([+|-]([0-1]{1}[0-9]{1}|2[0-3]{1})))(:[0-5]{1}[0-9]{1})?)?)?)?)?)?)?)?$\",\n  CMITimespan:\n    \"^P(?:([.,\\\\d]+)Y)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)W)?(?:([.,\\\\d]+)D)?(?:T?(?:([.,\\\\d]+)H)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)S)?)?$\",\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{1,5})(\\\\.[0-9]{1,18})?$\",\n  CMIIdentifier: \"^\\\\S{1,250}[a-zA-Z0-9]$\",\n  CMIShortIdentifier: \"^[\\\\w\\\\.\\\\-\\\\_]{1,250}$\",\n  CMILongIdentifier: \"^(?:(?!urn:)\\\\S{1,4000}|urn:[A-Za-z0-9-]{1,31}:\\\\S{1,4000}|.{1,4000})$\",\n  // need to re-examine this\n  CMIFeedback: \"^.*$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  CMIIndexStore: \".N(\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMICStatus: \"^(completed|incomplete|not attempted|unknown)$\",\n  CMISStatus: \"^(passed|failed|unknown)$\",\n  CMIExit: \"^(time-out|suspend|logout|normal)$\",\n  CMIType:\n    \"^(true-false|choice|fill-in|long-fill-in|matching|performance|sequencing|likert|numeric|other)$\",\n  CMIResult: \"^(correct|incorrect|unanticipated|neutral|-?([0-9]{1,4})(\\\\.[0-9]{1,18})?)$\",\n  NAVEvent:\n    \"^(start|resumeAll|previous|continue|exit|exitAll|abandon|abandonAll|suspendAll|retry|retryAll|_none_|(\\\\{target=(?<choice_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?choice|(\\\\{target=(?<jump_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?jump)$\",\n\n  NAVBoolean: \"^(unknown|true|false)$\",\n  NAVTarget: \"^{target=\\\\S{0,}[a-zA-Z0-9-_]+}$\",\n  // Data ranges\n  scaled_range: \"-1#1\",\n  audio_range: \"0#999.9999999\",\n  speed_range: \"0#999.9999999\",\n  text_range: \"-1#1\",\n  progress_range: \"0#1\",\n};\n","type APIError = {\n  errorCode: number;\n  errorMessage: string;\n  detailedMessage: string;\n};\n\nexport class BaseScormValidationError extends Error {\n  constructor(CMIElement: string, errorCode: number) {\n    super(`${CMIElement} : ${errorCode.toString()}`);\n    this._errorCode = errorCode;\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, BaseScormValidationError.prototype);\n  }\n\n  private readonly _errorCode: number;\n\n  /**\n   * Getter for _errorCode\n   * @return {number}\n   */\n  get errorCode(): number {\n    return this._errorCode;\n  }\n}\n\n/**\n * Base Validation Exception\n */\nexport class ValidationError extends BaseScormValidationError implements APIError {\n  /**\n   * Constructor to take in an error message and code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   * @param {string} errorMessage\n   * @param {string} detailedMessage\n   */\n  constructor(\n    CMIElement: string,\n    errorCode: number,\n    errorMessage: string,\n    detailedMessage?: string,\n  ) {\n    super(CMIElement, errorCode);\n    this.message = `${CMIElement} : ${errorMessage}`;\n    this._errorMessage = errorMessage;\n    if (detailedMessage) {\n      this._detailedMessage = detailedMessage;\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  private readonly _errorMessage: string;\n  private readonly _detailedMessage: string = \"\";\n\n  /**\n   * Getter for _errorMessage\n   * @return {string}\n   */\n  get errorMessage(): string {\n    return this._errorMessage;\n  }\n\n  /**\n   * Getter for _detailedMessage\n   * @return {string}\n   */\n  get detailedMessage(): string {\n    return this._detailedMessage;\n  }\n}\n","import { ValidationError } from \"../exceptions\";\nimport { scorm12_constants } from \"../constants/api_constants\";\n\nconst scorm12_errors = scorm12_constants.error_descriptions;\n\n/**\n * SCORM 1.2 Validation Error\n */\nexport class Scorm12ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm12_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm12_errors[String(errorCode)]?.basicMessage || \"Unknown error\",\n        scorm12_errors[String(errorCode)]?.detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm12_errors[\"101\"]?.basicMessage ?? \"General error\",\n        scorm12_errors[\"101\"]?.detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm12ValidationError.prototype);\n  }\n}\n","/**\n * Base class for API cmi objects\n */\nexport abstract class BaseCMI {\n  jsonString = false;\n  protected readonly _cmi_element: string;\n  protected _initialized = false;\n\n  /**\n   * Constructor for BaseCMI\n   * @param {string} cmi_element\n   */\n  constructor(cmi_element: string) {\n    this._cmi_element = cmi_element;\n  }\n\n  /**\n   * Getter for _initialized\n   * @return {boolean}\n   */\n  get initialized(): boolean {\n    return this._initialized;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize(): void {\n    this._initialized = true;\n  }\n\n  abstract reset(): void;\n}\n\n/**\n * Base class for cmi root objects\n */\nexport abstract class BaseRootCMI extends BaseCMI {\n  protected _start_time: number | undefined;\n\n  /**\n   * Start time of the course\n   * @type {number | undefined}\n   * @protected\n   */\n  get start_time(): number | undefined {\n    return this._start_time;\n  }\n\n  /**\n   * Setter for start_time. Can only be called once.\n   */\n  setStartTime(): void {\n    if (this._start_time === undefined) {\n      this._start_time = new Date().getTime();\n    } else {\n      throw new Error(\"Start time has already been set.\");\n    }\n  }\n\n  abstract getCurrentTotalTime(): string;\n}\n","/**\n * Constants for time conversion calculations.\n * These are used throughout the codebase for converting between different time formats.\n */\nexport const SECONDS_PER_SECOND = 1.0;\nexport const SECONDS_PER_MINUTE = 60;\nexport const SECONDS_PER_HOUR = 60 * SECONDS_PER_MINUTE;\nexport const SECONDS_PER_DAY = 24 * SECONDS_PER_HOUR;\n\ntype Designation = {\n  [key: string]: number;\n};\n\n/**\n * A record with string keys and unknown values.\n * This is a more type-safe alternative to using `any`.\n */\nexport type StringKeyMap = Record<string, unknown>;\n\nconst designations: Designation = {\n  D: SECONDS_PER_DAY,\n  H: SECONDS_PER_HOUR,\n  M: SECONDS_PER_MINUTE,\n  S: SECONDS_PER_SECOND,\n};\n\n/**\n * Converts a number of seconds to a formatted time string in HH:MM:SS format.\n * This function handles decimal seconds and ensures proper formatting with leading zeros.\n *\n * @param {number|null} totalSeconds - The total number of seconds to convert. If null or negative, returns \"00:00:00\".\n * @return {string} A formatted time string in HH:MM:SS format, with up to 2 decimal places for seconds if applicable.\n *\n * @example\n * // Returns \"01:30:45\"\n * getSecondsAsHHMMSS(5445);\n *\n * @example\n * // Returns \"00:00:30.5\"\n * getSecondsAsHHMMSS(30.5);\n *\n * @example\n * // Returns \"00:00:00\"\n * getSecondsAsHHMMSS(null);\n */\nexport const getSecondsAsHHMMSS = memoize((totalSeconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!totalSeconds || totalSeconds <= 0) {\n    return \"00:00:00\";\n  }\n\n  const hours = Math.floor(totalSeconds / SECONDS_PER_HOUR);\n  const dateObj = new Date(totalSeconds * 1000);\n  const minutes = dateObj.getUTCMinutes();\n  // make sure we add any possible decimal value\n  const seconds = dateObj.getSeconds();\n  const ms = totalSeconds % 1.0;\n  let msStr = \"\";\n\n  if (countDecimals(ms) > 0) {\n    if (countDecimals(ms) > 2) {\n      msStr = ms.toFixed(2);\n    } else {\n      msStr = String(ms);\n    }\n\n    msStr = \".\" + msStr.split(\".\")[1];\n  }\n\n  return (hours + \":\" + minutes + \":\" + seconds).replace(/\\b\\d\\b/g, \"0$&\") + msStr;\n});\n\n/**\n * Converts a number of seconds to an ISO 8601 duration string (e.g., \"PT1H30M45S\").\n * This function handles the complexity of formatting according to the ISO 8601 standard,\n * including the proper placement of the \"T\" separator for time components.\n *\n * @param {number|null} seconds - The number of seconds to convert. If null or negative, returns \"PT0S\".\n * @return {string} An ISO 8601 formatted duration string.\n *\n * @example\n * // Returns \"PT1H30M45S\" (1 hour, 30 minutes, 45 seconds)\n * getSecondsAsISODuration(5445);\n *\n * @example\n * // Returns \"PT30.5S\" (30.5 seconds)\n * getSecondsAsISODuration(30.5);\n *\n * @example\n * // Returns \"P1DT1H\" (1 day, 1 hour)\n * getSecondsAsISODuration(90000);\n *\n * @example\n * // Returns \"PT0S\" (0 seconds)\n * getSecondsAsISODuration(null);\n */\nexport const getSecondsAsISODuration = memoize((seconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!seconds || seconds <= 0) {\n    return \"PT0S\";\n  }\n\n  let duration = \"P\";\n  let remainder = seconds;\n\n  // Convert to array of entries and use functional methods\n  const designationEntries = Object.entries(designations);\n\n  // Process each time designation\n  designationEntries.forEach(([designationsKey, current_seconds]) => {\n    let value = Math.floor(remainder / current_seconds);\n    remainder = remainder % current_seconds;\n\n    // Limit decimal places\n    if (countDecimals(remainder) > 2) {\n      remainder = Number(Number(remainder).toFixed(2));\n    }\n\n    // If we have anything left in the remainder, and we're currently adding\n    // seconds to the duration, go ahead and add the decimal to the seconds\n    if (designationsKey === \"S\" && remainder > 0) {\n      value += remainder;\n    }\n\n    if (value) {\n      // Add the 'T' separator for time components if needed\n      const needsTimeSeparator =\n        (duration.indexOf(\"D\") > 0 || [\"H\", \"M\", \"S\"].includes(designationsKey)) &&\n        duration.indexOf(\"T\") === -1;\n\n      if (needsTimeSeparator) {\n        duration += \"T\";\n      }\n\n      duration += `${value}${designationsKey}`;\n    }\n  });\n\n  return duration;\n});\n\n/**\n * Converts a time string in HH:MM:SS format to the equivalent number of seconds.\n * This function is flexible and can handle various input types, converting them to strings as needed.\n *\n * @param {string|number|boolean|null} timeString - The time string to convert, typically in HH:MM:SS format.\n *                                                 If not a string, it will be converted to one.\n *                                                 If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} timeRegex - The regular expression used to validate the time string format.\n *                                    If a string is provided, it will be converted to a RegExp.\n * @return {number} The total number of seconds represented by the time string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getTimeAsSeconds(\"01:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getTimeAsSeconds(\"invalid\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 30 (converts number to string \"30\" then parses as 0:0:30)\n * getTimeAsSeconds(30, /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport const getTimeAsSeconds = memoize(\n  (timeString: string | number | boolean | null, timeRegex: RegExp | string): number => {\n    if (typeof timeString === \"number\" || typeof timeString === \"boolean\") {\n      timeString = String(timeString);\n    }\n    if (typeof timeRegex === \"string\") {\n      timeRegex = new RegExp(timeRegex);\n    }\n    if (!timeString) {\n      return 0;\n    }\n\n    if (!timeString.match(timeRegex)) {\n      // If the string represents a simple number, treat it as seconds\n      if (/^\\d+(?:\\.\\d+)?$/.test(timeString)) {\n        return Number(timeString);\n      }\n      return 0;\n    }\n\n    const parts = timeString.split(\":\");\n    const hours = Number(parts[0]);\n    const minutes = Number(parts[1]);\n    const seconds = Number(parts[2]);\n    return hours * 3600 + minutes * 60 + seconds;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (timeString, timeRegex) => {\n    const timeStr = typeof timeString === \"string\" ? timeString : String(timeString ?? \"\");\n    const regexStr = typeof timeRegex === \"string\" ? timeRegex : (timeRegex?.toString() ?? \"\");\n    return `${timeStr}:${regexStr}`;\n  },\n);\n\n/**\n * Converts an ISO 8601 duration string (e.g., \"PT1H30M45S\") to the equivalent number of seconds.\n * This function parses the duration string using a regular expression to extract years, days,\n * hours, minutes, and seconds components.\n *\n * @param {string|null} duration - The ISO 8601 duration string to convert.\n *                                If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n *                                       The regex should have capture groups for years, days, hours, minutes, and seconds.\n * @return {number} The total number of seconds represented by the duration string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getDurationAsSeconds(\"PT1H30M45S\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 90000 (1 day, 1 hour)\n * getDurationAsSeconds(\"P1DT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getDurationAsSeconds(\"invalid\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport const getDurationAsSeconds = memoize(\n  (duration: string | null, durationRegex: RegExp | string): number => {\n    if (typeof durationRegex === \"string\") {\n      durationRegex = new RegExp(durationRegex);\n    }\n\n    if (!duration || !duration?.match?.(durationRegex)) {\n      return 0;\n    }\n\n    const [, years, _, , days, hours, minutes, seconds] =\n      new RegExp(durationRegex).exec?.(duration) ?? [];\n    let result = 0.0;\n    result += Number(seconds) || 0.0;\n    result += Number(minutes) * 60.0 || 0.0;\n    result += Number(hours) * 3600.0 || 0.0;\n    result += Number(days) * (60 * 60 * 24.0) || 0.0;\n    result += Number(years) * (60 * 60 * 24 * 365.0) || 0.0;\n    return result;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (duration, durationRegex) => {\n    const durationStr = duration ?? \"\";\n    const regexStr =\n      typeof durationRegex === \"string\" ? durationRegex : (durationRegex?.toString() ?? \"\");\n    return `${durationStr}:${regexStr}`;\n  },\n);\n\n/**\n * Validates ISO 8601 duration format according to SCORM 2004 specification\n * @param {string} duration - The duration string to validate\n * @return {boolean} - True if valid ISO 8601 duration format\n */\nexport const validateISO8601Duration = memoize(\n  (duration: string, durationRegex: RegExp | string): boolean => {\n    if (typeof durationRegex === \"string\") {\n      durationRegex = new RegExp(durationRegex);\n    }\n\n    return !(!duration || !duration?.match?.(durationRegex));\n  },\n);\n\n/**\n * Adds together two ISO 8601 duration strings and returns the result as a new ISO 8601 duration string.\n * This function works by converting both durations to seconds, adding them together, and then\n * converting the result back to an ISO 8601 duration string.\n *\n * @param {string} first - The first ISO 8601 duration string.\n * @param {string} second - The second ISO 8601 duration string.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n * @return {string} A new ISO 8601 duration string representing the sum of the two input durations.\n *\n * @example\n * // Returns \"PT2H\" (1 hour + 1 hour = 2 hours)\n * addTwoDurations(\"PT1H\", \"PT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"PT1H30M\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addTwoDurations(\"PT1H\", \"PT30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"P1DT1H30M\" (1 day + 1 hour and 30 minutes = 1 day, 1 hour, and 30 minutes)\n * addTwoDurations(\"P1D\", \"PT1H30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport function addTwoDurations(\n  first: string,\n  second: string,\n  durationRegex: RegExp | string,\n): string {\n  const regex: RegExp =\n    typeof durationRegex === \"string\" ? new RegExp(durationRegex) : durationRegex;\n  return getSecondsAsISODuration(\n    getDurationAsSeconds(first, regex) + getDurationAsSeconds(second, regex),\n  );\n}\n\n/**\n * Adds together two time strings in HH:MM:SS format and returns the result as a new time string.\n * This function works by converting both time strings to seconds, adding them together, and then\n * converting the result back to an HH:MM:SS format.\n *\n * @param {string} first - The first time string in HH:MM:SS format.\n * @param {string} second - The second time string in HH:MM:SS format.\n * @param {RegExp|string} timeRegex - The regular expression used to validate and parse the time strings.\n *                                   If a string is provided, it will be converted to a RegExp.\n * @return {string} A new time string in HH:MM:SS format representing the sum of the two input times.\n *\n * @example\n * // Returns \"02:00:00\" (1 hour + 1 hour = 2 hours)\n * addHHMMSSTimeStrings(\"01:00:00\", \"01:00:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:00\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:45\" (1 hour + 30 minutes and 45 seconds = 1 hour, 30 minutes, and 45 seconds)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport function addHHMMSSTimeStrings(\n  first: string,\n  second: string,\n  timeRegex: RegExp | string,\n): string {\n  if (typeof timeRegex === \"string\") {\n    timeRegex = new RegExp(timeRegex);\n  }\n  return getSecondsAsHHMMSS(\n    getTimeAsSeconds(first, timeRegex) + getTimeAsSeconds(second, timeRegex),\n  );\n}\n\n/**\n * Flattens a nested JSON object into a flat object with dot notation for nested properties.\n * This function recursively traverses the object and creates new keys using dot notation\n * for nested objects and bracket notation for arrays.\n *\n * @param {StringKeyMap} data - The nested object to flatten.\n * @return {StringKeyMap} A flattened object where nested properties are represented with dot notation.\n *\n * @example\n * // Returns { \"a\": 1, \"b.c\": 2, \"b.d\": 3, \"e[0]\": 4, \"e[1]\": 5 }\n * flatten({\n *   a: 1,\n *   b: { c: 2, d: 3 },\n *   e: [4, 5]\n * });\n *\n * @example\n * // Returns { \"\": [] } for an empty array\n * flatten([]);\n *\n * @example\n * // Returns { \"\": {} } for an empty object\n * flatten({});\n */\nexport function flatten(data: StringKeyMap): StringKeyMap {\n  const result: StringKeyMap = {};\n\n  /**\n   * Recurse through the object\n   * @param {*} cur\n   * @param {*} prop\n   */\n  function recurse(cur: any, prop: any) {\n    if (Object(cur) !== cur) {\n      result[prop] = cur;\n    } else if (Array.isArray(cur)) {\n      // Use forEach instead of for loop\n      cur.forEach((item, i) => {\n        recurse(item, `${prop}[${i}]`);\n      });\n\n      if (cur.length === 0) result[prop] = [];\n    } else {\n      const keys = Object.keys(cur).filter((p) => Object.prototype.hasOwnProperty.call(cur, p));\n\n      const isEmpty = keys.length === 0;\n\n      // Use forEach instead of for...in loop\n      keys.forEach((p) => {\n        recurse(cur[p], prop ? `${prop}.${p}` : p);\n      });\n\n      if (isEmpty && prop) result[prop] = {};\n    }\n  }\n\n  recurse(data, \"\");\n  return result;\n}\n\n/**\n * Converts a flattened object back into a nested object structure.\n * This function is the inverse of `flatten()`. It parses dot notation and bracket notation\n * in property names to recreate the original nested structure.\n *\n * @param {StringKeyMap} data - The flattened object to unflatten.\n * @return {object} A nested object recreated from the flattened structure.\n *\n * @example\n * // Returns { a: 1, b: { c: 2, d: 3 }, e: [4, 5] }\n * unflatten({\n *   \"a\": 1,\n *   \"b.c\": 2,\n *   \"b.d\": 3,\n *   \"e[0]\": 4,\n *   \"e[1]\": 5\n * });\n *\n * @example\n * // Handles array indices correctly\n * unflatten({\n *   \"users[0].name\": \"John\",\n *   \"users[0].email\": \"john@example.com\",\n *   \"users[1].name\": \"Jane\",\n *   \"users[1].email\": \"jane@example.com\"\n * });\n * // Returns:\n * // {\n * //   users: [\n * //     { name: \"John\", email: \"john@example.com\" },\n * //     { name: \"Jane\", email: \"jane@example.com\" }\n * //   ]\n * // }\n */\nexport function unflatten(data: StringKeyMap): object {\n  \"use strict\";\n\n  if (Object(data) !== data || Array.isArray(data)) return data;\n  const result: StringKeyMap = {};\n\n  // Regex pattern for parsing property paths\n  const pattern = /\\.?([^.[\\]]+)|\\[(\\d+)]/g;\n\n  // Get all own properties and process them\n  Object.keys(data)\n    .filter((p) => Object.prototype.hasOwnProperty.call(data, p))\n    .forEach((p) => {\n      let cur = result;\n      let prop = \"\";\n\n      // Create a new regex instance for each property to reset lastIndex\n      const regex = new RegExp(pattern);\n\n      // Process all matches in the property path\n      Array.from({ length: p.match(new RegExp(pattern, \"g\"))?.length ?? 0 }, () =>\n        regex.exec(p),\n      ).forEach((m) => {\n        if (m) {\n          // Create array or object as needed\n          cur = (cur[prop] ?? (cur[prop] = m[2] ? [] : ({} as StringKeyMap))) as StringKeyMap;\n          prop = m[2] || m[1] || \"\";\n        }\n      });\n\n      cur[prop] = data[p];\n    });\n\n  return (result[\"\"] ?? result) as object;\n}\n\n/**\n * Counts the number of decimal places in a number.\n * This function handles both integer and floating-point numbers.\n *\n * @param {number} num - The number to analyze.\n * @return {number} The number of decimal places. Returns 0 for integers or if the number doesn't have a decimal point.\n *\n * @example\n * // Returns 0\n * countDecimals(42);\n *\n * @example\n * // Returns 2\n * countDecimals(3.14);\n *\n * @example\n * // Returns 5\n * countDecimals(1.23456);\n */\nexport function countDecimals(num: number): number {\n  if (Math.floor(num) === num || String(num)?.indexOf?.(\".\") < 0) return 0;\n  const parts = num.toString().split(\".\")?.[1];\n  return parts?.length ?? 0;\n}\n\n/**\n * Formats SCORM messages for consistent and readable logging.\n * This function pads the function name and CMI element to create aligned log messages\n * that are easier to read in log files or console output.\n *\n * @param {string} functionName - The name of the function that generated the message.\n * @param {string} message - The message content to be logged.\n * @param {string} [CMIElement] - Optional. The CMI element related to the message.\n * @return {string} A formatted message string with consistent padding.\n *\n * @example\n * // Returns \"initialize          : Successfully initialized\"\n * formatMessage(\"initialize\", \"Successfully initialized\");\n *\n * @example\n * // Returns \"getValue            : cmi.core.student_id                                             : 12345\"\n * formatMessage(\"getValue\", \"12345\", \"cmi.core.student_id\");\n *\n * @example\n * // Returns \"setValue            : cmi.core.lesson_status                                          : completed\"\n * formatMessage(\"setValue\", \"completed\", \"cmi.core.lesson_status\");\n */\nexport function formatMessage(functionName: string, message: string, CMIElement?: string): string {\n  const baseLength = 20;\n\n  // Use string padding instead of loops\n  const paddedFunction = functionName.padEnd(baseLength);\n  let messageString = `${paddedFunction}: `;\n\n  if (CMIElement) {\n    const CMIElementBaseLength = 70;\n    // Add CMIElement and pad to the required length\n    messageString += CMIElement;\n    messageString = messageString.padEnd(CMIElementBaseLength);\n  }\n\n  // Add the message (or empty string if null/undefined)\n  messageString += message ?? \"\";\n\n  return messageString;\n}\n\n/**\n * Checks if a string contains a specific pattern using regular expression matching.\n * This function is a wrapper around JavaScript's String.match() method that handles\n * null/undefined values gracefully.\n *\n * @param {string} str - The string to search within. If null or undefined, returns false.\n * @param {string} tester - The pattern to search for. Can be a regular expression pattern.\n * @return {boolean} True if the pattern is found in the string, false otherwise.\n *\n * @example\n * // Returns true\n * stringMatches(\"Hello, world!\", \"world\");\n *\n * @example\n * // Returns true\n * stringMatches(\"The quick brown fox\", \"\\\\w+\\\\s+\\\\w+\");\n *\n * @example\n * // Returns false\n * stringMatches(\"Hello, world!\", \"universe\");\n *\n * @example\n * // Returns false (handles null gracefully)\n * stringMatches(null, \"test\");\n */\nexport function stringMatches(str: string | null | undefined, tester: string): boolean {\n  if (typeof str !== \"string\") {\n    return false;\n  }\n  return new RegExp(tester).test(str);\n}\n\n/**\n * Creates a memoized (cached) version of a function for performance optimization.\n * This function caches the results of previous calls with the same arguments,\n * avoiding redundant calculations for repeated calls with the same input.\n *\n * @template T - The type of the function to memoize\n * @param {T} fn - The function to memoize\n * @param {Function} [keyFn] - Optional function to generate a custom cache key.\n *                           Useful for functions with complex arguments that can't be serialized.\n * @return {T} A memoized version of the input function with the same signature\n *\n * @example\n * // Basic usage with a simple function\n * const memoizedAdd = memoize((a, b) => {\n *   console.log('Calculating...');\n *   return a + b;\n * });\n *\n * memoizedAdd(1, 2); // Logs \"Calculating...\" and returns 3\n * memoizedAdd(1, 2); // Returns 3 without logging (uses cached result)\n *\n * @example\n * // Using a custom key function for objects that can't be serialized\n * const memoizedProcessUser = memoize(\n *   (user) => {\n *     console.log('Processing user...');\n *     return { ...user, processed: true };\n *   },\n *   (user) => user.id // Use user.id as the cache key\n * );\n *\n * memoizedProcessUser({ id: 123, name: 'John' }); // Logs and processes\n * memoizedProcessUser({ id: 123, name: 'John' }); // Uses cached result\n */\nexport function memoize<T extends (...args: any[]) => any>(\n  fn: T,\n  keyFn?: (...args: Parameters<T>) => string,\n): T {\n  const cache = new Map<string, ReturnType<T>>();\n\n  return ((...args: Parameters<T>): ReturnType<T> => {\n    const key = keyFn ? keyFn(...args) : JSON.stringify(args);\n\n    return cache.has(key)\n      ? (cache.get(key) as ReturnType<T>)\n      : (() => {\n          const result = fn(...args);\n          cache.set(key, result);\n          return result;\n        })();\n  }) as T;\n}\n","import { BaseScormValidationError } from \"../../exceptions\";\nimport { memoize } from \"../../utilities\";\n\n/**\n * Check if the value matches the proper format. If not, throw proper error code.\n *\n * @param {string} value\n * @param {string} regexPattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @param {boolean} [allowEmptyString]\n * @return {boolean}\n */\nexport const checkValidFormat = memoize(\n  (\n    CMIElement: string,\n    value: string,\n    regexPattern: string | RegExp, // We accept either a string or a RegExp object to allow the usage of flags.\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n    allowEmptyString?: boolean,\n  ): boolean => {\n    // noinspection SuspiciousTypeOfGuard\n    if (typeof value !== \"string\") {\n      return false;\n    }\n    const formatRegex = new RegExp(regexPattern);\n    const matches = value.match(formatRegex);\n    if (allowEmptyString && value === \"\") {\n      return true;\n    }\n    if (value === undefined || !matches || matches[0] === \"\") {\n      throw new errorClass(CMIElement, errorCode);\n    }\n    return true;\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, regexPattern, errorCode, _errorClass, allowEmptyString) => {\n    // Use typeof for non-string values to ensure consistent cache keys\n    // noinspection SuspiciousTypeOfGuard\n    const valueKey = typeof value === \"string\" ? value : `[${typeof value}]`;\n    return `${CMIElement}:${valueKey}:${regexPattern}:${errorCode}:${allowEmptyString || false}`;\n  },\n);\n\n/**\n * Check if the value matches the proper range. If not, throw proper error code.\n *\n * @param {any} value\n * @param {string} rangePattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @return {boolean}\n */\nexport const checkValidRange = memoize(\n  (\n    CMIElement: string,\n    value: any,\n    rangePattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean => {\n    const ranges = rangePattern.split(\"#\");\n    value = value * 1.0;\n    if (ranges[0] && value >= ranges[0]) {\n      if (ranges[1] && (ranges[1] === \"*\" || value <= ranges[1])) {\n        return true;\n      } else {\n        throw new errorClass(CMIElement, errorCode);\n      }\n    } else {\n      throw new errorClass(CMIElement, errorCode);\n    }\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, rangePattern, errorCode, _errorClass) =>\n    `${CMIElement}:${value}:${rangePattern}:${errorCode}`,\n);\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string | RegExp, // We accept either a string or a RegExp object to allow the usage of flags.\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm12_errors.TYPE_MISMATCH as number,\n    Scorm12ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidRange(\n  CMIElement: string,\n  value: any,\n  rangePattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  if (!allowEmptyString && value === \"\") {\n    throw new Scorm12ValidationError(CMIElement, scorm12_errors.VALUE_OUT_OF_RANGE as number);\n  }\n\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm12_errors.VALUE_OUT_OF_RANGE as number,\n    Scorm12ValidationError,\n  );\n}\n","import { BaseScormValidationError } from \"../exceptions\";\nimport { checkValidFormat, checkValidRange } from \"../cmi/common/validation\";\nimport { check12ValidFormat, check12ValidRange } from \"../cmi/scorm12/validation\";\nimport { scorm12_regex } from \"../constants/regex\";\nimport { scorm12_errors } from \"../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../exceptions/scorm12_exceptions\";\n\n/**\n * Service for validating CMI data model properties\n */\nexport class ValidationService {\n  /**\n   * Validates a score property (raw, min, max)\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @param {string} decimalRegex - The regex pattern for decimal validation\n   * @param {string | false} scoreRange - The range pattern for score validation, or false if no range validation is needed\n   * @param {number} invalidTypeCode - The error code for invalid type\n   * @param {number} invalidRangeCode - The error code for invalid range\n   * @param {typeof BaseScormValidationError} errorClass - The error class to use for validation errors\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScore(\n    CMIElement: string,\n    value: string,\n    decimalRegex: string,\n    scoreRange: string | false,\n    invalidTypeCode: number,\n    invalidRangeCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean {\n    return (\n      checkValidFormat(CMIElement, value, decimalRegex, invalidTypeCode, errorClass) &&\n      (!scoreRange || checkValidRange(CMIElement, value, scoreRange, invalidRangeCode, errorClass))\n    );\n    // This line should never be reached due to exceptions being thrown\n  }\n\n  /**\n   * Validates a SCORM 1.2 audio property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Audio(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.audio_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 language property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Language(CMIElement: string, value: string): boolean {\n    return check12ValidFormat(CMIElement, value, scorm12_regex.CMIString256);\n  }\n\n  /**\n   * Validates a SCORM 1.2 speed property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Speed(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.speed_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 text property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Text(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.text_range)\n    );\n  }\n\n  /**\n   * Validates if a property is read-only\n   *\n   * @param {string} CMIElement\n   * @param {boolean} initialized - Whether the object is initialized\n   * @throws {BaseScormValidationError} - Throws an error if the object is initialized\n   */\n  validateReadOnly(CMIElement: string, initialized: boolean): void {\n    if (initialized) {\n      throw new Scorm12ValidationError(CMIElement, scorm12_errors.READ_ONLY_ELEMENT as number);\n    }\n  }\n}\n\n// Export a singleton instance of the ValidationService\nexport const validationService = new ValidationService();\n","import { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"./base_cmi\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { validationService } from \"../../services/ValidationService\";\nimport { ScoreObject } from \"../../types/api_types\";\n\n/**\n * Base class for cmi *.score objects\n */\nexport class CMIScore extends BaseCMI {\n  private readonly __children: string;\n  private readonly __score_range: string | false;\n  private readonly __invalid_error_code: number;\n  private readonly __invalid_type_code: number;\n  private readonly __invalid_range_code: number;\n  private readonly __decimal_regex: string;\n  private readonly __error_class: typeof BaseScormValidationError;\n  protected _raw = \"\";\n  protected _min = \"\";\n  protected _max: string;\n\n  /**\n   * Constructor for *.score\n   * @param {\n   *     score_children: string,\n   *     score_range: string,\n   *     max: string,\n   *     invalidErrorCode: number,\n   *     invalidTypeCode: number,\n   *     invalidRangeCode: number,\n   *     decimalRegex: string,\n   *     errorClass: typeof BaseScormValidationError\n   * } params\n   */\n  constructor(params: {\n    CMIElement: string;\n    score_children?: string;\n    score_range?: string;\n    max?: string;\n    invalidErrorCode?: number;\n    invalidTypeCode?: number;\n    invalidRangeCode?: number;\n    decimalRegex?: string;\n    errorClass: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n\n    this.__children = params.score_children || scorm12_constants.score_children;\n    this.__score_range = !params.score_range ? false : scorm12_regex.score_range;\n    this._max = params.max || params.max === \"\" ? params.max : \"100\";\n    this.__invalid_error_code =\n      params.invalidErrorCode || (scorm12_errors.INVALID_SET_VALUE as number);\n    this.__invalid_type_code = params.invalidTypeCode || (scorm12_errors.TYPE_MISMATCH as number);\n    this.__invalid_range_code =\n      params.invalidRangeCode || (scorm12_errors.VALUE_OUT_OF_RANGE as number);\n    this.__decimal_regex = params.decimalRegex || scorm12_regex.CMIDecimal;\n    this.__error_class = params.errorClass;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this.__error_class(this._cmi_element + \"._children\", this.__invalid_error_code);\n  }\n\n  /**\n   * Getter for _raw\n   * @return {string}\n   */\n  get raw(): string {\n    return this._raw;\n  }\n\n  /**\n   * Setter for _raw\n   * @param {string} raw\n   */\n  set raw(raw: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".raw\",\n        raw,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._raw = raw;\n    }\n  }\n\n  /**\n   * Getter for _min\n   * @return {string}\n   */\n  get min(): string {\n    return this._min;\n  }\n\n  /**\n   * Setter for _min\n   * @param {string} min\n   */\n  set min(min: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".min\",\n        min,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._min = min;\n    }\n  }\n\n  /**\n   * Getter for _max\n   * @return {string}\n   */\n  get max(): string {\n    return this._max;\n  }\n\n  /**\n   * Setter for _max\n   * @param {string} max\n   */\n  set max(max: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".max\",\n        max,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._max = max;\n    }\n  }\n\n  /**\n   * Getter for _score_range\n   * @return {string | false}\n   */\n  public getScoreObject(): ScoreObject {\n    const scoreObject: ScoreObject = {};\n    if (!Number.isNaN(Number.parseFloat(this.raw))) {\n      scoreObject.raw = Number.parseFloat(this.raw);\n    }\n    if (!Number.isNaN(Number.parseFloat(this.min))) {\n      scoreObject.min = Number.parseFloat(this.min);\n    }\n    if (!Number.isNaN(Number.parseFloat(this.max))) {\n      scoreObject.max = Number.parseFloat(this.max);\n    }\n    return scoreObject;\n  }\n\n  /**\n   * toJSON for *.score\n   * @return {\n   *    {\n   *      min: string,\n   *      max: string,\n   *      raw: string\n   *    }\n   *    }\n   */\n  toJSON(): {\n    min: string;\n    max: string;\n    raw: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { check12ValidFormat } from \"../scorm12/validation\";\nimport * as Util from \"../../utilities\";\n\n/**\n * Class representing the `cmi.core` object\n * @extends BaseCMI\n */\nexport class CMICore extends BaseCMI {\n  /**\n   * Constructor for `cmi.core`\n   */\n  constructor() {\n    super(\"cmi.core\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.core.score\",\n      score_children: scorm12_constants.score_children,\n      score_range: scorm12_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE as number,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH as number,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE as number,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n\n  public readonly score: CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  private readonly __children = scorm12_constants.core_children;\n  private _student_id = \"\";\n  private _student_name = \"\";\n  private _lesson_location = \"\";\n  private _credit = \"\";\n  private _lesson_status = \"not attempted\";\n  private _entry = \"\";\n  private _total_time = \"\";\n  private _lesson_mode = \"normal\";\n  private _exit = \"\";\n  private _session_time = \"00:00:00\";\n  private _suspend_data = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._exit = \"\";\n    this._entry = \"\";\n\n    /**\n     * Resetting ensures we accurately track the time spent on each SCO session independently.\n     * Each new session should start from zero, so we can reset cmi.core.session_time at the beginning of each session.\n     */\n    this._session_time = \"00:00:00\";\n\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE as number,\n    );\n  }\n\n  /**\n   * Getter for _student_id\n   * @return {string}\n   */\n  get student_id(): string {\n    return this._student_id;\n  }\n\n  /**\n   * Setter for _student_id. Can only be called before  initialization.\n   * @param {string} student_id\n   */\n  set student_id(student_id: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".student_id\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._student_id = student_id;\n    }\n  }\n\n  /**\n   * Getter for _student_name\n   * @return {string}\n   */\n  get student_name(): string {\n    return this._student_name;\n  }\n\n  /**\n   * Setter for _student_name. Can only be called before  initialization.\n   * @param {string} student_name\n   */\n  set student_name(student_name: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".student_name\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._student_name = student_name;\n    }\n  }\n\n  /**\n   * Getter for _lesson_location\n   * @return {string}\n   */\n  get lesson_location(): string {\n    return this._lesson_location;\n  }\n\n  /**\n   * Setter for _lesson_location\n   * @param {string} lesson_location\n   */\n  set lesson_location(lesson_location: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".lesson_location\",\n        lesson_location,\n        scorm12_regex.CMIString256,\n        true,\n      )\n    ) {\n      this._lesson_location = lesson_location;\n    }\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this._credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before  initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".credit\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._credit = credit;\n    }\n  }\n\n  /**\n   * Getter for _lesson_status\n   * @return {string}\n   */\n  get lesson_status(): string {\n    return this._lesson_status;\n  }\n\n  /**\n   * Setter for _lesson_status\n   * @param {string} lesson_status\n   */\n  set lesson_status(lesson_status: string) {\n    if (this.initialized) {\n      if (\n        check12ValidFormat(\n          this._cmi_element + \".lesson_status\",\n          lesson_status,\n          scorm12_regex.CMIStatus,\n        )\n      ) {\n        this._lesson_status = lesson_status;\n      }\n    } else {\n      if (\n        check12ValidFormat(\n          this._cmi_element + \".lesson_status\",\n          lesson_status,\n          scorm12_regex.CMIStatus2,\n        )\n      ) {\n        this._lesson_status = lesson_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this._entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before  initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".entry\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._entry = entry;\n    }\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this._total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before  initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".total_time\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._total_time = total_time;\n    }\n  }\n\n  /**\n   * Getter for _lesson_mode\n   * @return {string}\n   */\n  get lesson_mode(): string {\n    return this._lesson_mode;\n  }\n\n  /**\n   * Setter for _lesson_mode. Can only be called before  initialization.\n   * @param {string} lesson_mode\n   */\n  set lesson_mode(lesson_mode: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".lesson_mode\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._lesson_mode = lesson_mode;\n    }\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".exit\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    if (check12ValidFormat(this._cmi_element + \".exit\", exit, scorm12_regex.CMIExit, true)) {\n      this._exit = exit;\n    }\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".session_time\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".session_time\",\n        session_time,\n        scorm12_regex.CMITimespan,\n      )\n    ) {\n      this._session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this._suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".suspend_data\",\n        suspend_data,\n        scorm12_regex.CMIString4096,\n        true,\n      )\n    ) {\n      this._suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   * @param {number} start_time\n   * @return {string}\n   */\n  getCurrentTotalTime(start_time: number | undefined): string {\n    let sessionTime = this._session_time;\n    if (typeof start_time !== \"undefined\" && start_time !== null) {\n      const seconds = new Date().getTime() - start_time;\n      sessionTime = Util.getSecondsAsHHMMSS(seconds / 1000);\n    }\n\n    return Util.addHHMMSSTimeStrings(\n      this._total_time,\n      sessionTime,\n      new RegExp(scorm12_regex.CMITimespan),\n    );\n  }\n\n  /**\n   * toJSON for cmi.core\n   *\n   * @return {\n   *    {\n   *      student_name: string,\n   *      entry: string,\n   *      exit: string,\n   *      score: CMIScore,\n   *      student_id: string,\n   *      lesson_mode: string,\n   *      lesson_location: string,\n   *      lesson_status: string,\n   *      credit: string,\n   *      session_time: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    student_name: string;\n    entry: string;\n    exit: string;\n    score: CMIScore;\n    student_id: string;\n    lesson_mode: string;\n    lesson_location: string;\n    lesson_status: string;\n    credit: string;\n    session_time: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      student_id: this.student_id,\n      student_name: this.student_name,\n      lesson_location: this.lesson_location,\n      credit: this.credit,\n      lesson_status: this.lesson_status,\n      entry: this.entry,\n      lesson_mode: this.lesson_mode,\n      exit: this.exit,\n      session_time: this.session_time,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"./base_cmi\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Base class for cmi *.n objects\n */\nexport class CMIArray extends BaseCMI {\n  private readonly _errorCode: number;\n  private readonly _errorClass: typeof BaseScormValidationError;\n  private readonly __children: string;\n  public childArray: any[];\n\n  /**\n   * Constructor cmi *.n arrays\n   * @param {object} params\n   */\n  constructor(params: {\n    CMIElement: string;\n    children: string;\n    errorCode?: number;\n    errorClass?: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n    this.__children = params.children;\n    this._errorCode = params.errorCode || (scorm12_errors.GENERAL as number);\n    this._errorClass = params.errorClass || BaseScormValidationError;\n    this.childArray = [];\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(wipe: boolean = false): void {\n    this._initialized = false;\n    if (wipe) {\n      this.childArray = [];\n    } else {\n      // Reset all children\n      for (let i = 0; i < this.childArray.length; i++) {\n        this.childArray[i].reset();\n      }\n    }\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this._errorClass(this._cmi_element + \"._children\", this._errorCode);\n  }\n\n  /**\n   * Getter for _count\n   * @return {number}\n   */\n  get _count(): number {\n    return this.childArray.length;\n  }\n\n  /**\n   * Setter for _count. Just throws an error.\n   * @param {number} _count\n   */\n  set _count(_count: number) {\n    throw new this._errorClass(this._cmi_element + \"._count\", this._errorCode);\n  }\n\n  /**\n   * toJSON for *.n arrays\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result: { [key: string]: any } = {};\n    for (let i = 0; i < this.childArray.length; i++) {\n      result[i + \"\"] = this.childArray[i];\n    }\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { check12ValidFormat } from \"./validation\";\nimport { CMIArray } from \"../common/array\";\n\n/**\n * Class representing SCORM 1.2's `cmi.objectives` object\n * @extends CMIArray\n */\nexport class CMIObjectives extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives`\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.objectives\",\n      children: scorm12_constants.objectives_children,\n      errorCode: scorm12_errors.INVALID_SET_VALUE as number,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super(\"cmi.objectives.n\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.objectives.n.score\",\n      score_children: scorm12_constants.score_children,\n      score_range: scorm12_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE as number,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH as number,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE as number,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n\n  public readonly score: CMIScore;\n\n  private _id = \"\";\n  private _status = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._id = \"\";\n    this._status = \"\";\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check12ValidFormat(this._cmi_element + \".id\", id, scorm12_regex.CMIIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _status\n   * @return {string}\n   */\n  get status(): string {\n    return this._status;\n  }\n\n  /**\n   * Setter for _status\n   * @param {string} status\n   */\n  set status(status: string) {\n    if (check12ValidFormat(this._cmi_element + \".status\", status, scorm12_regex.CMIStatus2)) {\n      this._status = status;\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   * @return {\n   *    {\n   *      id: string,\n   *      status: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    status: string;\n    score: CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      status: this.status,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { validationService } from \"../../services/ValidationService\";\n\n/**\n * Class representing the SCORM 1.2 cmi.student_data object\n * @extends BaseCMI\n */\nexport class CMIStudentData extends BaseCMI {\n  private readonly __children;\n  private _mastery_score = \"\";\n  private _max_time_allowed = \"\";\n  private _time_limit_action = \"\";\n\n  /**\n   * Constructor for cmi.student_data\n   * @param {string} student_data_children\n   */\n  constructor(student_data_children?: string) {\n    super(\"cmi.student_data\");\n    this.__children = student_data_children\n      ? student_data_children\n      : scorm12_constants.student_data_children;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE as number,\n    );\n  }\n\n  /**\n   * Getter for _master_score\n   * @return {string}\n   */\n  get mastery_score(): string {\n    return this._mastery_score;\n  }\n\n  /**\n   * Setter for _master_score. Can only be called before  initialization.\n   * @param {string} mastery_score\n   */\n  set mastery_score(mastery_score: string) {\n    validationService.validateReadOnly(this._cmi_element + \".mastery_score\", this.initialized);\n    this._mastery_score = mastery_score;\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this._max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before  initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    validationService.validateReadOnly(this._cmi_element + \".max_time_allowed\", this.initialized);\n    this._max_time_allowed = max_time_allowed;\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this._time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before  initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    validationService.validateReadOnly(this._cmi_element + \".time_limit_action\", this.initialized);\n    this._time_limit_action = time_limit_action;\n  }\n\n  /**\n   * toJSON for cmi.student_data\n   *\n   * @return {\n   *    {\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      mastery_score: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    mastery_score: string;\n    max_time_allowed: string;\n    time_limit_action: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      mastery_score: this.mastery_score,\n      max_time_allowed: this.max_time_allowed,\n      time_limit_action: this.time_limit_action,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { validationService } from \"../../services/ValidationService\";\n\n/**\n * Class representing the SCORM 1.2 cmi.student_preference object\n * @extends BaseCMI\n */\nexport class CMIStudentPreference extends BaseCMI {\n  private readonly __children;\n\n  /**\n   * Constructor for cmi.student_preference\n   * @param {string} student_preference_children\n   */\n  constructor(student_preference_children?: string) {\n    super(\"cmi.student_preference\");\n    this.__children = student_preference_children\n      ? student_preference_children\n      : scorm12_constants.student_preference_children;\n  }\n\n  private _audio = \"\";\n  private _language = \"\";\n  private _speed = \"\";\n  private _text = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE as number,\n    );\n  }\n\n  /**\n   * Getter for _audio\n   * @return {string}\n   */\n  get audio(): string {\n    return this._audio;\n  }\n\n  /**\n   * Setter for _audio\n   * @param {string} audio\n   */\n  set audio(audio: string) {\n    if (validationService.validateScorm12Audio(this._cmi_element + \".audio\", audio)) {\n      this._audio = audio;\n    }\n  }\n\n  /**\n   * Getter for _language\n   * @return {string}\n   */\n  get language(): string {\n    return this._language;\n  }\n\n  /**\n   * Setter for _language\n   * @param {string} language\n   */\n  set language(language: string) {\n    if (validationService.validateScorm12Language(this._cmi_element + \".language\", language)) {\n      this._language = language;\n    }\n  }\n\n  /**\n   * Getter for _speed\n   * @return {string}\n   */\n  get speed(): string {\n    return this._speed;\n  }\n\n  /**\n   * Setter for _speed\n   * @param {string} speed\n   */\n  set speed(speed: string) {\n    if (validationService.validateScorm12Speed(this._cmi_element + \".speed\", speed)) {\n      this._speed = speed;\n    }\n  }\n\n  /**\n   * Getter for _text\n   * @return {string}\n   */\n  get text(): string {\n    return this._text;\n  }\n\n  /**\n   * Setter for _text\n   * @param {string} text\n   */\n  set text(text: string) {\n    if (validationService.validateScorm12Text(this._cmi_element + \".text\", text)) {\n      this._text = text;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_preference\n   *\n   * @return {\n   *    {\n   *      audio: string,\n   *      language: string,\n   *      speed: string,\n   *      text: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    audio: string;\n    language: string;\n    speed: string;\n    text: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio: this.audio,\n      language: this.language,\n      speed: this.speed,\n      text: this.text,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check12ValidFormat, check12ValidRange } from \"./validation\";\nimport { scorm12_regex } from \"../../constants/regex\";\n\n/**\n * Class representing the SCORM 1.2 `cmi.interactions`\n * @extends CMIArray\n */\nexport class CMIInteractions extends CMIArray {\n  /**\n   * Constructor for `cmi.interactions`\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.interactions\",\n      children: scorm12_constants.interactions_children,\n      errorCode: scorm12_errors.INVALID_SET_VALUE as number,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n object\n   */\n  constructor() {\n    super(\"cmi.interactions.n\");\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm12_errors.INVALID_SET_VALUE as number,\n      errorClass: Scorm12ValidationError,\n      children: scorm12_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.correct_responses\",\n      errorCode: scorm12_errors.INVALID_SET_VALUE as number,\n      errorClass: Scorm12ValidationError,\n      children: scorm12_constants.correct_responses_children,\n    });\n  }\n\n  public readonly objectives: CMIArray;\n  public readonly correct_responses: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  private _id = \"\";\n  private _time = \"\";\n  private _type = \"\";\n  private _weighting = \"\";\n  private _student_response = \"\";\n  private _result = \"\";\n  private _latency = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n\n    this._id = \"\";\n    this._time = \"\";\n    this._type = \"\";\n    this._weighting = \"\";\n    this._student_response = \"\";\n    this._result = \"\";\n    this._latency = \"\";\n\n    this.objectives?.reset();\n    this.correct_responses?.reset();\n  }\n\n  /**\n   * Getter for _id. Should only be called during JSON export.\n   * @return {string}\n   */\n  get id(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".id\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check12ValidFormat(this._cmi_element + \".id\", id, scorm12_regex.CMIIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get time(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".time\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._time;\n  }\n\n  /**\n   * Setter for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (check12ValidFormat(this._cmi_element + \".time\", time, scorm12_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * Getter for _type. Should only be called during JSON export.\n   * @return {string}\n   */\n  get type(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".type\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._type;\n  }\n\n  /**\n   * Setter for _type\n   * @param {string} type\n   */\n  set type(type: string) {\n    if (check12ValidFormat(this._cmi_element + \".type\", type, scorm12_regex.CMIType)) {\n      this._type = type;\n    }\n  }\n\n  /**\n   * Getter for _weighting. Should only be called during JSON export.\n   * @return {string}\n   */\n  get weighting(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".weighting\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._weighting;\n  }\n\n  /**\n   * Setter for _weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting: string) {\n    if (\n      check12ValidFormat(this._cmi_element + \".weighting\", weighting, scorm12_regex.CMIDecimal) &&\n      check12ValidRange(this._cmi_element + \".weighting\", weighting, scorm12_regex.weighting_range)\n    ) {\n      this._weighting = weighting;\n    }\n  }\n\n  /**\n   * Getter for _student_response. Should only be called during JSON export.\n   * @return {string}\n   */\n  get student_response(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".student_response\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._student_response;\n  }\n\n  /**\n   * Setter for _student_response\n   * @param {string} student_response\n   */\n  set student_response(student_response: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".student_response\",\n        student_response,\n        scorm12_regex.CMIFeedback,\n        true,\n      )\n    ) {\n      this._student_response = student_response;\n    }\n  }\n\n  /**\n   * Getter for _result. Should only be called during JSON export.\n   * @return {string}\n   */\n  get result(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".result\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._result;\n  }\n\n  /**\n   * Setter for _result\n   * @param {string} result\n   */\n  set result(result: string) {\n    if (check12ValidFormat(this._cmi_element + \".result\", result, scorm12_regex.CMIResult)) {\n      this._result = result;\n    }\n  }\n\n  /**\n   * Getter for _latency. Should only be called during JSON export.\n   * @return {string}\n   */\n  get latency(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".latency\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._latency;\n  }\n\n  /**\n   * Setter for _latency\n   * @param {string} latency\n   */\n  set latency(latency: string) {\n    if (check12ValidFormat(this._cmi_element + \".latency\", latency, scorm12_regex.CMITimespan)) {\n      this._latency = latency;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      time: string,\n   *      type: string,\n   *      weighting: string,\n   *      student_response: string,\n   *      result: string,\n   *      latency: string,\n   *      objectives: CMIArray,\n   *      correct_responses: CMIArray\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    time: string;\n    type: string;\n    weighting: string;\n    student_response: string;\n    result: string;\n    latency: string;\n    objectives: CMIArray;\n    correct_responses: CMIArray;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      time: this.time,\n      type: this.type,\n      weighting: this.weighting,\n      student_response: this.student_response,\n      result: this.result,\n      latency: this.latency,\n      objectives: this.objectives,\n      correct_responses: this.correct_responses,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n.objectives.n\");\n  }\n\n  private _id = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._id = \"\";\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check12ValidFormat(this._cmi_element + \".id\", id, scorm12_regex.CMIIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.correct_responses.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.correct_responses.n\n   */\n  constructor() {\n    super(\"cmi.interactions.correct_responses.n\");\n  }\n\n  private _pattern = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._pattern = \"\";\n  }\n\n  /**\n   * Getter for _pattern\n   * @return {string}\n   */\n  get pattern(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".pattern\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._pattern;\n  }\n\n  /**\n   * Setter for _pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern: string) {\n    if (\n      check12ValidFormat(this._cmi_element + \".pattern\", pattern, scorm12_regex.CMIFeedback, true)\n    ) {\n      this._pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.correct_responses.n\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    pattern: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      pattern: this._pattern,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { BaseRootCMI } from \"../common/base_cmi\";\nimport { check12ValidFormat } from \"./validation\";\nimport { CMICore } from \"../aicc/core\";\nimport { CMIObjectives } from \"./objectives\";\nimport { CMIStudentData } from \"./student_data\";\nimport { CMIStudentPreference } from \"./student_preference\";\nimport { CMIInteractions } from \"./interactions\";\n\n/**\n * Class representing the cmi object for SCORM 1.2\n */\nexport class CMI extends BaseRootCMI {\n  private readonly __children: string = \"\";\n  private __version: string = \"3.4\";\n  private _launch_data: string = \"\";\n  private _comments: string = \"\";\n  private _comments_from_lms: string = \"\";\n\n  /**\n   * Constructor for the SCORM 1.2 cmi object\n   * @param {string} cmi_children\n   * @param {(CMIStudentData|AICCCMIStudentData)} student_data\n   * @param {boolean} initialized\n   */\n  constructor(cmi_children?: string, student_data?: CMIStudentData, initialized?: boolean) {\n    super(\"cmi\");\n    if (initialized) this.initialize();\n    this.__children = cmi_children ? cmi_children : scorm12_constants.cmi_children;\n    this.core = new CMICore();\n    this.objectives = new CMIObjectives();\n    this.student_data = student_data ? student_data : new CMIStudentData();\n    this.student_preference = new CMIStudentPreference();\n    this.interactions = new CMIInteractions();\n  }\n\n  public core: CMICore;\n  public objectives: CMIObjectives;\n  public student_data: CMIStudentData;\n  public student_preference: CMIStudentPreference;\n  public interactions: CMIInteractions;\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._launch_data = \"\";\n    this._comments = \"\";\n    this.core?.reset();\n    this.objectives = new CMIObjectives();\n    this.interactions = new CMIInteractions();\n    this.student_data?.reset();\n    this.student_preference?.reset();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.core?.initialize();\n    this.objectives?.initialize();\n    this.student_data?.initialize();\n    this.student_preference?.initialize();\n    this.interactions?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions\n   *    }\n   *  }\n   */\n  toJSON(): {\n    suspend_data: string;\n    launch_data: string;\n    comments: string;\n    comments_from_lms: string;\n    core: CMICore;\n    objectives: CMIObjectives;\n    student_data: CMIStudentData;\n    student_preference: CMIStudentPreference;\n    interactions: CMIInteractions;\n  } {\n    this.jsonString = true;\n    const result = {\n      suspend_data: this.suspend_data,\n      launch_data: this.launch_data,\n      comments: this.comments,\n      comments_from_lms: this.comments_from_lms,\n      core: this.core,\n      objectives: this.objectives,\n      student_data: this.student_data,\n      student_preference: this.student_preference,\n      interactions: this.interactions,\n    };\n    this.jsonString = false;\n    return result;\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   */\n  get _version(): string {\n    return this.__version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._version\",\n      scorm12_errors.INVALID_SET_VALUE as number,\n    );\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE as number,\n    );\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this.core?.suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (this.core) {\n      this.core.suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this._launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before  initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".launch_data\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._launch_data = launch_data;\n    }\n  }\n\n  /**\n   * Getter for _comments\n   * @return {string}\n   */\n  get comments(): string {\n    return this._comments;\n  }\n\n  /**\n   * Setter for _comments\n   * @param {string} comments\n   */\n  set comments(comments: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".comments\",\n        comments,\n        scorm12_regex.CMIString4096,\n        true,\n      )\n    ) {\n      this._comments = comments;\n    }\n  }\n\n  /**\n   * Getter for _comments_from_lms\n   * @return {string}\n   */\n  get comments_from_lms(): string {\n    return this._comments_from_lms;\n  }\n\n  /**\n   * Setter for _comments_from_lms. Can only be called before  initialization.\n   * @param {string} comments_from_lms\n   */\n  set comments_from_lms(comments_from_lms: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".comments_from_lms\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._comments_from_lms = comments_from_lms;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string}\n   */\n  getCurrentTotalTime(): string {\n    return this.core.getCurrentTotalTime(this.start_time);\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { check12ValidFormat } from \"./validation\";\nimport { scorm12_regex } from \"../../constants/regex\";\n\n/**\n * Class for AICC Navigation object\n */\nexport class NAV extends BaseCMI {\n  /**\n   * Constructor for NAV object\n   */\n  constructor() {\n    super(\"cmi.nav\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._event = \"\";\n    this._initialized = false;\n  }\n\n  private _event = \"\";\n\n  /**\n   * Getter for _event\n   * @return {string}\n   */\n  get event(): string {\n    return this._event;\n  }\n\n  /**\n   * Setter for _event\n   * @param {string} event\n   */\n  set event(event: string) {\n    if (\n      event === \"\" ||\n      check12ValidFormat(this._cmi_element + \".event\", event, scorm12_regex.NAVEvent)\n    ) {\n      this._event = event;\n    }\n  }\n\n  /**\n   * toJSON for nav object\n   * @return {\n   *    {\n   *      event: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    event: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      event: this.event,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","// Using plain objects instead of enums for better compatibility with strip-only mode\n// This approach avoids TypeScript enum runtime code while maintaining the same API\n\n// NAVBoolean values\nexport const NAVBoolean = {\n  UNKNOWN: \"unknown\",\n  TRUE: \"true\",\n  FALSE: \"false\",\n};\n\n// Type for NAVBoolean values\nexport type NAVBoolean = (typeof NAVBoolean)[keyof typeof NAVBoolean];\n\n// SuccessStatus values\nexport const SuccessStatus = {\n  PASSED: \"passed\",\n  FAILED: \"failed\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for SuccessStatus values\nexport type SuccessStatus = (typeof SuccessStatus)[keyof typeof SuccessStatus];\n\n// CompletionStatus values\nexport const CompletionStatus = {\n  COMPLETED: \"completed\",\n  INCOMPLETE: \"incomplete\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for CompletionStatus values\nexport type CompletionStatus = (typeof CompletionStatus)[keyof typeof CompletionStatus];\n\n// LogLevelEnum values\nexport const LogLevelEnum = {\n  _: 0,\n  DEBUG: 1,\n  INFO: 2,\n  WARN: 3,\n  ERROR: 4,\n  NONE: 5,\n};\n\n// Type for LogLevelEnum values\nexport type LogLevelEnum = (typeof LogLevelEnum)[keyof typeof LogLevelEnum];\n","import { InternalSettings, LogLevel, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"./api_constants\";\nimport { LogLevelEnum } from \"./enums\";\n\n/**\n * Default settings for the SCORM API\n */\nexport const DefaultSettings: InternalSettings = {\n  autocommit: false,\n  autocommitSeconds: 10,\n  asyncCommit: false,\n  sendFullCommit: true,\n  lmsCommitUrl: false,\n  dataCommitFormat: \"json\",\n  commitRequestDataType: \"application/json;charset=UTF-8\",\n  autoProgress: false,\n  logLevel: LogLevelEnum.ERROR,\n  selfReportSessionTime: false,\n  alwaysSendTotalTime: false,\n  renderCommonCommitFields: false,\n  strict_errors: true,\n  xhrHeaders: {},\n  xhrWithCredentials: false,\n  fetchMode: \"cors\",\n  useBeaconInsteadOfFetch: \"never\",\n  responseHandler: async function (response: Response): Promise<ResultObject> {\n    if (typeof response !== \"undefined\") {\n      let httpResult = null;\n\n      // Handle both text() and json() response methods\n      try {\n        if (typeof response.json === \"function\") {\n          // Try to get JSON directly if the method exists\n          httpResult = await response.json();\n        } else if (typeof response.text === \"function\") {\n          // Fall back to text() if json() is not available\n          const responseText = await response.text();\n          if (responseText) {\n            httpResult = JSON.parse(responseText);\n          }\n        }\n      } catch (e) {\n        // If parsing fails, continue with null httpResult\n      }\n\n      if (httpResult === null || !{}.hasOwnProperty.call(httpResult, \"result\")) {\n        if (response.status === 200) {\n          return {\n            result: global_constants.SCORM_TRUE,\n            errorCode: 0,\n          };\n        } else {\n          return {\n            result: global_constants.SCORM_FALSE,\n            errorCode: 101,\n          };\n        }\n      } else {\n        return {\n          result: httpResult.result,\n          errorCode: httpResult.errorCode\n            ? httpResult.errorCode\n            : httpResult.result === global_constants.SCORM_TRUE\n              ? 0\n              : 101,\n        };\n      }\n    }\n    return {\n      result: global_constants.SCORM_FALSE,\n      errorCode: 101,\n    };\n  },\n  requestHandler: function (commitObject) {\n    return commitObject;\n  },\n  onLogMessage: defaultLogHandler,\n  scoItemIds: [],\n  scoItemIdValidator: false,\n  globalObjectiveIds: [],\n\n  // Offline support settings\n  enableOfflineSupport: false,\n  courseId: \"\",\n  syncOnInitialize: true,\n  syncOnTerminate: true,\n  maxSyncAttempts: 5,\n};\n\nexport function defaultLogHandler(messageLevel: LogLevel, logMessage: string): void {\n  switch (messageLevel) {\n    case \"4\":\n    case 4:\n    case \"ERROR\":\n    case LogLevelEnum.ERROR:\n      console.error(logMessage);\n      break;\n    case \"3\":\n    case 3:\n    case \"WARN\":\n    case LogLevelEnum.WARN:\n      console.warn(logMessage);\n      break;\n    case \"2\":\n    case 2:\n    case \"INFO\":\n    case LogLevelEnum.INFO:\n      console.info(logMessage);\n      break;\n    case \"1\":\n    case 1:\n    case \"DEBUG\":\n    case LogLevelEnum.DEBUG:\n      if (console.debug) {\n        console.debug(logMessage);\n      } else {\n        console.log(logMessage);\n      }\n      break;\n  }\n}\n","import BaseAPI from \"../BaseAPI\";\n\n/**\n * Private class that wraps a timeout call to the commit() function\n */\nexport class ScheduledCommit {\n  private _API;\n  private _cancelled = false;\n  private readonly _timeout;\n  private readonly _callback;\n\n  /**\n   * Constructor for ScheduledCommit\n   * @param {BaseAPI} API\n   * @param {number} when\n   * @param {string} callback\n   */\n  constructor(API: BaseAPI, when: number, callback: string) {\n    this._API = API;\n    this._timeout = setTimeout(this.wrapper.bind(this), when);\n    this._callback = callback;\n  }\n\n  /**\n   * Cancel any currently scheduled commit\n   */\n  cancel() {\n    this._cancelled = true;\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n  }\n\n  /**\n   * Wrap the API commit call to check if the call has already been canceled\n   */\n  wrapper() {\n    if (!this._cancelled) {\n      // Only proceed with scheduled commit if API is properly initialized\n      if (this._API.isInitialized()) {\n        (async () => await this._API.commit(this._callback))();\n      }\n    }\n  }\n}\n","import { CommitObject, InternalSettings, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { IHttpService } from \"../interfaces/services\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { StringKeyMap } from \"../utilities\";\n\n/**\n * Service for handling HTTP communication with the LMS\n */\nexport class HttpService implements IHttpService {\n  private settings: InternalSettings;\n  private error_codes: ErrorCode;\n\n  /**\n   * Constructor for HttpService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   */\n  constructor(settings: InternalSettings, error_codes: ErrorCode) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n  }\n\n  /**\n   * Sends HTTP requests to the LMS with special handling for immediate and standard requests.\n   *\n   * This method handles communication with the LMS server, implementing two distinct\n   * request handling strategies based on the context:\n   *\n   * 1. Immediate Mode (used during termination):\n   *    When immediate=true, the method:\n   *    - Initiates the fetch request but doesn't wait for it to complete\n   *    - Returns a success result immediately\n   *    - Processes the response asynchronously when it arrives\n   *\n   *    This is critical for browser compatibility during page unload/termination,\n   *    as some browsers (especially Chrome) may cancel synchronous or awaited\n   *    requests when a page is closing.\n   *\n   * 2. Standard Mode (normal operation):\n   *    When immediate=false, the method:\n   *    - Processes the request parameters through the configured requestHandler\n   *    - Awaits the fetch response completely\n   *    - Transforms the response using the configured responseHandler\n   *    - Triggers appropriate event listeners based on success/failure\n   *    - Returns the complete result with appropriate error codes\n   *\n   * The method also includes error handling to catch network failures or other\n   * exceptions that might occur during the request process.\n   *\n   * @param {string} url - The URL endpoint to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The data to send to the LMS\n   * @param {boolean} immediate - Whether to send the request immediately without waiting (true) or process normally (false)\n   * @param {Function} apiLog - Function to log API messages with appropriate levels\n   * @param {Function} processListeners - Function to trigger event listeners for commit events\n   * @return {Promise<ResultObject>} - A promise that resolves with the result of the request\n   *\n   * @example\n   * // Standard request (waits for response)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   false,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   *\n   * @example\n   * // Immediate request (for termination)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   true,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   * // result will be success immediately, regardless of actual HTTP result\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n    apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    const genericError: ResultObject = {\n      result: global_constants.SCORM_FALSE,\n      errorCode: this.error_codes.GENERAL || 101,\n    };\n\n    // If immediate mode (for termination), handle differently\n    if (immediate) {\n      return this._handleImmediateRequest(url, params, apiLog, processListeners);\n    }\n\n    // Standard request processing\n    try {\n      const processedParams = this.settings.requestHandler(params) as\n        | CommitObject\n        | StringKeyMap\n        | Array<any>;\n      const response = await this.performFetch(url, processedParams);\n      return this.transformResponse(response, processListeners);\n    } catch (e: unknown) {\n      const message = e instanceof Error ? e.message : String(e);\n\n      // Enhanced error logging with more context\n      apiLog(\"processHttpRequest\", `HTTP request failed to ${url}: ${message}`, LogLevelEnum.ERROR);\n\n      if (e instanceof Error && e.stack) {\n        apiLog(\"processHttpRequest\", `Stack trace: ${e.stack}`, LogLevelEnum.DEBUG);\n      }\n\n      // Create enhanced error object with more details\n      const enhancedError: ResultObject = {\n        ...genericError,\n        errorMessage: message,\n        errorDetails: JSON.stringify({\n          url,\n          errorType: e instanceof Error ? e.constructor.name : typeof e,\n          originalError: message,\n        }),\n      };\n\n      processListeners(\"CommitError\");\n      return enhancedError;\n    }\n  }\n\n  /**\n   * Handles an immediate request (used during termination)\n   * @param {string} url - The URL to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The parameters to include in the request\n   * @param {Function} processListeners - Function to process event listeners\n   * @return {ResultObject} - A success result object\n   * @private\n   */\n  private _handleImmediateRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): ResultObject {\n    // Use Beacon API for final commit if specified in settings\n    if (this.settings.useBeaconInsteadOfFetch !== \"never\") {\n      const { body, contentType } = this._prepareRequestBody(params);\n      navigator.sendBeacon(url, new Blob([body], { type: contentType }));\n    } else {\n      // Use regular fetch with keepalive\n      this.performFetch(url, params)\n        .then(async (response) => {\n          await this.transformResponse(response, processListeners);\n        })\n        .catch((e: unknown) => {\n          const message = e instanceof Error ? e.message : String(e);\n          apiLog(\"processHttpRequest\", message, LogLevelEnum.ERROR);\n          processListeners(\"CommitError\");\n        });\n    }\n\n    // Return success immediately without waiting for response\n    return {\n      result: global_constants.SCORM_TRUE,\n      errorCode: 0,\n    };\n  }\n\n  /**\n   * Prepares the request body and content type based on params type\n   * @param {CommitObject|StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Object} - Object containing body and contentType\n   * @private\n   */\n  private _prepareRequestBody(params: CommitObject | StringKeyMap | Array<any>): {\n    body: string;\n    contentType: string;\n  } {\n    const body = params instanceof Array ? params.join(\"&\") : JSON.stringify(params);\n    const contentType =\n      params instanceof Array\n        ? \"application/x-www-form-urlencoded\"\n        : this.settings.commitRequestDataType;\n\n    return { body, contentType };\n  }\n\n  /**\n   * Perform the fetch request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - The response from the LMS\n   * @private\n   */\n  private async performFetch(url: string, params: StringKeyMap | Array<any>): Promise<Response> {\n    // Use Beacon API if specified in settings\n    if (this.settings.useBeaconInsteadOfFetch === \"always\") {\n      return this.performBeacon(url, params);\n    }\n\n    const { body, contentType } = this._prepareRequestBody(params);\n    const init = {\n      method: \"POST\",\n      mode: this.settings.fetchMode,\n      body,\n      headers: {\n        ...this.settings.xhrHeaders,\n        \"Content-Type\": contentType,\n      },\n      keepalive: true,\n    } as RequestInit;\n\n    if (this.settings.xhrWithCredentials) {\n      init.credentials = \"include\";\n    }\n\n    return fetch(url, init);\n  }\n\n  /**\n   * Perform the beacon request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - A promise that resolves with a mock Response object\n   * @private\n   */\n  private async performBeacon(url: string, params: StringKeyMap | Array<any>): Promise<Response> {\n    const { body, contentType } = this._prepareRequestBody(params);\n\n    // Send the beacon request\n    const beaconSuccess = navigator.sendBeacon(url, new Blob([body], { type: contentType }));\n\n    // Create a mock Response object since sendBeacon doesn't return a Response\n    return Promise.resolve({\n      status: beaconSuccess ? 200 : 0,\n      ok: beaconSuccess,\n      json: async () => ({\n        result: beaconSuccess ? \"true\" : \"false\",\n        errorCode: beaconSuccess ? 0 : this.error_codes.GENERAL,\n      }),\n      text: async () =>\n        JSON.stringify({\n          result: beaconSuccess ? \"true\" : \"false\",\n          errorCode: beaconSuccess ? 0 : this.error_codes.GENERAL,\n        }),\n    } as Response);\n  }\n\n  /**\n   * Transforms the response from the LMS to a ResultObject\n   * @param {Response} response - The response from the LMS\n   * @param {Function} processListeners - Function to process event listeners\n   * @return {Promise<ResultObject>} - The transformed response\n   * @private\n   */\n  private async transformResponse(\n    response: Response,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    let result: any;\n\n    try {\n      // Parse the response using the configured handler or default to json\n      result =\n        typeof this.settings.responseHandler === \"function\"\n          ? await this.settings.responseHandler(response)\n          : await response.json();\n    } catch (parseError) {\n      // If we can't parse the response, log the raw response for debugging\n      const responseText = await response.text().catch(() => \"Unable to read response text\");\n\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL || 101,\n        errorMessage: `Failed to parse LMS response: ${parseError instanceof Error ? parseError.message : String(parseError)}`,\n        errorDetails: JSON.stringify({\n          status: response.status,\n          statusText: response.statusText,\n          url: response.url,\n          responseText: responseText.substring(0, 500), // Limit response text to avoid huge logs\n          parseError: parseError instanceof Error ? parseError.message : String(parseError),\n        }),\n      };\n    }\n\n    // Ensure result has an errorCode property\n    if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n      result.errorCode = this._isSuccessResponse(response, result) ? 0 : this.error_codes.GENERAL;\n    }\n\n    // Add response details for failed requests\n    if (!this._isSuccessResponse(response, result)) {\n      result.errorDetails = {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n        ...result.errorDetails, // Preserve any existing error details\n      };\n    }\n\n    // Trigger appropriate event based on success/failure\n    if (this._isSuccessResponse(response, result)) {\n      processListeners(\"CommitSuccess\");\n    } else {\n      processListeners(\"CommitError\", undefined, result.errorCode);\n    }\n\n    return result;\n  }\n\n  /**\n   * Determines if a response is successful based on status code and result\n   * @param {Response} response - The HTTP response\n   * @param {ResultObject} result - The parsed result object\n   * @return {boolean} - Whether the response is successful\n   * @private\n   */\n  private _isSuccessResponse(response: Response, result: ResultObject): boolean {\n    const value = (result as any).result;\n    return (\n      response.status >= 200 &&\n      response.status <= 299 &&\n      (value === true || value === \"true\" || value === global_constants.SCORM_TRUE)\n    );\n  }\n\n  /**\n   * Updates the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: InternalSettings): void {\n    this.settings = settings;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { IEventService } from \"../interfaces/services\";\n\n/**\n * Interface for a listener object\n */\ninterface Listener {\n  functionName: string;\n  CMIElement: string | null;\n  callback: Function;\n}\n\n/**\n * Type for parsed listener information\n */\ninterface ParsedListener {\n  functionName: string;\n  CMIElement: string | null;\n}\n\n/**\n * Service for handling event listeners and event processing\n */\nexport class EventService implements IEventService {\n  // Map of function names to listeners for faster lookups\n  private listenerMap: Map<string, Listener[]> = new Map();\n  // Total count of listeners for logging\n  private listenerCount = 0;\n  // Function to log API messages\n  private readonly apiLog: (\n    functionName: string,\n    message: string,\n    messageLevel: LogLevel,\n    CMIElement?: string,\n  ) => void;\n\n  /**\n   * Constructor for EventService\n   * @param {Function} apiLog - Function to log API messages\n   */\n  constructor(\n    apiLog: (\n      functionName: string,\n      message: string,\n      messageLevel: LogLevel,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.apiLog = apiLog;\n  }\n\n  /**\n   * Parses a listener name into its components\n   *\n   * @param {string} listenerName - The name of the listener\n   * @returns {ParsedListener|null} - The parsed listener information or null if invalid\n   */\n  private parseListenerName(listenerName: string): ParsedListener | null {\n    const listenerSplit = listenerName.split(\".\");\n    if (listenerSplit.length === 0) return null;\n\n    const functionName = listenerSplit[0];\n    let CMIElement: string | null = null;\n\n    if (listenerSplit.length > 1) {\n      CMIElement = listenerName.replace(`${functionName}.`, \"\");\n    }\n\n    return { functionName: functionName ?? listenerName, CMIElement };\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener\n   * @param {Function} callback - The callback function to execute when the event occurs\n   */\n  on(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get or create the array for this function name\n      const listeners = this.listenerMap.get(functionName) ?? [];\n\n      // Add the new listener\n      listeners.push({\n        functionName,\n        CMIElement,\n        callback,\n      });\n\n      // Update the map and count\n      this.listenerMap.set(functionName, listeners);\n      this.listenerCount++;\n\n      this.apiLog(\n        \"on\",\n        `Added event listener: ${this.listenerCount}`,\n        LogLevelEnum.INFO,\n        functionName,\n      );\n    }\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener\n   *\n   * @param {string} listenerName - The name of the listener to remove\n   * @param {Function} callback - The callback function to remove\n   */\n  off(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get the listeners for this function name\n      const listeners = this.listenerMap.get(functionName);\n      if (!listeners) continue;\n\n      // Find the index of the listener to remove\n      const removeIndex = listeners.findIndex(\n        (obj) => obj.CMIElement === CMIElement && obj.callback === callback,\n      );\n\n      if (removeIndex !== -1) {\n        // Remove the listener\n        listeners.splice(removeIndex, 1);\n        this.listenerCount--;\n\n        // Update the map or remove the entry if empty\n        if (listeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, listeners);\n        }\n\n        this.apiLog(\n          \"off\",\n          `Removed event listener: ${this.listenerCount}`,\n          LogLevelEnum.INFO,\n          functionName,\n        );\n      }\n    }\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener to clear\n   */\n  clear(listenerName: string) {\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // If we have listeners for this function name\n      if (this.listenerMap.has(functionName)) {\n        const listeners = this.listenerMap.get(functionName)!;\n\n        // Filter out listeners that match the criteria\n        const newListeners = listeners.filter((obj) => obj.CMIElement !== CMIElement);\n\n        // Update the count and map\n        this.listenerCount -= listeners.length - newListeners.length;\n\n        if (newListeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, newListeners);\n        }\n      }\n    }\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created\n   *\n   * @param {string} functionName - The name of the function that triggered the event\n   * @param {string} CMIElement - The CMI element that was affected\n   * @param {any} value - The value that was set\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this.apiLog(functionName, value, LogLevelEnum.INFO, CMIElement);\n\n    // Get listeners for this function name\n    const listeners = this.listenerMap.get(functionName);\n    if (!listeners) return;\n\n    for (const listener of listeners) {\n      const listenerHasCMIElement = !!listener.CMIElement;\n      let CMIElementsMatch = false;\n\n      // Check if CMI elements match\n      if (CMIElement && listener.CMIElement) {\n        if (listener.CMIElement.endsWith(\"*\")) {\n          // For wildcard matches, check if the CMI element starts with the prefix\n          const prefix = listener.CMIElement.slice(0, -1);\n          CMIElementsMatch = CMIElement.startsWith(prefix);\n        } else {\n          // For exact matches, compare the strings directly\n          CMIElementsMatch = listener.CMIElement === CMIElement;\n        }\n      }\n\n      // If the listener matches, call the callback\n      if (!listenerHasCMIElement || CMIElementsMatch) {\n        this.apiLog(\n          \"processListeners\",\n          `Processing listener: ${listener.functionName}`,\n          LogLevelEnum.DEBUG,\n          CMIElement,\n        );\n\n        // Handle special event types\n        if (functionName.startsWith(\"Sequence\")) {\n          // For sequence events, pass the target as the first argument\n          listener.callback(value);\n        } else if (functionName === \"CommitError\") {\n          // For commit error events, pass the error code\n          listener.callback(value);\n        } else if (functionName === \"CommitSuccess\") {\n          // For commit success events, pass no arguments\n          listener.callback();\n        } else {\n          // For regular events, pass CMIElement and value\n          listener.callback(CMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Resets the event service by clearing all listeners\n   */\n  reset() {\n    this.listenerMap.clear();\n    this.listenerCount = 0;\n  }\n}\n","import { CommitObject, LogLevel } from \"../types/api_types\";\nimport { StringKeyMap, unflatten } from \"../utilities\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { BaseCMI } from \"../cmi/common/base_cmi\";\nimport { ISerializationService } from \"../interfaces/services\";\n\n/**\n * Service for handling data serialization and deserialization in scorm-again\n */\nexport class SerializationService implements ISerializationService {\n  /**\n   * Loads CMI data from a flattened JSON object with special handling for arrays and ordering.\n   *\n   * This method implements a complex algorithm for loading flattened JSON data into the CMI\n   * object structure. It handles several key challenges:\n   *\n   * 1. Ordering dependencies: Some CMI elements (like interactions and objectives) must be\n   *    loaded in a specific order to ensure proper initialization.\n   *\n   * 2. Array handling: Interactions and objectives are stored as arrays, and their properties\n   *    must be loaded in the correct order (e.g., 'id' and 'type' must be set before other properties).\n   *\n   * 3. Unflattening: The method converts flattened dot notation (e.g., \"cmi.objectives.0.id\")\n   *    back into nested objects before loading.\n   *\n   * The algorithm works by:\n   * - Categorizing keys into interactions, objectives, and other properties\n   * - Sorting interactions to prioritize 'id' and 'type' fields within each index\n   * - Sorting objectives to prioritize 'id' fields within each index\n   * - Processing each category in order: interactions, objectives, then other properties\n   *\n   * @param {StringKeyMap} json - The flattened JSON object with dot notation keys\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   *\n   * @param setStartingData\n   * @example\n   * // Example of flattened JSON input:\n   * // {\n   * //   \"cmi.objectives.0.id\": \"obj1\",\n   * //   \"cmi.objectives.0.score.raw\": \"80\",\n   * //   \"cmi.interactions.0.id\": \"int1\",\n   * //   \"cmi.interactions.0.type\": \"choice\",\n   * //   \"cmi.interactions.0.result\": \"correct\"\n   * // }\n   */\n  loadFromFlattenedJSON(\n    json: StringKeyMap,\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromFlattenedJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    const int_pattern = /^(cmi\\.interactions\\.)(\\d+)\\.(.*)$/;\n    const obj_pattern = /^(cmi\\.objectives\\.)(\\d+)\\.(.*)$/;\n\n    // Extract and categorize keys for better sorting\n    const interactions: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const objectives: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const others: { key: string; value: any }[] = [];\n\n    // Categorize keys\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key)) {\n        const intMatch = key.match(int_pattern);\n        if (intMatch) {\n          interactions.push({\n            key,\n            value: json[key],\n            index: Number(intMatch[2]),\n            field: intMatch[3] || \"\",\n          });\n          continue;\n        }\n\n        const objMatch = key.match(obj_pattern);\n        if (objMatch) {\n          objectives.push({\n            key,\n            value: json[key],\n            index: Number(objMatch[2]),\n            field: objMatch[3] || \"\",\n          });\n          continue;\n        }\n\n        others.push({ key, value: json[key] });\n      }\n    }\n\n    // Sort interactions: first by index, then prioritize 'id' and 'type' fields\n    interactions.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id and type\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n      if (a.field === \"type\") return -1;\n      if (b.field === \"type\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort objectives: first by index, then prioritize 'id' field\n    objectives.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort other keys alphabetically\n    others.sort((a, b) => a.key.localeCompare(b.key));\n\n    // Process all items in the correct order\n    const processItems = (items: { key: string; value: any }[]) => {\n      items.forEach((item) => {\n        const obj: StringKeyMap = {};\n        obj[item.key] = item.value;\n        this.loadFromJSON(\n          unflatten(obj) as StringKeyMap,\n          CMIElement,\n          setCMIValue,\n          isNotInitialized,\n          setStartingData,\n        );\n      });\n    };\n\n    // Process in order: interactions, objectives, others\n    processItems(interactions);\n    processItems(objectives);\n    processItems(others);\n  }\n\n  /**\n   * Loads CMI data from a nested JSON object with recursive traversal.\n   *\n   * This method implements a recursive algorithm for loading nested JSON data into the CMI\n   * object structure. It handles several key aspects:\n   *\n   * 1. Recursive traversal: The method recursively traverses the nested JSON structure,\n   *    building CMI element paths as it goes (e.g., \"cmi.core.student_id\").\n   *\n   * 2. Type-specific handling: Different data types are handled differently:\n   *    - Arrays: Each array element is processed individually with its index in the path\n   *    - Objects: Recursively processed with updated path\n   *    - Primitives: Set directly using setCMIValue\n   *\n   * 3. Initialization check: Ensures the method is only called before API initialization\n   *\n   * 4. Starting data storage: Stores the original JSON data for potential future use\n   *\n   * The algorithm works by:\n   * - First storing the complete JSON object via setStartingData\n   * - Iterating through each property in the JSON object\n   * - For each property, determining its type and handling it accordingly\n   * - Building the CMI element path as it traverses the structure\n   * - Setting values at the appropriate paths using setCMIValue\n   *\n   * @param {{[key: string]: any}} json - The nested JSON object to load\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value at a specific path\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   * @param {Function} setStartingData - Function to store the original JSON data\n   *\n   * @example\n   * // Example of nested JSON input:\n   * // {\n   * //   \"core\": {\n   * //     \"student_id\": \"12345\",\n   * //     \"student_name\": \"John Doe\"\n   * //   },\n   * //   \"objectives\": [\n   * //     { \"id\": \"obj1\", \"score\": { \"raw\": 80 } },\n   * //     { \"id\": \"obj2\", \"score\": { \"raw\": 90 } }\n   * //   ]\n   * // }\n   */\n  loadFromJSON(\n    json: { [key: string]: any },\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    CMIElement = CMIElement !== undefined ? CMIElement : \"cmi\";\n\n    setStartingData(json);\n\n    // could this be refactored down to flatten(json) then setCMIValue on each?\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key) && json[key]) {\n        const currentCMIElement = (CMIElement ? CMIElement + \".\" : \"\") + key;\n        const value = json[key];\n\n        if (value.constructor === Array) {\n          for (let i = 0; i < value.length; i++) {\n            if (value[i]) {\n              const item = value[i];\n              const tempCMIElement = `${currentCMIElement}.${i}`;\n\n              if (item.constructor === Object) {\n                this.loadFromJSON(\n                  item,\n                  tempCMIElement,\n                  setCMIValue,\n                  isNotInitialized,\n                  setStartingData,\n                );\n              } else {\n                setCMIValue(tempCMIElement, item);\n              }\n            }\n          }\n        } else if (value.constructor === Object) {\n          this.loadFromJSON(\n            value,\n            currentCMIElement,\n            setCMIValue,\n            isNotInitialized,\n            setStartingData,\n          );\n        } else {\n          setCMIValue(currentCMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Render the CMI object to JSON for sending to an LMS.\n   *\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {string}\n   */\n  renderCMIToJSONString(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): string {\n    // Do we want/need to return fields that have no set value?\n    if (sendFullCommit) {\n      return JSON.stringify({ cmi });\n    }\n    return JSON.stringify({ cmi }, (k, v) => (v === undefined ? null : v), 2);\n  }\n\n  /**\n   * Returns a JS object representing the current cmi\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {object}\n   */\n  renderCMIToJSONObject(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): StringKeyMap {\n    // Revert to the original implementation to maintain compatibility with tests\n    return JSON.parse(this.renderCMIToJSONString(cmi, sendFullCommit));\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} alwaysSendTotalTime - Whether to always send total time\n   * @param {boolean|Function} renderCommonCommitFields - Whether to render common commit fields\n   * @param {Function} renderCommitObject - Function to render commit object\n   * @param {Function} renderCommitCMI - Function to render commit CMI\n   * @param {LogLevel} apiLogLevel - The API log level\n   * @return {CommitObject|StringKeyMap|Array<any>}\n   */\n  getCommitObject(\n    terminateCommit: boolean,\n    alwaysSendTotalTime: boolean,\n    renderCommonCommitFields: boolean | ((commitObject: CommitObject) => boolean),\n    renderCommitObject: (terminateCommit: boolean, includeTotalTime?: boolean) => CommitObject,\n    renderCommitCMI: (\n      terminateCommit: boolean,\n      includeTotalTime?: boolean,\n    ) => StringKeyMap | Array<any>,\n    apiLogLevel: LogLevel,\n  ): CommitObject | StringKeyMap | Array<any> {\n    // Fix for issue: total time is being calculated incorrectly across multiple sessions\n    // when selfReportSessionTime and alwaysSendTotalTime are enabled.\n    //\n    // Previously, we were using a single variable (shouldTerminateCommit) that combined\n    // both concerns: whether this is a termination commit and whether to include total time.\n    // This caused the total time to be calculated as if every commit was a terminate commit\n    // when alwaysSendTotalTime was true, leading to incorrect time calculations.\n    //\n    // Now we pass the actual terminateCommit value and a separate parameter for whether\n    // to include total time, allowing the rendering functions to handle these concerns separately.\n    const includeTotalTime = alwaysSendTotalTime || terminateCommit;\n\n    const commitObject = renderCommonCommitFields\n      ? renderCommitObject(terminateCommit, includeTotalTime)\n      : renderCommitCMI(terminateCommit, includeTotalTime);\n\n    if ([LogLevelEnum.DEBUG, \"1\", 1, \"DEBUG\"].includes(apiLogLevel)) {\n      console.debug(\"Commit (terminated: \" + (terminateCommit ? \"yes\" : \"no\") + \"): \");\n      console.debug(commitObject);\n    }\n    return commitObject;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ILoggingService } from \"../interfaces/services\";\nimport { defaultLogHandler } from \"../constants/default_settings\";\n\n/**\n * Centralized logging service implemented as a singleton\n * Provides methods for logging at different levels and configuring the log level\n */\nexport class LoggingService implements ILoggingService {\n  private static _instance: LoggingService;\n  private _logLevel: LogLevel = LogLevelEnum.ERROR;\n  private _logHandler: (messageLevel: LogLevel, logMessage: string) => void;\n\n  /**\n   * Private constructor to prevent direct instantiation\n   */\n  private constructor() {\n    // Default log handler uses console methods based on log level\n    this._logHandler = defaultLogHandler;\n  }\n\n  /**\n   * Get the singleton instance of LoggingService\n   *\n   * @returns {LoggingService} The singleton instance\n   */\n  public static getInstance(): LoggingService {\n    if (!LoggingService._instance) {\n      LoggingService._instance = new LoggingService();\n    }\n    return LoggingService._instance;\n  }\n\n  /**\n   * Set the log level\n   *\n   * @param {LogLevel} level - The log level to set\n   */\n  public setLogLevel(level: LogLevel): void {\n    this._logLevel = level;\n  }\n\n  /**\n   * Get the current log level\n   *\n   * @returns {LogLevel} The current log level\n   */\n  public getLogLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  /**\n   * Set a custom log handler\n   *\n   * @param {Function} handler - The function to handle log messages\n   */\n  public setLogHandler(handler: (messageLevel: LogLevel, logMessage: string) => void): void {\n    this._logHandler = handler;\n  }\n\n  /**\n   * Log a message if the message level is greater than or equal to the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @param {string} logMessage - The message to log\n   */\n  public log(messageLevel: LogLevel, logMessage: string): void {\n    if (this.shouldLog(messageLevel)) {\n      this._logHandler(messageLevel, logMessage);\n    }\n  }\n\n  /**\n   * Log a message at ERROR level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public error(logMessage: string): void {\n    this.log(LogLevelEnum.ERROR, logMessage);\n  }\n\n  /**\n   * Log a message at WARN level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public warn(logMessage: string): void {\n    this.log(LogLevelEnum.WARN, logMessage);\n  }\n\n  /**\n   * Log a message at INFO level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public info(logMessage: string): void {\n    this.log(LogLevelEnum.INFO, logMessage);\n  }\n\n  /**\n   * Log a message at DEBUG level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public debug(logMessage: string): void {\n    this.log(LogLevelEnum.DEBUG, logMessage);\n  }\n\n  /**\n   * Determine if a message should be logged based on its level and the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @returns {boolean} Whether the message should be logged\n   */\n  private shouldLog(messageLevel: LogLevel): boolean {\n    // Convert string levels to numbers for comparison\n    const numericMessageLevel = this.getNumericLevel(messageLevel);\n    const numericLogLevel = this.getNumericLevel(this._logLevel);\n\n    return numericMessageLevel >= numericLogLevel;\n  }\n\n  /**\n   * Convert a log level to its numeric value\n   *\n   * @param {LogLevel} level - The log level to convert\n   * @returns {number} The numeric value of the log level\n   */\n  private getNumericLevel(level: LogLevel): number {\n    if (level === undefined) return LogLevelEnum.NONE;\n\n    if (typeof level === \"number\") return level;\n\n    switch (level) {\n      case \"1\":\n      case \"DEBUG\":\n        return LogLevelEnum.DEBUG;\n      case \"2\":\n      case \"INFO\":\n        return LogLevelEnum.INFO;\n      case \"3\":\n      case \"WARN\":\n        return LogLevelEnum.WARN;\n      case \"4\":\n      case \"ERROR\":\n        return LogLevelEnum.ERROR;\n      case \"5\":\n      case \"NONE\":\n        return LogLevelEnum.NONE;\n      default:\n        return LogLevelEnum.ERROR; // Default to ERROR if unknown\n    }\n  }\n}\n\n// Export a function to get the singleton instance\nexport function getLoggingService(): LoggingService {\n  return LoggingService.getInstance();\n}\n","import { LogLevelEnum } from \"../constants/enums\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { ValidationError } from \"../exceptions\";\nimport { IErrorHandlingService, ILoggingService } from \"../interfaces/services\";\nimport { getLoggingService } from \"./LoggingService\";\n\n/**\n * Service for handling SCORM errors\n */\nexport class ErrorHandlingService implements IErrorHandlingService {\n  private _lastErrorCode: string = \"0\";\n  private readonly _errorCodes: ErrorCode;\n  private readonly _apiLog: (\n    functionName: string,\n    message: string,\n    logLevel?: LogLevelEnum,\n    CMIElement?: string,\n  ) => void;\n  private readonly _getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string;\n  private readonly _loggingService: ILoggingService;\n\n  /**\n   * Constructor for ErrorHandlingService\n   *\n   * @param {ErrorCode} errorCodes - The error codes object\n   * @param {Function} apiLog - Function for logging API calls\n   * @param {Function} getLmsErrorMessageDetails - Function for getting error message details\n   * @param {ILoggingService} loggingService - Optional logging service instance\n   */\n  constructor(\n    errorCodes: ErrorCode,\n    apiLog: (\n      functionName: string,\n      message: string,\n      logLevel?: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n    loggingService?: ILoggingService,\n  ) {\n    this._errorCodes = errorCodes;\n    this._apiLog = apiLog;\n    this._getLmsErrorMessageDetails = getLmsErrorMessageDetails;\n    this._loggingService = loggingService || getLoggingService();\n  }\n\n  /**\n   * Get the last error code\n   *\n   * @return {string} - The last error code\n   */\n  get lastErrorCode(): string {\n    return this._lastErrorCode;\n  }\n\n  /**\n   * Set the last error code\n   *\n   * @param {string} errorCode - The error code to set\n   */\n  set lastErrorCode(errorCode: string) {\n    this._lastErrorCode = errorCode;\n  }\n\n  /**\n   * Throws a SCORM error\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The error number\n   * @param {string} message - The error message\n   * @throws {ValidationError} - If throwException is true, throws a ValidationError\n   */\n  throwSCORMError(CMIElement: string, errorNumber: number, message?: string): void {\n    if (!message) {\n      message = this._getLmsErrorMessageDetails(errorNumber, true);\n    }\n\n    // Format a more descriptive error message with context\n    const formattedMessage = `SCORM Error ${errorNumber}: ${message}${CMIElement ? ` [Element: ${CMIElement}]` : \"\"}`;\n\n    // Log using both the API log and the logging service for consistency\n    this._apiLog(\"throwSCORMError\", errorNumber + \": \" + message, LogLevelEnum.ERROR, CMIElement);\n    this._loggingService.error(formattedMessage);\n\n    this._lastErrorCode = String(errorNumber);\n  }\n\n  /**\n   * Clears the last SCORM error code on success.\n   *\n   * @param {string} success - Whether the operation was successful\n   */\n  clearSCORMError(success: string): void {\n    if (success !== undefined && success !== global_constants.SCORM_FALSE) {\n      this._lastErrorCode = \"0\";\n    }\n  }\n\n  /**\n   * Handles exceptions that occur when accessing or setting CMI values.\n   *\n   * This method provides centralized error handling for exceptions that occur during\n   * CMI data operations. It differentiates between different types of errors and\n   * handles them appropriately:\n   *\n   * 1. ValidationError: These are expected errors from the validation system that\n   *    indicate a specific SCORM error condition (like invalid data format or range).\n   *    For these errors, the method:\n   *    - Sets the lastErrorCode to the error code from the ValidationError\n   *    - Returns SCORM_FALSE to indicate failure to the caller\n   *\n   * 2. Standard JavaScript Error: For general JavaScript errors (like TypeError,\n   *    ReferenceError, etc.), the method:\n   *    - Logs the error message with stack trace to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * 3. Unknown exceptions: For any other type of exception that doesn't match the\n   *    above categories, the method:\n   *    - Logs the entire exception object to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * This method is critical for maintaining SCORM compliance by ensuring that\n   * all errors are properly translated into the appropriate SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {ValidationError|Error|unknown} e - The exception that was thrown\n   * @param {string} returnValue - The default return value (typically an empty string)\n   * @return {string} - Either the original returnValue or SCORM_FALSE if an error occurred\n   *\n   * @example\n   * try {\n   *   const value = getCMIValue(\"cmi.core.score.raw\");\n   *   return value;\n   * } catch (e) {\n   *   return handleValueAccessException(e, \"\");\n   * }\n   */\n  handleValueAccessException(\n    CMIElement: string,\n    e: Error | ValidationError | unknown,\n    returnValue: string,\n  ): string {\n    if (e instanceof ValidationError) {\n      const validationError = e as ValidationError;\n      this._lastErrorCode = String(validationError.errorCode);\n\n      // Log validation errors at WARN level with context\n      const errorMessage = `Validation Error ${validationError.errorCode}: ${validationError.message} [Element: ${CMIElement}]`;\n      this._loggingService.warn(errorMessage);\n\n      returnValue = global_constants.SCORM_FALSE;\n    } else if (e instanceof Error) {\n      // For standard JS errors, include the stack trace and error type\n      const errorType = e.constructor.name; // Gets the error type (e.g., TypeError, ReferenceError)\n      const errorMessage = `${errorType}: ${e.message} [Element: ${CMIElement}]`;\n      const stackTrace = e.stack || \"\";\n\n      // Log the detailed error with stack trace\n      this._loggingService.error(`${errorMessage}\\n${stackTrace}`);\n\n      this.throwSCORMError(\n        CMIElement,\n        this._errorCodes.GENERAL as number,\n        `${errorType}: ${e.message}`,\n      );\n    } else {\n      // For unknown errors, provide as much context as possible\n      const errorMessage = `Unknown error occurred while accessing [Element: ${CMIElement}]`;\n\n      this._loggingService.error(errorMessage);\n\n      try {\n        // Try to stringify the error object for more details\n        const errorDetails = JSON.stringify(e);\n        this._loggingService.error(`Error details: ${errorDetails}`);\n      } catch (jsonError) {\n        // If stringify fails, log that we couldn't get more details\n        this._loggingService.error(\"Could not stringify error object for details\");\n      }\n\n      this.throwSCORMError(CMIElement, this._errorCodes.GENERAL as number, \"Unknown error\");\n    }\n    return returnValue;\n  }\n\n  /**\n   * Get the error codes object\n   *\n   * @return {ErrorCode} - The error codes object\n   */\n  get errorCodes(): ErrorCode {\n    return this._errorCodes;\n  }\n}\n\n// Export a factory function to create the service\nexport function createErrorHandlingService(\n  errorCodes: ErrorCode,\n  apiLog: (\n    functionName: string,\n    message: string,\n    logLevel?: LogLevelEnum,\n    CMIElement?: string,\n  ) => void,\n  getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n  loggingService?: ILoggingService,\n): ErrorHandlingService {\n  return new ErrorHandlingService(errorCodes, apiLog, getLmsErrorMessageDetails, loggingService);\n}\n","import { CommitObject, InternalSettings, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ErrorCode } from \"../constants/error_codes\";\n\n/**\n * Interface for sync queue item\n */\ninterface SyncQueueItem {\n  id: string;\n  courseId: string;\n  timestamp: number;\n  data: CommitObject;\n  syncAttempts: number;\n}\n\n/**\n * Service for handling offline storage and synchronization of SCORM data\n */\nexport class OfflineStorageService {\n  private settings: InternalSettings;\n  private error_codes: ErrorCode;\n  private storeName: string = \"scorm_again_offline_data\";\n  private syncQueue: string = \"scorm_again_sync_queue\";\n  private isOnline: boolean = navigator.onLine;\n  private syncInProgress: boolean = false;\n\n  /**\n   * Constructor for OfflineStorageService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Function} apiLog - The logging function\n   */\n  constructor(\n    settings: InternalSettings,\n    error_codes: ErrorCode,\n    private apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n\n    // Initialize listeners for online/offline events\n    window.addEventListener(\"online\", this.handleOnlineStatusChange.bind(this));\n    window.addEventListener(\"offline\", this.handleOnlineStatusChange.bind(this));\n  }\n\n  /**\n   * Handle changes in online status\n   */\n  private handleOnlineStatusChange() {\n    const wasOnline = this.isOnline;\n    this.isOnline = navigator.onLine;\n\n    // If we've come back online, trigger sync process\n    if (!wasOnline && this.isOnline) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        \"Device is back online, attempting to sync...\",\n        LogLevelEnum.INFO,\n      );\n      this.syncOfflineData().then(\n        (success) => {\n          if (success) {\n            this.apiLog(\"OfflineStorageService\", \"Sync completed successfully\", LogLevelEnum.INFO);\n          } else {\n            this.apiLog(\"OfflineStorageService\", \"Sync failed\", LogLevelEnum.ERROR);\n          }\n        },\n        (error) => {\n          this.apiLog(\"OfflineStorageService\", `Error during sync: ${error}`, LogLevelEnum.ERROR);\n        },\n      );\n    } else if (wasOnline && !this.isOnline) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        \"Device is offline, data will be stored locally\",\n        LogLevelEnum.INFO,\n      );\n    }\n  }\n\n  /**\n   * Store commit data offline\n   * @param {string} courseId - Identifier for the course\n   * @param {CommitObject} commitData - The data to store offline\n   * @returns {Promise<ResultObject>} - Result of the storage operation\n   */\n  async storeOffline(courseId: string, commitData: CommitObject): Promise<ResultObject> {\n    try {\n      // Store the data in the sync queue with timestamp and unique ID\n      const queueItem: SyncQueueItem = {\n        id: `${courseId}_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`,\n        courseId,\n        timestamp: Date.now(),\n        data: commitData,\n        syncAttempts: 0,\n      };\n\n      // Get current queue\n      const currentQueue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n      currentQueue.push(queueItem);\n\n      // Save updated queue\n      await this.saveToStorage(this.syncQueue, currentQueue);\n\n      // Also update the current state in the main storage (latest known state)\n      await this.saveToStorage(`${this.storeName}_${courseId}`, commitData);\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Stored data offline for course ${courseId}`,\n        LogLevelEnum.INFO,\n      );\n\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error storing offline data: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL ?? 0,\n      };\n    }\n  }\n\n  /**\n   * Get the stored offline data for a course\n   * @param {string} courseId - Identifier for the course\n   * @returns {Promise<CommitObject|null>} - The stored data or null if not found\n   */\n  async getOfflineData(courseId: string): Promise<CommitObject | null> {\n    try {\n      const data = await this.getFromStorage<CommitObject>(`${this.storeName}_${courseId}`);\n      return data || null;\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error retrieving offline data: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return null;\n    }\n  }\n\n  /**\n   * Synchronize offline data with the LMS when connection is available\n   * @returns {Promise<boolean>} - Success status of synchronization\n   */\n  async syncOfflineData(): Promise<boolean> {\n    // Don't run multiple sync processes at once\n    if (this.syncInProgress || !this.isOnline) {\n      return false;\n    }\n\n    this.syncInProgress = true;\n\n    try {\n      // Get the queue of items to sync\n      const syncQueue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n\n      if (syncQueue.length === 0) {\n        this.syncInProgress = false;\n        return true;\n      }\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Found ${syncQueue.length} items to sync`,\n        LogLevelEnum.INFO,\n      );\n\n      // Keep track of successful and failed sync attempts\n      const remainingQueue: SyncQueueItem[] = [];\n\n      // Process each queue item\n      for (const item of syncQueue) {\n        // Skip items that have been attempted too many times\n        if (item.syncAttempts >= 5) {\n          this.apiLog(\n            \"OfflineStorageService\",\n            `Skipping item ${item.id} after 5 failed attempts`,\n            LogLevelEnum.WARN,\n          );\n          continue;\n        }\n\n        try {\n          // Attempt to sync this item\n          const syncResult = await this.sendDataToLMS(item.data);\n\n          if (syncResult.result === global_constants.SCORM_TRUE) {\n            // Sync was successful, no need to keep this item\n            this.apiLog(\n              \"OfflineStorageService\",\n              `Successfully synced item ${item.id}`,\n              LogLevelEnum.INFO,\n            );\n          } else {\n            // Sync failed, increment attempts and keep in queue\n            item.syncAttempts++;\n            remainingQueue.push(item);\n            this.apiLog(\n              \"OfflineStorageService\",\n              `Failed to sync item ${item.id}, attempt #${item.syncAttempts}`,\n              LogLevelEnum.WARN,\n            );\n          }\n        } catch (error) {\n          // On error, increment attempts and keep in queue\n          item.syncAttempts++;\n          remainingQueue.push(item);\n          this.apiLog(\n            \"OfflineStorageService\",\n            `Error syncing item ${item.id}: ${error}`,\n            LogLevelEnum.ERROR,\n          );\n        }\n      }\n\n      // Update the queue with remaining items\n      await this.saveToStorage(this.syncQueue, remainingQueue);\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Sync completed. ${syncQueue.length - remainingQueue.length} items synced, ${remainingQueue.length} items remaining`,\n        LogLevelEnum.INFO,\n      );\n\n      this.syncInProgress = false;\n      return true;\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error during sync process: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      this.syncInProgress = false;\n      return false;\n    }\n  }\n\n  /**\n   * Send data to the LMS when online\n   * @param {CommitObject} data - The data to send to the LMS\n   * @returns {Promise<ResultObject>} - Result of the sync operation\n   */\n  private async sendDataToLMS(data: CommitObject): Promise<ResultObject> {\n    if (!this.settings.lmsCommitUrl) {\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL || 101,\n      };\n    }\n\n    try {\n      // Apply request handler if configured\n      const processedData = this.settings.requestHandler(data);\n\n      // Send the data to the LMS\n      const init = {\n        method: \"POST\",\n        mode: this.settings.fetchMode,\n        body: JSON.stringify(processedData),\n        headers: {\n          ...this.settings.xhrHeaders,\n          \"Content-Type\": this.settings.commitRequestDataType,\n        },\n      } as RequestInit;\n\n      if (this.settings.xhrWithCredentials) {\n        init.credentials = \"include\";\n      }\n\n      const response = await fetch(this.settings.lmsCommitUrl as string, init);\n\n      // Process the response using the configured handler\n      const result =\n        typeof this.settings.responseHandler === \"function\"\n          ? await this.settings.responseHandler(response)\n          : await response.json();\n\n      if (\n        response.status >= 200 &&\n        response.status <= 299 &&\n        (result.result === true || result.result === global_constants.SCORM_TRUE)\n      ) {\n        if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n          result.errorCode = 0;\n        }\n        return result;\n      } else {\n        if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n          result.errorCode = this.error_codes.GENERAL;\n        }\n        return result;\n      }\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error sending data to LMS: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL || 101,\n      };\n    }\n  }\n\n  /**\n   * Check if the device is currently online\n   * @returns {boolean} - Online status\n   */\n  isDeviceOnline(): boolean {\n    return this.isOnline;\n  }\n\n  // noinspection JSValidateJSDoc\n  /**\n   * Get item from localStorage\n   * @param {string} key - The key to retrieve\n   * @returns {Promise<T|null>} - The retrieved data\n   */\n  private async getFromStorage<T>(key: string): Promise<T | null> {\n    const storedData = localStorage.getItem(key);\n    if (storedData) {\n      try {\n        return JSON.parse(storedData) as T;\n      } catch (e) {\n        return null;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Save item to localStorage\n   * @param {string} key - The key to store under\n   * @param {any} data - The data to store\n   * @returns {Promise<void>}\n   */\n  private async saveToStorage(key: string, data: any): Promise<void> {\n    localStorage.setItem(key, JSON.stringify(data));\n  }\n\n  /**\n   * Check if there is pending offline data for a course\n   * @param {string} courseId - Identifier for the course\n   * @returns {Promise<boolean>} - Whether there is pending data\n   */\n  async hasPendingOfflineData(courseId: string): Promise<boolean> {\n    const queue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n    return queue.some((item) => item.courseId === courseId);\n  }\n\n  /**\n   * Update the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: InternalSettings): void {\n    this.settings = settings;\n  }\n}\n","import { ErrorCode } from \"./constants/error_codes\";\nimport { global_constants } from \"./constants/api_constants\";\nimport * as Utilities from \"./utilities\";\nimport { formatMessage, StringKeyMap, stringMatches } from \"./utilities\";\nimport { BaseCMI, BaseRootCMI } from \"./cmi/common/base_cmi\";\nimport {\n  CommitObject,\n  InternalSettings,\n  LogLevel,\n  ResultObject,\n  Settings,\n} from \"./types/api_types\";\nimport { defaultLogHandler, DefaultSettings } from \"./constants/default_settings\";\nimport { IBaseAPI } from \"./interfaces/IBaseAPI\";\nimport { ScheduledCommit } from \"./types/scheduled_commit\";\nimport { LogLevelEnum } from \"./constants/enums\";\nimport { HttpService } from \"./services/HttpService\";\nimport { EventService } from \"./services/EventService\";\nimport { SerializationService } from \"./services/SerializationService\";\nimport { createErrorHandlingService } from \"./services/ErrorHandlingService\";\nimport { getLoggingService } from \"./services/LoggingService\";\nimport { OfflineStorageService } from \"./services/OfflineStorageService\";\nimport {\n  ICMIDataService,\n  IErrorHandlingService,\n  IEventService,\n  IHttpService,\n  ILoggingService,\n  IOfflineStorageService,\n  ISerializationService,\n} from \"./interfaces/services\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { ValidationError } from \"./exceptions\";\n\n/**\n * Base API class for AICC, SCORM 1.2, and SCORM 2004. Should be considered\n * abstract, and never initialized on its own.\n */\nexport default abstract class BaseAPI implements IBaseAPI {\n  private _timeout?: ScheduledCommit | undefined;\n  private readonly _error_codes: ErrorCode;\n  private _settings: InternalSettings = DefaultSettings;\n  private readonly _httpService: IHttpService;\n  private _eventService: IEventService;\n  private _serializationService: ISerializationService;\n  private readonly _errorHandlingService: IErrorHandlingService;\n  private readonly _loggingService: ILoggingService;\n  private readonly _offlineStorageService?: IOfflineStorageService;\n  private _courseId: string = \"\";\n\n  /**\n   * Constructor for Base API class. Sets some shared API fields, as well as\n   * sets up options for the API.\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Settings} settings - Optional settings for the API\n   * @param {IHttpService} httpService - Optional HTTP service instance\n   * @param {IEventService} eventService - Optional Event service instance\n   * @param {ISerializationService} serializationService - Optional Serialization service instance\n   * @param {ICMIDataService} cmiDataService - Optional CMI Data service instance\n   * @param {IErrorHandlingService} errorHandlingService - Optional Error Handling service instance\n   * @param {ILoggingService} loggingService - Optional Logging service instance\n   * @param {IOfflineStorageService} offlineStorageService - Optional Offline Storage service instance\n   */\n  protected constructor(\n    error_codes: ErrorCode,\n    settings?: Settings,\n    httpService?: IHttpService,\n    eventService?: IEventService,\n    serializationService?: ISerializationService,\n    cmiDataService?: ICMIDataService,\n    errorHandlingService?: IErrorHandlingService,\n    loggingService?: ILoggingService,\n    offlineStorageService?: IOfflineStorageService,\n  ) {\n    if (new.target === BaseAPI) {\n      throw new TypeError(\"Cannot construct BaseAPI instances directly\");\n    }\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n\n    this._error_codes = error_codes;\n\n    if (settings) {\n      this.settings = {\n        ...DefaultSettings,\n        ...settings,\n      } as InternalSettings;\n    }\n\n    // Initialize and configure LoggingService\n    this._loggingService = loggingService || getLoggingService();\n    this._loggingService.setLogLevel(this.settings.logLevel);\n\n    // If settings include a custom onLogMessage function, use it as the log handler\n    if (this.settings.onLogMessage) {\n      this._loggingService.setLogHandler(this.settings.onLogMessage);\n    } else {\n      this._loggingService.setLogHandler(defaultLogHandler);\n    }\n\n    // Initialize HTTP service\n    this._httpService = httpService || new HttpService(this.settings, this._error_codes);\n\n    // Initialize Event service\n    this._eventService =\n      eventService ||\n      new EventService((functionName, message, level, element) =>\n        this.apiLog(functionName, message, level, element),\n      );\n\n    // Initialize Serialization service\n    this._serializationService = serializationService || new SerializationService();\n\n    // Initialize Error Handling service\n    this._errorHandlingService =\n      errorHandlingService ||\n      createErrorHandlingService(\n        this._error_codes,\n        (functionName, message, level, element) =>\n          this.apiLog(functionName, message, level || LogLevelEnum.ERROR, element),\n        (errorNumber, detail) => this.getLmsErrorMessageDetails(errorNumber, detail),\n      );\n\n    // Initialize Offline Storage service if enabled\n    if (this.settings.enableOfflineSupport) {\n      this._offlineStorageService =\n        offlineStorageService ||\n        new OfflineStorageService(\n          this.settings,\n          this._error_codes,\n          (functionName, message, level, element) =>\n            this.apiLog(functionName, message, level, element),\n        );\n\n      if (this.settings.courseId) {\n        this._courseId = this.settings.courseId;\n      }\n\n      // Check for offline data to restore on initialization\n      if (this._offlineStorageService && this._courseId) {\n        this._offlineStorageService\n          .getOfflineData(this._courseId)\n          .then((offlineData) => {\n            if (offlineData) {\n              this.apiLog(\"constructor\", \"Found offline data to restore\", LogLevelEnum.INFO);\n              // Restore data from offline storage\n              this.loadFromJSON(offlineData.runtimeData);\n            }\n          })\n          .catch((error) => {\n            this.apiLog(\n              \"constructor\",\n              `Error retrieving offline data: ${error}`,\n              LogLevelEnum.ERROR,\n            );\n          });\n      }\n    }\n  }\n\n  public abstract cmi: BaseCMI;\n  public startingData?: StringKeyMap;\n\n  public currentState: number;\n\n  /**\n   * Get the last error code\n   * @return {string}\n   */\n  get lastErrorCode(): string {\n    return this._errorHandlingService?.lastErrorCode ?? \"0\";\n  }\n\n  /**\n   * Set the last error code\n   * @param {string} errorCode\n   */\n  set lastErrorCode(errorCode: string) {\n    if (this._errorHandlingService) {\n      this._errorHandlingService.lastErrorCode = errorCode;\n    }\n  }\n\n  /**\n   * Protected getter for eventService\n   * @return {IEventService}\n   */\n  protected get eventService(): IEventService {\n    return this._eventService;\n  }\n\n  /**\n   * Protected getter for loggingService\n   * @return {ILoggingService}\n   */\n  protected get loggingService(): ILoggingService {\n    return this._loggingService;\n  }\n\n  /**\n   * Reset the API to its initial state.\n   * This method clears all current data and resets the API to an uninitialized state.\n   * It can optionally accept new settings to configure the API after reset.\n   *\n   * @param {Settings} settings - Optional new settings to apply after reset\n   */\n  abstract reset(settings?: Settings): void;\n\n  /**\n   * Common reset method for all APIs. New settings are merged with the existing settings.\n   * @param {Settings} settings\n   * @protected\n   */\n  commonReset(settings?: Settings): void {\n    this.apiLog(\"reset\", \"Called\", LogLevelEnum.INFO);\n\n    this.settings = { ...this.settings, ...settings };\n\n    this.clearScheduledCommit();\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n    this.lastErrorCode = \"0\";\n    this._eventService.reset();\n    this.startingData = {};\n\n    // Update offline storage service with new settings if it exists\n    if (this._offlineStorageService) {\n      this._offlineStorageService.updateSettings(this.settings);\n\n      if (settings?.courseId) {\n        this._courseId = settings.courseId;\n      }\n    }\n  }\n\n  /**\n   * Initialize the API\n   * @param {string} callbackName\n   * @param {string} initializeMessage\n   * @param {string} terminationMessage\n   * @return {string}\n   */\n  initialize(\n    callbackName: string,\n    initializeMessage?: string,\n    terminationMessage?: string,\n  ): string {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.isInitialized()) {\n      this.throwSCORMError(\"api\", this._error_codes.INITIALIZED, initializeMessage);\n    } else if (this.isTerminated()) {\n      this.throwSCORMError(\"api\", this._error_codes.TERMINATED, terminationMessage);\n    } else {\n      if (this.settings.selfReportSessionTime) {\n        (this.cmi as BaseRootCMI).setStartTime();\n      }\n\n      this.currentState = global_constants.STATE_INITIALIZED;\n      this.lastErrorCode = \"0\";\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n\n      // If enabled, attempt to sync offline data on initialization\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._courseId &&\n        this.settings.syncOnInitialize &&\n        this._offlineStorageService.isDeviceOnline()\n      ) {\n        this._offlineStorageService.hasPendingOfflineData(this._courseId).then((hasPendingData) => {\n          if (hasPendingData) {\n            this.apiLog(\n              callbackName,\n              \"Syncing pending offline data on initialization\",\n              LogLevelEnum.INFO,\n            );\n            this._offlineStorageService?.syncOfflineData().then((syncSuccess) => {\n              if (syncSuccess) {\n                this.apiLog(callbackName, \"Successfully synced offline data\", LogLevelEnum.INFO);\n                this.processListeners(\"OfflineDataSynced\");\n              }\n            });\n          }\n        });\n      }\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Initialize the LMS API\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsInitialize(): string;\n\n  /**\n   * Finish the current LMS API session\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsFinish(): string;\n\n  /**\n   * Get the value of a CMI element from the LMS\n   * @param {string} CMIElement - The CMI element to get the value of\n   * @return {string} The value of the CMI element\n   */\n  abstract lmsGetValue(CMIElement: string): string;\n\n  /**\n   * Set the value of a CMI element in the LMS\n   * @param {string} CMIElement - The CMI element to set the value of\n   * @param {any} value - The value to set\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsSetValue(CMIElement: string, value: any): string;\n\n  /**\n   * Commit the current data to the LMS\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsCommit(): string;\n\n  /**\n   * Get the last error code from the LMS\n   * @return {string} The last error code\n   */\n  abstract lmsGetLastError(): string;\n\n  /**\n   * Get the error string for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get the string for\n   * @return {string} The error string\n   */\n  abstract lmsGetErrorString(CMIErrorCode: string | number): string;\n\n  /**\n   * Get diagnostic information for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get diagnostic information for\n   * @return {string} The diagnostic information\n   */\n  abstract lmsGetDiagnostic(CMIErrorCode: string | number): string;\n\n  /**\n   * Abstract method for validating that a response is correct.\n   * This method is used to validate the format and content of a response\n   * before it is set in the CMI data model.\n   *\n   * @param {string} _CMIElement - The CMI element path to validate\n   * @param {any} _value - The value to validate\n   * @throws {Error} If the response format is invalid\n   */\n  abstract validateCorrectResponse(_CMIElement: string, _value: any): void;\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   * APIs that inherit BaseAPI should override this method.\n   *\n   * @param {string} _CMIElement - unused\n   * @param {*} _value - unused\n   * @param {boolean} _foundFirstIndex - unused\n   * @return {BaseCMI|null}\n   * @abstract\n   */\n  abstract getChildElement(\n    _CMIElement: string,\n    _value: any,\n    _foundFirstIndex: boolean,\n  ): BaseCMI | null;\n\n  /**\n   * Attempts to store the data to the LMS, logs data if no LMS configured\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _calculateTotalTime\n   * @return {ResultObject}\n   * @abstract\n   */\n  abstract storeData(_calculateTotalTime: boolean): Promise<ResultObject>;\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   *\n   * @param {boolean} _terminateCommit - Whether this commit is part of the termination process\n   * @param {boolean} [_includeTotalTime] - Whether to include total time in the commit data\n   * @return {StringKeyMap|Array}\n   * @abstract\n   */\n  abstract renderCommitCMI(\n    _terminateCommit: boolean,\n    _includeTotalTime?: boolean,\n  ): StringKeyMap | Array<string>;\n\n  /**\n   * Render the commit object to the shortened format for LMS commit.\n   * This method transforms the CMI data into a format suitable for sending to the LMS.\n   * It is called during the commit process to prepare the data for transmission.\n   *\n   * @param {boolean} _terminateCommit - Whether this commit is part of the termination process\n   * @param {boolean} [_includeTotalTime] - Whether to include total time in the commit data\n   * @return {CommitObject} A formatted object containing the data to be sent to the LMS\n   * @example\n   * // Example of a commit object structure\n   * {\n   *   method: \"POST\",\n   *   params: {\n   *     cmi: { ... },\n   *     finishState: \"COMPLETED\"\n   *   }\n   * }\n   */\n  abstract renderCommitObject(_terminateCommit: boolean, _includeTotalTime?: boolean): CommitObject;\n\n  /**\n   * Logging for all SCORM actions\n   *\n   * @param {string} functionName\n   * @param {string} logMessage\n   * @param {number} messageLevel\n   * @param {string} CMIElement\n   */\n  apiLog(functionName: string, logMessage: string, messageLevel: LogLevel, CMIElement?: string) {\n    logMessage = formatMessage(functionName, logMessage, CMIElement);\n\n    // Delegate to LoggingService which handles log level comparison properly\n    this._loggingService.log(messageLevel, logMessage);\n  }\n\n  /**\n   * Getter for _settings\n   * @return {InternalSettings}\n   */\n  get settings(): InternalSettings {\n    return this._settings;\n  }\n\n  /**\n   * Setter for _settings\n   * @param {Settings} settings\n   */\n  set settings(settings: Settings) {\n    const previousSettings = this._settings;\n    // Merge the incoming settings with the existing settings\n    this._settings = { ...this._settings, ...settings } as InternalSettings;\n\n    // Update HTTP service settings\n    this._httpService?.updateSettings(this._settings);\n\n    // The following properties are duplicated as class properties for easier access\n    // and need to be manually updated to stay in sync with the settings object\n\n    // Update log level if it changed\n    if (settings.logLevel !== undefined && settings.logLevel !== previousSettings.logLevel) {\n      this._loggingService?.setLogLevel(settings.logLevel);\n    }\n\n    // Update log handler if onLogMessage changed\n    if (\n      settings.onLogMessage !== undefined &&\n      settings.onLogMessage !== previousSettings.onLogMessage\n    ) {\n      this._loggingService?.setLogHandler(settings.onLogMessage);\n    }\n  }\n\n  /**\n   * Terminates the current run of the API\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async terminate(callbackName: string, checkTerminated: boolean): Promise<string> {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.TERMINATION_BEFORE_INIT ?? 0,\n        this._error_codes.MULTIPLE_TERMINATION ?? 0,\n      )\n    ) {\n      this.currentState = global_constants.STATE_TERMINATED;\n      // If enabled, attempt to sync offline data before termination\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._courseId &&\n        this.settings.syncOnTerminate &&\n        this._offlineStorageService.isDeviceOnline()\n      ) {\n        const hasPendingData = await this._offlineStorageService.hasPendingOfflineData(\n          this._courseId,\n        );\n        if (hasPendingData) {\n          this.apiLog(\n            callbackName,\n            \"Syncing pending offline data before termination\",\n            LogLevelEnum.INFO,\n          );\n          await this._offlineStorageService.syncOfflineData();\n        }\n      }\n\n      const result: ResultObject = await this.storeData(true);\n      if ((result.errorCode ?? 0) > 0) {\n        // Log detailed error information before throwing SCORM error\n        if (result.errorMessage) {\n          this.apiLog(\n            \"terminate\",\n            `Terminate failed with error: ${result.errorMessage}`,\n            LogLevelEnum.ERROR,\n          );\n        }\n        if (result.errorDetails) {\n          this.apiLog(\n            \"terminate\",\n            `Error details: ${JSON.stringify(result.errorDetails)}`,\n            LogLevelEnum.DEBUG,\n          );\n        }\n        this.throwSCORMError(\"api\", result.errorCode ?? 0);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Get the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  getValue(callbackName: string, checkTerminated: boolean, CMIElement: string): string {\n    let returnValue: string = \"\";\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.RETRIEVE_BEFORE_INIT ?? 0,\n        this._error_codes.RETRIEVE_AFTER_TERM ?? 0,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.getCMIValue(CMIElement);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement);\n    }\n\n    this.apiLog(callbackName, \": returned: \" + returnValue, LogLevelEnum.INFO, CMIElement);\n\n    if (returnValue === undefined) {\n      return \"\";\n    }\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Sets the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {string} commitCallback\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  setValue(\n    callbackName: string,\n    commitCallback: string,\n    checkTerminated: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (value !== undefined) {\n      value = String(value);\n    }\n    let returnValue: string = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.STORE_BEFORE_INIT ?? 0,\n        this._error_codes.STORE_AFTER_TERM ?? 0,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.setCMIValue(CMIElement, value);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement, value);\n    }\n\n    if (returnValue === undefined) {\n      returnValue = global_constants.SCORM_FALSE;\n    }\n\n    // If we didn't have any errors while setting the data, go ahead and\n    // schedule a commit, if autocommit is turned on\n    if (String(this.lastErrorCode) === \"0\") {\n      if (this.settings.autocommit) {\n        this.scheduleCommit(this.settings.autocommitSeconds * 1000, commitCallback);\n      }\n    }\n\n    this.apiLog(\n      callbackName,\n      \": \" + value + \": result: \" + returnValue,\n      LogLevelEnum.INFO,\n      CMIElement,\n    );\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async commit(callbackName: string, checkTerminated: boolean = false): Promise<string> {\n    this.clearScheduledCommit();\n\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.COMMIT_BEFORE_INIT ?? 0,\n        this._error_codes.COMMIT_AFTER_TERM ?? 0,\n      )\n    ) {\n      const result = await this.storeData(false);\n      if ((result.errorCode ?? 0) > 0) {\n        // Log detailed error information before throwing SCORM error\n        if (result.errorMessage) {\n          this.apiLog(\n            \"commit\",\n            `Commit failed with error: ${result.errorMessage}`,\n            LogLevelEnum.ERROR,\n          );\n        }\n        if (result.errorDetails) {\n          this.apiLog(\n            \"commit\",\n            `Error details: ${JSON.stringify(result.errorDetails)}`,\n            LogLevelEnum.DEBUG,\n          );\n        }\n        this.throwSCORMError(\"api\", result.errorCode);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      this.apiLog(callbackName, \" Result: \" + returnValue, LogLevelEnum.DEBUG, \"HttpRequest\");\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      this.processListeners(callbackName);\n\n      // If online and there is offline data pending, attempt to sync it\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._offlineStorageService.isDeviceOnline() &&\n        this._courseId\n      ) {\n        this._offlineStorageService.hasPendingOfflineData(this._courseId).then((hasPendingData) => {\n          if (hasPendingData) {\n            this.apiLog(callbackName, \"Syncing pending offline data\", LogLevelEnum.INFO);\n            this._offlineStorageService?.syncOfflineData().then((syncSuccess) => {\n              if (syncSuccess) {\n                this.apiLog(callbackName, \"Successfully synced offline data\", LogLevelEnum.INFO);\n                this.processListeners(\"OfflineDataSynced\");\n              } else {\n                this.apiLog(callbackName, \"Failed to sync some offline data\", LogLevelEnum.WARN);\n              }\n            });\n          }\n        });\n      }\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Returns last error code\n   * @param {string} callbackName\n   * @return {string}\n   */\n  getLastError(callbackName: string): string {\n    const returnValue = String(this.lastErrorCode);\n\n    this.processListeners(callbackName);\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getErrorString(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getDiagnostic(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode, true);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Checks the LMS state and ensures it has been initialized.\n   *\n   * @param {boolean} checkTerminated\n   * @param {number} beforeInitError\n   * @param {number} afterTermError\n   * @return {boolean}\n   */\n  checkState(checkTerminated: boolean, beforeInitError: number, afterTermError: number): boolean {\n    if (this.isNotInitialized()) {\n      this.throwSCORMError(\"api\", beforeInitError);\n      return false;\n    } else if (checkTerminated && this.isTerminated()) {\n      this.throwSCORMError(\"api\", afterTermError);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {(string|number)} _errorNumber\n   * @param {boolean} _detail\n   * @return {string}\n   * @abstract\n   */\n  getLmsErrorMessageDetails(_errorNumber: string | number, _detail: boolean = false): string {\n    throw new Error(\"The getLmsErrorMessageDetails method has not been implemented\");\n  }\n\n  /**\n   * Gets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @return {string}\n   * @abstract\n   */\n  getCMIValue(_CMIElement: string): string {\n    throw new Error(\"The getCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Sets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @param {any} _value\n   * @return {string}\n   * @abstract\n   */\n  setCMIValue(_CMIElement: string, _value: any): string {\n    throw new Error(\"The setCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Shared API method to set a valid for a given element.\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  _commonSetCMIValue(\n    methodName: string,\n    scorm2004: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (!CMIElement || CMIElement === \"\") {\n      return global_constants.SCORM_FALSE;\n    }\n\n    this.lastErrorCode = \"0\";\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap | BaseCMI = this as StringKeyMap;\n    let returnValue = global_constants.SCORM_FALSE;\n    let foundFirstIndex = false;\n\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      const attribute = structure[idx];\n\n      if (idx === structure.length - 1) {\n        if (scorm2004 && attribute && attribute.substring(0, 8) === \"{target=\") {\n          if (this.isInitialized()) {\n            this.throwSCORMError(CMIElement, this._error_codes.READ_ONLY_ELEMENT);\n            break;\n          } else {\n            refObject = {\n              ...refObject,\n              attribute: value,\n            };\n          }\n        } else if (\n          typeof attribute === \"undefined\" ||\n          !this._checkObjectHasProperty(refObject as StringKeyMap, attribute)\n        ) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        } else {\n          if (\n            stringMatches(CMIElement, \"\\\\.correct_responses\\\\.\\\\d+$\") &&\n            this.isInitialized() &&\n            attribute !== \"pattern\"\n          ) {\n            this.validateCorrectResponse(CMIElement, value);\n            if (this.lastErrorCode !== \"0\") {\n              this.throwSCORMError(CMIElement, this._error_codes.TYPE_MISMATCH);\n              break;\n            }\n          }\n\n          if (!scorm2004 || this._errorHandlingService.lastErrorCode === \"0\") {\n            if (\n              typeof attribute === \"undefined\" ||\n              attribute === \"__proto__\" ||\n              attribute === \"constructor\"\n            ) {\n              this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n              break;\n            }\n            (refObject as StringKeyMap)[attribute] = value;\n            returnValue = global_constants.SCORM_TRUE;\n          }\n        }\n      } else {\n        if (\n          typeof attribute === \"undefined\" ||\n          !this._checkObjectHasProperty(refObject as StringKeyMap, attribute)\n        ) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n        refObject = (refObject as StringKeyMap)[attribute] as StringKeyMap;\n        if (!refObject) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n\n        if (refObject instanceof CMIArray) {\n          const index = parseInt(structure[idx + 1] || \"0\", 10);\n\n          // SCO is trying to set an item on an array\n          if (!isNaN(index)) {\n            const item = refObject.childArray[index];\n\n            if (item) {\n              refObject = item;\n              foundFirstIndex = true;\n            } else {\n              const newChild = this.getChildElement(CMIElement, value, foundFirstIndex);\n              foundFirstIndex = true;\n\n              if (!newChild) {\n                if (this.lastErrorCode === \"0\") {\n                  this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n                }\n                break;\n              } else {\n                if (refObject.initialized) newChild.initialize();\n                refObject.childArray[index] = newChild;\n                refObject = newChild;\n              }\n            }\n\n            // Have to update idx value to skip the array position\n            idx++;\n          }\n        }\n      }\n    }\n\n    if (returnValue === global_constants.SCORM_FALSE) {\n      this.apiLog(\n        methodName,\n        `There was an error setting the value for: ${CMIElement}, value of: ${value}`,\n        LogLevelEnum.WARN,\n      );\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @return {any}\n   */\n  _commonGetCMIValue(methodName: string, scorm2004: boolean, CMIElement: string): any {\n    if (!CMIElement || CMIElement === \"\") {\n      return \"\";\n    }\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap = this as StringKeyMap;\n    let attribute = null;\n\n    const uninitializedErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) has not been initialized.`;\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      attribute = structure[idx];\n\n      if (!scorm2004) {\n        if (idx === structure.length - 1) {\n          if (\n            typeof attribute === \"undefined\" ||\n            !this._checkObjectHasProperty(refObject, attribute)\n          ) {\n            this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n            return;\n          }\n        }\n      } else {\n        if (\n          String(attribute).substring(0, 8) === \"{target=\" &&\n          typeof refObject._isTargetValid == \"function\"\n        ) {\n          const target = String(attribute).substring(8, String(attribute).length - 9);\n          return refObject._isTargetValid(target);\n        } else if (\n          typeof attribute === \"undefined\" ||\n          !this._checkObjectHasProperty(refObject, attribute)\n        ) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          return;\n        }\n      }\n\n      if (attribute !== undefined && attribute !== null) {\n        refObject = refObject[attribute] as StringKeyMap;\n        if (refObject === undefined) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n      } else {\n        this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n        break;\n      }\n\n      if (refObject instanceof CMIArray) {\n        const index = parseInt(structure[idx + 1] || \"\", 10);\n\n        // SCO is trying to set an item on an array\n        if (!isNaN(index)) {\n          const item = refObject.childArray[index];\n\n          if (item) {\n            refObject = item;\n          } else {\n            this.throwSCORMError(\n              CMIElement,\n              this._error_codes.VALUE_NOT_INITIALIZED,\n              uninitializedErrorMessage,\n            );\n            break;\n          }\n\n          // Have to update idx value to skip the array position\n          idx++;\n        }\n      }\n    }\n\n    if (refObject === null || refObject === undefined) {\n      if (!scorm2004) {\n        if (attribute === \"_children\") {\n          this.throwSCORMError(CMIElement, this._error_codes.CHILDREN_ERROR, undefined);\n        } else if (attribute === \"_count\") {\n          this.throwSCORMError(CMIElement, this._error_codes.COUNT_ERROR, undefined);\n        }\n      }\n    } else {\n      return refObject;\n    }\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isInitialized(): boolean {\n    return this.currentState === global_constants.STATE_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_NOT_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isNotInitialized(): boolean {\n    return this.currentState === global_constants.STATE_NOT_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_TERMINATED\n   *\n   * @return {boolean}\n   */\n  isTerminated(): boolean {\n    return this.currentState === global_constants.STATE_TERMINATED;\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event.\n   * This method allows you to register a callback function that will be executed\n   * when the specified event occurs.\n   *\n   * @param {string} listenerName - The name of the event to listen for (e.g., \"Initialize\", \"Terminate\", \"GetValue\", \"SetValue\", \"Commit\")\n   * @param {function} callback - The function to execute when the event occurs. The callback will receive relevant event data.\n   * @example\n   * // Listen for Initialize events\n   * api.on(\"Initialize\", function() {\n   *   console.log(\"API has been initialized\");\n   * });\n   *\n   * // Listen for SetValue events\n   * api.on(\"SetValue\", function(element, value) {\n   *   console.log(\"Setting \" + element + \" to \" + value);\n   * });\n   */\n  on(listenerName: string, callback: Function) {\n    this._eventService.on(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener.\n   * This method removes a previously registered callback for an event.\n   * Both the event name and the callback reference must match what was used in the 'on' method.\n   *\n   * @param {string} listenerName - The name of the event to stop listening for\n   * @param {function} callback - The callback function to remove\n   * @example\n   * // Remove a specific listener\n   * const myCallback = function() { console.log(\"API initialized\"); };\n   * api.on(\"Initialize\", myCallback);\n   * // Later, when you want to remove it:\n   * api.off(\"Initialize\", myCallback);\n   */\n  off(listenerName: string, callback: Function) {\n    this._eventService.off(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event.\n   * This method removes all callbacks registered for the specified event.\n   *\n   * @param {string} listenerName - The name of the event to clear all listeners for\n   * @example\n   * // Remove all listeners for the Initialize event\n   * api.clear(\"Initialize\");\n   */\n  clear(listenerName: string) {\n    this._eventService.clear(listenerName);\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created for a specific event.\n   * This method is called internally when SCORM events occur to notify all registered listeners.\n   * It triggers all callback functions registered for the specified event.\n   *\n   * @param {string} functionName - The name of the function/event that occurred\n   * @param {string} CMIElement - Optional CMI element involved in the event\n   * @param {any} value - Optional value associated with the event\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this._eventService.processListeners(functionName, CMIElement, value);\n  }\n\n  /**\n   * Throws a SCORM error with the specified error number and optional message.\n   * This method sets the last error code and can be used to indicate that an operation failed.\n   * The error number should correspond to one of the standard SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The SCORM error code to set\n   * @param {string} message - Optional custom error message to provide additional context\n   * @example\n   * // Throw a \"not initialized\" error\n   * this.throwSCORMError(301, \"The API must be initialized before calling GetValue\");\n   */\n  throwSCORMError(\n    CMIElement: string | undefined,\n    errorNumber: number | undefined,\n    message?: string,\n  ) {\n    this._errorHandlingService.throwSCORMError(CMIElement, errorNumber ?? 0, message);\n  }\n\n  /**\n   * Clears the last SCORM error code when an operation succeeds.\n   * This method is typically called after successful API operations to reset the error state.\n   * It only clears the error if the success parameter is \"true\".\n   *\n   * @param {string} success - A string indicating whether the operation succeeded (\"true\" or \"false\")\n   * @example\n   * // Clear error after successful operation\n   * this.clearSCORMError(\"true\");\n   */\n  clearSCORMError(success: string) {\n    this._errorHandlingService.clearSCORMError(success);\n  }\n\n  /**\n   * Load the CMI from a flattened JSON object.\n   * This method populates the CMI data model from a flattened JSON structure\n   * where keys represent CMI element paths (e.g., \"cmi.core.student_id\").\n   *\n   * @param {StringKeyMap} json - The flattened JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a flattened JSON structure\n   * api.loadFromFlattenedJSON({\n   *   \"cmi.core.student_id\": \"12345\",\n   *   \"cmi.core.student_name\": \"John Doe\",\n   *   \"cmi.core.lesson_status\": \"incomplete\"\n   * });\n   */\n  loadFromFlattenedJSON(json: StringKeyMap, CMIElement?: string) {\n    if (!CMIElement) {\n      // by default, we start from a blank string because we're expecting each element to start with `cmi`\n      CMIElement = \"\";\n    }\n\n    this._serializationService.loadFromFlattenedJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Returns a flattened JSON object representing the current CMI data.\n   */\n  getFlattenedCMI(): StringKeyMap {\n    return Utilities.flatten(this.renderCMIToJSONObject());\n  }\n\n  /**\n   * Loads CMI data from a hierarchical JSON object.\n   * This method populates the CMI data model from a nested JSON structure\n   * that mirrors the CMI object hierarchy.\n   *\n   * @param {StringKeyMap} json - The hierarchical JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a hierarchical JSON structure\n   * api.loadFromJSON({\n   *   core: {\n   *     student_id: \"12345\",\n   *     student_name: \"John Doe\",\n   *     lesson_status: \"incomplete\"\n   *   },\n   *   objectives: [\n   *     { id: \"obj1\", score: { raw: 85 } }\n   *   ]\n   * });\n   */\n  loadFromJSON(json: StringKeyMap, CMIElement: string = \"\") {\n    if (\n      (!CMIElement || CMIElement === \"\") &&\n      !Object.hasOwnProperty.call(json, \"cmi\") &&\n      !Object.hasOwnProperty.call(json, \"adl\")\n    ) {\n      // providing a backward compatibility for the old v1 API\n      CMIElement = \"cmi\";\n    }\n    this._serializationService.loadFromJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Render the CMI object to a JSON string for sending to an LMS.\n   * This method serializes the current CMI data model to a JSON string.\n   * The output format is controlled by the sendFullCommit setting.\n   *\n   * @return {string} A JSON string representation of the CMI data\n   * @example\n   * // Get the current CMI data as a JSON string\n   * const jsonString = api.renderCMIToJSONString();\n   * console.log(jsonString); // '{\"core\":{\"student_id\":\"12345\",...}}'\n   */\n  renderCMIToJSONString(): string {\n    return this._serializationService.renderCMIToJSONString(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Returns a JavaScript object representing the current CMI data.\n   * This method creates a plain JavaScript object that mirrors the\n   * structure of the CMI data model, suitable for further processing.\n   *\n   * @return {StringKeyMap} A JavaScript object representing the CMI data\n   * @example\n   * // Get the current CMI data as a JavaScript object\n   * const cmiObject = api.renderCMIToJSONObject();\n   * console.log(cmiObject.core.student_id); // \"12345\"\n   */\n  renderCMIToJSONObject(): StringKeyMap {\n    return this._serializationService.renderCMIToJSONObject(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Process an HTTP request\n   *\n   * @param {string} url - The URL to send the request to\n   * @param {CommitObject | StringKeyMap | Array<any>} params - The parameters to send\n   * @param {boolean} immediate - Whether to send the request immediately without waiting\n   * @returns {Promise<ResultObject>} - The result of the request\n   * @async\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n  ): Promise<ResultObject> {\n    // If offline support is enabled and device is offline, store data locally instead of sending\n    if (\n      this.settings.enableOfflineSupport &&\n      this._offlineStorageService &&\n      !this._offlineStorageService.isDeviceOnline() &&\n      this._courseId\n    ) {\n      this.apiLog(\n        \"processHttpRequest\",\n        \"Device is offline, storing data locally\",\n        LogLevelEnum.INFO,\n      );\n\n      if (params && typeof params === \"object\" && \"cmi\" in params) {\n        return await this._offlineStorageService.storeOffline(\n          this._courseId,\n          params as CommitObject,\n        );\n      } else {\n        this.apiLog(\n          \"processHttpRequest\",\n          \"Invalid commit data format for offline storage\",\n          LogLevelEnum.ERROR,\n        );\n        return {\n          result: global_constants.SCORM_FALSE,\n          errorCode: this._error_codes.GENERAL ?? 101, // Fallback to a default error code if GENERAL is undefined\n        };\n      }\n    }\n\n    // Otherwise, proceed with normal HTTP request\n    return await this._httpService.processHttpRequest(\n      url,\n      params,\n      immediate,\n      (functionName, message, level, element) => this.apiLog(functionName, message, level, element),\n      (functionName, CMIElement, value) => this.processListeners(functionName, CMIElement, value),\n    );\n  }\n\n  /**\n   * Schedules a commit operation to occur after a specified delay.\n   * This method is used to implement auto-commit functionality, where data\n   * is periodically sent to the LMS without requiring explicit commit calls.\n   *\n   * @param {number} when - The number of milliseconds to wait before committing\n   * @param {string} callback - The name of the commit event callback\n   * @example\n   * // Schedule a commit to happen in 60 seconds\n   * api.scheduleCommit(60000, \"commit\");\n   */\n  scheduleCommit(when: number, callback: string) {\n    if (!this._timeout) {\n      this._timeout = new ScheduledCommit(this, when, callback);\n      this.apiLog(\"scheduleCommit\", \"scheduled\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Clears and cancels any currently scheduled commits.\n   * This method is typically called when an explicit commit is performed\n   * or when the API is terminated, to prevent redundant commits.\n   *\n   * @example\n   * // Cancel any pending scheduled commits\n   * api.clearScheduledCommit();\n   */\n  clearScheduledCommit() {\n    if (this._timeout) {\n      this._timeout.cancel();\n      this._timeout = undefined;\n      this.apiLog(\"clearScheduledCommit\", \"cleared\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Checks if an object has a specific property, using multiple detection methods.\n   * This method performs a thorough check for property existence by:\n   * 1. Checking if it's an own property using Object.hasOwnProperty\n   * 2. Checking if it's defined in the prototype with a property descriptor\n   * 3. Checking if it's accessible via the 'in' operator (includes inherited properties)\n   *\n   * @param {StringKeyMap} StringKeyMap - The object to check for the property\n   * @param {string} attribute - The property name to look for\n   * @return {boolean} True if the property exists on the object or its prototype chain\n   * @private\n   *\n   * @example\n   * // Check for an own property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"name\"); // Returns true\n   *\n   * @example\n   * // Check for an inherited property\n   * class Parent { get type() { return \"parent\"; } }\n   * const child = Object.create(new Parent());\n   * this._checkObjectHasProperty(child, \"type\"); // Returns true\n   *\n   * @example\n   * // Check for a non-existent property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"age\"); // Returns false\n   */\n  private _checkObjectHasProperty(StringKeyMap: StringKeyMap, attribute: string): boolean {\n    return (\n      Object.hasOwnProperty.call(StringKeyMap, attribute) ||\n      Object.getOwnPropertyDescriptor(Object.getPrototypeOf(StringKeyMap), attribute) != null ||\n      attribute in StringKeyMap\n    );\n  }\n\n  /**\n   * Handles exceptions that occur when accessing CMI values.\n   * This method delegates to the ErrorHandlingService to process exceptions\n   * that occur during CMI data operations, ensuring consistent error handling\n   * throughout the API.\n   *\n   * @param {string} CMIElement\n   * @param {any} e - The exception that was thrown\n   * @param {string} returnValue - The default return value to use if an error occurs\n   * @return {string} Either the original returnValue or SCORM_FALSE if an error occurred\n   * @private\n   *\n   * @example\n   * // Handle a validation error when getting a CMI value\n   * try {\n   *   return this.getCMIValue(\"cmi.core.score.raw\");\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"\");\n   * }\n   *\n   * @example\n   * // Handle a general error when setting a CMI value\n   * try {\n   *   this.setCMIValue(\"cmi.core.lesson_status\", \"completed\");\n   *   return \"true\";\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"false\");\n   * }\n   */\n  private handleValueAccessException(CMIElement: string, e: any, returnValue: string): string {\n    if (e instanceof ValidationError) {\n      this.lastErrorCode = String(e.errorCode);\n      returnValue = global_constants.SCORM_FALSE;\n      this.throwSCORMError(CMIElement, e.errorCode, e.errorMessage);\n    } else {\n      if (e instanceof Error && e.message) {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, e.message);\n      } else {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, \"Unknown error\");\n      }\n    }\n    return returnValue;\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS.\n   * This method delegates to the SerializationService to create a properly\n   * formatted object containing the CMI data that needs to be sent to the LMS.\n   * The format and content of the commit object depend on whether this is a\n   * regular commit or a termination commit.\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @return {CommitObject|StringKeyMap|Array} The formatted commit object\n   * @protected\n   *\n   * @example\n   * // Create a regular commit object\n   * const regularCommit = this.getCommitObject(false);\n   * // Result might be: { cmi: { core: { lesson_status: \"incomplete\" } } }\n   *\n   * @example\n   * // Create a termination commit object (includes total_time)\n   * const terminationCommit = this.getCommitObject(true);\n   * // Result might be: { cmi: { core: { lesson_status: \"completed\", total_time: \"PT1H30M\" } } }\n   */\n  protected getCommitObject(terminateCommit: boolean): CommitObject | StringKeyMap | Array<any> {\n    return this._serializationService.getCommitObject(\n      terminateCommit,\n      this.settings.alwaysSendTotalTime,\n      this.settings.renderCommonCommitFields,\n      (terminateCommit: boolean, includeTotalTime?: boolean) =>\n        this.renderCommitObject(terminateCommit, includeTotalTime),\n      (terminateCommit: boolean, includeTotalTime?: boolean) =>\n        this.renderCommitCMI(terminateCommit, includeTotalTime),\n      this.settings.logLevel,\n    );\n  }\n}\n","import { CMI } from \"./cmi/scorm12/cmi\";\nimport * as Utilities from \"./utilities\";\nimport { StringKeyMap, stringMatches } from \"./utilities\";\nimport { global_constants, scorm12_constants } from \"./constants/api_constants\";\nimport { scorm12_errors } from \"./constants/error_codes\";\n\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport { CMIObjectivesObject } from \"./cmi/scorm12/objectives\";\nimport {\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n} from \"./cmi/scorm12/interactions\";\nimport { NAV } from \"./cmi/scorm12/nav\";\nimport { CommitObject, ResultObject, ScoreObject, Settings } from \"./types/api_types\";\nimport { CompletionStatus, SuccessStatus } from \"./constants/enums\";\nimport BaseAPI from \"./BaseAPI\";\nimport { scorm12_regex } from \"./constants/regex\";\n\n/**\n * API class for SCORM 1.2\n */\nclass Scorm12API extends BaseAPI {\n  /**\n   * Constructor for SCORM 1.2 API\n   * @param {object} settings\n   */\n  constructor(settings?: Settings) {\n    if (settings) {\n      if (settings.mastery_override === undefined) {\n        settings.mastery_override = false;\n      }\n    }\n\n    super(scorm12_errors, settings);\n\n    this.cmi = new CMI();\n    this.nav = new NAV();\n\n    // Rename functions to match 1.2 Spec and expose to modules\n    this.LMSInitialize = this.lmsInitialize;\n    this.LMSFinish = this.lmsFinish;\n    this.LMSGetValue = this.lmsGetValue;\n    this.LMSSetValue = this.lmsSetValue;\n    this.LMSCommit = this.lmsCommit;\n    this.LMSGetLastError = this.lmsGetLastError;\n    this.LMSGetErrorString = this.lmsGetErrorString;\n    this.LMSGetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  public statusSetByModule = false;\n\n  cmi: CMI;\n  nav: NAV;\n\n  LMSInitialize: () => string;\n  LMSFinish: () => string;\n  LMSGetValue: (CMIElement: string) => string;\n  LMSSetValue: (CMIElement: string, value: any) => string;\n  LMSCommit: () => string;\n  LMSGetLastError: () => string;\n  LMSGetErrorString: (CMIErrorCode: string) => string;\n  LMSGetDiagnostic: (CMIErrorCode: string) => string;\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset(settings?: Settings) {\n    this.commonReset(settings);\n\n    this.cmi?.reset();\n    this.nav?.reset();\n  }\n\n  /**\n   * lmsInitialize function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize(): string {\n    this.cmi.initialize();\n    if (this.cmi.core.lesson_status) {\n      this.statusSetByModule = true;\n    } else {\n      this.cmi.core.lesson_status = \"not attempted\";\n    }\n    return this.initialize(\n      \"LMSInitialize\",\n      \"LMS was already initialized!\",\n      \"LMS is already finished!\",\n    );\n  }\n\n  /**\n   * LMSFinish function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish(): string {\n    (async () => {\n      await this.internalFinish();\n    })();\n    return global_constants.SCORM_TRUE;\n  }\n\n  async internalFinish(): Promise<string> {\n    const result = await this.terminate(\"LMSFinish\", true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      if (this.nav.event !== \"\") {\n        if (this.nav.event === \"continue\") {\n          this.processListeners(\"SequenceNext\");\n        } else {\n          this.processListeners(\"SequencePrevious\");\n        }\n      } else if (this.settings.autoProgress) {\n        this.processListeners(\"SequenceNext\");\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * LMSGetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement: string): string {\n    return this.getValue(\"LMSGetValue\", false, CMIElement);\n  }\n\n  /**\n   * LMSSetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement: string, value: any): string {\n    if (CMIElement === \"cmi.core.lesson_status\") {\n      this.statusSetByModule = true;\n    }\n    return this.setValue(\"LMSSetValue\", \"LMSCommit\", false, CMIElement, value);\n  }\n\n  /**\n   * LMSCommit function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit(): string {\n    if (this.settings.asyncCommit) {\n      this.scheduleCommit(500, \"LMSCommit\");\n    } else {\n      (async () => {\n        await this.commit(\"LMSCommit\", false);\n      })();\n    }\n    return global_constants.SCORM_TRUE;\n  }\n\n  /**\n   * LMSGetLastError function from SCORM 1.2 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError(): string {\n    return this.getLastError(\"LMSGetLastError\");\n  }\n\n  /**\n   * LMSGetErrorString function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode: string): string {\n    return this.getErrorString(\"LMSGetErrorString\", CMIErrorCode);\n  }\n\n  /**\n   * LMSGetDiagnostic function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode: string): string {\n    return this.getDiagnostic(\"LMSGetDiagnostic\", CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  override setCMIValue(CMIElement: string, value: any): string {\n    return this._commonSetCMIValue(\"LMSSetValue\", false, CMIElement, value);\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  override getCMIValue(CMIElement: string): any {\n    return this._commonGetCMIValue(\"getCMIValue\", false, CMIElement);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {*} _value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI|null}\n   */\n  getChildElement(CMIElement: string, _value: any, foundFirstIndex: boolean): BaseCMI | null {\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      return new CMIObjectivesObject();\n    } else if (\n      foundFirstIndex &&\n      stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+\")\n    ) {\n      return new CMIInteractionsCorrectResponsesObject();\n    } else if (\n      foundFirstIndex &&\n      stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+\")\n    ) {\n      return new CMIInteractionsObjectivesObject();\n    } else if (!foundFirstIndex && stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\")) {\n      return new CMIInteractionsObject();\n    }\n\n    return null;\n  }\n\n  /**\n   * Validates Correct Response values\n   *\n   * @param {string} _CMIElement\n   * @param {*} _value\n   */\n  validateCorrectResponse(_CMIElement: string, _value: any) {\n    // do nothing\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {number|string} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  override getLmsErrorMessageDetails(errorNumber: number | string, detail: boolean): string {\n    let basicMessage = \"No Error\";\n    let detailMessage = \"No Error\";\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (scorm12_constants.error_descriptions[errorNumber]) {\n      basicMessage =\n        scorm12_constants.error_descriptions[errorNumber]?.basicMessage || basicMessage;\n      detailMessage =\n        scorm12_constants.error_descriptions[errorNumber]?.detailMessage || detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {Scorm12API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI: Scorm12API) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} includeTotalTime - Whether to include total time in the commit data\n   * @return {object|Array}\n   */\n  renderCommitCMI(\n    terminateCommit: boolean,\n    includeTotalTime: boolean = false,\n  ): StringKeyMap | Array<string> {\n    const cmiExport: StringKeyMap = this.renderCMIToJSONObject();\n\n    if (terminateCommit || includeTotalTime) {\n      (cmiExport.cmi as any).core.total_time = this.cmi.getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened: StringKeyMap = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case \"flattened\":\n        return Utilities.flatten(cmiExport);\n      case \"params\":\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case \"json\":\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} includeTotalTime - Whether to include total time in the commit data\n   * @return {CommitObject}\n   */\n  renderCommitObject(terminateCommit: boolean, includeTotalTime: boolean = false): CommitObject {\n    const cmiExport = this.renderCommitCMI(terminateCommit, includeTotalTime);\n    const calculateTotalTime = terminateCommit || includeTotalTime;\n    const totalTimeHHMMSS = calculateTotalTime ? this.cmi.getCurrentTotalTime() : \"\";\n    const totalTimeSeconds = Utilities.getTimeAsSeconds(totalTimeHHMMSS, scorm12_regex.CMITimespan);\n    const lessonStatus = this.cmi.core.lesson_status;\n    let completionStatus = CompletionStatus.UNKNOWN;\n    let successStatus = SuccessStatus.UNKNOWN;\n    if (lessonStatus) {\n      completionStatus =\n        lessonStatus === \"completed\" || lessonStatus === \"passed\"\n          ? CompletionStatus.COMPLETED\n          : CompletionStatus.INCOMPLETE;\n      if (lessonStatus === \"passed\") {\n        successStatus = SuccessStatus.PASSED;\n      } else if (lessonStatus === \"failed\") {\n        successStatus = SuccessStatus.FAILED;\n      }\n    }\n\n    const scoreObject: ScoreObject = this.cmi?.core?.score?.getScoreObject() || {};\n    const commitObject: CommitObject = {\n      successStatus: successStatus,\n      completionStatus: completionStatus,\n      runtimeData: cmiExport as StringKeyMap,\n      totalTimeSeconds: totalTimeSeconds,\n    };\n    if (scoreObject) {\n      commitObject.score = scoreObject;\n    }\n    return commitObject;\n  }\n\n  /**\n   * Attempts to store the data to the LMS\n   *\n   * @param {boolean} terminateCommit\n   * @return {ResultObject}\n   */\n  async storeData(terminateCommit: boolean): Promise<ResultObject> {\n    if (terminateCommit) {\n      const originalStatus = this.cmi.core.lesson_status;\n      if (\n        !this.cmi.core.lesson_status ||\n        (!this.statusSetByModule && this.cmi.core.lesson_status === \"not attempted\")\n      ) {\n        this.cmi.core.lesson_status = \"completed\";\n      }\n\n      if (this.cmi.core.lesson_mode === \"normal\") {\n        if (this.cmi.core.credit === \"credit\") {\n          if (\n            this.settings.mastery_override &&\n            this.cmi.student_data.mastery_score !== \"\" &&\n            this.cmi.core.score.raw !== \"\"\n          ) {\n            this.cmi.core.lesson_status =\n              parseFloat(this.cmi.core.score.raw) >= parseFloat(this.cmi.student_data.mastery_score)\n                ? \"passed\"\n                : \"failed\";\n          }\n        }\n      } else if (this.cmi.core.lesson_mode === \"browse\") {\n        if (\n          ((this.startingData?.cmi as any)?.core?.lesson_status || \"\") === \"\" &&\n          originalStatus === \"not attempted\"\n        ) {\n          this.cmi.core.lesson_status = \"browsed\";\n        }\n      }\n    }\n\n    const commitObject = this.getCommitObject(terminateCommit);\n    if (typeof this.settings.lmsCommitUrl === \"string\") {\n      return await this.processHttpRequest(\n        this.settings.lmsCommitUrl,\n        commitObject,\n        terminateCommit,\n      );\n    } else {\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    }\n  }\n}\n\nexport default Scorm12API;\n"],"names":["global_constants","scorm12_constants","basicMessage","detailMessage","scorm12_errors","GENERAL","INITIALIZATION_FAILED","INITIALIZED","TERMINATED","TERMINATION_FAILURE","TERMINATION_BEFORE_INIT","MULTIPLE_TERMINATION","RETRIEVE_BEFORE_INIT","RETRIEVE_AFTER_TERM","STORE_BEFORE_INIT","STORE_AFTER_TERM","COMMIT_BEFORE_INIT","COMMIT_AFTER_TERM","ARGUMENT_ERROR","CHILDREN_ERROR","COUNT_ERROR","GENERAL_GET_FAILURE","GENERAL_SET_FAILURE","GENERAL_COMMIT_FAILURE","UNDEFINED_DATA_MODEL","UNIMPLEMENTED_ELEMENT","VALUE_NOT_INITIALIZED","INVALID_SET_VALUE","READ_ONLY_ELEMENT","WRITE_ONLY_ELEMENT","TYPE_MISMATCH","VALUE_OUT_OF_RANGE","DEPENDENCY_NOT_ESTABLISHED","scorm12_regex","BaseScormValidationError","Error","constructor","CMIElement","errorCode","super","this","_errorCode","Object","setPrototypeOf","prototype","ValidationError","errorMessage","detailedMessage","_detailedMessage","message","_errorMessage","Scorm12ValidationError","hasOwnProperty","call","String","BaseCMI","cmi_element","jsonString","_initialized","_cmi_element","initialized","initialize","BaseRootCMI","start_time","_start_time","setStartTime","Date","getTime","getSecondsAsHHMMSS","memoize","totalSeconds","hours","Math","floor","dateObj","minutes","getUTCMinutes","seconds","getSeconds","ms","msStr","countDecimals","toFixed","split","replace","getTimeAsSeconds","timeString","timeRegex","RegExp","match","test","parts","toString","flatten","data","result","recurse","cur","prop","Array","isArray","forEach","item","i","length","keys","filter","p","isEmpty","num","indexOf","stringMatches","str","tester","fn","keyFn","cache","Map","args","key","JSON","stringify","has","get","set","checkValidFormat","value","regexPattern","errorClass","allowEmptyString","formatRegex","matches","_errorClass","checkValidRange","rangePattern","ranges","check12ValidFormat","check12ValidRange","validationService","validateScore","decimalRegex","scoreRange","invalidTypeCode","invalidRangeCode","validateScorm12Audio","validateScorm12Language","validateScorm12Speed","validateScorm12Text","validateReadOnly","CMIScore","params","_raw","_min","__children","score_children","__score_range","score_range","_max","max","__invalid_error_code","invalidErrorCode","__invalid_type_code","__invalid_range_code","__decimal_regex","__error_class","reset","_children","raw","min","getScoreObject","scoreObject","Number","isNaN","parseFloat","toJSON","CMICore","_student_id","_student_name","_lesson_location","_credit","_lesson_status","_entry","_total_time","_lesson_mode","_exit","_session_time","_suspend_data","score","student_id","student_name","lesson_location","credit","lesson_status","entry","total_time","lesson_mode","exit","session_time","suspend_data","getCurrentTotalTime","sessionTime","Util.getSecondsAsHHMMSS","first","second","CMIArray","children","childArray","wipe","_count","CMIObjectives","CMIObjectivesObject","_id","_status","id","status","CMIStudentData","student_data_children","_mastery_score","_max_time_allowed","_time_limit_action","mastery_score","max_time_allowed","time_limit_action","CMIStudentPreference","student_preference_children","_audio","_language","_speed","_text","audio","language","speed","text","CMIInteractions","CMIInteractionsObject","_time","_type","_weighting","_student_response","_result","_latency","objectives","correct_responses","time","type","weighting","student_response","latency","CMIInteractionsObjectivesObject","CMIInteractionsCorrectResponsesObject","_pattern","pattern","CMI","cmi_children","student_data","__version","_launch_data","_comments","_comments_from_lms","core","student_preference","interactions","launch_data","comments","comments_from_lms","_version","NAV","_event","event","LogLevelEnum","_","DEBUG","INFO","WARN","ERROR","NONE","DefaultSettings","autocommit","autocommitSeconds","asyncCommit","sendFullCommit","lmsCommitUrl","dataCommitFormat","commitRequestDataType","autoProgress","logLevel","selfReportSessionTime","alwaysSendTotalTime","renderCommonCommitFields","strict_errors","xhrHeaders","xhrWithCredentials","fetchMode","useBeaconInsteadOfFetch","responseHandler","async","response","httpResult","json","responseText","parse","e","requestHandler","commitObject","onLogMessage","defaultLogHandler","scoItemIds","scoItemIdValidator","globalObjectiveIds","enableOfflineSupport","courseId","syncOnInitialize","syncOnTerminate","maxSyncAttempts","messageLevel","logMessage","console","error","warn","info","debug","log","ScheduledCommit","API","when","callback","_cancelled","_API","_timeout","setTimeout","wrapper","bind","_callback","cancel","clearTimeout","isInitialized","commit","HttpService","settings","error_codes","processHttpRequest","url","immediate","apiLog","processListeners","genericError","_handleImmediateRequest","processedParams","performFetch","transformResponse","stack","enhancedError","errorDetails","errorType","name","originalError","body","contentType","_prepareRequestBody","navigator","sendBeacon","Blob","then","catch","join","performBeacon","init","method","mode","headers","keepalive","credentials","fetch","beaconSuccess","Promise","resolve","ok","parseError","statusText","substring","_isSuccessResponse","updateSettings","EventService","listenerMap","listenerCount","parseListenerName","listenerName","listenerSplit","functionName","on","listenerFunctions","listenerFunction","parsedListener","listeners","push","off","removeIndex","findIndex","obj","splice","delete","clear","newListeners","listener","listenerHasCMIElement","CMIElementsMatch","endsWith","prefix","slice","startsWith","SerializationService","loadFromFlattenedJSON","setCMIValue","isNotInitialized","setStartingData","int_pattern","obj_pattern","others","intMatch","index","field","objMatch","sort","a","b","localeCompare","processItems","items","loadFromJSON","regex","from","exec","m","unflatten","currentCMIElement","tempCMIElement","renderCMIToJSONString","cmi","k","v","renderCMIToJSONObject","getCommitObject","terminateCommit","renderCommitObject","renderCommitCMI","apiLogLevel","includeTotalTime","includes","LoggingService","_logLevel","_logHandler","getInstance","_instance","setLogLevel","level","getLogLevel","setLogHandler","handler","shouldLog","getNumericLevel","getLoggingService","ErrorHandlingService","errorCodes","getLmsErrorMessageDetails","loggingService","_lastErrorCode","_errorCodes","_apiLog","_getLmsErrorMessageDetails","_loggingService","lastErrorCode","throwSCORMError","errorNumber","formattedMessage","clearSCORMError","success","handleValueAccessException","returnValue","validationError","jsonError","OfflineStorageService","storeName","syncQueue","isOnline","onLine","syncInProgress","window","addEventListener","handleOnlineStatusChange","wasOnline","syncOfflineData","storeOffline","commitData","queueItem","now","random","timestamp","syncAttempts","currentQueue","getFromStorage","saveToStorage","getOfflineData","remainingQueue","sendDataToLMS","processedData","isDeviceOnline","storedData","localStorage","getItem","setItem","hasPendingOfflineData","some","BaseAPI","httpService","eventService","serializationService","cmiDataService","errorHandlingService","offlineStorageService","_settings","_courseId","TypeError","currentState","_error_codes","_httpService","_eventService","element","_serializationService","_errorHandlingService","detail","createErrorHandlingService","_offlineStorageService","offlineData","runtimeData","commonReset","clearScheduledCommit","startingData","callbackName","initializeMessage","terminationMessage","isTerminated","hasPendingData","syncSuccess","messageString","padEnd","formatMessage","previousSettings","terminate","checkTerminated","checkState","storeData","getValue","getCMIValue","setValue","commitCallback","scheduleCommit","getLastError","getErrorString","CMIErrorCode","getDiagnostic","beforeInitError","afterTermError","_errorNumber","_detail","_CMIElement","_value","_commonSetCMIValue","methodName","scorm2004","structure","refObject","foundFirstIndex","invalidErrorMessage","idx","attribute","_checkObjectHasProperty","validateCorrectResponse","parseInt","newChild","getChildElement","_commonGetCMIValue","uninitializedErrorMessage","_isTargetValid","getFlattenedCMI","Utilities.flatten","StringKeyMap","getOwnPropertyDescriptor","getPrototypeOf","Scorm12API","mastery_override","statusSetByModule","nav","LMSInitialize","lmsInitialize","LMSFinish","lmsFinish","LMSGetValue","lmsGetValue","LMSSetValue","lmsSetValue","LMSCommit","lmsCommit","LMSGetLastError","lmsGetLastError","LMSGetErrorString","lmsGetErrorString","LMSGetDiagnostic","lmsGetDiagnostic","internalFinish","replaceWithAnotherScormAPI","newAPI","cmiExport","flattened","totalTimeHHMMSS","totalTimeSeconds","Utilities.getTimeAsSeconds","lessonStatus","completionStatus","successStatus","originalStatus"],"mappings":"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"}