{"version":3,"file":"scorm2004.js","sources":["../../src/constants/api_constants.ts","../../src/utilities.ts","../../src/constants/enums.ts","../../src/constants/default_settings.ts","../../src/helpers/scheduled_commit.ts","../../src/services/HttpService.ts","../../src/services/EventService.ts","../../src/services/SerializationService.ts","../../src/exceptions.ts","../../src/services/LoggingService.ts","../../src/services/ErrorHandlingService.ts","../../src/cmi/common/base_cmi.ts","../../src/constants/error_codes.ts","../../src/cmi/common/array.ts","../../src/BaseAPI.ts","../../src/exceptions/scorm2004_exceptions.ts","../../src/cmi/common/validation.ts","../../src/cmi/scorm2004/validation.ts","../../src/constants/regex.ts","../../src/cmi/scorm2004/learner_preference.ts","../../src/constants/response_constants.ts","../../src/cmi/scorm2004/interactions.ts","../../src/exceptions/scorm12_exceptions.ts","../../src/cmi/scorm12/validation.ts","../../src/services/ValidationService.ts","../../src/cmi/common/score.ts","../../src/cmi/scorm2004/score.ts","../../src/cmi/scorm2004/comments.ts","../../src/cmi/scorm2004/objectives.ts","../../src/cmi/scorm2004/metadata.ts","../../src/cmi/scorm2004/learner.ts","../../src/cmi/scorm2004/status.ts","../../src/cmi/scorm2004/session.ts","../../src/cmi/scorm2004/content.ts","../../src/cmi/scorm2004/settings.ts","../../src/cmi/scorm2004/thresholds.ts","../../src/cmi/scorm2004/cmi.ts","../../src/cmi/scorm2004/adl.ts","../../src/cmi/scorm2004/sequencing/sequencing_rules.ts","../../src/cmi/scorm2004/sequencing/rollup_rules.ts","../../src/constants/language_constants.ts","../../src/cmi/scorm2004/sequencing/activity.ts","../../src/cmi/scorm2004/sequencing/activity_tree.ts","../../src/cmi/scorm2004/sequencing/sequencing_controls.ts","../../src/cmi/scorm2004/sequencing/sequencing.ts","../../src/Scorm2004API.ts"],"sourcesContent":["interface ErrorDescription {\n  basicMessage: string;\n  detailMessage: string;\n}\n\ninterface ErrorDescriptions {\n  [key: string]: ErrorDescription;\n}\n\ninterface ScormConstants {\n  cmi_children: string;\n  core_children: string;\n  score_children: string;\n  comments_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface AiccConstants extends ScormConstants {\n  student_demographics_children: string;\n  tries_children: string;\n  attempt_records_children: string;\n  paths_children: string;\n}\n\ninterface Scorm2004Constants {\n  cmi_children: string;\n  comments_children: string;\n  score_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  adl_data_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface GlobalConstants {\n  SCORM_TRUE: string;\n  SCORM_FALSE: string;\n  STATE_NOT_INITIALIZED: number;\n  STATE_INITIALIZED: number;\n  STATE_TERMINATED: number;\n}\n\nexport const global_constants: GlobalConstants = {\n  SCORM_TRUE: \"true\",\n  SCORM_FALSE: \"false\",\n  STATE_NOT_INITIALIZED: 0,\n  STATE_INITIALIZED: 1,\n  STATE_TERMINATED: 2,\n};\n\nexport const scorm12_constants: ScormConstants = {\n  // Children lists\n  cmi_children:\n    \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions\",\n  core_children:\n    \"student_id,student_name,lesson_location,credit,lesson_status,entry,score,total_time,lesson_mode,exit,session_time\",\n  score_children: \"raw,min,max\",\n  comments_children: \"content,location,time\",\n  objectives_children: \"id,score,status\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio,language,speed,text\",\n  interactions_children:\n    \"id,objectives,time,type,correct_responses,weighting,student_response,result,latency\",\n  error_descriptions: {\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage:\n        \"No specific error code exists to describe the error. Use LMSGetDiagnostic for more information\",\n    },\n    \"201\": {\n      basicMessage: \"Invalid argument error\",\n      detailMessage:\n        \"Indicates that an argument represents an invalid data model element or is otherwise incorrect.\",\n    },\n    \"202\": {\n      basicMessage: \"Element cannot have children\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_children\" for a data model element that does not support the \"_children\" suffix.',\n    },\n    \"203\": {\n      basicMessage: \"Element not an array - cannot have count\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_count\" for a data model element that does not support the \"_count\" suffix.',\n    },\n    \"301\": {\n      basicMessage: \"Not initialized\",\n      detailMessage: \"Indicates that an API call was made before the call to lmsInitialize.\",\n    },\n    \"401\": {\n      basicMessage: \"Not implemented error\",\n      detailMessage:\n        \"The data model element indicated in a call to LMSGetValue or LMSSetValue is valid, but was not implemented by this LMS. SCORM 1.2 defines a set of data model elements as being optional for an LMS to implement.\",\n    },\n    \"402\": {\n      basicMessage: \"Invalid set value, element is a keyword\",\n      detailMessage:\n        'Indicates that LMSSetValue was called on a data model element that represents a keyword (elements that end in \"_children\" and \"_count\").',\n    },\n    \"403\": {\n      basicMessage: \"Element is read only\",\n      detailMessage: \"LMSSetValue was called with a data model element that can only be read.\",\n    },\n    \"404\": {\n      basicMessage: \"Element is write only\",\n      detailMessage: \"LMSGetValue was called on a data model element that can only be written to.\",\n    },\n    \"405\": {\n      basicMessage: \"Incorrect Data Type\",\n      detailMessage:\n        \"LMSSetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a LMSSetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\nexport const aicc_constants: AiccConstants = {\n  ...scorm12_constants,\n  ...{\n    cmi_children:\n      \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions,evaluation\",\n    student_preference_children:\n      \"audio,language,lesson_type,speed,text,text_color,text_location,text_size,video,windows\",\n    student_data_children: \"attempt_number,tries,mastery_score,max_time_allowed,time_limit_action\",\n    student_demographics_children:\n      \"city,class,company,country,experience,familiar_name,instructor_name,title,native_language,state,street_address,telephone,years_experience\",\n    tries_children: \"time,status,score\",\n    attempt_records_children: \"score,lesson_status\",\n    paths_children: \"location_id,date,time,status,why_left,time_in_element\",\n  },\n};\n\nexport const scorm2004_constants: Scorm2004Constants = {\n  // Children lists\n  cmi_children:\n    \"_version,comments_from_learner,comments_from_lms,completion_status,credit,entry,exit,interactions,launch_data,learner_id,learner_name,learner_preference,location,max_time_allowed,mode,objectives,progress_measure,scaled_passing_score,score,session_time,success_status,suspend_data,time_limit_action,total_time\",\n  comments_children: \"comment,timestamp,location\",\n  score_children: \"max,raw,scaled,min\",\n  objectives_children: \"progress_measure,completion_status,success_status,description,score,id\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio_level,audio_captioning,delivery_speed,language\",\n  interactions_children:\n    \"id,type,objectives,timestamp,correct_responses,weighting,learner_response,result,latency,description\",\n  adl_data_children: \"id,store\",\n  error_descriptions: {\n    \"0\": {\n      basicMessage: \"No Error\",\n      detailMessage: \"No error occurred, the previous API call was successful.\",\n    },\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage:\n        \"No specific error code exists to describe the error. Use GetDiagnostic for more information.\",\n    },\n    \"102\": {\n      basicMessage: \"General Initialization Failure\",\n      detailMessage: \"Call to Initialize failed for an unknown reason.\",\n    },\n    \"103\": {\n      basicMessage: \"Already Initialized\",\n      detailMessage: \"Call to Initialize failed because Initialize was already called.\",\n    },\n    \"104\": {\n      basicMessage: \"Content Instance Terminated\",\n      detailMessage: \"Call to Initialize failed because Terminate was already called.\",\n    },\n    \"111\": {\n      basicMessage: \"General Termination Failure\",\n      detailMessage: \"Call to Terminate failed for an unknown reason.\",\n    },\n    \"112\": {\n      basicMessage: \"Termination Before Initialization\",\n      detailMessage: \"Call to Terminate failed because it was made before the call to Initialize.\",\n    },\n    \"113\": {\n      basicMessage: \"Termination After Termination\",\n      detailMessage: \"Call to Terminate failed because Terminate was already called.\",\n    },\n    \"122\": {\n      basicMessage: \"Retrieve Data Before Initialization\",\n      detailMessage: \"Call to GetValue failed because it was made before the call to Initialize.\",\n    },\n    \"123\": {\n      basicMessage: \"Retrieve Data After Termination\",\n      detailMessage: \"Call to GetValue failed because it was made after the call to Terminate.\",\n    },\n    \"132\": {\n      basicMessage: \"Store Data Before Initialization\",\n      detailMessage: \"Call to SetValue failed because it was made before the call to Initialize.\",\n    },\n    \"133\": {\n      basicMessage: \"Store Data After Termination\",\n      detailMessage: \"Call to SetValue failed because it was made after the call to Terminate.\",\n    },\n    \"142\": {\n      basicMessage: \"Commit Before Initialization\",\n      detailMessage: \"Call to Commit failed because it was made before the call to Initialize.\",\n    },\n    \"143\": {\n      basicMessage: \"Commit After Termination\",\n      detailMessage: \"Call to Commit failed because it was made after the call to Terminate.\",\n    },\n    \"201\": {\n      basicMessage: \"General Argument Error\",\n      detailMessage:\n        \"An invalid argument was passed to an API method (usually indicates that Initialize, Commit or Terminate did not receive the expected empty string argument.\",\n    },\n    \"301\": {\n      basicMessage: \"General Get Failure\",\n      detailMessage:\n        \"Indicates a failed GetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"351\": {\n      basicMessage: \"General Set Failure\",\n      detailMessage:\n        \"Indicates a failed SetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"391\": {\n      basicMessage: \"General Commit Failure\",\n      detailMessage:\n        \"Indicates a failed Commit call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"401\": {\n      basicMessage: \"Undefined Data Model Element\",\n      detailMessage:\n        \"The data model element name passed to GetValue or SetValue is not a valid SCORM data model element.\",\n    },\n    \"402\": {\n      basicMessage: \"Unimplemented Data Model Element\",\n      detailMessage:\n        \"The data model element indicated in a call to GetValue or SetValue is valid, but was not implemented by this LMS. In SCORM 2004, this error would indicate an LMS that is not fully SCORM conformant.\",\n    },\n    \"403\": {\n      basicMessage: \"Data Model Element Value Not Initialized\",\n      detailMessage:\n        \"Attempt to read a data model element that has not been initialized by the LMS or through a SetValue call. This error condition is often reached during normal execution of a SCO.\",\n    },\n    \"404\": {\n      basicMessage: \"Data Model Element Is Read Only\",\n      detailMessage: \"SetValue was called with a data model element that can only be read.\",\n    },\n    \"405\": {\n      basicMessage: \"Data Model Element Is Write Only\",\n      detailMessage: \"GetValue was called on a data model element that can only be written to.\",\n    },\n    \"406\": {\n      basicMessage: \"Data Model Element Type Mismatch\",\n      detailMessage:\n        \"SetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Data Model Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a SetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\n","/**\n * Constants for time conversion calculations.\n * These are used throughout the codebase for converting between different time formats.\n */\nexport const SECONDS_PER_SECOND = 1.0;\nexport const SECONDS_PER_MINUTE = 60;\nexport const SECONDS_PER_HOUR = 60 * SECONDS_PER_MINUTE;\nexport const SECONDS_PER_DAY = 24 * SECONDS_PER_HOUR;\n\ntype Designation = {\n  [key: string]: number;\n};\n\n/**\n * A record with string keys and unknown values.\n * This is a more type-safe alternative to using `any`.\n */\nexport type StringKeyMap = Record<string, unknown>;\n\nconst designations: Designation = {\n  D: SECONDS_PER_DAY,\n  H: SECONDS_PER_HOUR,\n  M: SECONDS_PER_MINUTE,\n  S: SECONDS_PER_SECOND,\n};\n\n/**\n * Converts a number of seconds to a formatted time string in HH:MM:SS format.\n * This function handles decimal seconds and ensures proper formatting with leading zeros.\n *\n * @param {number|null} totalSeconds - The total number of seconds to convert. If null or negative, returns \"00:00:00\".\n * @return {string} A formatted time string in HH:MM:SS format, with up to 2 decimal places for seconds if applicable.\n *\n * @example\n * // Returns \"01:30:45\"\n * getSecondsAsHHMMSS(5445);\n *\n * @example\n * // Returns \"00:00:30.5\"\n * getSecondsAsHHMMSS(30.5);\n *\n * @example\n * // Returns \"00:00:00\"\n * getSecondsAsHHMMSS(null);\n */\nexport const getSecondsAsHHMMSS = memoize((totalSeconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!totalSeconds || totalSeconds <= 0) {\n    return \"00:00:00\";\n  }\n\n  const hours = Math.floor(totalSeconds / SECONDS_PER_HOUR);\n  const dateObj = new Date(totalSeconds * 1000);\n  const minutes = dateObj.getUTCMinutes();\n  // make sure we add any possible decimal value\n  const seconds = dateObj.getSeconds();\n  const ms = totalSeconds % 1.0;\n  let msStr = \"\";\n\n  if (countDecimals(ms) > 0) {\n    if (countDecimals(ms) > 2) {\n      msStr = ms.toFixed(2);\n    } else {\n      msStr = String(ms);\n    }\n\n    msStr = \".\" + msStr.split(\".\")[1];\n  }\n\n  return (hours + \":\" + minutes + \":\" + seconds).replace(/\\b\\d\\b/g, \"0$&\") + msStr;\n});\n\n/**\n * Converts a number of seconds to an ISO 8601 duration string (e.g., \"PT1H30M45S\").\n * This function handles the complexity of formatting according to the ISO 8601 standard,\n * including the proper placement of the \"T\" separator for time components.\n *\n * @param {number|null} seconds - The number of seconds to convert. If null or negative, returns \"PT0S\".\n * @return {string} An ISO 8601 formatted duration string.\n *\n * @example\n * // Returns \"PT1H30M45S\" (1 hour, 30 minutes, 45 seconds)\n * getSecondsAsISODuration(5445);\n *\n * @example\n * // Returns \"PT30.5S\" (30.5 seconds)\n * getSecondsAsISODuration(30.5);\n *\n * @example\n * // Returns \"P1DT1H\" (1 day, 1 hour)\n * getSecondsAsISODuration(90000);\n *\n * @example\n * // Returns \"PT0S\" (0 seconds)\n * getSecondsAsISODuration(null);\n */\nexport const getSecondsAsISODuration = memoize((seconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!seconds || seconds <= 0) {\n    return \"PT0S\";\n  }\n\n  let duration = \"P\";\n  let remainder = seconds;\n\n  // Convert to array of entries and use functional methods\n  const designationEntries = Object.entries(designations);\n\n  // Process each time designation\n  designationEntries.forEach(([designationsKey, current_seconds]) => {\n    let value = Math.floor(remainder / current_seconds);\n    remainder = remainder % current_seconds;\n\n    // Limit decimal places\n    if (countDecimals(remainder) > 2) {\n      remainder = Number(Number(remainder).toFixed(2));\n    }\n\n    // If we have anything left in the remainder, and we're currently adding\n    // seconds to the duration, go ahead and add the decimal to the seconds\n    if (designationsKey === \"S\" && remainder > 0) {\n      value += remainder;\n    }\n\n    if (value) {\n      // Add the 'T' separator for time components if needed\n      const needsTimeSeparator =\n        (duration.indexOf(\"D\") > 0 || [\"H\", \"M\", \"S\"].includes(designationsKey)) &&\n        duration.indexOf(\"T\") === -1;\n\n      if (needsTimeSeparator) {\n        duration += \"T\";\n      }\n\n      duration += `${value}${designationsKey}`;\n    }\n  });\n\n  return duration;\n});\n\n/**\n * Converts a time string in HH:MM:SS format to the equivalent number of seconds.\n * This function is flexible and can handle various input types, converting them to strings as needed.\n *\n * @param {string|number|boolean|null} timeString - The time string to convert, typically in HH:MM:SS format.\n *                                                 If not a string, it will be converted to one.\n *                                                 If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} timeRegex - The regular expression used to validate the time string format.\n *                                    If a string is provided, it will be converted to a RegExp.\n * @return {number} The total number of seconds represented by the time string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getTimeAsSeconds(\"01:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getTimeAsSeconds(\"invalid\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 30 (converts number to string \"30\" then parses as 0:0:30)\n * getTimeAsSeconds(30, /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport const getTimeAsSeconds = memoize(\n  (timeString: string | number | boolean | null, timeRegex: RegExp | string): number => {\n    if (typeof timeString === \"number\" || typeof timeString === \"boolean\") {\n      timeString = String(timeString);\n    }\n    if (typeof timeRegex === \"string\") {\n      timeRegex = new RegExp(timeRegex);\n    }\n    if (!timeString || !timeString?.match?.(timeRegex)) {\n      return 0;\n    }\n\n    const parts = timeString.split(\":\");\n    const hours = Number(parts[0]);\n    const minutes = Number(parts[1]);\n    const seconds = Number(parts[2]);\n    return hours * 3600 + minutes * 60 + seconds;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (timeString, timeRegex) => {\n    const timeStr = typeof timeString === \"string\" ? timeString : String(timeString ?? \"\");\n    const regexStr = typeof timeRegex === \"string\" ? timeRegex : (timeRegex?.toString() ?? \"\");\n    return `${timeStr}:${regexStr}`;\n  },\n);\n\n/**\n * Converts an ISO 8601 duration string (e.g., \"PT1H30M45S\") to the equivalent number of seconds.\n * This function parses the duration string using a regular expression to extract years, days,\n * hours, minutes, and seconds components.\n *\n * @param {string|null} duration - The ISO 8601 duration string to convert.\n *                                If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n *                                       The regex should have capture groups for years, days, hours, minutes, and seconds.\n * @return {number} The total number of seconds represented by the duration string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getDurationAsSeconds(\"PT1H30M45S\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 90000 (1 day, 1 hour)\n * getDurationAsSeconds(\"P1DT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getDurationAsSeconds(\"invalid\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport const getDurationAsSeconds = memoize(\n  (duration: string | null, durationRegex: RegExp | string): number => {\n    if (typeof durationRegex === \"string\") {\n      durationRegex = new RegExp(durationRegex);\n    }\n\n    if (!duration || !duration?.match?.(durationRegex)) {\n      return 0;\n    }\n\n    const [, years, _, , days, hours, minutes, seconds] =\n      new RegExp(durationRegex).exec?.(duration) ?? [];\n    let result = 0.0;\n    result += Number(seconds) || 0.0;\n    result += Number(minutes) * 60.0 || 0.0;\n    result += Number(hours) * 3600.0 || 0.0;\n    result += Number(days) * (60 * 60 * 24.0) || 0.0;\n    result += Number(years) * (60 * 60 * 24 * 365.0) || 0.0;\n    return result;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (duration, durationRegex) => {\n    const durationStr = duration ?? \"\";\n    const regexStr =\n      typeof durationRegex === \"string\" ? durationRegex : (durationRegex?.toString() ?? \"\");\n    return `${durationStr}:${regexStr}`;\n  },\n);\n\n/**\n * Adds together two ISO 8601 duration strings and returns the result as a new ISO 8601 duration string.\n * This function works by converting both durations to seconds, adding them together, and then\n * converting the result back to an ISO 8601 duration string.\n *\n * @param {string} first - The first ISO 8601 duration string.\n * @param {string} second - The second ISO 8601 duration string.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n * @return {string} A new ISO 8601 duration string representing the sum of the two input durations.\n *\n * @example\n * // Returns \"PT2H\" (1 hour + 1 hour = 2 hours)\n * addTwoDurations(\"PT1H\", \"PT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"PT1H30M\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addTwoDurations(\"PT1H\", \"PT30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"P1DT1H30M\" (1 day + 1 hour and 30 minutes = 1 day, 1 hour, and 30 minutes)\n * addTwoDurations(\"P1D\", \"PT1H30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport function addTwoDurations(\n  first: string,\n  second: string,\n  durationRegex: RegExp | string,\n): string {\n  const regex: RegExp =\n    typeof durationRegex === \"string\" ? new RegExp(durationRegex) : durationRegex;\n  return getSecondsAsISODuration(\n    getDurationAsSeconds(first, regex) + getDurationAsSeconds(second, regex),\n  );\n}\n\n/**\n * Adds together two time strings in HH:MM:SS format and returns the result as a new time string.\n * This function works by converting both time strings to seconds, adding them together, and then\n * converting the result back to an HH:MM:SS format.\n *\n * @param {string} first - The first time string in HH:MM:SS format.\n * @param {string} second - The second time string in HH:MM:SS format.\n * @param {RegExp|string} timeRegex - The regular expression used to validate and parse the time strings.\n *                                   If a string is provided, it will be converted to a RegExp.\n * @return {string} A new time string in HH:MM:SS format representing the sum of the two input times.\n *\n * @example\n * // Returns \"02:00:00\" (1 hour + 1 hour = 2 hours)\n * addHHMMSSTimeStrings(\"01:00:00\", \"01:00:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:00\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:45\" (1 hour + 30 minutes and 45 seconds = 1 hour, 30 minutes, and 45 seconds)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport function addHHMMSSTimeStrings(\n  first: string,\n  second: string,\n  timeRegex: RegExp | string,\n): string {\n  if (typeof timeRegex === \"string\") {\n    timeRegex = new RegExp(timeRegex);\n  }\n  return getSecondsAsHHMMSS(\n    getTimeAsSeconds(first, timeRegex) + getTimeAsSeconds(second, timeRegex),\n  );\n}\n\n/**\n * Flattens a nested JSON object into a flat object with dot notation for nested properties.\n * This function recursively traverses the object and creates new keys using dot notation\n * for nested objects and bracket notation for arrays.\n *\n * @param {StringKeyMap} data - The nested object to flatten.\n * @return {StringKeyMap} A flattened object where nested properties are represented with dot notation.\n *\n * @example\n * // Returns { \"a\": 1, \"b.c\": 2, \"b.d\": 3, \"e[0]\": 4, \"e[1]\": 5 }\n * flatten({\n *   a: 1,\n *   b: { c: 2, d: 3 },\n *   e: [4, 5]\n * });\n *\n * @example\n * // Returns { \"\": [] } for an empty array\n * flatten([]);\n *\n * @example\n * // Returns { \"\": {} } for an empty object\n * flatten({});\n */\nexport function flatten(data: StringKeyMap): StringKeyMap {\n  const result: StringKeyMap = {};\n\n  /**\n   * Recurse through the object\n   * @param {*} cur\n   * @param {*} prop\n   */\n  function recurse(cur: any, prop: any) {\n    if (Object(cur) !== cur) {\n      result[prop] = cur;\n    } else if (Array.isArray(cur)) {\n      // Use forEach instead of for loop\n      cur.forEach((item, i) => {\n        recurse(item, `${prop}[${i}]`);\n      });\n\n      if (cur.length === 0) result[prop] = [];\n    } else {\n      const keys = Object.keys(cur).filter((p) => Object.prototype.hasOwnProperty.call(cur, p));\n\n      const isEmpty = keys.length === 0;\n\n      // Use forEach instead of for...in loop\n      keys.forEach((p) => {\n        recurse(cur[p], prop ? `${prop}.${p}` : p);\n      });\n\n      if (isEmpty && prop) result[prop] = {};\n    }\n  }\n\n  recurse(data, \"\");\n  return result;\n}\n\n/**\n * Converts a flattened object back into a nested object structure.\n * This function is the inverse of `flatten()`. It parses dot notation and bracket notation\n * in property names to recreate the original nested structure.\n *\n * @param {StringKeyMap} data - The flattened object to unflatten.\n * @return {object} A nested object recreated from the flattened structure.\n *\n * @example\n * // Returns { a: 1, b: { c: 2, d: 3 }, e: [4, 5] }\n * unflatten({\n *   \"a\": 1,\n *   \"b.c\": 2,\n *   \"b.d\": 3,\n *   \"e[0]\": 4,\n *   \"e[1]\": 5\n * });\n *\n * @example\n * // Handles array indices correctly\n * unflatten({\n *   \"users[0].name\": \"John\",\n *   \"users[0].email\": \"john@example.com\",\n *   \"users[1].name\": \"Jane\",\n *   \"users[1].email\": \"jane@example.com\"\n * });\n * // Returns:\n * // {\n * //   users: [\n * //     { name: \"John\", email: \"john@example.com\" },\n * //     { name: \"Jane\", email: \"jane@example.com\" }\n * //   ]\n * // }\n */\nexport function unflatten(data: StringKeyMap): object {\n  \"use strict\";\n\n  if (Object(data) !== data || Array.isArray(data)) return data;\n  const result: StringKeyMap = {};\n\n  // Regex pattern for parsing property paths\n  const pattern = /\\.?([^.[\\]]+)|\\[(\\d+)]/g;\n\n  // Get all own properties and process them\n  Object.keys(data)\n    .filter((p) => Object.prototype.hasOwnProperty.call(data, p))\n    .forEach((p) => {\n      let cur = result;\n      let prop = \"\";\n\n      // Create a new regex instance for each property to reset lastIndex\n      const regex = new RegExp(pattern);\n\n      // Process all matches in the property path\n      Array.from({ length: p.match(new RegExp(pattern, \"g\"))?.length ?? 0 }, () =>\n        regex.exec(p),\n      ).forEach((m) => {\n        if (m) {\n          // Create array or object as needed\n          cur = (cur[prop] ?? (cur[prop] = m[2] ? [] : ({} as StringKeyMap))) as StringKeyMap;\n          prop = m[2] || m[1];\n        }\n      });\n\n      cur[prop] = data[p];\n    });\n\n  return (result[\"\"] ?? result) as object;\n}\n\n/**\n * Counts the number of decimal places in a number.\n * This function handles both integer and floating-point numbers.\n *\n * @param {number} num - The number to analyze.\n * @return {number} The number of decimal places. Returns 0 for integers or if the number doesn't have a decimal point.\n *\n * @example\n * // Returns 0\n * countDecimals(42);\n *\n * @example\n * // Returns 2\n * countDecimals(3.14);\n *\n * @example\n * // Returns 5\n * countDecimals(1.23456);\n */\nexport function countDecimals(num: number): number {\n  if (Math.floor(num) === num || String(num)?.indexOf?.(\".\") < 0) return 0;\n  const parts = num.toString().split(\".\")?.[1];\n  return parts?.length ?? 0;\n}\n\n/**\n * Formats SCORM messages for consistent and readable logging.\n * This function pads the function name and CMI element to create aligned log messages\n * that are easier to read in log files or console output.\n *\n * @param {string} functionName - The name of the function that generated the message.\n * @param {string} message - The message content to be logged.\n * @param {string} [CMIElement] - Optional. The CMI element related to the message.\n * @return {string} A formatted message string with consistent padding.\n *\n * @example\n * // Returns \"initialize          : Successfully initialized\"\n * formatMessage(\"initialize\", \"Successfully initialized\");\n *\n * @example\n * // Returns \"getValue            : cmi.core.student_id                                             : 12345\"\n * formatMessage(\"getValue\", \"12345\", \"cmi.core.student_id\");\n *\n * @example\n * // Returns \"setValue            : cmi.core.lesson_status                                          : completed\"\n * formatMessage(\"setValue\", \"completed\", \"cmi.core.lesson_status\");\n */\nexport function formatMessage(functionName: string, message: string, CMIElement?: string): string {\n  const baseLength = 20;\n\n  // Use string padding instead of loops\n  const paddedFunction = functionName.padEnd(baseLength);\n  let messageString = `${paddedFunction}: `;\n\n  if (CMIElement) {\n    const CMIElementBaseLength = 70;\n    // Add CMIElement and pad to the required length\n    messageString += CMIElement;\n    messageString = messageString.padEnd(CMIElementBaseLength);\n  }\n\n  // Add the message (or empty string if null/undefined)\n  messageString += message ?? \"\";\n\n  return messageString;\n}\n\n/**\n * Checks if a string contains a specific pattern using regular expression matching.\n * This function is a wrapper around JavaScript's String.match() method that handles\n * null/undefined values gracefully.\n *\n * @param {string} str - The string to search within. If null or undefined, returns false.\n * @param {string} tester - The pattern to search for. Can be a regular expression pattern.\n * @return {boolean} True if the pattern is found in the string, false otherwise.\n *\n * @example\n * // Returns true\n * stringMatches(\"Hello, world!\", \"world\");\n *\n * @example\n * // Returns true\n * stringMatches(\"The quick brown fox\", \"\\\\w+\\\\s+\\\\w+\");\n *\n * @example\n * // Returns false\n * stringMatches(\"Hello, world!\", \"universe\");\n *\n * @example\n * // Returns false (handles null gracefully)\n * stringMatches(null, \"test\");\n */\nexport function stringMatches(str: string, tester: string): boolean {\n  return str?.match(tester) !== null;\n}\n\n/**\n * Creates a memoized (cached) version of a function for performance optimization.\n * This function caches the results of previous calls with the same arguments,\n * avoiding redundant calculations for repeated calls with the same input.\n *\n * @template T - The type of the function to memoize\n * @param {T} fn - The function to memoize\n * @param {Function} [keyFn] - Optional function to generate a custom cache key.\n *                           Useful for functions with complex arguments that can't be serialized.\n * @return {T} A memoized version of the input function with the same signature\n *\n * @example\n * // Basic usage with a simple function\n * const memoizedAdd = memoize((a, b) => {\n *   console.log('Calculating...');\n *   return a + b;\n * });\n *\n * memoizedAdd(1, 2); // Logs \"Calculating...\" and returns 3\n * memoizedAdd(1, 2); // Returns 3 without logging (uses cached result)\n *\n * @example\n * // Using a custom key function for objects that can't be serialized\n * const memoizedProcessUser = memoize(\n *   (user) => {\n *     console.log('Processing user...');\n *     return { ...user, processed: true };\n *   },\n *   (user) => user.id // Use user.id as the cache key\n * );\n *\n * memoizedProcessUser({ id: 123, name: 'John' }); // Logs and processes\n * memoizedProcessUser({ id: 123, name: 'John' }); // Uses cached result\n */\nexport function memoize<T extends (...args: any[]) => any>(\n  fn: T,\n  keyFn?: (...args: Parameters<T>) => string,\n): T {\n  const cache = new Map<string, ReturnType<T>>();\n\n  return ((...args: Parameters<T>): ReturnType<T> => {\n    const key = keyFn ? keyFn(...args) : JSON.stringify(args);\n\n    return cache.has(key)\n      ? (cache.get(key) as ReturnType<T>)\n      : (() => {\n          const result = fn(...args);\n          cache.set(key, result);\n          return result;\n        })();\n  }) as T;\n}\n","// Using plain objects instead of enums for better compatibility with strip-only mode\n// This approach avoids TypeScript enum runtime code while maintaining the same API\n\n// NAVBoolean values\nexport const NAVBoolean = {\n  UNKNOWN: \"unknown\",\n  TRUE: \"true\",\n  FALSE: \"false\",\n};\n\n// Type for NAVBoolean values\nexport type NAVBoolean = (typeof NAVBoolean)[keyof typeof NAVBoolean];\n\n// SuccessStatus values\nexport const SuccessStatus = {\n  PASSED: \"passed\",\n  FAILED: \"failed\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for SuccessStatus values\nexport type SuccessStatus = (typeof SuccessStatus)[keyof typeof SuccessStatus];\n\n// CompletionStatus values\nexport const CompletionStatus = {\n  COMPLETED: \"completed\",\n  INCOMPLETE: \"incomplete\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for CompletionStatus values\nexport type CompletionStatus = (typeof CompletionStatus)[keyof typeof CompletionStatus];\n\n// LogLevelEnum values\nexport const LogLevelEnum = {\n  _: 0,\n  DEBUG: 1,\n  INFO: 2,\n  WARN: 3,\n  ERROR: 4,\n  NONE: 5,\n};\n\n// Type for LogLevelEnum values\nexport type LogLevelEnum = (typeof LogLevelEnum)[keyof typeof LogLevelEnum];\n","import { LogLevel, ResultObject, Settings } from \"../types/api_types\";\nimport { global_constants } from \"./api_constants\";\nimport { LogLevelEnum } from \"./enums\";\n\n/**\n * Default settings for the SCORM API\n */\nexport const DefaultSettings: Settings = {\n  autocommit: false,\n  autocommitSeconds: 10,\n  asyncCommit: false,\n  sendFullCommit: true,\n  lmsCommitUrl: false,\n  dataCommitFormat: \"json\",\n  commitRequestDataType: \"application/json;charset=UTF-8\",\n  autoProgress: false,\n  logLevel: LogLevelEnum.ERROR,\n  selfReportSessionTime: false,\n  alwaysSendTotalTime: false,\n  renderCommonCommitFields: false,\n  strict_errors: true,\n  xhrHeaders: {},\n  xhrWithCredentials: false,\n  fetchMode: \"cors\",\n  responseHandler: async function (response: Response): Promise<ResultObject> {\n    if (typeof response !== \"undefined\") {\n      let httpResult = null;\n\n      // Handle both text() and json() response methods\n      try {\n        if (typeof response.json === 'function') {\n          // Try to get JSON directly if the method exists\n          httpResult = await response.json();\n        } else if (typeof response.text === 'function') {\n          // Fall back to text() if json() is not available\n          const responseText = await response.text();\n          if (responseText) {\n            httpResult = JSON.parse(responseText);\n          }\n        }\n      } catch (e) {\n        // If parsing fails, continue with null httpResult\n      }\n\n      if (httpResult === null || !{}.hasOwnProperty.call(httpResult, \"result\")) {\n        if (response.status === 200) {\n          return {\n            result: global_constants.SCORM_TRUE,\n            errorCode: 0,\n          };\n        } else {\n          return {\n            result: global_constants.SCORM_FALSE,\n            errorCode: 101,\n          };\n        }\n      } else {\n        return {\n          result: httpResult.result,\n          errorCode: httpResult.errorCode\n            ? httpResult.errorCode\n            : httpResult.result === global_constants.SCORM_TRUE\n              ? 0\n              : 101,\n        };\n      }\n    }\n    return {\n      result: global_constants.SCORM_FALSE,\n      errorCode: 101,\n    };\n  },\n  requestHandler: function (commitObject) {\n    return commitObject;\n  },\n  onLogMessage: defaultLogHandler,\n  scoItemIds: [],\n  scoItemIdValidator: false,\n  globalObjectiveIds: [],\n};\n\nexport function defaultLogHandler(messageLevel: LogLevel, logMessage: string): void {\n  switch (messageLevel) {\n    case \"4\":\n    case 4:\n    case \"ERROR\":\n    case LogLevelEnum.ERROR:\n      console.error(logMessage);\n      break;\n    case \"3\":\n    case 3:\n    case \"WARN\":\n    case LogLevelEnum.WARN:\n      console.warn(logMessage);\n      break;\n    case \"2\":\n    case 2:\n    case \"INFO\":\n    case LogLevelEnum.INFO:\n      console.info(logMessage);\n      break;\n    case \"1\":\n    case 1:\n    case \"DEBUG\":\n    case LogLevelEnum.DEBUG:\n      if (console.debug) {\n        console.debug(logMessage);\n      } else {\n        console.log(logMessage);\n      }\n      break;\n  }\n}\n","import BaseAPI from \"../BaseAPI\";\n\n/**\n * Private class that wraps a timeout call to the commit() function\n */\nexport class ScheduledCommit {\n  private _API;\n  private _cancelled = false;\n  private readonly _timeout;\n  private readonly _callback;\n\n  /**\n   * Constructor for ScheduledCommit\n   * @param {BaseAPI} API\n   * @param {number} when\n   * @param {string} callback\n   */\n  constructor(API: BaseAPI, when: number, callback: string) {\n    this._API = API;\n    this._timeout = setTimeout(this.wrapper.bind(this), when);\n    this._callback = callback;\n  }\n\n  /**\n   * Cancel any currently scheduled commit\n   */\n  cancel() {\n    this._cancelled = true;\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n  }\n\n  /**\n   * Wrap the API commit call to check if the call has already been cancelled\n   */\n  wrapper() {\n    if (!this._cancelled) {\n      (async () => await this._API.commit(this._callback))();\n    }\n  }\n}\n","import { CommitObject, ResultObject, Settings } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { IHttpService } from \"../interfaces/services\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { StringKeyMap } from \"../utilities\";\n\n/**\n * Service for handling HTTP communication with the LMS\n */\nexport class HttpService implements IHttpService {\n  private settings: Settings;\n  private error_codes: ErrorCode;\n\n  /**\n   * Constructor for HttpService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   */\n  constructor(settings: Settings, error_codes: ErrorCode) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n  }\n\n  /**\n   * Sends HTTP requests to the LMS with special handling for immediate and standard requests.\n   *\n   * This method handles communication with the LMS server, implementing two distinct\n   * request handling strategies based on the context:\n   *\n   * 1. Immediate Mode (used during termination):\n   *    When immediate=true, the method:\n   *    - Initiates the fetch request but doesn't wait for it to complete\n   *    - Returns a success result immediately\n   *    - Processes the response asynchronously when it arrives\n   *\n   *    This is critical for browser compatibility during page unload/termination,\n   *    as some browsers (especially Chrome) may cancel synchronous or awaited\n   *    requests when a page is closing.\n   *\n   * 2. Standard Mode (normal operation):\n   *    When immediate=false, the method:\n   *    - Processes the request parameters through the configured requestHandler\n   *    - Awaits the fetch response completely\n   *    - Transforms the response using the configured responseHandler\n   *    - Triggers appropriate event listeners based on success/failure\n   *    - Returns the complete result with appropriate error codes\n   *\n   * The method also includes error handling to catch network failures or other\n   * exceptions that might occur during the request process.\n   *\n   * @param {string} url - The URL endpoint to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The data to send to the LMS\n   * @param {boolean} immediate - Whether to send the request immediately without waiting (true) or process normally (false)\n   * @param {Function} apiLog - Function to log API messages with appropriate levels\n   * @param {Function} processListeners - Function to trigger event listeners for commit events\n   * @return {Promise<ResultObject>} - A promise that resolves with the result of the request\n   *\n   * @example\n   * // Standard request (waits for response)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   false,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   *\n   * @example\n   * // Immediate request (for termination)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   true,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   * // result will be success immediately, regardless of actual HTTP result\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n    apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    const genericError: ResultObject = {\n      result: global_constants.SCORM_FALSE,\n      errorCode: this.error_codes.GENERAL,\n    };\n\n    // if we are terminating the module or closing the browser window/tab, we need to make this fetch ASAP.\n    // Some browsers, especially Chrome, do not like synchronous requests to be made when the window is closing.\n    if (immediate) {\n      this.performFetch(url, params).then(async (response) => {\n        await this.transformResponse(response, processListeners);\n      });\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    }\n\n    const process = async (\n      url: string,\n      params: CommitObject | StringKeyMap | Array<any>,\n      settings: Settings,\n    ): Promise<ResultObject> => {\n      try {\n        params = settings.requestHandler(params) as CommitObject | StringKeyMap | Array<any>;\n        const response = await this.performFetch(url, params);\n\n        return this.transformResponse(response, processListeners);\n      } catch (e) {\n        apiLog(\"processHttpRequest\", e, LogLevelEnum.ERROR);\n        processListeners(\"CommitError\");\n        return genericError;\n      }\n    };\n\n    return await process(url, params, this.settings);\n  }\n\n  /**\n   * Perform the fetch request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - The response from the LMS\n   * @private\n   */\n  private async performFetch(url: string, params: StringKeyMap | Array<any>): Promise<Response> {\n    return fetch(url, {\n      method: \"POST\",\n      mode: this.settings.fetchMode,\n      body: params instanceof Array ? params.join(\"&\") : JSON.stringify(params),\n      headers: {\n        ...this.settings.xhrHeaders,\n        \"Content-Type\": this.settings.commitRequestDataType,\n      },\n      credentials: this.settings.xhrWithCredentials ? \"include\" : undefined,\n      keepalive: true,\n    });\n  }\n\n  /**\n   * Transforms the response from the LMS to a ResultObject\n   * @param {Response} response - The response from the LMS\n   * @param {Function} processListeners - Function to process event listeners\n   * @return {Promise<ResultObject>} - The transformed response\n   * @private\n   */\n  private async transformResponse(\n    response: Response,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    const result =\n      typeof this.settings.responseHandler === \"function\"\n        ? await this.settings.responseHandler(response)\n        : await response.json();\n\n    if (\n      response.status >= 200 &&\n      response.status <= 299 &&\n      (result.result === true || result.result === global_constants.SCORM_TRUE)\n    ) {\n      processListeners(\"CommitSuccess\");\n      if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n        result.errorCode = 0;\n      }\n    } else {\n      if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n        result.errorCode = this.error_codes.GENERAL;\n      }\n      processListeners(\"CommitError\", null, result.errorCode);\n    }\n    return result;\n  }\n\n  /**\n   * Updates the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: Settings): void {\n    this.settings = settings;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { stringMatches } from \"../utilities\";\nimport { IEventService } from \"../interfaces/services\";\n\n/**\n * Interface for a listener object\n */\ninterface Listener {\n  functionName: string;\n  CMIElement: string | null;\n  callback: Function;\n}\n\n/**\n * Type for parsed listener information\n */\ninterface ParsedListener {\n  functionName: string;\n  CMIElement: string | null;\n}\n\n/**\n * Service for handling event listeners and event processing\n */\nexport class EventService implements IEventService {\n  // Map of function names to listeners for faster lookups\n  private listenerMap: Map<string, Listener[]> = new Map();\n  // Total count of listeners for logging\n  private listenerCount = 0;\n  // Function to log API messages\n  private readonly apiLog: (\n    functionName: string,\n    message: string,\n    messageLevel: LogLevel,\n    CMIElement?: string,\n  ) => void;\n\n  /**\n   * Constructor for EventService\n   * @param {Function} apiLog - Function to log API messages\n   */\n  constructor(\n    apiLog: (\n      functionName: string,\n      message: string,\n      messageLevel: LogLevel,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.apiLog = apiLog;\n  }\n\n  /**\n   * Parses a listener name into its components\n   *\n   * @param {string} listenerName - The name of the listener\n   * @returns {ParsedListener|null} - The parsed listener information or null if invalid\n   */\n  private parseListenerName(listenerName: string): ParsedListener | null {\n    const listenerSplit = listenerName.split(\".\");\n    if (listenerSplit.length === 0) return null;\n\n    const functionName = listenerSplit[0];\n    let CMIElement = null;\n\n    if (listenerSplit.length > 1) {\n      CMIElement = listenerName.replace(`${functionName}.`, \"\");\n    }\n\n    return { functionName, CMIElement };\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener\n   * @param {Function} callback - The callback function to execute when the event occurs\n   */\n  on(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get or create the array for this function name\n      const listeners = this.listenerMap.get(functionName) ?? [];\n\n      // Add the new listener\n      listeners.push({\n        functionName,\n        CMIElement,\n        callback,\n      });\n\n      // Update the map and count\n      this.listenerMap.set(functionName, listeners);\n      this.listenerCount++;\n\n      this.apiLog(\n        \"on\",\n        `Added event listener: ${this.listenerCount}`,\n        LogLevelEnum.INFO,\n        functionName,\n      );\n    }\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener\n   *\n   * @param {string} listenerName - The name of the listener to remove\n   * @param {Function} callback - The callback function to remove\n   */\n  off(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get the listeners for this function name\n      const listeners = this.listenerMap.get(functionName);\n      if (!listeners) continue;\n\n      // Find the index of the listener to remove\n      const removeIndex = listeners.findIndex(\n        (obj) => obj.CMIElement === CMIElement && obj.callback === callback,\n      );\n\n      if (removeIndex !== -1) {\n        // Remove the listener\n        listeners.splice(removeIndex, 1);\n        this.listenerCount--;\n\n        // Update the map or remove the entry if empty\n        if (listeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, listeners);\n        }\n\n        this.apiLog(\n          \"off\",\n          `Removed event listener: ${this.listenerCount}`,\n          LogLevelEnum.INFO,\n          functionName,\n        );\n      }\n    }\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener to clear\n   */\n  clear(listenerName: string) {\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // If we have listeners for this function name\n      if (this.listenerMap.has(functionName)) {\n        const listeners = this.listenerMap.get(functionName)!;\n\n        // Filter out listeners that match the criteria\n        const newListeners = listeners.filter((obj) => obj.CMIElement !== CMIElement);\n\n        // Update the count and map\n        this.listenerCount -= listeners.length - newListeners.length;\n\n        if (newListeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, newListeners);\n        }\n      }\n    }\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created\n   *\n   * @param {string} functionName - The name of the function that triggered the event\n   * @param {string} CMIElement - The CMI element that was affected\n   * @param {any} value - The value that was set\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this.apiLog(functionName, value, LogLevelEnum.INFO, CMIElement);\n\n    // Get listeners for this function name\n    const listeners = this.listenerMap.get(functionName);\n    if (!listeners) return;\n\n    for (const listener of listeners) {\n      const listenerHasCMIElement = !!listener.CMIElement;\n      let CMIElementsMatch = false;\n\n      // Check if CMI elements match\n      if (CMIElement && listener.CMIElement) {\n        if (listener.CMIElement.endsWith(\"*\")) {\n          // For wildcard matches, check if the CMI element starts with the prefix\n          const prefix = listener.CMIElement.slice(0, -1);\n          CMIElementsMatch = CMIElement.startsWith(prefix);\n        } else {\n          // For exact matches, compare the strings directly\n          CMIElementsMatch = listener.CMIElement === CMIElement;\n        }\n      }\n\n      // If the listener matches, call the callback\n      if (!listenerHasCMIElement || CMIElementsMatch) {\n        this.apiLog(\n          \"processListeners\",\n          `Processing listener: ${listener.functionName}`,\n          LogLevelEnum.DEBUG,\n          CMIElement,\n        );\n\n        // Handle special event types\n        if (functionName.startsWith(\"Sequence\")) {\n          // For sequence events, pass the target as the first argument\n          listener.callback(value);\n        } else if (functionName === \"CommitError\") {\n          // For commit error events, pass the error code\n          listener.callback(value);\n        } else if (functionName === \"CommitSuccess\") {\n          // For commit success events, pass no arguments\n          listener.callback();\n        } else {\n          // For regular events, pass CMIElement and value\n          listener.callback(CMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Resets the event service by clearing all listeners\n   */\n  reset() {\n    this.listenerMap.clear();\n    this.listenerCount = 0;\n  }\n}\n","import { CommitObject, LogLevel } from \"../types/api_types\";\nimport { StringKeyMap, unflatten } from \"../utilities\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { BaseCMI } from \"../cmi/common/base_cmi\";\nimport { ISerializationService } from \"../interfaces/services\";\n\n/**\n * Service for handling data serialization and deserialization in scorm-again\n */\nexport class SerializationService implements ISerializationService {\n  /**\n   * Loads CMI data from a flattened JSON object with special handling for arrays and ordering.\n   *\n   * This method implements a complex algorithm for loading flattened JSON data into the CMI\n   * object structure. It handles several key challenges:\n   *\n   * 1. Ordering dependencies: Some CMI elements (like interactions and objectives) must be\n   *    loaded in a specific order to ensure proper initialization.\n   *\n   * 2. Array handling: Interactions and objectives are stored as arrays, and their properties\n   *    must be loaded in the correct order (e.g., 'id' and 'type' must be set before other properties).\n   *\n   * 3. Unflattening: The method converts flattened dot notation (e.g., \"cmi.objectives.0.id\")\n   *    back into nested objects before loading.\n   *\n   * The algorithm works by:\n   * - Categorizing keys into interactions, objectives, and other properties\n   * - Sorting interactions to prioritize 'id' and 'type' fields within each index\n   * - Sorting objectives to prioritize 'id' fields within each index\n   * - Processing each category in order: interactions, objectives, then other properties\n   *\n   * @param {StringKeyMap} json - The flattened JSON object with dot notation keys\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   *\n   * @param setStartingData\n   * @example\n   * // Example of flattened JSON input:\n   * // {\n   * //   \"cmi.objectives.0.id\": \"obj1\",\n   * //   \"cmi.objectives.0.score.raw\": \"80\",\n   * //   \"cmi.interactions.0.id\": \"int1\",\n   * //   \"cmi.interactions.0.type\": \"choice\",\n   * //   \"cmi.interactions.0.result\": \"correct\"\n   * // }\n   */\n  loadFromFlattenedJSON(\n    json: StringKeyMap,\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromFlattenedJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    const int_pattern = /^(cmi\\.interactions\\.)(\\d+)\\.(.*)$/;\n    const obj_pattern = /^(cmi\\.objectives\\.)(\\d+)\\.(.*)$/;\n\n    // Extract and categorize keys for better sorting\n    const interactions: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const objectives: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const others: { key: string; value: any }[] = [];\n\n    // Categorize keys\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key)) {\n        const intMatch = key.match(int_pattern);\n        if (intMatch) {\n          interactions.push({\n            key,\n            value: json[key],\n            index: Number(intMatch[2]),\n            field: intMatch[3],\n          });\n          continue;\n        }\n\n        const objMatch = key.match(obj_pattern);\n        if (objMatch) {\n          objectives.push({\n            key,\n            value: json[key],\n            index: Number(objMatch[2]),\n            field: objMatch[3],\n          });\n          continue;\n        }\n\n        others.push({ key, value: json[key] });\n      }\n    }\n\n    // Sort interactions: first by index, then prioritize 'id' and 'type' fields\n    interactions.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id and type\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n      if (a.field === \"type\") return -1;\n      if (b.field === \"type\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort objectives: first by index, then prioritize 'id' field\n    objectives.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort other keys alphabetically\n    others.sort((a, b) => a.key.localeCompare(b.key));\n\n    // Process all items in the correct order\n    const processItems = (items: { key: string; value: any }[]) => {\n      items.forEach((item) => {\n        const obj: StringKeyMap = {};\n        obj[item.key] = item.value;\n        this.loadFromJSON(\n          unflatten(obj) as StringKeyMap,\n          CMIElement,\n          setCMIValue,\n          isNotInitialized,\n          setStartingData,\n        );\n      });\n    };\n\n    // Process in order: interactions, objectives, others\n    processItems(interactions);\n    processItems(objectives);\n    processItems(others);\n  }\n\n  /**\n   * Loads CMI data from a nested JSON object with recursive traversal.\n   *\n   * This method implements a recursive algorithm for loading nested JSON data into the CMI\n   * object structure. It handles several key aspects:\n   *\n   * 1. Recursive traversal: The method recursively traverses the nested JSON structure,\n   *    building CMI element paths as it goes (e.g., \"cmi.core.student_id\").\n   *\n   * 2. Type-specific handling: Different data types are handled differently:\n   *    - Arrays: Each array element is processed individually with its index in the path\n   *    - Objects: Recursively processed with updated path\n   *    - Primitives: Set directly using setCMIValue\n   *\n   * 3. Initialization check: Ensures the method is only called before API initialization\n   *\n   * 4. Starting data storage: Stores the original JSON data for potential future use\n   *\n   * The algorithm works by:\n   * - First storing the complete JSON object via setStartingData\n   * - Iterating through each property in the JSON object\n   * - For each property, determining its type and handling it accordingly\n   * - Building the CMI element path as it traverses the structure\n   * - Setting values at the appropriate paths using setCMIValue\n   *\n   * @param {{[key: string]: any}} json - The nested JSON object to load\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value at a specific path\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   * @param {Function} setStartingData - Function to store the original JSON data\n   *\n   * @example\n   * // Example of nested JSON input:\n   * // {\n   * //   \"core\": {\n   * //     \"student_id\": \"12345\",\n   * //     \"student_name\": \"John Doe\"\n   * //   },\n   * //   \"objectives\": [\n   * //     { \"id\": \"obj1\", \"score\": { \"raw\": 80 } },\n   * //     { \"id\": \"obj2\", \"score\": { \"raw\": 90 } }\n   * //   ]\n   * // }\n   */\n  loadFromJSON(\n    json: { [key: string]: any },\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    CMIElement = CMIElement !== undefined ? CMIElement : \"cmi\";\n\n    setStartingData(json);\n\n    // could this be refactored down to flatten(json) then setCMIValue on each?\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key) && json[key]) {\n        const currentCMIElement = (CMIElement ? CMIElement + \".\" : \"\") + key;\n        const value = json[key];\n\n        if (value.constructor === Array) {\n          for (let i = 0; i < value.length; i++) {\n            if (value[i]) {\n              const item = value[i];\n              const tempCMIElement = `${currentCMIElement}.${i}`;\n\n              if (item.constructor === Object) {\n                this.loadFromJSON(\n                  item,\n                  tempCMIElement,\n                  setCMIValue,\n                  isNotInitialized,\n                  setStartingData,\n                );\n              } else {\n                setCMIValue(tempCMIElement, item);\n              }\n            }\n          }\n        } else if (value.constructor === Object) {\n          this.loadFromJSON(\n            value,\n            currentCMIElement,\n            setCMIValue,\n            isNotInitialized,\n            setStartingData,\n          );\n        } else {\n          setCMIValue(currentCMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Render the CMI object to JSON for sending to an LMS.\n   *\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {string}\n   */\n  renderCMIToJSONString(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): string {\n    // Do we want/need to return fields that have no set value?\n    if (sendFullCommit) {\n      return JSON.stringify({ cmi });\n    }\n    return JSON.stringify({ cmi }, (k, v) => (v === undefined ? null : v), 2);\n  }\n\n  /**\n   * Returns a JS object representing the current cmi\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {object}\n   */\n  renderCMIToJSONObject(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): StringKeyMap {\n    // Revert to the original implementation to maintain compatibility with tests\n    return JSON.parse(this.renderCMIToJSONString(cmi, sendFullCommit));\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} alwaysSendTotalTime - Whether to always send total time\n   * @param {boolean|Function} renderCommonCommitFields - Whether to render common commit fields\n   * @param {Function} renderCommitObject - Function to render commit object\n   * @param {Function} renderCommitCMI - Function to render commit CMI\n   * @param {LogLevel} apiLogLevel - The API log level\n   * @return {CommitObject|StringKeyMap|Array<any>}\n   */\n  getCommitObject(\n    terminateCommit: boolean,\n    alwaysSendTotalTime: boolean,\n    renderCommonCommitFields: boolean | ((commitObject: CommitObject) => boolean),\n    renderCommitObject: (terminateCommit: boolean) => CommitObject,\n    renderCommitCMI: (terminateCommit: boolean) => StringKeyMap | Array<any>,\n    apiLogLevel: LogLevel,\n  ): CommitObject | StringKeyMap | Array<any> {\n    const shouldTerminateCommit = terminateCommit || alwaysSendTotalTime;\n    const commitObject = renderCommonCommitFields\n      ? renderCommitObject(shouldTerminateCommit)\n      : renderCommitCMI(shouldTerminateCommit);\n\n    if ([LogLevelEnum.DEBUG, \"1\", 1, \"DEBUG\"].includes(apiLogLevel)) {\n      console.debug(\"Commit (terminated: \" + (terminateCommit ? \"yes\" : \"no\") + \"): \");\n      console.debug(commitObject);\n    }\n    return commitObject;\n  }\n}\n","type APIError = {\n  errorCode: number;\n  errorMessage: string;\n  detailedMessage: string;\n};\n\nexport class BaseScormValidationError extends Error {\n  constructor(CMIElement: string, errorCode: number) {\n    super(`${CMIElement} : ${errorCode.toString()}`);\n    this._errorCode = errorCode;\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, BaseScormValidationError.prototype);\n  }\n\n  private readonly _errorCode: number;\n\n  /**\n   * Getter for _errorCode\n   * @return {number}\n   */\n  get errorCode(): number {\n    return this._errorCode;\n  }\n}\n\n/**\n * Base Validation Exception\n */\nexport class ValidationError extends BaseScormValidationError implements APIError {\n  /**\n   * Constructor to take in an error message and code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   * @param {string} errorMessage\n   * @param {string} detailedMessage\n   */\n  constructor(\n    CMIElement: string,\n    errorCode: number,\n    errorMessage: string,\n    detailedMessage?: string,\n  ) {\n    super(CMIElement, errorCode);\n    this.message = `${CMIElement} : ${errorMessage}`;\n    this._errorMessage = errorMessage;\n    if (detailedMessage) {\n      this._detailedMessage = detailedMessage;\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  private readonly _errorMessage: string;\n  private readonly _detailedMessage: string = \"\";\n\n  /**\n   * Getter for _errorMessage\n   * @return {string}\n   */\n  get errorMessage(): string {\n    return this._errorMessage;\n  }\n\n  /**\n   * Getter for _detailedMessage\n   * @return {string}\n   */\n  get detailedMessage(): string {\n    return this._detailedMessage;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ILoggingService } from \"../interfaces/services\";\nimport { defaultLogHandler } from \"../constants/default_settings\";\n\n/**\n * Centralized logging service implemented as a singleton\n * Provides methods for logging at different levels and configuring the log level\n */\nexport class LoggingService implements ILoggingService {\n  private static _instance: LoggingService;\n  private _logLevel: LogLevel = LogLevelEnum.ERROR;\n  private _logHandler: (messageLevel: LogLevel, logMessage: string) => void;\n\n  /**\n   * Private constructor to prevent direct instantiation\n   */\n  private constructor() {\n    // Default log handler uses console methods based on log level\n    this._logHandler = defaultLogHandler;\n  }\n\n  /**\n   * Get the singleton instance of LoggingService\n   *\n   * @returns {LoggingService} The singleton instance\n   */\n  public static getInstance(): LoggingService {\n    if (!LoggingService._instance) {\n      LoggingService._instance = new LoggingService();\n    }\n    return LoggingService._instance;\n  }\n\n  /**\n   * Set the log level\n   *\n   * @param {LogLevel} level - The log level to set\n   */\n  public setLogLevel(level: LogLevel): void {\n    this._logLevel = level;\n  }\n\n  /**\n   * Get the current log level\n   *\n   * @returns {LogLevel} The current log level\n   */\n  public getLogLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  /**\n   * Set a custom log handler\n   *\n   * @param {Function} handler - The function to handle log messages\n   */\n  public setLogHandler(handler: (messageLevel: LogLevel, logMessage: string) => void): void {\n    this._logHandler = handler;\n  }\n\n  /**\n   * Log a message if the message level is greater than or equal to the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @param {string} logMessage - The message to log\n   */\n  public log(messageLevel: LogLevel, logMessage: string): void {\n    if (this.shouldLog(messageLevel)) {\n      this._logHandler(messageLevel, logMessage);\n    }\n  }\n\n  /**\n   * Log a message at ERROR level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public error(logMessage: string): void {\n    this.log(LogLevelEnum.ERROR, logMessage);\n  }\n\n  /**\n   * Log a message at WARN level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public warn(logMessage: string): void {\n    this.log(LogLevelEnum.WARN, logMessage);\n  }\n\n  /**\n   * Log a message at INFO level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public info(logMessage: string): void {\n    this.log(LogLevelEnum.INFO, logMessage);\n  }\n\n  /**\n   * Log a message at DEBUG level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public debug(logMessage: string): void {\n    this.log(LogLevelEnum.DEBUG, logMessage);\n  }\n\n  /**\n   * Determine if a message should be logged based on its level and the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @returns {boolean} Whether the message should be logged\n   */\n  private shouldLog(messageLevel: LogLevel): boolean {\n    // Convert string levels to numbers for comparison\n    const numericMessageLevel = this.getNumericLevel(messageLevel);\n    const numericLogLevel = this.getNumericLevel(this._logLevel);\n\n    return numericMessageLevel >= numericLogLevel;\n  }\n\n  /**\n   * Convert a log level to its numeric value\n   *\n   * @param {LogLevel} level - The log level to convert\n   * @returns {number} The numeric value of the log level\n   */\n  private getNumericLevel(level: LogLevel): number {\n    if (level === undefined) return LogLevelEnum.NONE;\n\n    if (typeof level === \"number\") return level;\n\n    switch (level) {\n      case \"1\":\n      case \"DEBUG\":\n        return LogLevelEnum.DEBUG;\n      case \"2\":\n      case \"INFO\":\n        return LogLevelEnum.INFO;\n      case \"3\":\n      case \"WARN\":\n        return LogLevelEnum.WARN;\n      case \"4\":\n      case \"ERROR\":\n        return LogLevelEnum.ERROR;\n      case \"5\":\n      case \"NONE\":\n        return LogLevelEnum.NONE;\n      default:\n        return LogLevelEnum.ERROR; // Default to ERROR if unknown\n    }\n  }\n}\n\n// Export a function to get the singleton instance\nexport function getLoggingService(): LoggingService {\n  return LoggingService.getInstance();\n}\n","import { LogLevelEnum } from \"../constants/enums\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { ValidationError } from \"../exceptions\";\nimport { IErrorHandlingService, ILoggingService } from \"../interfaces/services\";\nimport { getLoggingService } from \"./LoggingService\";\n\n/**\n * Service for handling SCORM errors\n */\nexport class ErrorHandlingService implements IErrorHandlingService {\n  private _lastErrorCode: string = \"0\";\n  private readonly _errorCodes: ErrorCode;\n  private readonly _apiLog: (\n    functionName: string,\n    message: string,\n    logLevel?: LogLevelEnum,\n    CMIElement?: string,\n  ) => void;\n  private readonly _getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string;\n  private readonly _loggingService: ILoggingService;\n\n  /**\n   * Constructor for ErrorHandlingService\n   *\n   * @param {ErrorCode} errorCodes - The error codes object\n   * @param {Function} apiLog - Function for logging API calls\n   * @param {Function} getLmsErrorMessageDetails - Function for getting error message details\n   * @param {ILoggingService} loggingService - Optional logging service instance\n   */\n  constructor(\n    errorCodes: ErrorCode,\n    apiLog: (\n      functionName: string,\n      message: string,\n      logLevel?: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n    loggingService?: ILoggingService,\n  ) {\n    this._errorCodes = errorCodes;\n    this._apiLog = apiLog;\n    this._getLmsErrorMessageDetails = getLmsErrorMessageDetails;\n    this._loggingService = loggingService || getLoggingService();\n  }\n\n  /**\n   * Get the last error code\n   *\n   * @return {string} - The last error code\n   */\n  get lastErrorCode(): string {\n    return this._lastErrorCode;\n  }\n\n  /**\n   * Set the last error code\n   *\n   * @param {string} errorCode - The error code to set\n   */\n  set lastErrorCode(errorCode: string) {\n    this._lastErrorCode = errorCode;\n  }\n\n  /**\n   * Throws a SCORM error\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The error number\n   * @param {string} message - The error message\n   * @throws {ValidationError} - If throwException is true, throws a ValidationError\n   */\n  throwSCORMError(CMIElement: string, errorNumber: number, message?: string): void {\n    if (!message) {\n      message = this._getLmsErrorMessageDetails(errorNumber, true);\n    }\n\n    // Format a more descriptive error message with context\n    const formattedMessage = `SCORM Error ${errorNumber}: ${message}${CMIElement ? ` [Element: ${CMIElement}]` : \"\"}`;\n\n    // Log using both the API log and the logging service for consistency\n    this._apiLog(\"throwSCORMError\", errorNumber + \": \" + message, LogLevelEnum.ERROR, CMIElement);\n    this._loggingService.error(formattedMessage);\n\n    this._lastErrorCode = String(errorNumber);\n  }\n\n  /**\n   * Clears the last SCORM error code on success.\n   *\n   * @param {string} success - Whether the operation was successful\n   */\n  clearSCORMError(success: string): void {\n    if (success !== undefined && success !== global_constants.SCORM_FALSE) {\n      this._lastErrorCode = \"0\";\n    }\n  }\n\n  /**\n   * Handles exceptions that occur when accessing or setting CMI values.\n   *\n   * This method provides centralized error handling for exceptions that occur during\n   * CMI data operations. It differentiates between different types of errors and\n   * handles them appropriately:\n   *\n   * 1. ValidationError: These are expected errors from the validation system that\n   *    indicate a specific SCORM error condition (like invalid data format or range).\n   *    For these errors, the method:\n   *    - Sets the lastErrorCode to the error code from the ValidationError\n   *    - Returns SCORM_FALSE to indicate failure to the caller\n   *\n   * 2. Standard JavaScript Error: For general JavaScript errors (like TypeError,\n   *    ReferenceError, etc.), the method:\n   *    - Logs the error message with stack trace to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * 3. Unknown exceptions: For any other type of exception that doesn't match the\n   *    above categories, the method:\n   *    - Logs the entire exception object to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * This method is critical for maintaining SCORM compliance by ensuring that\n   * all errors are properly translated into the appropriate SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {ValidationError|Error|unknown} e - The exception that was thrown\n   * @param {string} returnValue - The default return value (typically an empty string)\n   * @return {string} - Either the original returnValue or SCORM_FALSE if an error occurred\n   *\n   * @example\n   * try {\n   *   const value = getCMIValue(\"cmi.core.score.raw\");\n   *   return value;\n   * } catch (e) {\n   *   return handleValueAccessException(e, \"\");\n   * }\n   */\n  handleValueAccessException(\n    CMIElement: string,\n    e: Error | ValidationError | unknown,\n    returnValue: string,\n  ): string {\n    if (e instanceof ValidationError) {\n      const validationError = e as ValidationError;\n      this._lastErrorCode = String(validationError.errorCode);\n\n      // Log validation errors at WARN level with context\n      const errorMessage = `Validation Error ${validationError.errorCode}: ${validationError.message} [Element: ${CMIElement}]`;\n      this._loggingService.warn(errorMessage);\n\n      returnValue = global_constants.SCORM_FALSE;\n    } else if (e instanceof Error) {\n      // For standard JS errors, include the stack trace and error type\n      const errorType = e.constructor.name; // Gets the error type (e.g., TypeError, ReferenceError)\n      const errorMessage = `${errorType}: ${e.message} [Element: ${CMIElement}]`;\n      const stackTrace = e.stack || \"\";\n\n      // Log the detailed error with stack trace\n      this._loggingService.error(`${errorMessage}\\n${stackTrace}`);\n\n      this.throwSCORMError(CMIElement, this._errorCodes.GENERAL, `${errorType}: ${e.message}`);\n    } else {\n      // For unknown errors, provide as much context as possible\n      const errorMessage = `Unknown error occurred while accessing [Element: ${CMIElement}]`;\n\n      this._loggingService.error(errorMessage);\n\n      try {\n        // Try to stringify the error object for more details\n        const errorDetails = JSON.stringify(e);\n        this._loggingService.error(`Error details: ${errorDetails}`);\n      } catch (jsonError) {\n        // If stringify fails, log that we couldn't get more details\n        this._loggingService.error(\"Could not stringify error object for details\");\n      }\n\n      this.throwSCORMError(CMIElement, this._errorCodes.GENERAL, \"Unknown error\");\n    }\n    return returnValue;\n  }\n\n  /**\n   * Get the error codes object\n   *\n   * @return {ErrorCode} - The error codes object\n   */\n  get errorCodes(): ErrorCode {\n    return this._errorCodes;\n  }\n}\n\n// Export a factory function to create the service\nexport function createErrorHandlingService(\n  errorCodes: ErrorCode,\n  apiLog: (\n    functionName: string,\n    message: string,\n    logLevel?: LogLevelEnum,\n    CMIElement?: string,\n  ) => void,\n  getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n  loggingService?: ILoggingService,\n): ErrorHandlingService {\n  return new ErrorHandlingService(errorCodes, apiLog, getLmsErrorMessageDetails, loggingService);\n}\n","/**\n * Base class for API cmi objects\n */\nexport abstract class BaseCMI {\n  jsonString? = false;\n  protected readonly _cmi_element: string;\n  protected _initialized = false;\n  private _start_time: number | undefined;\n\n  /**\n   * Constructor for BaseCMI\n   * @param {string} cmi_element\n   */\n  constructor(cmi_element: string) {\n    this._cmi_element = cmi_element;\n  }\n\n  /**\n   * Getter for _initialized\n   * @return {boolean}\n   */\n  get initialized(): boolean {\n    return this._initialized;\n  }\n\n  /**\n   * Getter for _start_time\n   * @return {number | undefined}\n   */\n  get start_time(): number | undefined {\n    return this._start_time;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize(): void {\n    this._initialized = true;\n  }\n\n  /**\n   * Called when the player should override the 'session_time' provided by\n   * the module\n   */\n  setStartTime(): void {\n    this._start_time = new Date().getTime();\n  }\n\n  abstract reset(): void;\n}\n\n/**\n * Base class for cmi root objects\n */\nexport abstract class BaseRootCMI extends BaseCMI {\n  abstract getCurrentTotalTime(): string;\n}\n","export type ErrorCode = {\n  [key: string]: number;\n};\n\nexport const global_errors: ErrorCode = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nexport const scorm12_errors: ErrorCode = {\n  ...global_errors,\n  RETRIEVE_BEFORE_INIT: 301,\n  STORE_BEFORE_INIT: 301,\n  COMMIT_BEFORE_INIT: 301,\n  ARGUMENT_ERROR: 201,\n  CHILDREN_ERROR: 202,\n  COUNT_ERROR: 203,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 401,\n  VALUE_NOT_INITIALIZED: 301,\n  INVALID_SET_VALUE: 402,\n  READ_ONLY_ELEMENT: 403,\n  WRITE_ONLY_ELEMENT: 404,\n  TYPE_MISMATCH: 405,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n\nexport const scorm2004_errors: ErrorCode = {\n  ...global_errors,\n  INITIALIZATION_FAILED: 102,\n  INITIALIZED: 103,\n  TERMINATED: 104,\n  TERMINATION_FAILURE: 111,\n  TERMINATION_BEFORE_INIT: 112,\n  MULTIPLE_TERMINATIONS: 113,\n  RETRIEVE_BEFORE_INIT: 122,\n  RETRIEVE_AFTER_TERM: 123,\n  STORE_BEFORE_INIT: 132,\n  STORE_AFTER_TERM: 133,\n  COMMIT_BEFORE_INIT: 142,\n  COMMIT_AFTER_TERM: 143,\n  ARGUMENT_ERROR: 201,\n  GENERAL_GET_FAILURE: 301,\n  GENERAL_SET_FAILURE: 351,\n  GENERAL_COMMIT_FAILURE: 391,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 402,\n  VALUE_NOT_INITIALIZED: 403,\n  READ_ONLY_ELEMENT: 404,\n  WRITE_ONLY_ELEMENT: 405,\n  TYPE_MISMATCH: 406,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n","import { BaseCMI } from \"./base_cmi\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Base class for cmi *.n objects\n */\nexport class CMIArray extends BaseCMI {\n  private readonly _errorCode: number;\n  private readonly _errorClass: typeof BaseScormValidationError;\n  private readonly __children: string;\n  public childArray: any[];\n\n  /**\n   * Constructor cmi *.n arrays\n   * @param {object} params\n   */\n  constructor(params: {\n    CMIElement: string;\n    children: string;\n    errorCode?: number;\n    errorClass?: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n    this.__children = params.children;\n    this._errorCode = params.errorCode || scorm12_errors.GENERAL;\n    this._errorClass = params.errorClass || BaseScormValidationError;\n    this.childArray = [];\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(wipe: boolean = false): void {\n    this._initialized = false;\n    if (wipe) {\n      this.childArray = [];\n    } else {\n      // Reset all children\n      for (let i = 0; i < this.childArray.length; i++) {\n        this.childArray[i].reset();\n      }\n    }\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this._errorClass(this._cmi_element + \"._children\", this._errorCode);\n  }\n\n  /**\n   * Getter for _count\n   * @return {number}\n   */\n  get _count(): number {\n    return this.childArray.length;\n  }\n\n  /**\n   * Setter for _count. Just throws an error.\n   * @param {number} _count\n   */\n  set _count(_count: number) {\n    throw new this._errorClass(this._cmi_element + \"._count\", this._errorCode);\n  }\n\n  /**\n   * toJSON for *.n arrays\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result: { [key: string]: any } = {};\n    for (let i = 0; i < this.childArray.length; i++) {\n      result[i + \"\"] = this.childArray[i];\n    }\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { ErrorCode } from \"./constants/error_codes\";\nimport { global_constants } from \"./constants/api_constants\";\nimport { formatMessage, StringKeyMap, stringMatches } from \"./utilities\";\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport { CommitObject, LogLevel, ResultObject, Settings } from \"./types/api_types\";\nimport { DefaultSettings } from \"./constants/default_settings\";\nimport { IBaseAPI } from \"./interfaces/IBaseAPI\";\nimport { ScheduledCommit } from \"./helpers/scheduled_commit\";\nimport { LogLevelEnum } from \"./constants/enums\";\nimport { HttpService } from \"./services/HttpService\";\nimport { EventService } from \"./services/EventService\";\nimport { SerializationService } from \"./services/SerializationService\";\nimport { createErrorHandlingService } from \"./services/ErrorHandlingService\";\nimport { getLoggingService } from \"./services/LoggingService\";\nimport {\n  ICMIDataService,\n  IErrorHandlingService,\n  IEventService,\n  IHttpService,\n  ILoggingService,\n  ISerializationService\n} from \"./interfaces/services\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { ValidationError } from \"./exceptions\";\n\n/**\n * Base API class for AICC, SCORM 1.2, and SCORM 2004. Should be considered\n * abstract, and never initialized on its own.\n */\nexport default abstract class BaseAPI implements IBaseAPI {\n  private _timeout?: ScheduledCommit;\n  private readonly _error_codes: ErrorCode;\n  private _settings: Settings = DefaultSettings;\n  private readonly _httpService: IHttpService;\n  private _eventService: IEventService;\n  private _serializationService: ISerializationService;\n  private readonly _errorHandlingService: IErrorHandlingService;\n  private readonly _loggingService: ILoggingService;\n\n  /**\n   * Constructor for Base API class. Sets some shared API fields, as well as\n   * sets up options for the API.\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Settings} settings - Optional settings for the API\n   * @param {IHttpService} httpService - Optional HTTP service instance\n   * @param {IEventService} eventService - Optional Event service instance\n   * @param {ISerializationService} serializationService - Optional Serialization service instance\n   * @param {ICMIDataService} cmiDataService - Optional CMI Data service instance\n   * @param {IErrorHandlingService} errorHandlingService - Optional Error Handling service instance\n   * @param {ILoggingService} loggingService - Optional Logging service instance\n   */\n  protected constructor(\n    error_codes: ErrorCode,\n    settings?: Settings,\n    httpService?: IHttpService,\n    eventService?: IEventService,\n    serializationService?: ISerializationService,\n    cmiDataService?: ICMIDataService,\n    errorHandlingService?: IErrorHandlingService,\n    loggingService?: ILoggingService,\n  ) {\n    if (new.target === BaseAPI) {\n      throw new TypeError(\"Cannot construct BaseAPI instances directly\");\n    }\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n\n    this._error_codes = error_codes;\n\n    if (settings) {\n      this.settings = settings;\n    }\n    this.apiLogLevel = this.settings.logLevel;\n    this.selfReportSessionTime = this.settings.selfReportSessionTime;\n\n    if (this.apiLogLevel === undefined) {\n      this.apiLogLevel = LogLevelEnum.NONE;\n    }\n\n    // Initialize and configure LoggingService\n    this._loggingService = loggingService || getLoggingService();\n    this._loggingService.setLogLevel(this.apiLogLevel);\n\n    // If settings include a custom onLogMessage function, use it as the log handler\n    if (this.settings.onLogMessage) {\n      this._loggingService.setLogHandler(this.settings.onLogMessage);\n    }\n\n    // Initialize HTTP service\n    this._httpService = httpService || new HttpService(this.settings, this._error_codes);\n\n    // Initialize Event service\n    this._eventService =\n      eventService ||\n      new EventService((functionName, message, level, element) =>\n        this.apiLog(functionName, message, level, element),\n      );\n\n    // Initialize Serialization service\n    this._serializationService = serializationService || new SerializationService();\n\n    // Initialize Error Handling service\n    this._errorHandlingService =\n      errorHandlingService ||\n      createErrorHandlingService(\n        this._error_codes,\n        (functionName, message, level, element) =>\n          this.apiLog(functionName, message, level, element),\n        (errorNumber, detail) => this.getLmsErrorMessageDetails(errorNumber, detail),\n      );\n  }\n\n  public abstract cmi: BaseCMI;\n  public startingData?: StringKeyMap;\n\n  public currentState: number;\n  public apiLogLevel: LogLevel;\n  public selfReportSessionTime: boolean;\n\n  /**\n   * Get the last error code\n   * @return {string}\n   */\n  get lastErrorCode(): string {\n    return this._errorHandlingService?.lastErrorCode ?? \"0\";\n  }\n\n  /**\n   * Set the last error code\n   * @param {string} errorCode\n   */\n  set lastErrorCode(errorCode: string) {\n    if (this._errorHandlingService) {\n      this._errorHandlingService.lastErrorCode = errorCode;\n    }\n  }\n\n  /**\n   * Reset the API to its initial state.\n   * This method clears all current data and resets the API to an uninitialized state.\n   * It can optionally accept new settings to configure the API after reset.\n   *\n   * @param {Settings} settings - Optional new settings to apply after reset\n   */\n  abstract reset(settings?: Settings): void;\n\n  /**\n   * Common reset method for all APIs. New settings are merged with the existing settings.\n   * @param {Settings} settings\n   * @protected\n   */\n  commonReset(settings?: Settings): void {\n    this.apiLog(\"reset\", \"Called\", LogLevelEnum.INFO);\n\n    this.settings = { ...this.settings, ...settings };\n\n    this.clearScheduledCommit();\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n    this.lastErrorCode = \"0\";\n    this._eventService.reset();\n    this.startingData = undefined;\n  }\n\n  /**\n   * Initialize the API\n   * @param {string} callbackName\n   * @param {string} initializeMessage\n   * @param {string} terminationMessage\n   * @return {string}\n   */\n  initialize(\n    callbackName: string,\n    initializeMessage?: string,\n    terminationMessage?: string,\n  ): string {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.isInitialized()) {\n      this.throwSCORMError(\"api\", this._error_codes.INITIALIZED, initializeMessage);\n    } else if (this.isTerminated()) {\n      this.throwSCORMError(\"api\", this._error_codes.TERMINATED, terminationMessage);\n    } else {\n      if (this.selfReportSessionTime) {\n        this.cmi.setStartTime();\n      }\n\n      this.currentState = global_constants.STATE_INITIALIZED;\n      this.lastErrorCode = \"0\";\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Initialize the LMS API\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsInitialize(): string;\n\n  /**\n   * Finish the current LMS API session\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsFinish(): string;\n\n  /**\n   * Get the value of a CMI element from the LMS\n   * @param {string} CMIElement - The CMI element to get the value of\n   * @return {string} The value of the CMI element\n   */\n  abstract lmsGetValue(CMIElement: string): string;\n\n  /**\n   * Set the value of a CMI element in the LMS\n   * @param {string} CMIElement - The CMI element to set the value of\n   * @param {any} value - The value to set\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsSetValue(CMIElement: string, value: any): string;\n\n  /**\n   * Commit the current data to the LMS\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsCommit(): string;\n\n  /**\n   * Get the last error code from the LMS\n   * @return {string} The last error code\n   */\n  abstract lmsGetLastError(): string;\n\n  /**\n   * Get the error string for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get the string for\n   * @return {string} The error string\n   */\n  abstract lmsGetErrorString(CMIErrorCode: string | number): string;\n\n  /**\n   * Get diagnostic information for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get diagnostic information for\n   * @return {string} The diagnostic information\n   */\n  abstract lmsGetDiagnostic(CMIErrorCode: string | number): string;\n\n  /**\n   * Abstract method for validating that a response is correct.\n   * This method is used to validate the format and content of a response\n   * before it is set in the CMI data model.\n   *\n   * @param {string} _CMIElement - The CMI element path to validate\n   * @param {any} _value - The value to validate\n   * @throws {Error} If the response format is invalid\n   */\n  abstract validateCorrectResponse(_CMIElement: string, _value: any): void;\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   * APIs that inherit BaseAPI should override this method.\n   *\n   * @param {string} _CMIElement - unused\n   * @param {*} _value - unused\n   * @param {boolean} _foundFirstIndex - unused\n   * @return {BaseCMI|null}\n   * @abstract\n   */\n  abstract getChildElement(\n    _CMIElement: string,\n    _value: any,\n    _foundFirstIndex: boolean,\n  ): BaseCMI | null;\n\n  /**\n   * Attempts to store the data to the LMS, logs data if no LMS configured\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _calculateTotalTime\n   * @return {ResultObject}\n   * @abstract\n   */\n  abstract storeData(_calculateTotalTime: boolean): Promise<ResultObject>;\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _terminateCommit\n   * @return {StringKeyMap|Array}\n   * @abstract\n   */\n  abstract renderCommitCMI(_terminateCommit: boolean): StringKeyMap | Array<string>;\n\n  /**\n   * Render the commit object to the shortened format for LMS commit.\n   * This method transforms the CMI data into a format suitable for sending to the LMS.\n   * It is called during the commit process to prepare the data for transmission.\n   *\n   * @param {boolean} _terminateCommit - Whether this commit is part of the termination process\n   * @return {CommitObject} A formatted object containing the data to be sent to the LMS\n   * @example\n   * // Example of a commit object structure\n   * {\n   *   method: \"POST\",\n   *   params: {\n   *     cmi: { ... },\n   *     finishState: \"COMPLETED\"\n   *   }\n   * }\n   */\n  abstract renderCommitObject(_terminateCommit: boolean): CommitObject;\n\n  /**\n   * Logging for all SCORM actions\n   *\n   * @param {string} functionName\n   * @param {string} logMessage\n   * @param {number} messageLevel\n   * @param {string} CMIElement\n   */\n  apiLog(functionName: string, logMessage: string, messageLevel: LogLevel, CMIElement?: string) {\n    logMessage = formatMessage(functionName, logMessage, CMIElement);\n\n    if (messageLevel >= this.apiLogLevel) {\n      // Use the injected LoggingService\n      this._loggingService.log(messageLevel, logMessage);\n    }\n  }\n\n  /**\n   * Getter for _error_codes\n   * @return {ErrorCode}\n   */\n  get error_codes(): ErrorCode {\n    return this._error_codes;\n  }\n\n  /**\n   * Getter for _settings\n   * @return {Settings}\n   */\n  get settings(): Settings {\n    return this._settings;\n  }\n\n  /**\n   * Setter for _settings\n   * @param {Settings} settings\n   */\n  set settings(settings: Settings) {\n    const previousSettings = this._settings;\n    this._settings = { ...this._settings, ...settings };\n\n    // Update HTTP service settings\n    this._httpService?.updateSettings(this._settings);\n\n    // Update log level if it changed\n    if (settings.logLevel !== undefined && settings.logLevel !== previousSettings.logLevel) {\n      this.apiLogLevel = settings.logLevel;\n      this._loggingService?.setLogLevel(settings.logLevel);\n    }\n\n    // Update log handler if onLogMessage changed\n    if (\n      settings.onLogMessage !== undefined &&\n      settings.onLogMessage !== previousSettings.onLogMessage\n    ) {\n      this._loggingService?.setLogHandler(settings.onLogMessage);\n    }\n  }\n\n  /**\n   * Terminates the current run of the API\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async terminate(callbackName: string, checkTerminated: boolean): Promise<string> {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.TERMINATION_BEFORE_INIT,\n        this._error_codes.MULTIPLE_TERMINATION,\n      )\n    ) {\n      this.currentState = global_constants.STATE_TERMINATED;\n\n      const result: ResultObject = await this.storeData(true);\n      if ((result.errorCode ?? 0) > 0) {\n        this.throwSCORMError(\"api\", result.errorCode);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Get the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  getValue(callbackName: string, checkTerminated: boolean, CMIElement: string): string {\n    let returnValue: string = \"\";\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.RETRIEVE_BEFORE_INIT,\n        this._error_codes.RETRIEVE_AFTER_TERM,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.getCMIValue(CMIElement);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement);\n    }\n\n    this.apiLog(callbackName, \": returned: \" + returnValue, LogLevelEnum.INFO, CMIElement);\n\n    if (returnValue === undefined) {\n      return \"\";\n    }\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Sets the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {string} commitCallback\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  setValue(\n    callbackName: string,\n    commitCallback: string,\n    checkTerminated: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (value !== undefined) {\n      value = String(value);\n    }\n    let returnValue: string = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.STORE_BEFORE_INIT,\n        this._error_codes.STORE_AFTER_TERM,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.setCMIValue(CMIElement, value);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement, value);\n    }\n\n    if (returnValue === undefined) {\n      returnValue = global_constants.SCORM_FALSE;\n    }\n\n    // If we didn't have any errors while setting the data, go ahead and\n    // schedule a commit, if autocommit is turned on\n    if (String(this.lastErrorCode) === \"0\") {\n      if (this.settings.autocommit) {\n        this.scheduleCommit(this.settings.autocommitSeconds * 1000, commitCallback);\n      }\n    }\n\n    this.apiLog(\n      callbackName,\n      \": \" + value + \": result: \" + returnValue,\n      LogLevelEnum.INFO,\n      CMIElement,\n    );\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async commit(callbackName: string, checkTerminated: boolean = false): Promise<string> {\n    this.clearScheduledCommit();\n\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.COMMIT_BEFORE_INIT,\n        this._error_codes.COMMIT_AFTER_TERM,\n      )\n    ) {\n      const result = await this.storeData(false);\n      if ((result.errorCode ?? 0) > 0) {\n        this.throwSCORMError(\"api\", result.errorCode);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      this.apiLog(callbackName, \" Result: \" + returnValue, LogLevelEnum.DEBUG, \"HttpRequest\");\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Returns last error code\n   * @param {string} callbackName\n   * @return {string}\n   */\n  getLastError(callbackName: string): string {\n    const returnValue = String(this.lastErrorCode);\n\n    this.processListeners(callbackName);\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getErrorString(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getDiagnostic(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode, true);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Checks the LMS state and ensures it has been initialized.\n   *\n   * @param {boolean} checkTerminated\n   * @param {number} beforeInitError\n   * @param {number} afterTermError\n   * @return {boolean}\n   */\n  checkState(checkTerminated: boolean, beforeInitError: number, afterTermError: number): boolean {\n    if (this.isNotInitialized()) {\n      this.throwSCORMError(\"api\", beforeInitError);\n      return false;\n    } else if (checkTerminated && this.isTerminated()) {\n      this.throwSCORMError(\"api\", afterTermError);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {(string|number)} _errorNumber\n   * @param {boolean} _detail\n   * @return {string}\n   * @abstract\n   */\n  getLmsErrorMessageDetails(_errorNumber: string | number, _detail: boolean = false): string {\n    throw new Error(\"The getLmsErrorMessageDetails method has not been implemented\");\n  }\n\n  /**\n   * Gets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @return {string}\n   * @abstract\n   */\n  getCMIValue(_CMIElement: string): string {\n    throw new Error(\"The getCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Sets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @param {any} _value\n   * @return {string}\n   * @abstract\n   */\n  setCMIValue(_CMIElement: string, _value: any): string {\n    throw new Error(\"The setCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Shared API method to set a valid for a given element.\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  _commonSetCMIValue(\n    methodName: string,\n    scorm2004: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (!CMIElement || CMIElement === \"\") {\n      return global_constants.SCORM_FALSE;\n    }\n\n    this.lastErrorCode = \"0\";\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap | BaseCMI = this as StringKeyMap;\n    let returnValue = global_constants.SCORM_FALSE;\n    let foundFirstIndex = false;\n\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      const attribute = structure[idx];\n\n      if (idx === structure.length - 1) {\n        if (scorm2004 && attribute.substring(0, 8) === \"{target=\") {\n          if (this.isInitialized()) {\n            this.throwSCORMError(CMIElement, this._error_codes.READ_ONLY_ELEMENT);\n            break;\n          } else {\n            refObject = {\n              ...refObject,\n              attribute: value,\n            };\n          }\n        } else if (!this._checkObjectHasProperty(refObject as StringKeyMap, attribute)) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        } else {\n          if (\n            stringMatches(CMIElement, \"\\\\.correct_responses\\\\.\\\\d+$\") &&\n            this.isInitialized() &&\n            attribute !== \"pattern\"\n          ) {\n            this.validateCorrectResponse(CMIElement, value);\n            if (this.lastErrorCode !== \"0\") {\n              this.throwSCORMError(CMIElement, this._error_codes.TYPE_MISMATCH);\n              break;\n            }\n          }\n\n          if (!scorm2004 || this._errorHandlingService.lastErrorCode === \"0\") {\n            (refObject as StringKeyMap)[attribute] = value;\n            returnValue = global_constants.SCORM_TRUE;\n          }\n        }\n      } else {\n        refObject = (refObject as StringKeyMap)[attribute] as StringKeyMap;\n        if (!refObject) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n\n        if (refObject instanceof CMIArray) {\n          const index = parseInt(structure[idx + 1], 10);\n\n          // SCO is trying to set an item on an array\n          if (!isNaN(index)) {\n            const item = refObject.childArray[index];\n\n            if (item) {\n              refObject = item;\n              foundFirstIndex = true;\n            } else {\n              const newChild = this.getChildElement(CMIElement, value, foundFirstIndex);\n              foundFirstIndex = true;\n\n              if (!newChild) {\n                if (this.lastErrorCode === \"0\") {\n                  this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n                }\n                break;\n              } else {\n                if (refObject.initialized) newChild.initialize();\n                refObject.childArray[index] = newChild;\n                refObject = newChild;\n              }\n            }\n\n            // Have to update idx value to skip the array position\n            idx++;\n          }\n        }\n      }\n    }\n\n    if (returnValue === global_constants.SCORM_FALSE) {\n      this.apiLog(\n        methodName,\n        `There was an error setting the value for: ${CMIElement}, value of: ${value}`,\n        LogLevelEnum.WARN,\n      );\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @return {any}\n   */\n  _commonGetCMIValue(methodName: string, scorm2004: boolean, CMIElement: string): any {\n    if (!CMIElement || CMIElement === \"\") {\n      return \"\";\n    }\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap = this as StringKeyMap;\n    let attribute = null;\n\n    const uninitializedErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) has not been initialized.`;\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      attribute = structure[idx];\n\n      if (!scorm2004) {\n        if (idx === structure.length - 1) {\n          if (!this._checkObjectHasProperty(refObject, attribute)) {\n            this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n            return;\n          }\n        }\n      } else {\n        if (\n          String(attribute).substring(0, 8) === \"{target=\" &&\n          typeof refObject._isTargetValid == \"function\"\n        ) {\n          const target = String(attribute).substring(8, String(attribute).length - 9);\n          return refObject._isTargetValid(target);\n        } else if (!this._checkObjectHasProperty(refObject, attribute)) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          return;\n        }\n      }\n\n      refObject = refObject[attribute] as StringKeyMap;\n      if (refObject === undefined) {\n        this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n        break;\n      }\n\n      if (refObject instanceof CMIArray) {\n        const index = parseInt(structure[idx + 1], 10);\n\n        // SCO is trying to set an item on an array\n        if (!isNaN(index)) {\n          const item = refObject.childArray[index];\n\n          if (item) {\n            refObject = item;\n          } else {\n            this.throwSCORMError(\n              CMIElement,\n              this._error_codes.VALUE_NOT_INITIALIZED,\n              uninitializedErrorMessage,\n            );\n            break;\n          }\n\n          // Have to update idx value to skip the array position\n          idx++;\n        }\n      }\n    }\n\n    if (refObject === null || refObject === undefined) {\n      if (!scorm2004) {\n        if (attribute === \"_children\") {\n          this.throwSCORMError(CMIElement, this._error_codes.CHILDREN_ERROR, undefined);\n        } else if (attribute === \"_count\") {\n          this.throwSCORMError(CMIElement, this._error_codes.COUNT_ERROR, undefined);\n        }\n      }\n    } else {\n      return refObject;\n    }\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isInitialized(): boolean {\n    return this.currentState === global_constants.STATE_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_NOT_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isNotInitialized(): boolean {\n    return this.currentState === global_constants.STATE_NOT_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_TERMINATED\n   *\n   * @return {boolean}\n   */\n  isTerminated(): boolean {\n    return this.currentState === global_constants.STATE_TERMINATED;\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event.\n   * This method allows you to register a callback function that will be executed\n   * when the specified event occurs.\n   *\n   * @param {string} listenerName - The name of the event to listen for (e.g., \"Initialize\", \"Terminate\", \"GetValue\", \"SetValue\", \"Commit\")\n   * @param {function} callback - The function to execute when the event occurs. The callback will receive relevant event data.\n   * @example\n   * // Listen for Initialize events\n   * api.on(\"Initialize\", function() {\n   *   console.log(\"API has been initialized\");\n   * });\n   *\n   * // Listen for SetValue events\n   * api.on(\"SetValue\", function(element, value) {\n   *   console.log(\"Setting \" + element + \" to \" + value);\n   * });\n   */\n  on(listenerName: string, callback: Function) {\n    this._eventService.on(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener.\n   * This method removes a previously registered callback for an event.\n   * Both the event name and the callback reference must match what was used in the 'on' method.\n   *\n   * @param {string} listenerName - The name of the event to stop listening for\n   * @param {function} callback - The callback function to remove\n   * @example\n   * // Remove a specific listener\n   * const myCallback = function() { console.log(\"API initialized\"); };\n   * api.on(\"Initialize\", myCallback);\n   * // Later, when you want to remove it:\n   * api.off(\"Initialize\", myCallback);\n   */\n  off(listenerName: string, callback: Function) {\n    this._eventService.off(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event.\n   * This method removes all callbacks registered for the specified event.\n   *\n   * @param {string} listenerName - The name of the event to clear all listeners for\n   * @example\n   * // Remove all listeners for the Initialize event\n   * api.clear(\"Initialize\");\n   */\n  clear(listenerName: string) {\n    this._eventService.clear(listenerName);\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created for a specific event.\n   * This method is called internally when SCORM events occur to notify all registered listeners.\n   * It triggers all callback functions registered for the specified event.\n   *\n   * @param {string} functionName - The name of the function/event that occurred\n   * @param {string} CMIElement - Optional CMI element involved in the event\n   * @param {any} value - Optional value associated with the event\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this._eventService.processListeners(functionName, CMIElement, value);\n  }\n\n  /**\n   * Throws a SCORM error with the specified error number and optional message.\n   * This method sets the last error code and can be used to indicate that an operation failed.\n   * The error number should correspond to one of the standard SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The SCORM error code to set\n   * @param {string} message - Optional custom error message to provide additional context\n   * @example\n   * // Throw a \"not initialized\" error\n   * this.throwSCORMError(301, \"The API must be initialized before calling GetValue\");\n   */\n  throwSCORMError(CMIElement: string, errorNumber: number, message?: string) {\n    this._errorHandlingService.throwSCORMError(CMIElement, errorNumber, message);\n  }\n\n  /**\n   * Clears the last SCORM error code when an operation succeeds.\n   * This method is typically called after successful API operations to reset the error state.\n   * It only clears the error if the success parameter is \"true\".\n   *\n   * @param {string} success - A string indicating whether the operation succeeded (\"true\" or \"false\")\n   * @example\n   * // Clear error after successful operation\n   * this.clearSCORMError(\"true\");\n   */\n  clearSCORMError(success: string) {\n    this._errorHandlingService.clearSCORMError(success);\n  }\n\n  /**\n   * Load the CMI from a flattened JSON object.\n   * This method populates the CMI data model from a flattened JSON structure\n   * where keys represent CMI element paths (e.g., \"cmi.core.student_id\").\n   *\n   * @param {StringKeyMap} json - The flattened JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a flattened JSON structure\n   * api.loadFromFlattenedJSON({\n   *   \"cmi.core.student_id\": \"12345\",\n   *   \"cmi.core.student_name\": \"John Doe\",\n   *   \"cmi.core.lesson_status\": \"incomplete\"\n   * });\n   */\n  loadFromFlattenedJSON(json: StringKeyMap, CMIElement?: string) {\n    if (!CMIElement) {\n      // by default, we start from a blank string because we're expecting each element to start with `cmi`\n      CMIElement = \"\";\n    }\n\n    this._serializationService.loadFromFlattenedJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Loads CMI data from a hierarchical JSON object.\n   * This method populates the CMI data model from a nested JSON structure\n   * that mirrors the CMI object hierarchy.\n   *\n   * @param {StringKeyMap} json - The hierarchical JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a hierarchical JSON structure\n   * api.loadFromJSON({\n   *   core: {\n   *     student_id: \"12345\",\n   *     student_name: \"John Doe\",\n   *     lesson_status: \"incomplete\"\n   *   },\n   *   objectives: [\n   *     { id: \"obj1\", score: { raw: 85 } }\n   *   ]\n   * });\n   */\n  loadFromJSON(json: StringKeyMap, CMIElement: string = \"\") {\n    this._serializationService.loadFromJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Render the CMI object to a JSON string for sending to an LMS.\n   * This method serializes the current CMI data model to a JSON string.\n   * The output format is controlled by the sendFullCommit setting.\n   *\n   * @return {string} A JSON string representation of the CMI data\n   * @example\n   * // Get the current CMI data as a JSON string\n   * const jsonString = api.renderCMIToJSONString();\n   * console.log(jsonString); // '{\"core\":{\"student_id\":\"12345\",...}}'\n   */\n  renderCMIToJSONString(): string {\n    return this._serializationService.renderCMIToJSONString(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Returns a JavaScript object representing the current CMI data.\n   * This method creates a plain JavaScript object that mirrors the\n   * structure of the CMI data model, suitable for further processing.\n   *\n   * @return {StringKeyMap} A JavaScript object representing the CMI data\n   * @example\n   * // Get the current CMI data as a JavaScript object\n   * const cmiObject = api.renderCMIToJSONObject();\n   * console.log(cmiObject.core.student_id); // \"12345\"\n   */\n  renderCMIToJSONObject(): StringKeyMap {\n    return this._serializationService.renderCMIToJSONObject(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Sends a request to the LMS with the specified parameters.\n   * This method handles communication with the LMS server, including\n   * formatting the request, handling the response, and triggering appropriate events.\n   *\n   * @param {string} url - The URL endpoint to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The data to send to the LMS\n   * @param {boolean} immediate - Whether to send the request immediately (true) or queue it (false)\n   * @return {Promise<ResultObject>} A promise that resolves with the result of the request\n   * @example\n   * // Send data to the LMS immediately\n   * const result = await api.processHttpRequest(\n   *   \"https://lms.example.com/scorm/commit\",\n   *   { method: \"POST\", params: { cmi: { core: { lesson_status: \"completed\" } } } },\n   *   true\n   * );\n   * console.log(result.errorCode === 0 ? \"Success\" : \"Failed\");\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n  ): Promise<ResultObject> {\n    return this._httpService.processHttpRequest(\n      url,\n      params,\n      immediate,\n      (functionName, message, level, element) => this.apiLog(functionName, message, level, element),\n      (functionName, CMIElement, value) => this.processListeners(functionName, CMIElement, value),\n    );\n  }\n\n  /**\n   * Schedules a commit operation to occur after a specified delay.\n   * This method is used to implement auto-commit functionality, where data\n   * is periodically sent to the LMS without requiring explicit commit calls.\n   *\n   * @param {number} when - The number of milliseconds to wait before committing\n   * @param {string} callback - The name of the commit event callback\n   * @example\n   * // Schedule a commit to happen in 60 seconds\n   * api.scheduleCommit(60000, \"commit\");\n   */\n  scheduleCommit(when: number, callback: string) {\n    if (!this._timeout) {\n      this._timeout = new ScheduledCommit(this, when, callback);\n      this.apiLog(\"scheduleCommit\", \"scheduled\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Clears and cancels any currently scheduled commits.\n   * This method is typically called when an explicit commit is performed\n   * or when the API is terminated, to prevent redundant commits.\n   *\n   * @example\n   * // Cancel any pending scheduled commits\n   * api.clearScheduledCommit();\n   */\n  clearScheduledCommit() {\n    if (this._timeout) {\n      this._timeout.cancel();\n      this._timeout = undefined;\n      this.apiLog(\"clearScheduledCommit\", \"cleared\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Checks if an object has a specific property, using multiple detection methods.\n   * This method performs a thorough check for property existence by:\n   * 1. Checking if it's an own property using Object.hasOwnProperty\n   * 2. Checking if it's defined in the prototype with a property descriptor\n   * 3. Checking if it's accessible via the 'in' operator (includes inherited properties)\n   *\n   * @param {StringKeyMap} StringKeyMap - The object to check for the property\n   * @param {string} attribute - The property name to look for\n   * @return {boolean} True if the property exists on the object or its prototype chain\n   * @private\n   *\n   * @example\n   * // Check for an own property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"name\"); // Returns true\n   *\n   * @example\n   * // Check for an inherited property\n   * class Parent { get type() { return \"parent\"; } }\n   * const child = Object.create(new Parent());\n   * this._checkObjectHasProperty(child, \"type\"); // Returns true\n   *\n   * @example\n   * // Check for a non-existent property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"age\"); // Returns false\n   */\n  private _checkObjectHasProperty(StringKeyMap: StringKeyMap, attribute: string): boolean {\n    return (\n      Object.hasOwnProperty.call(StringKeyMap, attribute) ||\n      Object.getOwnPropertyDescriptor(Object.getPrototypeOf(StringKeyMap), attribute) != null ||\n      attribute in StringKeyMap\n    );\n  }\n\n  /**\n   * Handles exceptions that occur when accessing CMI values.\n   * This method delegates to the ErrorHandlingService to process exceptions\n   * that occur during CMI data operations, ensuring consistent error handling\n   * throughout the API.\n   *\n   * @param {string} CMIElement\n   * @param {any} e - The exception that was thrown\n   * @param {string} returnValue - The default return value to use if an error occurs\n   * @return {string} Either the original returnValue or SCORM_FALSE if an error occurred\n   * @private\n   *\n   * @example\n   * // Handle a validation error when getting a CMI value\n   * try {\n   *   return this.getCMIValue(\"cmi.core.score.raw\");\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"\");\n   * }\n   *\n   * @example\n   * // Handle a general error when setting a CMI value\n   * try {\n   *   this.setCMIValue(\"cmi.core.lesson_status\", \"completed\");\n   *   return \"true\";\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"false\");\n   * }\n   */\n  private handleValueAccessException(CMIElement: string, e: any, returnValue: string): string {\n    if (e instanceof ValidationError) {\n      this.lastErrorCode = String(e.errorCode);\n      returnValue = global_constants.SCORM_FALSE;\n      this.throwSCORMError(CMIElement, e.errorCode, e.errorMessage);\n    } else {\n      if (e instanceof Error && e.message) {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, e.message);\n      } else {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, \"Unknown error\");\n      }\n    }\n    return returnValue;\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS.\n   * This method delegates to the SerializationService to create a properly\n   * formatted object containing the CMI data that needs to be sent to the LMS.\n   * The format and content of the commit object depend on whether this is a\n   * regular commit or a termination commit.\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @return {CommitObject|StringKeyMap|Array} The formatted commit object\n   * @protected\n   *\n   * @example\n   * // Create a regular commit object\n   * const regularCommit = this.getCommitObject(false);\n   * // Result might be: { cmi: { core: { lesson_status: \"incomplete\" } } }\n   *\n   * @example\n   * // Create a termination commit object (includes total_time)\n   * const terminationCommit = this.getCommitObject(true);\n   * // Result might be: { cmi: { core: { lesson_status: \"completed\", total_time: \"PT1H30M\" } } }\n   */\n  protected getCommitObject(terminateCommit: boolean): CommitObject | StringKeyMap | Array<any> {\n    return this._serializationService.getCommitObject(\n      terminateCommit,\n      this.settings.alwaysSendTotalTime,\n      this.settings.renderCommonCommitFields,\n      (terminateCommit) => this.renderCommitObject(terminateCommit),\n      (terminateCommit) => this.renderCommitCMI(terminateCommit),\n      this.apiLogLevel,\n    );\n  }\n}\n","import { ValidationError } from \"../exceptions\";\nimport { scorm2004_constants } from \"../constants/api_constants\";\n\nconst scorm2004_errors = scorm2004_constants.error_descriptions;\n\n/**\n * SCORM 2004 Validation Error\n */\nexport class Scorm2004ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm2004_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm2004_errors[String(errorCode)].basicMessage,\n        scorm2004_errors[String(errorCode)].detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm2004_errors[\"101\"].basicMessage,\n        scorm2004_errors[\"101\"].detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm2004ValidationError.prototype);\n  }\n}\n","import { BaseScormValidationError } from \"../../exceptions\";\nimport { memoize } from \"../../utilities\";\n\n/**\n * Check if the value matches the proper format. If not, throw proper error code.\n *\n * @param {string} value\n * @param {string} regexPattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @param {boolean} [allowEmptyString]\n * @return {boolean}\n */\nexport const checkValidFormat = memoize(\n  (\n    CMIElement: string,\n    value: string,\n    regexPattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n    allowEmptyString?: boolean,\n  ): boolean => {\n    if (typeof value !== \"string\") {\n      return false;\n    }\n    const formatRegex = new RegExp(regexPattern);\n    const matches = value.match(formatRegex);\n    if (allowEmptyString && value === \"\") {\n      return true;\n    }\n    if (value === undefined || !matches || matches[0] === \"\") {\n      throw new errorClass(CMIElement, errorCode);\n    }\n    return true;\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, regexPattern, errorCode, _errorClass, allowEmptyString) => {\n    // Use typeof for non-string values to ensure consistent cache keys\n    const valueKey = typeof value === \"string\" ? value : `[${typeof value}]`;\n    return `${CMIElement}:${valueKey}:${regexPattern}:${errorCode}:${allowEmptyString || false}`;\n  },\n);\n\n/**\n * Check if the value matches the proper range. If not, throw proper error code.\n *\n * @param {any} value\n * @param {string} rangePattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @return {boolean}\n */\nexport const checkValidRange = memoize(\n  (\n    CMIElement: string,\n    value: any,\n    rangePattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean => {\n    const ranges = rangePattern.split(\"#\");\n    value = value * 1.0;\n    if (value >= ranges[0]) {\n      if (ranges[1] === \"*\" || value <= ranges[1]) {\n        return true;\n      } else {\n        throw new errorClass(CMIElement, errorCode);\n      }\n    } else {\n      throw new errorClass(CMIElement, errorCode);\n    }\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, rangePattern, errorCode, _errorClass) =>\n    `${CMIElement}:${value}:${rangePattern}:${errorCode}`,\n);\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check2004ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm2004_errors.TYPE_MISMATCH,\n    Scorm2004ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @return {boolean}\n */\nexport function check2004ValidRange(\n  CMIElement: string,\n  value: string,\n  rangePattern: string,\n): boolean {\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm2004_errors.VALUE_OUT_OF_RANGE,\n    Scorm2004ValidationError,\n  );\n}\n","export const scorm12_regex = {\n  CMIString256: \"^.{0,255}$\",\n  CMIString4096: \"^.{0,4096}$\",\n  CMITime: \"^(?:[01]\\\\d|2[0123]):(?:[012345]\\\\d):(?:[012345]\\\\d)$\",\n  CMITimespan: \"^([0-9]{2,}):([0-9]{2}):([0-9]{2})(.[0-9]{1,2})?$\",\n\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{0,3})(.[0-9]*)?$\",\n\n  CMIIdentifier: \"^[\\\\u0021-\\\\u007E\\\\s]{0,255}$\",\n  CMIFeedback: \"^.{0,255}$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMIStatus: \"^(passed|completed|failed|incomplete|browsed)$\",\n  CMIStatus2: \"^(passed|completed|failed|incomplete|browsed|not attempted)$\",\n  CMIExit: \"^(time-out|suspend|logout|)$\",\n  CMIType: \"^(true-false|choice|fill-in|matching|performance|sequencing|likert|numeric)$\",\n  CMIResult: \"^(correct|wrong|unanticipated|neutral|([0-9]{0,3})?(\\\\.[0-9]*)?)$\",\n  NAVEvent: \"^(previous|continue)$\",\n  // Data ranges\n  score_range: \"0#100\",\n  audio_range: \"-1#100\",\n  speed_range: \"-100#100\",\n  weighting_range: \"-100#100\",\n  text_range: \"-1#1\",\n};\nexport const aicc_regex = {\n  ...scorm12_regex,\n  ...{\n    CMIIdentifier: \"^\\\\w{1,255}$\",\n  },\n};\nexport const scorm2004_regex = {\n  CMIString200: \"^[\\\\u0000-\\\\uFFFF]{0,200}$\",\n  CMIString250: \"^[\\\\u0000-\\\\uFFFF]{0,250}$\",\n  CMIString1000: \"^[\\\\u0000-\\\\uFFFF]{0,1000}$\",\n  CMIString4000: \"^[\\\\u0000-\\\\uFFFF]{0,4000}$\",\n  CMIString64000: \"^[\\\\u0000-\\\\uFFFF]{0,64000}$\",\n  CMILang: \"^([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?$|^$\",\n\n  CMILangString250: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,250}$)?$\",\n\n  CMILangcr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?}))(.*?)$\",\n\n  CMILangString250cr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?})?(.{0,250})?)?$\",\n\n  CMILangString4000: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,4000}$)?$\",\n\n  CMITime:\n    \"^(19[7-9]{1}[0-9]{1}|20[0-2]{1}[0-9]{1}|203[0-8]{1})((-(0[1-9]{1}|1[0-2]{1}))((-(0[1-9]{1}|[1-2]{1}[0-9]{1}|3[0-1]{1}))(T([0-1]{1}[0-9]{1}|2[0-3]{1})((:[0-5]{1}[0-9]{1})((:[0-5]{1}[0-9]{1})((\\\\.[0-9]{1,6})((Z|([+|-]([0-1]{1}[0-9]{1}|2[0-3]{1})))(:[0-5]{1}[0-9]{1})?)?)?)?)?)?)?)?$\",\n  CMITimespan:\n    \"^P(?:([.,\\\\d]+)Y)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)W)?(?:([.,\\\\d]+)D)?(?:T?(?:([.,\\\\d]+)H)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)S)?)?$\",\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{1,5})(\\\\.[0-9]{1,18})?$\",\n  CMIIdentifier: \"^\\\\S{1,250}[a-zA-Z0-9]$\",\n  CMIShortIdentifier: \"^[\\\\w\\\\.\\\\-\\\\_]{1,250}$\",\n  CMILongIdentifier: \"^(?:(?!urn:)\\\\S{1,4000}|urn:[A-Za-z0-9-]{1,31}:\\\\S{1,4000}|.{1,4000})$\",\n  // need to re-examine this\n  CMIFeedback: \"^.*$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  CMIIndexStore: \".N(\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMICStatus: \"^(completed|incomplete|not attempted|unknown)$\",\n  CMISStatus: \"^(passed|failed|unknown)$\",\n  CMIExit: \"^(time-out|suspend|logout|normal)$\",\n  CMIType:\n    \"^(true-false|choice|fill-in|long-fill-in|matching|performance|sequencing|likert|numeric|other)$\",\n  CMIResult: \"^(correct|incorrect|unanticipated|neutral|-?([0-9]{1,4})(\\\\.[0-9]{1,18})?)$\",\n  NAVEvent:\n    \"^(previous|continue|exit|exitAll|abandon|abandonAll|suspendAll|_none_|(\\\\{target=(?<choice_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?choice|(\\\\{target=(?<jump_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?jump)$\",\n\n  NAVBoolean: \"^(unknown|true|false$)\",\n  NAVTarget: \"^{target=\\\\S{0,}[a-zA-Z0-9-_]+}$\",\n  // Data ranges\n  scaled_range: \"-1#1\",\n  audio_range: \"0#999.9999999\",\n  speed_range: \"0#999.9999999\",\n  text_range: \"-1#1\",\n  progress_range: \"0#1\",\n};\n","/**\n * Class for SCORM 2004's cmi.learner_preference object\n */\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\n\nexport class CMILearnerPreference extends BaseCMI {\n  private __children = scorm2004_constants.student_preference_children;\n  private _audio_level = \"1\";\n  private _language = \"\";\n  private _delivery_speed = \"1\";\n  private _audio_captioning = \"0\";\n\n  /**\n   * Constructor for cmi.learner_preference\n   */\n  constructor() {\n    super(\"cmi.learner_preference\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._children\",\n      scorm2004_errors.READ_ONLY_ELEMENT,\n    );\n  }\n\n  /**\n   * Getter for _audio_level\n   * @return {string}\n   */\n  get audio_level(): string {\n    return this._audio_level;\n  }\n\n  /**\n   * Setter for _audio_level\n   * @param {string} audio_level\n   */\n  set audio_level(audio_level: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".audio_level\",\n        audio_level,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".audio_level\",\n        audio_level,\n        scorm2004_regex.audio_range,\n      )\n    ) {\n      this._audio_level = audio_level;\n    }\n  }\n\n  /**\n   * Getter for _language\n   * @return {string}\n   */\n  get language(): string {\n    return this._language;\n  }\n\n  /**\n   * Setter for _language\n   * @param {string} language\n   */\n  set language(language: string) {\n    if (check2004ValidFormat(this._cmi_element + \".language\", language, scorm2004_regex.CMILang)) {\n      this._language = language;\n    }\n  }\n\n  /**\n   * Getter for _delivery_speed\n   * @return {string}\n   */\n  get delivery_speed(): string {\n    return this._delivery_speed;\n  }\n\n  /**\n   * Setter for _delivery_speed\n   * @param {string} delivery_speed\n   */\n  set delivery_speed(delivery_speed: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".delivery_speed\",\n        delivery_speed,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".delivery_speed\",\n        delivery_speed,\n        scorm2004_regex.speed_range,\n      )\n    ) {\n      this._delivery_speed = delivery_speed;\n    }\n  }\n\n  /**\n   * Getter for _audio_captioning\n   * @return {string}\n   */\n  get audio_captioning(): string {\n    return this._audio_captioning;\n  }\n\n  /**\n   * Setter for _audio_captioning\n   * @param {string} audio_captioning\n   */\n  set audio_captioning(audio_captioning: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".audio_captioning\",\n        audio_captioning,\n        scorm2004_regex.CMISInteger,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".audio_captioning\",\n        audio_captioning,\n        scorm2004_regex.text_range,\n      )\n    ) {\n      this._audio_captioning = audio_captioning;\n    }\n  }\n\n  /**\n   * toJSON for cmi.learner_preference\n   *\n   * @return {\n   *    {\n   *      audio_level: string,\n   *      language: string,\n   *      delivery_speed: string,\n   *      audio_captioning: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    audio_level: string;\n    language: string;\n    delivery_speed: string;\n    audio_captioning: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio_level: this.audio_level,\n      language: this.language,\n      delivery_speed: this.delivery_speed,\n      audio_captioning: this.audio_captioning,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { scorm2004_regex } from \"./regex\";\n\nexport const LearnerResponses: Responses = {\n  \"true-false\": {\n    format: \"^true$|^false$\",\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  choice: {\n    format: scorm2004_regex.CMILongIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    unique: true,\n  },\n  \"fill-in\": {\n    format: scorm2004_regex.CMILangString250,\n    max: 10,\n    delimiter: \"[,]\",\n    unique: false,\n  },\n  \"long-fill-in\": {\n    format: scorm2004_regex.CMILangString4000,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  matching: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n  },\n  performance: {\n    format: \"^$|\" + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + \"|^$|\" + scorm2004_regex.CMIShortIdentifier,\n    max: 250,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n  },\n  sequencing: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    unique: false,\n  },\n  likert: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  numeric: {\n    format: scorm2004_regex.CMIDecimal,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  other: {\n    format: scorm2004_regex.CMIString4000,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n};\nexport const CorrectResponses: Responses = {\n  \"true-false\": {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: \"^true$|^false$\",\n    limit: 1,\n  },\n  choice: {\n    max: 36,\n    delimiter: \"[,]\",\n    unique: true,\n    duplicate: false,\n    format: scorm2004_regex.CMILongIdentifier,\n  },\n  \"fill-in\": {\n    max: 10,\n    delimiter: \"[,]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMILangString250cr,\n  },\n  \"long-fill-in\": {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: true,\n    format: scorm2004_regex.CMILangString4000,\n  },\n  matching: {\n    max: 36,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n  },\n  performance: {\n    max: 250,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    delimiter3: \"[:]\",\n    unique: false,\n    duplicate: false,\n    format: \"^$|\" + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + \"|^$|\" + scorm2004_regex.CMIShortIdentifier,\n  },\n  sequencing: {\n    max: 36,\n    delimiter: \"[,]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n  },\n  likert: {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    limit: 1,\n  },\n  numeric: {\n    max: 2,\n    delimiter: \"[:]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIDecimal,\n    limit: 1,\n  },\n  other: {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIString4000,\n    limit: 1,\n  },\n};\n\nexport type ResponseType = {\n  format: string;\n  max: number;\n  delimiter: string;\n  unique: boolean;\n  duplicate?: boolean;\n  format2?: string;\n  delimiter2?: string;\n  limit?: number;\n  delimiter3?: string;\n};\n\nexport type Responses = {\n  [key: string]: ResponseType;\n};\n","/**\n * Class representing SCORM 2004's `cmi.interactions` object\n */\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { CMIArray } from \"../common/array\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { CorrectResponses, LearnerResponses } from \"../../constants/response_constants\";\n\nexport class CMIInteractions extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives` Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.interactions\",\n      children: scorm2004_constants.interactions_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.interaction.n object\n */\n\nexport class CMIInteractionsObject extends BaseCMI {\n  private _id = \"\";\n  private _type = \"\";\n  private _timestamp = \"\";\n  private _weighting = \"\";\n  private _learner_response = \"\";\n  private _result = \"\";\n  private _latency = \"\";\n  private _description = \"\";\n\n  /**\n   * Constructor for cmi.interaction.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n\");\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.n.correct_responses\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  public objectives: CMIArray;\n  public correct_responses: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._id = \"\";\n    this._type = \"\";\n    this._timestamp = \"\";\n    this._weighting = \"\";\n    this._learner_response = \"\";\n    this._result = \"\";\n    this._latency = \"\";\n    this._description = \"\";\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.n.correct_responses\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _type\n   * @return {string}\n   */\n  get type(): string {\n    return this._type;\n  }\n\n  /**\n   * Setter for _type\n   * @param {string} type\n   */\n  set type(type: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".type\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (check2004ValidFormat(this._cmi_element + \".type\", type, scorm2004_regex.CMIType)) {\n        this._type = type;\n      }\n    }\n  }\n\n  /**\n   * Getter for _timestamp\n   * @return {string}\n   */\n  get timestamp(): string {\n    return this._timestamp;\n  }\n\n  /**\n   * Setter for _timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".timestamp\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".timestamp\", timestamp, scorm2004_regex.CMITime)\n      ) {\n        this._timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * Getter for _weighting\n   * @return {string}\n   */\n  get weighting(): string {\n    return this._weighting;\n  }\n\n  /**\n   * Setter for _weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".weighting\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".weighting\",\n          weighting,\n          scorm2004_regex.CMIDecimal,\n        )\n      ) {\n        this._weighting = weighting;\n      }\n    }\n  }\n\n  /**\n   * Getter for _learner_response\n   * @return {string}\n   */\n  get learner_response(): string {\n    return this._learner_response;\n  }\n\n  /**\n   * Setter for _learner_response. Does type validation to make sure response\n   * matches SCORM 2004's spec\n   * @param {string} learner_response\n   */\n  set learner_response(learner_response: string) {\n    if (this.initialized && (this._type === \"\" || this._id === \"\")) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_response\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      let nodes = [];\n      const response_type = LearnerResponses[this.type];\n\n      if (response_type) {\n        if (response_type?.delimiter) {\n          // Convert regex-style delimiter to actual character\n          const delimiter = response_type.delimiter === \"[,]\" ? \",\" : response_type.delimiter;\n          nodes = learner_response.split(delimiter);\n        } else {\n          nodes[0] = learner_response;\n        }\n\n        if (nodes.length > 0 && nodes.length <= response_type.max) {\n          const formatRegex = new RegExp(response_type.format);\n\n          for (let i = 0; i < nodes.length; i++) {\n            if (response_type?.delimiter2) {\n              // Convert regex-style delimiter to actual character\n              const delimiter2 =\n                response_type.delimiter2 === \"[.]\" ? \".\" : response_type.delimiter2;\n              const values = nodes[i].split(delimiter2);\n\n              if (values.length === 2) {\n                if (!values[0].match(formatRegex)) {\n                  throw new Scorm2004ValidationError(\n                    this._cmi_element + \".learner_response\",\n                    scorm2004_errors.TYPE_MISMATCH,\n                  );\n                } else {\n                  if (\n                    !response_type.format2 ||\n                    !values[1].match(new RegExp(response_type.format2))\n                  ) {\n                    throw new Scorm2004ValidationError(\n                      this._cmi_element + \".learner_response\",\n                      scorm2004_errors.TYPE_MISMATCH,\n                    );\n                  }\n                }\n              } else {\n                throw new Scorm2004ValidationError(\n                  this._cmi_element + \".learner_response\",\n                  scorm2004_errors.TYPE_MISMATCH,\n                );\n              }\n            } else {\n              if (!nodes[i].match(formatRegex)) {\n                throw new Scorm2004ValidationError(\n                  this._cmi_element + \".learner_response\",\n                  scorm2004_errors.TYPE_MISMATCH,\n                );\n              } else {\n                if (nodes[i] !== \"\" && response_type.unique) {\n                  for (let j = 0; j < i; j++) {\n                    if (nodes[i] === nodes[j]) {\n                      throw new Scorm2004ValidationError(\n                        this._cmi_element + \".learner_response\",\n                        scorm2004_errors.TYPE_MISMATCH,\n                      );\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          throw new Scorm2004ValidationError(\n            this._cmi_element + \".learner_response\",\n            scorm2004_errors.GENERAL_SET_FAILURE,\n          );\n        }\n\n        this._learner_response = learner_response;\n      } else {\n        throw new Scorm2004ValidationError(\n          this._cmi_element + \".learner_response\",\n          scorm2004_errors.TYPE_MISMATCH,\n        );\n      }\n    }\n  }\n\n  /**\n   * Getter for _result\n   * @return {string}\n   */\n  get result(): string {\n    return this._result;\n  }\n\n  /**\n   * Setter for _result\n   * @param {string} result\n   */\n  set result(result: string) {\n    if (check2004ValidFormat(this._cmi_element + \".result\", result, scorm2004_regex.CMIResult)) {\n      this._result = result;\n    }\n  }\n\n  /**\n   * Getter for _latency\n   * @return {string}\n   */\n  get latency(): string {\n    return this._latency;\n  }\n\n  /**\n   * Setter for _latency\n   * @param {string} latency\n   */\n  set latency(latency: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".latency\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".latency\", latency, scorm2004_regex.CMITimespan)\n      ) {\n        this._latency = latency;\n      }\n    }\n  }\n\n  /**\n   * Getter for _description\n   * @return {string}\n   */\n  get description(): string {\n    return this._description;\n  }\n\n  /**\n   * Setter for _description\n   * @param {string} description\n   */\n  set description(description: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".description\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".description\",\n          description,\n          scorm2004_regex.CMILangString250,\n          true,\n        )\n      ) {\n        this._description = description;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      type: string,\n   *      objectives: CMIArray,\n   *      timestamp: string,\n   *      correct_responses: CMIArray,\n   *      weighting: string,\n   *      learner_response: string,\n   *      result: string,\n   *      latency: string,\n   *      description: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    type: string;\n    objectives: CMIArray;\n    timestamp: string;\n    correct_responses: CMIArray;\n    weighting: string;\n    learner_response: string;\n    result: string;\n    latency: string;\n    description: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      type: this.type,\n      objectives: this.objectives,\n      timestamp: this.timestamp,\n      weighting: this.weighting,\n      learner_response: this.learner_response,\n      result: this.result,\n      latency: this.latency,\n      description: this.description,\n      correct_responses: this.correct_responses,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.objectives.n object\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  private _id = \"\";\n\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n.objectives.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._id = \"\";\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.correct_responses.n object\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  private _pattern = \"\";\n  private _parent?: CMIInteractionsObject;\n\n  /**\n   * Constructor for cmi.interactions.n.correct_responses.n\n   * @param {CMIInteractionsObject} parent - The parent interaction object\n   */\n  constructor(parent?: CMIInteractionsObject) {\n    super(\"cmi.interactions.n.correct_responses.n\");\n    this._parent = parent;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._pattern = \"\";\n  }\n\n  /**\n   * Getter for _pattern\n   * @return {string}\n   */\n  get pattern(): string {\n    return this._pattern;\n  }\n\n  /**\n   * Setter for _pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern: string) {\n    // First do basic format validation\n    if (\n      check2004ValidFormat(this._cmi_element + \".pattern\", pattern, scorm2004_regex.CMIFeedback)\n    ) {\n      // If we have a parent interaction, validate the pattern against the interaction type\n      if (this._parent && this._parent.type) {\n        const interactionType = this._parent.type;\n        const response = CorrectResponses[interactionType];\n\n        if (response) {\n          // Validate the pattern against the interaction type\n          let isValid = true;\n          let nodes = [];\n\n          if (response?.delimiter) {\n            nodes = String(pattern).split(response.delimiter);\n          } else {\n            nodes[0] = pattern;\n          }\n\n          if (nodes.length > 0 && nodes.length <= response.max) {\n            const formatRegex = new RegExp(response.format);\n\n            for (let i = 0; i < nodes.length && isValid; i++) {\n              if (response?.delimiter2) {\n                const values = nodes[i].split(response.delimiter2);\n                if (values.length === 2) {\n                  const matches = values[0].match(formatRegex);\n                  if (!matches) {\n                    isValid = false;\n                  } else if (!response.format2 || !values[1].match(new RegExp(response.format2))) {\n                    isValid = false;\n                  }\n                } else {\n                  isValid = false;\n                }\n              } else {\n                const matches = nodes[i].match(formatRegex);\n                if (\n                  (!matches && pattern !== \"\") ||\n                  (!matches && interactionType === \"true-false\")\n                ) {\n                  isValid = false;\n                }\n              }\n            }\n          } else if (nodes.length > response.max) {\n            isValid = false;\n          }\n\n          if (!isValid) {\n            throw new Scorm2004ValidationError(\n              this._cmi_element + \".pattern\",\n              scorm2004_errors.TYPE_MISMATCH,\n            );\n          }\n        }\n      }\n\n      this._pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON cmi.interactions.n.correct_responses.n object\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    pattern: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      pattern: this.pattern,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { ValidationError } from \"../exceptions\";\nimport { scorm12_constants } from \"../constants/api_constants\";\n\nconst scorm12_errors = scorm12_constants.error_descriptions;\n\n/**\n * SCORM 1.2 Validation Error\n */\nexport class Scorm12ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm12_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm12_errors[String(errorCode)].basicMessage,\n        scorm12_errors[String(errorCode)].detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm12_errors[\"101\"].basicMessage,\n        scorm12_errors[\"101\"].detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm12ValidationError.prototype);\n  }\n}\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm12_errors.TYPE_MISMATCH,\n    Scorm12ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidRange(\n  CMIElement: string,\n  value: any,\n  rangePattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  if (!allowEmptyString && value === \"\") {\n    throw new Scorm12ValidationError(CMIElement, scorm12_errors.VALUE_OUT_OF_RANGE);\n  }\n\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm12_errors.VALUE_OUT_OF_RANGE,\n    Scorm12ValidationError,\n  );\n}\n","import { BaseScormValidationError } from \"../exceptions\";\nimport { checkValidFormat, checkValidRange } from \"../cmi/common/validation\";\nimport { check12ValidFormat, check12ValidRange } from \"../cmi/scorm12/validation\";\nimport { scorm12_regex } from \"../constants/regex\";\nimport { scorm12_errors } from \"../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../exceptions/scorm12_exceptions\";\n\n/**\n * Service for validating CMI data model properties\n */\nexport class ValidationService {\n  /**\n   * Validates a score property (raw, min, max)\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @param {string} decimalRegex - The regex pattern for decimal validation\n   * @param {string | false} scoreRange - The range pattern for score validation, or false if no range validation is needed\n   * @param {number} invalidTypeCode - The error code for invalid type\n   * @param {number} invalidRangeCode - The error code for invalid range\n   * @param {typeof BaseScormValidationError} errorClass - The error class to use for validation errors\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScore(\n    CMIElement: string,\n    value: string,\n    decimalRegex: string,\n    scoreRange: string | false,\n    invalidTypeCode: number,\n    invalidRangeCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean {\n    return (\n      checkValidFormat(CMIElement, value, decimalRegex, invalidTypeCode, errorClass) &&\n      (!scoreRange || checkValidRange(CMIElement, value, scoreRange, invalidRangeCode, errorClass))\n    );\n    // This line should never be reached due to exceptions being thrown\n  }\n\n  /**\n   * Validates a SCORM 1.2 audio property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Audio(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.audio_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 language property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Language(CMIElement: string, value: string): boolean {\n    return check12ValidFormat(CMIElement, value, scorm12_regex.CMIString256);\n  }\n\n  /**\n   * Validates a SCORM 1.2 speed property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Speed(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.speed_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 text property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Text(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.text_range)\n    );\n  }\n\n  /**\n   * Validates if a property is read-only\n   *\n   * @param {string} CMIElement\n   * @param {boolean} initialized - Whether the object is initialized\n   * @throws {BaseScormValidationError} - Throws an error if the object is initialized\n   */\n  validateReadOnly(CMIElement: string, initialized: boolean): void {\n    if (initialized) {\n      throw new Scorm12ValidationError(CMIElement, scorm12_errors.READ_ONLY_ELEMENT);\n    }\n  }\n}\n\n// Export a singleton instance of the ValidationService\nexport const validationService = new ValidationService();\n","import { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"./base_cmi\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { validationService } from \"../../services/ValidationService\";\n\n/**\n * Base class for cmi *.score objects\n */\nexport class CMIScore extends BaseCMI {\n  private readonly __children: string;\n  private readonly __score_range: string | false;\n  private readonly __invalid_error_code: number;\n  private readonly __invalid_type_code: number;\n  private readonly __invalid_range_code: number;\n  private readonly __decimal_regex: string;\n  private readonly __error_class: typeof BaseScormValidationError;\n  protected _raw = \"\";\n  protected _min = \"\";\n  protected _max: string;\n\n  /**\n   * Constructor for *.score\n   * @param {\n   *     score_children: string,\n   *     score_range: string,\n   *     max: string,\n   *     invalidErrorCode: number,\n   *     invalidTypeCode: number,\n   *     invalidRangeCode: number,\n   *     decimalRegex: string,\n   *     errorClass: typeof BaseScormValidationError\n   * } params\n   */\n  constructor(params: {\n    CMIElement: string;\n    score_children?: string;\n    score_range?: string;\n    max?: string;\n    invalidErrorCode?: number;\n    invalidTypeCode?: number;\n    invalidRangeCode?: number;\n    decimalRegex?: string;\n    errorClass: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n\n    this.__children = params.score_children || scorm12_constants.score_children;\n    this.__score_range = !params.score_range ? false : scorm12_regex.score_range;\n    this._max = params.max || params.max === \"\" ? params.max : \"100\";\n    this.__invalid_error_code = params.invalidErrorCode || scorm12_errors.INVALID_SET_VALUE;\n    this.__invalid_type_code = params.invalidTypeCode || scorm12_errors.TYPE_MISMATCH;\n    this.__invalid_range_code = params.invalidRangeCode || scorm12_errors.VALUE_OUT_OF_RANGE;\n    this.__decimal_regex = params.decimalRegex || scorm12_regex.CMIDecimal;\n    this.__error_class = params.errorClass;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this.__error_class(this._cmi_element + \"._children\", this.__invalid_error_code);\n  }\n\n  /**\n   * Getter for _raw\n   * @return {string}\n   */\n  get raw(): string {\n    return this._raw;\n  }\n\n  /**\n   * Setter for _raw\n   * @param {string} raw\n   */\n  set raw(raw: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".raw\",\n        raw,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._raw = raw;\n    }\n  }\n\n  /**\n   * Getter for _min\n   * @return {string}\n   */\n  get min(): string {\n    return this._min;\n  }\n\n  /**\n   * Setter for _min\n   * @param {string} min\n   */\n  set min(min: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".min\",\n        min,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._min = min;\n    }\n  }\n\n  /**\n   * Getter for _max\n   * @return {string}\n   */\n  get max(): string {\n    return this._max;\n  }\n\n  /**\n   * Setter for _max\n   * @param {string} max\n   */\n  set max(max: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".max\",\n        max,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._max = max;\n    }\n  }\n\n  /**\n   * toJSON for *.score\n   * @return {\n   *    {\n   *      min: string,\n   *      max: string,\n   *      raw: string\n   *    }\n   *    }\n   */\n  toJSON(): {\n    min: string;\n    max: string;\n    raw: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","/**\n * Class for SCORM 2004's cmi *.score object\n */\nimport { CMIScore } from \"../common/score\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\n\nexport class Scorm2004CMIScore extends CMIScore {\n  private _scaled = \"\";\n\n  /**\n   * Constructor for cmi *.score\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.score\",\n      score_children: scorm2004_constants.score_children,\n      max: \"\",\n      invalidErrorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      invalidTypeCode: scorm2004_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm2004_errors.VALUE_OUT_OF_RANGE,\n      decimalRegex: scorm2004_regex.CMIDecimal,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n    this._scaled = \"\";\n    this._raw = \"\";\n    this._min = \"\";\n    this._max = \"\";\n  }\n\n  /**\n   * Getter for _scaled\n   * @return {string}\n   */\n  get scaled(): string {\n    return this._scaled;\n  }\n\n  /**\n   * Setter for _scaled\n   * @param {string} scaled\n   */\n  set scaled(scaled: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".scaled\", scaled, scorm2004_regex.CMIDecimal) &&\n      check2004ValidRange(this._cmi_element + \".scaled\", scaled, scorm2004_regex.scaled_range)\n    ) {\n      this._scaled = scaled;\n    }\n  }\n\n  /**\n   * toJSON for cmi *.score\n   *\n   * @return {\n   *    {\n   *      scaled: string,\n   *      raw: string,\n   *      min: string,\n   *      max: string\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    scaled: string;\n    raw: string;\n    min: string;\n    max: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      scaled: this.scaled,\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_lms object\n * @extends CMIArray\n */\nexport class CMICommentsFromLMS extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_lms Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.comments_from_lms\",\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner object\n */\n\nexport class CMICommentsFromLearner extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_learner Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.comments_from_learner\",\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner.n and cmi.comments_from_lms.n object\n */\n\nexport class CMICommentsObject extends BaseCMI {\n  private _comment = \"\";\n  private _location = \"\";\n  private _timestamp = \"\";\n  private readonly _readOnlyAfterInit: boolean;\n\n  /**\n   * Constructor for cmi.comments_from_learner.n and cmi.comments_from_lms.n\n   * @param {boolean} readOnlyAfterInit\n   */\n  constructor(readOnlyAfterInit: boolean = false) {\n    super(\"cmi.comments_from_learner.n\");\n    this._comment = \"\";\n    this._location = \"\";\n    this._timestamp = \"\";\n    this._readOnlyAfterInit = readOnlyAfterInit;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _comment\n   * @return {string}\n   */\n  get comment(): string {\n    return this._comment;\n  }\n\n  /**\n   * Setter for _comment\n   * @param {string} comment\n   */\n  set comment(comment: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".comment\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".comment\",\n          comment,\n          scorm2004_regex.CMILangString4000,\n          true,\n        )\n      ) {\n        this._comment = comment;\n      }\n    }\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".location\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".location\",\n          location,\n          scorm2004_regex.CMIString250,\n        )\n      ) {\n        this._location = location;\n      }\n    }\n  }\n\n  /**\n   * Getter for _timestamp\n   * @return {string}\n   */\n  get timestamp(): string {\n    return this._timestamp;\n  }\n\n  /**\n   * Setter for _timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".timestamp\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".timestamp\", timestamp, scorm2004_regex.CMITime)\n      ) {\n        this._timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.comments_from_learner.n object\n   * @return {\n   *    {\n   *      comment: string,\n   *      location: string,\n   *      timestamp: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    comment: string;\n    location: string;\n    timestamp: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      comment: this.comment,\n      location: this.location,\n      timestamp: this.timestamp,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { Scorm2004CMIScore } from \"./score\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\n\n/**\n * Class representing SCORM 2004's `cmi.objectives` object\n * @extends CMIArray\n */\nexport class CMIObjectives extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives` Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.objectives\",\n      children: scorm2004_constants.objectives_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n\n  /**\n   * Find an objective by its ID\n   */\n  public findObjectiveById(id: string): CMIObjectivesObject | undefined {\n    return this.childArray.find((objective) => objective.id === id);\n  }\n\n  /**\n   * Find objective by its index\n   */\n  public findObjectiveByIndex(index: number): CMIObjectivesObject {\n    return this.childArray[index];\n  }\n\n  /**\n   * Set an objective at the given index\n   */\n  public setObjectiveByIndex(index: number, objective: CMIObjectivesObject) {\n    this.childArray[index] = objective;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.objectives.n object\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  private _id = \"\";\n  private _success_status = \"unknown\";\n  private _completion_status = \"unknown\";\n  private _progress_measure = \"\";\n  private _description = \"\";\n\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super(\"cmi.objectives.n\");\n    this.score = new Scorm2004CMIScore();\n  }\n\n  override reset() {\n    this._initialized = false;\n  }\n\n  public score: Scorm2004CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this._success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".success_status\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".success_status\",\n          success_status,\n          scorm2004_regex.CMISStatus,\n        )\n      ) {\n        this._success_status = success_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this._completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".completion_status\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".completion_status\",\n          completion_status,\n          scorm2004_regex.CMICStatus,\n        )\n      ) {\n        this._completion_status = completion_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this._progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".progress_measure\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".progress_measure\",\n          progress_measure,\n          scorm2004_regex.CMIDecimal,\n        ) &&\n        check2004ValidRange(\n          this._cmi_element + \".progress_measure\",\n          progress_measure,\n          scorm2004_regex.progress_range,\n        )\n      ) {\n        this._progress_measure = progress_measure;\n      }\n    }\n  }\n\n  /**\n   * Getter for _description\n   * @return {string}\n   */\n  get description(): string {\n    return this._description;\n  }\n\n  /**\n   * Setter for _description\n   * @param {string} description\n   */\n  set description(description: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".description\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".description\",\n          description,\n          scorm2004_regex.CMILangString250,\n          true,\n        )\n      ) {\n        this._description = description;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      success_status: string,\n   *      completion_status: string,\n   *      progress_measure: string,\n   *      description: string,\n   *      score: Scorm2004CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    success_status: string;\n    completion_status: string;\n    progress_measure: string;\n    description: string;\n    score: Scorm2004CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      success_status: this.success_status,\n      completion_status: this.completion_status,\n      progress_measure: this.progress_measure,\n      description: this.description,\n      score: this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","/**\n * Class representing metadata properties for SCORM 2004's cmi object\n */\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing metadata properties for SCORM 2004's cmi object\n */\nexport class CMIMetadata extends BaseCMI {\n  private __version = \"1.0\";\n  private __children = scorm2004_constants.cmi_children;\n\n  /**\n   * Constructor for CMIMetadata\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   */\n  get _version(): string {\n    return this.__version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version: string) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._version\",\n      scorm2004_errors.READ_ONLY_ELEMENT,\n    );\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {number} _children\n   */\n  set _children(_children: number) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._children\",\n      scorm2004_errors.READ_ONLY_ELEMENT,\n    );\n  }\n\n  /**\n   * Reset the metadata properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // No need to reset __version and __children as they are constants\n  }\n}\n","/**\n * Class representing learner properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing learner properties for SCORM 2004's cmi object\n */\nexport class CMILearner extends BaseCMI {\n  private _learner_id = \"\";\n  private _learner_name = \"\";\n\n  /**\n   * Constructor for CMILearner\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _learner_id\n   * @return {string}\n   */\n  get learner_id(): string {\n    return this._learner_id;\n  }\n\n  /**\n   * Setter for _learner_id. Can only be called before initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_id\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._learner_id = learner_id;\n    }\n  }\n\n  /**\n   * Getter for _learner_name\n   * @return {string}\n   */\n  get learner_name(): string {\n    return this._learner_name;\n  }\n\n  /**\n   * Setter for _learner_name. Can only be called before initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_name\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._learner_name = learner_name;\n    }\n  }\n\n  /**\n   * Reset the learner properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset learner_id and learner_name as they are read-only after initialization\n  }\n}\n","/**\n * Class representing status properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\n\n/**\n * Class representing status properties for SCORM 2004's cmi object\n */\nexport class CMIStatus extends BaseCMI {\n  private _completion_status = \"unknown\";\n  private _success_status = \"unknown\";\n  private _progress_measure = \"\";\n\n  /**\n   * Constructor for CMIStatus\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this._completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".completion_status\",\n        completion_status,\n        scorm2004_regex.CMICStatus,\n      )\n    ) {\n      this._completion_status = completion_status;\n    }\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this._success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".success_status\",\n        success_status,\n        scorm2004_regex.CMISStatus,\n      )\n    ) {\n      this._success_status = success_status;\n    }\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this._progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".progress_measure\",\n        progress_measure,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".progress_measure\",\n        progress_measure,\n        scorm2004_regex.progress_range,\n      )\n    ) {\n      this._progress_measure = progress_measure;\n    }\n  }\n\n  /**\n   * Reset the status properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._completion_status = \"unknown\";\n    this._success_status = \"unknown\";\n    this._progress_measure = \"\";\n  }\n}\n","/**\n * Class representing session properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\nimport * as Util from \"../../utilities\";\n\n/**\n * Class representing session properties for SCORM 2004's cmi object\n */\nexport class CMISession extends BaseCMI {\n  private _entry = \"\";\n  private _exit = \"\";\n  private _session_time = \"PT0H0M0S\";\n  private _total_time = \"\";\n\n  /**\n   * Constructor for CMISession\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this._entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".entry\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._entry = entry;\n    }\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    if (!this.jsonString) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exit\",\n        scorm2004_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    if (check2004ValidFormat(this._cmi_element + \".exit\", exit, scorm2004_regex.CMIExit, true)) {\n      this._exit = exit;\n    }\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    if (!this.jsonString) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".session_time\",\n        scorm2004_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".session_time\",\n        session_time,\n        scorm2004_regex.CMITimespan,\n      )\n    ) {\n      this._session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this._total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".total_time\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._total_time = total_time;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime(): string {\n    let sessionTime = this._session_time;\n    const startTime = this.start_time;\n\n    if (typeof startTime !== \"undefined\" && startTime !== null) {\n      const seconds = new Date().getTime() - startTime;\n      sessionTime = Util.getSecondsAsISODuration(seconds / 1000);\n    }\n\n    return Util.addTwoDurations(this._total_time, sessionTime, scorm2004_regex.CMITimespan);\n  }\n\n  /**\n   * Reset the session properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._entry = \"\";\n    this._exit = \"\";\n    this._session_time = \"PT0H0M0S\";\n    // Don't reset total_time as it's read-only after initialization\n  }\n}\n","/**\n * Class representing content properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\n\n/**\n * Class representing content properties for SCORM 2004's cmi object\n */\nexport class CMIContent extends BaseCMI {\n  private _location = \"\";\n  private _launch_data = \"\";\n  private _suspend_data = \"\";\n\n  /**\n   * Constructor for CMIContent\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".location\", location, scorm2004_regex.CMIString1000)\n    ) {\n      this._location = location;\n    }\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this._launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".launch_data\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._launch_data = launch_data;\n    }\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this._suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".suspend_data\",\n        suspend_data,\n        scorm2004_regex.CMIString64000,\n        true,\n      )\n    ) {\n      this._suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Reset the content properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._location = \"\";\n    // Don't reset launch_data as it's read-only after initialization\n    this._suspend_data = \"\";\n  }\n}\n","/**\n * Class representing settings properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing settings properties for SCORM 2004's cmi object\n */\nexport class CMISettings extends BaseCMI {\n  private _credit = \"credit\";\n  private _mode = \"normal\";\n  private _time_limit_action = \"continue,no message\";\n  private _max_time_allowed = \"\";\n\n  /**\n   * Constructor for CMISettings\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this._credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".credit\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._credit = credit;\n    }\n  }\n\n  /**\n   * Getter for _mode\n   * @return {string}\n   */\n  get mode(): string {\n    return this._mode;\n  }\n\n  /**\n   * Setter for _mode. Can only be called before initialization.\n   * @param {string} mode\n   */\n  set mode(mode: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".mode\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._mode = mode;\n    }\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this._time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".time_limit_action\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._time_limit_action = time_limit_action;\n    }\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this._max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".max_time_allowed\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._max_time_allowed = max_time_allowed;\n    }\n  }\n\n  /**\n   * Reset the settings properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset these properties as they are read-only after initialization\n  }\n}\n","/**\n * Class representing threshold properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing threshold properties for SCORM 2004's cmi object\n */\nexport class CMIThresholds extends BaseCMI {\n  private _scaled_passing_score = \"\";\n  private _completion_threshold = \"\";\n\n  /**\n   * Constructor for CMIThresholds\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score(): string {\n    return this._scaled_passing_score;\n  }\n\n  /**\n   * Setter for _scaled_passing_score. Can only be called before initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".scaled_passing_score\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._scaled_passing_score = scaled_passing_score;\n    }\n  }\n\n  /**\n   * Getter for _completion_threshold\n   * @return {string}\n   */\n  get completion_threshold(): string {\n    return this._completion_threshold;\n  }\n\n  /**\n   * Setter for _completion_threshold. Can only be called before initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".completion_threshold\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._completion_threshold = completion_threshold;\n    }\n  }\n\n  /**\n   * Reset the threshold properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset these properties as they are read-only after initialization\n  }\n}\n","import { BaseRootCMI } from \"../common/base_cmi\";\nimport { CMILearnerPreference } from \"./learner_preference\";\nimport { CMIInteractions } from \"./interactions\";\nimport { Scorm2004CMIScore } from \"./score\";\nimport { CMICommentsFromLearner, CMICommentsFromLMS } from \"./comments\";\nimport { CMIObjectives } from \"./objectives\";\nimport { CMIMetadata } from \"./metadata\";\nimport { CMILearner } from \"./learner\";\nimport { CMIStatus } from \"./status\";\nimport { CMISession } from \"./session\";\nimport { CMIContent } from \"./content\";\nimport { CMISettings } from \"./settings\";\nimport { CMIThresholds } from \"./thresholds\";\n\n/**\n * Class representing cmi object for SCORM 2004\n */\nexport class CMI extends BaseRootCMI {\n  /**\n   * Constructor for the SCORM 2004 cmi object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean = false) {\n    super(\"cmi\");\n    this.metadata = new CMIMetadata();\n    this.learner = new CMILearner();\n    this.status = new CMIStatus();\n    this.session = new CMISession();\n    this.content = new CMIContent();\n    this.settings = new CMISettings();\n    this.thresholds = new CMIThresholds();\n    this.learner_preference = new CMILearnerPreference();\n    this.score = new Scorm2004CMIScore();\n    this.comments_from_learner = new CMICommentsFromLearner();\n    this.comments_from_lms = new CMICommentsFromLMS();\n    this.interactions = new CMIInteractions();\n    this.objectives = new CMIObjectives();\n    if (initialized) this.initialize();\n  }\n\n  // New component classes\n  private metadata: CMIMetadata;\n  private learner: CMILearner;\n  private status: CMIStatus;\n  private session: CMISession;\n  private content: CMIContent;\n  private settings: CMISettings;\n  private thresholds: CMIThresholds;\n\n  // Original complex objects\n  public learner_preference: CMILearnerPreference;\n  public score: Scorm2004CMIScore;\n  public comments_from_learner: CMICommentsFromLearner;\n  public comments_from_lms: CMICommentsFromLMS;\n  public interactions: CMIInteractions;\n  public objectives: CMIObjectives;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    // Initialize new component classes\n    this.metadata?.initialize();\n    this.learner?.initialize();\n    this.status?.initialize();\n    this.session?.initialize();\n    this.content?.initialize();\n    this.settings?.initialize();\n    this.thresholds?.initialize();\n\n    // Initialize original complex objects\n    this.learner_preference?.initialize();\n    this.score?.initialize();\n    this.comments_from_learner?.initialize();\n    this.comments_from_lms?.initialize();\n    this.interactions?.initialize();\n    this.objectives?.initialize();\n  }\n\n  /**\n   * Called when API is moving to another SCO\n   */\n  reset() {\n    this._initialized = false;\n\n    // Reset new component classes\n    this.metadata?.reset();\n    this.learner?.reset();\n    this.status?.reset();\n    this.session?.reset();\n    this.content?.reset();\n    this.settings?.reset();\n    this.thresholds?.reset();\n\n    // Reset original complex objects\n    this.objectives?.reset(false);\n    this.interactions?.reset(true);\n    this.score?.reset();\n    this.comments_from_learner?.reset();\n    this.comments_from_lms?.reset();\n    this.learner_preference?.reset();\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   * @private\n   */\n  get _version(): string {\n    return this.metadata._version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   * @private\n   */\n  set _version(_version: string) {\n    this.metadata._version = _version;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.metadata._children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {number} _children\n   * @private\n   */\n  set _children(_children: number) {\n    this.metadata._children = _children;\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this.status.completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    this.status.completion_status = completion_status;\n  }\n\n  /**\n   * Getter for _completion_threshold\n   * @return {string}\n   */\n  get completion_threshold(): string {\n    return this.thresholds.completion_threshold;\n  }\n\n  /**\n   * Setter for _completion_threshold. Can only be called before initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold: string) {\n    this.thresholds.completion_threshold = completion_threshold;\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this.settings.credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    this.settings.credit = credit;\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this.session.entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    this.session.entry = entry;\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    this.session.jsonString = this.jsonString;\n    return this.session.exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    this.session.exit = exit;\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this.content.launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    this.content.launch_data = launch_data;\n  }\n\n  /**\n   * Getter for _learner_id\n   * @return {string}\n   */\n  get learner_id(): string {\n    return this.learner.learner_id;\n  }\n\n  /**\n   * Setter for _learner_id. Can only be called before initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id: string) {\n    this.learner.learner_id = learner_id;\n  }\n\n  /**\n   * Getter for _learner_name\n   * @return {string}\n   */\n  get learner_name(): string {\n    return this.learner.learner_name;\n  }\n\n  /**\n   * Setter for _learner_name. Can only be called before initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name: string) {\n    this.learner.learner_name = learner_name;\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this.content.location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    this.content.location = location;\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this.settings.max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    this.settings.max_time_allowed = max_time_allowed;\n  }\n\n  /**\n   * Getter for _mode\n   * @return {string}\n   */\n  get mode(): string {\n    return this.settings.mode;\n  }\n\n  /**\n   * Setter for _mode. Can only be called before initialization.\n   * @param {string} mode\n   */\n  set mode(mode: string) {\n    this.settings.mode = mode;\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this.status.progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    this.status.progress_measure = progress_measure;\n  }\n\n  /**\n   * Getter for _scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score(): string {\n    return this.thresholds.scaled_passing_score;\n  }\n\n  /**\n   * Setter for _scaled_passing_score. Can only be called before initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score: string) {\n    this.thresholds.scaled_passing_score = scaled_passing_score;\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    this.session.jsonString = this.jsonString;\n    return this.session.session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    this.session.session_time = session_time;\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this.status.success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    this.status.success_status = success_status;\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this.content.suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    this.content.suspend_data = suspend_data;\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this.settings.time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    this.settings.time_limit_action = time_limit_action;\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this.session.total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    this.session.total_time = total_time;\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime(): string {\n    return this.session.getCurrentTotalTime();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      comments_from_learner: CMICommentsFromLearner,\n   *      comments_from_lms: CMICommentsFromLMS,\n   *      completion_status: string,\n   *      completion_threshold: string,\n   *      credit: string,\n   *      entry: string,\n   *      exit: string,\n   *      interactions: CMIInteractions,\n   *      launch_data: string,\n   *      learner_id: string,\n   *      learner_name: string,\n   *      learner_preference: CMILearnerPreference,\n   *      location: string,\n   *      max_time_allowed: string,\n   *      mode: string,\n   *      objectives: CMIObjectives,\n   *      progress_measure: string,\n   *      scaled_passing_score: string,\n   *      score: Scorm2004CMIScore,\n   *      session_time: string,\n   *      success_status: string,\n   *      suspend_data: string,\n   *      time_limit_action: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    comments_from_learner: CMICommentsFromLearner;\n    comments_from_lms: CMICommentsFromLMS;\n    completion_status: string;\n    completion_threshold: string;\n    credit: string;\n    entry: string;\n    exit: string;\n    interactions: CMIInteractions;\n    launch_data: string;\n    learner_id: string;\n    learner_name: string;\n    learner_preference: CMILearnerPreference;\n    location: string;\n    max_time_allowed: string;\n    mode: string;\n    objectives: CMIObjectives;\n    progress_measure: string;\n    scaled_passing_score: string;\n    score: Scorm2004CMIScore;\n    session_time: string;\n    success_status: string;\n    suspend_data: string;\n    time_limit_action: string;\n  } {\n    this.jsonString = true;\n\n    // Set jsonString flag on component classes that need it\n    this.session.jsonString = true;\n\n    const result = {\n      comments_from_learner: this.comments_from_learner,\n      comments_from_lms: this.comments_from_lms,\n      completion_status: this.completion_status,\n      completion_threshold: this.completion_threshold,\n      credit: this.credit,\n      entry: this.entry,\n      exit: this.exit,\n      interactions: this.interactions,\n      launch_data: this.launch_data,\n      learner_id: this.learner_id,\n      learner_name: this.learner_name,\n      learner_preference: this.learner_preference,\n      location: this.location,\n      max_time_allowed: this.max_time_allowed,\n      mode: this.mode,\n      objectives: this.objectives,\n      progress_measure: this.progress_measure,\n      scaled_passing_score: this.scaled_passing_score,\n      score: this.score,\n      session_time: this.session_time,\n      success_status: this.success_status,\n      suspend_data: this.suspend_data,\n      time_limit_action: this.time_limit_action,\n    };\n\n    // Clean up jsonString flags\n    delete this.jsonString;\n    delete this.session.jsonString;\n\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { NAVBoolean } from \"../../constants/enums\";\nimport { CMIArray } from \"../common/array\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Sequencing } from \"./sequencing/sequencing\";\n\n/**\n * Class representing SCORM 2004's adl object\n */\nexport class ADL extends BaseCMI {\n  /**\n   * Constructor for adl\n   */\n  constructor() {\n    super(\"adl\");\n    this.nav = new ADLNav();\n    this.data = new ADLData();\n  }\n\n  public nav: ADLNav;\n  public data = new ADLData();\n  private _sequencing: Sequencing | null = null;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.nav?.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this.nav?.reset();\n  }\n\n  /**\n   * Getter for sequencing\n   * @return {Sequencing | null}\n   */\n  get sequencing(): Sequencing | null {\n    return this._sequencing;\n  }\n\n  /**\n   * Setter for sequencing\n   * @param {Sequencing | null} sequencing\n   */\n  set sequencing(sequencing: Sequencing | null) {\n    this._sequencing = sequencing;\n    if (sequencing) {\n      sequencing.adlNav = this.nav;\n      this.nav.sequencing = sequencing;\n    }\n  }\n\n  /**\n   * toJSON for adl\n   * @return {\n   *    {\n   *      nav: ADLNav,\n   *      data: ADLData\n   *    }\n   *  }\n   */\n  toJSON(): {\n    nav: ADLNav;\n    data: ADLData;\n  } {\n    this.jsonString = true;\n    const result = {\n      nav: this.nav,\n      data: this.data,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's `adl.nav` object\n */\n\nexport class ADLNav extends BaseCMI {\n  private _request = \"_none_\";\n  private _sequencing: Sequencing | null = null;\n\n  /**\n   * Constructor for `adl.nav`\n   */\n  constructor() {\n    super(\"adl.nav\");\n    this.request_valid = new ADLNavRequestValid();\n  }\n\n  public request_valid: ADLNavRequestValid;\n\n  /**\n   * Getter for sequencing\n   * @return {Sequencing | null}\n   */\n  get sequencing(): Sequencing | null {\n    return this._sequencing;\n  }\n\n  /**\n   * Setter for sequencing\n   * @param {Sequencing | null} sequencing\n   */\n  set sequencing(sequencing: Sequencing | null) {\n    this._sequencing = sequencing;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.request_valid?.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._request = \"_none_\";\n    this._sequencing = null;\n    this.request_valid?.reset();\n  }\n\n  /**\n   * Getter for _request\n   * @return {string}\n   */\n  get request(): string {\n    return this._request;\n  }\n\n  /**\n   * Setter for _request\n   * @param {string} request\n   */\n  set request(request: string) {\n    if (check2004ValidFormat(this._cmi_element + \".request\", request, scorm2004_regex.NAVEvent)) {\n      // Only process if the request is different from the current request\n      if (this._request !== request) {\n        this._request = request;\n\n        // Process the navigation request using the sequencing implementation\n        if (this._sequencing) {\n          this._sequencing.processNavigationRequest(request);\n        }\n      }\n    }\n  }\n\n  /**\n   * toJSON for adl.nav\n   *\n   * @return {\n   *    {\n   *      request: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    request: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      request: this.request,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's `adl.data` object\n */\nexport class ADLData extends CMIArray {\n  constructor() {\n    super({\n      CMIElement: \"adl.data\",\n      children: scorm2004_constants.adl_data_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's adl.data.n object\n */\nexport class ADLDataObject extends BaseCMI {\n  private _id = \"\";\n  private _store = \"\";\n\n  constructor() {\n    super(\"adl.data.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _store\n   * @return {string}\n   */\n  get store(): string {\n    return this._store;\n  }\n\n  /**\n   * Setter for _store\n   * @param {string} store\n   */\n  set store(store: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".store\", store, scorm2004_regex.CMILangString4000)\n    ) {\n      this._store = store;\n    }\n  }\n\n  /**\n   * toJSON for adl.data.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      store: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    store: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this._id,\n      store: this._store,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl.nav.request_valid object\n */\n\nexport class ADLNavRequestValid extends BaseCMI {\n  private _continue = \"unknown\";\n  private _previous = \"unknown\";\n  private _choice: {\n    [key: string]: NAVBoolean;\n  } = {};\n  private _jump: {\n    [key: string]: NAVBoolean;\n  } = {};\n\n  /**\n   * Constructor for adl.nav.request_valid\n   */\n  constructor() {\n    super(\"adl.nav.request_valid\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._continue = \"unknown\";\n    this._previous = \"unknown\";\n  }\n\n  /**\n   * Getter for _continue\n   * @return {string}\n   */\n  get continue(): string {\n    return this._continue;\n  }\n\n  /**\n   * Setter for _continue. Just throws an error.\n   * @param {string} _continue\n   */\n  set continue(_continue: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".continue\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".continue\", _continue, scorm2004_regex.NAVBoolean)\n    ) {\n      this._continue = _continue;\n    }\n  }\n\n  /**\n   * Getter for _previous\n   * @return {string}\n   */\n  get previous(): string {\n    return this._previous;\n  }\n\n  /**\n   * Setter for _previous. Just throws an error.\n   * @param {string} _previous\n   */\n  set previous(_previous: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".previous\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".previous\", _previous, scorm2004_regex.NAVBoolean)\n    ) {\n      this._previous = _previous;\n    }\n  }\n\n  /**\n   * Getter for _choice\n   * @return {{ [key: string]: NAVBoolean }}\n   */\n  get choice(): { [key: string]: NAVBoolean } {\n    return this._choice;\n  }\n\n  /**\n   * Setter for _choice\n   * @param {{ [key: string]: string }} choice\n   */\n  set choice(choice: { [key: string]: string }) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".choice\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (typeof choice !== \"object\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".choice\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    for (const key in choice) {\n      if ({}.hasOwnProperty.call(choice, key)) {\n        if (\n          check2004ValidFormat(\n            this._cmi_element + \".choice.\" + key,\n            choice[key],\n            scorm2004_regex.NAVBoolean,\n          ) &&\n          check2004ValidFormat(this._cmi_element + \".choice.\" + key, key, scorm2004_regex.NAVTarget)\n        ) {\n          // Convert string value to NAVBoolean enum value\n          const value = choice[key];\n          if (value === \"true\") {\n            this._choice[key] = NAVBoolean.TRUE;\n          } else if (value === \"false\") {\n            this._choice[key] = NAVBoolean.FALSE;\n          } else if (value === \"unknown\") {\n            this._choice[key] = NAVBoolean.UNKNOWN;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Getter for _jump\n   * @return {{ [key: string]: NAVBoolean }}\n   */\n  get jump(): { [key: string]: NAVBoolean } {\n    return this._jump;\n  }\n\n  /**\n   * Setter for _jump\n   * @param {{ [key: string]: string }} jump\n   */\n  set jump(jump: { [key: string]: string }) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".jump\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (typeof jump !== \"object\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".jump\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    for (const key in jump) {\n      if ({}.hasOwnProperty.call(jump, key)) {\n        if (\n          check2004ValidFormat(\n            this._cmi_element + \".jump.\" + key,\n            jump[key],\n            scorm2004_regex.NAVBoolean,\n          ) &&\n          check2004ValidFormat(this._cmi_element + \".jump.\" + key, key, scorm2004_regex.NAVTarget)\n        ) {\n          // Convert string value to NAVBoolean enum value\n          const value = jump[key];\n          if (value === \"true\") {\n            this._jump[key] = NAVBoolean.TRUE;\n          } else if (value === \"false\") {\n            this._jump[key] = NAVBoolean.FALSE;\n          } else if (value === \"unknown\") {\n            this._jump[key] = NAVBoolean.UNKNOWN;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * toJSON for adl.nav.request_valid\n   *\n   * @return {\n   *    {\n   *      previous: string,\n   *      continue: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    previous: string;\n    continue: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      previous: this._previous,\n      continue: this._continue,\n      choice: this._choice,\n      jump: this._jump,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Enum for rule condition operators\n */\nexport enum RuleConditionOperator {\n  NOT = \"not\",\n  AND = \"and\",\n  OR = \"or\",\n}\n\n/**\n * Enum for rule condition types\n */\nexport enum RuleConditionType {\n  SATISFIED = \"satisfied\",\n  OBJECTIVE_STATUS_KNOWN = \"objectiveStatusKnown\",\n  OBJECTIVE_MEASURE_KNOWN = \"objectiveMeasureKnown\",\n  OBJECTIVE_MEASURE_GREATER_THAN = \"objectiveMeasureGreaterThan\",\n  OBJECTIVE_MEASURE_LESS_THAN = \"objectiveMeasureLessThan\",\n  COMPLETED = \"completed\",\n  PROGRESS_KNOWN = \"progressKnown\",\n  ATTEMPTED = \"attempted\",\n  ATTEMPT_LIMIT_EXCEEDED = \"attemptLimitExceeded\",\n  TIME_LIMIT_EXCEEDED = \"timeLimitExceeded\",\n  OUTSIDE_AVAILABLE_TIME_RANGE = \"outsideAvailableTimeRange\",\n  ALWAYS = \"always\",\n}\n\n/**\n * Enum for rule action types\n */\nexport enum RuleActionType {\n  SKIP = \"skip\",\n  DISABLED = \"disabled\",\n  HIDE_FROM_CHOICE = \"hideFromChoice\",\n  STOP_FORWARD_TRAVERSAL = \"stopForwardTraversal\",\n  EXIT_PARENT = \"exitParent\",\n  EXIT_ALL = \"exitAll\",\n  RETRY = \"retry\",\n  RETRY_ALL = \"retryAll\",\n  CONTINUE = \"continue\",\n  PREVIOUS = \"previous\",\n  EXIT = \"exit\",\n}\n\n/**\n * Class representing a sequencing rule condition\n */\nexport class RuleCondition extends BaseCMI {\n  private _condition: RuleConditionType = RuleConditionType.ALWAYS;\n  private _operator: RuleConditionOperator | null = null;\n  private _parameters: Map<string, any> = new Map();\n\n  /**\n   * Constructor for RuleCondition\n   * @param {RuleConditionType} condition - The condition type\n   * @param {RuleConditionOperator | null} operator - The operator (null for no operator)\n   * @param {Map<string, any>} parameters - Additional parameters for the condition\n   */\n  constructor(\n    condition: RuleConditionType = RuleConditionType.ALWAYS,\n    operator: RuleConditionOperator | null = null,\n    parameters: Map<string, any> = new Map(),\n  ) {\n    super(\"ruleCondition\");\n    this._condition = condition;\n    this._operator = operator;\n    this._parameters = parameters;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for condition\n   * @return {RuleConditionType}\n   */\n  get condition(): RuleConditionType {\n    return this._condition;\n  }\n\n  /**\n   * Setter for condition\n   * @param {RuleConditionType} condition\n   */\n  set condition(condition: RuleConditionType) {\n    this._condition = condition;\n  }\n\n  /**\n   * Getter for operator\n   * @return {RuleConditionOperator | null}\n   */\n  get operator(): RuleConditionOperator | null {\n    return this._operator;\n  }\n\n  /**\n   * Setter for operator\n   * @param {RuleConditionOperator | null} operator\n   */\n  set operator(operator: RuleConditionOperator | null) {\n    this._operator = operator;\n  }\n\n  /**\n   * Getter for parameters\n   * @return {Map<string, any>}\n   */\n  get parameters(): Map<string, any> {\n    return this._parameters;\n  }\n\n  /**\n   * Setter for parameters\n   * @param {Map<string, any>} parameters\n   */\n  set parameters(parameters: Map<string, any>) {\n    this._parameters = parameters;\n  }\n\n  /**\n   * Evaluate the condition for an activity\n   * @param {Activity} activity - The activity to evaluate the condition for\n   * @return {boolean} - True if the condition is met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    switch (this._condition) {\n      case RuleConditionType.SATISFIED:\n        return activity.successStatus === SuccessStatus.PASSED;\n      case RuleConditionType.OBJECTIVE_STATUS_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RuleConditionType.OBJECTIVE_MEASURE_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RuleConditionType.OBJECTIVE_MEASURE_GREATER_THAN: {\n        const greaterThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure > greaterThanValue\n        );\n      }\n      case RuleConditionType.OBJECTIVE_MEASURE_LESS_THAN: {\n        const lessThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure < lessThanValue\n        );\n      }\n      case RuleConditionType.COMPLETED:\n        return activity.isCompleted;\n      case RuleConditionType.PROGRESS_KNOWN:\n        return activity.completionStatus !== \"unknown\";\n      case RuleConditionType.ATTEMPTED:\n        return activity.attemptCount > 0;\n      case RuleConditionType.ATTEMPT_LIMIT_EXCEEDED: {\n        const attemptLimit = this._parameters.get(\"attemptLimit\") || 0;\n        return attemptLimit > 0 && activity.attemptCount >= attemptLimit;\n      }\n      case RuleConditionType.TIME_LIMIT_EXCEEDED:\n        // Time limit exceeded would require additional tracking\n        return false;\n      case RuleConditionType.OUTSIDE_AVAILABLE_TIME_RANGE:\n        // Outside available time range would require additional tracking\n        return false;\n      case RuleConditionType.ALWAYS:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RuleCondition\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      condition: this._condition,\n      operator: this._operator,\n      parameters: Object.fromEntries(this._parameters),\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing a sequencing rule\n */\nexport class SequencingRule extends BaseCMI {\n  private _conditions: RuleCondition[] = [];\n  private _action: RuleActionType = RuleActionType.SKIP;\n  private _conditionCombination: RuleConditionOperator = RuleConditionOperator.AND;\n\n  /**\n   * Constructor for SequencingRule\n   * @param {RuleActionType} action - The action to take when the rule conditions are met\n   * @param {RuleConditionOperator} conditionCombination - How to combine multiple conditions\n   */\n  constructor(\n    action: RuleActionType = RuleActionType.SKIP,\n    conditionCombination: RuleConditionOperator = RuleConditionOperator.AND,\n  ) {\n    super(\"sequencingRule\");\n    this._action = action;\n    this._conditionCombination = conditionCombination;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._conditions = [];\n  }\n\n  /**\n   * Getter for conditions\n   * @return {RuleCondition[]}\n   */\n  get conditions(): RuleCondition[] {\n    return this._conditions;\n  }\n\n  /**\n   * Add a condition to the rule\n   * @param {RuleCondition} condition - The condition to add\n   */\n  addCondition(condition: RuleCondition): void {\n    if (!(condition instanceof RuleCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._conditions.push(condition);\n  }\n\n  /**\n   * Remove a condition from the rule\n   * @param {RuleCondition} condition - The condition to remove\n   * @return {boolean} - True if the condition was removed, false otherwise\n   */\n  removeCondition(condition: RuleCondition): boolean {\n    const index = this._conditions.indexOf(condition);\n    if (index !== -1) {\n      this._conditions.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for action\n   * @return {RuleActionType}\n   */\n  get action(): RuleActionType {\n    return this._action;\n  }\n\n  /**\n   * Setter for action\n   * @param {RuleActionType} action\n   */\n  set action(action: RuleActionType) {\n    this._action = action;\n  }\n\n  /**\n   * Getter for conditionCombination\n   * @return {RuleConditionOperator}\n   */\n  get conditionCombination(): RuleConditionOperator {\n    return this._conditionCombination;\n  }\n\n  /**\n   * Setter for conditionCombination\n   * @param {RuleConditionOperator} conditionCombination\n   */\n  set conditionCombination(conditionCombination: RuleConditionOperator) {\n    this._conditionCombination = conditionCombination;\n  }\n\n  /**\n   * Evaluate the rule for an activity\n   * @param {Activity} activity - The activity to evaluate the rule for\n   * @return {boolean} - True if the rule conditions are met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    if (this._conditions.length === 0) {\n      return true;\n    }\n\n    if (this._conditionCombination === RuleConditionOperator.AND) {\n      return this._conditions.every((condition) => condition.evaluate(activity));\n    } else if (this._conditionCombination === RuleConditionOperator.OR) {\n      return this._conditions.some((condition) => condition.evaluate(activity));\n    }\n\n    return false;\n  }\n\n  /**\n   * toJSON for SequencingRule\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      conditions: this._conditions,\n      action: this._action,\n      conditionCombination: this._conditionCombination,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing a collection of sequencing rules\n */\nexport class SequencingRules extends BaseCMI {\n  private _preConditionRules: SequencingRule[] = [];\n  private _exitConditionRules: SequencingRule[] = [];\n  private _postConditionRules: SequencingRule[] = [];\n\n  /**\n   * Constructor for SequencingRules\n   */\n  constructor() {\n    super(\"sequencingRules\");\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._preConditionRules = [];\n    this._exitConditionRules = [];\n    this._postConditionRules = [];\n  }\n\n  /**\n   * Getter for preConditionRules\n   * @return {SequencingRule[]}\n   */\n  get preConditionRules(): SequencingRule[] {\n    return this._preConditionRules;\n  }\n\n  /**\n   * Add a pre-condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addPreConditionRule(rule: SequencingRule): void {\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".preConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._preConditionRules.push(rule);\n  }\n\n  /**\n   * Getter for exitConditionRules\n   * @return {SequencingRule[]}\n   */\n  get exitConditionRules(): SequencingRule[] {\n    return this._exitConditionRules;\n  }\n\n  /**\n   * Add an exit condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addExitConditionRule(rule: SequencingRule): void {\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exitConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._exitConditionRules.push(rule);\n  }\n\n  /**\n   * Getter for postConditionRules\n   * @return {SequencingRule[]}\n   */\n  get postConditionRules(): SequencingRule[] {\n    return this._postConditionRules;\n  }\n\n  /**\n   * Add a post-condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addPostConditionRule(rule: SequencingRule): void {\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".postConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._postConditionRules.push(rule);\n  }\n\n  /**\n   * Evaluate pre-condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluatePreConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._preConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Evaluate exit condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluateExitConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._exitConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Evaluate post-condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluatePostConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._postConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * toJSON for SequencingRules\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      preConditionRules: this._preConditionRules,\n      exitConditionRules: this._exitConditionRules,\n      postConditionRules: this._postConditionRules,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { CompletionStatus, SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Enum for rollup action types\n */\nexport enum RollupActionType {\n  SATISFIED = \"satisfied\",\n  NOT_SATISFIED = \"notSatisfied\",\n  COMPLETED = \"completed\",\n  INCOMPLETE = \"incomplete\",\n}\n\n/**\n * Enum for rollup condition types\n */\nexport enum RollupConditionType {\n  SATISFIED = \"satisfied\",\n  OBJECTIVE_STATUS_KNOWN = \"objectiveStatusKnown\",\n  OBJECTIVE_MEASURE_KNOWN = \"objectiveMeasureKnown\",\n  OBJECTIVE_MEASURE_GREATER_THAN = \"objectiveMeasureGreaterThan\",\n  OBJECTIVE_MEASURE_LESS_THAN = \"objectiveMeasureLessThan\",\n  COMPLETED = \"completed\",\n  PROGRESS_KNOWN = \"progressKnown\",\n  ATTEMPTED = \"attempted\",\n  NOT_ATTEMPTED = \"notAttempted\",\n  ALWAYS = \"always\",\n}\n\n/**\n * Enum for rollup consideration types\n */\nexport enum RollupConsiderationType {\n  ALL = \"all\",\n  ANY = \"any\",\n  NONE = \"none\",\n  AT_LEAST_COUNT = \"atLeastCount\",\n  AT_LEAST_PERCENT = \"atLeastPercent\",\n}\n\n/**\n * Class representing a rollup condition\n */\nexport class RollupCondition extends BaseCMI {\n  private _condition: RollupConditionType = RollupConditionType.ALWAYS;\n  private _parameters: Map<string, any> = new Map();\n\n  /**\n   * Constructor for RollupCondition\n   * @param {RollupConditionType} condition - The condition type\n   * @param {Map<string, any>} parameters - Additional parameters for the condition\n   */\n  constructor(\n    condition: RollupConditionType = RollupConditionType.ALWAYS,\n    parameters: Map<string, any> = new Map(),\n  ) {\n    super(\"rollupCondition\");\n    this._condition = condition;\n    this._parameters = parameters;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for condition\n   * @return {RollupConditionType}\n   */\n  get condition(): RollupConditionType {\n    return this._condition;\n  }\n\n  /**\n   * Setter for condition\n   * @param {RollupConditionType} condition\n   */\n  set condition(condition: RollupConditionType) {\n    this._condition = condition;\n  }\n\n  /**\n   * Getter for parameters\n   * @return {Map<string, any>}\n   */\n  get parameters(): Map<string, any> {\n    return this._parameters;\n  }\n\n  /**\n   * Setter for parameters\n   * @param {Map<string, any>} parameters\n   */\n  set parameters(parameters: Map<string, any>) {\n    this._parameters = parameters;\n  }\n\n  /**\n   * Evaluate the condition for an activity\n   * @param {Activity} activity - The activity to evaluate the condition for\n   * @return {boolean} - True if the condition is met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    switch (this._condition) {\n      case RollupConditionType.SATISFIED:\n        return activity.successStatus === SuccessStatus.PASSED;\n      case RollupConditionType.OBJECTIVE_STATUS_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RollupConditionType.OBJECTIVE_MEASURE_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RollupConditionType.OBJECTIVE_MEASURE_GREATER_THAN: {\n        const greaterThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure > greaterThanValue\n        );\n      }\n      case RollupConditionType.OBJECTIVE_MEASURE_LESS_THAN: {\n        const lessThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure < lessThanValue\n        );\n      }\n      case RollupConditionType.COMPLETED:\n        return activity.isCompleted;\n      case RollupConditionType.PROGRESS_KNOWN:\n        return activity.completionStatus !== CompletionStatus.UNKNOWN;\n      case RollupConditionType.ATTEMPTED:\n        return activity.attemptCount > 0;\n      case RollupConditionType.NOT_ATTEMPTED:\n        return activity.attemptCount === 0;\n      case RollupConditionType.ALWAYS:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RollupCondition\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      condition: this._condition,\n      parameters: Object.fromEntries(this._parameters),\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing a rollup rule\n */\nexport class RollupRule extends BaseCMI {\n  private _conditions: RollupCondition[] = [];\n  private _action: RollupActionType = RollupActionType.SATISFIED;\n  private _consideration: RollupConsiderationType = RollupConsiderationType.ALL;\n  private _minimumCount: number = 0;\n  private _minimumPercent: number = 0;\n\n  /**\n   * Constructor for RollupRule\n   * @param {RollupActionType} action - The action to take when the rule conditions are met\n   * @param {RollupConsiderationType} consideration - How to consider child activities\n   * @param {number} minimumCount - The minimum count for AT_LEAST_COUNT consideration\n   * @param {number} minimumPercent - The minimum percent for AT_LEAST_PERCENT consideration\n   */\n  constructor(\n    action: RollupActionType = RollupActionType.SATISFIED,\n    consideration: RollupConsiderationType = RollupConsiderationType.ALL,\n    minimumCount: number = 0,\n    minimumPercent: number = 0,\n  ) {\n    super(\"rollupRule\");\n    this._action = action;\n    this._consideration = consideration;\n    this._minimumCount = minimumCount;\n    this._minimumPercent = minimumPercent;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._conditions = [];\n  }\n\n  /**\n   * Getter for conditions\n   * @return {RollupCondition[]}\n   */\n  get conditions(): RollupCondition[] {\n    return this._conditions;\n  }\n\n  /**\n   * Add a condition to the rule\n   * @param {RollupCondition} condition - The condition to add\n   */\n  addCondition(condition: RollupCondition): void {\n    if (!(condition instanceof RollupCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._conditions.push(condition);\n  }\n\n  /**\n   * Remove a condition from the rule\n   * @param {RollupCondition} condition - The condition to remove\n   * @return {boolean} - True if the condition was removed, false otherwise\n   */\n  removeCondition(condition: RollupCondition): boolean {\n    const index = this._conditions.indexOf(condition);\n    if (index !== -1) {\n      this._conditions.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for action\n   * @return {RollupActionType}\n   */\n  get action(): RollupActionType {\n    return this._action;\n  }\n\n  /**\n   * Setter for action\n   * @param {RollupActionType} action\n   */\n  set action(action: RollupActionType) {\n    this._action = action;\n  }\n\n  /**\n   * Getter for consideration\n   * @return {RollupConsiderationType}\n   */\n  get consideration(): RollupConsiderationType {\n    return this._consideration;\n  }\n\n  /**\n   * Setter for consideration\n   * @param {RollupConsiderationType} consideration\n   */\n  set consideration(consideration: RollupConsiderationType) {\n    this._consideration = consideration;\n  }\n\n  /**\n   * Getter for minimumCount\n   * @return {number}\n   */\n  get minimumCount(): number {\n    return this._minimumCount;\n  }\n\n  /**\n   * Setter for minimumCount\n   * @param {number} minimumCount\n   */\n  set minimumCount(minimumCount: number) {\n    if (minimumCount >= 0) {\n      this._minimumCount = minimumCount;\n    }\n  }\n\n  /**\n   * Getter for minimumPercent\n   * @return {number}\n   */\n  get minimumPercent(): number {\n    return this._minimumPercent;\n  }\n\n  /**\n   * Setter for minimumPercent\n   * @param {number} minimumPercent\n   */\n  set minimumPercent(minimumPercent: number) {\n    if (minimumPercent >= 0 && minimumPercent <= 100) {\n      this._minimumPercent = minimumPercent;\n    }\n  }\n\n  /**\n   * Evaluate the rule for a set of child activities\n   * @param {Activity[]} children - The child activities to evaluate the rule for\n   * @return {boolean} - True if the rule conditions are met, false otherwise\n   */\n  evaluate(children: Activity[]): boolean {\n    if (children.length === 0) {\n      return false;\n    }\n\n    // Filter children that meet all conditions\n    const matchingChildren = children.filter((child) => {\n      return this._conditions.every((condition) => condition.evaluate(child));\n    });\n\n    // Apply consideration\n    switch (this._consideration) {\n      case RollupConsiderationType.ALL:\n        return matchingChildren.length === children.length;\n      case RollupConsiderationType.ANY:\n        return matchingChildren.length > 0;\n      case RollupConsiderationType.NONE:\n        return matchingChildren.length === 0;\n      case RollupConsiderationType.AT_LEAST_COUNT:\n        return matchingChildren.length >= this._minimumCount;\n      case RollupConsiderationType.AT_LEAST_PERCENT: {\n        const percent = (matchingChildren.length / children.length) * 100;\n        return percent >= this._minimumPercent;\n      }\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RollupRule\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      conditions: this._conditions,\n      action: this._action,\n      consideration: this._consideration,\n      minimumCount: this._minimumCount,\n      minimumPercent: this._minimumPercent,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing a collection of rollup rules\n */\nexport class RollupRules extends BaseCMI {\n  private _rules: RollupRule[] = [];\n\n  /**\n   * Constructor for RollupRules\n   */\n  constructor() {\n    super(\"rollupRules\");\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._rules = [];\n  }\n\n  /**\n   * Getter for rules\n   * @return {RollupRule[]}\n   */\n  get rules(): RollupRule[] {\n    return this._rules;\n  }\n\n  /**\n   * Add a rule\n   * @param {RollupRule} rule - The rule to add\n   */\n  addRule(rule: RollupRule): void {\n    if (!(rule instanceof RollupRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".rules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._rules.push(rule);\n  }\n\n  /**\n   * Remove a rule\n   * @param {RollupRule} rule - The rule to remove\n   * @return {boolean} - True if the rule was removed, false otherwise\n   */\n  removeRule(rule: RollupRule): boolean {\n    const index = this._rules.indexOf(rule);\n    if (index !== -1) {\n      this._rules.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Process rollup for an activity\n   * @param {Activity} activity - The activity to process rollup for\n   */\n  processRollup(activity: Activity): void {\n    if (!activity || activity.children.length === 0) {\n      return;\n    }\n\n    const children = activity.children;\n    let completionRollup = false;\n    let successRollup = false;\n\n    // Process each rule\n    for (const rule of this._rules) {\n      if (rule.evaluate(children)) {\n        switch (rule.action) {\n          case RollupActionType.SATISFIED:\n            activity.successStatus = SuccessStatus.PASSED;\n            successRollup = true;\n            break;\n          case RollupActionType.NOT_SATISFIED:\n            activity.successStatus = SuccessStatus.FAILED;\n            successRollup = true;\n            break;\n          case RollupActionType.COMPLETED:\n            activity.completionStatus = CompletionStatus.COMPLETED;\n            activity.isCompleted = true;\n            completionRollup = true;\n            break;\n          case RollupActionType.INCOMPLETE:\n            activity.completionStatus = CompletionStatus.INCOMPLETE;\n            activity.isCompleted = false;\n            completionRollup = true;\n            break;\n        }\n      }\n    }\n\n    // If no rules applied for completion, use default rollup\n    if (!completionRollup) {\n      this._defaultCompletionRollup(activity, children);\n    }\n\n    // If no rules applied for success, use default rollup\n    if (!successRollup) {\n      this._defaultSuccessRollup(activity, children);\n    }\n  }\n\n  /**\n   * Default completion rollup\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @private\n   */\n  private _defaultCompletionRollup(activity: Activity, children: Activity[]): void {\n    // If all children are completed, mark the parent as completed\n    const allCompleted = children.every((child) => child.isCompleted);\n    if (allCompleted) {\n      activity.completionStatus = CompletionStatus.COMPLETED;\n      activity.isCompleted = true;\n    } else {\n      // If any child is incomplete, mark the parent as incomplete\n      const anyIncomplete = children.some(\n        (child) => child.completionStatus === CompletionStatus.INCOMPLETE,\n      );\n      if (anyIncomplete) {\n        activity.completionStatus = CompletionStatus.INCOMPLETE;\n        activity.isCompleted = false;\n      }\n    }\n  }\n\n  /**\n   * Default success rollup\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @private\n   */\n  private _defaultSuccessRollup(activity: Activity, children: Activity[]): void {\n    // If all children are satisfied, mark the parent as satisfied\n    const allSatisfied = children.every((child) => child.successStatus === SuccessStatus.PASSED);\n    if (allSatisfied) {\n      activity.successStatus = SuccessStatus.PASSED;\n    } else {\n      // If any child is not satisfied, mark the parent as not satisfied\n      const anyNotSatisfied = children.some(\n        (child) => child.successStatus === SuccessStatus.FAILED,\n      );\n      if (anyNotSatisfied) {\n        activity.successStatus = SuccessStatus.FAILED;\n      }\n    }\n  }\n\n  /**\n   * toJSON for RollupRules\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      rules: this._rules,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","const ValidLanguages: string[] = [\n  \"aa\",\n  \"ab\",\n  \"ae\",\n  \"af\",\n  \"ak\",\n  \"am\",\n  \"an\",\n  \"ar\",\n  \"as\",\n  \"av\",\n  \"ay\",\n  \"az\",\n  \"ba\",\n  \"be\",\n  \"bg\",\n  \"bh\",\n  \"bi\",\n  \"bm\",\n  \"bn\",\n  \"bo\",\n  \"br\",\n  \"bs\",\n  \"ca\",\n  \"ce\",\n  \"ch\",\n  \"co\",\n  \"cr\",\n  \"cs\",\n  \"cu\",\n  \"cv\",\n  \"cy\",\n  \"da\",\n  \"de\",\n  \"dv\",\n  \"dz\",\n  \"ee\",\n  \"el\",\n  \"en\",\n  \"eo\",\n  \"es\",\n  \"et\",\n  \"eu\",\n  \"fa\",\n  \"ff\",\n  \"fi\",\n  \"fj\",\n  \"fo\",\n  \"fr\",\n  \"fy\",\n  \"ga\",\n  \"gd\",\n  \"gl\",\n  \"gn\",\n  \"gu\",\n  \"gv\",\n  \"ha\",\n  \"he\",\n  \"hi\",\n  \"ho\",\n  \"hr\",\n  \"ht\",\n  \"hu\",\n  \"hy\",\n  \"hz\",\n  \"ia\",\n  \"id\",\n  \"ie\",\n  \"ig\",\n  \"ii\",\n  \"ik\",\n  \"io\",\n  \"is\",\n  \"it\",\n  \"iu\",\n  \"ja\",\n  \"jv\",\n  \"ka\",\n  \"kg\",\n  \"ki\",\n  \"kj\",\n  \"kk\",\n  \"kl\",\n  \"km\",\n  \"kn\",\n  \"ko\",\n  \"kr\",\n  \"ks\",\n  \"ku\",\n  \"kv\",\n  \"kw\",\n  \"ky\",\n  \"la\",\n  \"lb\",\n  \"lg\",\n  \"li\",\n  \"ln\",\n  \"lo\",\n  \"lt\",\n  \"lu\",\n  \"lv\",\n  \"mg\",\n  \"mh\",\n  \"mi\",\n  \"mk\",\n  \"ml\",\n  \"mn\",\n  \"mo\",\n  \"mr\",\n  \"ms\",\n  \"mt\",\n  \"my\",\n  \"na\",\n  \"nb\",\n  \"nd\",\n  \"ne\",\n  \"ng\",\n  \"nl\",\n  \"nn\",\n  \"no\",\n  \"nr\",\n  \"nv\",\n  \"ny\",\n  \"oc\",\n  \"oj\",\n  \"om\",\n  \"or\",\n  \"os\",\n  \"pa\",\n  \"pi\",\n  \"pl\",\n  \"ps\",\n  \"pt\",\n  \"qu\",\n  \"rm\",\n  \"rn\",\n  \"ro\",\n  \"ru\",\n  \"rw\",\n  \"sa\",\n  \"sc\",\n  \"sd\",\n  \"se\",\n  \"sg\",\n  \"sh\",\n  \"si\",\n  \"sk\",\n  \"sl\",\n  \"sm\",\n  \"sn\",\n  \"so\",\n  \"sq\",\n  \"sr\",\n  \"ss\",\n  \"st\",\n  \"su\",\n  \"sv\",\n  \"sw\",\n  \"ta\",\n  \"te\",\n  \"tg\",\n  \"th\",\n  \"ti\",\n  \"tk\",\n  \"tl\",\n  \"tn\",\n  \"to\",\n  \"tr\",\n  \"ts\",\n  \"tt\",\n  \"tw\",\n  \"ty\",\n  \"ug\",\n  \"uk\",\n  \"ur\",\n  \"uz\",\n  \"ve\",\n  \"vi\",\n  \"vo\",\n  \"wa\",\n  \"wo\",\n  \"xh\",\n  \"yi\",\n  \"yo\",\n  \"za\",\n  \"zh\",\n  \"zu\",\n  \"aar\",\n  \"abk\",\n  \"ave\",\n  \"afr\",\n  \"aka\",\n  \"amh\",\n  \"arg\",\n  \"ara\",\n  \"asm\",\n  \"ava\",\n  \"aym\",\n  \"aze\",\n  \"bak\",\n  \"bel\",\n  \"bul\",\n  \"bih\",\n  \"bis\",\n  \"bam\",\n  \"ben\",\n  \"tib\",\n  \"bod\",\n  \"bre\",\n  \"bos\",\n  \"cat\",\n  \"che\",\n  \"cha\",\n  \"cos\",\n  \"cre\",\n  \"cze\",\n  \"ces\",\n  \"chu\",\n  \"chv\",\n  \"wel\",\n  \"cym\",\n  \"dan\",\n  \"ger\",\n  \"deu\",\n  \"div\",\n  \"dzo\",\n  \"ewe\",\n  \"gre\",\n  \"ell\",\n  \"eng\",\n  \"epo\",\n  \"spa\",\n  \"est\",\n  \"baq\",\n  \"eus\",\n  \"per\",\n  \"fas\",\n  \"ful\",\n  \"fin\",\n  \"fij\",\n  \"fao\",\n  \"fre\",\n  \"fra\",\n  \"fry\",\n  \"gle\",\n  \"gla\",\n  \"glg\",\n  \"grn\",\n  \"guj\",\n  \"glv\",\n  \"hau\",\n  \"heb\",\n  \"hin\",\n  \"hmo\",\n  \"hrv\",\n  \"hat\",\n  \"hun\",\n  \"arm\",\n  \"hye\",\n  \"her\",\n  \"ina\",\n  \"ind\",\n  \"ile\",\n  \"ibo\",\n  \"iii\",\n  \"ipk\",\n  \"ido\",\n  \"ice\",\n  \"isl\",\n  \"ita\",\n  \"iku\",\n  \"jpn\",\n  \"jav\",\n  \"geo\",\n  \"kat\",\n  \"kon\",\n  \"kik\",\n  \"kua\",\n  \"kaz\",\n  \"kal\",\n  \"khm\",\n  \"kan\",\n  \"kor\",\n  \"kau\",\n  \"kas\",\n  \"kur\",\n  \"kom\",\n  \"cor\",\n  \"kir\",\n  \"lat\",\n  \"ltz\",\n  \"lug\",\n  \"lim\",\n  \"lin\",\n  \"lao\",\n  \"lit\",\n  \"lub\",\n  \"lav\",\n  \"mlg\",\n  \"mah\",\n  \"mao\",\n  \"mri\",\n  \"mac\",\n  \"mkd\",\n  \"mal\",\n  \"mon\",\n  \"mol\",\n  \"mar\",\n  \"may\",\n  \"msa\",\n  \"mlt\",\n  \"bur\",\n  \"mya\",\n  \"nau\",\n  \"nob\",\n  \"nde\",\n  \"nep\",\n  \"ndo\",\n  \"dut\",\n  \"nld\",\n  \"nno\",\n  \"nor\",\n  \"nbl\",\n  \"nav\",\n  \"nya\",\n  \"oci\",\n  \"oji\",\n  \"orm\",\n  \"ori\",\n  \"oss\",\n  \"pan\",\n  \"pli\",\n  \"pol\",\n  \"pus\",\n  \"por\",\n  \"que\",\n  \"roh\",\n  \"run\",\n  \"rum\",\n  \"ron\",\n  \"rus\",\n  \"kin\",\n  \"san\",\n  \"srd\",\n  \"snd\",\n  \"sme\",\n  \"sag\",\n  \"slo\",\n  \"sin\",\n  \"slk\",\n  \"slv\",\n  \"smo\",\n  \"sna\",\n  \"som\",\n  \"alb\",\n  \"sqi\",\n  \"srp\",\n  \"ssw\",\n  \"sot\",\n  \"sun\",\n  \"swe\",\n  \"swa\",\n  \"tam\",\n  \"tel\",\n  \"tgk\",\n  \"tha\",\n  \"tir\",\n  \"tuk\",\n  \"tgl\",\n  \"tsn\",\n  \"ton\",\n  \"tur\",\n  \"tso\",\n  \"tat\",\n  \"twi\",\n  \"tah\",\n  \"uig\",\n  \"ukr\",\n  \"urd\",\n  \"uzb\",\n  \"ven\",\n  \"vie\",\n  \"vol\",\n  \"wln\",\n  \"wol\",\n  \"xho\",\n  \"yid\",\n  \"yor\",\n  \"zha\",\n  \"chi\",\n  \"zho\",\n  \"zul\",\n];\nexport default ValidLanguages;\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { scorm2004_regex } from \"../../../constants/regex\";\nimport { check2004ValidFormat } from \"../validation\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { CompletionStatus, SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Class representing a single activity in the SCORM 2004 activity tree\n */\nexport class Activity extends BaseCMI {\n  private _id: string = \"\";\n  private _title: string = \"\";\n  private _children: Activity[] = [];\n  private _parent: Activity | null = null;\n  private _isVisible: boolean = true;\n  private _isActive: boolean = false;\n  private _isSuspended: boolean = false;\n  private _isCompleted: boolean = false;\n  private _completionStatus: CompletionStatus = CompletionStatus.UNKNOWN;\n  private _successStatus: SuccessStatus = SuccessStatus.UNKNOWN;\n  private _attemptCount: number = 0;\n  private _attemptCompletionAmount: number = 0;\n  private _attemptAbsoluteDuration: string = \"PT0H0M0S\";\n  private _attemptExperiencedDuration: string = \"PT0H0M0S\";\n  private _activityAbsoluteDuration: string = \"PT0H0M0S\";\n  private _activityExperiencedDuration: string = \"PT0H0M0S\";\n  private _objectiveSatisfiedStatus: boolean = false;\n  private _objectiveMeasureStatus: boolean = false;\n  private _objectiveNormalizedMeasure: number = 0;\n\n  /**\n   * Constructor for Activity\n   * @param {string} id - The unique identifier for this activity\n   * @param {string} title - The title of this activity\n   */\n  constructor(id: string = \"\", title: string = \"\") {\n    super(\"activity\");\n    this._id = id;\n    this._title = title;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    // Initialize children\n    for (const child of this._children) {\n      child.initialize();\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._isActive = false;\n    this._isSuspended = false;\n    this._isCompleted = false;\n    this._completionStatus = CompletionStatus.UNKNOWN;\n    this._successStatus = SuccessStatus.UNKNOWN;\n    this._attemptCount = 0;\n    this._attemptCompletionAmount = 0;\n    this._attemptAbsoluteDuration = \"PT0H0M0S\";\n    this._attemptExperiencedDuration = \"PT0H0M0S\";\n    this._activityAbsoluteDuration = \"PT0H0M0S\";\n    this._activityExperiencedDuration = \"PT0H0M0S\";\n    this._objectiveSatisfiedStatus = false;\n    this._objectiveMeasureStatus = false;\n    this._objectiveNormalizedMeasure = 0;\n\n    // Reset children\n    for (const child of this._children) {\n      child.reset();\n    }\n  }\n\n  /**\n   * Getter for id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for title\n   * @return {string}\n   */\n  get title(): string {\n    return this._title;\n  }\n\n  /**\n   * Setter for title\n   * @param {string} title\n   */\n  set title(title: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".title\", title, scorm2004_regex.CMILangString250)\n    ) {\n      this._title = title;\n    }\n  }\n\n  /**\n   * Getter for children\n   * @return {Activity[]}\n   */\n  get children(): Activity[] {\n    return this._children;\n  }\n\n  /**\n   * Add a child activity to this activity\n   * @param {Activity} child - The child activity to add\n   */\n  addChild(child: Activity): void {\n    if (!(child instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".children\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    child._parent = this;\n    this._children.push(child);\n  }\n\n  /**\n   * Remove a child activity from this activity\n   * @param {Activity} child - The child activity to remove\n   * @return {boolean} - True if the child was removed, false otherwise\n   */\n  removeChild(child: Activity): boolean {\n    const index = this._children.indexOf(child);\n    if (index !== -1) {\n      this._children.splice(index, 1);\n      child._parent = null;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for parent\n   * @return {Activity | null}\n   */\n  get parent(): Activity | null {\n    return this._parent;\n  }\n\n  /**\n   * Getter for isVisible\n   * @return {boolean}\n   */\n  get isVisible(): boolean {\n    return this._isVisible;\n  }\n\n  /**\n   * Setter for isVisible\n   * @param {boolean} isVisible\n   */\n  set isVisible(isVisible: boolean) {\n    this._isVisible = isVisible;\n  }\n\n  /**\n   * Getter for isActive\n   * @return {boolean}\n   */\n  get isActive(): boolean {\n    return this._isActive;\n  }\n\n  /**\n   * Setter for isActive\n   * @param {boolean} isActive\n   */\n  set isActive(isActive: boolean) {\n    this._isActive = isActive;\n  }\n\n  /**\n   * Getter for isSuspended\n   * @return {boolean}\n   */\n  get isSuspended(): boolean {\n    return this._isSuspended;\n  }\n\n  /**\n   * Setter for isSuspended\n   * @param {boolean} isSuspended\n   */\n  set isSuspended(isSuspended: boolean) {\n    this._isSuspended = isSuspended;\n  }\n\n  /**\n   * Getter for isCompleted\n   * @return {boolean}\n   */\n  get isCompleted(): boolean {\n    return this._isCompleted;\n  }\n\n  /**\n   * Setter for isCompleted\n   * @param {boolean} isCompleted\n   */\n  set isCompleted(isCompleted: boolean) {\n    this._isCompleted = isCompleted;\n  }\n\n  /**\n   * Getter for completionStatus\n   * @return {CompletionStatus}\n   */\n  get completionStatus(): CompletionStatus {\n    return this._completionStatus;\n  }\n\n  /**\n   * Setter for completionStatus\n   * @param {CompletionStatus} completionStatus\n   */\n  set completionStatus(completionStatus: CompletionStatus) {\n    this._completionStatus = completionStatus;\n    this._isCompleted = completionStatus === CompletionStatus.COMPLETED;\n  }\n\n  /**\n   * Getter for successStatus\n   * @return {SuccessStatus}\n   */\n  get successStatus(): SuccessStatus {\n    return this._successStatus;\n  }\n\n  /**\n   * Setter for successStatus\n   * @param {SuccessStatus} successStatus\n   */\n  set successStatus(successStatus: SuccessStatus) {\n    this._successStatus = successStatus;\n  }\n\n  /**\n   * Getter for attemptCount\n   * @return {number}\n   */\n  get attemptCount(): number {\n    return this._attemptCount;\n  }\n\n  /**\n   * Increment the attempt count\n   */\n  incrementAttemptCount(): void {\n    this._attemptCount++;\n  }\n\n  /**\n   * Getter for objectiveMeasureStatus\n   * @return {boolean}\n   */\n  get objectiveMeasureStatus(): boolean {\n    return this._objectiveMeasureStatus;\n  }\n\n  /**\n   * Setter for objectiveMeasureStatus\n   * @param {boolean} objectiveMeasureStatus\n   */\n  set objectiveMeasureStatus(objectiveMeasureStatus: boolean) {\n    this._objectiveMeasureStatus = objectiveMeasureStatus;\n  }\n\n  /**\n   * Getter for objectiveNormalizedMeasure\n   * @return {number}\n   */\n  get objectiveNormalizedMeasure(): number {\n    return this._objectiveNormalizedMeasure;\n  }\n\n  /**\n   * Setter for objectiveNormalizedMeasure\n   * @param {number} objectiveNormalizedMeasure\n   */\n  set objectiveNormalizedMeasure(objectiveNormalizedMeasure: number) {\n    this._objectiveNormalizedMeasure = objectiveNormalizedMeasure;\n  }\n\n  /**\n   * toJSON for Activity\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      id: this._id,\n      title: this._title,\n      isVisible: this._isVisible,\n      isActive: this._isActive,\n      isSuspended: this._isSuspended,\n      isCompleted: this._isCompleted,\n      completionStatus: this._completionStatus,\n      successStatus: this._successStatus,\n      attemptCount: this._attemptCount,\n      attemptCompletionAmount: this._attemptCompletionAmount,\n      attemptAbsoluteDuration: this._attemptAbsoluteDuration,\n      attemptExperiencedDuration: this._attemptExperiencedDuration,\n      activityAbsoluteDuration: this._activityAbsoluteDuration,\n      activityExperiencedDuration: this._activityExperiencedDuration,\n      objectiveSatisfiedStatus: this._objectiveSatisfiedStatus,\n      objectiveMeasureStatus: this._objectiveMeasureStatus,\n      objectiveNormalizedMeasure: this._objectiveNormalizedMeasure,\n      children: this._children.map((child) => child.toJSON()),\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\n\n/**\n * Class representing the SCORM 2004 activity tree\n */\nexport class ActivityTree extends BaseCMI {\n  private _root: Activity | null = null;\n  private _currentActivity: Activity | null = null;\n  private _suspendedActivity: Activity | null = null;\n  private _activities: Map<string, Activity> = new Map();\n\n  /**\n   * Constructor for ActivityTree\n   */\n  constructor() {\n    super(\"activityTree\");\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    if (this._root) {\n      this._root.initialize();\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._currentActivity = null;\n    this._suspendedActivity = null;\n    if (this._root) {\n      this._root.reset();\n    }\n  }\n\n  /**\n   * Getter for root\n   * @return {Activity | null}\n   */\n  get root(): Activity | null {\n    return this._root;\n  }\n\n  /**\n   * Setter for root\n   * @param {Activity} root\n   */\n  set root(root: Activity | null) {\n    if (root !== null && !(root instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".root\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._root = root;\n    if (root) {\n      this._activities.set(root.id, root);\n      this._addActivitiesToMap(root);\n    }\n  }\n\n  /**\n   * Recursively add activities to the activities map\n   * @param {Activity} activity\n   * @private\n   */\n  private _addActivitiesToMap(activity: Activity): void {\n    for (const child of activity.children) {\n      this._activities.set(child.id, child);\n      this._addActivitiesToMap(child);\n    }\n  }\n\n  /**\n   * Getter for currentActivity\n   * @return {Activity | null}\n   */\n  get currentActivity(): Activity | null {\n    return this._currentActivity;\n  }\n\n  /**\n   * Setter for currentActivity\n   * @param {Activity | null} activity\n   */\n  set currentActivity(activity: Activity | null) {\n    if (activity !== null && !(activity instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".currentActivity\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n\n    // If there's already a current activity, deactivate it\n    if (this._currentActivity) {\n      this._currentActivity.isActive = false;\n    }\n\n    // Set the new current activity and activate it\n    this._currentActivity = activity;\n    if (activity) {\n      activity.isActive = true;\n    }\n  }\n\n  /**\n   * Getter for suspendedActivity\n   * @return {Activity | null}\n   */\n  get suspendedActivity(): Activity | null {\n    return this._suspendedActivity;\n  }\n\n  /**\n   * Setter for suspendedActivity\n   * @param {Activity | null} activity\n   */\n  set suspendedActivity(activity: Activity | null) {\n    if (activity !== null && !(activity instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".suspendedActivity\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n\n    // If there's already a suspended activity, unsuspend it\n    if (this._suspendedActivity) {\n      this._suspendedActivity.isSuspended = false;\n    }\n\n    // Set the new suspended activity and mark it as suspended\n    this._suspendedActivity = activity;\n    if (activity) {\n      activity.isSuspended = true;\n    }\n  }\n\n  /**\n   * Get an activity by ID\n   * @param {string} id - The ID of the activity to get\n   * @return {Activity | undefined} - The activity with the given ID, or undefined if not found\n   */\n  getActivity(id: string): Activity | undefined {\n    return this._activities.get(id);\n  }\n\n  /**\n   * Get all activities in the tree\n   * @return {Activity[]} - An array of all activities in the tree\n   */\n  getAllActivities(): Activity[] {\n    return Array.from(this._activities.values());\n  }\n\n  /**\n   * Get the parent of an activity\n   * @param {Activity} activity - The activity to get the parent of\n   * @return {Activity | null} - The parent of the activity, or null if it has no parent\n   */\n  getParent(activity: Activity): Activity | null {\n    return activity.parent;\n  }\n\n  /**\n   * Get the children of an activity\n   * @param {Activity} activity - The activity to get the children of\n   * @return {Activity[]} - An array of the activity's children\n   */\n  getChildren(activity: Activity): Activity[] {\n    return activity.children;\n  }\n\n  /**\n   * Get the siblings of an activity\n   * @param {Activity} activity - The activity to get the siblings of\n   * @return {Activity[]} - An array of the activity's siblings\n   */\n  getSiblings(activity: Activity): Activity[] {\n    if (!activity.parent) {\n      return [];\n    }\n    return activity.parent.children.filter((child) => child !== activity);\n  }\n\n  /**\n   * Get the next sibling of an activity\n   * @param {Activity} activity - The activity to get the next sibling of\n   * @return {Activity | null} - The next sibling of the activity, or null if it has no next sibling\n   */\n  getNextSibling(activity: Activity): Activity | null {\n    if (!activity.parent) {\n      return null;\n    }\n    const siblings = activity.parent.children;\n    const index = siblings.indexOf(activity);\n    if (index === -1 || index === siblings.length - 1) {\n      return null;\n    }\n    return siblings[index + 1];\n  }\n\n  /**\n   * Get the previous sibling of an activity\n   * @param {Activity} activity - The activity to get the previous sibling of\n   * @return {Activity | null} - The previous sibling of the activity, or null if it has no previous sibling\n   */\n  getPreviousSibling(activity: Activity): Activity | null {\n    if (!activity.parent) {\n      return null;\n    }\n    const siblings = activity.parent.children;\n    const index = siblings.indexOf(activity);\n    if (index <= 0) {\n      return null;\n    }\n    return siblings[index - 1];\n  }\n\n  /**\n   * Get the first child of an activity\n   * @param {Activity} activity - The activity to get the first child of\n   * @return {Activity | null} - The first child of the activity, or null if it has no children\n   */\n  getFirstChild(activity: Activity): Activity | null {\n    if (activity.children.length === 0) {\n      return null;\n    }\n    return activity.children[0];\n  }\n\n  /**\n   * Get the last child of an activity\n   * @param {Activity} activity - The activity to get the last child of\n   * @return {Activity | null} - The last child of the activity, or null if it has no children\n   */\n  getLastChild(activity: Activity): Activity | null {\n    if (activity.children.length === 0) {\n      return null;\n    }\n    return activity.children[activity.children.length - 1];\n  }\n\n  /**\n   * Get the common ancestor of two activities\n   * @param {Activity} activity1 - The first activity\n   * @param {Activity} activity2 - The second activity\n   * @return {Activity | null} - The common ancestor of the two activities, or null if they have no common ancestor\n   */\n  getCommonAncestor(activity1: Activity, activity2: Activity): Activity | null {\n    // Get the path from the root to activity1\n    const path1: Activity[] = [];\n    let current: Activity | null = activity1;\n    while (current) {\n      path1.unshift(current);\n      current = current.parent;\n    }\n\n    // Check if activity2 is in the path from the root to activity1\n    current = activity2;\n    while (current) {\n      if (path1.includes(current)) {\n        return current;\n      }\n      current = current.parent;\n    }\n\n    return null;\n  }\n\n  /**\n   * toJSON for ActivityTree\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      root: this._root,\n      currentActivity: this._currentActivity ? this._currentActivity.id : null,\n      suspendedActivity: this._suspendedActivity ? this._suspendedActivity.id : null,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\n\n/**\n * Class representing SCORM 2004 sequencing controls\n */\nexport class SequencingControls extends BaseCMI {\n  // Sequencing Control Modes\n  private _enabled: boolean = true;\n  private _choiceExit: boolean = true;\n  private _flow: boolean = false;\n  private _forwardOnly: boolean = false;\n  private _useCurrentAttemptObjectiveInfo: boolean = true;\n  private _useCurrentAttemptProgressInfo: boolean = true;\n\n  // Constrain Choice Controls\n  private _preventActivation: boolean = false;\n  private _constrainChoice: boolean = false;\n\n  // Rollup Controls\n  private _rollupObjectiveSatisfied: boolean = true;\n  private _rollupProgressCompletion: boolean = true;\n  private _objectiveMeasureWeight: number = 1.0;\n\n  /**\n   * Constructor for SequencingControls\n   */\n  constructor() {\n    super(\"sequencingControls\");\n  }\n\n  /**\n   * Reset the sequencing controls to their default values\n   */\n  reset() {\n    this._initialized = false;\n    this._enabled = true;\n    this._choiceExit = true;\n    this._flow = false;\n    this._forwardOnly = false;\n    this._useCurrentAttemptObjectiveInfo = true;\n    this._useCurrentAttemptProgressInfo = true;\n    this._preventActivation = false;\n    this._constrainChoice = false;\n    this._rollupObjectiveSatisfied = true;\n    this._rollupProgressCompletion = true;\n    this._objectiveMeasureWeight = 1.0;\n  }\n\n  /**\n   * Getter for enabled\n   * @return {boolean}\n   */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  /**\n   * Setter for enabled\n   * @param {boolean} enabled\n   */\n  set enabled(enabled: boolean) {\n    this._enabled = enabled;\n  }\n\n  /**\n   * Getter for choiceExit\n   * @return {boolean}\n   */\n  get choiceExit(): boolean {\n    return this._choiceExit;\n  }\n\n  /**\n   * Setter for choiceExit\n   * @param {boolean} choiceExit\n   */\n  set choiceExit(choiceExit: boolean) {\n    this._choiceExit = choiceExit;\n  }\n\n  /**\n   * Getter for flow\n   * @return {boolean}\n   */\n  get flow(): boolean {\n    return this._flow;\n  }\n\n  /**\n   * Setter for flow\n   * @param {boolean} flow\n   */\n  set flow(flow: boolean) {\n    this._flow = flow;\n  }\n\n  /**\n   * Getter for forwardOnly\n   * @return {boolean}\n   */\n  get forwardOnly(): boolean {\n    return this._forwardOnly;\n  }\n\n  /**\n   * Setter for forwardOnly\n   * @param {boolean} forwardOnly\n   */\n  set forwardOnly(forwardOnly: boolean) {\n    this._forwardOnly = forwardOnly;\n  }\n\n  /**\n   * Getter for useCurrentAttemptObjectiveInfo\n   * @return {boolean}\n   */\n  get useCurrentAttemptObjectiveInfo(): boolean {\n    return this._useCurrentAttemptObjectiveInfo;\n  }\n\n  /**\n   * Setter for useCurrentAttemptObjectiveInfo\n   * @param {boolean} useCurrentAttemptObjectiveInfo\n   */\n  set useCurrentAttemptObjectiveInfo(useCurrentAttemptObjectiveInfo: boolean) {\n    this._useCurrentAttemptObjectiveInfo = useCurrentAttemptObjectiveInfo;\n  }\n\n  /**\n   * Getter for useCurrentAttemptProgressInfo\n   * @return {boolean}\n   */\n  get useCurrentAttemptProgressInfo(): boolean {\n    return this._useCurrentAttemptProgressInfo;\n  }\n\n  /**\n   * Setter for useCurrentAttemptProgressInfo\n   * @param {boolean} useCurrentAttemptProgressInfo\n   */\n  set useCurrentAttemptProgressInfo(useCurrentAttemptProgressInfo: boolean) {\n    this._useCurrentAttemptProgressInfo = useCurrentAttemptProgressInfo;\n  }\n\n  /**\n   * Getter for preventActivation\n   * @return {boolean}\n   */\n  get preventActivation(): boolean {\n    return this._preventActivation;\n  }\n\n  /**\n   * Setter for preventActivation\n   * @param {boolean} preventActivation\n   */\n  set preventActivation(preventActivation: boolean) {\n    this._preventActivation = preventActivation;\n  }\n\n  /**\n   * Getter for constrainChoice\n   * @return {boolean}\n   */\n  get constrainChoice(): boolean {\n    return this._constrainChoice;\n  }\n\n  /**\n   * Setter for constrainChoice\n   * @param {boolean} constrainChoice\n   */\n  set constrainChoice(constrainChoice: boolean) {\n    this._constrainChoice = constrainChoice;\n  }\n\n  /**\n   * Getter for rollupObjectiveSatisfied\n   * @return {boolean}\n   */\n  get rollupObjectiveSatisfied(): boolean {\n    return this._rollupObjectiveSatisfied;\n  }\n\n  /**\n   * Setter for rollupObjectiveSatisfied\n   * @param {boolean} rollupObjectiveSatisfied\n   */\n  set rollupObjectiveSatisfied(rollupObjectiveSatisfied: boolean) {\n    this._rollupObjectiveSatisfied = rollupObjectiveSatisfied;\n  }\n\n  /**\n   * Getter for rollupProgressCompletion\n   * @return {boolean}\n   */\n  get rollupProgressCompletion(): boolean {\n    return this._rollupProgressCompletion;\n  }\n\n  /**\n   * Setter for rollupProgressCompletion\n   * @param {boolean} rollupProgressCompletion\n   */\n  set rollupProgressCompletion(rollupProgressCompletion: boolean) {\n    this._rollupProgressCompletion = rollupProgressCompletion;\n  }\n\n  /**\n   * Getter for objectiveMeasureWeight\n   * @return {number}\n   */\n  get objectiveMeasureWeight(): number {\n    return this._objectiveMeasureWeight;\n  }\n\n  /**\n   * Setter for objectiveMeasureWeight\n   * @param {number} objectiveMeasureWeight\n   */\n  set objectiveMeasureWeight(objectiveMeasureWeight: number) {\n    if (objectiveMeasureWeight >= 0 && objectiveMeasureWeight <= 1) {\n      this._objectiveMeasureWeight = objectiveMeasureWeight;\n    }\n  }\n\n  /**\n   * Check if choice navigation is allowed\n   * @return {boolean} - True if choice navigation is allowed, false otherwise\n   */\n  isChoiceNavigationAllowed(): boolean {\n    return this._enabled && !this._constrainChoice;\n  }\n\n  /**\n   * Check if flow navigation is allowed\n   * @return {boolean} - True if flow navigation is allowed, false otherwise\n   */\n  isFlowNavigationAllowed(): boolean {\n    return this._enabled && this._flow;\n  }\n\n  /**\n   * Check if forward navigation is allowed\n   * @return {boolean} - True if forward navigation is allowed, false otherwise\n   */\n  isForwardNavigationAllowed(): boolean {\n    return this._enabled && (!this._forwardOnly || this._flow);\n  }\n\n  /**\n   * Check if backward navigation is allowed\n   * @return {boolean} - True if backward navigation is allowed, false otherwise\n   */\n  isBackwardNavigationAllowed(): boolean {\n    return this._enabled && !this._forwardOnly;\n  }\n\n  /**\n   * toJSON for SequencingControls\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      enabled: this._enabled,\n      choiceExit: this._choiceExit,\n      flow: this._flow,\n      forwardOnly: this._forwardOnly,\n      useCurrentAttemptObjectiveInfo: this._useCurrentAttemptObjectiveInfo,\n      useCurrentAttemptProgressInfo: this._useCurrentAttemptProgressInfo,\n      preventActivation: this._preventActivation,\n      constrainChoice: this._constrainChoice,\n      rollupObjectiveSatisfied: this._rollupObjectiveSatisfied,\n      rollupProgressCompletion: this._rollupProgressCompletion,\n      objectiveMeasureWeight: this._objectiveMeasureWeight,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { ActivityTree } from \"./activity_tree\";\nimport { RuleActionType, SequencingRules } from \"./sequencing_rules\";\nimport { SequencingControls } from \"./sequencing_controls\";\nimport { RollupRules } from \"./rollup_rules\";\nimport { ADLNav } from \"../adl\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\n\n/**\n * Class representing SCORM 2004 sequencing\n */\nexport class Sequencing extends BaseCMI {\n  private _activityTree: ActivityTree;\n  private _sequencingRules: SequencingRules;\n  private _sequencingControls: SequencingControls;\n  private _rollupRules: RollupRules;\n  private _adlNav: ADLNav | null = null;\n\n  /**\n   * Constructor for Sequencing\n   */\n  constructor() {\n    super(\"sequencing\");\n    this._activityTree = new ActivityTree();\n    this._sequencingRules = new SequencingRules();\n    this._sequencingControls = new SequencingControls();\n    this._rollupRules = new RollupRules();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this._activityTree.initialize();\n    this._sequencingRules.initialize();\n    this._sequencingControls.initialize();\n    this._rollupRules.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._activityTree.reset();\n    this._sequencingRules.reset();\n    this._sequencingControls.reset();\n    this._rollupRules.reset();\n  }\n\n  /**\n   * Getter for activityTree\n   * @return {ActivityTree}\n   */\n  get activityTree(): ActivityTree {\n    return this._activityTree;\n  }\n\n  /**\n   * Setter for activityTree\n   * @param {ActivityTree} activityTree\n   */\n  set activityTree(activityTree: ActivityTree) {\n    if (!(activityTree instanceof ActivityTree)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".activityTree\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._activityTree = activityTree;\n  }\n\n  /**\n   * Getter for sequencingRules\n   * @return {SequencingRules}\n   */\n  get sequencingRules(): SequencingRules {\n    return this._sequencingRules;\n  }\n\n  /**\n   * Setter for sequencingRules\n   * @param {SequencingRules} sequencingRules\n   */\n  set sequencingRules(sequencingRules: SequencingRules) {\n    if (!(sequencingRules instanceof SequencingRules)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".sequencingRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._sequencingRules = sequencingRules;\n  }\n\n  /**\n   * Getter for sequencingControls\n   * @return {SequencingControls}\n   */\n  get sequencingControls(): SequencingControls {\n    return this._sequencingControls;\n  }\n\n  /**\n   * Setter for sequencingControls\n   * @param {SequencingControls} sequencingControls\n   */\n  set sequencingControls(sequencingControls: SequencingControls) {\n    if (!(sequencingControls instanceof SequencingControls)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".sequencingControls\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._sequencingControls = sequencingControls;\n  }\n\n  /**\n   * Getter for rollupRules\n   * @return {RollupRules}\n   */\n  get rollupRules(): RollupRules {\n    return this._rollupRules;\n  }\n\n  /**\n   * Setter for rollupRules\n   * @param {RollupRules} rollupRules\n   */\n  set rollupRules(rollupRules: RollupRules) {\n    if (!(rollupRules instanceof RollupRules)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".rollupRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._rollupRules = rollupRules;\n  }\n\n  /**\n   * Getter for adlNav\n   * @return {ADLNav | null}\n   */\n  get adlNav(): ADLNav | null {\n    return this._adlNav;\n  }\n\n  /**\n   * Setter for adlNav\n   * @param {ADLNav | null} adlNav\n   */\n  set adlNav(adlNav: ADLNav | null) {\n    this._adlNav = adlNav;\n  }\n\n  /**\n   * Process navigation request\n   * @param {string} request - The navigation request\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processNavigationRequest(request: string): boolean {\n    if (!this._adlNav) {\n      return false;\n    }\n\n    // Set the navigation request\n    this._adlNav.request = request;\n\n    // Get the current activity\n    const currentActivity = this._activityTree.currentActivity;\n    if (!currentActivity) {\n      return false;\n    }\n\n    // Evaluate pre-condition rules\n    const preConditionAction = this._sequencingRules.evaluatePreConditionRules(currentActivity);\n    if (preConditionAction) {\n      // Handle pre-condition action\n      switch (preConditionAction) {\n        case RuleActionType.SKIP:\n          // Skip this activity\n          return false;\n        case RuleActionType.DISABLED:\n          // Disable this activity\n          return false;\n        case RuleActionType.HIDE_FROM_CHOICE:\n          // Hide this activity from choice\n          return false;\n        case RuleActionType.STOP_FORWARD_TRAVERSAL:\n          // Stop forward traversal\n          return false;\n        default:\n          break;\n      }\n    }\n\n    // Process the navigation request based on the request type\n    switch (request) {\n      case \"continue\":\n        return this.processContinueRequest(currentActivity);\n      case \"previous\":\n        return this.processPreviousRequest(currentActivity);\n      case \"choice\":\n        // Choice navigation would require additional parameters\n        return false;\n      case \"exit\":\n        return this.processExitRequest(currentActivity);\n      case \"exitAll\":\n        return this.processExitAllRequest();\n      case \"abandon\":\n        return this.processAbandonRequest(currentActivity);\n      case \"abandonAll\":\n        return this.processAbandonAllRequest();\n      case \"suspendAll\":\n        return this.processSuspendAllRequest(currentActivity);\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Process continue request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processContinueRequest(currentActivity: Activity): boolean {\n    // Check if continue is allowed\n    if (!this._sequencingControls.isForwardNavigationAllowed()) {\n      return false;\n    }\n\n    // Get the next activity\n    const nextActivity = this._activityTree.getNextSibling(currentActivity);\n    if (!nextActivity) {\n      return false;\n    }\n\n    // Evaluate exit condition rules\n    const exitConditionAction = this._sequencingRules.evaluateExitConditionRules(currentActivity);\n    if (exitConditionAction) {\n      // Handle exit condition action\n      switch (exitConditionAction) {\n        case RuleActionType.EXIT_PARENT: {\n          // Exit to parent\n          const parent = currentActivity.parent;\n          if (parent) {\n            this._activityTree.currentActivity = parent;\n            return true;\n          }\n          return false;\n        }\n        case RuleActionType.EXIT_ALL:\n          // Exit all\n          this._activityTree.currentActivity = null;\n          return true;\n        default:\n          break;\n      }\n    }\n\n    // Set the next activity as current\n    this._activityTree.currentActivity = nextActivity;\n\n    // Evaluate post-condition rules\n    const postConditionAction = this._sequencingRules.evaluatePostConditionRules(nextActivity);\n    if (postConditionAction) {\n      // Handle post-condition action\n      switch (postConditionAction) {\n        case RuleActionType.RETRY:\n          // Retry this activity\n          nextActivity.incrementAttemptCount();\n          return true;\n        case RuleActionType.RETRY_ALL:\n          // Retry all activities\n          this._activityTree.getAllActivities().forEach((activity) => {\n            activity.incrementAttemptCount();\n          });\n          return true;\n        case RuleActionType.CONTINUE:\n          // Continue to next activity\n          return this.processContinueRequest(nextActivity);\n        case RuleActionType.PREVIOUS:\n          // Go to previous activity\n          return this.processPreviousRequest(nextActivity);\n        case RuleActionType.EXIT:\n          // Exit this activity\n          this._activityTree.currentActivity = currentActivity;\n          return true;\n        default:\n          break;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Process previous request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processPreviousRequest(currentActivity: Activity): boolean {\n    // Check if backward navigation is allowed\n    if (!this._sequencingControls.isBackwardNavigationAllowed()) {\n      return false;\n    }\n\n    // Get the previous activity\n    const previousActivity = this._activityTree.getPreviousSibling(currentActivity);\n    if (!previousActivity) {\n      return false;\n    }\n\n    // Evaluate exit condition rules\n    const exitConditionAction = this._sequencingRules.evaluateExitConditionRules(currentActivity);\n    if (exitConditionAction) {\n      // Handle exit condition action\n      switch (exitConditionAction) {\n        case RuleActionType.EXIT_PARENT: {\n          // Exit to parent\n          const parent = currentActivity.parent;\n          if (parent) {\n            this._activityTree.currentActivity = parent;\n            return true;\n          }\n          return false;\n        }\n        case RuleActionType.EXIT_ALL:\n          // Exit all\n          this._activityTree.currentActivity = null;\n          return true;\n        default:\n          break;\n      }\n    }\n\n    // Set the previous activity as current\n    this._activityTree.currentActivity = previousActivity;\n\n    // Evaluate post-condition rules\n    const postConditionAction = this._sequencingRules.evaluatePostConditionRules(previousActivity);\n    if (postConditionAction) {\n      // Handle post-condition action\n      switch (postConditionAction) {\n        case RuleActionType.RETRY:\n          // Retry this activity\n          previousActivity.incrementAttemptCount();\n          return true;\n        case RuleActionType.RETRY_ALL:\n          // Retry all activities\n          this._activityTree.getAllActivities().forEach((activity) => {\n            activity.incrementAttemptCount();\n          });\n          return true;\n        case RuleActionType.CONTINUE:\n          // Continue to next activity\n          return this.processContinueRequest(previousActivity);\n        case RuleActionType.PREVIOUS:\n          // Go to previous activity\n          return this.processPreviousRequest(previousActivity);\n        case RuleActionType.EXIT:\n          // Exit this activity\n          this._activityTree.currentActivity = currentActivity;\n          return true;\n        default:\n          break;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Process exit request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processExitRequest(currentActivity: Activity): boolean {\n    // Check if exit is allowed\n    if (!this._sequencingControls.choiceExit) {\n      return false;\n    }\n\n    // Get the parent activity\n    const parent = currentActivity.parent;\n    if (!parent) {\n      return false;\n    }\n\n    // Set the parent activity as current\n    this._activityTree.currentActivity = parent;\n\n    return true;\n  }\n\n  /**\n   * Process exit all request\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processExitAllRequest(): boolean {\n    // Check if exit is allowed\n    if (!this._sequencingControls.choiceExit) {\n      return false;\n    }\n\n    // Set no activity as current\n    this._activityTree.currentActivity = null;\n\n    return true;\n  }\n\n  /**\n   * Process abandon request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processAbandonRequest(currentActivity: Activity): boolean {\n    // Get the parent activity\n    const parent = currentActivity.parent;\n    if (!parent) {\n      return false;\n    }\n\n    // Set the parent activity as current without processing exit rules\n    this._activityTree.currentActivity = parent;\n\n    return true;\n  }\n\n  /**\n   * Process abandon all request\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processAbandonAllRequest(): boolean {\n    // Set no activity as current without processing exit rules\n    this._activityTree.currentActivity = null;\n\n    return true;\n  }\n\n  /**\n   * Process suspend all request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processSuspendAllRequest(currentActivity: Activity): boolean {\n    // Set the current activity as suspended\n    this._activityTree.suspendedActivity = currentActivity;\n    this._activityTree.currentActivity = null;\n\n    return true;\n  }\n\n  /**\n   * Process rollup for the entire activity tree\n   */\n  processRollup(): void {\n    // Get the root activity\n    const root = this._activityTree.root;\n    if (!root) {\n      return;\n    }\n\n    // Process rollup from the bottom up\n    this._processRollupRecursive(root);\n  }\n\n  /**\n   * Process rollup recursively\n   * @param {Activity} activity - The activity to process rollup for\n   * @private\n   */\n  private _processRollupRecursive(activity: Activity): void {\n    // Process rollup for children first\n    for (const child of activity.children) {\n      this._processRollupRecursive(child);\n    }\n\n    // Process rollup for this activity\n    this._rollupRules.processRollup(activity);\n  }\n\n  /**\n   * toJSON for Sequencing\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      activityTree: this._activityTree,\n      sequencingRules: this._sequencingRules,\n      sequencingControls: this._sequencingControls,\n      rollupRules: this._rollupRules,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import BaseAPI from \"./BaseAPI\";\nimport { CMI } from \"./cmi/scorm2004/cmi\";\nimport * as Utilities from \"./utilities\";\nimport { StringKeyMap, stringMatches } from \"./utilities\";\nimport { global_constants, scorm2004_constants } from \"./constants/api_constants\";\nimport { scorm2004_errors } from \"./constants/error_codes\";\nimport { CMIObjectivesObject } from \"./cmi/scorm2004/objectives\";\nimport { ADL, ADLDataObject } from \"./cmi/scorm2004/adl\";\nimport { CommitObject, ResultObject, ScoreObject, Settings } from \"./types/api_types\";\nimport {\n  ActivitySettings,\n  SequencingSettings,\n  SequencingRulesSettings,\n  SequencingControlsSettings,\n  RollupRulesSettings,\n  SequencingRuleSettings,\n  RollupRuleSettings,\n} from \"./types/sequencing_types\";\nimport { SequencingRule, RuleCondition } from \"./cmi/scorm2004/sequencing/sequencing_rules\";\nimport { RollupRule, RollupCondition } from \"./cmi/scorm2004/sequencing/rollup_rules\";\nimport { scorm2004_regex } from \"./constants/regex\"; // Import functions from extracted modules\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport {\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n} from \"./cmi/scorm2004/interactions\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { CorrectResponses, ResponseType } from \"./constants/response_constants\";\nimport { CMICommentsObject } from \"./cmi/scorm2004/comments\";\nimport ValidLanguages from \"./constants/language_constants\";\nimport { CompletionStatus, SuccessStatus } from \"./constants/enums\";\nimport { Sequencing } from \"./cmi/scorm2004/sequencing/sequencing\";\nimport { Activity } from \"./cmi/scorm2004/sequencing/activity\";\n\n/**\n * API class for SCORM 2004\n */\nclass Scorm2004Impl extends BaseAPI {\n  private _version: string = \"1.0\";\n  private _globalObjectives: CMIObjectivesObject[] = [];\n  private _sequencing: Sequencing;\n  private _extractedScoItemIds: string[] = [];\n\n  /**\n   * Constructor for SCORM 2004 API\n   * @param {Settings} settings\n   */\n  constructor(settings?: Settings) {\n    if (settings) {\n      if (settings.mastery_override === undefined) {\n        settings.mastery_override = false;\n      }\n    }\n\n    super(scorm2004_errors, settings);\n\n    this.cmi = new CMI();\n    this.adl = new ADL();\n    this._sequencing = new Sequencing();\n\n    // Connect the sequencing object to the ADL's sequencing property\n    // The Sequencing object is used for both configuration and runtime navigation processing\n    // It needs to be attached to the ADL object for runtime navigation requests (adl.nav.request)\n    this.adl.sequencing = this._sequencing;\n\n    // Configure sequencing if settings are provided\n    if (settings?.sequencing) {\n      this.configureSequencing(settings.sequencing);\n    }\n\n    // Rename functions to match 2004 Spec and expose to modules\n    this.Initialize = this.lmsInitialize;\n    this.Terminate = this.lmsFinish;\n    this.GetValue = this.lmsGetValue;\n    this.SetValue = this.lmsSetValue;\n    this.Commit = this.lmsCommit;\n    this.GetLastError = this.lmsGetLastError;\n    this.GetErrorString = this.lmsGetErrorString;\n    this.GetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  public cmi: CMI;\n  public adl: ADL;\n\n  public Initialize: () => string;\n  public Terminate: () => string;\n  public GetValue: (CMIElement: string) => string;\n  public SetValue: (CMIElement: string, value: any) => string;\n  public Commit: () => string;\n  public GetLastError: () => string;\n  public GetErrorString: (CMIErrorCode: string | number) => string;\n  public GetDiagnostic: (CMIErrorCode: string | number) => string;\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset(settings?: Settings) {\n    this.commonReset(settings);\n\n    this.cmi?.reset();\n    this.adl?.reset();\n    this._sequencing?.reset();\n  }\n\n  /**\n   * Getter for _version\n   * @return {string}\n   */\n  get version(): string {\n    return this._version;\n  }\n\n  /**\n   * Getter for _globalObjectives\n   */\n  get globalObjectives(): CMIObjectivesObject[] {\n    return this._globalObjectives;\n  }\n\n  /**\n   * Initialize function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize(): string {\n    this.cmi.initialize();\n    return this.initialize(\n      \"Initialize\",\n      \"LMS was already initialized!\",\n      \"LMS is already finished!\",\n    );\n  }\n\n  /**\n   * Terminate function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish(): string {\n    (async () => {\n      await this.internalFinish();\n    })();\n    return global_constants.SCORM_TRUE;\n  }\n\n  async internalFinish(): Promise<string> {\n    const result = await this.terminate(\"Terminate\", true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      if (this.adl.nav.request !== \"_none_\") {\n        const navActions: { [key: string]: string } = {\n          continue: \"SequenceNext\",\n          previous: \"SequencePrevious\",\n          choice: \"SequenceChoice\",\n          jump: \"SequenceJump\",\n          exit: \"SequenceExit\",\n          exitAll: \"SequenceExitAll\",\n          abandon: \"SequenceAbandon\",\n          abandonAll: \"SequenceAbandonAll\",\n        };\n\n        let request = this.adl.nav.request;\n        const choiceJumpRegex = new RegExp(scorm2004_regex.NAVEvent);\n        const matches = request.match(choiceJumpRegex);\n        let target = \"\";\n        if (matches) {\n          if (matches.groups?.choice_target) {\n            target = matches.groups?.choice_target;\n            request = \"choice\";\n          } else if (matches.groups?.jump_target) {\n            target = matches.groups?.jump_target;\n            request = \"jump\";\n          }\n        }\n        const action = navActions[request];\n        if (action) {\n          this.processListeners(action, \"adl.nav.request\", target);\n        }\n      } else if (this.settings.autoProgress) {\n        this.processListeners(\"SequenceNext\", null, \"next\");\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * GetValue function from SCORM 2004 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement: string): string {\n    const adlNavRequestRegex =\n      \"^adl\\\\.nav\\\\.request_valid\\\\.(choice|jump)\\\\.{target=\\\\S{0,}([a-zA-Z0-9-_]+)}$\";\n    if (stringMatches(CMIElement, adlNavRequestRegex)) {\n      const matches = CMIElement.match(adlNavRequestRegex);\n      const request = matches[1];\n      const target = matches[2].replace(\"{target=\", \"\").replace(\"}\", \"\");\n      if (request === \"choice\" || request === \"jump\") {\n        if (this.settings.scoItemIdValidator) {\n          return String(this.settings.scoItemIdValidator(target));\n        }\n        // If we have extracted IDs from sequencing, use those exclusively\n        if (this._extractedScoItemIds.length > 0) {\n          return String(this._extractedScoItemIds.includes(target));\n        }\n        // Otherwise use the scoItemIds from settings\n        return String(this.settings.scoItemIds.includes(target));\n      }\n    }\n    return this.getValue(\"GetValue\", true, CMIElement);\n  }\n\n  /**\n   * SetValue function from SCORM 2004 Spec\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement: string, value: any): string {\n    // Proceed with regular setting for non-objective elements or fallback behavior\n    return this.setValue(\"SetValue\", \"Commit\", true, CMIElement, value);\n  }\n\n  /**\n   * Commit function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit(): string {\n    if (this.settings.asyncCommit) {\n      this.scheduleCommit(500, \"Commit\");\n    } else {\n      (async () => {\n        await this.commit(\"Commit\", false);\n      })();\n    }\n    return global_constants.SCORM_TRUE;\n  }\n\n  /**\n   * GetLastError function from SCORM 2004 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError(): string {\n    return this.getLastError(\"GetLastError\");\n  }\n\n  /**\n   * GetErrorString function from SCORM 2004 Spec\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode: string | number): string {\n    return this.getErrorString(\"GetErrorString\", CMIErrorCode);\n  }\n\n  /**\n   * GetDiagnostic function from SCORM 2004 Spec\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode: string | number): string {\n    return this.getDiagnostic(\"GetDiagnostic\", CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object - delegates to CMIValueHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  override setCMIValue(CMIElement: string, value: any): string {\n    // Check if we're updating a global or local objective\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      const parts = CMIElement.split(\".\");\n      const index = Number(parts[2]);\n      const element_base = `cmi.objectives.${index}`;\n\n      let objective_id;\n      const setting_id = stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\\\\.id\");\n\n      if (setting_id) {\n        // If we're setting the objective ID, capture it directly\n        objective_id = value;\n      } else {\n        // Find existing objective ID if available\n        const objective = this.cmi.objectives.findObjectiveByIndex(index);\n        objective_id = objective ? objective.id : undefined;\n      }\n\n      // Check if the objective ID matches a global objective\n      const is_global = objective_id && this.settings.globalObjectiveIds.includes(objective_id);\n\n      if (is_global) {\n        // Locate or create an entry in _globalObjectives for the global objective\n        let global_index = this._globalObjectives.findIndex((obj) => obj.id === objective_id);\n\n        if (global_index === -1) {\n          global_index = this._globalObjectives.length;\n          const newGlobalObjective = new CMIObjectivesObject();\n          newGlobalObjective.id = objective_id;\n          this._globalObjectives.push(newGlobalObjective);\n        }\n\n        // Update the global objective\n        const global_element = CMIElement.replace(\n          element_base,\n          `_globalObjectives.${global_index}`,\n        );\n        this._commonSetCMIValue(\"SetGlobalObjectiveValue\", true, global_element, value);\n      }\n    }\n    return this._commonSetCMIValue(\"SetValue\", true, CMIElement, value);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array - delegates to CMIElementHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI|null}\n   */\n  getChildElement(CMIElement: string, value: any, foundFirstIndex: boolean): BaseCMI | null {\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      return new CMIObjectivesObject();\n    }\n\n    if (foundFirstIndex) {\n      if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+\")) {\n        return this.createCorrectResponsesObject(CMIElement, value);\n      } else if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+\")) {\n        return new CMIInteractionsObjectivesObject();\n      }\n    } else if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\")) {\n      return new CMIInteractionsObject();\n    }\n\n    if (stringMatches(CMIElement, \"cmi\\\\.comments_from_learner\\\\.\\\\d+\")) {\n      return new CMICommentsObject();\n    } else if (stringMatches(CMIElement, \"cmi\\\\.comments_from_lms\\\\.\\\\d+\")) {\n      return new CMICommentsObject(true);\n    }\n\n    if (stringMatches(CMIElement, \"adl\\\\.data\\\\.\\\\d+\")) {\n      return new ADLDataObject();\n    }\n\n    return null;\n  }\n\n  /**\n   * Creates a correct responses object for an interaction - delegates to CMIElementHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {BaseCMI|null}\n   */\n  private createCorrectResponsesObject(CMIElement: string, value: any): BaseCMI | null {\n    const parts = CMIElement.split(\".\");\n    const index = Number(parts[2]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    if (this.isInitialized()) {\n      if (typeof interaction === \"undefined\" || !interaction.type) {\n        this.throwSCORMError(CMIElement, scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED, CMIElement);\n        return null;\n      } else {\n        this.checkDuplicateChoiceResponse(CMIElement, interaction, value);\n        const response_type = CorrectResponses[interaction.type];\n        if (response_type) {\n          this.checkValidResponseType(CMIElement, response_type, value, interaction.type);\n        } else {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.GENERAL_SET_FAILURE,\n            `Incorrect Response Type: ${interaction.type}`,\n          );\n          return null;\n        }\n      }\n    }\n\n    if (this.lastErrorCode === \"0\") {\n      return new CMIInteractionsCorrectResponsesObject(interaction);\n    }\n\n    return null;\n  }\n\n  /**\n   * Checks for valid response types - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {ResponseType} response_type\n   * @param {any} value\n   * @param {string} interaction_type\n   */\n  checkValidResponseType(\n    CMIElement: string,\n    response_type: ResponseType,\n    value: any,\n    interaction_type: string,\n  ) {\n    let nodes = [];\n    if (response_type?.delimiter) {\n      nodes = String(value).split(response_type.delimiter);\n    } else {\n      nodes[0] = value;\n    }\n\n    if (nodes.length > 0 && nodes.length <= response_type.max) {\n      this.checkCorrectResponseValue(CMIElement, interaction_type, nodes, value);\n    } else if (nodes.length > response_type.max) {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.GENERAL_SET_FAILURE,\n        `Data Model Element Pattern Too Long: ${value}`,\n      );\n    }\n  }\n\n  /**\n   * Checks for duplicate 'choice' responses - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {CMIInteractionsObject} interaction\n   * @param {any} value\n   */\n  checkDuplicateChoiceResponse(CMIElement: string, interaction: CMIInteractionsObject, value: any) {\n    const interaction_count = interaction.correct_responses._count;\n    if (interaction.type === \"choice\") {\n      for (let i = 0; i < interaction_count && this.lastErrorCode === \"0\"; i++) {\n        const response = interaction.correct_responses.childArray[i];\n        if (response.pattern === value) {\n          this.throwSCORMError(CMIElement, scorm2004_errors.GENERAL_SET_FAILURE, `${value}`);\n        }\n      }\n    }\n  }\n\n  /**\n   * Validate correct response - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {*} value\n   */\n  validateCorrectResponse(CMIElement: string, value: any) {\n    const parts = CMIElement.split(\".\");\n    const index = Number(parts[2]);\n    const pattern_index = Number(parts[4]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    const interaction_count = interaction.correct_responses._count;\n    this.checkDuplicateChoiceResponse(CMIElement, interaction, value);\n\n    const response_type = CorrectResponses[interaction.type];\n    if (typeof response_type.limit === \"undefined\" || interaction_count <= response_type.limit) {\n      this.checkValidResponseType(CMIElement, response_type, value, interaction.type);\n\n      if (\n        (this.lastErrorCode === \"0\" &&\n          (!response_type.duplicate ||\n            !this.checkDuplicatedPattern(interaction.correct_responses, pattern_index, value))) ||\n        (this.lastErrorCode === \"0\" && value === \"\")\n      ) {\n        // do nothing, we want the inverse\n      } else {\n        if (this.lastErrorCode === \"0\") {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.GENERAL_SET_FAILURE,\n            `Data Model Element Pattern Already Exists: ${CMIElement} - ${value}`,\n          );\n        }\n      }\n    } else {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.GENERAL_SET_FAILURE,\n        `Data Model Element Collection Limit Reached: ${CMIElement} - ${value}`,\n      );\n    }\n  }\n\n  /**\n   * Gets a value from the CMI Object - delegates to CMIValueHandlerModule\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  override getCMIValue(CMIElement: string): any {\n    return this._commonGetCMIValue(\"GetValue\", true, CMIElement);\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {(string|number)} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  override getLmsErrorMessageDetails(errorNumber: string | number, detail: boolean): string {\n    let basicMessage = \"\";\n    let detailMessage = \"\";\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (scorm2004_constants.error_descriptions[errorNumber]) {\n      basicMessage = scorm2004_constants.error_descriptions[errorNumber].basicMessage;\n      detailMessage = scorm2004_constants.error_descriptions[errorNumber].detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Check to see if a correct_response value has been duplicated - delegates to ValidationModule\n   * @param {CMIArray} correct_response\n   * @param {number} current_index\n   * @param {*} value\n   * @return {boolean}\n   */\n  checkDuplicatedPattern(correct_response: CMIArray, current_index: number, value: any): boolean {\n    let found = false;\n    const count = correct_response._count;\n    for (let i = 0; i < count && !found; i++) {\n      if (i !== current_index && correct_response.childArray[i] === value) {\n        found = true;\n      }\n    }\n    return found;\n  }\n\n  /**\n   * Checks for a valid correct_response value - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {string} interaction_type\n   * @param {Array} nodes\n   * @param {*} value\n   */\n  checkCorrectResponseValue(\n    CMIElement: string,\n    interaction_type: string,\n    nodes: Array<any>,\n    value: any,\n  ) {\n    const response = CorrectResponses[interaction_type];\n    if (!response) {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.TYPE_MISMATCH,\n        `Incorrect Response Type: ${interaction_type}`,\n      );\n      return;\n    }\n    const formatRegex = new RegExp(response.format);\n    for (let i = 0; i < nodes.length && this.lastErrorCode === \"0\"; i++) {\n      if (interaction_type.match(\"^(fill-in|long-fill-in|matching|performance|sequencing)$\")) {\n        nodes[i] = this.removeCorrectResponsePrefixes(CMIElement, nodes[i]);\n      }\n\n      if (response?.delimiter2) {\n        const values = nodes[i].split(response.delimiter2);\n        if (values.length === 2) {\n          const matches = values[0].match(formatRegex);\n          if (!matches) {\n            this.throwSCORMError(\n              CMIElement,\n              scorm2004_errors.TYPE_MISMATCH,\n              `${interaction_type}: ${value}`,\n            );\n          } else {\n            if (!response.format2 || !values[1].match(new RegExp(response.format2))) {\n              this.throwSCORMError(\n                CMIElement,\n                scorm2004_errors.TYPE_MISMATCH,\n                `${interaction_type}: ${value}`,\n              );\n            }\n          }\n        } else {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.TYPE_MISMATCH,\n            `${interaction_type}: ${value}`,\n          );\n        }\n      } else {\n        const matches = nodes[i].match(formatRegex);\n        if ((!matches && value !== \"\") || (!matches && interaction_type === \"true-false\")) {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.TYPE_MISMATCH,\n            `${interaction_type}: ${value}`,\n          );\n        } else {\n          if (interaction_type === \"numeric\" && nodes.length > 1) {\n            if (Number(nodes[0]) > Number(nodes[1])) {\n              this.throwSCORMError(\n                CMIElement,\n                scorm2004_errors.TYPE_MISMATCH,\n                `${interaction_type}: ${value}`,\n              );\n            }\n          } else {\n            if (nodes[i] !== \"\" && response.unique) {\n              for (let j = 0; j < i && this.lastErrorCode === \"0\"; j++) {\n                if (nodes[i] === nodes[j]) {\n                  this.throwSCORMError(\n                    CMIElement,\n                    scorm2004_errors.TYPE_MISMATCH,\n                    `${interaction_type}: ${value}`,\n                  );\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove prefixes from correct_response - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {string} node\n   * @return {*}\n   */\n  removeCorrectResponsePrefixes(CMIElement: string, node: string): any {\n    let seenOrder = false;\n    let seenCase = false;\n    let seenLang = false;\n\n    const prefixRegex = new RegExp(\"^({(lang|case_matters|order_matters)=([^}]+)})\");\n    let matches = node.match(prefixRegex);\n    let langMatches = null;\n    while (matches) {\n      switch (matches[2]) {\n        case \"lang\":\n          langMatches = node.match(scorm2004_regex.CMILangcr);\n          if (langMatches) {\n            const lang = langMatches[3];\n            if (lang !== undefined && lang.length > 0) {\n              if (!ValidLanguages.includes(lang.toLowerCase())) {\n                this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n              }\n            }\n          }\n          seenLang = true;\n          break;\n        case \"case_matters\":\n          if (!seenLang && !seenOrder && !seenCase) {\n            if (matches[3] !== \"true\" && matches[3] !== \"false\") {\n              this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n            }\n          }\n\n          seenCase = true;\n          break;\n        case \"order_matters\":\n          if (!seenCase && !seenLang && !seenOrder) {\n            if (matches[3] !== \"true\" && matches[3] !== \"false\") {\n              this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n            }\n          }\n\n          seenOrder = true;\n          break;\n      }\n      node = node.substring(matches[1].length);\n      matches = node.match(prefixRegex);\n    }\n\n    return node;\n  }\n\n  /**\n   * Replace the whole API with another\n   * @param {Scorm2004Impl} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI: Scorm2004Impl) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.adl = newAPI.adl;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit - delegates to DataSerializationModule\n   *\n   * @param {boolean} terminateCommit\n   * @return {object|Array}\n   */\n  renderCommitCMI(terminateCommit: boolean): StringKeyMap | Array<any> {\n    const cmiExport: StringKeyMap = this.renderCMIToJSONObject();\n\n    if (terminateCommit) {\n      (cmiExport.cmi as any).total_time = (this.cmi as any).getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened: StringKeyMap = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case \"flattened\":\n        return Utilities.flatten(cmiExport);\n      case \"params\":\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case \"json\":\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit - delegates to DataSerializationModule\n   * @param {boolean} terminateCommit\n   * @return {CommitObject}\n   */\n  renderCommitObject(terminateCommit: boolean): CommitObject {\n    const cmiExport = this.renderCommitCMI(terminateCommit);\n    const totalTimeDuration = this.cmi.getCurrentTotalTime();\n    const totalTimeSeconds = Utilities.getDurationAsSeconds(\n      totalTimeDuration,\n      scorm2004_regex.CMITimespan,\n    );\n\n    let completionStatus = CompletionStatus.UNKNOWN;\n    let successStatus = SuccessStatus.UNKNOWN;\n    if (this.cmi.completion_status) {\n      if (this.cmi.completion_status === \"completed\") {\n        completionStatus = CompletionStatus.COMPLETED;\n      } else if (this.cmi.completion_status === \"incomplete\") {\n        completionStatus = CompletionStatus.INCOMPLETE;\n      }\n    }\n    if (this.cmi.success_status) {\n      if (this.cmi.success_status === \"passed\") {\n        successStatus = SuccessStatus.PASSED;\n      } else if (this.cmi.success_status === \"failed\") {\n        successStatus = SuccessStatus.FAILED;\n      }\n    }\n\n    const score = this.cmi.score;\n    let scoreObject: ScoreObject = null;\n    if (score) {\n      scoreObject = {};\n\n      if (!Number.isNaN(Number.parseFloat(score.raw))) {\n        scoreObject.raw = Number.parseFloat(score.raw);\n      }\n      if (!Number.isNaN(Number.parseFloat(score.min))) {\n        scoreObject.min = Number.parseFloat(score.min);\n      }\n      if (!Number.isNaN(Number.parseFloat(score.max))) {\n        scoreObject.max = Number.parseFloat(score.max);\n      }\n      if (!Number.isNaN(Number.parseFloat(score.scaled))) {\n        scoreObject.scaled = Number.parseFloat(score.scaled);\n      }\n    }\n\n    const commitObject: CommitObject = {\n      completionStatus: completionStatus,\n      successStatus: successStatus,\n      totalTimeSeconds: totalTimeSeconds,\n      runtimeData: cmiExport as StringKeyMap,\n    };\n    if (scoreObject) {\n      commitObject.score = scoreObject;\n    }\n    return commitObject;\n  }\n\n  /**\n   * Attempts to store the data to the LMS - delegates to DataSerializationModule\n   *\n   * @param {boolean} terminateCommit\n   * @return {ResultObject}\n   */\n  async storeData(terminateCommit: boolean): Promise<ResultObject> {\n    if (terminateCommit) {\n      if (this.cmi.mode === \"normal\") {\n        if (this.cmi.credit === \"credit\") {\n          if (this.cmi.completion_threshold && this.cmi.progress_measure) {\n            if (this.cmi.progress_measure >= this.cmi.completion_threshold) {\n              this.cmi.completion_status = \"completed\";\n            } else {\n              this.cmi.completion_status = \"incomplete\";\n            }\n          }\n          if (this.cmi.scaled_passing_score && this.cmi.score.scaled) {\n            if (this.cmi.score.scaled >= this.cmi.scaled_passing_score) {\n              this.cmi.success_status = \"passed\";\n            } else {\n              this.cmi.success_status = \"failed\";\n            }\n          }\n        }\n      }\n    }\n\n    let navRequest = false;\n    if (\n      this.adl.nav.request !==\n        ((this.startingData?.adl as StringKeyMap)?.nav as StringKeyMap)?.request &&\n      this.adl.nav.request !== \"_none_\"\n    ) {\n      navRequest = true;\n    }\n\n    const commitObject = this.getCommitObject(terminateCommit);\n    if (typeof this.settings.lmsCommitUrl === \"string\") {\n      const result = await this.processHttpRequest(\n        this.settings.lmsCommitUrl,\n        {\n          commitObject: commitObject,\n        },\n        terminateCommit,\n      );\n\n      // Check if this is a sequencing call, and then call the necessary JS\n      if (\n        navRequest &&\n        result.navRequest !== undefined &&\n        result.navRequest !== \"\" &&\n        typeof result.navRequest === \"string\"\n      ) {\n        Function(`\"use strict\";(() => { ${result.navRequest} })()`)();\n      } else if (result?.navRequest && !navRequest) {\n        if (\n          typeof result.navRequest === \"object\" &&\n          Object.hasOwnProperty.call(result.navRequest, \"name\")\n        ) {\n          this.processListeners(result.navRequest.name as string, result.navRequest.data as string);\n        }\n      }\n\n      return result;\n    }\n\n    return {\n      result: \"true\",\n      errorCode: 0,\n    };\n  }\n\n  /**\n   * Configure sequencing based on provided settings\n   * @param {SequencingSettings} sequencingSettings - The sequencing settings\n   */\n  private configureSequencing(sequencingSettings: SequencingSettings): void {\n    // Configure activity tree\n    if (sequencingSettings.activityTree) {\n      this.configureActivityTree(sequencingSettings.activityTree);\n    }\n\n    // Configure sequencing rules\n    if (sequencingSettings.sequencingRules) {\n      this.configureSequencingRules(sequencingSettings.sequencingRules);\n    }\n\n    // Configure sequencing controls\n    if (sequencingSettings.sequencingControls) {\n      this.configureSequencingControls(sequencingSettings.sequencingControls);\n    }\n\n    // Configure rollup rules\n    if (sequencingSettings.rollupRules) {\n      this.configureRollupRules(sequencingSettings.rollupRules);\n    }\n  }\n\n  /**\n   * Configure activity tree based on provided settings\n   * @param {ActivitySettings} activityTreeSettings - The activity tree settings\n   */\n  private configureActivityTree(activityTreeSettings: ActivitySettings): void {\n    // Create root activity\n    const rootActivity = this.createActivity(activityTreeSettings);\n\n    // Create activity tree\n    const activityTree = this._sequencing.activityTree;\n    activityTree.root = rootActivity;\n\n    // Extract activity IDs for use as scoItemIds\n    this._extractedScoItemIds = this.extractActivityIds(rootActivity);\n  }\n\n  /**\n   * Extract all activity IDs from an activity and its children\n   * @param {Activity} activity - The activity to extract IDs from\n   * @return {string[]} - Array of activity IDs\n   */\n  private extractActivityIds(activity: Activity): string[] {\n    const ids = [activity.id];\n\n    // Recursively extract IDs from children\n    for (const child of activity.children) {\n      ids.push(...this.extractActivityIds(child));\n    }\n\n    return ids;\n  }\n\n  /**\n   * Create an activity from settings\n   * @param {ActivitySettings} activitySettings - The activity settings\n   * @return {Activity} - The created activity\n   */\n  private createActivity(activitySettings: ActivitySettings): Activity {\n    // Create activity\n    const activity = new Activity(activitySettings.id, activitySettings.title);\n\n    // Set activity properties\n    if (activitySettings.isVisible !== undefined) {\n      activity.isVisible = activitySettings.isVisible;\n    }\n    if (activitySettings.isActive !== undefined) {\n      activity.isActive = activitySettings.isActive;\n    }\n    if (activitySettings.isSuspended !== undefined) {\n      activity.isSuspended = activitySettings.isSuspended;\n    }\n    if (activitySettings.isCompleted !== undefined) {\n      activity.isCompleted = activitySettings.isCompleted;\n    }\n\n    // Create child activities\n    if (activitySettings.children) {\n      for (const childSettings of activitySettings.children) {\n        const childActivity = this.createActivity(childSettings);\n        activity.addChild(childActivity);\n      }\n    }\n\n    return activity;\n  }\n\n  /**\n   * Configure sequencing rules based on provided settings\n   * @param {SequencingRulesSettings} sequencingRulesSettings - The sequencing rules settings\n   */\n  private configureSequencingRules(sequencingRulesSettings: SequencingRulesSettings): void {\n    const sequencingRules = this._sequencing.sequencingRules;\n\n    // Configure pre-condition rules\n    if (sequencingRulesSettings.preConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.preConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addPreConditionRule(rule);\n      }\n    }\n\n    // Configure exit condition rules\n    if (sequencingRulesSettings.exitConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.exitConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addExitConditionRule(rule);\n      }\n    }\n\n    // Configure post-condition rules\n    if (sequencingRulesSettings.postConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.postConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addPostConditionRule(rule);\n      }\n    }\n  }\n\n  /**\n   * Create a sequencing rule from settings\n   * @param {SequencingRuleSettings} ruleSettings - The sequencing rule settings\n   * @return {SequencingRule} - The created sequencing rule\n   */\n  private createSequencingRule(ruleSettings: SequencingRuleSettings): SequencingRule {\n    // Create rule\n    const rule = new SequencingRule(ruleSettings.action, ruleSettings.conditionCombination);\n\n    // Add conditions\n    for (const conditionSettings of ruleSettings.conditions) {\n      const condition = new RuleCondition(\n        conditionSettings.condition,\n        conditionSettings.operator,\n        new Map(Object.entries(conditionSettings.parameters || {})),\n      );\n      rule.addCondition(condition);\n    }\n\n    return rule;\n  }\n\n  /**\n   * Configure sequencing controls based on provided settings\n   * @param {SequencingControlsSettings} sequencingControlsSettings - The sequencing controls settings\n   */\n  private configureSequencingControls(\n    sequencingControlsSettings: SequencingControlsSettings,\n  ): void {\n    const sequencingControls = this._sequencing.sequencingControls;\n\n    // Set sequencing control properties\n    if (sequencingControlsSettings.enabled !== undefined) {\n      sequencingControls.enabled = sequencingControlsSettings.enabled;\n    }\n    if (sequencingControlsSettings.choiceExit !== undefined) {\n      sequencingControls.choiceExit = sequencingControlsSettings.choiceExit;\n    }\n    if (sequencingControlsSettings.flow !== undefined) {\n      sequencingControls.flow = sequencingControlsSettings.flow;\n    }\n    if (sequencingControlsSettings.forwardOnly !== undefined) {\n      sequencingControls.forwardOnly = sequencingControlsSettings.forwardOnly;\n    }\n    if (sequencingControlsSettings.useCurrentAttemptObjectiveInfo !== undefined) {\n      sequencingControls.useCurrentAttemptObjectiveInfo =\n        sequencingControlsSettings.useCurrentAttemptObjectiveInfo;\n    }\n    if (sequencingControlsSettings.useCurrentAttemptProgressInfo !== undefined) {\n      sequencingControls.useCurrentAttemptProgressInfo =\n        sequencingControlsSettings.useCurrentAttemptProgressInfo;\n    }\n    if (sequencingControlsSettings.preventActivation !== undefined) {\n      sequencingControls.preventActivation = sequencingControlsSettings.preventActivation;\n    }\n    if (sequencingControlsSettings.constrainChoice !== undefined) {\n      sequencingControls.constrainChoice = sequencingControlsSettings.constrainChoice;\n    }\n    if (sequencingControlsSettings.rollupObjectiveSatisfied !== undefined) {\n      sequencingControls.rollupObjectiveSatisfied =\n        sequencingControlsSettings.rollupObjectiveSatisfied;\n    }\n    if (sequencingControlsSettings.rollupProgressCompletion !== undefined) {\n      sequencingControls.rollupProgressCompletion =\n        sequencingControlsSettings.rollupProgressCompletion;\n    }\n    if (sequencingControlsSettings.objectiveMeasureWeight !== undefined) {\n      sequencingControls.objectiveMeasureWeight = sequencingControlsSettings.objectiveMeasureWeight;\n    }\n  }\n\n  /**\n   * Configure rollup rules based on provided settings\n   * @param {RollupRulesSettings} rollupRulesSettings - The rollup rules settings\n   */\n  private configureRollupRules(rollupRulesSettings: RollupRulesSettings): void {\n    const rollupRules = this._sequencing.rollupRules;\n\n    // Configure rollup rules\n    if (rollupRulesSettings.rules) {\n      for (const ruleSettings of rollupRulesSettings.rules) {\n        const rule = this.createRollupRule(ruleSettings);\n        rollupRules.addRule(rule);\n      }\n    }\n  }\n\n  /**\n   * Create a rollup rule from settings\n   * @param {RollupRuleSettings} ruleSettings - The rollup rule settings\n   * @return {RollupRule} - The created rollup rule\n   */\n  private createRollupRule(ruleSettings: RollupRuleSettings): RollupRule {\n    // Create rule\n    const rule = new RollupRule(\n      ruleSettings.action,\n      ruleSettings.consideration,\n      ruleSettings.minimumCount,\n      ruleSettings.minimumPercent,\n    );\n\n    // Add conditions\n    for (const conditionSettings of ruleSettings.conditions) {\n      const condition = new RollupCondition(\n        conditionSettings.condition,\n        new Map(Object.entries(conditionSettings.parameters || {})),\n      );\n      rule.addCondition(condition);\n    }\n\n    return rule;\n  }\n}\n\nexport default Scorm2004Impl;\n"],"names":["global_constants","SCORM_TRUE","SCORM_FALSE","STATE_NOT_INITIALIZED","STATE_INITIALIZED","STATE_TERMINATED","scorm12_constants","score_children","comments_children","error_descriptions","basicMessage","detailMessage","scorm2004_constants","cmi_children","objectives_children","correct_responses_children","student_data_children","student_preference_children","interactions_children","adl_data_children","SECONDS_PER_SECOND","SECONDS_PER_MINUTE","SECONDS_PER_HOUR","SECONDS_PER_DAY","designations","D","H","M","S","getSecondsAsISODuration","memoize","seconds","duration","remainder","designationEntries","Object","entries","forEach","_ref","designationsKey","current_seconds","value","Math","floor","countDecimals","Number","toFixed","needsTimeSeparator","indexOf","includes","getDurationAsSeconds","durationRegex","RegExp","match","years","_","days","hours","minutes","exec","result","durationStr","regexStr","toString","addTwoDurations","first","second","regex","flatten","data","recurse","cur","prop","Array","isArray","item","i","length","keys","filter","p","prototype","hasOwnProperty","call","isEmpty","unflatten","pattern","from","m","num","String","parts","split","formatMessage","functionName","message","CMIElement","baseLength","paddedFunction","padEnd","messageString","CMIElementBaseLength","stringMatches","str","tester","fn","keyFn","cache","Map","_len","arguments","args","_key","key","JSON","stringify","has","get","set","NAVBoolean","UNKNOWN","TRUE","FALSE","SuccessStatus","PASSED","FAILED","CompletionStatus","COMPLETED","INCOMPLETE","LogLevelEnum","DEBUG","INFO","WARN","ERROR","NONE","DefaultSettings","autocommit","autocommitSeconds","asyncCommit","sendFullCommit","lmsCommitUrl","dataCommitFormat","commitRequestDataType","autoProgress","logLevel","selfReportSessionTime","alwaysSendTotalTime","renderCommonCommitFields","strict_errors","xhrHeaders","xhrWithCredentials","fetchMode","responseHandler","response","httpResult","json","text","responseText","parse","e","status","errorCode","requestHandler","commitObject","onLogMessage","defaultLogHandler","scoItemIds","scoItemIdValidator","globalObjectiveIds","messageLevel","logMessage","console","error","warn","info","debug","log","ScheduledCommit","constructor","API","when","callback","_cancelled","_API","_timeout","setTimeout","wrapper","bind","_callback","cancel","clearTimeout","commit","HttpService","settings","error_codes","processHttpRequest","url","params","immediate","undefined","apiLog","processListeners","genericError","GENERAL","performFetch","then","transformResponse","process","fetch","method","mode","body","join","headers","credentials","keepalive","updateSettings","EventService","listenerMap","listenerCount","parseListenerName","listenerName","listenerSplit","replace","on","listenerFunctions","listenerFunction","parsedListener","listeners","push","off","removeIndex","findIndex","obj","splice","delete","clear","newListeners","listener","listenerHasCMIElement","CMIElementsMatch","endsWith","prefix","slice","startsWith","reset","SerializationService","loadFromFlattenedJSON","setCMIValue","isNotInitialized","setStartingData","int_pattern","obj_pattern","interactions","objectives","others","intMatch","index","field","objMatch","sort","a","b","localeCompare","processItems","items","loadFromJSON","currentCMIElement","tempCMIElement","renderCMIToJSONString","cmi","k","v","renderCMIToJSONObject","getCommitObject","terminateCommit","renderCommitObject","renderCommitCMI","apiLogLevel","shouldTerminateCommit","BaseScormValidationError","Error","_errorCode","setPrototypeOf","ValidationError","errorMessage","detailedMessage","_detailedMessage","_errorMessage","LoggingService","_logLevel","_logHandler","getInstance","_instance","setLogLevel","level","getLogLevel","setLogHandler","handler","shouldLog","numericMessageLevel","getNumericLevel","numericLogLevel","getLoggingService","ErrorHandlingService","errorCodes","getLmsErrorMessageDetails","loggingService","_lastErrorCode","_errorCodes","_apiLog","_getLmsErrorMessageDetails","_loggingService","lastErrorCode","throwSCORMError","errorNumber","formattedMessage","clearSCORMError","success","handleValueAccessException","returnValue","validationError","errorType","name","stackTrace","stack","errorDetails","jsonError","createErrorHandlingService","BaseCMI","cmi_element","jsonString","_initialized","_cmi_element","initialized","start_time","_start_time","initialize","setStartTime","Date","getTime","BaseRootCMI","global_errors","INITIALIZATION_FAILED","INITIALIZED","TERMINATED","TERMINATION_FAILURE","TERMINATION_BEFORE_INIT","MULTIPLE_TERMINATION","RETRIEVE_BEFORE_INIT","RETRIEVE_AFTER_TERM","STORE_BEFORE_INIT","STORE_AFTER_TERM","COMMIT_BEFORE_INIT","COMMIT_AFTER_TERM","ARGUMENT_ERROR","CHILDREN_ERROR","COUNT_ERROR","GENERAL_GET_FAILURE","GENERAL_SET_FAILURE","GENERAL_COMMIT_FAILURE","UNDEFINED_DATA_MODEL","UNIMPLEMENTED_ELEMENT","VALUE_NOT_INITIALIZED","INVALID_SET_VALUE","READ_ONLY_ELEMENT","WRITE_ONLY_ELEMENT","TYPE_MISMATCH","VALUE_OUT_OF_RANGE","DEPENDENCY_NOT_ESTABLISHED","scorm12_errors","scorm2004_errors","MULTIPLE_TERMINATIONS","CMIArray","__children","children","_errorClass","errorClass","childArray","wipe","_children","_count","toJSON","BaseAPI","httpService","eventService","serializationService","cmiDataService","errorHandlingService","_settings","new","TypeError","currentState","_error_codes","_httpService","_eventService","element","_serializationService","_errorHandlingService","detail","commonReset","clearScheduledCommit","startingData","callbackName","initializeMessage","terminationMessage","isInitialized","isTerminated","previousSettings","terminate","checkTerminated","checkState","storeData","getValue","getCMIValue","setValue","commitCallback","scheduleCommit","getLastError","getErrorString","CMIErrorCode","getDiagnostic","beforeInitError","afterTermError","_errorNumber","_CMIElement","_value","_commonSetCMIValue","methodName","scorm2004","structure","refObject","foundFirstIndex","invalidErrorMessage","invalidErrorCode","idx","attribute","substring","_checkObjectHasProperty","validateCorrectResponse","parseInt","isNaN","newChild","getChildElement","_commonGetCMIValue","uninitializedErrorMessage","_isTargetValid","target","StringKeyMap","getOwnPropertyDescriptor","getPrototypeOf","Scorm2004ValidationError","checkValidFormat","regexPattern","allowEmptyString","formatRegex","matches","valueKey","checkValidRange","rangePattern","ranges","check2004ValidFormat","check2004ValidRange","scorm12_regex","CMIString256","CMIString4096","CMISInteger","CMIDecimal","CMIIdentifier","score_range","audio_range","speed_range","weighting_range","text_range","scorm2004_regex","CMIString200","CMIString250","CMIString1000","CMIString4000","CMIString64000","CMILang","CMILangString250","CMILangcr","CMILangString250cr","CMILangString4000","CMITime","CMITimespan","CMIInteger","CMIShortIdentifier","CMILongIdentifier","CMIFeedback","CMICStatus","CMISStatus","CMIExit","CMIType","CMIResult","NAVEvent","NAVTarget","scaled_range","progress_range","CMILearnerPreference","_audio_level","_language","_delivery_speed","_audio_captioning","audio_level","language","delivery_speed","audio_captioning","LearnerResponses","format","max","delimiter","unique","choice","matching","format2","delimiter2","performance","sequencing","likert","numeric","other","CorrectResponses","duplicate","limit","delimiter3","CMIInteractions","CMIInteractionsObject","_id","_type","_timestamp","_weighting","_learner_response","_result","_latency","_description","correct_responses","id","type","timestamp","weighting","learner_response","nodes","response_type","values","j","latency","description","CMIInteractionsObjectivesObject","CMIInteractionsCorrectResponsesObject","parent","_pattern","_parent","interactionType","isValid","Scorm12ValidationError","check12ValidFormat","check12ValidRange","ValidationService","validateScore","decimalRegex","scoreRange","invalidTypeCode","invalidRangeCode","validateScorm12Audio","validateScorm12Language","validateScorm12Speed","validateScorm12Text","validateReadOnly","validationService","CMIScore","_raw","_min","__score_range","_max","__invalid_error_code","__invalid_type_code","__invalid_range_code","__decimal_regex","__error_class","raw","min","Scorm2004CMIScore","_scaled","scaled","CMICommentsFromLMS","CMICommentsFromLearner","CMICommentsObject","readOnlyAfterInit","_comment","_location","_readOnlyAfterInit","comment","location","CMIObjectives","findObjectiveById","find","objective","findObjectiveByIndex","setObjectiveByIndex","CMIObjectivesObject","_success_status","_completion_status","_progress_measure","score","success_status","completion_status","progress_measure","CMIMetadata","__version","_version","CMILearner","_learner_id","_learner_name","learner_id","learner_name","CMIStatus","CMISession","_entry","_exit","_session_time","_total_time","entry","exit","session_time","total_time","getCurrentTotalTime","sessionTime","startTime","Util","CMIContent","_launch_data","_suspend_data","launch_data","suspend_data","CMISettings","_credit","_mode","_time_limit_action","_max_time_allowed","credit","time_limit_action","max_time_allowed","CMIThresholds","_scaled_passing_score","_completion_threshold","scaled_passing_score","completion_threshold","CMI","metadata","learner","session","content","thresholds","learner_preference","comments_from_learner","comments_from_lms","ADL","ADLData","_sequencing","nav","ADLNav","adlNav","_request","request_valid","ADLNavRequestValid","request","processNavigationRequest","ADLDataObject","_store","store","_continue","_previous","_choice","_jump","continue","previous","jump","RuleActionType","RuleCondition","condition","operator","parameters","_condition","_operator","_parameters","evaluate","activity","successStatus","objectiveMeasureStatus","greaterThanValue","objectiveNormalizedMeasure","lessThanValue","isCompleted","completionStatus","attemptCount","attemptLimit","fromEntries","SequencingRule","action","conditionCombination","_conditions","_action","_conditionCombination","conditions","addCondition","removeCondition","every","some","SequencingRules","_preConditionRules","_exitConditionRules","_postConditionRules","preConditionRules","addPreConditionRule","rule","exitConditionRules","addExitConditionRule","postConditionRules","addPostConditionRule","evaluatePreConditionRules","evaluateExitConditionRules","evaluatePostConditionRules","RollupCondition","RollupRule","consideration","minimumCount","minimumPercent","_consideration","_minimumCount","_minimumPercent","matchingChildren","child","percent","RollupRules","_rules","rules","addRule","removeRule","processRollup","completionRollup","successRollup","_defaultCompletionRollup","_defaultSuccessRollup","allCompleted","anyIncomplete","allSatisfied","anyNotSatisfied","ValidLanguages","Activity","title","_title","_isVisible","_isActive","_isSuspended","_isCompleted","_completionStatus","_successStatus","_attemptCount","_attemptCompletionAmount","_attemptAbsoluteDuration","_attemptExperiencedDuration","_activityAbsoluteDuration","_activityExperiencedDuration","_objectiveSatisfiedStatus","_objectiveMeasureStatus","_objectiveNormalizedMeasure","addChild","removeChild","isVisible","isActive","isSuspended","incrementAttemptCount","attemptCompletionAmount","attemptAbsoluteDuration","attemptExperiencedDuration","activityAbsoluteDuration","activityExperiencedDuration","objectiveSatisfiedStatus","map","ActivityTree","_root","_currentActivity","_suspendedActivity","_activities","root","_addActivitiesToMap","currentActivity","suspendedActivity","getActivity","getAllActivities","getParent","getChildren","getSiblings","getNextSibling","siblings","getPreviousSibling","getFirstChild","getLastChild","getCommonAncestor","activity1","activity2","path1","current","unshift","SequencingControls","_enabled","_choiceExit","_flow","_forwardOnly","_useCurrentAttemptObjectiveInfo","_useCurrentAttemptProgressInfo","_preventActivation","_constrainChoice","_rollupObjectiveSatisfied","_rollupProgressCompletion","_objectiveMeasureWeight","enabled","choiceExit","flow","forwardOnly","useCurrentAttemptObjectiveInfo","useCurrentAttemptProgressInfo","preventActivation","constrainChoice","rollupObjectiveSatisfied","rollupProgressCompletion","objectiveMeasureWeight","isChoiceNavigationAllowed","isFlowNavigationAllowed","isForwardNavigationAllowed","isBackwardNavigationAllowed","Sequencing","_adlNav","_activityTree","_sequencingRules","_sequencingControls","_rollupRules","activityTree","sequencingRules","sequencingControls","rollupRules","preConditionAction","SKIP","DISABLED","HIDE_FROM_CHOICE","STOP_FORWARD_TRAVERSAL","processContinueRequest","processPreviousRequest","processExitRequest","processExitAllRequest","processAbandonRequest","processAbandonAllRequest","processSuspendAllRequest","nextActivity","exitConditionAction","EXIT_PARENT","EXIT_ALL","postConditionAction","RETRY","RETRY_ALL","CONTINUE","PREVIOUS","EXIT","previousActivity","_processRollupRecursive","Scorm2004Impl","mastery_override","_globalObjectives","_extractedScoItemIds","adl","configureSequencing","Initialize","lmsInitialize","Terminate","lmsFinish","GetValue","lmsGetValue","SetValue","lmsSetValue","Commit","lmsCommit","GetLastError","lmsGetLastError","GetErrorString","lmsGetErrorString","GetDiagnostic","lmsGetDiagnostic","version","globalObjectives","internalFinish","navActions","exitAll","abandon","abandonAll","choiceJumpRegex","groups","choice_target","jump_target","adlNavRequestRegex","element_base","objective_id","setting_id","is_global","global_index","newGlobalObjective","global_element","createCorrectResponsesObject","interaction","checkDuplicateChoiceResponse","checkValidResponseType","interaction_type","checkCorrectResponseValue","interaction_count","pattern_index","checkDuplicatedPattern","correct_response","current_index","found","count","removeCorrectResponsePrefixes","node","seenOrder","seenCase","seenLang","prefixRegex","langMatches","lang","toLowerCase","replaceWithAnotherScormAPI","newAPI","cmiExport","flattened","Utilities","totalTimeDuration","totalTimeSeconds","scoreObject","parseFloat","runtimeData","navRequest","Function","sequencingSettings","configureActivityTree","configureSequencingRules","configureSequencingControls","configureRollupRules","activityTreeSettings","rootActivity","createActivity","extractActivityIds","ids","activitySettings","childSettings","childActivity","sequencingRulesSettings","ruleSettings","createSequencingRule","conditionSettings","sequencingControlsSettings","rollupRulesSettings","createRollupRule"],"mappings":"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"}