{"version":3,"file":"scorm2004.js","sources":["../../src/constants/api_constants.ts","../../src/utilities.ts","../../src/constants/enums.ts","../../src/constants/default_settings.ts","../../src/types/scheduled_commit.ts","../../src/services/HttpService.ts","../../src/services/EventService.ts","../../src/services/SerializationService.ts","../../src/exceptions.ts","../../src/services/LoggingService.ts","../../src/services/ErrorHandlingService.ts","../../src/services/OfflineStorageService.ts","../../src/cmi/common/base_cmi.ts","../../src/constants/error_codes.ts","../../src/cmi/common/array.ts","../../src/BaseAPI.ts","../../src/exceptions/scorm2004_exceptions.ts","../../src/cmi/common/validation.ts","../../src/cmi/scorm2004/validation.ts","../../src/constants/regex.ts","../../src/cmi/scorm2004/learner_preference.ts","../../src/constants/response_constants.ts","../../src/cmi/scorm2004/interactions.ts","../../src/exceptions/scorm12_exceptions.ts","../../src/cmi/scorm12/validation.ts","../../src/services/ValidationService.ts","../../src/cmi/common/score.ts","../../src/cmi/scorm2004/score.ts","../../src/cmi/scorm2004/comments.ts","../../src/cmi/scorm2004/objectives.ts","../../src/cmi/scorm2004/metadata.ts","../../src/cmi/scorm2004/learner.ts","../../src/cmi/scorm2004/status.ts","../../src/cmi/scorm2004/session.ts","../../src/cmi/scorm2004/content.ts","../../src/cmi/scorm2004/settings.ts","../../src/cmi/scorm2004/thresholds.ts","../../src/cmi/scorm2004/cmi.ts","../../src/cmi/scorm2004/adl.ts","../../src/cmi/scorm2004/sequencing/sequencing_rules.ts","../../src/cmi/scorm2004/sequencing/rollup_rules.ts","../../src/constants/language_constants.ts","../../src/cmi/scorm2004/sequencing/sequencing_controls.ts","../../src/cmi/scorm2004/sequencing/activity.ts","../../src/cmi/scorm2004/sequencing/activity_tree.ts","../../src/cmi/scorm2004/sequencing/sequencing.ts","../../src/cmi/scorm2004/sequencing/rollup_process.ts","../../src/cmi/scorm2004/sequencing/selection_randomization.ts","../../src/cmi/scorm2004/sequencing/sequencing_process.ts","../../src/cmi/scorm2004/sequencing/overall_sequencing_process.ts","../../src/services/ActivityDeliveryService.ts","../../src/services/SequencingService.ts","../../src/Scorm2004API.ts"],"sourcesContent":["interface ErrorDescription {\n  basicMessage: string;\n  detailMessage: string;\n}\n\ninterface ErrorDescriptions {\n  [key: string]: ErrorDescription;\n}\n\ninterface ScormConstants {\n  cmi_children: string;\n  core_children: string;\n  score_children: string;\n  comments_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface AiccConstants extends ScormConstants {\n  student_demographics_children: string;\n  tries_children: string;\n  attempt_records_children: string;\n  paths_children: string;\n}\n\ninterface Scorm2004Constants {\n  cmi_children: string;\n  comments_children: string;\n  score_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  adl_data_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface GlobalConstants {\n  SCORM_TRUE: string;\n  SCORM_FALSE: string;\n  STATE_NOT_INITIALIZED: number;\n  STATE_INITIALIZED: number;\n  STATE_TERMINATED: number;\n}\n\nexport const global_constants: GlobalConstants = {\n  SCORM_TRUE: \"true\",\n  SCORM_FALSE: \"false\",\n  STATE_NOT_INITIALIZED: 0,\n  STATE_INITIALIZED: 1,\n  STATE_TERMINATED: 2,\n};\n\nexport const scorm12_constants: ScormConstants = {\n  // Children lists\n  cmi_children:\n    \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions\",\n  core_children:\n    \"student_id,student_name,lesson_location,credit,lesson_status,entry,score,total_time,lesson_mode,exit,session_time\",\n  score_children: \"raw,min,max\",\n  comments_children: \"content,location,time\",\n  objectives_children: \"id,score,status\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio,language,speed,text\",\n  interactions_children:\n    \"id,objectives,time,type,correct_responses,weighting,student_response,result,latency\",\n  error_descriptions: {\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage: \"No specific error code exists to describe the error.\",\n    },\n    \"201\": {\n      basicMessage: \"Invalid argument error\",\n      detailMessage:\n        \"Indicates that an argument represents an invalid data model element or is otherwise incorrect.\",\n    },\n    \"202\": {\n      basicMessage: \"Element cannot have children\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_children\" for a data model element that does not support the \"_children\" suffix.',\n    },\n    \"203\": {\n      basicMessage: \"Element not an array - cannot have count\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_count\" for a data model element that does not support the \"_count\" suffix.',\n    },\n    \"301\": {\n      basicMessage: \"Not initialized\",\n      detailMessage: \"Indicates that an API call was made before the call to lmsInitialize.\",\n    },\n    \"401\": {\n      basicMessage: \"Not implemented error\",\n      detailMessage:\n        \"The data model element indicated in a call to LMSGetValue or LMSSetValue is valid, but was not implemented by this LMS. SCORM 1.2 defines a set of data model elements as being optional for an LMS to implement.\",\n    },\n    \"402\": {\n      basicMessage: \"Invalid set value, element is a keyword\",\n      detailMessage:\n        'Indicates that LMSSetValue was called on a data model element that represents a keyword (elements that end in \"_children\" and \"_count\").',\n    },\n    \"403\": {\n      basicMessage: \"Element is read only\",\n      detailMessage: \"LMSSetValue was called with a data model element that can only be read.\",\n    },\n    \"404\": {\n      basicMessage: \"Element is write only\",\n      detailMessage: \"LMSGetValue was called on a data model element that can only be written to.\",\n    },\n    \"405\": {\n      basicMessage: \"Incorrect Data Type\",\n      detailMessage:\n        \"LMSSetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a LMSSetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\nexport const aicc_constants: AiccConstants = {\n  ...scorm12_constants,\n  ...{\n    cmi_children:\n      \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions,evaluation\",\n    student_preference_children:\n      \"audio,language,lesson_type,speed,text,text_color,text_location,text_size,video,windows\",\n    student_data_children: \"attempt_number,tries,mastery_score,max_time_allowed,time_limit_action\",\n    student_demographics_children:\n      \"city,class,company,country,experience,familiar_name,instructor_name,title,native_language,state,street_address,telephone,years_experience\",\n    tries_children: \"time,status,score\",\n    attempt_records_children: \"score,lesson_status\",\n    paths_children: \"location_id,date,time,status,why_left,time_in_element\",\n  },\n};\n\nexport const scorm2004_constants: Scorm2004Constants = {\n  // Children lists\n  cmi_children:\n    \"_version,comments_from_learner,comments_from_lms,completion_status,credit,entry,exit,interactions,launch_data,learner_id,learner_name,learner_preference,location,max_time_allowed,mode,objectives,progress_measure,scaled_passing_score,score,session_time,success_status,suspend_data,time_limit_action,total_time\",\n  comments_children: \"comment,timestamp,location\",\n  score_children: \"max,raw,scaled,min\",\n  objectives_children: \"progress_measure,completion_status,success_status,description,score,id\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio_level,audio_captioning,delivery_speed,language\",\n  interactions_children:\n    \"id,type,objectives,timestamp,correct_responses,weighting,learner_response,result,latency,description\",\n  adl_data_children: \"id,store\",\n  error_descriptions: {\n    \"0\": {\n      basicMessage: \"No Error\",\n      detailMessage: \"No error occurred, the previous API call was successful.\",\n    },\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage: \"No specific error code exists to describe the error.\",\n    },\n    \"102\": {\n      basicMessage: \"General Initialization Failure\",\n      detailMessage: \"Call to Initialize failed for an unknown reason.\",\n    },\n    \"103\": {\n      basicMessage: \"Already Initialized\",\n      detailMessage: \"Call to Initialize failed because Initialize was already called.\",\n    },\n    \"104\": {\n      basicMessage: \"Content Instance Terminated\",\n      detailMessage: \"Call to Initialize failed because Terminate was already called.\",\n    },\n    \"111\": {\n      basicMessage: \"General Termination Failure\",\n      detailMessage: \"Call to Terminate failed for an unknown reason.\",\n    },\n    \"112\": {\n      basicMessage: \"Termination Before Initialization\",\n      detailMessage: \"Call to Terminate failed because it was made before the call to Initialize.\",\n    },\n    \"113\": {\n      basicMessage: \"Termination After Termination\",\n      detailMessage: \"Call to Terminate failed because Terminate was already called.\",\n    },\n    \"122\": {\n      basicMessage: \"Retrieve Data Before Initialization\",\n      detailMessage: \"Call to GetValue failed because it was made before the call to Initialize.\",\n    },\n    \"123\": {\n      basicMessage: \"Retrieve Data After Termination\",\n      detailMessage: \"Call to GetValue failed because it was made after the call to Terminate.\",\n    },\n    \"132\": {\n      basicMessage: \"Store Data Before Initialization\",\n      detailMessage: \"Call to SetValue failed because it was made before the call to Initialize.\",\n    },\n    \"133\": {\n      basicMessage: \"Store Data After Termination\",\n      detailMessage: \"Call to SetValue failed because it was made after the call to Terminate.\",\n    },\n    \"142\": {\n      basicMessage: \"Commit Before Initialization\",\n      detailMessage: \"Call to Commit failed because it was made before the call to Initialize.\",\n    },\n    \"143\": {\n      basicMessage: \"Commit After Termination\",\n      detailMessage: \"Call to Commit failed because it was made after the call to Terminate.\",\n    },\n    \"201\": {\n      basicMessage: \"General Argument Error\",\n      detailMessage:\n        \"An invalid argument was passed to an API method (usually indicates that Initialize, Commit or Terminate did not receive the expected empty string argument.\",\n    },\n    \"301\": {\n      basicMessage: \"General Get Failure\",\n      detailMessage:\n        \"Indicates a failed GetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"351\": {\n      basicMessage: \"General Set Failure\",\n      detailMessage:\n        \"Indicates a failed SetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"391\": {\n      basicMessage: \"General Commit Failure\",\n      detailMessage:\n        \"Indicates a failed Commit call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"401\": {\n      basicMessage: \"Undefined Data Model Element\",\n      detailMessage:\n        \"The data model element name passed to GetValue or SetValue is not a valid SCORM data model element.\",\n    },\n    \"402\": {\n      basicMessage: \"Unimplemented Data Model Element\",\n      detailMessage:\n        \"The data model element indicated in a call to GetValue or SetValue is valid, but was not implemented by this LMS. In SCORM 2004, this error would indicate an LMS that is not fully SCORM conformant.\",\n    },\n    \"403\": {\n      basicMessage: \"Data Model Element Value Not Initialized\",\n      detailMessage:\n        \"Attempt to read a data model element that has not been initialized by the LMS or through a SetValue call. This error condition is often reached during normal execution of a SCO.\",\n    },\n    \"404\": {\n      basicMessage: \"Data Model Element Is Read Only\",\n      detailMessage: \"SetValue was called with a data model element that can only be read.\",\n    },\n    \"405\": {\n      basicMessage: \"Data Model Element Is Write Only\",\n      detailMessage: \"GetValue was called on a data model element that can only be written to.\",\n    },\n    \"406\": {\n      basicMessage: \"Data Model Element Type Mismatch\",\n      detailMessage:\n        \"SetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Data Model Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a SetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\n","/**\n * Constants for time conversion calculations.\n * These are used throughout the codebase for converting between different time formats.\n */\nexport const SECONDS_PER_SECOND = 1.0;\nexport const SECONDS_PER_MINUTE = 60;\nexport const SECONDS_PER_HOUR = 60 * SECONDS_PER_MINUTE;\nexport const SECONDS_PER_DAY = 24 * SECONDS_PER_HOUR;\n\ntype Designation = {\n  [key: string]: number;\n};\n\n/**\n * A record with string keys and unknown values.\n * This is a more type-safe alternative to using `any`.\n */\nexport type StringKeyMap = Record<string, unknown>;\n\nconst designations: Designation = {\n  D: SECONDS_PER_DAY,\n  H: SECONDS_PER_HOUR,\n  M: SECONDS_PER_MINUTE,\n  S: SECONDS_PER_SECOND,\n};\n\n/**\n * Converts a number of seconds to a formatted time string in HH:MM:SS format.\n * This function handles decimal seconds and ensures proper formatting with leading zeros.\n *\n * @param {number|null} totalSeconds - The total number of seconds to convert. If null or negative, returns \"00:00:00\".\n * @return {string} A formatted time string in HH:MM:SS format, with up to 2 decimal places for seconds if applicable.\n *\n * @example\n * // Returns \"01:30:45\"\n * getSecondsAsHHMMSS(5445);\n *\n * @example\n * // Returns \"00:00:30.5\"\n * getSecondsAsHHMMSS(30.5);\n *\n * @example\n * // Returns \"00:00:00\"\n * getSecondsAsHHMMSS(null);\n */\nexport const getSecondsAsHHMMSS = memoize((totalSeconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!totalSeconds || totalSeconds <= 0) {\n    return \"00:00:00\";\n  }\n\n  const hours = Math.floor(totalSeconds / SECONDS_PER_HOUR);\n  const dateObj = new Date(totalSeconds * 1000);\n  const minutes = dateObj.getUTCMinutes();\n  // make sure we add any possible decimal value\n  const seconds = dateObj.getSeconds();\n  const ms = totalSeconds % 1.0;\n  let msStr = \"\";\n\n  if (countDecimals(ms) > 0) {\n    if (countDecimals(ms) > 2) {\n      msStr = ms.toFixed(2);\n    } else {\n      msStr = String(ms);\n    }\n\n    msStr = \".\" + msStr.split(\".\")[1];\n  }\n\n  return (hours + \":\" + minutes + \":\" + seconds).replace(/\\b\\d\\b/g, \"0$&\") + msStr;\n});\n\n/**\n * Converts a number of seconds to an ISO 8601 duration string (e.g., \"PT1H30M45S\").\n * This function handles the complexity of formatting according to the ISO 8601 standard,\n * including the proper placement of the \"T\" separator for time components.\n *\n * @param {number|null} seconds - The number of seconds to convert. If null or negative, returns \"PT0S\".\n * @return {string} An ISO 8601 formatted duration string.\n *\n * @example\n * // Returns \"PT1H30M45S\" (1 hour, 30 minutes, 45 seconds)\n * getSecondsAsISODuration(5445);\n *\n * @example\n * // Returns \"PT30.5S\" (30.5 seconds)\n * getSecondsAsISODuration(30.5);\n *\n * @example\n * // Returns \"P1DT1H\" (1 day, 1 hour)\n * getSecondsAsISODuration(90000);\n *\n * @example\n * // Returns \"PT0S\" (0 seconds)\n * getSecondsAsISODuration(null);\n */\nexport const getSecondsAsISODuration = memoize((seconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!seconds || seconds <= 0) {\n    return \"PT0S\";\n  }\n\n  let duration = \"P\";\n  let remainder = seconds;\n\n  // Convert to array of entries and use functional methods\n  const designationEntries = Object.entries(designations);\n\n  // Process each time designation\n  designationEntries.forEach(([designationsKey, current_seconds]) => {\n    let value = Math.floor(remainder / current_seconds);\n    remainder = remainder % current_seconds;\n\n    // Limit decimal places\n    if (countDecimals(remainder) > 2) {\n      remainder = Number(Number(remainder).toFixed(2));\n    }\n\n    // If we have anything left in the remainder, and we're currently adding\n    // seconds to the duration, go ahead and add the decimal to the seconds\n    if (designationsKey === \"S\" && remainder > 0) {\n      value += remainder;\n    }\n\n    if (value) {\n      // Add the 'T' separator for time components if needed\n      const needsTimeSeparator =\n        (duration.indexOf(\"D\") > 0 || [\"H\", \"M\", \"S\"].includes(designationsKey)) &&\n        duration.indexOf(\"T\") === -1;\n\n      if (needsTimeSeparator) {\n        duration += \"T\";\n      }\n\n      duration += `${value}${designationsKey}`;\n    }\n  });\n\n  return duration;\n});\n\n/**\n * Converts a time string in HH:MM:SS format to the equivalent number of seconds.\n * This function is flexible and can handle various input types, converting them to strings as needed.\n *\n * @param {string|number|boolean|null} timeString - The time string to convert, typically in HH:MM:SS format.\n *                                                 If not a string, it will be converted to one.\n *                                                 If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} timeRegex - The regular expression used to validate the time string format.\n *                                    If a string is provided, it will be converted to a RegExp.\n * @return {number} The total number of seconds represented by the time string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getTimeAsSeconds(\"01:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getTimeAsSeconds(\"invalid\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 30 (converts number to string \"30\" then parses as 0:0:30)\n * getTimeAsSeconds(30, /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport const getTimeAsSeconds = memoize(\n  (timeString: string | number | boolean | null, timeRegex: RegExp | string): number => {\n    if (typeof timeString === \"number\" || typeof timeString === \"boolean\") {\n      timeString = String(timeString);\n    }\n    if (typeof timeRegex === \"string\") {\n      timeRegex = new RegExp(timeRegex);\n    }\n    if (!timeString) {\n      return 0;\n    }\n\n    if (!timeString.match(timeRegex)) {\n      // If the string represents a simple number, treat it as seconds\n      if (/^\\d+(?:\\.\\d+)?$/.test(timeString)) {\n        return Number(timeString);\n      }\n      return 0;\n    }\n\n    const parts = timeString.split(\":\");\n    const hours = Number(parts[0]);\n    const minutes = Number(parts[1]);\n    const seconds = Number(parts[2]);\n    return hours * 3600 + minutes * 60 + seconds;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (timeString, timeRegex) => {\n    const timeStr = typeof timeString === \"string\" ? timeString : String(timeString ?? \"\");\n    const regexStr = typeof timeRegex === \"string\" ? timeRegex : (timeRegex?.toString() ?? \"\");\n    return `${timeStr}:${regexStr}`;\n  },\n);\n\n/**\n * Converts an ISO 8601 duration string (e.g., \"PT1H30M45S\") to the equivalent number of seconds.\n * This function parses the duration string using a regular expression to extract years, days,\n * hours, minutes, and seconds components.\n *\n * @param {string|null} duration - The ISO 8601 duration string to convert.\n *                                If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n *                                       The regex should have capture groups for years, days, hours, minutes, and seconds.\n * @return {number} The total number of seconds represented by the duration string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getDurationAsSeconds(\"PT1H30M45S\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 90000 (1 day, 1 hour)\n * getDurationAsSeconds(\"P1DT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getDurationAsSeconds(\"invalid\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport const getDurationAsSeconds = memoize(\n  (duration: string | null, durationRegex: RegExp | string): number => {\n    if (typeof durationRegex === \"string\") {\n      durationRegex = new RegExp(durationRegex);\n    }\n\n    if (!duration || !duration?.match?.(durationRegex)) {\n      return 0;\n    }\n\n    const [, years, _, , days, hours, minutes, seconds] =\n      new RegExp(durationRegex).exec?.(duration) ?? [];\n    let result = 0.0;\n    result += Number(seconds) || 0.0;\n    result += Number(minutes) * 60.0 || 0.0;\n    result += Number(hours) * 3600.0 || 0.0;\n    result += Number(days) * (60 * 60 * 24.0) || 0.0;\n    result += Number(years) * (60 * 60 * 24 * 365.0) || 0.0;\n    return result;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (duration, durationRegex) => {\n    const durationStr = duration ?? \"\";\n    const regexStr =\n      typeof durationRegex === \"string\" ? durationRegex : (durationRegex?.toString() ?? \"\");\n    return `${durationStr}:${regexStr}`;\n  },\n);\n\n/**\n * Validates ISO 8601 duration format according to SCORM 2004 specification\n * @param {string} duration - The duration string to validate\n * @return {boolean} - True if valid ISO 8601 duration format\n */\nexport const validateISO8601Duration = memoize(\n  (duration: string, durationRegex: RegExp | string): boolean => {\n    if (typeof durationRegex === \"string\") {\n      durationRegex = new RegExp(durationRegex);\n    }\n\n    return !(!duration || !duration?.match?.(durationRegex));\n  },\n);\n\n/**\n * Adds together two ISO 8601 duration strings and returns the result as a new ISO 8601 duration string.\n * This function works by converting both durations to seconds, adding them together, and then\n * converting the result back to an ISO 8601 duration string.\n *\n * @param {string} first - The first ISO 8601 duration string.\n * @param {string} second - The second ISO 8601 duration string.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n * @return {string} A new ISO 8601 duration string representing the sum of the two input durations.\n *\n * @example\n * // Returns \"PT2H\" (1 hour + 1 hour = 2 hours)\n * addTwoDurations(\"PT1H\", \"PT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"PT1H30M\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addTwoDurations(\"PT1H\", \"PT30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"P1DT1H30M\" (1 day + 1 hour and 30 minutes = 1 day, 1 hour, and 30 minutes)\n * addTwoDurations(\"P1D\", \"PT1H30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport function addTwoDurations(\n  first: string,\n  second: string,\n  durationRegex: RegExp | string,\n): string {\n  const regex: RegExp =\n    typeof durationRegex === \"string\" ? new RegExp(durationRegex) : durationRegex;\n  return getSecondsAsISODuration(\n    getDurationAsSeconds(first, regex) + getDurationAsSeconds(second, regex),\n  );\n}\n\n/**\n * Adds together two time strings in HH:MM:SS format and returns the result as a new time string.\n * This function works by converting both time strings to seconds, adding them together, and then\n * converting the result back to an HH:MM:SS format.\n *\n * @param {string} first - The first time string in HH:MM:SS format.\n * @param {string} second - The second time string in HH:MM:SS format.\n * @param {RegExp|string} timeRegex - The regular expression used to validate and parse the time strings.\n *                                   If a string is provided, it will be converted to a RegExp.\n * @return {string} A new time string in HH:MM:SS format representing the sum of the two input times.\n *\n * @example\n * // Returns \"02:00:00\" (1 hour + 1 hour = 2 hours)\n * addHHMMSSTimeStrings(\"01:00:00\", \"01:00:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:00\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:45\" (1 hour + 30 minutes and 45 seconds = 1 hour, 30 minutes, and 45 seconds)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport function addHHMMSSTimeStrings(\n  first: string,\n  second: string,\n  timeRegex: RegExp | string,\n): string {\n  if (typeof timeRegex === \"string\") {\n    timeRegex = new RegExp(timeRegex);\n  }\n  return getSecondsAsHHMMSS(\n    getTimeAsSeconds(first, timeRegex) + getTimeAsSeconds(second, timeRegex),\n  );\n}\n\n/**\n * Flattens a nested JSON object into a flat object with dot notation for nested properties.\n * This function recursively traverses the object and creates new keys using dot notation\n * for nested objects and bracket notation for arrays.\n *\n * @param {StringKeyMap} data - The nested object to flatten.\n * @return {StringKeyMap} A flattened object where nested properties are represented with dot notation.\n *\n * @example\n * // Returns { \"a\": 1, \"b.c\": 2, \"b.d\": 3, \"e[0]\": 4, \"e[1]\": 5 }\n * flatten({\n *   a: 1,\n *   b: { c: 2, d: 3 },\n *   e: [4, 5]\n * });\n *\n * @example\n * // Returns { \"\": [] } for an empty array\n * flatten([]);\n *\n * @example\n * // Returns { \"\": {} } for an empty object\n * flatten({});\n */\nexport function flatten(data: StringKeyMap): StringKeyMap {\n  const result: StringKeyMap = {};\n\n  /**\n   * Recurse through the object\n   * @param {*} cur\n   * @param {*} prop\n   */\n  function recurse(cur: any, prop: any) {\n    if (Object(cur) !== cur) {\n      result[prop] = cur;\n    } else if (Array.isArray(cur)) {\n      // Use forEach instead of for loop\n      cur.forEach((item, i) => {\n        recurse(item, `${prop}[${i}]`);\n      });\n\n      if (cur.length === 0) result[prop] = [];\n    } else {\n      const keys = Object.keys(cur).filter((p) => Object.prototype.hasOwnProperty.call(cur, p));\n\n      const isEmpty = keys.length === 0;\n\n      // Use forEach instead of for...in loop\n      keys.forEach((p) => {\n        recurse(cur[p], prop ? `${prop}.${p}` : p);\n      });\n\n      if (isEmpty && prop) result[prop] = {};\n    }\n  }\n\n  recurse(data, \"\");\n  return result;\n}\n\n/**\n * Converts a flattened object back into a nested object structure.\n * This function is the inverse of `flatten()`. It parses dot notation and bracket notation\n * in property names to recreate the original nested structure.\n *\n * @param {StringKeyMap} data - The flattened object to unflatten.\n * @return {object} A nested object recreated from the flattened structure.\n *\n * @example\n * // Returns { a: 1, b: { c: 2, d: 3 }, e: [4, 5] }\n * unflatten({\n *   \"a\": 1,\n *   \"b.c\": 2,\n *   \"b.d\": 3,\n *   \"e[0]\": 4,\n *   \"e[1]\": 5\n * });\n *\n * @example\n * // Handles array indices correctly\n * unflatten({\n *   \"users[0].name\": \"John\",\n *   \"users[0].email\": \"john@example.com\",\n *   \"users[1].name\": \"Jane\",\n *   \"users[1].email\": \"jane@example.com\"\n * });\n * // Returns:\n * // {\n * //   users: [\n * //     { name: \"John\", email: \"john@example.com\" },\n * //     { name: \"Jane\", email: \"jane@example.com\" }\n * //   ]\n * // }\n */\nexport function unflatten(data: StringKeyMap): object {\n  \"use strict\";\n\n  if (Object(data) !== data || Array.isArray(data)) return data;\n  const result: StringKeyMap = {};\n\n  // Regex pattern for parsing property paths\n  const pattern = /\\.?([^.[\\]]+)|\\[(\\d+)]/g;\n\n  // Get all own properties and process them\n  Object.keys(data)\n    .filter((p) => Object.prototype.hasOwnProperty.call(data, p))\n    .forEach((p) => {\n      let cur = result;\n      let prop = \"\";\n\n      // Create a new regex instance for each property to reset lastIndex\n      const regex = new RegExp(pattern);\n\n      // Process all matches in the property path\n      Array.from({ length: p.match(new RegExp(pattern, \"g\"))?.length ?? 0 }, () =>\n        regex.exec(p),\n      ).forEach((m) => {\n        if (m) {\n          // Create array or object as needed\n          cur = (cur[prop] ?? (cur[prop] = m[2] ? [] : ({} as StringKeyMap))) as StringKeyMap;\n          prop = m[2] || m[1] || \"\";\n        }\n      });\n\n      cur[prop] = data[p];\n    });\n\n  return (result[\"\"] ?? result) as object;\n}\n\n/**\n * Counts the number of decimal places in a number.\n * This function handles both integer and floating-point numbers.\n *\n * @param {number} num - The number to analyze.\n * @return {number} The number of decimal places. Returns 0 for integers or if the number doesn't have a decimal point.\n *\n * @example\n * // Returns 0\n * countDecimals(42);\n *\n * @example\n * // Returns 2\n * countDecimals(3.14);\n *\n * @example\n * // Returns 5\n * countDecimals(1.23456);\n */\nexport function countDecimals(num: number): number {\n  if (Math.floor(num) === num || String(num)?.indexOf?.(\".\") < 0) return 0;\n  const parts = num.toString().split(\".\")?.[1];\n  return parts?.length ?? 0;\n}\n\n/**\n * Formats SCORM messages for consistent and readable logging.\n * This function pads the function name and CMI element to create aligned log messages\n * that are easier to read in log files or console output.\n *\n * @param {string} functionName - The name of the function that generated the message.\n * @param {string} message - The message content to be logged.\n * @param {string} [CMIElement] - Optional. The CMI element related to the message.\n * @return {string} A formatted message string with consistent padding.\n *\n * @example\n * // Returns \"initialize          : Successfully initialized\"\n * formatMessage(\"initialize\", \"Successfully initialized\");\n *\n * @example\n * // Returns \"getValue            : cmi.core.student_id                                             : 12345\"\n * formatMessage(\"getValue\", \"12345\", \"cmi.core.student_id\");\n *\n * @example\n * // Returns \"setValue            : cmi.core.lesson_status                                          : completed\"\n * formatMessage(\"setValue\", \"completed\", \"cmi.core.lesson_status\");\n */\nexport function formatMessage(functionName: string, message: string, CMIElement?: string): string {\n  const baseLength = 20;\n\n  // Use string padding instead of loops\n  const paddedFunction = functionName.padEnd(baseLength);\n  let messageString = `${paddedFunction}: `;\n\n  if (CMIElement) {\n    const CMIElementBaseLength = 70;\n    // Add CMIElement and pad to the required length\n    messageString += CMIElement;\n    messageString = messageString.padEnd(CMIElementBaseLength);\n  }\n\n  // Add the message (or empty string if null/undefined)\n  messageString += message ?? \"\";\n\n  return messageString;\n}\n\n/**\n * Checks if a string contains a specific pattern using regular expression matching.\n * This function is a wrapper around JavaScript's String.match() method that handles\n * null/undefined values gracefully.\n *\n * @param {string} str - The string to search within. If null or undefined, returns false.\n * @param {string} tester - The pattern to search for. Can be a regular expression pattern.\n * @return {boolean} True if the pattern is found in the string, false otherwise.\n *\n * @example\n * // Returns true\n * stringMatches(\"Hello, world!\", \"world\");\n *\n * @example\n * // Returns true\n * stringMatches(\"The quick brown fox\", \"\\\\w+\\\\s+\\\\w+\");\n *\n * @example\n * // Returns false\n * stringMatches(\"Hello, world!\", \"universe\");\n *\n * @example\n * // Returns false (handles null gracefully)\n * stringMatches(null, \"test\");\n */\nexport function stringMatches(str: string | null | undefined, tester: string): boolean {\n  if (typeof str !== \"string\") {\n    return false;\n  }\n  return new RegExp(tester).test(str);\n}\n\n/**\n * Creates a memoized (cached) version of a function for performance optimization.\n * This function caches the results of previous calls with the same arguments,\n * avoiding redundant calculations for repeated calls with the same input.\n *\n * @template T - The type of the function to memoize\n * @param {T} fn - The function to memoize\n * @param {Function} [keyFn] - Optional function to generate a custom cache key.\n *                           Useful for functions with complex arguments that can't be serialized.\n * @return {T} A memoized version of the input function with the same signature\n *\n * @example\n * // Basic usage with a simple function\n * const memoizedAdd = memoize((a, b) => {\n *   console.log('Calculating...');\n *   return a + b;\n * });\n *\n * memoizedAdd(1, 2); // Logs \"Calculating...\" and returns 3\n * memoizedAdd(1, 2); // Returns 3 without logging (uses cached result)\n *\n * @example\n * // Using a custom key function for objects that can't be serialized\n * const memoizedProcessUser = memoize(\n *   (user) => {\n *     console.log('Processing user...');\n *     return { ...user, processed: true };\n *   },\n *   (user) => user.id // Use user.id as the cache key\n * );\n *\n * memoizedProcessUser({ id: 123, name: 'John' }); // Logs and processes\n * memoizedProcessUser({ id: 123, name: 'John' }); // Uses cached result\n */\nexport function memoize<T extends (...args: any[]) => any>(\n  fn: T,\n  keyFn?: (...args: Parameters<T>) => string,\n): T {\n  const cache = new Map<string, ReturnType<T>>();\n\n  return ((...args: Parameters<T>): ReturnType<T> => {\n    const key = keyFn ? keyFn(...args) : JSON.stringify(args);\n\n    return cache.has(key)\n      ? (cache.get(key) as ReturnType<T>)\n      : (() => {\n          const result = fn(...args);\n          cache.set(key, result);\n          return result;\n        })();\n  }) as T;\n}\n","// Using plain objects instead of enums for better compatibility with strip-only mode\n// This approach avoids TypeScript enum runtime code while maintaining the same API\n\n// NAVBoolean values\nexport const NAVBoolean = {\n  UNKNOWN: \"unknown\",\n  TRUE: \"true\",\n  FALSE: \"false\",\n};\n\n// Type for NAVBoolean values\nexport type NAVBoolean = (typeof NAVBoolean)[keyof typeof NAVBoolean];\n\n// SuccessStatus values\nexport const SuccessStatus = {\n  PASSED: \"passed\",\n  FAILED: \"failed\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for SuccessStatus values\nexport type SuccessStatus = (typeof SuccessStatus)[keyof typeof SuccessStatus];\n\n// CompletionStatus values\nexport const CompletionStatus = {\n  COMPLETED: \"completed\",\n  INCOMPLETE: \"incomplete\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for CompletionStatus values\nexport type CompletionStatus = (typeof CompletionStatus)[keyof typeof CompletionStatus];\n\n// LogLevelEnum values\nexport const LogLevelEnum = {\n  _: 0,\n  DEBUG: 1,\n  INFO: 2,\n  WARN: 3,\n  ERROR: 4,\n  NONE: 5,\n};\n\n// Type for LogLevelEnum values\nexport type LogLevelEnum = (typeof LogLevelEnum)[keyof typeof LogLevelEnum];\n","import { InternalSettings, LogLevel, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"./api_constants\";\nimport { LogLevelEnum } from \"./enums\";\n\n/**\n * Default settings for the SCORM API\n */\nexport const DefaultSettings: InternalSettings = {\n  autocommit: false,\n  autocommitSeconds: 10,\n  asyncCommit: false,\n  sendFullCommit: true,\n  lmsCommitUrl: false,\n  dataCommitFormat: \"json\",\n  commitRequestDataType: \"application/json;charset=UTF-8\",\n  autoProgress: false,\n  logLevel: LogLevelEnum.ERROR,\n  selfReportSessionTime: false,\n  alwaysSendTotalTime: false,\n  renderCommonCommitFields: false,\n  strict_errors: true,\n  xhrHeaders: {},\n  xhrWithCredentials: false,\n  fetchMode: \"cors\",\n  useBeaconInsteadOfFetch: \"never\",\n  responseHandler: async function (response: Response): Promise<ResultObject> {\n    if (typeof response !== \"undefined\") {\n      let httpResult = null;\n\n      // Handle both text() and json() response methods\n      try {\n        if (typeof response.json === \"function\") {\n          // Try to get JSON directly if the method exists\n          httpResult = await response.json();\n        } else if (typeof response.text === \"function\") {\n          // Fall back to text() if json() is not available\n          const responseText = await response.text();\n          if (responseText) {\n            httpResult = JSON.parse(responseText);\n          }\n        }\n      } catch (e) {\n        // If parsing fails, continue with null httpResult\n      }\n\n      if (httpResult === null || !{}.hasOwnProperty.call(httpResult, \"result\")) {\n        if (response.status === 200) {\n          return {\n            result: global_constants.SCORM_TRUE,\n            errorCode: 0,\n          };\n        } else {\n          return {\n            result: global_constants.SCORM_FALSE,\n            errorCode: 101,\n          };\n        }\n      } else {\n        return {\n          result: httpResult.result,\n          errorCode: httpResult.errorCode\n            ? httpResult.errorCode\n            : httpResult.result === global_constants.SCORM_TRUE\n              ? 0\n              : 101,\n        };\n      }\n    }\n    return {\n      result: global_constants.SCORM_FALSE,\n      errorCode: 101,\n    };\n  },\n  requestHandler: function (commitObject) {\n    return commitObject;\n  },\n  onLogMessage: defaultLogHandler,\n  scoItemIds: [],\n  scoItemIdValidator: false,\n  globalObjectiveIds: [],\n\n  // Offline support settings\n  enableOfflineSupport: false,\n  courseId: \"\",\n  syncOnInitialize: true,\n  syncOnTerminate: true,\n  maxSyncAttempts: 5,\n};\n\nexport function defaultLogHandler(messageLevel: LogLevel, logMessage: string): void {\n  switch (messageLevel) {\n    case \"4\":\n    case 4:\n    case \"ERROR\":\n    case LogLevelEnum.ERROR:\n      console.error(logMessage);\n      break;\n    case \"3\":\n    case 3:\n    case \"WARN\":\n    case LogLevelEnum.WARN:\n      console.warn(logMessage);\n      break;\n    case \"2\":\n    case 2:\n    case \"INFO\":\n    case LogLevelEnum.INFO:\n      console.info(logMessage);\n      break;\n    case \"1\":\n    case 1:\n    case \"DEBUG\":\n    case LogLevelEnum.DEBUG:\n      if (console.debug) {\n        console.debug(logMessage);\n      } else {\n        console.log(logMessage);\n      }\n      break;\n  }\n}\n","import BaseAPI from \"../BaseAPI\";\n\n/**\n * Private class that wraps a timeout call to the commit() function\n */\nexport class ScheduledCommit {\n  private _API;\n  private _cancelled = false;\n  private readonly _timeout;\n  private readonly _callback;\n\n  /**\n   * Constructor for ScheduledCommit\n   * @param {BaseAPI} API\n   * @param {number} when\n   * @param {string} callback\n   */\n  constructor(API: BaseAPI, when: number, callback: string) {\n    this._API = API;\n    this._timeout = setTimeout(this.wrapper.bind(this), when);\n    this._callback = callback;\n  }\n\n  /**\n   * Cancel any currently scheduled commit\n   */\n  cancel() {\n    this._cancelled = true;\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n  }\n\n  /**\n   * Wrap the API commit call to check if the call has already been canceled\n   */\n  wrapper() {\n    if (!this._cancelled) {\n      // Only proceed with scheduled commit if API is properly initialized\n      if (this._API.isInitialized()) {\n        (async () => await this._API.commit(this._callback))();\n      }\n    }\n  }\n}\n","import { CommitObject, InternalSettings, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { IHttpService } from \"../interfaces/services\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { StringKeyMap } from \"../utilities\";\n\n/**\n * Service for handling HTTP communication with the LMS\n */\nexport class HttpService implements IHttpService {\n  private settings: InternalSettings;\n  private error_codes: ErrorCode;\n\n  /**\n   * Constructor for HttpService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   */\n  constructor(settings: InternalSettings, error_codes: ErrorCode) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n  }\n\n  /**\n   * Sends HTTP requests to the LMS with special handling for immediate and standard requests.\n   *\n   * This method handles communication with the LMS server, implementing two distinct\n   * request handling strategies based on the context:\n   *\n   * 1. Immediate Mode (used during termination):\n   *    When immediate=true, the method:\n   *    - Initiates the fetch request but doesn't wait for it to complete\n   *    - Returns a success result immediately\n   *    - Processes the response asynchronously when it arrives\n   *\n   *    This is critical for browser compatibility during page unload/termination,\n   *    as some browsers (especially Chrome) may cancel synchronous or awaited\n   *    requests when a page is closing.\n   *\n   * 2. Standard Mode (normal operation):\n   *    When immediate=false, the method:\n   *    - Processes the request parameters through the configured requestHandler\n   *    - Awaits the fetch response completely\n   *    - Transforms the response using the configured responseHandler\n   *    - Triggers appropriate event listeners based on success/failure\n   *    - Returns the complete result with appropriate error codes\n   *\n   * The method also includes error handling to catch network failures or other\n   * exceptions that might occur during the request process.\n   *\n   * @param {string} url - The URL endpoint to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The data to send to the LMS\n   * @param {boolean} immediate - Whether to send the request immediately without waiting (true) or process normally (false)\n   * @param {Function} apiLog - Function to log API messages with appropriate levels\n   * @param {Function} processListeners - Function to trigger event listeners for commit events\n   * @return {Promise<ResultObject>} - A promise that resolves with the result of the request\n   *\n   * @example\n   * // Standard request (waits for response)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   false,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   *\n   * @example\n   * // Immediate request (for termination)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   true,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   * // result will be success immediately, regardless of actual HTTP result\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n    apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    const genericError: ResultObject = {\n      result: global_constants.SCORM_FALSE,\n      errorCode: this.error_codes.GENERAL || 101,\n    };\n\n    // If immediate mode (for termination), handle differently\n    if (immediate) {\n      return this._handleImmediateRequest(url, params, apiLog, processListeners);\n    }\n\n    // Standard request processing\n    try {\n      const processedParams = this.settings.requestHandler(params) as\n        | CommitObject\n        | StringKeyMap\n        | Array<any>;\n      const response = await this.performFetch(url, processedParams);\n      return this.transformResponse(response, processListeners);\n    } catch (e: unknown) {\n      const message = e instanceof Error ? e.message : String(e);\n\n      // Enhanced error logging with more context\n      apiLog(\"processHttpRequest\", `HTTP request failed to ${url}: ${message}`, LogLevelEnum.ERROR);\n\n      if (e instanceof Error && e.stack) {\n        apiLog(\"processHttpRequest\", `Stack trace: ${e.stack}`, LogLevelEnum.DEBUG);\n      }\n\n      // Create enhanced error object with more details\n      const enhancedError: ResultObject = {\n        ...genericError,\n        errorMessage: message,\n        errorDetails: JSON.stringify({\n          url,\n          errorType: e instanceof Error ? e.constructor.name : typeof e,\n          originalError: message,\n        }),\n      };\n\n      processListeners(\"CommitError\");\n      return enhancedError;\n    }\n  }\n\n  /**\n   * Handles an immediate request (used during termination)\n   * @param {string} url - The URL to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The parameters to include in the request\n   * @param {Function} processListeners - Function to process event listeners\n   * @return {ResultObject} - A success result object\n   * @private\n   */\n  private _handleImmediateRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): ResultObject {\n    // Use Beacon API for final commit if specified in settings\n    if (this.settings.useBeaconInsteadOfFetch !== \"never\") {\n      const { body, contentType } = this._prepareRequestBody(params);\n      navigator.sendBeacon(url, new Blob([body], { type: contentType }));\n    } else {\n      // Use regular fetch with keepalive\n      this.performFetch(url, params)\n        .then(async (response) => {\n          await this.transformResponse(response, processListeners);\n        })\n        .catch((e: unknown) => {\n          const message = e instanceof Error ? e.message : String(e);\n          apiLog(\"processHttpRequest\", message, LogLevelEnum.ERROR);\n          processListeners(\"CommitError\");\n        });\n    }\n\n    // Return success immediately without waiting for response\n    return {\n      result: global_constants.SCORM_TRUE,\n      errorCode: 0,\n    };\n  }\n\n  /**\n   * Prepares the request body and content type based on params type\n   * @param {CommitObject|StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Object} - Object containing body and contentType\n   * @private\n   */\n  private _prepareRequestBody(params: CommitObject | StringKeyMap | Array<any>): {\n    body: string;\n    contentType: string;\n  } {\n    const body = params instanceof Array ? params.join(\"&\") : JSON.stringify(params);\n    const contentType =\n      params instanceof Array\n        ? \"application/x-www-form-urlencoded\"\n        : this.settings.commitRequestDataType;\n\n    return { body, contentType };\n  }\n\n  /**\n   * Perform the fetch request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - The response from the LMS\n   * @private\n   */\n  private async performFetch(url: string, params: StringKeyMap | Array<any>): Promise<Response> {\n    // Use Beacon API if specified in settings\n    if (this.settings.useBeaconInsteadOfFetch === \"always\") {\n      return this.performBeacon(url, params);\n    }\n\n    const { body, contentType } = this._prepareRequestBody(params);\n    const init = {\n      method: \"POST\",\n      mode: this.settings.fetchMode,\n      body,\n      headers: {\n        ...this.settings.xhrHeaders,\n        \"Content-Type\": contentType,\n      },\n      keepalive: true,\n    } as RequestInit;\n\n    if (this.settings.xhrWithCredentials) {\n      init.credentials = \"include\";\n    }\n\n    return fetch(url, init);\n  }\n\n  /**\n   * Perform the beacon request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - A promise that resolves with a mock Response object\n   * @private\n   */\n  private async performBeacon(url: string, params: StringKeyMap | Array<any>): Promise<Response> {\n    const { body, contentType } = this._prepareRequestBody(params);\n\n    // Send the beacon request\n    const beaconSuccess = navigator.sendBeacon(url, new Blob([body], { type: contentType }));\n\n    // Create a mock Response object since sendBeacon doesn't return a Response\n    return Promise.resolve({\n      status: beaconSuccess ? 200 : 0,\n      ok: beaconSuccess,\n      json: async () => ({\n        result: beaconSuccess ? \"true\" : \"false\",\n        errorCode: beaconSuccess ? 0 : this.error_codes.GENERAL,\n      }),\n      text: async () =>\n        JSON.stringify({\n          result: beaconSuccess ? \"true\" : \"false\",\n          errorCode: beaconSuccess ? 0 : this.error_codes.GENERAL,\n        }),\n    } as Response);\n  }\n\n  /**\n   * Transforms the response from the LMS to a ResultObject\n   * @param {Response} response - The response from the LMS\n   * @param {Function} processListeners - Function to process event listeners\n   * @return {Promise<ResultObject>} - The transformed response\n   * @private\n   */\n  private async transformResponse(\n    response: Response,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    let result: any;\n\n    try {\n      // Parse the response using the configured handler or default to json\n      result =\n        typeof this.settings.responseHandler === \"function\"\n          ? await this.settings.responseHandler(response)\n          : await response.json();\n    } catch (parseError) {\n      // If we can't parse the response, log the raw response for debugging\n      const responseText = await response.text().catch(() => \"Unable to read response text\");\n\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL || 101,\n        errorMessage: `Failed to parse LMS response: ${parseError instanceof Error ? parseError.message : String(parseError)}`,\n        errorDetails: JSON.stringify({\n          status: response.status,\n          statusText: response.statusText,\n          url: response.url,\n          responseText: responseText.substring(0, 500), // Limit response text to avoid huge logs\n          parseError: parseError instanceof Error ? parseError.message : String(parseError),\n        }),\n      };\n    }\n\n    // Ensure result has an errorCode property\n    if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n      result.errorCode = this._isSuccessResponse(response, result) ? 0 : this.error_codes.GENERAL;\n    }\n\n    // Add response details for failed requests\n    if (!this._isSuccessResponse(response, result)) {\n      result.errorDetails = {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n        ...result.errorDetails, // Preserve any existing error details\n      };\n    }\n\n    // Trigger appropriate event based on success/failure\n    if (this._isSuccessResponse(response, result)) {\n      processListeners(\"CommitSuccess\");\n    } else {\n      processListeners(\"CommitError\", undefined, result.errorCode);\n    }\n\n    return result;\n  }\n\n  /**\n   * Determines if a response is successful based on status code and result\n   * @param {Response} response - The HTTP response\n   * @param {ResultObject} result - The parsed result object\n   * @return {boolean} - Whether the response is successful\n   * @private\n   */\n  private _isSuccessResponse(response: Response, result: ResultObject): boolean {\n    const value = (result as any).result;\n    return (\n      response.status >= 200 &&\n      response.status <= 299 &&\n      (value === true || value === \"true\" || value === global_constants.SCORM_TRUE)\n    );\n  }\n\n  /**\n   * Updates the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: InternalSettings): void {\n    this.settings = settings;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { IEventService } from \"../interfaces/services\";\n\n/**\n * Interface for a listener object\n */\ninterface Listener {\n  functionName: string;\n  CMIElement: string | null;\n  callback: Function;\n}\n\n/**\n * Type for parsed listener information\n */\ninterface ParsedListener {\n  functionName: string;\n  CMIElement: string | null;\n}\n\n/**\n * Service for handling event listeners and event processing\n */\nexport class EventService implements IEventService {\n  // Map of function names to listeners for faster lookups\n  private listenerMap: Map<string, Listener[]> = new Map();\n  // Total count of listeners for logging\n  private listenerCount = 0;\n  // Function to log API messages\n  private readonly apiLog: (\n    functionName: string,\n    message: string,\n    messageLevel: LogLevel,\n    CMIElement?: string,\n  ) => void;\n\n  /**\n   * Constructor for EventService\n   * @param {Function} apiLog - Function to log API messages\n   */\n  constructor(\n    apiLog: (\n      functionName: string,\n      message: string,\n      messageLevel: LogLevel,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.apiLog = apiLog;\n  }\n\n  /**\n   * Parses a listener name into its components\n   *\n   * @param {string} listenerName - The name of the listener\n   * @returns {ParsedListener|null} - The parsed listener information or null if invalid\n   */\n  private parseListenerName(listenerName: string): ParsedListener | null {\n    const listenerSplit = listenerName.split(\".\");\n    if (listenerSplit.length === 0) return null;\n\n    const functionName = listenerSplit[0];\n    let CMIElement: string | null = null;\n\n    if (listenerSplit.length > 1) {\n      CMIElement = listenerName.replace(`${functionName}.`, \"\");\n    }\n\n    return { functionName: functionName ?? listenerName, CMIElement };\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener\n   * @param {Function} callback - The callback function to execute when the event occurs\n   */\n  on(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get or create the array for this function name\n      const listeners = this.listenerMap.get(functionName) ?? [];\n\n      // Add the new listener\n      listeners.push({\n        functionName,\n        CMIElement,\n        callback,\n      });\n\n      // Update the map and count\n      this.listenerMap.set(functionName, listeners);\n      this.listenerCount++;\n\n      this.apiLog(\n        \"on\",\n        `Added event listener: ${this.listenerCount}`,\n        LogLevelEnum.INFO,\n        functionName,\n      );\n    }\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener\n   *\n   * @param {string} listenerName - The name of the listener to remove\n   * @param {Function} callback - The callback function to remove\n   */\n  off(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get the listeners for this function name\n      const listeners = this.listenerMap.get(functionName);\n      if (!listeners) continue;\n\n      // Find the index of the listener to remove\n      const removeIndex = listeners.findIndex(\n        (obj) => obj.CMIElement === CMIElement && obj.callback === callback,\n      );\n\n      if (removeIndex !== -1) {\n        // Remove the listener\n        listeners.splice(removeIndex, 1);\n        this.listenerCount--;\n\n        // Update the map or remove the entry if empty\n        if (listeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, listeners);\n        }\n\n        this.apiLog(\n          \"off\",\n          `Removed event listener: ${this.listenerCount}`,\n          LogLevelEnum.INFO,\n          functionName,\n        );\n      }\n    }\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener to clear\n   */\n  clear(listenerName: string) {\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // If we have listeners for this function name\n      if (this.listenerMap.has(functionName)) {\n        const listeners = this.listenerMap.get(functionName)!;\n\n        // Filter out listeners that match the criteria\n        const newListeners = listeners.filter((obj) => obj.CMIElement !== CMIElement);\n\n        // Update the count and map\n        this.listenerCount -= listeners.length - newListeners.length;\n\n        if (newListeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, newListeners);\n        }\n      }\n    }\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created\n   *\n   * @param {string} functionName - The name of the function that triggered the event\n   * @param {string} CMIElement - The CMI element that was affected\n   * @param {any} value - The value that was set\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this.apiLog(functionName, value, LogLevelEnum.INFO, CMIElement);\n\n    // Get listeners for this function name\n    const listeners = this.listenerMap.get(functionName);\n    if (!listeners) return;\n\n    for (const listener of listeners) {\n      const listenerHasCMIElement = !!listener.CMIElement;\n      let CMIElementsMatch = false;\n\n      // Check if CMI elements match\n      if (CMIElement && listener.CMIElement) {\n        if (listener.CMIElement.endsWith(\"*\")) {\n          // For wildcard matches, check if the CMI element starts with the prefix\n          const prefix = listener.CMIElement.slice(0, -1);\n          CMIElementsMatch = CMIElement.startsWith(prefix);\n        } else {\n          // For exact matches, compare the strings directly\n          CMIElementsMatch = listener.CMIElement === CMIElement;\n        }\n      }\n\n      // If the listener matches, call the callback\n      if (!listenerHasCMIElement || CMIElementsMatch) {\n        this.apiLog(\n          \"processListeners\",\n          `Processing listener: ${listener.functionName}`,\n          LogLevelEnum.DEBUG,\n          CMIElement,\n        );\n\n        // Handle special event types\n        if (functionName.startsWith(\"Sequence\")) {\n          // For sequence events, pass the target as the first argument\n          listener.callback(value);\n        } else if (functionName === \"CommitError\") {\n          // For commit error events, pass the error code\n          listener.callback(value);\n        } else if (functionName === \"CommitSuccess\") {\n          // For commit success events, pass no arguments\n          listener.callback();\n        } else {\n          // For regular events, pass CMIElement and value\n          listener.callback(CMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Resets the event service by clearing all listeners\n   */\n  reset() {\n    this.listenerMap.clear();\n    this.listenerCount = 0;\n  }\n}\n","import { CommitObject, LogLevel } from \"../types/api_types\";\nimport { StringKeyMap, unflatten } from \"../utilities\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { BaseCMI } from \"../cmi/common/base_cmi\";\nimport { ISerializationService } from \"../interfaces/services\";\n\n/**\n * Service for handling data serialization and deserialization in scorm-again\n */\nexport class SerializationService implements ISerializationService {\n  /**\n   * Loads CMI data from a flattened JSON object with special handling for arrays and ordering.\n   *\n   * This method implements a complex algorithm for loading flattened JSON data into the CMI\n   * object structure. It handles several key challenges:\n   *\n   * 1. Ordering dependencies: Some CMI elements (like interactions and objectives) must be\n   *    loaded in a specific order to ensure proper initialization.\n   *\n   * 2. Array handling: Interactions and objectives are stored as arrays, and their properties\n   *    must be loaded in the correct order (e.g., 'id' and 'type' must be set before other properties).\n   *\n   * 3. Unflattening: The method converts flattened dot notation (e.g., \"cmi.objectives.0.id\")\n   *    back into nested objects before loading.\n   *\n   * The algorithm works by:\n   * - Categorizing keys into interactions, objectives, and other properties\n   * - Sorting interactions to prioritize 'id' and 'type' fields within each index\n   * - Sorting objectives to prioritize 'id' fields within each index\n   * - Processing each category in order: interactions, objectives, then other properties\n   *\n   * @param {StringKeyMap} json - The flattened JSON object with dot notation keys\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   *\n   * @param setStartingData\n   * @example\n   * // Example of flattened JSON input:\n   * // {\n   * //   \"cmi.objectives.0.id\": \"obj1\",\n   * //   \"cmi.objectives.0.score.raw\": \"80\",\n   * //   \"cmi.interactions.0.id\": \"int1\",\n   * //   \"cmi.interactions.0.type\": \"choice\",\n   * //   \"cmi.interactions.0.result\": \"correct\"\n   * // }\n   */\n  loadFromFlattenedJSON(\n    json: StringKeyMap,\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromFlattenedJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    const int_pattern = /^(cmi\\.interactions\\.)(\\d+)\\.(.*)$/;\n    const obj_pattern = /^(cmi\\.objectives\\.)(\\d+)\\.(.*)$/;\n\n    // Extract and categorize keys for better sorting\n    const interactions: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const objectives: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const others: { key: string; value: any }[] = [];\n\n    // Categorize keys\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key)) {\n        const intMatch = key.match(int_pattern);\n        if (intMatch) {\n          interactions.push({\n            key,\n            value: json[key],\n            index: Number(intMatch[2]),\n            field: intMatch[3] || \"\",\n          });\n          continue;\n        }\n\n        const objMatch = key.match(obj_pattern);\n        if (objMatch) {\n          objectives.push({\n            key,\n            value: json[key],\n            index: Number(objMatch[2]),\n            field: objMatch[3] || \"\",\n          });\n          continue;\n        }\n\n        others.push({ key, value: json[key] });\n      }\n    }\n\n    // Sort interactions: first by index, then prioritize 'id' and 'type' fields\n    interactions.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id and type\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n      if (a.field === \"type\") return -1;\n      if (b.field === \"type\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort objectives: first by index, then prioritize 'id' field\n    objectives.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort other keys alphabetically\n    others.sort((a, b) => a.key.localeCompare(b.key));\n\n    // Process all items in the correct order\n    const processItems = (items: { key: string; value: any }[]) => {\n      items.forEach((item) => {\n        const obj: StringKeyMap = {};\n        obj[item.key] = item.value;\n        this.loadFromJSON(\n          unflatten(obj) as StringKeyMap,\n          CMIElement,\n          setCMIValue,\n          isNotInitialized,\n          setStartingData,\n        );\n      });\n    };\n\n    // Process in order: interactions, objectives, others\n    processItems(interactions);\n    processItems(objectives);\n    processItems(others);\n  }\n\n  /**\n   * Loads CMI data from a nested JSON object with recursive traversal.\n   *\n   * This method implements a recursive algorithm for loading nested JSON data into the CMI\n   * object structure. It handles several key aspects:\n   *\n   * 1. Recursive traversal: The method recursively traverses the nested JSON structure,\n   *    building CMI element paths as it goes (e.g., \"cmi.core.student_id\").\n   *\n   * 2. Type-specific handling: Different data types are handled differently:\n   *    - Arrays: Each array element is processed individually with its index in the path\n   *    - Objects: Recursively processed with updated path\n   *    - Primitives: Set directly using setCMIValue\n   *\n   * 3. Initialization check: Ensures the method is only called before API initialization\n   *\n   * 4. Starting data storage: Stores the original JSON data for potential future use\n   *\n   * The algorithm works by:\n   * - First storing the complete JSON object via setStartingData\n   * - Iterating through each property in the JSON object\n   * - For each property, determining its type and handling it accordingly\n   * - Building the CMI element path as it traverses the structure\n   * - Setting values at the appropriate paths using setCMIValue\n   *\n   * @param {{[key: string]: any}} json - The nested JSON object to load\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value at a specific path\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   * @param {Function} setStartingData - Function to store the original JSON data\n   *\n   * @example\n   * // Example of nested JSON input:\n   * // {\n   * //   \"core\": {\n   * //     \"student_id\": \"12345\",\n   * //     \"student_name\": \"John Doe\"\n   * //   },\n   * //   \"objectives\": [\n   * //     { \"id\": \"obj1\", \"score\": { \"raw\": 80 } },\n   * //     { \"id\": \"obj2\", \"score\": { \"raw\": 90 } }\n   * //   ]\n   * // }\n   */\n  loadFromJSON(\n    json: { [key: string]: any },\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    CMIElement = CMIElement !== undefined ? CMIElement : \"cmi\";\n\n    setStartingData(json);\n\n    // could this be refactored down to flatten(json) then setCMIValue on each?\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key) && json[key]) {\n        const currentCMIElement = (CMIElement ? CMIElement + \".\" : \"\") + key;\n        const value = json[key];\n\n        if (value.constructor === Array) {\n          for (let i = 0; i < value.length; i++) {\n            if (value[i]) {\n              const item = value[i];\n              const tempCMIElement = `${currentCMIElement}.${i}`;\n\n              if (item.constructor === Object) {\n                this.loadFromJSON(\n                  item,\n                  tempCMIElement,\n                  setCMIValue,\n                  isNotInitialized,\n                  setStartingData,\n                );\n              } else {\n                setCMIValue(tempCMIElement, item);\n              }\n            }\n          }\n        } else if (value.constructor === Object) {\n          this.loadFromJSON(\n            value,\n            currentCMIElement,\n            setCMIValue,\n            isNotInitialized,\n            setStartingData,\n          );\n        } else {\n          setCMIValue(currentCMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Render the CMI object to JSON for sending to an LMS.\n   *\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {string}\n   */\n  renderCMIToJSONString(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): string {\n    // Do we want/need to return fields that have no set value?\n    if (sendFullCommit) {\n      return JSON.stringify({ cmi });\n    }\n    return JSON.stringify({ cmi }, (k, v) => (v === undefined ? null : v), 2);\n  }\n\n  /**\n   * Returns a JS object representing the current cmi\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {object}\n   */\n  renderCMIToJSONObject(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): StringKeyMap {\n    // Revert to the original implementation to maintain compatibility with tests\n    return JSON.parse(this.renderCMIToJSONString(cmi, sendFullCommit));\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} alwaysSendTotalTime - Whether to always send total time\n   * @param {boolean|Function} renderCommonCommitFields - Whether to render common commit fields\n   * @param {Function} renderCommitObject - Function to render commit object\n   * @param {Function} renderCommitCMI - Function to render commit CMI\n   * @param {LogLevel} apiLogLevel - The API log level\n   * @return {CommitObject|StringKeyMap|Array<any>}\n   */\n  getCommitObject(\n    terminateCommit: boolean,\n    alwaysSendTotalTime: boolean,\n    renderCommonCommitFields: boolean | ((commitObject: CommitObject) => boolean),\n    renderCommitObject: (terminateCommit: boolean, includeTotalTime?: boolean) => CommitObject,\n    renderCommitCMI: (\n      terminateCommit: boolean,\n      includeTotalTime?: boolean,\n    ) => StringKeyMap | Array<any>,\n    apiLogLevel: LogLevel,\n  ): CommitObject | StringKeyMap | Array<any> {\n    // Fix for issue: total time is being calculated incorrectly across multiple sessions\n    // when selfReportSessionTime and alwaysSendTotalTime are enabled.\n    //\n    // Previously, we were using a single variable (shouldTerminateCommit) that combined\n    // both concerns: whether this is a termination commit and whether to include total time.\n    // This caused the total time to be calculated as if every commit was a terminate commit\n    // when alwaysSendTotalTime was true, leading to incorrect time calculations.\n    //\n    // Now we pass the actual terminateCommit value and a separate parameter for whether\n    // to include total time, allowing the rendering functions to handle these concerns separately.\n    const includeTotalTime = alwaysSendTotalTime || terminateCommit;\n\n    const commitObject = renderCommonCommitFields\n      ? renderCommitObject(terminateCommit, includeTotalTime)\n      : renderCommitCMI(terminateCommit, includeTotalTime);\n\n    if ([LogLevelEnum.DEBUG, \"1\", 1, \"DEBUG\"].includes(apiLogLevel)) {\n      console.debug(\"Commit (terminated: \" + (terminateCommit ? \"yes\" : \"no\") + \"): \");\n      console.debug(commitObject);\n    }\n    return commitObject;\n  }\n}\n","type APIError = {\n  errorCode: number;\n  errorMessage: string;\n  detailedMessage: string;\n};\n\nexport class BaseScormValidationError extends Error {\n  constructor(CMIElement: string, errorCode: number) {\n    super(`${CMIElement} : ${errorCode.toString()}`);\n    this._errorCode = errorCode;\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, BaseScormValidationError.prototype);\n  }\n\n  private readonly _errorCode: number;\n\n  /**\n   * Getter for _errorCode\n   * @return {number}\n   */\n  get errorCode(): number {\n    return this._errorCode;\n  }\n}\n\n/**\n * Base Validation Exception\n */\nexport class ValidationError extends BaseScormValidationError implements APIError {\n  /**\n   * Constructor to take in an error message and code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   * @param {string} errorMessage\n   * @param {string} detailedMessage\n   */\n  constructor(\n    CMIElement: string,\n    errorCode: number,\n    errorMessage: string,\n    detailedMessage?: string,\n  ) {\n    super(CMIElement, errorCode);\n    this.message = `${CMIElement} : ${errorMessage}`;\n    this._errorMessage = errorMessage;\n    if (detailedMessage) {\n      this._detailedMessage = detailedMessage;\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  private readonly _errorMessage: string;\n  private readonly _detailedMessage: string = \"\";\n\n  /**\n   * Getter for _errorMessage\n   * @return {string}\n   */\n  get errorMessage(): string {\n    return this._errorMessage;\n  }\n\n  /**\n   * Getter for _detailedMessage\n   * @return {string}\n   */\n  get detailedMessage(): string {\n    return this._detailedMessage;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ILoggingService } from \"../interfaces/services\";\nimport { defaultLogHandler } from \"../constants/default_settings\";\n\n/**\n * Centralized logging service implemented as a singleton\n * Provides methods for logging at different levels and configuring the log level\n */\nexport class LoggingService implements ILoggingService {\n  private static _instance: LoggingService;\n  private _logLevel: LogLevel = LogLevelEnum.ERROR;\n  private _logHandler: (messageLevel: LogLevel, logMessage: string) => void;\n\n  /**\n   * Private constructor to prevent direct instantiation\n   */\n  private constructor() {\n    // Default log handler uses console methods based on log level\n    this._logHandler = defaultLogHandler;\n  }\n\n  /**\n   * Get the singleton instance of LoggingService\n   *\n   * @returns {LoggingService} The singleton instance\n   */\n  public static getInstance(): LoggingService {\n    if (!LoggingService._instance) {\n      LoggingService._instance = new LoggingService();\n    }\n    return LoggingService._instance;\n  }\n\n  /**\n   * Set the log level\n   *\n   * @param {LogLevel} level - The log level to set\n   */\n  public setLogLevel(level: LogLevel): void {\n    this._logLevel = level;\n  }\n\n  /**\n   * Get the current log level\n   *\n   * @returns {LogLevel} The current log level\n   */\n  public getLogLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  /**\n   * Set a custom log handler\n   *\n   * @param {Function} handler - The function to handle log messages\n   */\n  public setLogHandler(handler: (messageLevel: LogLevel, logMessage: string) => void): void {\n    this._logHandler = handler;\n  }\n\n  /**\n   * Log a message if the message level is greater than or equal to the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @param {string} logMessage - The message to log\n   */\n  public log(messageLevel: LogLevel, logMessage: string): void {\n    if (this.shouldLog(messageLevel)) {\n      this._logHandler(messageLevel, logMessage);\n    }\n  }\n\n  /**\n   * Log a message at ERROR level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public error(logMessage: string): void {\n    this.log(LogLevelEnum.ERROR, logMessage);\n  }\n\n  /**\n   * Log a message at WARN level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public warn(logMessage: string): void {\n    this.log(LogLevelEnum.WARN, logMessage);\n  }\n\n  /**\n   * Log a message at INFO level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public info(logMessage: string): void {\n    this.log(LogLevelEnum.INFO, logMessage);\n  }\n\n  /**\n   * Log a message at DEBUG level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public debug(logMessage: string): void {\n    this.log(LogLevelEnum.DEBUG, logMessage);\n  }\n\n  /**\n   * Determine if a message should be logged based on its level and the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @returns {boolean} Whether the message should be logged\n   */\n  private shouldLog(messageLevel: LogLevel): boolean {\n    // Convert string levels to numbers for comparison\n    const numericMessageLevel = this.getNumericLevel(messageLevel);\n    const numericLogLevel = this.getNumericLevel(this._logLevel);\n\n    return numericMessageLevel >= numericLogLevel;\n  }\n\n  /**\n   * Convert a log level to its numeric value\n   *\n   * @param {LogLevel} level - The log level to convert\n   * @returns {number} The numeric value of the log level\n   */\n  private getNumericLevel(level: LogLevel): number {\n    if (level === undefined) return LogLevelEnum.NONE;\n\n    if (typeof level === \"number\") return level;\n\n    switch (level) {\n      case \"1\":\n      case \"DEBUG\":\n        return LogLevelEnum.DEBUG;\n      case \"2\":\n      case \"INFO\":\n        return LogLevelEnum.INFO;\n      case \"3\":\n      case \"WARN\":\n        return LogLevelEnum.WARN;\n      case \"4\":\n      case \"ERROR\":\n        return LogLevelEnum.ERROR;\n      case \"5\":\n      case \"NONE\":\n        return LogLevelEnum.NONE;\n      default:\n        return LogLevelEnum.ERROR; // Default to ERROR if unknown\n    }\n  }\n}\n\n// Export a function to get the singleton instance\nexport function getLoggingService(): LoggingService {\n  return LoggingService.getInstance();\n}\n","import { LogLevelEnum } from \"../constants/enums\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { ValidationError } from \"../exceptions\";\nimport { IErrorHandlingService, ILoggingService } from \"../interfaces/services\";\nimport { getLoggingService } from \"./LoggingService\";\n\n/**\n * Service for handling SCORM errors\n */\nexport class ErrorHandlingService implements IErrorHandlingService {\n  private _lastErrorCode: string = \"0\";\n  private readonly _errorCodes: ErrorCode;\n  private readonly _apiLog: (\n    functionName: string,\n    message: string,\n    logLevel?: LogLevelEnum,\n    CMIElement?: string,\n  ) => void;\n  private readonly _getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string;\n  private readonly _loggingService: ILoggingService;\n\n  /**\n   * Constructor for ErrorHandlingService\n   *\n   * @param {ErrorCode} errorCodes - The error codes object\n   * @param {Function} apiLog - Function for logging API calls\n   * @param {Function} getLmsErrorMessageDetails - Function for getting error message details\n   * @param {ILoggingService} loggingService - Optional logging service instance\n   */\n  constructor(\n    errorCodes: ErrorCode,\n    apiLog: (\n      functionName: string,\n      message: string,\n      logLevel?: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n    loggingService?: ILoggingService,\n  ) {\n    this._errorCodes = errorCodes;\n    this._apiLog = apiLog;\n    this._getLmsErrorMessageDetails = getLmsErrorMessageDetails;\n    this._loggingService = loggingService || getLoggingService();\n  }\n\n  /**\n   * Get the last error code\n   *\n   * @return {string} - The last error code\n   */\n  get lastErrorCode(): string {\n    return this._lastErrorCode;\n  }\n\n  /**\n   * Set the last error code\n   *\n   * @param {string} errorCode - The error code to set\n   */\n  set lastErrorCode(errorCode: string) {\n    this._lastErrorCode = errorCode;\n  }\n\n  /**\n   * Throws a SCORM error\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The error number\n   * @param {string} message - The error message\n   * @throws {ValidationError} - If throwException is true, throws a ValidationError\n   */\n  throwSCORMError(CMIElement: string, errorNumber: number, message?: string): void {\n    if (!message) {\n      message = this._getLmsErrorMessageDetails(errorNumber, true);\n    }\n\n    // Format a more descriptive error message with context\n    const formattedMessage = `SCORM Error ${errorNumber}: ${message}${CMIElement ? ` [Element: ${CMIElement}]` : \"\"}`;\n\n    // Log using both the API log and the logging service for consistency\n    this._apiLog(\"throwSCORMError\", errorNumber + \": \" + message, LogLevelEnum.ERROR, CMIElement);\n    this._loggingService.error(formattedMessage);\n\n    this._lastErrorCode = String(errorNumber);\n  }\n\n  /**\n   * Clears the last SCORM error code on success.\n   *\n   * @param {string} success - Whether the operation was successful\n   */\n  clearSCORMError(success: string): void {\n    if (success !== undefined && success !== global_constants.SCORM_FALSE) {\n      this._lastErrorCode = \"0\";\n    }\n  }\n\n  /**\n   * Handles exceptions that occur when accessing or setting CMI values.\n   *\n   * This method provides centralized error handling for exceptions that occur during\n   * CMI data operations. It differentiates between different types of errors and\n   * handles them appropriately:\n   *\n   * 1. ValidationError: These are expected errors from the validation system that\n   *    indicate a specific SCORM error condition (like invalid data format or range).\n   *    For these errors, the method:\n   *    - Sets the lastErrorCode to the error code from the ValidationError\n   *    - Returns SCORM_FALSE to indicate failure to the caller\n   *\n   * 2. Standard JavaScript Error: For general JavaScript errors (like TypeError,\n   *    ReferenceError, etc.), the method:\n   *    - Logs the error message with stack trace to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * 3. Unknown exceptions: For any other type of exception that doesn't match the\n   *    above categories, the method:\n   *    - Logs the entire exception object to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * This method is critical for maintaining SCORM compliance by ensuring that\n   * all errors are properly translated into the appropriate SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {ValidationError|Error|unknown} e - The exception that was thrown\n   * @param {string} returnValue - The default return value (typically an empty string)\n   * @return {string} - Either the original returnValue or SCORM_FALSE if an error occurred\n   *\n   * @example\n   * try {\n   *   const value = getCMIValue(\"cmi.core.score.raw\");\n   *   return value;\n   * } catch (e) {\n   *   return handleValueAccessException(e, \"\");\n   * }\n   */\n  handleValueAccessException(\n    CMIElement: string,\n    e: Error | ValidationError | unknown,\n    returnValue: string,\n  ): string {\n    if (e instanceof ValidationError) {\n      const validationError = e as ValidationError;\n      this._lastErrorCode = String(validationError.errorCode);\n\n      // Log validation errors at WARN level with context\n      const errorMessage = `Validation Error ${validationError.errorCode}: ${validationError.message} [Element: ${CMIElement}]`;\n      this._loggingService.warn(errorMessage);\n\n      returnValue = global_constants.SCORM_FALSE;\n    } else if (e instanceof Error) {\n      // For standard JS errors, include the stack trace and error type\n      const errorType = e.constructor.name; // Gets the error type (e.g., TypeError, ReferenceError)\n      const errorMessage = `${errorType}: ${e.message} [Element: ${CMIElement}]`;\n      const stackTrace = e.stack || \"\";\n\n      // Log the detailed error with stack trace\n      this._loggingService.error(`${errorMessage}\\n${stackTrace}`);\n\n      this.throwSCORMError(\n        CMIElement,\n        this._errorCodes.GENERAL as number,\n        `${errorType}: ${e.message}`,\n      );\n    } else {\n      // For unknown errors, provide as much context as possible\n      const errorMessage = `Unknown error occurred while accessing [Element: ${CMIElement}]`;\n\n      this._loggingService.error(errorMessage);\n\n      try {\n        // Try to stringify the error object for more details\n        const errorDetails = JSON.stringify(e);\n        this._loggingService.error(`Error details: ${errorDetails}`);\n      } catch (jsonError) {\n        // If stringify fails, log that we couldn't get more details\n        this._loggingService.error(\"Could not stringify error object for details\");\n      }\n\n      this.throwSCORMError(CMIElement, this._errorCodes.GENERAL as number, \"Unknown error\");\n    }\n    return returnValue;\n  }\n\n  /**\n   * Get the error codes object\n   *\n   * @return {ErrorCode} - The error codes object\n   */\n  get errorCodes(): ErrorCode {\n    return this._errorCodes;\n  }\n}\n\n// Export a factory function to create the service\nexport function createErrorHandlingService(\n  errorCodes: ErrorCode,\n  apiLog: (\n    functionName: string,\n    message: string,\n    logLevel?: LogLevelEnum,\n    CMIElement?: string,\n  ) => void,\n  getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n  loggingService?: ILoggingService,\n): ErrorHandlingService {\n  return new ErrorHandlingService(errorCodes, apiLog, getLmsErrorMessageDetails, loggingService);\n}\n","import { CommitObject, InternalSettings, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ErrorCode } from \"../constants/error_codes\";\n\n/**\n * Interface for sync queue item\n */\ninterface SyncQueueItem {\n  id: string;\n  courseId: string;\n  timestamp: number;\n  data: CommitObject;\n  syncAttempts: number;\n}\n\n/**\n * Service for handling offline storage and synchronization of SCORM data\n */\nexport class OfflineStorageService {\n  private settings: InternalSettings;\n  private error_codes: ErrorCode;\n  private storeName: string = \"scorm_again_offline_data\";\n  private syncQueue: string = \"scorm_again_sync_queue\";\n  private isOnline: boolean = navigator.onLine;\n  private syncInProgress: boolean = false;\n\n  /**\n   * Constructor for OfflineStorageService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Function} apiLog - The logging function\n   */\n  constructor(\n    settings: InternalSettings,\n    error_codes: ErrorCode,\n    private apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n\n    // Initialize listeners for online/offline events\n    window.addEventListener(\"online\", this.handleOnlineStatusChange.bind(this));\n    window.addEventListener(\"offline\", this.handleOnlineStatusChange.bind(this));\n  }\n\n  /**\n   * Handle changes in online status\n   */\n  private handleOnlineStatusChange() {\n    const wasOnline = this.isOnline;\n    this.isOnline = navigator.onLine;\n\n    // If we've come back online, trigger sync process\n    if (!wasOnline && this.isOnline) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        \"Device is back online, attempting to sync...\",\n        LogLevelEnum.INFO,\n      );\n      this.syncOfflineData().then(\n        (success) => {\n          if (success) {\n            this.apiLog(\"OfflineStorageService\", \"Sync completed successfully\", LogLevelEnum.INFO);\n          } else {\n            this.apiLog(\"OfflineStorageService\", \"Sync failed\", LogLevelEnum.ERROR);\n          }\n        },\n        (error) => {\n          this.apiLog(\"OfflineStorageService\", `Error during sync: ${error}`, LogLevelEnum.ERROR);\n        },\n      );\n    } else if (wasOnline && !this.isOnline) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        \"Device is offline, data will be stored locally\",\n        LogLevelEnum.INFO,\n      );\n    }\n  }\n\n  /**\n   * Store commit data offline\n   * @param {string} courseId - Identifier for the course\n   * @param {CommitObject} commitData - The data to store offline\n   * @returns {Promise<ResultObject>} - Result of the storage operation\n   */\n  async storeOffline(courseId: string, commitData: CommitObject): Promise<ResultObject> {\n    try {\n      // Store the data in the sync queue with timestamp and unique ID\n      const queueItem: SyncQueueItem = {\n        id: `${courseId}_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`,\n        courseId,\n        timestamp: Date.now(),\n        data: commitData,\n        syncAttempts: 0,\n      };\n\n      // Get current queue\n      const currentQueue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n      currentQueue.push(queueItem);\n\n      // Save updated queue\n      await this.saveToStorage(this.syncQueue, currentQueue);\n\n      // Also update the current state in the main storage (latest known state)\n      await this.saveToStorage(`${this.storeName}_${courseId}`, commitData);\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Stored data offline for course ${courseId}`,\n        LogLevelEnum.INFO,\n      );\n\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error storing offline data: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL ?? 0,\n      };\n    }\n  }\n\n  /**\n   * Get the stored offline data for a course\n   * @param {string} courseId - Identifier for the course\n   * @returns {Promise<CommitObject|null>} - The stored data or null if not found\n   */\n  async getOfflineData(courseId: string): Promise<CommitObject | null> {\n    try {\n      const data = await this.getFromStorage<CommitObject>(`${this.storeName}_${courseId}`);\n      return data || null;\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error retrieving offline data: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return null;\n    }\n  }\n\n  /**\n   * Synchronize offline data with the LMS when connection is available\n   * @returns {Promise<boolean>} - Success status of synchronization\n   */\n  async syncOfflineData(): Promise<boolean> {\n    // Don't run multiple sync processes at once\n    if (this.syncInProgress || !this.isOnline) {\n      return false;\n    }\n\n    this.syncInProgress = true;\n\n    try {\n      // Get the queue of items to sync\n      const syncQueue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n\n      if (syncQueue.length === 0) {\n        this.syncInProgress = false;\n        return true;\n      }\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Found ${syncQueue.length} items to sync`,\n        LogLevelEnum.INFO,\n      );\n\n      // Keep track of successful and failed sync attempts\n      const remainingQueue: SyncQueueItem[] = [];\n\n      // Process each queue item\n      for (const item of syncQueue) {\n        // Skip items that have been attempted too many times\n        if (item.syncAttempts >= 5) {\n          this.apiLog(\n            \"OfflineStorageService\",\n            `Skipping item ${item.id} after 5 failed attempts`,\n            LogLevelEnum.WARN,\n          );\n          continue;\n        }\n\n        try {\n          // Attempt to sync this item\n          const syncResult = await this.sendDataToLMS(item.data);\n\n          if (syncResult.result === global_constants.SCORM_TRUE) {\n            // Sync was successful, no need to keep this item\n            this.apiLog(\n              \"OfflineStorageService\",\n              `Successfully synced item ${item.id}`,\n              LogLevelEnum.INFO,\n            );\n          } else {\n            // Sync failed, increment attempts and keep in queue\n            item.syncAttempts++;\n            remainingQueue.push(item);\n            this.apiLog(\n              \"OfflineStorageService\",\n              `Failed to sync item ${item.id}, attempt #${item.syncAttempts}`,\n              LogLevelEnum.WARN,\n            );\n          }\n        } catch (error) {\n          // On error, increment attempts and keep in queue\n          item.syncAttempts++;\n          remainingQueue.push(item);\n          this.apiLog(\n            \"OfflineStorageService\",\n            `Error syncing item ${item.id}: ${error}`,\n            LogLevelEnum.ERROR,\n          );\n        }\n      }\n\n      // Update the queue with remaining items\n      await this.saveToStorage(this.syncQueue, remainingQueue);\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Sync completed. ${syncQueue.length - remainingQueue.length} items synced, ${remainingQueue.length} items remaining`,\n        LogLevelEnum.INFO,\n      );\n\n      this.syncInProgress = false;\n      return true;\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error during sync process: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      this.syncInProgress = false;\n      return false;\n    }\n  }\n\n  /**\n   * Send data to the LMS when online\n   * @param {CommitObject} data - The data to send to the LMS\n   * @returns {Promise<ResultObject>} - Result of the sync operation\n   */\n  private async sendDataToLMS(data: CommitObject): Promise<ResultObject> {\n    if (!this.settings.lmsCommitUrl) {\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL || 101,\n      };\n    }\n\n    try {\n      // Apply request handler if configured\n      const processedData = this.settings.requestHandler(data);\n\n      // Send the data to the LMS\n      const init = {\n        method: \"POST\",\n        mode: this.settings.fetchMode,\n        body: JSON.stringify(processedData),\n        headers: {\n          ...this.settings.xhrHeaders,\n          \"Content-Type\": this.settings.commitRequestDataType,\n        },\n      } as RequestInit;\n\n      if (this.settings.xhrWithCredentials) {\n        init.credentials = \"include\";\n      }\n\n      const response = await fetch(this.settings.lmsCommitUrl as string, init);\n\n      // Process the response using the configured handler\n      const result =\n        typeof this.settings.responseHandler === \"function\"\n          ? await this.settings.responseHandler(response)\n          : await response.json();\n\n      if (\n        response.status >= 200 &&\n        response.status <= 299 &&\n        (result.result === true || result.result === global_constants.SCORM_TRUE)\n      ) {\n        if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n          result.errorCode = 0;\n        }\n        return result;\n      } else {\n        if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n          result.errorCode = this.error_codes.GENERAL;\n        }\n        return result;\n      }\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error sending data to LMS: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL || 101,\n      };\n    }\n  }\n\n  /**\n   * Check if the device is currently online\n   * @returns {boolean} - Online status\n   */\n  isDeviceOnline(): boolean {\n    return this.isOnline;\n  }\n\n  // noinspection JSValidateJSDoc\n  /**\n   * Get item from localStorage\n   * @param {string} key - The key to retrieve\n   * @returns {Promise<T|null>} - The retrieved data\n   */\n  private async getFromStorage<T>(key: string): Promise<T | null> {\n    const storedData = localStorage.getItem(key);\n    if (storedData) {\n      try {\n        return JSON.parse(storedData) as T;\n      } catch (e) {\n        return null;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Save item to localStorage\n   * @param {string} key - The key to store under\n   * @param {any} data - The data to store\n   * @returns {Promise<void>}\n   */\n  private async saveToStorage(key: string, data: any): Promise<void> {\n    localStorage.setItem(key, JSON.stringify(data));\n  }\n\n  /**\n   * Check if there is pending offline data for a course\n   * @param {string} courseId - Identifier for the course\n   * @returns {Promise<boolean>} - Whether there is pending data\n   */\n  async hasPendingOfflineData(courseId: string): Promise<boolean> {\n    const queue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n    return queue.some((item) => item.courseId === courseId);\n  }\n\n  /**\n   * Update the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: InternalSettings): void {\n    this.settings = settings;\n  }\n}\n","/**\n * Base class for API cmi objects\n */\nexport abstract class BaseCMI {\n  jsonString = false;\n  protected readonly _cmi_element: string;\n  protected _initialized = false;\n\n  /**\n   * Constructor for BaseCMI\n   * @param {string} cmi_element\n   */\n  constructor(cmi_element: string) {\n    this._cmi_element = cmi_element;\n  }\n\n  /**\n   * Getter for _initialized\n   * @return {boolean}\n   */\n  get initialized(): boolean {\n    return this._initialized;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize(): void {\n    this._initialized = true;\n  }\n\n  abstract reset(): void;\n}\n\n/**\n * Base class for cmi root objects\n */\nexport abstract class BaseRootCMI extends BaseCMI {\n  protected _start_time: number | undefined;\n\n  /**\n   * Start time of the course\n   * @type {number | undefined}\n   * @protected\n   */\n  get start_time(): number | undefined {\n    return this._start_time;\n  }\n\n  /**\n   * Setter for start_time. Can only be called once.\n   */\n  setStartTime(): void {\n    if (this._start_time === undefined) {\n      this._start_time = new Date().getTime();\n    } else {\n      throw new Error(\"Start time has already been set.\");\n    }\n  }\n\n  abstract getCurrentTotalTime(): string;\n}\n","export type ErrorCode = {\n  [key: string]: number;\n};\n\nexport const global_errors: ErrorCode = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nexport const scorm12_errors: ErrorCode = {\n  ...global_errors,\n  RETRIEVE_BEFORE_INIT: 301,\n  STORE_BEFORE_INIT: 301,\n  COMMIT_BEFORE_INIT: 301,\n  ARGUMENT_ERROR: 201,\n  CHILDREN_ERROR: 202,\n  COUNT_ERROR: 203,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 401,\n  VALUE_NOT_INITIALIZED: 301,\n  INVALID_SET_VALUE: 402,\n  READ_ONLY_ELEMENT: 403,\n  WRITE_ONLY_ELEMENT: 404,\n  TYPE_MISMATCH: 405,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n\nexport const scorm2004_errors: ErrorCode = {\n  ...global_errors,\n  INITIALIZATION_FAILED: 102,\n  INITIALIZED: 103,\n  TERMINATED: 104,\n  TERMINATION_FAILURE: 111,\n  TERMINATION_BEFORE_INIT: 112,\n  MULTIPLE_TERMINATION: 113,\n  MULTIPLE_TERMINATIONS: 113,\n  RETRIEVE_BEFORE_INIT: 122,\n  RETRIEVE_AFTER_TERM: 123,\n  STORE_BEFORE_INIT: 132,\n  STORE_AFTER_TERM: 133,\n  COMMIT_BEFORE_INIT: 142,\n  COMMIT_AFTER_TERM: 143,\n  ARGUMENT_ERROR: 201,\n  GENERAL_GET_FAILURE: 301,\n  GENERAL_SET_FAILURE: 351,\n  GENERAL_COMMIT_FAILURE: 391,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 402,\n  VALUE_NOT_INITIALIZED: 403,\n  READ_ONLY_ELEMENT: 404,\n  WRITE_ONLY_ELEMENT: 405,\n  TYPE_MISMATCH: 406,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n","import { BaseCMI } from \"./base_cmi\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Base class for cmi *.n objects\n */\nexport class CMIArray extends BaseCMI {\n  private readonly _errorCode: number;\n  private readonly _errorClass: typeof BaseScormValidationError;\n  private readonly __children: string;\n  public childArray: any[];\n\n  /**\n   * Constructor cmi *.n arrays\n   * @param {object} params\n   */\n  constructor(params: {\n    CMIElement: string;\n    children: string;\n    errorCode?: number;\n    errorClass?: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n    this.__children = params.children;\n    this._errorCode = params.errorCode || (scorm12_errors.GENERAL as number);\n    this._errorClass = params.errorClass || BaseScormValidationError;\n    this.childArray = [];\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(wipe: boolean = false): void {\n    this._initialized = false;\n    if (wipe) {\n      this.childArray = [];\n    } else {\n      // Reset all children\n      for (let i = 0; i < this.childArray.length; i++) {\n        this.childArray[i].reset();\n      }\n    }\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this._errorClass(this._cmi_element + \"._children\", this._errorCode);\n  }\n\n  /**\n   * Getter for _count\n   * @return {number}\n   */\n  get _count(): number {\n    return this.childArray.length;\n  }\n\n  /**\n   * Setter for _count. Just throws an error.\n   * @param {number} _count\n   */\n  set _count(_count: number) {\n    throw new this._errorClass(this._cmi_element + \"._count\", this._errorCode);\n  }\n\n  /**\n   * toJSON for *.n arrays\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result: { [key: string]: any } = {};\n    for (let i = 0; i < this.childArray.length; i++) {\n      result[i + \"\"] = this.childArray[i];\n    }\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { ErrorCode } from \"./constants/error_codes\";\nimport { global_constants } from \"./constants/api_constants\";\nimport * as Utilities from \"./utilities\";\nimport { formatMessage, StringKeyMap, stringMatches } from \"./utilities\";\nimport { BaseCMI, BaseRootCMI } from \"./cmi/common/base_cmi\";\nimport {\n  CommitObject,\n  InternalSettings,\n  LogLevel,\n  ResultObject,\n  Settings,\n} from \"./types/api_types\";\nimport { defaultLogHandler, DefaultSettings } from \"./constants/default_settings\";\nimport { IBaseAPI } from \"./interfaces/IBaseAPI\";\nimport { ScheduledCommit } from \"./types/scheduled_commit\";\nimport { LogLevelEnum } from \"./constants/enums\";\nimport { HttpService } from \"./services/HttpService\";\nimport { EventService } from \"./services/EventService\";\nimport { SerializationService } from \"./services/SerializationService\";\nimport { createErrorHandlingService } from \"./services/ErrorHandlingService\";\nimport { getLoggingService } from \"./services/LoggingService\";\nimport { OfflineStorageService } from \"./services/OfflineStorageService\";\nimport {\n  ICMIDataService,\n  IErrorHandlingService,\n  IEventService,\n  IHttpService,\n  ILoggingService,\n  IOfflineStorageService,\n  ISerializationService,\n} from \"./interfaces/services\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { ValidationError } from \"./exceptions\";\n\n/**\n * Base API class for AICC, SCORM 1.2, and SCORM 2004. Should be considered\n * abstract, and never initialized on its own.\n */\nexport default abstract class BaseAPI implements IBaseAPI {\n  private _timeout?: ScheduledCommit | undefined;\n  private readonly _error_codes: ErrorCode;\n  private _settings: InternalSettings = DefaultSettings;\n  private readonly _httpService: IHttpService;\n  private _eventService: IEventService;\n  private _serializationService: ISerializationService;\n  private readonly _errorHandlingService: IErrorHandlingService;\n  private readonly _loggingService: ILoggingService;\n  private readonly _offlineStorageService?: IOfflineStorageService;\n  private _courseId: string = \"\";\n\n  /**\n   * Constructor for Base API class. Sets some shared API fields, as well as\n   * sets up options for the API.\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Settings} settings - Optional settings for the API\n   * @param {IHttpService} httpService - Optional HTTP service instance\n   * @param {IEventService} eventService - Optional Event service instance\n   * @param {ISerializationService} serializationService - Optional Serialization service instance\n   * @param {ICMIDataService} cmiDataService - Optional CMI Data service instance\n   * @param {IErrorHandlingService} errorHandlingService - Optional Error Handling service instance\n   * @param {ILoggingService} loggingService - Optional Logging service instance\n   * @param {IOfflineStorageService} offlineStorageService - Optional Offline Storage service instance\n   */\n  protected constructor(\n    error_codes: ErrorCode,\n    settings?: Settings,\n    httpService?: IHttpService,\n    eventService?: IEventService,\n    serializationService?: ISerializationService,\n    cmiDataService?: ICMIDataService,\n    errorHandlingService?: IErrorHandlingService,\n    loggingService?: ILoggingService,\n    offlineStorageService?: IOfflineStorageService,\n  ) {\n    if (new.target === BaseAPI) {\n      throw new TypeError(\"Cannot construct BaseAPI instances directly\");\n    }\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n\n    this._error_codes = error_codes;\n\n    if (settings) {\n      this.settings = {\n        ...DefaultSettings,\n        ...settings,\n      } as InternalSettings;\n    }\n\n    // Initialize and configure LoggingService\n    this._loggingService = loggingService || getLoggingService();\n    this._loggingService.setLogLevel(this.settings.logLevel);\n\n    // If settings include a custom onLogMessage function, use it as the log handler\n    if (this.settings.onLogMessage) {\n      this._loggingService.setLogHandler(this.settings.onLogMessage);\n    } else {\n      this._loggingService.setLogHandler(defaultLogHandler);\n    }\n\n    // Initialize HTTP service\n    this._httpService = httpService || new HttpService(this.settings, this._error_codes);\n\n    // Initialize Event service\n    this._eventService =\n      eventService ||\n      new EventService((functionName, message, level, element) =>\n        this.apiLog(functionName, message, level, element),\n      );\n\n    // Initialize Serialization service\n    this._serializationService = serializationService || new SerializationService();\n\n    // Initialize Error Handling service\n    this._errorHandlingService =\n      errorHandlingService ||\n      createErrorHandlingService(\n        this._error_codes,\n        (functionName, message, level, element) =>\n          this.apiLog(functionName, message, level || LogLevelEnum.ERROR, element),\n        (errorNumber, detail) => this.getLmsErrorMessageDetails(errorNumber, detail),\n      );\n\n    // Initialize Offline Storage service if enabled\n    if (this.settings.enableOfflineSupport) {\n      this._offlineStorageService =\n        offlineStorageService ||\n        new OfflineStorageService(\n          this.settings,\n          this._error_codes,\n          (functionName, message, level, element) =>\n            this.apiLog(functionName, message, level, element),\n        );\n\n      if (this.settings.courseId) {\n        this._courseId = this.settings.courseId;\n      }\n\n      // Check for offline data to restore on initialization\n      if (this._offlineStorageService && this._courseId) {\n        this._offlineStorageService\n          .getOfflineData(this._courseId)\n          .then((offlineData) => {\n            if (offlineData) {\n              this.apiLog(\"constructor\", \"Found offline data to restore\", LogLevelEnum.INFO);\n              // Restore data from offline storage\n              this.loadFromJSON(offlineData.runtimeData);\n            }\n          })\n          .catch((error) => {\n            this.apiLog(\n              \"constructor\",\n              `Error retrieving offline data: ${error}`,\n              LogLevelEnum.ERROR,\n            );\n          });\n      }\n    }\n  }\n\n  public abstract cmi: BaseCMI;\n  public startingData?: StringKeyMap;\n\n  public currentState: number;\n\n  /**\n   * Get the last error code\n   * @return {string}\n   */\n  get lastErrorCode(): string {\n    return this._errorHandlingService?.lastErrorCode ?? \"0\";\n  }\n\n  /**\n   * Set the last error code\n   * @param {string} errorCode\n   */\n  set lastErrorCode(errorCode: string) {\n    if (this._errorHandlingService) {\n      this._errorHandlingService.lastErrorCode = errorCode;\n    }\n  }\n\n  /**\n   * Protected getter for eventService\n   * @return {IEventService}\n   */\n  protected get eventService(): IEventService {\n    return this._eventService;\n  }\n\n  /**\n   * Protected getter for loggingService\n   * @return {ILoggingService}\n   */\n  protected get loggingService(): ILoggingService {\n    return this._loggingService;\n  }\n\n  /**\n   * Reset the API to its initial state.\n   * This method clears all current data and resets the API to an uninitialized state.\n   * It can optionally accept new settings to configure the API after reset.\n   *\n   * @param {Settings} settings - Optional new settings to apply after reset\n   */\n  abstract reset(settings?: Settings): void;\n\n  /**\n   * Common reset method for all APIs. New settings are merged with the existing settings.\n   * @param {Settings} settings\n   * @protected\n   */\n  commonReset(settings?: Settings): void {\n    this.apiLog(\"reset\", \"Called\", LogLevelEnum.INFO);\n\n    this.settings = { ...this.settings, ...settings };\n\n    this.clearScheduledCommit();\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n    this.lastErrorCode = \"0\";\n    this._eventService.reset();\n    this.startingData = {};\n\n    // Update offline storage service with new settings if it exists\n    if (this._offlineStorageService) {\n      this._offlineStorageService.updateSettings(this.settings);\n\n      if (settings?.courseId) {\n        this._courseId = settings.courseId;\n      }\n    }\n  }\n\n  /**\n   * Initialize the API\n   * @param {string} callbackName\n   * @param {string} initializeMessage\n   * @param {string} terminationMessage\n   * @return {string}\n   */\n  initialize(\n    callbackName: string,\n    initializeMessage?: string,\n    terminationMessage?: string,\n  ): string {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.isInitialized()) {\n      this.throwSCORMError(\"api\", this._error_codes.INITIALIZED, initializeMessage);\n    } else if (this.isTerminated()) {\n      this.throwSCORMError(\"api\", this._error_codes.TERMINATED, terminationMessage);\n    } else {\n      if (this.settings.selfReportSessionTime) {\n        (this.cmi as BaseRootCMI).setStartTime();\n      }\n\n      this.currentState = global_constants.STATE_INITIALIZED;\n      this.lastErrorCode = \"0\";\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n\n      // If enabled, attempt to sync offline data on initialization\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._courseId &&\n        this.settings.syncOnInitialize &&\n        this._offlineStorageService.isDeviceOnline()\n      ) {\n        this._offlineStorageService.hasPendingOfflineData(this._courseId).then((hasPendingData) => {\n          if (hasPendingData) {\n            this.apiLog(\n              callbackName,\n              \"Syncing pending offline data on initialization\",\n              LogLevelEnum.INFO,\n            );\n            this._offlineStorageService?.syncOfflineData().then((syncSuccess) => {\n              if (syncSuccess) {\n                this.apiLog(callbackName, \"Successfully synced offline data\", LogLevelEnum.INFO);\n                this.processListeners(\"OfflineDataSynced\");\n              }\n            });\n          }\n        });\n      }\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Initialize the LMS API\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsInitialize(): string;\n\n  /**\n   * Finish the current LMS API session\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsFinish(): string;\n\n  /**\n   * Get the value of a CMI element from the LMS\n   * @param {string} CMIElement - The CMI element to get the value of\n   * @return {string} The value of the CMI element\n   */\n  abstract lmsGetValue(CMIElement: string): string;\n\n  /**\n   * Set the value of a CMI element in the LMS\n   * @param {string} CMIElement - The CMI element to set the value of\n   * @param {any} value - The value to set\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsSetValue(CMIElement: string, value: any): string;\n\n  /**\n   * Commit the current data to the LMS\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsCommit(): string;\n\n  /**\n   * Get the last error code from the LMS\n   * @return {string} The last error code\n   */\n  abstract lmsGetLastError(): string;\n\n  /**\n   * Get the error string for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get the string for\n   * @return {string} The error string\n   */\n  abstract lmsGetErrorString(CMIErrorCode: string | number): string;\n\n  /**\n   * Get diagnostic information for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get diagnostic information for\n   * @return {string} The diagnostic information\n   */\n  abstract lmsGetDiagnostic(CMIErrorCode: string | number): string;\n\n  /**\n   * Abstract method for validating that a response is correct.\n   * This method is used to validate the format and content of a response\n   * before it is set in the CMI data model.\n   *\n   * @param {string} _CMIElement - The CMI element path to validate\n   * @param {any} _value - The value to validate\n   * @throws {Error} If the response format is invalid\n   */\n  abstract validateCorrectResponse(_CMIElement: string, _value: any): void;\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   * APIs that inherit BaseAPI should override this method.\n   *\n   * @param {string} _CMIElement - unused\n   * @param {*} _value - unused\n   * @param {boolean} _foundFirstIndex - unused\n   * @return {BaseCMI|null}\n   * @abstract\n   */\n  abstract getChildElement(\n    _CMIElement: string,\n    _value: any,\n    _foundFirstIndex: boolean,\n  ): BaseCMI | null;\n\n  /**\n   * Attempts to store the data to the LMS, logs data if no LMS configured\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _calculateTotalTime\n   * @return {ResultObject}\n   * @abstract\n   */\n  abstract storeData(_calculateTotalTime: boolean): Promise<ResultObject>;\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   *\n   * @param {boolean} _terminateCommit - Whether this commit is part of the termination process\n   * @param {boolean} [_includeTotalTime] - Whether to include total time in the commit data\n   * @return {StringKeyMap|Array}\n   * @abstract\n   */\n  abstract renderCommitCMI(\n    _terminateCommit: boolean,\n    _includeTotalTime?: boolean,\n  ): StringKeyMap | Array<string>;\n\n  /**\n   * Render the commit object to the shortened format for LMS commit.\n   * This method transforms the CMI data into a format suitable for sending to the LMS.\n   * It is called during the commit process to prepare the data for transmission.\n   *\n   * @param {boolean} _terminateCommit - Whether this commit is part of the termination process\n   * @param {boolean} [_includeTotalTime] - Whether to include total time in the commit data\n   * @return {CommitObject} A formatted object containing the data to be sent to the LMS\n   * @example\n   * // Example of a commit object structure\n   * {\n   *   method: \"POST\",\n   *   params: {\n   *     cmi: { ... },\n   *     finishState: \"COMPLETED\"\n   *   }\n   * }\n   */\n  abstract renderCommitObject(_terminateCommit: boolean, _includeTotalTime?: boolean): CommitObject;\n\n  /**\n   * Logging for all SCORM actions\n   *\n   * @param {string} functionName\n   * @param {string} logMessage\n   * @param {number} messageLevel\n   * @param {string} CMIElement\n   */\n  apiLog(functionName: string, logMessage: string, messageLevel: LogLevel, CMIElement?: string) {\n    logMessage = formatMessage(functionName, logMessage, CMIElement);\n\n    // Delegate to LoggingService which handles log level comparison properly\n    this._loggingService.log(messageLevel, logMessage);\n  }\n\n  /**\n   * Getter for _settings\n   * @return {InternalSettings}\n   */\n  get settings(): InternalSettings {\n    return this._settings;\n  }\n\n  /**\n   * Setter for _settings\n   * @param {Settings} settings\n   */\n  set settings(settings: Settings) {\n    const previousSettings = this._settings;\n    // Merge the incoming settings with the existing settings\n    this._settings = { ...this._settings, ...settings } as InternalSettings;\n\n    // Update HTTP service settings\n    this._httpService?.updateSettings(this._settings);\n\n    // The following properties are duplicated as class properties for easier access\n    // and need to be manually updated to stay in sync with the settings object\n\n    // Update log level if it changed\n    if (settings.logLevel !== undefined && settings.logLevel !== previousSettings.logLevel) {\n      this._loggingService?.setLogLevel(settings.logLevel);\n    }\n\n    // Update log handler if onLogMessage changed\n    if (\n      settings.onLogMessage !== undefined &&\n      settings.onLogMessage !== previousSettings.onLogMessage\n    ) {\n      this._loggingService?.setLogHandler(settings.onLogMessage);\n    }\n  }\n\n  /**\n   * Terminates the current run of the API\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async terminate(callbackName: string, checkTerminated: boolean): Promise<string> {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.TERMINATION_BEFORE_INIT ?? 0,\n        this._error_codes.MULTIPLE_TERMINATION ?? 0,\n      )\n    ) {\n      this.currentState = global_constants.STATE_TERMINATED;\n      // If enabled, attempt to sync offline data before termination\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._courseId &&\n        this.settings.syncOnTerminate &&\n        this._offlineStorageService.isDeviceOnline()\n      ) {\n        const hasPendingData = await this._offlineStorageService.hasPendingOfflineData(\n          this._courseId,\n        );\n        if (hasPendingData) {\n          this.apiLog(\n            callbackName,\n            \"Syncing pending offline data before termination\",\n            LogLevelEnum.INFO,\n          );\n          await this._offlineStorageService.syncOfflineData();\n        }\n      }\n\n      const result: ResultObject = await this.storeData(true);\n      if ((result.errorCode ?? 0) > 0) {\n        // Log detailed error information before throwing SCORM error\n        if (result.errorMessage) {\n          this.apiLog(\n            \"terminate\",\n            `Terminate failed with error: ${result.errorMessage}`,\n            LogLevelEnum.ERROR,\n          );\n        }\n        if (result.errorDetails) {\n          this.apiLog(\n            \"terminate\",\n            `Error details: ${JSON.stringify(result.errorDetails)}`,\n            LogLevelEnum.DEBUG,\n          );\n        }\n        this.throwSCORMError(\"api\", result.errorCode ?? 0);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Get the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  getValue(callbackName: string, checkTerminated: boolean, CMIElement: string): string {\n    let returnValue: string = \"\";\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.RETRIEVE_BEFORE_INIT ?? 0,\n        this._error_codes.RETRIEVE_AFTER_TERM ?? 0,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.getCMIValue(CMIElement);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement);\n    }\n\n    this.apiLog(callbackName, \": returned: \" + returnValue, LogLevelEnum.INFO, CMIElement);\n\n    if (returnValue === undefined) {\n      return \"\";\n    }\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Sets the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {string} commitCallback\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  setValue(\n    callbackName: string,\n    commitCallback: string,\n    checkTerminated: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (value !== undefined) {\n      value = String(value);\n    }\n    let returnValue: string = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.STORE_BEFORE_INIT ?? 0,\n        this._error_codes.STORE_AFTER_TERM ?? 0,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.setCMIValue(CMIElement, value);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement, value);\n    }\n\n    if (returnValue === undefined) {\n      returnValue = global_constants.SCORM_FALSE;\n    }\n\n    // If we didn't have any errors while setting the data, go ahead and\n    // schedule a commit, if autocommit is turned on\n    if (String(this.lastErrorCode) === \"0\") {\n      if (this.settings.autocommit) {\n        this.scheduleCommit(this.settings.autocommitSeconds * 1000, commitCallback);\n      }\n    }\n\n    this.apiLog(\n      callbackName,\n      \": \" + value + \": result: \" + returnValue,\n      LogLevelEnum.INFO,\n      CMIElement,\n    );\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async commit(callbackName: string, checkTerminated: boolean = false): Promise<string> {\n    this.clearScheduledCommit();\n\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.COMMIT_BEFORE_INIT ?? 0,\n        this._error_codes.COMMIT_AFTER_TERM ?? 0,\n      )\n    ) {\n      const result = await this.storeData(false);\n      if ((result.errorCode ?? 0) > 0) {\n        // Log detailed error information before throwing SCORM error\n        if (result.errorMessage) {\n          this.apiLog(\n            \"commit\",\n            `Commit failed with error: ${result.errorMessage}`,\n            LogLevelEnum.ERROR,\n          );\n        }\n        if (result.errorDetails) {\n          this.apiLog(\n            \"commit\",\n            `Error details: ${JSON.stringify(result.errorDetails)}`,\n            LogLevelEnum.DEBUG,\n          );\n        }\n        this.throwSCORMError(\"api\", result.errorCode);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      this.apiLog(callbackName, \" Result: \" + returnValue, LogLevelEnum.DEBUG, \"HttpRequest\");\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      this.processListeners(callbackName);\n\n      // If online and there is offline data pending, attempt to sync it\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._offlineStorageService.isDeviceOnline() &&\n        this._courseId\n      ) {\n        this._offlineStorageService.hasPendingOfflineData(this._courseId).then((hasPendingData) => {\n          if (hasPendingData) {\n            this.apiLog(callbackName, \"Syncing pending offline data\", LogLevelEnum.INFO);\n            this._offlineStorageService?.syncOfflineData().then((syncSuccess) => {\n              if (syncSuccess) {\n                this.apiLog(callbackName, \"Successfully synced offline data\", LogLevelEnum.INFO);\n                this.processListeners(\"OfflineDataSynced\");\n              } else {\n                this.apiLog(callbackName, \"Failed to sync some offline data\", LogLevelEnum.WARN);\n              }\n            });\n          }\n        });\n      }\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Returns last error code\n   * @param {string} callbackName\n   * @return {string}\n   */\n  getLastError(callbackName: string): string {\n    const returnValue = String(this.lastErrorCode);\n\n    this.processListeners(callbackName);\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getErrorString(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getDiagnostic(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode, true);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Checks the LMS state and ensures it has been initialized.\n   *\n   * @param {boolean} checkTerminated\n   * @param {number} beforeInitError\n   * @param {number} afterTermError\n   * @return {boolean}\n   */\n  checkState(checkTerminated: boolean, beforeInitError: number, afterTermError: number): boolean {\n    if (this.isNotInitialized()) {\n      this.throwSCORMError(\"api\", beforeInitError);\n      return false;\n    } else if (checkTerminated && this.isTerminated()) {\n      this.throwSCORMError(\"api\", afterTermError);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {(string|number)} _errorNumber\n   * @param {boolean} _detail\n   * @return {string}\n   * @abstract\n   */\n  getLmsErrorMessageDetails(_errorNumber: string | number, _detail: boolean = false): string {\n    throw new Error(\"The getLmsErrorMessageDetails method has not been implemented\");\n  }\n\n  /**\n   * Gets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @return {string}\n   * @abstract\n   */\n  getCMIValue(_CMIElement: string): string {\n    throw new Error(\"The getCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Sets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @param {any} _value\n   * @return {string}\n   * @abstract\n   */\n  setCMIValue(_CMIElement: string, _value: any): string {\n    throw new Error(\"The setCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Shared API method to set a valid for a given element.\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  _commonSetCMIValue(\n    methodName: string,\n    scorm2004: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (!CMIElement || CMIElement === \"\") {\n      return global_constants.SCORM_FALSE;\n    }\n\n    this.lastErrorCode = \"0\";\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap | BaseCMI = this as StringKeyMap;\n    let returnValue = global_constants.SCORM_FALSE;\n    let foundFirstIndex = false;\n\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      const attribute = structure[idx];\n\n      if (idx === structure.length - 1) {\n        if (scorm2004 && attribute && attribute.substring(0, 8) === \"{target=\") {\n          if (this.isInitialized()) {\n            this.throwSCORMError(CMIElement, this._error_codes.READ_ONLY_ELEMENT);\n            break;\n          } else {\n            refObject = {\n              ...refObject,\n              attribute: value,\n            };\n          }\n        } else if (\n          typeof attribute === \"undefined\" ||\n          !this._checkObjectHasProperty(refObject as StringKeyMap, attribute)\n        ) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        } else {\n          if (\n            stringMatches(CMIElement, \"\\\\.correct_responses\\\\.\\\\d+$\") &&\n            this.isInitialized() &&\n            attribute !== \"pattern\"\n          ) {\n            this.validateCorrectResponse(CMIElement, value);\n            if (this.lastErrorCode !== \"0\") {\n              this.throwSCORMError(CMIElement, this._error_codes.TYPE_MISMATCH);\n              break;\n            }\n          }\n\n          if (!scorm2004 || this._errorHandlingService.lastErrorCode === \"0\") {\n            if (\n              typeof attribute === \"undefined\" ||\n              attribute === \"__proto__\" ||\n              attribute === \"constructor\"\n            ) {\n              this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n              break;\n            }\n            (refObject as StringKeyMap)[attribute] = value;\n            returnValue = global_constants.SCORM_TRUE;\n          }\n        }\n      } else {\n        if (\n          typeof attribute === \"undefined\" ||\n          !this._checkObjectHasProperty(refObject as StringKeyMap, attribute)\n        ) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n        refObject = (refObject as StringKeyMap)[attribute] as StringKeyMap;\n        if (!refObject) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n\n        if (refObject instanceof CMIArray) {\n          const index = parseInt(structure[idx + 1] || \"0\", 10);\n\n          // SCO is trying to set an item on an array\n          if (!isNaN(index)) {\n            const item = refObject.childArray[index];\n\n            if (item) {\n              refObject = item;\n              foundFirstIndex = true;\n            } else {\n              const newChild = this.getChildElement(CMIElement, value, foundFirstIndex);\n              foundFirstIndex = true;\n\n              if (!newChild) {\n                if (this.lastErrorCode === \"0\") {\n                  this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n                }\n                break;\n              } else {\n                if (refObject.initialized) newChild.initialize();\n                refObject.childArray[index] = newChild;\n                refObject = newChild;\n              }\n            }\n\n            // Have to update idx value to skip the array position\n            idx++;\n          }\n        }\n      }\n    }\n\n    if (returnValue === global_constants.SCORM_FALSE) {\n      this.apiLog(\n        methodName,\n        `There was an error setting the value for: ${CMIElement}, value of: ${value}`,\n        LogLevelEnum.WARN,\n      );\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @return {any}\n   */\n  _commonGetCMIValue(methodName: string, scorm2004: boolean, CMIElement: string): any {\n    if (!CMIElement || CMIElement === \"\") {\n      return \"\";\n    }\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap = this as StringKeyMap;\n    let attribute = null;\n\n    const uninitializedErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) has not been initialized.`;\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      attribute = structure[idx];\n\n      if (!scorm2004) {\n        if (idx === structure.length - 1) {\n          if (\n            typeof attribute === \"undefined\" ||\n            !this._checkObjectHasProperty(refObject, attribute)\n          ) {\n            this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n            return;\n          }\n        }\n      } else {\n        if (\n          String(attribute).substring(0, 8) === \"{target=\" &&\n          typeof refObject._isTargetValid == \"function\"\n        ) {\n          const target = String(attribute).substring(8, String(attribute).length - 9);\n          return refObject._isTargetValid(target);\n        } else if (\n          typeof attribute === \"undefined\" ||\n          !this._checkObjectHasProperty(refObject, attribute)\n        ) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          return;\n        }\n      }\n\n      if (attribute !== undefined && attribute !== null) {\n        refObject = refObject[attribute] as StringKeyMap;\n        if (refObject === undefined) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n      } else {\n        this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n        break;\n      }\n\n      if (refObject instanceof CMIArray) {\n        const index = parseInt(structure[idx + 1] || \"\", 10);\n\n        // SCO is trying to set an item on an array\n        if (!isNaN(index)) {\n          const item = refObject.childArray[index];\n\n          if (item) {\n            refObject = item;\n          } else {\n            this.throwSCORMError(\n              CMIElement,\n              this._error_codes.VALUE_NOT_INITIALIZED,\n              uninitializedErrorMessage,\n            );\n            break;\n          }\n\n          // Have to update idx value to skip the array position\n          idx++;\n        }\n      }\n    }\n\n    if (refObject === null || refObject === undefined) {\n      if (!scorm2004) {\n        if (attribute === \"_children\") {\n          this.throwSCORMError(CMIElement, this._error_codes.CHILDREN_ERROR, undefined);\n        } else if (attribute === \"_count\") {\n          this.throwSCORMError(CMIElement, this._error_codes.COUNT_ERROR, undefined);\n        }\n      }\n    } else {\n      return refObject;\n    }\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isInitialized(): boolean {\n    return this.currentState === global_constants.STATE_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_NOT_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isNotInitialized(): boolean {\n    return this.currentState === global_constants.STATE_NOT_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_TERMINATED\n   *\n   * @return {boolean}\n   */\n  isTerminated(): boolean {\n    return this.currentState === global_constants.STATE_TERMINATED;\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event.\n   * This method allows you to register a callback function that will be executed\n   * when the specified event occurs.\n   *\n   * @param {string} listenerName - The name of the event to listen for (e.g., \"Initialize\", \"Terminate\", \"GetValue\", \"SetValue\", \"Commit\")\n   * @param {function} callback - The function to execute when the event occurs. The callback will receive relevant event data.\n   * @example\n   * // Listen for Initialize events\n   * api.on(\"Initialize\", function() {\n   *   console.log(\"API has been initialized\");\n   * });\n   *\n   * // Listen for SetValue events\n   * api.on(\"SetValue\", function(element, value) {\n   *   console.log(\"Setting \" + element + \" to \" + value);\n   * });\n   */\n  on(listenerName: string, callback: Function) {\n    this._eventService.on(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener.\n   * This method removes a previously registered callback for an event.\n   * Both the event name and the callback reference must match what was used in the 'on' method.\n   *\n   * @param {string} listenerName - The name of the event to stop listening for\n   * @param {function} callback - The callback function to remove\n   * @example\n   * // Remove a specific listener\n   * const myCallback = function() { console.log(\"API initialized\"); };\n   * api.on(\"Initialize\", myCallback);\n   * // Later, when you want to remove it:\n   * api.off(\"Initialize\", myCallback);\n   */\n  off(listenerName: string, callback: Function) {\n    this._eventService.off(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event.\n   * This method removes all callbacks registered for the specified event.\n   *\n   * @param {string} listenerName - The name of the event to clear all listeners for\n   * @example\n   * // Remove all listeners for the Initialize event\n   * api.clear(\"Initialize\");\n   */\n  clear(listenerName: string) {\n    this._eventService.clear(listenerName);\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created for a specific event.\n   * This method is called internally when SCORM events occur to notify all registered listeners.\n   * It triggers all callback functions registered for the specified event.\n   *\n   * @param {string} functionName - The name of the function/event that occurred\n   * @param {string} CMIElement - Optional CMI element involved in the event\n   * @param {any} value - Optional value associated with the event\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this._eventService.processListeners(functionName, CMIElement, value);\n  }\n\n  /**\n   * Throws a SCORM error with the specified error number and optional message.\n   * This method sets the last error code and can be used to indicate that an operation failed.\n   * The error number should correspond to one of the standard SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The SCORM error code to set\n   * @param {string} message - Optional custom error message to provide additional context\n   * @example\n   * // Throw a \"not initialized\" error\n   * this.throwSCORMError(301, \"The API must be initialized before calling GetValue\");\n   */\n  throwSCORMError(\n    CMIElement: string | undefined,\n    errorNumber: number | undefined,\n    message?: string,\n  ) {\n    this._errorHandlingService.throwSCORMError(CMIElement, errorNumber ?? 0, message);\n  }\n\n  /**\n   * Clears the last SCORM error code when an operation succeeds.\n   * This method is typically called after successful API operations to reset the error state.\n   * It only clears the error if the success parameter is \"true\".\n   *\n   * @param {string} success - A string indicating whether the operation succeeded (\"true\" or \"false\")\n   * @example\n   * // Clear error after successful operation\n   * this.clearSCORMError(\"true\");\n   */\n  clearSCORMError(success: string) {\n    this._errorHandlingService.clearSCORMError(success);\n  }\n\n  /**\n   * Load the CMI from a flattened JSON object.\n   * This method populates the CMI data model from a flattened JSON structure\n   * where keys represent CMI element paths (e.g., \"cmi.core.student_id\").\n   *\n   * @param {StringKeyMap} json - The flattened JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a flattened JSON structure\n   * api.loadFromFlattenedJSON({\n   *   \"cmi.core.student_id\": \"12345\",\n   *   \"cmi.core.student_name\": \"John Doe\",\n   *   \"cmi.core.lesson_status\": \"incomplete\"\n   * });\n   */\n  loadFromFlattenedJSON(json: StringKeyMap, CMIElement?: string) {\n    if (!CMIElement) {\n      // by default, we start from a blank string because we're expecting each element to start with `cmi`\n      CMIElement = \"\";\n    }\n\n    this._serializationService.loadFromFlattenedJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Returns a flattened JSON object representing the current CMI data.\n   */\n  getFlattenedCMI(): StringKeyMap {\n    return Utilities.flatten(this.renderCMIToJSONObject());\n  }\n\n  /**\n   * Loads CMI data from a hierarchical JSON object.\n   * This method populates the CMI data model from a nested JSON structure\n   * that mirrors the CMI object hierarchy.\n   *\n   * @param {StringKeyMap} json - The hierarchical JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a hierarchical JSON structure\n   * api.loadFromJSON({\n   *   core: {\n   *     student_id: \"12345\",\n   *     student_name: \"John Doe\",\n   *     lesson_status: \"incomplete\"\n   *   },\n   *   objectives: [\n   *     { id: \"obj1\", score: { raw: 85 } }\n   *   ]\n   * });\n   */\n  loadFromJSON(json: StringKeyMap, CMIElement: string = \"\") {\n    if (\n      (!CMIElement || CMIElement === \"\") &&\n      !Object.hasOwnProperty.call(json, \"cmi\") &&\n      !Object.hasOwnProperty.call(json, \"adl\")\n    ) {\n      // providing a backward compatibility for the old v1 API\n      CMIElement = \"cmi\";\n    }\n    this._serializationService.loadFromJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Render the CMI object to a JSON string for sending to an LMS.\n   * This method serializes the current CMI data model to a JSON string.\n   * The output format is controlled by the sendFullCommit setting.\n   *\n   * @return {string} A JSON string representation of the CMI data\n   * @example\n   * // Get the current CMI data as a JSON string\n   * const jsonString = api.renderCMIToJSONString();\n   * console.log(jsonString); // '{\"core\":{\"student_id\":\"12345\",...}}'\n   */\n  renderCMIToJSONString(): string {\n    return this._serializationService.renderCMIToJSONString(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Returns a JavaScript object representing the current CMI data.\n   * This method creates a plain JavaScript object that mirrors the\n   * structure of the CMI data model, suitable for further processing.\n   *\n   * @return {StringKeyMap} A JavaScript object representing the CMI data\n   * @example\n   * // Get the current CMI data as a JavaScript object\n   * const cmiObject = api.renderCMIToJSONObject();\n   * console.log(cmiObject.core.student_id); // \"12345\"\n   */\n  renderCMIToJSONObject(): StringKeyMap {\n    return this._serializationService.renderCMIToJSONObject(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Process an HTTP request\n   *\n   * @param {string} url - The URL to send the request to\n   * @param {CommitObject | StringKeyMap | Array<any>} params - The parameters to send\n   * @param {boolean} immediate - Whether to send the request immediately without waiting\n   * @returns {Promise<ResultObject>} - The result of the request\n   * @async\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n  ): Promise<ResultObject> {\n    // If offline support is enabled and device is offline, store data locally instead of sending\n    if (\n      this.settings.enableOfflineSupport &&\n      this._offlineStorageService &&\n      !this._offlineStorageService.isDeviceOnline() &&\n      this._courseId\n    ) {\n      this.apiLog(\n        \"processHttpRequest\",\n        \"Device is offline, storing data locally\",\n        LogLevelEnum.INFO,\n      );\n\n      if (params && typeof params === \"object\" && \"cmi\" in params) {\n        return await this._offlineStorageService.storeOffline(\n          this._courseId,\n          params as CommitObject,\n        );\n      } else {\n        this.apiLog(\n          \"processHttpRequest\",\n          \"Invalid commit data format for offline storage\",\n          LogLevelEnum.ERROR,\n        );\n        return {\n          result: global_constants.SCORM_FALSE,\n          errorCode: this._error_codes.GENERAL ?? 101, // Fallback to a default error code if GENERAL is undefined\n        };\n      }\n    }\n\n    // Otherwise, proceed with normal HTTP request\n    return await this._httpService.processHttpRequest(\n      url,\n      params,\n      immediate,\n      (functionName, message, level, element) => this.apiLog(functionName, message, level, element),\n      (functionName, CMIElement, value) => this.processListeners(functionName, CMIElement, value),\n    );\n  }\n\n  /**\n   * Schedules a commit operation to occur after a specified delay.\n   * This method is used to implement auto-commit functionality, where data\n   * is periodically sent to the LMS without requiring explicit commit calls.\n   *\n   * @param {number} when - The number of milliseconds to wait before committing\n   * @param {string} callback - The name of the commit event callback\n   * @example\n   * // Schedule a commit to happen in 60 seconds\n   * api.scheduleCommit(60000, \"commit\");\n   */\n  scheduleCommit(when: number, callback: string) {\n    if (!this._timeout) {\n      this._timeout = new ScheduledCommit(this, when, callback);\n      this.apiLog(\"scheduleCommit\", \"scheduled\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Clears and cancels any currently scheduled commits.\n   * This method is typically called when an explicit commit is performed\n   * or when the API is terminated, to prevent redundant commits.\n   *\n   * @example\n   * // Cancel any pending scheduled commits\n   * api.clearScheduledCommit();\n   */\n  clearScheduledCommit() {\n    if (this._timeout) {\n      this._timeout.cancel();\n      this._timeout = undefined;\n      this.apiLog(\"clearScheduledCommit\", \"cleared\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Checks if an object has a specific property, using multiple detection methods.\n   * This method performs a thorough check for property existence by:\n   * 1. Checking if it's an own property using Object.hasOwnProperty\n   * 2. Checking if it's defined in the prototype with a property descriptor\n   * 3. Checking if it's accessible via the 'in' operator (includes inherited properties)\n   *\n   * @param {StringKeyMap} StringKeyMap - The object to check for the property\n   * @param {string} attribute - The property name to look for\n   * @return {boolean} True if the property exists on the object or its prototype chain\n   * @private\n   *\n   * @example\n   * // Check for an own property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"name\"); // Returns true\n   *\n   * @example\n   * // Check for an inherited property\n   * class Parent { get type() { return \"parent\"; } }\n   * const child = Object.create(new Parent());\n   * this._checkObjectHasProperty(child, \"type\"); // Returns true\n   *\n   * @example\n   * // Check for a non-existent property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"age\"); // Returns false\n   */\n  private _checkObjectHasProperty(StringKeyMap: StringKeyMap, attribute: string): boolean {\n    return (\n      Object.hasOwnProperty.call(StringKeyMap, attribute) ||\n      Object.getOwnPropertyDescriptor(Object.getPrototypeOf(StringKeyMap), attribute) != null ||\n      attribute in StringKeyMap\n    );\n  }\n\n  /**\n   * Handles exceptions that occur when accessing CMI values.\n   * This method delegates to the ErrorHandlingService to process exceptions\n   * that occur during CMI data operations, ensuring consistent error handling\n   * throughout the API.\n   *\n   * @param {string} CMIElement\n   * @param {any} e - The exception that was thrown\n   * @param {string} returnValue - The default return value to use if an error occurs\n   * @return {string} Either the original returnValue or SCORM_FALSE if an error occurred\n   * @private\n   *\n   * @example\n   * // Handle a validation error when getting a CMI value\n   * try {\n   *   return this.getCMIValue(\"cmi.core.score.raw\");\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"\");\n   * }\n   *\n   * @example\n   * // Handle a general error when setting a CMI value\n   * try {\n   *   this.setCMIValue(\"cmi.core.lesson_status\", \"completed\");\n   *   return \"true\";\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"false\");\n   * }\n   */\n  private handleValueAccessException(CMIElement: string, e: any, returnValue: string): string {\n    if (e instanceof ValidationError) {\n      this.lastErrorCode = String(e.errorCode);\n      returnValue = global_constants.SCORM_FALSE;\n      this.throwSCORMError(CMIElement, e.errorCode, e.errorMessage);\n    } else {\n      if (e instanceof Error && e.message) {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, e.message);\n      } else {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, \"Unknown error\");\n      }\n    }\n    return returnValue;\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS.\n   * This method delegates to the SerializationService to create a properly\n   * formatted object containing the CMI data that needs to be sent to the LMS.\n   * The format and content of the commit object depend on whether this is a\n   * regular commit or a termination commit.\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @return {CommitObject|StringKeyMap|Array} The formatted commit object\n   * @protected\n   *\n   * @example\n   * // Create a regular commit object\n   * const regularCommit = this.getCommitObject(false);\n   * // Result might be: { cmi: { core: { lesson_status: \"incomplete\" } } }\n   *\n   * @example\n   * // Create a termination commit object (includes total_time)\n   * const terminationCommit = this.getCommitObject(true);\n   * // Result might be: { cmi: { core: { lesson_status: \"completed\", total_time: \"PT1H30M\" } } }\n   */\n  protected getCommitObject(terminateCommit: boolean): CommitObject | StringKeyMap | Array<any> {\n    return this._serializationService.getCommitObject(\n      terminateCommit,\n      this.settings.alwaysSendTotalTime,\n      this.settings.renderCommonCommitFields,\n      (terminateCommit: boolean, includeTotalTime?: boolean) =>\n        this.renderCommitObject(terminateCommit, includeTotalTime),\n      (terminateCommit: boolean, includeTotalTime?: boolean) =>\n        this.renderCommitCMI(terminateCommit, includeTotalTime),\n      this.settings.logLevel,\n    );\n  }\n}\n","import { ValidationError } from \"../exceptions\";\nimport { scorm2004_constants } from \"../constants/api_constants\";\n\nconst scorm2004_errors = scorm2004_constants.error_descriptions;\n\n/**\n * SCORM 2004 Validation Error\n */\nexport class Scorm2004ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm2004_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm2004_errors[String(errorCode)]?.basicMessage || \"Unknown error\",\n        scorm2004_errors[String(errorCode)]?.detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm2004_errors[\"101\"]?.basicMessage || \"General error\",\n        scorm2004_errors[\"101\"]?.detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm2004ValidationError.prototype);\n  }\n}\n","import { BaseScormValidationError } from \"../../exceptions\";\nimport { memoize } from \"../../utilities\";\n\n/**\n * Check if the value matches the proper format. If not, throw proper error code.\n *\n * @param {string} value\n * @param {string} regexPattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @param {boolean} [allowEmptyString]\n * @return {boolean}\n */\nexport const checkValidFormat = memoize(\n  (\n    CMIElement: string,\n    value: string,\n    regexPattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n    allowEmptyString?: boolean,\n  ): boolean => {\n    // noinspection SuspiciousTypeOfGuard\n    if (typeof value !== \"string\") {\n      return false;\n    }\n    const formatRegex = new RegExp(regexPattern);\n    const matches = value.match(formatRegex);\n    if (allowEmptyString && value === \"\") {\n      return true;\n    }\n    if (value === undefined || !matches || matches[0] === \"\") {\n      throw new errorClass(CMIElement, errorCode);\n    }\n    return true;\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, regexPattern, errorCode, _errorClass, allowEmptyString) => {\n    // Use typeof for non-string values to ensure consistent cache keys\n    // noinspection SuspiciousTypeOfGuard\n    const valueKey = typeof value === \"string\" ? value : `[${typeof value}]`;\n    return `${CMIElement}:${valueKey}:${regexPattern}:${errorCode}:${allowEmptyString || false}`;\n  },\n);\n\n/**\n * Check if the value matches the proper range. If not, throw proper error code.\n *\n * @param {any} value\n * @param {string} rangePattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @return {boolean}\n */\nexport const checkValidRange = memoize(\n  (\n    CMIElement: string,\n    value: any,\n    rangePattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean => {\n    const ranges = rangePattern.split(\"#\");\n    value = value * 1.0;\n    if (ranges[0] && value >= ranges[0]) {\n      if (ranges[1] && (ranges[1] === \"*\" || value <= ranges[1])) {\n        return true;\n      } else {\n        throw new errorClass(CMIElement, errorCode);\n      }\n    } else {\n      throw new errorClass(CMIElement, errorCode);\n    }\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, rangePattern, errorCode, _errorClass) =>\n    `${CMIElement}:${value}:${rangePattern}:${errorCode}`,\n);\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check2004ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm2004_errors.TYPE_MISMATCH as number,\n    Scorm2004ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @return {boolean}\n */\nexport function check2004ValidRange(\n  CMIElement: string,\n  value: string,\n  rangePattern: string,\n): boolean {\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm2004_errors.VALUE_OUT_OF_RANGE as number,\n    Scorm2004ValidationError,\n  );\n}\n","export const scorm12_regex = {\n  CMIString256: \"^.{0,255}$\",\n  CMIString4096: \"^.{0,4096}$\",\n  CMITime: \"^(?:[01]\\\\d|2[0123]):(?:[012345]\\\\d):(?:[012345]\\\\d)$\",\n  CMITimespan: \"^([0-9]{2,}):([0-9]{2}):([0-9]{2})(.[0-9]{1,2})?$\",\n\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{0,3})(\\\\.[0-9]*)?$\",\n\n  CMIIdentifier: \"^[\\\\u0021-\\\\u007E\\\\s]{0,255}$\",\n  // Allow storing larger responses for interactions\n  // Some content packages may exceed the 255 character limit\n  // defined in the SCORM 1.2 specification.  The previous\n  // expression truncated these values which resulted in\n  // a \"101: General Exception\" being thrown when long\n  // answers were supplied.  To support these packages we\n  // relax the limitation and accept any length string.\n  CMIFeedback: \"^.*$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMIStatus: \"^(passed|completed|failed|incomplete|browsed)$\",\n  CMIStatus2: \"^(passed|completed|failed|incomplete|browsed|not attempted)$\",\n  CMIExit: \"^(time-out|suspend|logout|)$\",\n  CMIType: \"^(true-false|choice|fill-in|matching|performance|sequencing|likert|numeric)$\",\n  CMIResult: \"^(correct|wrong|unanticipated|neutral|([0-9]{0,3})?(\\\\.[0-9]*)?)$\",\n  NAVEvent:\n    \"^(previous|continue|start|resumeAll|choice|jump|exit|exitAll|abandon|abandonAll|suspendAll|retry|retryAll|_none_)$\",\n  // Data ranges\n  score_range: \"0#100\",\n  audio_range: \"-1#100\",\n  speed_range: \"-100#100\",\n  weighting_range: \"-100#100\",\n  text_range: \"-1#1\",\n};\nexport const aicc_regex = {\n  ...scorm12_regex,\n  ...{\n    // AICC identifiers may contain letters, numbers, underscores,\n    // periods, and hyphens up to 255 characters in length.\n    // The previous expression only allowed \"\\w\" characters which\n    // excluded periods and hyphens.\n    CMIIdentifier: \"^[A-Za-z0-9._-]{1,255}$\",\n  },\n};\nexport const scorm2004_regex = {\n  CMIString200: \"^[\\\\u0000-\\\\uFFFF]{0,200}$\",\n  CMIString250: \"^[\\\\u0000-\\\\uFFFF]{0,250}$\",\n  CMIString1000: \"^[\\\\u0000-\\\\uFFFF]{0,1000}$\",\n  CMIString4000: \"^[\\\\u0000-\\\\uFFFF]{0,4000}$\",\n  CMIString64000: \"^[\\\\u0000-\\\\uFFFF]{0,64000}$\",\n  CMILang: \"^([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?$|^$\",\n\n  CMILangString250: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,250}$)?$\",\n\n  CMILangcr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?}))(.*?)$\",\n\n  CMILangString250cr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?})?(.{0,250})?)?$\",\n\n  CMILangString4000: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,4000}$)?$\",\n\n  CMITime:\n    \"^(19[7-9]{1}[0-9]{1}|20[0-2]{1}[0-9]{1}|203[0-8]{1})((-(0[1-9]{1}|1[0-2]{1}))((-(0[1-9]{1}|[1-2]{1}[0-9]{1}|3[0-1]{1}))(T([0-1]{1}[0-9]{1}|2[0-3]{1})((:[0-5]{1}[0-9]{1})((:[0-5]{1}[0-9]{1})((\\\\.[0-9]{1,6})((Z|([+|-]([0-1]{1}[0-9]{1}|2[0-3]{1})))(:[0-5]{1}[0-9]{1})?)?)?)?)?)?)?)?$\",\n  CMITimespan:\n    \"^P(?:([.,\\\\d]+)Y)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)W)?(?:([.,\\\\d]+)D)?(?:T?(?:([.,\\\\d]+)H)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)S)?)?$\",\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{1,5})(\\\\.[0-9]{1,18})?$\",\n  CMIIdentifier: \"^\\\\S{1,250}[a-zA-Z0-9]$\",\n  CMIShortIdentifier: \"^[\\\\w\\\\.\\\\-\\\\_]{1,250}$\",\n  CMILongIdentifier: \"^(?:(?!urn:)\\\\S{1,4000}|urn:[A-Za-z0-9-]{1,31}:\\\\S{1,4000}|.{1,4000})$\",\n  // need to re-examine this\n  CMIFeedback: \"^.*$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  CMIIndexStore: \".N(\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMICStatus: \"^(completed|incomplete|not attempted|unknown)$\",\n  CMISStatus: \"^(passed|failed|unknown)$\",\n  CMIExit: \"^(time-out|suspend|logout|normal)$\",\n  CMIType:\n    \"^(true-false|choice|fill-in|long-fill-in|matching|performance|sequencing|likert|numeric|other)$\",\n  CMIResult: \"^(correct|incorrect|unanticipated|neutral|-?([0-9]{1,4})(\\\\.[0-9]{1,18})?)$\",\n  NAVEvent:\n    \"^(start|resumeAll|previous|continue|exit|exitAll|abandon|abandonAll|suspendAll|retry|retryAll|_none_|(\\\\{target=(?<choice_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?choice|(\\\\{target=(?<jump_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?jump)$\",\n\n  NAVBoolean: \"^(unknown|true|false)$\",\n  NAVTarget: \"^{target=\\\\S{0,}[a-zA-Z0-9-_]+}$\",\n  // Data ranges\n  scaled_range: \"-1#1\",\n  audio_range: \"0#999.9999999\",\n  speed_range: \"0#999.9999999\",\n  text_range: \"-1#1\",\n  progress_range: \"0#1\",\n};\n","/**\n * Class for SCORM 2004's cmi.learner_preference object\n */\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\n\nexport class CMILearnerPreference extends BaseCMI {\n  private __children = scorm2004_constants.student_preference_children;\n  private _audio_level = \"1\";\n  private _language = \"\";\n  private _delivery_speed = \"1\";\n  private _audio_captioning = \"0\";\n\n  /**\n   * Constructor for cmi.learner_preference\n   */\n  constructor() {\n    super(\"cmi.learner_preference\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._children\",\n      scorm2004_errors.READ_ONLY_ELEMENT as number,\n    );\n  }\n\n  /**\n   * Getter for _audio_level\n   * @return {string}\n   */\n  get audio_level(): string {\n    return this._audio_level;\n  }\n\n  /**\n   * Setter for _audio_level\n   * @param {string} audio_level\n   */\n  set audio_level(audio_level: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".audio_level\",\n        audio_level,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".audio_level\",\n        audio_level,\n        scorm2004_regex.audio_range,\n      )\n    ) {\n      this._audio_level = audio_level;\n    }\n  }\n\n  /**\n   * Getter for _language\n   * @return {string}\n   */\n  get language(): string {\n    return this._language;\n  }\n\n  /**\n   * Setter for _language\n   * @param {string} language\n   */\n  set language(language: string) {\n    if (check2004ValidFormat(this._cmi_element + \".language\", language, scorm2004_regex.CMILang)) {\n      this._language = language;\n    }\n  }\n\n  /**\n   * Getter for _delivery_speed\n   * @return {string}\n   */\n  get delivery_speed(): string {\n    return this._delivery_speed;\n  }\n\n  /**\n   * Setter for _delivery_speed\n   * @param {string} delivery_speed\n   */\n  set delivery_speed(delivery_speed: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".delivery_speed\",\n        delivery_speed,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".delivery_speed\",\n        delivery_speed,\n        scorm2004_regex.speed_range,\n      )\n    ) {\n      this._delivery_speed = delivery_speed;\n    }\n  }\n\n  /**\n   * Getter for _audio_captioning\n   * @return {string}\n   */\n  get audio_captioning(): string {\n    return this._audio_captioning;\n  }\n\n  /**\n   * Setter for _audio_captioning\n   * @param {string} audio_captioning\n   */\n  set audio_captioning(audio_captioning: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".audio_captioning\",\n        audio_captioning,\n        scorm2004_regex.CMISInteger,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".audio_captioning\",\n        audio_captioning,\n        scorm2004_regex.text_range,\n      )\n    ) {\n      this._audio_captioning = audio_captioning;\n    }\n  }\n\n  /**\n   * toJSON for cmi.learner_preference\n   *\n   * @return {\n   *    {\n   *      audio_level: string,\n   *      language: string,\n   *      delivery_speed: string,\n   *      audio_captioning: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    audio_level: string;\n    language: string;\n    delivery_speed: string;\n    audio_captioning: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio_level: this.audio_level,\n      language: this.language,\n      delivery_speed: this.delivery_speed,\n      audio_captioning: this.audio_captioning,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { scorm2004_regex } from \"./regex\";\n\nexport const LearnerResponses: Responses = {\n  \"true-false\": {\n    format: \"^true$|^false$\",\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  choice: {\n    format: scorm2004_regex.CMILongIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    unique: true,\n  },\n  \"fill-in\": {\n    format: scorm2004_regex.CMILangString250,\n    max: 10,\n    delimiter: \"[,]\",\n    unique: false,\n  },\n  \"long-fill-in\": {\n    format: scorm2004_regex.CMILangString4000,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  matching: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n  },\n  performance: {\n    format: \"^$|\" + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + \"|^$|\" + scorm2004_regex.CMIShortIdentifier,\n    max: 250,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n  },\n  sequencing: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    unique: false,\n  },\n  likert: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  numeric: {\n    format: scorm2004_regex.CMIDecimal,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  other: {\n    format: scorm2004_regex.CMIString4000,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n};\nexport const CorrectResponses: Responses = {\n  \"true-false\": {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: \"^true$|^false$\",\n    limit: 1,\n  },\n  choice: {\n    max: 36,\n    delimiter: \"[,]\",\n    unique: true,\n    duplicate: false,\n    format: scorm2004_regex.CMILongIdentifier,\n  },\n  \"fill-in\": {\n    max: 10,\n    delimiter: \"[,]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMILangString250cr,\n  },\n  \"long-fill-in\": {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: true,\n    format: scorm2004_regex.CMILangString4000,\n  },\n  matching: {\n    max: 36,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n  },\n  performance: {\n    max: 250,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    delimiter3: \"[:]\",\n    unique: false,\n    duplicate: false,\n    // step_name must be a non-empty short identifier\n    format: scorm2004_regex.CMIShortIdentifier,\n    // step_answer may be short identifier or numeric range (<decimal>[:<decimal>])\n    format2: `^(${scorm2004_regex.CMIShortIdentifier})$|^(?:\\\\d+(?:\\\\.\\\\d+)?(?::\\\\d+(?:\\\\.\\\\d+)?)?)$`,\n  },\n  sequencing: {\n    max: 36,\n    delimiter: \"[,]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n  },\n  likert: {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    limit: 1,\n  },\n  numeric: {\n    max: 2,\n    delimiter: \"[:]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIDecimal,\n    limit: 1,\n  },\n  other: {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIString4000,\n    limit: 1,\n  },\n};\n\nexport type ResponseType = {\n  format: string;\n  max: number;\n  delimiter: string;\n  unique: boolean;\n  duplicate?: boolean;\n  format2?: string;\n  delimiter2?: string;\n  limit?: number;\n  delimiter3?: string;\n};\n\nexport type Responses = {\n  [key: string]: ResponseType;\n};\n","/**\n * Class representing SCORM 2004's `cmi.interactions` object\n */\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { CMIArray } from \"../common/array\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport {\n  CorrectResponses,\n  LearnerResponses,\n  ResponseType,\n} from \"../../constants/response_constants\";\n\nexport class CMIInteractions extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives` Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.interactions\",\n      children: scorm2004_constants.interactions_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.interaction.n object\n */\n\nexport class CMIInteractionsObject extends BaseCMI {\n  private _id = \"\";\n  private _type = \"\";\n  private _timestamp = \"\";\n  private _weighting = \"\";\n  private _learner_response = \"\";\n  private _result = \"\";\n  private _latency = \"\";\n  private _description = \"\";\n\n  /**\n   * Constructor for cmi.interaction.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n\");\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.n.correct_responses\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  public objectives: CMIArray;\n  public correct_responses: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._id = \"\";\n    this._type = \"\";\n    this._timestamp = \"\";\n    this._weighting = \"\";\n    this._learner_response = \"\";\n    this._result = \"\";\n    this._latency = \"\";\n    this._description = \"\";\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.n.correct_responses\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _type\n   * @return {string}\n   */\n  get type(): string {\n    return this._type;\n  }\n\n  /**\n   * Setter for _type\n   * @param {string} type\n   */\n  set type(type: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".type\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (check2004ValidFormat(this._cmi_element + \".type\", type, scorm2004_regex.CMIType)) {\n        this._type = type;\n      }\n    }\n  }\n\n  /**\n   * Getter for _timestamp\n   * @return {string}\n   */\n  get timestamp(): string {\n    return this._timestamp;\n  }\n\n  /**\n   * Setter for _timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".timestamp\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".timestamp\", timestamp, scorm2004_regex.CMITime)\n      ) {\n        this._timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * Getter for _weighting\n   * @return {string}\n   */\n  get weighting(): string {\n    return this._weighting;\n  }\n\n  /**\n   * Setter for _weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".weighting\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".weighting\",\n          weighting,\n          scorm2004_regex.CMIDecimal,\n        )\n      ) {\n        this._weighting = weighting;\n      }\n    }\n  }\n\n  /**\n   * Getter for _learner_response\n   * @return {string}\n   */\n  get learner_response(): string {\n    return this._learner_response;\n  }\n\n  /**\n   * Setter for _learner_response. Does type validation to make sure response\n   * matches SCORM 2004's spec\n   * @param {string} learner_response\n   */\n  set learner_response(learner_response: string) {\n    if (this.initialized && (this._type === \"\" || this._id === \"\")) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_response\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      let nodes = [];\n      const response_type = LearnerResponses[this.type];\n\n      if (response_type) {\n        if (response_type?.delimiter) {\n          // Convert regex-style delimiter to actual character\n          const delimiter = response_type.delimiter === \"[,]\" ? \",\" : response_type.delimiter;\n          nodes = learner_response.split(delimiter);\n        } else {\n          nodes[0] = learner_response;\n        }\n\n        if (nodes.length > 0 && nodes.length <= response_type.max) {\n          const formatRegex = new RegExp(response_type.format);\n\n          for (let i = 0; i < nodes.length; i++) {\n            if (response_type?.delimiter2) {\n              // Convert regex-style delimiter to actual character\n              const delimiter2 =\n                response_type.delimiter2 === \"[.]\" ? \".\" : response_type.delimiter2;\n              const values = nodes[i]?.split(delimiter2);\n\n              if (values?.length === 2) {\n                // For performance type, both parts must be non-empty\n                if (this.type === \"performance\" && (values[0] === \"\" || values[1] === \"\")) {\n                  throw new Scorm2004ValidationError(\n                    this._cmi_element + \".learner_response\",\n                    scorm2004_errors.TYPE_MISMATCH as number,\n                  );\n                }\n\n                if (!values[0]?.match(formatRegex)) {\n                  throw new Scorm2004ValidationError(\n                    this._cmi_element + \".learner_response\",\n                    scorm2004_errors.TYPE_MISMATCH as number,\n                  );\n                } else {\n                  if (\n                    !response_type.format2 ||\n                    !values[1]?.match(new RegExp(response_type.format2))\n                  ) {\n                    throw new Scorm2004ValidationError(\n                      this._cmi_element + \".learner_response\",\n                      scorm2004_errors.TYPE_MISMATCH as number,\n                    );\n                  }\n                }\n              } else {\n                throw new Scorm2004ValidationError(\n                  this._cmi_element + \".learner_response\",\n                  scorm2004_errors.TYPE_MISMATCH as number,\n                );\n              }\n            } else {\n              if (!nodes[i]?.match(formatRegex)) {\n                throw new Scorm2004ValidationError(\n                  this._cmi_element + \".learner_response\",\n                  scorm2004_errors.TYPE_MISMATCH as number,\n                );\n              } else {\n                if (nodes[i] !== \"\" && response_type.unique) {\n                  for (let j = 0; j < i; j++) {\n                    if (nodes[i] === nodes[j]) {\n                      throw new Scorm2004ValidationError(\n                        this._cmi_element + \".learner_response\",\n                        scorm2004_errors.TYPE_MISMATCH as number,\n                      );\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          throw new Scorm2004ValidationError(\n            this._cmi_element + \".learner_response\",\n            scorm2004_errors.GENERAL_SET_FAILURE as number,\n          );\n        }\n\n        this._learner_response = learner_response;\n      } else {\n        throw new Scorm2004ValidationError(\n          this._cmi_element + \".learner_response\",\n          scorm2004_errors.TYPE_MISMATCH as number,\n        );\n      }\n    }\n  }\n\n  /**\n   * Getter for _result\n   * @return {string}\n   */\n  get result(): string {\n    return this._result;\n  }\n\n  /**\n   * Setter for _result\n   * @param {string} result\n   */\n  set result(result: string) {\n    if (check2004ValidFormat(this._cmi_element + \".result\", result, scorm2004_regex.CMIResult)) {\n      this._result = result;\n    }\n  }\n\n  /**\n   * Getter for _latency\n   * @return {string}\n   */\n  get latency(): string {\n    return this._latency;\n  }\n\n  /**\n   * Setter for _latency\n   * @param {string} latency\n   */\n  set latency(latency: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".latency\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".latency\", latency, scorm2004_regex.CMITimespan)\n      ) {\n        this._latency = latency;\n      }\n    }\n  }\n\n  /**\n   * Getter for _description\n   * @return {string}\n   */\n  get description(): string {\n    return this._description;\n  }\n\n  /**\n   * Setter for _description\n   * @param {string} description\n   */\n  set description(description: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".description\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".description\",\n          description,\n          scorm2004_regex.CMILangString250,\n          true,\n        )\n      ) {\n        this._description = description;\n      }\n    }\n  }\n\n  // noinspection JSUnusedGlobalSymbols\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      type: string,\n   *      objectives: CMIArray,\n   *      timestamp: string,\n   *      correct_responses: CMIArray,\n   *      weighting: string,\n   *      learner_response: string,\n   *      result: string,\n   *      latency: string,\n   *      description: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    type: string;\n    objectives: CMIArray;\n    timestamp: string;\n    correct_responses: CMIArray;\n    weighting: string;\n    learner_response: string;\n    result: string;\n    latency: string;\n    description: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      type: this.type,\n      objectives: this.objectives,\n      timestamp: this.timestamp,\n      weighting: this.weighting,\n      learner_response: this.learner_response,\n      result: this.result,\n      latency: this.latency,\n      description: this.description,\n      correct_responses: this.correct_responses,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.objectives.n object\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  private _id = \"\";\n\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n.objectives.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._id = \"\";\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Helper: strip the square-bracket notation (e.g. \"[,]\") down to the character (\",\")\n */\nfunction stripBrackets(delim: string): string {\n  return delim.replace(/[[\\]]/g, \"\");\n}\n\n// Helper to escape a string for use in a RegExp\nfunction escapeRegex(s: string): string {\n  // Only , and . are expected, but escape any regex special chars for safety\n  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\n\n/**\n * Split on unescaped delimiter and unescape the delimiter in resulting parts.\n * @param text - the input string\n * @param delim - the delimiter character, e.g. ',' or '.'\n */\nfunction splitUnescaped(text: string, delim: string): string[] {\n  const reDelim = escapeRegex(delim);\n  const splitRe = new RegExp(`(?<!\\\\\\\\)${reDelim}`, \"g\");\n  const unescapeRe = new RegExp(`\\\\\\\\${reDelim}`, \"g\");\n  return text.split(splitRe).map((part) => part.replace(unescapeRe, delim));\n}\n\n/**\n * Helper: validate a `pattern` string against its SCORM definition\n */\nfunction validatePattern(type: string, pattern: string, responseDef: ResponseType) {\n  // Reject patterns with leading or trailing whitespace\n  if (pattern.trim() !== pattern) {\n    throw new Scorm2004ValidationError(\n      \"cmi.interactions.n.correct_responses.n.pattern\",\n      scorm2004_errors.TYPE_MISMATCH as number,\n    );\n  }\n\n  // Reject any nodes with leading/trailing whitespace around tokens\n  const subDelim1 = responseDef.delimiter ? stripBrackets(responseDef.delimiter) : null;\n  const rawNodes = subDelim1 ? splitUnescaped(pattern, subDelim1) : [pattern];\n  for (const raw of rawNodes) {\n    if (raw.trim() !== raw) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n  }\n\n  // Allow empty fill-in patterns\n  if (type === \"fill-in\" && pattern === \"\") {\n    return;\n  }\n  // Split into nodes on the primary delimiter (if any)\n  const delim1 = responseDef.delimiter ? stripBrackets(responseDef.delimiter) : null;\n  let nodes: string[];\n  if (delim1) {\n    nodes = splitUnescaped(pattern, delim1);\n  } else {\n    nodes = [pattern];\n  }\n\n  // If no primary delimiter but pattern contains comma, reject multiple entries\n  if (!responseDef.delimiter && pattern.includes(\",\")) {\n    throw new Scorm2004ValidationError(\n      \"cmi.interactions.n.correct_responses.n.pattern\",\n      scorm2004_errors.TYPE_MISMATCH as number,\n    );\n  }\n\n  // Enforce uniqueness or disallow duplicates if required\n  if (responseDef.unique || responseDef.duplicate === false) {\n    const seen = new Set(nodes);\n    if (seen.size !== nodes.length) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n  }\n\n  // Must have at least 1 node, and no more than max\n  if (nodes.length === 0 || nodes.length > responseDef.max) {\n    throw new Scorm2004ValidationError(\n      \"cmi.interactions.n.correct_responses.n.pattern\",\n      scorm2004_errors.GENERAL_SET_FAILURE as number,\n    );\n  }\n\n  const fmt1 = new RegExp(responseDef.format);\n  const fmt2 = responseDef.format2 ? new RegExp(responseDef.format2) : null;\n\n  const checkSingle = (value: string) => {\n    if (!fmt1.test(value)) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n  };\n\n  const checkPair = (value: string, delimBracketed?: string) => {\n    if (!delimBracketed) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    const delim = stripBrackets(delimBracketed);\n    const parts = value\n      .split(new RegExp(`(?<!\\\\\\\\)${escapeRegex(delim)}`, \"g\"))\n      .map((n) => n.replace(new RegExp(`\\\\\\\\${escapeRegex(delim)}`, \"g\"), delim));\n    if (parts.length !== 2 || parts[0] === \"\" || parts[1] === \"\") {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    // test both parts\n    if (\n      (parts[0] !== undefined && !fmt1.test(parts[0])) ||\n      (fmt2 && parts[1] !== undefined && !fmt2.test(parts[1]))\n    ) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n  };\n\n  for (const node of nodes) {\n    switch (type) {\n      case \"numeric\": {\n        // 1 or 2 numeric values separated by \":\"\n        const numDelim = responseDef.delimiter ? stripBrackets(responseDef.delimiter) : \":\";\n        const nums = node.split(numDelim);\n        if (nums.length < 1 || nums.length > 2) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        nums.forEach(checkSingle);\n        break;\n      }\n\n      case \"performance\": {\n        // split into parts on unescaped dot\n        const delimBracketed = responseDef.delimiter2;\n        if (!delimBracketed) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        const delim = stripBrackets(delimBracketed);\n        // split into parts on unescaped dot\n        const allParts = splitUnescaped(node, delim);\n        if (!node.includes(\":\") && allParts.length !== 2) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        // use splitUnescaped to get [part1, part2]\n        const [part1, part2] = splitUnescaped(node, delim);\n        // Validate non-empty\n        if (part1 === \"\" || part2 === \"\" || part1 === part2) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        // part1 against format1\n        if (part1 === undefined || !fmt1.test(part1)) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        // part2 against format2\n        if (fmt2 && part2 !== undefined && !fmt2.test(part2)) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        break;\n      }\n\n      default:\n        if (responseDef.delimiter2) {\n          // matching and other two-part types\n          checkPair(node, responseDef.delimiter2);\n        } else {\n          // simple single-value types (true-false, choice, fill-in, etc.)\n          checkSingle(node);\n        }\n    }\n  }\n}\n\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  private _pattern = \"\";\n  private readonly _interactionType?: string | undefined;\n\n  /**\n   * Constructor for cmi.interactions.n.correct_responses.n\n   * @param interactionType The type of interaction (e.g. \"numeric\", \"choice\", etc.)\n   */\n  constructor(interactionType?: string) {\n    super(\"cmi.interactions.n.correct_responses.n\");\n    this._interactionType = interactionType;\n  }\n\n  override reset() {\n    this._initialized = false;\n    this._pattern = \"\";\n  }\n\n  get pattern(): string {\n    return this._pattern;\n  }\n\n  set pattern(pattern: string) {\n    // Allow empty fill-in patterns\n    if (this._interactionType === \"fill-in\" && pattern === \"\") {\n      this._pattern = \"\";\n      return;\n    }\n    // 1) Basic SCORM‐pattern format check\n    if (\n      !check2004ValidFormat(this._cmi_element + \".pattern\", pattern, scorm2004_regex.CMIFeedback)\n    ) {\n      return;\n    }\n\n    // 2) If we know the interaction type, run the detailed validator\n    if (this._interactionType) {\n      const responseDef = CorrectResponses[this._interactionType];\n      if (responseDef) {\n        // Skip detailed validation for matching when pattern contains escaped comma or dot\n        if (this._interactionType === \"matching\" && /\\\\[.,]/.test(pattern)) {\n          // accept escaped comma or dot patterns without further validation\n        } else {\n          validatePattern(this._interactionType, pattern, responseDef);\n        }\n      }\n    }\n\n    // 3) Finally, set\n    this._pattern = pattern;\n  }\n\n  toJSON(): { pattern: string } {\n    this.jsonString = true;\n    const result = { pattern: this.pattern };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { ValidationError } from \"../exceptions\";\nimport { scorm12_constants } from \"../constants/api_constants\";\n\nconst scorm12_errors = scorm12_constants.error_descriptions;\n\n/**\n * SCORM 1.2 Validation Error\n */\nexport class Scorm12ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm12_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm12_errors[String(errorCode)]?.basicMessage || \"Unknown error\",\n        scorm12_errors[String(errorCode)]?.detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm12_errors[\"101\"]?.basicMessage ?? \"General error\",\n        scorm12_errors[\"101\"]?.detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm12ValidationError.prototype);\n  }\n}\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm12_errors.TYPE_MISMATCH as number,\n    Scorm12ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidRange(\n  CMIElement: string,\n  value: any,\n  rangePattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  if (!allowEmptyString && value === \"\") {\n    throw new Scorm12ValidationError(CMIElement, scorm12_errors.VALUE_OUT_OF_RANGE as number);\n  }\n\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm12_errors.VALUE_OUT_OF_RANGE as number,\n    Scorm12ValidationError,\n  );\n}\n","import { BaseScormValidationError } from \"../exceptions\";\nimport { checkValidFormat, checkValidRange } from \"../cmi/common/validation\";\nimport { check12ValidFormat, check12ValidRange } from \"../cmi/scorm12/validation\";\nimport { scorm12_regex } from \"../constants/regex\";\nimport { scorm12_errors } from \"../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../exceptions/scorm12_exceptions\";\n\n/**\n * Service for validating CMI data model properties\n */\nexport class ValidationService {\n  /**\n   * Validates a score property (raw, min, max)\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @param {string} decimalRegex - The regex pattern for decimal validation\n   * @param {string | false} scoreRange - The range pattern for score validation, or false if no range validation is needed\n   * @param {number} invalidTypeCode - The error code for invalid type\n   * @param {number} invalidRangeCode - The error code for invalid range\n   * @param {typeof BaseScormValidationError} errorClass - The error class to use for validation errors\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScore(\n    CMIElement: string,\n    value: string,\n    decimalRegex: string,\n    scoreRange: string | false,\n    invalidTypeCode: number,\n    invalidRangeCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean {\n    return (\n      checkValidFormat(CMIElement, value, decimalRegex, invalidTypeCode, errorClass) &&\n      (!scoreRange || checkValidRange(CMIElement, value, scoreRange, invalidRangeCode, errorClass))\n    );\n    // This line should never be reached due to exceptions being thrown\n  }\n\n  /**\n   * Validates a SCORM 1.2 audio property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Audio(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.audio_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 language property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Language(CMIElement: string, value: string): boolean {\n    return check12ValidFormat(CMIElement, value, scorm12_regex.CMIString256);\n  }\n\n  /**\n   * Validates a SCORM 1.2 speed property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Speed(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.speed_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 text property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Text(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.text_range)\n    );\n  }\n\n  /**\n   * Validates if a property is read-only\n   *\n   * @param {string} CMIElement\n   * @param {boolean} initialized - Whether the object is initialized\n   * @throws {BaseScormValidationError} - Throws an error if the object is initialized\n   */\n  validateReadOnly(CMIElement: string, initialized: boolean): void {\n    if (initialized) {\n      throw new Scorm12ValidationError(CMIElement, scorm12_errors.READ_ONLY_ELEMENT as number);\n    }\n  }\n}\n\n// Export a singleton instance of the ValidationService\nexport const validationService = new ValidationService();\n","import { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"./base_cmi\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { validationService } from \"../../services/ValidationService\";\nimport { ScoreObject } from \"../../types/api_types\";\n\n/**\n * Base class for cmi *.score objects\n */\nexport class CMIScore extends BaseCMI {\n  private readonly __children: string;\n  private readonly __score_range: string | false;\n  private readonly __invalid_error_code: number;\n  private readonly __invalid_type_code: number;\n  private readonly __invalid_range_code: number;\n  private readonly __decimal_regex: string;\n  private readonly __error_class: typeof BaseScormValidationError;\n  protected _raw = \"\";\n  protected _min = \"\";\n  protected _max: string;\n\n  /**\n   * Constructor for *.score\n   * @param {\n   *     score_children: string,\n   *     score_range: string,\n   *     max: string,\n   *     invalidErrorCode: number,\n   *     invalidTypeCode: number,\n   *     invalidRangeCode: number,\n   *     decimalRegex: string,\n   *     errorClass: typeof BaseScormValidationError\n   * } params\n   */\n  constructor(params: {\n    CMIElement: string;\n    score_children?: string;\n    score_range?: string;\n    max?: string;\n    invalidErrorCode?: number;\n    invalidTypeCode?: number;\n    invalidRangeCode?: number;\n    decimalRegex?: string;\n    errorClass: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n\n    this.__children = params.score_children || scorm12_constants.score_children;\n    this.__score_range = !params.score_range ? false : scorm12_regex.score_range;\n    this._max = params.max || params.max === \"\" ? params.max : \"100\";\n    this.__invalid_error_code =\n      params.invalidErrorCode || (scorm12_errors.INVALID_SET_VALUE as number);\n    this.__invalid_type_code = params.invalidTypeCode || (scorm12_errors.TYPE_MISMATCH as number);\n    this.__invalid_range_code =\n      params.invalidRangeCode || (scorm12_errors.VALUE_OUT_OF_RANGE as number);\n    this.__decimal_regex = params.decimalRegex || scorm12_regex.CMIDecimal;\n    this.__error_class = params.errorClass;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this.__error_class(this._cmi_element + \"._children\", this.__invalid_error_code);\n  }\n\n  /**\n   * Getter for _raw\n   * @return {string}\n   */\n  get raw(): string {\n    return this._raw;\n  }\n\n  /**\n   * Setter for _raw\n   * @param {string} raw\n   */\n  set raw(raw: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".raw\",\n        raw,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._raw = raw;\n    }\n  }\n\n  /**\n   * Getter for _min\n   * @return {string}\n   */\n  get min(): string {\n    return this._min;\n  }\n\n  /**\n   * Setter for _min\n   * @param {string} min\n   */\n  set min(min: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".min\",\n        min,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._min = min;\n    }\n  }\n\n  /**\n   * Getter for _max\n   * @return {string}\n   */\n  get max(): string {\n    return this._max;\n  }\n\n  /**\n   * Setter for _max\n   * @param {string} max\n   */\n  set max(max: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".max\",\n        max,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._max = max;\n    }\n  }\n\n  /**\n   * Getter for _score_range\n   * @return {string | false}\n   */\n  public getScoreObject(): ScoreObject {\n    const scoreObject: ScoreObject = {};\n    if (!Number.isNaN(Number.parseFloat(this.raw))) {\n      scoreObject.raw = Number.parseFloat(this.raw);\n    }\n    if (!Number.isNaN(Number.parseFloat(this.min))) {\n      scoreObject.min = Number.parseFloat(this.min);\n    }\n    if (!Number.isNaN(Number.parseFloat(this.max))) {\n      scoreObject.max = Number.parseFloat(this.max);\n    }\n    return scoreObject;\n  }\n\n  /**\n   * toJSON for *.score\n   * @return {\n   *    {\n   *      min: string,\n   *      max: string,\n   *      raw: string\n   *    }\n   *    }\n   */\n  toJSON(): {\n    min: string;\n    max: string;\n    raw: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","/**\n * Class for SCORM 2004's cmi *.score object\n */\nimport { CMIScore } from \"../common/score\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { ScoreObject } from \"../../types/api_types\";\n\nexport class Scorm2004CMIScore extends CMIScore {\n  private _scaled = \"\";\n\n  /**\n   * Constructor for cmi *.score\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.score\",\n      score_children: scorm2004_constants.score_children,\n      max: \"\",\n      invalidErrorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      invalidTypeCode: scorm2004_errors.TYPE_MISMATCH as number,\n      invalidRangeCode: scorm2004_errors.VALUE_OUT_OF_RANGE as number,\n      decimalRegex: scorm2004_regex.CMIDecimal,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n    this._scaled = \"\";\n    this._raw = \"\";\n    this._min = \"\";\n    this._max = \"\";\n  }\n\n  /**\n   * Getter for _scaled\n   * @return {string}\n   */\n  get scaled(): string {\n    return this._scaled;\n  }\n\n  /**\n   * Setter for _scaled\n   * @param {string} scaled\n   */\n  set scaled(scaled: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".scaled\", scaled, scorm2004_regex.CMIDecimal) &&\n      check2004ValidRange(this._cmi_element + \".scaled\", scaled, scorm2004_regex.scaled_range)\n    ) {\n      this._scaled = scaled;\n    }\n  }\n\n  override getScoreObject(): ScoreObject {\n    const scoreObject = super.getScoreObject();\n\n    if (!Number.isNaN(Number.parseFloat(this.scaled))) {\n      scoreObject.scaled = Number.parseFloat(this.scaled);\n    }\n\n    return scoreObject;\n  }\n\n  /**\n   * toJSON for cmi *.score\n   *\n   * @return {\n   *    {\n   *      scaled: string,\n   *      raw: string,\n   *      min: string,\n   *      max: string\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    scaled: string;\n    raw: string;\n    min: string;\n    max: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      scaled: this.scaled,\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_lms object\n * @extends CMIArray\n */\nexport class CMICommentsFromLMS extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_lms Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.comments_from_lms\",\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner object\n */\n\nexport class CMICommentsFromLearner extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_learner Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.comments_from_learner\",\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner.n and cmi.comments_from_lms.n object\n */\n\nexport class CMICommentsObject extends BaseCMI {\n  private _comment = \"\";\n  private _location = \"\";\n  private _timestamp = \"\";\n  private readonly _readOnlyAfterInit: boolean;\n\n  /**\n   * Constructor for cmi.comments_from_learner.n and cmi.comments_from_lms.n\n   * @param {boolean} readOnlyAfterInit\n   */\n  constructor(readOnlyAfterInit: boolean = false) {\n    super(\"cmi.comments_from_learner.n\");\n    this._comment = \"\";\n    this._location = \"\";\n    this._timestamp = \"\";\n    this._readOnlyAfterInit = readOnlyAfterInit;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _comment\n   * @return {string}\n   */\n  get comment(): string {\n    return this._comment;\n  }\n\n  /**\n   * Setter for _comment\n   * @param {string} comment\n   */\n  set comment(comment: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".comment\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".comment\",\n          comment,\n          scorm2004_regex.CMILangString4000,\n          true,\n        )\n      ) {\n        this._comment = comment;\n      }\n    }\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".location\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".location\",\n          location,\n          scorm2004_regex.CMIString250,\n        )\n      ) {\n        this._location = location;\n      }\n    }\n  }\n\n  /**\n   * Getter for _timestamp\n   * @return {string}\n   */\n  get timestamp(): string {\n    return this._timestamp;\n  }\n\n  /**\n   * Setter for _timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".timestamp\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".timestamp\", timestamp, scorm2004_regex.CMITime)\n      ) {\n        this._timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.comments_from_learner.n object\n   * @return {\n   *    {\n   *      comment: string,\n   *      location: string,\n   *      timestamp: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    comment: string;\n    location: string;\n    timestamp: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      comment: this.comment,\n      location: this.location,\n      timestamp: this.timestamp,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { Scorm2004CMIScore } from \"./score\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\n\n/**\n * Class representing SCORM 2004's `cmi.objectives` object\n * @extends CMIArray\n */\nexport class CMIObjectives extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives` Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.objectives\",\n      children: scorm2004_constants.objectives_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n\n  /**\n   * Find an objective by its ID\n   */\n  public findObjectiveById(id: string): CMIObjectivesObject | undefined {\n    return this.childArray.find((objective) => objective.id === id);\n  }\n\n  /**\n   * Find objective by its index\n   */\n  public findObjectiveByIndex(index: number): CMIObjectivesObject {\n    return this.childArray[index];\n  }\n\n  /**\n   * Set an objective at the given index\n   */\n  public setObjectiveByIndex(index: number, objective: CMIObjectivesObject) {\n    this.childArray[index] = objective;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.objectives.n object\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  private _id = \"\";\n  private _success_status = \"unknown\";\n  private _completion_status = \"unknown\";\n  private _progress_measure = \"\";\n  private _description = \"\";\n\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super(\"cmi.objectives.n\");\n    this.score = new Scorm2004CMIScore();\n  }\n\n  override reset() {\n    this._initialized = false;\n  }\n\n  public score: Scorm2004CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this._success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".success_status\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".success_status\",\n          success_status,\n          scorm2004_regex.CMISStatus,\n        )\n      ) {\n        this._success_status = success_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this._completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".completion_status\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".completion_status\",\n          completion_status,\n          scorm2004_regex.CMICStatus,\n        )\n      ) {\n        this._completion_status = completion_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this._progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".progress_measure\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".progress_measure\",\n          progress_measure,\n          scorm2004_regex.CMIDecimal,\n        ) &&\n        check2004ValidRange(\n          this._cmi_element + \".progress_measure\",\n          progress_measure,\n          scorm2004_regex.progress_range,\n        )\n      ) {\n        this._progress_measure = progress_measure;\n      }\n    }\n  }\n\n  /**\n   * Getter for _description\n   * @return {string}\n   */\n  get description(): string {\n    return this._description;\n  }\n\n  /**\n   * Setter for _description\n   * @param {string} description\n   */\n  set description(description: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".description\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".description\",\n          description,\n          scorm2004_regex.CMILangString250,\n          true,\n        )\n      ) {\n        this._description = description;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      success_status: string,\n   *      completion_status: string,\n   *      progress_measure: string,\n   *      description: string,\n   *      score: Scorm2004CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    success_status: string;\n    completion_status: string;\n    progress_measure: string;\n    description: string;\n    score: Scorm2004CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      success_status: this.success_status,\n      completion_status: this.completion_status,\n      progress_measure: this.progress_measure,\n      description: this.description,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n\n  /**\n   * Populate this objective from a plain object\n   * @param {any} data\n   */\n  fromJSON(data: any): void {\n    if (!data || typeof data !== \"object\") return;\n    if (typeof data.id === \"string\") this.id = data.id;\n    if (typeof data.success_status === \"string\") this.success_status = data.success_status;\n    if (typeof data.completion_status === \"string\") this.completion_status = data.completion_status;\n    if (typeof data.progress_measure !== \"undefined\") this.progress_measure = String(data.progress_measure);\n    if (typeof data.description === \"string\") this.description = data.description;\n    if (data.score && typeof data.score === \"object\") {\n      if (typeof data.score.scaled !== \"undefined\") this.score.scaled = String(data.score.scaled);\n      if (typeof data.score.raw !== \"undefined\") this.score.raw = String(data.score.raw);\n      if (typeof data.score.min !== \"undefined\") this.score.min = String(data.score.min);\n      if (typeof data.score.max !== \"undefined\") this.score.max = String(data.score.max);\n    }\n  }\n}\n","/**\n * Class representing metadata properties for SCORM 2004's cmi object\n */\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing metadata properties for SCORM 2004's cmi object\n */\nexport class CMIMetadata extends BaseCMI {\n  private __version = \"1.0\";\n  private __children = scorm2004_constants.cmi_children;\n\n  /**\n   * Constructor for CMIMetadata\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   */\n  get _version(): string {\n    return this.__version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version: string) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._version\",\n      scorm2004_errors.READ_ONLY_ELEMENT as number,\n    );\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {number} _children\n   */\n  set _children(_children: number) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._children\",\n      scorm2004_errors.READ_ONLY_ELEMENT as number,\n    );\n  }\n\n  /**\n   * Reset the metadata properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // No need to reset __version and __children as they are constants\n  }\n}\n","/**\n * Class representing learner properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing learner properties for SCORM 2004's cmi object\n */\nexport class CMILearner extends BaseCMI {\n  private _learner_id = \"\";\n  private _learner_name = \"\";\n\n  /**\n   * Constructor for CMILearner\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _learner_id\n   * @return {string}\n   */\n  get learner_id(): string {\n    return this._learner_id;\n  }\n\n  /**\n   * Setter for _learner_id. Can only be called before initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_id\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._learner_id = learner_id;\n    }\n  }\n\n  /**\n   * Getter for _learner_name\n   * @return {string}\n   */\n  get learner_name(): string {\n    return this._learner_name;\n  }\n\n  /**\n   * Setter for _learner_name. Can only be called before initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_name\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._learner_name = learner_name;\n    }\n  }\n\n  /**\n   * Reset the learner properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset learner_id and learner_name as they are read-only after initialization\n  }\n}\n","/**\n * Class representing status properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\n\n/**\n * Class representing status properties for SCORM 2004's cmi object\n */\nexport class CMIStatus extends BaseCMI {\n  private _completion_status = \"unknown\";\n  private _success_status = \"unknown\";\n  private _progress_measure = \"\";\n\n  /**\n   * Constructor for CMIStatus\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this._completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".completion_status\",\n        completion_status,\n        scorm2004_regex.CMICStatus,\n      )\n    ) {\n      this._completion_status = completion_status;\n    }\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this._success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".success_status\",\n        success_status,\n        scorm2004_regex.CMISStatus,\n      )\n    ) {\n      this._success_status = success_status;\n    }\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this._progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".progress_measure\",\n        progress_measure,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".progress_measure\",\n        progress_measure,\n        scorm2004_regex.progress_range,\n      )\n    ) {\n      this._progress_measure = progress_measure;\n    }\n  }\n\n  /**\n   * Reset the status properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._completion_status = \"unknown\";\n    this._success_status = \"unknown\";\n    this._progress_measure = \"\";\n  }\n}\n","/**\n * Class representing session properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\nimport * as Util from \"../../utilities\";\n\n/**\n * Class representing session properties for SCORM 2004's cmi object\n */\nexport class CMISession extends BaseCMI {\n  private _entry = \"\";\n  private _exit = \"\";\n  private _session_time = \"PT0H0M0S\";\n  private _total_time = \"\";\n\n  /**\n   * Constructor for CMISession\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this._entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".entry\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._entry = entry;\n    }\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    if (!this.jsonString) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exit\",\n        scorm2004_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    if (check2004ValidFormat(this._cmi_element + \".exit\", exit, scorm2004_regex.CMIExit, true)) {\n      this._exit = exit;\n    }\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    if (!this.jsonString) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".session_time\",\n        scorm2004_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".session_time\",\n        session_time,\n        scorm2004_regex.CMITimespan,\n      )\n    ) {\n      this._session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this._total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".total_time\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._total_time = total_time;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime(start_time: number | undefined): string {\n    let sessionTime = this._session_time;\n    if (typeof start_time !== \"undefined\" && start_time !== null) {\n      const seconds = new Date().getTime() - start_time;\n      sessionTime = Util.getSecondsAsISODuration(seconds / 1000);\n    }\n\n    return Util.addTwoDurations(this._total_time, sessionTime, scorm2004_regex.CMITimespan);\n  }\n\n  /**\n   * Reset the session properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._entry = \"\";\n    this._exit = \"\";\n    this._session_time = \"PT0H0M0S\";\n    // Don't reset total_time as it's read-only after initialization\n  }\n}\n","/**\n * Class representing content properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\n\n/**\n * Class representing content properties for SCORM 2004's cmi object\n */\nexport class CMIContent extends BaseCMI {\n  private _location = \"\";\n  private _launch_data = \"\";\n  private _suspend_data = \"\";\n\n  /**\n   * Constructor for CMIContent\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".location\", location, scorm2004_regex.CMIString1000)\n    ) {\n      this._location = location;\n    }\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this._launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".launch_data\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._launch_data = launch_data;\n    }\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this._suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".suspend_data\",\n        suspend_data,\n        scorm2004_regex.CMIString64000,\n        true,\n      )\n    ) {\n      this._suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Reset the content properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._location = \"\";\n    // Don't reset launch_data as it's read-only after initialization\n    this._suspend_data = \"\";\n  }\n}\n","/**\n * Class representing settings properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing settings properties for SCORM 2004's cmi object\n */\nexport class CMISettings extends BaseCMI {\n  private _credit = \"credit\";\n  private _mode = \"normal\";\n  private _time_limit_action = \"continue,no message\";\n  private _max_time_allowed = \"\";\n\n  /**\n   * Constructor for CMISettings\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this._credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".credit\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._credit = credit;\n    }\n  }\n\n  /**\n   * Getter for _mode\n   * @return {string}\n   */\n  get mode(): string {\n    return this._mode;\n  }\n\n  /**\n   * Setter for _mode. Can only be called before initialization.\n   * @param {string} mode\n   */\n  set mode(mode: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".mode\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._mode = mode;\n    }\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this._time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".time_limit_action\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._time_limit_action = time_limit_action;\n    }\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this._max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".max_time_allowed\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._max_time_allowed = max_time_allowed;\n    }\n  }\n\n  /**\n   * Reset the settings properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset these properties as they are read-only after initialization\n  }\n}\n","/**\n * Class representing threshold properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing threshold properties for SCORM 2004's cmi object\n */\nexport class CMIThresholds extends BaseCMI {\n  private _scaled_passing_score = \"\";\n  private _completion_threshold = \"\";\n\n  /**\n   * Constructor for CMIThresholds\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score(): string {\n    return this._scaled_passing_score;\n  }\n\n  /**\n   * Setter for _scaled_passing_score. Can only be called before initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".scaled_passing_score\",\n        scorm2004_errors.READ_ONLY_ELEMENT ?? 404,\n      );\n    } else {\n      this._scaled_passing_score = scaled_passing_score;\n    }\n  }\n\n  /**\n   * Getter for _completion_threshold\n   * @return {string}\n   */\n  get completion_threshold(): string {\n    return this._completion_threshold;\n  }\n\n  /**\n   * Setter for _completion_threshold. Can only be called before initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".completion_threshold\",\n        scorm2004_errors.READ_ONLY_ELEMENT ?? 404,\n      );\n    } else {\n      this._completion_threshold = completion_threshold;\n    }\n  }\n\n  /**\n   * Reset the threshold properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset these properties as they are read-only after initialization\n  }\n}\n","import { BaseRootCMI } from \"../common/base_cmi\";\nimport { CMILearnerPreference } from \"./learner_preference\";\nimport { CMIInteractions } from \"./interactions\";\nimport { Scorm2004CMIScore } from \"./score\";\nimport { CMICommentsFromLearner, CMICommentsFromLMS } from \"./comments\";\nimport { CMIObjectives } from \"./objectives\";\nimport { CMIMetadata } from \"./metadata\";\nimport { CMILearner } from \"./learner\";\nimport { CMIStatus } from \"./status\";\nimport { CMISession } from \"./session\";\nimport { CMIContent } from \"./content\";\nimport { CMISettings } from \"./settings\";\nimport { CMIThresholds } from \"./thresholds\";\n\n/**\n * Class representing cmi object for SCORM 2004\n */\nexport class CMI extends BaseRootCMI {\n  /**\n   * Constructor for the SCORM 2004 cmi object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean = false) {\n    super(\"cmi\");\n    this.metadata = new CMIMetadata();\n    this.learner = new CMILearner();\n    this.status = new CMIStatus();\n    this.session = new CMISession();\n    this.content = new CMIContent();\n    this.settings = new CMISettings();\n    this.thresholds = new CMIThresholds();\n    this.learner_preference = new CMILearnerPreference();\n    this.score = new Scorm2004CMIScore();\n    this.comments_from_learner = new CMICommentsFromLearner();\n    this.comments_from_lms = new CMICommentsFromLMS();\n    this.interactions = new CMIInteractions();\n    this.objectives = new CMIObjectives();\n    if (initialized) this.initialize();\n  }\n\n  // New component classes\n  private metadata: CMIMetadata;\n  private learner: CMILearner;\n  private status: CMIStatus;\n  private session: CMISession;\n  private content: CMIContent;\n  private settings: CMISettings;\n  private thresholds: CMIThresholds;\n\n  // Original complex objects\n  public learner_preference: CMILearnerPreference;\n  public score: Scorm2004CMIScore;\n  public comments_from_learner: CMICommentsFromLearner;\n  public comments_from_lms: CMICommentsFromLMS;\n  public interactions: CMIInteractions;\n  public objectives: CMIObjectives;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    // Initialize new component classes\n    this.metadata?.initialize();\n    this.learner?.initialize();\n    this.status?.initialize();\n    this.session?.initialize();\n    this.content?.initialize();\n    this.settings?.initialize();\n    this.thresholds?.initialize();\n\n    // Initialize original complex objects\n    this.learner_preference?.initialize();\n    this.score?.initialize();\n    this.comments_from_learner?.initialize();\n    this.comments_from_lms?.initialize();\n    this.interactions?.initialize();\n    this.objectives?.initialize();\n  }\n\n  /**\n   * Called when API is moving to another SCO\n   */\n  reset() {\n    this._initialized = false;\n\n    // Reset new component classes\n    this.metadata?.reset();\n    this.learner?.reset();\n    this.status?.reset();\n    this.session?.reset();\n    this.content?.reset();\n    this.settings?.reset();\n    this.thresholds?.reset();\n\n    // Reset original complex objects\n    this.objectives?.reset(false);\n    this.interactions?.reset(true);\n    this.score?.reset();\n    this.comments_from_learner?.reset();\n    this.comments_from_lms?.reset();\n    this.learner_preference?.reset();\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   * @private\n   */\n  get _version(): string {\n    return this.metadata._version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   * @private\n   */\n  set _version(_version: string) {\n    this.metadata._version = _version;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.metadata._children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {number} _children\n   * @private\n   */\n  set _children(_children: number) {\n    this.metadata._children = _children;\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this.status.completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    this.status.completion_status = completion_status;\n  }\n\n  /**\n   * Getter for _completion_threshold\n   * @return {string}\n   */\n  get completion_threshold(): string {\n    return this.thresholds.completion_threshold;\n  }\n\n  /**\n   * Setter for _completion_threshold. Can only be called before initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold: string) {\n    this.thresholds.completion_threshold = completion_threshold;\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this.settings.credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    this.settings.credit = credit;\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this.session.entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    this.session.entry = entry;\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    this.session.jsonString = this.jsonString;\n    return this.session.exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    this.session.exit = exit;\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this.content.launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    this.content.launch_data = launch_data;\n  }\n\n  /**\n   * Getter for _learner_id\n   * @return {string}\n   */\n  get learner_id(): string {\n    return this.learner.learner_id;\n  }\n\n  /**\n   * Setter for _learner_id. Can only be called before initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id: string) {\n    this.learner.learner_id = learner_id;\n  }\n\n  /**\n   * Getter for _learner_name\n   * @return {string}\n   */\n  get learner_name(): string {\n    return this.learner.learner_name;\n  }\n\n  /**\n   * Setter for _learner_name. Can only be called before initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name: string) {\n    this.learner.learner_name = learner_name;\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this.content.location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    this.content.location = location;\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this.settings.max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    this.settings.max_time_allowed = max_time_allowed;\n  }\n\n  /**\n   * Getter for _mode\n   * @return {string}\n   */\n  get mode(): string {\n    return this.settings.mode;\n  }\n\n  /**\n   * Setter for _mode. Can only be called before initialization.\n   * @param {string} mode\n   */\n  set mode(mode: string) {\n    this.settings.mode = mode;\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this.status.progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    this.status.progress_measure = progress_measure;\n  }\n\n  /**\n   * Getter for _scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score(): string {\n    return this.thresholds.scaled_passing_score;\n  }\n\n  /**\n   * Setter for _scaled_passing_score. Can only be called before initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score: string) {\n    this.thresholds.scaled_passing_score = scaled_passing_score;\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    this.session.jsonString = this.jsonString;\n    return this.session.session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    this.session.session_time = session_time;\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this.status.success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    this.status.success_status = success_status;\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this.content.suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    this.content.suspend_data = suspend_data;\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this.settings.time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    this.settings.time_limit_action = time_limit_action;\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this.session.total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    this.session.total_time = total_time;\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime(): string {\n    return this.session.getCurrentTotalTime(this.start_time);\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      comments_from_learner: CMICommentsFromLearner,\n   *      comments_from_lms: CMICommentsFromLMS,\n   *      completion_status: string,\n   *      completion_threshold: string,\n   *      credit: string,\n   *      entry: string,\n   *      exit: string,\n   *      interactions: CMIInteractions,\n   *      launch_data: string,\n   *      learner_id: string,\n   *      learner_name: string,\n   *      learner_preference: CMILearnerPreference,\n   *      location: string,\n   *      max_time_allowed: string,\n   *      mode: string,\n   *      objectives: CMIObjectives,\n   *      progress_measure: string,\n   *      scaled_passing_score: string,\n   *      score: Scorm2004CMIScore,\n   *      session_time: string,\n   *      success_status: string,\n   *      suspend_data: string,\n   *      time_limit_action: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    comments_from_learner: CMICommentsFromLearner;\n    comments_from_lms: CMICommentsFromLMS;\n    completion_status: string;\n    completion_threshold: string;\n    credit: string;\n    entry: string;\n    exit: string;\n    interactions: CMIInteractions;\n    launch_data: string;\n    learner_id: string;\n    learner_name: string;\n    learner_preference: CMILearnerPreference;\n    location: string;\n    max_time_allowed: string;\n    mode: string;\n    objectives: CMIObjectives;\n    progress_measure: string;\n    scaled_passing_score: string;\n    score: Scorm2004CMIScore;\n    session_time: string;\n    success_status: string;\n    suspend_data: string;\n    time_limit_action: string;\n  } {\n    this.jsonString = true;\n\n    // Set jsonString flag on component classes that need it\n    this.session.jsonString = true;\n\n    const result = {\n      comments_from_learner: this.comments_from_learner,\n      comments_from_lms: this.comments_from_lms,\n      completion_status: this.completion_status,\n      completion_threshold: this.completion_threshold,\n      credit: this.credit,\n      entry: this.entry,\n      exit: this.exit,\n      interactions: this.interactions,\n      launch_data: this.launch_data,\n      learner_id: this.learner_id,\n      learner_name: this.learner_name,\n      learner_preference: this.learner_preference,\n      location: this.location,\n      max_time_allowed: this.max_time_allowed,\n      mode: this.mode,\n      objectives: this.objectives,\n      progress_measure: this.progress_measure,\n      scaled_passing_score: this.scaled_passing_score,\n      score: this.score,\n      session_time: this.session_time,\n      success_status: this.success_status,\n      suspend_data: this.suspend_data,\n      time_limit_action: this.time_limit_action,\n    };\n\n    // Clean up jsonString flags\n    this.jsonString = false;\n    this.session.jsonString = false;\n\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { NAVBoolean } from \"../../constants/enums\";\nimport { CMIArray } from \"../common/array\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Sequencing } from \"./sequencing/sequencing\";\n\n/**\n * Class representing SCORM 2004's adl object\n */\nexport class ADL extends BaseCMI {\n  /**\n   * Constructor for adl\n   */\n  constructor() {\n    super(\"adl\");\n    this.nav = new ADLNav();\n    this.data = new ADLData();\n  }\n\n  public nav: ADLNav;\n  public data = new ADLData();\n  private _sequencing: Sequencing | null = null;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.nav?.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this.nav?.reset();\n  }\n\n  /**\n   * Getter for sequencing\n   * @return {Sequencing | null}\n   */\n  get sequencing(): Sequencing | null {\n    return this._sequencing;\n  }\n\n  /**\n   * Setter for sequencing\n   * @param {Sequencing | null} sequencing\n   */\n  set sequencing(sequencing: Sequencing | null) {\n    this._sequencing = sequencing;\n    if (sequencing) {\n      sequencing.adlNav = this.nav;\n      this.nav.sequencing = sequencing;\n    }\n  }\n\n  /**\n   * toJSON for adl\n   * @return {\n   *    {\n   *      nav: ADLNav,\n   *      data: ADLData\n   *    }\n   *  }\n   */\n  toJSON(): {\n    nav: ADLNav;\n    data: ADLData;\n  } {\n    this.jsonString = true;\n    const result = {\n      nav: this.nav,\n      data: this.data,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's `adl.nav` object\n */\n\nexport class ADLNav extends BaseCMI {\n  private _request = \"_none_\";\n  private _sequencing: Sequencing | null = null;\n\n  /**\n   * Constructor for `adl.nav`\n   */\n  constructor() {\n    super(\"adl.nav\");\n    this.request_valid = new ADLNavRequestValid();\n  }\n\n  public request_valid: ADLNavRequestValid;\n\n  /**\n   * Getter for sequencing\n   * @return {Sequencing | null}\n   */\n  get sequencing(): Sequencing | null {\n    return this._sequencing;\n  }\n\n  /**\n   * Setter for sequencing\n   * @param {Sequencing | null} sequencing\n   */\n  set sequencing(sequencing: Sequencing | null) {\n    this._sequencing = sequencing;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.request_valid?.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._request = \"_none_\";\n    if (this._sequencing) {\n      this._sequencing.adlNav = null;\n    }\n    this._sequencing = null;\n    this.request_valid?.reset();\n  }\n\n  /**\n   * Getter for _request\n   * @return {string}\n   */\n  get request(): string {\n    return this._request;\n  }\n\n  /**\n   * Setter for _request\n   * @param {string} request\n   */\n  set request(request: string) {\n    if (check2004ValidFormat(this._cmi_element + \".request\", request, scorm2004_regex.NAVEvent)) {\n      this._request = request;\n    }\n  }\n\n  /**\n   * toJSON for adl.nav\n   *\n   * @return {\n   *    {\n   *      request: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    request: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      request: this.request,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's `adl.data` object\n */\nexport class ADLData extends CMIArray {\n  constructor() {\n    super({\n      CMIElement: \"adl.data\",\n      children: scorm2004_constants.adl_data_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's adl.data.n object\n */\nexport class ADLDataObject extends BaseCMI {\n  private _id = \"\";\n  private _store = \"\";\n\n  constructor() {\n    super(\"adl.data.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _store\n   * @return {string}\n   */\n  get store(): string {\n    return this._store;\n  }\n\n  /**\n   * Setter for _store\n   * @param {string} store\n   */\n  set store(store: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".store\", store, scorm2004_regex.CMILangString4000)\n    ) {\n      this._store = store;\n    }\n  }\n\n  /**\n   * toJSON for adl.data.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      store: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    store: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this._id,\n      store: this._store,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl.nav.request_valid object\n */\n\nexport class ADLNavRequestValid extends BaseCMI {\n  private _continue = \"unknown\";\n  private _previous = \"unknown\";\n  private _choice: {\n    [key: string]: NAVBoolean;\n  } = {};\n  private _jump: {\n    [key: string]: NAVBoolean;\n  } = {};\n  private _exit = \"unknown\";\n  private _exitAll = \"unknown\";\n  private _abandon = \"unknown\";\n  private _abandonAll = \"unknown\";\n  private _suspendAll = \"unknown\";\n\n  /**\n   * Constructor for adl.nav.request_valid\n   */\n  constructor() {\n    super(\"adl.nav.request_valid\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._continue = \"unknown\";\n    this._previous = \"unknown\";\n    this._choice = {};\n    this._jump = {};\n    this._exit = \"unknown\";\n    this._exitAll = \"unknown\";\n    this._abandon = \"unknown\";\n    this._abandonAll = \"unknown\";\n    this._suspendAll = \"unknown\";\n  }\n\n  /**\n   * Getter for _continue\n   * @return {string}\n   */\n  get continue(): string {\n    return this._continue;\n  }\n\n  /**\n   * Setter for _continue. Just throws an error.\n   * @param {string} _continue\n   */\n  set continue(_continue: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".continue\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".continue\", _continue, scorm2004_regex.NAVBoolean)\n    ) {\n      this._continue = _continue;\n    }\n  }\n\n  /**\n   * Getter for _previous\n   * @return {string}\n   */\n  get previous(): string {\n    return this._previous;\n  }\n\n  /**\n   * Setter for _previous. Just throws an error.\n   * @param {string} _previous\n   */\n  set previous(_previous: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".previous\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".previous\", _previous, scorm2004_regex.NAVBoolean)\n    ) {\n      this._previous = _previous;\n    }\n  }\n\n  /**\n   * Getter for _choice\n   * @return {{ [key: string]: NAVBoolean }}\n   */\n  get choice(): { [key: string]: NAVBoolean } {\n    return this._choice;\n  }\n\n  /**\n   * Setter for _choice\n   * @param {{ [key: string]: string }} choice\n   */\n  set choice(choice: { [key: string]: string }) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".choice\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (typeof choice !== \"object\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".choice\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    for (const key in choice) {\n      if ({}.hasOwnProperty.call(choice, key)) {\n        if (\n          check2004ValidFormat(\n            this._cmi_element + \".choice.\" + key,\n            choice[key] || \"\",\n            scorm2004_regex.NAVBoolean,\n          ) &&\n          check2004ValidFormat(this._cmi_element + \".choice.\" + key, key, scorm2004_regex.NAVTarget)\n        ) {\n          // Convert string value to NAVBoolean enum value\n          const value = choice[key];\n          if (value === \"true\") {\n            this._choice[key] = NAVBoolean.TRUE;\n          } else if (value === \"false\") {\n            this._choice[key] = NAVBoolean.FALSE;\n          } else if (value === \"unknown\") {\n            this._choice[key] = NAVBoolean.UNKNOWN;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Getter for _jump\n   * @return {{ [key: string]: NAVBoolean }}\n   */\n  get jump(): { [key: string]: NAVBoolean } {\n    return this._jump;\n  }\n\n  /**\n   * Setter for _jump\n   * @param {{ [key: string]: string }} jump\n   */\n  set jump(jump: { [key: string]: string }) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".jump\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (typeof jump !== \"object\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".jump\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    for (const key in jump) {\n      if ({}.hasOwnProperty.call(jump, key)) {\n        if (\n          check2004ValidFormat(\n            this._cmi_element + \".jump.\" + key,\n            jump[key] || \"\",\n            scorm2004_regex.NAVBoolean,\n          ) &&\n          check2004ValidFormat(this._cmi_element + \".jump.\" + key, key, scorm2004_regex.NAVTarget)\n        ) {\n          // Convert string value to NAVBoolean enum value\n          const value = jump[key];\n          if (value === \"true\") {\n            this._jump[key] = NAVBoolean.TRUE;\n          } else if (value === \"false\") {\n            this._jump[key] = NAVBoolean.FALSE;\n          } else if (value === \"unknown\") {\n            this._jump[key] = NAVBoolean.UNKNOWN;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Getter for _exit\n   * @return {string}\n   */\n  get exit(): string {\n    return this._exit;\n  }\n\n  /**\n   * Setter for _exit. Just throws an error.\n   * @param {string} _exit\n   */\n  set exit(_exit: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exit\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".exit\", _exit, scorm2004_regex.NAVBoolean)\n    ) {\n      this._exit = _exit;\n    }\n  }\n\n  /**\n   * Getter for _exitAll\n   * @return {string}\n   */\n  get exitAll(): string {\n    return this._exitAll;\n  }\n\n  /**\n   * Setter for _exitAll. Just throws an error.\n   * @param {string} _exitAll\n   */\n  set exitAll(_exitAll: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exitAll\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".exitAll\", _exitAll, scorm2004_regex.NAVBoolean)\n    ) {\n      this._exitAll = _exitAll;\n    }\n  }\n\n  /**\n   * Getter for _abandon\n   * @return {string}\n   */\n  get abandon(): string {\n    return this._abandon;\n  }\n\n  /**\n   * Setter for _abandon. Just throws an error.\n   * @param {string} _abandon\n   */\n  set abandon(_abandon: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".abandon\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".abandon\", _abandon, scorm2004_regex.NAVBoolean)\n    ) {\n      this._abandon = _abandon;\n    }\n  }\n\n  /**\n   * Getter for _abandonAll\n   * @return {string}\n   */\n  get abandonAll(): string {\n    return this._abandonAll;\n  }\n\n  /**\n   * Setter for _abandonAll. Just throws an error.\n   * @param {string} _abandonAll\n   */\n  set abandonAll(_abandonAll: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".abandonAll\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".abandonAll\", _abandonAll, scorm2004_regex.NAVBoolean)\n    ) {\n      this._abandonAll = _abandonAll;\n    }\n  }\n\n  /**\n   * Getter for _suspendAll\n   * @return {string}\n   */\n  get suspendAll(): string {\n    return this._suspendAll;\n  }\n\n  /**\n   * Setter for _suspendAll. Just throws an error.\n   * @param {string} _suspendAll\n   */\n  set suspendAll(_suspendAll: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".suspendAll\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".suspendAll\", _suspendAll, scorm2004_regex.NAVBoolean)\n    ) {\n      this._suspendAll = _suspendAll;\n    }\n  }\n\n  /**\n   * toJSON for adl.nav.request_valid\n   *\n   * @return {\n   *    {\n   *      previous: string,\n   *      continue: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    previous: string;\n    continue: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      previous: this._previous,\n      continue: this._continue,\n      choice: this._choice,\n      jump: this._jump,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Enum for rule condition operators\n */\nexport enum RuleConditionOperator {\n  NOT = \"not\",\n  AND = \"and\",\n  OR = \"or\",\n}\n\n/**\n * Enum for rule condition types\n */\nexport enum RuleConditionType {\n  SATISFIED = \"satisfied\",\n  OBJECTIVE_STATUS_KNOWN = \"objectiveStatusKnown\",\n  OBJECTIVE_MEASURE_KNOWN = \"objectiveMeasureKnown\",\n  OBJECTIVE_MEASURE_GREATER_THAN = \"objectiveMeasureGreaterThan\",\n  OBJECTIVE_MEASURE_LESS_THAN = \"objectiveMeasureLessThan\",\n  COMPLETED = \"completed\",\n  PROGRESS_KNOWN = \"progressKnown\",\n  ATTEMPTED = \"attempted\",\n  ATTEMPT_LIMIT_EXCEEDED = \"attemptLimitExceeded\",\n  TIME_LIMIT_EXCEEDED = \"timeLimitExceeded\",\n  OUTSIDE_AVAILABLE_TIME_RANGE = \"outsideAvailableTimeRange\",\n  ALWAYS = \"always\",\n}\n\n/**\n * Enum for rule action types\n */\nexport enum RuleActionType {\n  SKIP = \"skip\",\n  DISABLED = \"disabled\",\n  HIDE_FROM_CHOICE = \"hideFromChoice\",\n  STOP_FORWARD_TRAVERSAL = \"stopForwardTraversal\",\n  EXIT_PARENT = \"exitParent\",\n  EXIT_ALL = \"exitAll\",\n  RETRY = \"retry\",\n  RETRY_ALL = \"retryAll\",\n  CONTINUE = \"continue\",\n  PREVIOUS = \"previous\",\n  EXIT = \"exit\",\n}\n\n/**\n * Class representing a sequencing rule condition\n */\nexport class RuleCondition extends BaseCMI {\n  private _condition: RuleConditionType = RuleConditionType.ALWAYS;\n  private _operator: RuleConditionOperator | null = null;\n  private _parameters: Map<string, any> = new Map();\n  // Optional, overridable provider for current time (LMS may set via SequencingService)\n  private static _now: () => Date = () => new Date();\n\n  /**\n   * Constructor for RuleCondition\n   * @param {RuleConditionType} condition - The condition type\n   * @param {RuleConditionOperator | null} operator - The operator (null for no operator)\n   * @param {Map<string, any>} parameters - Additional parameters for the condition\n   */\n  constructor(\n    condition: RuleConditionType = RuleConditionType.ALWAYS,\n    operator: RuleConditionOperator | null = null,\n    parameters: Map<string, any> = new Map(),\n  ) {\n    super(\"ruleCondition\");\n    this._condition = condition;\n    this._operator = operator;\n    this._parameters = parameters;\n  }\n\n  /**\n   * Allow integrators to override the clock used for time-based rules.\n   */\n  public static setNowProvider(now: () => Date) {\n    if (typeof now === \"function\") {\n      RuleCondition._now = now;\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._condition = RuleConditionType.ALWAYS;\n    this._operator = null;\n    this._parameters = new Map();\n  }\n\n  /**\n   * Getter for condition\n   * @return {RuleConditionType}\n   */\n  get condition(): RuleConditionType {\n    return this._condition;\n  }\n\n  /**\n   * Setter for condition\n   * @param {RuleConditionType} condition\n   */\n  set condition(condition: RuleConditionType) {\n    this._condition = condition;\n  }\n\n  /**\n   * Getter for operator\n   * @return {RuleConditionOperator | null}\n   */\n  get operator(): RuleConditionOperator | null {\n    return this._operator;\n  }\n\n  /**\n   * Setter for operator\n   * @param {RuleConditionOperator | null} operator\n   */\n  set operator(operator: RuleConditionOperator | null) {\n    this._operator = operator;\n  }\n\n  /**\n   * Getter for parameters\n   * @return {Map<string, any>}\n   */\n  get parameters(): Map<string, any> {\n    return this._parameters;\n  }\n\n  /**\n   * Setter for parameters\n   * @param {Map<string, any>} parameters\n   */\n  set parameters(parameters: Map<string, any>) {\n    this._parameters = parameters;\n  }\n\n  /**\n   * Evaluate the condition for an activity\n   * @param {Activity} activity - The activity to evaluate the condition for\n   * @return {boolean} - True if the condition is met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    let result;\n    switch (this._condition) {\n      case RuleConditionType.SATISFIED:\n        result = activity.successStatus === SuccessStatus.PASSED;\n        break;\n      case RuleConditionType.OBJECTIVE_STATUS_KNOWN:\n        // noinspection PointlessBooleanExpressionJS\n        result = !!activity.objectiveMeasureStatus;\n        break;\n      case RuleConditionType.OBJECTIVE_MEASURE_KNOWN:\n        // noinspection PointlessBooleanExpressionJS\n        result = !!activity.objectiveMeasureStatus;\n        break;\n      case RuleConditionType.OBJECTIVE_MEASURE_GREATER_THAN: {\n        const greaterThanValue = this._parameters.get(\"threshold\") || 0;\n        result =\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure > greaterThanValue;\n        break;\n      }\n      case RuleConditionType.OBJECTIVE_MEASURE_LESS_THAN: {\n        const lessThanValue = this._parameters.get(\"threshold\") || 0;\n        result =\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure < lessThanValue;\n        break;\n      }\n      case RuleConditionType.COMPLETED:\n        result = activity.isCompleted;\n        break;\n      case RuleConditionType.PROGRESS_KNOWN:\n        result = activity.completionStatus !== \"unknown\";\n        break;\n      case RuleConditionType.ATTEMPTED:\n        result = activity.attemptCount > 0;\n        break;\n      case RuleConditionType.ATTEMPT_LIMIT_EXCEEDED: {\n        const attemptLimit = this._parameters.get(\"attemptLimit\") || 0;\n        result = activity.attemptCount >= attemptLimit;\n        break;\n      }\n      case RuleConditionType.TIME_LIMIT_EXCEEDED:\n        result = this.evaluateTimeLimitExceeded(activity);\n        break;\n      case RuleConditionType.OUTSIDE_AVAILABLE_TIME_RANGE:\n        result = this.evaluateOutsideAvailableTimeRange(activity);\n        break;\n      case RuleConditionType.ALWAYS:\n        result = true;\n        break;\n      default:\n        result = false;\n        break;\n    }\n\n    if (this._operator === RuleConditionOperator.NOT) {\n      result = !result;\n    }\n\n    return result;\n  }\n\n  /**\n   * Evaluate if time limit has been exceeded\n   * @param {Activity} activity - The activity to evaluate\n   * @return {boolean}\n   * @private\n   */\n  private evaluateTimeLimitExceeded(activity: Activity): boolean {\n    const timeLimitDuration = activity.timeLimitDuration;\n    if (!timeLimitDuration) {\n      return false;\n    }\n\n    // Parse ISO 8601 duration to milliseconds\n    const durationMs = this.parseISO8601Duration(timeLimitDuration);\n    if (durationMs === 0) {\n      return false;\n    }\n\n    // Get current attempt duration\n    const attemptDuration = activity.attemptExperiencedDuration;\n    const attemptDurationMs = this.parseISO8601Duration(attemptDuration);\n\n    return attemptDurationMs > durationMs;\n  }\n\n  /**\n   * Evaluate if activity is outside available time range\n   * @param {Activity} activity - The activity to evaluate\n   * @return {boolean}\n   * @private\n   */\n  private evaluateOutsideAvailableTimeRange(activity: Activity): boolean {\n    const beginTime = activity.beginTimeLimit;\n    const endTime = activity.endTimeLimit;\n\n    if (!beginTime && !endTime) {\n      return false;\n    }\n\n    const now = RuleCondition._now();\n\n    if (beginTime) {\n      const beginDate = new Date(beginTime);\n      if (now < beginDate) {\n        return true;\n      }\n    }\n\n    if (endTime) {\n      const endDate = new Date(endTime);\n      if (now > endDate) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Parse ISO 8601 duration to milliseconds\n   * @param {string} duration - ISO 8601 duration string\n   * @return {number} - Duration in milliseconds\n   * @private\n   */\n  private parseISO8601Duration(duration: string): number {\n    const regex = /PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?/;\n    const matches = duration.match(regex);\n\n    if (!matches) {\n      return 0;\n    }\n\n    const hours = parseInt(matches[1] || \"0\", 10);\n    const minutes = parseInt(matches[2] || \"0\", 10);\n    const seconds = parseFloat(matches[3] || \"0\");\n\n    return (hours * 3600 + minutes * 60 + seconds) * 1000;\n  }\n\n  /**\n   * toJSON for RuleCondition\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      condition: this._condition,\n      operator: this._operator,\n      parameters: Object.fromEntries(this._parameters),\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a sequencing rule\n */\nexport class SequencingRule extends BaseCMI {\n  private _conditions: RuleCondition[] = [];\n  private _action: RuleActionType = RuleActionType.SKIP;\n  private _conditionCombination: string | RuleConditionOperator = RuleConditionOperator.AND;\n\n  /**\n   * Constructor for SequencingRule\n   * @param {RuleActionType} action - The action to take when the rule conditions are met\n   * @param {string | RuleConditionOperator} conditionCombination - How to combine multiple conditions (\"all\"/\"and\" or \"any\"/\"or\")\n   */\n  constructor(\n    action: RuleActionType = RuleActionType.SKIP,\n    conditionCombination: string | RuleConditionOperator = RuleConditionOperator.AND,\n  ) {\n    super(\"sequencingRule\");\n    this._action = action;\n    this._conditionCombination = conditionCombination;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._conditions = [];\n    this._action = RuleActionType.SKIP;\n    this._conditionCombination = RuleConditionOperator.AND;\n  }\n\n  /**\n   * Getter for conditions\n   * @return {RuleCondition[]}\n   */\n  get conditions(): RuleCondition[] {\n    return this._conditions;\n  }\n\n  /**\n   * Add a condition to the rule\n   * @param {RuleCondition} condition - The condition to add\n   */\n  addCondition(condition: RuleCondition): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(condition instanceof RuleCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    // Check if the condition is already in the array\n    if (!this._conditions.includes(condition)) {\n      this._conditions.push(condition);\n    }\n  }\n\n  /**\n   * Remove a condition from the rule\n   * @param {RuleCondition} condition - The condition to remove\n   * @return {boolean} - True if the condition was removed, false otherwise\n   */\n  removeCondition(condition: RuleCondition): boolean {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(condition instanceof RuleCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    const index = this._conditions.indexOf(condition);\n    if (index !== -1) {\n      this._conditions.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for action\n   * @return {RuleActionType}\n   */\n  get action(): RuleActionType {\n    return this._action;\n  }\n\n  /**\n   * Setter for action\n   * @param {RuleActionType} action\n   */\n  set action(action: RuleActionType) {\n    this._action = action;\n  }\n\n  /**\n   * Getter for conditionCombination\n   * @return {string | RuleConditionOperator}\n   */\n  get conditionCombination(): string | RuleConditionOperator {\n    return this._conditionCombination;\n  }\n\n  /**\n   * Setter for conditionCombination\n   * @param {string | RuleConditionOperator} conditionCombination\n   */\n  set conditionCombination(conditionCombination: string | RuleConditionOperator) {\n    this._conditionCombination = conditionCombination;\n  }\n\n  /**\n   * Evaluate the rule for an activity\n   * @param {Activity} activity - The activity to evaluate the rule for\n   * @return {boolean} - True if the rule conditions are met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    if (this._conditions.length === 0) {\n      return true;\n    }\n\n    if (\n      this._conditionCombination === \"all\" ||\n      this._conditionCombination === RuleConditionOperator.AND\n    ) {\n      return this._conditions.every((condition) => condition.evaluate(activity));\n    } else if (\n      this._conditionCombination === \"any\" ||\n      this._conditionCombination === RuleConditionOperator.OR\n    ) {\n      return this._conditions.some((condition) => condition.evaluate(activity));\n    }\n\n    return false;\n  }\n\n  /**\n   * toJSON for SequencingRule\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      conditions: this._conditions,\n      action: this._action,\n      conditionCombination: this._conditionCombination,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a collection of sequencing rules\n */\nexport class SequencingRules extends BaseCMI {\n  private _preConditionRules: SequencingRule[] = [];\n  private _exitConditionRules: SequencingRule[] = [];\n  private _postConditionRules: SequencingRule[] = [];\n\n  /**\n   * Constructor for SequencingRules\n   */\n  constructor() {\n    super(\"sequencingRules\");\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._preConditionRules = [];\n    this._exitConditionRules = [];\n    this._postConditionRules = [];\n  }\n\n  /**\n   * Getter for preConditionRules\n   * @return {SequencingRule[]}\n   */\n  get preConditionRules(): SequencingRule[] {\n    return this._preConditionRules;\n  }\n\n  /**\n   * Add a pre-condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addPreConditionRule(rule: SequencingRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".preConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._preConditionRules.push(rule);\n  }\n\n  /**\n   * Getter for exitConditionRules\n   * @return {SequencingRule[]}\n   */\n  get exitConditionRules(): SequencingRule[] {\n    return this._exitConditionRules;\n  }\n\n  /**\n   * Add an exit condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addExitConditionRule(rule: SequencingRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exitConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._exitConditionRules.push(rule);\n  }\n\n  /**\n   * Getter for postConditionRules\n   * @return {SequencingRule[]}\n   */\n  get postConditionRules(): SequencingRule[] {\n    return this._postConditionRules;\n  }\n\n  /**\n   * Add a post-condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addPostConditionRule(rule: SequencingRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".postConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._postConditionRules.push(rule);\n  }\n\n  /**\n   * Evaluate pre-condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluatePreConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._preConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Evaluate exit condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluateExitConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._exitConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Evaluate post-condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluatePostConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._postConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * toJSON for SequencingRules\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      preConditionRules: this._preConditionRules,\n      exitConditionRules: this._exitConditionRules,\n      postConditionRules: this._postConditionRules,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { CompletionStatus, SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Enum for rollup action types\n */\nexport enum RollupActionType {\n  SATISFIED = \"satisfied\",\n  NOT_SATISFIED = \"notSatisfied\",\n  COMPLETED = \"completed\",\n  INCOMPLETE = \"incomplete\",\n}\n\n/**\n * Enum for rollup condition types\n */\nexport enum RollupConditionType {\n  SATISFIED = \"satisfied\",\n  OBJECTIVE_STATUS_KNOWN = \"objectiveStatusKnown\",\n  OBJECTIVE_MEASURE_KNOWN = \"objectiveMeasureKnown\",\n  OBJECTIVE_MEASURE_GREATER_THAN = \"objectiveMeasureGreaterThan\",\n  OBJECTIVE_MEASURE_LESS_THAN = \"objectiveMeasureLessThan\",\n  COMPLETED = \"completed\",\n  PROGRESS_KNOWN = \"progressKnown\",\n  ATTEMPTED = \"attempted\",\n  NOT_ATTEMPTED = \"notAttempted\",\n  ALWAYS = \"always\",\n}\n\n/**\n * Enum for rollup consideration types\n */\nexport enum RollupConsiderationType {\n  ALL = \"all\",\n  ANY = \"any\",\n  NONE = \"none\",\n  AT_LEAST_COUNT = \"atLeastCount\",\n  AT_LEAST_PERCENT = \"atLeastPercent\",\n}\n\n/**\n * Class representing a rollup condition\n */\nexport class RollupCondition extends BaseCMI {\n  private _condition: RollupConditionType = RollupConditionType.ALWAYS;\n  private _parameters: Map<string, any> = new Map();\n\n  /**\n   * Constructor for RollupCondition\n   * @param {RollupConditionType} condition - The condition type\n   * @param {Map<string, any>} parameters - Additional parameters for the condition\n   */\n  constructor(\n    condition: RollupConditionType = RollupConditionType.ALWAYS,\n    parameters: Map<string, any> = new Map(),\n  ) {\n    super(\"rollupCondition\");\n    this._condition = condition;\n    this._parameters = parameters;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for condition\n   * @return {RollupConditionType}\n   */\n  get condition(): RollupConditionType {\n    return this._condition;\n  }\n\n  /**\n   * Setter for condition\n   * @param {RollupConditionType} condition\n   */\n  set condition(condition: RollupConditionType) {\n    this._condition = condition;\n  }\n\n  /**\n   * Getter for parameters\n   * @return {Map<string, any>}\n   */\n  get parameters(): Map<string, any> {\n    return this._parameters;\n  }\n\n  /**\n   * Setter for parameters\n   * @param {Map<string, any>} parameters\n   */\n  set parameters(parameters: Map<string, any>) {\n    this._parameters = parameters;\n  }\n\n  /**\n   * Evaluate the condition for an activity\n   * @param {Activity} activity - The activity to evaluate the condition for\n   * @return {boolean} - True if the condition is met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    switch (this._condition) {\n      case RollupConditionType.SATISFIED:\n        return activity.successStatus === SuccessStatus.PASSED;\n      case RollupConditionType.OBJECTIVE_STATUS_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RollupConditionType.OBJECTIVE_MEASURE_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RollupConditionType.OBJECTIVE_MEASURE_GREATER_THAN: {\n        const greaterThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure > greaterThanValue\n        );\n      }\n      case RollupConditionType.OBJECTIVE_MEASURE_LESS_THAN: {\n        const lessThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure < lessThanValue\n        );\n      }\n      case RollupConditionType.COMPLETED:\n        return activity.isCompleted;\n      case RollupConditionType.PROGRESS_KNOWN:\n        return activity.completionStatus !== CompletionStatus.UNKNOWN;\n      case RollupConditionType.ATTEMPTED:\n        return activity.attemptCount > 0;\n      case RollupConditionType.NOT_ATTEMPTED:\n        return activity.attemptCount === 0;\n      case RollupConditionType.ALWAYS:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RollupCondition\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      condition: this._condition,\n      parameters: Object.fromEntries(this._parameters),\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a rollup rule\n */\nexport class RollupRule extends BaseCMI {\n  private _conditions: RollupCondition[] = [];\n  private _action: RollupActionType = RollupActionType.SATISFIED;\n  private _consideration: RollupConsiderationType = RollupConsiderationType.ALL;\n  private _minimumCount: number = 0;\n  private _minimumPercent: number = 0;\n\n  /**\n   * Constructor for RollupRule\n   * @param {RollupActionType} action - The action to take when the rule conditions are met\n   * @param {RollupConsiderationType} consideration - How to consider child activities\n   * @param {number} minimumCount - The minimum count for AT_LEAST_COUNT consideration\n   * @param {number} minimumPercent - The minimum percent for AT_LEAST_PERCENT consideration\n   */\n  constructor(\n    action: RollupActionType = RollupActionType.SATISFIED,\n    consideration: RollupConsiderationType = RollupConsiderationType.ALL,\n    minimumCount: number = 0,\n    minimumPercent: number = 0,\n  ) {\n    super(\"rollupRule\");\n    this._action = action;\n    this._consideration = consideration;\n    this._minimumCount = minimumCount;\n    this._minimumPercent = minimumPercent;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._conditions = [];\n  }\n\n  /**\n   * Getter for conditions\n   * @return {RollupCondition[]}\n   */\n  get conditions(): RollupCondition[] {\n    return this._conditions;\n  }\n\n  /**\n   * Add a condition to the rule\n   * @param {RollupCondition} condition - The condition to add\n   */\n  addCondition(condition: RollupCondition): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(condition instanceof RollupCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._conditions.push(condition);\n  }\n\n  /**\n   * Remove a condition from the rule\n   * @param {RollupCondition} condition - The condition to remove\n   * @return {boolean} - True if the condition was removed, false otherwise\n   */\n  removeCondition(condition: RollupCondition): boolean {\n    const index = this._conditions.indexOf(condition);\n    if (index !== -1) {\n      this._conditions.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for action\n   * @return {RollupActionType}\n   */\n  get action(): RollupActionType {\n    return this._action;\n  }\n\n  /**\n   * Setter for action\n   * @param {RollupActionType} action\n   */\n  set action(action: RollupActionType) {\n    this._action = action;\n  }\n\n  /**\n   * Getter for consideration\n   * @return {RollupConsiderationType}\n   */\n  get consideration(): RollupConsiderationType {\n    return this._consideration;\n  }\n\n  /**\n   * Setter for consideration\n   * @param {RollupConsiderationType} consideration\n   */\n  set consideration(consideration: RollupConsiderationType) {\n    this._consideration = consideration;\n  }\n\n  /**\n   * Getter for minimumCount\n   * @return {number}\n   */\n  get minimumCount(): number {\n    return this._minimumCount;\n  }\n\n  /**\n   * Setter for minimumCount\n   * @param {number} minimumCount\n   */\n  set minimumCount(minimumCount: number) {\n    if (minimumCount >= 0) {\n      this._minimumCount = minimumCount;\n    }\n  }\n\n  /**\n   * Getter for minimumPercent\n   * @return {number}\n   */\n  get minimumPercent(): number {\n    return this._minimumPercent;\n  }\n\n  /**\n   * Setter for minimumPercent\n   * @param {number} minimumPercent\n   */\n  set minimumPercent(minimumPercent: number) {\n    if (minimumPercent >= 0 && minimumPercent <= 100) {\n      this._minimumPercent = minimumPercent;\n    }\n  }\n\n  /**\n   * Evaluate the rule for a set of child activities\n   * @param {Activity[]} children - The child activities to evaluate the rule for\n   * @return {boolean} - True if the rule conditions are met, false otherwise\n   */\n  evaluate(children: Activity[]): boolean {\n    if (children.length === 0) {\n      return false;\n    }\n\n    // Filter children that meet all conditions\n    const matchingChildren = children.filter((child) => {\n      return this._conditions.every((condition) => condition.evaluate(child));\n    });\n\n    // Apply consideration\n    switch (this._consideration) {\n      case RollupConsiderationType.ALL:\n        return matchingChildren.length === children.length;\n      case RollupConsiderationType.ANY:\n        return matchingChildren.length > 0;\n      case RollupConsiderationType.NONE:\n        return matchingChildren.length === 0;\n      case RollupConsiderationType.AT_LEAST_COUNT:\n        return matchingChildren.length >= this._minimumCount;\n      case RollupConsiderationType.AT_LEAST_PERCENT: {\n        const percent = (matchingChildren.length / children.length) * 100;\n        return percent >= this._minimumPercent;\n      }\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RollupRule\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      conditions: this._conditions,\n      action: this._action,\n      consideration: this._consideration,\n      minimumCount: this._minimumCount,\n      minimumPercent: this._minimumPercent,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a collection of rollup rules\n */\nexport class RollupRules extends BaseCMI {\n  private _rules: RollupRule[] = [];\n\n  /**\n   * Constructor for RollupRules\n   */\n  constructor() {\n    super(\"rollupRules\");\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._rules = [];\n  }\n\n  /**\n   * Getter for rules\n   * @return {RollupRule[]}\n   */\n  get rules(): RollupRule[] {\n    return this._rules;\n  }\n\n  /**\n   * Add a rule\n   * @param {RollupRule} rule - The rule to add\n   */\n  addRule(rule: RollupRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof RollupRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".rules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._rules.push(rule);\n  }\n\n  /**\n   * Remove a rule\n   * @param {RollupRule} rule - The rule to remove\n   * @return {boolean} - True if the rule was removed, false otherwise\n   */\n  removeRule(rule: RollupRule): boolean {\n    const index = this._rules.indexOf(rule);\n    if (index !== -1) {\n      this._rules.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Process rollup for an activity\n   * @param {Activity} activity - The activity to process rollup for\n   */\n  processRollup(activity: Activity): void {\n    if (!activity || activity.children.length === 0) {\n      return;\n    }\n\n    const children = activity.getAvailableChildren();\n    let completionRollup = false;\n    let successRollup = false;\n\n    // First, check if we should use measure rollup (RB.1.2.a)\n    if (activity.sequencingControls.rollupObjectiveSatisfied) {\n      const measureRollupResult = this._objectiveRollupUsingMeasure(activity, children);\n      if (measureRollupResult !== null) {\n        successRollup = true;\n        // Skip rule-based rollup if measure rollup was successful\n      }\n    }\n\n    // Process each rule (RB.1.2.b)\n    if (!successRollup) {\n      for (const rule of this._rules) {\n        if (rule.evaluate(children)) {\n          switch (rule.action) {\n            case RollupActionType.SATISFIED:\n              activity.successStatus = SuccessStatus.PASSED;\n              successRollup = true;\n              break;\n            case RollupActionType.NOT_SATISFIED:\n              activity.successStatus = SuccessStatus.FAILED;\n              successRollup = true;\n              break;\n            case RollupActionType.COMPLETED:\n              activity.completionStatus = CompletionStatus.COMPLETED;\n              activity.isCompleted = true;\n              completionRollup = true;\n              break;\n            case RollupActionType.INCOMPLETE:\n              activity.completionStatus = CompletionStatus.INCOMPLETE;\n              activity.isCompleted = false;\n              completionRollup = true;\n              break;\n          }\n        }\n      }\n    }\n\n    // If no rules applied for completion, use default rollup\n    if (!completionRollup) {\n      this._defaultCompletionRollup(activity, children);\n    }\n\n    // If no rules applied for success, use default rollup (RB.1.2.c)\n    if (!successRollup) {\n      this._defaultSuccessRollup(activity, children);\n    }\n  }\n\n  /**\n   * Default completion rollup\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @private\n   */\n  private _defaultCompletionRollup(activity: Activity, children: Activity[]): void {\n    // If all children are completed, mark the parent as completed\n    const allCompleted = children.every((child) => child.isCompleted);\n    if (allCompleted) {\n      activity.completionStatus = CompletionStatus.COMPLETED;\n      activity.isCompleted = true;\n    } else {\n      // If any child is incomplete, mark the parent as incomplete\n      const anyIncomplete = children.some(\n        (child) => child.completionStatus === CompletionStatus.INCOMPLETE,\n      );\n      if (anyIncomplete) {\n        activity.completionStatus = CompletionStatus.INCOMPLETE;\n        activity.isCompleted = false;\n      }\n    }\n  }\n\n  /**\n   * Objective Rollup Using Measure Process (RB.1.2.a)\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @return {boolean | null} - True if satisfied, false if not satisfied, null if measure rollup not applicable\n   * @private\n   */\n  private _objectiveRollupUsingMeasure(activity: Activity, children: Activity[]): boolean | null {\n    // Check if objective measure weight is properly configured\n    const objectiveMeasureWeight = activity.sequencingControls.objectiveMeasureWeight;\n    if (objectiveMeasureWeight <= 0) {\n      return null; // Measure rollup not applicable\n    }\n\n    // Calculate weighted average of child objective measures\n    let totalWeight = 0;\n    let weightedSum = 0;\n    let hasValidMeasures = false;\n\n    for (const child of children) {\n      // Only include children that should contribute to rollup\n      if (!child.sequencingControls.rollupObjectiveSatisfied) {\n        continue;\n      }\n\n      // Check if child has a valid objective measure\n      if (child.objectiveMeasureStatus && child.objectiveMeasureStatus === true) {\n        const childWeight = child.sequencingControls.objectiveMeasureWeight;\n        if (childWeight > 0) {\n          weightedSum += child.objectiveNormalizedMeasure * childWeight;\n          totalWeight += childWeight;\n          hasValidMeasures = true;\n        }\n      }\n    }\n\n    // If no valid measures found, measure rollup is not applicable\n    if (!hasValidMeasures || totalWeight === 0) {\n      return null;\n    }\n\n    // Calculate the normalized measure for the parent activity\n    const normalizedMeasure = weightedSum / totalWeight;\n    activity.objectiveNormalizedMeasure = normalizedMeasure;\n    activity.objectiveMeasureStatus = true;\n\n    // Determine satisfaction based on scaled passing score\n    if (normalizedMeasure >= activity.scaledPassingScore) {\n      activity.successStatus = SuccessStatus.PASSED;\n      activity.objectiveSatisfiedStatus = true;\n      return true;\n    } else {\n      activity.successStatus = SuccessStatus.FAILED;\n      activity.objectiveSatisfiedStatus = false;\n      return false;\n    }\n  }\n\n  /**\n   * Default success rollup\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @private\n   */\n  private _defaultSuccessRollup(activity: Activity, children: Activity[]): void {\n    // If all children are satisfied, mark the parent as satisfied\n    const allSatisfied = children.every((child) => child.successStatus === SuccessStatus.PASSED);\n    if (allSatisfied) {\n      activity.successStatus = SuccessStatus.PASSED;\n    } else {\n      // If any child is not satisfied, mark the parent as not satisfied\n      const anyNotSatisfied = children.some(\n        (child) => child.successStatus === SuccessStatus.FAILED,\n      );\n      if (anyNotSatisfied) {\n        activity.successStatus = SuccessStatus.FAILED;\n      }\n    }\n  }\n\n  /**\n   * toJSON for RollupRules\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      rules: this._rules,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","const ValidLanguages: string[] = [\n  \"aa\",\n  \"ab\",\n  \"ae\",\n  \"af\",\n  \"ak\",\n  \"am\",\n  \"an\",\n  \"ar\",\n  \"as\",\n  \"av\",\n  \"ay\",\n  \"az\",\n  \"ba\",\n  \"be\",\n  \"bg\",\n  \"bh\",\n  \"bi\",\n  \"bm\",\n  \"bn\",\n  \"bo\",\n  \"br\",\n  \"bs\",\n  \"ca\",\n  \"ce\",\n  \"ch\",\n  \"co\",\n  \"cr\",\n  \"cs\",\n  \"cu\",\n  \"cv\",\n  \"cy\",\n  \"da\",\n  \"de\",\n  \"dv\",\n  \"dz\",\n  \"ee\",\n  \"el\",\n  \"en\",\n  \"eo\",\n  \"es\",\n  \"et\",\n  \"eu\",\n  \"fa\",\n  \"ff\",\n  \"fi\",\n  \"fj\",\n  \"fo\",\n  \"fr\",\n  \"fy\",\n  \"ga\",\n  \"gd\",\n  \"gl\",\n  \"gn\",\n  \"gu\",\n  \"gv\",\n  \"ha\",\n  \"he\",\n  \"hi\",\n  \"ho\",\n  \"hr\",\n  \"ht\",\n  \"hu\",\n  \"hy\",\n  \"hz\",\n  \"ia\",\n  \"id\",\n  \"ie\",\n  \"ig\",\n  \"ii\",\n  \"ik\",\n  \"io\",\n  \"is\",\n  \"it\",\n  \"iu\",\n  \"ja\",\n  \"jv\",\n  \"ka\",\n  \"kg\",\n  \"ki\",\n  \"kj\",\n  \"kk\",\n  \"kl\",\n  \"km\",\n  \"kn\",\n  \"ko\",\n  \"kr\",\n  \"ks\",\n  \"ku\",\n  \"kv\",\n  \"kw\",\n  \"ky\",\n  \"la\",\n  \"lb\",\n  \"lg\",\n  \"li\",\n  \"ln\",\n  \"lo\",\n  \"lt\",\n  \"lu\",\n  \"lv\",\n  \"mg\",\n  \"mh\",\n  \"mi\",\n  \"mk\",\n  \"ml\",\n  \"mn\",\n  \"mo\",\n  \"mr\",\n  \"ms\",\n  \"mt\",\n  \"my\",\n  \"na\",\n  \"nb\",\n  \"nd\",\n  \"ne\",\n  \"ng\",\n  \"nl\",\n  \"nn\",\n  \"no\",\n  \"nr\",\n  \"nv\",\n  \"ny\",\n  \"oc\",\n  \"oj\",\n  \"om\",\n  \"or\",\n  \"os\",\n  \"pa\",\n  \"pi\",\n  \"pl\",\n  \"ps\",\n  \"pt\",\n  \"qu\",\n  \"rm\",\n  \"rn\",\n  \"ro\",\n  \"ru\",\n  \"rw\",\n  \"sa\",\n  \"sc\",\n  \"sd\",\n  \"se\",\n  \"sg\",\n  \"sh\",\n  \"si\",\n  \"sk\",\n  \"sl\",\n  \"sm\",\n  \"sn\",\n  \"so\",\n  \"sq\",\n  \"sr\",\n  \"ss\",\n  \"st\",\n  \"su\",\n  \"sv\",\n  \"sw\",\n  \"ta\",\n  \"te\",\n  \"tg\",\n  \"th\",\n  \"ti\",\n  \"tk\",\n  \"tl\",\n  \"tn\",\n  \"to\",\n  \"tr\",\n  \"ts\",\n  \"tt\",\n  \"tw\",\n  \"ty\",\n  \"ug\",\n  \"uk\",\n  \"ur\",\n  \"uz\",\n  \"ve\",\n  \"vi\",\n  \"vo\",\n  \"wa\",\n  \"wo\",\n  \"xh\",\n  \"yi\",\n  \"yo\",\n  \"za\",\n  \"zh\",\n  \"zu\",\n  \"aar\",\n  \"abk\",\n  \"ave\",\n  \"afr\",\n  \"aka\",\n  \"amh\",\n  \"arg\",\n  \"ara\",\n  \"asm\",\n  \"ava\",\n  \"aym\",\n  \"aze\",\n  \"bak\",\n  \"bel\",\n  \"bul\",\n  \"bih\",\n  \"bis\",\n  \"bam\",\n  \"ben\",\n  \"tib\",\n  \"bod\",\n  \"bre\",\n  \"bos\",\n  \"cat\",\n  \"che\",\n  \"cha\",\n  \"cos\",\n  \"cre\",\n  \"cze\",\n  \"ces\",\n  \"chu\",\n  \"chv\",\n  \"wel\",\n  \"cym\",\n  \"dan\",\n  \"ger\",\n  \"deu\",\n  \"div\",\n  \"dzo\",\n  \"ewe\",\n  \"gre\",\n  \"ell\",\n  \"eng\",\n  \"epo\",\n  \"spa\",\n  \"est\",\n  \"baq\",\n  \"eus\",\n  \"per\",\n  \"fas\",\n  \"ful\",\n  \"fin\",\n  \"fij\",\n  \"fao\",\n  \"fre\",\n  \"fra\",\n  \"fry\",\n  \"gle\",\n  \"gla\",\n  \"glg\",\n  \"grn\",\n  \"guj\",\n  \"glv\",\n  \"hau\",\n  \"heb\",\n  \"hin\",\n  \"hmo\",\n  \"hrv\",\n  \"hat\",\n  \"hun\",\n  \"arm\",\n  \"hye\",\n  \"her\",\n  \"ina\",\n  \"ind\",\n  \"ile\",\n  \"ibo\",\n  \"iii\",\n  \"ipk\",\n  \"ido\",\n  \"ice\",\n  \"isl\",\n  \"ita\",\n  \"iku\",\n  \"jpn\",\n  \"jav\",\n  \"geo\",\n  \"kat\",\n  \"kon\",\n  \"kik\",\n  \"kua\",\n  \"kaz\",\n  \"kal\",\n  \"khm\",\n  \"kan\",\n  \"kor\",\n  \"kau\",\n  \"kas\",\n  \"kur\",\n  \"kom\",\n  \"cor\",\n  \"kir\",\n  \"lat\",\n  \"ltz\",\n  \"lug\",\n  \"lim\",\n  \"lin\",\n  \"lao\",\n  \"lit\",\n  \"lub\",\n  \"lav\",\n  \"mlg\",\n  \"mah\",\n  \"mao\",\n  \"mri\",\n  \"mac\",\n  \"mkd\",\n  \"mal\",\n  \"mon\",\n  \"mol\",\n  \"mar\",\n  \"may\",\n  \"msa\",\n  \"mlt\",\n  \"bur\",\n  \"mya\",\n  \"nau\",\n  \"nob\",\n  \"nde\",\n  \"nep\",\n  \"ndo\",\n  \"dut\",\n  \"nld\",\n  \"nno\",\n  \"nor\",\n  \"nbl\",\n  \"nav\",\n  \"nya\",\n  \"oci\",\n  \"oji\",\n  \"orm\",\n  \"ori\",\n  \"oss\",\n  \"pan\",\n  \"pli\",\n  \"pol\",\n  \"pus\",\n  \"por\",\n  \"que\",\n  \"roh\",\n  \"run\",\n  \"rum\",\n  \"ron\",\n  \"rus\",\n  \"kin\",\n  \"san\",\n  \"srd\",\n  \"snd\",\n  \"sme\",\n  \"sag\",\n  \"slo\",\n  \"sin\",\n  \"slk\",\n  \"slv\",\n  \"smo\",\n  \"sna\",\n  \"som\",\n  \"alb\",\n  \"sqi\",\n  \"srp\",\n  \"ssw\",\n  \"sot\",\n  \"sun\",\n  \"swe\",\n  \"swa\",\n  \"tam\",\n  \"tel\",\n  \"tgk\",\n  \"tha\",\n  \"tir\",\n  \"tuk\",\n  \"tgl\",\n  \"tsn\",\n  \"ton\",\n  \"tur\",\n  \"tso\",\n  \"tat\",\n  \"twi\",\n  \"tah\",\n  \"uig\",\n  \"ukr\",\n  \"urd\",\n  \"uzb\",\n  \"ven\",\n  \"vie\",\n  \"vol\",\n  \"wln\",\n  \"wol\",\n  \"xho\",\n  \"yid\",\n  \"yor\",\n  \"zha\",\n  \"chi\",\n  \"zho\",\n  \"zul\",\n];\nexport default ValidLanguages;\n","import { BaseCMI } from \"../../common/base_cmi\";\n\n/**\n * Enum for selection timing\n */\nexport enum SelectionTiming {\n  NEVER = \"never\",\n  ONCE = \"once\",\n  ON_EACH_NEW_ATTEMPT = \"onEachNewAttempt\",\n}\n\n/**\n * Enum for randomization timing\n */\nexport enum RandomizationTiming {\n  NEVER = \"never\",\n  ONCE = \"once\",\n  ON_EACH_NEW_ATTEMPT = \"onEachNewAttempt\",\n}\n\n/**\n * Class representing SCORM 2004 sequencing controls\n */\nexport class SequencingControls extends BaseCMI {\n  // Sequencing Control Modes\n  private _enabled: boolean = true;\n  private _choice: boolean = true;\n  private _choiceExit: boolean = true;\n  private _flow: boolean = false;\n  private _forwardOnly: boolean = false;\n  private _useCurrentAttemptObjectiveInfo: boolean = true;\n  private _useCurrentAttemptProgressInfo: boolean = true;\n\n  // Constrain Choice Controls\n  private _preventActivation: boolean = false;\n  private _constrainChoice: boolean = false;\n  // Rule-driven traversal limiter (e.g., post-condition stopForwardTraversal)\n  private _stopForwardTraversal: boolean = false;\n\n  // Rollup Controls\n  private _rollupObjectiveSatisfied: boolean = true;\n  private _rollupProgressCompletion: boolean = true;\n  private _objectiveMeasureWeight: number = 1.0;\n\n  // Selection Controls\n  private _selectionTiming: SelectionTiming = SelectionTiming.NEVER;\n  private _selectCount: number | null = null;\n  private _selectionCountStatus: boolean = false;\n  private _randomizeChildren: boolean = false;\n\n  // Randomization Controls\n  private _randomizationTiming: RandomizationTiming = RandomizationTiming.NEVER;\n  private _reorderChildren: boolean = false;\n\n  /**\n   * Constructor for SequencingControls\n   */\n  constructor() {\n    super(\"sequencingControls\");\n  }\n\n  /**\n   * Reset the sequencing controls to their default values\n   */\n  reset() {\n    this._initialized = false;\n    this._enabled = true;\n    this._choice = true;\n    this._choiceExit = true;\n    this._flow = false;\n    this._forwardOnly = false;\n    this._useCurrentAttemptObjectiveInfo = true;\n    this._useCurrentAttemptProgressInfo = true;\n    this._preventActivation = false;\n    this._constrainChoice = false;\n    this._stopForwardTraversal = false;\n    this._rollupObjectiveSatisfied = true;\n    this._rollupProgressCompletion = true;\n    this._objectiveMeasureWeight = 1.0;\n    this._selectionTiming = SelectionTiming.NEVER;\n    this._selectCount = null;\n    this._selectionCountStatus = false;\n    this._randomizeChildren = false;\n    this._randomizationTiming = RandomizationTiming.NEVER;\n    this._reorderChildren = false;\n  }\n\n  /**\n   * Getter for enabled\n   * @return {boolean}\n   */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  /**\n   * Setter for enabled\n   * @param {boolean} enabled\n   */\n  set enabled(enabled: boolean) {\n    this._enabled = enabled;\n  }\n\n  /**\n   * Getter for choice\n   * @return {boolean}\n   */\n  get choice(): boolean {\n    return this._choice;\n  }\n\n  /**\n   * Setter for choice\n   * @param {boolean} choice\n   */\n  set choice(choice: boolean) {\n    this._choice = choice;\n  }\n\n  /**\n   * Getter for choiceExit\n   * @return {boolean}\n   */\n  get choiceExit(): boolean {\n    return this._choiceExit;\n  }\n\n  /**\n   * Setter for choiceExit\n   * @param {boolean} choiceExit\n   */\n  set choiceExit(choiceExit: boolean) {\n    this._choiceExit = choiceExit;\n  }\n\n  /**\n   * Getter for flow\n   * @return {boolean}\n   */\n  get flow(): boolean {\n    return this._flow;\n  }\n\n  /**\n   * Setter for flow\n   * @param {boolean} flow\n   */\n  set flow(flow: boolean) {\n    this._flow = flow;\n  }\n\n  /**\n   * Getter for forwardOnly\n   * @return {boolean}\n   */\n  get forwardOnly(): boolean {\n    return this._forwardOnly;\n  }\n\n  /**\n   * Setter for forwardOnly\n   * @param {boolean} forwardOnly\n   */\n  set forwardOnly(forwardOnly: boolean) {\n    this._forwardOnly = forwardOnly;\n  }\n\n  /**\n   * Getter for useCurrentAttemptObjectiveInfo\n   * @return {boolean}\n   */\n  get useCurrentAttemptObjectiveInfo(): boolean {\n    return this._useCurrentAttemptObjectiveInfo;\n  }\n\n  /**\n   * Setter for useCurrentAttemptObjectiveInfo\n   * @param {boolean} useCurrentAttemptObjectiveInfo\n   */\n  set useCurrentAttemptObjectiveInfo(useCurrentAttemptObjectiveInfo: boolean) {\n    this._useCurrentAttemptObjectiveInfo = useCurrentAttemptObjectiveInfo;\n  }\n\n  /**\n   * Getter for useCurrentAttemptProgressInfo\n   * @return {boolean}\n   */\n  get useCurrentAttemptProgressInfo(): boolean {\n    return this._useCurrentAttemptProgressInfo;\n  }\n\n  /**\n   * Setter for useCurrentAttemptProgressInfo\n   * @param {boolean} useCurrentAttemptProgressInfo\n   */\n  set useCurrentAttemptProgressInfo(useCurrentAttemptProgressInfo: boolean) {\n    this._useCurrentAttemptProgressInfo = useCurrentAttemptProgressInfo;\n  }\n\n  /**\n   * Getter for preventActivation\n   * @return {boolean}\n   */\n  get preventActivation(): boolean {\n    return this._preventActivation;\n  }\n\n  /**\n   * Setter for preventActivation\n   * @param {boolean} preventActivation\n   */\n  set preventActivation(preventActivation: boolean) {\n    this._preventActivation = preventActivation;\n  }\n\n  /**\n   * Getter for constrainChoice\n   * @return {boolean}\n   */\n  get constrainChoice(): boolean {\n    return this._constrainChoice;\n  }\n\n  /**\n   * Setter for constrainChoice\n   * @param {boolean} constrainChoice\n   */\n  set constrainChoice(constrainChoice: boolean) {\n    this._constrainChoice = constrainChoice;\n  }\n\n  /**\n   * Getter for stopForwardTraversal\n   * @return {boolean}\n   */\n  get stopForwardTraversal(): boolean {\n    return this._stopForwardTraversal;\n  }\n\n  /**\n   * Setter for stopForwardTraversal\n   * @param {boolean} stopForwardTraversal\n   */\n  set stopForwardTraversal(stopForwardTraversal: boolean) {\n    this._stopForwardTraversal = stopForwardTraversal;\n  }\n\n  /**\n   * Getter for rollupObjectiveSatisfied\n   * @return {boolean}\n   */\n  get rollupObjectiveSatisfied(): boolean {\n    return this._rollupObjectiveSatisfied;\n  }\n\n  /**\n   * Setter for rollupObjectiveSatisfied\n   * @param {boolean} rollupObjectiveSatisfied\n   */\n  set rollupObjectiveSatisfied(rollupObjectiveSatisfied: boolean) {\n    this._rollupObjectiveSatisfied = rollupObjectiveSatisfied;\n  }\n\n  /**\n   * Getter for rollupProgressCompletion\n   * @return {boolean}\n   */\n  get rollupProgressCompletion(): boolean {\n    return this._rollupProgressCompletion;\n  }\n\n  /**\n   * Setter for rollupProgressCompletion\n   * @param {boolean} rollupProgressCompletion\n   */\n  set rollupProgressCompletion(rollupProgressCompletion: boolean) {\n    this._rollupProgressCompletion = rollupProgressCompletion;\n  }\n\n  /**\n   * Getter for objectiveMeasureWeight\n   * @return {number}\n   */\n  get objectiveMeasureWeight(): number {\n    return this._objectiveMeasureWeight;\n  }\n\n  /**\n   * Setter for objectiveMeasureWeight\n   * @param {number} objectiveMeasureWeight\n   */\n  set objectiveMeasureWeight(objectiveMeasureWeight: number) {\n    // According to SCORM 2004, weight must be >= 0 but there's no upper limit\n    if (objectiveMeasureWeight >= 0) {\n      this._objectiveMeasureWeight = objectiveMeasureWeight;\n    }\n  }\n\n  /**\n   * Check if choice navigation is allowed\n   * @return {boolean} - True if choice navigation is allowed, false otherwise\n   */\n  isChoiceNavigationAllowed(): boolean {\n    return this._enabled && !this._constrainChoice;\n  }\n\n  /**\n   * Check if flow navigation is allowed\n   * @return {boolean} - True if flow navigation is allowed, false otherwise\n   */\n  isFlowNavigationAllowed(): boolean {\n    return this._enabled && this._flow;\n  }\n\n  /**\n   * Check if forward navigation is allowed\n   * @return {boolean} - True if forward navigation is allowed, false otherwise\n   */\n  isForwardNavigationAllowed(): boolean {\n    // Forward navigation (Continue request) is only valid when flow mode is\n    // enabled. The forwardOnly flag simply restricts backward navigation and\n    // does not affect the ability to move forward when flow is disabled.\n    return this._enabled && this._flow;\n  }\n\n  /**\n   * Check if backward navigation is allowed\n   * @return {boolean} - True if backward navigation is allowed, false otherwise\n   */\n  isBackwardNavigationAllowed(): boolean {\n    // Previous navigation is also part of flow based navigation and should only\n    // be permitted when flow mode is enabled and forwardOnly does not restrict\n    // going backwards.\n    return this._enabled && this._flow && !this._forwardOnly;\n  }\n\n  /**\n   * Getter for selectionTiming\n   * @return {SelectionTiming}\n   */\n  get selectionTiming(): SelectionTiming {\n    return this._selectionTiming;\n  }\n\n  /**\n   * Setter for selectionTiming\n   * @param {SelectionTiming} selectionTiming\n   */\n  set selectionTiming(selectionTiming: SelectionTiming) {\n    this._selectionTiming = selectionTiming;\n  }\n\n  /**\n   * Getter for selectCount\n   * @return {number | null}\n   */\n  get selectCount(): number | null {\n    return this._selectCount;\n  }\n\n  /**\n   * Setter for selectCount\n   * @param {number | null} selectCount\n   */\n  set selectCount(selectCount: number | null) {\n    if (selectCount === null || selectCount > 0) {\n      this._selectCount = selectCount;\n    }\n  }\n\n  /**\n   * Getter for selectionCountStatus\n   * @return {boolean}\n   */\n  get selectionCountStatus(): boolean {\n    return this._selectionCountStatus;\n  }\n\n  /**\n   * Setter for selectionCountStatus\n   * @param {boolean} selectionCountStatus\n   */\n  set selectionCountStatus(selectionCountStatus: boolean) {\n    this._selectionCountStatus = selectionCountStatus;\n  }\n\n  /**\n   * Getter for randomizeChildren\n   * @return {boolean}\n   */\n  get randomizeChildren(): boolean {\n    return this._randomizeChildren;\n  }\n\n  /**\n   * Setter for randomizeChildren\n   * @param {boolean} randomizeChildren\n   */\n  set randomizeChildren(randomizeChildren: boolean) {\n    this._randomizeChildren = randomizeChildren;\n  }\n\n  /**\n   * Getter for randomizationTiming\n   * @return {RandomizationTiming}\n   */\n  get randomizationTiming(): RandomizationTiming {\n    return this._randomizationTiming;\n  }\n\n  /**\n   * Setter for randomizationTiming\n   * @param {RandomizationTiming} randomizationTiming\n   */\n  set randomizationTiming(randomizationTiming: RandomizationTiming) {\n    this._randomizationTiming = randomizationTiming;\n  }\n\n  /**\n   * Getter for reorderChildren\n   * @return {boolean}\n   */\n  get reorderChildren(): boolean {\n    return this._reorderChildren;\n  }\n\n  /**\n   * Setter for reorderChildren\n   * @param {boolean} reorderChildren\n   */\n  set reorderChildren(reorderChildren: boolean) {\n    this._reorderChildren = reorderChildren;\n  }\n\n  /**\n   * toJSON for SequencingControls\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      enabled: this._enabled,\n      choice: this._choice,\n      choiceExit: this._choiceExit,\n      flow: this._flow,\n      forwardOnly: this._forwardOnly,\n      useCurrentAttemptObjectiveInfo: this._useCurrentAttemptObjectiveInfo,\n      useCurrentAttemptProgressInfo: this._useCurrentAttemptProgressInfo,\n      preventActivation: this._preventActivation,\n      constrainChoice: this._constrainChoice,\n      stopForwardTraversal: this._stopForwardTraversal,\n      rollupObjectiveSatisfied: this._rollupObjectiveSatisfied,\n      rollupProgressCompletion: this._rollupProgressCompletion,\n      objectiveMeasureWeight: this._objectiveMeasureWeight,\n      selectionTiming: this._selectionTiming,\n      selectCount: this._selectCount,\n      selectionCountStatus: this._selectionCountStatus,\n      randomizeChildren: this._randomizeChildren,\n      randomizationTiming: this._randomizationTiming,\n      reorderChildren: this._reorderChildren,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { scorm2004_regex } from \"../../../constants/regex\";\nimport { check2004ValidFormat } from \"../validation\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { CompletionStatus, SuccessStatus } from \"../../../constants/enums\";\nimport { SequencingControls } from \"./sequencing_controls\";\nimport { SequencingRules } from \"./sequencing_rules\";\nimport { RollupRules } from \"./rollup_rules\";\nimport { validateISO8601Duration } from \"../../../utilities\";\n\n/**\n * Class representing a single activity in the SCORM 2004 activity tree\n */\nexport class Activity extends BaseCMI {\n  private _id: string = \"\";\n  private _title: string = \"\";\n  private _children: Activity[] = [];\n  private _parent: Activity | null = null;\n  private _isVisible: boolean = true;\n  private _isActive: boolean = false;\n  private _isSuspended: boolean = false;\n  private _isCompleted: boolean = false;\n  private _completionStatus: CompletionStatus = CompletionStatus.UNKNOWN;\n  private _successStatus: SuccessStatus = SuccessStatus.UNKNOWN;\n  private _attemptCount: number = 0;\n  private _attemptCompletionAmount: number = 0;\n  private _attemptAbsoluteDuration: string = \"PT0H0M0S\";\n  private _attemptExperiencedDuration: string = \"PT0H0M0S\";\n  private _activityAbsoluteDuration: string = \"PT0H0M0S\";\n  private _activityExperiencedDuration: string = \"PT0H0M0S\";\n  private _objectiveSatisfiedStatus: boolean = false;\n  private _objectiveMeasureStatus: boolean = false;\n  private _objectiveNormalizedMeasure: number = 0;\n  private _scaledPassingScore: number = 0.7; // Default passing score\n  private _progressMeasure: number = 0;\n  private _progressMeasureStatus: boolean = false;\n  private _location: string = \"\";\n  private _attemptAbsoluteStartTime: string = \"\";\n  private _learnerPrefs: any = null;\n  private _activityAttemptActive: boolean = false;\n  private _isHiddenFromChoice: boolean = false;\n  private _isAvailable: boolean = true;\n  private _attemptLimit: number | null = null;\n  private _attemptAbsoluteDurationLimit: string | null = null;\n  private _activityAbsoluteDurationLimit: string | null = null;\n  private _timeLimitAction: string | null = null;\n  private _timeLimitDuration: string | null = null;\n  private _beginTimeLimit: string | null = null;\n  private _endTimeLimit: string | null = null;\n  private _sequencingControls: SequencingControls;\n  private _sequencingRules: SequencingRules;\n  private _rollupRules: RollupRules;\n  private _processedChildren: Activity[] | null = null;\n  private _isNewAttempt: boolean = false;\n\n  /**\n   * Constructor for Activity\n   * @param {string} id - The unique identifier for this activity\n   * @param {string} title - The title of this activity\n   */\n  constructor(id: string = \"\", title: string = \"\") {\n    super(\"activity\");\n    this._id = id;\n    this._title = title;\n    this._sequencingControls = new SequencingControls();\n    this._sequencingRules = new SequencingRules();\n    this._rollupRules = new RollupRules();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    // Initialize children\n    for (const child of this._children) {\n      child.initialize();\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._isActive = false;\n    this._isSuspended = false;\n    this._isCompleted = false;\n    this._completionStatus = CompletionStatus.UNKNOWN;\n    this._successStatus = SuccessStatus.UNKNOWN;\n    this._attemptCount = 0;\n    this._attemptCompletionAmount = 0;\n    this._attemptAbsoluteDuration = \"PT0H0M0S\";\n    this._attemptExperiencedDuration = \"PT0H0M0S\";\n    this._activityAbsoluteDuration = \"PT0H0M0S\";\n    this._activityExperiencedDuration = \"PT0H0M0S\";\n    this._objectiveSatisfiedStatus = false;\n    this._objectiveMeasureStatus = false;\n    this._objectiveNormalizedMeasure = 0;\n    this._progressMeasure = 0;\n    this._progressMeasureStatus = false;\n    this._location = \"\";\n    this._attemptAbsoluteStartTime = \"\";\n    this._learnerPrefs = null;\n    this._activityAttemptActive = false;\n\n    // Reset children\n    for (const child of this._children) {\n      child.reset();\n    }\n  }\n\n  /**\n   * Getter for id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for title\n   * @return {string}\n   */\n  get title(): string {\n    return this._title;\n  }\n\n  /**\n   * Setter for title\n   * @param {string} title\n   */\n  set title(title: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".title\", title, scorm2004_regex.CMILangString250)\n    ) {\n      this._title = title;\n    }\n  }\n\n  /**\n   * Getter for children\n   * @return {Activity[]}\n   */\n  get children(): Activity[] {\n    return this._children;\n  }\n\n  /**\n   * Add a child activity to this activity\n   * @param {Activity} child - The child activity to add\n   */\n  addChild(child: Activity): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(child instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".children\",\n        scorm2004_errors.TYPE_MISMATCH as number\n      );\n    }\n    child._parent = this;\n    this._children.push(child);\n  }\n\n  /**\n   * Remove a child activity from this activity\n   * @param {Activity} child - The child activity to remove\n   * @return {boolean} - True if the child was removed, false otherwise\n   */\n  removeChild(child: Activity): boolean {\n    const index = this._children.indexOf(child);\n    if (index !== -1) {\n      this._children.splice(index, 1);\n      child._parent = null;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for parent\n   * @return {Activity | null}\n   */\n  get parent(): Activity | null {\n    return this._parent;\n  }\n\n  /**\n   * Getter for isVisible\n   * @return {boolean}\n   */\n  get isVisible(): boolean {\n    return this._isVisible;\n  }\n\n  /**\n   * Setter for isVisible\n   * @param {boolean} isVisible\n   */\n  set isVisible(isVisible: boolean) {\n    this._isVisible = isVisible;\n  }\n\n  /**\n   * Getter for isActive\n   * @return {boolean}\n   */\n  get isActive(): boolean {\n    return this._isActive;\n  }\n\n  /**\n   * Setter for isActive\n   * @param {boolean} isActive\n   */\n  set isActive(isActive: boolean) {\n    this._isActive = isActive;\n  }\n\n  /**\n   * Getter for isSuspended\n   * @return {boolean}\n   */\n  get isSuspended(): boolean {\n    return this._isSuspended;\n  }\n\n  /**\n   * Setter for isSuspended\n   * @param {boolean} isSuspended\n   */\n  set isSuspended(isSuspended: boolean) {\n    this._isSuspended = isSuspended;\n  }\n\n  /**\n   * Getter for isCompleted\n   * @return {boolean}\n   */\n  get isCompleted(): boolean {\n    return this._isCompleted;\n  }\n\n  /**\n   * Setter for isCompleted\n   * @param {boolean} isCompleted\n   */\n  set isCompleted(isCompleted: boolean) {\n    this._isCompleted = isCompleted;\n    // Update completion status based on boolean value\n    if (isCompleted) {\n      this._completionStatus = CompletionStatus.COMPLETED;\n    } else {\n      this._completionStatus = CompletionStatus.INCOMPLETE;\n    }\n  }\n\n  /**\n   * Getter for completionStatus\n   * @return {CompletionStatus}\n   */\n  get completionStatus(): CompletionStatus {\n    return this._completionStatus;\n  }\n\n  /**\n   * Setter for completionStatus\n   * @param {CompletionStatus} completionStatus\n   */\n  set completionStatus(completionStatus: CompletionStatus) {\n    this._completionStatus = completionStatus;\n    this._isCompleted = completionStatus === CompletionStatus.COMPLETED;\n  }\n\n  /**\n   * Getter for successStatus\n   * @return {SuccessStatus}\n   */\n  get successStatus(): SuccessStatus {\n    return this._successStatus;\n  }\n\n  /**\n   * Setter for successStatus\n   * @param {SuccessStatus} successStatus\n   */\n  set successStatus(successStatus: SuccessStatus) {\n    this._successStatus = successStatus;\n  }\n\n  /**\n   * Getter for attemptCount\n   * @return {number}\n   */\n  get attemptCount(): number {\n    return this._attemptCount;\n  }\n\n  /**\n   * Setter for attemptCount\n   * @param {number} value\n   */\n  set attemptCount(value: number) {\n    this._attemptCount = value;\n  }\n\n  /**\n   * Getter for attemptCompletionAmount\n   * @return {number}\n   */\n  get attemptCompletionAmount(): number {\n    return this._attemptCompletionAmount;\n  }\n\n  /**\n   * Setter for attemptCompletionAmount\n   * @param {number} value\n   */\n  set attemptCompletionAmount(value: number) {\n    this._attemptCompletionAmount = value;\n  }\n\n  /**\n   * Increment the attempt count\n   */\n  incrementAttemptCount(): void {\n    this._attemptCount++;\n    this._isNewAttempt = true;\n    // Reset processed children on new attempt if needed\n    const controls = this._sequencingControls;\n    if (\n      controls.selectionTiming === \"onEachNewAttempt\" ||\n      controls.randomizationTiming === \"onEachNewAttempt\"\n    ) {\n      this._processedChildren = null;\n    }\n  }\n\n  /**\n   * Getter for objectiveSatisfiedStatus\n   * @return {boolean}\n   */\n  get objectiveSatisfiedStatus(): boolean {\n    return this._objectiveSatisfiedStatus;\n  }\n\n  /**\n   * Setter for objectiveSatisfiedStatus\n   * @param {boolean} objectiveSatisfiedStatus\n   */\n  set objectiveSatisfiedStatus(objectiveSatisfiedStatus: boolean) {\n    this._objectiveSatisfiedStatus = objectiveSatisfiedStatus;\n    // Update success status based on objective satisfaction\n    if (objectiveSatisfiedStatus) {\n      this._successStatus = SuccessStatus.PASSED;\n    } else {\n      this._successStatus = SuccessStatus.FAILED;\n    }\n  }\n\n  /**\n   * Getter for objectiveMeasureStatus\n   * @return {boolean}\n   */\n  get objectiveMeasureStatus(): boolean {\n    return this._objectiveMeasureStatus;\n  }\n\n  /**\n   * Setter for objectiveMeasureStatus\n   * @param {boolean} objectiveMeasureStatus\n   */\n  set objectiveMeasureStatus(objectiveMeasureStatus: boolean) {\n    this._objectiveMeasureStatus = objectiveMeasureStatus;\n  }\n\n  /**\n   * Getter for objectiveNormalizedMeasure\n   * @return {number}\n   */\n  get objectiveNormalizedMeasure(): number {\n    return this._objectiveNormalizedMeasure;\n  }\n\n  /**\n   * Setter for objectiveNormalizedMeasure\n   * @param {number} objectiveNormalizedMeasure\n   */\n  set objectiveNormalizedMeasure(objectiveNormalizedMeasure: number) {\n    this._objectiveNormalizedMeasure = objectiveNormalizedMeasure;\n  }\n\n  /**\n   * Getter for scaledPassingScore\n   * @return {number}\n   */\n  get scaledPassingScore(): number {\n    return this._scaledPassingScore;\n  }\n\n  /**\n   * Setter for scaledPassingScore\n   * @param {number} scaledPassingScore\n   */\n  set scaledPassingScore(scaledPassingScore: number) {\n    if (scaledPassingScore >= -1 && scaledPassingScore <= 1) {\n      this._scaledPassingScore = scaledPassingScore;\n    }\n  }\n\n  /**\n   * Getter for progressMeasure\n   * @return {number}\n   */\n  get progressMeasure(): number {\n    return this._progressMeasure;\n  }\n\n  /**\n   * Setter for progressMeasure\n   * @param {number} progressMeasure\n   */\n  set progressMeasure(progressMeasure: number) {\n    this._progressMeasure = progressMeasure;\n  }\n\n  /**\n   * Getter for progressMeasureStatus\n   * @return {boolean}\n   */\n  get progressMeasureStatus(): boolean {\n    return this._progressMeasureStatus;\n  }\n\n  /**\n   * Setter for progressMeasureStatus\n   * @param {boolean} progressMeasureStatus\n   */\n  set progressMeasureStatus(progressMeasureStatus: boolean) {\n    this._progressMeasureStatus = progressMeasureStatus;\n  }\n\n  /**\n   * Getter for location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for location\n   * @param {string} location\n   */\n  set location(location: string) {\n    this._location = location;\n  }\n\n  /**\n   * Getter for attemptAbsoluteStartTime\n   * @return {string}\n   */\n  get attemptAbsoluteStartTime(): string {\n    return this._attemptAbsoluteStartTime;\n  }\n\n  /**\n   * Setter for attemptAbsoluteStartTime\n   * @param {string} attemptAbsoluteStartTime\n   */\n  set attemptAbsoluteStartTime(attemptAbsoluteStartTime: string) {\n    this._attemptAbsoluteStartTime = attemptAbsoluteStartTime;\n  }\n\n  /**\n   * Getter for learnerPrefs\n   * @return {any}\n   */\n  get learnerPrefs(): any {\n    return this._learnerPrefs;\n  }\n\n  /**\n   * Setter for learnerPrefs\n   * @param {any} learnerPrefs\n   */\n  set learnerPrefs(learnerPrefs: any) {\n    this._learnerPrefs = learnerPrefs;\n  }\n\n  /**\n   * Getter for activityAttemptActive\n   * @return {boolean}\n   */\n  get activityAttemptActive(): boolean {\n    return this._activityAttemptActive;\n  }\n\n  /**\n   * Setter for activityAttemptActive\n   * @param {boolean} activityAttemptActive\n   */\n  set activityAttemptActive(activityAttemptActive: boolean) {\n    this._activityAttemptActive = activityAttemptActive;\n  }\n\n  /**\n   * Getter for isHiddenFromChoice\n   * @return {boolean}\n   */\n  get isHiddenFromChoice(): boolean {\n    return this._isHiddenFromChoice;\n  }\n\n  /**\n   * Setter for isHiddenFromChoice\n   * @param {boolean} isHiddenFromChoice\n   */\n  set isHiddenFromChoice(isHiddenFromChoice: boolean) {\n    this._isHiddenFromChoice = isHiddenFromChoice;\n  }\n\n  /**\n   * Getter for isAvailable\n   * @return {boolean}\n   */\n  get isAvailable(): boolean {\n    return this._isAvailable;\n  }\n\n  /**\n   * Setter for isAvailable\n   * @param {boolean} isAvailable\n   */\n  set isAvailable(isAvailable: boolean) {\n    this._isAvailable = isAvailable;\n  }\n\n  /**\n   * Getter for attemptLimit\n   * @return {number | null}\n   */\n  get attemptLimit(): number | null {\n    return this._attemptLimit;\n  }\n\n  /**\n   * Setter for attemptLimit\n   * @param {number | null} attemptLimit\n   */\n  set attemptLimit(attemptLimit: number | null) {\n    this._attemptLimit = attemptLimit;\n  }\n\n  /**\n   * Check if attempt limit has been exceeded\n   * @return {boolean}\n   */\n  hasAttemptLimitExceeded(): boolean {\n    if (this._attemptLimit === null) {\n      return false;\n    }\n    return this._attemptCount >= this._attemptLimit;\n  }\n\n  /**\n   * Getter for timeLimitDuration\n   * @return {string | null}\n   */\n  get timeLimitDuration(): string | null {\n    return this._timeLimitDuration;\n  }\n\n  /**\n   * Setter for timeLimitDuration\n   * @param {string | null} timeLimitDuration\n   */\n  set timeLimitDuration(timeLimitDuration: string | null) {\n    this._timeLimitDuration = timeLimitDuration;\n  }\n\n  /**\n   * Getter for timeLimitAction\n   * @return {string | null}\n   */\n  get timeLimitAction(): string | null {\n    return this._timeLimitAction;\n  }\n\n  /**\n   * Setter for timeLimitAction\n   * @param {string | null} timeLimitAction\n   */\n  set timeLimitAction(timeLimitAction: string | null) {\n    this._timeLimitAction = timeLimitAction;\n  }\n\n  /**\n   * Getter for beginTimeLimit\n   * @return {string | null}\n   */\n  get beginTimeLimit(): string | null {\n    return this._beginTimeLimit;\n  }\n\n  /**\n   * Setter for beginTimeLimit\n   * @param {string | null} beginTimeLimit\n   */\n  set beginTimeLimit(beginTimeLimit: string | null) {\n    this._beginTimeLimit = beginTimeLimit;\n  }\n\n  /**\n   * Getter for endTimeLimit\n   * @return {string | null}\n   */\n  get endTimeLimit(): string | null {\n    return this._endTimeLimit;\n  }\n\n  /**\n   * Setter for endTimeLimit\n   * @param {string | null} endTimeLimit\n   */\n  set endTimeLimit(endTimeLimit: string | null) {\n    this._endTimeLimit = endTimeLimit;\n  }\n\n\n  /**\n   * Getter for attemptAbsoluteDurationLimit\n   * @return {string | null}\n   */\n  get attemptAbsoluteDurationLimit(): string | null {\n    return this._attemptAbsoluteDurationLimit;\n  }\n\n  /**\n   * Setter for attemptAbsoluteDurationLimit\n   * @param {string | null} attemptAbsoluteDurationLimit\n   */\n  set attemptAbsoluteDurationLimit(attemptAbsoluteDurationLimit: string | null) {\n    if (attemptAbsoluteDurationLimit !== null) {\n      if (!validateISO8601Duration(attemptAbsoluteDurationLimit, scorm2004_regex.CMITimespan)) {\n        throw new Scorm2004ValidationError(\n          this._cmi_element + \".attemptAbsoluteDurationLimit\",\n          scorm2004_errors.TYPE_MISMATCH as number\n        );\n      }\n    }\n    this._attemptAbsoluteDurationLimit = attemptAbsoluteDurationLimit;\n  }\n\n  /**\n   * Getter for attemptExperiencedDuration\n   * @return {string}\n   */\n  get attemptExperiencedDuration(): string {\n    return this._attemptExperiencedDuration;\n  }\n\n  /**\n   * Setter for attemptExperiencedDuration\n   * @param {string} attemptExperiencedDuration\n   */\n  set attemptExperiencedDuration(attemptExperiencedDuration: string) {\n    if (!validateISO8601Duration(attemptExperiencedDuration, scorm2004_regex.CMITimespan)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".attemptExperiencedDuration\",\n        scorm2004_errors.TYPE_MISMATCH as number\n      );\n    }\n    this._attemptExperiencedDuration = attemptExperiencedDuration;\n  }\n\n  /**\n   * Getter for activityAbsoluteDurationLimit\n   * @return {string | null}\n   */\n  get activityAbsoluteDurationLimit(): string | null {\n    return this._activityAbsoluteDurationLimit;\n  }\n\n  /**\n   * Setter for activityAbsoluteDurationLimit\n   * @param {string | null} activityAbsoluteDurationLimit\n   */\n  set activityAbsoluteDurationLimit(activityAbsoluteDurationLimit: string | null) {\n    if (activityAbsoluteDurationLimit !== null) {\n      if (!validateISO8601Duration(activityAbsoluteDurationLimit, scorm2004_regex.CMITimespan)) {\n        throw new Scorm2004ValidationError(\n          this._cmi_element + \".activityAbsoluteDurationLimit\",\n          scorm2004_errors.TYPE_MISMATCH as number\n        );\n      }\n    }\n    this._activityAbsoluteDurationLimit = activityAbsoluteDurationLimit;\n  }\n\n  /**\n   * Getter for activityExperiencedDuration\n   * @return {string}\n   */\n  get activityExperiencedDuration(): string {\n    return this._activityExperiencedDuration;\n  }\n\n  /**\n   * Setter for activityExperiencedDuration\n   * @param {string} activityExperiencedDuration\n   */\n  set activityExperiencedDuration(activityExperiencedDuration: string) {\n    if (!validateISO8601Duration(activityExperiencedDuration, scorm2004_regex.CMITimespan)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".activityExperiencedDuration\",\n        scorm2004_errors.TYPE_MISMATCH as number\n      );\n    }\n    this._activityExperiencedDuration = activityExperiencedDuration;\n  }\n\n  /**\n   * Getter for attemptAbsoluteDuration (alias for limit)\n   * @return {string}\n   */\n  get attemptAbsoluteDuration(): string {\n    return this._attemptAbsoluteDurationLimit || \"PT0H0M0S\";\n  }\n\n  /**\n   * Setter for attemptAbsoluteDuration\n   * @param {string} duration\n   */\n  set attemptAbsoluteDuration(duration: string) {\n    this._attemptAbsoluteDurationLimit = duration;\n  }\n\n  /**\n   * Getter for activityAbsoluteDuration (alias for limit)\n   * @return {string}\n   */\n  get activityAbsoluteDuration(): string {\n    return this._activityAbsoluteDurationLimit || \"PT0H0M0S\";\n  }\n\n  /**\n   * Setter for activityAbsoluteDuration\n   * @param {string} duration\n   */\n  set activityAbsoluteDuration(duration: string) {\n    this._activityAbsoluteDurationLimit = duration;\n  }\n\n\n  /**\n   * Getter for sequencingControls\n   * @return {SequencingControls}\n   */\n  get sequencingControls(): SequencingControls {\n    return this._sequencingControls;\n  }\n\n  /**\n   * Setter for sequencingControls\n   * @param {SequencingControls} sequencingControls\n   */\n  set sequencingControls(sequencingControls: SequencingControls) {\n    this._sequencingControls = sequencingControls;\n  }\n\n  /**\n   * Getter for sequencingRules\n   * @return {SequencingRules}\n   */\n  get sequencingRules(): SequencingRules {\n    return this._sequencingRules;\n  }\n\n  /**\n   * Setter for sequencingRules\n   * @param {SequencingRules} sequencingRules\n   */\n  set sequencingRules(sequencingRules: SequencingRules) {\n    this._sequencingRules = sequencingRules;\n  }\n\n  /**\n   * Getter for rollupRules\n   * @return {RollupRules}\n   */\n  get rollupRules(): RollupRules {\n    return this._rollupRules;\n  }\n\n  /**\n   * Setter for rollupRules\n   * @param {RollupRules} rollupRules\n   */\n  set rollupRules(rollupRules: RollupRules) {\n    this._rollupRules = rollupRules;\n  }\n\n  /**\n   * Get available children with selection and randomization applied\n   * @return {Activity[]}\n   */\n  getAvailableChildren(): Activity[] {\n    // If no children, return empty array\n    if (this._children.length === 0) {\n      return [];\n    }\n\n    // If processed children already exist and no new attempt, return them\n    if (this._processedChildren !== null) {\n      return this._processedChildren;\n    }\n\n    // If no processing has been done yet, return all children\n    // The sequencing process will call applySelectionAndRandomization when needed\n    return this._children;\n  }\n\n  /**\n   * Set the processed children (called by SelectionRandomization)\n   * @param {Activity[]} processedChildren\n   */\n  setProcessedChildren(processedChildren: Activity[]): void {\n    this._processedChildren = processedChildren;\n  }\n\n  /**\n   * Reset processed children (used when configuration changes)\n   */\n  resetProcessedChildren(): void {\n    this._processedChildren = null;\n  }\n\n  /**\n   * Get whether this is a new attempt\n   * @return {boolean}\n   */\n  get isNewAttempt(): boolean {\n    return this._isNewAttempt;\n  }\n\n  /**\n   * Set whether this is a new attempt\n   * @param {boolean} isNewAttempt\n   */\n  set isNewAttempt(isNewAttempt: boolean) {\n    this._isNewAttempt = isNewAttempt;\n  }\n\n  /**\n   * toJSON for Activity\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      id: this._id,\n      title: this._title,\n      isVisible: this._isVisible,\n      isActive: this._isActive,\n      isSuspended: this._isSuspended,\n      isCompleted: this._isCompleted,\n      completionStatus: this._completionStatus,\n      successStatus: this._successStatus,\n      attemptCount: this._attemptCount,\n      attemptCompletionAmount: this._attemptCompletionAmount,\n      attemptAbsoluteDuration: this._attemptAbsoluteDuration,\n      attemptExperiencedDuration: this._attemptExperiencedDuration,\n      activityAbsoluteDuration: this._activityAbsoluteDuration,\n      activityExperiencedDuration: this._activityExperiencedDuration,\n      objectiveSatisfiedStatus: this._objectiveSatisfiedStatus,\n      objectiveMeasureStatus: this._objectiveMeasureStatus,\n      objectiveNormalizedMeasure: this._objectiveNormalizedMeasure,\n      children: this._children.map((child) => child.toJSON())\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\n\n/**\n * Class representing the SCORM 2004 activity tree\n */\nexport class ActivityTree extends BaseCMI {\n  private _root: Activity | null = null;\n  private _currentActivity: Activity | null = null;\n  private _suspendedActivity: Activity | null = null;\n  private _activities: Map<string, Activity> = new Map();\n\n  /**\n   * Constructor for ActivityTree\n   */\n  constructor(root?: Activity) {\n    super(\"activityTree\");\n    if (root) {\n      this.root = root;\n    }\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    if (this._root) {\n      this._root.initialize();\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._currentActivity = null;\n    this._suspendedActivity = null;\n    // Clear the activities map so it can be rebuilt\n    this._activities.clear();\n    if (this._root) {\n      this._root.reset();\n      // Re-populate the activities map with the root and its children\n      this._activities.set(this._root.id, this._root);\n      this._addActivitiesToMap(this._root);\n    }\n  }\n\n  /**\n   * Getter for root\n   * @return {Activity | null}\n   */\n  get root(): Activity | null {\n    return this._root;\n  }\n\n  /**\n   * Setter for root\n   * @param {Activity} root\n   */\n  set root(root: Activity | null) {\n    // noinspection SuspiciousTypeOfGuard\n    if (root !== null && !(root instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".root\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    // Clear existing map when assigning a new root to avoid stale activities\n    this._activities.clear();\n    this._root = root;\n    if (root) {\n      this._activities.set(root.id, root);\n      this._addActivitiesToMap(root);\n    }\n  }\n\n  /**\n   * Recursively add activities to the activities map\n   * @param {Activity} activity\n   * @private\n   */\n  private _addActivitiesToMap(activity: Activity): void {\n    for (const child of activity.children) {\n      this._activities.set(child.id, child);\n      this._addActivitiesToMap(child);\n    }\n  }\n\n  /**\n   * Getter for currentActivity\n   * @return {Activity | null}\n   */\n  get currentActivity(): Activity | null {\n    return this._currentActivity;\n  }\n\n  /**\n   * Setter for currentActivity\n   * @param {Activity | null} activity\n   */\n  set currentActivity(activity: Activity | null) {\n    // noinspection SuspiciousTypeOfGuard\n    if (activity !== null && !(activity instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".currentActivity\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n\n    // If there's already a current activity, deactivate it\n    if (this._currentActivity) {\n      this._currentActivity.isActive = false;\n    }\n\n    // Set the new current activity and activate it\n    this._currentActivity = activity;\n    if (activity) {\n      activity.isActive = true;\n    }\n  }\n\n  /**\n   * Getter for suspendedActivity\n   * @return {Activity | null}\n   */\n  get suspendedActivity(): Activity | null {\n    return this._suspendedActivity;\n  }\n\n  /**\n   * Setter for suspendedActivity\n   * @param {Activity | null} activity\n   */\n  set suspendedActivity(activity: Activity | null) {\n    // noinspection SuspiciousTypeOfGuard\n    if (activity !== null && !(activity instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".suspendedActivity\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n\n    // If there's already a suspended activity, unsuspend it\n    if (this._suspendedActivity) {\n      this._suspendedActivity.isSuspended = false;\n    }\n\n    // Set the new suspended activity and mark it as suspended\n    this._suspendedActivity = activity;\n    if (activity) {\n      activity.isSuspended = true;\n    }\n  }\n\n  /**\n   * Get an activity by ID\n   * @param {string} id - The ID of the activity to get\n   * @return {Activity | null} - The activity with the given ID, or null if not found\n   */\n  getActivity(id: string): Activity | null {\n    return this._activities.get(id) || null;\n  }\n\n  /**\n   * Get all activities in the tree\n   * @return {Activity[]} - An array of all activities in the tree\n   */\n  getAllActivities(): Activity[] {\n    return Array.from(this._activities.values());\n  }\n\n  /**\n   * Get the parent of an activity\n   * @param {Activity} activity - The activity to get the parent of\n   * @return {Activity | null} - The parent of the activity, or null if it has no parent\n   */\n  getParent(activity: Activity): Activity | null {\n    return activity.parent;\n  }\n\n  /**\n   * Get the children of an activity\n   * @param {Activity} activity - The activity to get the children of\n   * @param {boolean} useAvailableChildren - Whether to use available children (with selection/randomization)\n   * @return {Activity[]} - An array of the activity's children\n   */\n  getChildren(activity: Activity, useAvailableChildren: boolean = true): Activity[] {\n    return useAvailableChildren ? activity.getAvailableChildren() : activity.children;\n  }\n\n  /**\n   * Get the siblings of an activity\n   * @param {Activity} activity - The activity to get the siblings of\n   * @return {Activity[]} - An array of the activity's siblings\n   */\n  getSiblings(activity: Activity): Activity[] {\n    if (!activity.parent) {\n      return [];\n    }\n    return activity.parent.children.filter((child) => child !== activity);\n  }\n\n  /**\n   * Get the next sibling of an activity\n   * @param {Activity} activity - The activity to get the next sibling of\n   * @param {boolean} useAvailableChildren - Whether to use available children (with selection/randomization)\n   * @return {Activity | null} - The next sibling of the activity, or null if it has no next sibling\n   */\n  getNextSibling(activity: Activity, useAvailableChildren: boolean = true): Activity | null {\n    if (!activity.parent) {\n      return null;\n    }\n    let siblings = useAvailableChildren \n      ? activity.parent.getAvailableChildren() \n      : activity.parent.children;\n    let index = siblings.indexOf(activity);\n    \n    // Fallback: if not found in available children, try raw children\n    if (index === -1 && useAvailableChildren) {\n      siblings = activity.parent.children;\n      index = siblings.indexOf(activity);\n    }\n    \n    if (index === -1 || index === siblings.length - 1) {\n      return null;\n    }\n    return siblings[index + 1] ?? null;\n  }\n\n  /**\n   * Get the previous sibling of an activity\n   * @param {Activity} activity - The activity to get the previous sibling of\n   * @param {boolean} useAvailableChildren - Whether to use available children (with selection/randomization)\n   * @return {Activity | null} - The previous sibling of the activity, or null if it has no previous sibling\n   */\n  getPreviousSibling(activity: Activity, useAvailableChildren: boolean = true): Activity | null {\n    if (!activity.parent) {\n      return null;\n    }\n    let siblings = useAvailableChildren \n      ? activity.parent.getAvailableChildren() \n      : activity.parent.children;\n    let index = siblings.indexOf(activity);\n    \n    // Fallback: if not found in available children, try raw children\n    if (index === -1 && useAvailableChildren) {\n      siblings = activity.parent.children;\n      index = siblings.indexOf(activity);\n    }\n    \n    if (index <= 0) {\n      return null;\n    }\n    return siblings[index - 1] ?? null;\n  }\n\n  /**\n   * Get the first child of an activity\n   * @param {Activity} activity - The activity to get the first child of\n   * @param {boolean} useAvailableChildren - Whether to use available children (with selection/randomization)\n   * @return {Activity | null} - The first child of the activity, or null if it has no children\n   */\n  getFirstChild(activity: Activity, useAvailableChildren: boolean = true): Activity | null {\n    const children = useAvailableChildren \n      ? activity.getAvailableChildren() \n      : activity.children;\n    if (children.length === 0) {\n      return null;\n    }\n    return children[0] ?? null;\n  }\n\n  /**\n   * Get the last child of an activity\n   * @param {Activity} activity - The activity to get the last child of\n   * @param {boolean} useAvailableChildren - Whether to use available children (with selection/randomization)\n   * @return {Activity | null} - The last child of the activity, or null if it has no children\n   */\n  getLastChild(activity: Activity, useAvailableChildren: boolean = true): Activity | null {\n    const children = useAvailableChildren \n      ? activity.getAvailableChildren() \n      : activity.children;\n    if (children.length === 0) {\n      return null;\n    }\n    return children[children.length - 1] ?? null;\n  }\n\n  /**\n   * Get the common ancestor of two activities\n   * @param {Activity} activity1 - The first activity\n   * @param {Activity} activity2 - The second activity\n   * @return {Activity | null} - The common ancestor of the two activities, or null if they have no common ancestor\n   */\n  getCommonAncestor(activity1: Activity, activity2: Activity): Activity | null {\n    // Get the path from the root to activity1\n    const path1: Activity[] = [];\n    let current: Activity | null = activity1;\n    while (current) {\n      path1.unshift(current);\n      current = current.parent;\n    }\n\n    // Check if activity2 is in the path from the root to activity1\n    current = activity2;\n    while (current) {\n      if (path1.includes(current)) {\n        return current;\n      }\n      current = current.parent;\n    }\n\n    return null;\n  }\n\n  /**\n   * toJSON for ActivityTree\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      root: this._root,\n      currentActivity: this._currentActivity ? this._currentActivity.id : null,\n      suspendedActivity: this._suspendedActivity ? this._suspendedActivity.id : null,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { ActivityTree } from \"./activity_tree\";\nimport { SequencingRules } from \"./sequencing_rules\";\nimport { SequencingControls } from \"./sequencing_controls\";\nimport { RollupRules } from \"./rollup_rules\";\nimport { ADLNav } from \"../adl\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\n\n/**\n * Class representing SCORM 2004 sequencing\n */\nexport class Sequencing extends BaseCMI {\n  private _activityTree: ActivityTree;\n  private _sequencingRules: SequencingRules;\n  private _sequencingControls: SequencingControls;\n  private _rollupRules: RollupRules;\n  private _adlNav: ADLNav | null = null;\n\n  /**\n   * Constructor for Sequencing\n   */\n  constructor() {\n    super(\"sequencing\");\n    this._activityTree = new ActivityTree();\n    this._sequencingRules = new SequencingRules();\n    this._sequencingControls = new SequencingControls();\n    this._rollupRules = new RollupRules();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this._activityTree.initialize();\n    this._sequencingRules.initialize();\n    this._sequencingControls.initialize();\n    this._rollupRules.initialize();\n    \n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._activityTree.reset();\n    this._sequencingRules.reset();\n    this._sequencingControls.reset();\n    this._rollupRules.reset();\n  }\n\n  /**\n   * Getter for activityTree\n   * @return {ActivityTree}\n   */\n  get activityTree(): ActivityTree {\n    return this._activityTree;\n  }\n\n  /**\n   * Setter for activityTree\n   * @param {ActivityTree} activityTree\n   */\n  set activityTree(activityTree: ActivityTree) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(activityTree instanceof ActivityTree)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".activityTree\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._activityTree = activityTree;\n  }\n\n  /**\n   * Getter for sequencingRules\n   * @return {SequencingRules}\n   */\n  get sequencingRules(): SequencingRules {\n    return this._sequencingRules;\n  }\n\n  /**\n   * Setter for sequencingRules\n   * @param {SequencingRules} sequencingRules\n   */\n  set sequencingRules(sequencingRules: SequencingRules) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(sequencingRules instanceof SequencingRules)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".sequencingRules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._sequencingRules = sequencingRules;\n  }\n\n  /**\n   * Getter for sequencingControls\n   * @return {SequencingControls}\n   */\n  get sequencingControls(): SequencingControls {\n    return this._sequencingControls;\n  }\n\n  /**\n   * Setter for sequencingControls\n   * @param {SequencingControls} sequencingControls\n   */\n  set sequencingControls(sequencingControls: SequencingControls) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(sequencingControls instanceof SequencingControls)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".sequencingControls\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._sequencingControls = sequencingControls;\n  }\n\n  /**\n   * Getter for rollupRules\n   * @return {RollupRules}\n   */\n  get rollupRules(): RollupRules {\n    return this._rollupRules;\n  }\n\n  /**\n   * Setter for rollupRules\n   * @param {RollupRules} rollupRules\n   */\n  set rollupRules(rollupRules: RollupRules) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rollupRules instanceof RollupRules)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".rollupRules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._rollupRules = rollupRules;\n  }\n\n  /**\n   * Getter for adlNav\n   * @return {ADLNav | null}\n   */\n  get adlNav(): ADLNav | null {\n    return this._adlNav;\n  }\n\n  /**\n   * Setter for adlNav\n   * @param {ADLNav | null} adlNav\n   */\n  set adlNav(adlNav: ADLNav | null) {\n    this._adlNav = adlNav;\n    \n  }\n\n\n\n\n\n  /**\n   * Process rollup for the entire activity tree\n   */\n  processRollup(): void {\n    // Get the root activity\n    const root = this._activityTree.root;\n    if (!root) {\n      return;\n    }\n\n    // Process rollup from the bottom up\n    this._processRollupRecursive(root);\n  }\n\n\n  /**\n   * Process rollup recursively\n   * @param {Activity} activity - The activity to process rollup for\n   * @private\n   */\n  private _processRollupRecursive(activity: Activity): void {\n    // Process rollup for children first\n    for (const child of activity.children) {\n      this._processRollupRecursive(child);\n    }\n\n    // Process rollup for this activity\n    this._rollupRules.processRollup(activity);\n  }\n\n\n  /**\n   * Get the current activity\n   * @return {Activity | null}\n   */\n  getCurrentActivity(): Activity | null {\n    return this._activityTree.currentActivity;\n  }\n\n  /**\n   * Get the root activity\n   * @return {Activity | null}\n   */\n  getRootActivity(): Activity | null {\n    return this._activityTree.root;\n  }\n\n  /**\n   * toJSON for Sequencing\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      activityTree: this._activityTree,\n      sequencingRules: this._sequencingRules,\n      sequencingControls: this._sequencingControls,\n      rollupRules: this._rollupRules,\n      adlNav: this._adlNav,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { Activity } from \"./activity\";\nimport { RollupActionType, RollupConsiderationType, RollupRule } from \"./rollup_rules\";\n\n/**\n * Enhanced Rollup Process implementation for SCORM 2004 sequencing\n * Priority 5 Gap: Comprehensive rollup with global objective mapping and complex weighting\n * Handles all rollup operations including measure, objective, and progress rollup\n */\nexport class RollupProcess {\n  private rollupStateLog: Array<{ activity: string, timestamp: string, state: any }> = [];\n  private eventCallback: ((eventType: string, data?: any) => void) | null = null;\n\n  constructor(eventCallback?: (eventType: string, data?: any) => void) {\n    this.eventCallback = eventCallback || null;\n  }\n\n  /**\n   * Overall Rollup Process (RB.1.5)\n   * Performs rollup from a given activity up through its ancestors\n   * @param {Activity} activity - The activity to start rollup from\n   */\n  public overallRollupProcess(activity: Activity): void {\n    let currentActivity: Activity | null = activity;\n\n    // Process rollup up the tree until we reach the root\n    while (currentActivity && currentActivity.parent) {\n      const parent: Activity = currentActivity.parent;\n\n      // Only perform rollup if the parent tracks status\n      if (parent.sequencingControls.rollupObjectiveSatisfied ||\n        parent.sequencingControls.rollupProgressCompletion) {\n\n        // Step 1: Measure Rollup Process (RB.1.1)\n        this.measureRollupProcess(parent);\n\n        // Step 2: Objective Rollup Process (RB.1.2)\n        if (parent.sequencingControls.rollupObjectiveSatisfied) {\n          this.objectiveRollupProcess(parent);\n        }\n\n        // Step 3: Activity Progress Rollup Process (RB.1.3)\n        if (parent.sequencingControls.rollupProgressCompletion) {\n          this.activityProgressRollupProcess(parent);\n        }\n      }\n\n      // Move up the tree\n      currentActivity = parent;\n    }\n  }\n\n  /**\n   * Measure Rollup Process (RB.1.1)\n   * Rolls up objective measure (score) from children to parent\n   * INTEGRATION: Uses complex weighted measure calculation\n   * @param {Activity} activity - The parent activity\n   */\n  private measureRollupProcess(activity: Activity): void {\n    if (!activity.sequencingControls.rollupObjectiveSatisfied) {\n      return;\n    }\n\n    const children = activity.getAvailableChildren();\n    if (children.length === 0) {\n      return;\n    }\n\n    // INTEGRATION: Use complex weighted measure calculation instead of simple calculation\n    // Determine if there are any valid child measures\n    const hasValidMeasures = children.some(\n      (c) => this.checkChildForRollupSubprocess(c, \"measure\") && c.objectiveMeasureStatus && c.objectiveNormalizedMeasure !== null,\n    );\n\n    if (!hasValidMeasures) {\n      activity.objectiveMeasureStatus = false;\n      return;\n    }\n\n    const complexWeightedMeasure = this.calculateComplexWeightedMeasure(activity, children, { enableThresholdBias: false });\n    activity.objectiveNormalizedMeasure = complexWeightedMeasure;\n    activity.objectiveMeasureStatus = true;\n\n    // INTEGRATION: Process cross-cluster dependencies if dealing with activity clusters\n    const clusters = this.identifyActivityClusters(children);\n    if (clusters.length > 1) {\n      this.processCrossClusterDependencies(activity, clusters);\n    }\n  }\n\n  /**\n   * Objective Rollup Process (RB.1.2)\n   * Determines objective satisfaction status using rules, measure, or default\n   * @param {Activity} activity - The parent activity\n   */\n  private objectiveRollupProcess(activity: Activity): void {\n    const rollupRules = activity.rollupRules;\n\n    // First, try rollup using rules (RB.1.2.b)\n    const ruleResult = this.objectiveRollupUsingRules(activity, rollupRules.rules);\n    if (ruleResult !== null) {\n      activity.objectiveSatisfiedStatus = ruleResult;\n      return;\n    }\n\n    // Then, try rollup using measure (RB.1.2.a)\n    const measureResult = this.objectiveRollupUsingMeasure(activity);\n    if (measureResult !== null) {\n      activity.objectiveSatisfiedStatus = measureResult;\n      return;\n    }\n\n    // Finally, use default rollup (RB.1.2.c)\n    activity.objectiveSatisfiedStatus = this.objectiveRollupUsingDefault(activity);\n  }\n\n  /**\n   * Objective Rollup Using Rules (RB.1.2.b)\n   * @param {Activity} activity - The parent activity\n   * @param {RollupRule[]} rules - The rollup rules to evaluate\n   * @return {boolean | null} - True if satisfied, false if not, null if no rule applies\n   */\n  private objectiveRollupUsingRules(activity: Activity, rules: RollupRule[]): boolean | null {\n    // Get satisfied and not satisfied rules\n    const satisfiedRules = rules.filter(rule =>\n      rule.action === RollupActionType.SATISFIED\n    );\n\n    const notSatisfiedRules = rules.filter(rule =>\n      rule.action === RollupActionType.NOT_SATISFIED\n    );\n\n    // Evaluate satisfied rules first\n    for (const rule of satisfiedRules) {\n      if (this.evaluateRollupRule(activity, rule)) {\n        return true;\n      }\n    }\n\n    // Then evaluate not satisfied rules\n    for (const rule of notSatisfiedRules) {\n      if (this.evaluateRollupRule(activity, rule)) {\n        return false;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Objective Rollup Using Measure (RB.1.2.a)\n   * @param {Activity} activity - The parent activity\n   * @return {boolean | null} - True if satisfied, false if not, null if no measure\n   */\n  private objectiveRollupUsingMeasure(activity: Activity): boolean | null {\n    if (!activity.objectiveMeasureStatus || activity.scaledPassingScore === null) {\n      return null;\n    }\n\n    return activity.objectiveNormalizedMeasure >= activity.scaledPassingScore;\n  }\n\n  /**\n   * Objective Rollup Using Default (RB.1.2.c)\n   * @param {Activity} activity - The parent activity\n   * @return {boolean} - True if all tracked children are satisfied\n   */\n  private objectiveRollupUsingDefault(activity: Activity): boolean {\n    const children = activity.getAvailableChildren();\n\n    // If no children, not satisfied\n    if (children.length === 0) {\n      return false;\n    }\n\n    // Check if all tracked children are satisfied\n    for (const child of children) {\n      if (this.checkChildForRollupSubprocess(child, \"objective\")) {\n        if (!child.objectiveSatisfiedStatus) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Activity Progress Rollup Process (RB.1.3)\n   * Determines activity completion status\n   * @param {Activity} activity - The parent activity\n   */\n  private activityProgressRollupProcess(activity: Activity): void {\n    const rollupRules = activity.rollupRules;\n\n    // Get completion rules\n    const completedRules = rollupRules.rules.filter(rule =>\n      rule.action === RollupActionType.COMPLETED\n    );\n\n    const incompleteRules = rollupRules.rules.filter(rule =>\n      rule.action === RollupActionType.INCOMPLETE\n    );\n\n    // Evaluate completed rules first\n    for (const rule of completedRules) {\n      if (this.evaluateRollupRule(activity, rule)) {\n        activity.completionStatus = \"completed\";\n        return;\n      }\n    }\n\n    // Then evaluate incomplete rules\n    for (const rule of incompleteRules) {\n      if (this.evaluateRollupRule(activity, rule)) {\n        activity.completionStatus = \"incomplete\";\n        return;\n      }\n    }\n\n    // Default: completed if all tracked children are completed\n    const children = activity.getAvailableChildren();\n    let allCompleted = true;\n\n    for (const child of children) {\n      if (this.checkChildForRollupSubprocess(child, \"progress\")) {\n        if (child.completionStatus !== \"completed\") {\n          allCompleted = false;\n          break;\n        }\n      }\n    }\n\n    activity.completionStatus = allCompleted ? \"completed\" : \"incomplete\";\n  }\n\n  /**\n   * Check Child For Rollup Subprocess (RB.1.4.2)\n   * Determines if a child activity contributes to rollup\n   * @param {Activity} child - The child activity to check\n   * @param {string} rollupType - Type of rollup (\"measure\", \"objective\", \"progress\")\n   * @return {boolean} - True if child contributes to rollup\n   */\n  private checkChildForRollupSubprocess(child: Activity, rollupType: string): boolean {\n    // Check if child is tracked\n    switch (rollupType) {\n      case \"measure\":\n      case \"objective\":\n        if (!child.sequencingControls.rollupObjectiveSatisfied) {\n          return false;\n        }\n        break;\n      case \"progress\":\n        if (!child.sequencingControls.rollupProgressCompletion) {\n          return false;\n        }\n        break;\n    }\n\n    // Check if child is available for rollup\n    if (!child.isAvailable) {\n      return false;\n    }\n\n    // Additional checks can be added here based on rollup configuration\n\n    return true;\n  }\n\n  /**\n   * Evaluate a rollup rule\n   * @param {Activity} activity - The parent activity\n   * @param {RollupRule} rule - The rule to evaluate\n   * @return {boolean} - True if the rule applies\n   */\n  private evaluateRollupRule(activity: Activity, rule: RollupRule): boolean {\n    const children = activity.getAvailableChildren();\n    let contributingChildren = 0;\n    let satisfiedCount = 0;\n\n    // Count children that meet the rule conditions\n    for (const child of children) {\n      // Check if child contributes based on rule action\n      let contributes = false;\n      switch (rule.action) {\n        case RollupActionType.SATISFIED:\n        case RollupActionType.NOT_SATISFIED:\n          contributes = this.checkChildForRollupSubprocess(child, \"objective\");\n          break;\n        case RollupActionType.COMPLETED:\n        case RollupActionType.INCOMPLETE:\n          contributes = this.checkChildForRollupSubprocess(child, \"progress\");\n          break;\n      }\n\n      if (contributes) {\n        contributingChildren++;\n\n        // Evaluate rule conditions for this child using RB.1.4.1\n        if (this.evaluateRollupConditionsSubprocess(child, rule)) {\n          satisfiedCount++;\n        }\n      }\n    }\n\n    // Apply minimum count/percent logic OR consideration type\n    if (rule.consideration === RollupConsiderationType.ALL) {\n      // For ALL consideration, all contributing children must satisfy\n      return contributingChildren > 0 && satisfiedCount === contributingChildren;\n    } else if (rule.minimumCount !== null) {\n      return satisfiedCount >= rule.minimumCount;\n    } else if (rule.minimumPercent !== null) {\n      const percent = contributingChildren > 0 ? (satisfiedCount / contributingChildren) : 0;\n      return percent >= rule.minimumPercent;\n    }\n\n    // Default: all contributing children must satisfy\n    return contributingChildren > 0 && satisfiedCount === contributingChildren;\n  }\n\n  /**\n   * Evaluate Rollup Conditions Subprocess (RB.1.4.1)\n   * Evaluates if rollup rule conditions are met for a given activity\n   * @param {Activity} child - The child activity to evaluate\n   * @param {RollupRule} rule - The rollup rule containing conditions to evaluate\n   * @return {boolean} - True if all conditions are met, false otherwise\n   */\n  private evaluateRollupConditionsSubprocess(child: Activity, rule: RollupRule): boolean {\n    // If no conditions are specified, the rule always applies\n    if (rule.conditions.length === 0) {\n      return true;\n    }\n\n    // Evaluate based on the rule's consideration type\n    switch (rule.consideration) {\n      case RollupConsiderationType.ALL:\n        // All conditions must be met\n        return rule.conditions.every(condition => condition.evaluate(child));\n\n      case RollupConsiderationType.ANY:\n        // At least one condition must be met\n        return rule.conditions.some(condition => condition.evaluate(child));\n\n      case RollupConsiderationType.NONE:\n        // No conditions should be met\n        return !rule.conditions.some(condition => condition.evaluate(child));\n\n      case RollupConsiderationType.AT_LEAST_COUNT:\n      case RollupConsiderationType.AT_LEAST_PERCENT:\n        // These are handled at the rule level, not condition level\n        // For individual condition evaluation, treat as ALL\n        return rule.conditions.every(condition => condition.evaluate(child));\n\n      default:\n        // Unknown consideration type, default to false\n        return false;\n    }\n  }\n\n  /**\n   * Priority 5 Gap: Validate rollup state consistency across the activity tree\n   * Ensures that rollup states are consistent and valid before processing\n   * @param {Activity} rootActivity - The root activity to validate from\n   * @return {boolean} - True if state is consistent, false otherwise\n   */\n  public validateRollupStateConsistency(rootActivity: Activity): boolean {\n    try {\n      this.eventCallback?.(\"rollup_validation_started\", {\n        activityId: rootActivity.id,\n        timestamp: new Date().toISOString()\n      });\n\n      const inconsistencies: string[] = [];\n\n      // Validate the entire tree recursively\n      this.validateActivityRollupState(rootActivity, inconsistencies);\n\n      if (inconsistencies.length > 0) {\n        this.eventCallback?.(\"rollup_state_inconsistencies\", {\n          activityId: rootActivity.id,\n          inconsistencies,\n          count: inconsistencies.length\n        });\n        return false;\n      }\n\n      this.eventCallback?.(\"rollup_validation_completed\", {\n        activityId: rootActivity.id,\n        result: \"consistent\"\n      });\n      return true;\n    } catch (error) {\n      this.eventCallback?.(\"rollup_validation_error\", {\n        activityId: rootActivity.id,\n        error: error instanceof Error ? error.message : String(error)\n      });\n      return false;\n    }\n  }\n\n  /**\n   * Priority 5 Gap: Process global objective mapping for shared objectives\n   * Handles cross-activity objective synchronization and global state management\n   * @param {Activity} activity - The activity to process objectives for\n   * @param {Map<string, any>} globalObjectives - Global objective map\n   */\n  public processGlobalObjectiveMapping(activity: Activity, globalObjectives: Map<string, any>): void {\n    try {\n      this.eventCallback?.(\"global_objective_processing_started\", {\n        activityId: activity.id,\n        globalObjectiveCount: globalObjectives.size\n      });\n\n      // Process shared objectives for this activity\n      this.synchronizeGlobalObjectives(activity, globalObjectives);\n\n      // Process children recursively\n      const children = activity.getAvailableChildren();\n      for (const child of children) {\n        this.processGlobalObjectiveMapping(child, globalObjectives);\n      }\n\n      this.eventCallback?.(\"global_objective_processing_completed\", {\n        activityId: activity.id,\n        processedObjectives: globalObjectives.size\n      });\n    } catch (error) {\n      this.eventCallback?.(\"global_objective_processing_error\", {\n        activityId: activity.id,\n        error: error instanceof Error ? error.message : String(error)\n      });\n    }\n  }\n\n  /**\n   * Priority 5 Gap: Handle complex objective weighting scenarios\n   * Supports weighted rollup calculations with complex dependency chains\n   * INTEGRATION: Now properly integrated into measureRollupProcess\n   * @param {Activity} activity - The parent activity\n   * @param {Activity[]} children - Child activities to weight\n   * @return {number} - Calculated weighted measure\n   */\n  public calculateComplexWeightedMeasure(\n    activity: Activity,\n    children: Activity[],\n    options?: { enableThresholdBias?: boolean }\n  ): number {\n    let totalWeightedMeasure = 0;\n    let totalWeight = 0;\n    const weightingLog: Array<{ childId: string, measure: number, weight: number }> = [];\n    const enableBias = options?.enableThresholdBias ?? true;\n\n    for (const child of children) {\n      if (!this.checkChildForRollupSubprocess(child, \"measure\")) {\n        continue;\n      }\n\n      if (child.objectiveMeasureStatus && child.objectiveNormalizedMeasure !== null) {\n        // Handle complex weighting scenarios\n        const baseWeight = child.sequencingControls.objectiveMeasureWeight;\n        const adjustedWeight = this.calculateAdjustedWeight(child, baseWeight, enableBias);\n        const contribution = child.objectiveNormalizedMeasure * adjustedWeight;\n\n        totalWeightedMeasure += contribution;\n        totalWeight += adjustedWeight;\n\n        weightingLog.push({\n          childId: child.id,\n          measure: child.objectiveNormalizedMeasure,\n          weight: adjustedWeight\n        });\n      }\n    }\n\n    this.eventCallback?.(\"complex_weighting_calculated\", {\n      activityId: activity.id,\n      weightingDetails: weightingLog,\n      totalWeight,\n      totalWeightedMeasure,\n      result: totalWeight > 0 ? totalWeightedMeasure / totalWeight : 0\n    });\n\n    return totalWeight > 0 ? totalWeightedMeasure / totalWeight : 0;\n  }\n\n  /**\n   * Priority 5 Gap: Handle cross-cluster dependencies in rollup\n   * Manages dependencies between activity clusters for accurate rollup\n   * INTEGRATION: Now properly integrated into rollup process\n   * @param {Activity} activity - The activity to process\n   * @param {Activity[]} clusters - Related activity clusters\n   */\n  public processCrossClusterDependencies(activity: Activity, clusters: Activity[]): void {\n    try {\n      this.eventCallback?.(\"cross_cluster_processing_started\", {\n        activityId: activity.id,\n        clusterCount: clusters.length\n      });\n\n      const dependencyMap = new Map<string, string[]>();\n\n      // Build dependency map across clusters\n      for (const cluster of clusters) {\n        this.analyzeCrossClusterDependencies(cluster, dependencyMap);\n      }\n\n      // Process dependencies in correct order\n      const processOrder = this.resolveDependencyOrder(dependencyMap);\n\n      for (const clusterId of processOrder) {\n        const cluster = clusters.find(c => c.id === clusterId);\n        if (cluster) {\n          this.processClusterRollup(cluster);\n        }\n      }\n\n      this.eventCallback?.(\"cross_cluster_processing_completed\", {\n        activityId: activity.id,\n        processedClusters: processOrder.length,\n        dependencyMap: Array.from(dependencyMap.entries())\n      });\n    } catch (error) {\n      this.eventCallback?.(\"cross_cluster_processing_error\", {\n        activityId: activity.id,\n        error: error instanceof Error ? error.message : String(error)\n      });\n    }\n  }\n\n  // Helper Methods for Priority 5 Gap Implementation\n\n  /**\n   * Validate rollup state for a single activity\n   */\n  private validateActivityRollupState(activity: Activity, inconsistencies: string[]): void {\n    const activityId = activity.id;\n\n    // Check measure status consistency\n    if (activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure === null) {\n      inconsistencies.push(`Activity ${activityId}: measure status true but normalized measure is null`);\n    }\n\n    // Check satisfaction status consistency with measure (only when success status is known)\n    if (\n      activity.objectiveMeasureStatus &&\n      activity.scaledPassingScore !== null &&\n      activity.successStatus !== \"unknown\"\n    ) {\n      const expectedSatisfied = activity.objectiveNormalizedMeasure >= activity.scaledPassingScore;\n      if (activity.objectiveSatisfiedStatus !== expectedSatisfied) {\n        inconsistencies.push(`Activity ${activityId}: satisfaction status inconsistent with measure`);\n      }\n    }\n\n    // Check rollup controls consistency\n    const controls = activity.sequencingControls;\n    if (!controls.rollupObjectiveSatisfied && !controls.rollupProgressCompletion) {\n      // Activity doesn't contribute to rollup but has rollup data\n      if (activity.objectiveMeasureStatus || activity.completionStatus !== \"unknown\") {\n        inconsistencies.push(`Activity ${activityId}: has rollup data but rollup controls disabled`);\n      }\n    }\n\n    // Check children consistency\n    const children = activity.getAvailableChildren();\n    for (const child of children) {\n      this.validateActivityRollupState(child, inconsistencies);\n    }\n\n    // Log validation state\n    this.rollupStateLog.push({\n      activity: activityId,\n      timestamp: new Date().toISOString(),\n      state: {\n        measureStatus: activity.objectiveMeasureStatus,\n        measure: activity.objectiveNormalizedMeasure,\n        satisfiedStatus: activity.objectiveSatisfiedStatus,\n        completionStatus: activity.completionStatus\n      }\n    });\n  }\n\n  /**\n   * Synchronize global objectives with activity-specific objectives\n   */\n  private synchronizeGlobalObjectives(activity: Activity, globalObjectives: Map<string, any>): void {\n    // Implementation would depend on the specific objective model\n    // For now, we'll implement a basic synchronization framework\n\n    const activityObjectives = this.getActivityObjectives(activity);\n\n    for (const objectiveId of activityObjectives) {\n      if (globalObjectives.has(objectiveId)) {\n        const globalObjective = globalObjectives.get(objectiveId);\n        this.syncObjectiveState(activity, objectiveId, globalObjective);\n      } else {\n        // Register new global objective\n        const localObjective = this.getLocalObjectiveState(activity, objectiveId);\n        globalObjectives.set(objectiveId, localObjective);\n      }\n    }\n  }\n\n  /**\n   * Calculate adjusted weight for complex weighting scenarios\n   */\n  private calculateAdjustedWeight(child: Activity, baseWeight: number, enableBias: boolean = true): number {\n    let adjustedWeight = baseWeight;\n\n    // Factor in completion status\n    if (child.completionStatus !== \"completed\") {\n      adjustedWeight *= 0.8; // Reduce weight for incomplete activities\n    }\n\n    // Factor in attempt count (penalize multiple attempts)\n    if (child.attemptCount > 1) {\n      const attemptPenalty = Math.max(0.5, 1 - (child.attemptCount - 1) * 0.1);\n      adjustedWeight *= attemptPenalty;\n    }\n\n    // Factor in time limits if exceeded\n    if (child.hasAttemptLimitExceeded()) {\n      adjustedWeight *= 0.6; // Significant penalty for exceeding limits\n    }\n\n    // Bias by relation to passing threshold when available\n    if (enableBias && child.objectiveMeasureStatus) {\n      const threshold = child.scaledPassingScore ?? 0.7;\n      if (child.objectiveNormalizedMeasure >= threshold) {\n        adjustedWeight *= 1.05; // small boost for above-threshold performance\n      } else {\n        adjustedWeight *= 0.95; // small penalty for below-threshold performance\n      }\n    }\n\n    return Math.max(0, adjustedWeight); // Ensure non-negative weight\n  }\n\n  /**\n   * Analyze cross-cluster dependencies\n   */\n  private analyzeCrossClusterDependencies(cluster: Activity, dependencyMap: Map<string, string[]>): void {\n    // Build dependency relationships based on sequencing rules and prerequisites\n    const dependencies: string[] = [];\n\n    // Check sequencing rules for dependencies\n    const sequencingRules = cluster.sequencingRules;\n    // Implementation would analyze rules to identify dependencies\n\n    dependencyMap.set(cluster.id, dependencies);\n  }\n\n  /**\n   * Resolve dependency processing order\n   */\n  private resolveDependencyOrder(dependencyMap: Map<string, string[]>): string[] {\n    const resolved: string[] = [];\n    const resolving: Set<string> = new Set();\n\n    const resolve = (id: string): void => {\n      if (resolved.includes(id)) return;\n      if (resolving.has(id)) {\n        // Circular dependency detected - log warning and continue\n        this.eventCallback?.(\"circular_dependency_detected\", { activityId: id });\n        return;\n      }\n\n      resolving.add(id);\n      const dependencies = dependencyMap.get(id) || [];\n\n      for (const depId of dependencies) {\n        resolve(depId);\n      }\n\n      resolving.delete(id);\n      resolved.push(id);\n    };\n\n    for (const id of Array.from(dependencyMap.keys())) {\n      resolve(id);\n    }\n\n    return resolved;\n  }\n\n  /**\n   * Process rollup for a specific cluster\n   */\n  private processClusterRollup(cluster: Activity): void {\n    // Perform standard rollup process for the cluster\n    this.measureRollupProcess(cluster);\n\n    if (cluster.sequencingControls.rollupObjectiveSatisfied) {\n      this.objectiveRollupProcess(cluster);\n    }\n\n    if (cluster.sequencingControls.rollupProgressCompletion) {\n      this.activityProgressRollupProcess(cluster);\n    }\n  }\n\n  /**\n   * Get activity objectives (implementation depends on objective model)\n   */\n  private getActivityObjectives(activity: Activity): string[] {\n    // This would return the list of objective IDs associated with the activity\n    // For now, return a basic implementation\n    return [activity.id + \"_primary_objective\"];\n  }\n\n  /**\n   * Synchronize objective state between local and global according to SCORM 2004 specification\n   */\n  private syncObjectiveState(activity: Activity, objectiveId: string, globalObjective: any): void {\n    try {\n      // Get current local objective state\n      const localObjective = this.getLocalObjectiveState(activity, objectiveId);\n\n      // Perform bidirectional synchronization according to SCORM 2004 rules\n\n      // 1. Read from global to local (if readSatisfiedStatus is true)\n      if (globalObjective.readSatisfiedStatus && globalObjective.satisfiedStatusKnown) {\n        activity.objectiveSatisfiedStatus = globalObjective.satisfiedStatus;\n        activity.objectiveMeasureStatus = true; // Mark as known\n      }\n\n      // 2. Read normalized measure from global to local (if readNormalizedMeasure is true)\n      if (globalObjective.readNormalizedMeasure && globalObjective.normalizedMeasureKnown) {\n        activity.objectiveNormalizedMeasure = globalObjective.normalizedMeasure;\n        activity.objectiveMeasureStatus = true;\n\n        // Update satisfaction based on measure if satisfiedByMeasure is true\n        if (globalObjective.satisfiedByMeasure) {\n          const scaledPassingScore = activity.scaledPassingScore || 0.7; // Default to 0.7\n          activity.objectiveSatisfiedStatus = globalObjective.normalizedMeasure >= scaledPassingScore;\n        }\n      }\n\n      // 3. Write from local to global (if writeSatisfiedStatus is true)\n      if (globalObjective.writeSatisfiedStatus && activity.objectiveMeasureStatus) {\n        globalObjective.satisfiedStatus = activity.objectiveSatisfiedStatus;\n        globalObjective.satisfiedStatusKnown = true;\n      }\n\n      // 4. Write normalized measure from local to global (if writeNormalizedMeasure is true)\n      if (globalObjective.writeNormalizedMeasure && activity.objectiveMeasureStatus) {\n        globalObjective.normalizedMeasure = activity.objectiveNormalizedMeasure;\n        globalObjective.normalizedMeasureKnown = true;\n\n        // Update global satisfaction based on measure if satisfiedByMeasure is true\n        if (globalObjective.satisfiedByMeasure) {\n          const scaledPassingScore = activity.scaledPassingScore || 0.7;\n          globalObjective.satisfiedStatus = activity.objectiveNormalizedMeasure >= scaledPassingScore;\n          globalObjective.satisfiedStatusKnown = true;\n        }\n      }\n\n      // 5. Handle objective completion status synchronization\n      if (globalObjective.writeCompletionStatus && activity.completionStatus !== \"unknown\") {\n        globalObjective.completionStatus = activity.completionStatus;\n        globalObjective.completionStatusKnown = true;\n      }\n\n      if (globalObjective.readCompletionStatus && globalObjective.completionStatusKnown) {\n        activity.completionStatus = globalObjective.completionStatus;\n      }\n\n      // 6. Handle progress measure synchronization\n      if (globalObjective.writeProgressMeasure && activity.progressMeasureStatus) {\n        globalObjective.progressMeasure = activity.progressMeasure;\n        globalObjective.progressMeasureKnown = true;\n      }\n\n      if (globalObjective.readProgressMeasure && globalObjective.progressMeasureKnown) {\n        activity.progressMeasure = globalObjective.progressMeasure;\n        activity.progressMeasureStatus = true;\n      }\n\n      // 7. Update activity attempt data based on global state\n      if (globalObjective.updateAttemptData) {\n        this.updateActivityAttemptData(activity, globalObjective);\n      }\n\n      // 8. Fire synchronization event for monitoring/logging\n      this.eventCallback?.(\"objective_synchronized\", {\n        activityId: activity.id,\n        objectiveId,\n        localState: localObjective,\n        globalState: globalObjective,\n        synchronizationTime: new Date().toISOString()\n      });\n\n    } catch (error) {\n      // Log synchronization error but don't fail the rollup process\n      this.eventCallback?.(\"objective_sync_error\", {\n        activityId: activity.id,\n        objectiveId,\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: new Date().toISOString()\n      });\n    }\n  }\n\n  /**\n   * Update activity attempt data based on global objective state\n   */\n  private updateActivityAttemptData(activity: Activity, globalObjective: any): void {\n    try {\n      // Update attempt completion based on global objective satisfaction\n      if (globalObjective.satisfiedStatusKnown && globalObjective.satisfiedStatus) {\n        // If global objective is satisfied, update local completion data\n        if (activity.completionStatus === \"unknown\" || activity.completionStatus === \"incomplete\") {\n          activity.completionStatus = \"completed\";\n        }\n\n        // Update success status based on objective satisfaction\n        if (activity.successStatus === \"unknown\") {\n          activity.successStatus = \"passed\";\n        }\n      }\n\n      // Update attempt count if global objective indicates new attempt\n      if (globalObjective.attemptCount && globalObjective.attemptCount > activity.attemptCount) {\n        activity.attemptCount = globalObjective.attemptCount;\n      }\n\n      // Update completion amount based on progress measure\n      if (globalObjective.progressMeasureKnown && globalObjective.progressMeasure !== undefined) {\n        activity.attemptCompletionAmount = globalObjective.progressMeasure;\n      }\n\n      // Update absolute duration from global timing data\n      if (globalObjective.attemptAbsoluteDuration) {\n        activity.attemptAbsoluteDuration = globalObjective.attemptAbsoluteDuration;\n      }\n\n      if (globalObjective.attemptExperiencedDuration) {\n        activity.attemptExperiencedDuration = globalObjective.attemptExperiencedDuration;\n      }\n\n      // Update activity-level durations\n      if (globalObjective.activityAbsoluteDuration) {\n        activity.activityAbsoluteDuration = globalObjective.activityAbsoluteDuration;\n      }\n\n      if (globalObjective.activityExperiencedDuration) {\n        activity.activityExperiencedDuration = globalObjective.activityExperiencedDuration;\n      }\n\n      // Update location if provided by global state\n      if (globalObjective.location !== undefined) {\n        activity.location = globalObjective.location;\n      }\n\n      // Update suspension state based on global objective\n      if (globalObjective.suspendData !== undefined) {\n        activity.isSuspended = globalObjective.suspendData.length > 0;\n      }\n\n    } catch (error) {\n      // Log attempt data update error\n      this.eventCallback?.(\"attempt_data_update_error\", {\n        activityId: activity.id,\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: new Date().toISOString()\n      });\n    }\n  }\n\n  /**\n   * Get local objective state\n   */\n  private getLocalObjectiveState(activity: Activity, objectiveId: string): any {\n    // Return current local state for the objective\n    return {\n      id: objectiveId,\n      satisfiedStatus: activity.objectiveSatisfiedStatus,\n      measureStatus: activity.objectiveMeasureStatus,\n      normalizedMeasure: activity.objectiveNormalizedMeasure,\n      scaledPassingScore: activity.scaledPassingScore\n    };\n  }\n\n  /**\n   * INTEGRATION: Identify Activity Clusters\n   * Identifies clusters among child activities for cross-cluster dependency processing\n   * @param {Activity[]} children - Child activities to analyze\n   * @return {Activity[]} - Array of identified clusters\n   */\n  private identifyActivityClusters(children: Activity[]): Activity[] {\n    const clusters: Activity[] = [];\n\n    for (const child of children) {\n      // An activity is considered a cluster if it has children and flow controls\n      if (child.children.length > 0 && child.sequencingControls.flow) {\n        clusters.push(child);\n      }\n    }\n\n    return clusters;\n  }\n\n}\n","import { Activity } from \"./activity\";\nimport { SelectionTiming, RandomizationTiming } from \"./sequencing_controls\";\n\n/**\n * Class implementing SCORM 2004 Selection and Randomization processes (SR.1 and SR.2)\n */\nexport class SelectionRandomization {\n  /**\n   * Select Children Process (SR.1)\n   * Selects a subset of child activities based on selection controls\n   * @param {Activity} activity - The parent activity whose children need to be selected\n   * @return {Activity[]} - The selected child activities\n   */\n  public static selectChildrenProcess(activity: Activity): Activity[] {\n    const controls = activity.sequencingControls;\n    const children = [...activity.children]; // Create a copy to avoid mutating original\n\n    // Check if selection should occur\n    if (controls.selectionTiming === SelectionTiming.NEVER) {\n      return children;\n    }\n\n    // Check if selection has already been done (for ONCE timing)\n    if (\n      controls.selectionTiming === SelectionTiming.ONCE &&\n      controls.selectionCountStatus\n    ) {\n      return children;\n    }\n\n    // Check if we need to select children\n    const selectCount = controls.selectCount;\n    if (selectCount === null || selectCount >= children.length) {\n      // Mark selection as done if timing is ONCE\n      if (controls.selectionTiming === SelectionTiming.ONCE) {\n        controls.selectionCountStatus = true;\n      }\n      return children;\n    }\n\n    // Perform selection\n    const selectedChildren: Activity[] = [];\n    const availableIndices = children.map((_, index) => index);\n\n    // Randomly select children\n    for (let i = 0; i < selectCount; i++) {\n      if (availableIndices.length === 0) break;\n      \n      const randomIndex = Math.floor(Math.random() * availableIndices.length);\n      const childIndex = availableIndices[randomIndex];\n      if (childIndex !== undefined && children[childIndex]) {\n        selectedChildren.push(children[childIndex]);\n      }\n      \n      // Remove selected index from available indices\n      availableIndices.splice(randomIndex, 1);\n    }\n\n    // Mark selection as done only if timing is ONCE\n    if (controls.selectionTiming === SelectionTiming.ONCE) {\n      controls.selectionCountStatus = true;\n    }\n\n    // Hide non-selected children from choice\n    for (const child of children) {\n      if (!selectedChildren.includes(child)) {\n        child.isHiddenFromChoice = true;\n        child.isAvailable = false;\n      }\n    }\n\n    return selectedChildren;\n  }\n\n  /**\n   * Randomize Children Process (SR.2)\n   * Randomizes the order of child activities based on randomization controls\n   * @param {Activity} activity - The parent activity whose children need to be randomized\n   * @return {Activity[]} - The randomized child activities\n   */\n  public static randomizeChildrenProcess(activity: Activity): Activity[] {\n    const controls = activity.sequencingControls;\n    const children = [...activity.children]; // Create a copy to avoid mutating original\n\n    // Check if randomization should occur\n    if (controls.randomizationTiming === RandomizationTiming.NEVER) {\n      return children;\n    }\n\n    // Check if randomization has already been done (for ONCE timing)\n    if (\n      controls.randomizationTiming === RandomizationTiming.ONCE &&\n      controls.reorderChildren\n    ) {\n      return children;\n    }\n\n    // Check if we need to randomize\n    if (!controls.randomizeChildren) {\n      return children;\n    }\n\n    // Perform Fisher-Yates shuffle\n    const randomizedChildren = [...children];\n    for (let i = randomizedChildren.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const tempI = randomizedChildren[i];\n      const tempJ = randomizedChildren[j];\n      if (tempI && tempJ) {\n        randomizedChildren[i] = tempJ;\n        randomizedChildren[j] = tempI;\n      }\n    }\n\n    // Mark randomization as done only if timing is ONCE\n    if (controls.randomizationTiming === RandomizationTiming.ONCE) {\n      controls.reorderChildren = true;\n    }\n\n    // Update the activity's children array with the new order\n    activity.children.length = 0;\n    activity.children.push(...randomizedChildren);\n\n    return randomizedChildren;\n  }\n\n  /**\n   * Apply selection and randomization to an activity\n   * This combines both SR.1 and SR.2 processes\n   * @param {Activity} activity - The parent activity\n   * @param {boolean} isNewAttempt - Whether this is a new attempt on the activity\n   * @return {Activity[]} - The processed child activities\n   */\n  public static applySelectionAndRandomization(\n    activity: Activity,\n    isNewAttempt: boolean = false,\n  ): Activity[] {\n    const controls = activity.sequencingControls;\n\n    // Check if we should apply selection/randomization\n    let shouldApplySelection = false;\n    let shouldApplyRandomization = false;\n\n    // For ON_EACH_NEW_ATTEMPT timing, only apply on new attempts\n    if (controls.selectionTiming === SelectionTiming.ON_EACH_NEW_ATTEMPT) {\n      shouldApplySelection = isNewAttempt;\n      if (isNewAttempt) {\n        controls.selectionCountStatus = false;\n      }\n    } else if (controls.selectionTiming === SelectionTiming.ONCE) {\n      shouldApplySelection = !controls.selectionCountStatus;\n    }\n\n    if (controls.randomizationTiming === RandomizationTiming.ON_EACH_NEW_ATTEMPT) {\n      shouldApplyRandomization = isNewAttempt;\n      if (isNewAttempt) {\n        controls.reorderChildren = false;\n      }\n    } else if (controls.randomizationTiming === RandomizationTiming.ONCE) {\n      shouldApplyRandomization = !controls.reorderChildren;\n    }\n\n    // Apply selection first if needed\n    if (shouldApplySelection) {\n      this.selectChildrenProcess(activity);\n    }\n\n    // Then apply randomization if needed\n    if (shouldApplyRandomization) {\n      this.randomizeChildrenProcess(activity);\n    }\n\n    // Get the final processed children\n    const processedChildren = activity.children.filter(child => child.isAvailable);\n    \n    // Store the processed children on the activity\n    activity.setProcessedChildren(processedChildren);\n    \n    return processedChildren;\n  }\n\n  /**\n   * Check if selection is needed for an activity\n   * @param {Activity} activity - The activity to check\n   * @return {boolean} - True if selection is needed\n   */\n  public static isSelectionNeeded(activity: Activity): boolean {\n    const controls = activity.sequencingControls;\n    \n    if (controls.selectionTiming === SelectionTiming.NEVER) {\n      return false;\n    }\n\n    if (\n      controls.selectionTiming === SelectionTiming.ONCE &&\n      controls.selectionCountStatus\n    ) {\n      return false;\n    }\n\n    return controls.selectCount !== null && controls.selectCount < activity.children.length;\n  }\n\n  /**\n   * Check if randomization is needed for an activity\n   * @param {Activity} activity - The activity to check\n   * @return {boolean} - True if randomization is needed\n   */\n  public static isRandomizationNeeded(activity: Activity): boolean {\n    const controls = activity.sequencingControls;\n    \n    if (controls.randomizationTiming === RandomizationTiming.NEVER) {\n      return false;\n    }\n\n    if (\n      controls.randomizationTiming === RandomizationTiming.ONCE &&\n      controls.reorderChildren\n    ) {\n      return false;\n    }\n\n    return controls.randomizeChildren;\n  }\n}","import { Activity } from \"./activity\";\nimport { ActivityTree } from \"./activity_tree\";\nimport {\n  RuleActionType,\n  RuleConditionOperator,\n  SequencingRule,\n  SequencingRules\n} from \"./sequencing_rules\";\nimport { SequencingControls } from \"./sequencing_controls\";\nimport { ADLNav } from \"../adl\";\nimport { getDurationAsSeconds } from \"../../../utilities\";\nimport { scorm2004_regex } from \"../../../constants/regex\";\nimport { SelectionRandomization } from \"./selection_randomization\";\n\n/**\n * Enum for sequencing request types\n */\nexport enum SequencingRequestType {\n  START = \"start\",\n  RESUME_ALL = \"resumeAll\",\n  CONTINUE = \"continue\",\n  PREVIOUS = \"previous\",\n  CHOICE = \"choice\",\n  JUMP = \"jump\",\n  EXIT = \"exit\",\n  EXIT_ALL = \"exitAll\",\n  ABANDON = \"abandon\",\n  ABANDON_ALL = \"abandonAll\",\n  SUSPEND_ALL = \"suspendAll\",\n  RETRY = \"retry\",\n  RETRY_ALL = \"retryAll\",\n}\n\n/**\n * Enum for delivery request types\n */\nexport enum DeliveryRequestType {\n  DELIVER = \"deliver\",\n  DO_NOT_DELIVER = \"doNotDeliver\",\n}\n\n/**\n * Class representing the result of a sequencing process\n */\nexport class SequencingResult {\n  public deliveryRequest: DeliveryRequestType;\n  public targetActivity: Activity | null;\n  public exception: string | null;\n\n  constructor(\n    deliveryRequest: DeliveryRequestType = DeliveryRequestType.DO_NOT_DELIVER,\n    targetActivity: Activity | null = null,\n    exception: string | null = null\n  ) {\n    this.deliveryRequest = deliveryRequest;\n    this.targetActivity = targetActivity;\n    this.exception = exception;\n  }\n}\n\n/**\n * Class implementing SCORM 2004 sequencing processes\n */\nexport class SequencingProcess {\n  private activityTree: ActivityTree;\n  private sequencingRules: SequencingRules | null;\n  private sequencingControls: SequencingControls | null;\n  private adlNav: ADLNav | null;\n  private now: () => Date;\n  private getAttemptElapsedSecondsHook: ((activity: Activity) => number) | undefined;\n  private getActivityElapsedSecondsHook: ((activity: Activity) => number) | undefined;\n\n  constructor(\n    activityTree: ActivityTree,\n    sequencingRules?: SequencingRules | null,\n    sequencingControls?: SequencingControls | null,\n    adlNav: ADLNav | null = null,\n    options?: {\n      now?: () => Date;\n      getAttemptElapsedSeconds?: (activity: Activity) => number;\n      getActivityElapsedSeconds?: (activity: Activity) => number;\n    }\n  ) {\n    this.activityTree = activityTree;\n    this.sequencingRules = sequencingRules || null;\n    this.sequencingControls = sequencingControls || null;\n    this.adlNav = adlNav;\n    this.now = options?.now || (() => new Date());\n    this.getAttemptElapsedSecondsHook = (options?.getAttemptElapsedSeconds as\n      | ((activity: Activity) => number)\n      | undefined);\n    this.getActivityElapsedSecondsHook = (options?.getActivityElapsedSeconds as\n      | ((activity: Activity) => number)\n      | undefined);\n  }\n\n  /**\n   * Main Sequencing Request Process (SB.2.12)\n   * This is the main entry point for all navigation requests\n   * @param {SequencingRequestType} request - The sequencing request\n   * @param {string} targetActivityId - The target activity ID (for choice/jump)\n   * @return {SequencingResult} - The result of the sequencing process\n   */\n  public sequencingRequestProcess(\n    request: SequencingRequestType,\n    targetActivityId: string | null = null\n  ): SequencingResult {\n    // Initialize result\n    const result = new SequencingResult();\n\n    // Get current activity\n    const currentActivity = this.activityTree.currentActivity;\n    const suspendedActivity = this.activityTree.suspendedActivity;\n\n    // Process based on request type\n    switch (request) {\n      case SequencingRequestType.START:\n        return this.startSequencingRequestProcess();\n\n      case SequencingRequestType.RESUME_ALL:\n        return this.resumeAllSequencingRequestProcess();\n\n      case SequencingRequestType.CONTINUE:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.continueSequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.PREVIOUS:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.previousSequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.CHOICE:\n        if (!targetActivityId) {\n          result.exception = \"SB.2.12-5\"; // No target specified\n          return result;\n        }\n        return this.choiceSequencingRequestProcess(targetActivityId, currentActivity);\n\n      case SequencingRequestType.JUMP:\n        if (!targetActivityId) {\n          result.exception = \"SB.2.12-5\"; // No target specified\n          return result;\n        }\n        return this.jumpSequencingRequestProcess(targetActivityId);\n\n      case SequencingRequestType.EXIT:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.exitSequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.EXIT_ALL:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.exitAllSequencingRequestProcess();\n\n      case SequencingRequestType.ABANDON:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.abandonSequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.ABANDON_ALL:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.abandonAllSequencingRequestProcess();\n\n      case SequencingRequestType.SUSPEND_ALL:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.suspendAllSequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.RETRY:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.retrySequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.RETRY_ALL:\n        return this.retryAllSequencingRequestProcess();\n\n      default:\n        result.exception = \"SB.2.12-6\"; // Undefined sequencing request\n        return result;\n    }\n  }\n\n  /**\n   * Start Sequencing Request Process (SB.2.5)\n   * Determines the first activity to deliver when starting\n   * @return {SequencingResult}\n   */\n  private startSequencingRequestProcess(): SequencingResult {\n    const result = new SequencingResult();\n    const root = this.activityTree.root;\n\n    if (!root) {\n      result.exception = \"SB.2.5-1\"; // No activity tree\n      return result;\n    }\n\n    // Check if sequencing session has already begun\n    if (this.activityTree.currentActivity !== null) {\n      result.exception = \"SB.2.5-2\"; // Sequencing session already begun\n      return result;\n    }\n\n    // For START, we need to flow into the activity tree from the root\n    // Start with the root and find first deliverable leaf activity\n    const deliverableActivity = this.findFirstDeliverableActivity(root);\n\n    if (!deliverableActivity) {\n      result.exception = \"SB.2.5-3\"; // No activity available\n      return result;\n    }\n\n    // Deliver the identified activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = deliverableActivity;\n    return result;\n  }\n\n  /**\n   * Find First Deliverable Activity\n   * Recursively searches from the given activity to find the first deliverable leaf\n   * @param {Activity} activity - The activity to start searching from\n   * @return {Activity | null} - The first deliverable activity, or null if none found\n   */\n  private findFirstDeliverableActivity(activity: Activity): Activity | null {\n    // Check if this activity can be delivered (leaf activity)\n    if (activity.children.length === 0) {\n      // This is a leaf - check if it can be delivered\n      if (this.checkActivityProcess(activity)) {\n        return activity;\n      }\n      return null;\n    }\n\n    // This is a cluster - look through children for deliverable activity\n    this.ensureSelectionAndRandomization(activity);\n    const children = activity.getAvailableChildren();\n\n    for (const child of children) {\n      const deliverable = this.findFirstDeliverableActivity(child);\n      if (deliverable) {\n        return deliverable;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Resume All Sequencing Request Process (SB.2.6)\n   * Resumes a suspended session\n   * @return {SequencingResult}\n   */\n  private resumeAllSequencingRequestProcess(): SequencingResult {\n    const result = new SequencingResult();\n    const suspendedActivity = this.activityTree.suspendedActivity;\n\n    if (!suspendedActivity) {\n      result.exception = \"SB.2.6-1\"; // No suspended activity\n      return result;\n    }\n\n    if (this.activityTree.currentActivity !== null) {\n      result.exception = \"SB.2.6-2\"; // Current activity already defined\n      return result;\n    }\n\n    // Deliver the suspended activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = suspendedActivity;\n    return result;\n  }\n\n  /**\n   * Continue Sequencing Request Process (SB.2.7)\n   * Processes continue navigation request\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private continueSequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Check if the current activity has been terminated\n    if (currentActivity.isActive) {\n      result.exception = \"SB.2.7-1\"; // Current activity not terminated\n      return result;\n    }\n\n    // Check if flow is allowed from the current activity's parent\n    if (currentActivity.parent && !currentActivity.parent.sequencingControls.flow) {\n      result.exception = \"SB.2.7-2\"; // No activity available (flow disabled)\n      return result;\n    }\n\n    // Flow from current activity to find next using flow subprocess\n    const flowResult = this.flowSubprocess(currentActivity, FlowSubprocessMode.FORWARD);\n\n    if (!flowResult) {\n      result.exception = \"SB.2.7-2\"; // No activity available\n      return result;\n    }\n\n    // Deliver the identified activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = flowResult;\n    return result;\n  }\n\n  /**\n   * Previous Sequencing Request Process (SB.2.8)\n   * Processes previous navigation request\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private previousSequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Check if the current activity has been terminated\n    if (currentActivity.isActive) {\n      result.exception = \"SB.2.8-1\"; // Current activity not terminated\n      return result;\n    }\n\n    // Check if flow is allowed from the current activity's parent\n    if (currentActivity.parent && !currentActivity.parent.sequencingControls.flow) {\n      result.exception = \"SB.2.8-2\"; // No activity available (flow disabled)\n      return result;\n    }\n\n    // Check if backward flow is allowed (forwardOnly control)\n    if (currentActivity.parent && currentActivity.parent.sequencingControls.forwardOnly) {\n      result.exception = \"SB.2.8-2\"; // No activity available (backward flow disabled)\n      return result;\n    }\n\n    // Flow from current activity to find previous using flow subprocess\n    const flowResult = this.flowSubprocess(currentActivity, FlowSubprocessMode.BACKWARD);\n\n    if (!flowResult) {\n      result.exception = \"SB.2.8-2\"; // No activity available\n      return result;\n    }\n\n    // Deliver the identified activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = flowResult;\n    return result;\n  }\n\n  /**\n   * Choice Sequencing Request Process (SB.2.9)\n   * Processes choice navigation request\n   * @param {string} targetActivityId - The target activity ID\n   * @param {Activity | null} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private choiceSequencingRequestProcess(\n    targetActivityId: string,\n    currentActivity: Activity | null\n  ): SequencingResult {\n    const result = new SequencingResult();\n\n    // Find the target activity\n    let targetActivity = this.activityTree.getActivity(targetActivityId);\n    if (!targetActivity) {\n      result.exception = \"SB.2.9-1\"; // Target activity does not exist\n      return result;\n    }\n\n    // Check if target is in the activity tree\n    if (!this.isActivityInTree(targetActivity)) {\n      result.exception = \"SB.2.9-2\"; // Target activity not in tree\n      return result;\n    }\n\n    // Cannot choose the root activity\n    if (targetActivity === this.activityTree.root) {\n      result.exception = \"SB.2.9-3\"; // Cannot choose root\n      return result;\n    }\n\n    // Path to root validation\n    let activity: Activity | null = targetActivity;\n    while (activity) {\n      if (activity.isHiddenFromChoice) {\n        result.exception = \"SB.2.9-4\"; // Activity hidden from choice\n        return result;\n      }\n\n      // Check if choice control is constrained\n      if (activity.parent && !activity.parent.sequencingControls.choice) {\n        result.exception = \"SB.2.9-5\"; // Choice control is not allowed\n        return result;\n      }\n\n      activity = activity.parent;\n    }\n\n    // Check if current activity needs to be terminated\n    if (currentActivity && currentActivity.isActive) {\n      result.exception = \"SB.2.9-6\"; // Current activity not terminated\n      return result;\n    }\n\n    // Find common ancestor\n    const commonAncestor = this.findCommonAncestor(currentActivity, targetActivity);\n\n    // Terminate descendent attempts from common ancestor\n    if (currentActivity) {\n      this.terminateDescendentAttemptsProcess(commonAncestor || this.activityTree.root!);\n    }\n\n    // Form the activity path from target to common ancestor\n    const activityPath: Activity[] = [];\n    activity = targetActivity;\n    while (activity && activity !== commonAncestor) {\n      activityPath.unshift(activity);\n      activity = activity.parent;\n    }\n\n    // Evaluate each activity in the path\n    for (const pathActivity of activityPath) {\n      if (!this.checkActivityProcess(pathActivity)) {\n        // Sequencing ends with no delivery\n        return result;\n      }\n    }\n\n    // If target is not a leaf, flow forward to find a leaf\n    if (targetActivity.children.length > 0) {\n      this.ensureSelectionAndRandomization(targetActivity);\n      const availableChildren = targetActivity.getAvailableChildren();\n\n      const flowResult = this.flowActivityTraversalSubprocess(\n        targetActivity,\n        true, // direction forward\n        true, // consider children\n        FlowSubprocessMode.FORWARD\n      );\n\n      if (!flowResult) {\n        result.exception = \"SB.2.9-7\"; // No activity available from target\n        return result;\n      }\n\n      targetActivity = flowResult;\n    }\n\n    // Deliver the identified activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = targetActivity;\n    return result;\n  }\n\n  /**\n   * Jump Sequencing Request Process (SB.2.13)\n   * Processes jump navigation request - SCORM 2004 4th Edition\n   * @param {string} targetActivityId - The target activity ID\n   * @return {SequencingResult}\n   */\n  private jumpSequencingRequestProcess(targetActivityId: string): SequencingResult {\n    const result = new SequencingResult();\n\n    // Find the target activity\n    const targetActivity = this.activityTree.getActivity(targetActivityId);\n    if (!targetActivity) {\n      result.exception = \"SB.2.13-1\"; // Target activity does not exist\n      return result;\n    }\n\n    // Check if target is in the activity tree\n    if (!this.isActivityInTree(targetActivity)) {\n      result.exception = \"SB.2.13-2\"; // Target activity not in tree\n      return result;\n    }\n\n    // Check if target is available\n    if (!targetActivity.isAvailable) {\n      result.exception = \"SB.2.13-3\"; // Target not available\n      return result;\n    }\n\n    // Deliver the target activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = targetActivity;\n    return result;\n  }\n\n  /**\n   * Exit Sequencing Request Process\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private exitSequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Check if exit is allowed\n    if (!currentActivity.parent) {\n      result.exception = \"SB.2.11-1\"; // Exit not allowed - no parent\n      return result;\n    }\n\n    // Check parent's sequencing controls\n    if (!currentActivity.parent.sequencingControls.choiceExit) {\n      result.exception = \"SB.2.11-2\"; // Exit not allowed by sequencing controls\n      return result;\n    }\n\n    // Terminate current activity\n    this.terminateDescendentAttemptsProcess(currentActivity);\n\n    return result;\n  }\n\n  /**\n   * Exit All Sequencing Request Process\n   * @return {SequencingResult}\n   */\n  private exitAllSequencingRequestProcess(): SequencingResult {\n    const result = new SequencingResult();\n\n    // Terminate all activities\n    if (this.activityTree.root) {\n      this.terminateDescendentAttemptsProcess(this.activityTree.root);\n    }\n\n    return result;\n  }\n\n  /**\n   * Abandon Sequencing Request Process\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private abandonSequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Set current activity as abandoned\n    currentActivity.isActive = false;\n    this.activityTree.currentActivity = currentActivity.parent;\n\n    return result;\n  }\n\n  /**\n   * Abandon All Sequencing Request Process\n   * @return {SequencingResult}\n   */\n  private abandonAllSequencingRequestProcess(): SequencingResult {\n    const result = new SequencingResult();\n\n    // Abandon all activities\n    this.activityTree.currentActivity = null;\n\n    return result;\n  }\n\n  /**\n   * Suspend All Sequencing Request Process\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private suspendAllSequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Check if suspend is allowed\n    if (currentActivity !== this.activityTree.root) {\n      currentActivity.isSuspended = true;\n      this.activityTree.suspendedActivity = currentActivity;\n      this.activityTree.currentActivity = null;\n    } else {\n      result.exception = \"SB.2.15-1\"; // Cannot suspend root\n    }\n\n    return result;\n  }\n\n  /**\n   * Retry Sequencing Request Process\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private retrySequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Terminate current activity\n    this.terminateDescendentAttemptsProcess(currentActivity);\n\n    // Increment attempt count\n    currentActivity.incrementAttemptCount();\n\n    // Deliver the activity again\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = currentActivity;\n    return result;\n  }\n\n  /**\n   * Retry All Sequencing Request Process\n   * @return {SequencingResult}\n   */\n  private retryAllSequencingRequestProcess(): SequencingResult {\n    // Clear current activity to allow restart\n    this.activityTree.currentActivity = null;\n\n    // Restart from the root\n    return this.startSequencingRequestProcess();\n  }\n\n  /**\n   * Ensure selection and randomization is applied to an activity\n   * @param {Activity} activity - The activity to process\n   */\n  private ensureSelectionAndRandomization(activity: Activity): void {\n    // Check if processing is needed\n    if (activity.getAvailableChildren() === activity.children &&\n      (SelectionRandomization.isSelectionNeeded(activity) ||\n        SelectionRandomization.isRandomizationNeeded(activity))) {\n      SelectionRandomization.applySelectionAndRandomization(activity, activity.isNewAttempt);\n    }\n  }\n\n  /**\n   * Flow Activity Traversal Subprocess (SB.2.2)\n   * Checks if an activity can be delivered and flows into clusters if needed\n   */\n  private flowActivityTraversalSubprocess(\n    activity: Activity,\n    _direction: boolean,\n    considerChildren: boolean,\n    mode: FlowSubprocessMode\n  ): Activity | null {\n    // Check if the activity is available\n    if (!activity.isAvailable) {\n      return null;\n    }\n\n    // Check sequencing control modes\n    const parent = activity.parent;\n    if (parent && !parent.sequencingControls.flow) {\n      return null;\n    }\n\n    // Activity is a cluster, try to flow into it to find a deliverable leaf\n    if (considerChildren) {\n      this.ensureSelectionAndRandomization(activity);\n      const availableChildren = activity.getAvailableChildren();\n\n      for (const child of availableChildren) {\n        const deliverable = this.flowActivityTraversalSubprocess(\n          child,\n          mode === FlowSubprocessMode.FORWARD,\n          true,\n          mode\n        );\n        if (deliverable) {\n          return deliverable;\n        }\n      }\n    }\n\n    // If activity is a leaf (no children), check if it can be delivered\n    if (activity.children.length === 0) {\n      // Check if this activity was intended to be a cluster but is empty\n      // A cluster typically has flow control enabled\n      if (activity.sequencingControls.flow) {\n        // This appears to be an empty cluster, not a true leaf\n        return null;\n      }\n\n      if (this.checkActivityProcess(activity)) {\n        return activity;\n      }\n      return null;\n    }\n\n    return null;\n  }\n\n  /**\n   * Check Activity Process (SB.2.3)\n   * Validates if an activity can be delivered\n   */\n  private checkActivityProcess(activity: Activity): boolean {\n    // Check if activity is available\n    if (!activity.isAvailable) {\n      return false;\n    }\n\n    // Check limit conditions (UP.1)\n    if (this.limitConditionsCheckProcess(activity)) {\n      return false; // Activity violates limit conditions\n    }\n\n    // Check pre-condition rules using UP.2\n    const preConditionResult = this.sequencingRulesCheckProcess(\n      activity,\n      activity.sequencingRules.preConditionRules\n    );\n\n    return preConditionResult !== RuleActionType.SKIP &&\n      preConditionResult !== RuleActionType.DISABLED;\n  }\n\n  /**\n   * Terminate Descendent Attempts Process (SB.2.4)\n   * Ends attempts on an activity and its descendants\n   */\n  private terminateDescendentAttemptsProcess(activity: Activity, skipExitRules: boolean = false): void {\n    // Apply Exit Action Rules (TB.2.1) first to check for exit actions\n    let exitAction = null;\n    if (!skipExitRules) {\n      exitAction = this.exitActionRulesSubprocess(activity);\n    }\n\n    // End attempt on the activity\n    activity.isActive = false;\n\n    // Recursively terminate descendants\n    // Use all children here, not just available ones, since we need to terminate all\n    for (const child of activity.children) {\n      this.terminateDescendentAttemptsProcess(child, skipExitRules);\n    }\n\n    // Process deferred exit actions after termination to avoid recursion\n    if (exitAction && !skipExitRules) {\n      this.processDeferredExitAction(exitAction, activity);\n    }\n  }\n\n  /**\n   * Exit Action Rules Subprocess (TB.2.1)\n   * Evaluates the exit condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate exit rules for\n   * @return {RuleActionType | null} - The exit action to process, if any\n   * @private\n   */\n  private exitActionRulesSubprocess(activity: Activity): RuleActionType | null {\n    // Evaluate exit condition rules using UP.2\n    const exitAction = this.sequencingRulesCheckProcess(\n      activity,\n      activity.sequencingRules.exitConditionRules\n    );\n\n    // Only certain actions are valid for exit condition rules\n    if (exitAction === RuleActionType.EXIT ||\n      exitAction === RuleActionType.EXIT_PARENT ||\n      exitAction === RuleActionType.EXIT_ALL) {\n      return exitAction;\n    }\n\n    return null;\n  }\n\n  /**\n   * Process deferred exit action after termination\n   * @param {RuleActionType} exitAction - The exit action to process\n   * @param {Activity} activity - The activity that triggered the exit action\n   * @private\n   */\n  private processDeferredExitAction(exitAction: RuleActionType, activity: Activity): void {\n    switch (exitAction) {\n      case RuleActionType.EXIT:\n        // Exit terminates the current attempt on the activity\n        // Already handled by terminateDescendentAttemptsProcess\n        break;\n\n      case RuleActionType.EXIT_PARENT:\n        // Exit parent terminates the current attempt on the parent activity\n        if (activity.parent && activity.parent.isActive) {\n          this.terminateDescendentAttemptsProcess(activity.parent, true);\n        }\n        break;\n\n      case RuleActionType.EXIT_ALL:\n        // Exit all terminates all activities\n        if (this.activityTree.root && this.activityTree.root !== activity) {\n          // Only process if we haven't already terminated the root\n          const allActivities = this.activityTree.getAllActivities();\n          const anyActive = allActivities.some(a => a.isActive);\n          if (anyActive) {\n            this.terminateDescendentAttemptsProcess(this.activityTree.root, true);\n          }\n        }\n        break;\n    }\n  }\n\n  /**\n   * Post Condition Rules Subprocess (TB.2.2)\n   * Evaluates the post-condition rules for an activity after delivery\n   * @param {Activity} activity - The activity to evaluate post-condition rules for\n   * @return {RuleActionType | null} - The action to take, if any\n   * @private\n   */\n  private postConditionRulesSubprocess(activity: Activity): RuleActionType | null {\n    // Evaluate post-condition rules using UP.2\n    const postAction = this.sequencingRulesCheckProcess(\n      activity,\n      activity.sequencingRules.postConditionRules\n    );\n\n    // Only certain actions are valid for post-condition rules\n    const validActions = [\n      RuleActionType.EXIT_PARENT,\n      RuleActionType.EXIT_ALL,\n      RuleActionType.RETRY,\n      RuleActionType.RETRY_ALL,\n      RuleActionType.CONTINUE,\n      RuleActionType.PREVIOUS,\n      RuleActionType.STOP_FORWARD_TRAVERSAL,\n    ];\n\n    if (postAction && validActions.includes(postAction)) {\n      return postAction;\n    }\n\n    return null;\n  }\n\n  /**\n   * Validate Sequencing Request\n   * Priority 3 Gap: Comprehensive sequencing request validation\n   * @param {SequencingRequestType} request - The sequencing request\n   * @param {string | null} targetActivityId - Target activity ID\n   * @return {{valid: boolean, exception: string | null}} - Validation result\n   */\n  private validateSequencingRequest(request: SequencingRequestType, targetActivityId: string | null): {\n    valid: boolean,\n    exception: string | null\n  } {\n    // Validate request type\n    const validRequestTypes = Object.values(SequencingRequestType);\n    if (!validRequestTypes.includes(request)) {\n      return { valid: false, exception: \"SB.2.12-6\" };\n    }\n\n    // Validate target activity ID for choice and jump requests\n    if ((request === SequencingRequestType.CHOICE || request === SequencingRequestType.JUMP) && !targetActivityId) {\n      return { valid: false, exception: \"SB.2.12-5\" };\n    }\n\n    // Additional request-specific validation\n    const requestSpecificValidation = this.validateRequestSpecificConstraints(request, targetActivityId);\n    if (!requestSpecificValidation.valid) {\n      return requestSpecificValidation;\n    }\n\n    return { valid: true, exception: null };\n  }\n\n  /**\n   * Validate Request-Specific Constraints\n   * @param {SequencingRequestType} request - The sequencing request\n   * @param {string | null} targetActivityId - Target activity ID\n   * @return {{valid: boolean, exception: string | null}} - Validation result\n   */\n  private validateRequestSpecificConstraints(request: SequencingRequestType, targetActivityId: string | null): {\n    valid: boolean,\n    exception: string | null\n  } {\n    const currentActivity = this.activityTree.currentActivity;\n\n    switch (request) {\n      case SequencingRequestType.CONTINUE:\n      case SequencingRequestType.PREVIOUS:\n      case SequencingRequestType.EXIT:\n      case SequencingRequestType.EXIT_ALL:\n      case SequencingRequestType.ABANDON:\n      case SequencingRequestType.ABANDON_ALL:\n      case SequencingRequestType.SUSPEND_ALL:\n      case SequencingRequestType.RETRY:\n        if (!currentActivity) {\n          return { valid: false, exception: \"SB.2.12-1\" };\n        }\n        break;\n      case SequencingRequestType.CHOICE:\n        if (targetActivityId) {\n          const targetActivity = this.activityTree.getActivity(targetActivityId);\n          if (!targetActivity) {\n            return { valid: false, exception: \"SB.2.9-1\" };\n          }\n        }\n        break;\n      case SequencingRequestType.JUMP:\n        if (targetActivityId) {\n          const targetActivity = this.activityTree.getActivity(targetActivityId);\n          if (!targetActivity) {\n            return { valid: false, exception: \"SB.2.13-1\" };\n          }\n        }\n        break;\n    }\n\n    return { valid: true, exception: null };\n  }\n\n  /**\n   * Limit Conditions Check Process (UP.1)\n   * Checks if an activity has exceeded its limit conditions (attempt limit or duration limits)\n   * @param {Activity} activity - The activity to check\n   * @return {boolean} - True if limit conditions are violated, false otherwise\n   * @private\n   */\n  private limitConditionsCheckProcess(activity: Activity): boolean {\n    // Check attempt limit\n    if (activity.attemptLimit !== null && activity.attemptCount >= activity.attemptLimit) {\n      return true; // Attempt limit exceeded\n    }\n\n    // Check attempt absolute duration limit\n    if (activity.attemptAbsoluteDurationLimit !== null) {\n      const attemptDurationMs = this.parseISO8601Duration(activity.attemptExperiencedDuration);\n      const attemptLimitMs = this.parseISO8601Duration(activity.attemptAbsoluteDurationLimit);\n\n      if (attemptDurationMs >= attemptLimitMs) {\n        return true; // Attempt duration limit exceeded\n      }\n    }\n\n    // Check activity absolute duration limit\n    if (activity.activityAbsoluteDurationLimit !== null) {\n      const activityDurationMs = this.parseISO8601Duration(activity.activityExperiencedDuration);\n      const activityLimitMs = this.parseISO8601Duration(activity.activityAbsoluteDurationLimit);\n\n      if (activityDurationMs >= activityLimitMs) {\n        return true; // Activity duration limit exceeded\n      }\n    }\n\n    return false; // No limit conditions violated\n  }\n\n  /**\n   * Parse ISO 8601 duration to milliseconds\n   * @param {string} duration - ISO 8601 duration string\n   * @return {number} - Duration in milliseconds\n   * @private\n   */\n  private parseISO8601Duration(duration: string): number {\n    const regex = /PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?/;\n    const matches = duration.match(regex);\n\n    if (!matches) {\n      return 0;\n    }\n\n    const hours = parseInt(matches[1] || \"0\", 10);\n    const minutes = parseInt(matches[2] || \"0\", 10);\n    const seconds = parseFloat(matches[3] || \"0\");\n\n    return (hours * 3600 + minutes * 60 + seconds) * 1000;\n  }\n\n  /**\n   * Sequencing Rules Check Process (UP.2)\n   * General process for evaluating a set of sequencing rules\n   * @param {Activity} activity - The activity to evaluate rules for\n   * @param {SequencingRule[]} rules - The rules to evaluate\n   * @return {RuleActionType | null} - The action to take, or null if no rules apply\n   * @private\n   */\n  private sequencingRulesCheckProcess(activity: Activity, rules: SequencingRule[]): RuleActionType | null {\n    // Evaluate each rule in order\n    for (const rule of rules) {\n      // Use the Sequencing Rules Check Subprocess (UP.2.1) to evaluate\n      if (this.sequencingRulesCheckSubprocess(activity, rule)) {\n        // Rule condition(s) met, return the action\n        return rule.action;\n      }\n    }\n\n    // No rules applied\n    return null;\n  }\n\n  /**\n   * Sequencing Rules Check Subprocess (UP.2.1)\n   * Evaluates individual sequencing rule conditions\n   * @param {Activity} activity - The activity to evaluate the rule for\n   * @param {SequencingRule} rule - The rule to evaluate\n   * @return {boolean} - True if all rule conditions are met\n   * @private\n   */\n  private sequencingRulesCheckSubprocess(activity: Activity, rule: SequencingRule): boolean {\n    // If no conditions, the rule always applies\n    if (rule.conditions.length === 0) {\n      return true;\n    }\n\n    // Evaluate based on condition combination\n    const conditionCombination = rule.conditionCombination;\n\n    if (conditionCombination === \"all\" || conditionCombination === RuleConditionOperator.AND) {\n      // All conditions must be true\n      return rule.conditions.every((condition) => {\n        // Log evaluation for debugging\n        return condition.evaluate(activity);\n      });\n    } else if (conditionCombination === \"any\" || conditionCombination === RuleConditionOperator.OR) {\n      // At least one condition must be true\n      return rule.conditions.some((condition) => {\n        // Log evaluation for debugging\n        return condition.evaluate(activity);\n      });\n    }\n\n    // Unknown combination, default to false\n    return false;\n  }\n\n  /**\n   * Check if activity is in the activity tree\n   */\n  private isActivityInTree(activity: Activity): boolean {\n    return this.activityTree.getAllActivities().includes(activity);\n  }\n\n  /**\n   * Find common ancestor of two activities\n   */\n  private findCommonAncestor(activity1: Activity | null, activity2: Activity | null): Activity | null {\n    if (!activity1 || !activity2) {\n      return null;\n    }\n\n    // Get ancestors of activity1\n    const ancestors1: Activity[] = [];\n    let current: Activity | null = activity1;\n    while (current) {\n      ancestors1.push(current);\n      current = current.parent;\n    }\n\n    // Find first common ancestor\n    current = activity2;\n    while (current) {\n      if (ancestors1.includes(current)) {\n        return current;\n      }\n      current = current.parent;\n    }\n\n    return null;\n  }\n\n  /**\n   * Flow Subprocess (SB.2.3)\n   * Traverses the activity tree in the specified direction to find a deliverable activity\n   * @param {Activity} fromActivity - The activity to flow from\n   * @param {FlowSubprocessMode} direction - The flow direction\n   * @return {Activity | null} - The next deliverable activity, or null if none found\n   */\n  private flowSubprocess(fromActivity: Activity, direction: FlowSubprocessMode): Activity | null {\n    let candidateActivity: Activity | null = fromActivity;\n    let firstIteration = true;\n\n    // Keep traversing until we find a deliverable activity or run out of candidates\n    while (candidateActivity) {\n      // Get next candidate using flow tree traversal\n      // On first iteration, we want to skip the current activity's children\n      const nextCandidate = this.flowTreeTraversalSubprocess(\n        candidateActivity,\n        direction,\n        firstIteration\n      );\n\n      if (!nextCandidate) {\n        // No more candidates\n        return null;\n      }\n\n      // Check if this candidate can be delivered\n      const deliverable = this.flowActivityTraversalSubprocess(\n        nextCandidate,\n        direction === FlowSubprocessMode.FORWARD,\n        true, // consider children\n        direction\n      );\n\n      if (deliverable) {\n        return deliverable;\n      }\n\n      // Continue with next candidate\n      candidateActivity = nextCandidate;\n      firstIteration = false;\n    }\n\n    return null;\n  }\n\n\n  /**\n   * Flow Tree Traversal Subprocess (SB.2.1)\n   * Traverses the activity tree to find the next activity in the specified direction\n   * @param {Activity} fromActivity - The activity to traverse from\n   * @param {FlowSubprocessMode} direction - The traversal direction\n   * @param {boolean} skipChildren - Whether to skip checking children (for continuing from current)\n   * @return {Activity | null} - The next activity in the tree, or null if none\n   */\n  private flowTreeTraversalSubprocess(\n    fromActivity: Activity,\n    direction: FlowSubprocessMode,\n    skipChildren: boolean = false\n  ): Activity | null {\n    if (direction === FlowSubprocessMode.FORWARD) {\n      // First, check if activity has children (unless we're skipping them)\n      if (!skipChildren) {\n        this.ensureSelectionAndRandomization(fromActivity);\n        const children = fromActivity.getAvailableChildren();\n        if (children.length > 0) {\n          return children[0] || null;\n        }\n      }\n\n      // No children, try to get next sibling\n      let current: Activity | null = fromActivity;\n      while (current) {\n        const nextSibling = this.activityTree.getNextSibling(current);\n        if (nextSibling) {\n          return nextSibling;\n        }\n        // No next sibling, move up to parent\n        current = current.parent;\n      }\n    } else {\n      // Backward direction\n      // Try to get previous sibling\n      const previousSibling = this.activityTree.getPreviousSibling(fromActivity);\n      if (previousSibling) {\n        // If previous sibling has children, go to the last descendant\n        let lastDescendant = previousSibling;\n        while (true) {\n          this.ensureSelectionAndRandomization(lastDescendant);\n          const children = lastDescendant.getAvailableChildren();\n          if (children.length === 0) {\n            break;\n          }\n          const lastChild = children[children.length - 1];\n          if (!lastChild) break;\n          lastDescendant = lastChild;\n        }\n        return lastDescendant;\n      }\n\n      // No previous sibling at this level, try going up to parent and then its previous sibling\n      let current: Activity | null = fromActivity;\n      while (current && current.parent) {\n        const parentPreviousSibling = this.activityTree.getPreviousSibling(current.parent);\n        if (parentPreviousSibling) {\n          // Found a previous sibling of an ancestor, go to its last descendant\n          let lastDescendant = parentPreviousSibling;\n          while (true) {\n            this.ensureSelectionAndRandomization(lastDescendant);\n            const children = lastDescendant.getAvailableChildren();\n            if (children.length === 0) {\n              break;\n            }\n            const lastChild = children[children.length - 1];\n            if (!lastChild) break;\n            lastDescendant = lastChild;\n          }\n          return lastDescendant;\n        }\n        // Move up to grandparent\n        current = current.parent;\n      }\n\n      return null; // Reached beginning of tree\n    }\n\n    return null;\n  }\n\n  /**\n   * Choice Flow Subprocess (SB.2.9.1)\n   * Handles the flow logic specific to choice navigation requests\n   * @param {Activity} targetActivity - The target activity for the choice\n   * @param {Activity | null} commonAncestor - The common ancestor between current and target\n   * @return {Activity | null} - The activity to deliver, or null if flow fails\n   */\n  private choiceFlowSubprocess(\n    targetActivity: Activity,\n    commonAncestor: Activity | null\n  ): Activity | null {\n    // If target is a leaf, it's the delivery candidate\n    if (targetActivity.children.length === 0) {\n      return targetActivity;\n    }\n\n    // If target is a cluster, use choice flow tree traversal\n    return this.choiceFlowTreeTraversalSubprocess(targetActivity);\n  }\n\n  /**\n   * Enhanced Choice Flow Tree Traversal Subprocess (SB.2.9.2)\n   * Priority 3 Gap: Choice Flow Tree Traversal with complete constraint validation\n   * @param {Activity} fromActivity - The cluster activity to traverse from\n   * @return {Activity | null} - A leaf activity for delivery, or null if none found\n   */\n  private choiceFlowTreeTraversalSubprocess(fromActivity: Activity): Activity | null {\n    // Apply selection and randomization\n    this.ensureSelectionAndRandomization(fromActivity);\n    const children = fromActivity.getAvailableChildren();\n\n    // Enhanced constraint validation for choice flow tree traversal\n    const constraintValidation = this.validateChoiceFlowConstraints(fromActivity, children);\n    if (!constraintValidation.valid) {\n      return null;\n    }\n\n    // Find the first available child that can be delivered\n    for (const child of constraintValidation.validChildren) {\n      // Check if child can be delivered or traverse into it\n      const deliverable = this.enhancedChoiceActivityTraversalSubprocess(child);\n      if (deliverable) {\n        return deliverable;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Enhanced Choice Activity Traversal Subprocess (SB.2.4)\n   * Priority 3 Gap: Choice Activity Traversal with stopForwardTraversal and forwardOnly checks\n   * @param {Activity} activity - The activity to check and possibly traverse\n   * @return {Activity | null} - A deliverable activity, or null if none found\n   */\n  private enhancedChoiceActivityTraversalSubprocess(activity: Activity): Activity | null {\n    // Check if activity is available\n    if (!activity.isAvailable) {\n      return null;\n    }\n\n    // Check if activity is hidden from choice\n    if (activity.isHiddenFromChoice) {\n      return null;\n    }\n\n    // Enhanced constraint checks including stopForwardTraversal and forwardOnly\n    const traversalValidation = this.validateChoiceTraversalConstraints(activity);\n    if (!traversalValidation.canTraverse) {\n      return null;\n    }\n\n    // If it's a leaf, check if it can be delivered\n    if (activity.children.length === 0) {\n      if (this.checkActivityProcess(activity)) {\n        return activity;\n      }\n      return null;\n    }\n\n    // If it's a cluster, traverse into it with enhanced validation\n    if (traversalValidation.canTraverseInto) {\n      return this.choiceFlowTreeTraversalSubprocess(activity);\n    }\n\n    return null;\n  }\n\n  /**\n   * Original Choice Activity Traversal Subprocess for backwards compatibility\n   */\n  private choiceActivityTraversalSubprocess(activity: Activity): Activity | null {\n    return this.enhancedChoiceActivityTraversalSubprocess(activity);\n  }\n\n  /**\n   * Evaluate post-condition rules for the current activity\n   * This should be called after an activity has been delivered and the learner has interacted with it\n   * @param {Activity} activity - The activity to evaluate\n   * @return {SequencingRequestType | null} - The sequencing request to process, if any\n   */\n  public evaluatePostConditionRules(activity: Activity): SequencingRequestType | null {\n    const postAction = this.postConditionRulesSubprocess(activity);\n\n    if (!postAction) {\n      return null;\n    }\n\n    // Map post-condition actions to sequencing requests\n    switch (postAction) {\n      case RuleActionType.EXIT_PARENT:\n        // Exit parent will be handled by exit action rules\n        return SequencingRequestType.EXIT;\n\n      case RuleActionType.EXIT_ALL:\n        return SequencingRequestType.EXIT_ALL;\n\n      case RuleActionType.RETRY:\n        return SequencingRequestType.RETRY;\n\n      case RuleActionType.RETRY_ALL:\n        return SequencingRequestType.RETRY_ALL;\n\n      case RuleActionType.CONTINUE:\n        return SequencingRequestType.CONTINUE;\n\n      case RuleActionType.PREVIOUS:\n        return SequencingRequestType.PREVIOUS;\n\n      case RuleActionType.STOP_FORWARD_TRAVERSAL:\n        // Set traversal limiter on controls; not a navigation request\n        activity.sequencingControls.stopForwardTraversal = true;\n        return null;\n\n      default:\n        return null;\n    }\n  }\n\n  /**\n   * Validate Choice Flow Constraints\n   * Priority 3 Gap: Choice Flow Tree Traversal constraint validation\n   * @param {Activity} fromActivity - Activity to traverse from\n   * @param {Activity[]} children - Available children\n   * @return {{valid: boolean, validChildren: Activity[]}} - Validation result\n   */\n  private validateChoiceFlowConstraints(fromActivity: Activity, children: Activity[]): {\n    valid: boolean,\n    validChildren: Activity[]\n  } {\n    const validChildren: Activity[] = [];\n\n    for (const child of children) {\n      // Check if child meets all choice flow constraints\n      if (this.meetsChoiceFlowConstraints(child, fromActivity)) {\n        validChildren.push(child);\n      }\n    }\n\n    return {\n      valid: validChildren.length > 0,\n      validChildren\n    };\n  }\n\n  /**\n   * Check if activity meets choice flow constraints\n   * @param {Activity} activity - Activity to check\n   * @param {Activity} parent - Parent activity\n   * @return {boolean} - True if constraints are met\n   */\n  private meetsChoiceFlowConstraints(activity: Activity, parent: Activity): boolean {\n    // Check basic availability\n    if (!activity.isAvailable || activity.isHiddenFromChoice) {\n      return false;\n    }\n\n    // Check parent constraint controls\n    if (parent.sequencingControls.constrainChoice) {\n      // Apply constrain choice logic specific to flow\n      return this.validateConstrainChoiceForFlow(activity, parent);\n    }\n\n    return true;\n  }\n\n  /**\n   * Validate Choice Traversal Constraints\n   * Priority 3 Gap: stopForwardTraversal and forwardOnly checks\n   * @param {Activity} activity - Activity to validate\n   * @return {{canTraverse: boolean, canTraverseInto: boolean}} - Traversal permissions\n   */\n  private validateChoiceTraversalConstraints(activity: Activity): {\n    canTraverse: boolean,\n    canTraverseInto: boolean\n  } {\n    let canTraverse = true;\n    let canTraverseInto = true;\n\n    // Check constrain choice control\n    if (activity.parent?.sequencingControls.constrainChoice) {\n      // Apply constrainChoice logic that might prevent traversal\n      canTraverse = this.evaluateConstrainChoiceForTraversal(activity);\n    }\n\n    // Check stopForwardTraversal control (if implemented in sequencing controls)\n    if (activity.sequencingControls && activity.sequencingControls.stopForwardTraversal) {\n      canTraverseInto = false;\n    }\n\n    // Check forwardOnly control in parent context\n    if (activity.parent?.sequencingControls.forwardOnly) {\n      // forwardOnly might restrict certain types of choice traversal\n      // depending on the current position and target\n      canTraverseInto = this.evaluateForwardOnlyForChoice(activity);\n    }\n\n    return { canTraverse, canTraverseInto };\n  }\n\n  /**\n   * Validate Constrained Choice Boundaries\n   * Priority 3 Gap: Proper choice boundary checking\n   * @param {Activity | null} currentActivity - Current activity\n   * @param {Activity} targetActivity - Target activity\n   * @return {{valid: boolean, exception: string | null}} - Validation result\n   */\n  private validateConstrainedChoiceBoundaries(currentActivity: Activity | null, targetActivity: Activity): {\n    valid: boolean,\n    exception: string | null\n  } {\n    // Path to root validation with enhanced constraint checking\n    let activity: Activity | null = targetActivity;\n    while (activity) {\n      if (activity.isHiddenFromChoice) {\n        return { valid: false, exception: \"SB.2.9-4\" }; // Activity hidden from choice\n      }\n\n      // Enhanced choice control validation\n      if (activity.parent && !activity.parent.sequencingControls.choice) {\n        return { valid: false, exception: \"SB.2.9-5\" }; // Choice control is not allowed\n      }\n\n      // Check constrained choice boundaries\n      if (activity.parent?.sequencingControls.constrainChoice) {\n        const boundaryCheck = this.checkConstrainedChoiceBoundary(currentActivity, activity, activity.parent);\n        if (!boundaryCheck.valid) {\n          return boundaryCheck;\n        }\n      }\n\n      activity = activity.parent;\n    }\n\n    return { valid: true, exception: null };\n  }\n\n  /**\n   * Helper methods for enhanced choice processing\n   */\n  private validateConstrainChoiceForFlow(activity: Activity, parent: Activity): boolean {\n    // Implement specific constrainChoice logic for flow scenarios according to SCORM 2004\n\n    // If constrainChoice is false, no restrictions apply\n    if (!parent.sequencingControls || !parent.sequencingControls.constrainChoice) {\n      return true;\n    }\n\n    // When constrainChoice is true, choices are restricted based on flow direction\n    const children = parent.children;\n    if (!children || children.length === 0) {\n      return true;\n    }\n\n    const targetIndex = children.indexOf(activity);\n    if (targetIndex === -1) {\n      return false; // Activity not found in parent's children\n    }\n\n    // Get the current activity in the flow\n    const currentActivity = this.getCurrentActivity(parent);\n    if (!currentActivity) {\n      // No current activity, allow choice to first available activity\n      return this.isActivityAvailableForChoice(activity);\n    }\n\n    const currentIndex = children.indexOf(currentActivity);\n    if (currentIndex === -1) {\n      return false; // Current activity not found\n    }\n\n    // Check flow direction constraints\n    if (parent.sequencingControls.flow) {\n      // In forward flow mode with constrainChoice, only allow:\n      // 1. Next activity in sequence\n      // 2. Previously completed activities if forwardOnly is false\n\n      if (targetIndex === currentIndex + 1) {\n        // Next activity - allow if available\n        return this.isActivityAvailableForChoice(activity);\n      }\n\n      if (targetIndex < currentIndex && !parent.sequencingControls.forwardOnly) {\n        // Previous activity - allow if it was completed\n        return activity.completionStatus === \"completed\" ||\n          activity.completionStatus === \"passed\";\n      }\n\n      // All other choices are constrained\n      return false;\n    } else {\n      // Non-flow mode - constrainChoice limits to completed/available activities\n      return this.isActivityAvailableForChoice(activity) &&\n        (activity.completionStatus === \"completed\" ||\n          activity.completionStatus === \"unknown\" ||\n          activity.completionStatus === \"incomplete\");\n    }\n  }\n\n  private evaluateConstrainChoiceForTraversal(activity: Activity): boolean {\n    // Implement constrainChoice evaluation for traversal according to SCORM 2004\n\n    if (!activity.parent) {\n      return true; // Root activity has no traversal constraints\n    }\n\n    const parent = activity.parent;\n\n    // If constrainChoice is false, traversal is allowed\n    if (!parent.sequencingControls || !parent.sequencingControls.constrainChoice) {\n      return true;\n    }\n\n    // When constrainChoice is true, traversal must respect choice constraints\n    // This is evaluated during navigation request processing\n\n    const siblings = parent.children;\n    if (!siblings || siblings.length === 0) {\n      return true;\n    }\n\n    const activityIndex = siblings.indexOf(activity);\n    if (activityIndex === -1) {\n      return false; // Activity not found in siblings\n    }\n\n    // Check if this activity can be reached through constrained choice\n    // 1. Check if activity is available for choice\n    if (!this.isActivityAvailableForChoice(activity)) {\n      return false;\n    }\n\n    // 2. Check traversal path constraints\n    if (parent.sequencingControls.flow) {\n      // In flow mode, check if we can traverse to this activity\n      const currentActivity = this.getCurrentActivity(parent);\n      if (currentActivity) {\n        const currentIndex = siblings.indexOf(currentActivity);\n\n        // If forwardOnly is true, can only traverse forward\n        if (parent.sequencingControls.forwardOnly && activityIndex < currentIndex) {\n          return false;\n        }\n\n        // Check if there are any blocking activities between current and target\n        if (currentIndex < activityIndex) {\n          // Forward traversal - check for mandatory intermediate activities\n          for (let i = currentIndex + 1; i < activityIndex; i++) {\n            const intermediateActivity = siblings[i];\n            if (intermediateActivity &&\n              this.isActivityMandatory(intermediateActivity) &&\n              !this.isActivityCompleted(intermediateActivity)) {\n              return false; // Cannot skip mandatory incomplete activity\n            }\n          }\n        }\n      }\n    }\n\n    // 3. Check specific choice constraints based on activity state\n    return this.validateActivityChoiceState(activity);\n  }\n\n  private evaluateForwardOnlyForChoice(activity: Activity): boolean {\n    // Implement forwardOnly evaluation for choice scenarios according to SCORM 2004\n\n    if (!activity.parent) {\n      return true; // Root activity has no forwardOnly constraints\n    }\n\n    const parent = activity.parent;\n\n    // If forwardOnly is false, choice is allowed in any direction\n    if (!parent.sequencingControls || !parent.sequencingControls.forwardOnly) {\n      return true;\n    }\n\n    // When forwardOnly is true, restrict backward navigation choices\n    const siblings = parent.children;\n    if (!siblings || siblings.length === 0) {\n      return true;\n    }\n\n    const targetIndex = siblings.indexOf(activity);\n    if (targetIndex === -1) {\n      return false; // Activity not found in siblings\n    }\n\n    // Find the current activity to determine navigation direction\n    const currentActivity = this.getCurrentActivity(parent);\n    if (!currentActivity) {\n      // No current activity, allow choice to any available activity\n      return this.isActivityAvailableForChoice(activity);\n    }\n\n    const currentIndex = siblings.indexOf(currentActivity);\n    if (currentIndex === -1) {\n      return true; // Current activity not found, allow choice\n    }\n\n    // ForwardOnly constraint: only allow choice to activities at or after current position\n    if (targetIndex < currentIndex) {\n      // Backward choice - check for exceptions\n\n      // Exception 1: Allow choice to previously completed activities if they are choice-enabled\n      if (activity.completionStatus === \"completed\" ||\n        activity.completionStatus === \"passed\") {\n        // Check if the activity allows choice even in forwardOnly mode\n        if (activity.sequencingControls && activity.sequencingControls.choice) {\n          return true;\n        }\n      }\n\n      // Exception 2: Allow choice if there's a specific choice rule allowing backward navigation\n      if (this.hasBackwardChoiceException(activity, parent)) {\n        return true;\n      }\n\n      // Otherwise, forwardOnly constraint blocks backward choice\n      return false;\n    }\n\n    // Forward or current position choice - allowed\n    return this.isActivityAvailableForChoice(activity);\n  }\n\n  private checkConstrainedChoiceBoundary(currentActivity: Activity | null, activity: Activity, parent: Activity): {\n    valid: boolean,\n    exception: string | null\n  } {\n    // Implement boundary checking logic for constrained choice according to SCORM 2004\n\n    try {\n      // If no current activity, choice to any available activity is valid\n      if (!currentActivity) {\n        if (this.isActivityAvailableForChoice(activity)) {\n          return { valid: true, exception: null };\n        } else {\n          return { valid: false, exception: \"Activity not available for choice\" };\n        }\n      }\n\n      // Check if parent has constrainChoice enabled\n      if (!parent.sequencingControls || !parent.sequencingControls.constrainChoice) {\n        // No constraints - just check basic availability\n        if (this.isActivityAvailableForChoice(activity)) {\n          return { valid: true, exception: null };\n        } else {\n          return { valid: false, exception: \"Activity not available for choice\" };\n        }\n      }\n\n      const siblings = parent.children;\n      if (!siblings || siblings.length === 0) {\n        return { valid: true, exception: null };\n      }\n\n      const currentIndex = siblings.indexOf(currentActivity);\n      const targetIndex = siblings.indexOf(activity);\n\n      if (currentIndex === -1 || targetIndex === -1) {\n        return { valid: false, exception: \"Activity not found in parent structure\" };\n      }\n\n      // Check flow and forwardOnly constraints\n      if (parent.sequencingControls.flow) {\n        // Flow mode constraints\n        if (parent.sequencingControls.forwardOnly && targetIndex < currentIndex) {\n          // Backward navigation in forwardOnly flow\n          if (activity.completionStatus !== \"completed\" &&\n            activity.completionStatus !== \"passed\") {\n            return { valid: false, exception: \"Forward-only constraint violated\" };\n          }\n        }\n\n        // Check if we're skipping mandatory activities\n        if (targetIndex > currentIndex) {\n          for (let i = currentIndex + 1; i < targetIndex; i++) {\n            const intermediateActivity = siblings[i];\n            if (intermediateActivity &&\n              this.isActivityMandatory(intermediateActivity) &&\n              !this.isActivityCompleted(intermediateActivity)) {\n              return { valid: false, exception: \"Cannot skip mandatory incomplete activity\" };\n            }\n          }\n        }\n      }\n\n      // Check choice boundaries based on completion and availability\n      if (!this.isActivityAvailableForChoice(activity)) {\n        return { valid: false, exception: \"Activity not available for choice\" };\n      }\n\n      // Check for specific boundary violations\n      if (this.hasChoiceBoundaryViolation(currentActivity, activity, parent)) {\n        return { valid: false, exception: \"Choice boundary constraint violation\" };\n      }\n\n      // All boundary checks passed\n      return { valid: true, exception: null };\n\n    } catch (error) {\n      return { valid: false, exception: `Boundary check error: ${error}` };\n    }\n  }\n\n  /**\n   * Helper methods for constraint validation\n   */\n  private getCurrentActivity(parent: Activity): Activity | null {\n    // Find the currently active activity within the parent\n    if (parent.children) {\n      for (const child of parent.children) {\n        if (child.isActive) {\n          return child;\n        }\n      }\n    }\n    return null;\n  }\n\n  private isActivityAvailableForChoice(activity: Activity): boolean {\n    // Check if activity is available for choice according to SCORM 2004 rules\n    return activity.isVisible &&\n      !activity.isHiddenFromChoice &&\n      activity.isAvailable &&\n      (activity.sequencingControls ? activity.sequencingControls.choice : true);\n  }\n\n  private isActivityMandatory(activity: Activity): boolean {\n    // Check if activity is mandatory (cannot be skipped)\n    // In SCORM 2004, this is typically determined by sequencing rules\n    if (activity.sequencingRules && activity.sequencingRules.preConditionRules) {\n      for (const rule of activity.sequencingRules.preConditionRules) {\n        if (rule.action === \"skip\" && rule.conditions && rule.conditions.length === 0) {\n          return false; // Has unconditional skip rule, not mandatory\n        }\n      }\n    }\n\n    // Check for explicit mandatory flag or default to true for flow sequences\n    return (activity as any).mandatory !== false;\n  }\n\n  private isActivityCompleted(activity: Activity): boolean {\n    // Check if activity is completed\n    return activity.completionStatus === \"completed\" ||\n      activity.completionStatus === \"passed\" ||\n      activity.successStatus === \"passed\";\n  }\n\n  private validateActivityChoiceState(activity: Activity): boolean {\n    // Validate activity state for choice according to SCORM 2004\n\n    // Check basic availability\n    if (!this.isActivityAvailableForChoice(activity)) {\n      return false;\n    }\n\n    // Check pre-condition rules\n    if (activity.sequencingRules && activity.sequencingRules.preConditionRules) {\n      for (const rule of activity.sequencingRules.preConditionRules) {\n        if (rule.action === RuleActionType.DISABLED || rule.action === RuleActionType.HIDE_FROM_CHOICE) {\n          // Check if conditions are met for disabling/hiding\n          const combinationMode = (rule as any).conditionCombination || \"all\";\n          if (this.evaluateRuleConditions(rule.conditions || [], activity, combinationMode)) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n\n  private hasBackwardChoiceException(activity: Activity, parent: Activity): boolean {\n    // Check for exceptions that allow backward choice in forwardOnly mode\n\n    // Check for specific sequencing rules that allow backward navigation\n    if (parent.sequencingRules && parent.sequencingRules.preConditionRules) {\n      for (const rule of parent.sequencingRules.preConditionRules) {\n        if (rule.action === \"exitParent\" || rule.action === \"retry\") {\n          // These actions might allow backward navigation\n          const combinationMode = (rule as any).conditionCombination || \"all\";\n          return this.evaluateRuleConditions(rule.conditions || [], activity, combinationMode);\n        }\n      }\n    }\n\n    // Check for explicit backward navigation permissions\n    return (activity as any).allowBackwardChoice === true;\n  }\n\n  private hasChoiceBoundaryViolation(currentActivity: Activity, targetActivity: Activity, parent: Activity): boolean {\n    // Check for specific boundary violations\n\n    // Check for time-based constraints\n    if (targetActivity.timeLimitAction && targetActivity.beginTimeLimit) {\n      const now = new Date();\n      const beginTime = new Date(targetActivity.beginTimeLimit);\n      if (now < beginTime) {\n        return true; // Not yet available\n      }\n    }\n\n    if (targetActivity.endTimeLimit) {\n      const now = new Date();\n      const endTime = new Date(targetActivity.endTimeLimit);\n      if (now > endTime) {\n        return true; // No longer available\n      }\n    }\n\n    // Check for attempt limit violations\n    return !!(targetActivity.attemptLimit &&\n      targetActivity.attemptCount >= targetActivity.attemptLimit);\n  }\n\n  private evaluateRuleConditions(conditions: any[], activity: Activity, combinationMode: string = \"all\"): boolean {\n    // Full SCORM 2004 rule condition evaluation\n    if (conditions.length === 0) {\n      return true; // No conditions means always true\n    }\n\n    // Evaluate each condition and collect results\n    const conditionResults: boolean[] = [];\n    \n    for (const condition of conditions) {\n      const conditionType = condition.condition || condition.conditionType;\n      let result = false;\n\n      switch (conditionType) {\n        case \"always\":\n          result = true;\n          break;\n        case \"never\":\n          result = false;\n          break;\n        case \"activityAttempted\":\n        case \"attempted\":\n          result = activity.attemptCount > 0;\n          break;\n        case \"activityCompleted\":\n        case \"completed\":\n          result = this.isActivityCompleted(activity);\n          break;\n        case \"satisfied\":\n          result = activity.objectiveSatisfiedStatus === true;\n          break;\n        case \"objectiveStatusKnown\":\n          result = activity.objectiveMeasureStatus === true;\n          break;\n        case \"objectiveMeasureKnown\":\n          result = activity.objectiveMeasureStatus === true;\n          break;\n        case \"objectiveMeasureGreaterThan\":\n          if (activity.objectiveMeasureStatus) {\n            const threshold = condition.measureThreshold || 0;\n            result = activity.objectiveNormalizedMeasure > threshold;\n          }\n          break;\n        case \"objectiveMeasureLessThan\":\n          if (activity.objectiveMeasureStatus) {\n            const threshold = condition.measureThreshold || 0;\n            result = activity.objectiveNormalizedMeasure < threshold;\n          }\n          break;\n        case \"progressKnown\":\n          result = activity.completionStatus !== \"unknown\";\n          break;\n        case \"attemptLimitExceeded\":\n          result = activity.hasAttemptLimitExceeded();\n          break;\n        case \"timeLimitExceeded\": {\n          const limit = activity.timeLimitDuration;\n          if (!limit) {\n            result = false;\n            break;\n          }\n          const limitSeconds = getDurationAsSeconds(limit, scorm2004_regex.CMITimespan);\n          let elapsedSeconds = 0;\n          // Prefer LMS-provided hook\n          if (this.getAttemptElapsedSecondsHook) {\n            try {\n              elapsedSeconds = this.getAttemptElapsedSecondsHook(activity) || 0;\n            } catch (_) {\n              elapsedSeconds = 0;\n            }\n          } else if (activity.attemptAbsoluteStartTime) {\n            const start = new Date(activity.attemptAbsoluteStartTime).getTime();\n            const nowMs = this.now().getTime();\n            if (!Number.isNaN(start) && nowMs > start) {\n              elapsedSeconds = Math.max(0, (nowMs - start) / 1000);\n            }\n          }\n          result = elapsedSeconds > limitSeconds && limitSeconds > 0;\n          break;\n        }\n        case \"outsideAvailableTimeRange\":\n          // Check if current time is outside available time range\n          if (activity.beginTimeLimit || activity.endTimeLimit) {\n            const now = new Date();\n            if (activity.beginTimeLimit) {\n              const beginDate = new Date(activity.beginTimeLimit);\n              if (now < beginDate) result = true;\n            }\n            if (activity.endTimeLimit) {\n              const endDate = new Date(activity.endTimeLimit);\n              if (now > endDate) result = true;\n            }\n          }\n          break;\n        default:\n          // For unknown conditions, assume false for safety\n          result = false;\n          break;\n      }\n\n      // Apply NOT operator if present\n      if (condition.operator === \"not\" || condition.not === true) {\n        result = !result;\n      }\n\n      conditionResults.push(result);\n    }\n\n    // Combine results based on combination mode\n    if (combinationMode === \"all\" || combinationMode === \"and\") {\n      // All conditions must be true (AND logic)\n      return conditionResults.every(result => result);\n    } else if (combinationMode === \"any\" || combinationMode === \"or\") {\n      // At least one condition must be true (OR logic)\n      return conditionResults.some(result => result);\n    } else {\n      // Default to AND logic if combination mode is unknown\n      return conditionResults.every(result => result);\n    }\n  }\n\n  /**\n   * Get elapsed attempt seconds for an activity using hook or timestamps\n   */\n  private getAttemptElapsedSeconds(activity: Activity): number {\n    if (this.getAttemptElapsedSecondsHook) {\n      try { return this.getAttemptElapsedSecondsHook(activity) || 0; } catch { return 0; }\n    }\n    if (activity.attemptAbsoluteStartTime) {\n      const start = new Date(activity.attemptAbsoluteStartTime).getTime();\n      const nowMs = this.now().getTime();\n      if (!Number.isNaN(start) && nowMs > start) {\n        return Math.max(0, (nowMs - start) / 1000);\n      }\n    }\n    return 0;\n  }\n}\n\n/**\n * Enum for flow subprocess modes\n */\nenum FlowSubprocessMode {\n  FORWARD = \"forward\",\n  BACKWARD = \"backward\",\n}\n","import { Activity } from \"./activity\";\nimport { ActivityTree } from \"./activity_tree\";\nimport {\n  DeliveryRequestType,\n  SequencingProcess,\n  SequencingRequestType\n} from \"./sequencing_process\";\nimport { RollupProcess } from \"./rollup_process\";\nimport { ADLNav } from \"../adl\";\nimport { RuleActionType } from \"./sequencing_rules\";\nimport { getDurationAsSeconds } from \"../../../utilities\";\nimport { scorm2004_regex } from \"../../../constants/regex\";\n\n/**\n * Enum for navigation request types\n */\nexport enum NavigationRequestType {\n  START = \"start\",\n  RESUME_ALL = \"resumeAll\",\n  CONTINUE = \"continue\",\n  PREVIOUS = \"previous\",\n  CHOICE = \"choice\",\n  JUMP = \"jump\",\n  EXIT = \"exit\",\n  EXIT_ALL = \"exitAll\",\n  ABANDON = \"abandon\",\n  ABANDON_ALL = \"abandonAll\",\n  SUSPEND_ALL = \"suspendAll\",\n  NOT_VALID = \"_none_\"\n}\n\n/**\n * Class representing a navigation request result\n */\nexport class NavigationRequestResult {\n  public valid: boolean;\n  public terminationRequest: SequencingRequestType | null;\n  public sequencingRequest: SequencingRequestType | null;\n  public targetActivityId: string | null;\n  public exception: string | null;\n\n  constructor(\n    valid: boolean = false,\n    terminationRequest: SequencingRequestType | null = null,\n    sequencingRequest: SequencingRequestType | null = null,\n    targetActivityId: string | null = null,\n    exception: string | null = null\n  ) {\n    this.valid = valid;\n    this.terminationRequest = terminationRequest;\n    this.sequencingRequest = sequencingRequest;\n    this.targetActivityId = targetActivityId;\n    this.exception = exception;\n  }\n}\n\n/**\n * Class representing a delivery request\n */\nexport class DeliveryRequest {\n  public valid: boolean;\n  public targetActivity: Activity | null;\n  public exception: string | null;\n\n  constructor(\n    valid: boolean = false,\n    targetActivity: Activity | null = null,\n    exception: string | null = null\n  ) {\n    this.valid = valid;\n    this.targetActivity = targetActivity;\n    this.exception = exception;\n  }\n}\n\n/**\n * Overall Sequencing Process (OP.1)\n * Controls the overall execution of the sequencing loop\n */\nexport class OverallSequencingProcess {\n  private activityTree: ActivityTree;\n  private sequencingProcess: SequencingProcess;\n  private rollupProcess: RollupProcess;\n  private adlNav: ADLNav | null;\n  private contentDelivered: boolean = false;\n  private eventCallback: ((eventType: string, data?: any) => void) | null = null;\n  private globalObjectiveMap: Map<string, any> = new Map();\n  private now: () => Date;\n  private enhancedDeliveryValidation: boolean;\n\n  constructor(\n    activityTree: ActivityTree,\n    sequencingProcess: SequencingProcess,\n    rollupProcess: RollupProcess,\n    adlNav: ADLNav | null = null,\n    eventCallback: ((eventType: string, data?: any) => void) | null = null,\n    options?: { now?: () => Date; enhancedDeliveryValidation?: boolean }\n  ) {\n    this.activityTree = activityTree;\n    this.sequencingProcess = sequencingProcess;\n    this.rollupProcess = rollupProcess;\n    this.adlNav = adlNav;\n    this.eventCallback = eventCallback;\n    this.now = options?.now || (() => new Date());\n    this.enhancedDeliveryValidation = options?.enhancedDeliveryValidation === true;\n\n    // Initialize global objective map\n    this.initializeGlobalObjectiveMap();\n  }\n\n  /**\n   * Overall Sequencing Process (OP.1)\n   * Main entry point for processing navigation requests\n   * @param {NavigationRequestType} navigationRequest - The navigation request\n   * @param {string | null} targetActivityId - Target activity for choice/jump requests\n   * @return {DeliveryRequest} - The delivery request result\n   */\n  public processNavigationRequest(\n    navigationRequest: NavigationRequestType,\n    targetActivityId: string | null = null\n  ): DeliveryRequest {\n    // Step 1: Navigation Request Process (NB.2.1)\n    const navResult = this.navigationRequestProcess(navigationRequest, targetActivityId);\n\n    if (!navResult.valid) {\n      return new DeliveryRequest(false, null, navResult.exception);\n    }\n\n    // Step 2: Termination Request Process (TB.2.3) if needed\n    if (navResult.terminationRequest) {\n      const termResult = this.terminationRequestProcess(navResult.terminationRequest, !!navResult.sequencingRequest);\n      if (!termResult) {\n        return new DeliveryRequest(false, null, \"TB.2.3-1\");\n      }\n\n      // If this is a termination-only request (no sequencing request), return success\n      if (!navResult.sequencingRequest) {\n        return new DeliveryRequest(true, null);\n      }\n    }\n\n    // Step 3: Sequencing Request Process (SB.2.12)\n    if (navResult.sequencingRequest) {\n      const seqResult = this.sequencingProcess.sequencingRequestProcess(\n        navResult.sequencingRequest,\n        navResult.targetActivityId\n      );\n\n      if (seqResult.exception) {\n        return new DeliveryRequest(false, null, seqResult.exception);\n      }\n\n      if (seqResult.deliveryRequest === DeliveryRequestType.DELIVER && seqResult.targetActivity) {\n        // INTEGRATION: Validate rollup state consistency before delivery\n        if (this.activityTree.root && !this.rollupProcess.validateRollupStateConsistency(this.activityTree.root)) {\n          return new DeliveryRequest(false, null, \"OP.1-3\");\n        }\n\n        // INTEGRATION: Process global objective mapping before delivery\n        this.rollupProcess.processGlobalObjectiveMapping(seqResult.targetActivity, this.globalObjectiveMap);\n\n        // Step 4: Delivery Request Process (DB.1.1)\n        const deliveryResult = this.deliveryRequestProcess(seqResult.targetActivity);\n\n        if (deliveryResult.valid) {\n          // Step 5: Content Delivery Environment Process (DB.2)\n          this.contentDeliveryEnvironmentProcess(deliveryResult.targetActivity!);\n\n          // INTEGRATION: Validate rollup state consistency after delivery\n          if (this.activityTree.root) {\n            this.rollupProcess.validateRollupStateConsistency(this.activityTree.root);\n          }\n\n          return deliveryResult;\n        }\n\n        return deliveryResult;\n      }\n    }\n\n    return new DeliveryRequest(false, null, \"OP.1-1\");\n  }\n\n  /**\n   * Navigation Request Process (NB.2.1)\n   * Validates navigation requests and converts them to termination/sequencing requests\n   * @param {NavigationRequestType} request - The navigation request\n   * @param {string | null} targetActivityId - Target activity for choice/jump\n   * @return {NavigationRequestResult} - The validation result\n   */\n  private navigationRequestProcess(\n    request: NavigationRequestType,\n    targetActivityId: string | null = null\n  ): NavigationRequestResult {\n    // Enhanced logging for debugging\n    this.fireEvent(\"onNavigationRequestProcessing\", { request, targetActivityId });\n    const currentActivity = this.activityTree.currentActivity;\n\n    // Check if navigation request is valid\n    switch (request) {\n      case NavigationRequestType.START:\n        if (currentActivity !== null) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-1\");\n        }\n        return new NavigationRequestResult(\n          true,\n          null,\n          SequencingRequestType.START,\n          null\n        );\n\n      case NavigationRequestType.RESUME_ALL:\n        if (currentActivity !== null) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-2\");\n        }\n        if (this.activityTree.suspendedActivity === null) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-3\");\n        }\n        return new NavigationRequestResult(\n          true,\n          null,\n          SequencingRequestType.RESUME_ALL,\n          null\n        );\n\n      case NavigationRequestType.CONTINUE:\n        if (!currentActivity) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-4\");\n        }\n        if (!currentActivity.parent || !currentActivity.parent.sequencingControls.flow) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-5\");\n        }\n        return new NavigationRequestResult(\n          true,\n          SequencingRequestType.EXIT,\n          SequencingRequestType.CONTINUE,\n          null\n        );\n\n      case NavigationRequestType.PREVIOUS: {\n        if (!currentActivity) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-6\");\n        }\n        if (!currentActivity.parent || !currentActivity.parent.sequencingControls.flow) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-7\");\n        }\n\n        // Enhanced Forward-Only Navigation Constraints - Check at multiple cluster levels\n        const forwardOnlyValidation = this.validateForwardOnlyConstraints(currentActivity);\n        if (!forwardOnlyValidation.valid) {\n          return new NavigationRequestResult(false, null, null, null, forwardOnlyValidation.exception);\n        }\n\n        return new NavigationRequestResult(\n          true,\n          SequencingRequestType.EXIT,\n          SequencingRequestType.PREVIOUS,\n          null\n        );\n      }\n\n      case NavigationRequestType.CHOICE: {\n        if (!targetActivityId) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-9\");\n        }\n        const targetActivity = this.activityTree.getActivity(targetActivityId);\n        if (!targetActivity) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-10\");\n        }\n\n        // Enhanced Choice Path Validation\n        const choiceValidation = this.validateComplexChoicePath(currentActivity, targetActivity);\n        if (!choiceValidation.valid) {\n          return new NavigationRequestResult(false, null, null, null, choiceValidation.exception);\n        }\n\n        return new NavigationRequestResult(\n          true,\n          currentActivity ? SequencingRequestType.EXIT : null,\n          SequencingRequestType.CHOICE,\n          targetActivityId\n        );\n      }\n\n      case NavigationRequestType.JUMP:\n        if (!targetActivityId) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-12\");\n        }\n        return new NavigationRequestResult(\n          true,\n          null,\n          SequencingRequestType.JUMP,\n          targetActivityId\n        );\n\n      case NavigationRequestType.EXIT:\n        if (!currentActivity) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-13\");\n        }\n        if (currentActivity === this.activityTree.root) {\n          return new NavigationRequestResult(\n            true,\n            SequencingRequestType.EXIT_ALL,\n            null,\n            null\n          );\n        }\n        return new NavigationRequestResult(\n          true,\n          SequencingRequestType.EXIT,\n          null,\n          null\n        );\n\n      case NavigationRequestType.EXIT_ALL:\n        if (!currentActivity) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-14\");\n        }\n        return new NavigationRequestResult(\n          true,\n          SequencingRequestType.EXIT_ALL,\n          null,\n          null\n        );\n\n      case NavigationRequestType.ABANDON:\n        if (!currentActivity) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-15\");\n        }\n        return new NavigationRequestResult(\n          true,\n          SequencingRequestType.ABANDON,\n          null,\n          null\n        );\n\n      case NavigationRequestType.ABANDON_ALL:\n        if (!currentActivity) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-16\");\n        }\n        return new NavigationRequestResult(\n          true,\n          SequencingRequestType.ABANDON_ALL,\n          null,\n          null\n        );\n\n      case NavigationRequestType.SUSPEND_ALL:\n        if (!currentActivity) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-17\");\n        }\n        return new NavigationRequestResult(\n          true,\n          SequencingRequestType.SUSPEND_ALL,\n          null,\n          null\n        );\n\n      default:\n        return new NavigationRequestResult(false, null, null, null, \"NB.2.1-18\");\n    }\n  }\n\n  /**\n   * Enhanced Termination Request Process (TB.2.3)\n   * Processes termination requests with improved post-condition handling\n   * Priority 2 Gap: Post-Condition Rule Evaluation & Exit Action Rule Recursion\n   * @param {SequencingRequestType} request - The termination request\n   * @param {boolean} hasSequencingRequest - Whether a sequencing request follows\n   * @return {boolean} - True if termination was successful\n   */\n  private terminationRequestProcess(request: SequencingRequestType, hasSequencingRequest: boolean = false): boolean {\n    const currentActivity = this.activityTree.currentActivity;\n\n    if (!currentActivity) {\n      return false;\n    }\n\n    // Enhanced logging for debugging\n    this.fireEvent(\"onTerminationRequestProcessing\", {\n      request,\n      hasSequencingRequest,\n      currentActivity: currentActivity.id\n    });\n\n    // First, check exit action rules (TB.2.1) for EXIT request with recursion detection\n    if (request === SequencingRequestType.EXIT) {\n      const exitActionResult = this.enhancedExitActionRulesSubprocess(currentActivity);\n      if (exitActionResult.action) {\n        // Check for recursion to prevent infinite loops\n        if (exitActionResult.recursionDepth > 10) {\n          this.fireEvent(\"onSequencingError\", {\n            error: \"Exit action recursion detected\",\n            depth: exitActionResult.recursionDepth,\n            activity: currentActivity.id\n          });\n          return false;\n        }\n\n        switch (exitActionResult.action) {\n          case \"EXIT_PARENT\":\n            // Move up to parent and terminate from there\n            if (currentActivity.parent) {\n              this.activityTree.currentActivity = currentActivity.parent;\n              return this.terminationRequestProcess(request, hasSequencingRequest);\n            }\n            break;\n          case \"EXIT_ALL\":\n            // Convert to EXIT_ALL request\n            request = SequencingRequestType.EXIT_ALL;\n            break;\n        }\n      }\n    }\n\n    // For EXIT_ALL and ABANDON_ALL, terminate descendant attempts first\n    // For regular EXIT, also terminate descendants if current has children\n    if (request === SequencingRequestType.EXIT_ALL ||\n      request === SequencingRequestType.ABANDON_ALL ||\n      (request === SequencingRequestType.EXIT && currentActivity.children.length > 0)) {\n      this.terminateDescendentAttemptsProcess(currentActivity);\n    }\n\n    // For descendant activities in the tree, terminate them first\n    // For EXIT_ALL and ABANDON_ALL, also terminate descendants\n    // For regular EXIT, also terminate descendants if current has children\n    if (request === SequencingRequestType.EXIT_ALL ||\n      request === SequencingRequestType.ABANDON_ALL ||\n      (request === SequencingRequestType.EXIT && currentActivity.children.length > 0)) {\n      this.terminateDescendentAttemptsProcess(currentActivity);\n    }\n\n    // Enhanced termination processing with post-condition rule evaluation\n    const terminationResult = this.executeTermination(request, currentActivity, hasSequencingRequest);\n    if (!terminationResult.success) {\n      return false;\n    }\n\n    // Priority 2 Gap: Post-Condition Rule Evaluation Integration\n    // Evaluate post-condition rules after termination but before clearing current activity\n    if (terminationResult.shouldEvaluatePostConditions) {\n      const postConditionResult = this.integratePostConditionRulesSubprocess(currentActivity);\n      if (postConditionResult) {\n        // Post-condition rules triggered additional sequencing action\n        this.fireEvent(\"onPostConditionTriggered\", {\n          activity: currentActivity.id,\n          action: postConditionResult\n        });\n\n        // Handle post-condition sequencing request\n        // This might need to be processed by the sequencing engine\n        // but for termination we log it for now\n      }\n    }\n\n    // Priority 2 Gap: Complex Suspended Activity Cleanup\n    if (request === SequencingRequestType.EXIT_ALL || request === SequencingRequestType.ABANDON_ALL) {\n      this.performComplexSuspendedActivityCleanup();\n    }\n\n    return true;\n  }\n\n  /**\n   * Execute Termination\n   * Enhanced termination execution with proper state management\n   * @param {SequencingRequestType} request - Termination request\n   * @param {Activity} currentActivity - Current activity\n   * @param {boolean} hasSequencingRequest - Whether sequencing follows\n   * @return {{success: boolean, shouldEvaluatePostConditions: boolean}} - Termination result\n   */\n  private executeTermination(request: SequencingRequestType, currentActivity: Activity, hasSequencingRequest: boolean): {\n    success: boolean,\n    shouldEvaluatePostConditions: boolean\n  } {\n    let shouldEvaluatePostConditions = false;\n\n    try {\n      switch (request) {\n        case SequencingRequestType.EXIT:\n          // Terminate normally with post-condition evaluation\n          if (currentActivity.isActive) {\n            this.endAttemptProcess(currentActivity);\n            shouldEvaluatePostConditions = true;\n          }\n          // Move to parent only if no sequencing follows\n          if (!hasSequencingRequest) {\n            this.activityTree.currentActivity = currentActivity.parent;\n          }\n          break;\n\n        case SequencingRequestType.EXIT_ALL:\n          // Priority 2 Gap: Multi-Level Exit Actions\n          this.handleMultiLevelExitActions(this.activityTree.root!);\n          this.activityTree.currentActivity = null;\n          break;\n\n        case SequencingRequestType.ABANDON:\n          // Abandon without ending attempt\n          currentActivity.isActive = false;\n          // Move to parent only if no sequencing follows\n          if (!hasSequencingRequest) {\n            this.activityTree.currentActivity = currentActivity.parent;\n          }\n          break;\n\n        case SequencingRequestType.ABANDON_ALL:\n          // Abandon without ending attempt - clear current activity\n          currentActivity.isActive = false;\n          this.activityTree.currentActivity = null;\n          break;\n\n        case SequencingRequestType.SUSPEND_ALL:\n          // Suspend the current activity with enhanced cleanup\n          this.handleSuspendAllRequest(currentActivity);\n          break;\n\n        default:\n          return { success: false, shouldEvaluatePostConditions: false };\n      }\n\n      return { success: true, shouldEvaluatePostConditions };\n    } catch (error) {\n      this.fireEvent(\"onTerminationError\", {\n        error: error instanceof Error ? error.message : String(error),\n        request,\n        activity: currentActivity.id\n      });\n      return { success: false, shouldEvaluatePostConditions: false };\n    }\n  }\n\n  /**\n   * Enhanced Exit Action Rules Subprocess with recursion detection\n   * Priority 2 Gap: Exit Action Rule Recursion\n   * @param {Activity} activity - Activity to evaluate\n   * @param {number} recursionDepth - Current recursion depth\n   * @return {{action: string | null, recursionDepth: number}} - Exit action result\n   */\n  private enhancedExitActionRulesSubprocess(activity: Activity, recursionDepth: number = 0): {\n    action: string | null,\n    recursionDepth: number\n  } {\n    // Increment recursion depth to detect infinite loops\n    recursionDepth++;\n\n    // Check if activity has exit action rules\n    const exitRules = activity.sequencingRules.exitConditionRules;\n\n    for (const rule of exitRules) {\n      // Evaluate the rule conditions\n      let conditionsMet = true;\n\n      // Check rule condition combination\n      if (rule.conditionCombination === \"all\") {\n        conditionsMet = rule.conditions.every(condition => condition.evaluate(activity));\n      } else {\n        conditionsMet = rule.conditions.some(condition => condition.evaluate(activity));\n      }\n\n      if (conditionsMet) {\n        // Return the action to take with recursion tracking\n        if (rule.action === RuleActionType.EXIT_PARENT) {\n          return { action: \"EXIT_PARENT\", recursionDepth };\n        } else if (rule.action === RuleActionType.EXIT_ALL) {\n          return { action: \"EXIT_ALL\", recursionDepth };\n        }\n      }\n    }\n\n    return { action: null, recursionDepth };\n  }\n\n  /**\n   * Integrate Post-Condition Rules Subprocess\n   * Priority 2 Gap: Post-Condition Rule Evaluation Integration\n   * @param {Activity} activity - Activity to evaluate post-conditions for\n   * @return {string | null} - Post-condition action or null\n   */\n  private integratePostConditionRulesSubprocess(activity: Activity): string | null {\n    // Evaluate post-condition rules using the sequencing process\n    const postAction = this.sequencingProcess.evaluatePostConditionRules(activity);\n\n    if (postAction) {\n      // Log the post-condition action for tracking\n      this.fireEvent(\"onPostConditionEvaluated\", {\n        activity: activity.id,\n        action: postAction,\n        timestamp: new Date().toISOString()\n      });\n\n      return postAction;\n    }\n\n    return null;\n  }\n\n  /**\n   * Handle Multi-Level Exit Actions\n   * Priority 2 Gap: Multi-Level Exit Actions\n   * @param {Activity} rootActivity - Root activity to start from\n   */\n  private handleMultiLevelExitActions(rootActivity: Activity): void {\n    // Process exit actions at each level systematically\n    this.processExitActionsAtLevel(rootActivity, 0);\n\n    // Then terminate all activities\n    this.terminateAllActivities(rootActivity);\n  }\n\n  /**\n   * Process exit actions at specific level\n   * @param {Activity} activity - Activity to process\n   * @param {number} level - Current level in hierarchy\n   */\n  private processExitActionsAtLevel(activity: Activity, level: number): void {\n    // Process exit actions for this activity\n    const exitAction = this.enhancedExitActionRulesSubprocess(activity, 0);\n\n    if (exitAction.action) {\n      this.fireEvent(\"onMultiLevelExitAction\", {\n        activity: activity.id,\n        level,\n        action: exitAction.action\n      });\n    }\n\n    // Recursively process children\n    for (const child of activity.children) {\n      this.processExitActionsAtLevel(child, level + 1);\n    }\n  }\n\n  /**\n   * Perform Complex Suspended Activity Cleanup\n   * Priority 2 Gap: Complex Suspended Activity Cleanup\n   */\n  private performComplexSuspendedActivityCleanup(): void {\n    const suspendedActivity = this.activityTree.suspendedActivity;\n\n    if (suspendedActivity) {\n      // Clear suspended state from the activity and all its ancestors\n      let current: Activity | null = suspendedActivity;\n      const cleanedActivities: string[] = [];\n\n      while (current) {\n        if (current.isSuspended) {\n          current.isSuspended = false;\n          cleanedActivities.push(current.id);\n        }\n        current = current.parent;\n      }\n\n      // Clear suspended activity reference\n      this.activityTree.suspendedActivity = null;\n\n      // Fire cleanup event\n      this.fireEvent(\"onSuspendedActivityCleanup\", {\n        cleanedActivities,\n        originalSuspendedActivity: suspendedActivity.id\n      });\n    }\n  }\n\n  /**\n   * Handle Suspend All Request\n   * Enhanced suspend handling with proper state management\n   * @param {Activity} currentActivity - Current activity to suspend\n   */\n  private handleSuspendAllRequest(currentActivity: Activity): void {\n    // Suspend the current activity\n    currentActivity.isSuspended = true;\n    currentActivity.isActive = false;\n    this.activityTree.suspendedActivity = currentActivity;\n    this.activityTree.currentActivity = null;\n\n    // Log suspend event\n    this.fireEvent(\"onActivitySuspended\", {\n      activity: currentActivity.id,\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  /**\n   * Enhanced Delivery Request Process (DB.1.1)\n   * Priority 4 Gap: Comprehensive delivery validation with state consistency checks\n   * @param {Activity} activity - The activity to deliver\n   * @return {DeliveryRequest} - The delivery validation result\n   */\n  private deliveryRequestProcess(activity: Activity): DeliveryRequest {\n    // Enhanced logging for debugging\n    this.fireEvent(\"onDeliveryRequestProcessing\", {\n      activity: activity.id,\n      timestamp: new Date().toISOString()\n    });\n\n    if (this.enhancedDeliveryValidation) {\n      // Activity Tree State Consistency\n      const stateConsistencyCheck = this.validateActivityTreeStateConsistency(activity);\n      if (!stateConsistencyCheck.consistent) {\n        return new DeliveryRequest(false, null, stateConsistencyCheck.exception);\n      }\n    }\n\n    // Check if activity is a cluster (has children)\n    if (activity.children.length > 0) {\n      return new DeliveryRequest(false, null, \"DB.1.1-1\");\n    }\n\n    // Check if activity is an empty cluster (has flow control but no children)\n    // According to SCORM 2004, empty clusters should not be deliverable\n    if (activity.sequencingControls.flow && activity.children.length === 0) {\n      return new DeliveryRequest(false, null, \"DB.1.1-2\");\n    }\n\n    if (this.enhancedDeliveryValidation) {\n      const resourceConstraintCheck = this.validateResourceConstraints(activity);\n      if (!resourceConstraintCheck.available) {\n        return new DeliveryRequest(false, null, resourceConstraintCheck.exception);\n      }\n    }\n\n    if (this.enhancedDeliveryValidation) {\n      const concurrentDeliveryCheck = this.validateConcurrentDeliveryPrevention(activity);\n      if (!concurrentDeliveryCheck.allowed) {\n        return new DeliveryRequest(false, null, concurrentDeliveryCheck.exception);\n      }\n    }\n\n    if (this.enhancedDeliveryValidation) {\n      const dependencyCheck = this.validateActivityDependencies(activity);\n      if (!dependencyCheck.satisfied) {\n        return new DeliveryRequest(false, null, dependencyCheck.exception);\n      }\n    }\n\n    // Use Check Activity Process (UP.5) to validate if activity can be delivered\n    if (!this.checkActivityProcess(activity)) {\n      return new DeliveryRequest(false, null, \"DB.1.1-3\");\n    }\n\n    // Activity is a true leaf and passes all checks - can be delivered\n    return new DeliveryRequest(true, activity);\n  }\n\n  /**\n   * Content Delivery Environment Process (DB.2)\n   * Handles the delivery of content to the learner\n   * @param {Activity} activity - The activity to deliver\n   */\n  private contentDeliveryEnvironmentProcess(activity: Activity): void {\n    // Step 1: Clear Suspended Activity Subprocess (DB.2.1) if needed\n    if (this.activityTree.suspendedActivity &&\n      this.activityTree.suspendedActivity !== activity) {\n      this.clearSuspendedActivitySubprocess();\n    }\n\n    // Step 2: Set the activity as current and active\n    this.activityTree.currentActivity = activity;\n    activity.isActive = true;\n\n    // Step 3: Initialize attempt for the delivered activity (DB.2.2)\n    this.initializeActivityForDelivery(activity);\n\n    // Step 4: Set up activity attempt tracking information\n    this.setupActivityAttemptTracking(activity);\n\n    // Step 5: Mark that content has been delivered\n    this.contentDelivered = true;\n\n    // Step 6: Update navigation validity if ADL nav is available\n    if (this.adlNav) {\n      this.updateNavigationValidity();\n    }\n\n    // Step 7: Fire activity delivery event\n    this.fireActivityDeliveryEvent(activity);\n  }\n\n  /**\n   * Initialize Activity For Delivery (DB.2.2)\n   * Set up initial tracking states for a delivered activity\n   * @param {Activity} activity - The activity being delivered\n   */\n  private initializeActivityForDelivery(activity: Activity): void {\n    // Set initial attempt states if not already set\n    if (activity.completionStatus === \"unknown\") {\n      // For leaf activities, set to \"not attempted\" initially\n      if (activity.children.length === 0) {\n        activity.completionStatus = \"not attempted\";\n      }\n    }\n\n    // Initialize objective satisfied status if not set\n    if (activity.objectiveSatisfiedStatus === null) {\n      activity.objectiveSatisfiedStatus = false;\n    }\n\n    // Initialize progress measure status\n    if (activity.progressMeasure === null) {\n      activity.progressMeasure = 0.0;\n      activity.progressMeasureStatus = false;\n    }\n\n    // Initialize objective measure if not set\n    if (activity.objectiveNormalizedMeasure === null) {\n      activity.objectiveNormalizedMeasure = 0.0;\n      activity.objectiveMeasureStatus = false;\n    }\n\n    // Set up activity attempt information\n    activity.attemptAbsoluteDuration = \"PT0H0M0S\";\n    activity.attemptExperiencedDuration = \"PT0H0M0S\";\n\n    // Mark as available for sequencing\n    activity.isAvailable = true;\n  }\n\n  /**\n   * Setup Activity Attempt Tracking\n   * Initialize attempt tracking information per SCORM 2004 4th Edition\n   * @param {Activity} activity - The activity being delivered\n   */\n  private setupActivityAttemptTracking(activity: Activity): void {\n    // Initialize attempt counter if this is a new attempt\n    if (!activity.attemptCount || activity.attemptCount === 0) {\n      activity.attemptCount = 1;\n    }\n\n    // Set attempt start time (use injected clock)\n    activity.attemptAbsoluteStartTime = this.now().toISOString();\n\n    // Initialize location if not set\n    if (!activity.location) {\n      activity.location = \"\";\n    }\n\n    // Set up activity state\n    activity.activityAttemptActive = true;\n\n    // Initialize learner preferences if not set\n    if (!activity.learnerPrefs) {\n      activity.learnerPrefs = {\n        audioCaptioning: \"0\",\n        audioLevel: \"1\",\n        deliverySpeed: \"1\",\n        language: \"\"\n      };\n    }\n  }\n\n  /**\n   * Fire Activity Delivery Event\n   * Notify listeners that an activity has been delivered\n   * @param {Activity} activity - The activity that was delivered\n   */\n  private fireActivityDeliveryEvent(activity: Activity): void {\n    // Fire event through callback if available\n    try {\n      if (this.eventCallback) {\n        this.eventCallback(\"onActivityDelivery\", activity);\n      }\n      console.debug(`Activity delivered: ${activity.id} - ${activity.title}`);\n    } catch (error) {\n      // Silently handle event firing errors to not disrupt sequencing\n      console.warn(`Failed to fire activity delivery event: ${error}`);\n    }\n  }\n\n  /**\n   * Fire a sequencing event\n   * @param {string} eventType - The type of event\n   * @param {any} data - Event data\n   */\n  private fireEvent(eventType: string, data?: any): void {\n    try {\n      if (this.eventCallback) {\n        this.eventCallback(eventType, data);\n      }\n    } catch (error) {\n      console.warn(`Failed to fire sequencing event ${eventType}: ${error}`);\n    }\n  }\n\n  /**\n   * Clear Suspended Activity Subprocess (DB.2.1)\n   * Clears the suspended activity state\n   */\n  private clearSuspendedActivitySubprocess(): void {\n    if (this.activityTree.suspendedActivity) {\n      // Clear suspended state from the activity and all its ancestors\n      let current: Activity | null = this.activityTree.suspendedActivity;\n      while (current) {\n        current.isSuspended = false;\n        current = current.parent;\n      }\n      this.activityTree.suspendedActivity = null;\n    }\n  }\n\n  /**\n   * End Attempt Process (UP.4)\n   * Ends an attempt on an activity\n   * @param {Activity} activity - The activity to end attempt on\n   */\n  private endAttemptProcess(activity: Activity): void {\n    if (!activity.isActive) {\n      return;\n    }\n\n    // Set activity as inactive\n    activity.isActive = false;\n\n    // Update attempt completion status if not already set\n    if (activity.completionStatus === \"unknown\") {\n      activity.completionStatus = \"incomplete\";\n    }\n\n    // Update success status if needed\n    if (activity.successStatus === \"unknown\" && activity.objectiveSatisfiedStatus) {\n      activity.successStatus = activity.objectiveSatisfiedStatus ? \"passed\" : \"failed\";\n    }\n\n    // INTEGRATION: Process global objective mapping after activity completion\n    this.rollupProcess.processGlobalObjectiveMapping(activity, this.globalObjectiveMap);\n\n    // Trigger rollup from this activity\n    this.rollupProcess.overallRollupProcess(activity);\n\n    // INTEGRATION: Validate rollup state consistency after rollup\n    if (this.activityTree.root) {\n      this.rollupProcess.validateRollupStateConsistency(this.activityTree.root);\n    }\n  }\n\n  /**\n   * Update navigation validity in ADL nav\n   */\n  private updateNavigationValidity(): void {\n    if (!this.adlNav || !this.activityTree.currentActivity) {\n      return;\n    }\n\n    // Update continue validity\n    const continueResult = this.navigationRequestProcess(NavigationRequestType.CONTINUE);\n    try {\n      this.adlNav.request_valid.continue = continueResult.valid ? \"true\" : \"false\";\n    } catch (e) {\n      // Navigation validity might be read-only after init\n    }\n\n    // Update previous validity\n    const previousResult = this.navigationRequestProcess(NavigationRequestType.PREVIOUS);\n    try {\n      this.adlNav.request_valid.previous = previousResult.valid ? \"true\" : \"false\";\n    } catch (e) {\n      // Navigation validity might be read-only after init\n    }\n\n    // Compute per-target choice/jump validity and emit an event snapshot\n    const allActivities = this.activityTree.getAllActivities();\n    const choiceMap: { [key: string]: string } = {};\n    const jumpMap: { [key: string]: string } = {};\n    for (const act of allActivities) {\n      const choiceRes = this.navigationRequestProcess(NavigationRequestType.CHOICE, act.id);\n      choiceMap[act.id] = choiceRes.valid ? \"true\" : \"false\";\n      const jumpRes = this.navigationRequestProcess(NavigationRequestType.JUMP, act.id);\n      jumpMap[act.id] = jumpRes.valid ? \"true\" : \"false\";\n    }\n    // Best-effort update of adl.nav.request_valid maps (may be RO post-init)\n    try {\n      this.adlNav.request_valid.choice = choiceMap;\n    } catch (e) {\n      // Ignore read-only constraints on nav request_valid during runtime\n    }\n    try {\n      this.adlNav.request_valid.jump = jumpMap;\n    } catch (e) {\n      // Ignore read-only constraints on nav request_valid during runtime\n    }\n    // Notify listeners so LMS can update UI regardless of read-only state\n    this.fireEvent(\"onNavigationValidityUpdate\", {\n      continue: continueResult.valid,\n      previous: previousResult.valid,\n      choice: choiceMap,\n      jump: jumpMap,\n    });\n  }\n\n  /**\n   * Find common ancestor between two activities\n   */\n  private findCommonAncestor(activity1: Activity, activity2: Activity): Activity | null {\n    // Get ancestors of activity1\n    const ancestors1: Activity[] = [];\n    let current: Activity | null = activity1;\n    while (current) {\n      ancestors1.push(current);\n      current = current.parent;\n    }\n\n    // Find first common ancestor\n    current = activity2;\n    while (current) {\n      if (ancestors1.includes(current)) {\n        return current;\n      }\n      current = current.parent;\n    }\n\n    return null;\n  }\n\n  /**\n   * Check if content has been delivered\n   */\n  public hasContentBeenDelivered(): boolean {\n    return this.contentDelivered;\n  }\n\n  /**\n   * Reset content delivered flag\n   */\n  public resetContentDelivered(): void {\n    this.contentDelivered = false;\n  }\n\n  /**\n   * Exit Action Rules Subprocess (TB.2.1)\n   * Evaluates exit action rules for the current activity\n   * @param {Activity} activity - The activity to evaluate\n   * @return {string | null} - The exit action to take, or null if none\n   */\n  private exitActionRulesSubprocess(activity: Activity): string | null {\n    // Check if activity has exit action rules\n    const exitRules = activity.sequencingRules.exitConditionRules;\n\n    for (const rule of exitRules) {\n      // Evaluate the rule conditions\n      let conditionsMet = true;\n\n      // Check rule condition combination\n      if (rule.conditionCombination === \"all\") {\n        conditionsMet = rule.conditions.every(condition => condition.evaluate(activity));\n      } else {\n        conditionsMet = rule.conditions.some(condition => condition.evaluate(activity));\n      }\n\n      if (conditionsMet) {\n        // Return the action to take\n        if (rule.action === RuleActionType.EXIT_PARENT) {\n          return \"EXIT_PARENT\";\n        } else if (rule.action === RuleActionType.EXIT_ALL) {\n          return \"EXIT_ALL\";\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Terminate all activities in the tree\n   * @param {Activity} activity - The activity to start from (usually root)\n   */\n  private terminateAllActivities(activity: Activity): void {\n    // Recursively terminate all children first\n    for (const child of activity.children) {\n      this.terminateAllActivities(child);\n    }\n\n    // Then terminate this activity\n    if (activity.isActive) {\n      this.endAttemptProcess(activity);\n    }\n  }\n\n  /**\n   * Limit Conditions Check Process (UP.1)\n   * Checks if any limit conditions are violated for the activity\n   * @param {Activity} activity - The activity to check limit conditions for\n   * @return {boolean} - True if limit conditions are met, false if violated\n   */\n  private limitConditionsCheckProcess(activity: Activity): boolean {\n    let result = true;\n    let failureReason = \"\";\n\n    // Check attempt limit\n    if (activity.attemptLimit !== null && activity.attemptLimit > 0) {\n      if (activity.attemptCount >= activity.attemptLimit) {\n        result = false;\n        failureReason = \"Attempt limit exceeded\";\n      }\n    }\n\n    // Check attempt absolute duration limit\n    if (result && activity.attemptAbsoluteDurationLimit) {\n      const currentDuration = getDurationAsSeconds(activity.attemptAbsoluteDuration || \"PT0H0M0S\", scorm2004_regex.CMITimespan);\n      const limitDuration = getDurationAsSeconds(activity.attemptAbsoluteDurationLimit, scorm2004_regex.CMITimespan);\n      if (currentDuration >= limitDuration) {\n        result = false;\n        failureReason = \"Attempt duration limit exceeded\";\n      }\n    }\n\n    // Check activity absolute duration limit\n    if (result && activity.activityAbsoluteDurationLimit) {\n      const currentDuration = getDurationAsSeconds(activity.activityAbsoluteDuration || \"PT0H0M0S\", scorm2004_regex.CMITimespan);\n      const limitDuration = getDurationAsSeconds(activity.activityAbsoluteDurationLimit, scorm2004_regex.CMITimespan);\n      if (currentDuration >= limitDuration) {\n        result = false;\n        failureReason = \"Activity duration limit exceeded\";\n      }\n    }\n\n    // Check begin time limit\n    if (result && activity.beginTimeLimit) {\n      const currentTime = this.now();\n      const beginTime = new Date(activity.beginTimeLimit);\n      if (currentTime < beginTime) {\n        result = false;\n        failureReason = \"Not yet time to begin\";\n      }\n    }\n\n    // Check end time limit\n    if (result && activity.endTimeLimit) {\n      const currentTime = this.now();\n      const endTime = new Date(activity.endTimeLimit);\n      if (currentTime > endTime) {\n        result = false;\n        failureReason = \"Time limit expired\";\n      }\n    }\n\n    // Fire limit condition check event\n    this.fireEvent(\"onLimitConditionCheck\", {\n      activity: activity,\n      result: result,\n      failureReason: failureReason,\n      checks: {\n        attemptLimit: activity.attemptLimit,\n        attemptCount: activity.attemptCount,\n        attemptDurationLimit: activity.attemptAbsoluteDurationLimit,\n        activityDurationLimit: activity.activityAbsoluteDurationLimit,\n        beginTimeLimit: activity.beginTimeLimit,\n        endTimeLimit: activity.endTimeLimit\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Check Activity Process (UP.5)\n   * Validates if an activity can be delivered\n   * @param {Activity} activity - The activity to check\n   * @return {boolean} - True if activity can be delivered\n   */\n  private checkActivityProcess(activity: Activity): boolean {\n    // Check if activity is available\n    if (!activity.isAvailable) {\n      return false;\n    }\n\n    // Check if activity is hidden from choice (if this is a choice request)\n    if (activity.isHiddenFromChoice) {\n      // This would be false for choice navigation, but we need context\n      // For now, we'll allow it but this should be enhanced\n    }\n\n    // Check limit conditions (UP.1)\n    if (!this.limitConditionsCheckProcess(activity)) {\n      return false;\n    }\n\n    // Check if activity is a cluster that can't be delivered directly\n    if (activity.children.length > 0 && !activity.sequencingControls.flow) {\n      return false; // Clusters without flow can't be delivered\n    }\n\n    // Activity passes all checks\n    return true;\n  }\n\n  /**\n   * Terminate Descendent Attempts Process (UP.3)\n   * Recursively terminates all active descendant attempts\n   * @param {Activity} activity - The activity whose descendants to terminate\n   */\n  private terminateDescendentAttemptsProcess(activity: Activity): void {\n    // Process all children\n    for (const child of activity.children) {\n      // Recursively terminate descendants first\n      if (child.children.length > 0) {\n        this.terminateDescendentAttemptsProcess(child);\n      }\n\n      // Check exit rules for the child\n      const exitAction = this.exitActionRulesSubprocess(child);\n\n      // Terminate the child if it's active\n      if (child.isActive) {\n        // Apply exit action if any\n        if (exitAction === \"EXIT_ALL\") {\n          // Recursively terminate all descendants\n          this.terminateDescendentAttemptsProcess(child);\n        }\n\n        // End the attempt\n        this.endAttemptProcess(child);\n      }\n    }\n  }\n\n  /**\n   * Get Sequencing State for Persistence\n   * Returns the current state of the sequencing engine for multi-session support\n   * @return {object} - Serializable sequencing state\n   */\n  public getSequencingState(): any {\n    return {\n      version: \"1.0\",\n      timestamp: new Date().toISOString(),\n      contentDelivered: this.contentDelivered,\n      currentActivity: this.activityTree.currentActivity?.id || null,\n      suspendedActivity: this.activityTree.suspendedActivity?.id || null,\n      activityStates: this.serializeActivityStates(),\n      navigationState: this.getNavigationState()\n    };\n  }\n\n  /**\n   * Restore Sequencing State from Persistence\n   * Restores the sequencing engine state from a previous session\n   * @param {any} state - Previously saved sequencing state\n   * @return {boolean} - True if restoration was successful\n   */\n  public restoreSequencingState(state: any): boolean {\n    try {\n      if (!state || state.version !== \"1.0\") {\n        console.warn(\"Incompatible sequencing state version\");\n        return false;\n      }\n\n      // Restore basic flags\n      this.contentDelivered = state.contentDelivered || false;\n\n      // Restore activity states\n      if (state.activityStates) {\n        this.deserializeActivityStates(state.activityStates);\n      }\n\n      // Restore current activity\n      if (state.currentActivity) {\n        const currentActivity = this.activityTree.getActivity(state.currentActivity);\n        if (currentActivity) {\n          this.activityTree.currentActivity = currentActivity;\n          currentActivity.isActive = true;\n        }\n      }\n\n      // Restore suspended activity\n      if (state.suspendedActivity) {\n        const suspendedActivity = this.activityTree.getActivity(state.suspendedActivity);\n        if (suspendedActivity) {\n          this.activityTree.suspendedActivity = suspendedActivity;\n          suspendedActivity.isSuspended = true;\n        }\n      }\n\n      // Restore navigation state\n      if (state.navigationState) {\n        this.restoreNavigationState(state.navigationState);\n      }\n\n      console.debug(\"Sequencing state restored successfully\");\n      return true;\n    } catch (error) {\n      console.error(`Failed to restore sequencing state: ${error}`);\n      return false;\n    }\n  }\n\n  /**\n   * Serialize Activity States\n   * Creates a serializable representation of all activity states\n   * @return {object} - Serialized activity states\n   */\n  private serializeActivityStates(): any {\n    const states: any = {};\n\n    const serializeActivity = (activity: Activity) => {\n      states[activity.id] = {\n        id: activity.id,\n        title: activity.title,\n        isActive: activity.isActive,\n        isSuspended: activity.isSuspended,\n        isCompleted: activity.isCompleted,\n        completionStatus: activity.completionStatus,\n        successStatus: activity.successStatus,\n        attemptCount: activity.attemptCount,\n        attemptCompletionAmount: activity.attemptCompletionAmount,\n        attemptAbsoluteDuration: activity.attemptAbsoluteDuration,\n        attemptExperiencedDuration: activity.attemptExperiencedDuration,\n        activityAbsoluteDuration: activity.activityAbsoluteDuration,\n        activityExperiencedDuration: activity.activityExperiencedDuration,\n        objectiveSatisfiedStatus: activity.objectiveSatisfiedStatus,\n        objectiveMeasureStatus: activity.objectiveMeasureStatus,\n        objectiveNormalizedMeasure: activity.objectiveNormalizedMeasure,\n        progressMeasure: activity.progressMeasure,\n        progressMeasureStatus: activity.progressMeasureStatus,\n        isAvailable: activity.isAvailable,\n        location: activity.location,\n        attemptAbsoluteStartTime: activity.attemptAbsoluteStartTime\n      };\n\n      // Recursively serialize children\n      for (const child of activity.children) {\n        serializeActivity(child);\n      }\n    };\n\n    if (this.activityTree.root) {\n      serializeActivity(this.activityTree.root);\n    }\n\n    return states;\n  }\n\n  /**\n   * Deserialize Activity States\n   * Restores activity states from serialized data\n   * @param {any} states - Serialized activity states\n   */\n  private deserializeActivityStates(states: any): void {\n    const restoreActivity = (activity: Activity) => {\n      const state = states[activity.id];\n      if (state) {\n        activity.isActive = state.isActive || false;\n        activity.isSuspended = state.isSuspended || false;\n        activity.isCompleted = state.isCompleted || false;\n        activity.completionStatus = state.completionStatus || \"unknown\";\n        activity.successStatus = state.successStatus || \"unknown\";\n        activity.attemptCount = state.attemptCount || 0;\n        activity.attemptCompletionAmount = state.attemptCompletionAmount || 0;\n        activity.attemptAbsoluteDuration = state.attemptAbsoluteDuration || \"PT0H0M0S\";\n        activity.attemptExperiencedDuration = state.attemptExperiencedDuration || \"PT0H0M0S\";\n        activity.activityAbsoluteDuration = state.activityAbsoluteDuration || \"PT0H0M0S\";\n        activity.activityExperiencedDuration = state.activityExperiencedDuration || \"PT0H0M0S\";\n        activity.objectiveSatisfiedStatus = state.objectiveSatisfiedStatus || false;\n        activity.objectiveMeasureStatus = state.objectiveMeasureStatus || false;\n        activity.objectiveNormalizedMeasure = state.objectiveNormalizedMeasure || 0;\n        activity.progressMeasure = state.progressMeasure || null;\n        activity.progressMeasureStatus = state.progressMeasureStatus || false;\n        activity.isAvailable = state.isAvailable !== false; // Default to true\n        activity.location = state.location || \"\";\n        activity.attemptAbsoluteStartTime = state.attemptAbsoluteStartTime || null;\n      }\n\n      // Recursively restore children\n      for (const child of activity.children) {\n        restoreActivity(child);\n      }\n    };\n\n    if (this.activityTree.root) {\n      restoreActivity(this.activityTree.root);\n    }\n  }\n\n  /**\n   * Get Navigation State\n   * Returns current navigation validity and ADL nav state\n   * @return {any} - Navigation state\n   */\n  private getNavigationState(): any {\n    if (!this.adlNav) {\n      return null;\n    }\n\n    return {\n      request: this.adlNav.request || \"_none_\",\n      requestValid: {\n        continue: this.adlNav.request_valid?.continue || \"false\",\n        previous: this.adlNav.request_valid?.previous || \"false\",\n        choice: this.adlNav.request_valid?.choice || \"false\",\n        jump: this.adlNav.request_valid?.jump || \"false\",\n        exit: this.adlNav.request_valid?.exit || \"false\",\n        exitAll: this.adlNav.request_valid?.exitAll || \"false\",\n        abandon: this.adlNav.request_valid?.abandon || \"false\",\n        abandonAll: this.adlNav.request_valid?.abandonAll || \"false\",\n        suspendAll: this.adlNav.request_valid?.suspendAll || \"false\"\n      }\n    };\n  }\n\n  /**\n   * Restore Navigation State\n   * Restores ADL navigation state\n   * @param {any} navState - Navigation state to restore\n   */\n  private restoreNavigationState(navState: any): void {\n    if (!this.adlNav || !navState) {\n      return;\n    }\n\n    try {\n      // Restore navigation request validity\n      if (navState.requestValid) {\n        const requestValid = navState.requestValid;\n        this.adlNav.request_valid.continue = requestValid.continue || \"false\";\n        this.adlNav.request_valid.previous = requestValid.previous || \"false\";\n        this.adlNav.request_valid.choice = requestValid.choice || \"false\";\n        this.adlNav.request_valid.jump = requestValid.jump || \"false\";\n        this.adlNav.request_valid.exit = requestValid.exit || \"false\";\n        this.adlNav.request_valid.exitAll = requestValid.exitAll || \"false\";\n        this.adlNav.request_valid.abandon = requestValid.abandon || \"false\";\n        this.adlNav.request_valid.abandonAll = requestValid.abandonAll || \"false\";\n        this.adlNav.request_valid.suspendAll = requestValid.suspendAll || \"false\";\n      }\n    } catch (error) {\n      // Navigation properties might be read-only after initialization\n      console.warn(`Could not fully restore navigation state: ${error}`);\n    }\n  }\n\n  /**\n   * Enhanced Complex Choice Path Validation\n   * Implements comprehensive choice validation with nested hierarchy support\n   * Priority 1 Gap: Complex Choice Path Validation\n   * @param {Activity | null} currentActivity - Current activity\n   * @param {Activity} targetActivity - Target activity for choice\n   * @return {{valid: boolean, exception: string | null}} - Validation result\n   */\n  private validateComplexChoicePath(currentActivity: Activity | null, targetActivity: Activity): {\n    valid: boolean,\n    exception: string | null\n  } {\n    // Check if target is hidden from choice\n    if (targetActivity.isHiddenFromChoice) {\n      return { valid: false, exception: \"NB.2.1-11\" };\n    }\n\n    // Check if target is disabled\n    if (this.isActivityDisabled(targetActivity)) {\n      return { valid: false, exception: \"NB.2.1-11\" };\n    }\n\n    if (currentActivity) {\n      const commonAncestor = this.findCommonAncestor(currentActivity, targetActivity);\n      if (!commonAncestor) {\n        return { valid: false, exception: \"NB.2.1-11\" };\n      }\n\n      // Enhanced constrainChoice control validation in nested hierarchies\n      const constrainChoiceValidation = this.validateConstrainChoiceControls(currentActivity, targetActivity, commonAncestor);\n      if (!constrainChoiceValidation.valid) {\n        return constrainChoiceValidation;\n      }\n\n      // Validate choice sets with multiple targets\n      const choiceSetValidation = this.validateChoiceSetConstraints(currentActivity, targetActivity, commonAncestor);\n      if (!choiceSetValidation.valid) {\n        return choiceSetValidation;\n      }\n    }\n\n    // Path to root validation for choice control\n    let activity: Activity | null = targetActivity;\n    while (activity) {\n      if (activity.parent && !activity.parent.sequencingControls.choice) {\n        return { valid: false, exception: \"NB.2.1-11\" };\n      }\n      activity = activity.parent;\n    }\n\n    return { valid: true, exception: null };\n  }\n\n  /**\n   * Enhanced Forward-Only Navigation Constraints\n   * Handles forward-only constraints at different cluster levels\n   * Priority 1 Gap: Forward-Only Navigation Constraints\n   * @param {Activity} currentActivity - Current activity\n   * @return {{valid: boolean, exception: string | null}} - Validation result\n   */\n  private validateForwardOnlyConstraints(currentActivity: Activity): {\n    valid: boolean,\n    exception: string | null\n  } {\n    // Check forward-only constraint at immediate parent level\n    if (currentActivity.parent?.sequencingControls.forwardOnly) {\n      return { valid: false, exception: \"NB.2.1-8\" };\n    }\n\n    // Check forward-only constraints at higher cluster levels\n    let ancestor = currentActivity.parent?.parent;\n    while (ancestor) {\n      if (ancestor.sequencingControls.forwardOnly) {\n        // If any ancestor cluster has forwardOnly=true, previous navigation is blocked\n        return { valid: false, exception: \"NB.2.1-8\" };\n      }\n      ancestor = ancestor.parent;\n    }\n\n    return { valid: true, exception: null };\n  }\n\n  /**\n   * Enhanced constrainChoice Control Validation\n   * Implements proper constrainChoice validation in nested hierarchies\n   * Priority 1 Gap: constrainChoice control validation\n   * @param {Activity} currentActivity - Current activity\n   * @param {Activity} targetActivity - Target activity\n   * @param {Activity} commonAncestor - Common ancestor\n   * @return {{valid: boolean, exception: string | null}} - Validation result\n   */\n  private validateConstrainChoiceControls(currentActivity: Activity, targetActivity: Activity, commonAncestor: Activity): {\n    valid: boolean,\n    exception: string | null\n  } {\n    // Check constrainChoice at common ancestor level\n    if (commonAncestor.sequencingControls.constrainChoice) {\n      // Additional constraint validation for choice navigation\n      // This would include checking if the choice is within allowed boundaries\n      const currentIndex = commonAncestor.children.indexOf(this.findChildContaining(commonAncestor, currentActivity)!);\n      const targetIndex = commonAncestor.children.indexOf(this.findChildContaining(commonAncestor, targetActivity)!);\n\n      // Example constraint: constrainChoice might limit choices to adjacent activities only\n      if (Math.abs(currentIndex - targetIndex) > 1) {\n        return { valid: false, exception: \"NB.2.1-11\" };\n      }\n    }\n\n    // Check constrainChoice controls up the hierarchy\n    let ancestor = commonAncestor.parent;\n    while (ancestor) {\n      if (ancestor.sequencingControls.constrainChoice) {\n        // Apply ancestor-level constraints\n        const ancestorValidation = this.validateAncestorConstraints(ancestor, currentActivity, targetActivity);\n        if (!ancestorValidation.valid) {\n          return ancestorValidation;\n        }\n      }\n      ancestor = ancestor.parent;\n    }\n\n    return { valid: true, exception: null };\n  }\n\n  /**\n   * Validate Choice Set Constraints\n   * Validates choice sets with multiple targets\n   * Priority 1 Gap: Choice Set Constraints\n   * @param {Activity} currentActivity - Current activity\n   * @param {Activity} targetActivity - Target activity\n   * @param {Activity} commonAncestor - Common ancestor\n   * @return {{valid: boolean, exception: string | null}} - Validation result\n   */\n  private validateChoiceSetConstraints(currentActivity: Activity, targetActivity: Activity, commonAncestor: Activity): {\n    valid: boolean,\n    exception: string | null\n  } {\n    // Check if target is within the valid choice set\n    const validChoiceSet = this.getValidChoiceSet(commonAncestor, currentActivity);\n    if (!validChoiceSet.includes(targetActivity)) {\n      return { valid: false, exception: \"NB.2.1-11\" };\n    }\n\n    return { valid: true, exception: null };\n  }\n\n  /**\n   * Check if activity is disabled\n   * Priority 1 Gap: Disabled Activity Detection\n   * @param {Activity} activity - Activity to check\n   * @return {boolean} - True if disabled\n   */\n  private isActivityDisabled(activity: Activity): boolean {\n    // Check if activity is disabled through sequencing rules\n    const preConditionResult = this.evaluatePreConditionRulesForChoice(activity);\n    return preConditionResult === \"DISABLED\";\n  }\n\n  /**\n   * Find child activity that contains the target activity\n   * @param {Activity} parent - Parent activity\n   * @param {Activity} target - Target activity to find\n   * @return {Activity | null} - Child activity containing target\n   */\n  private findChildContaining(parent: Activity, target: Activity): Activity | null {\n    for (const child of parent.children) {\n      if (child === target) {\n        return child;\n      }\n      if (this.activityContains(child, target)) {\n        return child;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Check if an activity contains another activity in its hierarchy\n   * @param {Activity} container - Container activity\n   * @param {Activity} target - Target activity\n   * @return {boolean} - True if container contains target\n   */\n  private activityContains(container: Activity, target: Activity): boolean {\n    let current: Activity | null = target;\n    while (current) {\n      if (current === container) {\n        return true;\n      }\n      current = current.parent;\n    }\n    return false;\n  }\n\n  /**\n   * Validate ancestor-level constraints\n   * @param {Activity} ancestor - Ancestor activity\n   * @param {Activity} currentActivity - Current activity\n   * @param {Activity} targetActivity - Target activity\n   * @return {{valid: boolean, exception: string | null}} - Validation result\n   */\n  private validateAncestorConstraints(ancestor: Activity, currentActivity: Activity, targetActivity: Activity): {\n    valid: boolean,\n    exception: string | null\n  } {\n    // Enforce forwardOnly and mandatory activity constraints at ancestor level\n    const children = ancestor.children;\n    if (!children || children.length === 0) {\n      return { valid: true, exception: null };\n    }\n\n    const currentTop = this.findChildContaining(ancestor, currentActivity);\n    const targetTop = this.findChildContaining(ancestor, targetActivity);\n    if (!currentTop || !targetTop) {\n      return { valid: false, exception: \"NB.2.1-11\" };\n    }\n\n    const currentIndex = children.indexOf(currentTop);\n    const targetIndex = children.indexOf(targetTop);\n\n    // Forward-only prevents backwards choice under this ancestor\n    if (ancestor.sequencingControls.forwardOnly && targetIndex < currentIndex) {\n      return { valid: false, exception: \"NB.2.1-8\" };\n    }\n\n    // Do not skip mandatory incomplete siblings when moving forward\n    if (targetIndex > currentIndex) {\n      for (let i = currentIndex + 1; i < targetIndex; i++) {\n        const between = children[i];\n        if (between && this.helperIsActivityMandatory(between) && !this.helperIsActivityCompleted(between)) {\n          return { valid: false, exception: \"NB.2.1-11\" };\n        }\n      }\n    }\n\n    return { valid: true, exception: null };\n  }\n\n  /** Helper: mandatory activity detection (mirrors SequencingProcess behavior) */\n  private helperIsActivityMandatory(activity: Activity): boolean {\n    if (activity.sequencingRules && activity.sequencingRules.preConditionRules) {\n      for (const rule of activity.sequencingRules.preConditionRules) {\n        if ((rule as any).action === \"skip\" && (rule as any).conditions && (rule as any).conditions.length === 0) {\n          return false;\n        }\n      }\n    }\n    return (activity as any).mandatory !== false;\n  }\n\n  /** Helper: completed-state check (mirrors SequencingProcess behavior) */\n  private helperIsActivityCompleted(activity: Activity): boolean {\n    return (\n      activity.completionStatus === \"completed\" ||\n      (activity as any).successStatus === \"passed\" ||\n      activity.successStatus === \"passed\"\n    );\n  }\n\n  /**\n   * Get valid choice set for current activity\n   * @param {Activity} commonAncestor - Common ancestor\n   * @param {Activity} currentActivity - Current activity\n   * @return {Activity[]} - Array of valid choice activities\n   */\n  private getValidChoiceSet(commonAncestor: Activity, currentActivity: Activity): Activity[] {\n    const validChoices: Activity[] = [];\n\n    // Get all potential choice targets within the common ancestor\n    const allDescendants = this.getAllDescendants(commonAncestor);\n\n    for (const descendant of allDescendants) {\n      if (this.isValidChoiceTarget(descendant, currentActivity)) {\n        validChoices.push(descendant);\n      }\n    }\n\n    return validChoices;\n  }\n\n  /**\n   * Get all descendants of an activity\n   * @param {Activity} activity - Parent activity\n   * @return {Activity[]} - Array of all descendant activities\n   */\n  private getAllDescendants(activity: Activity): Activity[] {\n    const descendants: Activity[] = [];\n\n    for (const child of activity.children) {\n      descendants.push(child);\n      descendants.push(...this.getAllDescendants(child));\n    }\n\n    return descendants;\n  }\n\n  /**\n   * Check if activity is valid choice target\n   * @param {Activity} target - Target activity\n   * @param {Activity} currentActivity - Current activity\n   * @return {boolean} - True if valid choice target\n   */\n  private isValidChoiceTarget(target: Activity, currentActivity: Activity): boolean {\n    // Basic validation for choice target\n    if (target.isHiddenFromChoice) {\n      return false;\n    }\n\n    if (target === currentActivity) {\n      return false;\n    }\n\n    return !this.isActivityDisabled(target);\n  }\n\n  /**\n   * Evaluate pre-condition rules for choice navigation\n   * @param {Activity} activity - Activity to evaluate\n   * @return {string | null} - Rule result or null\n   */\n  private evaluatePreConditionRulesForChoice(activity: Activity): string | null {\n    // This would evaluate the activity's pre-condition rules\n    // and return \"DISABLED\", \"SKIP\", \"HIDDEN_FROM_CHOICE\", or null\n    const preRules = activity.sequencingRules.preConditionRules;\n\n    for (const rule of preRules) {\n      // Evaluate rule conditions\n      let conditionsMet = true;\n\n      if (rule.conditionCombination === \"all\") {\n        conditionsMet = rule.conditions.every(condition => condition.evaluate(activity));\n      } else {\n        conditionsMet = rule.conditions.some(condition => condition.evaluate(activity));\n      }\n\n      if (conditionsMet) {\n        // Return the action as string\n        switch (rule.action) {\n          case \"skip\":\n            return \"SKIP\";\n          case \"disabled\":\n            return \"DISABLED\";\n          case \"hideFromChoice\":\n            return \"HIDDEN_FROM_CHOICE\";\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Validate Activity Tree State Consistency\n   * Priority 4 Gap: Activity Tree State Consistency\n   * @param {Activity} activity - Activity to validate\n   * @return {{consistent: boolean, exception: string | null}} - Consistency result\n   */\n  private validateActivityTreeStateConsistency(activity: Activity): {\n    consistent: boolean,\n    exception: string | null\n  } {\n    // Check that the activity tree is in a consistent state for delivery\n    if (!this.activityTree.root) {\n      return { consistent: false, exception: \"DB.1.1-4\" }; // No activity tree\n    }\n\n    // Validate activity is part of the current tree\n    if (!this.isActivityPartOfTree(activity, this.activityTree.root)) {\n      return { consistent: false, exception: \"DB.1.1-5\" }; // Activity not in tree\n    }\n\n    // Check for conflicting active activities\n    const activeActivities = this.getActiveActivities();\n    if (activeActivities.length > 1) {\n      // Multiple active activities indicate inconsistent state\n      this.fireEvent(\"onStateInconsistency\", {\n        activeActivities: activeActivities.map(a => a.id),\n        targetActivity: activity.id\n      });\n      return { consistent: false, exception: \"DB.1.1-6\" }; // State inconsistency\n    }\n\n    // Validate parent-child relationships are intact\n    let current: Activity | null = activity;\n    while (current?.parent) {\n      if (!current.parent.children.includes(current)) {\n        return { consistent: false, exception: \"DB.1.1-7\" }; // Broken parent-child relationship\n      }\n      current = current.parent;\n    }\n\n    return { consistent: true, exception: null };\n  }\n\n  /**\n   * Validate Resource Constraints\n   * Priority 4 Gap: Resource Constraint Checking\n   * @param {Activity} activity - Activity to validate\n   * @return {{available: boolean, exception: string | null}} - Resource availability result\n   */\n  private validateResourceConstraints(activity: Activity): {\n    available: boolean,\n    exception: string | null\n  } {\n    // Check if required resources are available\n    // This could include checking for:\n    // - Required plugins or software components\n    // - Network connectivity for web-based resources\n    // - File system access for local resources\n    // - Memory and processing capacity\n\n    // Example resource validations (simplified):\n\n    // Check if activity requires specific resources that might not be available\n    const requiredResources = this.getActivityRequiredResources(activity);\n    for (const resource of requiredResources) {\n      if (!this.isResourceAvailable(resource)) {\n        return {\n          available: false,\n          exception: \"DB.1.1-8\" // Resource not available\n        };\n      }\n    }\n\n    // Check system resource limits\n    const systemResourceCheck = this.checkSystemResourceLimits();\n    if (!systemResourceCheck.adequate) {\n      return {\n        available: false,\n        exception: \"DB.1.1-9\" // Insufficient system resources\n      };\n    }\n\n    return { available: true, exception: null };\n  }\n\n  /**\n   * Validate Concurrent Delivery Prevention\n   * Priority 4 Gap: Prevent Multiple Simultaneous Deliveries\n   * @param {Activity} activity - Activity to validate\n   * @return {{allowed: boolean, exception: string | null}} - Concurrency check result\n   */\n  private validateConcurrentDeliveryPrevention(activity: Activity): {\n    allowed: boolean,\n    exception: string | null\n  } {\n    // Check if another delivery is currently in progress\n    if (this.contentDelivered && this.activityTree.currentActivity && this.activityTree.currentActivity !== activity) {\n      return {\n        allowed: false,\n        exception: \"DB.1.1-10\" // Another activity is currently being delivered\n      };\n    }\n\n    // Check for pending delivery requests in queue\n    if (this.hasPendingDeliveryRequests()) {\n      return {\n        allowed: false,\n        exception: \"DB.1.1-11\" // Delivery request already in queue\n      };\n    }\n\n    // Validate delivery lock status\n    if (this.isDeliveryLocked()) {\n      return {\n        allowed: false,\n        exception: \"DB.1.1-12\" // Delivery is currently locked\n      };\n    }\n\n    return { allowed: true, exception: null };\n  }\n\n  /**\n   * Validate Activity Dependencies\n   * Priority 4 Gap: Dependency Resolution\n   * @param {Activity} activity - Activity to validate\n   * @return {{satisfied: boolean, exception: string | null}} - Dependency check result\n   */\n  private validateActivityDependencies(activity: Activity): {\n    satisfied: boolean,\n    exception: string | null\n  } {\n    // Check prerequisite activities\n    const prerequisites = this.getActivityPrerequisites(activity);\n    for (const prerequisite of prerequisites) {\n      if (!this.isPrerequisiteSatisfied(prerequisite, activity)) {\n        return {\n          satisfied: false,\n          exception: \"DB.1.1-13\" // Prerequisites not satisfied\n        };\n      }\n    }\n\n    // Check objective dependencies\n    const objectiveDependencies = this.getObjectiveDependencies(activity);\n    for (const dependency of objectiveDependencies) {\n      if (!this.isObjectiveDependencySatisfied(dependency)) {\n        return {\n          satisfied: false,\n          exception: \"DB.1.1-14\" // Objective dependencies not met\n        };\n      }\n    }\n\n    // Check sequencing rule dependencies\n    const sequencingDependencies = this.getSequencingRuleDependencies(activity);\n    if (!sequencingDependencies.satisfied) {\n      return {\n        satisfied: false,\n        exception: \"DB.1.1-15\" // Sequencing dependencies not met\n      };\n    }\n\n    return { satisfied: true, exception: null };\n  }\n\n  /**\n   * Helper methods for delivery request validation\n   */\n  private isActivityPartOfTree(activity: Activity, root: Activity): boolean {\n    if (activity === root) {\n      return true;\n    }\n\n    for (const child of root.children) {\n      if (this.isActivityPartOfTree(activity, child)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private getActiveActivities(): Activity[] {\n    const activeActivities: Activity[] = [];\n    if (this.activityTree.root) {\n      this.collectActiveActivities(this.activityTree.root, activeActivities);\n    }\n    return activeActivities;\n  }\n\n  private collectActiveActivities(activity: Activity, activeActivities: Activity[]): void {\n    if (activity.isActive) {\n      activeActivities.push(activity);\n    }\n    for (const child of activity.children) {\n      this.collectActiveActivities(child, activeActivities);\n    }\n  }\n\n  private getActivityRequiredResources(activity: Activity): string[] {\n    // Parse activity metadata for resource requirements\n    // Check activity definition for required resources like bandwidth, plugins, etc.\n    const resources: string[] = [];\n\n    // Check for multimedia requirements based on activity title and location\n    const activityInfo = (activity.title + \" \" + activity.location).toLowerCase();\n    if (activityInfo.includes(\"video\") || activityInfo.includes(\"multimedia\")) {\n      resources.push(\"video-codec\");\n    }\n    if (activityInfo.includes(\"audio\") || activityInfo.includes(\"sound\")) {\n      resources.push(\"audio-codec\");\n    }\n\n    // Check for plugin requirements from activity location/title\n    if (activityInfo.includes(\"flash\") || activityInfo.includes(\".swf\")) {\n      resources.push(\"flash-plugin\");\n    }\n    if (activityInfo.includes(\"java\") || activityInfo.includes(\"applet\")) {\n      resources.push(\"java-runtime\");\n    }\n\n    // Check for bandwidth requirements based on activity type\n    if (activity.children && activity.children.length > 0) {\n      resources.push(\"high-bandwidth\"); // Container activities may need more bandwidth\n    }\n\n    // Check for storage requirements based on duration limits\n    if (activity.attemptAbsoluteDurationLimit &&\n      this.parseDurationToMinutes(activity.attemptAbsoluteDurationLimit) > 60) {\n      resources.push(\"extended-storage\"); // Long duration activities need more storage\n    }\n\n    // Check for specific SCORM requirements\n    if (activity.attemptLimit && activity.attemptLimit > 1) {\n      resources.push(\"persistent-storage\"); // Multiple attempts need storage\n    }\n\n    return resources;\n  }\n\n  private isResourceAvailable(resource: string): boolean {\n    // Check if the specified resource is available in the runtime environment\n    try {\n      switch (resource) {\n        case \"video-codec\":\n          // Check if HTML5 video is supported\n          return !!(document.createElement(\"video\").canPlayType);\n\n        case \"audio-codec\":\n          // Check if HTML5 audio is supported\n          return !!(document.createElement(\"audio\").canPlayType);\n\n        case \"flash-plugin\":\n          // Check for Flash plugin (legacy support)\n          return (navigator.plugins && Array.from(navigator.plugins).some(plugin => plugin.name === \"Shockwave Flash\"));\n\n        case \"java-runtime\":\n          // Check for Java support (mostly deprecated in modern browsers)\n          return (navigator.plugins && Array.from(navigator.plugins).some(plugin => plugin.name === \"Java\"));\n\n        case \"high-bandwidth\":\n          // Check network connection (basic heuristic)\n          if (\"connection\" in navigator) {\n            const connection = (navigator as any).connection;\n            return connection.effectiveType === \"4g\" || connection.downlink > 5;\n          }\n          return true; // Assume available if can't detect\n\n        case \"extended-storage\":\n          // Check for sufficient storage (estimate 100MB needed)\n          if (\"storage\" in navigator && \"estimate\" in navigator.storage) {\n            navigator.storage.estimate().then(estimate => {\n              return (estimate.quota || 0) > 100 * 1024 * 1024; // 100MB\n            });\n          }\n          return true; // Assume available if can't detect\n\n        case \"persistent-storage\":\n          // Check for persistent storage capabilities\n          return \"localStorage\" in window && \"sessionStorage\" in window;\n\n        default:\n          // Unknown resource, assume available\n          return true;\n      }\n    } catch (error) {\n      // If any check fails, assume resource is unavailable\n      return false;\n    }\n  }\n\n  private checkSystemResourceLimits(): { adequate: boolean } {\n    // Check system memory, CPU, and other resource constraints\n    try {\n      let adequate = true;\n\n      // Check memory usage if available (Chrome/Edge only)\n      if (\"memory\" in performance) {\n        const memory = (performance as any).memory;\n        const memoryUsagePercent = memory.usedJSHeapSize / memory.jsHeapSizeLimit;\n        if (memoryUsagePercent > 0.8) { // More than 80% memory used\n          adequate = false;\n        }\n      }\n\n      // Check for device memory hint (modern browsers)\n      if (\"deviceMemory\" in navigator) {\n        const deviceMemory = (navigator as any).deviceMemory;\n        if (deviceMemory < 2) { // Less than 2GB device memory\n          adequate = false;\n        }\n      }\n\n      // Check hardware concurrency (rough CPU check)\n      if (\"hardwareConcurrency\" in navigator) {\n        const cores = navigator.hardwareConcurrency;\n        if (cores < 2) { // Single core devices might struggle\n          adequate = false;\n        }\n      }\n\n      // Check connection quality for network-intensive activities\n      if (\"connection\" in navigator) {\n        const connection = (navigator as any).connection;\n        if (connection.saveData || connection.effectiveType === \"slow-2g\") {\n          adequate = false;\n        }\n      }\n\n      return { adequate };\n    } catch (error) {\n      // If checks fail, assume resources are adequate\n      return { adequate: true };\n    }\n  }\n\n  private hasPendingDeliveryRequests(): boolean {\n    // Check if there are pending delivery requests in the system\n    // This would track asynchronous operations like:\n    // - CMI data commits to LMS\n    // - Asset downloads\n    // - External service calls\n\n    // Check for pending async operations in the activity tree state\n    if (this.activityTree && (this.activityTree as any).pendingRequests) {\n      return (this.activityTree as any).pendingRequests.length > 0;\n    }\n\n    // Check for any pending fetch operations (if using fetch API)\n    if (typeof window !== \"undefined\" && (window as any).pendingScormRequests) {\n      return (window as any).pendingScormRequests > 0;\n    }\n\n    // Check event service for pending operations\n    if (this.eventCallback) {\n      // Fire event to check for pending operations\n      try {\n        this.eventCallback(\"check_pending_requests\", {});\n        // Implementation would depend on the event system returning status\n      } catch (error) {\n        // If event fails, assume no pending requests\n      }\n    }\n\n    return false;\n  }\n\n  private isDeliveryLocked(): boolean {\n    // Check if delivery is currently locked due to:\n    // - Active navigation request processing\n    // - Pending termination/suspension\n    // - Resource constraints\n    // - System maintenance mode\n\n    // Check for navigation lock\n    if (this.activityTree && (this.activityTree as any).navigationLocked) {\n      return true;\n    }\n\n    // Check for active termination process\n    if (this.activityTree && (this.activityTree as any).terminationInProgress) {\n      return true;\n    }\n\n    // Check system resource limits\n    const resourceCheck = this.checkSystemResourceLimits();\n    if (!resourceCheck.adequate) {\n      return true; // Lock delivery if resources are inadequate\n    }\n\n    // Check for maintenance mode (would be set by LMS)\n    return !!(typeof window !== \"undefined\" && (window as any).scormMaintenanceMode);\n  }\n\n  private getActivityPrerequisites(activity: Activity): string[] {\n    // Return list of prerequisite activity IDs based on SCORM 2004 sequencing rules\n    const prerequisites: string[] = [];\n\n    // Check for preCondition rules that reference other activities\n    if (activity.sequencingRules && activity.sequencingRules.preConditionRules) {\n      for (const rule of activity.sequencingRules.preConditionRules) {\n        if (rule.conditions && rule.conditions.length > 0) {\n          for (const condition of rule.conditions) {\n            // Look for objectiveStatusKnown, objectiveSatisfied, etc. conditions\n            // that reference global objectives which may be satisfied by other activities\n            if ((condition as any).referencedObjectiveID &&\n              (condition as any).referencedObjectiveID !== activity.id) {\n              prerequisites.push((condition as any).referencedObjectiveID);\n            }\n          }\n        }\n      }\n    }\n\n    // Check for sequencing control dependencies\n    // Activities with choiceExit=false may depend on completion of siblings\n    if (activity.parent && activity.sequencingControls &&\n      !activity.sequencingControls.choiceExit) {\n      const siblings = activity.parent.children;\n      if (siblings) {\n        const activityIndex = siblings.indexOf(activity);\n\n        // Add previous siblings as prerequisites for sequential flow\n        for (let i = 0; i < activityIndex; i++) {\n          const sibling = siblings[i];\n          if (sibling) {\n            prerequisites.push(sibling.id);\n          }\n        }\n      }\n    }\n\n    // Check for explicit prerequisite metadata (if defined in activity)\n    if ((activity as any).prerequisiteActivities) {\n      prerequisites.push(...(activity as any).prerequisiteActivities);\n    }\n\n    return Array.from(new Set(prerequisites)); // Remove duplicates\n  }\n\n  private isPrerequisiteSatisfied(prerequisiteId: string, _activity: Activity): boolean {\n    // Check if prerequisite is satisfied\n    const prerequisite = this.activityTree.getActivity(prerequisiteId);\n    if (!prerequisite) {\n      return false;\n    }\n\n    // Check if prerequisite is completed\n    return prerequisite.completionStatus === \"completed\";\n  }\n\n  private getObjectiveDependencies(activity: Activity): string[] {\n    // Return list of objective dependencies based on SCORM 2004 objective mapping\n    const dependencies: string[] = [];\n\n    // Check activity's objective mappings for global objective references\n    // Note: Activity class doesn't currently have objectives property - this is a future enhancement\n    const objectives = (activity as any).objectives;\n    if (objectives && objectives.length > 0) {\n      for (const objective of objectives) {\n        // Check for global objective mapping\n        if ((objective as any).globalObjectiveID) {\n          dependencies.push((objective as any).globalObjectiveID);\n        }\n\n        // Check for read/write objective mappings\n        if (!(objective as any).satisfiedByMeasure && (objective as any).readNormalizedMeasure) {\n          // This objective depends on external measure\n          dependencies.push(objective.id + \"_measure\");\n        }\n      }\n    }\n\n    // Check sequencing rules for objective references\n    if (activity.sequencingRules) {\n      const allRules = [\n        ...(activity.sequencingRules.preConditionRules || []),\n        ...(activity.sequencingRules.exitConditionRules || []),\n        ...(activity.sequencingRules.postConditionRules || [])\n      ];\n\n      for (const rule of allRules) {\n        if (rule.conditions && rule.conditions.length > 0) {\n          for (const condition of rule.conditions) {\n            if ((condition as any).objectiveReference &&\n              (condition as any).objectiveReference !== activity.id) {\n              dependencies.push((condition as any).objectiveReference);\n            }\n          }\n        }\n      }\n    }\n\n    return Array.from(new Set(dependencies)); // Remove duplicates\n  }\n\n  private isObjectiveDependencySatisfied(objectiveId: string): boolean {\n    // Check if objective dependency is satisfied according to SCORM 2004 rules\n\n    // Handle global objective references\n    if (this.activityTree && (this.activityTree as any).globalObjectives) {\n      const globalObjectives = (this.activityTree as any).globalObjectives;\n      const globalObjective = globalObjectives[objectiveId];\n\n      if (globalObjective) {\n        // Check if global objective is satisfied\n        return globalObjective.satisfied === true &&\n          globalObjective.statusKnown === true;\n      }\n    }\n\n    // Handle measure-based dependencies\n    if (objectiveId.endsWith(\"_measure\")) {\n      const baseObjectiveId = objectiveId.replace(\"_measure\", \"\");\n      if (this.activityTree && (this.activityTree as any).globalObjectives) {\n        const globalObjectives = (this.activityTree as any).globalObjectives;\n        const globalObjective = globalObjectives[baseObjectiveId];\n\n        if (globalObjective) {\n          // Check if measure is available and within acceptable range\n          return globalObjective.measureKnown === true &&\n            globalObjective.normalizedMeasure >= 0;\n        }\n      }\n    }\n\n    // Handle activity-specific objective references\n    const referencedActivity = this.activityTree.getActivity(objectiveId);\n    if (referencedActivity) {\n      return referencedActivity.objectiveSatisfiedStatus && referencedActivity.objectiveMeasureStatus;\n    }\n\n    // If objective is not found or cannot be evaluated, assume not satisfied\n    return false;\n  }\n\n  private getSequencingRuleDependencies(activity: Activity): { satisfied: boolean } {\n    // Check sequencing rule dependencies for SCORM 2004 compliance\n    let satisfied = true;\n\n    try {\n      // Check pre-condition rule dependencies\n      if (activity.sequencingRules && activity.sequencingRules.preConditionRules) {\n        for (const rule of activity.sequencingRules.preConditionRules) {\n          if (rule.conditions && rule.conditions.length > 0) {\n            for (const condition of rule.conditions) {\n              // Check condition-specific dependencies\n              const conditionType = (condition as any).conditionType || condition.condition;\n\n              switch (conditionType) {\n                case \"activityProgressKnown\":\n                  // Depends on activity progress tracking being available\n                  if (!activity.progressMeasureStatus) satisfied = false;\n                  break;\n\n                case \"objectiveStatusKnown\":\n                case \"objectiveSatisfied\": {\n                  // Depends on objective evaluation system\n                  const objectiveId = (condition as any).referencedObjectiveID || activity.id;\n                  if (!this.isObjectiveDependencySatisfied(objectiveId)) satisfied = false;\n                  break;\n                }\n\n                case \"attemptLimitExceeded\":\n                  // Depends on attempt tracking\n                  if (activity.attemptLimit === null) satisfied = false;\n                  break;\n\n                case \"timeLimitExceeded\":\n                  // Depends on time tracking\n                  if (!activity.attemptAbsoluteDurationLimit &&\n                    !activity.activityAbsoluteDurationLimit) satisfied = false;\n                  break;\n\n                case \"always\":\n                case \"never\":\n                  // These conditions have no dependencies\n                  break;\n\n                default:\n                  // Unknown condition type, assume dependency not satisfied\n                  satisfied = false;\n              }\n            }\n          }\n        }\n      }\n\n      // Check exit condition rule dependencies (similar logic)\n      if (activity.sequencingRules && activity.sequencingRules.exitConditionRules) {\n        for (const rule of activity.sequencingRules.exitConditionRules) {\n          if (rule.conditions && rule.conditions.length > 0) {\n            for (const condition of rule.conditions) {\n              const conditionType = (condition as any).conditionType || condition.condition;\n\n              // Similar dependency checks as pre-conditions\n              if ([\"objectiveStatusKnown\", \"objectiveSatisfied\"].includes(conditionType)) {\n                const objectiveId = (condition as any).referencedObjectiveID || activity.id;\n                if (!this.isObjectiveDependencySatisfied(objectiveId)) satisfied = false;\n              }\n            }\n          }\n        }\n      }\n\n      // Check rollup rule dependencies\n      if (activity.rollupRules && activity.rollupRules.rules) {\n        for (const rule of activity.rollupRules.rules) {\n          if (rule.conditions && rule.conditions.length > 0) {\n            // Rollup rules depend on child activity completion\n            if (activity.children && activity.children.length > 0) {\n              for (const child of activity.children) {\n                if (!child.isCompleted) {\n                  satisfied = false;\n                  break;\n                }\n              }\n            }\n          }\n        }\n      }\n\n    } catch (error) {\n      // If any error occurs during dependency check, mark as not satisfied\n      satisfied = false;\n    }\n\n    return { satisfied };\n  }\n\n  /**\n   * Helper method to parse ISO 8601 duration to minutes\n   */\n  private parseDurationToMinutes(duration: string): number {\n    return getDurationAsSeconds(duration, scorm2004_regex.CMITimespan) / 60; // Convert seconds to minutes\n  }\n\n  /**\n   * INTEGRATION: Initialize Global Objective Map\n   * Sets up the global objective map for cross-activity objective synchronization\n   */\n  private initializeGlobalObjectiveMap(): void {\n    try {\n      this.globalObjectiveMap.clear();\n\n      // Initialize global objectives from activity tree if available\n      if (this.activityTree.root) {\n        this.collectGlobalObjectives(this.activityTree.root);\n      }\n\n      this.fireEvent(\"onGlobalObjectiveMapInitialized\", {\n        objectiveCount: this.globalObjectiveMap.size,\n        timestamp: new Date().toISOString()\n      });\n    } catch (error) {\n      this.fireEvent(\"onGlobalObjectiveMapError\", {\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: new Date().toISOString()\n      });\n    }\n  }\n\n  /**\n   * INTEGRATION: Collect Global Objectives\n   * Recursively collects global objectives from the activity tree\n   * @param {Activity} activity - Activity to collect objectives from\n   */\n  private collectGlobalObjectives(activity: Activity): void {\n    // Create a default global objective for this activity\n    const globalObjectiveId = activity.id + \"_global\";\n    if (!this.globalObjectiveMap.has(globalObjectiveId)) {\n      this.globalObjectiveMap.set(globalObjectiveId, {\n        id: globalObjectiveId,\n        satisfiedStatus: activity.objectiveSatisfiedStatus,\n        satisfiedStatusKnown: activity.objectiveMeasureStatus,\n        normalizedMeasure: activity.objectiveNormalizedMeasure,\n        normalizedMeasureKnown: activity.objectiveMeasureStatus,\n        progressMeasure: activity.progressMeasure,\n        progressMeasureKnown: activity.progressMeasureStatus,\n        completionStatus: activity.completionStatus,\n        completionStatusKnown: activity.completionStatus !== \"unknown\",\n        readSatisfiedStatus: true,\n        writeSatisfiedStatus: true,\n        readNormalizedMeasure: true,\n        writeNormalizedMeasure: true,\n        readProgressMeasure: true,\n        writeProgressMeasure: true,\n        readCompletionStatus: true,\n        writeCompletionStatus: true,\n        satisfiedByMeasure: activity.scaledPassingScore !== null,\n        updateAttemptData: true\n      });\n    }\n\n    // Process children recursively\n    for (const child of activity.children) {\n      this.collectGlobalObjectives(child);\n    }\n  }\n\n  /**\n   * INTEGRATION: Get Global Objective Map\n   * Returns the current global objective map for external access\n   * @return {Map<string, any>} - Current global objective map\n   */\n  public getGlobalObjectiveMap(): Map<string, any> {\n    return this.globalObjectiveMap;\n  }\n\n  /**\n   * INTEGRATION: Update Global Objective\n   * Updates a specific global objective with new data\n   * @param {string} objectiveId - Objective ID to update\n   * @param {any} objectiveData - New objective data\n   */\n  public updateGlobalObjective(objectiveId: string, objectiveData: any): void {\n    try {\n      this.globalObjectiveMap.set(objectiveId, {\n        ...this.globalObjectiveMap.get(objectiveId),\n        ...objectiveData,\n        lastUpdated: new Date().toISOString()\n      });\n\n      this.fireEvent(\"onGlobalObjectiveUpdated\", {\n        objectiveId,\n        data: objectiveData,\n        timestamp: new Date().toISOString()\n      });\n    } catch (error) {\n      this.fireEvent(\"onGlobalObjectiveUpdateError\", {\n        objectiveId,\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: new Date().toISOString()\n      });\n    }\n  }\n}\n","import { Activity } from \"../cmi/scorm2004/sequencing/activity\";\nimport {\n  SequencingResult,\n  DeliveryRequestType,\n} from \"../cmi/scorm2004/sequencing/sequencing_process\";\nimport { EventService } from \"./EventService\";\nimport { LoggingService } from \"./LoggingService\";\nimport { IEventService, ILoggingService } from \"../interfaces/services\";\n\n/**\n * Interface for activity delivery callbacks\n */\nexport interface ActivityDeliveryCallbacks {\n  onDeliverActivity?: (activity: Activity) => void;\n  onUnloadActivity?: (activity: Activity) => void;\n  onSequencingComplete?: (result: SequencingResult) => void;\n  onSequencingError?: (error: string) => void;\n}\n\n/**\n * Service for managing activity delivery in SCORM 2004\n */\nexport class ActivityDeliveryService {\n  private eventService: IEventService;\n  private loggingService: ILoggingService;\n  private callbacks: ActivityDeliveryCallbacks;\n  private currentDeliveredActivity: Activity | null = null;\n  private pendingDelivery: Activity | null = null;\n\n  constructor(\n    eventService: IEventService,\n    loggingService: ILoggingService,\n    callbacks: ActivityDeliveryCallbacks = {},\n  ) {\n    this.eventService = eventService;\n    this.loggingService = loggingService;\n    this.callbacks = callbacks;\n  }\n\n  /**\n   * Process a sequencing result and handle activity delivery\n   * @param {SequencingResult} result - The sequencing result to process\n   */\n  public processSequencingResult(result: SequencingResult): void {\n    // Log the sequencing result\n    if (result.exception) {\n      this.loggingService.error(`Sequencing error: ${result.exception}`);\n      this.callbacks.onSequencingError?.(result.exception);\n      return;\n    }\n\n    // Handle delivery request\n    if (result.deliveryRequest === DeliveryRequestType.DELIVER && result.targetActivity) {\n      this.deliverActivity(result.targetActivity);\n    } else {\n      // No delivery requested\n      this.loggingService.info(\"Sequencing completed with no delivery request\");\n    }\n\n    // Notify sequencing complete\n    this.callbacks.onSequencingComplete?.(result);\n  }\n\n  /**\n   * Deliver an activity\n   * @param {Activity} activity - The activity to deliver\n   */\n  private deliverActivity(activity: Activity): void {\n    // If there's a currently delivered activity, unload it first\n    if (this.currentDeliveredActivity && this.currentDeliveredActivity !== activity) {\n      this.unloadActivity(this.currentDeliveredActivity);\n    }\n\n    // Mark the activity as pending delivery\n    this.pendingDelivery = activity;\n\n    // Log delivery\n    this.loggingService.info(`Delivering activity: ${activity.id} - ${activity.title}`);\n\n    // Fire delivery event\n    this.eventService.processListeners(\"ActivityDelivery\", activity.id, activity);\n\n    // Call delivery callback\n    this.callbacks.onDeliverActivity?.(activity);\n\n    // Update current delivered activity\n    this.currentDeliveredActivity = activity;\n    this.pendingDelivery = null;\n\n    // Mark activity as active\n    activity.isActive = true;\n  }\n\n  /**\n   * Unload an activity\n   * @param {Activity} activity - The activity to unload\n   */\n  private unloadActivity(activity: Activity): void {\n    // Log unload\n    this.loggingService.info(`Unloading activity: ${activity.id} - ${activity.title}`);\n\n    // Fire unload event\n    this.eventService.processListeners(\"ActivityUnload\", activity.id, activity);\n\n    // Call unload callback\n    this.callbacks.onUnloadActivity?.(activity);\n\n    // Mark activity as inactive\n    activity.isActive = false;\n  }\n\n  /**\n   * Get the currently delivered activity\n   * @return {Activity | null}\n   */\n  public getCurrentDeliveredActivity(): Activity | null {\n    return this.currentDeliveredActivity;\n  }\n\n  /**\n   * Get the pending delivery activity\n   * @return {Activity | null}\n   */\n  public getPendingDelivery(): Activity | null {\n    return this.pendingDelivery;\n  }\n\n  /**\n   * Update delivery callbacks\n   * @param {ActivityDeliveryCallbacks} callbacks - The new callbacks\n   */\n  public updateCallbacks(callbacks: ActivityDeliveryCallbacks): void {\n    this.callbacks = { ...this.callbacks, ...callbacks };\n  }\n\n  /**\n   * Reset the delivery service\n   */\n  public reset(): void {\n    if (this.currentDeliveredActivity) {\n      this.unloadActivity(this.currentDeliveredActivity);\n    }\n    this.currentDeliveredActivity = null;\n    this.pendingDelivery = null;\n  }\n}\n","import { Activity } from \"../cmi/scorm2004/sequencing/activity\";\nimport { Sequencing } from \"../cmi/scorm2004/sequencing/sequencing\";\nimport { RollupProcess } from \"../cmi/scorm2004/sequencing/rollup_process\";\nimport {\n  OverallSequencingProcess,\n  NavigationRequestType,\n  DeliveryRequest,\n} from \"../cmi/scorm2004/sequencing/overall_sequencing_process\";\nimport {\n  SequencingProcess,\n  SequencingResult,\n  DeliveryRequestType,\n} from \"../cmi/scorm2004/sequencing/sequencing_process\";\nimport { EventService } from \"./EventService\";\nimport { IEventService, ILoggingService } from \"../interfaces/services\";\nimport { LoggingService } from \"./LoggingService\";\nimport { ActivityDeliveryService, ActivityDeliveryCallbacks } from \"./ActivityDeliveryService\";\nimport { CMI } from \"../cmi/scorm2004/cmi\";\nimport { ADL } from \"../cmi/scorm2004/adl\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { RuleCondition } from \"../cmi/scorm2004/sequencing/sequencing_rules\";\n\n/**\n * Interface for sequencing event listeners\n */\nexport interface SequencingEventListeners {\n  onSequencingStart?: (activity: Activity) => void;\n  onSequencingEnd?: () => void;\n  onActivityDelivery?: (activity: Activity) => void;\n  onActivityUnload?: (activity: Activity) => void;\n  onNavigationRequest?: (request: string, target?: string) => void;\n  onRollupComplete?: (activity: Activity) => void;\n  onSequencingError?: (error: string, context?: string) => void;\n  // Enhanced debugging events\n  onSequencingDebug?: (event: string, data?: any) => void;\n  onActivityAttemptStart?: (activity: Activity) => void;\n  onActivityAttemptEnd?: (activity: Activity) => void;\n  onLimitConditionCheck?: (activity: Activity, result: boolean) => void;\n  onNavigationValidityUpdate?: (validity: any) => void;\n  onSequencingStateChange?: (state: any) => void;\n}\n\n/**\n * Interface for sequencing configuration\n */\nexport interface SequencingConfiguration {\n  autoRollupOnCMIChange?: boolean;\n  autoProgressOnCompletion?: boolean;\n  validateNavigationRequests?: boolean;\n  enableEventSystem?: boolean;\n  logLevel?: \"debug\" | \"info\" | \"warn\" | \"error\";\n  // Time providers/hooks (LMS can override)\n  now?: () => Date;\n  getAttemptElapsedSeconds?: (activity: Activity) => number;\n  getActivityElapsedSeconds?: (activity: Activity) => number;\n}\n\n/**\n * Comprehensive SCORM 2004 Sequencing Service\n * Handles all aspects of sequencing integration with runtime API calls\n */\nexport class SequencingService {\n  private sequencing: Sequencing;\n  private cmi: CMI;\n  private adl: ADL;\n  private eventService: IEventService;\n  private loggingService: ILoggingService;\n  private activityDeliveryService: ActivityDeliveryService;\n  private rollupProcess: RollupProcess;\n  private overallSequencingProcess: OverallSequencingProcess | null = null;\n  private sequencingProcess: SequencingProcess | null = null;\n\n  private eventListeners: SequencingEventListeners = {};\n  private configuration: SequencingConfiguration;\n  private isInitialized: boolean = false;\n  private isSequencingActive: boolean = false;\n  private lastCMIValues: Map<string, any> = new Map();\n  private lastSequencingResult: SequencingResult | null = null;\n\n  constructor(\n    sequencing: Sequencing,\n    cmi: CMI,\n    adl: ADL,\n    eventService: IEventService,\n    loggingService: ILoggingService,\n    configuration: SequencingConfiguration = {},\n  ) {\n    this.sequencing = sequencing;\n    this.cmi = cmi;\n    this.adl = adl;\n    this.eventService = eventService;\n    this.loggingService = loggingService;\n\n    // Default configuration\n    this.configuration = {\n      autoRollupOnCMIChange: true,\n      autoProgressOnCompletion: false,\n      validateNavigationRequests: true,\n      enableEventSystem: true,\n      logLevel: \"info\",\n      now: () => new Date(),\n      ...configuration,\n    };\n\n    // Create activity delivery service\n    const deliveryCallbacks: ActivityDeliveryCallbacks = {\n      onDeliverActivity: (activity) => this.handleActivityDelivery(activity),\n      onUnloadActivity: (activity) => this.handleActivityUnload(activity),\n      onSequencingComplete: (result) => this.handleSequencingComplete(result),\n      onSequencingError: (error) => this.handleSequencingError(error),\n    };\n\n    this.activityDeliveryService = new ActivityDeliveryService(\n      eventService,\n      loggingService,\n      deliveryCallbacks,\n    );\n\n    this.rollupProcess = new RollupProcess();\n    // Propagate time provider to rule evaluation (time-based conditions)\n    if (this.configuration.now) {\n      RuleCondition.setNowProvider(this.configuration.now);\n    }\n    this.setupCMIChangeWatchers();\n  }\n\n  /**\n   * Initialize the sequencing service\n   * Called when SCORM API Initialize() is called\n   */\n  public initialize(): string {\n    try {\n      this.log(\"info\", \"Initializing sequencing service\");\n\n      // Initialize sequencing components\n      if (!this.sequencing.initialized) {\n        this.sequencing.initialize();\n      }\n\n      // Set up ADL Nav connection\n      this.sequencing.adlNav = this.adl.nav;\n\n      // Create sequencing processes if we have an activity tree\n      if (this.sequencing.activityTree.root) {\n        const seqOptions: { now?: () => Date; getAttemptElapsedSeconds?: (a: Activity) => number; getActivityElapsedSeconds?: (a: Activity) => number } = {};\n        if (this.configuration.now) seqOptions.now = this.configuration.now;\n        if (this.configuration.getAttemptElapsedSeconds) seqOptions.getAttemptElapsedSeconds = this.configuration.getAttemptElapsedSeconds;\n        if (this.configuration.getActivityElapsedSeconds) seqOptions.getActivityElapsedSeconds = this.configuration.getActivityElapsedSeconds;\n\n        this.sequencingProcess = new SequencingProcess(\n          this.sequencing.activityTree,\n          this.sequencing.sequencingRules,\n          this.sequencing.sequencingControls,\n          this.adl.nav,\n          seqOptions,\n        );\n\n        const overallOptions: { now?: () => Date } = {};\n        if (this.configuration.now) overallOptions.now = this.configuration.now;\n\n        this.overallSequencingProcess = new OverallSequencingProcess(\n          this.sequencing.activityTree,\n          this.sequencingProcess,\n          this.rollupProcess,\n          this.adl.nav,\n          (eventType: string, data?: any) => this.handleSequencingProcessEvent(eventType, data),\n          overallOptions,\n        );\n\n        this.log(\"info\", \"Sequencing processes created\");\n      }\n\n      // Start automatic sequencing if configured\n      if (this.shouldAutoStartSequencing()) {\n        this.startSequencing();\n      }\n\n      // Initialize CMI tracking\n      this.initializeCMITracking();\n\n      this.isInitialized = true;\n      this.fireEvent(\"onSequencingStart\", this.sequencing.getCurrentActivity());\n\n      this.log(\"info\", \"Sequencing service initialized successfully\");\n      return global_constants.SCORM_TRUE;\n    } catch (error) {\n      const errorMsg = `Failed to initialize sequencing service: ${error}`;\n      this.log(\"error\", errorMsg);\n      this.fireEvent(\"onSequencingError\", errorMsg, \"initialization\");\n      return global_constants.SCORM_FALSE;\n    }\n  }\n\n  /**\n   * Terminate the sequencing service\n   * Called when SCORM API Terminate() is called\n   */\n  public terminate(): string {\n    try {\n      this.log(\"info\", \"Terminating sequencing service\");\n\n      // Process any pending navigation requests\n      if (this.adl.nav.request !== \"_none_\") {\n        this.processNavigationRequest(this.adl.nav.request);\n      }\n\n      // Trigger final rollup\n      this.triggerFinalRollup();\n\n      // End sequencing session\n      this.endSequencing();\n\n      this.isInitialized = false;\n      this.fireEvent(\"onSequencingEnd\");\n\n      this.log(\"info\", \"Sequencing service terminated successfully\");\n      return global_constants.SCORM_TRUE;\n    } catch (error) {\n      const errorMsg = `Failed to terminate sequencing service: ${error}`;\n      this.log(\"error\", errorMsg);\n      this.fireEvent(\"onSequencingError\", errorMsg, \"termination\");\n      return global_constants.SCORM_FALSE;\n    }\n  }\n\n  /**\n   * Process a navigation request\n   * Implements the complete Overall Sequencing Process (OP.1)\n   */\n  public processNavigationRequest(request: string, targetActivityId?: string): boolean {\n    if (!this.isInitialized || !this.overallSequencingProcess) {\n      this.log(\"warn\", `Navigation request '${request}' ignored - sequencing not initialized`);\n      return false;\n    }\n\n    try {\n      this.log(\n        \"info\",\n        `Processing navigation request: ${request}${targetActivityId ? ` (target: ${targetActivityId})` : \"\"}`,\n      );\n\n      // Fire navigation request event\n      this.fireEvent(\"onNavigationRequest\", request, targetActivityId);\n\n      // Parse the request to NavigationRequestType\n      const navRequestType = this.parseNavigationRequest(request);\n      if (navRequestType === null) {\n        this.log(\"warn\", `Invalid navigation request: ${request}`);\n        return false;\n      }\n\n      // Process the navigation request through Overall Sequencing Process\n      const deliveryRequest: DeliveryRequest =\n        this.overallSequencingProcess.processNavigationRequest(\n          navRequestType,\n          targetActivityId || null,\n        );\n\n      // Handle the delivery request\n      if (deliveryRequest.valid && deliveryRequest.targetActivity) {\n        // Process delivery through activity delivery service\n        const sequencingResult: SequencingResult = {\n          deliveryRequest: deliveryRequest.valid\n            ? DeliveryRequestType.DELIVER\n            : DeliveryRequestType.DO_NOT_DELIVER,\n          targetActivity: deliveryRequest.targetActivity,\n          exception: deliveryRequest.exception || null,\n        };\n\n        // Store the result\n        this.lastSequencingResult = sequencingResult;\n        this.activityDeliveryService.processSequencingResult(sequencingResult);\n        this.log(\n          \"info\",\n          `Navigation request '${request}' resulted in activity delivery: ${deliveryRequest.targetActivity.id}`,\n        );\n        return true;\n      } else {\n        // No delivery requested or invalid\n        if (deliveryRequest.exception) {\n          this.log(\"warn\", `Navigation request '${request}' failed: ${deliveryRequest.exception}`);\n          this.fireEvent(\"onSequencingError\", deliveryRequest.exception, \"navigation\");\n        } else {\n          this.log(\"info\", `Navigation request '${request}' completed with no activity delivery`);\n        }\n        return deliveryRequest.valid;\n      }\n    } catch (error) {\n      const errorMsg = `Error processing navigation request '${request}': ${error}`;\n      this.log(\"error\", errorMsg);\n      this.fireEvent(\"onSequencingError\", errorMsg, \"navigation\");\n      return false;\n    }\n  }\n\n  /**\n   * Trigger rollup when CMI values change\n   * Called automatically when tracked CMI values are updated\n   */\n  public triggerRollupOnCMIChange(cmiElement: string, oldValue: any, newValue: any): void {\n    if (!this.configuration.autoRollupOnCMIChange || !this.isInitialized) {\n      return;\n    }\n\n    // Only trigger rollup for specific CMI elements that affect sequencing\n    const rollupTriggeringElements = [\n      \"cmi.completion_status\",\n      \"cmi.success_status\",\n      \"cmi.score.scaled\",\n      \"cmi.score.raw\",\n      \"cmi.score.min\",\n      \"cmi.score.max\",\n      \"cmi.progress_measure\",\n      \"cmi.objectives.n.success_status\",\n      \"cmi.objectives.n.completion_status\",\n      \"cmi.objectives.n.score.scaled\",\n    ];\n\n    if (!rollupTriggeringElements.some((element) => cmiElement.startsWith(element))) {\n      return;\n    }\n\n    try {\n      this.log(\n        \"debug\",\n        `Triggering rollup due to CMI change: ${cmiElement} = ${newValue} (was ${oldValue})`,\n      );\n\n      // Get current activity\n      const currentActivity = this.sequencing.getCurrentActivity();\n      if (!currentActivity) {\n        this.log(\"debug\", \"No current activity for rollup\");\n        return;\n      }\n\n      // Update activity status based on CMI changes\n      this.updateActivityFromCMI(currentActivity);\n\n      // Trigger rollup process\n      this.rollupProcess.overallRollupProcess(currentActivity);\n\n      this.fireEvent(\"onRollupComplete\", currentActivity);\n\n      this.log(\"debug\", `Rollup completed for activity: ${currentActivity.id}`);\n    } catch (error) {\n      const errorMsg = `Error during rollup on CMI change: ${error}`;\n      this.log(\"error\", errorMsg);\n      this.fireEvent(\"onSequencingError\", errorMsg, \"rollup\");\n    }\n  }\n\n  /**\n   * Set event listeners for sequencing events\n   */\n  public setEventListeners(listeners: SequencingEventListeners): void {\n    this.eventListeners = { ...this.eventListeners, ...listeners };\n    this.log(\"debug\", \"Sequencing event listeners updated\");\n  }\n\n  /**\n   * Update sequencing configuration\n   */\n  public updateConfiguration(config: Partial<SequencingConfiguration>): void {\n    this.configuration = { ...this.configuration, ...config };\n    this.log(\"debug\", \"Sequencing configuration updated\");\n  }\n\n  /**\n   * Get the current sequencing state\n   */\n  public getSequencingState(): {\n    isInitialized: boolean;\n    isActive: boolean;\n    currentActivity: Activity | null;\n    rootActivity: Activity | null;\n    lastSequencingResult: SequencingResult | null;\n  } {\n    return {\n      isInitialized: this.isInitialized,\n      isActive: this.isSequencingActive,\n      currentActivity: this.sequencing.getCurrentActivity(),\n      rootActivity: this.sequencing.getRootActivity(),\n      lastSequencingResult: this.lastSequencingResult,\n    };\n  }\n\n  /**\n   * Get the overall sequencing process instance\n   * @return {OverallSequencingProcess | null} The overall sequencing process or null if not initialized\n   */\n  public getOverallSequencingProcess(): OverallSequencingProcess | null {\n    return this.overallSequencingProcess;\n  }\n\n  // Private helper methods\n\n  /**\n   * Set up watchers for CMI value changes\n   */\n  private setupCMIChangeWatchers(): void {\n    // We'll hook into the setter methods to detect changes\n    // This would typically be done by modifying the CMI setters\n    // For now, we'll track changes when values are set\n  }\n\n  /**\n   * Initialize CMI tracking by storing current values\n   */\n  private initializeCMITracking(): void {\n    // Store initial CMI values for change detection\n    this.lastCMIValues.set(\"cmi.completion_status\", this.cmi.completion_status);\n    this.lastCMIValues.set(\"cmi.success_status\", this.cmi.success_status);\n    this.lastCMIValues.set(\"cmi.progress_measure\", this.cmi.progress_measure);\n\n    if (this.cmi.score) {\n      this.lastCMIValues.set(\"cmi.score.scaled\", this.cmi.score.scaled);\n      this.lastCMIValues.set(\"cmi.score.raw\", this.cmi.score.raw);\n    }\n  }\n\n  /**\n   * Check if sequencing should auto-start\n   */\n  private shouldAutoStartSequencing(): boolean {\n    // Auto-start if we have a root activity and no current activity\n    return !!(this.sequencing.activityTree.root && !this.sequencing.getCurrentActivity());\n  }\n\n  /**\n   * Start automatic sequencing\n   */\n  private startSequencing(): void {\n    if (!this.overallSequencingProcess) {\n      return;\n    }\n\n    try {\n      // Process a \"start\" navigation request to begin sequencing\n      const startResult = this.processNavigationRequest(\"start\");\n      if (startResult) {\n        this.isSequencingActive = true;\n        this.log(\"info\", \"Automatic sequencing started\");\n      }\n    } catch (error) {\n      this.log(\"error\", `Failed to start automatic sequencing: ${error}`);\n    }\n  }\n\n  /**\n   * End sequencing session\n   */\n  private endSequencing(): void {\n    this.isSequencingActive = false;\n    this.activityDeliveryService.reset();\n  }\n\n  /**\n   * Trigger final rollup on termination\n   */\n  private triggerFinalRollup(): void {\n    try {\n      const currentActivity = this.sequencing.getCurrentActivity();\n      if (currentActivity) {\n        // Update activity with final CMI values\n        this.updateActivityFromCMI(currentActivity);\n\n        // Trigger rollup\n        this.rollupProcess.overallRollupProcess(currentActivity);\n\n        this.log(\"info\", \"Final rollup completed\");\n      }\n    } catch (error) {\n      this.log(\"error\", `Error during final rollup: ${error}`);\n    }\n  }\n\n  /**\n   * Update activity properties from current CMI values\n   */\n  private updateActivityFromCMI(activity: Activity): void {\n    // Update completion status\n    if (this.cmi.completion_status !== \"unknown\") {\n      activity.completionStatus = this.cmi.completion_status as\n        | \"completed\"\n        | \"incomplete\"\n        | \"not attempted\"\n        | \"unknown\";\n    }\n\n    // Update success status\n    if (this.cmi.success_status !== \"unknown\") {\n      activity.successStatus = this.cmi.success_status as \"passed\" | \"failed\" | \"unknown\";\n      activity.objectiveSatisfiedStatus = this.cmi.success_status === \"passed\";\n    }\n\n    // Update progress measure\n    if (this.cmi.progress_measure !== \"\") {\n      const progressMeasure = parseFloat(this.cmi.progress_measure);\n      if (!isNaN(progressMeasure)) {\n        activity.progressMeasure = progressMeasure;\n        activity.progressMeasureStatus = true;\n      }\n    }\n\n    // Update score information\n    if (this.cmi.score && this.cmi.score.scaled !== \"\") {\n      const scaledScore = parseFloat(this.cmi.score.scaled);\n      if (!isNaN(scaledScore)) {\n        activity.objectiveNormalizedMeasure = scaledScore;\n        activity.objectiveMeasureStatus = true;\n      }\n    }\n  }\n\n  /**\n   * Parse navigation request string to NavigationRequestType\n   */\n  private parseNavigationRequest(request: string): NavigationRequestType | null {\n    // Handle choice and jump with targets\n    if (request.includes(\"choice\")) {\n      return NavigationRequestType.CHOICE;\n    }\n    if (request.includes(\"jump\")) {\n      return NavigationRequestType.JUMP;\n    }\n\n    // Handle standard navigation requests\n    switch (request) {\n      case \"start\":\n        return NavigationRequestType.START;\n      case \"resumeAll\":\n        return NavigationRequestType.RESUME_ALL;\n      case \"continue\":\n        return NavigationRequestType.CONTINUE;\n      case \"previous\":\n        return NavigationRequestType.PREVIOUS;\n      case \"exit\":\n        return NavigationRequestType.EXIT;\n      case \"exitAll\":\n        return NavigationRequestType.EXIT_ALL;\n      case \"abandon\":\n        return NavigationRequestType.ABANDON;\n      case \"abandonAll\":\n        return NavigationRequestType.ABANDON_ALL;\n      case \"suspendAll\":\n        return NavigationRequestType.SUSPEND_ALL;\n      case \"_none_\":\n        return NavigationRequestType.NOT_VALID;\n      default:\n        return null;\n    }\n  }\n\n  /**\n   * Handle activity delivery event\n   */\n  private handleActivityDelivery(activity: Activity): void {\n    this.log(\"info\", `Activity delivered: ${activity.id} - ${activity.title}`);\n    this.fireEvent(\"onActivityDelivery\", activity);\n  }\n\n  /**\n   * Handle activity unload event\n   */\n  private handleActivityUnload(activity: Activity): void {\n    this.log(\"info\", `Activity unloaded: ${activity.id} - ${activity.title}`);\n    this.fireEvent(\"onActivityUnload\", activity);\n  }\n\n  /**\n   * Handle sequencing completion event\n   */\n  private handleSequencingComplete(result: SequencingResult): void {\n    this.log(\"debug\", \"Sequencing completed\", result);\n  }\n\n  /**\n   * Handle sequencing error event\n   */\n  private handleSequencingError(error: string): void {\n    this.log(\"error\", `Sequencing error: ${error}`);\n    this.fireEvent(\"onSequencingError\", error, \"sequencing\");\n  }\n\n  /**\n   * Fire an event to registered listeners with enhanced error handling\n   */\n  private fireEvent(eventType: keyof SequencingEventListeners, ...args: any[]): void {\n    if (!this.configuration.enableEventSystem) {\n      return;\n    }\n\n    // Only fire debug event for non-debug events to prevent recursion\n    if (eventType !== \"onSequencingDebug\") {\n      this.fireDebugEvent(`${eventType} fired`, { eventType, argsLength: args.length });\n    }\n\n    try {\n      // Fire to internal listeners first\n      const listener = this.eventListeners[eventType];\n      if (listener && typeof listener === \"function\") {\n        try {\n          (listener as any)(...args);\n          this.log(\"debug\", `Internal listener for ${eventType} executed successfully`);\n        } catch (listenerError) {\n          this.log(\"error\", `Internal listener for ${eventType} failed: ${listenerError}`);\n          // Don't let listener errors stop event propagation\n        }\n      }\n\n      // Fire through the event service for broader integration\n      try {\n        this.eventService.processListeners(`Sequencing.${eventType}`, args[0], ...args.slice(1));\n        this.log(\"debug\", `Event service listeners for ${eventType} processed`);\n      } catch (eventServiceError) {\n        // Event service might not be properly initialized in test contexts\n        // This is not a critical error for sequencing functionality\n        this.log(\"warn\", `Event service failed for ${eventType}: ${eventServiceError}`);\n      }\n\n      // Fire to external global listeners if available\n      try {\n        if (typeof window !== \"undefined\" && (window as any).scormSequencingEvents) {\n          const globalListeners = (window as any).scormSequencingEvents;\n          if (globalListeners[eventType] && typeof globalListeners[eventType] === \"function\") {\n            globalListeners[eventType](...args);\n            this.log(\"debug\", `Global listener for ${eventType} executed`);\n          }\n        }\n      } catch (globalError) {\n        this.log(\"warn\", `Global listener for ${eventType} failed: ${globalError}`);\n      }\n    } catch (error) {\n      this.log(\"error\", `Critical error firing event ${eventType}: ${error}`);\n    }\n  }\n\n  /**\n   * Fire a debug event with detailed information\n   */\n  private fireDebugEvent(event: string, data?: any): void {\n    try {\n      // Direct execution to avoid recursion through fireEvent\n      const listener = this.eventListeners[\"onSequencingDebug\"];\n      if (listener && typeof listener === \"function\") {\n        listener(event, {\n          timestamp: new Date().toISOString(),\n          ...data,\n        });\n      }\n\n      // Also fire through event service directly\n      try {\n        this.eventService.processListeners(\"Sequencing.onSequencingDebug\", event, {\n          timestamp: new Date().toISOString(),\n          ...data,\n        });\n      } catch (eventServiceError) {\n        // Silent fail for event service debug events\n      }\n    } catch (error) {\n      // Silent fail for debug events to avoid recursion\n      console.debug(`Debug event failed: ${error}`);\n    }\n  }\n\n  /**\n   * Fire activity attempt start event\n   */\n  public fireActivityAttemptStart(activity: Activity): void {\n    this.fireEvent(\"onActivityAttemptStart\", activity);\n    this.fireDebugEvent(\"Activity attempt started\", {\n      activityId: activity.id,\n      title: activity.title,\n      attemptCount: activity.attemptCount,\n    });\n  }\n\n  /**\n   * Fire activity attempt end event\n   */\n  public fireActivityAttemptEnd(activity: Activity): void {\n    this.fireEvent(\"onActivityAttemptEnd\", activity);\n    this.fireDebugEvent(\"Activity attempt ended\", {\n      activityId: activity.id,\n      title: activity.title,\n      completionStatus: activity.completionStatus,\n      successStatus: activity.successStatus,\n    });\n  }\n\n  /**\n   * Fire limit condition check event\n   */\n  public fireLimitConditionCheck(activity: Activity, result: boolean): void {\n    this.fireEvent(\"onLimitConditionCheck\", activity, result);\n    this.fireDebugEvent(\"Limit condition check\", {\n      activityId: activity.id,\n      result,\n      attemptCount: activity.attemptCount,\n      attemptLimit: activity.attemptLimit,\n    });\n  }\n\n  /**\n   * Fire navigation validity update event\n   */\n  public fireNavigationValidityUpdate(validity: any): void {\n    this.fireEvent(\"onNavigationValidityUpdate\", validity);\n    this.fireDebugEvent(\"Navigation validity updated\", { validity });\n  }\n\n  /**\n   * Fire sequencing state change event\n   */\n  public fireSequencingStateChange(state: any): void {\n    this.fireEvent(\"onSequencingStateChange\", state);\n    this.fireDebugEvent(\"Sequencing state changed\", { stateKeys: Object.keys(state) });\n  }\n\n  /**\n   * Handle events from the sequencing process\n   */\n  private handleSequencingProcessEvent(eventType: string, data?: any): void {\n    try {\n      switch (eventType) {\n        case \"onActivityDelivery\":\n          this.fireEvent(\"onActivityDelivery\", data);\n          break;\n        case \"onLimitConditionCheck\":\n          this.fireLimitConditionCheck(data.activity, data.result);\n          break;\n        case \"onActivityAttemptStart\":\n          this.fireActivityAttemptStart(data);\n          break;\n        case \"onActivityAttemptEnd\":\n          this.fireActivityAttemptEnd(data);\n          break;\n        default:\n          // Pass through unknown events as debug events\n          this.fireDebugEvent(`Sequencing process event: ${eventType}`, data);\n      }\n    } catch (error) {\n      this.log(\"error\", `Error handling sequencing process event ${eventType}: ${error}`);\n    }\n  }\n\n  /**\n   * Log message with appropriate level\n   */\n  private log(level: \"debug\" | \"info\" | \"warn\" | \"error\", message: string, data?: any): void {\n    const logLevels = [\"debug\", \"info\", \"warn\", \"error\"];\n    const configLevel = this.configuration.logLevel || \"info\";\n\n    if (logLevels.indexOf(level) >= logLevels.indexOf(configLevel)) {\n      switch (level) {\n        case \"debug\":\n          this.loggingService.debug(\n            `[Sequencing] ${message}${data ? ` - ${JSON.stringify(data)}` : \"\"}`,\n          );\n          break;\n        case \"info\":\n          this.loggingService.info(\n            `[Sequencing] ${message}${data ? ` - ${JSON.stringify(data)}` : \"\"}`,\n          );\n          break;\n        case \"warn\":\n          this.loggingService.warn(\n            `[Sequencing] ${message}${data ? ` - ${JSON.stringify(data)}` : \"\"}`,\n          );\n          break;\n        case \"error\":\n          this.loggingService.error(\n            `[Sequencing] ${message}${data ? ` - ${JSON.stringify(data)}` : \"\"}`,\n          );\n          break;\n      }\n    }\n  }\n}\n","import BaseAPI from \"./BaseAPI\";\nimport { CMI } from \"./cmi/scorm2004/cmi\";\nimport * as Utilities from \"./utilities\";\nimport { StringKeyMap, stringMatches } from \"./utilities\";\nimport { global_constants, scorm2004_constants } from \"./constants/api_constants\";\nimport { scorm2004_errors } from \"./constants/error_codes\";\nimport { CMIObjectivesObject } from \"./cmi/scorm2004/objectives\";\nimport { ADL, ADLDataObject } from \"./cmi/scorm2004/adl\";\nimport {\n  CommitObject,\n  ResultObject,\n  ScoreObject,\n  Settings,\n  SequencingStateMetadata,\n} from \"./types/api_types\";\nimport {\n  ActivitySettings,\n  RollupRuleSettings,\n  RollupRulesSettings,\n  SequencingControlsSettings,\n  SequencingRuleSettings,\n  SequencingRulesSettings,\n  SequencingSettings,\n  SequencingEventListeners,\n} from \"./types/sequencing_types\";\nimport { RuleCondition, SequencingRule } from \"./cmi/scorm2004/sequencing/sequencing_rules\";\nimport { RollupCondition, RollupRule } from \"./cmi/scorm2004/sequencing/rollup_rules\";\nimport { scorm2004_regex } from \"./constants/regex\"; // Import functions from extracted modules\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport {\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n} from \"./cmi/scorm2004/interactions\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { CorrectResponses, ResponseType } from \"./constants/response_constants\";\nimport { CMICommentsObject } from \"./cmi/scorm2004/comments\";\nimport ValidLanguages from \"./constants/language_constants\";\nimport { CompletionStatus, SuccessStatus, LogLevelEnum } from \"./constants/enums\";\nimport { Sequencing } from \"./cmi/scorm2004/sequencing/sequencing\";\nimport { Activity } from \"./cmi/scorm2004/sequencing/activity\";\nimport { SequencingService, SequencingConfiguration } from \"./services/SequencingService\";\n\n/**\n * API class for SCORM 2004\n */\nclass Scorm2004API extends BaseAPI {\n  private _version: string = \"1.0\";\n  private _globalObjectives: CMIObjectivesObject[] = [];\n  private readonly _sequencing: Sequencing;\n  private _sequencingService: SequencingService | null = null;\n  private _extractedScoItemIds: string[] = [];\n\n  /**\n   * Constructor for SCORM 2004 API\n   * @param {Settings} settings\n   */\n  constructor(settings?: Settings) {\n    if (settings) {\n      if (settings.mastery_override === undefined) {\n        settings.mastery_override = false;\n      }\n    }\n\n    super(scorm2004_errors, settings);\n\n    this.cmi = new CMI();\n    this.adl = new ADL();\n    this._sequencing = new Sequencing();\n\n    // Connect the sequencing object to the ADL's sequencing property\n    // The Sequencing object is used for both configuration and runtime navigation processing\n    // It needs to be attached to the ADL object for runtime navigation requests (adl.nav.request)\n    this.adl.sequencing = this._sequencing;\n\n    // Configure sequencing if settings are provided\n    if (settings?.sequencing) {\n      this.configureSequencing(settings.sequencing);\n    }\n\n    // Initialize sequencing service\n    this.initializeSequencingService(settings);\n\n    // Rename functions to match 2004 Spec and expose to modules\n    this.Initialize = this.lmsInitialize;\n    this.Terminate = this.lmsFinish;\n    this.GetValue = this.lmsGetValue;\n    this.SetValue = this.lmsSetValue;\n    this.Commit = this.lmsCommit;\n    this.GetLastError = this.lmsGetLastError;\n    this.GetErrorString = this.lmsGetErrorString;\n    this.GetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  public cmi: CMI;\n  public adl: ADL;\n\n  public Initialize: () => string;\n  public Terminate: () => string;\n  public GetValue: (CMIElement: string) => string;\n  public SetValue: (CMIElement: string, value: any) => string;\n  public Commit: () => string;\n  public GetLastError: () => string;\n  public GetErrorString: (CMIErrorCode: string | number) => string;\n  public GetDiagnostic: (CMIErrorCode: string | number) => string;\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset(settings?: Settings) {\n    this.commonReset(settings);\n\n    this.cmi?.reset();\n    this.adl?.reset();\n    this._sequencing?.reset();\n  }\n\n  /**\n   * Getter for _version\n   * @return {string}\n   */\n  get version(): string {\n    return this._version;\n  }\n\n  /**\n   * Getter for _globalObjectives\n   */\n  get globalObjectives(): CMIObjectivesObject[] {\n    return this._globalObjectives;\n  }\n\n  /**\n   * Initialize function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize(): string {\n    this.cmi.initialize();\n    const result = this.initialize(\n      \"Initialize\",\n      \"LMS was already initialized!\",\n      \"LMS is already finished!\",\n    );\n\n    // Initialize sequencing service after successful API initialization\n    if (result === global_constants.SCORM_TRUE && this._sequencingService) {\n      this._sequencingService.initialize();\n    }\n\n    // Auto-load sequencing state after successful initialization if configured\n    if (result === global_constants.SCORM_TRUE && this.settings.sequencingStatePersistence) {\n      this.loadSequencingState().catch(() => {\n        this.apiLog(\"lmsInitialize\", \"Failed to auto-load sequencing state\", LogLevelEnum.WARN);\n      });\n    }\n\n    return result;\n  }\n\n  /**\n   * Terminate function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish(): string {\n    (async () => {\n      await this.internalFinish();\n    })();\n    return global_constants.SCORM_TRUE;\n  }\n\n  async internalFinish(): Promise<string> {\n    // Terminate sequencing service first (before normal termination)\n    if (this._sequencingService) {\n      this._sequencingService.terminate();\n    }\n\n    const result = await this.terminate(\"Terminate\", true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      // Handle navigation requests - first try sequencing service, then fall back to legacy\n      let navigationHandled = false;\n\n      if (this._sequencingService && this.adl.nav.request !== \"_none_\") {\n        try {\n          // Extract target for choice/jump requests\n          let target = \"\";\n          let request = this.adl.nav.request;\n          const choiceJumpRegex = new RegExp(scorm2004_regex.NAVEvent);\n          const matches = request.match(choiceJumpRegex);\n          if (matches) {\n            if (matches.groups?.choice_target) {\n              target = matches.groups?.choice_target;\n              request = \"choice\";\n            } else if (matches.groups?.jump_target) {\n              target = matches.groups?.jump_target;\n              request = \"jump\";\n            }\n          }\n\n          // Process navigation request through sequencing service\n          navigationHandled = this._sequencingService.processNavigationRequest(request, target);\n        } catch (error) {\n          // Fall back to legacy navigation handling if sequencing fails\n          navigationHandled = false;\n        }\n      }\n\n      // Legacy navigation handling (fallback)\n      if (!navigationHandled) {\n        if (this.adl.nav.request !== \"_none_\") {\n          const navActions: { [key: string]: string } = {\n            continue: \"SequenceNext\",\n            previous: \"SequencePrevious\",\n            choice: \"SequenceChoice\",\n            jump: \"SequenceJump\",\n            exit: \"SequenceExit\",\n            exitAll: \"SequenceExitAll\",\n            abandon: \"SequenceAbandon\",\n            abandonAll: \"SequenceAbandonAll\",\n          };\n\n          let request = this.adl.nav.request;\n          const choiceJumpRegex = new RegExp(scorm2004_regex.NAVEvent);\n          const matches = request.match(choiceJumpRegex);\n          let target = \"\";\n          if (matches) {\n            if (matches.groups?.choice_target) {\n              target = matches.groups?.choice_target;\n              request = \"choice\";\n            } else if (matches.groups?.jump_target) {\n              target = matches.groups?.jump_target;\n              request = \"jump\";\n            }\n          }\n          const action = navActions[request];\n          if (action) {\n            this.processListeners(action, \"adl.nav.request\", target);\n          }\n        } else if (this.settings.autoProgress) {\n          this.processListeners(\"SequenceNext\", undefined, \"next\");\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * GetValue function from SCORM 2004 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement: string): string {\n    const adlNavRequestRegex =\n      \"^adl\\\\.nav\\\\.request_valid\\\\.(choice|jump)\\\\.{target=\\\\S{0,}([a-zA-Z0-9-_]+)}$\";\n    if (stringMatches(CMIElement, adlNavRequestRegex)) {\n      const matches = CMIElement.match(adlNavRequestRegex);\n      if (matches) {\n        const request = matches[1];\n        const target = matches[2]?.replace(/{target=/g, \"\").replace(/}/g, \"\") || \"\";\n        if (request === \"choice\" || request === \"jump\") {\n          if (this.settings.scoItemIdValidator) {\n            return String(this.settings.scoItemIdValidator(target));\n          }\n          // If we have extracted IDs from sequencing, use those exclusively\n          if (this._extractedScoItemIds.length > 0) {\n            return String(this._extractedScoItemIds.includes(target));\n          }\n          // Otherwise use the scoItemIds from settings\n          return String(this.settings?.scoItemIds?.includes(target));\n        }\n      }\n    }\n    return this.getValue(\"GetValue\", true, CMIElement);\n  }\n\n  /**\n   * SetValue function from SCORM 2004 Spec\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement: string, value: any): string {\n    // Get old value for change detection with error handling\n    let oldValue: any = null;\n    try {\n      oldValue = this.getCMIValue(CMIElement);\n    } catch (error) {\n      // If getting the old value fails, proceed without change detection\n      // This prevents errors during normal operation when CMI elements don't exist yet\n      oldValue = null;\n    }\n\n    // Proceed with regular setting for non-objective elements or fallback behavior\n    const result = this.setValue(\"SetValue\", \"Commit\", true, CMIElement, value);\n\n    // If successful and sequencing service is available, trigger rollup on critical CMI changes\n    if (result === global_constants.SCORM_TRUE && this._sequencingService) {\n      try {\n        this._sequencingService.triggerRollupOnCMIChange(CMIElement, oldValue, value);\n      } catch (rollupError) {\n        // Log rollup error but don't fail the SetValue operation\n        console.warn(`Sequencing rollup failed for ${CMIElement}: ${rollupError}`);\n      }\n    }\n\n    // Auto-save sequencing state on critical CMI changes if configured\n    if (\n      result === global_constants.SCORM_TRUE &&\n      this.settings.sequencingStatePersistence?.autoSaveOn === \"setValue\"\n    ) {\n      const sequencingElements = [\n        \"cmi.completion_status\",\n        \"cmi.success_status\",\n        \"cmi.score.scaled\",\n        \"cmi.objectives\",\n        \"adl.nav.request\",\n      ];\n\n      if (sequencingElements.some((element) => CMIElement.startsWith(element))) {\n        this.saveSequencingState().catch(() => {\n          this.apiLog(\"lmsSetValue\", \"Failed to auto-save sequencing state\", LogLevelEnum.WARN);\n        });\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Commit function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit(): string {\n    if (this.settings.asyncCommit) {\n      this.scheduleCommit(500, \"Commit\");\n    } else {\n      (async () => {\n        const result = await this.commit(\"Commit\", false);\n\n        // Auto-save sequencing state after successful commit if configured\n        if (\n          result === global_constants.SCORM_TRUE &&\n          this.settings.sequencingStatePersistence?.autoSaveOn === \"commit\"\n        ) {\n          await this.saveSequencingState().catch(() => {\n            this.apiLog(\"lmsCommit\", \"Failed to auto-save sequencing state\", LogLevelEnum.WARN);\n          });\n        }\n      })();\n    }\n    return global_constants.SCORM_TRUE;\n  }\n\n  /**\n   * GetLastError function from SCORM 2004 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError(): string {\n    return this.getLastError(\"GetLastError\");\n  }\n\n  /**\n   * GetErrorString function from SCORM 2004 Spec\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode: string | number): string {\n    return this.getErrorString(\"GetErrorString\", CMIErrorCode);\n  }\n\n  /**\n   * GetDiagnostic function from SCORM 2004 Spec\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode: string | number): string {\n    return this.getDiagnostic(\"GetDiagnostic\", CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object - delegates to CMIValueHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  override setCMIValue(CMIElement: string, value: any): string {\n    // Check if we're updating a global or local objective\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      const parts = CMIElement.split(\".\");\n      const index = Number(parts[2]);\n      const element_base = `cmi.objectives.${index}`;\n\n      let objective_id;\n      const setting_id = stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\\\\.id\");\n\n      if (setting_id) {\n        // If we're setting the objective ID, capture it directly\n        objective_id = value;\n      } else {\n        // Find existing objective ID if available\n        const objective = this.cmi.objectives.findObjectiveByIndex(index);\n        objective_id = objective ? objective.id : undefined;\n      }\n\n      // Check if the objective ID matches a global objective\n      const is_global = objective_id && this.settings.globalObjectiveIds?.includes(objective_id);\n\n      if (is_global) {\n        // Locate or create an entry in _globalObjectives for the global objective\n        let global_index = this._globalObjectives.findIndex((obj) => obj.id === objective_id);\n\n        if (global_index === -1) {\n          global_index = this._globalObjectives.length;\n          const newGlobalObjective = new CMIObjectivesObject();\n          newGlobalObjective.id = objective_id;\n          this._globalObjectives.push(newGlobalObjective);\n        }\n\n        // Update the global objective\n        const global_element = CMIElement.replace(\n          element_base,\n          `_globalObjectives.${global_index}`,\n        );\n        this._commonSetCMIValue(\"SetGlobalObjectiveValue\", true, global_element, value);\n      }\n    }\n    return this._commonSetCMIValue(\"SetValue\", true, CMIElement, value);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array - delegates to CMIElementHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI|null}\n   */\n  getChildElement(CMIElement: string, value: any, foundFirstIndex: boolean): BaseCMI | null {\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      return new CMIObjectivesObject();\n    }\n\n    if (foundFirstIndex) {\n      if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+\")) {\n        return this.createCorrectResponsesObject(CMIElement, value);\n      } else if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+\")) {\n        return new CMIInteractionsObjectivesObject();\n      }\n    } else if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\")) {\n      return new CMIInteractionsObject();\n    }\n\n    if (stringMatches(CMIElement, \"cmi\\\\.comments_from_learner\\\\.\\\\d+\")) {\n      return new CMICommentsObject();\n    } else if (stringMatches(CMIElement, \"cmi\\\\.comments_from_lms\\\\.\\\\d+\")) {\n      return new CMICommentsObject(true);\n    }\n\n    if (stringMatches(CMIElement, \"adl\\\\.data\\\\.\\\\d+\")) {\n      return new ADLDataObject();\n    }\n\n    return null;\n  }\n\n  /**\n   * Creates a correct responses object for an interaction - delegates to CMIElementHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {BaseCMI|null}\n   */\n  private createCorrectResponsesObject(CMIElement: string, value: any): BaseCMI | null {\n    const parts = CMIElement.split(\".\");\n    const index = Number(parts[2]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    if (this.isInitialized()) {\n      if (typeof interaction === \"undefined\" || !interaction.type) {\n        this.throwSCORMError(CMIElement, scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED, CMIElement);\n        return null;\n      } else {\n        this.checkDuplicateChoiceResponse(CMIElement, interaction, value);\n        const response_type = CorrectResponses[interaction.type];\n        if (response_type) {\n          this.checkValidResponseType(CMIElement, response_type, value, interaction.type);\n        } else {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.GENERAL_SET_FAILURE,\n            `Incorrect Response Type: ${interaction.type}`,\n          );\n          return null;\n        }\n      }\n    }\n\n    if (this.lastErrorCode === \"0\") {\n      return new CMIInteractionsCorrectResponsesObject(interaction);\n    }\n\n    return null;\n  }\n\n  /**\n   * Checks for valid response types - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {ResponseType} response_type\n   * @param {any} value\n   * @param {string} interaction_type\n   */\n  checkValidResponseType(\n    CMIElement: string,\n    response_type: ResponseType,\n    value: any,\n    interaction_type: string,\n  ) {\n    let nodes = [];\n    if (response_type?.delimiter) {\n      nodes = String(value).split(response_type.delimiter);\n    } else {\n      nodes[0] = value;\n    }\n\n    if (nodes.length > 0 && nodes.length <= response_type.max) {\n      this.checkCorrectResponseValue(CMIElement, interaction_type, nodes, value);\n    } else if (nodes.length > response_type.max) {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.GENERAL_SET_FAILURE,\n        `Data Model Element Pattern Too Long: ${value}`,\n      );\n    }\n  }\n\n  /**\n   * Checks for duplicate 'choice' responses - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {CMIInteractionsObject} interaction\n   * @param {any} value\n   */\n  checkDuplicateChoiceResponse(CMIElement: string, interaction: CMIInteractionsObject, value: any) {\n    const interaction_count = interaction.correct_responses._count;\n    if (interaction.type === \"choice\") {\n      for (let i = 0; i < interaction_count && this.lastErrorCode === \"0\"; i++) {\n        const response = interaction.correct_responses.childArray[i];\n        if (response.pattern === value) {\n          this.throwSCORMError(CMIElement, scorm2004_errors.GENERAL_SET_FAILURE, `${value}`);\n        }\n      }\n    }\n  }\n\n  /**\n   * Validate correct response - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {*} value\n   */\n  validateCorrectResponse(CMIElement: string, value: any) {\n    const parts = CMIElement.split(\".\");\n    const index = Number(parts[2]);\n    const pattern_index = Number(parts[4]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    const interaction_count = interaction.correct_responses._count;\n    this.checkDuplicateChoiceResponse(CMIElement, interaction, value);\n\n    const response_type = CorrectResponses[interaction.type];\n    if (\n      response_type &&\n      (typeof response_type.limit === \"undefined\" || interaction_count <= response_type.limit)\n    ) {\n      this.checkValidResponseType(CMIElement, response_type, value, interaction.type);\n\n      if (\n        (this.lastErrorCode === \"0\" &&\n          (!response_type.duplicate ||\n            !this.checkDuplicatedPattern(interaction.correct_responses, pattern_index, value))) ||\n        (this.lastErrorCode === \"0\" && value === \"\")\n      ) {\n        // do nothing, we want the inverse\n      } else {\n        if (this.lastErrorCode === \"0\") {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.GENERAL_SET_FAILURE,\n            `Data Model Element Pattern Already Exists: ${CMIElement} - ${value}`,\n          );\n        }\n      }\n    } else {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.GENERAL_SET_FAILURE,\n        `Data Model Element Collection Limit Reached: ${CMIElement} - ${value}`,\n      );\n    }\n  }\n\n  /**\n   * Gets a value from the CMI Object - delegates to CMIValueHandlerModule\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  override getCMIValue(CMIElement: string): any {\n    return this._commonGetCMIValue(\"GetValue\", true, CMIElement);\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {(string|number)} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  override getLmsErrorMessageDetails(errorNumber: string | number, detail: boolean): string {\n    let basicMessage = \"\";\n    let detailMessage = \"\";\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    const errorDescription = scorm2004_constants.error_descriptions[errorNumber];\n    if (errorDescription) {\n      basicMessage = errorDescription.basicMessage;\n      detailMessage = errorDescription.detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Check to see if a correct_response value has been duplicated - delegates to ValidationModule\n   * @param {CMIArray} correct_response\n   * @param {number} current_index\n   * @param {*} value\n   * @return {boolean}\n   */\n  checkDuplicatedPattern(correct_response: CMIArray, current_index: number, value: any): boolean {\n    let found = false;\n    const count = correct_response._count;\n    for (let i = 0; i < count && !found; i++) {\n      if (i !== current_index && correct_response.childArray[i] === value) {\n        found = true;\n      }\n    }\n    return found;\n  }\n\n  /**\n   * Checks for a valid correct_response value - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {string} interaction_type\n   * @param {Array} nodes\n   * @param {*} value\n   */\n  checkCorrectResponseValue(\n    CMIElement: string,\n    interaction_type: string,\n    nodes: Array<any>,\n    value: any,\n  ) {\n    const response = CorrectResponses[interaction_type];\n    if (!response) {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.TYPE_MISMATCH,\n        `Incorrect Response Type: ${interaction_type}`,\n      );\n      return;\n    }\n    const formatRegex = new RegExp(response.format);\n    for (let i = 0; i < nodes.length && this.lastErrorCode === \"0\"; i++) {\n      if (interaction_type.match(\"^(fill-in|long-fill-in|matching|performance|sequencing)$\")) {\n        nodes[i] = this.removeCorrectResponsePrefixes(CMIElement, nodes[i]);\n      }\n\n      if (response?.delimiter2) {\n        const values = nodes[i].split(response.delimiter2);\n        if (values.length === 2) {\n          const matches = values[0].match(formatRegex);\n          if (!matches) {\n            this.throwSCORMError(\n              CMIElement,\n              scorm2004_errors.TYPE_MISMATCH,\n              `${interaction_type}: ${value}`,\n            );\n          } else {\n            if (!response.format2 || !values[1].match(new RegExp(response.format2))) {\n              this.throwSCORMError(\n                CMIElement,\n                scorm2004_errors.TYPE_MISMATCH,\n                `${interaction_type}: ${value}`,\n              );\n            }\n          }\n        } else {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.TYPE_MISMATCH,\n            `${interaction_type}: ${value}`,\n          );\n        }\n      } else {\n        const matches = nodes[i].match(formatRegex);\n        if ((!matches && value !== \"\") || (!matches && interaction_type === \"true-false\")) {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.TYPE_MISMATCH,\n            `${interaction_type}: ${value}`,\n          );\n        } else {\n          if (interaction_type === \"numeric\" && nodes.length > 1) {\n            if (Number(nodes[0]) > Number(nodes[1])) {\n              this.throwSCORMError(\n                CMIElement,\n                scorm2004_errors.TYPE_MISMATCH,\n                `${interaction_type}: ${value}`,\n              );\n            }\n          } else {\n            if (nodes[i] !== \"\" && response.unique) {\n              for (let j = 0; j < i && this.lastErrorCode === \"0\"; j++) {\n                if (nodes[i] === nodes[j]) {\n                  this.throwSCORMError(\n                    CMIElement,\n                    scorm2004_errors.TYPE_MISMATCH,\n                    `${interaction_type}: ${value}`,\n                  );\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove prefixes from correct_response - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {string} node\n   * @return {*}\n   */\n  removeCorrectResponsePrefixes(CMIElement: string, node: string): any {\n    let seenOrder = false;\n    let seenCase = false;\n    let seenLang = false;\n\n    const prefixRegex = new RegExp(\"^({(lang|case_matters|order_matters)=([^}]+)})\");\n    let matches = node.match(prefixRegex);\n    let langMatches = null;\n    while (matches) {\n      switch (matches[2]) {\n        case \"lang\":\n          langMatches = node.match(scorm2004_regex.CMILangcr);\n          if (langMatches) {\n            const lang = langMatches[3];\n            if (lang !== undefined && lang.length > 0) {\n              if (!ValidLanguages.includes(lang.toLowerCase())) {\n                this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n              }\n            }\n          }\n          seenLang = true;\n          break;\n        case \"case_matters\":\n          if (!seenLang && !seenOrder && !seenCase) {\n            if (matches[3] !== \"true\" && matches[3] !== \"false\") {\n              this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n            }\n          }\n\n          seenCase = true;\n          break;\n        case \"order_matters\":\n          if (!seenCase && !seenLang && !seenOrder) {\n            if (matches[3] !== \"true\" && matches[3] !== \"false\") {\n              this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n            }\n          }\n\n          seenOrder = true;\n          break;\n      }\n      node = node.substring(matches[1]?.length || 0);\n      matches = node.match(prefixRegex);\n    }\n\n    return node;\n  }\n\n  /**\n   * Replace the whole API with another\n   * @param {Scorm2004API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI: Scorm2004API) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.adl = newAPI.adl;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit - delegates to DataSerializationModule\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} includeTotalTime - Whether to include total time in the commit data\n   * @return {object|Array}\n   */\n  renderCommitCMI(\n    terminateCommit: boolean,\n    includeTotalTime: boolean = false,\n  ): StringKeyMap | Array<any> {\n    const cmiExport: StringKeyMap = this.renderCMIToJSONObject();\n\n    if (terminateCommit || includeTotalTime) {\n      (cmiExport.cmi as any).total_time = (this.cmi as any).getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened: StringKeyMap = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case \"flattened\":\n        return Utilities.flatten(cmiExport);\n      case \"params\":\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case \"json\":\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit - delegates to DataSerializationModule\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} includeTotalTime - Whether to include total time in the commit data\n   * @return {CommitObject}\n   */\n  renderCommitObject(terminateCommit: boolean, includeTotalTime: boolean = false): CommitObject {\n    const cmiExport = this.renderCommitCMI(terminateCommit, includeTotalTime);\n    const calculateTotalTime = terminateCommit || includeTotalTime;\n    const totalTimeDuration = calculateTotalTime ? this.cmi.getCurrentTotalTime() : \"\";\n    const totalTimeSeconds = Utilities.getDurationAsSeconds(\n      totalTimeDuration,\n      scorm2004_regex.CMITimespan,\n    );\n\n    let completionStatus = CompletionStatus.UNKNOWN;\n    let successStatus = SuccessStatus.UNKNOWN;\n    if (this.cmi.completion_status) {\n      if (this.cmi.completion_status === \"completed\") {\n        completionStatus = CompletionStatus.COMPLETED;\n      } else if (this.cmi.completion_status === \"incomplete\") {\n        completionStatus = CompletionStatus.INCOMPLETE;\n      }\n    }\n    if (this.cmi.success_status) {\n      if (this.cmi.success_status === \"passed\") {\n        successStatus = SuccessStatus.PASSED;\n      } else if (this.cmi.success_status === \"failed\") {\n        successStatus = SuccessStatus.FAILED;\n      }\n    }\n\n    const scoreObject: ScoreObject = this.cmi?.score?.getScoreObject() || {};\n    const commitObject: CommitObject = {\n      completionStatus: completionStatus,\n      successStatus: successStatus,\n      totalTimeSeconds: totalTimeSeconds,\n      runtimeData: cmiExport as StringKeyMap,\n    };\n    if (scoreObject) {\n      commitObject.score = scoreObject;\n    }\n    return commitObject;\n  }\n\n  /**\n   * Attempts to store the data to the LMS - delegates to DataSerializationModule\n   *\n   * @param {boolean} terminateCommit\n   * @return {ResultObject}\n   */\n  async storeData(terminateCommit: boolean): Promise<ResultObject> {\n    if (terminateCommit) {\n      if (this.cmi.mode === \"normal\") {\n        if (this.cmi.credit === \"credit\") {\n          if (this.cmi.completion_threshold && this.cmi.progress_measure) {\n            if (this.cmi.progress_measure >= this.cmi.completion_threshold) {\n              this.cmi.completion_status = \"completed\";\n            } else {\n              this.cmi.completion_status = \"incomplete\";\n            }\n          }\n          if (this.cmi.scaled_passing_score && this.cmi.score.scaled) {\n            if (this.cmi.score.scaled >= this.cmi.scaled_passing_score) {\n              this.cmi.success_status = \"passed\";\n            } else {\n              this.cmi.success_status = \"failed\";\n            }\n          }\n        }\n      }\n    }\n\n    let navRequest = false;\n    if (\n      this.adl.nav.request !==\n        ((this.startingData?.adl as StringKeyMap)?.nav as StringKeyMap)?.request &&\n      this.adl.nav.request !== \"_none_\"\n    ) {\n      navRequest = true;\n    }\n\n    const commitObject = this.getCommitObject(terminateCommit);\n    if (typeof this.settings.lmsCommitUrl === \"string\") {\n      const result = await this.processHttpRequest(\n        this.settings.lmsCommitUrl,\n        commitObject,\n        terminateCommit,\n      );\n\n      // Check if this is a sequencing call, and then call the necessary JS\n      if (\n        navRequest &&\n        result.navRequest !== undefined &&\n        result.navRequest !== \"\" &&\n        typeof result.navRequest === \"string\"\n      ) {\n        Function(`\"use strict\";(() => { ${result.navRequest} })()`)();\n      } else if (result?.navRequest && !navRequest) {\n        if (\n          typeof result.navRequest === \"object\" &&\n          Object.hasOwnProperty.call(result.navRequest, \"name\")\n        ) {\n          this.processListeners(result.navRequest.name as string, result.navRequest.data as string);\n        }\n      }\n\n      return result;\n    }\n\n    return {\n      result: global_constants.SCORM_TRUE,\n      errorCode: 0,\n    };\n  }\n\n  /**\n   * Configure sequencing based on provided settings\n   * @param {SequencingSettings} sequencingSettings - The sequencing settings\n   */\n  private configureSequencing(sequencingSettings: SequencingSettings): void {\n    // Configure activity tree\n    if (sequencingSettings.activityTree) {\n      this.configureActivityTree(sequencingSettings.activityTree);\n    }\n\n    // Configure sequencing rules\n    if (sequencingSettings.sequencingRules) {\n      this.configureSequencingRules(sequencingSettings.sequencingRules);\n    }\n\n    // Configure sequencing controls\n    if (sequencingSettings.sequencingControls) {\n      this.configureSequencingControls(sequencingSettings.sequencingControls);\n    }\n\n    // Configure rollup rules\n    if (sequencingSettings.rollupRules) {\n      this.configureRollupRules(sequencingSettings.rollupRules);\n    }\n  }\n\n  /**\n   * Configure activity tree based on provided settings\n   * @param {ActivitySettings} activityTreeSettings - The activity tree settings\n   */\n  private configureActivityTree(activityTreeSettings: ActivitySettings): void {\n    // Create root activity\n    const rootActivity = this.createActivity(activityTreeSettings);\n\n    // Create activity tree\n    const activityTree = this._sequencing.activityTree;\n    activityTree.root = rootActivity;\n\n    // Extract activity IDs for use as scoItemIds\n    this._extractedScoItemIds = this.extractActivityIds(rootActivity);\n  }\n\n  /**\n   * Extract all activity IDs from an activity and its children\n   * @param {Activity} activity - The activity to extract IDs from\n   * @return {string[]} - Array of activity IDs\n   */\n  private extractActivityIds(activity: Activity): string[] {\n    const ids = [activity.id];\n\n    // Recursively extract IDs from children\n    for (const child of activity.children) {\n      ids.push(...this.extractActivityIds(child));\n    }\n\n    return ids;\n  }\n\n  /**\n   * Create an activity from settings\n   * @param {ActivitySettings} activitySettings - The activity settings\n   * @return {Activity} - The created activity\n   */\n  private createActivity(activitySettings: ActivitySettings): Activity {\n    // Create activity\n    const activity = new Activity(activitySettings.id, activitySettings.title);\n\n    // Set activity properties\n    if (activitySettings.isVisible !== undefined) {\n      activity.isVisible = activitySettings.isVisible;\n    }\n    if (activitySettings.isActive !== undefined) {\n      activity.isActive = activitySettings.isActive;\n    }\n    if (activitySettings.isSuspended !== undefined) {\n      activity.isSuspended = activitySettings.isSuspended;\n    }\n    if (activitySettings.isCompleted !== undefined) {\n      activity.isCompleted = activitySettings.isCompleted;\n    }\n\n    // Create child activities\n    if (activitySettings.children) {\n      for (const childSettings of activitySettings.children) {\n        const childActivity = this.createActivity(childSettings);\n        activity.addChild(childActivity);\n      }\n    }\n    // Apply per-activity sequencing settings if provided\n    if (activitySettings.sequencingControls) {\n      const sc = activity.sequencingControls;\n      const c = activitySettings.sequencingControls;\n      if (c.enabled !== undefined) sc.enabled = c.enabled;\n      if (c.choiceExit !== undefined) sc.choiceExit = c.choiceExit;\n      if (c.flow !== undefined) sc.flow = c.flow;\n      if (c.forwardOnly !== undefined) sc.forwardOnly = c.forwardOnly;\n      if (c.useCurrentAttemptObjectiveInfo !== undefined)\n        sc.useCurrentAttemptObjectiveInfo = c.useCurrentAttemptObjectiveInfo;\n      if (c.useCurrentAttemptProgressInfo !== undefined)\n        sc.useCurrentAttemptProgressInfo = c.useCurrentAttemptProgressInfo;\n      if (c.preventActivation !== undefined) sc.preventActivation = c.preventActivation;\n      if (c.constrainChoice !== undefined) sc.constrainChoice = c.constrainChoice;\n      if (c.rollupObjectiveSatisfied !== undefined)\n        sc.rollupObjectiveSatisfied = c.rollupObjectiveSatisfied;\n      if (c.rollupProgressCompletion !== undefined)\n        sc.rollupProgressCompletion = c.rollupProgressCompletion;\n      if (c.objectiveMeasureWeight !== undefined)\n        sc.objectiveMeasureWeight = c.objectiveMeasureWeight;\n    }\n\n    if (activitySettings.sequencingRules) {\n      const rs = activitySettings.sequencingRules;\n      if (rs.preConditionRules) {\n        for (const ruleSettings of rs.preConditionRules) {\n          const rule = this.createSequencingRule(ruleSettings);\n          activity.sequencingRules.addPreConditionRule(rule);\n        }\n      }\n      if (rs.exitConditionRules) {\n        for (const ruleSettings of rs.exitConditionRules) {\n          const rule = this.createSequencingRule(ruleSettings);\n          activity.sequencingRules.addExitConditionRule(rule);\n        }\n      }\n      if (rs.postConditionRules) {\n        for (const ruleSettings of rs.postConditionRules) {\n          const rule = this.createSequencingRule(ruleSettings);\n          activity.sequencingRules.addPostConditionRule(rule);\n        }\n      }\n    }\n\n    if (activitySettings.rollupRules && activitySettings.rollupRules.rules) {\n      for (const ruleSettings of activitySettings.rollupRules.rules) {\n        const rule = this.createRollupRule(ruleSettings);\n        activity.rollupRules.addRule(rule);\n      }\n    }\n\n    return activity;\n  }\n\n  /**\n   * Configure sequencing rules based on provided settings\n   * @param {SequencingRulesSettings} sequencingRulesSettings - The sequencing rules settings\n   */\n  private configureSequencingRules(sequencingRulesSettings: SequencingRulesSettings): void {\n    const sequencingRules = this._sequencing.sequencingRules;\n\n    // Configure pre-condition rules\n    if (sequencingRulesSettings.preConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.preConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addPreConditionRule(rule);\n      }\n    }\n\n    // Configure exit condition rules\n    if (sequencingRulesSettings.exitConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.exitConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addExitConditionRule(rule);\n      }\n    }\n\n    // Configure post-condition rules\n    if (sequencingRulesSettings.postConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.postConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addPostConditionRule(rule);\n      }\n    }\n  }\n\n  /**\n   * Create a sequencing rule from settings\n   * @param {SequencingRuleSettings} ruleSettings - The sequencing rule settings\n   * @return {SequencingRule} - The created sequencing rule\n   */\n  private createSequencingRule(ruleSettings: SequencingRuleSettings): SequencingRule {\n    // Create rule\n    const rule = new SequencingRule(ruleSettings.action, ruleSettings.conditionCombination);\n\n    // Add conditions\n    for (const conditionSettings of ruleSettings.conditions) {\n      const condition = new RuleCondition(\n        conditionSettings.condition,\n        conditionSettings.operator,\n        new Map(Object.entries(conditionSettings.parameters || {})),\n      );\n      rule.addCondition(condition);\n    }\n\n    return rule;\n  }\n\n  /**\n   * Configure sequencing controls based on provided settings\n   * @param {SequencingControlsSettings} sequencingControlsSettings - The sequencing controls settings\n   */\n  private configureSequencingControls(\n    sequencingControlsSettings: SequencingControlsSettings,\n  ): void {\n    const sequencingControls = this._sequencing.sequencingControls;\n\n    // Set sequencing control properties\n    if (sequencingControlsSettings.enabled !== undefined) {\n      sequencingControls.enabled = sequencingControlsSettings.enabled;\n    }\n    if (sequencingControlsSettings.choiceExit !== undefined) {\n      sequencingControls.choiceExit = sequencingControlsSettings.choiceExit;\n    }\n    if (sequencingControlsSettings.flow !== undefined) {\n      sequencingControls.flow = sequencingControlsSettings.flow;\n    }\n    if (sequencingControlsSettings.forwardOnly !== undefined) {\n      sequencingControls.forwardOnly = sequencingControlsSettings.forwardOnly;\n    }\n    if (sequencingControlsSettings.useCurrentAttemptObjectiveInfo !== undefined) {\n      sequencingControls.useCurrentAttemptObjectiveInfo =\n        sequencingControlsSettings.useCurrentAttemptObjectiveInfo;\n    }\n    if (sequencingControlsSettings.useCurrentAttemptProgressInfo !== undefined) {\n      sequencingControls.useCurrentAttemptProgressInfo =\n        sequencingControlsSettings.useCurrentAttemptProgressInfo;\n    }\n    if (sequencingControlsSettings.preventActivation !== undefined) {\n      sequencingControls.preventActivation = sequencingControlsSettings.preventActivation;\n    }\n    if (sequencingControlsSettings.constrainChoice !== undefined) {\n      sequencingControls.constrainChoice = sequencingControlsSettings.constrainChoice;\n    }\n    if (sequencingControlsSettings.rollupObjectiveSatisfied !== undefined) {\n      sequencingControls.rollupObjectiveSatisfied =\n        sequencingControlsSettings.rollupObjectiveSatisfied;\n    }\n    if (sequencingControlsSettings.rollupProgressCompletion !== undefined) {\n      sequencingControls.rollupProgressCompletion =\n        sequencingControlsSettings.rollupProgressCompletion;\n    }\n    if (sequencingControlsSettings.objectiveMeasureWeight !== undefined) {\n      sequencingControls.objectiveMeasureWeight = sequencingControlsSettings.objectiveMeasureWeight;\n    }\n  }\n\n  /**\n   * Configure rollup rules based on provided settings\n   * @param {RollupRulesSettings} rollupRulesSettings - The rollup rules settings\n   */\n  private configureRollupRules(rollupRulesSettings: RollupRulesSettings): void {\n    const rollupRules = this._sequencing.rollupRules;\n\n    // Configure rollup rules\n    if (rollupRulesSettings.rules) {\n      for (const ruleSettings of rollupRulesSettings.rules) {\n        const rule = this.createRollupRule(ruleSettings);\n        rollupRules.addRule(rule);\n      }\n    }\n  }\n\n  /**\n   * Create a rollup rule from settings\n   * @param {RollupRuleSettings} ruleSettings - The rollup rule settings\n   * @return {RollupRule} - The created rollup rule\n   */\n  private createRollupRule(ruleSettings: RollupRuleSettings): RollupRule {\n    // Create rule\n    const rule = new RollupRule(\n      ruleSettings.action,\n      ruleSettings.consideration,\n      ruleSettings.minimumCount,\n      ruleSettings.minimumPercent,\n    );\n\n    // Add conditions\n    for (const conditionSettings of ruleSettings.conditions) {\n      const condition = new RollupCondition(\n        conditionSettings.condition,\n        new Map(Object.entries(conditionSettings.parameters || {})),\n      );\n      rule.addCondition(condition);\n    }\n\n    return rule;\n  }\n\n  /**\n   * Initialize the sequencing service\n   * @param {Settings} settings - API settings that may include sequencing configuration\n   */\n  private initializeSequencingService(settings?: Settings): void {\n    try {\n      // Create sequencing configuration from settings\n      const sequencingConfig: SequencingConfiguration = {\n        autoRollupOnCMIChange: settings?.sequencing?.autoRollupOnCMIChange ?? true,\n        autoProgressOnCompletion: settings?.sequencing?.autoProgressOnCompletion ?? false,\n        validateNavigationRequests: settings?.sequencing?.validateNavigationRequests ?? true,\n        enableEventSystem: settings?.sequencing?.enableEventSystem ?? true,\n        logLevel: settings?.sequencing?.logLevel ?? \"info\",\n      };\n\n      // Create the sequencing service\n      this._sequencingService = new SequencingService(\n        this._sequencing,\n        this.cmi,\n        this.adl,\n        this.eventService || this, // Use eventService if available, fallback to this\n        this.loggingService || (console as any), // Use loggingService if available, fallback to console\n        sequencingConfig,\n      );\n\n      // Set up event listeners if provided in settings\n      if (settings?.sequencing?.eventListeners) {\n        this._sequencingService.setEventListeners(settings.sequencing.eventListeners);\n      }\n    } catch (error) {\n      // If sequencing service initialization fails, log error but continue\n      console.warn(\"Failed to initialize sequencing service:\", error);\n      this._sequencingService = null;\n    }\n  }\n\n  /**\n   * Get the sequencing service (for advanced sequencing operations)\n   * @return {SequencingService | null}\n   */\n  public getSequencingService(): SequencingService | null {\n    return this._sequencingService;\n  }\n\n  /**\n   * Set sequencing event listeners\n   * @param {SequencingEventListeners} listeners - Event listeners for sequencing events\n   */\n  public setSequencingEventListeners(listeners: SequencingEventListeners): void {\n    if (this._sequencingService) {\n      this._sequencingService.setEventListeners(listeners);\n    }\n  }\n\n  /**\n   * Update sequencing configuration\n   * @param {SequencingConfiguration} config - New sequencing configuration\n   */\n  public updateSequencingConfiguration(config: SequencingConfiguration): void {\n    if (this._sequencingService) {\n      this._sequencingService.updateConfiguration(config);\n    }\n  }\n\n  /**\n   * Get current sequencing state information\n   * @return {object} Current sequencing state\n   */\n  public getSequencingState(): any {\n    if (this._sequencingService) {\n      return this._sequencingService.getSequencingState();\n    }\n    return {\n      isInitialized: false,\n      isActive: false,\n      currentActivity: null,\n      rootActivity: this._sequencing.getRootActivity(),\n      lastSequencingResult: null,\n    };\n  }\n\n  /**\n   * Process a navigation request directly (for advanced use)\n   * @param {string} request - Navigation request\n   * @param {string} targetActivityId - Target activity ID for choice/jump requests\n   * @return {boolean} True if request was processed successfully\n   */\n  public processNavigationRequest(request: string, targetActivityId?: string): boolean {\n    if (this._sequencingService) {\n      return this._sequencingService.processNavigationRequest(request, targetActivityId);\n    }\n    return false;\n  }\n\n  /**\n   * Save current sequencing state to persistent storage\n   * @param {Partial<SequencingStateMetadata>} metadata - Optional metadata override\n   * @return {Promise<boolean>} Promise resolving to success status\n   */\n  public async saveSequencingState(metadata?: Partial<SequencingStateMetadata>): Promise<boolean> {\n    if (!this.settings.sequencingStatePersistence) {\n      this.apiLog(\"saveSequencingState\", \"No persistence configuration provided\", LogLevelEnum.WARN);\n      return false;\n    }\n\n    try {\n      const stateData = this.serializeSequencingState();\n      const fullMetadata: SequencingStateMetadata = {\n        learnerId: this.cmi.learner_id || \"unknown\",\n        courseId: this.settings.courseId || \"unknown\",\n        attemptNumber: 1,\n        lastUpdated: new Date().toISOString(),\n        version: this.settings.sequencingStatePersistence.stateVersion || \"1.0\",\n        ...metadata,\n      };\n\n      const config = this.settings.sequencingStatePersistence;\n      let dataToSave = stateData;\n\n      // Compress if enabled (using simple base64 encoding for now)\n      if (config.compress !== false) {\n        dataToSave = this.compressStateData(stateData);\n      }\n\n      // Check size limits\n      if (config.maxStateSize && dataToSave.length > config.maxStateSize) {\n        throw new Error(`State size ${dataToSave.length} exceeds limit ${config.maxStateSize}`);\n      }\n\n      const success = await config.persistence.saveState(dataToSave, fullMetadata);\n\n      if (config.debugPersistence) {\n        this.apiLog(\n          \"saveSequencingState\",\n          `State save ${success ? \"succeeded\" : \"failed\"}: size=${dataToSave.length}`,\n          success ? LogLevelEnum.INFO : LogLevelEnum.WARN,\n        );\n      }\n\n      return success;\n    } catch (error) {\n      this.apiLog(\n        \"saveSequencingState\",\n        `Error saving sequencing state: ${error instanceof Error ? error.message : String(error)}`,\n        LogLevelEnum.ERROR,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Load sequencing state from persistent storage\n   * @param {Partial<SequencingStateMetadata>} metadata - Optional metadata override\n   * @return {Promise<boolean>} Promise resolving to success status\n   */\n  public async loadSequencingState(metadata?: Partial<SequencingStateMetadata>): Promise<boolean> {\n    if (!this.settings.sequencingStatePersistence) {\n      this.apiLog(\"loadSequencingState\", \"No persistence configuration provided\", LogLevelEnum.WARN);\n      return false;\n    }\n\n    try {\n      const fullMetadata: SequencingStateMetadata = {\n        learnerId: this.cmi.learner_id || \"unknown\",\n        courseId: this.settings.courseId || \"unknown\",\n        attemptNumber: 1,\n        version: this.settings.sequencingStatePersistence.stateVersion || \"1.0\",\n        ...metadata,\n      };\n\n      const config = this.settings.sequencingStatePersistence;\n      const stateData = await config.persistence.loadState(fullMetadata);\n\n      if (!stateData) {\n        if (config.debugPersistence) {\n          this.apiLog(\"loadSequencingState\", \"No sequencing state found to load\", LogLevelEnum.INFO);\n        }\n        return false;\n      }\n\n      // Decompress if needed\n      let dataToLoad = stateData;\n      if (config.compress !== false) {\n        dataToLoad = this.decompressStateData(stateData);\n      }\n\n      const success = this.deserializeSequencingState(dataToLoad);\n\n      if (config.debugPersistence) {\n        this.apiLog(\n          \"loadSequencingState\",\n          `State load ${success ? \"succeeded\" : \"failed\"}: size=${stateData.length}`,\n          success ? LogLevelEnum.INFO : LogLevelEnum.WARN,\n        );\n      }\n\n      return success;\n    } catch (error) {\n      this.apiLog(\n        \"loadSequencingState\",\n        `Error loading sequencing state: ${error instanceof Error ? error.message : String(error)}`,\n        LogLevelEnum.ERROR,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Serialize current sequencing state to JSON string\n   * @return {string} Serialized state\n   */\n  private serializeSequencingState(): string {\n    const state: any = {\n      version: this.settings.sequencingStatePersistence?.stateVersion || \"1.0\",\n      timestamp: new Date().toISOString(),\n      sequencing: null,\n      currentActivityId: null,\n      globalObjectives: this._globalObjectives.map((obj) => obj.toJSON()),\n      adlNavState: {\n        request: this.adl.nav.request,\n        request_valid: this.adl.nav.request_valid,\n      },\n      contentDelivered: false,\n    };\n\n    // Get sequencing state from overall sequencing process if available\n    if (this._sequencingService) {\n      const overallProcess = this._sequencingService.getOverallSequencingProcess();\n      if (overallProcess) {\n        // Use the getSequencingState method from overall_sequencing_process\n        const sequencingState = overallProcess.getSequencingState();\n        state.sequencing = sequencingState;\n        state.contentDelivered = overallProcess.hasContentBeenDelivered();\n      }\n\n      // Get current activity\n      const currentActivity = this._sequencing.getCurrentActivity();\n      if (currentActivity) {\n        state.currentActivityId = currentActivity.id;\n      }\n    }\n\n    return JSON.stringify(state);\n  }\n\n  /**\n   * Deserialize sequencing state from JSON string\n   * @param {string} stateData - Serialized state data\n   * @return {boolean} Success status\n   */\n  private deserializeSequencingState(stateData: string): boolean {\n    try {\n      const state = JSON.parse(stateData);\n\n      // Version compatibility check\n      const expectedVersion = this.settings.sequencingStatePersistence?.stateVersion || \"1.0\";\n      if (state.version !== expectedVersion) {\n        this.apiLog(\n          \"deserializeSequencingState\",\n          `State version mismatch: ${state.version} vs expected ${expectedVersion}`,\n          LogLevelEnum.WARN,\n        );\n      }\n\n      // Restore sequencing state\n      if (state.sequencing && this._sequencingService) {\n        const overallProcess = this._sequencingService.getOverallSequencingProcess();\n        if (overallProcess) {\n          overallProcess.restoreSequencingState(state.sequencing);\n\n          // Restore content delivered flag\n          if (state.contentDelivered) {\n            // Mark content as delivered (there's no direct setter, so we'll need to add one)\n            // For now, we'll just log it\n            this.apiLog(\"deserializeSequencingState\", \"Content delivery state restored\", LogLevelEnum.DEBUG);\n          }\n        }\n      }\n\n      // Restore global objectives\n      if (state.globalObjectives && Array.isArray(state.globalObjectives)) {\n        this._globalObjectives = state.globalObjectives.map((objData: any) => {\n          const obj = new CMIObjectivesObject();\n          // If available, populate from serialized data (method added on CMIObjectivesObject)\n          // Fallback to direct field assignment if fromJSON is unavailable at runtime\n          if ((obj as any).fromJSON) {\n            (obj as any).fromJSON(objData);\n          } else {\n            Object.assign(obj as any, objData);\n          }\n          return obj;\n        });\n      }\n\n      // Restore ADL nav state\n      if (state.adlNavState) {\n        this.adl.nav.request = state.adlNavState.request || \"_none_\";\n        this.adl.nav.request_valid = state.adlNavState.request_valid || {};\n      }\n\n      return true;\n    } catch (error) {\n      this.apiLog(\n        \"deserializeSequencingState\",\n        `Error deserializing sequencing state: ${error instanceof Error ? error.message : String(error)}`,\n        LogLevelEnum.ERROR,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Simple compression using base64 encoding\n   * @param {string} data - Data to compress\n   * @return {string} Compressed data\n   */\n  private compressStateData(data: string): string {\n    // For now, just use base64 encoding\n    // In a real implementation, you might use a library like lz-string\n    if (typeof btoa !== \"undefined\") {\n      return btoa(encodeURIComponent(data));\n    }\n    return data;\n  }\n\n  /**\n   * Simple decompression from base64\n   * @param {string} data - Data to decompress\n   * @return {string} Decompressed data\n   */\n  private decompressStateData(data: string): string {\n    // For now, just use base64 decoding\n    // In a real implementation, you might use a library like lz-string\n    if (typeof atob !== \"undefined\") {\n      try {\n        return decodeURIComponent(atob(data));\n      } catch {\n        return data;\n      }\n    }\n    return data;\n  }\n}\n\nexport default Scorm2004API;\n"],"names":["scorm12_errors","scorm2004_errors","CMIElement","Utilities.flatten","StringKeyMap","terminateCommit","Util.getSecondsAsISODuration","Util.addTwoDurations","RuleConditionOperator","RuleActionType","RollupActionType","RollupConsiderationType","SelectionTiming","RandomizationTiming","SequencingRequestType","DeliveryRequestType","NavigationRequestType","Utilities.getDurationAsSeconds"],"mappings":"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"}