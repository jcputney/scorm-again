{"version":3,"file":"scorm2004.js","sources":["../../src/constants/api_constants.ts","../../src/utilities.ts","../../src/constants/enums.ts","../../src/constants/default_settings.ts","../../src/helpers/scheduled_commit.ts","../../src/services/HttpService.ts","../../src/services/EventService.ts","../../src/services/SerializationService.ts","../../src/exceptions.ts","../../src/services/LoggingService.ts","../../src/services/ErrorHandlingService.ts","../../src/cmi/common/base_cmi.ts","../../src/constants/error_codes.ts","../../src/cmi/common/array.ts","../../src/BaseAPI.ts","../../src/exceptions/scorm2004_exceptions.ts","../../src/cmi/common/validation.ts","../../src/cmi/scorm2004/validation.ts","../../src/constants/regex.ts","../../src/cmi/scorm2004/learner_preference.ts","../../src/constants/response_constants.ts","../../src/cmi/scorm2004/interactions.ts","../../src/exceptions/scorm12_exceptions.ts","../../src/cmi/scorm12/validation.ts","../../src/services/ValidationService.ts","../../src/cmi/common/score.ts","../../src/cmi/scorm2004/score.ts","../../src/cmi/scorm2004/comments.ts","../../src/cmi/scorm2004/objectives.ts","../../src/cmi/scorm2004/metadata.ts","../../src/cmi/scorm2004/learner.ts","../../src/cmi/scorm2004/status.ts","../../src/cmi/scorm2004/session.ts","../../src/cmi/scorm2004/content.ts","../../src/cmi/scorm2004/settings.ts","../../src/cmi/scorm2004/thresholds.ts","../../src/cmi/scorm2004/cmi.ts","../../src/cmi/scorm2004/adl.ts","../../src/cmi/scorm2004/sequencing/sequencing_rules.ts","../../src/cmi/scorm2004/sequencing/rollup_rules.ts","../../src/constants/language_constants.ts","../../src/cmi/scorm2004/sequencing/activity.ts","../../src/cmi/scorm2004/sequencing/activity_tree.ts","../../src/cmi/scorm2004/sequencing/sequencing_controls.ts","../../src/cmi/scorm2004/sequencing/sequencing.ts","../../src/Scorm2004API.ts"],"sourcesContent":["interface ErrorDescription {\n  basicMessage: string;\n  detailMessage: string;\n}\n\ninterface ErrorDescriptions {\n  [key: string]: ErrorDescription;\n}\n\ninterface ScormConstants {\n  cmi_children: string;\n  core_children: string;\n  score_children: string;\n  comments_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface AiccConstants extends ScormConstants {\n  student_demographics_children: string;\n  tries_children: string;\n  attempt_records_children: string;\n  paths_children: string;\n}\n\ninterface Scorm2004Constants {\n  cmi_children: string;\n  comments_children: string;\n  score_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  adl_data_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface GlobalConstants {\n  SCORM_TRUE: string;\n  SCORM_FALSE: string;\n  STATE_NOT_INITIALIZED: number;\n  STATE_INITIALIZED: number;\n  STATE_TERMINATED: number;\n}\n\nexport const global_constants: GlobalConstants = {\n  SCORM_TRUE: \"true\",\n  SCORM_FALSE: \"false\",\n  STATE_NOT_INITIALIZED: 0,\n  STATE_INITIALIZED: 1,\n  STATE_TERMINATED: 2,\n};\n\nexport const scorm12_constants: ScormConstants = {\n  // Children lists\n  cmi_children:\n    \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions\",\n  core_children:\n    \"student_id,student_name,lesson_location,credit,lesson_status,entry,score,total_time,lesson_mode,exit,session_time\",\n  score_children: \"raw,min,max\",\n  comments_children: \"content,location,time\",\n  objectives_children: \"id,score,status\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio,language,speed,text\",\n  interactions_children:\n    \"id,objectives,time,type,correct_responses,weighting,student_response,result,latency\",\n  error_descriptions: {\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage:\n        \"No specific error code exists to describe the error. Use LMSGetDiagnostic for more information\",\n    },\n    \"201\": {\n      basicMessage: \"Invalid argument error\",\n      detailMessage:\n        \"Indicates that an argument represents an invalid data model element or is otherwise incorrect.\",\n    },\n    \"202\": {\n      basicMessage: \"Element cannot have children\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_children\" for a data model element that does not support the \"_children\" suffix.',\n    },\n    \"203\": {\n      basicMessage: \"Element not an array - cannot have count\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_count\" for a data model element that does not support the \"_count\" suffix.',\n    },\n    \"301\": {\n      basicMessage: \"Not initialized\",\n      detailMessage: \"Indicates that an API call was made before the call to lmsInitialize.\",\n    },\n    \"401\": {\n      basicMessage: \"Not implemented error\",\n      detailMessage:\n        \"The data model element indicated in a call to LMSGetValue or LMSSetValue is valid, but was not implemented by this LMS. SCORM 1.2 defines a set of data model elements as being optional for an LMS to implement.\",\n    },\n    \"402\": {\n      basicMessage: \"Invalid set value, element is a keyword\",\n      detailMessage:\n        'Indicates that LMSSetValue was called on a data model element that represents a keyword (elements that end in \"_children\" and \"_count\").',\n    },\n    \"403\": {\n      basicMessage: \"Element is read only\",\n      detailMessage: \"LMSSetValue was called with a data model element that can only be read.\",\n    },\n    \"404\": {\n      basicMessage: \"Element is write only\",\n      detailMessage: \"LMSGetValue was called on a data model element that can only be written to.\",\n    },\n    \"405\": {\n      basicMessage: \"Incorrect Data Type\",\n      detailMessage:\n        \"LMSSetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a LMSSetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\nexport const aicc_constants: AiccConstants = {\n  ...scorm12_constants,\n  ...{\n    cmi_children:\n      \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions,evaluation\",\n    student_preference_children:\n      \"audio,language,lesson_type,speed,text,text_color,text_location,text_size,video,windows\",\n    student_data_children: \"attempt_number,tries,mastery_score,max_time_allowed,time_limit_action\",\n    student_demographics_children:\n      \"city,class,company,country,experience,familiar_name,instructor_name,title,native_language,state,street_address,telephone,years_experience\",\n    tries_children: \"time,status,score\",\n    attempt_records_children: \"score,lesson_status\",\n    paths_children: \"location_id,date,time,status,why_left,time_in_element\",\n  },\n};\n\nexport const scorm2004_constants: Scorm2004Constants = {\n  // Children lists\n  cmi_children:\n    \"_version,comments_from_learner,comments_from_lms,completion_status,credit,entry,exit,interactions,launch_data,learner_id,learner_name,learner_preference,location,max_time_allowed,mode,objectives,progress_measure,scaled_passing_score,score,session_time,success_status,suspend_data,time_limit_action,total_time\",\n  comments_children: \"comment,timestamp,location\",\n  score_children: \"max,raw,scaled,min\",\n  objectives_children: \"progress_measure,completion_status,success_status,description,score,id\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio_level,audio_captioning,delivery_speed,language\",\n  interactions_children:\n    \"id,type,objectives,timestamp,correct_responses,weighting,learner_response,result,latency,description\",\n  adl_data_children: \"id,store\",\n  error_descriptions: {\n    \"0\": {\n      basicMessage: \"No Error\",\n      detailMessage: \"No error occurred, the previous API call was successful.\",\n    },\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage:\n        \"No specific error code exists to describe the error. Use GetDiagnostic for more information.\",\n    },\n    \"102\": {\n      basicMessage: \"General Initialization Failure\",\n      detailMessage: \"Call to Initialize failed for an unknown reason.\",\n    },\n    \"103\": {\n      basicMessage: \"Already Initialized\",\n      detailMessage: \"Call to Initialize failed because Initialize was already called.\",\n    },\n    \"104\": {\n      basicMessage: \"Content Instance Terminated\",\n      detailMessage: \"Call to Initialize failed because Terminate was already called.\",\n    },\n    \"111\": {\n      basicMessage: \"General Termination Failure\",\n      detailMessage: \"Call to Terminate failed for an unknown reason.\",\n    },\n    \"112\": {\n      basicMessage: \"Termination Before Initialization\",\n      detailMessage: \"Call to Terminate failed because it was made before the call to Initialize.\",\n    },\n    \"113\": {\n      basicMessage: \"Termination After Termination\",\n      detailMessage: \"Call to Terminate failed because Terminate was already called.\",\n    },\n    \"122\": {\n      basicMessage: \"Retrieve Data Before Initialization\",\n      detailMessage: \"Call to GetValue failed because it was made before the call to Initialize.\",\n    },\n    \"123\": {\n      basicMessage: \"Retrieve Data After Termination\",\n      detailMessage: \"Call to GetValue failed because it was made after the call to Terminate.\",\n    },\n    \"132\": {\n      basicMessage: \"Store Data Before Initialization\",\n      detailMessage: \"Call to SetValue failed because it was made before the call to Initialize.\",\n    },\n    \"133\": {\n      basicMessage: \"Store Data After Termination\",\n      detailMessage: \"Call to SetValue failed because it was made after the call to Terminate.\",\n    },\n    \"142\": {\n      basicMessage: \"Commit Before Initialization\",\n      detailMessage: \"Call to Commit failed because it was made before the call to Initialize.\",\n    },\n    \"143\": {\n      basicMessage: \"Commit After Termination\",\n      detailMessage: \"Call to Commit failed because it was made after the call to Terminate.\",\n    },\n    \"201\": {\n      basicMessage: \"General Argument Error\",\n      detailMessage:\n        \"An invalid argument was passed to an API method (usually indicates that Initialize, Commit or Terminate did not receive the expected empty string argument.\",\n    },\n    \"301\": {\n      basicMessage: \"General Get Failure\",\n      detailMessage:\n        \"Indicates a failed GetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"351\": {\n      basicMessage: \"General Set Failure\",\n      detailMessage:\n        \"Indicates a failed SetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"391\": {\n      basicMessage: \"General Commit Failure\",\n      detailMessage:\n        \"Indicates a failed Commit call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"401\": {\n      basicMessage: \"Undefined Data Model Element\",\n      detailMessage:\n        \"The data model element name passed to GetValue or SetValue is not a valid SCORM data model element.\",\n    },\n    \"402\": {\n      basicMessage: \"Unimplemented Data Model Element\",\n      detailMessage:\n        \"The data model element indicated in a call to GetValue or SetValue is valid, but was not implemented by this LMS. In SCORM 2004, this error would indicate an LMS that is not fully SCORM conformant.\",\n    },\n    \"403\": {\n      basicMessage: \"Data Model Element Value Not Initialized\",\n      detailMessage:\n        \"Attempt to read a data model element that has not been initialized by the LMS or through a SetValue call. This error condition is often reached during normal execution of a SCO.\",\n    },\n    \"404\": {\n      basicMessage: \"Data Model Element Is Read Only\",\n      detailMessage: \"SetValue was called with a data model element that can only be read.\",\n    },\n    \"405\": {\n      basicMessage: \"Data Model Element Is Write Only\",\n      detailMessage: \"GetValue was called on a data model element that can only be written to.\",\n    },\n    \"406\": {\n      basicMessage: \"Data Model Element Type Mismatch\",\n      detailMessage:\n        \"SetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Data Model Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a SetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\n","/**\n * Constants for time conversion calculations.\n * These are used throughout the codebase for converting between different time formats.\n */\nexport const SECONDS_PER_SECOND = 1.0;\nexport const SECONDS_PER_MINUTE = 60;\nexport const SECONDS_PER_HOUR = 60 * SECONDS_PER_MINUTE;\nexport const SECONDS_PER_DAY = 24 * SECONDS_PER_HOUR;\n\ntype Designation = {\n  [key: string]: number;\n};\n\n/**\n * A record with string keys and unknown values.\n * This is a more type-safe alternative to using `any`.\n */\nexport type StringKeyMap = Record<string, unknown>;\n\nconst designations: Designation = {\n  D: SECONDS_PER_DAY,\n  H: SECONDS_PER_HOUR,\n  M: SECONDS_PER_MINUTE,\n  S: SECONDS_PER_SECOND,\n};\n\n/**\n * Converts a number of seconds to a formatted time string in HH:MM:SS format.\n * This function handles decimal seconds and ensures proper formatting with leading zeros.\n *\n * @param {number|null} totalSeconds - The total number of seconds to convert. If null or negative, returns \"00:00:00\".\n * @return {string} A formatted time string in HH:MM:SS format, with up to 2 decimal places for seconds if applicable.\n *\n * @example\n * // Returns \"01:30:45\"\n * getSecondsAsHHMMSS(5445);\n *\n * @example\n * // Returns \"00:00:30.5\"\n * getSecondsAsHHMMSS(30.5);\n *\n * @example\n * // Returns \"00:00:00\"\n * getSecondsAsHHMMSS(null);\n */\nexport const getSecondsAsHHMMSS = memoize((totalSeconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!totalSeconds || totalSeconds <= 0) {\n    return \"00:00:00\";\n  }\n\n  const hours = Math.floor(totalSeconds / SECONDS_PER_HOUR);\n  const dateObj = new Date(totalSeconds * 1000);\n  const minutes = dateObj.getUTCMinutes();\n  // make sure we add any possible decimal value\n  const seconds = dateObj.getSeconds();\n  const ms = totalSeconds % 1.0;\n  let msStr = \"\";\n\n  if (countDecimals(ms) > 0) {\n    if (countDecimals(ms) > 2) {\n      msStr = ms.toFixed(2);\n    } else {\n      msStr = String(ms);\n    }\n\n    msStr = \".\" + msStr.split(\".\")[1];\n  }\n\n  return (hours + \":\" + minutes + \":\" + seconds).replace(/\\b\\d\\b/g, \"0$&\") + msStr;\n});\n\n/**\n * Converts a number of seconds to an ISO 8601 duration string (e.g., \"PT1H30M45S\").\n * This function handles the complexity of formatting according to the ISO 8601 standard,\n * including the proper placement of the \"T\" separator for time components.\n *\n * @param {number|null} seconds - The number of seconds to convert. If null or negative, returns \"PT0S\".\n * @return {string} An ISO 8601 formatted duration string.\n *\n * @example\n * // Returns \"PT1H30M45S\" (1 hour, 30 minutes, 45 seconds)\n * getSecondsAsISODuration(5445);\n *\n * @example\n * // Returns \"PT30.5S\" (30.5 seconds)\n * getSecondsAsISODuration(30.5);\n *\n * @example\n * // Returns \"P1DT1H\" (1 day, 1 hour)\n * getSecondsAsISODuration(90000);\n *\n * @example\n * // Returns \"PT0S\" (0 seconds)\n * getSecondsAsISODuration(null);\n */\nexport const getSecondsAsISODuration = memoize((seconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!seconds || seconds <= 0) {\n    return \"PT0S\";\n  }\n\n  let duration = \"P\";\n  let remainder = seconds;\n\n  // Convert to array of entries and use functional methods\n  const designationEntries = Object.entries(designations);\n\n  // Process each time designation\n  designationEntries.forEach(([designationsKey, current_seconds]) => {\n    let value = Math.floor(remainder / current_seconds);\n    remainder = remainder % current_seconds;\n\n    // Limit decimal places\n    if (countDecimals(remainder) > 2) {\n      remainder = Number(Number(remainder).toFixed(2));\n    }\n\n    // If we have anything left in the remainder, and we're currently adding\n    // seconds to the duration, go ahead and add the decimal to the seconds\n    if (designationsKey === \"S\" && remainder > 0) {\n      value += remainder;\n    }\n\n    if (value) {\n      // Add the 'T' separator for time components if needed\n      const needsTimeSeparator =\n        (duration.indexOf(\"D\") > 0 || [\"H\", \"M\", \"S\"].includes(designationsKey)) &&\n        duration.indexOf(\"T\") === -1;\n\n      if (needsTimeSeparator) {\n        duration += \"T\";\n      }\n\n      duration += `${value}${designationsKey}`;\n    }\n  });\n\n  return duration;\n});\n\n/**\n * Converts a time string in HH:MM:SS format to the equivalent number of seconds.\n * This function is flexible and can handle various input types, converting them to strings as needed.\n *\n * @param {string|number|boolean|null} timeString - The time string to convert, typically in HH:MM:SS format.\n *                                                 If not a string, it will be converted to one.\n *                                                 If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} timeRegex - The regular expression used to validate the time string format.\n *                                    If a string is provided, it will be converted to a RegExp.\n * @return {number} The total number of seconds represented by the time string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getTimeAsSeconds(\"01:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getTimeAsSeconds(\"invalid\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 30 (converts number to string \"30\" then parses as 0:0:30)\n * getTimeAsSeconds(30, /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport const getTimeAsSeconds = memoize(\n  (timeString: string | number | boolean | null, timeRegex: RegExp | string): number => {\n    if (typeof timeString === \"number\" || typeof timeString === \"boolean\") {\n      timeString = String(timeString);\n    }\n    if (typeof timeRegex === \"string\") {\n      timeRegex = new RegExp(timeRegex);\n    }\n    if (!timeString || !timeString?.match?.(timeRegex)) {\n      return 0;\n    }\n\n    const parts = timeString.split(\":\");\n    const hours = Number(parts[0]);\n    const minutes = Number(parts[1]);\n    const seconds = Number(parts[2]);\n    return hours * 3600 + minutes * 60 + seconds;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (timeString, timeRegex) => {\n    const timeStr = typeof timeString === \"string\" ? timeString : String(timeString ?? \"\");\n    const regexStr = typeof timeRegex === \"string\" ? timeRegex : (timeRegex?.toString() ?? \"\");\n    return `${timeStr}:${regexStr}`;\n  },\n);\n\n/**\n * Converts an ISO 8601 duration string (e.g., \"PT1H30M45S\") to the equivalent number of seconds.\n * This function parses the duration string using a regular expression to extract years, days,\n * hours, minutes, and seconds components.\n *\n * @param {string|null} duration - The ISO 8601 duration string to convert.\n *                                If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n *                                       The regex should have capture groups for years, days, hours, minutes, and seconds.\n * @return {number} The total number of seconds represented by the duration string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getDurationAsSeconds(\"PT1H30M45S\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 90000 (1 day, 1 hour)\n * getDurationAsSeconds(\"P1DT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getDurationAsSeconds(\"invalid\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport const getDurationAsSeconds = memoize(\n  (duration: string | null, durationRegex: RegExp | string): number => {\n    if (typeof durationRegex === \"string\") {\n      durationRegex = new RegExp(durationRegex);\n    }\n\n    if (!duration || !duration?.match?.(durationRegex)) {\n      return 0;\n    }\n\n    const [, years, _, , days, hours, minutes, seconds] =\n      new RegExp(durationRegex).exec?.(duration) ?? [];\n    let result = 0.0;\n    result += Number(seconds) || 0.0;\n    result += Number(minutes) * 60.0 || 0.0;\n    result += Number(hours) * 3600.0 || 0.0;\n    result += Number(days) * (60 * 60 * 24.0) || 0.0;\n    result += Number(years) * (60 * 60 * 24 * 365.0) || 0.0;\n    return result;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (duration, durationRegex) => {\n    const durationStr = duration ?? \"\";\n    const regexStr =\n      typeof durationRegex === \"string\" ? durationRegex : (durationRegex?.toString() ?? \"\");\n    return `${durationStr}:${regexStr}`;\n  },\n);\n\n/**\n * Adds together two ISO 8601 duration strings and returns the result as a new ISO 8601 duration string.\n * This function works by converting both durations to seconds, adding them together, and then\n * converting the result back to an ISO 8601 duration string.\n *\n * @param {string} first - The first ISO 8601 duration string.\n * @param {string} second - The second ISO 8601 duration string.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n * @return {string} A new ISO 8601 duration string representing the sum of the two input durations.\n *\n * @example\n * // Returns \"PT2H\" (1 hour + 1 hour = 2 hours)\n * addTwoDurations(\"PT1H\", \"PT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"PT1H30M\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addTwoDurations(\"PT1H\", \"PT30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"P1DT1H30M\" (1 day + 1 hour and 30 minutes = 1 day, 1 hour, and 30 minutes)\n * addTwoDurations(\"P1D\", \"PT1H30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport function addTwoDurations(\n  first: string,\n  second: string,\n  durationRegex: RegExp | string,\n): string {\n  const regex: RegExp =\n    typeof durationRegex === \"string\" ? new RegExp(durationRegex) : durationRegex;\n  return getSecondsAsISODuration(\n    getDurationAsSeconds(first, regex) + getDurationAsSeconds(second, regex),\n  );\n}\n\n/**\n * Adds together two time strings in HH:MM:SS format and returns the result as a new time string.\n * This function works by converting both time strings to seconds, adding them together, and then\n * converting the result back to an HH:MM:SS format.\n *\n * @param {string} first - The first time string in HH:MM:SS format.\n * @param {string} second - The second time string in HH:MM:SS format.\n * @param {RegExp|string} timeRegex - The regular expression used to validate and parse the time strings.\n *                                   If a string is provided, it will be converted to a RegExp.\n * @return {string} A new time string in HH:MM:SS format representing the sum of the two input times.\n *\n * @example\n * // Returns \"02:00:00\" (1 hour + 1 hour = 2 hours)\n * addHHMMSSTimeStrings(\"01:00:00\", \"01:00:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:00\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:45\" (1 hour + 30 minutes and 45 seconds = 1 hour, 30 minutes, and 45 seconds)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport function addHHMMSSTimeStrings(\n  first: string,\n  second: string,\n  timeRegex: RegExp | string,\n): string {\n  if (typeof timeRegex === \"string\") {\n    timeRegex = new RegExp(timeRegex);\n  }\n  return getSecondsAsHHMMSS(\n    getTimeAsSeconds(first, timeRegex) + getTimeAsSeconds(second, timeRegex),\n  );\n}\n\n/**\n * Flattens a nested JSON object into a flat object with dot notation for nested properties.\n * This function recursively traverses the object and creates new keys using dot notation\n * for nested objects and bracket notation for arrays.\n *\n * @param {StringKeyMap} data - The nested object to flatten.\n * @return {StringKeyMap} A flattened object where nested properties are represented with dot notation.\n *\n * @example\n * // Returns { \"a\": 1, \"b.c\": 2, \"b.d\": 3, \"e[0]\": 4, \"e[1]\": 5 }\n * flatten({\n *   a: 1,\n *   b: { c: 2, d: 3 },\n *   e: [4, 5]\n * });\n *\n * @example\n * // Returns { \"\": [] } for an empty array\n * flatten([]);\n *\n * @example\n * // Returns { \"\": {} } for an empty object\n * flatten({});\n */\nexport function flatten(data: StringKeyMap): StringKeyMap {\n  const result: StringKeyMap = {};\n\n  /**\n   * Recurse through the object\n   * @param {*} cur\n   * @param {*} prop\n   */\n  function recurse(cur: any, prop: any) {\n    if (Object(cur) !== cur) {\n      result[prop] = cur;\n    } else if (Array.isArray(cur)) {\n      // Use forEach instead of for loop\n      cur.forEach((item, i) => {\n        recurse(item, `${prop}[${i}]`);\n      });\n\n      if (cur.length === 0) result[prop] = [];\n    } else {\n      const keys = Object.keys(cur).filter((p) => Object.prototype.hasOwnProperty.call(cur, p));\n\n      const isEmpty = keys.length === 0;\n\n      // Use forEach instead of for...in loop\n      keys.forEach((p) => {\n        recurse(cur[p], prop ? `${prop}.${p}` : p);\n      });\n\n      if (isEmpty && prop) result[prop] = {};\n    }\n  }\n\n  recurse(data, \"\");\n  return result;\n}\n\n/**\n * Converts a flattened object back into a nested object structure.\n * This function is the inverse of `flatten()`. It parses dot notation and bracket notation\n * in property names to recreate the original nested structure.\n *\n * @param {StringKeyMap} data - The flattened object to unflatten.\n * @return {object} A nested object recreated from the flattened structure.\n *\n * @example\n * // Returns { a: 1, b: { c: 2, d: 3 }, e: [4, 5] }\n * unflatten({\n *   \"a\": 1,\n *   \"b.c\": 2,\n *   \"b.d\": 3,\n *   \"e[0]\": 4,\n *   \"e[1]\": 5\n * });\n *\n * @example\n * // Handles array indices correctly\n * unflatten({\n *   \"users[0].name\": \"John\",\n *   \"users[0].email\": \"john@example.com\",\n *   \"users[1].name\": \"Jane\",\n *   \"users[1].email\": \"jane@example.com\"\n * });\n * // Returns:\n * // {\n * //   users: [\n * //     { name: \"John\", email: \"john@example.com\" },\n * //     { name: \"Jane\", email: \"jane@example.com\" }\n * //   ]\n * // }\n */\nexport function unflatten(data: StringKeyMap): object {\n  \"use strict\";\n\n  if (Object(data) !== data || Array.isArray(data)) return data;\n  const result: StringKeyMap = {};\n\n  // Regex pattern for parsing property paths\n  const pattern = /\\.?([^.[\\]]+)|\\[(\\d+)]/g;\n\n  // Get all own properties and process them\n  Object.keys(data)\n    .filter((p) => Object.prototype.hasOwnProperty.call(data, p))\n    .forEach((p) => {\n      let cur = result;\n      let prop = \"\";\n\n      // Create a new regex instance for each property to reset lastIndex\n      const regex = new RegExp(pattern);\n\n      // Process all matches in the property path\n      Array.from({ length: p.match(new RegExp(pattern, \"g\"))?.length ?? 0 }, () =>\n        regex.exec(p),\n      ).forEach((m) => {\n        if (m) {\n          // Create array or object as needed\n          cur = (cur[prop] ?? (cur[prop] = m[2] ? [] : ({} as StringKeyMap))) as StringKeyMap;\n          prop = m[2] || m[1];\n        }\n      });\n\n      cur[prop] = data[p];\n    });\n\n  return (result[\"\"] ?? result) as object;\n}\n\n/**\n * Counts the number of decimal places in a number.\n * This function handles both integer and floating-point numbers.\n *\n * @param {number} num - The number to analyze.\n * @return {number} The number of decimal places. Returns 0 for integers or if the number doesn't have a decimal point.\n *\n * @example\n * // Returns 0\n * countDecimals(42);\n *\n * @example\n * // Returns 2\n * countDecimals(3.14);\n *\n * @example\n * // Returns 5\n * countDecimals(1.23456);\n */\nexport function countDecimals(num: number): number {\n  if (Math.floor(num) === num || String(num)?.indexOf?.(\".\") < 0) return 0;\n  const parts = num.toString().split(\".\")?.[1];\n  return parts?.length ?? 0;\n}\n\n/**\n * Formats SCORM messages for consistent and readable logging.\n * This function pads the function name and CMI element to create aligned log messages\n * that are easier to read in log files or console output.\n *\n * @param {string} functionName - The name of the function that generated the message.\n * @param {string} message - The message content to be logged.\n * @param {string} [CMIElement] - Optional. The CMI element related to the message.\n * @return {string} A formatted message string with consistent padding.\n *\n * @example\n * // Returns \"initialize          : Successfully initialized\"\n * formatMessage(\"initialize\", \"Successfully initialized\");\n *\n * @example\n * // Returns \"getValue            : cmi.core.student_id                                             : 12345\"\n * formatMessage(\"getValue\", \"12345\", \"cmi.core.student_id\");\n *\n * @example\n * // Returns \"setValue            : cmi.core.lesson_status                                          : completed\"\n * formatMessage(\"setValue\", \"completed\", \"cmi.core.lesson_status\");\n */\nexport function formatMessage(functionName: string, message: string, CMIElement?: string): string {\n  const baseLength = 20;\n\n  // Use string padding instead of loops\n  const paddedFunction = functionName.padEnd(baseLength);\n  let messageString = `${paddedFunction}: `;\n\n  if (CMIElement) {\n    const CMIElementBaseLength = 70;\n    // Add CMIElement and pad to the required length\n    messageString += CMIElement;\n    messageString = messageString.padEnd(CMIElementBaseLength);\n  }\n\n  // Add the message (or empty string if null/undefined)\n  messageString += message ?? \"\";\n\n  return messageString;\n}\n\n/**\n * Checks if a string contains a specific pattern using regular expression matching.\n * This function is a wrapper around JavaScript's String.match() method that handles\n * null/undefined values gracefully.\n *\n * @param {string} str - The string to search within. If null or undefined, returns false.\n * @param {string} tester - The pattern to search for. Can be a regular expression pattern.\n * @return {boolean} True if the pattern is found in the string, false otherwise.\n *\n * @example\n * // Returns true\n * stringMatches(\"Hello, world!\", \"world\");\n *\n * @example\n * // Returns true\n * stringMatches(\"The quick brown fox\", \"\\\\w+\\\\s+\\\\w+\");\n *\n * @example\n * // Returns false\n * stringMatches(\"Hello, world!\", \"universe\");\n *\n * @example\n * // Returns false (handles null gracefully)\n * stringMatches(null, \"test\");\n */\nexport function stringMatches(str: string, tester: string): boolean {\n  return str?.match(tester) !== null;\n}\n\n/**\n * Creates a memoized (cached) version of a function for performance optimization.\n * This function caches the results of previous calls with the same arguments,\n * avoiding redundant calculations for repeated calls with the same input.\n *\n * @template T - The type of the function to memoize\n * @param {T} fn - The function to memoize\n * @param {Function} [keyFn] - Optional function to generate a custom cache key.\n *                           Useful for functions with complex arguments that can't be serialized.\n * @return {T} A memoized version of the input function with the same signature\n *\n * @example\n * // Basic usage with a simple function\n * const memoizedAdd = memoize((a, b) => {\n *   console.log('Calculating...');\n *   return a + b;\n * });\n *\n * memoizedAdd(1, 2); // Logs \"Calculating...\" and returns 3\n * memoizedAdd(1, 2); // Returns 3 without logging (uses cached result)\n *\n * @example\n * // Using a custom key function for objects that can't be serialized\n * const memoizedProcessUser = memoize(\n *   (user) => {\n *     console.log('Processing user...');\n *     return { ...user, processed: true };\n *   },\n *   (user) => user.id // Use user.id as the cache key\n * );\n *\n * memoizedProcessUser({ id: 123, name: 'John' }); // Logs and processes\n * memoizedProcessUser({ id: 123, name: 'John' }); // Uses cached result\n */\nexport function memoize<T extends (...args: any[]) => any>(\n  fn: T,\n  keyFn?: (...args: Parameters<T>) => string,\n): T {\n  const cache = new Map<string, ReturnType<T>>();\n\n  return ((...args: Parameters<T>): ReturnType<T> => {\n    const key = keyFn ? keyFn(...args) : JSON.stringify(args);\n\n    return cache.has(key)\n      ? (cache.get(key) as ReturnType<T>)\n      : (() => {\n          const result = fn(...args);\n          cache.set(key, result);\n          return result;\n        })();\n  }) as T;\n}\n","// Using plain objects instead of enums for better compatibility with strip-only mode\n// This approach avoids TypeScript enum runtime code while maintaining the same API\n\n// NAVBoolean values\nexport const NAVBoolean = {\n  UNKNOWN: \"unknown\",\n  TRUE: \"true\",\n  FALSE: \"false\",\n};\n\n// Type for NAVBoolean values\nexport type NAVBoolean = (typeof NAVBoolean)[keyof typeof NAVBoolean];\n\n// SuccessStatus values\nexport const SuccessStatus = {\n  PASSED: \"passed\",\n  FAILED: \"failed\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for SuccessStatus values\nexport type SuccessStatus = (typeof SuccessStatus)[keyof typeof SuccessStatus];\n\n// CompletionStatus values\nexport const CompletionStatus = {\n  COMPLETED: \"completed\",\n  INCOMPLETE: \"incomplete\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for CompletionStatus values\nexport type CompletionStatus = (typeof CompletionStatus)[keyof typeof CompletionStatus];\n\n// LogLevelEnum values\nexport const LogLevelEnum = {\n  _: 0,\n  DEBUG: 1,\n  INFO: 2,\n  WARN: 3,\n  ERROR: 4,\n  NONE: 5,\n};\n\n// Type for LogLevelEnum values\nexport type LogLevelEnum = (typeof LogLevelEnum)[keyof typeof LogLevelEnum];\n","import { LogLevel, ResultObject, Settings } from \"../types/api_types\";\nimport { global_constants } from \"./api_constants\";\nimport { LogLevelEnum } from \"./enums\";\n\n/**\n * Default settings for the SCORM API\n */\nexport const DefaultSettings: Settings = {\n  autocommit: false,\n  autocommitSeconds: 10,\n  asyncCommit: false,\n  sendFullCommit: true,\n  lmsCommitUrl: false,\n  dataCommitFormat: \"json\",\n  commitRequestDataType: \"application/json;charset=UTF-8\",\n  autoProgress: false,\n  logLevel: LogLevelEnum.ERROR,\n  selfReportSessionTime: false,\n  alwaysSendTotalTime: false,\n  renderCommonCommitFields: false,\n  strict_errors: true,\n  xhrHeaders: {},\n  xhrWithCredentials: false,\n  fetchMode: \"cors\",\n  responseHandler: async function (response: Response): Promise<ResultObject> {\n    if (typeof response !== \"undefined\") {\n      let httpResult = null;\n\n      // Handle both text() and json() response methods\n      try {\n        if (typeof response.json === 'function') {\n          // Try to get JSON directly if the method exists\n          httpResult = await response.json();\n        } else if (typeof response.text === 'function') {\n          // Fall back to text() if json() is not available\n          const responseText = await response.text();\n          if (responseText) {\n            httpResult = JSON.parse(responseText);\n          }\n        }\n      } catch (e) {\n        // If parsing fails, continue with null httpResult\n      }\n\n      if (httpResult === null || !{}.hasOwnProperty.call(httpResult, \"result\")) {\n        if (response.status === 200) {\n          return {\n            result: global_constants.SCORM_TRUE,\n            errorCode: 0,\n          };\n        } else {\n          return {\n            result: global_constants.SCORM_FALSE,\n            errorCode: 101,\n          };\n        }\n      } else {\n        return {\n          result: httpResult.result,\n          errorCode: httpResult.errorCode\n            ? httpResult.errorCode\n            : httpResult.result === global_constants.SCORM_TRUE\n              ? 0\n              : 101,\n        };\n      }\n    }\n    return {\n      result: global_constants.SCORM_FALSE,\n      errorCode: 101,\n    };\n  },\n  requestHandler: function (commitObject) {\n    return commitObject;\n  },\n  onLogMessage: defaultLogHandler,\n  scoItemIds: [],\n  scoItemIdValidator: false,\n  globalObjectiveIds: [],\n};\n\nexport function defaultLogHandler(messageLevel: LogLevel, logMessage: string): void {\n  switch (messageLevel) {\n    case \"4\":\n    case 4:\n    case \"ERROR\":\n    case LogLevelEnum.ERROR:\n      console.error(logMessage);\n      break;\n    case \"3\":\n    case 3:\n    case \"WARN\":\n    case LogLevelEnum.WARN:\n      console.warn(logMessage);\n      break;\n    case \"2\":\n    case 2:\n    case \"INFO\":\n    case LogLevelEnum.INFO:\n      console.info(logMessage);\n      break;\n    case \"1\":\n    case 1:\n    case \"DEBUG\":\n    case LogLevelEnum.DEBUG:\n      if (console.debug) {\n        console.debug(logMessage);\n      } else {\n        console.log(logMessage);\n      }\n      break;\n  }\n}\n","import BaseAPI from \"../BaseAPI\";\n\n/**\n * Private class that wraps a timeout call to the commit() function\n */\nexport class ScheduledCommit {\n  private _API;\n  private _cancelled = false;\n  private readonly _timeout;\n  private readonly _callback;\n\n  /**\n   * Constructor for ScheduledCommit\n   * @param {BaseAPI} API\n   * @param {number} when\n   * @param {string} callback\n   */\n  constructor(API: BaseAPI, when: number, callback: string) {\n    this._API = API;\n    this._timeout = setTimeout(this.wrapper.bind(this), when);\n    this._callback = callback;\n  }\n\n  /**\n   * Cancel any currently scheduled commit\n   */\n  cancel() {\n    this._cancelled = true;\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n  }\n\n  /**\n   * Wrap the API commit call to check if the call has already been cancelled\n   */\n  wrapper() {\n    if (!this._cancelled) {\n      (async () => await this._API.commit(this._callback))();\n    }\n  }\n}\n","import { CommitObject, ResultObject, Settings } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { IHttpService } from \"../interfaces/services\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { StringKeyMap } from \"../utilities\";\n\n/**\n * Service for handling HTTP communication with the LMS\n */\nexport class HttpService implements IHttpService {\n  private settings: Settings;\n  private error_codes: ErrorCode;\n\n  /**\n   * Constructor for HttpService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   */\n  constructor(settings: Settings, error_codes: ErrorCode) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n  }\n\n  /**\n   * Sends HTTP requests to the LMS with special handling for immediate and standard requests.\n   *\n   * This method handles communication with the LMS server, implementing two distinct\n   * request handling strategies based on the context:\n   *\n   * 1. Immediate Mode (used during termination):\n   *    When immediate=true, the method:\n   *    - Initiates the fetch request but doesn't wait for it to complete\n   *    - Returns a success result immediately\n   *    - Processes the response asynchronously when it arrives\n   *\n   *    This is critical for browser compatibility during page unload/termination,\n   *    as some browsers (especially Chrome) may cancel synchronous or awaited\n   *    requests when a page is closing.\n   *\n   * 2. Standard Mode (normal operation):\n   *    When immediate=false, the method:\n   *    - Processes the request parameters through the configured requestHandler\n   *    - Awaits the fetch response completely\n   *    - Transforms the response using the configured responseHandler\n   *    - Triggers appropriate event listeners based on success/failure\n   *    - Returns the complete result with appropriate error codes\n   *\n   * The method also includes error handling to catch network failures or other\n   * exceptions that might occur during the request process.\n   *\n   * @param {string} url - The URL endpoint to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The data to send to the LMS\n   * @param {boolean} immediate - Whether to send the request immediately without waiting (true) or process normally (false)\n   * @param {Function} apiLog - Function to log API messages with appropriate levels\n   * @param {Function} processListeners - Function to trigger event listeners for commit events\n   * @return {Promise<ResultObject>} - A promise that resolves with the result of the request\n   *\n   * @example\n   * // Standard request (waits for response)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   false,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   *\n   * @example\n   * // Immediate request (for termination)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   true,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   * // result will be success immediately, regardless of actual HTTP result\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n    apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    const genericError: ResultObject = {\n      result: global_constants.SCORM_FALSE,\n      errorCode: this.error_codes.GENERAL,\n    };\n\n    // if we are terminating the module or closing the browser window/tab, we need to make this fetch ASAP.\n    // Some browsers, especially Chrome, do not like synchronous requests to be made when the window is closing.\n    if (immediate) {\n      this.performFetch(url, params).then(async (response) => {\n        await this.transformResponse(response, processListeners);\n      });\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    }\n\n    const process = async (\n      url: string,\n      params: CommitObject | StringKeyMap | Array<any>,\n      settings: Settings,\n    ): Promise<ResultObject> => {\n      try {\n        params = settings.requestHandler(params) as CommitObject | StringKeyMap | Array<any>;\n        const response = await this.performFetch(url, params);\n\n        return this.transformResponse(response, processListeners);\n      } catch (e) {\n        apiLog(\"processHttpRequest\", e, LogLevelEnum.ERROR);\n        processListeners(\"CommitError\");\n        return genericError;\n      }\n    };\n\n    return await process(url, params, this.settings);\n  }\n\n  /**\n   * Perform the fetch request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - The response from the LMS\n   * @private\n   */\n  private async performFetch(url: string, params: StringKeyMap | Array<any>): Promise<Response> {\n    return fetch(url, {\n      method: \"POST\",\n      mode: this.settings.fetchMode,\n      body: params instanceof Array ? params.join(\"&\") : JSON.stringify(params),\n      headers: {\n        ...this.settings.xhrHeaders,\n        \"Content-Type\": this.settings.commitRequestDataType,\n      },\n      credentials: this.settings.xhrWithCredentials ? \"include\" : undefined,\n      keepalive: true,\n    });\n  }\n\n  /**\n   * Transforms the response from the LMS to a ResultObject\n   * @param {Response} response - The response from the LMS\n   * @param {Function} processListeners - Function to process event listeners\n   * @return {Promise<ResultObject>} - The transformed response\n   * @private\n   */\n  private async transformResponse(\n    response: Response,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    const result =\n      typeof this.settings.responseHandler === \"function\"\n        ? await this.settings.responseHandler(response)\n        : await response.json();\n\n    if (\n      response.status >= 200 &&\n      response.status <= 299 &&\n      (result.result === true || result.result === global_constants.SCORM_TRUE)\n    ) {\n      processListeners(\"CommitSuccess\");\n      if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n        result.errorCode = 0;\n      }\n    } else {\n      if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n        result.errorCode = this.error_codes.GENERAL;\n      }\n      processListeners(\"CommitError\", null, result.errorCode);\n    }\n    return result;\n  }\n\n  /**\n   * Updates the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: Settings): void {\n    this.settings = settings;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { stringMatches } from \"../utilities\";\nimport { IEventService } from \"../interfaces/services\";\n\n/**\n * Interface for a listener object\n */\ninterface Listener {\n  functionName: string;\n  CMIElement: string | null;\n  callback: Function;\n}\n\n/**\n * Type for parsed listener information\n */\ninterface ParsedListener {\n  functionName: string;\n  CMIElement: string | null;\n}\n\n/**\n * Service for handling event listeners and event processing\n */\nexport class EventService implements IEventService {\n  // Map of function names to listeners for faster lookups\n  private listenerMap: Map<string, Listener[]> = new Map();\n  // Total count of listeners for logging\n  private listenerCount = 0;\n  // Function to log API messages\n  private readonly apiLog: (\n    functionName: string,\n    message: string,\n    messageLevel: LogLevel,\n    CMIElement?: string,\n  ) => void;\n\n  /**\n   * Constructor for EventService\n   * @param {Function} apiLog - Function to log API messages\n   */\n  constructor(\n    apiLog: (\n      functionName: string,\n      message: string,\n      messageLevel: LogLevel,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.apiLog = apiLog;\n  }\n\n  /**\n   * Parses a listener name into its components\n   *\n   * @param {string} listenerName - The name of the listener\n   * @returns {ParsedListener|null} - The parsed listener information or null if invalid\n   */\n  private parseListenerName(listenerName: string): ParsedListener | null {\n    const listenerSplit = listenerName.split(\".\");\n    if (listenerSplit.length === 0) return null;\n\n    const functionName = listenerSplit[0];\n    let CMIElement = null;\n\n    if (listenerSplit.length > 1) {\n      CMIElement = listenerName.replace(`${functionName}.`, \"\");\n    }\n\n    return { functionName, CMIElement };\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener\n   * @param {Function} callback - The callback function to execute when the event occurs\n   */\n  on(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get or create the array for this function name\n      const listeners = this.listenerMap.get(functionName) ?? [];\n\n      // Add the new listener\n      listeners.push({\n        functionName,\n        CMIElement,\n        callback,\n      });\n\n      // Update the map and count\n      this.listenerMap.set(functionName, listeners);\n      this.listenerCount++;\n\n      this.apiLog(\n        \"on\",\n        `Added event listener: ${this.listenerCount}`,\n        LogLevelEnum.INFO,\n        functionName,\n      );\n    }\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener\n   *\n   * @param {string} listenerName - The name of the listener to remove\n   * @param {Function} callback - The callback function to remove\n   */\n  off(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get the listeners for this function name\n      const listeners = this.listenerMap.get(functionName);\n      if (!listeners) continue;\n\n      // Find the index of the listener to remove\n      const removeIndex = listeners.findIndex(\n        (obj) => obj.CMIElement === CMIElement && obj.callback === callback,\n      );\n\n      if (removeIndex !== -1) {\n        // Remove the listener\n        listeners.splice(removeIndex, 1);\n        this.listenerCount--;\n\n        // Update the map or remove the entry if empty\n        if (listeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, listeners);\n        }\n\n        this.apiLog(\n          \"off\",\n          `Removed event listener: ${this.listenerCount}`,\n          LogLevelEnum.INFO,\n          functionName,\n        );\n      }\n    }\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener to clear\n   */\n  clear(listenerName: string) {\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // If we have listeners for this function name\n      if (this.listenerMap.has(functionName)) {\n        const listeners = this.listenerMap.get(functionName)!;\n\n        // Filter out listeners that match the criteria\n        const newListeners = listeners.filter((obj) => obj.CMIElement !== CMIElement);\n\n        // Update the count and map\n        this.listenerCount -= listeners.length - newListeners.length;\n\n        if (newListeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, newListeners);\n        }\n      }\n    }\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created\n   *\n   * @param {string} functionName - The name of the function that triggered the event\n   * @param {string} CMIElement - The CMI element that was affected\n   * @param {any} value - The value that was set\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this.apiLog(functionName, value, LogLevelEnum.INFO, CMIElement);\n\n    // Get listeners for this function name\n    const listeners = this.listenerMap.get(functionName);\n    if (!listeners) return;\n\n    for (const listener of listeners) {\n      const listenerHasCMIElement = !!listener.CMIElement;\n      let CMIElementsMatch = false;\n\n      // Check if CMI elements match\n      if (CMIElement && listener.CMIElement) {\n        if (listener.CMIElement.endsWith(\"*\")) {\n          // For wildcard matches, check if the CMI element starts with the prefix\n          const prefix = listener.CMIElement.slice(0, -1);\n          CMIElementsMatch = CMIElement.startsWith(prefix);\n        } else {\n          // For exact matches, compare the strings directly\n          CMIElementsMatch = listener.CMIElement === CMIElement;\n        }\n      }\n\n      // If the listener matches, call the callback\n      if (!listenerHasCMIElement || CMIElementsMatch) {\n        this.apiLog(\n          \"processListeners\",\n          `Processing listener: ${listener.functionName}`,\n          LogLevelEnum.DEBUG,\n          CMIElement,\n        );\n\n        // Handle special event types\n        if (functionName.startsWith(\"Sequence\")) {\n          // For sequence events, pass the target as the first argument\n          listener.callback(value);\n        } else if (functionName === \"CommitError\") {\n          // For commit error events, pass the error code\n          listener.callback(value);\n        } else if (functionName === \"CommitSuccess\") {\n          // For commit success events, pass no arguments\n          listener.callback();\n        } else {\n          // For regular events, pass CMIElement and value\n          listener.callback(CMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Resets the event service by clearing all listeners\n   */\n  reset() {\n    this.listenerMap.clear();\n    this.listenerCount = 0;\n  }\n}\n","import { CommitObject, LogLevel } from \"../types/api_types\";\nimport { StringKeyMap, unflatten } from \"../utilities\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { BaseCMI } from \"../cmi/common/base_cmi\";\nimport { ISerializationService } from \"../interfaces/services\";\n\n/**\n * Service for handling data serialization and deserialization in scorm-again\n */\nexport class SerializationService implements ISerializationService {\n  /**\n   * Loads CMI data from a flattened JSON object with special handling for arrays and ordering.\n   *\n   * This method implements a complex algorithm for loading flattened JSON data into the CMI\n   * object structure. It handles several key challenges:\n   *\n   * 1. Ordering dependencies: Some CMI elements (like interactions and objectives) must be\n   *    loaded in a specific order to ensure proper initialization.\n   *\n   * 2. Array handling: Interactions and objectives are stored as arrays, and their properties\n   *    must be loaded in the correct order (e.g., 'id' and 'type' must be set before other properties).\n   *\n   * 3. Unflattening: The method converts flattened dot notation (e.g., \"cmi.objectives.0.id\")\n   *    back into nested objects before loading.\n   *\n   * The algorithm works by:\n   * - Categorizing keys into interactions, objectives, and other properties\n   * - Sorting interactions to prioritize 'id' and 'type' fields within each index\n   * - Sorting objectives to prioritize 'id' fields within each index\n   * - Processing each category in order: interactions, objectives, then other properties\n   *\n   * @param {StringKeyMap} json - The flattened JSON object with dot notation keys\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   *\n   * @param setStartingData\n   * @example\n   * // Example of flattened JSON input:\n   * // {\n   * //   \"cmi.objectives.0.id\": \"obj1\",\n   * //   \"cmi.objectives.0.score.raw\": \"80\",\n   * //   \"cmi.interactions.0.id\": \"int1\",\n   * //   \"cmi.interactions.0.type\": \"choice\",\n   * //   \"cmi.interactions.0.result\": \"correct\"\n   * // }\n   */\n  loadFromFlattenedJSON(\n    json: StringKeyMap,\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromFlattenedJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    const int_pattern = /^(cmi\\.interactions\\.)(\\d+)\\.(.*)$/;\n    const obj_pattern = /^(cmi\\.objectives\\.)(\\d+)\\.(.*)$/;\n\n    // Extract and categorize keys for better sorting\n    const interactions: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const objectives: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const others: { key: string; value: any }[] = [];\n\n    // Categorize keys\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key)) {\n        const intMatch = key.match(int_pattern);\n        if (intMatch) {\n          interactions.push({\n            key,\n            value: json[key],\n            index: Number(intMatch[2]),\n            field: intMatch[3],\n          });\n          continue;\n        }\n\n        const objMatch = key.match(obj_pattern);\n        if (objMatch) {\n          objectives.push({\n            key,\n            value: json[key],\n            index: Number(objMatch[2]),\n            field: objMatch[3],\n          });\n          continue;\n        }\n\n        others.push({ key, value: json[key] });\n      }\n    }\n\n    // Sort interactions: first by index, then prioritize 'id' and 'type' fields\n    interactions.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id and type\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n      if (a.field === \"type\") return -1;\n      if (b.field === \"type\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort objectives: first by index, then prioritize 'id' field\n    objectives.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort other keys alphabetically\n    others.sort((a, b) => a.key.localeCompare(b.key));\n\n    // Process all items in the correct order\n    const processItems = (items: { key: string; value: any }[]) => {\n      items.forEach((item) => {\n        const obj: StringKeyMap = {};\n        obj[item.key] = item.value;\n        this.loadFromJSON(\n          unflatten(obj) as StringKeyMap,\n          CMIElement,\n          setCMIValue,\n          isNotInitialized,\n          setStartingData,\n        );\n      });\n    };\n\n    // Process in order: interactions, objectives, others\n    processItems(interactions);\n    processItems(objectives);\n    processItems(others);\n  }\n\n  /**\n   * Loads CMI data from a nested JSON object with recursive traversal.\n   *\n   * This method implements a recursive algorithm for loading nested JSON data into the CMI\n   * object structure. It handles several key aspects:\n   *\n   * 1. Recursive traversal: The method recursively traverses the nested JSON structure,\n   *    building CMI element paths as it goes (e.g., \"cmi.core.student_id\").\n   *\n   * 2. Type-specific handling: Different data types are handled differently:\n   *    - Arrays: Each array element is processed individually with its index in the path\n   *    - Objects: Recursively processed with updated path\n   *    - Primitives: Set directly using setCMIValue\n   *\n   * 3. Initialization check: Ensures the method is only called before API initialization\n   *\n   * 4. Starting data storage: Stores the original JSON data for potential future use\n   *\n   * The algorithm works by:\n   * - First storing the complete JSON object via setStartingData\n   * - Iterating through each property in the JSON object\n   * - For each property, determining its type and handling it accordingly\n   * - Building the CMI element path as it traverses the structure\n   * - Setting values at the appropriate paths using setCMIValue\n   *\n   * @param {{[key: string]: any}} json - The nested JSON object to load\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value at a specific path\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   * @param {Function} setStartingData - Function to store the original JSON data\n   *\n   * @example\n   * // Example of nested JSON input:\n   * // {\n   * //   \"core\": {\n   * //     \"student_id\": \"12345\",\n   * //     \"student_name\": \"John Doe\"\n   * //   },\n   * //   \"objectives\": [\n   * //     { \"id\": \"obj1\", \"score\": { \"raw\": 80 } },\n   * //     { \"id\": \"obj2\", \"score\": { \"raw\": 90 } }\n   * //   ]\n   * // }\n   */\n  loadFromJSON(\n    json: { [key: string]: any },\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    CMIElement = CMIElement !== undefined ? CMIElement : \"cmi\";\n\n    setStartingData(json);\n\n    // could this be refactored down to flatten(json) then setCMIValue on each?\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key) && json[key]) {\n        const currentCMIElement = (CMIElement ? CMIElement + \".\" : \"\") + key;\n        const value = json[key];\n\n        if (value.constructor === Array) {\n          for (let i = 0; i < value.length; i++) {\n            if (value[i]) {\n              const item = value[i];\n              const tempCMIElement = `${currentCMIElement}.${i}`;\n\n              if (item.constructor === Object) {\n                this.loadFromJSON(\n                  item,\n                  tempCMIElement,\n                  setCMIValue,\n                  isNotInitialized,\n                  setStartingData,\n                );\n              } else {\n                setCMIValue(tempCMIElement, item);\n              }\n            }\n          }\n        } else if (value.constructor === Object) {\n          this.loadFromJSON(\n            value,\n            currentCMIElement,\n            setCMIValue,\n            isNotInitialized,\n            setStartingData,\n          );\n        } else {\n          setCMIValue(currentCMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Render the CMI object to JSON for sending to an LMS.\n   *\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {string}\n   */\n  renderCMIToJSONString(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): string {\n    // Do we want/need to return fields that have no set value?\n    if (sendFullCommit) {\n      return JSON.stringify({ cmi });\n    }\n    return JSON.stringify({ cmi }, (k, v) => (v === undefined ? null : v), 2);\n  }\n\n  /**\n   * Returns a JS object representing the current cmi\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {object}\n   */\n  renderCMIToJSONObject(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): StringKeyMap {\n    // Revert to the original implementation to maintain compatibility with tests\n    return JSON.parse(this.renderCMIToJSONString(cmi, sendFullCommit));\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} alwaysSendTotalTime - Whether to always send total time\n   * @param {boolean|Function} renderCommonCommitFields - Whether to render common commit fields\n   * @param {Function} renderCommitObject - Function to render commit object\n   * @param {Function} renderCommitCMI - Function to render commit CMI\n   * @param {LogLevel} apiLogLevel - The API log level\n   * @return {CommitObject|StringKeyMap|Array<any>}\n   */\n  getCommitObject(\n    terminateCommit: boolean,\n    alwaysSendTotalTime: boolean,\n    renderCommonCommitFields: boolean | ((commitObject: CommitObject) => boolean),\n    renderCommitObject: (terminateCommit: boolean) => CommitObject,\n    renderCommitCMI: (terminateCommit: boolean) => StringKeyMap | Array<any>,\n    apiLogLevel: LogLevel,\n  ): CommitObject | StringKeyMap | Array<any> {\n    const shouldTerminateCommit = terminateCommit || alwaysSendTotalTime;\n    const commitObject = renderCommonCommitFields\n      ? renderCommitObject(shouldTerminateCommit)\n      : renderCommitCMI(shouldTerminateCommit);\n\n    if ([LogLevelEnum.DEBUG, \"1\", 1, \"DEBUG\"].includes(apiLogLevel)) {\n      console.debug(\"Commit (terminated: \" + (terminateCommit ? \"yes\" : \"no\") + \"): \");\n      console.debug(commitObject);\n    }\n    return commitObject;\n  }\n}\n","type APIError = {\n  errorCode: number;\n  errorMessage: string;\n  detailedMessage: string;\n};\n\nexport class BaseScormValidationError extends Error {\n  constructor(CMIElement: string, errorCode: number) {\n    super(`${CMIElement} : ${errorCode.toString()}`);\n    this._errorCode = errorCode;\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, BaseScormValidationError.prototype);\n  }\n\n  private readonly _errorCode: number;\n\n  /**\n   * Getter for _errorCode\n   * @return {number}\n   */\n  get errorCode(): number {\n    return this._errorCode;\n  }\n}\n\n/**\n * Base Validation Exception\n */\nexport class ValidationError extends BaseScormValidationError implements APIError {\n  /**\n   * Constructor to take in an error message and code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   * @param {string} errorMessage\n   * @param {string} detailedMessage\n   */\n  constructor(\n    CMIElement: string,\n    errorCode: number,\n    errorMessage: string,\n    detailedMessage?: string,\n  ) {\n    super(CMIElement, errorCode);\n    this.message = `${CMIElement} : ${errorMessage}`;\n    this._errorMessage = errorMessage;\n    if (detailedMessage) {\n      this._detailedMessage = detailedMessage;\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  private readonly _errorMessage: string;\n  private readonly _detailedMessage: string = \"\";\n\n  /**\n   * Getter for _errorMessage\n   * @return {string}\n   */\n  get errorMessage(): string {\n    return this._errorMessage;\n  }\n\n  /**\n   * Getter for _detailedMessage\n   * @return {string}\n   */\n  get detailedMessage(): string {\n    return this._detailedMessage;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ILoggingService } from \"../interfaces/services\";\nimport { defaultLogHandler } from \"../constants/default_settings\";\n\n/**\n * Centralized logging service implemented as a singleton\n * Provides methods for logging at different levels and configuring the log level\n */\nexport class LoggingService implements ILoggingService {\n  private static _instance: LoggingService;\n  private _logLevel: LogLevel = LogLevelEnum.ERROR;\n  private _logHandler: (messageLevel: LogLevel, logMessage: string) => void;\n\n  /**\n   * Private constructor to prevent direct instantiation\n   */\n  private constructor() {\n    // Default log handler uses console methods based on log level\n    this._logHandler = defaultLogHandler;\n  }\n\n  /**\n   * Get the singleton instance of LoggingService\n   *\n   * @returns {LoggingService} The singleton instance\n   */\n  public static getInstance(): LoggingService {\n    if (!LoggingService._instance) {\n      LoggingService._instance = new LoggingService();\n    }\n    return LoggingService._instance;\n  }\n\n  /**\n   * Set the log level\n   *\n   * @param {LogLevel} level - The log level to set\n   */\n  public setLogLevel(level: LogLevel): void {\n    this._logLevel = level;\n  }\n\n  /**\n   * Get the current log level\n   *\n   * @returns {LogLevel} The current log level\n   */\n  public getLogLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  /**\n   * Set a custom log handler\n   *\n   * @param {Function} handler - The function to handle log messages\n   */\n  public setLogHandler(handler: (messageLevel: LogLevel, logMessage: string) => void): void {\n    this._logHandler = handler;\n  }\n\n  /**\n   * Log a message if the message level is greater than or equal to the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @param {string} logMessage - The message to log\n   */\n  public log(messageLevel: LogLevel, logMessage: string): void {\n    if (this.shouldLog(messageLevel)) {\n      this._logHandler(messageLevel, logMessage);\n    }\n  }\n\n  /**\n   * Log a message at ERROR level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public error(logMessage: string): void {\n    this.log(LogLevelEnum.ERROR, logMessage);\n  }\n\n  /**\n   * Log a message at WARN level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public warn(logMessage: string): void {\n    this.log(LogLevelEnum.WARN, logMessage);\n  }\n\n  /**\n   * Log a message at INFO level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public info(logMessage: string): void {\n    this.log(LogLevelEnum.INFO, logMessage);\n  }\n\n  /**\n   * Log a message at DEBUG level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public debug(logMessage: string): void {\n    this.log(LogLevelEnum.DEBUG, logMessage);\n  }\n\n  /**\n   * Determine if a message should be logged based on its level and the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @returns {boolean} Whether the message should be logged\n   */\n  private shouldLog(messageLevel: LogLevel): boolean {\n    // Convert string levels to numbers for comparison\n    const numericMessageLevel = this.getNumericLevel(messageLevel);\n    const numericLogLevel = this.getNumericLevel(this._logLevel);\n\n    return numericMessageLevel >= numericLogLevel;\n  }\n\n  /**\n   * Convert a log level to its numeric value\n   *\n   * @param {LogLevel} level - The log level to convert\n   * @returns {number} The numeric value of the log level\n   */\n  private getNumericLevel(level: LogLevel): number {\n    if (level === undefined) return LogLevelEnum.NONE;\n\n    if (typeof level === \"number\") return level;\n\n    switch (level) {\n      case \"1\":\n      case \"DEBUG\":\n        return LogLevelEnum.DEBUG;\n      case \"2\":\n      case \"INFO\":\n        return LogLevelEnum.INFO;\n      case \"3\":\n      case \"WARN\":\n        return LogLevelEnum.WARN;\n      case \"4\":\n      case \"ERROR\":\n        return LogLevelEnum.ERROR;\n      case \"5\":\n      case \"NONE\":\n        return LogLevelEnum.NONE;\n      default:\n        return LogLevelEnum.ERROR; // Default to ERROR if unknown\n    }\n  }\n}\n\n// Export a function to get the singleton instance\nexport function getLoggingService(): LoggingService {\n  return LoggingService.getInstance();\n}\n","import { LogLevelEnum } from \"../constants/enums\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { ValidationError } from \"../exceptions\";\nimport { IErrorHandlingService, ILoggingService } from \"../interfaces/services\";\nimport { getLoggingService } from \"./LoggingService\";\n\n/**\n * Service for handling SCORM errors\n */\nexport class ErrorHandlingService implements IErrorHandlingService {\n  private _lastErrorCode: string = \"0\";\n  private readonly _errorCodes: ErrorCode;\n  private readonly _apiLog: (\n    functionName: string,\n    message: string,\n    logLevel?: LogLevelEnum,\n    CMIElement?: string,\n  ) => void;\n  private readonly _getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string;\n  private readonly _loggingService: ILoggingService;\n\n  /**\n   * Constructor for ErrorHandlingService\n   *\n   * @param {ErrorCode} errorCodes - The error codes object\n   * @param {Function} apiLog - Function for logging API calls\n   * @param {Function} getLmsErrorMessageDetails - Function for getting error message details\n   * @param {ILoggingService} loggingService - Optional logging service instance\n   */\n  constructor(\n    errorCodes: ErrorCode,\n    apiLog: (\n      functionName: string,\n      message: string,\n      logLevel?: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n    loggingService?: ILoggingService,\n  ) {\n    this._errorCodes = errorCodes;\n    this._apiLog = apiLog;\n    this._getLmsErrorMessageDetails = getLmsErrorMessageDetails;\n    this._loggingService = loggingService || getLoggingService();\n  }\n\n  /**\n   * Get the last error code\n   *\n   * @return {string} - The last error code\n   */\n  get lastErrorCode(): string {\n    return this._lastErrorCode;\n  }\n\n  /**\n   * Set the last error code\n   *\n   * @param {string} errorCode - The error code to set\n   */\n  set lastErrorCode(errorCode: string) {\n    this._lastErrorCode = errorCode;\n  }\n\n  /**\n   * Throws a SCORM error\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The error number\n   * @param {string} message - The error message\n   * @throws {ValidationError} - If throwException is true, throws a ValidationError\n   */\n  throwSCORMError(CMIElement: string, errorNumber: number, message?: string): void {\n    if (!message) {\n      message = this._getLmsErrorMessageDetails(errorNumber, true);\n    }\n\n    // Format a more descriptive error message with context\n    const formattedMessage = `SCORM Error ${errorNumber}: ${message}${CMIElement ? ` [Element: ${CMIElement}]` : \"\"}`;\n\n    // Log using both the API log and the logging service for consistency\n    this._apiLog(\"throwSCORMError\", errorNumber + \": \" + message, LogLevelEnum.ERROR, CMIElement);\n    this._loggingService.error(formattedMessage);\n\n    this._lastErrorCode = String(errorNumber);\n  }\n\n  /**\n   * Clears the last SCORM error code on success.\n   *\n   * @param {string} success - Whether the operation was successful\n   */\n  clearSCORMError(success: string): void {\n    if (success !== undefined && success !== global_constants.SCORM_FALSE) {\n      this._lastErrorCode = \"0\";\n    }\n  }\n\n  /**\n   * Handles exceptions that occur when accessing or setting CMI values.\n   *\n   * This method provides centralized error handling for exceptions that occur during\n   * CMI data operations. It differentiates between different types of errors and\n   * handles them appropriately:\n   *\n   * 1. ValidationError: These are expected errors from the validation system that\n   *    indicate a specific SCORM error condition (like invalid data format or range).\n   *    For these errors, the method:\n   *    - Sets the lastErrorCode to the error code from the ValidationError\n   *    - Returns SCORM_FALSE to indicate failure to the caller\n   *\n   * 2. Standard JavaScript Error: For general JavaScript errors (like TypeError,\n   *    ReferenceError, etc.), the method:\n   *    - Logs the error message with stack trace to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * 3. Unknown exceptions: For any other type of exception that doesn't match the\n   *    above categories, the method:\n   *    - Logs the entire exception object to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * This method is critical for maintaining SCORM compliance by ensuring that\n   * all errors are properly translated into the appropriate SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {ValidationError|Error|unknown} e - The exception that was thrown\n   * @param {string} returnValue - The default return value (typically an empty string)\n   * @return {string} - Either the original returnValue or SCORM_FALSE if an error occurred\n   *\n   * @example\n   * try {\n   *   const value = getCMIValue(\"cmi.core.score.raw\");\n   *   return value;\n   * } catch (e) {\n   *   return handleValueAccessException(e, \"\");\n   * }\n   */\n  handleValueAccessException(\n    CMIElement: string,\n    e: Error | ValidationError | unknown,\n    returnValue: string,\n  ): string {\n    if (e instanceof ValidationError) {\n      const validationError = e as ValidationError;\n      this._lastErrorCode = String(validationError.errorCode);\n\n      // Log validation errors at WARN level with context\n      const errorMessage = `Validation Error ${validationError.errorCode}: ${validationError.message} [Element: ${CMIElement}]`;\n      this._loggingService.warn(errorMessage);\n\n      returnValue = global_constants.SCORM_FALSE;\n    } else if (e instanceof Error) {\n      // For standard JS errors, include the stack trace and error type\n      const errorType = e.constructor.name; // Gets the error type (e.g., TypeError, ReferenceError)\n      const errorMessage = `${errorType}: ${e.message} [Element: ${CMIElement}]`;\n      const stackTrace = e.stack || \"\";\n\n      // Log the detailed error with stack trace\n      this._loggingService.error(`${errorMessage}\\n${stackTrace}`);\n\n      this.throwSCORMError(CMIElement, this._errorCodes.GENERAL, `${errorType}: ${e.message}`);\n    } else {\n      // For unknown errors, provide as much context as possible\n      const errorMessage = `Unknown error occurred while accessing [Element: ${CMIElement}]`;\n\n      this._loggingService.error(errorMessage);\n\n      try {\n        // Try to stringify the error object for more details\n        const errorDetails = JSON.stringify(e);\n        this._loggingService.error(`Error details: ${errorDetails}`);\n      } catch (jsonError) {\n        // If stringify fails, log that we couldn't get more details\n        this._loggingService.error(\"Could not stringify error object for details\");\n      }\n\n      this.throwSCORMError(CMIElement, this._errorCodes.GENERAL, \"Unknown error\");\n    }\n    return returnValue;\n  }\n\n  /**\n   * Get the error codes object\n   *\n   * @return {ErrorCode} - The error codes object\n   */\n  get errorCodes(): ErrorCode {\n    return this._errorCodes;\n  }\n}\n\n// Export a factory function to create the service\nexport function createErrorHandlingService(\n  errorCodes: ErrorCode,\n  apiLog: (\n    functionName: string,\n    message: string,\n    logLevel?: LogLevelEnum,\n    CMIElement?: string,\n  ) => void,\n  getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n  loggingService?: ILoggingService,\n): ErrorHandlingService {\n  return new ErrorHandlingService(errorCodes, apiLog, getLmsErrorMessageDetails, loggingService);\n}\n","/**\n * Base class for API cmi objects\n */\nexport abstract class BaseCMI {\n  jsonString? = false;\n  protected readonly _cmi_element: string;\n  protected _initialized = false;\n  private _start_time: number | undefined;\n\n  /**\n   * Constructor for BaseCMI\n   * @param {string} cmi_element\n   */\n  constructor(cmi_element: string) {\n    this._cmi_element = cmi_element;\n  }\n\n  /**\n   * Getter for _initialized\n   * @return {boolean}\n   */\n  get initialized(): boolean {\n    return this._initialized;\n  }\n\n  /**\n   * Getter for _start_time\n   * @return {number | undefined}\n   */\n  get start_time(): number | undefined {\n    return this._start_time;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize(): void {\n    this._initialized = true;\n  }\n\n  /**\n   * Called when the player should override the 'session_time' provided by\n   * the module\n   */\n  setStartTime(): void {\n    this._start_time = new Date().getTime();\n  }\n\n  abstract reset(): void;\n}\n\n/**\n * Base class for cmi root objects\n */\nexport abstract class BaseRootCMI extends BaseCMI {\n  abstract getCurrentTotalTime(): string;\n}\n","export type ErrorCode = {\n  [key: string]: number;\n};\n\nexport const global_errors: ErrorCode = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nexport const scorm12_errors: ErrorCode = {\n  ...global_errors,\n  RETRIEVE_BEFORE_INIT: 301,\n  STORE_BEFORE_INIT: 301,\n  COMMIT_BEFORE_INIT: 301,\n  ARGUMENT_ERROR: 201,\n  CHILDREN_ERROR: 202,\n  COUNT_ERROR: 203,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 401,\n  VALUE_NOT_INITIALIZED: 301,\n  INVALID_SET_VALUE: 402,\n  READ_ONLY_ELEMENT: 403,\n  WRITE_ONLY_ELEMENT: 404,\n  TYPE_MISMATCH: 405,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n\nexport const scorm2004_errors: ErrorCode = {\n  ...global_errors,\n  INITIALIZATION_FAILED: 102,\n  INITIALIZED: 103,\n  TERMINATED: 104,\n  TERMINATION_FAILURE: 111,\n  TERMINATION_BEFORE_INIT: 112,\n  MULTIPLE_TERMINATIONS: 113,\n  RETRIEVE_BEFORE_INIT: 122,\n  RETRIEVE_AFTER_TERM: 123,\n  STORE_BEFORE_INIT: 132,\n  STORE_AFTER_TERM: 133,\n  COMMIT_BEFORE_INIT: 142,\n  COMMIT_AFTER_TERM: 143,\n  ARGUMENT_ERROR: 201,\n  GENERAL_GET_FAILURE: 301,\n  GENERAL_SET_FAILURE: 351,\n  GENERAL_COMMIT_FAILURE: 391,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 402,\n  VALUE_NOT_INITIALIZED: 403,\n  READ_ONLY_ELEMENT: 404,\n  WRITE_ONLY_ELEMENT: 405,\n  TYPE_MISMATCH: 406,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n","import { BaseCMI } from \"./base_cmi\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Base class for cmi *.n objects\n */\nexport class CMIArray extends BaseCMI {\n  private readonly _errorCode: number;\n  private readonly _errorClass: typeof BaseScormValidationError;\n  private readonly __children: string;\n  public childArray: any[];\n\n  /**\n   * Constructor cmi *.n arrays\n   * @param {object} params\n   */\n  constructor(params: {\n    CMIElement: string;\n    children: string;\n    errorCode?: number;\n    errorClass?: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n    this.__children = params.children;\n    this._errorCode = params.errorCode || scorm12_errors.GENERAL;\n    this._errorClass = params.errorClass || BaseScormValidationError;\n    this.childArray = [];\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(wipe: boolean = false): void {\n    this._initialized = false;\n    if (wipe) {\n      this.childArray = [];\n    } else {\n      // Reset all children\n      for (let i = 0; i < this.childArray.length; i++) {\n        this.childArray[i].reset();\n      }\n    }\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this._errorClass(this._cmi_element + \"._children\", this._errorCode);\n  }\n\n  /**\n   * Getter for _count\n   * @return {number}\n   */\n  get _count(): number {\n    return this.childArray.length;\n  }\n\n  /**\n   * Setter for _count. Just throws an error.\n   * @param {number} _count\n   */\n  set _count(_count: number) {\n    throw new this._errorClass(this._cmi_element + \"._count\", this._errorCode);\n  }\n\n  /**\n   * toJSON for *.n arrays\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result: { [key: string]: any } = {};\n    for (let i = 0; i < this.childArray.length; i++) {\n      result[i + \"\"] = this.childArray[i];\n    }\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { ErrorCode } from \"./constants/error_codes\";\nimport { global_constants } from \"./constants/api_constants\";\nimport { formatMessage, StringKeyMap, stringMatches } from \"./utilities\";\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport { CommitObject, LogLevel, ResultObject, Settings } from \"./types/api_types\";\nimport { DefaultSettings } from \"./constants/default_settings\";\nimport { IBaseAPI } from \"./interfaces/IBaseAPI\";\nimport { ScheduledCommit } from \"./helpers/scheduled_commit\";\nimport { LogLevelEnum } from \"./constants/enums\";\nimport { HttpService } from \"./services/HttpService\";\nimport { EventService } from \"./services/EventService\";\nimport { SerializationService } from \"./services/SerializationService\";\nimport { createErrorHandlingService } from \"./services/ErrorHandlingService\";\nimport { getLoggingService } from \"./services/LoggingService\";\nimport {\n  ICMIDataService,\n  IErrorHandlingService,\n  IEventService,\n  IHttpService,\n  ILoggingService,\n  ISerializationService\n} from \"./interfaces/services\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { ValidationError } from \"./exceptions\";\n\n/**\n * Base API class for AICC, SCORM 1.2, and SCORM 2004. Should be considered\n * abstract, and never initialized on its own.\n */\nexport default abstract class BaseAPI implements IBaseAPI {\n  private _timeout?: ScheduledCommit;\n  private readonly _error_codes: ErrorCode;\n  private _settings: Settings = DefaultSettings;\n  private readonly _httpService: IHttpService;\n  private _eventService: IEventService;\n  private _serializationService: ISerializationService;\n  private readonly _errorHandlingService: IErrorHandlingService;\n  private readonly _loggingService: ILoggingService;\n\n  /**\n   * Constructor for Base API class. Sets some shared API fields, as well as\n   * sets up options for the API.\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Settings} settings - Optional settings for the API\n   * @param {IHttpService} httpService - Optional HTTP service instance\n   * @param {IEventService} eventService - Optional Event service instance\n   * @param {ISerializationService} serializationService - Optional Serialization service instance\n   * @param {ICMIDataService} cmiDataService - Optional CMI Data service instance\n   * @param {IErrorHandlingService} errorHandlingService - Optional Error Handling service instance\n   * @param {ILoggingService} loggingService - Optional Logging service instance\n   */\n  protected constructor(\n    error_codes: ErrorCode,\n    settings?: Settings,\n    httpService?: IHttpService,\n    eventService?: IEventService,\n    serializationService?: ISerializationService,\n    cmiDataService?: ICMIDataService,\n    errorHandlingService?: IErrorHandlingService,\n    loggingService?: ILoggingService,\n  ) {\n    if (new.target === BaseAPI) {\n      throw new TypeError(\"Cannot construct BaseAPI instances directly\");\n    }\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n\n    this._error_codes = error_codes;\n\n    if (settings) {\n      this.settings = settings;\n    }\n    this.apiLogLevel = this.settings.logLevel;\n    this.selfReportSessionTime = this.settings.selfReportSessionTime;\n\n    if (this.apiLogLevel === undefined) {\n      this.apiLogLevel = LogLevelEnum.NONE;\n    }\n\n    // Initialize and configure LoggingService\n    this._loggingService = loggingService || getLoggingService();\n    this._loggingService.setLogLevel(this.apiLogLevel);\n\n    // If settings include a custom onLogMessage function, use it as the log handler\n    if (this.settings.onLogMessage) {\n      this._loggingService.setLogHandler(this.settings.onLogMessage);\n    }\n\n    // Initialize HTTP service\n    this._httpService = httpService || new HttpService(this.settings, this._error_codes);\n\n    // Initialize Event service\n    this._eventService =\n      eventService ||\n      new EventService((functionName, message, level, element) =>\n        this.apiLog(functionName, message, level, element),\n      );\n\n    // Initialize Serialization service\n    this._serializationService = serializationService || new SerializationService();\n\n    // Initialize Error Handling service\n    this._errorHandlingService =\n      errorHandlingService ||\n      createErrorHandlingService(\n        this._error_codes,\n        (functionName, message, level, element) =>\n          this.apiLog(functionName, message, level, element),\n        (errorNumber, detail) => this.getLmsErrorMessageDetails(errorNumber, detail),\n      );\n  }\n\n  public abstract cmi: BaseCMI;\n  public startingData?: StringKeyMap;\n\n  public currentState: number;\n  public apiLogLevel: LogLevel;\n  public selfReportSessionTime: boolean;\n\n  /**\n   * Get the last error code\n   * @return {string}\n   */\n  get lastErrorCode(): string {\n    return this._errorHandlingService?.lastErrorCode ?? \"0\";\n  }\n\n  /**\n   * Set the last error code\n   * @param {string} errorCode\n   */\n  set lastErrorCode(errorCode: string) {\n    if (this._errorHandlingService) {\n      this._errorHandlingService.lastErrorCode = errorCode;\n    }\n  }\n\n  /**\n   * Reset the API to its initial state.\n   * This method clears all current data and resets the API to an uninitialized state.\n   * It can optionally accept new settings to configure the API after reset.\n   *\n   * @param {Settings} settings - Optional new settings to apply after reset\n   */\n  abstract reset(settings?: Settings): void;\n\n  /**\n   * Common reset method for all APIs. New settings are merged with the existing settings.\n   * @param {Settings} settings\n   * @protected\n   */\n  commonReset(settings?: Settings): void {\n    this.apiLog(\"reset\", \"Called\", LogLevelEnum.INFO);\n\n    this.settings = { ...this.settings, ...settings };\n\n    this.clearScheduledCommit();\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n    this.lastErrorCode = \"0\";\n    this._eventService.reset();\n    this.startingData = undefined;\n  }\n\n  /**\n   * Initialize the API\n   * @param {string} callbackName\n   * @param {string} initializeMessage\n   * @param {string} terminationMessage\n   * @return {string}\n   */\n  initialize(\n    callbackName: string,\n    initializeMessage?: string,\n    terminationMessage?: string,\n  ): string {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.isInitialized()) {\n      this.throwSCORMError(\"api\", this._error_codes.INITIALIZED, initializeMessage);\n    } else if (this.isTerminated()) {\n      this.throwSCORMError(\"api\", this._error_codes.TERMINATED, terminationMessage);\n    } else {\n      if (this.selfReportSessionTime) {\n        this.cmi.setStartTime();\n      }\n\n      this.currentState = global_constants.STATE_INITIALIZED;\n      this.lastErrorCode = \"0\";\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Initialize the LMS API\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsInitialize(): string;\n\n  /**\n   * Finish the current LMS API session\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsFinish(): string;\n\n  /**\n   * Get the value of a CMI element from the LMS\n   * @param {string} CMIElement - The CMI element to get the value of\n   * @return {string} The value of the CMI element\n   */\n  abstract lmsGetValue(CMIElement: string): string;\n\n  /**\n   * Set the value of a CMI element in the LMS\n   * @param {string} CMIElement - The CMI element to set the value of\n   * @param {any} value - The value to set\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsSetValue(CMIElement: string, value: any): string;\n\n  /**\n   * Commit the current data to the LMS\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsCommit(): string;\n\n  /**\n   * Get the last error code from the LMS\n   * @return {string} The last error code\n   */\n  abstract lmsGetLastError(): string;\n\n  /**\n   * Get the error string for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get the string for\n   * @return {string} The error string\n   */\n  abstract lmsGetErrorString(CMIErrorCode: string | number): string;\n\n  /**\n   * Get diagnostic information for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get diagnostic information for\n   * @return {string} The diagnostic information\n   */\n  abstract lmsGetDiagnostic(CMIErrorCode: string | number): string;\n\n  /**\n   * Abstract method for validating that a response is correct.\n   * This method is used to validate the format and content of a response\n   * before it is set in the CMI data model.\n   *\n   * @param {string} _CMIElement - The CMI element path to validate\n   * @param {any} _value - The value to validate\n   * @throws {Error} If the response format is invalid\n   */\n  abstract validateCorrectResponse(_CMIElement: string, _value: any): void;\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   * APIs that inherit BaseAPI should override this method.\n   *\n   * @param {string} _CMIElement - unused\n   * @param {*} _value - unused\n   * @param {boolean} _foundFirstIndex - unused\n   * @return {BaseCMI|null}\n   * @abstract\n   */\n  abstract getChildElement(\n    _CMIElement: string,\n    _value: any,\n    _foundFirstIndex: boolean,\n  ): BaseCMI | null;\n\n  /**\n   * Attempts to store the data to the LMS, logs data if no LMS configured\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _calculateTotalTime\n   * @return {ResultObject}\n   * @abstract\n   */\n  abstract storeData(_calculateTotalTime: boolean): Promise<ResultObject>;\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _terminateCommit\n   * @return {StringKeyMap|Array}\n   * @abstract\n   */\n  abstract renderCommitCMI(_terminateCommit: boolean): StringKeyMap | Array<string>;\n\n  /**\n   * Render the commit object to the shortened format for LMS commit.\n   * This method transforms the CMI data into a format suitable for sending to the LMS.\n   * It is called during the commit process to prepare the data for transmission.\n   *\n   * @param {boolean} _terminateCommit - Whether this commit is part of the termination process\n   * @return {CommitObject} A formatted object containing the data to be sent to the LMS\n   * @example\n   * // Example of a commit object structure\n   * {\n   *   method: \"POST\",\n   *   params: {\n   *     cmi: { ... },\n   *     finishState: \"COMPLETED\"\n   *   }\n   * }\n   */\n  abstract renderCommitObject(_terminateCommit: boolean): CommitObject;\n\n  /**\n   * Logging for all SCORM actions\n   *\n   * @param {string} functionName\n   * @param {string} logMessage\n   * @param {number} messageLevel\n   * @param {string} CMIElement\n   */\n  apiLog(functionName: string, logMessage: string, messageLevel: LogLevel, CMIElement?: string) {\n    logMessage = formatMessage(functionName, logMessage, CMIElement);\n\n    if (messageLevel >= this.apiLogLevel) {\n      // Use the injected LoggingService\n      this._loggingService.log(messageLevel, logMessage);\n    }\n  }\n\n  /**\n   * Getter for _error_codes\n   * @return {ErrorCode}\n   */\n  get error_codes(): ErrorCode {\n    return this._error_codes;\n  }\n\n  /**\n   * Getter for _settings\n   * @return {Settings}\n   */\n  get settings(): Settings {\n    return this._settings;\n  }\n\n  /**\n   * Setter for _settings\n   * @param {Settings} settings\n   */\n  set settings(settings: Settings) {\n    const previousSettings = this._settings;\n    this._settings = { ...this._settings, ...settings };\n\n    // Update HTTP service settings\n    this._httpService?.updateSettings(this._settings);\n\n    // Update log level if it changed\n    if (settings.logLevel !== undefined && settings.logLevel !== previousSettings.logLevel) {\n      this.apiLogLevel = settings.logLevel;\n      this._loggingService?.setLogLevel(settings.logLevel);\n    }\n\n    // Update log handler if onLogMessage changed\n    if (\n      settings.onLogMessage !== undefined &&\n      settings.onLogMessage !== previousSettings.onLogMessage\n    ) {\n      this._loggingService?.setLogHandler(settings.onLogMessage);\n    }\n  }\n\n  /**\n   * Terminates the current run of the API\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async terminate(callbackName: string, checkTerminated: boolean): Promise<string> {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.TERMINATION_BEFORE_INIT,\n        this._error_codes.MULTIPLE_TERMINATION,\n      )\n    ) {\n      this.currentState = global_constants.STATE_TERMINATED;\n\n      const result: ResultObject = await this.storeData(true);\n      if ((result.errorCode ?? 0) > 0) {\n        this.throwSCORMError(\"api\", result.errorCode);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Get the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  getValue(callbackName: string, checkTerminated: boolean, CMIElement: string): string {\n    let returnValue: string = \"\";\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.RETRIEVE_BEFORE_INIT,\n        this._error_codes.RETRIEVE_AFTER_TERM,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.getCMIValue(CMIElement);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement);\n    }\n\n    this.apiLog(callbackName, \": returned: \" + returnValue, LogLevelEnum.INFO, CMIElement);\n\n    if (returnValue === undefined) {\n      return \"\";\n    }\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Sets the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {string} commitCallback\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  setValue(\n    callbackName: string,\n    commitCallback: string,\n    checkTerminated: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (value !== undefined) {\n      value = String(value);\n    }\n    let returnValue: string = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.STORE_BEFORE_INIT,\n        this._error_codes.STORE_AFTER_TERM,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.setCMIValue(CMIElement, value);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement, value);\n    }\n\n    if (returnValue === undefined) {\n      returnValue = global_constants.SCORM_FALSE;\n    }\n\n    // If we didn't have any errors while setting the data, go ahead and\n    // schedule a commit, if autocommit is turned on\n    if (String(this.lastErrorCode) === \"0\") {\n      if (this.settings.autocommit) {\n        this.scheduleCommit(this.settings.autocommitSeconds * 1000, commitCallback);\n      }\n    }\n\n    this.apiLog(\n      callbackName,\n      \": \" + value + \": result: \" + returnValue,\n      LogLevelEnum.INFO,\n      CMIElement,\n    );\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async commit(callbackName: string, checkTerminated: boolean = false): Promise<string> {\n    this.clearScheduledCommit();\n\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.COMMIT_BEFORE_INIT,\n        this._error_codes.COMMIT_AFTER_TERM,\n      )\n    ) {\n      const result = await this.storeData(false);\n      if ((result.errorCode ?? 0) > 0) {\n        this.throwSCORMError(\"api\", result.errorCode);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      this.apiLog(callbackName, \" Result: \" + returnValue, LogLevelEnum.DEBUG, \"HttpRequest\");\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Returns last error code\n   * @param {string} callbackName\n   * @return {string}\n   */\n  getLastError(callbackName: string): string {\n    const returnValue = String(this.lastErrorCode);\n\n    this.processListeners(callbackName);\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getErrorString(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getDiagnostic(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode, true);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Checks the LMS state and ensures it has been initialized.\n   *\n   * @param {boolean} checkTerminated\n   * @param {number} beforeInitError\n   * @param {number} afterTermError\n   * @return {boolean}\n   */\n  checkState(checkTerminated: boolean, beforeInitError: number, afterTermError: number): boolean {\n    if (this.isNotInitialized()) {\n      this.throwSCORMError(\"api\", beforeInitError);\n      return false;\n    } else if (checkTerminated && this.isTerminated()) {\n      this.throwSCORMError(\"api\", afterTermError);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {(string|number)} _errorNumber\n   * @param {boolean} _detail\n   * @return {string}\n   * @abstract\n   */\n  getLmsErrorMessageDetails(_errorNumber: string | number, _detail: boolean = false): string {\n    throw new Error(\"The getLmsErrorMessageDetails method has not been implemented\");\n  }\n\n  /**\n   * Gets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @return {string}\n   * @abstract\n   */\n  getCMIValue(_CMIElement: string): string {\n    throw new Error(\"The getCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Sets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @param {any} _value\n   * @return {string}\n   * @abstract\n   */\n  setCMIValue(_CMIElement: string, _value: any): string {\n    throw new Error(\"The setCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Shared API method to set a valid for a given element.\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  _commonSetCMIValue(\n    methodName: string,\n    scorm2004: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (!CMIElement || CMIElement === \"\") {\n      return global_constants.SCORM_FALSE;\n    }\n\n    this.lastErrorCode = \"0\";\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap | BaseCMI = this as StringKeyMap;\n    let returnValue = global_constants.SCORM_FALSE;\n    let foundFirstIndex = false;\n\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      const attribute = structure[idx];\n\n      if (idx === structure.length - 1) {\n        if (scorm2004 && attribute.substring(0, 8) === \"{target=\") {\n          if (this.isInitialized()) {\n            this.throwSCORMError(CMIElement, this._error_codes.READ_ONLY_ELEMENT);\n            break;\n          } else {\n            refObject = {\n              ...refObject,\n              attribute: value,\n            };\n          }\n        } else if (!this._checkObjectHasProperty(refObject as StringKeyMap, attribute)) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        } else {\n          if (\n            stringMatches(CMIElement, \"\\\\.correct_responses\\\\.\\\\d+$\") &&\n            this.isInitialized() &&\n            attribute !== \"pattern\"\n          ) {\n            this.validateCorrectResponse(CMIElement, value);\n            if (this.lastErrorCode !== \"0\") {\n              this.throwSCORMError(CMIElement, this._error_codes.TYPE_MISMATCH);\n              break;\n            }\n          }\n\n          if (!scorm2004 || this._errorHandlingService.lastErrorCode === \"0\") {\n            (refObject as StringKeyMap)[attribute] = value;\n            returnValue = global_constants.SCORM_TRUE;\n          }\n        }\n      } else {\n        refObject = (refObject as StringKeyMap)[attribute] as StringKeyMap;\n        if (!refObject) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n\n        if (refObject instanceof CMIArray) {\n          const index = parseInt(structure[idx + 1], 10);\n\n          // SCO is trying to set an item on an array\n          if (!isNaN(index)) {\n            const item = refObject.childArray[index];\n\n            if (item) {\n              refObject = item;\n              foundFirstIndex = true;\n            } else {\n              const newChild = this.getChildElement(CMIElement, value, foundFirstIndex);\n              foundFirstIndex = true;\n\n              if (!newChild) {\n                if (this.lastErrorCode === \"0\") {\n                  this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n                }\n                break;\n              } else {\n                if (refObject.initialized) newChild.initialize();\n                refObject.childArray[index] = newChild;\n                refObject = newChild;\n              }\n            }\n\n            // Have to update idx value to skip the array position\n            idx++;\n          }\n        }\n      }\n    }\n\n    if (returnValue === global_constants.SCORM_FALSE) {\n      this.apiLog(\n        methodName,\n        `There was an error setting the value for: ${CMIElement}, value of: ${value}`,\n        LogLevelEnum.WARN,\n      );\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @return {any}\n   */\n  _commonGetCMIValue(methodName: string, scorm2004: boolean, CMIElement: string): any {\n    if (!CMIElement || CMIElement === \"\") {\n      return \"\";\n    }\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap = this as StringKeyMap;\n    let attribute = null;\n\n    const uninitializedErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) has not been initialized.`;\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      attribute = structure[idx];\n\n      if (!scorm2004) {\n        if (idx === structure.length - 1) {\n          if (!this._checkObjectHasProperty(refObject, attribute)) {\n            this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n            return;\n          }\n        }\n      } else {\n        if (\n          String(attribute).substring(0, 8) === \"{target=\" &&\n          typeof refObject._isTargetValid == \"function\"\n        ) {\n          const target = String(attribute).substring(8, String(attribute).length - 9);\n          return refObject._isTargetValid(target);\n        } else if (!this._checkObjectHasProperty(refObject, attribute)) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          return;\n        }\n      }\n\n      refObject = refObject[attribute] as StringKeyMap;\n      if (refObject === undefined) {\n        this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n        break;\n      }\n\n      if (refObject instanceof CMIArray) {\n        const index = parseInt(structure[idx + 1], 10);\n\n        // SCO is trying to set an item on an array\n        if (!isNaN(index)) {\n          const item = refObject.childArray[index];\n\n          if (item) {\n            refObject = item;\n          } else {\n            this.throwSCORMError(\n              CMIElement,\n              this._error_codes.VALUE_NOT_INITIALIZED,\n              uninitializedErrorMessage,\n            );\n            break;\n          }\n\n          // Have to update idx value to skip the array position\n          idx++;\n        }\n      }\n    }\n\n    if (refObject === null || refObject === undefined) {\n      if (!scorm2004) {\n        if (attribute === \"_children\") {\n          this.throwSCORMError(CMIElement, this._error_codes.CHILDREN_ERROR, undefined);\n        } else if (attribute === \"_count\") {\n          this.throwSCORMError(CMIElement, this._error_codes.COUNT_ERROR, undefined);\n        }\n      }\n    } else {\n      return refObject;\n    }\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isInitialized(): boolean {\n    return this.currentState === global_constants.STATE_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_NOT_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isNotInitialized(): boolean {\n    return this.currentState === global_constants.STATE_NOT_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_TERMINATED\n   *\n   * @return {boolean}\n   */\n  isTerminated(): boolean {\n    return this.currentState === global_constants.STATE_TERMINATED;\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event.\n   * This method allows you to register a callback function that will be executed\n   * when the specified event occurs.\n   *\n   * @param {string} listenerName - The name of the event to listen for (e.g., \"Initialize\", \"Terminate\", \"GetValue\", \"SetValue\", \"Commit\")\n   * @param {function} callback - The function to execute when the event occurs. The callback will receive relevant event data.\n   * @example\n   * // Listen for Initialize events\n   * api.on(\"Initialize\", function() {\n   *   console.log(\"API has been initialized\");\n   * });\n   *\n   * // Listen for SetValue events\n   * api.on(\"SetValue\", function(element, value) {\n   *   console.log(\"Setting \" + element + \" to \" + value);\n   * });\n   */\n  on(listenerName: string, callback: Function) {\n    this._eventService.on(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener.\n   * This method removes a previously registered callback for an event.\n   * Both the event name and the callback reference must match what was used in the 'on' method.\n   *\n   * @param {string} listenerName - The name of the event to stop listening for\n   * @param {function} callback - The callback function to remove\n   * @example\n   * // Remove a specific listener\n   * const myCallback = function() { console.log(\"API initialized\"); };\n   * api.on(\"Initialize\", myCallback);\n   * // Later, when you want to remove it:\n   * api.off(\"Initialize\", myCallback);\n   */\n  off(listenerName: string, callback: Function) {\n    this._eventService.off(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event.\n   * This method removes all callbacks registered for the specified event.\n   *\n   * @param {string} listenerName - The name of the event to clear all listeners for\n   * @example\n   * // Remove all listeners for the Initialize event\n   * api.clear(\"Initialize\");\n   */\n  clear(listenerName: string) {\n    this._eventService.clear(listenerName);\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created for a specific event.\n   * This method is called internally when SCORM events occur to notify all registered listeners.\n   * It triggers all callback functions registered for the specified event.\n   *\n   * @param {string} functionName - The name of the function/event that occurred\n   * @param {string} CMIElement - Optional CMI element involved in the event\n   * @param {any} value - Optional value associated with the event\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this._eventService.processListeners(functionName, CMIElement, value);\n  }\n\n  /**\n   * Throws a SCORM error with the specified error number and optional message.\n   * This method sets the last error code and can be used to indicate that an operation failed.\n   * The error number should correspond to one of the standard SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The SCORM error code to set\n   * @param {string} message - Optional custom error message to provide additional context\n   * @example\n   * // Throw a \"not initialized\" error\n   * this.throwSCORMError(301, \"The API must be initialized before calling GetValue\");\n   */\n  throwSCORMError(CMIElement: string, errorNumber: number, message?: string) {\n    this._errorHandlingService.throwSCORMError(CMIElement, errorNumber, message);\n  }\n\n  /**\n   * Clears the last SCORM error code when an operation succeeds.\n   * This method is typically called after successful API operations to reset the error state.\n   * It only clears the error if the success parameter is \"true\".\n   *\n   * @param {string} success - A string indicating whether the operation succeeded (\"true\" or \"false\")\n   * @example\n   * // Clear error after successful operation\n   * this.clearSCORMError(\"true\");\n   */\n  clearSCORMError(success: string) {\n    this._errorHandlingService.clearSCORMError(success);\n  }\n\n  /**\n   * Load the CMI from a flattened JSON object.\n   * This method populates the CMI data model from a flattened JSON structure\n   * where keys represent CMI element paths (e.g., \"cmi.core.student_id\").\n   *\n   * @param {StringKeyMap} json - The flattened JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a flattened JSON structure\n   * api.loadFromFlattenedJSON({\n   *   \"cmi.core.student_id\": \"12345\",\n   *   \"cmi.core.student_name\": \"John Doe\",\n   *   \"cmi.core.lesson_status\": \"incomplete\"\n   * });\n   */\n  loadFromFlattenedJSON(json: StringKeyMap, CMIElement?: string) {\n    if (!CMIElement) {\n      // by default, we start from a blank string because we're expecting each element to start with `cmi`\n      CMIElement = \"\";\n    }\n\n    this._serializationService.loadFromFlattenedJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Loads CMI data from a hierarchical JSON object.\n   * This method populates the CMI data model from a nested JSON structure\n   * that mirrors the CMI object hierarchy.\n   *\n   * @param {StringKeyMap} json - The hierarchical JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a hierarchical JSON structure\n   * api.loadFromJSON({\n   *   core: {\n   *     student_id: \"12345\",\n   *     student_name: \"John Doe\",\n   *     lesson_status: \"incomplete\"\n   *   },\n   *   objectives: [\n   *     { id: \"obj1\", score: { raw: 85 } }\n   *   ]\n   * });\n   */\n  loadFromJSON(json: StringKeyMap, CMIElement: string = \"\") {\n    this._serializationService.loadFromJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Render the CMI object to a JSON string for sending to an LMS.\n   * This method serializes the current CMI data model to a JSON string.\n   * The output format is controlled by the sendFullCommit setting.\n   *\n   * @return {string} A JSON string representation of the CMI data\n   * @example\n   * // Get the current CMI data as a JSON string\n   * const jsonString = api.renderCMIToJSONString();\n   * console.log(jsonString); // '{\"core\":{\"student_id\":\"12345\",...}}'\n   */\n  renderCMIToJSONString(): string {\n    return this._serializationService.renderCMIToJSONString(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Returns a JavaScript object representing the current CMI data.\n   * This method creates a plain JavaScript object that mirrors the\n   * structure of the CMI data model, suitable for further processing.\n   *\n   * @return {StringKeyMap} A JavaScript object representing the CMI data\n   * @example\n   * // Get the current CMI data as a JavaScript object\n   * const cmiObject = api.renderCMIToJSONObject();\n   * console.log(cmiObject.core.student_id); // \"12345\"\n   */\n  renderCMIToJSONObject(): StringKeyMap {\n    return this._serializationService.renderCMIToJSONObject(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Sends a request to the LMS with the specified parameters.\n   * This method handles communication with the LMS server, including\n   * formatting the request, handling the response, and triggering appropriate events.\n   *\n   * @param {string} url - The URL endpoint to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The data to send to the LMS\n   * @param {boolean} immediate - Whether to send the request immediately (true) or queue it (false)\n   * @return {Promise<ResultObject>} A promise that resolves with the result of the request\n   * @example\n   * // Send data to the LMS immediately\n   * const result = await api.processHttpRequest(\n   *   \"https://lms.example.com/scorm/commit\",\n   *   { method: \"POST\", params: { cmi: { core: { lesson_status: \"completed\" } } } },\n   *   true\n   * );\n   * console.log(result.errorCode === 0 ? \"Success\" : \"Failed\");\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n  ): Promise<ResultObject> {\n    return this._httpService.processHttpRequest(\n      url,\n      params,\n      immediate,\n      (functionName, message, level, element) => this.apiLog(functionName, message, level, element),\n      (functionName, CMIElement, value) => this.processListeners(functionName, CMIElement, value),\n    );\n  }\n\n  /**\n   * Schedules a commit operation to occur after a specified delay.\n   * This method is used to implement auto-commit functionality, where data\n   * is periodically sent to the LMS without requiring explicit commit calls.\n   *\n   * @param {number} when - The number of milliseconds to wait before committing\n   * @param {string} callback - The name of the commit event callback\n   * @example\n   * // Schedule a commit to happen in 60 seconds\n   * api.scheduleCommit(60000, \"commit\");\n   */\n  scheduleCommit(when: number, callback: string) {\n    if (!this._timeout) {\n      this._timeout = new ScheduledCommit(this, when, callback);\n      this.apiLog(\"scheduleCommit\", \"scheduled\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Clears and cancels any currently scheduled commits.\n   * This method is typically called when an explicit commit is performed\n   * or when the API is terminated, to prevent redundant commits.\n   *\n   * @example\n   * // Cancel any pending scheduled commits\n   * api.clearScheduledCommit();\n   */\n  clearScheduledCommit() {\n    if (this._timeout) {\n      this._timeout.cancel();\n      this._timeout = undefined;\n      this.apiLog(\"clearScheduledCommit\", \"cleared\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Checks if an object has a specific property, using multiple detection methods.\n   * This method performs a thorough check for property existence by:\n   * 1. Checking if it's an own property using Object.hasOwnProperty\n   * 2. Checking if it's defined in the prototype with a property descriptor\n   * 3. Checking if it's accessible via the 'in' operator (includes inherited properties)\n   *\n   * @param {StringKeyMap} StringKeyMap - The object to check for the property\n   * @param {string} attribute - The property name to look for\n   * @return {boolean} True if the property exists on the object or its prototype chain\n   * @private\n   *\n   * @example\n   * // Check for an own property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"name\"); // Returns true\n   *\n   * @example\n   * // Check for an inherited property\n   * class Parent { get type() { return \"parent\"; } }\n   * const child = Object.create(new Parent());\n   * this._checkObjectHasProperty(child, \"type\"); // Returns true\n   *\n   * @example\n   * // Check for a non-existent property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"age\"); // Returns false\n   */\n  private _checkObjectHasProperty(StringKeyMap: StringKeyMap, attribute: string): boolean {\n    return (\n      Object.hasOwnProperty.call(StringKeyMap, attribute) ||\n      Object.getOwnPropertyDescriptor(Object.getPrototypeOf(StringKeyMap), attribute) != null ||\n      attribute in StringKeyMap\n    );\n  }\n\n  /**\n   * Handles exceptions that occur when accessing CMI values.\n   * This method delegates to the ErrorHandlingService to process exceptions\n   * that occur during CMI data operations, ensuring consistent error handling\n   * throughout the API.\n   *\n   * @param {string} CMIElement\n   * @param {any} e - The exception that was thrown\n   * @param {string} returnValue - The default return value to use if an error occurs\n   * @return {string} Either the original returnValue or SCORM_FALSE if an error occurred\n   * @private\n   *\n   * @example\n   * // Handle a validation error when getting a CMI value\n   * try {\n   *   return this.getCMIValue(\"cmi.core.score.raw\");\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"\");\n   * }\n   *\n   * @example\n   * // Handle a general error when setting a CMI value\n   * try {\n   *   this.setCMIValue(\"cmi.core.lesson_status\", \"completed\");\n   *   return \"true\";\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"false\");\n   * }\n   */\n  private handleValueAccessException(CMIElement: string, e: any, returnValue: string): string {\n    if (e instanceof ValidationError) {\n      this.lastErrorCode = String(e.errorCode);\n      returnValue = global_constants.SCORM_FALSE;\n      this.throwSCORMError(CMIElement, e.errorCode, e.errorMessage);\n    } else {\n      if (e instanceof Error && e.message) {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, e.message);\n      } else {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, \"Unknown error\");\n      }\n    }\n    return returnValue;\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS.\n   * This method delegates to the SerializationService to create a properly\n   * formatted object containing the CMI data that needs to be sent to the LMS.\n   * The format and content of the commit object depend on whether this is a\n   * regular commit or a termination commit.\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @return {CommitObject|StringKeyMap|Array} The formatted commit object\n   * @protected\n   *\n   * @example\n   * // Create a regular commit object\n   * const regularCommit = this.getCommitObject(false);\n   * // Result might be: { cmi: { core: { lesson_status: \"incomplete\" } } }\n   *\n   * @example\n   * // Create a termination commit object (includes total_time)\n   * const terminationCommit = this.getCommitObject(true);\n   * // Result might be: { cmi: { core: { lesson_status: \"completed\", total_time: \"PT1H30M\" } } }\n   */\n  protected getCommitObject(terminateCommit: boolean): CommitObject | StringKeyMap | Array<any> {\n    return this._serializationService.getCommitObject(\n      terminateCommit,\n      this.settings.alwaysSendTotalTime,\n      this.settings.renderCommonCommitFields,\n      (terminateCommit) => this.renderCommitObject(terminateCommit),\n      (terminateCommit) => this.renderCommitCMI(terminateCommit),\n      this.apiLogLevel,\n    );\n  }\n}\n","import { ValidationError } from \"../exceptions\";\nimport { scorm2004_constants } from \"../constants/api_constants\";\n\nconst scorm2004_errors = scorm2004_constants.error_descriptions;\n\n/**\n * SCORM 2004 Validation Error\n */\nexport class Scorm2004ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm2004_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm2004_errors[String(errorCode)].basicMessage,\n        scorm2004_errors[String(errorCode)].detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm2004_errors[\"101\"].basicMessage,\n        scorm2004_errors[\"101\"].detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm2004ValidationError.prototype);\n  }\n}\n","import { BaseScormValidationError } from \"../../exceptions\";\nimport { memoize } from \"../../utilities\";\n\n/**\n * Check if the value matches the proper format. If not, throw proper error code.\n *\n * @param {string} value\n * @param {string} regexPattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @param {boolean} [allowEmptyString]\n * @return {boolean}\n */\nexport const checkValidFormat = memoize(\n  (\n    CMIElement: string,\n    value: string,\n    regexPattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n    allowEmptyString?: boolean,\n  ): boolean => {\n    if (typeof value !== \"string\") {\n      return false;\n    }\n    const formatRegex = new RegExp(regexPattern);\n    const matches = value.match(formatRegex);\n    if (allowEmptyString && value === \"\") {\n      return true;\n    }\n    if (value === undefined || !matches || matches[0] === \"\") {\n      throw new errorClass(CMIElement, errorCode);\n    }\n    return true;\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, regexPattern, errorCode, _errorClass, allowEmptyString) => {\n    // Use typeof for non-string values to ensure consistent cache keys\n    const valueKey = typeof value === \"string\" ? value : `[${typeof value}]`;\n    return `${CMIElement}:${valueKey}:${regexPattern}:${errorCode}:${allowEmptyString || false}`;\n  },\n);\n\n/**\n * Check if the value matches the proper range. If not, throw proper error code.\n *\n * @param {any} value\n * @param {string} rangePattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @return {boolean}\n */\nexport const checkValidRange = memoize(\n  (\n    CMIElement: string,\n    value: any,\n    rangePattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean => {\n    const ranges = rangePattern.split(\"#\");\n    value = value * 1.0;\n    if (value >= ranges[0]) {\n      if (ranges[1] === \"*\" || value <= ranges[1]) {\n        return true;\n      } else {\n        throw new errorClass(CMIElement, errorCode);\n      }\n    } else {\n      throw new errorClass(CMIElement, errorCode);\n    }\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, rangePattern, errorCode, _errorClass) =>\n    `${CMIElement}:${value}:${rangePattern}:${errorCode}`,\n);\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check2004ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm2004_errors.TYPE_MISMATCH,\n    Scorm2004ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @return {boolean}\n */\nexport function check2004ValidRange(\n  CMIElement: string,\n  value: string,\n  rangePattern: string,\n): boolean {\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm2004_errors.VALUE_OUT_OF_RANGE,\n    Scorm2004ValidationError,\n  );\n}\n","export const scorm12_regex = {\n  CMIString256: \"^.{0,255}$\",\n  CMIString4096: \"^.{0,4096}$\",\n  CMITime: \"^(?:[01]\\\\d|2[0123]):(?:[012345]\\\\d):(?:[012345]\\\\d)$\",\n  CMITimespan: \"^([0-9]{2,}):([0-9]{2}):([0-9]{2})(.[0-9]{1,2})?$\",\n\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{0,3})(.[0-9]*)?$\",\n\n  CMIIdentifier: \"^[\\\\u0021-\\\\u007E\\\\s]{0,255}$\",\n  CMIFeedback: \"^.{0,255}$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMIStatus: \"^(passed|completed|failed|incomplete|browsed)$\",\n  CMIStatus2: \"^(passed|completed|failed|incomplete|browsed|not attempted)$\",\n  CMIExit: \"^(time-out|suspend|logout|)$\",\n  CMIType: \"^(true-false|choice|fill-in|matching|performance|sequencing|likert|numeric)$\",\n  CMIResult: \"^(correct|wrong|unanticipated|neutral|([0-9]{0,3})?(\\\\.[0-9]*)?)$\",\n  NAVEvent: \"^(previous|continue)$\",\n  // Data ranges\n  score_range: \"0#100\",\n  audio_range: \"-1#100\",\n  speed_range: \"-100#100\",\n  weighting_range: \"-100#100\",\n  text_range: \"-1#1\",\n};\nexport const aicc_regex = {\n  ...scorm12_regex,\n  ...{\n    CMIIdentifier: \"^\\\\w{1,255}$\",\n  },\n};\nexport const scorm2004_regex = {\n  CMIString200: \"^[\\\\u0000-\\\\uFFFF]{0,200}$\",\n  CMIString250: \"^[\\\\u0000-\\\\uFFFF]{0,250}$\",\n  CMIString1000: \"^[\\\\u0000-\\\\uFFFF]{0,1000}$\",\n  CMIString4000: \"^[\\\\u0000-\\\\uFFFF]{0,4000}$\",\n  CMIString64000: \"^[\\\\u0000-\\\\uFFFF]{0,64000}$\",\n  CMILang: \"^([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?$|^$\",\n\n  CMILangString250: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,250}$)?$\",\n\n  CMILangcr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?}))(.*?)$\",\n\n  CMILangString250cr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?})?(.{0,250})?)?$\",\n\n  CMILangString4000: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,4000}$)?$\",\n\n  CMITime:\n    \"^(19[7-9]{1}[0-9]{1}|20[0-2]{1}[0-9]{1}|203[0-8]{1})((-(0[1-9]{1}|1[0-2]{1}))((-(0[1-9]{1}|[1-2]{1}[0-9]{1}|3[0-1]{1}))(T([0-1]{1}[0-9]{1}|2[0-3]{1})((:[0-5]{1}[0-9]{1})((:[0-5]{1}[0-9]{1})((\\\\.[0-9]{1,6})((Z|([+|-]([0-1]{1}[0-9]{1}|2[0-3]{1})))(:[0-5]{1}[0-9]{1})?)?)?)?)?)?)?)?$\",\n  CMITimespan:\n    \"^P(?:([.,\\\\d]+)Y)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)W)?(?:([.,\\\\d]+)D)?(?:T?(?:([.,\\\\d]+)H)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)S)?)?$\",\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{1,5})(\\\\.[0-9]{1,18})?$\",\n  CMIIdentifier: \"^\\\\S{1,250}[a-zA-Z0-9]$\",\n  CMIShortIdentifier: \"^[\\\\w\\\\.\\\\-\\\\_]{1,250}$\",\n  CMILongIdentifier: \"^(?:(?!urn:)\\\\S{1,4000}|urn:[A-Za-z0-9-]{1,31}:\\\\S{1,4000}|.{1,4000})$\",\n  // need to re-examine this\n  CMIFeedback: \"^.*$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  CMIIndexStore: \".N(\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMICStatus: \"^(completed|incomplete|not attempted|unknown)$\",\n  CMISStatus: \"^(passed|failed|unknown)$\",\n  CMIExit: \"^(time-out|suspend|logout|normal)$\",\n  CMIType:\n    \"^(true-false|choice|fill-in|long-fill-in|matching|performance|sequencing|likert|numeric|other)$\",\n  CMIResult: \"^(correct|incorrect|unanticipated|neutral|-?([0-9]{1,4})(\\\\.[0-9]{1,18})?)$\",\n  NAVEvent:\n    \"^(previous|continue|exit|exitAll|abandon|abandonAll|suspendAll|_none_|(\\\\{target=(?<choice_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?choice|(\\\\{target=(?<jump_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?jump)$\",\n\n  NAVBoolean: \"^(unknown|true|false$)\",\n  NAVTarget: \"^{target=\\\\S{0,}[a-zA-Z0-9-_]+}$\",\n  // Data ranges\n  scaled_range: \"-1#1\",\n  audio_range: \"0#999.9999999\",\n  speed_range: \"0#999.9999999\",\n  text_range: \"-1#1\",\n  progress_range: \"0#1\",\n};\n","/**\n * Class for SCORM 2004's cmi.learner_preference object\n */\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\n\nexport class CMILearnerPreference extends BaseCMI {\n  private __children = scorm2004_constants.student_preference_children;\n  private _audio_level = \"1\";\n  private _language = \"\";\n  private _delivery_speed = \"1\";\n  private _audio_captioning = \"0\";\n\n  /**\n   * Constructor for cmi.learner_preference\n   */\n  constructor() {\n    super(\"cmi.learner_preference\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._children\",\n      scorm2004_errors.READ_ONLY_ELEMENT,\n    );\n  }\n\n  /**\n   * Getter for _audio_level\n   * @return {string}\n   */\n  get audio_level(): string {\n    return this._audio_level;\n  }\n\n  /**\n   * Setter for _audio_level\n   * @param {string} audio_level\n   */\n  set audio_level(audio_level: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".audio_level\",\n        audio_level,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".audio_level\",\n        audio_level,\n        scorm2004_regex.audio_range,\n      )\n    ) {\n      this._audio_level = audio_level;\n    }\n  }\n\n  /**\n   * Getter for _language\n   * @return {string}\n   */\n  get language(): string {\n    return this._language;\n  }\n\n  /**\n   * Setter for _language\n   * @param {string} language\n   */\n  set language(language: string) {\n    if (check2004ValidFormat(this._cmi_element + \".language\", language, scorm2004_regex.CMILang)) {\n      this._language = language;\n    }\n  }\n\n  /**\n   * Getter for _delivery_speed\n   * @return {string}\n   */\n  get delivery_speed(): string {\n    return this._delivery_speed;\n  }\n\n  /**\n   * Setter for _delivery_speed\n   * @param {string} delivery_speed\n   */\n  set delivery_speed(delivery_speed: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".delivery_speed\",\n        delivery_speed,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".delivery_speed\",\n        delivery_speed,\n        scorm2004_regex.speed_range,\n      )\n    ) {\n      this._delivery_speed = delivery_speed;\n    }\n  }\n\n  /**\n   * Getter for _audio_captioning\n   * @return {string}\n   */\n  get audio_captioning(): string {\n    return this._audio_captioning;\n  }\n\n  /**\n   * Setter for _audio_captioning\n   * @param {string} audio_captioning\n   */\n  set audio_captioning(audio_captioning: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".audio_captioning\",\n        audio_captioning,\n        scorm2004_regex.CMISInteger,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".audio_captioning\",\n        audio_captioning,\n        scorm2004_regex.text_range,\n      )\n    ) {\n      this._audio_captioning = audio_captioning;\n    }\n  }\n\n  /**\n   * toJSON for cmi.learner_preference\n   *\n   * @return {\n   *    {\n   *      audio_level: string,\n   *      language: string,\n   *      delivery_speed: string,\n   *      audio_captioning: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    audio_level: string;\n    language: string;\n    delivery_speed: string;\n    audio_captioning: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio_level: this.audio_level,\n      language: this.language,\n      delivery_speed: this.delivery_speed,\n      audio_captioning: this.audio_captioning,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { scorm2004_regex } from \"./regex\";\n\nexport const LearnerResponses: Responses = {\n  \"true-false\": {\n    format: \"^true$|^false$\",\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  choice: {\n    format: scorm2004_regex.CMILongIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    unique: true,\n  },\n  \"fill-in\": {\n    format: scorm2004_regex.CMILangString250,\n    max: 10,\n    delimiter: \"[,]\",\n    unique: false,\n  },\n  \"long-fill-in\": {\n    format: scorm2004_regex.CMILangString4000,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  matching: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n  },\n  performance: {\n    format: \"^$|\" + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + \"|^$|\" + scorm2004_regex.CMIShortIdentifier,\n    max: 250,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n  },\n  sequencing: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    unique: false,\n  },\n  likert: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  numeric: {\n    format: scorm2004_regex.CMIDecimal,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  other: {\n    format: scorm2004_regex.CMIString4000,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n};\nexport const CorrectResponses: Responses = {\n  \"true-false\": {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: \"^true$|^false$\",\n    limit: 1,\n  },\n  choice: {\n    max: 36,\n    delimiter: \"[,]\",\n    unique: true,\n    duplicate: false,\n    format: scorm2004_regex.CMILongIdentifier,\n  },\n  \"fill-in\": {\n    max: 10,\n    delimiter: \"[,]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMILangString250cr,\n  },\n  \"long-fill-in\": {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: true,\n    format: scorm2004_regex.CMILangString4000,\n  },\n  matching: {\n    max: 36,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n  },\n  performance: {\n    max: 250,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    delimiter3: \"[:]\",\n    unique: false,\n    duplicate: false,\n    format: \"^$|\" + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + \"|^$|\" + scorm2004_regex.CMIShortIdentifier,\n  },\n  sequencing: {\n    max: 36,\n    delimiter: \"[,]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n  },\n  likert: {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    limit: 1,\n  },\n  numeric: {\n    max: 2,\n    delimiter: \"[:]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIDecimal,\n    limit: 1,\n  },\n  other: {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIString4000,\n    limit: 1,\n  },\n};\n\nexport type ResponseType = {\n  format: string;\n  max: number;\n  delimiter: string;\n  unique: boolean;\n  duplicate?: boolean;\n  format2?: string;\n  delimiter2?: string;\n  limit?: number;\n  delimiter3?: string;\n};\n\nexport type Responses = {\n  [key: string]: ResponseType;\n};\n","/**\n * Class representing SCORM 2004's `cmi.interactions` object\n */\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { CMIArray } from \"../common/array\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { CorrectResponses, LearnerResponses } from \"../../constants/response_constants\";\n\nexport class CMIInteractions extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives` Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.interactions\",\n      children: scorm2004_constants.interactions_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.interaction.n object\n */\n\nexport class CMIInteractionsObject extends BaseCMI {\n  private _id = \"\";\n  private _type = \"\";\n  private _timestamp = \"\";\n  private _weighting = \"\";\n  private _learner_response = \"\";\n  private _result = \"\";\n  private _latency = \"\";\n  private _description = \"\";\n\n  /**\n   * Constructor for cmi.interaction.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n\");\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.n.correct_responses\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  public objectives: CMIArray;\n  public correct_responses: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._id = \"\";\n    this._type = \"\";\n    this._timestamp = \"\";\n    this._weighting = \"\";\n    this._learner_response = \"\";\n    this._result = \"\";\n    this._latency = \"\";\n    this._description = \"\";\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.n.correct_responses\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _type\n   * @return {string}\n   */\n  get type(): string {\n    return this._type;\n  }\n\n  /**\n   * Setter for _type\n   * @param {string} type\n   */\n  set type(type: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".type\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (check2004ValidFormat(this._cmi_element + \".type\", type, scorm2004_regex.CMIType)) {\n        this._type = type;\n      }\n    }\n  }\n\n  /**\n   * Getter for _timestamp\n   * @return {string}\n   */\n  get timestamp(): string {\n    return this._timestamp;\n  }\n\n  /**\n   * Setter for _timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".timestamp\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".timestamp\", timestamp, scorm2004_regex.CMITime)\n      ) {\n        this._timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * Getter for _weighting\n   * @return {string}\n   */\n  get weighting(): string {\n    return this._weighting;\n  }\n\n  /**\n   * Setter for _weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".weighting\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".weighting\",\n          weighting,\n          scorm2004_regex.CMIDecimal,\n        )\n      ) {\n        this._weighting = weighting;\n      }\n    }\n  }\n\n  /**\n   * Getter for _learner_response\n   * @return {string}\n   */\n  get learner_response(): string {\n    return this._learner_response;\n  }\n\n  /**\n   * Setter for _learner_response. Does type validation to make sure response\n   * matches SCORM 2004's spec\n   * @param {string} learner_response\n   */\n  set learner_response(learner_response: string) {\n    if (this.initialized && (this._type === \"\" || this._id === \"\")) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_response\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      let nodes = [];\n      const response_type = LearnerResponses[this.type];\n\n      if (response_type) {\n        if (response_type?.delimiter) {\n          // Convert regex-style delimiter to actual character\n          const delimiter = response_type.delimiter === \"[,]\" ? \",\" : response_type.delimiter;\n          nodes = learner_response.split(delimiter);\n        } else {\n          nodes[0] = learner_response;\n        }\n\n        if (nodes.length > 0 && nodes.length <= response_type.max) {\n          const formatRegex = new RegExp(response_type.format);\n\n          for (let i = 0; i < nodes.length; i++) {\n            if (response_type?.delimiter2) {\n              // Convert regex-style delimiter to actual character\n              const delimiter2 =\n                response_type.delimiter2 === \"[.]\" ? \".\" : response_type.delimiter2;\n              const values = nodes[i].split(delimiter2);\n\n              if (values.length === 2) {\n                if (!values[0].match(formatRegex)) {\n                  throw new Scorm2004ValidationError(\n                    this._cmi_element + \".learner_response\",\n                    scorm2004_errors.TYPE_MISMATCH,\n                  );\n                } else {\n                  if (\n                    !response_type.format2 ||\n                    !values[1].match(new RegExp(response_type.format2))\n                  ) {\n                    throw new Scorm2004ValidationError(\n                      this._cmi_element + \".learner_response\",\n                      scorm2004_errors.TYPE_MISMATCH,\n                    );\n                  }\n                }\n              } else {\n                throw new Scorm2004ValidationError(\n                  this._cmi_element + \".learner_response\",\n                  scorm2004_errors.TYPE_MISMATCH,\n                );\n              }\n            } else {\n              if (!nodes[i].match(formatRegex)) {\n                throw new Scorm2004ValidationError(\n                  this._cmi_element + \".learner_response\",\n                  scorm2004_errors.TYPE_MISMATCH,\n                );\n              } else {\n                if (nodes[i] !== \"\" && response_type.unique) {\n                  for (let j = 0; j < i; j++) {\n                    if (nodes[i] === nodes[j]) {\n                      throw new Scorm2004ValidationError(\n                        this._cmi_element + \".learner_response\",\n                        scorm2004_errors.TYPE_MISMATCH,\n                      );\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          throw new Scorm2004ValidationError(\n            this._cmi_element + \".learner_response\",\n            scorm2004_errors.GENERAL_SET_FAILURE,\n          );\n        }\n\n        this._learner_response = learner_response;\n      } else {\n        throw new Scorm2004ValidationError(\n          this._cmi_element + \".learner_response\",\n          scorm2004_errors.TYPE_MISMATCH,\n        );\n      }\n    }\n  }\n\n  /**\n   * Getter for _result\n   * @return {string}\n   */\n  get result(): string {\n    return this._result;\n  }\n\n  /**\n   * Setter for _result\n   * @param {string} result\n   */\n  set result(result: string) {\n    if (check2004ValidFormat(this._cmi_element + \".result\", result, scorm2004_regex.CMIResult)) {\n      this._result = result;\n    }\n  }\n\n  /**\n   * Getter for _latency\n   * @return {string}\n   */\n  get latency(): string {\n    return this._latency;\n  }\n\n  /**\n   * Setter for _latency\n   * @param {string} latency\n   */\n  set latency(latency: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".latency\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".latency\", latency, scorm2004_regex.CMITimespan)\n      ) {\n        this._latency = latency;\n      }\n    }\n  }\n\n  /**\n   * Getter for _description\n   * @return {string}\n   */\n  get description(): string {\n    return this._description;\n  }\n\n  /**\n   * Setter for _description\n   * @param {string} description\n   */\n  set description(description: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".description\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".description\",\n          description,\n          scorm2004_regex.CMILangString250,\n          true,\n        )\n      ) {\n        this._description = description;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      type: string,\n   *      objectives: CMIArray,\n   *      timestamp: string,\n   *      correct_responses: CMIArray,\n   *      weighting: string,\n   *      learner_response: string,\n   *      result: string,\n   *      latency: string,\n   *      description: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    type: string;\n    objectives: CMIArray;\n    timestamp: string;\n    correct_responses: CMIArray;\n    weighting: string;\n    learner_response: string;\n    result: string;\n    latency: string;\n    description: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      type: this.type,\n      objectives: this.objectives,\n      timestamp: this.timestamp,\n      weighting: this.weighting,\n      learner_response: this.learner_response,\n      result: this.result,\n      latency: this.latency,\n      description: this.description,\n      correct_responses: this.correct_responses,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.objectives.n object\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  private _id = \"\";\n\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n.objectives.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._id = \"\";\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.correct_responses.n object\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  private _pattern = \"\";\n  private _parent?: CMIInteractionsObject;\n\n  /**\n   * Constructor for cmi.interactions.n.correct_responses.n\n   * @param {CMIInteractionsObject} parent - The parent interaction object\n   */\n  constructor(parent?: CMIInteractionsObject) {\n    super(\"cmi.interactions.n.correct_responses.n\");\n    this._parent = parent;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._pattern = \"\";\n  }\n\n  /**\n   * Getter for _pattern\n   * @return {string}\n   */\n  get pattern(): string {\n    return this._pattern;\n  }\n\n  /**\n   * Setter for _pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern: string) {\n    // First do basic format validation\n    if (\n      check2004ValidFormat(this._cmi_element + \".pattern\", pattern, scorm2004_regex.CMIFeedback)\n    ) {\n      // If we have a parent interaction, validate the pattern against the interaction type\n      if (this._parent && this._parent.type) {\n        const interactionType = this._parent.type;\n        const response = CorrectResponses[interactionType];\n\n        if (response) {\n          // Validate the pattern against the interaction type\n          let isValid = true;\n          let nodes = [];\n\n          if (response?.delimiter) {\n            nodes = String(pattern).split(response.delimiter);\n          } else {\n            nodes[0] = pattern;\n          }\n\n          if (nodes.length > 0 && nodes.length <= response.max) {\n            const formatRegex = new RegExp(response.format);\n\n            for (let i = 0; i < nodes.length && isValid; i++) {\n              if (response?.delimiter2) {\n                const values = nodes[i].split(response.delimiter2);\n                if (values.length === 2) {\n                  const matches = values[0].match(formatRegex);\n                  if (!matches) {\n                    isValid = false;\n                  } else if (!response.format2 || !values[1].match(new RegExp(response.format2))) {\n                    isValid = false;\n                  }\n                } else {\n                  isValid = false;\n                }\n              } else {\n                const matches = nodes[i].match(formatRegex);\n                if (\n                  (!matches && pattern !== \"\") ||\n                  (!matches && interactionType === \"true-false\")\n                ) {\n                  isValid = false;\n                }\n              }\n            }\n          } else if (nodes.length > response.max) {\n            isValid = false;\n          }\n\n          if (!isValid) {\n            throw new Scorm2004ValidationError(\n              this._cmi_element + \".pattern\",\n              scorm2004_errors.TYPE_MISMATCH,\n            );\n          }\n        }\n      }\n\n      this._pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON cmi.interactions.n.correct_responses.n object\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    pattern: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      pattern: this.pattern,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { ValidationError } from \"../exceptions\";\nimport { scorm12_constants } from \"../constants/api_constants\";\n\nconst scorm12_errors = scorm12_constants.error_descriptions;\n\n/**\n * SCORM 1.2 Validation Error\n */\nexport class Scorm12ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm12_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm12_errors[String(errorCode)].basicMessage,\n        scorm12_errors[String(errorCode)].detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm12_errors[\"101\"].basicMessage,\n        scorm12_errors[\"101\"].detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm12ValidationError.prototype);\n  }\n}\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm12_errors.TYPE_MISMATCH,\n    Scorm12ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidRange(\n  CMIElement: string,\n  value: any,\n  rangePattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  if (!allowEmptyString && value === \"\") {\n    throw new Scorm12ValidationError(CMIElement, scorm12_errors.VALUE_OUT_OF_RANGE);\n  }\n\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm12_errors.VALUE_OUT_OF_RANGE,\n    Scorm12ValidationError,\n  );\n}\n","import { BaseScormValidationError } from \"../exceptions\";\nimport { checkValidFormat, checkValidRange } from \"../cmi/common/validation\";\nimport { check12ValidFormat, check12ValidRange } from \"../cmi/scorm12/validation\";\nimport { scorm12_regex } from \"../constants/regex\";\nimport { scorm12_errors } from \"../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../exceptions/scorm12_exceptions\";\n\n/**\n * Service for validating CMI data model properties\n */\nexport class ValidationService {\n  /**\n   * Validates a score property (raw, min, max)\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @param {string} decimalRegex - The regex pattern for decimal validation\n   * @param {string | false} scoreRange - The range pattern for score validation, or false if no range validation is needed\n   * @param {number} invalidTypeCode - The error code for invalid type\n   * @param {number} invalidRangeCode - The error code for invalid range\n   * @param {typeof BaseScormValidationError} errorClass - The error class to use for validation errors\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScore(\n    CMIElement: string,\n    value: string,\n    decimalRegex: string,\n    scoreRange: string | false,\n    invalidTypeCode: number,\n    invalidRangeCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean {\n    return (\n      checkValidFormat(CMIElement, value, decimalRegex, invalidTypeCode, errorClass) &&\n      (!scoreRange || checkValidRange(CMIElement, value, scoreRange, invalidRangeCode, errorClass))\n    );\n    // This line should never be reached due to exceptions being thrown\n  }\n\n  /**\n   * Validates a SCORM 1.2 audio property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Audio(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.audio_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 language property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Language(CMIElement: string, value: string): boolean {\n    return check12ValidFormat(CMIElement, value, scorm12_regex.CMIString256);\n  }\n\n  /**\n   * Validates a SCORM 1.2 speed property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Speed(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.speed_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 text property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Text(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.text_range)\n    );\n  }\n\n  /**\n   * Validates if a property is read-only\n   *\n   * @param {string} CMIElement\n   * @param {boolean} initialized - Whether the object is initialized\n   * @throws {BaseScormValidationError} - Throws an error if the object is initialized\n   */\n  validateReadOnly(CMIElement: string, initialized: boolean): void {\n    if (initialized) {\n      throw new Scorm12ValidationError(CMIElement, scorm12_errors.READ_ONLY_ELEMENT);\n    }\n  }\n}\n\n// Export a singleton instance of the ValidationService\nexport const validationService = new ValidationService();\n","import { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"./base_cmi\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { validationService } from \"../../services/ValidationService\";\n\n/**\n * Base class for cmi *.score objects\n */\nexport class CMIScore extends BaseCMI {\n  private readonly __children: string;\n  private readonly __score_range: string | false;\n  private readonly __invalid_error_code: number;\n  private readonly __invalid_type_code: number;\n  private readonly __invalid_range_code: number;\n  private readonly __decimal_regex: string;\n  private readonly __error_class: typeof BaseScormValidationError;\n  protected _raw = \"\";\n  protected _min = \"\";\n  protected _max: string;\n\n  /**\n   * Constructor for *.score\n   * @param {\n   *     score_children: string,\n   *     score_range: string,\n   *     max: string,\n   *     invalidErrorCode: number,\n   *     invalidTypeCode: number,\n   *     invalidRangeCode: number,\n   *     decimalRegex: string,\n   *     errorClass: typeof BaseScormValidationError\n   * } params\n   */\n  constructor(params: {\n    CMIElement: string;\n    score_children?: string;\n    score_range?: string;\n    max?: string;\n    invalidErrorCode?: number;\n    invalidTypeCode?: number;\n    invalidRangeCode?: number;\n    decimalRegex?: string;\n    errorClass: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n\n    this.__children = params.score_children || scorm12_constants.score_children;\n    this.__score_range = !params.score_range ? false : scorm12_regex.score_range;\n    this._max = params.max || params.max === \"\" ? params.max : \"100\";\n    this.__invalid_error_code = params.invalidErrorCode || scorm12_errors.INVALID_SET_VALUE;\n    this.__invalid_type_code = params.invalidTypeCode || scorm12_errors.TYPE_MISMATCH;\n    this.__invalid_range_code = params.invalidRangeCode || scorm12_errors.VALUE_OUT_OF_RANGE;\n    this.__decimal_regex = params.decimalRegex || scorm12_regex.CMIDecimal;\n    this.__error_class = params.errorClass;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this.__error_class(this._cmi_element + \"._children\", this.__invalid_error_code);\n  }\n\n  /**\n   * Getter for _raw\n   * @return {string}\n   */\n  get raw(): string {\n    return this._raw;\n  }\n\n  /**\n   * Setter for _raw\n   * @param {string} raw\n   */\n  set raw(raw: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".raw\",\n        raw,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._raw = raw;\n    }\n  }\n\n  /**\n   * Getter for _min\n   * @return {string}\n   */\n  get min(): string {\n    return this._min;\n  }\n\n  /**\n   * Setter for _min\n   * @param {string} min\n   */\n  set min(min: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".min\",\n        min,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._min = min;\n    }\n  }\n\n  /**\n   * Getter for _max\n   * @return {string}\n   */\n  get max(): string {\n    return this._max;\n  }\n\n  /**\n   * Setter for _max\n   * @param {string} max\n   */\n  set max(max: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".max\",\n        max,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._max = max;\n    }\n  }\n\n  /**\n   * toJSON for *.score\n   * @return {\n   *    {\n   *      min: string,\n   *      max: string,\n   *      raw: string\n   *    }\n   *    }\n   */\n  toJSON(): {\n    min: string;\n    max: string;\n    raw: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","/**\n * Class for SCORM 2004's cmi *.score object\n */\nimport { CMIScore } from \"../common/score\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\n\nexport class Scorm2004CMIScore extends CMIScore {\n  private _scaled = \"\";\n\n  /**\n   * Constructor for cmi *.score\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.score\",\n      score_children: scorm2004_constants.score_children,\n      max: \"\",\n      invalidErrorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      invalidTypeCode: scorm2004_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm2004_errors.VALUE_OUT_OF_RANGE,\n      decimalRegex: scorm2004_regex.CMIDecimal,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n    this._scaled = \"\";\n    this._raw = \"\";\n    this._min = \"\";\n    this._max = \"\";\n  }\n\n  /**\n   * Getter for _scaled\n   * @return {string}\n   */\n  get scaled(): string {\n    return this._scaled;\n  }\n\n  /**\n   * Setter for _scaled\n   * @param {string} scaled\n   */\n  set scaled(scaled: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".scaled\", scaled, scorm2004_regex.CMIDecimal) &&\n      check2004ValidRange(this._cmi_element + \".scaled\", scaled, scorm2004_regex.scaled_range)\n    ) {\n      this._scaled = scaled;\n    }\n  }\n\n  /**\n   * toJSON for cmi *.score\n   *\n   * @return {\n   *    {\n   *      scaled: string,\n   *      raw: string,\n   *      min: string,\n   *      max: string\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    scaled: string;\n    raw: string;\n    min: string;\n    max: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      scaled: this.scaled,\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_lms object\n * @extends CMIArray\n */\nexport class CMICommentsFromLMS extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_lms Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.comments_from_lms\",\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner object\n */\n\nexport class CMICommentsFromLearner extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_learner Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.comments_from_learner\",\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner.n and cmi.comments_from_lms.n object\n */\n\nexport class CMICommentsObject extends BaseCMI {\n  private _comment = \"\";\n  private _location = \"\";\n  private _timestamp = \"\";\n  private readonly _readOnlyAfterInit: boolean;\n\n  /**\n   * Constructor for cmi.comments_from_learner.n and cmi.comments_from_lms.n\n   * @param {boolean} readOnlyAfterInit\n   */\n  constructor(readOnlyAfterInit: boolean = false) {\n    super(\"cmi.comments_from_learner.n\");\n    this._comment = \"\";\n    this._location = \"\";\n    this._timestamp = \"\";\n    this._readOnlyAfterInit = readOnlyAfterInit;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _comment\n   * @return {string}\n   */\n  get comment(): string {\n    return this._comment;\n  }\n\n  /**\n   * Setter for _comment\n   * @param {string} comment\n   */\n  set comment(comment: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".comment\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".comment\",\n          comment,\n          scorm2004_regex.CMILangString4000,\n          true,\n        )\n      ) {\n        this._comment = comment;\n      }\n    }\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".location\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".location\",\n          location,\n          scorm2004_regex.CMIString250,\n        )\n      ) {\n        this._location = location;\n      }\n    }\n  }\n\n  /**\n   * Getter for _timestamp\n   * @return {string}\n   */\n  get timestamp(): string {\n    return this._timestamp;\n  }\n\n  /**\n   * Setter for _timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".timestamp\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".timestamp\", timestamp, scorm2004_regex.CMITime)\n      ) {\n        this._timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.comments_from_learner.n object\n   * @return {\n   *    {\n   *      comment: string,\n   *      location: string,\n   *      timestamp: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    comment: string;\n    location: string;\n    timestamp: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      comment: this.comment,\n      location: this.location,\n      timestamp: this.timestamp,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { Scorm2004CMIScore } from \"./score\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\n\n/**\n * Class representing SCORM 2004's `cmi.objectives` object\n * @extends CMIArray\n */\nexport class CMIObjectives extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives` Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.objectives\",\n      children: scorm2004_constants.objectives_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n\n  /**\n   * Find an objective by its ID\n   */\n  public findObjectiveById(id: string): CMIObjectivesObject | undefined {\n    return this.childArray.find((objective) => objective.id === id);\n  }\n\n  /**\n   * Find objective by its index\n   */\n  public findObjectiveByIndex(index: number): CMIObjectivesObject {\n    return this.childArray[index];\n  }\n\n  /**\n   * Set an objective at the given index\n   */\n  public setObjectiveByIndex(index: number, objective: CMIObjectivesObject) {\n    this.childArray[index] = objective;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.objectives.n object\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  private _id = \"\";\n  private _success_status = \"unknown\";\n  private _completion_status = \"unknown\";\n  private _progress_measure = \"\";\n  private _description = \"\";\n\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super(\"cmi.objectives.n\");\n    this.score = new Scorm2004CMIScore();\n  }\n\n  override reset() {\n    this._initialized = false;\n  }\n\n  public score: Scorm2004CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this._success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".success_status\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".success_status\",\n          success_status,\n          scorm2004_regex.CMISStatus,\n        )\n      ) {\n        this._success_status = success_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this._completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".completion_status\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".completion_status\",\n          completion_status,\n          scorm2004_regex.CMICStatus,\n        )\n      ) {\n        this._completion_status = completion_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this._progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".progress_measure\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".progress_measure\",\n          progress_measure,\n          scorm2004_regex.CMIDecimal,\n        ) &&\n        check2004ValidRange(\n          this._cmi_element + \".progress_measure\",\n          progress_measure,\n          scorm2004_regex.progress_range,\n        )\n      ) {\n        this._progress_measure = progress_measure;\n      }\n    }\n  }\n\n  /**\n   * Getter for _description\n   * @return {string}\n   */\n  get description(): string {\n    return this._description;\n  }\n\n  /**\n   * Setter for _description\n   * @param {string} description\n   */\n  set description(description: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".description\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".description\",\n          description,\n          scorm2004_regex.CMILangString250,\n          true,\n        )\n      ) {\n        this._description = description;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      success_status: string,\n   *      completion_status: string,\n   *      progress_measure: string,\n   *      description: string,\n   *      score: Scorm2004CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    success_status: string;\n    completion_status: string;\n    progress_measure: string;\n    description: string;\n    score: Scorm2004CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      success_status: this.success_status,\n      completion_status: this.completion_status,\n      progress_measure: this.progress_measure,\n      description: this.description,\n      score: this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","/**\n * Class representing metadata properties for SCORM 2004's cmi object\n */\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing metadata properties for SCORM 2004's cmi object\n */\nexport class CMIMetadata extends BaseCMI {\n  private __version = \"1.0\";\n  private __children = scorm2004_constants.cmi_children;\n\n  /**\n   * Constructor for CMIMetadata\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   */\n  get _version(): string {\n    return this.__version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version: string) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._version\",\n      scorm2004_errors.READ_ONLY_ELEMENT,\n    );\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {number} _children\n   */\n  set _children(_children: number) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._children\",\n      scorm2004_errors.READ_ONLY_ELEMENT,\n    );\n  }\n\n  /**\n   * Reset the metadata properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // No need to reset __version and __children as they are constants\n  }\n}\n","/**\n * Class representing learner properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing learner properties for SCORM 2004's cmi object\n */\nexport class CMILearner extends BaseCMI {\n  private _learner_id = \"\";\n  private _learner_name = \"\";\n\n  /**\n   * Constructor for CMILearner\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _learner_id\n   * @return {string}\n   */\n  get learner_id(): string {\n    return this._learner_id;\n  }\n\n  /**\n   * Setter for _learner_id. Can only be called before initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_id\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._learner_id = learner_id;\n    }\n  }\n\n  /**\n   * Getter for _learner_name\n   * @return {string}\n   */\n  get learner_name(): string {\n    return this._learner_name;\n  }\n\n  /**\n   * Setter for _learner_name. Can only be called before initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_name\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._learner_name = learner_name;\n    }\n  }\n\n  /**\n   * Reset the learner properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset learner_id and learner_name as they are read-only after initialization\n  }\n}\n","/**\n * Class representing status properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\n\n/**\n * Class representing status properties for SCORM 2004's cmi object\n */\nexport class CMIStatus extends BaseCMI {\n  private _completion_status = \"unknown\";\n  private _success_status = \"unknown\";\n  private _progress_measure = \"\";\n\n  /**\n   * Constructor for CMIStatus\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this._completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".completion_status\",\n        completion_status,\n        scorm2004_regex.CMICStatus,\n      )\n    ) {\n      this._completion_status = completion_status;\n    }\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this._success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".success_status\",\n        success_status,\n        scorm2004_regex.CMISStatus,\n      )\n    ) {\n      this._success_status = success_status;\n    }\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this._progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".progress_measure\",\n        progress_measure,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".progress_measure\",\n        progress_measure,\n        scorm2004_regex.progress_range,\n      )\n    ) {\n      this._progress_measure = progress_measure;\n    }\n  }\n\n  /**\n   * Reset the status properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._completion_status = \"unknown\";\n    this._success_status = \"unknown\";\n    this._progress_measure = \"\";\n  }\n}\n","/**\n * Class representing session properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\nimport * as Util from \"../../utilities\";\n\n/**\n * Class representing session properties for SCORM 2004's cmi object\n */\nexport class CMISession extends BaseCMI {\n  private _entry = \"\";\n  private _exit = \"\";\n  private _session_time = \"PT0H0M0S\";\n  private _total_time = \"\";\n\n  /**\n   * Constructor for CMISession\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this._entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".entry\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._entry = entry;\n    }\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    if (!this.jsonString) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exit\",\n        scorm2004_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    if (check2004ValidFormat(this._cmi_element + \".exit\", exit, scorm2004_regex.CMIExit, true)) {\n      this._exit = exit;\n    }\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    if (!this.jsonString) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".session_time\",\n        scorm2004_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".session_time\",\n        session_time,\n        scorm2004_regex.CMITimespan,\n      )\n    ) {\n      this._session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this._total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".total_time\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._total_time = total_time;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime(): string {\n    let sessionTime = this._session_time;\n    const startTime = this.start_time;\n\n    if (typeof startTime !== \"undefined\" && startTime !== null) {\n      const seconds = new Date().getTime() - startTime;\n      sessionTime = Util.getSecondsAsISODuration(seconds / 1000);\n    }\n\n    return Util.addTwoDurations(this._total_time, sessionTime, scorm2004_regex.CMITimespan);\n  }\n\n  /**\n   * Reset the session properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._entry = \"\";\n    this._exit = \"\";\n    this._session_time = \"PT0H0M0S\";\n    // Don't reset total_time as it's read-only after initialization\n  }\n}\n","/**\n * Class representing content properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\n\n/**\n * Class representing content properties for SCORM 2004's cmi object\n */\nexport class CMIContent extends BaseCMI {\n  private _location = \"\";\n  private _launch_data = \"\";\n  private _suspend_data = \"\";\n\n  /**\n   * Constructor for CMIContent\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".location\", location, scorm2004_regex.CMIString1000)\n    ) {\n      this._location = location;\n    }\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this._launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".launch_data\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._launch_data = launch_data;\n    }\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this._suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".suspend_data\",\n        suspend_data,\n        scorm2004_regex.CMIString64000,\n        true,\n      )\n    ) {\n      this._suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Reset the content properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._location = \"\";\n    // Don't reset launch_data as it's read-only after initialization\n    this._suspend_data = \"\";\n  }\n}\n","/**\n * Class representing settings properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing settings properties for SCORM 2004's cmi object\n */\nexport class CMISettings extends BaseCMI {\n  private _credit = \"credit\";\n  private _mode = \"normal\";\n  private _time_limit_action = \"continue,no message\";\n  private _max_time_allowed = \"\";\n\n  /**\n   * Constructor for CMISettings\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this._credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".credit\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._credit = credit;\n    }\n  }\n\n  /**\n   * Getter for _mode\n   * @return {string}\n   */\n  get mode(): string {\n    return this._mode;\n  }\n\n  /**\n   * Setter for _mode. Can only be called before initialization.\n   * @param {string} mode\n   */\n  set mode(mode: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".mode\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._mode = mode;\n    }\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this._time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".time_limit_action\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._time_limit_action = time_limit_action;\n    }\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this._max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".max_time_allowed\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._max_time_allowed = max_time_allowed;\n    }\n  }\n\n  /**\n   * Reset the settings properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset these properties as they are read-only after initialization\n  }\n}\n","/**\n * Class representing threshold properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing threshold properties for SCORM 2004's cmi object\n */\nexport class CMIThresholds extends BaseCMI {\n  private _scaled_passing_score = \"\";\n  private _completion_threshold = \"\";\n\n  /**\n   * Constructor for CMIThresholds\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score(): string {\n    return this._scaled_passing_score;\n  }\n\n  /**\n   * Setter for _scaled_passing_score. Can only be called before initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".scaled_passing_score\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._scaled_passing_score = scaled_passing_score;\n    }\n  }\n\n  /**\n   * Getter for _completion_threshold\n   * @return {string}\n   */\n  get completion_threshold(): string {\n    return this._completion_threshold;\n  }\n\n  /**\n   * Setter for _completion_threshold. Can only be called before initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".completion_threshold\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._completion_threshold = completion_threshold;\n    }\n  }\n\n  /**\n   * Reset the threshold properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset these properties as they are read-only after initialization\n  }\n}\n","import { BaseRootCMI } from \"../common/base_cmi\";\nimport { CMILearnerPreference } from \"./learner_preference\";\nimport { CMIInteractions } from \"./interactions\";\nimport { Scorm2004CMIScore } from \"./score\";\nimport { CMICommentsFromLearner, CMICommentsFromLMS } from \"./comments\";\nimport { CMIObjectives } from \"./objectives\";\nimport { CMIMetadata } from \"./metadata\";\nimport { CMILearner } from \"./learner\";\nimport { CMIStatus } from \"./status\";\nimport { CMISession } from \"./session\";\nimport { CMIContent } from \"./content\";\nimport { CMISettings } from \"./settings\";\nimport { CMIThresholds } from \"./thresholds\";\n\n/**\n * Class representing cmi object for SCORM 2004\n */\nexport class CMI extends BaseRootCMI {\n  /**\n   * Constructor for the SCORM 2004 cmi object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean = false) {\n    super(\"cmi\");\n    this.metadata = new CMIMetadata();\n    this.learner = new CMILearner();\n    this.status = new CMIStatus();\n    this.session = new CMISession();\n    this.content = new CMIContent();\n    this.settings = new CMISettings();\n    this.thresholds = new CMIThresholds();\n    this.learner_preference = new CMILearnerPreference();\n    this.score = new Scorm2004CMIScore();\n    this.comments_from_learner = new CMICommentsFromLearner();\n    this.comments_from_lms = new CMICommentsFromLMS();\n    this.interactions = new CMIInteractions();\n    this.objectives = new CMIObjectives();\n    if (initialized) this.initialize();\n  }\n\n  // New component classes\n  private metadata: CMIMetadata;\n  private learner: CMILearner;\n  private status: CMIStatus;\n  private session: CMISession;\n  private content: CMIContent;\n  private settings: CMISettings;\n  private thresholds: CMIThresholds;\n\n  // Original complex objects\n  public learner_preference: CMILearnerPreference;\n  public score: Scorm2004CMIScore;\n  public comments_from_learner: CMICommentsFromLearner;\n  public comments_from_lms: CMICommentsFromLMS;\n  public interactions: CMIInteractions;\n  public objectives: CMIObjectives;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    // Initialize new component classes\n    this.metadata?.initialize();\n    this.learner?.initialize();\n    this.status?.initialize();\n    this.session?.initialize();\n    this.content?.initialize();\n    this.settings?.initialize();\n    this.thresholds?.initialize();\n\n    // Initialize original complex objects\n    this.learner_preference?.initialize();\n    this.score?.initialize();\n    this.comments_from_learner?.initialize();\n    this.comments_from_lms?.initialize();\n    this.interactions?.initialize();\n    this.objectives?.initialize();\n  }\n\n  /**\n   * Called when API is moving to another SCO\n   */\n  reset() {\n    this._initialized = false;\n\n    // Reset new component classes\n    this.metadata?.reset();\n    this.learner?.reset();\n    this.status?.reset();\n    this.session?.reset();\n    this.content?.reset();\n    this.settings?.reset();\n    this.thresholds?.reset();\n\n    // Reset original complex objects\n    this.objectives?.reset(false);\n    this.interactions?.reset(true);\n    this.score?.reset();\n    this.comments_from_learner?.reset();\n    this.comments_from_lms?.reset();\n    this.learner_preference?.reset();\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   * @private\n   */\n  get _version(): string {\n    return this.metadata._version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   * @private\n   */\n  set _version(_version: string) {\n    this.metadata._version = _version;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.metadata._children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {number} _children\n   * @private\n   */\n  set _children(_children: number) {\n    this.metadata._children = _children;\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this.status.completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    this.status.completion_status = completion_status;\n  }\n\n  /**\n   * Getter for _completion_threshold\n   * @return {string}\n   */\n  get completion_threshold(): string {\n    return this.thresholds.completion_threshold;\n  }\n\n  /**\n   * Setter for _completion_threshold. Can only be called before initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold: string) {\n    this.thresholds.completion_threshold = completion_threshold;\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this.settings.credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    this.settings.credit = credit;\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this.session.entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    this.session.entry = entry;\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    this.session.jsonString = this.jsonString;\n    return this.session.exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    this.session.exit = exit;\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this.content.launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    this.content.launch_data = launch_data;\n  }\n\n  /**\n   * Getter for _learner_id\n   * @return {string}\n   */\n  get learner_id(): string {\n    return this.learner.learner_id;\n  }\n\n  /**\n   * Setter for _learner_id. Can only be called before initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id: string) {\n    this.learner.learner_id = learner_id;\n  }\n\n  /**\n   * Getter for _learner_name\n   * @return {string}\n   */\n  get learner_name(): string {\n    return this.learner.learner_name;\n  }\n\n  /**\n   * Setter for _learner_name. Can only be called before initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name: string) {\n    this.learner.learner_name = learner_name;\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this.content.location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    this.content.location = location;\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this.settings.max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    this.settings.max_time_allowed = max_time_allowed;\n  }\n\n  /**\n   * Getter for _mode\n   * @return {string}\n   */\n  get mode(): string {\n    return this.settings.mode;\n  }\n\n  /**\n   * Setter for _mode. Can only be called before initialization.\n   * @param {string} mode\n   */\n  set mode(mode: string) {\n    this.settings.mode = mode;\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this.status.progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    this.status.progress_measure = progress_measure;\n  }\n\n  /**\n   * Getter for _scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score(): string {\n    return this.thresholds.scaled_passing_score;\n  }\n\n  /**\n   * Setter for _scaled_passing_score. Can only be called before initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score: string) {\n    this.thresholds.scaled_passing_score = scaled_passing_score;\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    this.session.jsonString = this.jsonString;\n    return this.session.session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    this.session.session_time = session_time;\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this.status.success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    this.status.success_status = success_status;\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this.content.suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    this.content.suspend_data = suspend_data;\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this.settings.time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    this.settings.time_limit_action = time_limit_action;\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this.session.total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    this.session.total_time = total_time;\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime(): string {\n    return this.session.getCurrentTotalTime();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      comments_from_learner: CMICommentsFromLearner,\n   *      comments_from_lms: CMICommentsFromLMS,\n   *      completion_status: string,\n   *      completion_threshold: string,\n   *      credit: string,\n   *      entry: string,\n   *      exit: string,\n   *      interactions: CMIInteractions,\n   *      launch_data: string,\n   *      learner_id: string,\n   *      learner_name: string,\n   *      learner_preference: CMILearnerPreference,\n   *      location: string,\n   *      max_time_allowed: string,\n   *      mode: string,\n   *      objectives: CMIObjectives,\n   *      progress_measure: string,\n   *      scaled_passing_score: string,\n   *      score: Scorm2004CMIScore,\n   *      session_time: string,\n   *      success_status: string,\n   *      suspend_data: string,\n   *      time_limit_action: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    comments_from_learner: CMICommentsFromLearner;\n    comments_from_lms: CMICommentsFromLMS;\n    completion_status: string;\n    completion_threshold: string;\n    credit: string;\n    entry: string;\n    exit: string;\n    interactions: CMIInteractions;\n    launch_data: string;\n    learner_id: string;\n    learner_name: string;\n    learner_preference: CMILearnerPreference;\n    location: string;\n    max_time_allowed: string;\n    mode: string;\n    objectives: CMIObjectives;\n    progress_measure: string;\n    scaled_passing_score: string;\n    score: Scorm2004CMIScore;\n    session_time: string;\n    success_status: string;\n    suspend_data: string;\n    time_limit_action: string;\n  } {\n    this.jsonString = true;\n\n    // Set jsonString flag on component classes that need it\n    this.session.jsonString = true;\n\n    const result = {\n      comments_from_learner: this.comments_from_learner,\n      comments_from_lms: this.comments_from_lms,\n      completion_status: this.completion_status,\n      completion_threshold: this.completion_threshold,\n      credit: this.credit,\n      entry: this.entry,\n      exit: this.exit,\n      interactions: this.interactions,\n      launch_data: this.launch_data,\n      learner_id: this.learner_id,\n      learner_name: this.learner_name,\n      learner_preference: this.learner_preference,\n      location: this.location,\n      max_time_allowed: this.max_time_allowed,\n      mode: this.mode,\n      objectives: this.objectives,\n      progress_measure: this.progress_measure,\n      scaled_passing_score: this.scaled_passing_score,\n      score: this.score,\n      session_time: this.session_time,\n      success_status: this.success_status,\n      suspend_data: this.suspend_data,\n      time_limit_action: this.time_limit_action,\n    };\n\n    // Clean up jsonString flags\n    delete this.jsonString;\n    delete this.session.jsonString;\n\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { NAVBoolean } from \"../../constants/enums\";\nimport { CMIArray } from \"../common/array\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Sequencing } from \"./sequencing/sequencing\";\n\n/**\n * Class representing SCORM 2004's adl object\n */\nexport class ADL extends BaseCMI {\n  /**\n   * Constructor for adl\n   */\n  constructor() {\n    super(\"adl\");\n    this.nav = new ADLNav();\n    this.data = new ADLData();\n  }\n\n  public nav: ADLNav;\n  public data = new ADLData();\n  private _sequencing: Sequencing | null = null;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.nav?.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this.nav?.reset();\n  }\n\n  /**\n   * Getter for sequencing\n   * @return {Sequencing | null}\n   */\n  get sequencing(): Sequencing | null {\n    return this._sequencing;\n  }\n\n  /**\n   * Setter for sequencing\n   * @param {Sequencing | null} sequencing\n   */\n  set sequencing(sequencing: Sequencing | null) {\n    this._sequencing = sequencing;\n    if (sequencing) {\n      sequencing.adlNav = this.nav;\n      this.nav.sequencing = sequencing;\n    }\n  }\n\n  /**\n   * toJSON for adl\n   * @return {\n   *    {\n   *      nav: ADLNav,\n   *      data: ADLData\n   *    }\n   *  }\n   */\n  toJSON(): {\n    nav: ADLNav;\n    data: ADLData;\n  } {\n    this.jsonString = true;\n    const result = {\n      nav: this.nav,\n      data: this.data,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's `adl.nav` object\n */\n\nexport class ADLNav extends BaseCMI {\n  private _request = \"_none_\";\n  private _sequencing: Sequencing | null = null;\n\n  /**\n   * Constructor for `adl.nav`\n   */\n  constructor() {\n    super(\"adl.nav\");\n    this.request_valid = new ADLNavRequestValid();\n  }\n\n  public request_valid: ADLNavRequestValid;\n\n  /**\n   * Getter for sequencing\n   * @return {Sequencing | null}\n   */\n  get sequencing(): Sequencing | null {\n    return this._sequencing;\n  }\n\n  /**\n   * Setter for sequencing\n   * @param {Sequencing | null} sequencing\n   */\n  set sequencing(sequencing: Sequencing | null) {\n    this._sequencing = sequencing;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.request_valid?.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._request = \"_none_\";\n    this._sequencing = null;\n    this.request_valid?.reset();\n  }\n\n  /**\n   * Getter for _request\n   * @return {string}\n   */\n  get request(): string {\n    return this._request;\n  }\n\n  /**\n   * Setter for _request\n   * @param {string} request\n   */\n  set request(request: string) {\n    if (check2004ValidFormat(this._cmi_element + \".request\", request, scorm2004_regex.NAVEvent)) {\n      // Only process if the request is different from the current request\n      if (this._request !== request) {\n        this._request = request;\n\n        // Process the navigation request using the sequencing implementation\n        if (this._sequencing) {\n          this._sequencing.processNavigationRequest(request);\n        }\n      }\n    }\n  }\n\n  /**\n   * toJSON for adl.nav\n   *\n   * @return {\n   *    {\n   *      request: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    request: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      request: this.request,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's `adl.data` object\n */\nexport class ADLData extends CMIArray {\n  constructor() {\n    super({\n      CMIElement: \"adl.data\",\n      children: scorm2004_constants.adl_data_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's adl.data.n object\n */\nexport class ADLDataObject extends BaseCMI {\n  private _id = \"\";\n  private _store = \"\";\n\n  constructor() {\n    super(\"adl.data.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _store\n   * @return {string}\n   */\n  get store(): string {\n    return this._store;\n  }\n\n  /**\n   * Setter for _store\n   * @param {string} store\n   */\n  set store(store: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".store\", store, scorm2004_regex.CMILangString4000)\n    ) {\n      this._store = store;\n    }\n  }\n\n  /**\n   * toJSON for adl.data.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      store: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    store: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this._id,\n      store: this._store,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl.nav.request_valid object\n */\n\nexport class ADLNavRequestValid extends BaseCMI {\n  private _continue = \"unknown\";\n  private _previous = \"unknown\";\n  private _choice: {\n    [key: string]: NAVBoolean;\n  } = {};\n  private _jump: {\n    [key: string]: NAVBoolean;\n  } = {};\n\n  /**\n   * Constructor for adl.nav.request_valid\n   */\n  constructor() {\n    super(\"adl.nav.request_valid\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._continue = \"unknown\";\n    this._previous = \"unknown\";\n  }\n\n  /**\n   * Getter for _continue\n   * @return {string}\n   */\n  get continue(): string {\n    return this._continue;\n  }\n\n  /**\n   * Setter for _continue. Just throws an error.\n   * @param {string} _continue\n   */\n  set continue(_continue: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".continue\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".continue\", _continue, scorm2004_regex.NAVBoolean)\n    ) {\n      this._continue = _continue;\n    }\n  }\n\n  /**\n   * Getter for _previous\n   * @return {string}\n   */\n  get previous(): string {\n    return this._previous;\n  }\n\n  /**\n   * Setter for _previous. Just throws an error.\n   * @param {string} _previous\n   */\n  set previous(_previous: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".previous\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".previous\", _previous, scorm2004_regex.NAVBoolean)\n    ) {\n      this._previous = _previous;\n    }\n  }\n\n  /**\n   * Getter for _choice\n   * @return {{ [key: string]: NAVBoolean }}\n   */\n  get choice(): { [key: string]: NAVBoolean } {\n    return this._choice;\n  }\n\n  /**\n   * Setter for _choice\n   * @param {{ [key: string]: string }} choice\n   */\n  set choice(choice: { [key: string]: string }) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".choice\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (typeof choice !== \"object\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".choice\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    for (const key in choice) {\n      if ({}.hasOwnProperty.call(choice, key)) {\n        if (\n          check2004ValidFormat(\n            this._cmi_element + \".choice.\" + key,\n            choice[key],\n            scorm2004_regex.NAVBoolean,\n          ) &&\n          check2004ValidFormat(this._cmi_element + \".choice.\" + key, key, scorm2004_regex.NAVTarget)\n        ) {\n          // Convert string value to NAVBoolean enum value\n          const value = choice[key];\n          if (value === \"true\") {\n            this._choice[key] = NAVBoolean.TRUE;\n          } else if (value === \"false\") {\n            this._choice[key] = NAVBoolean.FALSE;\n          } else if (value === \"unknown\") {\n            this._choice[key] = NAVBoolean.UNKNOWN;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Getter for _jump\n   * @return {{ [key: string]: NAVBoolean }}\n   */\n  get jump(): { [key: string]: NAVBoolean } {\n    return this._jump;\n  }\n\n  /**\n   * Setter for _jump\n   * @param {{ [key: string]: string }} jump\n   */\n  set jump(jump: { [key: string]: string }) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".jump\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (typeof jump !== \"object\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".jump\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    for (const key in jump) {\n      if ({}.hasOwnProperty.call(jump, key)) {\n        if (\n          check2004ValidFormat(\n            this._cmi_element + \".jump.\" + key,\n            jump[key],\n            scorm2004_regex.NAVBoolean,\n          ) &&\n          check2004ValidFormat(this._cmi_element + \".jump.\" + key, key, scorm2004_regex.NAVTarget)\n        ) {\n          // Convert string value to NAVBoolean enum value\n          const value = jump[key];\n          if (value === \"true\") {\n            this._jump[key] = NAVBoolean.TRUE;\n          } else if (value === \"false\") {\n            this._jump[key] = NAVBoolean.FALSE;\n          } else if (value === \"unknown\") {\n            this._jump[key] = NAVBoolean.UNKNOWN;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * toJSON for adl.nav.request_valid\n   *\n   * @return {\n   *    {\n   *      previous: string,\n   *      continue: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    previous: string;\n    continue: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      previous: this._previous,\n      continue: this._continue,\n      choice: this._choice,\n      jump: this._jump,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Enum for rule condition operators\n */\nexport enum RuleConditionOperator {\n  NOT = \"not\",\n  AND = \"and\",\n  OR = \"or\",\n}\n\n/**\n * Enum for rule condition types\n */\nexport enum RuleConditionType {\n  SATISFIED = \"satisfied\",\n  OBJECTIVE_STATUS_KNOWN = \"objectiveStatusKnown\",\n  OBJECTIVE_MEASURE_KNOWN = \"objectiveMeasureKnown\",\n  OBJECTIVE_MEASURE_GREATER_THAN = \"objectiveMeasureGreaterThan\",\n  OBJECTIVE_MEASURE_LESS_THAN = \"objectiveMeasureLessThan\",\n  COMPLETED = \"completed\",\n  PROGRESS_KNOWN = \"progressKnown\",\n  ATTEMPTED = \"attempted\",\n  ATTEMPT_LIMIT_EXCEEDED = \"attemptLimitExceeded\",\n  TIME_LIMIT_EXCEEDED = \"timeLimitExceeded\",\n  OUTSIDE_AVAILABLE_TIME_RANGE = \"outsideAvailableTimeRange\",\n  ALWAYS = \"always\",\n}\n\n/**\n * Enum for rule action types\n */\nexport enum RuleActionType {\n  SKIP = \"skip\",\n  DISABLED = \"disabled\",\n  HIDE_FROM_CHOICE = \"hideFromChoice\",\n  STOP_FORWARD_TRAVERSAL = \"stopForwardTraversal\",\n  EXIT_PARENT = \"exitParent\",\n  EXIT_ALL = \"exitAll\",\n  RETRY = \"retry\",\n  RETRY_ALL = \"retryAll\",\n  CONTINUE = \"continue\",\n  PREVIOUS = \"previous\",\n  EXIT = \"exit\",\n}\n\n/**\n * Class representing a sequencing rule condition\n */\nexport class RuleCondition extends BaseCMI {\n  private _condition: RuleConditionType = RuleConditionType.ALWAYS;\n  private _operator: RuleConditionOperator | null = null;\n  private _parameters: Map<string, any> = new Map();\n\n  /**\n   * Constructor for RuleCondition\n   * @param {RuleConditionType} condition - The condition type\n   * @param {RuleConditionOperator | null} operator - The operator (null for no operator)\n   * @param {Map<string, any>} parameters - Additional parameters for the condition\n   */\n  constructor(\n    condition: RuleConditionType = RuleConditionType.ALWAYS,\n    operator: RuleConditionOperator | null = null,\n    parameters: Map<string, any> = new Map(),\n  ) {\n    super(\"ruleCondition\");\n    this._condition = condition;\n    this._operator = operator;\n    this._parameters = parameters;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for condition\n   * @return {RuleConditionType}\n   */\n  get condition(): RuleConditionType {\n    return this._condition;\n  }\n\n  /**\n   * Setter for condition\n   * @param {RuleConditionType} condition\n   */\n  set condition(condition: RuleConditionType) {\n    this._condition = condition;\n  }\n\n  /**\n   * Getter for operator\n   * @return {RuleConditionOperator | null}\n   */\n  get operator(): RuleConditionOperator | null {\n    return this._operator;\n  }\n\n  /**\n   * Setter for operator\n   * @param {RuleConditionOperator | null} operator\n   */\n  set operator(operator: RuleConditionOperator | null) {\n    this._operator = operator;\n  }\n\n  /**\n   * Getter for parameters\n   * @return {Map<string, any>}\n   */\n  get parameters(): Map<string, any> {\n    return this._parameters;\n  }\n\n  /**\n   * Setter for parameters\n   * @param {Map<string, any>} parameters\n   */\n  set parameters(parameters: Map<string, any>) {\n    this._parameters = parameters;\n  }\n\n  /**\n   * Evaluate the condition for an activity\n   * @param {Activity} activity - The activity to evaluate the condition for\n   * @return {boolean} - True if the condition is met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    switch (this._condition) {\n      case RuleConditionType.SATISFIED:\n        return activity.successStatus === SuccessStatus.PASSED;\n      case RuleConditionType.OBJECTIVE_STATUS_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RuleConditionType.OBJECTIVE_MEASURE_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RuleConditionType.OBJECTIVE_MEASURE_GREATER_THAN: {\n        const greaterThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure > greaterThanValue\n        );\n      }\n      case RuleConditionType.OBJECTIVE_MEASURE_LESS_THAN: {\n        const lessThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure < lessThanValue\n        );\n      }\n      case RuleConditionType.COMPLETED:\n        return activity.isCompleted;\n      case RuleConditionType.PROGRESS_KNOWN:\n        return activity.completionStatus !== \"unknown\";\n      case RuleConditionType.ATTEMPTED:\n        return activity.attemptCount > 0;\n      case RuleConditionType.ATTEMPT_LIMIT_EXCEEDED: {\n        const attemptLimit = this._parameters.get(\"attemptLimit\") || 0;\n        return attemptLimit > 0 && activity.attemptCount >= attemptLimit;\n      }\n      case RuleConditionType.TIME_LIMIT_EXCEEDED:\n        // Time limit exceeded would require additional tracking\n        return false;\n      case RuleConditionType.OUTSIDE_AVAILABLE_TIME_RANGE:\n        // Outside available time range would require additional tracking\n        return false;\n      case RuleConditionType.ALWAYS:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RuleCondition\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      condition: this._condition,\n      operator: this._operator,\n      parameters: Object.fromEntries(this._parameters),\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing a sequencing rule\n */\nexport class SequencingRule extends BaseCMI {\n  private _conditions: RuleCondition[] = [];\n  private _action: RuleActionType = RuleActionType.SKIP;\n  private _conditionCombination: RuleConditionOperator = RuleConditionOperator.AND;\n\n  /**\n   * Constructor for SequencingRule\n   * @param {RuleActionType} action - The action to take when the rule conditions are met\n   * @param {RuleConditionOperator} conditionCombination - How to combine multiple conditions\n   */\n  constructor(\n    action: RuleActionType = RuleActionType.SKIP,\n    conditionCombination: RuleConditionOperator = RuleConditionOperator.AND,\n  ) {\n    super(\"sequencingRule\");\n    this._action = action;\n    this._conditionCombination = conditionCombination;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._conditions = [];\n  }\n\n  /**\n   * Getter for conditions\n   * @return {RuleCondition[]}\n   */\n  get conditions(): RuleCondition[] {\n    return this._conditions;\n  }\n\n  /**\n   * Add a condition to the rule\n   * @param {RuleCondition} condition - The condition to add\n   */\n  addCondition(condition: RuleCondition): void {\n    if (!(condition instanceof RuleCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._conditions.push(condition);\n  }\n\n  /**\n   * Remove a condition from the rule\n   * @param {RuleCondition} condition - The condition to remove\n   * @return {boolean} - True if the condition was removed, false otherwise\n   */\n  removeCondition(condition: RuleCondition): boolean {\n    const index = this._conditions.indexOf(condition);\n    if (index !== -1) {\n      this._conditions.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for action\n   * @return {RuleActionType}\n   */\n  get action(): RuleActionType {\n    return this._action;\n  }\n\n  /**\n   * Setter for action\n   * @param {RuleActionType} action\n   */\n  set action(action: RuleActionType) {\n    this._action = action;\n  }\n\n  /**\n   * Getter for conditionCombination\n   * @return {RuleConditionOperator}\n   */\n  get conditionCombination(): RuleConditionOperator {\n    return this._conditionCombination;\n  }\n\n  /**\n   * Setter for conditionCombination\n   * @param {RuleConditionOperator} conditionCombination\n   */\n  set conditionCombination(conditionCombination: RuleConditionOperator) {\n    this._conditionCombination = conditionCombination;\n  }\n\n  /**\n   * Evaluate the rule for an activity\n   * @param {Activity} activity - The activity to evaluate the rule for\n   * @return {boolean} - True if the rule conditions are met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    if (this._conditions.length === 0) {\n      return true;\n    }\n\n    if (this._conditionCombination === RuleConditionOperator.AND) {\n      return this._conditions.every((condition) => condition.evaluate(activity));\n    } else if (this._conditionCombination === RuleConditionOperator.OR) {\n      return this._conditions.some((condition) => condition.evaluate(activity));\n    }\n\n    return false;\n  }\n\n  /**\n   * toJSON for SequencingRule\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      conditions: this._conditions,\n      action: this._action,\n      conditionCombination: this._conditionCombination,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing a collection of sequencing rules\n */\nexport class SequencingRules extends BaseCMI {\n  private _preConditionRules: SequencingRule[] = [];\n  private _exitConditionRules: SequencingRule[] = [];\n  private _postConditionRules: SequencingRule[] = [];\n\n  /**\n   * Constructor for SequencingRules\n   */\n  constructor() {\n    super(\"sequencingRules\");\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._preConditionRules = [];\n    this._exitConditionRules = [];\n    this._postConditionRules = [];\n  }\n\n  /**\n   * Getter for preConditionRules\n   * @return {SequencingRule[]}\n   */\n  get preConditionRules(): SequencingRule[] {\n    return this._preConditionRules;\n  }\n\n  /**\n   * Add a pre-condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addPreConditionRule(rule: SequencingRule): void {\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".preConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._preConditionRules.push(rule);\n  }\n\n  /**\n   * Getter for exitConditionRules\n   * @return {SequencingRule[]}\n   */\n  get exitConditionRules(): SequencingRule[] {\n    return this._exitConditionRules;\n  }\n\n  /**\n   * Add an exit condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addExitConditionRule(rule: SequencingRule): void {\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exitConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._exitConditionRules.push(rule);\n  }\n\n  /**\n   * Getter for postConditionRules\n   * @return {SequencingRule[]}\n   */\n  get postConditionRules(): SequencingRule[] {\n    return this._postConditionRules;\n  }\n\n  /**\n   * Add a post-condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addPostConditionRule(rule: SequencingRule): void {\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".postConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._postConditionRules.push(rule);\n  }\n\n  /**\n   * Evaluate pre-condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluatePreConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._preConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Evaluate exit condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluateExitConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._exitConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Evaluate post-condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluatePostConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._postConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * toJSON for SequencingRules\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      preConditionRules: this._preConditionRules,\n      exitConditionRules: this._exitConditionRules,\n      postConditionRules: this._postConditionRules,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { CompletionStatus, SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Enum for rollup action types\n */\nexport enum RollupActionType {\n  SATISFIED = \"satisfied\",\n  NOT_SATISFIED = \"notSatisfied\",\n  COMPLETED = \"completed\",\n  INCOMPLETE = \"incomplete\",\n}\n\n/**\n * Enum for rollup condition types\n */\nexport enum RollupConditionType {\n  SATISFIED = \"satisfied\",\n  OBJECTIVE_STATUS_KNOWN = \"objectiveStatusKnown\",\n  OBJECTIVE_MEASURE_KNOWN = \"objectiveMeasureKnown\",\n  OBJECTIVE_MEASURE_GREATER_THAN = \"objectiveMeasureGreaterThan\",\n  OBJECTIVE_MEASURE_LESS_THAN = \"objectiveMeasureLessThan\",\n  COMPLETED = \"completed\",\n  PROGRESS_KNOWN = \"progressKnown\",\n  ATTEMPTED = \"attempted\",\n  NOT_ATTEMPTED = \"notAttempted\",\n  ALWAYS = \"always\",\n}\n\n/**\n * Enum for rollup consideration types\n */\nexport enum RollupConsiderationType {\n  ALL = \"all\",\n  ANY = \"any\",\n  NONE = \"none\",\n  AT_LEAST_COUNT = \"atLeastCount\",\n  AT_LEAST_PERCENT = \"atLeastPercent\",\n}\n\n/**\n * Class representing a rollup condition\n */\nexport class RollupCondition extends BaseCMI {\n  private _condition: RollupConditionType = RollupConditionType.ALWAYS;\n  private _parameters: Map<string, any> = new Map();\n\n  /**\n   * Constructor for RollupCondition\n   * @param {RollupConditionType} condition - The condition type\n   * @param {Map<string, any>} parameters - Additional parameters for the condition\n   */\n  constructor(\n    condition: RollupConditionType = RollupConditionType.ALWAYS,\n    parameters: Map<string, any> = new Map(),\n  ) {\n    super(\"rollupCondition\");\n    this._condition = condition;\n    this._parameters = parameters;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for condition\n   * @return {RollupConditionType}\n   */\n  get condition(): RollupConditionType {\n    return this._condition;\n  }\n\n  /**\n   * Setter for condition\n   * @param {RollupConditionType} condition\n   */\n  set condition(condition: RollupConditionType) {\n    this._condition = condition;\n  }\n\n  /**\n   * Getter for parameters\n   * @return {Map<string, any>}\n   */\n  get parameters(): Map<string, any> {\n    return this._parameters;\n  }\n\n  /**\n   * Setter for parameters\n   * @param {Map<string, any>} parameters\n   */\n  set parameters(parameters: Map<string, any>) {\n    this._parameters = parameters;\n  }\n\n  /**\n   * Evaluate the condition for an activity\n   * @param {Activity} activity - The activity to evaluate the condition for\n   * @return {boolean} - True if the condition is met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    switch (this._condition) {\n      case RollupConditionType.SATISFIED:\n        return activity.successStatus === SuccessStatus.PASSED;\n      case RollupConditionType.OBJECTIVE_STATUS_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RollupConditionType.OBJECTIVE_MEASURE_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RollupConditionType.OBJECTIVE_MEASURE_GREATER_THAN: {\n        const greaterThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure > greaterThanValue\n        );\n      }\n      case RollupConditionType.OBJECTIVE_MEASURE_LESS_THAN: {\n        const lessThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure < lessThanValue\n        );\n      }\n      case RollupConditionType.COMPLETED:\n        return activity.isCompleted;\n      case RollupConditionType.PROGRESS_KNOWN:\n        return activity.completionStatus !== CompletionStatus.UNKNOWN;\n      case RollupConditionType.ATTEMPTED:\n        return activity.attemptCount > 0;\n      case RollupConditionType.NOT_ATTEMPTED:\n        return activity.attemptCount === 0;\n      case RollupConditionType.ALWAYS:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RollupCondition\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      condition: this._condition,\n      parameters: Object.fromEntries(this._parameters),\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing a rollup rule\n */\nexport class RollupRule extends BaseCMI {\n  private _conditions: RollupCondition[] = [];\n  private _action: RollupActionType = RollupActionType.SATISFIED;\n  private _consideration: RollupConsiderationType = RollupConsiderationType.ALL;\n  private _minimumCount: number = 0;\n  private _minimumPercent: number = 0;\n\n  /**\n   * Constructor for RollupRule\n   * @param {RollupActionType} action - The action to take when the rule conditions are met\n   * @param {RollupConsiderationType} consideration - How to consider child activities\n   * @param {number} minimumCount - The minimum count for AT_LEAST_COUNT consideration\n   * @param {number} minimumPercent - The minimum percent for AT_LEAST_PERCENT consideration\n   */\n  constructor(\n    action: RollupActionType = RollupActionType.SATISFIED,\n    consideration: RollupConsiderationType = RollupConsiderationType.ALL,\n    minimumCount: number = 0,\n    minimumPercent: number = 0,\n  ) {\n    super(\"rollupRule\");\n    this._action = action;\n    this._consideration = consideration;\n    this._minimumCount = minimumCount;\n    this._minimumPercent = minimumPercent;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._conditions = [];\n  }\n\n  /**\n   * Getter for conditions\n   * @return {RollupCondition[]}\n   */\n  get conditions(): RollupCondition[] {\n    return this._conditions;\n  }\n\n  /**\n   * Add a condition to the rule\n   * @param {RollupCondition} condition - The condition to add\n   */\n  addCondition(condition: RollupCondition): void {\n    if (!(condition instanceof RollupCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._conditions.push(condition);\n  }\n\n  /**\n   * Remove a condition from the rule\n   * @param {RollupCondition} condition - The condition to remove\n   * @return {boolean} - True if the condition was removed, false otherwise\n   */\n  removeCondition(condition: RollupCondition): boolean {\n    const index = this._conditions.indexOf(condition);\n    if (index !== -1) {\n      this._conditions.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for action\n   * @return {RollupActionType}\n   */\n  get action(): RollupActionType {\n    return this._action;\n  }\n\n  /**\n   * Setter for action\n   * @param {RollupActionType} action\n   */\n  set action(action: RollupActionType) {\n    this._action = action;\n  }\n\n  /**\n   * Getter for consideration\n   * @return {RollupConsiderationType}\n   */\n  get consideration(): RollupConsiderationType {\n    return this._consideration;\n  }\n\n  /**\n   * Setter for consideration\n   * @param {RollupConsiderationType} consideration\n   */\n  set consideration(consideration: RollupConsiderationType) {\n    this._consideration = consideration;\n  }\n\n  /**\n   * Getter for minimumCount\n   * @return {number}\n   */\n  get minimumCount(): number {\n    return this._minimumCount;\n  }\n\n  /**\n   * Setter for minimumCount\n   * @param {number} minimumCount\n   */\n  set minimumCount(minimumCount: number) {\n    if (minimumCount >= 0) {\n      this._minimumCount = minimumCount;\n    }\n  }\n\n  /**\n   * Getter for minimumPercent\n   * @return {number}\n   */\n  get minimumPercent(): number {\n    return this._minimumPercent;\n  }\n\n  /**\n   * Setter for minimumPercent\n   * @param {number} minimumPercent\n   */\n  set minimumPercent(minimumPercent: number) {\n    if (minimumPercent >= 0 && minimumPercent <= 100) {\n      this._minimumPercent = minimumPercent;\n    }\n  }\n\n  /**\n   * Evaluate the rule for a set of child activities\n   * @param {Activity[]} children - The child activities to evaluate the rule for\n   * @return {boolean} - True if the rule conditions are met, false otherwise\n   */\n  evaluate(children: Activity[]): boolean {\n    if (children.length === 0) {\n      return false;\n    }\n\n    // Filter children that meet all conditions\n    const matchingChildren = children.filter((child) => {\n      return this._conditions.every((condition) => condition.evaluate(child));\n    });\n\n    // Apply consideration\n    switch (this._consideration) {\n      case RollupConsiderationType.ALL:\n        return matchingChildren.length === children.length;\n      case RollupConsiderationType.ANY:\n        return matchingChildren.length > 0;\n      case RollupConsiderationType.NONE:\n        return matchingChildren.length === 0;\n      case RollupConsiderationType.AT_LEAST_COUNT:\n        return matchingChildren.length >= this._minimumCount;\n      case RollupConsiderationType.AT_LEAST_PERCENT: {\n        const percent = (matchingChildren.length / children.length) * 100;\n        return percent >= this._minimumPercent;\n      }\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RollupRule\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      conditions: this._conditions,\n      action: this._action,\n      consideration: this._consideration,\n      minimumCount: this._minimumCount,\n      minimumPercent: this._minimumPercent,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing a collection of rollup rules\n */\nexport class RollupRules extends BaseCMI {\n  private _rules: RollupRule[] = [];\n\n  /**\n   * Constructor for RollupRules\n   */\n  constructor() {\n    super(\"rollupRules\");\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._rules = [];\n  }\n\n  /**\n   * Getter for rules\n   * @return {RollupRule[]}\n   */\n  get rules(): RollupRule[] {\n    return this._rules;\n  }\n\n  /**\n   * Add a rule\n   * @param {RollupRule} rule - The rule to add\n   */\n  addRule(rule: RollupRule): void {\n    if (!(rule instanceof RollupRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".rules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._rules.push(rule);\n  }\n\n  /**\n   * Remove a rule\n   * @param {RollupRule} rule - The rule to remove\n   * @return {boolean} - True if the rule was removed, false otherwise\n   */\n  removeRule(rule: RollupRule): boolean {\n    const index = this._rules.indexOf(rule);\n    if (index !== -1) {\n      this._rules.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Process rollup for an activity\n   * @param {Activity} activity - The activity to process rollup for\n   */\n  processRollup(activity: Activity): void {\n    if (!activity || activity.children.length === 0) {\n      return;\n    }\n\n    const children = activity.children;\n    let completionRollup = false;\n    let successRollup = false;\n\n    // Process each rule\n    for (const rule of this._rules) {\n      if (rule.evaluate(children)) {\n        switch (rule.action) {\n          case RollupActionType.SATISFIED:\n            activity.successStatus = SuccessStatus.PASSED;\n            successRollup = true;\n            break;\n          case RollupActionType.NOT_SATISFIED:\n            activity.successStatus = SuccessStatus.FAILED;\n            successRollup = true;\n            break;\n          case RollupActionType.COMPLETED:\n            activity.completionStatus = CompletionStatus.COMPLETED;\n            activity.isCompleted = true;\n            completionRollup = true;\n            break;\n          case RollupActionType.INCOMPLETE:\n            activity.completionStatus = CompletionStatus.INCOMPLETE;\n            activity.isCompleted = false;\n            completionRollup = true;\n            break;\n        }\n      }\n    }\n\n    // If no rules applied for completion, use default rollup\n    if (!completionRollup) {\n      this._defaultCompletionRollup(activity, children);\n    }\n\n    // If no rules applied for success, use default rollup\n    if (!successRollup) {\n      this._defaultSuccessRollup(activity, children);\n    }\n  }\n\n  /**\n   * Default completion rollup\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @private\n   */\n  private _defaultCompletionRollup(activity: Activity, children: Activity[]): void {\n    // If all children are completed, mark the parent as completed\n    const allCompleted = children.every((child) => child.isCompleted);\n    if (allCompleted) {\n      activity.completionStatus = CompletionStatus.COMPLETED;\n      activity.isCompleted = true;\n    } else {\n      // If any child is incomplete, mark the parent as incomplete\n      const anyIncomplete = children.some(\n        (child) => child.completionStatus === CompletionStatus.INCOMPLETE,\n      );\n      if (anyIncomplete) {\n        activity.completionStatus = CompletionStatus.INCOMPLETE;\n        activity.isCompleted = false;\n      }\n    }\n  }\n\n  /**\n   * Default success rollup\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @private\n   */\n  private _defaultSuccessRollup(activity: Activity, children: Activity[]): void {\n    // If all children are satisfied, mark the parent as satisfied\n    const allSatisfied = children.every((child) => child.successStatus === SuccessStatus.PASSED);\n    if (allSatisfied) {\n      activity.successStatus = SuccessStatus.PASSED;\n    } else {\n      // If any child is not satisfied, mark the parent as not satisfied\n      const anyNotSatisfied = children.some(\n        (child) => child.successStatus === SuccessStatus.FAILED,\n      );\n      if (anyNotSatisfied) {\n        activity.successStatus = SuccessStatus.FAILED;\n      }\n    }\n  }\n\n  /**\n   * toJSON for RollupRules\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      rules: this._rules,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","const ValidLanguages: string[] = [\n  \"aa\",\n  \"ab\",\n  \"ae\",\n  \"af\",\n  \"ak\",\n  \"am\",\n  \"an\",\n  \"ar\",\n  \"as\",\n  \"av\",\n  \"ay\",\n  \"az\",\n  \"ba\",\n  \"be\",\n  \"bg\",\n  \"bh\",\n  \"bi\",\n  \"bm\",\n  \"bn\",\n  \"bo\",\n  \"br\",\n  \"bs\",\n  \"ca\",\n  \"ce\",\n  \"ch\",\n  \"co\",\n  \"cr\",\n  \"cs\",\n  \"cu\",\n  \"cv\",\n  \"cy\",\n  \"da\",\n  \"de\",\n  \"dv\",\n  \"dz\",\n  \"ee\",\n  \"el\",\n  \"en\",\n  \"eo\",\n  \"es\",\n  \"et\",\n  \"eu\",\n  \"fa\",\n  \"ff\",\n  \"fi\",\n  \"fj\",\n  \"fo\",\n  \"fr\",\n  \"fy\",\n  \"ga\",\n  \"gd\",\n  \"gl\",\n  \"gn\",\n  \"gu\",\n  \"gv\",\n  \"ha\",\n  \"he\",\n  \"hi\",\n  \"ho\",\n  \"hr\",\n  \"ht\",\n  \"hu\",\n  \"hy\",\n  \"hz\",\n  \"ia\",\n  \"id\",\n  \"ie\",\n  \"ig\",\n  \"ii\",\n  \"ik\",\n  \"io\",\n  \"is\",\n  \"it\",\n  \"iu\",\n  \"ja\",\n  \"jv\",\n  \"ka\",\n  \"kg\",\n  \"ki\",\n  \"kj\",\n  \"kk\",\n  \"kl\",\n  \"km\",\n  \"kn\",\n  \"ko\",\n  \"kr\",\n  \"ks\",\n  \"ku\",\n  \"kv\",\n  \"kw\",\n  \"ky\",\n  \"la\",\n  \"lb\",\n  \"lg\",\n  \"li\",\n  \"ln\",\n  \"lo\",\n  \"lt\",\n  \"lu\",\n  \"lv\",\n  \"mg\",\n  \"mh\",\n  \"mi\",\n  \"mk\",\n  \"ml\",\n  \"mn\",\n  \"mo\",\n  \"mr\",\n  \"ms\",\n  \"mt\",\n  \"my\",\n  \"na\",\n  \"nb\",\n  \"nd\",\n  \"ne\",\n  \"ng\",\n  \"nl\",\n  \"nn\",\n  \"no\",\n  \"nr\",\n  \"nv\",\n  \"ny\",\n  \"oc\",\n  \"oj\",\n  \"om\",\n  \"or\",\n  \"os\",\n  \"pa\",\n  \"pi\",\n  \"pl\",\n  \"ps\",\n  \"pt\",\n  \"qu\",\n  \"rm\",\n  \"rn\",\n  \"ro\",\n  \"ru\",\n  \"rw\",\n  \"sa\",\n  \"sc\",\n  \"sd\",\n  \"se\",\n  \"sg\",\n  \"sh\",\n  \"si\",\n  \"sk\",\n  \"sl\",\n  \"sm\",\n  \"sn\",\n  \"so\",\n  \"sq\",\n  \"sr\",\n  \"ss\",\n  \"st\",\n  \"su\",\n  \"sv\",\n  \"sw\",\n  \"ta\",\n  \"te\",\n  \"tg\",\n  \"th\",\n  \"ti\",\n  \"tk\",\n  \"tl\",\n  \"tn\",\n  \"to\",\n  \"tr\",\n  \"ts\",\n  \"tt\",\n  \"tw\",\n  \"ty\",\n  \"ug\",\n  \"uk\",\n  \"ur\",\n  \"uz\",\n  \"ve\",\n  \"vi\",\n  \"vo\",\n  \"wa\",\n  \"wo\",\n  \"xh\",\n  \"yi\",\n  \"yo\",\n  \"za\",\n  \"zh\",\n  \"zu\",\n  \"aar\",\n  \"abk\",\n  \"ave\",\n  \"afr\",\n  \"aka\",\n  \"amh\",\n  \"arg\",\n  \"ara\",\n  \"asm\",\n  \"ava\",\n  \"aym\",\n  \"aze\",\n  \"bak\",\n  \"bel\",\n  \"bul\",\n  \"bih\",\n  \"bis\",\n  \"bam\",\n  \"ben\",\n  \"tib\",\n  \"bod\",\n  \"bre\",\n  \"bos\",\n  \"cat\",\n  \"che\",\n  \"cha\",\n  \"cos\",\n  \"cre\",\n  \"cze\",\n  \"ces\",\n  \"chu\",\n  \"chv\",\n  \"wel\",\n  \"cym\",\n  \"dan\",\n  \"ger\",\n  \"deu\",\n  \"div\",\n  \"dzo\",\n  \"ewe\",\n  \"gre\",\n  \"ell\",\n  \"eng\",\n  \"epo\",\n  \"spa\",\n  \"est\",\n  \"baq\",\n  \"eus\",\n  \"per\",\n  \"fas\",\n  \"ful\",\n  \"fin\",\n  \"fij\",\n  \"fao\",\n  \"fre\",\n  \"fra\",\n  \"fry\",\n  \"gle\",\n  \"gla\",\n  \"glg\",\n  \"grn\",\n  \"guj\",\n  \"glv\",\n  \"hau\",\n  \"heb\",\n  \"hin\",\n  \"hmo\",\n  \"hrv\",\n  \"hat\",\n  \"hun\",\n  \"arm\",\n  \"hye\",\n  \"her\",\n  \"ina\",\n  \"ind\",\n  \"ile\",\n  \"ibo\",\n  \"iii\",\n  \"ipk\",\n  \"ido\",\n  \"ice\",\n  \"isl\",\n  \"ita\",\n  \"iku\",\n  \"jpn\",\n  \"jav\",\n  \"geo\",\n  \"kat\",\n  \"kon\",\n  \"kik\",\n  \"kua\",\n  \"kaz\",\n  \"kal\",\n  \"khm\",\n  \"kan\",\n  \"kor\",\n  \"kau\",\n  \"kas\",\n  \"kur\",\n  \"kom\",\n  \"cor\",\n  \"kir\",\n  \"lat\",\n  \"ltz\",\n  \"lug\",\n  \"lim\",\n  \"lin\",\n  \"lao\",\n  \"lit\",\n  \"lub\",\n  \"lav\",\n  \"mlg\",\n  \"mah\",\n  \"mao\",\n  \"mri\",\n  \"mac\",\n  \"mkd\",\n  \"mal\",\n  \"mon\",\n  \"mol\",\n  \"mar\",\n  \"may\",\n  \"msa\",\n  \"mlt\",\n  \"bur\",\n  \"mya\",\n  \"nau\",\n  \"nob\",\n  \"nde\",\n  \"nep\",\n  \"ndo\",\n  \"dut\",\n  \"nld\",\n  \"nno\",\n  \"nor\",\n  \"nbl\",\n  \"nav\",\n  \"nya\",\n  \"oci\",\n  \"oji\",\n  \"orm\",\n  \"ori\",\n  \"oss\",\n  \"pan\",\n  \"pli\",\n  \"pol\",\n  \"pus\",\n  \"por\",\n  \"que\",\n  \"roh\",\n  \"run\",\n  \"rum\",\n  \"ron\",\n  \"rus\",\n  \"kin\",\n  \"san\",\n  \"srd\",\n  \"snd\",\n  \"sme\",\n  \"sag\",\n  \"slo\",\n  \"sin\",\n  \"slk\",\n  \"slv\",\n  \"smo\",\n  \"sna\",\n  \"som\",\n  \"alb\",\n  \"sqi\",\n  \"srp\",\n  \"ssw\",\n  \"sot\",\n  \"sun\",\n  \"swe\",\n  \"swa\",\n  \"tam\",\n  \"tel\",\n  \"tgk\",\n  \"tha\",\n  \"tir\",\n  \"tuk\",\n  \"tgl\",\n  \"tsn\",\n  \"ton\",\n  \"tur\",\n  \"tso\",\n  \"tat\",\n  \"twi\",\n  \"tah\",\n  \"uig\",\n  \"ukr\",\n  \"urd\",\n  \"uzb\",\n  \"ven\",\n  \"vie\",\n  \"vol\",\n  \"wln\",\n  \"wol\",\n  \"xho\",\n  \"yid\",\n  \"yor\",\n  \"zha\",\n  \"chi\",\n  \"zho\",\n  \"zul\",\n];\nexport default ValidLanguages;\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { scorm2004_regex } from \"../../../constants/regex\";\nimport { check2004ValidFormat } from \"../validation\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { CompletionStatus, SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Class representing a single activity in the SCORM 2004 activity tree\n */\nexport class Activity extends BaseCMI {\n  private _id: string = \"\";\n  private _title: string = \"\";\n  private _children: Activity[] = [];\n  private _parent: Activity | null = null;\n  private _isVisible: boolean = true;\n  private _isActive: boolean = false;\n  private _isSuspended: boolean = false;\n  private _isCompleted: boolean = false;\n  private _completionStatus: CompletionStatus = CompletionStatus.UNKNOWN;\n  private _successStatus: SuccessStatus = SuccessStatus.UNKNOWN;\n  private _attemptCount: number = 0;\n  private _attemptCompletionAmount: number = 0;\n  private _attemptAbsoluteDuration: string = \"PT0H0M0S\";\n  private _attemptExperiencedDuration: string = \"PT0H0M0S\";\n  private _activityAbsoluteDuration: string = \"PT0H0M0S\";\n  private _activityExperiencedDuration: string = \"PT0H0M0S\";\n  private _objectiveSatisfiedStatus: boolean = false;\n  private _objectiveMeasureStatus: boolean = false;\n  private _objectiveNormalizedMeasure: number = 0;\n\n  /**\n   * Constructor for Activity\n   * @param {string} id - The unique identifier for this activity\n   * @param {string} title - The title of this activity\n   */\n  constructor(id: string = \"\", title: string = \"\") {\n    super(\"activity\");\n    this._id = id;\n    this._title = title;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    // Initialize children\n    for (const child of this._children) {\n      child.initialize();\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._isActive = false;\n    this._isSuspended = false;\n    this._isCompleted = false;\n    this._completionStatus = CompletionStatus.UNKNOWN;\n    this._successStatus = SuccessStatus.UNKNOWN;\n    this._attemptCount = 0;\n    this._attemptCompletionAmount = 0;\n    this._attemptAbsoluteDuration = \"PT0H0M0S\";\n    this._attemptExperiencedDuration = \"PT0H0M0S\";\n    this._activityAbsoluteDuration = \"PT0H0M0S\";\n    this._activityExperiencedDuration = \"PT0H0M0S\";\n    this._objectiveSatisfiedStatus = false;\n    this._objectiveMeasureStatus = false;\n    this._objectiveNormalizedMeasure = 0;\n\n    // Reset children\n    for (const child of this._children) {\n      child.reset();\n    }\n  }\n\n  /**\n   * Getter for id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for title\n   * @return {string}\n   */\n  get title(): string {\n    return this._title;\n  }\n\n  /**\n   * Setter for title\n   * @param {string} title\n   */\n  set title(title: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".title\", title, scorm2004_regex.CMILangString250)\n    ) {\n      this._title = title;\n    }\n  }\n\n  /**\n   * Getter for children\n   * @return {Activity[]}\n   */\n  get children(): Activity[] {\n    return this._children;\n  }\n\n  /**\n   * Add a child activity to this activity\n   * @param {Activity} child - The child activity to add\n   */\n  addChild(child: Activity): void {\n    if (!(child instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".children\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    child._parent = this;\n    this._children.push(child);\n  }\n\n  /**\n   * Remove a child activity from this activity\n   * @param {Activity} child - The child activity to remove\n   * @return {boolean} - True if the child was removed, false otherwise\n   */\n  removeChild(child: Activity): boolean {\n    const index = this._children.indexOf(child);\n    if (index !== -1) {\n      this._children.splice(index, 1);\n      child._parent = null;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for parent\n   * @return {Activity | null}\n   */\n  get parent(): Activity | null {\n    return this._parent;\n  }\n\n  /**\n   * Getter for isVisible\n   * @return {boolean}\n   */\n  get isVisible(): boolean {\n    return this._isVisible;\n  }\n\n  /**\n   * Setter for isVisible\n   * @param {boolean} isVisible\n   */\n  set isVisible(isVisible: boolean) {\n    this._isVisible = isVisible;\n  }\n\n  /**\n   * Getter for isActive\n   * @return {boolean}\n   */\n  get isActive(): boolean {\n    return this._isActive;\n  }\n\n  /**\n   * Setter for isActive\n   * @param {boolean} isActive\n   */\n  set isActive(isActive: boolean) {\n    this._isActive = isActive;\n  }\n\n  /**\n   * Getter for isSuspended\n   * @return {boolean}\n   */\n  get isSuspended(): boolean {\n    return this._isSuspended;\n  }\n\n  /**\n   * Setter for isSuspended\n   * @param {boolean} isSuspended\n   */\n  set isSuspended(isSuspended: boolean) {\n    this._isSuspended = isSuspended;\n  }\n\n  /**\n   * Getter for isCompleted\n   * @return {boolean}\n   */\n  get isCompleted(): boolean {\n    return this._isCompleted;\n  }\n\n  /**\n   * Setter for isCompleted\n   * @param {boolean} isCompleted\n   */\n  set isCompleted(isCompleted: boolean) {\n    this._isCompleted = isCompleted;\n  }\n\n  /**\n   * Getter for completionStatus\n   * @return {CompletionStatus}\n   */\n  get completionStatus(): CompletionStatus {\n    return this._completionStatus;\n  }\n\n  /**\n   * Setter for completionStatus\n   * @param {CompletionStatus} completionStatus\n   */\n  set completionStatus(completionStatus: CompletionStatus) {\n    this._completionStatus = completionStatus;\n    this._isCompleted = completionStatus === CompletionStatus.COMPLETED;\n  }\n\n  /**\n   * Getter for successStatus\n   * @return {SuccessStatus}\n   */\n  get successStatus(): SuccessStatus {\n    return this._successStatus;\n  }\n\n  /**\n   * Setter for successStatus\n   * @param {SuccessStatus} successStatus\n   */\n  set successStatus(successStatus: SuccessStatus) {\n    this._successStatus = successStatus;\n  }\n\n  /**\n   * Getter for attemptCount\n   * @return {number}\n   */\n  get attemptCount(): number {\n    return this._attemptCount;\n  }\n\n  /**\n   * Increment the attempt count\n   */\n  incrementAttemptCount(): void {\n    this._attemptCount++;\n  }\n\n  /**\n   * Getter for objectiveMeasureStatus\n   * @return {boolean}\n   */\n  get objectiveMeasureStatus(): boolean {\n    return this._objectiveMeasureStatus;\n  }\n\n  /**\n   * Setter for objectiveMeasureStatus\n   * @param {boolean} objectiveMeasureStatus\n   */\n  set objectiveMeasureStatus(objectiveMeasureStatus: boolean) {\n    this._objectiveMeasureStatus = objectiveMeasureStatus;\n  }\n\n  /**\n   * Getter for objectiveNormalizedMeasure\n   * @return {number}\n   */\n  get objectiveNormalizedMeasure(): number {\n    return this._objectiveNormalizedMeasure;\n  }\n\n  /**\n   * Setter for objectiveNormalizedMeasure\n   * @param {number} objectiveNormalizedMeasure\n   */\n  set objectiveNormalizedMeasure(objectiveNormalizedMeasure: number) {\n    this._objectiveNormalizedMeasure = objectiveNormalizedMeasure;\n  }\n\n  /**\n   * toJSON for Activity\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      id: this._id,\n      title: this._title,\n      isVisible: this._isVisible,\n      isActive: this._isActive,\n      isSuspended: this._isSuspended,\n      isCompleted: this._isCompleted,\n      completionStatus: this._completionStatus,\n      successStatus: this._successStatus,\n      attemptCount: this._attemptCount,\n      attemptCompletionAmount: this._attemptCompletionAmount,\n      attemptAbsoluteDuration: this._attemptAbsoluteDuration,\n      attemptExperiencedDuration: this._attemptExperiencedDuration,\n      activityAbsoluteDuration: this._activityAbsoluteDuration,\n      activityExperiencedDuration: this._activityExperiencedDuration,\n      objectiveSatisfiedStatus: this._objectiveSatisfiedStatus,\n      objectiveMeasureStatus: this._objectiveMeasureStatus,\n      objectiveNormalizedMeasure: this._objectiveNormalizedMeasure,\n      children: this._children.map((child) => child.toJSON()),\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\n\n/**\n * Class representing the SCORM 2004 activity tree\n */\nexport class ActivityTree extends BaseCMI {\n  private _root: Activity | null = null;\n  private _currentActivity: Activity | null = null;\n  private _suspendedActivity: Activity | null = null;\n  private _activities: Map<string, Activity> = new Map();\n\n  /**\n   * Constructor for ActivityTree\n   */\n  constructor() {\n    super(\"activityTree\");\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    if (this._root) {\n      this._root.initialize();\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._currentActivity = null;\n    this._suspendedActivity = null;\n    if (this._root) {\n      this._root.reset();\n    }\n  }\n\n  /**\n   * Getter for root\n   * @return {Activity | null}\n   */\n  get root(): Activity | null {\n    return this._root;\n  }\n\n  /**\n   * Setter for root\n   * @param {Activity} root\n   */\n  set root(root: Activity | null) {\n    if (root !== null && !(root instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".root\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._root = root;\n    if (root) {\n      this._activities.set(root.id, root);\n      this._addActivitiesToMap(root);\n    }\n  }\n\n  /**\n   * Recursively add activities to the activities map\n   * @param {Activity} activity\n   * @private\n   */\n  private _addActivitiesToMap(activity: Activity): void {\n    for (const child of activity.children) {\n      this._activities.set(child.id, child);\n      this._addActivitiesToMap(child);\n    }\n  }\n\n  /**\n   * Getter for currentActivity\n   * @return {Activity | null}\n   */\n  get currentActivity(): Activity | null {\n    return this._currentActivity;\n  }\n\n  /**\n   * Setter for currentActivity\n   * @param {Activity | null} activity\n   */\n  set currentActivity(activity: Activity | null) {\n    if (activity !== null && !(activity instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".currentActivity\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n\n    // If there's already a current activity, deactivate it\n    if (this._currentActivity) {\n      this._currentActivity.isActive = false;\n    }\n\n    // Set the new current activity and activate it\n    this._currentActivity = activity;\n    if (activity) {\n      activity.isActive = true;\n    }\n  }\n\n  /**\n   * Getter for suspendedActivity\n   * @return {Activity | null}\n   */\n  get suspendedActivity(): Activity | null {\n    return this._suspendedActivity;\n  }\n\n  /**\n   * Setter for suspendedActivity\n   * @param {Activity | null} activity\n   */\n  set suspendedActivity(activity: Activity | null) {\n    if (activity !== null && !(activity instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".suspendedActivity\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n\n    // If there's already a suspended activity, unsuspend it\n    if (this._suspendedActivity) {\n      this._suspendedActivity.isSuspended = false;\n    }\n\n    // Set the new suspended activity and mark it as suspended\n    this._suspendedActivity = activity;\n    if (activity) {\n      activity.isSuspended = true;\n    }\n  }\n\n  /**\n   * Get an activity by ID\n   * @param {string} id - The ID of the activity to get\n   * @return {Activity | undefined} - The activity with the given ID, or undefined if not found\n   */\n  getActivity(id: string): Activity | undefined {\n    return this._activities.get(id);\n  }\n\n  /**\n   * Get all activities in the tree\n   * @return {Activity[]} - An array of all activities in the tree\n   */\n  getAllActivities(): Activity[] {\n    return Array.from(this._activities.values());\n  }\n\n  /**\n   * Get the parent of an activity\n   * @param {Activity} activity - The activity to get the parent of\n   * @return {Activity | null} - The parent of the activity, or null if it has no parent\n   */\n  getParent(activity: Activity): Activity | null {\n    return activity.parent;\n  }\n\n  /**\n   * Get the children of an activity\n   * @param {Activity} activity - The activity to get the children of\n   * @return {Activity[]} - An array of the activity's children\n   */\n  getChildren(activity: Activity): Activity[] {\n    return activity.children;\n  }\n\n  /**\n   * Get the siblings of an activity\n   * @param {Activity} activity - The activity to get the siblings of\n   * @return {Activity[]} - An array of the activity's siblings\n   */\n  getSiblings(activity: Activity): Activity[] {\n    if (!activity.parent) {\n      return [];\n    }\n    return activity.parent.children.filter((child) => child !== activity);\n  }\n\n  /**\n   * Get the next sibling of an activity\n   * @param {Activity} activity - The activity to get the next sibling of\n   * @return {Activity | null} - The next sibling of the activity, or null if it has no next sibling\n   */\n  getNextSibling(activity: Activity): Activity | null {\n    if (!activity.parent) {\n      return null;\n    }\n    const siblings = activity.parent.children;\n    const index = siblings.indexOf(activity);\n    if (index === -1 || index === siblings.length - 1) {\n      return null;\n    }\n    return siblings[index + 1];\n  }\n\n  /**\n   * Get the previous sibling of an activity\n   * @param {Activity} activity - The activity to get the previous sibling of\n   * @return {Activity | null} - The previous sibling of the activity, or null if it has no previous sibling\n   */\n  getPreviousSibling(activity: Activity): Activity | null {\n    if (!activity.parent) {\n      return null;\n    }\n    const siblings = activity.parent.children;\n    const index = siblings.indexOf(activity);\n    if (index <= 0) {\n      return null;\n    }\n    return siblings[index - 1];\n  }\n\n  /**\n   * Get the first child of an activity\n   * @param {Activity} activity - The activity to get the first child of\n   * @return {Activity | null} - The first child of the activity, or null if it has no children\n   */\n  getFirstChild(activity: Activity): Activity | null {\n    if (activity.children.length === 0) {\n      return null;\n    }\n    return activity.children[0];\n  }\n\n  /**\n   * Get the last child of an activity\n   * @param {Activity} activity - The activity to get the last child of\n   * @return {Activity | null} - The last child of the activity, or null if it has no children\n   */\n  getLastChild(activity: Activity): Activity | null {\n    if (activity.children.length === 0) {\n      return null;\n    }\n    return activity.children[activity.children.length - 1];\n  }\n\n  /**\n   * Get the common ancestor of two activities\n   * @param {Activity} activity1 - The first activity\n   * @param {Activity} activity2 - The second activity\n   * @return {Activity | null} - The common ancestor of the two activities, or null if they have no common ancestor\n   */\n  getCommonAncestor(activity1: Activity, activity2: Activity): Activity | null {\n    // Get the path from the root to activity1\n    const path1: Activity[] = [];\n    let current: Activity | null = activity1;\n    while (current) {\n      path1.unshift(current);\n      current = current.parent;\n    }\n\n    // Check if activity2 is in the path from the root to activity1\n    current = activity2;\n    while (current) {\n      if (path1.includes(current)) {\n        return current;\n      }\n      current = current.parent;\n    }\n\n    return null;\n  }\n\n  /**\n   * toJSON for ActivityTree\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      root: this._root,\n      currentActivity: this._currentActivity ? this._currentActivity.id : null,\n      suspendedActivity: this._suspendedActivity ? this._suspendedActivity.id : null,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\n\n/**\n * Class representing SCORM 2004 sequencing controls\n */\nexport class SequencingControls extends BaseCMI {\n  // Sequencing Control Modes\n  private _enabled: boolean = true;\n  private _choiceExit: boolean = true;\n  private _flow: boolean = false;\n  private _forwardOnly: boolean = false;\n  private _useCurrentAttemptObjectiveInfo: boolean = true;\n  private _useCurrentAttemptProgressInfo: boolean = true;\n\n  // Constrain Choice Controls\n  private _preventActivation: boolean = false;\n  private _constrainChoice: boolean = false;\n\n  // Rollup Controls\n  private _rollupObjectiveSatisfied: boolean = true;\n  private _rollupProgressCompletion: boolean = true;\n  private _objectiveMeasureWeight: number = 1.0;\n\n  /**\n   * Constructor for SequencingControls\n   */\n  constructor() {\n    super(\"sequencingControls\");\n  }\n\n  /**\n   * Reset the sequencing controls to their default values\n   */\n  reset() {\n    this._initialized = false;\n    this._enabled = true;\n    this._choiceExit = true;\n    this._flow = false;\n    this._forwardOnly = false;\n    this._useCurrentAttemptObjectiveInfo = true;\n    this._useCurrentAttemptProgressInfo = true;\n    this._preventActivation = false;\n    this._constrainChoice = false;\n    this._rollupObjectiveSatisfied = true;\n    this._rollupProgressCompletion = true;\n    this._objectiveMeasureWeight = 1.0;\n  }\n\n  /**\n   * Getter for enabled\n   * @return {boolean}\n   */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  /**\n   * Setter for enabled\n   * @param {boolean} enabled\n   */\n  set enabled(enabled: boolean) {\n    this._enabled = enabled;\n  }\n\n  /**\n   * Getter for choiceExit\n   * @return {boolean}\n   */\n  get choiceExit(): boolean {\n    return this._choiceExit;\n  }\n\n  /**\n   * Setter for choiceExit\n   * @param {boolean} choiceExit\n   */\n  set choiceExit(choiceExit: boolean) {\n    this._choiceExit = choiceExit;\n  }\n\n  /**\n   * Getter for flow\n   * @return {boolean}\n   */\n  get flow(): boolean {\n    return this._flow;\n  }\n\n  /**\n   * Setter for flow\n   * @param {boolean} flow\n   */\n  set flow(flow: boolean) {\n    this._flow = flow;\n  }\n\n  /**\n   * Getter for forwardOnly\n   * @return {boolean}\n   */\n  get forwardOnly(): boolean {\n    return this._forwardOnly;\n  }\n\n  /**\n   * Setter for forwardOnly\n   * @param {boolean} forwardOnly\n   */\n  set forwardOnly(forwardOnly: boolean) {\n    this._forwardOnly = forwardOnly;\n  }\n\n  /**\n   * Getter for useCurrentAttemptObjectiveInfo\n   * @return {boolean}\n   */\n  get useCurrentAttemptObjectiveInfo(): boolean {\n    return this._useCurrentAttemptObjectiveInfo;\n  }\n\n  /**\n   * Setter for useCurrentAttemptObjectiveInfo\n   * @param {boolean} useCurrentAttemptObjectiveInfo\n   */\n  set useCurrentAttemptObjectiveInfo(useCurrentAttemptObjectiveInfo: boolean) {\n    this._useCurrentAttemptObjectiveInfo = useCurrentAttemptObjectiveInfo;\n  }\n\n  /**\n   * Getter for useCurrentAttemptProgressInfo\n   * @return {boolean}\n   */\n  get useCurrentAttemptProgressInfo(): boolean {\n    return this._useCurrentAttemptProgressInfo;\n  }\n\n  /**\n   * Setter for useCurrentAttemptProgressInfo\n   * @param {boolean} useCurrentAttemptProgressInfo\n   */\n  set useCurrentAttemptProgressInfo(useCurrentAttemptProgressInfo: boolean) {\n    this._useCurrentAttemptProgressInfo = useCurrentAttemptProgressInfo;\n  }\n\n  /**\n   * Getter for preventActivation\n   * @return {boolean}\n   */\n  get preventActivation(): boolean {\n    return this._preventActivation;\n  }\n\n  /**\n   * Setter for preventActivation\n   * @param {boolean} preventActivation\n   */\n  set preventActivation(preventActivation: boolean) {\n    this._preventActivation = preventActivation;\n  }\n\n  /**\n   * Getter for constrainChoice\n   * @return {boolean}\n   */\n  get constrainChoice(): boolean {\n    return this._constrainChoice;\n  }\n\n  /**\n   * Setter for constrainChoice\n   * @param {boolean} constrainChoice\n   */\n  set constrainChoice(constrainChoice: boolean) {\n    this._constrainChoice = constrainChoice;\n  }\n\n  /**\n   * Getter for rollupObjectiveSatisfied\n   * @return {boolean}\n   */\n  get rollupObjectiveSatisfied(): boolean {\n    return this._rollupObjectiveSatisfied;\n  }\n\n  /**\n   * Setter for rollupObjectiveSatisfied\n   * @param {boolean} rollupObjectiveSatisfied\n   */\n  set rollupObjectiveSatisfied(rollupObjectiveSatisfied: boolean) {\n    this._rollupObjectiveSatisfied = rollupObjectiveSatisfied;\n  }\n\n  /**\n   * Getter for rollupProgressCompletion\n   * @return {boolean}\n   */\n  get rollupProgressCompletion(): boolean {\n    return this._rollupProgressCompletion;\n  }\n\n  /**\n   * Setter for rollupProgressCompletion\n   * @param {boolean} rollupProgressCompletion\n   */\n  set rollupProgressCompletion(rollupProgressCompletion: boolean) {\n    this._rollupProgressCompletion = rollupProgressCompletion;\n  }\n\n  /**\n   * Getter for objectiveMeasureWeight\n   * @return {number}\n   */\n  get objectiveMeasureWeight(): number {\n    return this._objectiveMeasureWeight;\n  }\n\n  /**\n   * Setter for objectiveMeasureWeight\n   * @param {number} objectiveMeasureWeight\n   */\n  set objectiveMeasureWeight(objectiveMeasureWeight: number) {\n    if (objectiveMeasureWeight >= 0 && objectiveMeasureWeight <= 1) {\n      this._objectiveMeasureWeight = objectiveMeasureWeight;\n    }\n  }\n\n  /**\n   * Check if choice navigation is allowed\n   * @return {boolean} - True if choice navigation is allowed, false otherwise\n   */\n  isChoiceNavigationAllowed(): boolean {\n    return this._enabled && !this._constrainChoice;\n  }\n\n  /**\n   * Check if flow navigation is allowed\n   * @return {boolean} - True if flow navigation is allowed, false otherwise\n   */\n  isFlowNavigationAllowed(): boolean {\n    return this._enabled && this._flow;\n  }\n\n  /**\n   * Check if forward navigation is allowed\n   * @return {boolean} - True if forward navigation is allowed, false otherwise\n   */\n  isForwardNavigationAllowed(): boolean {\n    return this._enabled && (!this._forwardOnly || this._flow);\n  }\n\n  /**\n   * Check if backward navigation is allowed\n   * @return {boolean} - True if backward navigation is allowed, false otherwise\n   */\n  isBackwardNavigationAllowed(): boolean {\n    return this._enabled && !this._forwardOnly;\n  }\n\n  /**\n   * toJSON for SequencingControls\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      enabled: this._enabled,\n      choiceExit: this._choiceExit,\n      flow: this._flow,\n      forwardOnly: this._forwardOnly,\n      useCurrentAttemptObjectiveInfo: this._useCurrentAttemptObjectiveInfo,\n      useCurrentAttemptProgressInfo: this._useCurrentAttemptProgressInfo,\n      preventActivation: this._preventActivation,\n      constrainChoice: this._constrainChoice,\n      rollupObjectiveSatisfied: this._rollupObjectiveSatisfied,\n      rollupProgressCompletion: this._rollupProgressCompletion,\n      objectiveMeasureWeight: this._objectiveMeasureWeight,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { ActivityTree } from \"./activity_tree\";\nimport { RuleActionType, SequencingRules } from \"./sequencing_rules\";\nimport { SequencingControls } from \"./sequencing_controls\";\nimport { RollupRules } from \"./rollup_rules\";\nimport { ADLNav } from \"../adl\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\n\n/**\n * Class representing SCORM 2004 sequencing\n */\nexport class Sequencing extends BaseCMI {\n  private _activityTree: ActivityTree;\n  private _sequencingRules: SequencingRules;\n  private _sequencingControls: SequencingControls;\n  private _rollupRules: RollupRules;\n  private _adlNav: ADLNav | null = null;\n\n  /**\n   * Constructor for Sequencing\n   */\n  constructor() {\n    super(\"sequencing\");\n    this._activityTree = new ActivityTree();\n    this._sequencingRules = new SequencingRules();\n    this._sequencingControls = new SequencingControls();\n    this._rollupRules = new RollupRules();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this._activityTree.initialize();\n    this._sequencingRules.initialize();\n    this._sequencingControls.initialize();\n    this._rollupRules.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._activityTree.reset();\n    this._sequencingRules.reset();\n    this._sequencingControls.reset();\n    this._rollupRules.reset();\n  }\n\n  /**\n   * Getter for activityTree\n   * @return {ActivityTree}\n   */\n  get activityTree(): ActivityTree {\n    return this._activityTree;\n  }\n\n  /**\n   * Setter for activityTree\n   * @param {ActivityTree} activityTree\n   */\n  set activityTree(activityTree: ActivityTree) {\n    if (!(activityTree instanceof ActivityTree)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".activityTree\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._activityTree = activityTree;\n  }\n\n  /**\n   * Getter for sequencingRules\n   * @return {SequencingRules}\n   */\n  get sequencingRules(): SequencingRules {\n    return this._sequencingRules;\n  }\n\n  /**\n   * Setter for sequencingRules\n   * @param {SequencingRules} sequencingRules\n   */\n  set sequencingRules(sequencingRules: SequencingRules) {\n    if (!(sequencingRules instanceof SequencingRules)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".sequencingRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._sequencingRules = sequencingRules;\n  }\n\n  /**\n   * Getter for sequencingControls\n   * @return {SequencingControls}\n   */\n  get sequencingControls(): SequencingControls {\n    return this._sequencingControls;\n  }\n\n  /**\n   * Setter for sequencingControls\n   * @param {SequencingControls} sequencingControls\n   */\n  set sequencingControls(sequencingControls: SequencingControls) {\n    if (!(sequencingControls instanceof SequencingControls)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".sequencingControls\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._sequencingControls = sequencingControls;\n  }\n\n  /**\n   * Getter for rollupRules\n   * @return {RollupRules}\n   */\n  get rollupRules(): RollupRules {\n    return this._rollupRules;\n  }\n\n  /**\n   * Setter for rollupRules\n   * @param {RollupRules} rollupRules\n   */\n  set rollupRules(rollupRules: RollupRules) {\n    if (!(rollupRules instanceof RollupRules)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".rollupRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._rollupRules = rollupRules;\n  }\n\n  /**\n   * Getter for adlNav\n   * @return {ADLNav | null}\n   */\n  get adlNav(): ADLNav | null {\n    return this._adlNav;\n  }\n\n  /**\n   * Setter for adlNav\n   * @param {ADLNav | null} adlNav\n   */\n  set adlNav(adlNav: ADLNav | null) {\n    this._adlNav = adlNav;\n  }\n\n  /**\n   * Process navigation request\n   * @param {string} request - The navigation request\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processNavigationRequest(request: string): boolean {\n    if (!this._adlNav) {\n      return false;\n    }\n\n    // Set the navigation request\n    this._adlNav.request = request;\n\n    // Get the current activity\n    const currentActivity = this._activityTree.currentActivity;\n    if (!currentActivity) {\n      return false;\n    }\n\n    // Evaluate pre-condition rules\n    const preConditionAction = this._sequencingRules.evaluatePreConditionRules(currentActivity);\n    if (preConditionAction) {\n      // Handle pre-condition action\n      switch (preConditionAction) {\n        case RuleActionType.SKIP:\n          // Skip this activity\n          return false;\n        case RuleActionType.DISABLED:\n          // Disable this activity\n          return false;\n        case RuleActionType.HIDE_FROM_CHOICE:\n          // Hide this activity from choice\n          return false;\n        case RuleActionType.STOP_FORWARD_TRAVERSAL:\n          // Stop forward traversal\n          return false;\n        default:\n          break;\n      }\n    }\n\n    // Process the navigation request based on the request type\n    switch (request) {\n      case \"continue\":\n        return this.processContinueRequest(currentActivity);\n      case \"previous\":\n        return this.processPreviousRequest(currentActivity);\n      case \"choice\":\n        // Choice navigation would require additional parameters\n        return false;\n      case \"exit\":\n        return this.processExitRequest(currentActivity);\n      case \"exitAll\":\n        return this.processExitAllRequest();\n      case \"abandon\":\n        return this.processAbandonRequest(currentActivity);\n      case \"abandonAll\":\n        return this.processAbandonAllRequest();\n      case \"suspendAll\":\n        return this.processSuspendAllRequest(currentActivity);\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Process continue request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processContinueRequest(currentActivity: Activity): boolean {\n    // Check if continue is allowed\n    if (!this._sequencingControls.isForwardNavigationAllowed()) {\n      return false;\n    }\n\n    // Get the next activity\n    const nextActivity = this._activityTree.getNextSibling(currentActivity);\n    if (!nextActivity) {\n      return false;\n    }\n\n    // Evaluate exit condition rules\n    const exitConditionAction = this._sequencingRules.evaluateExitConditionRules(currentActivity);\n    if (exitConditionAction) {\n      // Handle exit condition action\n      switch (exitConditionAction) {\n        case RuleActionType.EXIT_PARENT: {\n          // Exit to parent\n          const parent = currentActivity.parent;\n          if (parent) {\n            this._activityTree.currentActivity = parent;\n            return true;\n          }\n          return false;\n        }\n        case RuleActionType.EXIT_ALL:\n          // Exit all\n          this._activityTree.currentActivity = null;\n          return true;\n        default:\n          break;\n      }\n    }\n\n    // Set the next activity as current\n    this._activityTree.currentActivity = nextActivity;\n\n    // Evaluate post-condition rules\n    const postConditionAction = this._sequencingRules.evaluatePostConditionRules(nextActivity);\n    if (postConditionAction) {\n      // Handle post-condition action\n      switch (postConditionAction) {\n        case RuleActionType.RETRY:\n          // Retry this activity\n          nextActivity.incrementAttemptCount();\n          return true;\n        case RuleActionType.RETRY_ALL:\n          // Retry all activities\n          this._activityTree.getAllActivities().forEach((activity) => {\n            activity.incrementAttemptCount();\n          });\n          return true;\n        case RuleActionType.CONTINUE:\n          // Continue to next activity\n          return this.processContinueRequest(nextActivity);\n        case RuleActionType.PREVIOUS:\n          // Go to previous activity\n          return this.processPreviousRequest(nextActivity);\n        case RuleActionType.EXIT:\n          // Exit this activity\n          this._activityTree.currentActivity = currentActivity;\n          return true;\n        default:\n          break;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Process previous request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processPreviousRequest(currentActivity: Activity): boolean {\n    // Check if backward navigation is allowed\n    if (!this._sequencingControls.isBackwardNavigationAllowed()) {\n      return false;\n    }\n\n    // Get the previous activity\n    const previousActivity = this._activityTree.getPreviousSibling(currentActivity);\n    if (!previousActivity) {\n      return false;\n    }\n\n    // Evaluate exit condition rules\n    const exitConditionAction = this._sequencingRules.evaluateExitConditionRules(currentActivity);\n    if (exitConditionAction) {\n      // Handle exit condition action\n      switch (exitConditionAction) {\n        case RuleActionType.EXIT_PARENT: {\n          // Exit to parent\n          const parent = currentActivity.parent;\n          if (parent) {\n            this._activityTree.currentActivity = parent;\n            return true;\n          }\n          return false;\n        }\n        case RuleActionType.EXIT_ALL:\n          // Exit all\n          this._activityTree.currentActivity = null;\n          return true;\n        default:\n          break;\n      }\n    }\n\n    // Set the previous activity as current\n    this._activityTree.currentActivity = previousActivity;\n\n    // Evaluate post-condition rules\n    const postConditionAction = this._sequencingRules.evaluatePostConditionRules(previousActivity);\n    if (postConditionAction) {\n      // Handle post-condition action\n      switch (postConditionAction) {\n        case RuleActionType.RETRY:\n          // Retry this activity\n          previousActivity.incrementAttemptCount();\n          return true;\n        case RuleActionType.RETRY_ALL:\n          // Retry all activities\n          this._activityTree.getAllActivities().forEach((activity) => {\n            activity.incrementAttemptCount();\n          });\n          return true;\n        case RuleActionType.CONTINUE:\n          // Continue to next activity\n          return this.processContinueRequest(previousActivity);\n        case RuleActionType.PREVIOUS:\n          // Go to previous activity\n          return this.processPreviousRequest(previousActivity);\n        case RuleActionType.EXIT:\n          // Exit this activity\n          this._activityTree.currentActivity = currentActivity;\n          return true;\n        default:\n          break;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Process exit request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processExitRequest(currentActivity: Activity): boolean {\n    // Check if exit is allowed\n    if (!this._sequencingControls.choiceExit) {\n      return false;\n    }\n\n    // Get the parent activity\n    const parent = currentActivity.parent;\n    if (!parent) {\n      return false;\n    }\n\n    // Set the parent activity as current\n    this._activityTree.currentActivity = parent;\n\n    return true;\n  }\n\n  /**\n   * Process exit all request\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processExitAllRequest(): boolean {\n    // Check if exit is allowed\n    if (!this._sequencingControls.choiceExit) {\n      return false;\n    }\n\n    // Set no activity as current\n    this._activityTree.currentActivity = null;\n\n    return true;\n  }\n\n  /**\n   * Process abandon request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processAbandonRequest(currentActivity: Activity): boolean {\n    // Get the parent activity\n    const parent = currentActivity.parent;\n    if (!parent) {\n      return false;\n    }\n\n    // Set the parent activity as current without processing exit rules\n    this._activityTree.currentActivity = parent;\n\n    return true;\n  }\n\n  /**\n   * Process abandon all request\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processAbandonAllRequest(): boolean {\n    // Set no activity as current without processing exit rules\n    this._activityTree.currentActivity = null;\n\n    return true;\n  }\n\n  /**\n   * Process suspend all request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processSuspendAllRequest(currentActivity: Activity): boolean {\n    // Set the current activity as suspended\n    this._activityTree.suspendedActivity = currentActivity;\n    this._activityTree.currentActivity = null;\n\n    return true;\n  }\n\n  /**\n   * Process rollup for the entire activity tree\n   */\n  processRollup(): void {\n    // Get the root activity\n    const root = this._activityTree.root;\n    if (!root) {\n      return;\n    }\n\n    // Process rollup from the bottom up\n    this._processRollupRecursive(root);\n  }\n\n  /**\n   * Process rollup recursively\n   * @param {Activity} activity - The activity to process rollup for\n   * @private\n   */\n  private _processRollupRecursive(activity: Activity): void {\n    // Process rollup for children first\n    for (const child of activity.children) {\n      this._processRollupRecursive(child);\n    }\n\n    // Process rollup for this activity\n    this._rollupRules.processRollup(activity);\n  }\n\n  /**\n   * toJSON for Sequencing\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      activityTree: this._activityTree,\n      sequencingRules: this._sequencingRules,\n      sequencingControls: this._sequencingControls,\n      rollupRules: this._rollupRules,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import BaseAPI from \"./BaseAPI\";\nimport { CMI } from \"./cmi/scorm2004/cmi\";\nimport * as Utilities from \"./utilities\";\nimport { StringKeyMap, stringMatches } from \"./utilities\";\nimport { global_constants, scorm2004_constants } from \"./constants/api_constants\";\nimport { scorm2004_errors } from \"./constants/error_codes\";\nimport { CMIObjectivesObject } from \"./cmi/scorm2004/objectives\";\nimport { ADL, ADLDataObject } from \"./cmi/scorm2004/adl\";\nimport { CommitObject, ResultObject, ScoreObject, Settings } from \"./types/api_types\";\nimport {\n  ActivitySettings,\n  RollupRuleSettings,\n  RollupRulesSettings,\n  SequencingControlsSettings,\n  SequencingRuleSettings,\n  SequencingRulesSettings,\n  SequencingSettings\n} from \"./types/sequencing_types\";\nimport { RuleCondition, SequencingRule } from \"./cmi/scorm2004/sequencing/sequencing_rules\";\nimport { RollupCondition, RollupRule } from \"./cmi/scorm2004/sequencing/rollup_rules\";\nimport { scorm2004_regex } from \"./constants/regex\"; // Import functions from extracted modules\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport {\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject\n} from \"./cmi/scorm2004/interactions\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { CorrectResponses, ResponseType } from \"./constants/response_constants\";\nimport { CMICommentsObject } from \"./cmi/scorm2004/comments\";\nimport ValidLanguages from \"./constants/language_constants\";\nimport { CompletionStatus, SuccessStatus } from \"./constants/enums\";\nimport { Sequencing } from \"./cmi/scorm2004/sequencing/sequencing\";\nimport { Activity } from \"./cmi/scorm2004/sequencing/activity\";\n\n/**\n * API class for SCORM 2004\n */\nclass Scorm2004API extends BaseAPI {\n  private _version: string = \"1.0\";\n  private _globalObjectives: CMIObjectivesObject[] = [];\n  private _sequencing: Sequencing;\n  private _extractedScoItemIds: string[] = [];\n\n  /**\n   * Constructor for SCORM 2004 API\n   * @param {Settings} settings\n   */\n  constructor(settings?: Settings) {\n    if (settings) {\n      if (settings.mastery_override === undefined) {\n        settings.mastery_override = false;\n      }\n    }\n\n    super(scorm2004_errors, settings);\n\n    this.cmi = new CMI();\n    this.adl = new ADL();\n    this._sequencing = new Sequencing();\n\n    // Connect the sequencing object to the ADL's sequencing property\n    // The Sequencing object is used for both configuration and runtime navigation processing\n    // It needs to be attached to the ADL object for runtime navigation requests (adl.nav.request)\n    this.adl.sequencing = this._sequencing;\n\n    // Configure sequencing if settings are provided\n    if (settings?.sequencing) {\n      this.configureSequencing(settings.sequencing);\n    }\n\n    // Rename functions to match 2004 Spec and expose to modules\n    this.Initialize = this.lmsInitialize;\n    this.Terminate = this.lmsFinish;\n    this.GetValue = this.lmsGetValue;\n    this.SetValue = this.lmsSetValue;\n    this.Commit = this.lmsCommit;\n    this.GetLastError = this.lmsGetLastError;\n    this.GetErrorString = this.lmsGetErrorString;\n    this.GetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  public cmi: CMI;\n  public adl: ADL;\n\n  public Initialize: () => string;\n  public Terminate: () => string;\n  public GetValue: (CMIElement: string) => string;\n  public SetValue: (CMIElement: string, value: any) => string;\n  public Commit: () => string;\n  public GetLastError: () => string;\n  public GetErrorString: (CMIErrorCode: string | number) => string;\n  public GetDiagnostic: (CMIErrorCode: string | number) => string;\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset(settings?: Settings) {\n    this.commonReset(settings);\n\n    this.cmi?.reset();\n    this.adl?.reset();\n    this._sequencing?.reset();\n  }\n\n  /**\n   * Getter for _version\n   * @return {string}\n   */\n  get version(): string {\n    return this._version;\n  }\n\n  /**\n   * Getter for _globalObjectives\n   */\n  get globalObjectives(): CMIObjectivesObject[] {\n    return this._globalObjectives;\n  }\n\n  /**\n   * Initialize function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize(): string {\n    this.cmi.initialize();\n    return this.initialize(\n      \"Initialize\",\n      \"LMS was already initialized!\",\n      \"LMS is already finished!\",\n    );\n  }\n\n  /**\n   * Terminate function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish(): string {\n    (async () => {\n      await this.internalFinish();\n    })();\n    return global_constants.SCORM_TRUE;\n  }\n\n  async internalFinish(): Promise<string> {\n    const result = await this.terminate(\"Terminate\", true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      if (this.adl.nav.request !== \"_none_\") {\n        const navActions: { [key: string]: string } = {\n          continue: \"SequenceNext\",\n          previous: \"SequencePrevious\",\n          choice: \"SequenceChoice\",\n          jump: \"SequenceJump\",\n          exit: \"SequenceExit\",\n          exitAll: \"SequenceExitAll\",\n          abandon: \"SequenceAbandon\",\n          abandonAll: \"SequenceAbandonAll\",\n        };\n\n        let request = this.adl.nav.request;\n        const choiceJumpRegex = new RegExp(scorm2004_regex.NAVEvent);\n        const matches = request.match(choiceJumpRegex);\n        let target = \"\";\n        if (matches) {\n          if (matches.groups?.choice_target) {\n            target = matches.groups?.choice_target;\n            request = \"choice\";\n          } else if (matches.groups?.jump_target) {\n            target = matches.groups?.jump_target;\n            request = \"jump\";\n          }\n        }\n        const action = navActions[request];\n        if (action) {\n          this.processListeners(action, \"adl.nav.request\", target);\n        }\n      } else if (this.settings.autoProgress) {\n        this.processListeners(\"SequenceNext\", null, \"next\");\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * GetValue function from SCORM 2004 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement: string): string {\n    const adlNavRequestRegex =\n      \"^adl\\\\.nav\\\\.request_valid\\\\.(choice|jump)\\\\.{target=\\\\S{0,}([a-zA-Z0-9-_]+)}$\";\n    if (stringMatches(CMIElement, adlNavRequestRegex)) {\n      const matches = CMIElement.match(adlNavRequestRegex);\n      const request = matches[1];\n      const target = matches[2].replace(\"{target=\", \"\").replace(\"}\", \"\");\n      if (request === \"choice\" || request === \"jump\") {\n        if (this.settings.scoItemIdValidator) {\n          return String(this.settings.scoItemIdValidator(target));\n        }\n        // If we have extracted IDs from sequencing, use those exclusively\n        if (this._extractedScoItemIds.length > 0) {\n          return String(this._extractedScoItemIds.includes(target));\n        }\n        // Otherwise use the scoItemIds from settings\n        return String(this.settings.scoItemIds.includes(target));\n      }\n    }\n    return this.getValue(\"GetValue\", true, CMIElement);\n  }\n\n  /**\n   * SetValue function from SCORM 2004 Spec\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement: string, value: any): string {\n    // Proceed with regular setting for non-objective elements or fallback behavior\n    return this.setValue(\"SetValue\", \"Commit\", true, CMIElement, value);\n  }\n\n  /**\n   * Commit function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit(): string {\n    if (this.settings.asyncCommit) {\n      this.scheduleCommit(500, \"Commit\");\n    } else {\n      (async () => {\n        await this.commit(\"Commit\", false);\n      })();\n    }\n    return global_constants.SCORM_TRUE;\n  }\n\n  /**\n   * GetLastError function from SCORM 2004 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError(): string {\n    return this.getLastError(\"GetLastError\");\n  }\n\n  /**\n   * GetErrorString function from SCORM 2004 Spec\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode: string | number): string {\n    return this.getErrorString(\"GetErrorString\", CMIErrorCode);\n  }\n\n  /**\n   * GetDiagnostic function from SCORM 2004 Spec\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode: string | number): string {\n    return this.getDiagnostic(\"GetDiagnostic\", CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object - delegates to CMIValueHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  override setCMIValue(CMIElement: string, value: any): string {\n    // Check if we're updating a global or local objective\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      const parts = CMIElement.split(\".\");\n      const index = Number(parts[2]);\n      const element_base = `cmi.objectives.${index}`;\n\n      let objective_id;\n      const setting_id = stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\\\\.id\");\n\n      if (setting_id) {\n        // If we're setting the objective ID, capture it directly\n        objective_id = value;\n      } else {\n        // Find existing objective ID if available\n        const objective = this.cmi.objectives.findObjectiveByIndex(index);\n        objective_id = objective ? objective.id : undefined;\n      }\n\n      // Check if the objective ID matches a global objective\n      const is_global = objective_id && this.settings.globalObjectiveIds.includes(objective_id);\n\n      if (is_global) {\n        // Locate or create an entry in _globalObjectives for the global objective\n        let global_index = this._globalObjectives.findIndex((obj) => obj.id === objective_id);\n\n        if (global_index === -1) {\n          global_index = this._globalObjectives.length;\n          const newGlobalObjective = new CMIObjectivesObject();\n          newGlobalObjective.id = objective_id;\n          this._globalObjectives.push(newGlobalObjective);\n        }\n\n        // Update the global objective\n        const global_element = CMIElement.replace(\n          element_base,\n          `_globalObjectives.${global_index}`,\n        );\n        this._commonSetCMIValue(\"SetGlobalObjectiveValue\", true, global_element, value);\n      }\n    }\n    return this._commonSetCMIValue(\"SetValue\", true, CMIElement, value);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array - delegates to CMIElementHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI|null}\n   */\n  getChildElement(CMIElement: string, value: any, foundFirstIndex: boolean): BaseCMI | null {\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      return new CMIObjectivesObject();\n    }\n\n    if (foundFirstIndex) {\n      if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+\")) {\n        return this.createCorrectResponsesObject(CMIElement, value);\n      } else if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+\")) {\n        return new CMIInteractionsObjectivesObject();\n      }\n    } else if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\")) {\n      return new CMIInteractionsObject();\n    }\n\n    if (stringMatches(CMIElement, \"cmi\\\\.comments_from_learner\\\\.\\\\d+\")) {\n      return new CMICommentsObject();\n    } else if (stringMatches(CMIElement, \"cmi\\\\.comments_from_lms\\\\.\\\\d+\")) {\n      return new CMICommentsObject(true);\n    }\n\n    if (stringMatches(CMIElement, \"adl\\\\.data\\\\.\\\\d+\")) {\n      return new ADLDataObject();\n    }\n\n    return null;\n  }\n\n  /**\n   * Creates a correct responses object for an interaction - delegates to CMIElementHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {BaseCMI|null}\n   */\n  private createCorrectResponsesObject(CMIElement: string, value: any): BaseCMI | null {\n    const parts = CMIElement.split(\".\");\n    const index = Number(parts[2]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    if (this.isInitialized()) {\n      if (typeof interaction === \"undefined\" || !interaction.type) {\n        this.throwSCORMError(CMIElement, scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED, CMIElement);\n        return null;\n      } else {\n        this.checkDuplicateChoiceResponse(CMIElement, interaction, value);\n        const response_type = CorrectResponses[interaction.type];\n        if (response_type) {\n          this.checkValidResponseType(CMIElement, response_type, value, interaction.type);\n        } else {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.GENERAL_SET_FAILURE,\n            `Incorrect Response Type: ${interaction.type}`,\n          );\n          return null;\n        }\n      }\n    }\n\n    if (this.lastErrorCode === \"0\") {\n      return new CMIInteractionsCorrectResponsesObject(interaction);\n    }\n\n    return null;\n  }\n\n  /**\n   * Checks for valid response types - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {ResponseType} response_type\n   * @param {any} value\n   * @param {string} interaction_type\n   */\n  checkValidResponseType(\n    CMIElement: string,\n    response_type: ResponseType,\n    value: any,\n    interaction_type: string,\n  ) {\n    let nodes = [];\n    if (response_type?.delimiter) {\n      nodes = String(value).split(response_type.delimiter);\n    } else {\n      nodes[0] = value;\n    }\n\n    if (nodes.length > 0 && nodes.length <= response_type.max) {\n      this.checkCorrectResponseValue(CMIElement, interaction_type, nodes, value);\n    } else if (nodes.length > response_type.max) {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.GENERAL_SET_FAILURE,\n        `Data Model Element Pattern Too Long: ${value}`,\n      );\n    }\n  }\n\n  /**\n   * Checks for duplicate 'choice' responses - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {CMIInteractionsObject} interaction\n   * @param {any} value\n   */\n  checkDuplicateChoiceResponse(CMIElement: string, interaction: CMIInteractionsObject, value: any) {\n    const interaction_count = interaction.correct_responses._count;\n    if (interaction.type === \"choice\") {\n      for (let i = 0; i < interaction_count && this.lastErrorCode === \"0\"; i++) {\n        const response = interaction.correct_responses.childArray[i];\n        if (response.pattern === value) {\n          this.throwSCORMError(CMIElement, scorm2004_errors.GENERAL_SET_FAILURE, `${value}`);\n        }\n      }\n    }\n  }\n\n  /**\n   * Validate correct response - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {*} value\n   */\n  validateCorrectResponse(CMIElement: string, value: any) {\n    const parts = CMIElement.split(\".\");\n    const index = Number(parts[2]);\n    const pattern_index = Number(parts[4]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    const interaction_count = interaction.correct_responses._count;\n    this.checkDuplicateChoiceResponse(CMIElement, interaction, value);\n\n    const response_type = CorrectResponses[interaction.type];\n    if (typeof response_type.limit === \"undefined\" || interaction_count <= response_type.limit) {\n      this.checkValidResponseType(CMIElement, response_type, value, interaction.type);\n\n      if (\n        (this.lastErrorCode === \"0\" &&\n          (!response_type.duplicate ||\n            !this.checkDuplicatedPattern(interaction.correct_responses, pattern_index, value))) ||\n        (this.lastErrorCode === \"0\" && value === \"\")\n      ) {\n        // do nothing, we want the inverse\n      } else {\n        if (this.lastErrorCode === \"0\") {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.GENERAL_SET_FAILURE,\n            `Data Model Element Pattern Already Exists: ${CMIElement} - ${value}`,\n          );\n        }\n      }\n    } else {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.GENERAL_SET_FAILURE,\n        `Data Model Element Collection Limit Reached: ${CMIElement} - ${value}`,\n      );\n    }\n  }\n\n  /**\n   * Gets a value from the CMI Object - delegates to CMIValueHandlerModule\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  override getCMIValue(CMIElement: string): any {\n    return this._commonGetCMIValue(\"GetValue\", true, CMIElement);\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {(string|number)} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  override getLmsErrorMessageDetails(errorNumber: string | number, detail: boolean): string {\n    let basicMessage = \"\";\n    let detailMessage = \"\";\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (scorm2004_constants.error_descriptions[errorNumber]) {\n      basicMessage = scorm2004_constants.error_descriptions[errorNumber].basicMessage;\n      detailMessage = scorm2004_constants.error_descriptions[errorNumber].detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Check to see if a correct_response value has been duplicated - delegates to ValidationModule\n   * @param {CMIArray} correct_response\n   * @param {number} current_index\n   * @param {*} value\n   * @return {boolean}\n   */\n  checkDuplicatedPattern(correct_response: CMIArray, current_index: number, value: any): boolean {\n    let found = false;\n    const count = correct_response._count;\n    for (let i = 0; i < count && !found; i++) {\n      if (i !== current_index && correct_response.childArray[i] === value) {\n        found = true;\n      }\n    }\n    return found;\n  }\n\n  /**\n   * Checks for a valid correct_response value - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {string} interaction_type\n   * @param {Array} nodes\n   * @param {*} value\n   */\n  checkCorrectResponseValue(\n    CMIElement: string,\n    interaction_type: string,\n    nodes: Array<any>,\n    value: any,\n  ) {\n    const response = CorrectResponses[interaction_type];\n    if (!response) {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.TYPE_MISMATCH,\n        `Incorrect Response Type: ${interaction_type}`,\n      );\n      return;\n    }\n    const formatRegex = new RegExp(response.format);\n    for (let i = 0; i < nodes.length && this.lastErrorCode === \"0\"; i++) {\n      if (interaction_type.match(\"^(fill-in|long-fill-in|matching|performance|sequencing)$\")) {\n        nodes[i] = this.removeCorrectResponsePrefixes(CMIElement, nodes[i]);\n      }\n\n      if (response?.delimiter2) {\n        const values = nodes[i].split(response.delimiter2);\n        if (values.length === 2) {\n          const matches = values[0].match(formatRegex);\n          if (!matches) {\n            this.throwSCORMError(\n              CMIElement,\n              scorm2004_errors.TYPE_MISMATCH,\n              `${interaction_type}: ${value}`,\n            );\n          } else {\n            if (!response.format2 || !values[1].match(new RegExp(response.format2))) {\n              this.throwSCORMError(\n                CMIElement,\n                scorm2004_errors.TYPE_MISMATCH,\n                `${interaction_type}: ${value}`,\n              );\n            }\n          }\n        } else {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.TYPE_MISMATCH,\n            `${interaction_type}: ${value}`,\n          );\n        }\n      } else {\n        const matches = nodes[i].match(formatRegex);\n        if ((!matches && value !== \"\") || (!matches && interaction_type === \"true-false\")) {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.TYPE_MISMATCH,\n            `${interaction_type}: ${value}`,\n          );\n        } else {\n          if (interaction_type === \"numeric\" && nodes.length > 1) {\n            if (Number(nodes[0]) > Number(nodes[1])) {\n              this.throwSCORMError(\n                CMIElement,\n                scorm2004_errors.TYPE_MISMATCH,\n                `${interaction_type}: ${value}`,\n              );\n            }\n          } else {\n            if (nodes[i] !== \"\" && response.unique) {\n              for (let j = 0; j < i && this.lastErrorCode === \"0\"; j++) {\n                if (nodes[i] === nodes[j]) {\n                  this.throwSCORMError(\n                    CMIElement,\n                    scorm2004_errors.TYPE_MISMATCH,\n                    `${interaction_type}: ${value}`,\n                  );\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove prefixes from correct_response - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {string} node\n   * @return {*}\n   */\n  removeCorrectResponsePrefixes(CMIElement: string, node: string): any {\n    let seenOrder = false;\n    let seenCase = false;\n    let seenLang = false;\n\n    const prefixRegex = new RegExp(\"^({(lang|case_matters|order_matters)=([^}]+)})\");\n    let matches = node.match(prefixRegex);\n    let langMatches = null;\n    while (matches) {\n      switch (matches[2]) {\n        case \"lang\":\n          langMatches = node.match(scorm2004_regex.CMILangcr);\n          if (langMatches) {\n            const lang = langMatches[3];\n            if (lang !== undefined && lang.length > 0) {\n              if (!ValidLanguages.includes(lang.toLowerCase())) {\n                this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n              }\n            }\n          }\n          seenLang = true;\n          break;\n        case \"case_matters\":\n          if (!seenLang && !seenOrder && !seenCase) {\n            if (matches[3] !== \"true\" && matches[3] !== \"false\") {\n              this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n            }\n          }\n\n          seenCase = true;\n          break;\n        case \"order_matters\":\n          if (!seenCase && !seenLang && !seenOrder) {\n            if (matches[3] !== \"true\" && matches[3] !== \"false\") {\n              this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n            }\n          }\n\n          seenOrder = true;\n          break;\n      }\n      node = node.substring(matches[1].length);\n      matches = node.match(prefixRegex);\n    }\n\n    return node;\n  }\n\n  /**\n   * Replace the whole API with another\n   * @param {Scorm2004API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI: Scorm2004API) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.adl = newAPI.adl;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit - delegates to DataSerializationModule\n   *\n   * @param {boolean} terminateCommit\n   * @return {object|Array}\n   */\n  renderCommitCMI(terminateCommit: boolean): StringKeyMap | Array<any> {\n    const cmiExport: StringKeyMap = this.renderCMIToJSONObject();\n\n    if (terminateCommit) {\n      (cmiExport.cmi as any).total_time = (this.cmi as any).getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened: StringKeyMap = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case \"flattened\":\n        return Utilities.flatten(cmiExport);\n      case \"params\":\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case \"json\":\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit - delegates to DataSerializationModule\n   * @param {boolean} terminateCommit\n   * @return {CommitObject}\n   */\n  renderCommitObject(terminateCommit: boolean): CommitObject {\n    const cmiExport = this.renderCommitCMI(terminateCommit);\n    const totalTimeDuration = this.cmi.getCurrentTotalTime();\n    const totalTimeSeconds = Utilities.getDurationAsSeconds(\n      totalTimeDuration,\n      scorm2004_regex.CMITimespan,\n    );\n\n    let completionStatus = CompletionStatus.UNKNOWN;\n    let successStatus = SuccessStatus.UNKNOWN;\n    if (this.cmi.completion_status) {\n      if (this.cmi.completion_status === \"completed\") {\n        completionStatus = CompletionStatus.COMPLETED;\n      } else if (this.cmi.completion_status === \"incomplete\") {\n        completionStatus = CompletionStatus.INCOMPLETE;\n      }\n    }\n    if (this.cmi.success_status) {\n      if (this.cmi.success_status === \"passed\") {\n        successStatus = SuccessStatus.PASSED;\n      } else if (this.cmi.success_status === \"failed\") {\n        successStatus = SuccessStatus.FAILED;\n      }\n    }\n\n    const score = this.cmi.score;\n    let scoreObject: ScoreObject = null;\n    if (score) {\n      scoreObject = {};\n\n      if (!Number.isNaN(Number.parseFloat(score.raw))) {\n        scoreObject.raw = Number.parseFloat(score.raw);\n      }\n      if (!Number.isNaN(Number.parseFloat(score.min))) {\n        scoreObject.min = Number.parseFloat(score.min);\n      }\n      if (!Number.isNaN(Number.parseFloat(score.max))) {\n        scoreObject.max = Number.parseFloat(score.max);\n      }\n      if (!Number.isNaN(Number.parseFloat(score.scaled))) {\n        scoreObject.scaled = Number.parseFloat(score.scaled);\n      }\n    }\n\n    const commitObject: CommitObject = {\n      completionStatus: completionStatus,\n      successStatus: successStatus,\n      totalTimeSeconds: totalTimeSeconds,\n      runtimeData: cmiExport as StringKeyMap,\n    };\n    if (scoreObject) {\n      commitObject.score = scoreObject;\n    }\n    return commitObject;\n  }\n\n  /**\n   * Attempts to store the data to the LMS - delegates to DataSerializationModule\n   *\n   * @param {boolean} terminateCommit\n   * @return {ResultObject}\n   */\n  async storeData(terminateCommit: boolean): Promise<ResultObject> {\n    if (terminateCommit) {\n      if (this.cmi.mode === \"normal\") {\n        if (this.cmi.credit === \"credit\") {\n          if (this.cmi.completion_threshold && this.cmi.progress_measure) {\n            if (this.cmi.progress_measure >= this.cmi.completion_threshold) {\n              this.cmi.completion_status = \"completed\";\n            } else {\n              this.cmi.completion_status = \"incomplete\";\n            }\n          }\n          if (this.cmi.scaled_passing_score && this.cmi.score.scaled) {\n            if (this.cmi.score.scaled >= this.cmi.scaled_passing_score) {\n              this.cmi.success_status = \"passed\";\n            } else {\n              this.cmi.success_status = \"failed\";\n            }\n          }\n        }\n      }\n    }\n\n    let navRequest = false;\n    if (\n      this.adl.nav.request !==\n        ((this.startingData?.adl as StringKeyMap)?.nav as StringKeyMap)?.request &&\n      this.adl.nav.request !== \"_none_\"\n    ) {\n      navRequest = true;\n    }\n\n    const commitObject = this.getCommitObject(terminateCommit);\n    if (typeof this.settings.lmsCommitUrl === \"string\") {\n      const result = await this.processHttpRequest(\n        this.settings.lmsCommitUrl,\n        {\n          commitObject: commitObject,\n        },\n        terminateCommit,\n      );\n\n      // Check if this is a sequencing call, and then call the necessary JS\n      if (\n        navRequest &&\n        result.navRequest !== undefined &&\n        result.navRequest !== \"\" &&\n        typeof result.navRequest === \"string\"\n      ) {\n        Function(`\"use strict\";(() => { ${result.navRequest} })()`)();\n      } else if (result?.navRequest && !navRequest) {\n        if (\n          typeof result.navRequest === \"object\" &&\n          Object.hasOwnProperty.call(result.navRequest, \"name\")\n        ) {\n          this.processListeners(result.navRequest.name as string, result.navRequest.data as string);\n        }\n      }\n\n      return result;\n    }\n\n    return {\n      result: \"true\",\n      errorCode: 0,\n    };\n  }\n\n  /**\n   * Configure sequencing based on provided settings\n   * @param {SequencingSettings} sequencingSettings - The sequencing settings\n   */\n  private configureSequencing(sequencingSettings: SequencingSettings): void {\n    // Configure activity tree\n    if (sequencingSettings.activityTree) {\n      this.configureActivityTree(sequencingSettings.activityTree);\n    }\n\n    // Configure sequencing rules\n    if (sequencingSettings.sequencingRules) {\n      this.configureSequencingRules(sequencingSettings.sequencingRules);\n    }\n\n    // Configure sequencing controls\n    if (sequencingSettings.sequencingControls) {\n      this.configureSequencingControls(sequencingSettings.sequencingControls);\n    }\n\n    // Configure rollup rules\n    if (sequencingSettings.rollupRules) {\n      this.configureRollupRules(sequencingSettings.rollupRules);\n    }\n  }\n\n  /**\n   * Configure activity tree based on provided settings\n   * @param {ActivitySettings} activityTreeSettings - The activity tree settings\n   */\n  private configureActivityTree(activityTreeSettings: ActivitySettings): void {\n    // Create root activity\n    const rootActivity = this.createActivity(activityTreeSettings);\n\n    // Create activity tree\n    const activityTree = this._sequencing.activityTree;\n    activityTree.root = rootActivity;\n\n    // Extract activity IDs for use as scoItemIds\n    this._extractedScoItemIds = this.extractActivityIds(rootActivity);\n  }\n\n  /**\n   * Extract all activity IDs from an activity and its children\n   * @param {Activity} activity - The activity to extract IDs from\n   * @return {string[]} - Array of activity IDs\n   */\n  private extractActivityIds(activity: Activity): string[] {\n    const ids = [activity.id];\n\n    // Recursively extract IDs from children\n    for (const child of activity.children) {\n      ids.push(...this.extractActivityIds(child));\n    }\n\n    return ids;\n  }\n\n  /**\n   * Create an activity from settings\n   * @param {ActivitySettings} activitySettings - The activity settings\n   * @return {Activity} - The created activity\n   */\n  private createActivity(activitySettings: ActivitySettings): Activity {\n    // Create activity\n    const activity = new Activity(activitySettings.id, activitySettings.title);\n\n    // Set activity properties\n    if (activitySettings.isVisible !== undefined) {\n      activity.isVisible = activitySettings.isVisible;\n    }\n    if (activitySettings.isActive !== undefined) {\n      activity.isActive = activitySettings.isActive;\n    }\n    if (activitySettings.isSuspended !== undefined) {\n      activity.isSuspended = activitySettings.isSuspended;\n    }\n    if (activitySettings.isCompleted !== undefined) {\n      activity.isCompleted = activitySettings.isCompleted;\n    }\n\n    // Create child activities\n    if (activitySettings.children) {\n      for (const childSettings of activitySettings.children) {\n        const childActivity = this.createActivity(childSettings);\n        activity.addChild(childActivity);\n      }\n    }\n\n    return activity;\n  }\n\n  /**\n   * Configure sequencing rules based on provided settings\n   * @param {SequencingRulesSettings} sequencingRulesSettings - The sequencing rules settings\n   */\n  private configureSequencingRules(sequencingRulesSettings: SequencingRulesSettings): void {\n    const sequencingRules = this._sequencing.sequencingRules;\n\n    // Configure pre-condition rules\n    if (sequencingRulesSettings.preConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.preConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addPreConditionRule(rule);\n      }\n    }\n\n    // Configure exit condition rules\n    if (sequencingRulesSettings.exitConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.exitConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addExitConditionRule(rule);\n      }\n    }\n\n    // Configure post-condition rules\n    if (sequencingRulesSettings.postConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.postConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addPostConditionRule(rule);\n      }\n    }\n  }\n\n  /**\n   * Create a sequencing rule from settings\n   * @param {SequencingRuleSettings} ruleSettings - The sequencing rule settings\n   * @return {SequencingRule} - The created sequencing rule\n   */\n  private createSequencingRule(ruleSettings: SequencingRuleSettings): SequencingRule {\n    // Create rule\n    const rule = new SequencingRule(ruleSettings.action, ruleSettings.conditionCombination);\n\n    // Add conditions\n    for (const conditionSettings of ruleSettings.conditions) {\n      const condition = new RuleCondition(\n        conditionSettings.condition,\n        conditionSettings.operator,\n        new Map(Object.entries(conditionSettings.parameters || {})),\n      );\n      rule.addCondition(condition);\n    }\n\n    return rule;\n  }\n\n  /**\n   * Configure sequencing controls based on provided settings\n   * @param {SequencingControlsSettings} sequencingControlsSettings - The sequencing controls settings\n   */\n  private configureSequencingControls(\n    sequencingControlsSettings: SequencingControlsSettings,\n  ): void {\n    const sequencingControls = this._sequencing.sequencingControls;\n\n    // Set sequencing control properties\n    if (sequencingControlsSettings.enabled !== undefined) {\n      sequencingControls.enabled = sequencingControlsSettings.enabled;\n    }\n    if (sequencingControlsSettings.choiceExit !== undefined) {\n      sequencingControls.choiceExit = sequencingControlsSettings.choiceExit;\n    }\n    if (sequencingControlsSettings.flow !== undefined) {\n      sequencingControls.flow = sequencingControlsSettings.flow;\n    }\n    if (sequencingControlsSettings.forwardOnly !== undefined) {\n      sequencingControls.forwardOnly = sequencingControlsSettings.forwardOnly;\n    }\n    if (sequencingControlsSettings.useCurrentAttemptObjectiveInfo !== undefined) {\n      sequencingControls.useCurrentAttemptObjectiveInfo =\n        sequencingControlsSettings.useCurrentAttemptObjectiveInfo;\n    }\n    if (sequencingControlsSettings.useCurrentAttemptProgressInfo !== undefined) {\n      sequencingControls.useCurrentAttemptProgressInfo =\n        sequencingControlsSettings.useCurrentAttemptProgressInfo;\n    }\n    if (sequencingControlsSettings.preventActivation !== undefined) {\n      sequencingControls.preventActivation = sequencingControlsSettings.preventActivation;\n    }\n    if (sequencingControlsSettings.constrainChoice !== undefined) {\n      sequencingControls.constrainChoice = sequencingControlsSettings.constrainChoice;\n    }\n    if (sequencingControlsSettings.rollupObjectiveSatisfied !== undefined) {\n      sequencingControls.rollupObjectiveSatisfied =\n        sequencingControlsSettings.rollupObjectiveSatisfied;\n    }\n    if (sequencingControlsSettings.rollupProgressCompletion !== undefined) {\n      sequencingControls.rollupProgressCompletion =\n        sequencingControlsSettings.rollupProgressCompletion;\n    }\n    if (sequencingControlsSettings.objectiveMeasureWeight !== undefined) {\n      sequencingControls.objectiveMeasureWeight = sequencingControlsSettings.objectiveMeasureWeight;\n    }\n  }\n\n  /**\n   * Configure rollup rules based on provided settings\n   * @param {RollupRulesSettings} rollupRulesSettings - The rollup rules settings\n   */\n  private configureRollupRules(rollupRulesSettings: RollupRulesSettings): void {\n    const rollupRules = this._sequencing.rollupRules;\n\n    // Configure rollup rules\n    if (rollupRulesSettings.rules) {\n      for (const ruleSettings of rollupRulesSettings.rules) {\n        const rule = this.createRollupRule(ruleSettings);\n        rollupRules.addRule(rule);\n      }\n    }\n  }\n\n  /**\n   * Create a rollup rule from settings\n   * @param {RollupRuleSettings} ruleSettings - The rollup rule settings\n   * @return {RollupRule} - The created rollup rule\n   */\n  private createRollupRule(ruleSettings: RollupRuleSettings): RollupRule {\n    // Create rule\n    const rule = new RollupRule(\n      ruleSettings.action,\n      ruleSettings.consideration,\n      ruleSettings.minimumCount,\n      ruleSettings.minimumPercent,\n    );\n\n    // Add conditions\n    for (const conditionSettings of ruleSettings.conditions) {\n      const condition = new RollupCondition(\n        conditionSettings.condition,\n        new Map(Object.entries(conditionSettings.parameters || {})),\n      );\n      rule.addCondition(condition);\n    }\n\n    return rule;\n  }\n}\n\nexport default Scorm2004API;\n"],"names":["global_constants","SCORM_TRUE","SCORM_FALSE","STATE_NOT_INITIALIZED","STATE_INITIALIZED","STATE_TERMINATED","scorm12_constants","score_children","error_descriptions","basicMessage","detailMessage","scorm2004_constants","cmi_children","comments_children","objectives_children","correct_responses_children","student_preference_children","interactions_children","adl_data_children","SECONDS_PER_SECOND","SECONDS_PER_MINUTE","SECONDS_PER_HOUR","SECONDS_PER_DAY","designations","D","H","M","S","getSecondsAsISODuration","memoize","seconds","duration","remainder","designationEntries","Object","entries","forEach","_ref","designationsKey","current_seconds","value","Math","floor","countDecimals","Number","toFixed","needsTimeSeparator","indexOf","includes","getDurationAsSeconds","durationRegex","RegExp","match","years","_","days","hours","minutes","exec","result","durationStr","regexStr","toString","addTwoDurations","first","second","regex","flatten","data","recurse","cur","prop","Array","isArray","item","i","length","keys","filter","p","prototype","hasOwnProperty","call","isEmpty","unflatten","pattern","from","m","num","String","parts","split","formatMessage","functionName","message","CMIElement","baseLength","paddedFunction","padEnd","messageString","CMIElementBaseLength","stringMatches","str","tester","fn","keyFn","cache","Map","_len","arguments","args","_key","key","JSON","stringify","has","get","set","NAVBoolean","UNKNOWN","TRUE","FALSE","SuccessStatus","PASSED","FAILED","CompletionStatus","COMPLETED","INCOMPLETE","LogLevelEnum","DEBUG","INFO","WARN","ERROR","NONE","DefaultSettings","autocommit","autocommitSeconds","asyncCommit","sendFullCommit","lmsCommitUrl","dataCommitFormat","commitRequestDataType","autoProgress","logLevel","selfReportSessionTime","alwaysSendTotalTime","renderCommonCommitFields","strict_errors","xhrHeaders","xhrWithCredentials","fetchMode","responseHandler","async","response","httpResult","json","text","responseText","parse","e","status","errorCode","requestHandler","commitObject","onLogMessage","defaultLogHandler","scoItemIds","scoItemIdValidator","globalObjectiveIds","messageLevel","logMessage","console","error","warn","info","debug","log","ScheduledCommit","constructor","API","when","callback","this","_cancelled","_API","_timeout","setTimeout","wrapper","bind","_callback","cancel","clearTimeout","commit","HttpService","settings","error_codes","processHttpRequest","url","params","immediate","undefined","apiLog","processListeners","genericError","GENERAL","performFetch","then","transformResponse","process","fetch","method","mode","body","join","headers","credentials","keepalive","updateSettings","EventService","listenerMap","listenerCount","parseListenerName","listenerName","listenerSplit","replace","on","listenerFunctions","listenerFunction","parsedListener","listeners","push","off","removeIndex","findIndex","obj","splice","delete","clear","newListeners","listener","listenerHasCMIElement","CMIElementsMatch","endsWith","prefix","slice","startsWith","reset","SerializationService","loadFromFlattenedJSON","setCMIValue","isNotInitialized","setStartingData","int_pattern","obj_pattern","interactions","objectives","others","intMatch","index","field","objMatch","sort","a","b","localeCompare","processItems","items","loadFromJSON","currentCMIElement","tempCMIElement","renderCMIToJSONString","cmi","k","v","renderCMIToJSONObject","getCommitObject","terminateCommit","renderCommitObject","renderCommitCMI","apiLogLevel","shouldTerminateCommit","BaseScormValidationError","Error","super","_errorCode","setPrototypeOf","ValidationError","errorMessage","detailedMessage","_detailedMessage","_errorMessage","LoggingService","_logLevel","_logHandler","getInstance","_instance","setLogLevel","level","getLogLevel","setLogHandler","handler","shouldLog","numericMessageLevel","getNumericLevel","numericLogLevel","getLoggingService","ErrorHandlingService","errorCodes","getLmsErrorMessageDetails","loggingService","_lastErrorCode","_errorCodes","_apiLog","_getLmsErrorMessageDetails","_loggingService","lastErrorCode","throwSCORMError","errorNumber","formattedMessage","clearSCORMError","success","handleValueAccessException","returnValue","validationError","errorType","name","stackTrace","stack","errorDetails","jsonError","createErrorHandlingService","BaseCMI","cmi_element","jsonString","_initialized","_cmi_element","initialized","start_time","_start_time","initialize","setStartTime","Date","getTime","BaseRootCMI","global_errors","INITIALIZATION_FAILED","INITIALIZED","TERMINATED","TERMINATION_FAILURE","TERMINATION_BEFORE_INIT","MULTIPLE_TERMINATION","RETRIEVE_BEFORE_INIT","RETRIEVE_AFTER_TERM","STORE_BEFORE_INIT","STORE_AFTER_TERM","COMMIT_BEFORE_INIT","COMMIT_AFTER_TERM","ARGUMENT_ERROR","CHILDREN_ERROR","COUNT_ERROR","GENERAL_GET_FAILURE","GENERAL_SET_FAILURE","GENERAL_COMMIT_FAILURE","UNDEFINED_DATA_MODEL","UNIMPLEMENTED_ELEMENT","VALUE_NOT_INITIALIZED","INVALID_SET_VALUE","READ_ONLY_ELEMENT","WRITE_ONLY_ELEMENT","TYPE_MISMATCH","VALUE_OUT_OF_RANGE","DEPENDENCY_NOT_ESTABLISHED","scorm12_errors","scorm2004_errors","MULTIPLE_TERMINATIONS","CMIArray","__children","children","_errorClass","errorClass","childArray","wipe","_children","_count","toJSON","BaseAPI","httpService","eventService","serializationService","cmiDataService","errorHandlingService","_settings","TypeError","currentState","_error_codes","_httpService","_eventService","element","_serializationService","_errorHandlingService","detail","commonReset","clearScheduledCommit","startingData","callbackName","initializeMessage","terminationMessage","isInitialized","isTerminated","previousSettings","terminate","checkTerminated","checkState","storeData","getValue","getCMIValue","setValue","commitCallback","scheduleCommit","getLastError","getErrorString","CMIErrorCode","getDiagnostic","beforeInitError","afterTermError","_errorNumber","_CMIElement","_value","_commonSetCMIValue","methodName","scorm2004","structure","refObject","foundFirstIndex","invalidErrorMessage","invalidErrorCode","idx","attribute","substring","_checkObjectHasProperty","validateCorrectResponse","parseInt","isNaN","newChild","getChildElement","_commonGetCMIValue","uninitializedErrorMessage","_isTargetValid","target","StringKeyMap","getOwnPropertyDescriptor","getPrototypeOf","Scorm2004ValidationError","checkValidFormat","regexPattern","allowEmptyString","formatRegex","matches","valueKey","checkValidRange","rangePattern","ranges","check2004ValidFormat","check2004ValidRange","scorm12_regex","CMIString256","CMISInteger","CMIDecimal","score_range","audio_range","speed_range","text_range","scorm2004_regex","CMIString250","CMIString1000","CMIString4000","CMIString64000","CMILang","CMILangString250","CMILangcr","CMILangString250cr","CMILangString4000","CMITime","CMITimespan","CMIShortIdentifier","CMILongIdentifier","CMIFeedback","CMICStatus","CMISStatus","CMIExit","CMIType","CMIResult","NAVEvent","NAVTarget","scaled_range","progress_range","CMILearnerPreference","_audio_level","_language","_delivery_speed","_audio_captioning","audio_level","language","delivery_speed","audio_captioning","LearnerResponses","format","max","delimiter","unique","choice","matching","format2","delimiter2","performance","sequencing","likert","numeric","other","CorrectResponses","duplicate","limit","delimiter3","CMIInteractions","CMIInteractionsObject","_id","_type","_timestamp","_weighting","_learner_response","_result","_latency","_description","correct_responses","id","type","timestamp","weighting","learner_response","nodes","response_type","values","j","latency","description","CMIInteractionsObjectivesObject","CMIInteractionsCorrectResponsesObject","parent","_pattern","_parent","interactionType","isValid","Scorm12ValidationError","check12ValidFormat","check12ValidRange","ValidationService","validateScore","decimalRegex","scoreRange","invalidTypeCode","invalidRangeCode","validateScorm12Audio","validateScorm12Language","validateScorm12Speed","validateScorm12Text","validateReadOnly","validationService","CMIScore","_raw","_min","__score_range","_max","__invalid_error_code","__invalid_type_code","__invalid_range_code","__decimal_regex","__error_class","raw","min","Scorm2004CMIScore","_scaled","scaled","CMICommentsFromLMS","CMICommentsFromLearner","CMICommentsObject","readOnlyAfterInit","_comment","_location","_readOnlyAfterInit","comment","location","CMIObjectives","findObjectiveById","find","objective","findObjectiveByIndex","setObjectiveByIndex","CMIObjectivesObject","_success_status","_completion_status","_progress_measure","score","success_status","completion_status","progress_measure","CMIMetadata","__version","_version","CMILearner","_learner_id","_learner_name","learner_id","learner_name","CMIStatus","CMISession","_entry","_exit","_session_time","_total_time","entry","exit","session_time","total_time","getCurrentTotalTime","sessionTime","startTime","Util","CMIContent","_launch_data","_suspend_data","launch_data","suspend_data","CMISettings","_credit","_mode","_time_limit_action","_max_time_allowed","credit","time_limit_action","max_time_allowed","CMIThresholds","_scaled_passing_score","_completion_threshold","scaled_passing_score","completion_threshold","CMI","metadata","learner","session","content","thresholds","learner_preference","comments_from_learner","comments_from_lms","ADL","ADLData","_sequencing","nav","ADLNav","adlNav","_request","request_valid","ADLNavRequestValid","request","processNavigationRequest","ADLDataObject","_store","store","_continue","_previous","_choice","_jump","continue","previous","jump","RuleActionType","RuleCondition","condition","operator","parameters","_condition","_operator","_parameters","evaluate","activity","successStatus","objectiveMeasureStatus","greaterThanValue","objectiveNormalizedMeasure","lessThanValue","isCompleted","completionStatus","attemptCount","attemptLimit","fromEntries","SequencingRule","action","conditionCombination","_conditions","_action","_conditionCombination","conditions","addCondition","removeCondition","every","some","SequencingRules","_preConditionRules","_exitConditionRules","_postConditionRules","preConditionRules","addPreConditionRule","rule","exitConditionRules","addExitConditionRule","postConditionRules","addPostConditionRule","evaluatePreConditionRules","evaluateExitConditionRules","evaluatePostConditionRules","RollupCondition","RollupRule","consideration","minimumCount","minimumPercent","_consideration","_minimumCount","_minimumPercent","matchingChildren","child","percent","RollupRules","_rules","rules","addRule","removeRule","processRollup","completionRollup","successRollup","_defaultCompletionRollup","_defaultSuccessRollup","allCompleted","anyIncomplete","allSatisfied","anyNotSatisfied","ValidLanguages","Activity","title","_title","_isVisible","_isActive","_isSuspended","_isCompleted","_completionStatus","_successStatus","_attemptCount","_attemptCompletionAmount","_attemptAbsoluteDuration","_attemptExperiencedDuration","_activityAbsoluteDuration","_activityExperiencedDuration","_objectiveSatisfiedStatus","_objectiveMeasureStatus","_objectiveNormalizedMeasure","addChild","removeChild","isVisible","isActive","isSuspended","incrementAttemptCount","attemptCompletionAmount","attemptAbsoluteDuration","attemptExperiencedDuration","activityAbsoluteDuration","activityExperiencedDuration","objectiveSatisfiedStatus","map","ActivityTree","_root","_currentActivity","_suspendedActivity","_activities","root","_addActivitiesToMap","currentActivity","suspendedActivity","getActivity","getAllActivities","getParent","getChildren","getSiblings","getNextSibling","siblings","getPreviousSibling","getFirstChild","getLastChild","getCommonAncestor","activity1","activity2","path1","current","unshift","SequencingControls","_enabled","_choiceExit","_flow","_forwardOnly","_useCurrentAttemptObjectiveInfo","_useCurrentAttemptProgressInfo","_preventActivation","_constrainChoice","_rollupObjectiveSatisfied","_rollupProgressCompletion","_objectiveMeasureWeight","enabled","choiceExit","flow","forwardOnly","useCurrentAttemptObjectiveInfo","useCurrentAttemptProgressInfo","preventActivation","constrainChoice","rollupObjectiveSatisfied","rollupProgressCompletion","objectiveMeasureWeight","isChoiceNavigationAllowed","isFlowNavigationAllowed","isForwardNavigationAllowed","isBackwardNavigationAllowed","Sequencing","_adlNav","_activityTree","_sequencingRules","_sequencingControls","_rollupRules","activityTree","sequencingRules","sequencingControls","rollupRules","preConditionAction","SKIP","DISABLED","HIDE_FROM_CHOICE","STOP_FORWARD_TRAVERSAL","processContinueRequest","processPreviousRequest","processExitRequest","processExitAllRequest","processAbandonRequest","processAbandonAllRequest","processSuspendAllRequest","nextActivity","exitConditionAction","EXIT_PARENT","EXIT_ALL","postConditionAction","RETRY","RETRY_ALL","CONTINUE","PREVIOUS","EXIT","previousActivity","_processRollupRecursive","Scorm2004API","mastery_override","_globalObjectives","_extractedScoItemIds","adl","configureSequencing","Initialize","lmsInitialize","Terminate","lmsFinish","GetValue","lmsGetValue","SetValue","lmsSetValue","Commit","lmsCommit","GetLastError","lmsGetLastError","GetErrorString","lmsGetErrorString","GetDiagnostic","lmsGetDiagnostic","version","globalObjectives","internalFinish","navActions","exitAll","abandon","abandonAll","choiceJumpRegex","groups","choice_target","jump_target","adlNavRequestRegex","element_base","objective_id","setting_id","is_global","global_index","newGlobalObjective","global_element","createCorrectResponsesObject","interaction","checkDuplicateChoiceResponse","checkValidResponseType","interaction_type","checkCorrectResponseValue","interaction_count","pattern_index","checkDuplicatedPattern","correct_response","current_index","found","count","removeCorrectResponsePrefixes","node","seenOrder","seenCase","seenLang","prefixRegex","langMatches","lang","toLowerCase","replaceWithAnotherScormAPI","newAPI","cmiExport","flattened","Utilities","totalTimeDuration","totalTimeSeconds","scoreObject","parseFloat","runtimeData","navRequest","Function","sequencingSettings","configureActivityTree","configureSequencingRules","configureSequencingControls","configureRollupRules","activityTreeSettings","rootActivity","createActivity","extractActivityIds","ids","activitySettings","childSettings","childActivity","sequencingRulesSettings","ruleSettings","createSequencingRule","conditionSettings","sequencingControlsSettings","rollupRulesSettings","createRollupRule"],"mappings":"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"}