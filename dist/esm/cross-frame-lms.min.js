class s{constructor(s,e="*"){this._api=s,this._origin=e,window.addEventListener("message",this._onMessage.bind(this))}_onMessage(s){if("*"!==this._origin&&s.origin!==this._origin)return;const e=s.data;e?.messageId&&e.method&&s.source&&this._process(e,s.source)}_process(s,e){const t=(result,t)=>{const o={messageId:s.messageId};void 0!==result&&(o.result=result),void 0!==t&&(o.error=t),e.postMessage(o,this._origin)};try{const e=this._api[s.method];if("function"!=typeof e)return void t(void 0,{message:`Method ${s.method} not found`});const result=e.apply(this._api,s.params);result&&"function"==typeof result.then?result.then((s=>t(s))).catch((s=>t(void 0,{message:s.message,stack:s.stack}))):t(result)}catch(s){t(void 0,{message:s.message,stack:s.stack})}}}export{s as CrossFrameLMS};
//# sourceMappingURL=cross-frame-lms.min.js.map
