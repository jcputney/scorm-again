{"version":3,"file":"scorm-again.min.js","sources":["../../src/constants/api_constants.ts","../../src/constants/error_codes.ts","../../src/constants/regex.ts","../../src/exceptions.ts","../../src/exceptions/scorm12_exceptions.ts","../../src/cmi/common/base_cmi.ts","../../src/utilities.ts","../../src/cmi/common/validation.ts","../../src/cmi/scorm12/validation.ts","../../src/services/ValidationService.ts","../../src/cmi/common/score.ts","../../src/cmi/aicc/core.ts","../../src/cmi/common/array.ts","../../src/cmi/scorm12/objectives.ts","../../src/cmi/scorm12/student_data.ts","../../src/cmi/scorm12/student_preference.ts","../../src/cmi/scorm12/interactions.ts","../../src/cmi/scorm12/cmi.ts","../../src/cmi/scorm12/nav.ts","../../src/constants/enums.ts","../../src/constants/default_settings.ts","../../src/helpers/scheduled_commit.ts","../../src/services/HttpService.ts","../../src/services/EventService.ts","../../src/services/SerializationService.ts","../../src/services/LoggingService.ts","../../src/services/ErrorHandlingService.ts","../../src/services/OfflineStorageService.ts","../../src/BaseAPI.ts","../../src/Scorm12API.ts","../../src/exceptions/aicc_exceptions.ts","../../src/cmi/aicc/validation.ts","../../src/cmi/aicc/evaluation.ts","../../src/cmi/aicc/student_preferences.ts","../../src/cmi/aicc/student_demographics.ts","../../src/cmi/aicc/tries.ts","../../src/cmi/aicc/attempts.ts","../../src/cmi/aicc/student_data.ts","../../src/cmi/aicc/paths.ts","../../src/cmi/aicc/cmi.ts","../../src/AICC.ts","../../src/exceptions/scorm2004_exceptions.ts","../../src/cmi/scorm2004/validation.ts","../../src/cmi/scorm2004/learner_preference.ts","../../src/constants/response_constants.ts","../../src/cmi/scorm2004/interactions.ts","../../src/cmi/scorm2004/score.ts","../../src/cmi/scorm2004/comments.ts","../../src/cmi/scorm2004/objectives.ts","../../src/cmi/scorm2004/metadata.ts","../../src/cmi/scorm2004/learner.ts","../../src/cmi/scorm2004/status.ts","../../src/cmi/scorm2004/session.ts","../../src/cmi/scorm2004/content.ts","../../src/cmi/scorm2004/settings.ts","../../src/cmi/scorm2004/thresholds.ts","../../src/cmi/scorm2004/cmi.ts","../../src/cmi/scorm2004/adl.ts","../../src/cmi/scorm2004/sequencing/sequencing_rules.ts","../../src/cmi/scorm2004/sequencing/rollup_rules.ts","../../src/constants/language_constants.ts","../../src/cmi/scorm2004/sequencing/activity.ts","../../src/cmi/scorm2004/sequencing/activity_tree.ts","../../src/cmi/scorm2004/sequencing/sequencing_controls.ts","../../src/cmi/scorm2004/sequencing/sequencing.ts","../../src/Scorm2004API.ts"],"sourcesContent":["interface ErrorDescription {\n  basicMessage: string;\n  detailMessage: string;\n}\n\ninterface ErrorDescriptions {\n  [key: string]: ErrorDescription;\n}\n\ninterface ScormConstants {\n  cmi_children: string;\n  core_children: string;\n  score_children: string;\n  comments_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface AiccConstants extends ScormConstants {\n  student_demographics_children: string;\n  tries_children: string;\n  attempt_records_children: string;\n  paths_children: string;\n}\n\ninterface Scorm2004Constants {\n  cmi_children: string;\n  comments_children: string;\n  score_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  adl_data_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface GlobalConstants {\n  SCORM_TRUE: string;\n  SCORM_FALSE: string;\n  STATE_NOT_INITIALIZED: number;\n  STATE_INITIALIZED: number;\n  STATE_TERMINATED: number;\n}\n\nexport const global_constants: GlobalConstants = {\n  SCORM_TRUE: \"true\",\n  SCORM_FALSE: \"false\",\n  STATE_NOT_INITIALIZED: 0,\n  STATE_INITIALIZED: 1,\n  STATE_TERMINATED: 2,\n};\n\nexport const scorm12_constants: ScormConstants = {\n  // Children lists\n  cmi_children:\n    \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions\",\n  core_children:\n    \"student_id,student_name,lesson_location,credit,lesson_status,entry,score,total_time,lesson_mode,exit,session_time\",\n  score_children: \"raw,min,max\",\n  comments_children: \"content,location,time\",\n  objectives_children: \"id,score,status\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio,language,speed,text\",\n  interactions_children:\n    \"id,objectives,time,type,correct_responses,weighting,student_response,result,latency\",\n  error_descriptions: {\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage:\n        \"No specific error code exists to describe the error. Use LMSGetDiagnostic for more information\",\n    },\n    \"201\": {\n      basicMessage: \"Invalid argument error\",\n      detailMessage:\n        \"Indicates that an argument represents an invalid data model element or is otherwise incorrect.\",\n    },\n    \"202\": {\n      basicMessage: \"Element cannot have children\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_children\" for a data model element that does not support the \"_children\" suffix.',\n    },\n    \"203\": {\n      basicMessage: \"Element not an array - cannot have count\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_count\" for a data model element that does not support the \"_count\" suffix.',\n    },\n    \"301\": {\n      basicMessage: \"Not initialized\",\n      detailMessage: \"Indicates that an API call was made before the call to lmsInitialize.\",\n    },\n    \"401\": {\n      basicMessage: \"Not implemented error\",\n      detailMessage:\n        \"The data model element indicated in a call to LMSGetValue or LMSSetValue is valid, but was not implemented by this LMS. SCORM 1.2 defines a set of data model elements as being optional for an LMS to implement.\",\n    },\n    \"402\": {\n      basicMessage: \"Invalid set value, element is a keyword\",\n      detailMessage:\n        'Indicates that LMSSetValue was called on a data model element that represents a keyword (elements that end in \"_children\" and \"_count\").',\n    },\n    \"403\": {\n      basicMessage: \"Element is read only\",\n      detailMessage: \"LMSSetValue was called with a data model element that can only be read.\",\n    },\n    \"404\": {\n      basicMessage: \"Element is write only\",\n      detailMessage: \"LMSGetValue was called on a data model element that can only be written to.\",\n    },\n    \"405\": {\n      basicMessage: \"Incorrect Data Type\",\n      detailMessage:\n        \"LMSSetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a LMSSetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\nexport const aicc_constants: AiccConstants = {\n  ...scorm12_constants,\n  ...{\n    cmi_children:\n      \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions,evaluation\",\n    student_preference_children:\n      \"audio,language,lesson_type,speed,text,text_color,text_location,text_size,video,windows\",\n    student_data_children: \"attempt_number,tries,mastery_score,max_time_allowed,time_limit_action\",\n    student_demographics_children:\n      \"city,class,company,country,experience,familiar_name,instructor_name,title,native_language,state,street_address,telephone,years_experience\",\n    tries_children: \"time,status,score\",\n    attempt_records_children: \"score,lesson_status\",\n    paths_children: \"location_id,date,time,status,why_left,time_in_element\",\n  },\n};\n\nexport const scorm2004_constants: Scorm2004Constants = {\n  // Children lists\n  cmi_children:\n    \"_version,comments_from_learner,comments_from_lms,completion_status,credit,entry,exit,interactions,launch_data,learner_id,learner_name,learner_preference,location,max_time_allowed,mode,objectives,progress_measure,scaled_passing_score,score,session_time,success_status,suspend_data,time_limit_action,total_time\",\n  comments_children: \"comment,timestamp,location\",\n  score_children: \"max,raw,scaled,min\",\n  objectives_children: \"progress_measure,completion_status,success_status,description,score,id\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio_level,audio_captioning,delivery_speed,language\",\n  interactions_children:\n    \"id,type,objectives,timestamp,correct_responses,weighting,learner_response,result,latency,description\",\n  adl_data_children: \"id,store\",\n  error_descriptions: {\n    \"0\": {\n      basicMessage: \"No Error\",\n      detailMessage: \"No error occurred, the previous API call was successful.\",\n    },\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage:\n        \"No specific error code exists to describe the error. Use GetDiagnostic for more information.\",\n    },\n    \"102\": {\n      basicMessage: \"General Initialization Failure\",\n      detailMessage: \"Call to Initialize failed for an unknown reason.\",\n    },\n    \"103\": {\n      basicMessage: \"Already Initialized\",\n      detailMessage: \"Call to Initialize failed because Initialize was already called.\",\n    },\n    \"104\": {\n      basicMessage: \"Content Instance Terminated\",\n      detailMessage: \"Call to Initialize failed because Terminate was already called.\",\n    },\n    \"111\": {\n      basicMessage: \"General Termination Failure\",\n      detailMessage: \"Call to Terminate failed for an unknown reason.\",\n    },\n    \"112\": {\n      basicMessage: \"Termination Before Initialization\",\n      detailMessage: \"Call to Terminate failed because it was made before the call to Initialize.\",\n    },\n    \"113\": {\n      basicMessage: \"Termination After Termination\",\n      detailMessage: \"Call to Terminate failed because Terminate was already called.\",\n    },\n    \"122\": {\n      basicMessage: \"Retrieve Data Before Initialization\",\n      detailMessage: \"Call to GetValue failed because it was made before the call to Initialize.\",\n    },\n    \"123\": {\n      basicMessage: \"Retrieve Data After Termination\",\n      detailMessage: \"Call to GetValue failed because it was made after the call to Terminate.\",\n    },\n    \"132\": {\n      basicMessage: \"Store Data Before Initialization\",\n      detailMessage: \"Call to SetValue failed because it was made before the call to Initialize.\",\n    },\n    \"133\": {\n      basicMessage: \"Store Data After Termination\",\n      detailMessage: \"Call to SetValue failed because it was made after the call to Terminate.\",\n    },\n    \"142\": {\n      basicMessage: \"Commit Before Initialization\",\n      detailMessage: \"Call to Commit failed because it was made before the call to Initialize.\",\n    },\n    \"143\": {\n      basicMessage: \"Commit After Termination\",\n      detailMessage: \"Call to Commit failed because it was made after the call to Terminate.\",\n    },\n    \"201\": {\n      basicMessage: \"General Argument Error\",\n      detailMessage:\n        \"An invalid argument was passed to an API method (usually indicates that Initialize, Commit or Terminate did not receive the expected empty string argument.\",\n    },\n    \"301\": {\n      basicMessage: \"General Get Failure\",\n      detailMessage:\n        \"Indicates a failed GetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"351\": {\n      basicMessage: \"General Set Failure\",\n      detailMessage:\n        \"Indicates a failed SetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"391\": {\n      basicMessage: \"General Commit Failure\",\n      detailMessage:\n        \"Indicates a failed Commit call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"401\": {\n      basicMessage: \"Undefined Data Model Element\",\n      detailMessage:\n        \"The data model element name passed to GetValue or SetValue is not a valid SCORM data model element.\",\n    },\n    \"402\": {\n      basicMessage: \"Unimplemented Data Model Element\",\n      detailMessage:\n        \"The data model element indicated in a call to GetValue or SetValue is valid, but was not implemented by this LMS. In SCORM 2004, this error would indicate an LMS that is not fully SCORM conformant.\",\n    },\n    \"403\": {\n      basicMessage: \"Data Model Element Value Not Initialized\",\n      detailMessage:\n        \"Attempt to read a data model element that has not been initialized by the LMS or through a SetValue call. This error condition is often reached during normal execution of a SCO.\",\n    },\n    \"404\": {\n      basicMessage: \"Data Model Element Is Read Only\",\n      detailMessage: \"SetValue was called with a data model element that can only be read.\",\n    },\n    \"405\": {\n      basicMessage: \"Data Model Element Is Write Only\",\n      detailMessage: \"GetValue was called on a data model element that can only be written to.\",\n    },\n    \"406\": {\n      basicMessage: \"Data Model Element Type Mismatch\",\n      detailMessage:\n        \"SetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Data Model Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a SetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\n","export type ErrorCode = {\n  [key: string]: number;\n};\n\nexport const global_errors: ErrorCode = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nexport const scorm12_errors: ErrorCode = {\n  ...global_errors,\n  RETRIEVE_BEFORE_INIT: 301,\n  STORE_BEFORE_INIT: 301,\n  COMMIT_BEFORE_INIT: 301,\n  ARGUMENT_ERROR: 201,\n  CHILDREN_ERROR: 202,\n  COUNT_ERROR: 203,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 401,\n  VALUE_NOT_INITIALIZED: 301,\n  INVALID_SET_VALUE: 402,\n  READ_ONLY_ELEMENT: 403,\n  WRITE_ONLY_ELEMENT: 404,\n  TYPE_MISMATCH: 405,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n\nexport const scorm2004_errors: ErrorCode = {\n  ...global_errors,\n  INITIALIZATION_FAILED: 102,\n  INITIALIZED: 103,\n  TERMINATED: 104,\n  TERMINATION_FAILURE: 111,\n  TERMINATION_BEFORE_INIT: 112,\n  MULTIPLE_TERMINATIONS: 113,\n  RETRIEVE_BEFORE_INIT: 122,\n  RETRIEVE_AFTER_TERM: 123,\n  STORE_BEFORE_INIT: 132,\n  STORE_AFTER_TERM: 133,\n  COMMIT_BEFORE_INIT: 142,\n  COMMIT_AFTER_TERM: 143,\n  ARGUMENT_ERROR: 201,\n  GENERAL_GET_FAILURE: 301,\n  GENERAL_SET_FAILURE: 351,\n  GENERAL_COMMIT_FAILURE: 391,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 402,\n  VALUE_NOT_INITIALIZED: 403,\n  READ_ONLY_ELEMENT: 404,\n  WRITE_ONLY_ELEMENT: 405,\n  TYPE_MISMATCH: 406,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n","export const scorm12_regex = {\n  CMIString256: \"^.{0,255}$\",\n  CMIString4096: \"^.{0,4096}$\",\n  CMITime: \"^(?:[01]\\\\d|2[0123]):(?:[012345]\\\\d):(?:[012345]\\\\d)$\",\n  CMITimespan: \"^([0-9]{2,}):([0-9]{2}):([0-9]{2})(.[0-9]{1,2})?$\",\n\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{0,3})(.[0-9]*)?$\",\n\n  CMIIdentifier: \"^[\\\\u0021-\\\\u007E\\\\s]{0,255}$\",\n  CMIFeedback: \"^.{0,255}$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMIStatus: \"^(passed|completed|failed|incomplete|browsed)$\",\n  CMIStatus2: \"^(passed|completed|failed|incomplete|browsed|not attempted)$\",\n  CMIExit: \"^(time-out|suspend|logout|)$\",\n  CMIType: \"^(true-false|choice|fill-in|matching|performance|sequencing|likert|numeric)$\",\n  CMIResult: \"^(correct|wrong|unanticipated|neutral|([0-9]{0,3})?(\\\\.[0-9]*)?)$\",\n  NAVEvent: \"^(previous|continue)$\",\n  // Data ranges\n  score_range: \"0#100\",\n  audio_range: \"-1#100\",\n  speed_range: \"-100#100\",\n  weighting_range: \"-100#100\",\n  text_range: \"-1#1\",\n};\nexport const aicc_regex = {\n  ...scorm12_regex,\n  ...{\n    CMIIdentifier: \"^\\\\w{1,255}$\",\n  },\n};\nexport const scorm2004_regex = {\n  CMIString200: \"^[\\\\u0000-\\\\uFFFF]{0,200}$\",\n  CMIString250: \"^[\\\\u0000-\\\\uFFFF]{0,250}$\",\n  CMIString1000: \"^[\\\\u0000-\\\\uFFFF]{0,1000}$\",\n  CMIString4000: \"^[\\\\u0000-\\\\uFFFF]{0,4000}$\",\n  CMIString64000: \"^[\\\\u0000-\\\\uFFFF]{0,64000}$\",\n  CMILang: \"^([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?$|^$\",\n\n  CMILangString250: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,250}$)?$\",\n\n  CMILangcr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?}))(.*?)$\",\n\n  CMILangString250cr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?})?(.{0,250})?)?$\",\n\n  CMILangString4000: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,4000}$)?$\",\n\n  CMITime:\n    \"^(19[7-9]{1}[0-9]{1}|20[0-2]{1}[0-9]{1}|203[0-8]{1})((-(0[1-9]{1}|1[0-2]{1}))((-(0[1-9]{1}|[1-2]{1}[0-9]{1}|3[0-1]{1}))(T([0-1]{1}[0-9]{1}|2[0-3]{1})((:[0-5]{1}[0-9]{1})((:[0-5]{1}[0-9]{1})((\\\\.[0-9]{1,6})((Z|([+|-]([0-1]{1}[0-9]{1}|2[0-3]{1})))(:[0-5]{1}[0-9]{1})?)?)?)?)?)?)?)?$\",\n  CMITimespan:\n    \"^P(?:([.,\\\\d]+)Y)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)W)?(?:([.,\\\\d]+)D)?(?:T?(?:([.,\\\\d]+)H)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)S)?)?$\",\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{1,5})(\\\\.[0-9]{1,18})?$\",\n  CMIIdentifier: \"^\\\\S{1,250}[a-zA-Z0-9]$\",\n  CMIShortIdentifier: \"^[\\\\w\\\\.\\\\-\\\\_]{1,250}$\",\n  CMILongIdentifier: \"^(?:(?!urn:)\\\\S{1,4000}|urn:[A-Za-z0-9-]{1,31}:\\\\S{1,4000}|.{1,4000})$\",\n  // need to re-examine this\n  CMIFeedback: \"^.*$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  CMIIndexStore: \".N(\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMICStatus: \"^(completed|incomplete|not attempted|unknown)$\",\n  CMISStatus: \"^(passed|failed|unknown)$\",\n  CMIExit: \"^(time-out|suspend|logout|normal)$\",\n  CMIType:\n    \"^(true-false|choice|fill-in|long-fill-in|matching|performance|sequencing|likert|numeric|other)$\",\n  CMIResult: \"^(correct|incorrect|unanticipated|neutral|-?([0-9]{1,4})(\\\\.[0-9]{1,18})?)$\",\n  NAVEvent:\n    \"^(previous|continue|exit|exitAll|abandon|abandonAll|suspendAll|_none_|(\\\\{target=(?<choice_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?choice|(\\\\{target=(?<jump_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?jump)$\",\n\n  NAVBoolean: \"^(unknown|true|false$)\",\n  NAVTarget: \"^{target=\\\\S{0,}[a-zA-Z0-9-_]+}$\",\n  // Data ranges\n  scaled_range: \"-1#1\",\n  audio_range: \"0#999.9999999\",\n  speed_range: \"0#999.9999999\",\n  text_range: \"-1#1\",\n  progress_range: \"0#1\",\n};\n","type APIError = {\n  errorCode: number;\n  errorMessage: string;\n  detailedMessage: string;\n};\n\nexport class BaseScormValidationError extends Error {\n  constructor(CMIElement: string, errorCode: number) {\n    super(`${CMIElement} : ${errorCode.toString()}`);\n    this._errorCode = errorCode;\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, BaseScormValidationError.prototype);\n  }\n\n  private readonly _errorCode: number;\n\n  /**\n   * Getter for _errorCode\n   * @return {number}\n   */\n  get errorCode(): number {\n    return this._errorCode;\n  }\n}\n\n/**\n * Base Validation Exception\n */\nexport class ValidationError extends BaseScormValidationError implements APIError {\n  /**\n   * Constructor to take in an error message and code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   * @param {string} errorMessage\n   * @param {string} detailedMessage\n   */\n  constructor(\n    CMIElement: string,\n    errorCode: number,\n    errorMessage: string,\n    detailedMessage?: string,\n  ) {\n    super(CMIElement, errorCode);\n    this.message = `${CMIElement} : ${errorMessage}`;\n    this._errorMessage = errorMessage;\n    if (detailedMessage) {\n      this._detailedMessage = detailedMessage;\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  private readonly _errorMessage: string;\n  private readonly _detailedMessage: string = \"\";\n\n  /**\n   * Getter for _errorMessage\n   * @return {string}\n   */\n  get errorMessage(): string {\n    return this._errorMessage;\n  }\n\n  /**\n   * Getter for _detailedMessage\n   * @return {string}\n   */\n  get detailedMessage(): string {\n    return this._detailedMessage;\n  }\n}\n","import { ValidationError } from \"../exceptions\";\nimport { scorm12_constants } from \"../constants/api_constants\";\n\nconst scorm12_errors = scorm12_constants.error_descriptions;\n\n/**\n * SCORM 1.2 Validation Error\n */\nexport class Scorm12ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm12_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm12_errors[String(errorCode)].basicMessage,\n        scorm12_errors[String(errorCode)].detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm12_errors[\"101\"].basicMessage,\n        scorm12_errors[\"101\"].detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm12ValidationError.prototype);\n  }\n}\n","/**\n * Base class for API cmi objects\n */\nexport abstract class BaseCMI {\n  jsonString? = false;\n  protected readonly _cmi_element: string;\n  protected _initialized = false;\n  private _start_time: number | undefined;\n\n  /**\n   * Constructor for BaseCMI\n   * @param {string} cmi_element\n   */\n  constructor(cmi_element: string) {\n    this._cmi_element = cmi_element;\n  }\n\n  /**\n   * Getter for _initialized\n   * @return {boolean}\n   */\n  get initialized(): boolean {\n    return this._initialized;\n  }\n\n  /**\n   * Getter for _start_time\n   * @return {number | undefined}\n   */\n  get start_time(): number | undefined {\n    return this._start_time;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize(): void {\n    this._initialized = true;\n  }\n\n  /**\n   * Called when the player should override the 'session_time' provided by\n   * the module\n   */\n  setStartTime(): void {\n    this._start_time = new Date().getTime();\n  }\n\n  abstract reset(): void;\n}\n\n/**\n * Base class for cmi root objects\n */\nexport abstract class BaseRootCMI extends BaseCMI {\n  abstract getCurrentTotalTime(): string;\n}\n","/**\n * Constants for time conversion calculations.\n * These are used throughout the codebase for converting between different time formats.\n */\nexport const SECONDS_PER_SECOND = 1.0;\nexport const SECONDS_PER_MINUTE = 60;\nexport const SECONDS_PER_HOUR = 60 * SECONDS_PER_MINUTE;\nexport const SECONDS_PER_DAY = 24 * SECONDS_PER_HOUR;\n\ntype Designation = {\n  [key: string]: number;\n};\n\n/**\n * A record with string keys and unknown values.\n * This is a more type-safe alternative to using `any`.\n */\nexport type StringKeyMap = Record<string, unknown>;\n\nconst designations: Designation = {\n  D: SECONDS_PER_DAY,\n  H: SECONDS_PER_HOUR,\n  M: SECONDS_PER_MINUTE,\n  S: SECONDS_PER_SECOND,\n};\n\n/**\n * Converts a number of seconds to a formatted time string in HH:MM:SS format.\n * This function handles decimal seconds and ensures proper formatting with leading zeros.\n *\n * @param {number|null} totalSeconds - The total number of seconds to convert. If null or negative, returns \"00:00:00\".\n * @return {string} A formatted time string in HH:MM:SS format, with up to 2 decimal places for seconds if applicable.\n *\n * @example\n * // Returns \"01:30:45\"\n * getSecondsAsHHMMSS(5445);\n *\n * @example\n * // Returns \"00:00:30.5\"\n * getSecondsAsHHMMSS(30.5);\n *\n * @example\n * // Returns \"00:00:00\"\n * getSecondsAsHHMMSS(null);\n */\nexport const getSecondsAsHHMMSS = memoize((totalSeconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!totalSeconds || totalSeconds <= 0) {\n    return \"00:00:00\";\n  }\n\n  const hours = Math.floor(totalSeconds / SECONDS_PER_HOUR);\n  const dateObj = new Date(totalSeconds * 1000);\n  const minutes = dateObj.getUTCMinutes();\n  // make sure we add any possible decimal value\n  const seconds = dateObj.getSeconds();\n  const ms = totalSeconds % 1.0;\n  let msStr = \"\";\n\n  if (countDecimals(ms) > 0) {\n    if (countDecimals(ms) > 2) {\n      msStr = ms.toFixed(2);\n    } else {\n      msStr = String(ms);\n    }\n\n    msStr = \".\" + msStr.split(\".\")[1];\n  }\n\n  return (hours + \":\" + minutes + \":\" + seconds).replace(/\\b\\d\\b/g, \"0$&\") + msStr;\n});\n\n/**\n * Converts a number of seconds to an ISO 8601 duration string (e.g., \"PT1H30M45S\").\n * This function handles the complexity of formatting according to the ISO 8601 standard,\n * including the proper placement of the \"T\" separator for time components.\n *\n * @param {number|null} seconds - The number of seconds to convert. If null or negative, returns \"PT0S\".\n * @return {string} An ISO 8601 formatted duration string.\n *\n * @example\n * // Returns \"PT1H30M45S\" (1 hour, 30 minutes, 45 seconds)\n * getSecondsAsISODuration(5445);\n *\n * @example\n * // Returns \"PT30.5S\" (30.5 seconds)\n * getSecondsAsISODuration(30.5);\n *\n * @example\n * // Returns \"P1DT1H\" (1 day, 1 hour)\n * getSecondsAsISODuration(90000);\n *\n * @example\n * // Returns \"PT0S\" (0 seconds)\n * getSecondsAsISODuration(null);\n */\nexport const getSecondsAsISODuration = memoize((seconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!seconds || seconds <= 0) {\n    return \"PT0S\";\n  }\n\n  let duration = \"P\";\n  let remainder = seconds;\n\n  // Convert to array of entries and use functional methods\n  const designationEntries = Object.entries(designations);\n\n  // Process each time designation\n  designationEntries.forEach(([designationsKey, current_seconds]) => {\n    let value = Math.floor(remainder / current_seconds);\n    remainder = remainder % current_seconds;\n\n    // Limit decimal places\n    if (countDecimals(remainder) > 2) {\n      remainder = Number(Number(remainder).toFixed(2));\n    }\n\n    // If we have anything left in the remainder, and we're currently adding\n    // seconds to the duration, go ahead and add the decimal to the seconds\n    if (designationsKey === \"S\" && remainder > 0) {\n      value += remainder;\n    }\n\n    if (value) {\n      // Add the 'T' separator for time components if needed\n      const needsTimeSeparator =\n        (duration.indexOf(\"D\") > 0 || [\"H\", \"M\", \"S\"].includes(designationsKey)) &&\n        duration.indexOf(\"T\") === -1;\n\n      if (needsTimeSeparator) {\n        duration += \"T\";\n      }\n\n      duration += `${value}${designationsKey}`;\n    }\n  });\n\n  return duration;\n});\n\n/**\n * Converts a time string in HH:MM:SS format to the equivalent number of seconds.\n * This function is flexible and can handle various input types, converting them to strings as needed.\n *\n * @param {string|number|boolean|null} timeString - The time string to convert, typically in HH:MM:SS format.\n *                                                 If not a string, it will be converted to one.\n *                                                 If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} timeRegex - The regular expression used to validate the time string format.\n *                                    If a string is provided, it will be converted to a RegExp.\n * @return {number} The total number of seconds represented by the time string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getTimeAsSeconds(\"01:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getTimeAsSeconds(\"invalid\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 30 (converts number to string \"30\" then parses as 0:0:30)\n * getTimeAsSeconds(30, /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport const getTimeAsSeconds = memoize(\n  (timeString: string | number | boolean | null, timeRegex: RegExp | string): number => {\n    if (typeof timeString === \"number\" || typeof timeString === \"boolean\") {\n      timeString = String(timeString);\n    }\n    if (typeof timeRegex === \"string\") {\n      timeRegex = new RegExp(timeRegex);\n    }\n    if (!timeString || !timeString?.match?.(timeRegex)) {\n      return 0;\n    }\n\n    const parts = timeString.split(\":\");\n    const hours = Number(parts[0]);\n    const minutes = Number(parts[1]);\n    const seconds = Number(parts[2]);\n    return hours * 3600 + minutes * 60 + seconds;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (timeString, timeRegex) => {\n    const timeStr = typeof timeString === \"string\" ? timeString : String(timeString ?? \"\");\n    const regexStr = typeof timeRegex === \"string\" ? timeRegex : (timeRegex?.toString() ?? \"\");\n    return `${timeStr}:${regexStr}`;\n  },\n);\n\n/**\n * Converts an ISO 8601 duration string (e.g., \"PT1H30M45S\") to the equivalent number of seconds.\n * This function parses the duration string using a regular expression to extract years, days,\n * hours, minutes, and seconds components.\n *\n * @param {string|null} duration - The ISO 8601 duration string to convert.\n *                                If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n *                                       The regex should have capture groups for years, days, hours, minutes, and seconds.\n * @return {number} The total number of seconds represented by the duration string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getDurationAsSeconds(\"PT1H30M45S\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 90000 (1 day, 1 hour)\n * getDurationAsSeconds(\"P1DT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getDurationAsSeconds(\"invalid\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport const getDurationAsSeconds = memoize(\n  (duration: string | null, durationRegex: RegExp | string): number => {\n    if (typeof durationRegex === \"string\") {\n      durationRegex = new RegExp(durationRegex);\n    }\n\n    if (!duration || !duration?.match?.(durationRegex)) {\n      return 0;\n    }\n\n    const [, years, _, , days, hours, minutes, seconds] =\n      new RegExp(durationRegex).exec?.(duration) ?? [];\n    let result = 0.0;\n    result += Number(seconds) || 0.0;\n    result += Number(minutes) * 60.0 || 0.0;\n    result += Number(hours) * 3600.0 || 0.0;\n    result += Number(days) * (60 * 60 * 24.0) || 0.0;\n    result += Number(years) * (60 * 60 * 24 * 365.0) || 0.0;\n    return result;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (duration, durationRegex) => {\n    const durationStr = duration ?? \"\";\n    const regexStr =\n      typeof durationRegex === \"string\" ? durationRegex : (durationRegex?.toString() ?? \"\");\n    return `${durationStr}:${regexStr}`;\n  },\n);\n\n/**\n * Adds together two ISO 8601 duration strings and returns the result as a new ISO 8601 duration string.\n * This function works by converting both durations to seconds, adding them together, and then\n * converting the result back to an ISO 8601 duration string.\n *\n * @param {string} first - The first ISO 8601 duration string.\n * @param {string} second - The second ISO 8601 duration string.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n * @return {string} A new ISO 8601 duration string representing the sum of the two input durations.\n *\n * @example\n * // Returns \"PT2H\" (1 hour + 1 hour = 2 hours)\n * addTwoDurations(\"PT1H\", \"PT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"PT1H30M\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addTwoDurations(\"PT1H\", \"PT30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"P1DT1H30M\" (1 day + 1 hour and 30 minutes = 1 day, 1 hour, and 30 minutes)\n * addTwoDurations(\"P1D\", \"PT1H30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport function addTwoDurations(\n  first: string,\n  second: string,\n  durationRegex: RegExp | string,\n): string {\n  const regex: RegExp =\n    typeof durationRegex === \"string\" ? new RegExp(durationRegex) : durationRegex;\n  return getSecondsAsISODuration(\n    getDurationAsSeconds(first, regex) + getDurationAsSeconds(second, regex),\n  );\n}\n\n/**\n * Adds together two time strings in HH:MM:SS format and returns the result as a new time string.\n * This function works by converting both time strings to seconds, adding them together, and then\n * converting the result back to an HH:MM:SS format.\n *\n * @param {string} first - The first time string in HH:MM:SS format.\n * @param {string} second - The second time string in HH:MM:SS format.\n * @param {RegExp|string} timeRegex - The regular expression used to validate and parse the time strings.\n *                                   If a string is provided, it will be converted to a RegExp.\n * @return {string} A new time string in HH:MM:SS format representing the sum of the two input times.\n *\n * @example\n * // Returns \"02:00:00\" (1 hour + 1 hour = 2 hours)\n * addHHMMSSTimeStrings(\"01:00:00\", \"01:00:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:00\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:45\" (1 hour + 30 minutes and 45 seconds = 1 hour, 30 minutes, and 45 seconds)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport function addHHMMSSTimeStrings(\n  first: string,\n  second: string,\n  timeRegex: RegExp | string,\n): string {\n  if (typeof timeRegex === \"string\") {\n    timeRegex = new RegExp(timeRegex);\n  }\n  return getSecondsAsHHMMSS(\n    getTimeAsSeconds(first, timeRegex) + getTimeAsSeconds(second, timeRegex),\n  );\n}\n\n/**\n * Flattens a nested JSON object into a flat object with dot notation for nested properties.\n * This function recursively traverses the object and creates new keys using dot notation\n * for nested objects and bracket notation for arrays.\n *\n * @param {StringKeyMap} data - The nested object to flatten.\n * @return {StringKeyMap} A flattened object where nested properties are represented with dot notation.\n *\n * @example\n * // Returns { \"a\": 1, \"b.c\": 2, \"b.d\": 3, \"e[0]\": 4, \"e[1]\": 5 }\n * flatten({\n *   a: 1,\n *   b: { c: 2, d: 3 },\n *   e: [4, 5]\n * });\n *\n * @example\n * // Returns { \"\": [] } for an empty array\n * flatten([]);\n *\n * @example\n * // Returns { \"\": {} } for an empty object\n * flatten({});\n */\nexport function flatten(data: StringKeyMap): StringKeyMap {\n  const result: StringKeyMap = {};\n\n  /**\n   * Recurse through the object\n   * @param {*} cur\n   * @param {*} prop\n   */\n  function recurse(cur: any, prop: any) {\n    if (Object(cur) !== cur) {\n      result[prop] = cur;\n    } else if (Array.isArray(cur)) {\n      // Use forEach instead of for loop\n      cur.forEach((item, i) => {\n        recurse(item, `${prop}[${i}]`);\n      });\n\n      if (cur.length === 0) result[prop] = [];\n    } else {\n      const keys = Object.keys(cur).filter((p) => Object.prototype.hasOwnProperty.call(cur, p));\n\n      const isEmpty = keys.length === 0;\n\n      // Use forEach instead of for...in loop\n      keys.forEach((p) => {\n        recurse(cur[p], prop ? `${prop}.${p}` : p);\n      });\n\n      if (isEmpty && prop) result[prop] = {};\n    }\n  }\n\n  recurse(data, \"\");\n  return result;\n}\n\n/**\n * Converts a flattened object back into a nested object structure.\n * This function is the inverse of `flatten()`. It parses dot notation and bracket notation\n * in property names to recreate the original nested structure.\n *\n * @param {StringKeyMap} data - The flattened object to unflatten.\n * @return {object} A nested object recreated from the flattened structure.\n *\n * @example\n * // Returns { a: 1, b: { c: 2, d: 3 }, e: [4, 5] }\n * unflatten({\n *   \"a\": 1,\n *   \"b.c\": 2,\n *   \"b.d\": 3,\n *   \"e[0]\": 4,\n *   \"e[1]\": 5\n * });\n *\n * @example\n * // Handles array indices correctly\n * unflatten({\n *   \"users[0].name\": \"John\",\n *   \"users[0].email\": \"john@example.com\",\n *   \"users[1].name\": \"Jane\",\n *   \"users[1].email\": \"jane@example.com\"\n * });\n * // Returns:\n * // {\n * //   users: [\n * //     { name: \"John\", email: \"john@example.com\" },\n * //     { name: \"Jane\", email: \"jane@example.com\" }\n * //   ]\n * // }\n */\nexport function unflatten(data: StringKeyMap): object {\n  \"use strict\";\n\n  if (Object(data) !== data || Array.isArray(data)) return data;\n  const result: StringKeyMap = {};\n\n  // Regex pattern for parsing property paths\n  const pattern = /\\.?([^.[\\]]+)|\\[(\\d+)]/g;\n\n  // Get all own properties and process them\n  Object.keys(data)\n    .filter((p) => Object.prototype.hasOwnProperty.call(data, p))\n    .forEach((p) => {\n      let cur = result;\n      let prop = \"\";\n\n      // Create a new regex instance for each property to reset lastIndex\n      const regex = new RegExp(pattern);\n\n      // Process all matches in the property path\n      Array.from({ length: p.match(new RegExp(pattern, \"g\"))?.length ?? 0 }, () =>\n        regex.exec(p),\n      ).forEach((m) => {\n        if (m) {\n          // Create array or object as needed\n          cur = (cur[prop] ?? (cur[prop] = m[2] ? [] : ({} as StringKeyMap))) as StringKeyMap;\n          prop = m[2] || m[1];\n        }\n      });\n\n      cur[prop] = data[p];\n    });\n\n  return (result[\"\"] ?? result) as object;\n}\n\n/**\n * Counts the number of decimal places in a number.\n * This function handles both integer and floating-point numbers.\n *\n * @param {number} num - The number to analyze.\n * @return {number} The number of decimal places. Returns 0 for integers or if the number doesn't have a decimal point.\n *\n * @example\n * // Returns 0\n * countDecimals(42);\n *\n * @example\n * // Returns 2\n * countDecimals(3.14);\n *\n * @example\n * // Returns 5\n * countDecimals(1.23456);\n */\nexport function countDecimals(num: number): number {\n  if (Math.floor(num) === num || String(num)?.indexOf?.(\".\") < 0) return 0;\n  const parts = num.toString().split(\".\")?.[1];\n  return parts?.length ?? 0;\n}\n\n/**\n * Formats SCORM messages for consistent and readable logging.\n * This function pads the function name and CMI element to create aligned log messages\n * that are easier to read in log files or console output.\n *\n * @param {string} functionName - The name of the function that generated the message.\n * @param {string} message - The message content to be logged.\n * @param {string} [CMIElement] - Optional. The CMI element related to the message.\n * @return {string} A formatted message string with consistent padding.\n *\n * @example\n * // Returns \"initialize          : Successfully initialized\"\n * formatMessage(\"initialize\", \"Successfully initialized\");\n *\n * @example\n * // Returns \"getValue            : cmi.core.student_id                                             : 12345\"\n * formatMessage(\"getValue\", \"12345\", \"cmi.core.student_id\");\n *\n * @example\n * // Returns \"setValue            : cmi.core.lesson_status                                          : completed\"\n * formatMessage(\"setValue\", \"completed\", \"cmi.core.lesson_status\");\n */\nexport function formatMessage(functionName: string, message: string, CMIElement?: string): string {\n  const baseLength = 20;\n\n  // Use string padding instead of loops\n  const paddedFunction = functionName.padEnd(baseLength);\n  let messageString = `${paddedFunction}: `;\n\n  if (CMIElement) {\n    const CMIElementBaseLength = 70;\n    // Add CMIElement and pad to the required length\n    messageString += CMIElement;\n    messageString = messageString.padEnd(CMIElementBaseLength);\n  }\n\n  // Add the message (or empty string if null/undefined)\n  messageString += message ?? \"\";\n\n  return messageString;\n}\n\n/**\n * Checks if a string contains a specific pattern using regular expression matching.\n * This function is a wrapper around JavaScript's String.match() method that handles\n * null/undefined values gracefully.\n *\n * @param {string} str - The string to search within. If null or undefined, returns false.\n * @param {string} tester - The pattern to search for. Can be a regular expression pattern.\n * @return {boolean} True if the pattern is found in the string, false otherwise.\n *\n * @example\n * // Returns true\n * stringMatches(\"Hello, world!\", \"world\");\n *\n * @example\n * // Returns true\n * stringMatches(\"The quick brown fox\", \"\\\\w+\\\\s+\\\\w+\");\n *\n * @example\n * // Returns false\n * stringMatches(\"Hello, world!\", \"universe\");\n *\n * @example\n * // Returns false (handles null gracefully)\n * stringMatches(null, \"test\");\n */\nexport function stringMatches(str: string, tester: string): boolean {\n  return str?.match(tester) !== null;\n}\n\n/**\n * Creates a memoized (cached) version of a function for performance optimization.\n * This function caches the results of previous calls with the same arguments,\n * avoiding redundant calculations for repeated calls with the same input.\n *\n * @template T - The type of the function to memoize\n * @param {T} fn - The function to memoize\n * @param {Function} [keyFn] - Optional function to generate a custom cache key.\n *                           Useful for functions with complex arguments that can't be serialized.\n * @return {T} A memoized version of the input function with the same signature\n *\n * @example\n * // Basic usage with a simple function\n * const memoizedAdd = memoize((a, b) => {\n *   console.log('Calculating...');\n *   return a + b;\n * });\n *\n * memoizedAdd(1, 2); // Logs \"Calculating...\" and returns 3\n * memoizedAdd(1, 2); // Returns 3 without logging (uses cached result)\n *\n * @example\n * // Using a custom key function for objects that can't be serialized\n * const memoizedProcessUser = memoize(\n *   (user) => {\n *     console.log('Processing user...');\n *     return { ...user, processed: true };\n *   },\n *   (user) => user.id // Use user.id as the cache key\n * );\n *\n * memoizedProcessUser({ id: 123, name: 'John' }); // Logs and processes\n * memoizedProcessUser({ id: 123, name: 'John' }); // Uses cached result\n */\nexport function memoize<T extends (...args: any[]) => any>(\n  fn: T,\n  keyFn?: (...args: Parameters<T>) => string,\n): T {\n  const cache = new Map<string, ReturnType<T>>();\n\n  return ((...args: Parameters<T>): ReturnType<T> => {\n    const key = keyFn ? keyFn(...args) : JSON.stringify(args);\n\n    return cache.has(key)\n      ? (cache.get(key) as ReturnType<T>)\n      : (() => {\n          const result = fn(...args);\n          cache.set(key, result);\n          return result;\n        })();\n  }) as T;\n}\n","import { BaseScormValidationError } from \"../../exceptions\";\nimport { memoize } from \"../../utilities\";\n\n/**\n * Check if the value matches the proper format. If not, throw proper error code.\n *\n * @param {string} value\n * @param {string} regexPattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @param {boolean} [allowEmptyString]\n * @return {boolean}\n */\nexport const checkValidFormat = memoize(\n  (\n    CMIElement: string,\n    value: string,\n    regexPattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n    allowEmptyString?: boolean,\n  ): boolean => {\n    if (typeof value !== \"string\") {\n      return false;\n    }\n    const formatRegex = new RegExp(regexPattern);\n    const matches = value.match(formatRegex);\n    if (allowEmptyString && value === \"\") {\n      return true;\n    }\n    if (value === undefined || !matches || matches[0] === \"\") {\n      throw new errorClass(CMIElement, errorCode);\n    }\n    return true;\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, regexPattern, errorCode, _errorClass, allowEmptyString) => {\n    // Use typeof for non-string values to ensure consistent cache keys\n    const valueKey = typeof value === \"string\" ? value : `[${typeof value}]`;\n    return `${CMIElement}:${valueKey}:${regexPattern}:${errorCode}:${allowEmptyString || false}`;\n  },\n);\n\n/**\n * Check if the value matches the proper range. If not, throw proper error code.\n *\n * @param {any} value\n * @param {string} rangePattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @return {boolean}\n */\nexport const checkValidRange = memoize(\n  (\n    CMIElement: string,\n    value: any,\n    rangePattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean => {\n    const ranges = rangePattern.split(\"#\");\n    value = value * 1.0;\n    if (value >= ranges[0]) {\n      if (ranges[1] === \"*\" || value <= ranges[1]) {\n        return true;\n      } else {\n        throw new errorClass(CMIElement, errorCode);\n      }\n    } else {\n      throw new errorClass(CMIElement, errorCode);\n    }\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, rangePattern, errorCode, _errorClass) =>\n    `${CMIElement}:${value}:${rangePattern}:${errorCode}`,\n);\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm12_errors.TYPE_MISMATCH,\n    Scorm12ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidRange(\n  CMIElement: string,\n  value: any,\n  rangePattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  if (!allowEmptyString && value === \"\") {\n    throw new Scorm12ValidationError(CMIElement, scorm12_errors.VALUE_OUT_OF_RANGE);\n  }\n\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm12_errors.VALUE_OUT_OF_RANGE,\n    Scorm12ValidationError,\n  );\n}\n","import { BaseScormValidationError } from \"../exceptions\";\nimport { checkValidFormat, checkValidRange } from \"../cmi/common/validation\";\nimport { check12ValidFormat, check12ValidRange } from \"../cmi/scorm12/validation\";\nimport { scorm12_regex } from \"../constants/regex\";\nimport { scorm12_errors } from \"../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../exceptions/scorm12_exceptions\";\n\n/**\n * Service for validating CMI data model properties\n */\nexport class ValidationService {\n  /**\n   * Validates a score property (raw, min, max)\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @param {string} decimalRegex - The regex pattern for decimal validation\n   * @param {string | false} scoreRange - The range pattern for score validation, or false if no range validation is needed\n   * @param {number} invalidTypeCode - The error code for invalid type\n   * @param {number} invalidRangeCode - The error code for invalid range\n   * @param {typeof BaseScormValidationError} errorClass - The error class to use for validation errors\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScore(\n    CMIElement: string,\n    value: string,\n    decimalRegex: string,\n    scoreRange: string | false,\n    invalidTypeCode: number,\n    invalidRangeCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean {\n    return (\n      checkValidFormat(CMIElement, value, decimalRegex, invalidTypeCode, errorClass) &&\n      (!scoreRange || checkValidRange(CMIElement, value, scoreRange, invalidRangeCode, errorClass))\n    );\n    // This line should never be reached due to exceptions being thrown\n  }\n\n  /**\n   * Validates a SCORM 1.2 audio property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Audio(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.audio_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 language property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Language(CMIElement: string, value: string): boolean {\n    return check12ValidFormat(CMIElement, value, scorm12_regex.CMIString256);\n  }\n\n  /**\n   * Validates a SCORM 1.2 speed property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Speed(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.speed_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 text property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Text(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.text_range)\n    );\n  }\n\n  /**\n   * Validates if a property is read-only\n   *\n   * @param {string} CMIElement\n   * @param {boolean} initialized - Whether the object is initialized\n   * @throws {BaseScormValidationError} - Throws an error if the object is initialized\n   */\n  validateReadOnly(CMIElement: string, initialized: boolean): void {\n    if (initialized) {\n      throw new Scorm12ValidationError(CMIElement, scorm12_errors.READ_ONLY_ELEMENT);\n    }\n  }\n}\n\n// Export a singleton instance of the ValidationService\nexport const validationService = new ValidationService();\n","import { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"./base_cmi\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { validationService } from \"../../services/ValidationService\";\n\n/**\n * Base class for cmi *.score objects\n */\nexport class CMIScore extends BaseCMI {\n  private readonly __children: string;\n  private readonly __score_range: string | false;\n  private readonly __invalid_error_code: number;\n  private readonly __invalid_type_code: number;\n  private readonly __invalid_range_code: number;\n  private readonly __decimal_regex: string;\n  private readonly __error_class: typeof BaseScormValidationError;\n  protected _raw = \"\";\n  protected _min = \"\";\n  protected _max: string;\n\n  /**\n   * Constructor for *.score\n   * @param {\n   *     score_children: string,\n   *     score_range: string,\n   *     max: string,\n   *     invalidErrorCode: number,\n   *     invalidTypeCode: number,\n   *     invalidRangeCode: number,\n   *     decimalRegex: string,\n   *     errorClass: typeof BaseScormValidationError\n   * } params\n   */\n  constructor(params: {\n    CMIElement: string;\n    score_children?: string;\n    score_range?: string;\n    max?: string;\n    invalidErrorCode?: number;\n    invalidTypeCode?: number;\n    invalidRangeCode?: number;\n    decimalRegex?: string;\n    errorClass: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n\n    this.__children = params.score_children || scorm12_constants.score_children;\n    this.__score_range = !params.score_range ? false : scorm12_regex.score_range;\n    this._max = params.max || params.max === \"\" ? params.max : \"100\";\n    this.__invalid_error_code = params.invalidErrorCode || scorm12_errors.INVALID_SET_VALUE;\n    this.__invalid_type_code = params.invalidTypeCode || scorm12_errors.TYPE_MISMATCH;\n    this.__invalid_range_code = params.invalidRangeCode || scorm12_errors.VALUE_OUT_OF_RANGE;\n    this.__decimal_regex = params.decimalRegex || scorm12_regex.CMIDecimal;\n    this.__error_class = params.errorClass;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this.__error_class(this._cmi_element + \"._children\", this.__invalid_error_code);\n  }\n\n  /**\n   * Getter for _raw\n   * @return {string}\n   */\n  get raw(): string {\n    return this._raw;\n  }\n\n  /**\n   * Setter for _raw\n   * @param {string} raw\n   */\n  set raw(raw: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".raw\",\n        raw,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._raw = raw;\n    }\n  }\n\n  /**\n   * Getter for _min\n   * @return {string}\n   */\n  get min(): string {\n    return this._min;\n  }\n\n  /**\n   * Setter for _min\n   * @param {string} min\n   */\n  set min(min: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".min\",\n        min,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._min = min;\n    }\n  }\n\n  /**\n   * Getter for _max\n   * @return {string}\n   */\n  get max(): string {\n    return this._max;\n  }\n\n  /**\n   * Setter for _max\n   * @param {string} max\n   */\n  set max(max: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".max\",\n        max,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._max = max;\n    }\n  }\n\n  /**\n   * toJSON for *.score\n   * @return {\n   *    {\n   *      min: string,\n   *      max: string,\n   *      raw: string\n   *    }\n   *    }\n   */\n  toJSON(): {\n    min: string;\n    max: string;\n    raw: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { check12ValidFormat } from \"../scorm12/validation\";\nimport * as Util from \"../../utilities\";\n\n/**\n * Class representing the `cmi.core` object\n * @extends BaseCMI\n */\nexport class CMICore extends BaseCMI {\n  /**\n   * Constructor for `cmi.core`\n   */\n  constructor() {\n    super(\"cmi.core\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.core.score\",\n      score_children: scorm12_constants.score_children,\n      score_range: scorm12_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n\n  public readonly score: CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  private __children = scorm12_constants.core_children;\n  private _student_id = \"\";\n  private _student_name = \"\";\n  private _lesson_location = \"\";\n  private _credit = \"\";\n  private _lesson_status = \"not attempted\";\n  private _entry = \"\";\n  private _total_time = \"\";\n  private _lesson_mode = \"normal\";\n  private _exit = \"\";\n  private _session_time = \"00:00:00\";\n  private _suspend_data = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._exit = \"\";\n    this._entry = \"\";\n\n    /**\n     * Resetting ensures we accurately track the time spent on each individual SCO session independently. Each new\n     * session should start from zero, so we can reset cmi.core.session_time at the beginning of each session.\n     */\n    this._session_time = \"00:00:00\";\n\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for _student_id\n   * @return {string}\n   */\n  get student_id(): string {\n    return this._student_id;\n  }\n\n  /**\n   * Setter for _student_id. Can only be called before  initialization.\n   * @param {string} student_id\n   */\n  set student_id(student_id: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".student_id\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._student_id = student_id;\n    }\n  }\n\n  /**\n   * Getter for _student_name\n   * @return {string}\n   */\n  get student_name(): string {\n    return this._student_name;\n  }\n\n  /**\n   * Setter for _student_name. Can only be called before  initialization.\n   * @param {string} student_name\n   */\n  set student_name(student_name: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".student_name\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._student_name = student_name;\n    }\n  }\n\n  /**\n   * Getter for _lesson_location\n   * @return {string}\n   */\n  get lesson_location(): string {\n    return this._lesson_location;\n  }\n\n  /**\n   * Setter for _lesson_location\n   * @param {string} lesson_location\n   */\n  set lesson_location(lesson_location: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".lesson_location\",\n        lesson_location,\n        scorm12_regex.CMIString256,\n        true,\n      )\n    ) {\n      this._lesson_location = lesson_location;\n    }\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this._credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before  initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".credit\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._credit = credit;\n    }\n  }\n\n  /**\n   * Getter for _lesson_status\n   * @return {string}\n   */\n  get lesson_status(): string {\n    return this._lesson_status;\n  }\n\n  /**\n   * Setter for _lesson_status\n   * @param {string} lesson_status\n   */\n  set lesson_status(lesson_status: string) {\n    if (this.initialized) {\n      if (\n        check12ValidFormat(\n          this._cmi_element + \".lesson_status\",\n          lesson_status,\n          scorm12_regex.CMIStatus,\n        )\n      ) {\n        this._lesson_status = lesson_status;\n      }\n    } else {\n      if (\n        check12ValidFormat(\n          this._cmi_element + \".lesson_status\",\n          lesson_status,\n          scorm12_regex.CMIStatus2,\n        )\n      ) {\n        this._lesson_status = lesson_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this._entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before  initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".entry\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._entry = entry;\n    }\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this._total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before  initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".total_time\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._total_time = total_time;\n    }\n  }\n\n  /**\n   * Getter for _lesson_mode\n   * @return {string}\n   */\n  get lesson_mode(): string {\n    return this._lesson_mode;\n  }\n\n  /**\n   * Setter for _lesson_mode. Can only be called before  initialization.\n   * @param {string} lesson_mode\n   */\n  set lesson_mode(lesson_mode: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".lesson_mode\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._lesson_mode = lesson_mode;\n    }\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".exit\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    if (check12ValidFormat(this._cmi_element + \".exit\", exit, scorm12_regex.CMIExit, true)) {\n      this._exit = exit;\n    }\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".session_time\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".session_time\",\n        session_time,\n        scorm12_regex.CMITimespan,\n      )\n    ) {\n      this._session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this._suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".suspend_data\",\n        suspend_data,\n        scorm12_regex.CMIString4096,\n        true,\n      )\n    ) {\n      this._suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   * @param {number} start_time\n   * @return {string}\n   */\n  getCurrentTotalTime(start_time: number | undefined): string {\n    let sessionTime = this._session_time;\n    const startTime = start_time;\n\n    if (typeof startTime !== \"undefined\" && startTime !== null) {\n      const seconds = new Date().getTime() - startTime;\n      sessionTime = Util.getSecondsAsHHMMSS(seconds / 1000);\n    }\n\n    return Util.addHHMMSSTimeStrings(\n      this._total_time,\n      sessionTime,\n      new RegExp(scorm12_regex.CMITimespan),\n    );\n  }\n\n  /**\n   * toJSON for cmi.core\n   *\n   * @return {\n   *    {\n   *      student_name: string,\n   *      entry: string,\n   *      exit: string,\n   *      score: CMIScore,\n   *      student_id: string,\n   *      lesson_mode: string,\n   *      lesson_location: string,\n   *      lesson_status: string,\n   *      credit: string,\n   *      session_time: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    student_name: string;\n    entry: string;\n    exit: string;\n    score: CMIScore;\n    student_id: string;\n    lesson_mode: string;\n    lesson_location: string;\n    lesson_status: string;\n    credit: string;\n    session_time: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      student_id: this.student_id,\n      student_name: this.student_name,\n      lesson_location: this.lesson_location,\n      credit: this.credit,\n      lesson_status: this.lesson_status,\n      entry: this.entry,\n      lesson_mode: this.lesson_mode,\n      exit: this.exit,\n      session_time: this.session_time,\n      score: this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseCMI } from \"./base_cmi\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Base class for cmi *.n objects\n */\nexport class CMIArray extends BaseCMI {\n  private readonly _errorCode: number;\n  private readonly _errorClass: typeof BaseScormValidationError;\n  private readonly __children: string;\n  public childArray: any[];\n\n  /**\n   * Constructor cmi *.n arrays\n   * @param {object} params\n   */\n  constructor(params: {\n    CMIElement: string;\n    children: string;\n    errorCode?: number;\n    errorClass?: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n    this.__children = params.children;\n    this._errorCode = params.errorCode || scorm12_errors.GENERAL;\n    this._errorClass = params.errorClass || BaseScormValidationError;\n    this.childArray = [];\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(wipe: boolean = false): void {\n    this._initialized = false;\n    if (wipe) {\n      this.childArray = [];\n    } else {\n      // Reset all children\n      for (let i = 0; i < this.childArray.length; i++) {\n        this.childArray[i].reset();\n      }\n    }\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this._errorClass(this._cmi_element + \"._children\", this._errorCode);\n  }\n\n  /**\n   * Getter for _count\n   * @return {number}\n   */\n  get _count(): number {\n    return this.childArray.length;\n  }\n\n  /**\n   * Setter for _count. Just throws an error.\n   * @param {number} _count\n   */\n  set _count(_count: number) {\n    throw new this._errorClass(this._cmi_element + \"._count\", this._errorCode);\n  }\n\n  /**\n   * toJSON for *.n arrays\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result: { [key: string]: any } = {};\n    for (let i = 0; i < this.childArray.length; i++) {\n      result[i + \"\"] = this.childArray[i];\n    }\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { check12ValidFormat } from \"./validation\";\nimport { CMIArray } from \"../common/array\";\n\n/**\n * Class representing SCORM 1.2's `cmi.objectives` object\n * @extends CMIArray\n */\nexport class CMIObjectives extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives`\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.objectives\",\n      children: scorm12_constants.objectives_children,\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super(\"cmi.objectives.n\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.objectives.n.score\",\n      score_children: scorm12_constants.score_children,\n      score_range: scorm12_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n\n  public readonly score: CMIScore;\n\n  private _id = \"\";\n  private _status = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._id = \"\";\n    this._status = \"\";\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check12ValidFormat(this._cmi_element + \".id\", id, scorm12_regex.CMIIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _status\n   * @return {string}\n   */\n  get status(): string {\n    return this._status;\n  }\n\n  /**\n   * Setter for _status\n   * @param {string} status\n   */\n  set status(status: string) {\n    if (check12ValidFormat(this._cmi_element + \".status\", status, scorm12_regex.CMIStatus2)) {\n      this._status = status;\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   * @return {\n   *    {\n   *      id: string,\n   *      status: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    status: string;\n    score: CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      status: this.status,\n      score: this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { validationService } from \"../../services/ValidationService\";\n\n/**\n * Class representing the SCORM 1.2 cmi.student_data object\n * @extends BaseCMI\n */\nexport class CMIStudentData extends BaseCMI {\n  private readonly __children;\n  private _mastery_score = \"\";\n  private _max_time_allowed = \"\";\n  private _time_limit_action = \"\";\n\n  /**\n   * Constructor for cmi.student_data\n   * @param {string} student_data_children\n   */\n  constructor(student_data_children?: string) {\n    super(\"cmi.student_data\");\n    this.__children = student_data_children\n      ? student_data_children\n      : scorm12_constants.student_data_children;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for _master_score\n   * @return {string}\n   */\n  get mastery_score(): string {\n    return this._mastery_score;\n  }\n\n  /**\n   * Setter for _master_score. Can only be called before  initialization.\n   * @param {string} mastery_score\n   */\n  set mastery_score(mastery_score: string) {\n    validationService.validateReadOnly(this._cmi_element + \".mastery_score\", this.initialized);\n    this._mastery_score = mastery_score;\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this._max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before  initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    validationService.validateReadOnly(this._cmi_element + \".max_time_allowed\", this.initialized);\n    this._max_time_allowed = max_time_allowed;\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this._time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before  initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    validationService.validateReadOnly(this._cmi_element + \".time_limit_action\", this.initialized);\n    this._time_limit_action = time_limit_action;\n  }\n\n  /**\n   * toJSON for cmi.student_data\n   *\n   * @return {\n   *    {\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      mastery_score: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    mastery_score: string;\n    max_time_allowed: string;\n    time_limit_action: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      mastery_score: this.mastery_score,\n      max_time_allowed: this.max_time_allowed,\n      time_limit_action: this.time_limit_action,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { validationService } from \"../../services/ValidationService\";\n\n/**\n * Class representing the SCORM 1.2 cmi.student_preference object\n * @extends BaseCMI\n */\nexport class CMIStudentPreference extends BaseCMI {\n  private readonly __children;\n\n  /**\n   * Constructor for cmi.student_preference\n   * @param {string} student_preference_children\n   */\n  constructor(student_preference_children?: string) {\n    super(\"cmi.student_preference\");\n    this.__children = student_preference_children\n      ? student_preference_children\n      : scorm12_constants.student_preference_children;\n  }\n\n  private _audio = \"\";\n  private _language = \"\";\n  private _speed = \"\";\n  private _text = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for _audio\n   * @return {string}\n   */\n  get audio(): string {\n    return this._audio;\n  }\n\n  /**\n   * Setter for _audio\n   * @param {string} audio\n   */\n  set audio(audio: string) {\n    if (validationService.validateScorm12Audio(this._cmi_element + \".audio\", audio)) {\n      this._audio = audio;\n    }\n  }\n\n  /**\n   * Getter for _language\n   * @return {string}\n   */\n  get language(): string {\n    return this._language;\n  }\n\n  /**\n   * Setter for _language\n   * @param {string} language\n   */\n  set language(language: string) {\n    if (validationService.validateScorm12Language(this._cmi_element + \".language\", language)) {\n      this._language = language;\n    }\n  }\n\n  /**\n   * Getter for _speed\n   * @return {string}\n   */\n  get speed(): string {\n    return this._speed;\n  }\n\n  /**\n   * Setter for _speed\n   * @param {string} speed\n   */\n  set speed(speed: string) {\n    if (validationService.validateScorm12Speed(this._cmi_element + \".speed\", speed)) {\n      this._speed = speed;\n    }\n  }\n\n  /**\n   * Getter for _text\n   * @return {string}\n   */\n  get text(): string {\n    return this._text;\n  }\n\n  /**\n   * Setter for _text\n   * @param {string} text\n   */\n  set text(text: string) {\n    if (validationService.validateScorm12Text(this._cmi_element + \".text\", text)) {\n      this._text = text;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_preference\n   *\n   * @return {\n   *    {\n   *      audio: string,\n   *      language: string,\n   *      speed: string,\n   *      text: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    audio: string;\n    language: string;\n    speed: string;\n    text: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio: this.audio,\n      language: this.language,\n      speed: this.speed,\n      text: this.text,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check12ValidFormat, check12ValidRange } from \"./validation\";\nimport { scorm12_regex } from \"../../constants/regex\";\n\n/**\n * Class representing the SCORM 1.2 `cmi.interactions`\n * @extends CMIArray\n */\nexport class CMIInteractions extends CMIArray {\n  /**\n   * Constructor for `cmi.interactions`\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.interactions\",\n      children: scorm12_constants.interactions_children,\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n object\n   */\n  constructor() {\n    super(\"cmi.interactions.n\");\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: Scorm12ValidationError,\n      children: scorm12_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.correct_responses\",\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: Scorm12ValidationError,\n      children: scorm12_constants.correct_responses_children,\n    });\n  }\n\n  public readonly objectives: CMIArray;\n  public readonly correct_responses: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  private _id = \"\";\n  private _time = \"\";\n  private _type = \"\";\n  private _weighting = \"\";\n  private _student_response = \"\";\n  private _result = \"\";\n  private _latency = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n\n    this._id = \"\";\n    this._time = \"\";\n    this._type = \"\";\n    this._weighting = \"\";\n    this._student_response = \"\";\n    this._result = \"\";\n    this._latency = \"\";\n\n    this.objectives?.reset();\n    this.correct_responses?.reset();\n  }\n\n  /**\n   * Getter for _id. Should only be called during JSON export.\n   * @return {string}\n   */\n  get id(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".id\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check12ValidFormat(this._cmi_element + \".id\", id, scorm12_regex.CMIIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get time(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".time\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._time;\n  }\n\n  /**\n   * Setter for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (check12ValidFormat(this._cmi_element + \".time\", time, scorm12_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * Getter for _type. Should only be called during JSON export.\n   * @return {string}\n   */\n  get type(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".type\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._type;\n  }\n\n  /**\n   * Setter for _type\n   * @param {string} type\n   */\n  set type(type: string) {\n    if (check12ValidFormat(this._cmi_element + \".type\", type, scorm12_regex.CMIType)) {\n      this._type = type;\n    }\n  }\n\n  /**\n   * Getter for _weighting. Should only be called during JSON export.\n   * @return {string}\n   */\n  get weighting(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".weighting\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._weighting;\n  }\n\n  /**\n   * Setter for _weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting: string) {\n    if (\n      check12ValidFormat(this._cmi_element + \".weighting\", weighting, scorm12_regex.CMIDecimal) &&\n      check12ValidRange(this._cmi_element + \".weighting\", weighting, scorm12_regex.weighting_range)\n    ) {\n      this._weighting = weighting;\n    }\n  }\n\n  /**\n   * Getter for _student_response. Should only be called during JSON export.\n   * @return {string}\n   */\n  get student_response(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".student_response\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._student_response;\n  }\n\n  /**\n   * Setter for _student_response\n   * @param {string} student_response\n   */\n  set student_response(student_response: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".student_response\",\n        student_response,\n        scorm12_regex.CMIFeedback,\n        true,\n      )\n    ) {\n      this._student_response = student_response;\n    }\n  }\n\n  /**\n   * Getter for _result. Should only be called during JSON export.\n   * @return {string}\n   */\n  get result(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".result\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._result;\n  }\n\n  /**\n   * Setter for _result\n   * @param {string} result\n   */\n  set result(result: string) {\n    if (check12ValidFormat(this._cmi_element + \".result\", result, scorm12_regex.CMIResult)) {\n      this._result = result;\n    }\n  }\n\n  /**\n   * Getter for _latency. Should only be called during JSON export.\n   * @return {string}\n   */\n  get latency(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".latency\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._latency;\n  }\n\n  /**\n   * Setter for _latency\n   * @param {string} latency\n   */\n  set latency(latency: string) {\n    if (check12ValidFormat(this._cmi_element + \".latency\", latency, scorm12_regex.CMITimespan)) {\n      this._latency = latency;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      time: string,\n   *      type: string,\n   *      weighting: string,\n   *      student_response: string,\n   *      result: string,\n   *      latency: string,\n   *      objectives: CMIArray,\n   *      correct_responses: CMIArray\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    time: string;\n    type: string;\n    weighting: string;\n    student_response: string;\n    result: string;\n    latency: string;\n    objectives: CMIArray;\n    correct_responses: CMIArray;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      time: this.time,\n      type: this.type,\n      weighting: this.weighting,\n      student_response: this.student_response,\n      result: this.result,\n      latency: this.latency,\n      objectives: this.objectives,\n      correct_responses: this.correct_responses,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n.objectives.n\");\n  }\n\n  private _id = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._id = \"\";\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check12ValidFormat(this._cmi_element + \".id\", id, scorm12_regex.CMIIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.correct_responses.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.correct_responses.n\n   */\n  constructor() {\n    super(\"cmi.interactions.correct_responses.n\");\n  }\n\n  private _pattern = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._pattern = \"\";\n  }\n\n  /**\n   * Getter for _pattern\n   * @return {string}\n   */\n  get pattern(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".pattern\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._pattern;\n  }\n\n  /**\n   * Setter for _pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern: string) {\n    if (\n      check12ValidFormat(this._cmi_element + \".pattern\", pattern, scorm12_regex.CMIFeedback, true)\n    ) {\n      this._pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.correct_responses.n\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    pattern: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      pattern: this._pattern,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { BaseRootCMI } from \"../common/base_cmi\";\nimport { check12ValidFormat } from \"./validation\";\nimport { CMICore } from \"../aicc/core\";\nimport { CMIObjectives } from \"./objectives\";\nimport { CMIStudentData } from \"./student_data\";\nimport { CMIStudentPreference } from \"./student_preference\";\nimport { CMIInteractions } from \"./interactions\";\n\n/**\n * Class representing the cmi object for SCORM 1.2\n */\nexport class CMI extends BaseRootCMI {\n  private readonly __children: string = \"\";\n  private __version: string = \"3.4\";\n  private _launch_data: string = \"\";\n  private _comments: string = \"\";\n  private _comments_from_lms: string = \"\";\n\n  /**\n   * Constructor for the SCORM 1.2 cmi object\n   * @param {string} cmi_children\n   * @param {(CMIStudentData|AICCCMIStudentData)} student_data\n   * @param {boolean} initialized\n   */\n  constructor(cmi_children?: string, student_data?: CMIStudentData, initialized?: boolean) {\n    super(\"cmi\");\n    if (initialized) this.initialize();\n    this.__children = cmi_children ? cmi_children : scorm12_constants.cmi_children;\n    this.core = new CMICore();\n    this.objectives = new CMIObjectives();\n    this.student_data = student_data ? student_data : new CMIStudentData();\n    this.student_preference = new CMIStudentPreference();\n    this.interactions = new CMIInteractions();\n  }\n\n  public core: CMICore;\n  public objectives: CMIObjectives;\n  public student_data: CMIStudentData;\n  public student_preference: CMIStudentPreference;\n  public interactions: CMIInteractions;\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._launch_data = \"\";\n    this._comments = \"\";\n    this.core?.reset();\n    this.objectives = new CMIObjectives();\n    this.interactions = new CMIInteractions();\n    this.student_data?.reset();\n    this.student_preference?.reset();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.core?.initialize();\n    this.objectives?.initialize();\n    this.student_data?.initialize();\n    this.student_preference?.initialize();\n    this.interactions?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions\n   *    }\n   *  }\n   */\n  toJSON(): {\n    suspend_data: string;\n    launch_data: string;\n    comments: string;\n    comments_from_lms: string;\n    core: CMICore;\n    objectives: CMIObjectives;\n    student_data: CMIStudentData;\n    student_preference: CMIStudentPreference;\n    interactions: CMIInteractions;\n  } {\n    this.jsonString = true;\n    const result = {\n      suspend_data: this.suspend_data,\n      launch_data: this.launch_data,\n      comments: this.comments,\n      comments_from_lms: this.comments_from_lms,\n      core: this.core,\n      objectives: this.objectives,\n      student_data: this.student_data,\n      student_preference: this.student_preference,\n      interactions: this.interactions,\n    };\n    delete this.jsonString;\n    return result;\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   */\n  get _version(): string {\n    return this.__version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._version\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this.core?.suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (this.core) {\n      this.core.suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this._launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before  initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".launch_data\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._launch_data = launch_data;\n    }\n  }\n\n  /**\n   * Getter for _comments\n   * @return {string}\n   */\n  get comments(): string {\n    return this._comments;\n  }\n\n  /**\n   * Setter for _comments\n   * @param {string} comments\n   */\n  set comments(comments: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".comments\",\n        comments,\n        scorm12_regex.CMIString4096,\n        true,\n      )\n    ) {\n      this._comments = comments;\n    }\n  }\n\n  /**\n   * Getter for _comments_from_lms\n   * @return {string}\n   */\n  get comments_from_lms(): string {\n    return this._comments_from_lms;\n  }\n\n  /**\n   * Setter for _comments_from_lms. Can only be called before  initialization.\n   * @param {string} comments_from_lms\n   */\n  set comments_from_lms(comments_from_lms: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".comments_from_lms\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._comments_from_lms = comments_from_lms;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string}\n   */\n  getCurrentTotalTime(): string {\n    return this.core.getCurrentTotalTime(this.start_time);\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { check12ValidFormat } from \"./validation\";\nimport { scorm12_regex } from \"../../constants/regex\";\n\n/**\n * Class for AICC Navigation object\n */\nexport class NAV extends BaseCMI {\n  /**\n   * Constructor for NAV object\n   */\n  constructor() {\n    super(\"cmi.nav\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._event = \"\";\n    this._initialized = false;\n  }\n\n  private _event = \"\";\n\n  /**\n   * Getter for _event\n   * @return {string}\n   */\n  get event(): string {\n    return this._event;\n  }\n\n  /**\n   * Setter for _event\n   * @param {string} event\n   */\n  set event(event: string) {\n    if (\n      event === \"\" ||\n      check12ValidFormat(this._cmi_element + \".event\", event, scorm12_regex.NAVEvent)\n    ) {\n      this._event = event;\n    }\n  }\n\n  /**\n   * toJSON for nav object\n   * @return {\n   *    {\n   *      event: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    event: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      event: this.event,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","// Using plain objects instead of enums for better compatibility with strip-only mode\n// This approach avoids TypeScript enum runtime code while maintaining the same API\n\n// NAVBoolean values\nexport const NAVBoolean = {\n  UNKNOWN: \"unknown\",\n  TRUE: \"true\",\n  FALSE: \"false\",\n};\n\n// Type for NAVBoolean values\nexport type NAVBoolean = (typeof NAVBoolean)[keyof typeof NAVBoolean];\n\n// SuccessStatus values\nexport const SuccessStatus = {\n  PASSED: \"passed\",\n  FAILED: \"failed\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for SuccessStatus values\nexport type SuccessStatus = (typeof SuccessStatus)[keyof typeof SuccessStatus];\n\n// CompletionStatus values\nexport const CompletionStatus = {\n  COMPLETED: \"completed\",\n  INCOMPLETE: \"incomplete\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for CompletionStatus values\nexport type CompletionStatus = (typeof CompletionStatus)[keyof typeof CompletionStatus];\n\n// LogLevelEnum values\nexport const LogLevelEnum = {\n  _: 0,\n  DEBUG: 1,\n  INFO: 2,\n  WARN: 3,\n  ERROR: 4,\n  NONE: 5,\n};\n\n// Type for LogLevelEnum values\nexport type LogLevelEnum = (typeof LogLevelEnum)[keyof typeof LogLevelEnum];\n","import { LogLevel, ResultObject, Settings } from \"../types/api_types\";\nimport { global_constants } from \"./api_constants\";\nimport { LogLevelEnum } from \"./enums\";\n\n/**\n * Default settings for the SCORM API\n */\nexport const DefaultSettings: Settings = {\n  autocommit: false,\n  autocommitSeconds: 10,\n  asyncCommit: false,\n  sendFullCommit: true,\n  lmsCommitUrl: false,\n  dataCommitFormat: \"json\",\n  commitRequestDataType: \"application/json;charset=UTF-8\",\n  autoProgress: false,\n  logLevel: LogLevelEnum.ERROR,\n  selfReportSessionTime: false,\n  alwaysSendTotalTime: false,\n  renderCommonCommitFields: false,\n  strict_errors: true,\n  xhrHeaders: {},\n  xhrWithCredentials: false,\n  fetchMode: \"cors\",\n  responseHandler: async function (response: Response): Promise<ResultObject> {\n    if (typeof response !== \"undefined\") {\n      let httpResult = null;\n\n      // Handle both text() and json() response methods\n      try {\n        if (typeof response.json === \"function\") {\n          // Try to get JSON directly if the method exists\n          httpResult = await response.json();\n        } else if (typeof response.text === \"function\") {\n          // Fall back to text() if json() is not available\n          const responseText = await response.text();\n          if (responseText) {\n            httpResult = JSON.parse(responseText);\n          }\n        }\n      } catch (e) {\n        // If parsing fails, continue with null httpResult\n      }\n\n      if (httpResult === null || !{}.hasOwnProperty.call(httpResult, \"result\")) {\n        if (response.status === 200) {\n          return {\n            result: global_constants.SCORM_TRUE,\n            errorCode: 0,\n          };\n        } else {\n          return {\n            result: global_constants.SCORM_FALSE,\n            errorCode: 101,\n          };\n        }\n      } else {\n        return {\n          result: httpResult.result,\n          errorCode: httpResult.errorCode\n            ? httpResult.errorCode\n            : httpResult.result === global_constants.SCORM_TRUE\n              ? 0\n              : 101,\n        };\n      }\n    }\n    return {\n      result: global_constants.SCORM_FALSE,\n      errorCode: 101,\n    };\n  },\n  requestHandler: function (commitObject) {\n    return commitObject;\n  },\n  onLogMessage: defaultLogHandler,\n  scoItemIds: [],\n  scoItemIdValidator: false,\n  globalObjectiveIds: [],\n\n  // Offline support settings\n  enableOfflineSupport: false,\n  courseId: \"\",\n  syncOnInitialize: true,\n  syncOnTerminate: true,\n  maxSyncAttempts: 5,\n};\n\nexport function defaultLogHandler(messageLevel: LogLevel, logMessage: string): void {\n  switch (messageLevel) {\n    case \"4\":\n    case 4:\n    case \"ERROR\":\n    case LogLevelEnum.ERROR:\n      console.error(logMessage);\n      break;\n    case \"3\":\n    case 3:\n    case \"WARN\":\n    case LogLevelEnum.WARN:\n      console.warn(logMessage);\n      break;\n    case \"2\":\n    case 2:\n    case \"INFO\":\n    case LogLevelEnum.INFO:\n      console.info(logMessage);\n      break;\n    case \"1\":\n    case 1:\n    case \"DEBUG\":\n    case LogLevelEnum.DEBUG:\n      if (console.debug) {\n        console.debug(logMessage);\n      } else {\n        console.log(logMessage);\n      }\n      break;\n  }\n}\n","import BaseAPI from \"../BaseAPI\";\n\n/**\n * Private class that wraps a timeout call to the commit() function\n */\nexport class ScheduledCommit {\n  private _API;\n  private _cancelled = false;\n  private readonly _timeout;\n  private readonly _callback;\n\n  /**\n   * Constructor for ScheduledCommit\n   * @param {BaseAPI} API\n   * @param {number} when\n   * @param {string} callback\n   */\n  constructor(API: BaseAPI, when: number, callback: string) {\n    this._API = API;\n    this._timeout = setTimeout(this.wrapper.bind(this), when);\n    this._callback = callback;\n  }\n\n  /**\n   * Cancel any currently scheduled commit\n   */\n  cancel() {\n    this._cancelled = true;\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n  }\n\n  /**\n   * Wrap the API commit call to check if the call has already been cancelled\n   */\n  wrapper() {\n    if (!this._cancelled) {\n      (async () => await this._API.commit(this._callback))();\n    }\n  }\n}\n","import { CommitObject, ResultObject, Settings } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { IHttpService } from \"../interfaces/services\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { StringKeyMap } from \"../utilities\";\n\n/**\n * Service for handling HTTP communication with the LMS\n */\nexport class HttpService implements IHttpService {\n  private settings: Settings;\n  private error_codes: ErrorCode;\n\n  /**\n   * Constructor for HttpService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   */\n  constructor(settings: Settings, error_codes: ErrorCode) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n  }\n\n  /**\n   * Sends HTTP requests to the LMS with special handling for immediate and standard requests.\n   *\n   * This method handles communication with the LMS server, implementing two distinct\n   * request handling strategies based on the context:\n   *\n   * 1. Immediate Mode (used during termination):\n   *    When immediate=true, the method:\n   *    - Initiates the fetch request but doesn't wait for it to complete\n   *    - Returns a success result immediately\n   *    - Processes the response asynchronously when it arrives\n   *\n   *    This is critical for browser compatibility during page unload/termination,\n   *    as some browsers (especially Chrome) may cancel synchronous or awaited\n   *    requests when a page is closing.\n   *\n   * 2. Standard Mode (normal operation):\n   *    When immediate=false, the method:\n   *    - Processes the request parameters through the configured requestHandler\n   *    - Awaits the fetch response completely\n   *    - Transforms the response using the configured responseHandler\n   *    - Triggers appropriate event listeners based on success/failure\n   *    - Returns the complete result with appropriate error codes\n   *\n   * The method also includes error handling to catch network failures or other\n   * exceptions that might occur during the request process.\n   *\n   * @param {string} url - The URL endpoint to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The data to send to the LMS\n   * @param {boolean} immediate - Whether to send the request immediately without waiting (true) or process normally (false)\n   * @param {Function} apiLog - Function to log API messages with appropriate levels\n   * @param {Function} processListeners - Function to trigger event listeners for commit events\n   * @return {Promise<ResultObject>} - A promise that resolves with the result of the request\n   *\n   * @example\n   * // Standard request (waits for response)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   false,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   *\n   * @example\n   * // Immediate request (for termination)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   true,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   * // result will be success immediately, regardless of actual HTTP result\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n    apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    const genericError: ResultObject = {\n      result: global_constants.SCORM_FALSE,\n      errorCode: this.error_codes.GENERAL,\n    };\n\n    // if we are terminating the module or closing the browser window/tab, we need to make this fetch ASAP.\n    // Some browsers, especially Chrome, do not like synchronous requests to be made when the window is closing.\n    if (immediate) {\n      this.performFetch(url, params).then(async (response) => {\n        await this.transformResponse(response, processListeners);\n      });\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    }\n\n    const process = async (\n      url: string,\n      params: CommitObject | StringKeyMap | Array<any>,\n      settings: Settings,\n    ): Promise<ResultObject> => {\n      try {\n        params = settings.requestHandler(params) as CommitObject | StringKeyMap | Array<any>;\n        const response = await this.performFetch(url, params);\n\n        return this.transformResponse(response, processListeners);\n      } catch (e) {\n        apiLog(\"processHttpRequest\", e, LogLevelEnum.ERROR);\n        processListeners(\"CommitError\");\n        return genericError;\n      }\n    };\n\n    return await process(url, params, this.settings);\n  }\n\n  /**\n   * Perform the fetch request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - The response from the LMS\n   * @private\n   */\n  private async performFetch(url: string, params: StringKeyMap | Array<any>): Promise<Response> {\n    return fetch(url, {\n      method: \"POST\",\n      mode: this.settings.fetchMode,\n      body: params instanceof Array ? params.join(\"&\") : JSON.stringify(params),\n      headers: {\n        ...this.settings.xhrHeaders,\n        \"Content-Type\": this.settings.commitRequestDataType,\n      },\n      credentials: this.settings.xhrWithCredentials ? \"include\" : undefined,\n      keepalive: true,\n    });\n  }\n\n  /**\n   * Transforms the response from the LMS to a ResultObject\n   * @param {Response} response - The response from the LMS\n   * @param {Function} processListeners - Function to process event listeners\n   * @return {Promise<ResultObject>} - The transformed response\n   * @private\n   */\n  private async transformResponse(\n    response: Response,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    const result =\n      typeof this.settings.responseHandler === \"function\"\n        ? await this.settings.responseHandler(response)\n        : await response.json();\n\n    if (\n      response.status >= 200 &&\n      response.status <= 299 &&\n      (result.result === true || result.result === global_constants.SCORM_TRUE)\n    ) {\n      processListeners(\"CommitSuccess\");\n      if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n        result.errorCode = 0;\n      }\n    } else {\n      if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n        result.errorCode = this.error_codes.GENERAL;\n      }\n      processListeners(\"CommitError\", null, result.errorCode);\n    }\n    return result;\n  }\n\n  /**\n   * Updates the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: Settings): void {\n    this.settings = settings;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { stringMatches } from \"../utilities\";\nimport { IEventService } from \"../interfaces/services\";\n\n/**\n * Interface for a listener object\n */\ninterface Listener {\n  functionName: string;\n  CMIElement: string | null;\n  callback: Function;\n}\n\n/**\n * Type for parsed listener information\n */\ninterface ParsedListener {\n  functionName: string;\n  CMIElement: string | null;\n}\n\n/**\n * Service for handling event listeners and event processing\n */\nexport class EventService implements IEventService {\n  // Map of function names to listeners for faster lookups\n  private listenerMap: Map<string, Listener[]> = new Map();\n  // Total count of listeners for logging\n  private listenerCount = 0;\n  // Function to log API messages\n  private readonly apiLog: (\n    functionName: string,\n    message: string,\n    messageLevel: LogLevel,\n    CMIElement?: string,\n  ) => void;\n\n  /**\n   * Constructor for EventService\n   * @param {Function} apiLog - Function to log API messages\n   */\n  constructor(\n    apiLog: (\n      functionName: string,\n      message: string,\n      messageLevel: LogLevel,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.apiLog = apiLog;\n  }\n\n  /**\n   * Parses a listener name into its components\n   *\n   * @param {string} listenerName - The name of the listener\n   * @returns {ParsedListener|null} - The parsed listener information or null if invalid\n   */\n  private parseListenerName(listenerName: string): ParsedListener | null {\n    const listenerSplit = listenerName.split(\".\");\n    if (listenerSplit.length === 0) return null;\n\n    const functionName = listenerSplit[0];\n    let CMIElement = null;\n\n    if (listenerSplit.length > 1) {\n      CMIElement = listenerName.replace(`${functionName}.`, \"\");\n    }\n\n    return { functionName, CMIElement };\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener\n   * @param {Function} callback - The callback function to execute when the event occurs\n   */\n  on(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get or create the array for this function name\n      const listeners = this.listenerMap.get(functionName) ?? [];\n\n      // Add the new listener\n      listeners.push({\n        functionName,\n        CMIElement,\n        callback,\n      });\n\n      // Update the map and count\n      this.listenerMap.set(functionName, listeners);\n      this.listenerCount++;\n\n      this.apiLog(\n        \"on\",\n        `Added event listener: ${this.listenerCount}`,\n        LogLevelEnum.INFO,\n        functionName,\n      );\n    }\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener\n   *\n   * @param {string} listenerName - The name of the listener to remove\n   * @param {Function} callback - The callback function to remove\n   */\n  off(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get the listeners for this function name\n      const listeners = this.listenerMap.get(functionName);\n      if (!listeners) continue;\n\n      // Find the index of the listener to remove\n      const removeIndex = listeners.findIndex(\n        (obj) => obj.CMIElement === CMIElement && obj.callback === callback,\n      );\n\n      if (removeIndex !== -1) {\n        // Remove the listener\n        listeners.splice(removeIndex, 1);\n        this.listenerCount--;\n\n        // Update the map or remove the entry if empty\n        if (listeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, listeners);\n        }\n\n        this.apiLog(\n          \"off\",\n          `Removed event listener: ${this.listenerCount}`,\n          LogLevelEnum.INFO,\n          functionName,\n        );\n      }\n    }\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener to clear\n   */\n  clear(listenerName: string) {\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // If we have listeners for this function name\n      if (this.listenerMap.has(functionName)) {\n        const listeners = this.listenerMap.get(functionName)!;\n\n        // Filter out listeners that match the criteria\n        const newListeners = listeners.filter((obj) => obj.CMIElement !== CMIElement);\n\n        // Update the count and map\n        this.listenerCount -= listeners.length - newListeners.length;\n\n        if (newListeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, newListeners);\n        }\n      }\n    }\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created\n   *\n   * @param {string} functionName - The name of the function that triggered the event\n   * @param {string} CMIElement - The CMI element that was affected\n   * @param {any} value - The value that was set\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this.apiLog(functionName, value, LogLevelEnum.INFO, CMIElement);\n\n    // Get listeners for this function name\n    const listeners = this.listenerMap.get(functionName);\n    if (!listeners) return;\n\n    for (const listener of listeners) {\n      const listenerHasCMIElement = !!listener.CMIElement;\n      let CMIElementsMatch = false;\n\n      // Check if CMI elements match\n      if (CMIElement && listener.CMIElement) {\n        if (listener.CMIElement.endsWith(\"*\")) {\n          // For wildcard matches, check if the CMI element starts with the prefix\n          const prefix = listener.CMIElement.slice(0, -1);\n          CMIElementsMatch = CMIElement.startsWith(prefix);\n        } else {\n          // For exact matches, compare the strings directly\n          CMIElementsMatch = listener.CMIElement === CMIElement;\n        }\n      }\n\n      // If the listener matches, call the callback\n      if (!listenerHasCMIElement || CMIElementsMatch) {\n        this.apiLog(\n          \"processListeners\",\n          `Processing listener: ${listener.functionName}`,\n          LogLevelEnum.DEBUG,\n          CMIElement,\n        );\n\n        // Handle special event types\n        if (functionName.startsWith(\"Sequence\")) {\n          // For sequence events, pass the target as the first argument\n          listener.callback(value);\n        } else if (functionName === \"CommitError\") {\n          // For commit error events, pass the error code\n          listener.callback(value);\n        } else if (functionName === \"CommitSuccess\") {\n          // For commit success events, pass no arguments\n          listener.callback();\n        } else {\n          // For regular events, pass CMIElement and value\n          listener.callback(CMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Resets the event service by clearing all listeners\n   */\n  reset() {\n    this.listenerMap.clear();\n    this.listenerCount = 0;\n  }\n}\n","import { CommitObject, LogLevel } from \"../types/api_types\";\nimport { StringKeyMap, unflatten } from \"../utilities\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { BaseCMI } from \"../cmi/common/base_cmi\";\nimport { ISerializationService } from \"../interfaces/services\";\n\n/**\n * Service for handling data serialization and deserialization in scorm-again\n */\nexport class SerializationService implements ISerializationService {\n  /**\n   * Loads CMI data from a flattened JSON object with special handling for arrays and ordering.\n   *\n   * This method implements a complex algorithm for loading flattened JSON data into the CMI\n   * object structure. It handles several key challenges:\n   *\n   * 1. Ordering dependencies: Some CMI elements (like interactions and objectives) must be\n   *    loaded in a specific order to ensure proper initialization.\n   *\n   * 2. Array handling: Interactions and objectives are stored as arrays, and their properties\n   *    must be loaded in the correct order (e.g., 'id' and 'type' must be set before other properties).\n   *\n   * 3. Unflattening: The method converts flattened dot notation (e.g., \"cmi.objectives.0.id\")\n   *    back into nested objects before loading.\n   *\n   * The algorithm works by:\n   * - Categorizing keys into interactions, objectives, and other properties\n   * - Sorting interactions to prioritize 'id' and 'type' fields within each index\n   * - Sorting objectives to prioritize 'id' fields within each index\n   * - Processing each category in order: interactions, objectives, then other properties\n   *\n   * @param {StringKeyMap} json - The flattened JSON object with dot notation keys\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   *\n   * @param setStartingData\n   * @example\n   * // Example of flattened JSON input:\n   * // {\n   * //   \"cmi.objectives.0.id\": \"obj1\",\n   * //   \"cmi.objectives.0.score.raw\": \"80\",\n   * //   \"cmi.interactions.0.id\": \"int1\",\n   * //   \"cmi.interactions.0.type\": \"choice\",\n   * //   \"cmi.interactions.0.result\": \"correct\"\n   * // }\n   */\n  loadFromFlattenedJSON(\n    json: StringKeyMap,\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromFlattenedJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    const int_pattern = /^(cmi\\.interactions\\.)(\\d+)\\.(.*)$/;\n    const obj_pattern = /^(cmi\\.objectives\\.)(\\d+)\\.(.*)$/;\n\n    // Extract and categorize keys for better sorting\n    const interactions: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const objectives: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const others: { key: string; value: any }[] = [];\n\n    // Categorize keys\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key)) {\n        const intMatch = key.match(int_pattern);\n        if (intMatch) {\n          interactions.push({\n            key,\n            value: json[key],\n            index: Number(intMatch[2]),\n            field: intMatch[3],\n          });\n          continue;\n        }\n\n        const objMatch = key.match(obj_pattern);\n        if (objMatch) {\n          objectives.push({\n            key,\n            value: json[key],\n            index: Number(objMatch[2]),\n            field: objMatch[3],\n          });\n          continue;\n        }\n\n        others.push({ key, value: json[key] });\n      }\n    }\n\n    // Sort interactions: first by index, then prioritize 'id' and 'type' fields\n    interactions.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id and type\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n      if (a.field === \"type\") return -1;\n      if (b.field === \"type\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort objectives: first by index, then prioritize 'id' field\n    objectives.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort other keys alphabetically\n    others.sort((a, b) => a.key.localeCompare(b.key));\n\n    // Process all items in the correct order\n    const processItems = (items: { key: string; value: any }[]) => {\n      items.forEach((item) => {\n        const obj: StringKeyMap = {};\n        obj[item.key] = item.value;\n        this.loadFromJSON(\n          unflatten(obj) as StringKeyMap,\n          CMIElement,\n          setCMIValue,\n          isNotInitialized,\n          setStartingData,\n        );\n      });\n    };\n\n    // Process in order: interactions, objectives, others\n    processItems(interactions);\n    processItems(objectives);\n    processItems(others);\n  }\n\n  /**\n   * Loads CMI data from a nested JSON object with recursive traversal.\n   *\n   * This method implements a recursive algorithm for loading nested JSON data into the CMI\n   * object structure. It handles several key aspects:\n   *\n   * 1. Recursive traversal: The method recursively traverses the nested JSON structure,\n   *    building CMI element paths as it goes (e.g., \"cmi.core.student_id\").\n   *\n   * 2. Type-specific handling: Different data types are handled differently:\n   *    - Arrays: Each array element is processed individually with its index in the path\n   *    - Objects: Recursively processed with updated path\n   *    - Primitives: Set directly using setCMIValue\n   *\n   * 3. Initialization check: Ensures the method is only called before API initialization\n   *\n   * 4. Starting data storage: Stores the original JSON data for potential future use\n   *\n   * The algorithm works by:\n   * - First storing the complete JSON object via setStartingData\n   * - Iterating through each property in the JSON object\n   * - For each property, determining its type and handling it accordingly\n   * - Building the CMI element path as it traverses the structure\n   * - Setting values at the appropriate paths using setCMIValue\n   *\n   * @param {{[key: string]: any}} json - The nested JSON object to load\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value at a specific path\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   * @param {Function} setStartingData - Function to store the original JSON data\n   *\n   * @example\n   * // Example of nested JSON input:\n   * // {\n   * //   \"core\": {\n   * //     \"student_id\": \"12345\",\n   * //     \"student_name\": \"John Doe\"\n   * //   },\n   * //   \"objectives\": [\n   * //     { \"id\": \"obj1\", \"score\": { \"raw\": 80 } },\n   * //     { \"id\": \"obj2\", \"score\": { \"raw\": 90 } }\n   * //   ]\n   * // }\n   */\n  loadFromJSON(\n    json: { [key: string]: any },\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    CMIElement = CMIElement !== undefined ? CMIElement : \"cmi\";\n\n    setStartingData(json);\n\n    // could this be refactored down to flatten(json) then setCMIValue on each?\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key) && json[key]) {\n        const currentCMIElement = (CMIElement ? CMIElement + \".\" : \"\") + key;\n        const value = json[key];\n\n        if (value.constructor === Array) {\n          for (let i = 0; i < value.length; i++) {\n            if (value[i]) {\n              const item = value[i];\n              const tempCMIElement = `${currentCMIElement}.${i}`;\n\n              if (item.constructor === Object) {\n                this.loadFromJSON(\n                  item,\n                  tempCMIElement,\n                  setCMIValue,\n                  isNotInitialized,\n                  setStartingData,\n                );\n              } else {\n                setCMIValue(tempCMIElement, item);\n              }\n            }\n          }\n        } else if (value.constructor === Object) {\n          this.loadFromJSON(\n            value,\n            currentCMIElement,\n            setCMIValue,\n            isNotInitialized,\n            setStartingData,\n          );\n        } else {\n          setCMIValue(currentCMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Render the CMI object to JSON for sending to an LMS.\n   *\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {string}\n   */\n  renderCMIToJSONString(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): string {\n    // Do we want/need to return fields that have no set value?\n    if (sendFullCommit) {\n      return JSON.stringify({ cmi });\n    }\n    return JSON.stringify({ cmi }, (k, v) => (v === undefined ? null : v), 2);\n  }\n\n  /**\n   * Returns a JS object representing the current cmi\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {object}\n   */\n  renderCMIToJSONObject(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): StringKeyMap {\n    // Revert to the original implementation to maintain compatibility with tests\n    return JSON.parse(this.renderCMIToJSONString(cmi, sendFullCommit));\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} alwaysSendTotalTime - Whether to always send total time\n   * @param {boolean|Function} renderCommonCommitFields - Whether to render common commit fields\n   * @param {Function} renderCommitObject - Function to render commit object\n   * @param {Function} renderCommitCMI - Function to render commit CMI\n   * @param {LogLevel} apiLogLevel - The API log level\n   * @return {CommitObject|StringKeyMap|Array<any>}\n   */\n  getCommitObject(\n    terminateCommit: boolean,\n    alwaysSendTotalTime: boolean,\n    renderCommonCommitFields: boolean | ((commitObject: CommitObject) => boolean),\n    renderCommitObject: (terminateCommit: boolean) => CommitObject,\n    renderCommitCMI: (terminateCommit: boolean) => StringKeyMap | Array<any>,\n    apiLogLevel: LogLevel,\n  ): CommitObject | StringKeyMap | Array<any> {\n    const shouldTerminateCommit = terminateCommit || alwaysSendTotalTime;\n    const commitObject = renderCommonCommitFields\n      ? renderCommitObject(shouldTerminateCommit)\n      : renderCommitCMI(shouldTerminateCommit);\n\n    if ([LogLevelEnum.DEBUG, \"1\", 1, \"DEBUG\"].includes(apiLogLevel)) {\n      console.debug(\"Commit (terminated: \" + (terminateCommit ? \"yes\" : \"no\") + \"): \");\n      console.debug(commitObject);\n    }\n    return commitObject;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ILoggingService } from \"../interfaces/services\";\nimport { defaultLogHandler } from \"../constants/default_settings\";\n\n/**\n * Centralized logging service implemented as a singleton\n * Provides methods for logging at different levels and configuring the log level\n */\nexport class LoggingService implements ILoggingService {\n  private static _instance: LoggingService;\n  private _logLevel: LogLevel = LogLevelEnum.ERROR;\n  private _logHandler: (messageLevel: LogLevel, logMessage: string) => void;\n\n  /**\n   * Private constructor to prevent direct instantiation\n   */\n  private constructor() {\n    // Default log handler uses console methods based on log level\n    this._logHandler = defaultLogHandler;\n  }\n\n  /**\n   * Get the singleton instance of LoggingService\n   *\n   * @returns {LoggingService} The singleton instance\n   */\n  public static getInstance(): LoggingService {\n    if (!LoggingService._instance) {\n      LoggingService._instance = new LoggingService();\n    }\n    return LoggingService._instance;\n  }\n\n  /**\n   * Set the log level\n   *\n   * @param {LogLevel} level - The log level to set\n   */\n  public setLogLevel(level: LogLevel): void {\n    this._logLevel = level;\n  }\n\n  /**\n   * Get the current log level\n   *\n   * @returns {LogLevel} The current log level\n   */\n  public getLogLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  /**\n   * Set a custom log handler\n   *\n   * @param {Function} handler - The function to handle log messages\n   */\n  public setLogHandler(handler: (messageLevel: LogLevel, logMessage: string) => void): void {\n    this._logHandler = handler;\n  }\n\n  /**\n   * Log a message if the message level is greater than or equal to the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @param {string} logMessage - The message to log\n   */\n  public log(messageLevel: LogLevel, logMessage: string): void {\n    if (this.shouldLog(messageLevel)) {\n      this._logHandler(messageLevel, logMessage);\n    }\n  }\n\n  /**\n   * Log a message at ERROR level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public error(logMessage: string): void {\n    this.log(LogLevelEnum.ERROR, logMessage);\n  }\n\n  /**\n   * Log a message at WARN level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public warn(logMessage: string): void {\n    this.log(LogLevelEnum.WARN, logMessage);\n  }\n\n  /**\n   * Log a message at INFO level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public info(logMessage: string): void {\n    this.log(LogLevelEnum.INFO, logMessage);\n  }\n\n  /**\n   * Log a message at DEBUG level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public debug(logMessage: string): void {\n    this.log(LogLevelEnum.DEBUG, logMessage);\n  }\n\n  /**\n   * Determine if a message should be logged based on its level and the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @returns {boolean} Whether the message should be logged\n   */\n  private shouldLog(messageLevel: LogLevel): boolean {\n    // Convert string levels to numbers for comparison\n    const numericMessageLevel = this.getNumericLevel(messageLevel);\n    const numericLogLevel = this.getNumericLevel(this._logLevel);\n\n    return numericMessageLevel >= numericLogLevel;\n  }\n\n  /**\n   * Convert a log level to its numeric value\n   *\n   * @param {LogLevel} level - The log level to convert\n   * @returns {number} The numeric value of the log level\n   */\n  private getNumericLevel(level: LogLevel): number {\n    if (level === undefined) return LogLevelEnum.NONE;\n\n    if (typeof level === \"number\") return level;\n\n    switch (level) {\n      case \"1\":\n      case \"DEBUG\":\n        return LogLevelEnum.DEBUG;\n      case \"2\":\n      case \"INFO\":\n        return LogLevelEnum.INFO;\n      case \"3\":\n      case \"WARN\":\n        return LogLevelEnum.WARN;\n      case \"4\":\n      case \"ERROR\":\n        return LogLevelEnum.ERROR;\n      case \"5\":\n      case \"NONE\":\n        return LogLevelEnum.NONE;\n      default:\n        return LogLevelEnum.ERROR; // Default to ERROR if unknown\n    }\n  }\n}\n\n// Export a function to get the singleton instance\nexport function getLoggingService(): LoggingService {\n  return LoggingService.getInstance();\n}\n","import { LogLevelEnum } from \"../constants/enums\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { ValidationError } from \"../exceptions\";\nimport { IErrorHandlingService, ILoggingService } from \"../interfaces/services\";\nimport { getLoggingService } from \"./LoggingService\";\n\n/**\n * Service for handling SCORM errors\n */\nexport class ErrorHandlingService implements IErrorHandlingService {\n  private _lastErrorCode: string = \"0\";\n  private readonly _errorCodes: ErrorCode;\n  private readonly _apiLog: (\n    functionName: string,\n    message: string,\n    logLevel?: LogLevelEnum,\n    CMIElement?: string,\n  ) => void;\n  private readonly _getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string;\n  private readonly _loggingService: ILoggingService;\n\n  /**\n   * Constructor for ErrorHandlingService\n   *\n   * @param {ErrorCode} errorCodes - The error codes object\n   * @param {Function} apiLog - Function for logging API calls\n   * @param {Function} getLmsErrorMessageDetails - Function for getting error message details\n   * @param {ILoggingService} loggingService - Optional logging service instance\n   */\n  constructor(\n    errorCodes: ErrorCode,\n    apiLog: (\n      functionName: string,\n      message: string,\n      logLevel?: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n    loggingService?: ILoggingService,\n  ) {\n    this._errorCodes = errorCodes;\n    this._apiLog = apiLog;\n    this._getLmsErrorMessageDetails = getLmsErrorMessageDetails;\n    this._loggingService = loggingService || getLoggingService();\n  }\n\n  /**\n   * Get the last error code\n   *\n   * @return {string} - The last error code\n   */\n  get lastErrorCode(): string {\n    return this._lastErrorCode;\n  }\n\n  /**\n   * Set the last error code\n   *\n   * @param {string} errorCode - The error code to set\n   */\n  set lastErrorCode(errorCode: string) {\n    this._lastErrorCode = errorCode;\n  }\n\n  /**\n   * Throws a SCORM error\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The error number\n   * @param {string} message - The error message\n   * @throws {ValidationError} - If throwException is true, throws a ValidationError\n   */\n  throwSCORMError(CMIElement: string, errorNumber: number, message?: string): void {\n    if (!message) {\n      message = this._getLmsErrorMessageDetails(errorNumber, true);\n    }\n\n    // Format a more descriptive error message with context\n    const formattedMessage = `SCORM Error ${errorNumber}: ${message}${CMIElement ? ` [Element: ${CMIElement}]` : \"\"}`;\n\n    // Log using both the API log and the logging service for consistency\n    this._apiLog(\"throwSCORMError\", errorNumber + \": \" + message, LogLevelEnum.ERROR, CMIElement);\n    this._loggingService.error(formattedMessage);\n\n    this._lastErrorCode = String(errorNumber);\n  }\n\n  /**\n   * Clears the last SCORM error code on success.\n   *\n   * @param {string} success - Whether the operation was successful\n   */\n  clearSCORMError(success: string): void {\n    if (success !== undefined && success !== global_constants.SCORM_FALSE) {\n      this._lastErrorCode = \"0\";\n    }\n  }\n\n  /**\n   * Handles exceptions that occur when accessing or setting CMI values.\n   *\n   * This method provides centralized error handling for exceptions that occur during\n   * CMI data operations. It differentiates between different types of errors and\n   * handles them appropriately:\n   *\n   * 1. ValidationError: These are expected errors from the validation system that\n   *    indicate a specific SCORM error condition (like invalid data format or range).\n   *    For these errors, the method:\n   *    - Sets the lastErrorCode to the error code from the ValidationError\n   *    - Returns SCORM_FALSE to indicate failure to the caller\n   *\n   * 2. Standard JavaScript Error: For general JavaScript errors (like TypeError,\n   *    ReferenceError, etc.), the method:\n   *    - Logs the error message with stack trace to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * 3. Unknown exceptions: For any other type of exception that doesn't match the\n   *    above categories, the method:\n   *    - Logs the entire exception object to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * This method is critical for maintaining SCORM compliance by ensuring that\n   * all errors are properly translated into the appropriate SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {ValidationError|Error|unknown} e - The exception that was thrown\n   * @param {string} returnValue - The default return value (typically an empty string)\n   * @return {string} - Either the original returnValue or SCORM_FALSE if an error occurred\n   *\n   * @example\n   * try {\n   *   const value = getCMIValue(\"cmi.core.score.raw\");\n   *   return value;\n   * } catch (e) {\n   *   return handleValueAccessException(e, \"\");\n   * }\n   */\n  handleValueAccessException(\n    CMIElement: string,\n    e: Error | ValidationError | unknown,\n    returnValue: string,\n  ): string {\n    if (e instanceof ValidationError) {\n      const validationError = e as ValidationError;\n      this._lastErrorCode = String(validationError.errorCode);\n\n      // Log validation errors at WARN level with context\n      const errorMessage = `Validation Error ${validationError.errorCode}: ${validationError.message} [Element: ${CMIElement}]`;\n      this._loggingService.warn(errorMessage);\n\n      returnValue = global_constants.SCORM_FALSE;\n    } else if (e instanceof Error) {\n      // For standard JS errors, include the stack trace and error type\n      const errorType = e.constructor.name; // Gets the error type (e.g., TypeError, ReferenceError)\n      const errorMessage = `${errorType}: ${e.message} [Element: ${CMIElement}]`;\n      const stackTrace = e.stack || \"\";\n\n      // Log the detailed error with stack trace\n      this._loggingService.error(`${errorMessage}\\n${stackTrace}`);\n\n      this.throwSCORMError(CMIElement, this._errorCodes.GENERAL, `${errorType}: ${e.message}`);\n    } else {\n      // For unknown errors, provide as much context as possible\n      const errorMessage = `Unknown error occurred while accessing [Element: ${CMIElement}]`;\n\n      this._loggingService.error(errorMessage);\n\n      try {\n        // Try to stringify the error object for more details\n        const errorDetails = JSON.stringify(e);\n        this._loggingService.error(`Error details: ${errorDetails}`);\n      } catch (jsonError) {\n        // If stringify fails, log that we couldn't get more details\n        this._loggingService.error(\"Could not stringify error object for details\");\n      }\n\n      this.throwSCORMError(CMIElement, this._errorCodes.GENERAL, \"Unknown error\");\n    }\n    return returnValue;\n  }\n\n  /**\n   * Get the error codes object\n   *\n   * @return {ErrorCode} - The error codes object\n   */\n  get errorCodes(): ErrorCode {\n    return this._errorCodes;\n  }\n}\n\n// Export a factory function to create the service\nexport function createErrorHandlingService(\n  errorCodes: ErrorCode,\n  apiLog: (\n    functionName: string,\n    message: string,\n    logLevel?: LogLevelEnum,\n    CMIElement?: string,\n  ) => void,\n  getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n  loggingService?: ILoggingService,\n): ErrorHandlingService {\n  return new ErrorHandlingService(errorCodes, apiLog, getLmsErrorMessageDetails, loggingService);\n}\n","import { CommitObject, ResultObject, Settings } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { StringKeyMap } from \"../utilities\";\n\n/**\n * Interface for sync queue item\n */\ninterface SyncQueueItem {\n  id: string;\n  courseId: string;\n  timestamp: number;\n  data: CommitObject;\n  syncAttempts: number;\n}\n\n/**\n * Service for handling offline storage and synchronization of SCORM data\n */\nexport class OfflineStorageService {\n  private settings: Settings;\n  private error_codes: ErrorCode;\n  private storeName: string = \"scorm_again_offline_data\";\n  private syncQueue: string = \"scorm_again_sync_queue\";\n  private isOnline: boolean = navigator.onLine;\n  private syncInProgress: boolean = false;\n\n  /**\n   * Constructor for OfflineStorageService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Function} apiLog - The logging function\n   */\n  constructor(\n    settings: Settings,\n    error_codes: ErrorCode,\n    private apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n\n    // Initialize listeners for online/offline events\n    window.addEventListener(\"online\", this.handleOnlineStatusChange.bind(this));\n    window.addEventListener(\"offline\", this.handleOnlineStatusChange.bind(this));\n  }\n\n  /**\n   * Handle changes in online status\n   */\n  private handleOnlineStatusChange() {\n    const wasOnline = this.isOnline;\n    this.isOnline = navigator.onLine;\n\n    // If we've come back online, trigger sync process\n    if (!wasOnline && this.isOnline) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        \"Device is back online, attempting to sync...\",\n        LogLevelEnum.INFO,\n      );\n      this.syncOfflineData();\n    } else if (wasOnline && !this.isOnline) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        \"Device is offline, data will be stored locally\",\n        LogLevelEnum.INFO,\n      );\n    }\n  }\n\n  /**\n   * Store commit data offline\n   * @param {string} courseId - Identifier for the course\n   * @param {CommitObject} commitData - The data to store offline\n   * @returns {Promise<ResultObject>} - Result of the storage operation\n   */\n  async storeOffline(courseId: string, commitData: CommitObject): Promise<ResultObject> {\n    try {\n      // Store the data in the sync queue with timestamp and unique ID\n      const queueItem: SyncQueueItem = {\n        id: `${courseId}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        courseId,\n        timestamp: Date.now(),\n        data: commitData,\n        syncAttempts: 0,\n      };\n\n      // Get current queue\n      const currentQueue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n      currentQueue.push(queueItem);\n\n      // Save updated queue\n      await this.saveToStorage(this.syncQueue, currentQueue);\n\n      // Also update the current state in the main storage (latest known state)\n      await this.saveToStorage(`${this.storeName}_${courseId}`, commitData);\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Stored data offline for course ${courseId}`,\n        LogLevelEnum.INFO,\n      );\n\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error storing offline data: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL,\n      };\n    }\n  }\n\n  /**\n   * Get the stored offline data for a course\n   * @param {string} courseId - Identifier for the course\n   * @returns {Promise<CommitObject|null>} - The stored data or null if not found\n   */\n  async getOfflineData(courseId: string): Promise<CommitObject | null> {\n    try {\n      const data = await this.getFromStorage<CommitObject>(`${this.storeName}_${courseId}`);\n      return data || null;\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error retrieving offline data: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return null;\n    }\n  }\n\n  /**\n   * Synchronize offline data with the LMS when connection is available\n   * @returns {Promise<boolean>} - Success status of synchronization\n   */\n  async syncOfflineData(): Promise<boolean> {\n    // Don't run multiple sync processes at once\n    if (this.syncInProgress || !this.isOnline) {\n      return false;\n    }\n\n    this.syncInProgress = true;\n\n    try {\n      // Get the queue of items to sync\n      const syncQueue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n\n      if (syncQueue.length === 0) {\n        this.syncInProgress = false;\n        return true;\n      }\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Found ${syncQueue.length} items to sync`,\n        LogLevelEnum.INFO,\n      );\n\n      // Keep track of successful and failed sync attempts\n      const remainingQueue: SyncQueueItem[] = [];\n\n      // Process each queue item\n      for (const item of syncQueue) {\n        // Skip items that have been attempted too many times\n        if (item.syncAttempts >= 5) {\n          this.apiLog(\n            \"OfflineStorageService\",\n            `Skipping item ${item.id} after 5 failed attempts`,\n            LogLevelEnum.WARN,\n          );\n          continue;\n        }\n\n        try {\n          // Attempt to sync this item\n          const syncResult = await this.sendDataToLMS(item.data);\n\n          if (syncResult.result === global_constants.SCORM_TRUE) {\n            // Sync was successful, no need to keep this item\n            this.apiLog(\n              \"OfflineStorageService\",\n              `Successfully synced item ${item.id}`,\n              LogLevelEnum.INFO,\n            );\n          } else {\n            // Sync failed, increment attempts and keep in queue\n            item.syncAttempts++;\n            remainingQueue.push(item);\n            this.apiLog(\n              \"OfflineStorageService\",\n              `Failed to sync item ${item.id}, attempt #${item.syncAttempts}`,\n              LogLevelEnum.WARN,\n            );\n          }\n        } catch (error) {\n          // On error, increment attempts and keep in queue\n          item.syncAttempts++;\n          remainingQueue.push(item);\n          this.apiLog(\n            \"OfflineStorageService\",\n            `Error syncing item ${item.id}: ${error}`,\n            LogLevelEnum.ERROR,\n          );\n        }\n      }\n\n      // Update the queue with remaining items\n      await this.saveToStorage(this.syncQueue, remainingQueue);\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Sync completed. ${syncQueue.length - remainingQueue.length} items synced, ${remainingQueue.length} items remaining`,\n        LogLevelEnum.INFO,\n      );\n\n      this.syncInProgress = false;\n      return true;\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error during sync process: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      this.syncInProgress = false;\n      return false;\n    }\n  }\n\n  /**\n   * Send data to the LMS when online\n   * @param {CommitObject} data - The data to send to the LMS\n   * @returns {Promise<ResultObject>} - Result of the sync operation\n   */\n  private async sendDataToLMS(data: CommitObject): Promise<ResultObject> {\n    if (!this.settings.lmsCommitUrl) {\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL,\n      };\n    }\n\n    try {\n      // Apply request handler if configured\n      const processedData = this.settings.requestHandler(data);\n\n      // Send the data to the LMS\n      const response = await fetch(this.settings.lmsCommitUrl as string, {\n        method: \"POST\",\n        mode: this.settings.fetchMode,\n        body: JSON.stringify(processedData),\n        headers: {\n          ...this.settings.xhrHeaders,\n          \"Content-Type\": this.settings.commitRequestDataType,\n        },\n        credentials: this.settings.xhrWithCredentials ? \"include\" : undefined,\n      });\n\n      // Process the response using the configured handler\n      const result =\n        typeof this.settings.responseHandler === \"function\"\n          ? await this.settings.responseHandler(response)\n          : await response.json();\n\n      if (\n        response.status >= 200 &&\n        response.status <= 299 &&\n        (result.result === true || result.result === global_constants.SCORM_TRUE)\n      ) {\n        if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n          result.errorCode = 0;\n        }\n        return result;\n      } else {\n        if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n          result.errorCode = this.error_codes.GENERAL;\n        }\n        return result;\n      }\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error sending data to LMS: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL,\n      };\n    }\n  }\n\n  /**\n   * Check if the device is currently online\n   * @returns {boolean} - Online status\n   */\n  isDeviceOnline(): boolean {\n    return this.isOnline;\n  }\n\n  /**\n   * Get item from localStorage\n   * @param {string} key - The key to retrieve\n   * @returns {Promise<T|null>} - The retrieved data\n   */\n  private async getFromStorage<T>(key: string): Promise<T | null> {\n    const storedData = localStorage.getItem(key);\n    if (storedData) {\n      try {\n        return JSON.parse(storedData) as T;\n      } catch (e) {\n        return null;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Save item to localStorage\n   * @param {string} key - The key to store under\n   * @param {any} data - The data to store\n   * @returns {Promise<void>}\n   */\n  private async saveToStorage(key: string, data: any): Promise<void> {\n    localStorage.setItem(key, JSON.stringify(data));\n  }\n\n  /**\n   * Check if there is pending offline data for a course\n   * @param {string} courseId - Identifier for the course\n   * @returns {Promise<boolean>} - Whether there is pending data\n   */\n  async hasPendingOfflineData(courseId: string): Promise<boolean> {\n    const queue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n    return queue.some((item) => item.courseId === courseId);\n  }\n\n  /**\n   * Update the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: Settings): void {\n    this.settings = settings;\n  }\n}\n","import { ErrorCode } from \"./constants/error_codes\";\nimport { global_constants } from \"./constants/api_constants\";\nimport { formatMessage, StringKeyMap, stringMatches } from \"./utilities\";\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport { CommitObject, LogLevel, ResultObject, Settings } from \"./types/api_types\";\nimport { DefaultSettings } from \"./constants/default_settings\";\nimport { IBaseAPI } from \"./interfaces/IBaseAPI\";\nimport { ScheduledCommit } from \"./helpers/scheduled_commit\";\nimport { LogLevelEnum } from \"./constants/enums\";\nimport { HttpService } from \"./services/HttpService\";\nimport { EventService } from \"./services/EventService\";\nimport { SerializationService } from \"./services/SerializationService\";\nimport { createErrorHandlingService } from \"./services/ErrorHandlingService\";\nimport { getLoggingService } from \"./services/LoggingService\";\nimport { OfflineStorageService } from \"./services/OfflineStorageService\";\nimport {\n  ICMIDataService,\n  IErrorHandlingService,\n  IEventService,\n  IHttpService,\n  ILoggingService,\n  IOfflineStorageService,\n  ISerializationService,\n} from \"./interfaces/services\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { ValidationError } from \"./exceptions\";\n\n/**\n * Base API class for AICC, SCORM 1.2, and SCORM 2004. Should be considered\n * abstract, and never initialized on its own.\n */\nexport default abstract class BaseAPI implements IBaseAPI {\n  private _timeout?: ScheduledCommit;\n  private readonly _error_codes: ErrorCode;\n  private _settings: Settings = DefaultSettings;\n  private readonly _httpService: IHttpService;\n  private _eventService: IEventService;\n  private _serializationService: ISerializationService;\n  private readonly _errorHandlingService: IErrorHandlingService;\n  private readonly _loggingService: ILoggingService;\n  private _offlineStorageService?: IOfflineStorageService;\n  private _courseId: string = \"\";\n\n  /**\n   * Constructor for Base API class. Sets some shared API fields, as well as\n   * sets up options for the API.\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Settings} settings - Optional settings for the API\n   * @param {IHttpService} httpService - Optional HTTP service instance\n   * @param {IEventService} eventService - Optional Event service instance\n   * @param {ISerializationService} serializationService - Optional Serialization service instance\n   * @param {ICMIDataService} cmiDataService - Optional CMI Data service instance\n   * @param {IErrorHandlingService} errorHandlingService - Optional Error Handling service instance\n   * @param {ILoggingService} loggingService - Optional Logging service instance\n   * @param {IOfflineStorageService} offlineStorageService - Optional Offline Storage service instance\n   */\n  protected constructor(\n    error_codes: ErrorCode,\n    settings?: Settings,\n    httpService?: IHttpService,\n    eventService?: IEventService,\n    serializationService?: ISerializationService,\n    cmiDataService?: ICMIDataService,\n    errorHandlingService?: IErrorHandlingService,\n    loggingService?: ILoggingService,\n    offlineStorageService?: IOfflineStorageService,\n  ) {\n    if (new.target === BaseAPI) {\n      throw new TypeError(\"Cannot construct BaseAPI instances directly\");\n    }\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n\n    this._error_codes = error_codes;\n\n    if (settings) {\n      this.settings = settings;\n    }\n    this.apiLogLevel = this.settings.logLevel;\n    this.selfReportSessionTime = this.settings.selfReportSessionTime;\n\n    if (this.apiLogLevel === undefined) {\n      this.apiLogLevel = LogLevelEnum.NONE;\n    }\n\n    // Initialize and configure LoggingService\n    this._loggingService = loggingService || getLoggingService();\n    this._loggingService.setLogLevel(this.apiLogLevel);\n\n    // If settings include a custom onLogMessage function, use it as the log handler\n    if (this.settings.onLogMessage) {\n      this._loggingService.setLogHandler(this.settings.onLogMessage);\n    }\n\n    // Initialize HTTP service\n    this._httpService = httpService || new HttpService(this.settings, this._error_codes);\n\n    // Initialize Event service\n    this._eventService =\n      eventService ||\n      new EventService((functionName, message, level, element) =>\n        this.apiLog(functionName, message, level, element),\n      );\n\n    // Initialize Serialization service\n    this._serializationService = serializationService || new SerializationService();\n\n    // Initialize Error Handling service\n    this._errorHandlingService =\n      errorHandlingService ||\n      createErrorHandlingService(\n        this._error_codes,\n        (functionName, message, level, element) =>\n          this.apiLog(functionName, message, level, element),\n        (errorNumber, detail) => this.getLmsErrorMessageDetails(errorNumber, detail),\n      );\n\n    // Initialize Offline Storage service if enabled\n    if (this.settings.enableOfflineSupport) {\n      this._offlineStorageService =\n        offlineStorageService ||\n        new OfflineStorageService(\n          this.settings,\n          this._error_codes,\n          (functionName, message, level, element) =>\n            this.apiLog(functionName, message, level, element),\n        );\n\n      if (this.settings.courseId) {\n        this._courseId = this.settings.courseId;\n      }\n\n      // Check for offline data to restore on initialization\n      if (this._offlineStorageService && this._courseId) {\n        this._offlineStorageService\n          .getOfflineData(this._courseId)\n          .then((offlineData) => {\n            if (offlineData) {\n              this.apiLog(\"constructor\", \"Found offline data to restore\", LogLevelEnum.INFO);\n              // Restore data from offline storage\n              this.loadFromJSON(offlineData.runtimeData);\n            }\n          })\n          .catch((error) => {\n            this.apiLog(\n              \"constructor\",\n              `Error retrieving offline data: ${error}`,\n              LogLevelEnum.ERROR,\n            );\n          });\n      }\n    }\n  }\n\n  public abstract cmi: BaseCMI;\n  public startingData?: StringKeyMap;\n\n  public currentState: number;\n  public apiLogLevel: LogLevel;\n  public selfReportSessionTime: boolean;\n\n  /**\n   * Get the last error code\n   * @return {string}\n   */\n  get lastErrorCode(): string {\n    return this._errorHandlingService?.lastErrorCode ?? \"0\";\n  }\n\n  /**\n   * Set the last error code\n   * @param {string} errorCode\n   */\n  set lastErrorCode(errorCode: string) {\n    if (this._errorHandlingService) {\n      this._errorHandlingService.lastErrorCode = errorCode;\n    }\n  }\n\n  /**\n   * Reset the API to its initial state.\n   * This method clears all current data and resets the API to an uninitialized state.\n   * It can optionally accept new settings to configure the API after reset.\n   *\n   * @param {Settings} settings - Optional new settings to apply after reset\n   */\n  abstract reset(settings?: Settings): void;\n\n  /**\n   * Common reset method for all APIs. New settings are merged with the existing settings.\n   * @param {Settings} settings\n   * @protected\n   */\n  commonReset(settings?: Settings): void {\n    this.apiLog(\"reset\", \"Called\", LogLevelEnum.INFO);\n\n    this.settings = { ...this.settings, ...settings };\n\n    this.clearScheduledCommit();\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n    this.lastErrorCode = \"0\";\n    this._eventService.reset();\n    this.startingData = undefined;\n\n    // Update offline storage service with new settings if it exists\n    if (this._offlineStorageService) {\n      this._offlineStorageService.updateSettings(this.settings);\n\n      if (settings?.courseId) {\n        this._courseId = settings.courseId;\n      }\n    }\n  }\n\n  /**\n   * Initialize the API\n   * @param {string} callbackName\n   * @param {string} initializeMessage\n   * @param {string} terminationMessage\n   * @return {string}\n   */\n  initialize(\n    callbackName: string,\n    initializeMessage?: string,\n    terminationMessage?: string,\n  ): string {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.isInitialized()) {\n      this.throwSCORMError(\"api\", this._error_codes.INITIALIZED, initializeMessage);\n    } else if (this.isTerminated()) {\n      this.throwSCORMError(\"api\", this._error_codes.TERMINATED, terminationMessage);\n    } else {\n      if (this.selfReportSessionTime) {\n        this.cmi.setStartTime();\n      }\n\n      this.currentState = global_constants.STATE_INITIALIZED;\n      this.lastErrorCode = \"0\";\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n\n      // If enabled, attempt to sync offline data on initialization\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._courseId &&\n        this.settings.syncOnInitialize &&\n        this._offlineStorageService.isDeviceOnline()\n      ) {\n        this._offlineStorageService.hasPendingOfflineData(this._courseId).then((hasPendingData) => {\n          if (hasPendingData) {\n            this.apiLog(\n              callbackName,\n              \"Syncing pending offline data on initialization\",\n              LogLevelEnum.INFO,\n            );\n            this._offlineStorageService?.syncOfflineData().then((syncSuccess) => {\n              if (syncSuccess) {\n                this.apiLog(callbackName, \"Successfully synced offline data\", LogLevelEnum.INFO);\n                this.processListeners(\"OfflineDataSynced\");\n              }\n            });\n          }\n        });\n      }\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Initialize the LMS API\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsInitialize(): string;\n\n  /**\n   * Finish the current LMS API session\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsFinish(): string;\n\n  /**\n   * Get the value of a CMI element from the LMS\n   * @param {string} CMIElement - The CMI element to get the value of\n   * @return {string} The value of the CMI element\n   */\n  abstract lmsGetValue(CMIElement: string): string;\n\n  /**\n   * Set the value of a CMI element in the LMS\n   * @param {string} CMIElement - The CMI element to set the value of\n   * @param {any} value - The value to set\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsSetValue(CMIElement: string, value: any): string;\n\n  /**\n   * Commit the current data to the LMS\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsCommit(): string;\n\n  /**\n   * Get the last error code from the LMS\n   * @return {string} The last error code\n   */\n  abstract lmsGetLastError(): string;\n\n  /**\n   * Get the error string for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get the string for\n   * @return {string} The error string\n   */\n  abstract lmsGetErrorString(CMIErrorCode: string | number): string;\n\n  /**\n   * Get diagnostic information for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get diagnostic information for\n   * @return {string} The diagnostic information\n   */\n  abstract lmsGetDiagnostic(CMIErrorCode: string | number): string;\n\n  /**\n   * Abstract method for validating that a response is correct.\n   * This method is used to validate the format and content of a response\n   * before it is set in the CMI data model.\n   *\n   * @param {string} _CMIElement - The CMI element path to validate\n   * @param {any} _value - The value to validate\n   * @throws {Error} If the response format is invalid\n   */\n  abstract validateCorrectResponse(_CMIElement: string, _value: any): void;\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   * APIs that inherit BaseAPI should override this method.\n   *\n   * @param {string} _CMIElement - unused\n   * @param {*} _value - unused\n   * @param {boolean} _foundFirstIndex - unused\n   * @return {BaseCMI|null}\n   * @abstract\n   */\n  abstract getChildElement(\n    _CMIElement: string,\n    _value: any,\n    _foundFirstIndex: boolean,\n  ): BaseCMI | null;\n\n  /**\n   * Attempts to store the data to the LMS, logs data if no LMS configured\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _calculateTotalTime\n   * @return {ResultObject}\n   * @abstract\n   */\n  abstract storeData(_calculateTotalTime: boolean): Promise<ResultObject>;\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _terminateCommit\n   * @return {StringKeyMap|Array}\n   * @abstract\n   */\n  abstract renderCommitCMI(_terminateCommit: boolean): StringKeyMap | Array<string>;\n\n  /**\n   * Render the commit object to the shortened format for LMS commit.\n   * This method transforms the CMI data into a format suitable for sending to the LMS.\n   * It is called during the commit process to prepare the data for transmission.\n   *\n   * @param {boolean} _terminateCommit - Whether this commit is part of the termination process\n   * @return {CommitObject} A formatted object containing the data to be sent to the LMS\n   * @example\n   * // Example of a commit object structure\n   * {\n   *   method: \"POST\",\n   *   params: {\n   *     cmi: { ... },\n   *     finishState: \"COMPLETED\"\n   *   }\n   * }\n   */\n  abstract renderCommitObject(_terminateCommit: boolean): CommitObject;\n\n  /**\n   * Logging for all SCORM actions\n   *\n   * @param {string} functionName\n   * @param {string} logMessage\n   * @param {number} messageLevel\n   * @param {string} CMIElement\n   */\n  apiLog(functionName: string, logMessage: string, messageLevel: LogLevel, CMIElement?: string) {\n    logMessage = formatMessage(functionName, logMessage, CMIElement);\n\n    if (messageLevel >= this.apiLogLevel) {\n      // Use the injected LoggingService\n      this._loggingService.log(messageLevel, logMessage);\n    }\n  }\n\n  /**\n   * Getter for _error_codes\n   * @return {ErrorCode}\n   */\n  get error_codes(): ErrorCode {\n    return this._error_codes;\n  }\n\n  /**\n   * Getter for _settings\n   * @return {Settings}\n   */\n  get settings(): Settings {\n    return this._settings;\n  }\n\n  /**\n   * Setter for _settings\n   * @param {Settings} settings\n   */\n  set settings(settings: Settings) {\n    const previousSettings = this._settings;\n    this._settings = { ...this._settings, ...settings };\n\n    // Update HTTP service settings\n    this._httpService?.updateSettings(this._settings);\n\n    // Update log level if it changed\n    if (settings.logLevel !== undefined && settings.logLevel !== previousSettings.logLevel) {\n      this.apiLogLevel = settings.logLevel;\n      this._loggingService?.setLogLevel(settings.logLevel);\n    }\n\n    // Update log handler if onLogMessage changed\n    if (\n      settings.onLogMessage !== undefined &&\n      settings.onLogMessage !== previousSettings.onLogMessage\n    ) {\n      this._loggingService?.setLogHandler(settings.onLogMessage);\n    }\n  }\n\n  /**\n   * Terminates the current run of the API\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async terminate(callbackName: string, checkTerminated: boolean): Promise<string> {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.TERMINATION_BEFORE_INIT,\n        this._error_codes.MULTIPLE_TERMINATION,\n      )\n    ) {\n      this.currentState = global_constants.STATE_TERMINATED;\n      // If enabled, attempt to sync offline data before termination\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._courseId &&\n        this.settings.syncOnTerminate &&\n        this._offlineStorageService.isDeviceOnline()\n      ) {\n        const hasPendingData = await this._offlineStorageService.hasPendingOfflineData(\n          this._courseId,\n        );\n        if (hasPendingData) {\n          this.apiLog(\n            callbackName,\n            \"Syncing pending offline data before termination\",\n            LogLevelEnum.INFO,\n          );\n          await this._offlineStorageService.syncOfflineData();\n        }\n      }\n\n      const result: ResultObject = await this.storeData(true);\n      if ((result.errorCode ?? 0) > 0) {\n        this.throwSCORMError(\"api\", result.errorCode);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Get the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  getValue(callbackName: string, checkTerminated: boolean, CMIElement: string): string {\n    let returnValue: string = \"\";\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.RETRIEVE_BEFORE_INIT,\n        this._error_codes.RETRIEVE_AFTER_TERM,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.getCMIValue(CMIElement);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement);\n    }\n\n    this.apiLog(callbackName, \": returned: \" + returnValue, LogLevelEnum.INFO, CMIElement);\n\n    if (returnValue === undefined) {\n      return \"\";\n    }\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Sets the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {string} commitCallback\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  setValue(\n    callbackName: string,\n    commitCallback: string,\n    checkTerminated: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (value !== undefined) {\n      value = String(value);\n    }\n    let returnValue: string = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.STORE_BEFORE_INIT,\n        this._error_codes.STORE_AFTER_TERM,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.setCMIValue(CMIElement, value);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement, value);\n    }\n\n    if (returnValue === undefined) {\n      returnValue = global_constants.SCORM_FALSE;\n    }\n\n    // If we didn't have any errors while setting the data, go ahead and\n    // schedule a commit, if autocommit is turned on\n    if (String(this.lastErrorCode) === \"0\") {\n      if (this.settings.autocommit) {\n        this.scheduleCommit(this.settings.autocommitSeconds * 1000, commitCallback);\n      }\n    }\n\n    this.apiLog(\n      callbackName,\n      \": \" + value + \": result: \" + returnValue,\n      LogLevelEnum.INFO,\n      CMIElement,\n    );\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async commit(callbackName: string, checkTerminated: boolean = false): Promise<string> {\n    this.clearScheduledCommit();\n\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.COMMIT_BEFORE_INIT,\n        this._error_codes.COMMIT_AFTER_TERM,\n      )\n    ) {\n      const result = await this.storeData(false);\n      if ((result.errorCode ?? 0) > 0) {\n        this.throwSCORMError(\"api\", result.errorCode);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      this.apiLog(callbackName, \" Result: \" + returnValue, LogLevelEnum.DEBUG, \"HttpRequest\");\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      this.processListeners(callbackName);\n\n      // If online and there is offline data pending, attempt to sync it\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._offlineStorageService.isDeviceOnline() &&\n        this._courseId\n      ) {\n        this._offlineStorageService.hasPendingOfflineData(this._courseId).then((hasPendingData) => {\n          if (hasPendingData) {\n            this.apiLog(callbackName, \"Syncing pending offline data\", LogLevelEnum.INFO);\n            this._offlineStorageService?.syncOfflineData().then((syncSuccess) => {\n              if (syncSuccess) {\n                this.apiLog(callbackName, \"Successfully synced offline data\", LogLevelEnum.INFO);\n                this.processListeners(\"OfflineDataSynced\");\n              } else {\n                this.apiLog(callbackName, \"Failed to sync some offline data\", LogLevelEnum.WARN);\n              }\n            });\n          }\n        });\n      }\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Returns last error code\n   * @param {string} callbackName\n   * @return {string}\n   */\n  getLastError(callbackName: string): string {\n    const returnValue = String(this.lastErrorCode);\n\n    this.processListeners(callbackName);\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getErrorString(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getDiagnostic(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode, true);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Checks the LMS state and ensures it has been initialized.\n   *\n   * @param {boolean} checkTerminated\n   * @param {number} beforeInitError\n   * @param {number} afterTermError\n   * @return {boolean}\n   */\n  checkState(checkTerminated: boolean, beforeInitError: number, afterTermError: number): boolean {\n    if (this.isNotInitialized()) {\n      this.throwSCORMError(\"api\", beforeInitError);\n      return false;\n    } else if (checkTerminated && this.isTerminated()) {\n      this.throwSCORMError(\"api\", afterTermError);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {(string|number)} _errorNumber\n   * @param {boolean} _detail\n   * @return {string}\n   * @abstract\n   */\n  getLmsErrorMessageDetails(_errorNumber: string | number, _detail: boolean = false): string {\n    throw new Error(\"The getLmsErrorMessageDetails method has not been implemented\");\n  }\n\n  /**\n   * Gets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @return {string}\n   * @abstract\n   */\n  getCMIValue(_CMIElement: string): string {\n    throw new Error(\"The getCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Sets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @param {any} _value\n   * @return {string}\n   * @abstract\n   */\n  setCMIValue(_CMIElement: string, _value: any): string {\n    throw new Error(\"The setCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Shared API method to set a valid for a given element.\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  _commonSetCMIValue(\n    methodName: string,\n    scorm2004: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (!CMIElement || CMIElement === \"\") {\n      return global_constants.SCORM_FALSE;\n    }\n\n    this.lastErrorCode = \"0\";\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap | BaseCMI = this as StringKeyMap;\n    let returnValue = global_constants.SCORM_FALSE;\n    let foundFirstIndex = false;\n\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      const attribute = structure[idx];\n\n      if (idx === structure.length - 1) {\n        if (scorm2004 && attribute.substring(0, 8) === \"{target=\") {\n          if (this.isInitialized()) {\n            this.throwSCORMError(CMIElement, this._error_codes.READ_ONLY_ELEMENT);\n            break;\n          } else {\n            refObject = {\n              ...refObject,\n              attribute: value,\n            };\n          }\n        } else if (!this._checkObjectHasProperty(refObject as StringKeyMap, attribute)) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        } else {\n          if (\n            stringMatches(CMIElement, \"\\\\.correct_responses\\\\.\\\\d+$\") &&\n            this.isInitialized() &&\n            attribute !== \"pattern\"\n          ) {\n            this.validateCorrectResponse(CMIElement, value);\n            if (this.lastErrorCode !== \"0\") {\n              this.throwSCORMError(CMIElement, this._error_codes.TYPE_MISMATCH);\n              break;\n            }\n          }\n\n          if (!scorm2004 || this._errorHandlingService.lastErrorCode === \"0\") {\n            (refObject as StringKeyMap)[attribute] = value;\n            returnValue = global_constants.SCORM_TRUE;\n          }\n        }\n      } else {\n        refObject = (refObject as StringKeyMap)[attribute] as StringKeyMap;\n        if (!refObject) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n\n        if (refObject instanceof CMIArray) {\n          const index = parseInt(structure[idx + 1], 10);\n\n          // SCO is trying to set an item on an array\n          if (!isNaN(index)) {\n            const item = refObject.childArray[index];\n\n            if (item) {\n              refObject = item;\n              foundFirstIndex = true;\n            } else {\n              const newChild = this.getChildElement(CMIElement, value, foundFirstIndex);\n              foundFirstIndex = true;\n\n              if (!newChild) {\n                if (this.lastErrorCode === \"0\") {\n                  this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n                }\n                break;\n              } else {\n                if (refObject.initialized) newChild.initialize();\n                refObject.childArray[index] = newChild;\n                refObject = newChild;\n              }\n            }\n\n            // Have to update idx value to skip the array position\n            idx++;\n          }\n        }\n      }\n    }\n\n    if (returnValue === global_constants.SCORM_FALSE) {\n      this.apiLog(\n        methodName,\n        `There was an error setting the value for: ${CMIElement}, value of: ${value}`,\n        LogLevelEnum.WARN,\n      );\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @return {any}\n   */\n  _commonGetCMIValue(methodName: string, scorm2004: boolean, CMIElement: string): any {\n    if (!CMIElement || CMIElement === \"\") {\n      return \"\";\n    }\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap = this as StringKeyMap;\n    let attribute = null;\n\n    const uninitializedErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) has not been initialized.`;\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      attribute = structure[idx];\n\n      if (!scorm2004) {\n        if (idx === structure.length - 1) {\n          if (!this._checkObjectHasProperty(refObject, attribute)) {\n            this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n            return;\n          }\n        }\n      } else {\n        if (\n          String(attribute).substring(0, 8) === \"{target=\" &&\n          typeof refObject._isTargetValid == \"function\"\n        ) {\n          const target = String(attribute).substring(8, String(attribute).length - 9);\n          return refObject._isTargetValid(target);\n        } else if (!this._checkObjectHasProperty(refObject, attribute)) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          return;\n        }\n      }\n\n      refObject = refObject[attribute] as StringKeyMap;\n      if (refObject === undefined) {\n        this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n        break;\n      }\n\n      if (refObject instanceof CMIArray) {\n        const index = parseInt(structure[idx + 1], 10);\n\n        // SCO is trying to set an item on an array\n        if (!isNaN(index)) {\n          const item = refObject.childArray[index];\n\n          if (item) {\n            refObject = item;\n          } else {\n            this.throwSCORMError(\n              CMIElement,\n              this._error_codes.VALUE_NOT_INITIALIZED,\n              uninitializedErrorMessage,\n            );\n            break;\n          }\n\n          // Have to update idx value to skip the array position\n          idx++;\n        }\n      }\n    }\n\n    if (refObject === null || refObject === undefined) {\n      if (!scorm2004) {\n        if (attribute === \"_children\") {\n          this.throwSCORMError(CMIElement, this._error_codes.CHILDREN_ERROR, undefined);\n        } else if (attribute === \"_count\") {\n          this.throwSCORMError(CMIElement, this._error_codes.COUNT_ERROR, undefined);\n        }\n      }\n    } else {\n      return refObject;\n    }\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isInitialized(): boolean {\n    return this.currentState === global_constants.STATE_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_NOT_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isNotInitialized(): boolean {\n    return this.currentState === global_constants.STATE_NOT_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_TERMINATED\n   *\n   * @return {boolean}\n   */\n  isTerminated(): boolean {\n    return this.currentState === global_constants.STATE_TERMINATED;\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event.\n   * This method allows you to register a callback function that will be executed\n   * when the specified event occurs.\n   *\n   * @param {string} listenerName - The name of the event to listen for (e.g., \"Initialize\", \"Terminate\", \"GetValue\", \"SetValue\", \"Commit\")\n   * @param {function} callback - The function to execute when the event occurs. The callback will receive relevant event data.\n   * @example\n   * // Listen for Initialize events\n   * api.on(\"Initialize\", function() {\n   *   console.log(\"API has been initialized\");\n   * });\n   *\n   * // Listen for SetValue events\n   * api.on(\"SetValue\", function(element, value) {\n   *   console.log(\"Setting \" + element + \" to \" + value);\n   * });\n   */\n  on(listenerName: string, callback: Function) {\n    this._eventService.on(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener.\n   * This method removes a previously registered callback for an event.\n   * Both the event name and the callback reference must match what was used in the 'on' method.\n   *\n   * @param {string} listenerName - The name of the event to stop listening for\n   * @param {function} callback - The callback function to remove\n   * @example\n   * // Remove a specific listener\n   * const myCallback = function() { console.log(\"API initialized\"); };\n   * api.on(\"Initialize\", myCallback);\n   * // Later, when you want to remove it:\n   * api.off(\"Initialize\", myCallback);\n   */\n  off(listenerName: string, callback: Function) {\n    this._eventService.off(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event.\n   * This method removes all callbacks registered for the specified event.\n   *\n   * @param {string} listenerName - The name of the event to clear all listeners for\n   * @example\n   * // Remove all listeners for the Initialize event\n   * api.clear(\"Initialize\");\n   */\n  clear(listenerName: string) {\n    this._eventService.clear(listenerName);\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created for a specific event.\n   * This method is called internally when SCORM events occur to notify all registered listeners.\n   * It triggers all callback functions registered for the specified event.\n   *\n   * @param {string} functionName - The name of the function/event that occurred\n   * @param {string} CMIElement - Optional CMI element involved in the event\n   * @param {any} value - Optional value associated with the event\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this._eventService.processListeners(functionName, CMIElement, value);\n  }\n\n  /**\n   * Throws a SCORM error with the specified error number and optional message.\n   * This method sets the last error code and can be used to indicate that an operation failed.\n   * The error number should correspond to one of the standard SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The SCORM error code to set\n   * @param {string} message - Optional custom error message to provide additional context\n   * @example\n   * // Throw a \"not initialized\" error\n   * this.throwSCORMError(301, \"The API must be initialized before calling GetValue\");\n   */\n  throwSCORMError(CMIElement: string, errorNumber: number, message?: string) {\n    this._errorHandlingService.throwSCORMError(CMIElement, errorNumber, message);\n  }\n\n  /**\n   * Clears the last SCORM error code when an operation succeeds.\n   * This method is typically called after successful API operations to reset the error state.\n   * It only clears the error if the success parameter is \"true\".\n   *\n   * @param {string} success - A string indicating whether the operation succeeded (\"true\" or \"false\")\n   * @example\n   * // Clear error after successful operation\n   * this.clearSCORMError(\"true\");\n   */\n  clearSCORMError(success: string) {\n    this._errorHandlingService.clearSCORMError(success);\n  }\n\n  /**\n   * Load the CMI from a flattened JSON object.\n   * This method populates the CMI data model from a flattened JSON structure\n   * where keys represent CMI element paths (e.g., \"cmi.core.student_id\").\n   *\n   * @param {StringKeyMap} json - The flattened JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a flattened JSON structure\n   * api.loadFromFlattenedJSON({\n   *   \"cmi.core.student_id\": \"12345\",\n   *   \"cmi.core.student_name\": \"John Doe\",\n   *   \"cmi.core.lesson_status\": \"incomplete\"\n   * });\n   */\n  loadFromFlattenedJSON(json: StringKeyMap, CMIElement?: string) {\n    if (!CMIElement) {\n      // by default, we start from a blank string because we're expecting each element to start with `cmi`\n      CMIElement = \"\";\n    }\n\n    this._serializationService.loadFromFlattenedJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Loads CMI data from a hierarchical JSON object.\n   * This method populates the CMI data model from a nested JSON structure\n   * that mirrors the CMI object hierarchy.\n   *\n   * @param {StringKeyMap} json - The hierarchical JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a hierarchical JSON structure\n   * api.loadFromJSON({\n   *   core: {\n   *     student_id: \"12345\",\n   *     student_name: \"John Doe\",\n   *     lesson_status: \"incomplete\"\n   *   },\n   *   objectives: [\n   *     { id: \"obj1\", score: { raw: 85 } }\n   *   ]\n   * });\n   */\n  loadFromJSON(json: StringKeyMap, CMIElement: string = \"\") {\n    if ((!CMIElement || CMIElement === \"\") && !Object.hasOwnProperty.call(json, \"cmi\")) {\n      // providing a backward compatibility for the old v1 API\n      CMIElement = \"cmi\";\n    }\n    this._serializationService.loadFromJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Render the CMI object to a JSON string for sending to an LMS.\n   * This method serializes the current CMI data model to a JSON string.\n   * The output format is controlled by the sendFullCommit setting.\n   *\n   * @return {string} A JSON string representation of the CMI data\n   * @example\n   * // Get the current CMI data as a JSON string\n   * const jsonString = api.renderCMIToJSONString();\n   * console.log(jsonString); // '{\"core\":{\"student_id\":\"12345\",...}}'\n   */\n  renderCMIToJSONString(): string {\n    return this._serializationService.renderCMIToJSONString(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Returns a JavaScript object representing the current CMI data.\n   * This method creates a plain JavaScript object that mirrors the\n   * structure of the CMI data model, suitable for further processing.\n   *\n   * @return {StringKeyMap} A JavaScript object representing the CMI data\n   * @example\n   * // Get the current CMI data as a JavaScript object\n   * const cmiObject = api.renderCMIToJSONObject();\n   * console.log(cmiObject.core.student_id); // \"12345\"\n   */\n  renderCMIToJSONObject(): StringKeyMap {\n    return this._serializationService.renderCMIToJSONObject(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Process an HTTP request\n   *\n   * @param {string} url - The URL to send the request to\n   * @param {CommitObject | StringKeyMap | Array<any>} params - The parameters to send\n   * @param {boolean} immediate - Whether to send the request immediately without waiting\n   * @returns {Promise<ResultObject>} - The result of the request\n   * @async\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n  ): Promise<ResultObject> {\n    // If offline support is enabled and device is offline, store data locally instead of sending\n    if (\n      this.settings.enableOfflineSupport &&\n      this._offlineStorageService &&\n      !this._offlineStorageService.isDeviceOnline() &&\n      this._courseId\n    ) {\n      this.apiLog(\n        \"processHttpRequest\",\n        \"Device is offline, storing data locally\",\n        LogLevelEnum.INFO,\n      );\n\n      if (params && typeof params === \"object\" && \"cmi\" in params) {\n        return await this._offlineStorageService.storeOffline(\n          this._courseId,\n          params as CommitObject,\n        );\n      } else {\n        this.apiLog(\n          \"processHttpRequest\",\n          \"Invalid commit data format for offline storage\",\n          LogLevelEnum.ERROR,\n        );\n        return {\n          result: global_constants.SCORM_FALSE,\n          errorCode: this._error_codes.GENERAL,\n        };\n      }\n    }\n\n    // Otherwise, proceed with normal HTTP request\n    return await this._httpService.processHttpRequest(\n      url,\n      params,\n      immediate,\n      (functionName, message, level, element) => this.apiLog(functionName, message, level, element),\n      (functionName, CMIElement, value) => this.processListeners(functionName, CMIElement, value),\n    );\n  }\n\n  /**\n   * Schedules a commit operation to occur after a specified delay.\n   * This method is used to implement auto-commit functionality, where data\n   * is periodically sent to the LMS without requiring explicit commit calls.\n   *\n   * @param {number} when - The number of milliseconds to wait before committing\n   * @param {string} callback - The name of the commit event callback\n   * @example\n   * // Schedule a commit to happen in 60 seconds\n   * api.scheduleCommit(60000, \"commit\");\n   */\n  scheduleCommit(when: number, callback: string) {\n    if (!this._timeout) {\n      this._timeout = new ScheduledCommit(this, when, callback);\n      this.apiLog(\"scheduleCommit\", \"scheduled\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Clears and cancels any currently scheduled commits.\n   * This method is typically called when an explicit commit is performed\n   * or when the API is terminated, to prevent redundant commits.\n   *\n   * @example\n   * // Cancel any pending scheduled commits\n   * api.clearScheduledCommit();\n   */\n  clearScheduledCommit() {\n    if (this._timeout) {\n      this._timeout.cancel();\n      this._timeout = undefined;\n      this.apiLog(\"clearScheduledCommit\", \"cleared\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Checks if an object has a specific property, using multiple detection methods.\n   * This method performs a thorough check for property existence by:\n   * 1. Checking if it's an own property using Object.hasOwnProperty\n   * 2. Checking if it's defined in the prototype with a property descriptor\n   * 3. Checking if it's accessible via the 'in' operator (includes inherited properties)\n   *\n   * @param {StringKeyMap} StringKeyMap - The object to check for the property\n   * @param {string} attribute - The property name to look for\n   * @return {boolean} True if the property exists on the object or its prototype chain\n   * @private\n   *\n   * @example\n   * // Check for an own property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"name\"); // Returns true\n   *\n   * @example\n   * // Check for an inherited property\n   * class Parent { get type() { return \"parent\"; } }\n   * const child = Object.create(new Parent());\n   * this._checkObjectHasProperty(child, \"type\"); // Returns true\n   *\n   * @example\n   * // Check for a non-existent property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"age\"); // Returns false\n   */\n  private _checkObjectHasProperty(StringKeyMap: StringKeyMap, attribute: string): boolean {\n    return (\n      Object.hasOwnProperty.call(StringKeyMap, attribute) ||\n      Object.getOwnPropertyDescriptor(Object.getPrototypeOf(StringKeyMap), attribute) != null ||\n      attribute in StringKeyMap\n    );\n  }\n\n  /**\n   * Handles exceptions that occur when accessing CMI values.\n   * This method delegates to the ErrorHandlingService to process exceptions\n   * that occur during CMI data operations, ensuring consistent error handling\n   * throughout the API.\n   *\n   * @param {string} CMIElement\n   * @param {any} e - The exception that was thrown\n   * @param {string} returnValue - The default return value to use if an error occurs\n   * @return {string} Either the original returnValue or SCORM_FALSE if an error occurred\n   * @private\n   *\n   * @example\n   * // Handle a validation error when getting a CMI value\n   * try {\n   *   return this.getCMIValue(\"cmi.core.score.raw\");\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"\");\n   * }\n   *\n   * @example\n   * // Handle a general error when setting a CMI value\n   * try {\n   *   this.setCMIValue(\"cmi.core.lesson_status\", \"completed\");\n   *   return \"true\";\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"false\");\n   * }\n   */\n  private handleValueAccessException(CMIElement: string, e: any, returnValue: string): string {\n    if (e instanceof ValidationError) {\n      this.lastErrorCode = String(e.errorCode);\n      returnValue = global_constants.SCORM_FALSE;\n      this.throwSCORMError(CMIElement, e.errorCode, e.errorMessage);\n    } else {\n      if (e instanceof Error && e.message) {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, e.message);\n      } else {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, \"Unknown error\");\n      }\n    }\n    return returnValue;\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS.\n   * This method delegates to the SerializationService to create a properly\n   * formatted object containing the CMI data that needs to be sent to the LMS.\n   * The format and content of the commit object depend on whether this is a\n   * regular commit or a termination commit.\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @return {CommitObject|StringKeyMap|Array} The formatted commit object\n   * @protected\n   *\n   * @example\n   * // Create a regular commit object\n   * const regularCommit = this.getCommitObject(false);\n   * // Result might be: { cmi: { core: { lesson_status: \"incomplete\" } } }\n   *\n   * @example\n   * // Create a termination commit object (includes total_time)\n   * const terminationCommit = this.getCommitObject(true);\n   * // Result might be: { cmi: { core: { lesson_status: \"completed\", total_time: \"PT1H30M\" } } }\n   */\n  protected getCommitObject(terminateCommit: boolean): CommitObject | StringKeyMap | Array<any> {\n    return this._serializationService.getCommitObject(\n      terminateCommit,\n      this.settings.alwaysSendTotalTime,\n      this.settings.renderCommonCommitFields,\n      (terminateCommit) => this.renderCommitObject(terminateCommit),\n      (terminateCommit) => this.renderCommitCMI(terminateCommit),\n      this.apiLogLevel,\n    );\n  }\n}\n","import { CMI } from \"./cmi/scorm12/cmi\";\nimport * as Utilities from \"./utilities\";\nimport { StringKeyMap, stringMatches } from \"./utilities\";\nimport { global_constants, scorm12_constants } from \"./constants/api_constants\";\nimport { scorm12_errors } from \"./constants/error_codes\";\n\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport { CMIObjectivesObject } from \"./cmi/scorm12/objectives\";\nimport {\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n} from \"./cmi/scorm12/interactions\";\nimport { NAV } from \"./cmi/scorm12/nav\";\nimport { CommitObject, ResultObject, ScoreObject, Settings } from \"./types/api_types\";\nimport { CompletionStatus, SuccessStatus } from \"./constants/enums\";\nimport BaseAPI from \"./BaseAPI\";\nimport { scorm12_regex } from \"./constants/regex\";\n\n/**\n * API class for SCORM 1.2\n */\nclass Scorm12API extends BaseAPI {\n  /**\n   * Constructor for SCORM 1.2 API\n   * @param {object} settings\n   */\n  constructor(settings?: Settings) {\n    if (settings) {\n      if (settings.mastery_override === undefined) {\n        settings.mastery_override = false;\n      }\n    }\n\n    super(scorm12_errors, settings);\n\n    this.cmi = new CMI();\n    this.nav = new NAV();\n\n    // Rename functions to match 1.2 Spec and expose to modules\n    this.LMSInitialize = this.lmsInitialize;\n    this.LMSFinish = this.lmsFinish;\n    this.LMSGetValue = this.lmsGetValue;\n    this.LMSSetValue = this.lmsSetValue;\n    this.LMSCommit = this.lmsCommit;\n    this.LMSGetLastError = this.lmsGetLastError;\n    this.LMSGetErrorString = this.lmsGetErrorString;\n    this.LMSGetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  public statusSetByModule = false;\n\n  cmi: CMI;\n  nav: NAV;\n\n  LMSInitialize: () => string;\n  LMSFinish: () => string;\n  LMSGetValue: (CMIElement: string) => string;\n  LMSSetValue: (CMIElement: string, value: any) => string;\n  LMSCommit: () => string;\n  LMSGetLastError: () => string;\n  LMSGetErrorString: (CMIErrorCode: string) => string;\n  LMSGetDiagnostic: (CMIErrorCode: string) => string;\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset(settings?: Settings) {\n    this.commonReset(settings);\n\n    this.cmi?.reset();\n    this.nav?.reset();\n  }\n\n  /**\n   * lmsInitialize function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize(): string {\n    this.cmi.initialize();\n    if (this.cmi.core.lesson_status) {\n      this.statusSetByModule = true;\n    } else {\n      this.cmi.core.lesson_status = \"not attempted\";\n    }\n    return this.initialize(\n      \"LMSInitialize\",\n      \"LMS was already initialized!\",\n      \"LMS is already finished!\",\n    );\n  }\n\n  /**\n   * LMSFinish function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish(): string {\n    (async () => {\n      await this.internalFinish();\n    })();\n    return global_constants.SCORM_TRUE;\n  }\n\n  async internalFinish(): Promise<string> {\n    const result = await this.terminate(\"LMSFinish\", true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      if (this.nav.event !== \"\") {\n        if (this.nav.event === \"continue\") {\n          this.processListeners(\"SequenceNext\");\n        } else {\n          this.processListeners(\"SequencePrevious\");\n        }\n      } else if (this.settings.autoProgress) {\n        this.processListeners(\"SequenceNext\");\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * LMSGetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement: string): string {\n    return this.getValue(\"LMSGetValue\", false, CMIElement);\n  }\n\n  /**\n   * LMSSetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement: string, value: any): string {\n    if (CMIElement === \"cmi.core.lesson_status\") {\n      this.statusSetByModule = true;\n    }\n    return this.setValue(\"LMSSetValue\", \"LMSCommit\", false, CMIElement, value);\n  }\n\n  /**\n   * LMSCommit function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit(): string {\n    if (this.settings.asyncCommit) {\n      this.scheduleCommit(500, \"LMSCommit\");\n    } else {\n      (async () => {\n        await this.commit(\"LMSCommit\", false);\n      })();\n    }\n    return global_constants.SCORM_TRUE;\n  }\n\n  /**\n   * LMSGetLastError function from SCORM 1.2 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError(): string {\n    return this.getLastError(\"LMSGetLastError\");\n  }\n\n  /**\n   * LMSGetErrorString function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode: string): string {\n    return this.getErrorString(\"LMSGetErrorString\", CMIErrorCode);\n  }\n\n  /**\n   * LMSGetDiagnostic function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode: string): string {\n    return this.getDiagnostic(\"LMSGetDiagnostic\", CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  override setCMIValue(CMIElement: string, value: any): string {\n    return this._commonSetCMIValue(\"LMSSetValue\", false, CMIElement, value);\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  override getCMIValue(CMIElement: string): any {\n    return this._commonGetCMIValue(\"getCMIValue\", false, CMIElement);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {*} _value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI|null}\n   */\n  getChildElement(CMIElement: string, _value: any, foundFirstIndex: boolean): BaseCMI | null {\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      return new CMIObjectivesObject();\n    } else if (\n      foundFirstIndex &&\n      stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+\")\n    ) {\n      return new CMIInteractionsCorrectResponsesObject();\n    } else if (\n      foundFirstIndex &&\n      stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+\")\n    ) {\n      return new CMIInteractionsObjectivesObject();\n    } else if (!foundFirstIndex && stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\")) {\n      return new CMIInteractionsObject();\n    }\n\n    return null;\n  }\n\n  /**\n   * Validates Correct Response values\n   *\n   * @param {string} _CMIElement\n   * @param {*} _value\n   */\n  validateCorrectResponse(_CMIElement: string, _value: any) {\n    // do nothing\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {number|string} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  override getLmsErrorMessageDetails(errorNumber: number | string, detail: boolean): string {\n    let basicMessage = \"No Error\";\n    let detailMessage = \"No Error\";\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (scorm12_constants.error_descriptions[errorNumber]) {\n      basicMessage = scorm12_constants.error_descriptions[errorNumber].basicMessage;\n      detailMessage = scorm12_constants.error_descriptions[errorNumber].detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {Scorm12API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI: Scorm12API) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   *\n   * @param {boolean} terminateCommit\n   * @return {object|Array}\n   */\n  renderCommitCMI(terminateCommit: boolean): StringKeyMap | Array<string> {\n    const cmiExport: StringKeyMap = this.renderCMIToJSONObject();\n\n    if (terminateCommit) {\n      (cmiExport.cmi as any).core.total_time = this.cmi.getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened: StringKeyMap = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case \"flattened\":\n        return Utilities.flatten(cmiExport);\n      case \"params\":\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case \"json\":\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   * @param {boolean} terminateCommit\n   * @return {CommitObject}\n   */\n  renderCommitObject(terminateCommit: boolean): CommitObject {\n    const cmiExport = this.renderCommitCMI(terminateCommit);\n    const totalTimeHHMMSS = this.cmi.getCurrentTotalTime();\n    const totalTimeSeconds = Utilities.getTimeAsSeconds(totalTimeHHMMSS, scorm12_regex.CMITimespan);\n    const lessonStatus = this.cmi.core.lesson_status;\n    let completionStatus = CompletionStatus.UNKNOWN;\n    let successStatus = SuccessStatus.UNKNOWN;\n    if (lessonStatus) {\n      completionStatus =\n        lessonStatus === \"completed\" || lessonStatus === \"passed\"\n          ? CompletionStatus.COMPLETED\n          : CompletionStatus.INCOMPLETE;\n      if (lessonStatus === \"passed\") {\n        successStatus = SuccessStatus.PASSED;\n      } else if (lessonStatus === \"failed\") {\n        successStatus = SuccessStatus.FAILED;\n      }\n    }\n\n    const score = this.cmi.core.score;\n    let scoreObject: ScoreObject = null;\n    if (score) {\n      scoreObject = {};\n\n      if (!Number.isNaN(Number.parseFloat(score.raw))) {\n        scoreObject.raw = Number.parseFloat(score.raw);\n      }\n      if (!Number.isNaN(Number.parseFloat(score.min))) {\n        scoreObject.min = Number.parseFloat(score.min);\n      }\n      if (!Number.isNaN(Number.parseFloat(score.max))) {\n        scoreObject.max = Number.parseFloat(score.max);\n      }\n    }\n\n    const commitObject: CommitObject = {\n      successStatus: successStatus,\n      completionStatus: completionStatus,\n      runtimeData: cmiExport as StringKeyMap,\n      totalTimeSeconds: totalTimeSeconds,\n    };\n    if (scoreObject) {\n      commitObject.score = scoreObject;\n    }\n    return commitObject;\n  }\n\n  /**\n   * Attempts to store the data to the LMS\n   *\n   * @param {boolean} terminateCommit\n   * @return {ResultObject}\n   */\n  async storeData(terminateCommit: boolean): Promise<ResultObject> {\n    if (terminateCommit) {\n      const originalStatus = this.cmi.core.lesson_status;\n      if (\n        !this.cmi.core.lesson_status ||\n        (!this.statusSetByModule && this.cmi.core.lesson_status === \"not attempted\")\n      ) {\n        this.cmi.core.lesson_status = \"completed\";\n      }\n\n      if (this.cmi.core.lesson_mode === \"normal\") {\n        if (this.cmi.core.credit === \"credit\") {\n          if (\n            this.settings.mastery_override &&\n            this.cmi.student_data.mastery_score !== \"\" &&\n            this.cmi.core.score.raw !== \"\"\n          ) {\n            this.cmi.core.lesson_status =\n              parseFloat(this.cmi.core.score.raw) >= parseFloat(this.cmi.student_data.mastery_score)\n                ? \"passed\"\n                : \"failed\";\n          }\n        }\n      } else if (this.cmi.core.lesson_mode === \"browse\") {\n        if (\n          ((this.startingData?.cmi as any)?.core?.lesson_status || \"\") === \"\" &&\n          originalStatus === \"not attempted\"\n        ) {\n          this.cmi.core.lesson_status = \"browsed\";\n        }\n      }\n    }\n\n    const commitObject = this.getCommitObject(terminateCommit);\n    if (typeof this.settings.lmsCommitUrl === \"string\") {\n      return await this.processHttpRequest(\n        this.settings.lmsCommitUrl,\n        commitObject,\n        terminateCommit,\n      );\n    } else {\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    }\n  }\n}\n\nexport default Scorm12API;\n","import { ValidationError } from \"../exceptions\";\nimport { aicc_constants } from \"../constants/api_constants\";\n\nconst aicc_errors = aicc_constants.error_descriptions;\n\n/**\n * AICC Validation Error\n */\nexport class AICCValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(aicc_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        aicc_errors[String(errorCode)].basicMessage,\n        aicc_errors[String(errorCode)].detailMessage,\n      );\n    } else {\n      super(CMIElement, 101, aicc_errors[\"101\"].basicMessage, aicc_errors[\"101\"].detailMessage);\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, AICCValidationError.prototype);\n  }\n}\n","import { checkValidFormat } from \"../common/validation\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function checkAICCValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm12_errors.TYPE_MISMATCH,\n    AICCValidationError,\n    allowEmptyString,\n  );\n}\n","import { CMIArray } from \"../common/array\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { aicc_regex } from \"../../constants/regex\";\n\n/**\n * AICC Evaluation object\n */\nexport class CMIEvaluation extends BaseCMI {\n  /**\n   * Constructor for AICC Evaluation object\n   */\n  constructor() {\n    super(\"cmi.evaluation\");\n    this.comments = new CMIEvaluationComments();\n  }\n\n  public comments: CMIEvaluationComments;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.comments?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this.comments?.reset();\n  }\n\n  /**\n   * toJSON for cmi.evaluation object\n   * @return {{comments: CMIEvaluationComments}}\n   */\n  toJSON(): {\n    comments: CMIEvaluationComments;\n  } {\n    this.jsonString = true;\n    const result = {\n      comments: this.comments,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing AICC's cmi.evaluation.comments object\n */\n\nclass CMIEvaluationComments extends CMIArray {\n  /**\n   * Constructor for AICC Evaluation Comments object\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.evaluation.comments\",\n      children: aicc_constants.comments_children,\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: AICCValidationError,\n    });\n  }\n}\n\n/**\n * Class for AICC Evaluation Comments\n */\nexport class CMIEvaluationCommentsObject extends BaseCMI {\n  private _content = \"\";\n  private _location = \"\";\n  private _time = \"\";\n\n  /**\n   * Constructor for Evaluation Comments\n   */\n  constructor() {\n    super(\"cmi.evaluation.comments.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._content = \"\";\n    this._location = \"\";\n    this._time = \"\";\n  }\n\n  /**\n   * Getter for _content\n   * @return {string}\n   */\n  get content(): string {\n    return this._content;\n  }\n\n  /**\n   * Setter for _content\n   * @param {string} content\n   */\n  set content(content: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".content\", content, aicc_regex.CMIString256)) {\n      this._content = content;\n    }\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".location\", location, aicc_regex.CMIString256)) {\n      this._location = location;\n    }\n  }\n\n  /**\n   * Getter for _time\n   * @return {string}\n   */\n  get time(): string {\n    return this._time;\n  }\n\n  /**\n   * Setting for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".time\", time, aicc_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.evaluation.comments.n object\n   * @return {\n   *    {\n   *      content: string,\n   *      location: string,\n   *      time: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    content: string;\n    location: string;\n    time: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      content: this.content,\n      location: this.location,\n      time: this.time,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { CMIStudentPreference } from \"../scorm12/student_preference\";\n\n/**\n * StudentPreferences class for AICC\n */\nexport class AICCStudentPreferences extends CMIStudentPreference {\n  /**\n   * Constructor for AICC Student Preferences object\n   */\n  constructor() {\n    super(aicc_constants.student_preference_children);\n    this.windows = new CMIArray({\n      CMIElement: \"cmi.student_preference.windows\",\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: AICCValidationError,\n      children: \"\",\n    });\n  }\n\n  public windows: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.windows?.initialize();\n  }\n\n  private _lesson_type = \"\";\n  private _text_color = \"\";\n  private _text_location = \"\";\n  private _text_size = \"\";\n  private _video = \"\";\n\n  /**\n   * Getter for _lesson_type\n   * @return {string}\n   */\n  get lesson_type(): string {\n    return this._lesson_type;\n  }\n\n  /**\n   * Setter for _lesson_type\n   * @param {string} lesson_type\n   */\n  set lesson_type(lesson_type: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".lesson_type\", lesson_type, aicc_regex.CMIString256)\n    ) {\n      this._lesson_type = lesson_type;\n    }\n  }\n\n  /**\n   * Getter for _text_color\n   * @return {string}\n   */\n  get text_color(): string {\n    return this._text_color;\n  }\n\n  /**\n   * Setter for _text_color\n   * @param {string} text_color\n   */\n  set text_color(text_color: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".text_color\", text_color, aicc_regex.CMIString256)\n    ) {\n      this._text_color = text_color;\n    }\n  }\n\n  /**\n   * Getter for _text_location\n   * @return {string}\n   */\n  get text_location(): string {\n    return this._text_location;\n  }\n\n  /**\n   * Setter for _text_location\n   * @param {string} text_location\n   */\n  set text_location(text_location: string) {\n    if (\n      checkAICCValidFormat(\n        this._cmi_element + \".text_location\",\n        text_location,\n        aicc_regex.CMIString256,\n      )\n    ) {\n      this._text_location = text_location;\n    }\n  }\n\n  /**\n   * Getter for _text_size\n   * @return {string}\n   */\n  get text_size(): string {\n    return this._text_size;\n  }\n\n  /**\n   * Setter for _text_size\n   * @param {string} text_size\n   */\n  set text_size(text_size: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".text_size\", text_size, aicc_regex.CMIString256)\n    ) {\n      this._text_size = text_size;\n    }\n  }\n\n  /**\n   * Getter for _video\n   * @return {string}\n   */\n  get video(): string {\n    return this._video;\n  }\n\n  /**\n   * Setter for _video\n   * @param {string} video\n   */\n  set video(video: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".video\", video, aicc_regex.CMIString256)) {\n      this._video = video;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_preference\n   *\n   * @return {\n   *    {\n   *      audio: string,\n   *      language: string,\n   *      speed: string,\n   *      text: string,\n   *      text_color: string,\n   *      text_location: string,\n   *      text_size: string,\n   *      video: string,\n   *      windows: CMIArray\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    audio: string;\n    language: string;\n    lesson_type: string;\n    speed: string;\n    text: string;\n    text_color: string;\n    text_location: string;\n    text_size: string;\n    video: string;\n    windows: CMIArray;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio: this.audio,\n      language: this.language,\n      lesson_type: this.lesson_type,\n      speed: this.speed,\n      text: this.text,\n      text_color: this.text_color,\n      text_location: this.text_location,\n      text_size: this.text_size,\n      video: this.video,\n      windows: this.windows,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Class representing the AICC cmi.student_demographics object\n */\nexport class CMIStudentDemographics extends BaseCMI {\n  private __children = aicc_constants.student_demographics_children;\n  private _city = \"\";\n  private _class = \"\";\n  private _company = \"\";\n  private _country = \"\";\n  private _experience = \"\";\n  private _familiar_name = \"\";\n  private _instructor_name = \"\";\n  private _title = \"\";\n  private _native_language = \"\";\n  private _state = \"\";\n  private _street_address = \"\";\n  private _telephone = \"\";\n  private _years_experience = \"\";\n\n  /**\n   * Constructor for AICC StudentDemographics object\n   */\n  constructor() {\n    super(\"cmi.student_demographics\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Getter for city\n   * @return {string}\n   */\n  get city(): string {\n    return this._city;\n  }\n\n  /**\n   * Setter for _city. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} city\n   */\n  set city(city: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.city\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._city = city;\n    }\n  }\n\n  /**\n   * Getter for class\n   * @return {string}\n   */\n  get class(): string {\n    return this._class;\n  }\n\n  /**\n   * Setter for _class. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} clazz\n   */\n  set class(clazz: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.class\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._class = clazz;\n    }\n  }\n\n  /**\n   * Getter for company\n   * @return {string}\n   */\n  get company(): string {\n    return this._company;\n  }\n\n  /**\n   * Setter for _company. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} company\n   */\n  set company(company: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.company\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._company = company;\n    }\n  }\n\n  /**\n   * Getter for country\n   * @return {string}\n   */\n  get country(): string {\n    return this._country;\n  }\n\n  /**\n   * Setter for _country. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} country\n   */\n  set country(country: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.country\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._country = country;\n    }\n  }\n\n  /**\n   * Getter for experience\n   * @return {string}\n   */\n  get experience(): string {\n    return this._experience;\n  }\n\n  /**\n   * Setter for _experience. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} experience\n   */\n  set experience(experience: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.experience\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._experience = experience;\n    }\n  }\n\n  /**\n   * Getter for familiar_name\n   * @return {string}\n   */\n  get familiar_name(): string {\n    return this._familiar_name;\n  }\n\n  /**\n   * Setter for _familiar_name. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} familiar_name\n   */\n  set familiar_name(familiar_name: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.familiar_name\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._familiar_name = familiar_name;\n    }\n  }\n\n  /**\n   * Getter for instructor_name\n   * @return {string}\n   */\n  get instructor_name(): string {\n    return this._instructor_name;\n  }\n\n  /**\n   * Setter for _instructor_name. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} instructor_name\n   */\n  set instructor_name(instructor_name: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.instructor_name\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._instructor_name = instructor_name;\n    }\n  }\n\n  /**\n   * Getter for title\n   * @return {string}\n   */\n  get title(): string {\n    return this._title;\n  }\n\n  /**\n   * Setter for _title. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} title\n   */\n  set title(title: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.title\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._title = title;\n    }\n  }\n\n  /**\n   * Getter for native_language\n   * @return {string}\n   */\n  get native_language(): string {\n    return this._native_language;\n  }\n\n  /**\n   * Setter for _native_language. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} native_language\n   */\n  set native_language(native_language: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.native_language\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._native_language = native_language;\n    }\n  }\n\n  /**\n   * Getter for state\n   * @return {string}\n   */\n  get state(): string {\n    return this._state;\n  }\n\n  /**\n   * Setter for _state. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} state\n   */\n  set state(state: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.state\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._state = state;\n    }\n  }\n\n  /**\n   * Getter for street_address\n   * @return {string}\n   */\n  get street_address(): string {\n    return this._street_address;\n  }\n\n  /**\n   * Setter for _street_address. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} street_address\n   */\n  set street_address(street_address: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.street_address\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._street_address = street_address;\n    }\n  }\n\n  /**\n   * Getter for telephone\n   * @return {string}\n   */\n  get telephone(): string {\n    return this._telephone;\n  }\n\n  /**\n   * Setter for _telephone. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} telephone\n   */\n  set telephone(telephone: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.telephone\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._telephone = telephone;\n    }\n  }\n\n  /**\n   * Getter for years_experience\n   * @return {string}\n   */\n  get years_experience(): string {\n    return this._years_experience;\n  }\n\n  /**\n   * Setter for _years_experience. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} years_experience\n   */\n  set years_experience(years_experience: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.years_experience\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._years_experience = years_experience;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_demographics object\n   * @return {\n   *      {\n   *        city: string,\n   *        class: string,\n   *        company: string,\n   *        country: string,\n   *        experience: string,\n   *        familiar_name: string,\n   *        instructor_name: string,\n   *        title: string,\n   *        native_language: string,\n   *        state: string,\n   *        street_address: string,\n   *        telephone: string,\n   *        years_experience: string\n   *      }\n   *    }\n   */\n  toJSON(): {\n    city: string;\n    class: string;\n    company: string;\n    country: string;\n    experience: string;\n    familiar_name: string;\n    instructor_name: string;\n    title: string;\n    native_language: string;\n    state: string;\n    street_address: string;\n    telephone: string;\n    years_experience: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      city: this.city,\n      class: this.class,\n      company: this.company,\n      country: this.country,\n      experience: this.experience,\n      familiar_name: this.familiar_name,\n      instructor_name: this.instructor_name,\n      title: this.title,\n      native_language: this.native_language,\n      state: this.state,\n      street_address: this.street_address,\n      telephone: this.telephone,\n      years_experience: this.years_experience,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { checkAICCValidFormat } from \"./validation\";\n\n/**\n * Class representing the AICC cmi.student_data.tries object\n */\nexport class CMITries extends CMIArray {\n  /**\n   * Constructor for inline Tries Array class\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.student_data.tries\",\n      children: aicc_constants.tries_children,\n    });\n  }\n}\n\n/**\n * Class for AICC Tries\n */\nexport class CMITriesObject extends BaseCMI {\n  private _status = \"\";\n  private _time = \"\";\n\n  /**\n   * Constructor for AICC Tries object\n   */\n  constructor() {\n    super(\"cmi.student_data.tries.n\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.student_data.tries.n.score\",\n      score_children: aicc_constants.score_children,\n      score_range: aicc_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE,\n      errorClass: AICCValidationError,\n    });\n  }\n\n  public score: CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._status = \"\";\n    this._time = \"\";\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for _status\n   * @return {string}\n   */\n  get status(): string {\n    return this._status;\n  }\n\n  /**\n   * Setter for _status\n   * @param {string} status\n   */\n  set status(status: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".status\", status, aicc_regex.CMIStatus2)) {\n      this._status = status;\n    }\n  }\n\n  /**\n   * Getter for _time\n   * @return {string}\n   */\n  get time(): string {\n    return this._time;\n  }\n\n  /**\n   * Setter for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".time\", time, aicc_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data.tries.n object\n   * @return {\n   *    {\n   *      status: string,\n   *      time: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    status: string;\n    time: string;\n    score: CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      status: this.status,\n      time: this.time,\n      score: this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { CMIArray } from \"../common/array\";\n\n/**\n * Class for cmi.student_data.attempt_records array\n */\nexport class CMIAttemptRecords extends CMIArray {\n  /**\n   * Constructor for inline Tries Array class\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.student_data.attempt_records\",\n      children: aicc_constants.attempt_records_children,\n    });\n  }\n}\n\n/**\n * Class for AICC Attempt Records\n */\nexport class CMIAttemptRecordsObject extends BaseCMI {\n  private _lesson_status = \"\";\n\n  /**\n   * Constructor for AICC Attempt Records object\n   */\n  constructor() {\n    super(\"cmi.student_data.attempt_records.n\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.student_data.attempt_records.n.score\",\n      score_children: aicc_constants.score_children,\n      score_range: aicc_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE,\n      errorClass: AICCValidationError,\n    });\n  }\n\n  public score: CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n\n    this._lesson_status = \"\";\n    this.score?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for _lesson_status\n   * @return {string}\n   */\n  get lesson_status(): string {\n    return this._lesson_status;\n  }\n\n  /**\n   * Setter for _lesson_status\n   * @param {string} lesson_status\n   */\n  set lesson_status(lesson_status: string) {\n    if (\n      checkAICCValidFormat(\n        this._cmi_element + \".lesson_status\",\n        lesson_status,\n        aicc_regex.CMIStatus2,\n      )\n    ) {\n      this._lesson_status = lesson_status;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data.attempt_records.n object\n   * @return {\n   *    {\n   *         lesson_status: string,\n   *         score: CMIScore\n   *     }\n   *  }\n   */\n  toJSON(): {\n    lesson_status: string;\n    score: CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      lesson_status: this.lesson_status,\n      score: this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { CMITries } from \"./tries\";\nimport { CMIStudentData } from \"../scorm12/student_data\";\nimport { CMIAttemptRecords } from \"./attempts\";\n\n/**\n * StudentData class for AICC\n */\nexport class AICCCMIStudentData extends CMIStudentData {\n  /**\n   * Constructor for AICC StudentData object\n   */\n  constructor() {\n    super(aicc_constants.student_data_children);\n    this.tries = new CMITries();\n    this.attempt_records = new CMIAttemptRecords();\n  }\n\n  public tries: CMITries;\n  public attempt_records: CMIAttemptRecords;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.tries?.initialize();\n    this.attempt_records?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n    this.tries?.reset(true);\n    this.attempt_records?.reset(true);\n  }\n\n  private _tries_during_lesson = \"\";\n\n  /**\n   * Getter for tries_during_lesson\n   * @return {string}\n   */\n  get tries_during_lesson(): string {\n    return this._tries_during_lesson;\n  }\n\n  /**\n   * Setter for _tries_during_lesson. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} tries_during_lesson\n   */\n  set tries_during_lesson(tries_during_lesson: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_data.tries_during_lesson\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._tries_during_lesson = tries_during_lesson;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data object\n   * @return {\n   *    {\n   *      mastery_score: string,\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      tries: CMITries,\n   *      attempt_records: CMIAttemptRecords\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    mastery_score: string;\n    max_time_allowed: string;\n    time_limit_action: string;\n    tries: CMITries;\n    attempt_records: CMIAttemptRecords;\n  } {\n    this.jsonString = true;\n    const result = {\n      mastery_score: this.mastery_score,\n      max_time_allowed: this.max_time_allowed,\n      time_limit_action: this.time_limit_action,\n      tries: this.tries,\n      attempt_records: this.attempt_records,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { CMIArray } from \"../common/array\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { aicc_constants } from \"../../constants/api_constants\";\n\n/**\n * Class representing the AICC `cmi.paths` object\n */\nexport class CMIPaths extends CMIArray {\n  /**\n   * Constructor for inline Paths Array class\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.paths\",\n      children: aicc_constants.paths_children,\n    });\n  }\n}\n\n/**\n * Class for AICC Paths\n */\nexport class CMIPathsObject extends BaseCMI {\n  private _location_id = \"\";\n  private _date = \"\";\n  private _time = \"\";\n  private _status = \"\";\n  private _why_left = \"\";\n  private _time_in_element = \"\";\n\n  /**\n   * Constructor for AICC Paths objects\n   */\n  constructor() {\n    super(\"cmi.paths.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._location_id = \"\";\n    this._date = \"\";\n    this._time = \"\";\n    this._status = \"\";\n    this._why_left = \"\";\n    this._time_in_element = \"\";\n  }\n\n  /**\n   * Getter for _location_id\n   * @return {string}\n   */\n  get location_id(): string {\n    return this._location_id;\n  }\n\n  /**\n   * Setter for _location_id\n   * @param {string} location_id\n   */\n  set location_id(location_id: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".location_id\", location_id, aicc_regex.CMIString256)\n    ) {\n      this._location_id = location_id;\n    }\n  }\n\n  /**\n   * Getter for _date\n   * @return {string}\n   */\n  get date(): string {\n    return this._date;\n  }\n\n  /**\n   * Setter for _date\n   * @param {string} date\n   */\n  set date(date: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".date\", date, aicc_regex.CMIString256)) {\n      this._date = date;\n    }\n  }\n\n  /**\n   * Getter for _time\n   * @return {string}\n   */\n  get time(): string {\n    return this._time;\n  }\n\n  /**\n   * Setter for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".time\", time, aicc_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * Getter for _status\n   * @return {string}\n   */\n  get status(): string {\n    return this._status;\n  }\n\n  /**\n   * Setter for _status\n   * @param {string} status\n   */\n  set status(status: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".status\", status, aicc_regex.CMIStatus2)) {\n      this._status = status;\n    }\n  }\n\n  /**\n   * Getter for _why_left\n   * @return {string}\n   */\n  get why_left(): string {\n    return this._why_left;\n  }\n\n  /**\n   * Setter for _why_left\n   * @param {string} why_left\n   */\n  set why_left(why_left: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".why_left\", why_left, aicc_regex.CMIString256)) {\n      this._why_left = why_left;\n    }\n  }\n\n  /**\n   * Getter for _time_in_element\n   * @return {string}\n   */\n  get time_in_element(): string {\n    return this._time_in_element;\n  }\n\n  /**\n   * Setter for _time_in_element\n   * @param {string} time_in_element\n   */\n  set time_in_element(time_in_element: string) {\n    if (\n      checkAICCValidFormat(\n        this._cmi_element + \".time_in_element\",\n        time_in_element,\n        aicc_regex.CMITime,\n      )\n    ) {\n      this._time_in_element = time_in_element;\n    }\n  }\n\n  /**\n   * toJSON for cmi.paths.n object\n   * @return {\n   *    {\n   *      location_id: string,\n   *      date: string,\n   *      time: string,\n   *      status: string,\n   *      why_left: string,\n   *      time_in_element: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    location_id: string;\n    date: string;\n    time: string;\n    status: string;\n    why_left: string;\n    time_in_element: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      location_id: this.location_id,\n      date: this.date,\n      time: this.time,\n      status: this.status,\n      why_left: this.why_left,\n      time_in_element: this.time_in_element,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import * as Scorm12CMI from \"../scorm12/cmi\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { CMIEvaluation } from \"./evaluation\";\nimport { AICCStudentPreferences } from \"./student_preferences\";\nimport { CMIStudentDemographics } from \"./student_demographics\";\nimport { AICCCMIStudentData } from \"./student_data\";\nimport { CMIPaths } from \"./paths\";\nimport { CMICore } from \"./core\";\nimport { CMIObjectives } from \"../scorm12/objectives\";\nimport { CMIStudentData } from \"../scorm12/student_data\";\nimport { CMIStudentPreference } from \"../scorm12/student_preference\";\nimport { CMIInteractions } from \"../scorm12/interactions\";\n\n/**\n * CMI Class for AICC\n */\nexport class CMI extends Scorm12CMI.CMI {\n  /**\n   * Constructor for AICC CMI object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean = false) {\n    super(aicc_constants.cmi_children);\n    if (initialized) this.initialize();\n    this.student_preference = new AICCStudentPreferences();\n    this.student_data = new AICCCMIStudentData();\n    this.student_demographics = new CMIStudentDemographics();\n    this.evaluation = new CMIEvaluation();\n    this.paths = new CMIPaths();\n  }\n\n  public override student_data: AICCCMIStudentData;\n  public override student_preference: AICCStudentPreferences;\n  public student_demographics: CMIStudentDemographics;\n  public evaluation: CMIEvaluation;\n  public paths: CMIPaths;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.student_preference?.initialize();\n    this.student_data?.initialize();\n    this.student_demographics?.initialize();\n    this.evaluation?.initialize();\n    this.paths?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions,\n   *      paths: CMIPaths\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    suspend_data: string;\n    launch_data: string;\n    comments: string;\n    comments_from_lms: string;\n    core: CMICore;\n    objectives: CMIObjectives;\n    student_data: CMIStudentData;\n    student_preference: CMIStudentPreference;\n    student_demographics: CMIStudentDemographics;\n    interactions: CMIInteractions;\n    evaluation: CMIEvaluation;\n    paths: CMIPaths;\n  } {\n    this.jsonString = true;\n    const result = {\n      suspend_data: this.suspend_data,\n      launch_data: this.launch_data,\n      comments: this.comments,\n      comments_from_lms: this.comments_from_lms,\n      core: this.core,\n      objectives: this.objectives,\n      student_data: this.student_data,\n      student_preference: this.student_preference,\n      student_demographics: this.student_demographics,\n      interactions: this.interactions,\n      evaluation: this.evaluation,\n      paths: this.paths,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import Scorm12API from \"./Scorm12API\";\nimport { CMI } from \"./cmi/aicc/cmi\";\n\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport { CMITriesObject } from \"./cmi/aicc/tries\";\nimport { CMIAttemptRecordsObject } from \"./cmi/aicc/attempts\";\nimport { CMIEvaluationCommentsObject } from \"./cmi/aicc/evaluation\";\nimport { NAV } from \"./cmi/scorm12/nav\";\nimport { CMIPathsObject } from \"./cmi/aicc/paths\";\nimport { Settings } from \"./types/api_types\";\nimport { stringMatches } from \"./utilities\";\n\n/**\n * The AICC API class\n */\nclass AICC extends Scorm12API {\n  /**\n   * Constructor to create AICC API object\n   * @param {Settings} settings\n   */\n  constructor(settings?: Settings) {\n    super(settings);\n\n    this.cmi = new CMI();\n    this.nav = new NAV();\n  }\n\n  override cmi: CMI;\n  override nav: NAV;\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI | null}\n   */\n  override getChildElement(\n    CMIElement: string,\n    value: any,\n    foundFirstIndex: boolean,\n  ): BaseCMI | null {\n    let newChild = super.getChildElement(CMIElement, value, foundFirstIndex);\n\n    if (!newChild) {\n      if (stringMatches(CMIElement, \"cmi\\\\.evaluation\\\\.comments\\\\.\\\\d+\")) {\n        newChild = new CMIEvaluationCommentsObject();\n      } else if (stringMatches(CMIElement, \"cmi\\\\.student_data\\\\.tries\\\\.\\\\d+\")) {\n        newChild = new CMITriesObject();\n      } else if (stringMatches(CMIElement, \"cmi\\\\.student_data\\\\.attempt_records\\\\.\\\\d+\")) {\n        newChild = new CMIAttemptRecordsObject();\n      } else if (stringMatches(CMIElement, \"cmi\\\\.paths\\\\.\\\\d+\")) {\n        newChild = new CMIPathsObject();\n      }\n    }\n\n    return newChild;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {AICC} newAPI\n   */\n  override replaceWithAnotherScormAPI(newAPI: AICC) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.nav = newAPI.nav;\n  }\n}\n\nexport default AICC;\n","import { ValidationError } from \"../exceptions\";\nimport { scorm2004_constants } from \"../constants/api_constants\";\n\nconst scorm2004_errors = scorm2004_constants.error_descriptions;\n\n/**\n * SCORM 2004 Validation Error\n */\nexport class Scorm2004ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm2004_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm2004_errors[String(errorCode)].basicMessage,\n        scorm2004_errors[String(errorCode)].detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm2004_errors[\"101\"].basicMessage,\n        scorm2004_errors[\"101\"].detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm2004ValidationError.prototype);\n  }\n}\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check2004ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm2004_errors.TYPE_MISMATCH,\n    Scorm2004ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @return {boolean}\n */\nexport function check2004ValidRange(\n  CMIElement: string,\n  value: string,\n  rangePattern: string,\n): boolean {\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm2004_errors.VALUE_OUT_OF_RANGE,\n    Scorm2004ValidationError,\n  );\n}\n","/**\n * Class for SCORM 2004's cmi.learner_preference object\n */\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\n\nexport class CMILearnerPreference extends BaseCMI {\n  private __children = scorm2004_constants.student_preference_children;\n  private _audio_level = \"1\";\n  private _language = \"\";\n  private _delivery_speed = \"1\";\n  private _audio_captioning = \"0\";\n\n  /**\n   * Constructor for cmi.learner_preference\n   */\n  constructor() {\n    super(\"cmi.learner_preference\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._children\",\n      scorm2004_errors.READ_ONLY_ELEMENT,\n    );\n  }\n\n  /**\n   * Getter for _audio_level\n   * @return {string}\n   */\n  get audio_level(): string {\n    return this._audio_level;\n  }\n\n  /**\n   * Setter for _audio_level\n   * @param {string} audio_level\n   */\n  set audio_level(audio_level: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".audio_level\",\n        audio_level,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".audio_level\",\n        audio_level,\n        scorm2004_regex.audio_range,\n      )\n    ) {\n      this._audio_level = audio_level;\n    }\n  }\n\n  /**\n   * Getter for _language\n   * @return {string}\n   */\n  get language(): string {\n    return this._language;\n  }\n\n  /**\n   * Setter for _language\n   * @param {string} language\n   */\n  set language(language: string) {\n    if (check2004ValidFormat(this._cmi_element + \".language\", language, scorm2004_regex.CMILang)) {\n      this._language = language;\n    }\n  }\n\n  /**\n   * Getter for _delivery_speed\n   * @return {string}\n   */\n  get delivery_speed(): string {\n    return this._delivery_speed;\n  }\n\n  /**\n   * Setter for _delivery_speed\n   * @param {string} delivery_speed\n   */\n  set delivery_speed(delivery_speed: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".delivery_speed\",\n        delivery_speed,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".delivery_speed\",\n        delivery_speed,\n        scorm2004_regex.speed_range,\n      )\n    ) {\n      this._delivery_speed = delivery_speed;\n    }\n  }\n\n  /**\n   * Getter for _audio_captioning\n   * @return {string}\n   */\n  get audio_captioning(): string {\n    return this._audio_captioning;\n  }\n\n  /**\n   * Setter for _audio_captioning\n   * @param {string} audio_captioning\n   */\n  set audio_captioning(audio_captioning: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".audio_captioning\",\n        audio_captioning,\n        scorm2004_regex.CMISInteger,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".audio_captioning\",\n        audio_captioning,\n        scorm2004_regex.text_range,\n      )\n    ) {\n      this._audio_captioning = audio_captioning;\n    }\n  }\n\n  /**\n   * toJSON for cmi.learner_preference\n   *\n   * @return {\n   *    {\n   *      audio_level: string,\n   *      language: string,\n   *      delivery_speed: string,\n   *      audio_captioning: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    audio_level: string;\n    language: string;\n    delivery_speed: string;\n    audio_captioning: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio_level: this.audio_level,\n      language: this.language,\n      delivery_speed: this.delivery_speed,\n      audio_captioning: this.audio_captioning,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { scorm2004_regex } from \"./regex\";\n\nexport const LearnerResponses: Responses = {\n  \"true-false\": {\n    format: \"^true$|^false$\",\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  choice: {\n    format: scorm2004_regex.CMILongIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    unique: true,\n  },\n  \"fill-in\": {\n    format: scorm2004_regex.CMILangString250,\n    max: 10,\n    delimiter: \"[,]\",\n    unique: false,\n  },\n  \"long-fill-in\": {\n    format: scorm2004_regex.CMILangString4000,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  matching: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n  },\n  performance: {\n    format: \"^$|\" + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + \"|^$|\" + scorm2004_regex.CMIShortIdentifier,\n    max: 250,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n  },\n  sequencing: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    unique: false,\n  },\n  likert: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  numeric: {\n    format: scorm2004_regex.CMIDecimal,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  other: {\n    format: scorm2004_regex.CMIString4000,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n};\nexport const CorrectResponses: Responses = {\n  \"true-false\": {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: \"^true$|^false$\",\n    limit: 1,\n  },\n  choice: {\n    max: 36,\n    delimiter: \"[,]\",\n    unique: true,\n    duplicate: false,\n    format: scorm2004_regex.CMILongIdentifier,\n  },\n  \"fill-in\": {\n    max: 10,\n    delimiter: \"[,]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMILangString250cr,\n  },\n  \"long-fill-in\": {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: true,\n    format: scorm2004_regex.CMILangString4000,\n  },\n  matching: {\n    max: 36,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n  },\n  performance: {\n    max: 250,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    delimiter3: \"[:]\",\n    unique: false,\n    duplicate: false,\n    format: \"^$|\" + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + \"|^$|\" + scorm2004_regex.CMIShortIdentifier,\n  },\n  sequencing: {\n    max: 36,\n    delimiter: \"[,]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n  },\n  likert: {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    limit: 1,\n  },\n  numeric: {\n    max: 2,\n    delimiter: \"[:]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIDecimal,\n    limit: 1,\n  },\n  other: {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIString4000,\n    limit: 1,\n  },\n};\n\nexport type ResponseType = {\n  format: string;\n  max: number;\n  delimiter: string;\n  unique: boolean;\n  duplicate?: boolean;\n  format2?: string;\n  delimiter2?: string;\n  limit?: number;\n  delimiter3?: string;\n};\n\nexport type Responses = {\n  [key: string]: ResponseType;\n};\n","/**\n * Class representing SCORM 2004's `cmi.interactions` object\n */\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { CMIArray } from \"../common/array\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { CorrectResponses, LearnerResponses } from \"../../constants/response_constants\";\n\nexport class CMIInteractions extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives` Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.interactions\",\n      children: scorm2004_constants.interactions_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.interaction.n object\n */\n\nexport class CMIInteractionsObject extends BaseCMI {\n  private _id = \"\";\n  private _type = \"\";\n  private _timestamp = \"\";\n  private _weighting = \"\";\n  private _learner_response = \"\";\n  private _result = \"\";\n  private _latency = \"\";\n  private _description = \"\";\n\n  /**\n   * Constructor for cmi.interaction.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n\");\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.n.correct_responses\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  public objectives: CMIArray;\n  public correct_responses: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._id = \"\";\n    this._type = \"\";\n    this._timestamp = \"\";\n    this._weighting = \"\";\n    this._learner_response = \"\";\n    this._result = \"\";\n    this._latency = \"\";\n    this._description = \"\";\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.n.correct_responses\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _type\n   * @return {string}\n   */\n  get type(): string {\n    return this._type;\n  }\n\n  /**\n   * Setter for _type\n   * @param {string} type\n   */\n  set type(type: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".type\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (check2004ValidFormat(this._cmi_element + \".type\", type, scorm2004_regex.CMIType)) {\n        this._type = type;\n      }\n    }\n  }\n\n  /**\n   * Getter for _timestamp\n   * @return {string}\n   */\n  get timestamp(): string {\n    return this._timestamp;\n  }\n\n  /**\n   * Setter for _timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".timestamp\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".timestamp\", timestamp, scorm2004_regex.CMITime)\n      ) {\n        this._timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * Getter for _weighting\n   * @return {string}\n   */\n  get weighting(): string {\n    return this._weighting;\n  }\n\n  /**\n   * Setter for _weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".weighting\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".weighting\",\n          weighting,\n          scorm2004_regex.CMIDecimal,\n        )\n      ) {\n        this._weighting = weighting;\n      }\n    }\n  }\n\n  /**\n   * Getter for _learner_response\n   * @return {string}\n   */\n  get learner_response(): string {\n    return this._learner_response;\n  }\n\n  /**\n   * Setter for _learner_response. Does type validation to make sure response\n   * matches SCORM 2004's spec\n   * @param {string} learner_response\n   */\n  set learner_response(learner_response: string) {\n    if (this.initialized && (this._type === \"\" || this._id === \"\")) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_response\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      let nodes = [];\n      const response_type = LearnerResponses[this.type];\n\n      if (response_type) {\n        if (response_type?.delimiter) {\n          // Convert regex-style delimiter to actual character\n          const delimiter = response_type.delimiter === \"[,]\" ? \",\" : response_type.delimiter;\n          nodes = learner_response.split(delimiter);\n        } else {\n          nodes[0] = learner_response;\n        }\n\n        if (nodes.length > 0 && nodes.length <= response_type.max) {\n          const formatRegex = new RegExp(response_type.format);\n\n          for (let i = 0; i < nodes.length; i++) {\n            if (response_type?.delimiter2) {\n              // Convert regex-style delimiter to actual character\n              const delimiter2 =\n                response_type.delimiter2 === \"[.]\" ? \".\" : response_type.delimiter2;\n              const values = nodes[i].split(delimiter2);\n\n              if (values.length === 2) {\n                if (!values[0].match(formatRegex)) {\n                  throw new Scorm2004ValidationError(\n                    this._cmi_element + \".learner_response\",\n                    scorm2004_errors.TYPE_MISMATCH,\n                  );\n                } else {\n                  if (\n                    !response_type.format2 ||\n                    !values[1].match(new RegExp(response_type.format2))\n                  ) {\n                    throw new Scorm2004ValidationError(\n                      this._cmi_element + \".learner_response\",\n                      scorm2004_errors.TYPE_MISMATCH,\n                    );\n                  }\n                }\n              } else {\n                throw new Scorm2004ValidationError(\n                  this._cmi_element + \".learner_response\",\n                  scorm2004_errors.TYPE_MISMATCH,\n                );\n              }\n            } else {\n              if (!nodes[i].match(formatRegex)) {\n                throw new Scorm2004ValidationError(\n                  this._cmi_element + \".learner_response\",\n                  scorm2004_errors.TYPE_MISMATCH,\n                );\n              } else {\n                if (nodes[i] !== \"\" && response_type.unique) {\n                  for (let j = 0; j < i; j++) {\n                    if (nodes[i] === nodes[j]) {\n                      throw new Scorm2004ValidationError(\n                        this._cmi_element + \".learner_response\",\n                        scorm2004_errors.TYPE_MISMATCH,\n                      );\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          throw new Scorm2004ValidationError(\n            this._cmi_element + \".learner_response\",\n            scorm2004_errors.GENERAL_SET_FAILURE,\n          );\n        }\n\n        this._learner_response = learner_response;\n      } else {\n        throw new Scorm2004ValidationError(\n          this._cmi_element + \".learner_response\",\n          scorm2004_errors.TYPE_MISMATCH,\n        );\n      }\n    }\n  }\n\n  /**\n   * Getter for _result\n   * @return {string}\n   */\n  get result(): string {\n    return this._result;\n  }\n\n  /**\n   * Setter for _result\n   * @param {string} result\n   */\n  set result(result: string) {\n    if (check2004ValidFormat(this._cmi_element + \".result\", result, scorm2004_regex.CMIResult)) {\n      this._result = result;\n    }\n  }\n\n  /**\n   * Getter for _latency\n   * @return {string}\n   */\n  get latency(): string {\n    return this._latency;\n  }\n\n  /**\n   * Setter for _latency\n   * @param {string} latency\n   */\n  set latency(latency: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".latency\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".latency\", latency, scorm2004_regex.CMITimespan)\n      ) {\n        this._latency = latency;\n      }\n    }\n  }\n\n  /**\n   * Getter for _description\n   * @return {string}\n   */\n  get description(): string {\n    return this._description;\n  }\n\n  /**\n   * Setter for _description\n   * @param {string} description\n   */\n  set description(description: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".description\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".description\",\n          description,\n          scorm2004_regex.CMILangString250,\n          true,\n        )\n      ) {\n        this._description = description;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      type: string,\n   *      objectives: CMIArray,\n   *      timestamp: string,\n   *      correct_responses: CMIArray,\n   *      weighting: string,\n   *      learner_response: string,\n   *      result: string,\n   *      latency: string,\n   *      description: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    type: string;\n    objectives: CMIArray;\n    timestamp: string;\n    correct_responses: CMIArray;\n    weighting: string;\n    learner_response: string;\n    result: string;\n    latency: string;\n    description: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      type: this.type,\n      objectives: this.objectives,\n      timestamp: this.timestamp,\n      weighting: this.weighting,\n      learner_response: this.learner_response,\n      result: this.result,\n      latency: this.latency,\n      description: this.description,\n      correct_responses: this.correct_responses,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.objectives.n object\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  private _id = \"\";\n\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n.objectives.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._id = \"\";\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.correct_responses.n object\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  private _pattern = \"\";\n  private _parent?: CMIInteractionsObject;\n\n  /**\n   * Constructor for cmi.interactions.n.correct_responses.n\n   * @param {CMIInteractionsObject} parent - The parent interaction object\n   */\n  constructor(parent?: CMIInteractionsObject) {\n    super(\"cmi.interactions.n.correct_responses.n\");\n    this._parent = parent;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._pattern = \"\";\n  }\n\n  /**\n   * Getter for _pattern\n   * @return {string}\n   */\n  get pattern(): string {\n    return this._pattern;\n  }\n\n  /**\n   * Setter for _pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern: string) {\n    // First do basic format validation\n    if (\n      check2004ValidFormat(this._cmi_element + \".pattern\", pattern, scorm2004_regex.CMIFeedback)\n    ) {\n      // If we have a parent interaction, validate the pattern against the interaction type\n      if (this._parent && this._parent.type) {\n        const interactionType = this._parent.type;\n        const response = CorrectResponses[interactionType];\n\n        if (response) {\n          // Validate the pattern against the interaction type\n          let isValid = true;\n          let nodes = [];\n\n          if (response?.delimiter) {\n            nodes = String(pattern).split(response.delimiter);\n          } else {\n            nodes[0] = pattern;\n          }\n\n          if (nodes.length > 0 && nodes.length <= response.max) {\n            const formatRegex = new RegExp(response.format);\n\n            for (let i = 0; i < nodes.length && isValid; i++) {\n              if (response?.delimiter2) {\n                const values = nodes[i].split(response.delimiter2);\n                if (values.length === 2) {\n                  const matches = values[0].match(formatRegex);\n                  if (!matches) {\n                    isValid = false;\n                  } else if (!response.format2 || !values[1].match(new RegExp(response.format2))) {\n                    isValid = false;\n                  }\n                } else {\n                  isValid = false;\n                }\n              } else {\n                const matches = nodes[i].match(formatRegex);\n                if (\n                  (!matches && pattern !== \"\") ||\n                  (!matches && interactionType === \"true-false\")\n                ) {\n                  isValid = false;\n                }\n              }\n            }\n          } else if (nodes.length > response.max) {\n            isValid = false;\n          }\n\n          if (!isValid) {\n            throw new Scorm2004ValidationError(\n              this._cmi_element + \".pattern\",\n              scorm2004_errors.TYPE_MISMATCH,\n            );\n          }\n        }\n      }\n\n      this._pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON cmi.interactions.n.correct_responses.n object\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    pattern: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      pattern: this.pattern,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","/**\n * Class for SCORM 2004's cmi *.score object\n */\nimport { CMIScore } from \"../common/score\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\n\nexport class Scorm2004CMIScore extends CMIScore {\n  private _scaled = \"\";\n\n  /**\n   * Constructor for cmi *.score\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.score\",\n      score_children: scorm2004_constants.score_children,\n      max: \"\",\n      invalidErrorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      invalidTypeCode: scorm2004_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm2004_errors.VALUE_OUT_OF_RANGE,\n      decimalRegex: scorm2004_regex.CMIDecimal,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n    this._scaled = \"\";\n    this._raw = \"\";\n    this._min = \"\";\n    this._max = \"\";\n  }\n\n  /**\n   * Getter for _scaled\n   * @return {string}\n   */\n  get scaled(): string {\n    return this._scaled;\n  }\n\n  /**\n   * Setter for _scaled\n   * @param {string} scaled\n   */\n  set scaled(scaled: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".scaled\", scaled, scorm2004_regex.CMIDecimal) &&\n      check2004ValidRange(this._cmi_element + \".scaled\", scaled, scorm2004_regex.scaled_range)\n    ) {\n      this._scaled = scaled;\n    }\n  }\n\n  /**\n   * toJSON for cmi *.score\n   *\n   * @return {\n   *    {\n   *      scaled: string,\n   *      raw: string,\n   *      min: string,\n   *      max: string\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    scaled: string;\n    raw: string;\n    min: string;\n    max: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      scaled: this.scaled,\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_lms object\n * @extends CMIArray\n */\nexport class CMICommentsFromLMS extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_lms Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.comments_from_lms\",\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner object\n */\n\nexport class CMICommentsFromLearner extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_learner Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.comments_from_learner\",\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner.n and cmi.comments_from_lms.n object\n */\n\nexport class CMICommentsObject extends BaseCMI {\n  private _comment = \"\";\n  private _location = \"\";\n  private _timestamp = \"\";\n  private readonly _readOnlyAfterInit: boolean;\n\n  /**\n   * Constructor for cmi.comments_from_learner.n and cmi.comments_from_lms.n\n   * @param {boolean} readOnlyAfterInit\n   */\n  constructor(readOnlyAfterInit: boolean = false) {\n    super(\"cmi.comments_from_learner.n\");\n    this._comment = \"\";\n    this._location = \"\";\n    this._timestamp = \"\";\n    this._readOnlyAfterInit = readOnlyAfterInit;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _comment\n   * @return {string}\n   */\n  get comment(): string {\n    return this._comment;\n  }\n\n  /**\n   * Setter for _comment\n   * @param {string} comment\n   */\n  set comment(comment: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".comment\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".comment\",\n          comment,\n          scorm2004_regex.CMILangString4000,\n          true,\n        )\n      ) {\n        this._comment = comment;\n      }\n    }\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".location\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".location\",\n          location,\n          scorm2004_regex.CMIString250,\n        )\n      ) {\n        this._location = location;\n      }\n    }\n  }\n\n  /**\n   * Getter for _timestamp\n   * @return {string}\n   */\n  get timestamp(): string {\n    return this._timestamp;\n  }\n\n  /**\n   * Setter for _timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".timestamp\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".timestamp\", timestamp, scorm2004_regex.CMITime)\n      ) {\n        this._timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.comments_from_learner.n object\n   * @return {\n   *    {\n   *      comment: string,\n   *      location: string,\n   *      timestamp: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    comment: string;\n    location: string;\n    timestamp: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      comment: this.comment,\n      location: this.location,\n      timestamp: this.timestamp,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { Scorm2004CMIScore } from \"./score\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\n\n/**\n * Class representing SCORM 2004's `cmi.objectives` object\n * @extends CMIArray\n */\nexport class CMIObjectives extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives` Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.objectives\",\n      children: scorm2004_constants.objectives_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n\n  /**\n   * Find an objective by its ID\n   */\n  public findObjectiveById(id: string): CMIObjectivesObject | undefined {\n    return this.childArray.find((objective) => objective.id === id);\n  }\n\n  /**\n   * Find objective by its index\n   */\n  public findObjectiveByIndex(index: number): CMIObjectivesObject {\n    return this.childArray[index];\n  }\n\n  /**\n   * Set an objective at the given index\n   */\n  public setObjectiveByIndex(index: number, objective: CMIObjectivesObject) {\n    this.childArray[index] = objective;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.objectives.n object\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  private _id = \"\";\n  private _success_status = \"unknown\";\n  private _completion_status = \"unknown\";\n  private _progress_measure = \"\";\n  private _description = \"\";\n\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super(\"cmi.objectives.n\");\n    this.score = new Scorm2004CMIScore();\n  }\n\n  override reset() {\n    this._initialized = false;\n  }\n\n  public score: Scorm2004CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this._success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".success_status\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".success_status\",\n          success_status,\n          scorm2004_regex.CMISStatus,\n        )\n      ) {\n        this._success_status = success_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this._completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".completion_status\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".completion_status\",\n          completion_status,\n          scorm2004_regex.CMICStatus,\n        )\n      ) {\n        this._completion_status = completion_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this._progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".progress_measure\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".progress_measure\",\n          progress_measure,\n          scorm2004_regex.CMIDecimal,\n        ) &&\n        check2004ValidRange(\n          this._cmi_element + \".progress_measure\",\n          progress_measure,\n          scorm2004_regex.progress_range,\n        )\n      ) {\n        this._progress_measure = progress_measure;\n      }\n    }\n  }\n\n  /**\n   * Getter for _description\n   * @return {string}\n   */\n  get description(): string {\n    return this._description;\n  }\n\n  /**\n   * Setter for _description\n   * @param {string} description\n   */\n  set description(description: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".description\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".description\",\n          description,\n          scorm2004_regex.CMILangString250,\n          true,\n        )\n      ) {\n        this._description = description;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      success_status: string,\n   *      completion_status: string,\n   *      progress_measure: string,\n   *      description: string,\n   *      score: Scorm2004CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    success_status: string;\n    completion_status: string;\n    progress_measure: string;\n    description: string;\n    score: Scorm2004CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      success_status: this.success_status,\n      completion_status: this.completion_status,\n      progress_measure: this.progress_measure,\n      description: this.description,\n      score: this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","/**\n * Class representing metadata properties for SCORM 2004's cmi object\n */\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing metadata properties for SCORM 2004's cmi object\n */\nexport class CMIMetadata extends BaseCMI {\n  private __version = \"1.0\";\n  private __children = scorm2004_constants.cmi_children;\n\n  /**\n   * Constructor for CMIMetadata\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   */\n  get _version(): string {\n    return this.__version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version: string) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._version\",\n      scorm2004_errors.READ_ONLY_ELEMENT,\n    );\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {number} _children\n   */\n  set _children(_children: number) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._children\",\n      scorm2004_errors.READ_ONLY_ELEMENT,\n    );\n  }\n\n  /**\n   * Reset the metadata properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // No need to reset __version and __children as they are constants\n  }\n}\n","/**\n * Class representing learner properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing learner properties for SCORM 2004's cmi object\n */\nexport class CMILearner extends BaseCMI {\n  private _learner_id = \"\";\n  private _learner_name = \"\";\n\n  /**\n   * Constructor for CMILearner\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _learner_id\n   * @return {string}\n   */\n  get learner_id(): string {\n    return this._learner_id;\n  }\n\n  /**\n   * Setter for _learner_id. Can only be called before initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_id\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._learner_id = learner_id;\n    }\n  }\n\n  /**\n   * Getter for _learner_name\n   * @return {string}\n   */\n  get learner_name(): string {\n    return this._learner_name;\n  }\n\n  /**\n   * Setter for _learner_name. Can only be called before initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_name\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._learner_name = learner_name;\n    }\n  }\n\n  /**\n   * Reset the learner properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset learner_id and learner_name as they are read-only after initialization\n  }\n}\n","/**\n * Class representing status properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\n\n/**\n * Class representing status properties for SCORM 2004's cmi object\n */\nexport class CMIStatus extends BaseCMI {\n  private _completion_status = \"unknown\";\n  private _success_status = \"unknown\";\n  private _progress_measure = \"\";\n\n  /**\n   * Constructor for CMIStatus\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this._completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".completion_status\",\n        completion_status,\n        scorm2004_regex.CMICStatus,\n      )\n    ) {\n      this._completion_status = completion_status;\n    }\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this._success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".success_status\",\n        success_status,\n        scorm2004_regex.CMISStatus,\n      )\n    ) {\n      this._success_status = success_status;\n    }\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this._progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".progress_measure\",\n        progress_measure,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".progress_measure\",\n        progress_measure,\n        scorm2004_regex.progress_range,\n      )\n    ) {\n      this._progress_measure = progress_measure;\n    }\n  }\n\n  /**\n   * Reset the status properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._completion_status = \"unknown\";\n    this._success_status = \"unknown\";\n    this._progress_measure = \"\";\n  }\n}\n","/**\n * Class representing session properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\nimport * as Util from \"../../utilities\";\n\n/**\n * Class representing session properties for SCORM 2004's cmi object\n */\nexport class CMISession extends BaseCMI {\n  private _entry = \"\";\n  private _exit = \"\";\n  private _session_time = \"PT0H0M0S\";\n  private _total_time = \"\";\n\n  /**\n   * Constructor for CMISession\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this._entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".entry\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._entry = entry;\n    }\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    if (!this.jsonString) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exit\",\n        scorm2004_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    if (check2004ValidFormat(this._cmi_element + \".exit\", exit, scorm2004_regex.CMIExit, true)) {\n      this._exit = exit;\n    }\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    if (!this.jsonString) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".session_time\",\n        scorm2004_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".session_time\",\n        session_time,\n        scorm2004_regex.CMITimespan,\n      )\n    ) {\n      this._session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this._total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".total_time\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._total_time = total_time;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime(): string {\n    let sessionTime = this._session_time;\n    const startTime = this.start_time;\n\n    if (typeof startTime !== \"undefined\" && startTime !== null) {\n      const seconds = new Date().getTime() - startTime;\n      sessionTime = Util.getSecondsAsISODuration(seconds / 1000);\n    }\n\n    return Util.addTwoDurations(this._total_time, sessionTime, scorm2004_regex.CMITimespan);\n  }\n\n  /**\n   * Reset the session properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._entry = \"\";\n    this._exit = \"\";\n    this._session_time = \"PT0H0M0S\";\n    // Don't reset total_time as it's read-only after initialization\n  }\n}\n","/**\n * Class representing content properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\n\n/**\n * Class representing content properties for SCORM 2004's cmi object\n */\nexport class CMIContent extends BaseCMI {\n  private _location = \"\";\n  private _launch_data = \"\";\n  private _suspend_data = \"\";\n\n  /**\n   * Constructor for CMIContent\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".location\", location, scorm2004_regex.CMIString1000)\n    ) {\n      this._location = location;\n    }\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this._launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".launch_data\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._launch_data = launch_data;\n    }\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this._suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".suspend_data\",\n        suspend_data,\n        scorm2004_regex.CMIString64000,\n        true,\n      )\n    ) {\n      this._suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Reset the content properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._location = \"\";\n    // Don't reset launch_data as it's read-only after initialization\n    this._suspend_data = \"\";\n  }\n}\n","/**\n * Class representing settings properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing settings properties for SCORM 2004's cmi object\n */\nexport class CMISettings extends BaseCMI {\n  private _credit = \"credit\";\n  private _mode = \"normal\";\n  private _time_limit_action = \"continue,no message\";\n  private _max_time_allowed = \"\";\n\n  /**\n   * Constructor for CMISettings\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this._credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".credit\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._credit = credit;\n    }\n  }\n\n  /**\n   * Getter for _mode\n   * @return {string}\n   */\n  get mode(): string {\n    return this._mode;\n  }\n\n  /**\n   * Setter for _mode. Can only be called before initialization.\n   * @param {string} mode\n   */\n  set mode(mode: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".mode\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._mode = mode;\n    }\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this._time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".time_limit_action\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._time_limit_action = time_limit_action;\n    }\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this._max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".max_time_allowed\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._max_time_allowed = max_time_allowed;\n    }\n  }\n\n  /**\n   * Reset the settings properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset these properties as they are read-only after initialization\n  }\n}\n","/**\n * Class representing threshold properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing threshold properties for SCORM 2004's cmi object\n */\nexport class CMIThresholds extends BaseCMI {\n  private _scaled_passing_score = \"\";\n  private _completion_threshold = \"\";\n\n  /**\n   * Constructor for CMIThresholds\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score(): string {\n    return this._scaled_passing_score;\n  }\n\n  /**\n   * Setter for _scaled_passing_score. Can only be called before initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".scaled_passing_score\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._scaled_passing_score = scaled_passing_score;\n    }\n  }\n\n  /**\n   * Getter for _completion_threshold\n   * @return {string}\n   */\n  get completion_threshold(): string {\n    return this._completion_threshold;\n  }\n\n  /**\n   * Setter for _completion_threshold. Can only be called before initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".completion_threshold\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._completion_threshold = completion_threshold;\n    }\n  }\n\n  /**\n   * Reset the threshold properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset these properties as they are read-only after initialization\n  }\n}\n","import { BaseRootCMI } from \"../common/base_cmi\";\nimport { CMILearnerPreference } from \"./learner_preference\";\nimport { CMIInteractions } from \"./interactions\";\nimport { Scorm2004CMIScore } from \"./score\";\nimport { CMICommentsFromLearner, CMICommentsFromLMS } from \"./comments\";\nimport { CMIObjectives } from \"./objectives\";\nimport { CMIMetadata } from \"./metadata\";\nimport { CMILearner } from \"./learner\";\nimport { CMIStatus } from \"./status\";\nimport { CMISession } from \"./session\";\nimport { CMIContent } from \"./content\";\nimport { CMISettings } from \"./settings\";\nimport { CMIThresholds } from \"./thresholds\";\n\n/**\n * Class representing cmi object for SCORM 2004\n */\nexport class CMI extends BaseRootCMI {\n  /**\n   * Constructor for the SCORM 2004 cmi object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean = false) {\n    super(\"cmi\");\n    this.metadata = new CMIMetadata();\n    this.learner = new CMILearner();\n    this.status = new CMIStatus();\n    this.session = new CMISession();\n    this.content = new CMIContent();\n    this.settings = new CMISettings();\n    this.thresholds = new CMIThresholds();\n    this.learner_preference = new CMILearnerPreference();\n    this.score = new Scorm2004CMIScore();\n    this.comments_from_learner = new CMICommentsFromLearner();\n    this.comments_from_lms = new CMICommentsFromLMS();\n    this.interactions = new CMIInteractions();\n    this.objectives = new CMIObjectives();\n    if (initialized) this.initialize();\n  }\n\n  // New component classes\n  private metadata: CMIMetadata;\n  private learner: CMILearner;\n  private status: CMIStatus;\n  private session: CMISession;\n  private content: CMIContent;\n  private settings: CMISettings;\n  private thresholds: CMIThresholds;\n\n  // Original complex objects\n  public learner_preference: CMILearnerPreference;\n  public score: Scorm2004CMIScore;\n  public comments_from_learner: CMICommentsFromLearner;\n  public comments_from_lms: CMICommentsFromLMS;\n  public interactions: CMIInteractions;\n  public objectives: CMIObjectives;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    // Initialize new component classes\n    this.metadata?.initialize();\n    this.learner?.initialize();\n    this.status?.initialize();\n    this.session?.initialize();\n    this.content?.initialize();\n    this.settings?.initialize();\n    this.thresholds?.initialize();\n\n    // Initialize original complex objects\n    this.learner_preference?.initialize();\n    this.score?.initialize();\n    this.comments_from_learner?.initialize();\n    this.comments_from_lms?.initialize();\n    this.interactions?.initialize();\n    this.objectives?.initialize();\n  }\n\n  /**\n   * Called when API is moving to another SCO\n   */\n  reset() {\n    this._initialized = false;\n\n    // Reset new component classes\n    this.metadata?.reset();\n    this.learner?.reset();\n    this.status?.reset();\n    this.session?.reset();\n    this.content?.reset();\n    this.settings?.reset();\n    this.thresholds?.reset();\n\n    // Reset original complex objects\n    this.objectives?.reset(false);\n    this.interactions?.reset(true);\n    this.score?.reset();\n    this.comments_from_learner?.reset();\n    this.comments_from_lms?.reset();\n    this.learner_preference?.reset();\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   * @private\n   */\n  get _version(): string {\n    return this.metadata._version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   * @private\n   */\n  set _version(_version: string) {\n    this.metadata._version = _version;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.metadata._children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {number} _children\n   * @private\n   */\n  set _children(_children: number) {\n    this.metadata._children = _children;\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this.status.completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    this.status.completion_status = completion_status;\n  }\n\n  /**\n   * Getter for _completion_threshold\n   * @return {string}\n   */\n  get completion_threshold(): string {\n    return this.thresholds.completion_threshold;\n  }\n\n  /**\n   * Setter for _completion_threshold. Can only be called before initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold: string) {\n    this.thresholds.completion_threshold = completion_threshold;\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this.settings.credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    this.settings.credit = credit;\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this.session.entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    this.session.entry = entry;\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    this.session.jsonString = this.jsonString;\n    return this.session.exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    this.session.exit = exit;\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this.content.launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    this.content.launch_data = launch_data;\n  }\n\n  /**\n   * Getter for _learner_id\n   * @return {string}\n   */\n  get learner_id(): string {\n    return this.learner.learner_id;\n  }\n\n  /**\n   * Setter for _learner_id. Can only be called before initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id: string) {\n    this.learner.learner_id = learner_id;\n  }\n\n  /**\n   * Getter for _learner_name\n   * @return {string}\n   */\n  get learner_name(): string {\n    return this.learner.learner_name;\n  }\n\n  /**\n   * Setter for _learner_name. Can only be called before initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name: string) {\n    this.learner.learner_name = learner_name;\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this.content.location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    this.content.location = location;\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this.settings.max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    this.settings.max_time_allowed = max_time_allowed;\n  }\n\n  /**\n   * Getter for _mode\n   * @return {string}\n   */\n  get mode(): string {\n    return this.settings.mode;\n  }\n\n  /**\n   * Setter for _mode. Can only be called before initialization.\n   * @param {string} mode\n   */\n  set mode(mode: string) {\n    this.settings.mode = mode;\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this.status.progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    this.status.progress_measure = progress_measure;\n  }\n\n  /**\n   * Getter for _scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score(): string {\n    return this.thresholds.scaled_passing_score;\n  }\n\n  /**\n   * Setter for _scaled_passing_score. Can only be called before initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score: string) {\n    this.thresholds.scaled_passing_score = scaled_passing_score;\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    this.session.jsonString = this.jsonString;\n    return this.session.session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    this.session.session_time = session_time;\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this.status.success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    this.status.success_status = success_status;\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this.content.suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    this.content.suspend_data = suspend_data;\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this.settings.time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    this.settings.time_limit_action = time_limit_action;\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this.session.total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    this.session.total_time = total_time;\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime(): string {\n    return this.session.getCurrentTotalTime();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      comments_from_learner: CMICommentsFromLearner,\n   *      comments_from_lms: CMICommentsFromLMS,\n   *      completion_status: string,\n   *      completion_threshold: string,\n   *      credit: string,\n   *      entry: string,\n   *      exit: string,\n   *      interactions: CMIInteractions,\n   *      launch_data: string,\n   *      learner_id: string,\n   *      learner_name: string,\n   *      learner_preference: CMILearnerPreference,\n   *      location: string,\n   *      max_time_allowed: string,\n   *      mode: string,\n   *      objectives: CMIObjectives,\n   *      progress_measure: string,\n   *      scaled_passing_score: string,\n   *      score: Scorm2004CMIScore,\n   *      session_time: string,\n   *      success_status: string,\n   *      suspend_data: string,\n   *      time_limit_action: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    comments_from_learner: CMICommentsFromLearner;\n    comments_from_lms: CMICommentsFromLMS;\n    completion_status: string;\n    completion_threshold: string;\n    credit: string;\n    entry: string;\n    exit: string;\n    interactions: CMIInteractions;\n    launch_data: string;\n    learner_id: string;\n    learner_name: string;\n    learner_preference: CMILearnerPreference;\n    location: string;\n    max_time_allowed: string;\n    mode: string;\n    objectives: CMIObjectives;\n    progress_measure: string;\n    scaled_passing_score: string;\n    score: Scorm2004CMIScore;\n    session_time: string;\n    success_status: string;\n    suspend_data: string;\n    time_limit_action: string;\n  } {\n    this.jsonString = true;\n\n    // Set jsonString flag on component classes that need it\n    this.session.jsonString = true;\n\n    const result = {\n      comments_from_learner: this.comments_from_learner,\n      comments_from_lms: this.comments_from_lms,\n      completion_status: this.completion_status,\n      completion_threshold: this.completion_threshold,\n      credit: this.credit,\n      entry: this.entry,\n      exit: this.exit,\n      interactions: this.interactions,\n      launch_data: this.launch_data,\n      learner_id: this.learner_id,\n      learner_name: this.learner_name,\n      learner_preference: this.learner_preference,\n      location: this.location,\n      max_time_allowed: this.max_time_allowed,\n      mode: this.mode,\n      objectives: this.objectives,\n      progress_measure: this.progress_measure,\n      scaled_passing_score: this.scaled_passing_score,\n      score: this.score,\n      session_time: this.session_time,\n      success_status: this.success_status,\n      suspend_data: this.suspend_data,\n      time_limit_action: this.time_limit_action,\n    };\n\n    // Clean up jsonString flags\n    delete this.jsonString;\n    delete this.session.jsonString;\n\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { NAVBoolean } from \"../../constants/enums\";\nimport { CMIArray } from \"../common/array\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Sequencing } from \"./sequencing/sequencing\";\n\n/**\n * Class representing SCORM 2004's adl object\n */\nexport class ADL extends BaseCMI {\n  /**\n   * Constructor for adl\n   */\n  constructor() {\n    super(\"adl\");\n    this.nav = new ADLNav();\n    this.data = new ADLData();\n  }\n\n  public nav: ADLNav;\n  public data = new ADLData();\n  private _sequencing: Sequencing | null = null;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.nav?.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this.nav?.reset();\n  }\n\n  /**\n   * Getter for sequencing\n   * @return {Sequencing | null}\n   */\n  get sequencing(): Sequencing | null {\n    return this._sequencing;\n  }\n\n  /**\n   * Setter for sequencing\n   * @param {Sequencing | null} sequencing\n   */\n  set sequencing(sequencing: Sequencing | null) {\n    this._sequencing = sequencing;\n    if (sequencing) {\n      sequencing.adlNav = this.nav;\n      this.nav.sequencing = sequencing;\n    }\n  }\n\n  /**\n   * toJSON for adl\n   * @return {\n   *    {\n   *      nav: ADLNav,\n   *      data: ADLData\n   *    }\n   *  }\n   */\n  toJSON(): {\n    nav: ADLNav;\n    data: ADLData;\n  } {\n    this.jsonString = true;\n    const result = {\n      nav: this.nav,\n      data: this.data,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's `adl.nav` object\n */\n\nexport class ADLNav extends BaseCMI {\n  private _request = \"_none_\";\n  private _sequencing: Sequencing | null = null;\n\n  /**\n   * Constructor for `adl.nav`\n   */\n  constructor() {\n    super(\"adl.nav\");\n    this.request_valid = new ADLNavRequestValid();\n  }\n\n  public request_valid: ADLNavRequestValid;\n\n  /**\n   * Getter for sequencing\n   * @return {Sequencing | null}\n   */\n  get sequencing(): Sequencing | null {\n    return this._sequencing;\n  }\n\n  /**\n   * Setter for sequencing\n   * @param {Sequencing | null} sequencing\n   */\n  set sequencing(sequencing: Sequencing | null) {\n    this._sequencing = sequencing;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.request_valid?.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._request = \"_none_\";\n    this._sequencing = null;\n    this.request_valid?.reset();\n  }\n\n  /**\n   * Getter for _request\n   * @return {string}\n   */\n  get request(): string {\n    return this._request;\n  }\n\n  /**\n   * Setter for _request\n   * @param {string} request\n   */\n  set request(request: string) {\n    if (check2004ValidFormat(this._cmi_element + \".request\", request, scorm2004_regex.NAVEvent)) {\n      // Only process if the request is different from the current request\n      if (this._request !== request) {\n        this._request = request;\n\n        // Process the navigation request using the sequencing implementation\n        if (this._sequencing) {\n          this._sequencing.processNavigationRequest(request);\n        }\n      }\n    }\n  }\n\n  /**\n   * toJSON for adl.nav\n   *\n   * @return {\n   *    {\n   *      request: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    request: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      request: this.request,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's `adl.data` object\n */\nexport class ADLData extends CMIArray {\n  constructor() {\n    super({\n      CMIElement: \"adl.data\",\n      children: scorm2004_constants.adl_data_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's adl.data.n object\n */\nexport class ADLDataObject extends BaseCMI {\n  private _id = \"\";\n  private _store = \"\";\n\n  constructor() {\n    super(\"adl.data.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _store\n   * @return {string}\n   */\n  get store(): string {\n    return this._store;\n  }\n\n  /**\n   * Setter for _store\n   * @param {string} store\n   */\n  set store(store: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".store\", store, scorm2004_regex.CMILangString4000)\n    ) {\n      this._store = store;\n    }\n  }\n\n  /**\n   * toJSON for adl.data.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      store: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    store: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this._id,\n      store: this._store,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl.nav.request_valid object\n */\n\nexport class ADLNavRequestValid extends BaseCMI {\n  private _continue = \"unknown\";\n  private _previous = \"unknown\";\n  private _choice: {\n    [key: string]: NAVBoolean;\n  } = {};\n  private _jump: {\n    [key: string]: NAVBoolean;\n  } = {};\n\n  /**\n   * Constructor for adl.nav.request_valid\n   */\n  constructor() {\n    super(\"adl.nav.request_valid\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._continue = \"unknown\";\n    this._previous = \"unknown\";\n  }\n\n  /**\n   * Getter for _continue\n   * @return {string}\n   */\n  get continue(): string {\n    return this._continue;\n  }\n\n  /**\n   * Setter for _continue. Just throws an error.\n   * @param {string} _continue\n   */\n  set continue(_continue: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".continue\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".continue\", _continue, scorm2004_regex.NAVBoolean)\n    ) {\n      this._continue = _continue;\n    }\n  }\n\n  /**\n   * Getter for _previous\n   * @return {string}\n   */\n  get previous(): string {\n    return this._previous;\n  }\n\n  /**\n   * Setter for _previous. Just throws an error.\n   * @param {string} _previous\n   */\n  set previous(_previous: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".previous\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".previous\", _previous, scorm2004_regex.NAVBoolean)\n    ) {\n      this._previous = _previous;\n    }\n  }\n\n  /**\n   * Getter for _choice\n   * @return {{ [key: string]: NAVBoolean }}\n   */\n  get choice(): { [key: string]: NAVBoolean } {\n    return this._choice;\n  }\n\n  /**\n   * Setter for _choice\n   * @param {{ [key: string]: string }} choice\n   */\n  set choice(choice: { [key: string]: string }) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".choice\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (typeof choice !== \"object\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".choice\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    for (const key in choice) {\n      if ({}.hasOwnProperty.call(choice, key)) {\n        if (\n          check2004ValidFormat(\n            this._cmi_element + \".choice.\" + key,\n            choice[key],\n            scorm2004_regex.NAVBoolean,\n          ) &&\n          check2004ValidFormat(this._cmi_element + \".choice.\" + key, key, scorm2004_regex.NAVTarget)\n        ) {\n          // Convert string value to NAVBoolean enum value\n          const value = choice[key];\n          if (value === \"true\") {\n            this._choice[key] = NAVBoolean.TRUE;\n          } else if (value === \"false\") {\n            this._choice[key] = NAVBoolean.FALSE;\n          } else if (value === \"unknown\") {\n            this._choice[key] = NAVBoolean.UNKNOWN;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Getter for _jump\n   * @return {{ [key: string]: NAVBoolean }}\n   */\n  get jump(): { [key: string]: NAVBoolean } {\n    return this._jump;\n  }\n\n  /**\n   * Setter for _jump\n   * @param {{ [key: string]: string }} jump\n   */\n  set jump(jump: { [key: string]: string }) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".jump\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (typeof jump !== \"object\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".jump\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    for (const key in jump) {\n      if ({}.hasOwnProperty.call(jump, key)) {\n        if (\n          check2004ValidFormat(\n            this._cmi_element + \".jump.\" + key,\n            jump[key],\n            scorm2004_regex.NAVBoolean,\n          ) &&\n          check2004ValidFormat(this._cmi_element + \".jump.\" + key, key, scorm2004_regex.NAVTarget)\n        ) {\n          // Convert string value to NAVBoolean enum value\n          const value = jump[key];\n          if (value === \"true\") {\n            this._jump[key] = NAVBoolean.TRUE;\n          } else if (value === \"false\") {\n            this._jump[key] = NAVBoolean.FALSE;\n          } else if (value === \"unknown\") {\n            this._jump[key] = NAVBoolean.UNKNOWN;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * toJSON for adl.nav.request_valid\n   *\n   * @return {\n   *    {\n   *      previous: string,\n   *      continue: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    previous: string;\n    continue: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      previous: this._previous,\n      continue: this._continue,\n      choice: this._choice,\n      jump: this._jump,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Enum for rule condition operators\n */\nexport enum RuleConditionOperator {\n  NOT = \"not\",\n  AND = \"and\",\n  OR = \"or\",\n}\n\n/**\n * Enum for rule condition types\n */\nexport enum RuleConditionType {\n  SATISFIED = \"satisfied\",\n  OBJECTIVE_STATUS_KNOWN = \"objectiveStatusKnown\",\n  OBJECTIVE_MEASURE_KNOWN = \"objectiveMeasureKnown\",\n  OBJECTIVE_MEASURE_GREATER_THAN = \"objectiveMeasureGreaterThan\",\n  OBJECTIVE_MEASURE_LESS_THAN = \"objectiveMeasureLessThan\",\n  COMPLETED = \"completed\",\n  PROGRESS_KNOWN = \"progressKnown\",\n  ATTEMPTED = \"attempted\",\n  ATTEMPT_LIMIT_EXCEEDED = \"attemptLimitExceeded\",\n  TIME_LIMIT_EXCEEDED = \"timeLimitExceeded\",\n  OUTSIDE_AVAILABLE_TIME_RANGE = \"outsideAvailableTimeRange\",\n  ALWAYS = \"always\",\n}\n\n/**\n * Enum for rule action types\n */\nexport enum RuleActionType {\n  SKIP = \"skip\",\n  DISABLED = \"disabled\",\n  HIDE_FROM_CHOICE = \"hideFromChoice\",\n  STOP_FORWARD_TRAVERSAL = \"stopForwardTraversal\",\n  EXIT_PARENT = \"exitParent\",\n  EXIT_ALL = \"exitAll\",\n  RETRY = \"retry\",\n  RETRY_ALL = \"retryAll\",\n  CONTINUE = \"continue\",\n  PREVIOUS = \"previous\",\n  EXIT = \"exit\",\n}\n\n/**\n * Class representing a sequencing rule condition\n */\nexport class RuleCondition extends BaseCMI {\n  private _condition: RuleConditionType = RuleConditionType.ALWAYS;\n  private _operator: RuleConditionOperator | null = null;\n  private _parameters: Map<string, any> = new Map();\n\n  /**\n   * Constructor for RuleCondition\n   * @param {RuleConditionType} condition - The condition type\n   * @param {RuleConditionOperator | null} operator - The operator (null for no operator)\n   * @param {Map<string, any>} parameters - Additional parameters for the condition\n   */\n  constructor(\n    condition: RuleConditionType = RuleConditionType.ALWAYS,\n    operator: RuleConditionOperator | null = null,\n    parameters: Map<string, any> = new Map(),\n  ) {\n    super(\"ruleCondition\");\n    this._condition = condition;\n    this._operator = operator;\n    this._parameters = parameters;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for condition\n   * @return {RuleConditionType}\n   */\n  get condition(): RuleConditionType {\n    return this._condition;\n  }\n\n  /**\n   * Setter for condition\n   * @param {RuleConditionType} condition\n   */\n  set condition(condition: RuleConditionType) {\n    this._condition = condition;\n  }\n\n  /**\n   * Getter for operator\n   * @return {RuleConditionOperator | null}\n   */\n  get operator(): RuleConditionOperator | null {\n    return this._operator;\n  }\n\n  /**\n   * Setter for operator\n   * @param {RuleConditionOperator | null} operator\n   */\n  set operator(operator: RuleConditionOperator | null) {\n    this._operator = operator;\n  }\n\n  /**\n   * Getter for parameters\n   * @return {Map<string, any>}\n   */\n  get parameters(): Map<string, any> {\n    return this._parameters;\n  }\n\n  /**\n   * Setter for parameters\n   * @param {Map<string, any>} parameters\n   */\n  set parameters(parameters: Map<string, any>) {\n    this._parameters = parameters;\n  }\n\n  /**\n   * Evaluate the condition for an activity\n   * @param {Activity} activity - The activity to evaluate the condition for\n   * @return {boolean} - True if the condition is met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    switch (this._condition) {\n      case RuleConditionType.SATISFIED:\n        return activity.successStatus === SuccessStatus.PASSED;\n      case RuleConditionType.OBJECTIVE_STATUS_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RuleConditionType.OBJECTIVE_MEASURE_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RuleConditionType.OBJECTIVE_MEASURE_GREATER_THAN: {\n        const greaterThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure > greaterThanValue\n        );\n      }\n      case RuleConditionType.OBJECTIVE_MEASURE_LESS_THAN: {\n        const lessThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure < lessThanValue\n        );\n      }\n      case RuleConditionType.COMPLETED:\n        return activity.isCompleted;\n      case RuleConditionType.PROGRESS_KNOWN:\n        return activity.completionStatus !== \"unknown\";\n      case RuleConditionType.ATTEMPTED:\n        return activity.attemptCount > 0;\n      case RuleConditionType.ATTEMPT_LIMIT_EXCEEDED: {\n        const attemptLimit = this._parameters.get(\"attemptLimit\") || 0;\n        return attemptLimit > 0 && activity.attemptCount >= attemptLimit;\n      }\n      case RuleConditionType.TIME_LIMIT_EXCEEDED:\n        // Time limit exceeded would require additional tracking\n        return false;\n      case RuleConditionType.OUTSIDE_AVAILABLE_TIME_RANGE:\n        // Outside available time range would require additional tracking\n        return false;\n      case RuleConditionType.ALWAYS:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RuleCondition\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      condition: this._condition,\n      operator: this._operator,\n      parameters: Object.fromEntries(this._parameters),\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing a sequencing rule\n */\nexport class SequencingRule extends BaseCMI {\n  private _conditions: RuleCondition[] = [];\n  private _action: RuleActionType = RuleActionType.SKIP;\n  private _conditionCombination: RuleConditionOperator = RuleConditionOperator.AND;\n\n  /**\n   * Constructor for SequencingRule\n   * @param {RuleActionType} action - The action to take when the rule conditions are met\n   * @param {RuleConditionOperator} conditionCombination - How to combine multiple conditions\n   */\n  constructor(\n    action: RuleActionType = RuleActionType.SKIP,\n    conditionCombination: RuleConditionOperator = RuleConditionOperator.AND,\n  ) {\n    super(\"sequencingRule\");\n    this._action = action;\n    this._conditionCombination = conditionCombination;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._conditions = [];\n  }\n\n  /**\n   * Getter for conditions\n   * @return {RuleCondition[]}\n   */\n  get conditions(): RuleCondition[] {\n    return this._conditions;\n  }\n\n  /**\n   * Add a condition to the rule\n   * @param {RuleCondition} condition - The condition to add\n   */\n  addCondition(condition: RuleCondition): void {\n    if (!(condition instanceof RuleCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._conditions.push(condition);\n  }\n\n  /**\n   * Remove a condition from the rule\n   * @param {RuleCondition} condition - The condition to remove\n   * @return {boolean} - True if the condition was removed, false otherwise\n   */\n  removeCondition(condition: RuleCondition): boolean {\n    const index = this._conditions.indexOf(condition);\n    if (index !== -1) {\n      this._conditions.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for action\n   * @return {RuleActionType}\n   */\n  get action(): RuleActionType {\n    return this._action;\n  }\n\n  /**\n   * Setter for action\n   * @param {RuleActionType} action\n   */\n  set action(action: RuleActionType) {\n    this._action = action;\n  }\n\n  /**\n   * Getter for conditionCombination\n   * @return {RuleConditionOperator}\n   */\n  get conditionCombination(): RuleConditionOperator {\n    return this._conditionCombination;\n  }\n\n  /**\n   * Setter for conditionCombination\n   * @param {RuleConditionOperator} conditionCombination\n   */\n  set conditionCombination(conditionCombination: RuleConditionOperator) {\n    this._conditionCombination = conditionCombination;\n  }\n\n  /**\n   * Evaluate the rule for an activity\n   * @param {Activity} activity - The activity to evaluate the rule for\n   * @return {boolean} - True if the rule conditions are met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    if (this._conditions.length === 0) {\n      return true;\n    }\n\n    if (this._conditionCombination === RuleConditionOperator.AND) {\n      return this._conditions.every((condition) => condition.evaluate(activity));\n    } else if (this._conditionCombination === RuleConditionOperator.OR) {\n      return this._conditions.some((condition) => condition.evaluate(activity));\n    }\n\n    return false;\n  }\n\n  /**\n   * toJSON for SequencingRule\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      conditions: this._conditions,\n      action: this._action,\n      conditionCombination: this._conditionCombination,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing a collection of sequencing rules\n */\nexport class SequencingRules extends BaseCMI {\n  private _preConditionRules: SequencingRule[] = [];\n  private _exitConditionRules: SequencingRule[] = [];\n  private _postConditionRules: SequencingRule[] = [];\n\n  /**\n   * Constructor for SequencingRules\n   */\n  constructor() {\n    super(\"sequencingRules\");\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._preConditionRules = [];\n    this._exitConditionRules = [];\n    this._postConditionRules = [];\n  }\n\n  /**\n   * Getter for preConditionRules\n   * @return {SequencingRule[]}\n   */\n  get preConditionRules(): SequencingRule[] {\n    return this._preConditionRules;\n  }\n\n  /**\n   * Add a pre-condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addPreConditionRule(rule: SequencingRule): void {\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".preConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._preConditionRules.push(rule);\n  }\n\n  /**\n   * Getter for exitConditionRules\n   * @return {SequencingRule[]}\n   */\n  get exitConditionRules(): SequencingRule[] {\n    return this._exitConditionRules;\n  }\n\n  /**\n   * Add an exit condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addExitConditionRule(rule: SequencingRule): void {\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exitConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._exitConditionRules.push(rule);\n  }\n\n  /**\n   * Getter for postConditionRules\n   * @return {SequencingRule[]}\n   */\n  get postConditionRules(): SequencingRule[] {\n    return this._postConditionRules;\n  }\n\n  /**\n   * Add a post-condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addPostConditionRule(rule: SequencingRule): void {\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".postConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._postConditionRules.push(rule);\n  }\n\n  /**\n   * Evaluate pre-condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluatePreConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._preConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Evaluate exit condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluateExitConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._exitConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Evaluate post-condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluatePostConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._postConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * toJSON for SequencingRules\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      preConditionRules: this._preConditionRules,\n      exitConditionRules: this._exitConditionRules,\n      postConditionRules: this._postConditionRules,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { CompletionStatus, SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Enum for rollup action types\n */\nexport enum RollupActionType {\n  SATISFIED = \"satisfied\",\n  NOT_SATISFIED = \"notSatisfied\",\n  COMPLETED = \"completed\",\n  INCOMPLETE = \"incomplete\",\n}\n\n/**\n * Enum for rollup condition types\n */\nexport enum RollupConditionType {\n  SATISFIED = \"satisfied\",\n  OBJECTIVE_STATUS_KNOWN = \"objectiveStatusKnown\",\n  OBJECTIVE_MEASURE_KNOWN = \"objectiveMeasureKnown\",\n  OBJECTIVE_MEASURE_GREATER_THAN = \"objectiveMeasureGreaterThan\",\n  OBJECTIVE_MEASURE_LESS_THAN = \"objectiveMeasureLessThan\",\n  COMPLETED = \"completed\",\n  PROGRESS_KNOWN = \"progressKnown\",\n  ATTEMPTED = \"attempted\",\n  NOT_ATTEMPTED = \"notAttempted\",\n  ALWAYS = \"always\",\n}\n\n/**\n * Enum for rollup consideration types\n */\nexport enum RollupConsiderationType {\n  ALL = \"all\",\n  ANY = \"any\",\n  NONE = \"none\",\n  AT_LEAST_COUNT = \"atLeastCount\",\n  AT_LEAST_PERCENT = \"atLeastPercent\",\n}\n\n/**\n * Class representing a rollup condition\n */\nexport class RollupCondition extends BaseCMI {\n  private _condition: RollupConditionType = RollupConditionType.ALWAYS;\n  private _parameters: Map<string, any> = new Map();\n\n  /**\n   * Constructor for RollupCondition\n   * @param {RollupConditionType} condition - The condition type\n   * @param {Map<string, any>} parameters - Additional parameters for the condition\n   */\n  constructor(\n    condition: RollupConditionType = RollupConditionType.ALWAYS,\n    parameters: Map<string, any> = new Map(),\n  ) {\n    super(\"rollupCondition\");\n    this._condition = condition;\n    this._parameters = parameters;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for condition\n   * @return {RollupConditionType}\n   */\n  get condition(): RollupConditionType {\n    return this._condition;\n  }\n\n  /**\n   * Setter for condition\n   * @param {RollupConditionType} condition\n   */\n  set condition(condition: RollupConditionType) {\n    this._condition = condition;\n  }\n\n  /**\n   * Getter for parameters\n   * @return {Map<string, any>}\n   */\n  get parameters(): Map<string, any> {\n    return this._parameters;\n  }\n\n  /**\n   * Setter for parameters\n   * @param {Map<string, any>} parameters\n   */\n  set parameters(parameters: Map<string, any>) {\n    this._parameters = parameters;\n  }\n\n  /**\n   * Evaluate the condition for an activity\n   * @param {Activity} activity - The activity to evaluate the condition for\n   * @return {boolean} - True if the condition is met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    switch (this._condition) {\n      case RollupConditionType.SATISFIED:\n        return activity.successStatus === SuccessStatus.PASSED;\n      case RollupConditionType.OBJECTIVE_STATUS_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RollupConditionType.OBJECTIVE_MEASURE_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RollupConditionType.OBJECTIVE_MEASURE_GREATER_THAN: {\n        const greaterThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure > greaterThanValue\n        );\n      }\n      case RollupConditionType.OBJECTIVE_MEASURE_LESS_THAN: {\n        const lessThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure < lessThanValue\n        );\n      }\n      case RollupConditionType.COMPLETED:\n        return activity.isCompleted;\n      case RollupConditionType.PROGRESS_KNOWN:\n        return activity.completionStatus !== CompletionStatus.UNKNOWN;\n      case RollupConditionType.ATTEMPTED:\n        return activity.attemptCount > 0;\n      case RollupConditionType.NOT_ATTEMPTED:\n        return activity.attemptCount === 0;\n      case RollupConditionType.ALWAYS:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RollupCondition\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      condition: this._condition,\n      parameters: Object.fromEntries(this._parameters),\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing a rollup rule\n */\nexport class RollupRule extends BaseCMI {\n  private _conditions: RollupCondition[] = [];\n  private _action: RollupActionType = RollupActionType.SATISFIED;\n  private _consideration: RollupConsiderationType = RollupConsiderationType.ALL;\n  private _minimumCount: number = 0;\n  private _minimumPercent: number = 0;\n\n  /**\n   * Constructor for RollupRule\n   * @param {RollupActionType} action - The action to take when the rule conditions are met\n   * @param {RollupConsiderationType} consideration - How to consider child activities\n   * @param {number} minimumCount - The minimum count for AT_LEAST_COUNT consideration\n   * @param {number} minimumPercent - The minimum percent for AT_LEAST_PERCENT consideration\n   */\n  constructor(\n    action: RollupActionType = RollupActionType.SATISFIED,\n    consideration: RollupConsiderationType = RollupConsiderationType.ALL,\n    minimumCount: number = 0,\n    minimumPercent: number = 0,\n  ) {\n    super(\"rollupRule\");\n    this._action = action;\n    this._consideration = consideration;\n    this._minimumCount = minimumCount;\n    this._minimumPercent = minimumPercent;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._conditions = [];\n  }\n\n  /**\n   * Getter for conditions\n   * @return {RollupCondition[]}\n   */\n  get conditions(): RollupCondition[] {\n    return this._conditions;\n  }\n\n  /**\n   * Add a condition to the rule\n   * @param {RollupCondition} condition - The condition to add\n   */\n  addCondition(condition: RollupCondition): void {\n    if (!(condition instanceof RollupCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._conditions.push(condition);\n  }\n\n  /**\n   * Remove a condition from the rule\n   * @param {RollupCondition} condition - The condition to remove\n   * @return {boolean} - True if the condition was removed, false otherwise\n   */\n  removeCondition(condition: RollupCondition): boolean {\n    const index = this._conditions.indexOf(condition);\n    if (index !== -1) {\n      this._conditions.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for action\n   * @return {RollupActionType}\n   */\n  get action(): RollupActionType {\n    return this._action;\n  }\n\n  /**\n   * Setter for action\n   * @param {RollupActionType} action\n   */\n  set action(action: RollupActionType) {\n    this._action = action;\n  }\n\n  /**\n   * Getter for consideration\n   * @return {RollupConsiderationType}\n   */\n  get consideration(): RollupConsiderationType {\n    return this._consideration;\n  }\n\n  /**\n   * Setter for consideration\n   * @param {RollupConsiderationType} consideration\n   */\n  set consideration(consideration: RollupConsiderationType) {\n    this._consideration = consideration;\n  }\n\n  /**\n   * Getter for minimumCount\n   * @return {number}\n   */\n  get minimumCount(): number {\n    return this._minimumCount;\n  }\n\n  /**\n   * Setter for minimumCount\n   * @param {number} minimumCount\n   */\n  set minimumCount(minimumCount: number) {\n    if (minimumCount >= 0) {\n      this._minimumCount = minimumCount;\n    }\n  }\n\n  /**\n   * Getter for minimumPercent\n   * @return {number}\n   */\n  get minimumPercent(): number {\n    return this._minimumPercent;\n  }\n\n  /**\n   * Setter for minimumPercent\n   * @param {number} minimumPercent\n   */\n  set minimumPercent(minimumPercent: number) {\n    if (minimumPercent >= 0 && minimumPercent <= 100) {\n      this._minimumPercent = minimumPercent;\n    }\n  }\n\n  /**\n   * Evaluate the rule for a set of child activities\n   * @param {Activity[]} children - The child activities to evaluate the rule for\n   * @return {boolean} - True if the rule conditions are met, false otherwise\n   */\n  evaluate(children: Activity[]): boolean {\n    if (children.length === 0) {\n      return false;\n    }\n\n    // Filter children that meet all conditions\n    const matchingChildren = children.filter((child) => {\n      return this._conditions.every((condition) => condition.evaluate(child));\n    });\n\n    // Apply consideration\n    switch (this._consideration) {\n      case RollupConsiderationType.ALL:\n        return matchingChildren.length === children.length;\n      case RollupConsiderationType.ANY:\n        return matchingChildren.length > 0;\n      case RollupConsiderationType.NONE:\n        return matchingChildren.length === 0;\n      case RollupConsiderationType.AT_LEAST_COUNT:\n        return matchingChildren.length >= this._minimumCount;\n      case RollupConsiderationType.AT_LEAST_PERCENT: {\n        const percent = (matchingChildren.length / children.length) * 100;\n        return percent >= this._minimumPercent;\n      }\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RollupRule\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      conditions: this._conditions,\n      action: this._action,\n      consideration: this._consideration,\n      minimumCount: this._minimumCount,\n      minimumPercent: this._minimumPercent,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing a collection of rollup rules\n */\nexport class RollupRules extends BaseCMI {\n  private _rules: RollupRule[] = [];\n\n  /**\n   * Constructor for RollupRules\n   */\n  constructor() {\n    super(\"rollupRules\");\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._rules = [];\n  }\n\n  /**\n   * Getter for rules\n   * @return {RollupRule[]}\n   */\n  get rules(): RollupRule[] {\n    return this._rules;\n  }\n\n  /**\n   * Add a rule\n   * @param {RollupRule} rule - The rule to add\n   */\n  addRule(rule: RollupRule): void {\n    if (!(rule instanceof RollupRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".rules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._rules.push(rule);\n  }\n\n  /**\n   * Remove a rule\n   * @param {RollupRule} rule - The rule to remove\n   * @return {boolean} - True if the rule was removed, false otherwise\n   */\n  removeRule(rule: RollupRule): boolean {\n    const index = this._rules.indexOf(rule);\n    if (index !== -1) {\n      this._rules.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Process rollup for an activity\n   * @param {Activity} activity - The activity to process rollup for\n   */\n  processRollup(activity: Activity): void {\n    if (!activity || activity.children.length === 0) {\n      return;\n    }\n\n    const children = activity.children;\n    let completionRollup = false;\n    let successRollup = false;\n\n    // Process each rule\n    for (const rule of this._rules) {\n      if (rule.evaluate(children)) {\n        switch (rule.action) {\n          case RollupActionType.SATISFIED:\n            activity.successStatus = SuccessStatus.PASSED;\n            successRollup = true;\n            break;\n          case RollupActionType.NOT_SATISFIED:\n            activity.successStatus = SuccessStatus.FAILED;\n            successRollup = true;\n            break;\n          case RollupActionType.COMPLETED:\n            activity.completionStatus = CompletionStatus.COMPLETED;\n            activity.isCompleted = true;\n            completionRollup = true;\n            break;\n          case RollupActionType.INCOMPLETE:\n            activity.completionStatus = CompletionStatus.INCOMPLETE;\n            activity.isCompleted = false;\n            completionRollup = true;\n            break;\n        }\n      }\n    }\n\n    // If no rules applied for completion, use default rollup\n    if (!completionRollup) {\n      this._defaultCompletionRollup(activity, children);\n    }\n\n    // If no rules applied for success, use default rollup\n    if (!successRollup) {\n      this._defaultSuccessRollup(activity, children);\n    }\n  }\n\n  /**\n   * Default completion rollup\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @private\n   */\n  private _defaultCompletionRollup(activity: Activity, children: Activity[]): void {\n    // If all children are completed, mark the parent as completed\n    const allCompleted = children.every((child) => child.isCompleted);\n    if (allCompleted) {\n      activity.completionStatus = CompletionStatus.COMPLETED;\n      activity.isCompleted = true;\n    } else {\n      // If any child is incomplete, mark the parent as incomplete\n      const anyIncomplete = children.some(\n        (child) => child.completionStatus === CompletionStatus.INCOMPLETE,\n      );\n      if (anyIncomplete) {\n        activity.completionStatus = CompletionStatus.INCOMPLETE;\n        activity.isCompleted = false;\n      }\n    }\n  }\n\n  /**\n   * Default success rollup\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @private\n   */\n  private _defaultSuccessRollup(activity: Activity, children: Activity[]): void {\n    // If all children are satisfied, mark the parent as satisfied\n    const allSatisfied = children.every((child) => child.successStatus === SuccessStatus.PASSED);\n    if (allSatisfied) {\n      activity.successStatus = SuccessStatus.PASSED;\n    } else {\n      // If any child is not satisfied, mark the parent as not satisfied\n      const anyNotSatisfied = children.some(\n        (child) => child.successStatus === SuccessStatus.FAILED,\n      );\n      if (anyNotSatisfied) {\n        activity.successStatus = SuccessStatus.FAILED;\n      }\n    }\n  }\n\n  /**\n   * toJSON for RollupRules\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      rules: this._rules,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","const ValidLanguages: string[] = [\n  \"aa\",\n  \"ab\",\n  \"ae\",\n  \"af\",\n  \"ak\",\n  \"am\",\n  \"an\",\n  \"ar\",\n  \"as\",\n  \"av\",\n  \"ay\",\n  \"az\",\n  \"ba\",\n  \"be\",\n  \"bg\",\n  \"bh\",\n  \"bi\",\n  \"bm\",\n  \"bn\",\n  \"bo\",\n  \"br\",\n  \"bs\",\n  \"ca\",\n  \"ce\",\n  \"ch\",\n  \"co\",\n  \"cr\",\n  \"cs\",\n  \"cu\",\n  \"cv\",\n  \"cy\",\n  \"da\",\n  \"de\",\n  \"dv\",\n  \"dz\",\n  \"ee\",\n  \"el\",\n  \"en\",\n  \"eo\",\n  \"es\",\n  \"et\",\n  \"eu\",\n  \"fa\",\n  \"ff\",\n  \"fi\",\n  \"fj\",\n  \"fo\",\n  \"fr\",\n  \"fy\",\n  \"ga\",\n  \"gd\",\n  \"gl\",\n  \"gn\",\n  \"gu\",\n  \"gv\",\n  \"ha\",\n  \"he\",\n  \"hi\",\n  \"ho\",\n  \"hr\",\n  \"ht\",\n  \"hu\",\n  \"hy\",\n  \"hz\",\n  \"ia\",\n  \"id\",\n  \"ie\",\n  \"ig\",\n  \"ii\",\n  \"ik\",\n  \"io\",\n  \"is\",\n  \"it\",\n  \"iu\",\n  \"ja\",\n  \"jv\",\n  \"ka\",\n  \"kg\",\n  \"ki\",\n  \"kj\",\n  \"kk\",\n  \"kl\",\n  \"km\",\n  \"kn\",\n  \"ko\",\n  \"kr\",\n  \"ks\",\n  \"ku\",\n  \"kv\",\n  \"kw\",\n  \"ky\",\n  \"la\",\n  \"lb\",\n  \"lg\",\n  \"li\",\n  \"ln\",\n  \"lo\",\n  \"lt\",\n  \"lu\",\n  \"lv\",\n  \"mg\",\n  \"mh\",\n  \"mi\",\n  \"mk\",\n  \"ml\",\n  \"mn\",\n  \"mo\",\n  \"mr\",\n  \"ms\",\n  \"mt\",\n  \"my\",\n  \"na\",\n  \"nb\",\n  \"nd\",\n  \"ne\",\n  \"ng\",\n  \"nl\",\n  \"nn\",\n  \"no\",\n  \"nr\",\n  \"nv\",\n  \"ny\",\n  \"oc\",\n  \"oj\",\n  \"om\",\n  \"or\",\n  \"os\",\n  \"pa\",\n  \"pi\",\n  \"pl\",\n  \"ps\",\n  \"pt\",\n  \"qu\",\n  \"rm\",\n  \"rn\",\n  \"ro\",\n  \"ru\",\n  \"rw\",\n  \"sa\",\n  \"sc\",\n  \"sd\",\n  \"se\",\n  \"sg\",\n  \"sh\",\n  \"si\",\n  \"sk\",\n  \"sl\",\n  \"sm\",\n  \"sn\",\n  \"so\",\n  \"sq\",\n  \"sr\",\n  \"ss\",\n  \"st\",\n  \"su\",\n  \"sv\",\n  \"sw\",\n  \"ta\",\n  \"te\",\n  \"tg\",\n  \"th\",\n  \"ti\",\n  \"tk\",\n  \"tl\",\n  \"tn\",\n  \"to\",\n  \"tr\",\n  \"ts\",\n  \"tt\",\n  \"tw\",\n  \"ty\",\n  \"ug\",\n  \"uk\",\n  \"ur\",\n  \"uz\",\n  \"ve\",\n  \"vi\",\n  \"vo\",\n  \"wa\",\n  \"wo\",\n  \"xh\",\n  \"yi\",\n  \"yo\",\n  \"za\",\n  \"zh\",\n  \"zu\",\n  \"aar\",\n  \"abk\",\n  \"ave\",\n  \"afr\",\n  \"aka\",\n  \"amh\",\n  \"arg\",\n  \"ara\",\n  \"asm\",\n  \"ava\",\n  \"aym\",\n  \"aze\",\n  \"bak\",\n  \"bel\",\n  \"bul\",\n  \"bih\",\n  \"bis\",\n  \"bam\",\n  \"ben\",\n  \"tib\",\n  \"bod\",\n  \"bre\",\n  \"bos\",\n  \"cat\",\n  \"che\",\n  \"cha\",\n  \"cos\",\n  \"cre\",\n  \"cze\",\n  \"ces\",\n  \"chu\",\n  \"chv\",\n  \"wel\",\n  \"cym\",\n  \"dan\",\n  \"ger\",\n  \"deu\",\n  \"div\",\n  \"dzo\",\n  \"ewe\",\n  \"gre\",\n  \"ell\",\n  \"eng\",\n  \"epo\",\n  \"spa\",\n  \"est\",\n  \"baq\",\n  \"eus\",\n  \"per\",\n  \"fas\",\n  \"ful\",\n  \"fin\",\n  \"fij\",\n  \"fao\",\n  \"fre\",\n  \"fra\",\n  \"fry\",\n  \"gle\",\n  \"gla\",\n  \"glg\",\n  \"grn\",\n  \"guj\",\n  \"glv\",\n  \"hau\",\n  \"heb\",\n  \"hin\",\n  \"hmo\",\n  \"hrv\",\n  \"hat\",\n  \"hun\",\n  \"arm\",\n  \"hye\",\n  \"her\",\n  \"ina\",\n  \"ind\",\n  \"ile\",\n  \"ibo\",\n  \"iii\",\n  \"ipk\",\n  \"ido\",\n  \"ice\",\n  \"isl\",\n  \"ita\",\n  \"iku\",\n  \"jpn\",\n  \"jav\",\n  \"geo\",\n  \"kat\",\n  \"kon\",\n  \"kik\",\n  \"kua\",\n  \"kaz\",\n  \"kal\",\n  \"khm\",\n  \"kan\",\n  \"kor\",\n  \"kau\",\n  \"kas\",\n  \"kur\",\n  \"kom\",\n  \"cor\",\n  \"kir\",\n  \"lat\",\n  \"ltz\",\n  \"lug\",\n  \"lim\",\n  \"lin\",\n  \"lao\",\n  \"lit\",\n  \"lub\",\n  \"lav\",\n  \"mlg\",\n  \"mah\",\n  \"mao\",\n  \"mri\",\n  \"mac\",\n  \"mkd\",\n  \"mal\",\n  \"mon\",\n  \"mol\",\n  \"mar\",\n  \"may\",\n  \"msa\",\n  \"mlt\",\n  \"bur\",\n  \"mya\",\n  \"nau\",\n  \"nob\",\n  \"nde\",\n  \"nep\",\n  \"ndo\",\n  \"dut\",\n  \"nld\",\n  \"nno\",\n  \"nor\",\n  \"nbl\",\n  \"nav\",\n  \"nya\",\n  \"oci\",\n  \"oji\",\n  \"orm\",\n  \"ori\",\n  \"oss\",\n  \"pan\",\n  \"pli\",\n  \"pol\",\n  \"pus\",\n  \"por\",\n  \"que\",\n  \"roh\",\n  \"run\",\n  \"rum\",\n  \"ron\",\n  \"rus\",\n  \"kin\",\n  \"san\",\n  \"srd\",\n  \"snd\",\n  \"sme\",\n  \"sag\",\n  \"slo\",\n  \"sin\",\n  \"slk\",\n  \"slv\",\n  \"smo\",\n  \"sna\",\n  \"som\",\n  \"alb\",\n  \"sqi\",\n  \"srp\",\n  \"ssw\",\n  \"sot\",\n  \"sun\",\n  \"swe\",\n  \"swa\",\n  \"tam\",\n  \"tel\",\n  \"tgk\",\n  \"tha\",\n  \"tir\",\n  \"tuk\",\n  \"tgl\",\n  \"tsn\",\n  \"ton\",\n  \"tur\",\n  \"tso\",\n  \"tat\",\n  \"twi\",\n  \"tah\",\n  \"uig\",\n  \"ukr\",\n  \"urd\",\n  \"uzb\",\n  \"ven\",\n  \"vie\",\n  \"vol\",\n  \"wln\",\n  \"wol\",\n  \"xho\",\n  \"yid\",\n  \"yor\",\n  \"zha\",\n  \"chi\",\n  \"zho\",\n  \"zul\",\n];\nexport default ValidLanguages;\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { scorm2004_regex } from \"../../../constants/regex\";\nimport { check2004ValidFormat } from \"../validation\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { CompletionStatus, SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Class representing a single activity in the SCORM 2004 activity tree\n */\nexport class Activity extends BaseCMI {\n  private _id: string = \"\";\n  private _title: string = \"\";\n  private _children: Activity[] = [];\n  private _parent: Activity | null = null;\n  private _isVisible: boolean = true;\n  private _isActive: boolean = false;\n  private _isSuspended: boolean = false;\n  private _isCompleted: boolean = false;\n  private _completionStatus: CompletionStatus = CompletionStatus.UNKNOWN;\n  private _successStatus: SuccessStatus = SuccessStatus.UNKNOWN;\n  private _attemptCount: number = 0;\n  private _attemptCompletionAmount: number = 0;\n  private _attemptAbsoluteDuration: string = \"PT0H0M0S\";\n  private _attemptExperiencedDuration: string = \"PT0H0M0S\";\n  private _activityAbsoluteDuration: string = \"PT0H0M0S\";\n  private _activityExperiencedDuration: string = \"PT0H0M0S\";\n  private _objectiveSatisfiedStatus: boolean = false;\n  private _objectiveMeasureStatus: boolean = false;\n  private _objectiveNormalizedMeasure: number = 0;\n\n  /**\n   * Constructor for Activity\n   * @param {string} id - The unique identifier for this activity\n   * @param {string} title - The title of this activity\n   */\n  constructor(id: string = \"\", title: string = \"\") {\n    super(\"activity\");\n    this._id = id;\n    this._title = title;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    // Initialize children\n    for (const child of this._children) {\n      child.initialize();\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._isActive = false;\n    this._isSuspended = false;\n    this._isCompleted = false;\n    this._completionStatus = CompletionStatus.UNKNOWN;\n    this._successStatus = SuccessStatus.UNKNOWN;\n    this._attemptCount = 0;\n    this._attemptCompletionAmount = 0;\n    this._attemptAbsoluteDuration = \"PT0H0M0S\";\n    this._attemptExperiencedDuration = \"PT0H0M0S\";\n    this._activityAbsoluteDuration = \"PT0H0M0S\";\n    this._activityExperiencedDuration = \"PT0H0M0S\";\n    this._objectiveSatisfiedStatus = false;\n    this._objectiveMeasureStatus = false;\n    this._objectiveNormalizedMeasure = 0;\n\n    // Reset children\n    for (const child of this._children) {\n      child.reset();\n    }\n  }\n\n  /**\n   * Getter for id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for title\n   * @return {string}\n   */\n  get title(): string {\n    return this._title;\n  }\n\n  /**\n   * Setter for title\n   * @param {string} title\n   */\n  set title(title: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".title\", title, scorm2004_regex.CMILangString250)\n    ) {\n      this._title = title;\n    }\n  }\n\n  /**\n   * Getter for children\n   * @return {Activity[]}\n   */\n  get children(): Activity[] {\n    return this._children;\n  }\n\n  /**\n   * Add a child activity to this activity\n   * @param {Activity} child - The child activity to add\n   */\n  addChild(child: Activity): void {\n    if (!(child instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".children\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    child._parent = this;\n    this._children.push(child);\n  }\n\n  /**\n   * Remove a child activity from this activity\n   * @param {Activity} child - The child activity to remove\n   * @return {boolean} - True if the child was removed, false otherwise\n   */\n  removeChild(child: Activity): boolean {\n    const index = this._children.indexOf(child);\n    if (index !== -1) {\n      this._children.splice(index, 1);\n      child._parent = null;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for parent\n   * @return {Activity | null}\n   */\n  get parent(): Activity | null {\n    return this._parent;\n  }\n\n  /**\n   * Getter for isVisible\n   * @return {boolean}\n   */\n  get isVisible(): boolean {\n    return this._isVisible;\n  }\n\n  /**\n   * Setter for isVisible\n   * @param {boolean} isVisible\n   */\n  set isVisible(isVisible: boolean) {\n    this._isVisible = isVisible;\n  }\n\n  /**\n   * Getter for isActive\n   * @return {boolean}\n   */\n  get isActive(): boolean {\n    return this._isActive;\n  }\n\n  /**\n   * Setter for isActive\n   * @param {boolean} isActive\n   */\n  set isActive(isActive: boolean) {\n    this._isActive = isActive;\n  }\n\n  /**\n   * Getter for isSuspended\n   * @return {boolean}\n   */\n  get isSuspended(): boolean {\n    return this._isSuspended;\n  }\n\n  /**\n   * Setter for isSuspended\n   * @param {boolean} isSuspended\n   */\n  set isSuspended(isSuspended: boolean) {\n    this._isSuspended = isSuspended;\n  }\n\n  /**\n   * Getter for isCompleted\n   * @return {boolean}\n   */\n  get isCompleted(): boolean {\n    return this._isCompleted;\n  }\n\n  /**\n   * Setter for isCompleted\n   * @param {boolean} isCompleted\n   */\n  set isCompleted(isCompleted: boolean) {\n    this._isCompleted = isCompleted;\n  }\n\n  /**\n   * Getter for completionStatus\n   * @return {CompletionStatus}\n   */\n  get completionStatus(): CompletionStatus {\n    return this._completionStatus;\n  }\n\n  /**\n   * Setter for completionStatus\n   * @param {CompletionStatus} completionStatus\n   */\n  set completionStatus(completionStatus: CompletionStatus) {\n    this._completionStatus = completionStatus;\n    this._isCompleted = completionStatus === CompletionStatus.COMPLETED;\n  }\n\n  /**\n   * Getter for successStatus\n   * @return {SuccessStatus}\n   */\n  get successStatus(): SuccessStatus {\n    return this._successStatus;\n  }\n\n  /**\n   * Setter for successStatus\n   * @param {SuccessStatus} successStatus\n   */\n  set successStatus(successStatus: SuccessStatus) {\n    this._successStatus = successStatus;\n  }\n\n  /**\n   * Getter for attemptCount\n   * @return {number}\n   */\n  get attemptCount(): number {\n    return this._attemptCount;\n  }\n\n  /**\n   * Increment the attempt count\n   */\n  incrementAttemptCount(): void {\n    this._attemptCount++;\n  }\n\n  /**\n   * Getter for objectiveMeasureStatus\n   * @return {boolean}\n   */\n  get objectiveMeasureStatus(): boolean {\n    return this._objectiveMeasureStatus;\n  }\n\n  /**\n   * Setter for objectiveMeasureStatus\n   * @param {boolean} objectiveMeasureStatus\n   */\n  set objectiveMeasureStatus(objectiveMeasureStatus: boolean) {\n    this._objectiveMeasureStatus = objectiveMeasureStatus;\n  }\n\n  /**\n   * Getter for objectiveNormalizedMeasure\n   * @return {number}\n   */\n  get objectiveNormalizedMeasure(): number {\n    return this._objectiveNormalizedMeasure;\n  }\n\n  /**\n   * Setter for objectiveNormalizedMeasure\n   * @param {number} objectiveNormalizedMeasure\n   */\n  set objectiveNormalizedMeasure(objectiveNormalizedMeasure: number) {\n    this._objectiveNormalizedMeasure = objectiveNormalizedMeasure;\n  }\n\n  /**\n   * toJSON for Activity\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      id: this._id,\n      title: this._title,\n      isVisible: this._isVisible,\n      isActive: this._isActive,\n      isSuspended: this._isSuspended,\n      isCompleted: this._isCompleted,\n      completionStatus: this._completionStatus,\n      successStatus: this._successStatus,\n      attemptCount: this._attemptCount,\n      attemptCompletionAmount: this._attemptCompletionAmount,\n      attemptAbsoluteDuration: this._attemptAbsoluteDuration,\n      attemptExperiencedDuration: this._attemptExperiencedDuration,\n      activityAbsoluteDuration: this._activityAbsoluteDuration,\n      activityExperiencedDuration: this._activityExperiencedDuration,\n      objectiveSatisfiedStatus: this._objectiveSatisfiedStatus,\n      objectiveMeasureStatus: this._objectiveMeasureStatus,\n      objectiveNormalizedMeasure: this._objectiveNormalizedMeasure,\n      children: this._children.map((child) => child.toJSON()),\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\n\n/**\n * Class representing the SCORM 2004 activity tree\n */\nexport class ActivityTree extends BaseCMI {\n  private _root: Activity | null = null;\n  private _currentActivity: Activity | null = null;\n  private _suspendedActivity: Activity | null = null;\n  private _activities: Map<string, Activity> = new Map();\n\n  /**\n   * Constructor for ActivityTree\n   */\n  constructor() {\n    super(\"activityTree\");\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    if (this._root) {\n      this._root.initialize();\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._currentActivity = null;\n    this._suspendedActivity = null;\n    if (this._root) {\n      this._root.reset();\n    }\n  }\n\n  /**\n   * Getter for root\n   * @return {Activity | null}\n   */\n  get root(): Activity | null {\n    return this._root;\n  }\n\n  /**\n   * Setter for root\n   * @param {Activity} root\n   */\n  set root(root: Activity | null) {\n    if (root !== null && !(root instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".root\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._root = root;\n    if (root) {\n      this._activities.set(root.id, root);\n      this._addActivitiesToMap(root);\n    }\n  }\n\n  /**\n   * Recursively add activities to the activities map\n   * @param {Activity} activity\n   * @private\n   */\n  private _addActivitiesToMap(activity: Activity): void {\n    for (const child of activity.children) {\n      this._activities.set(child.id, child);\n      this._addActivitiesToMap(child);\n    }\n  }\n\n  /**\n   * Getter for currentActivity\n   * @return {Activity | null}\n   */\n  get currentActivity(): Activity | null {\n    return this._currentActivity;\n  }\n\n  /**\n   * Setter for currentActivity\n   * @param {Activity | null} activity\n   */\n  set currentActivity(activity: Activity | null) {\n    if (activity !== null && !(activity instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".currentActivity\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n\n    // If there's already a current activity, deactivate it\n    if (this._currentActivity) {\n      this._currentActivity.isActive = false;\n    }\n\n    // Set the new current activity and activate it\n    this._currentActivity = activity;\n    if (activity) {\n      activity.isActive = true;\n    }\n  }\n\n  /**\n   * Getter for suspendedActivity\n   * @return {Activity | null}\n   */\n  get suspendedActivity(): Activity | null {\n    return this._suspendedActivity;\n  }\n\n  /**\n   * Setter for suspendedActivity\n   * @param {Activity | null} activity\n   */\n  set suspendedActivity(activity: Activity | null) {\n    if (activity !== null && !(activity instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".suspendedActivity\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n\n    // If there's already a suspended activity, unsuspend it\n    if (this._suspendedActivity) {\n      this._suspendedActivity.isSuspended = false;\n    }\n\n    // Set the new suspended activity and mark it as suspended\n    this._suspendedActivity = activity;\n    if (activity) {\n      activity.isSuspended = true;\n    }\n  }\n\n  /**\n   * Get an activity by ID\n   * @param {string} id - The ID of the activity to get\n   * @return {Activity | undefined} - The activity with the given ID, or undefined if not found\n   */\n  getActivity(id: string): Activity | undefined {\n    return this._activities.get(id);\n  }\n\n  /**\n   * Get all activities in the tree\n   * @return {Activity[]} - An array of all activities in the tree\n   */\n  getAllActivities(): Activity[] {\n    return Array.from(this._activities.values());\n  }\n\n  /**\n   * Get the parent of an activity\n   * @param {Activity} activity - The activity to get the parent of\n   * @return {Activity | null} - The parent of the activity, or null if it has no parent\n   */\n  getParent(activity: Activity): Activity | null {\n    return activity.parent;\n  }\n\n  /**\n   * Get the children of an activity\n   * @param {Activity} activity - The activity to get the children of\n   * @return {Activity[]} - An array of the activity's children\n   */\n  getChildren(activity: Activity): Activity[] {\n    return activity.children;\n  }\n\n  /**\n   * Get the siblings of an activity\n   * @param {Activity} activity - The activity to get the siblings of\n   * @return {Activity[]} - An array of the activity's siblings\n   */\n  getSiblings(activity: Activity): Activity[] {\n    if (!activity.parent) {\n      return [];\n    }\n    return activity.parent.children.filter((child) => child !== activity);\n  }\n\n  /**\n   * Get the next sibling of an activity\n   * @param {Activity} activity - The activity to get the next sibling of\n   * @return {Activity | null} - The next sibling of the activity, or null if it has no next sibling\n   */\n  getNextSibling(activity: Activity): Activity | null {\n    if (!activity.parent) {\n      return null;\n    }\n    const siblings = activity.parent.children;\n    const index = siblings.indexOf(activity);\n    if (index === -1 || index === siblings.length - 1) {\n      return null;\n    }\n    return siblings[index + 1];\n  }\n\n  /**\n   * Get the previous sibling of an activity\n   * @param {Activity} activity - The activity to get the previous sibling of\n   * @return {Activity | null} - The previous sibling of the activity, or null if it has no previous sibling\n   */\n  getPreviousSibling(activity: Activity): Activity | null {\n    if (!activity.parent) {\n      return null;\n    }\n    const siblings = activity.parent.children;\n    const index = siblings.indexOf(activity);\n    if (index <= 0) {\n      return null;\n    }\n    return siblings[index - 1];\n  }\n\n  /**\n   * Get the first child of an activity\n   * @param {Activity} activity - The activity to get the first child of\n   * @return {Activity | null} - The first child of the activity, or null if it has no children\n   */\n  getFirstChild(activity: Activity): Activity | null {\n    if (activity.children.length === 0) {\n      return null;\n    }\n    return activity.children[0];\n  }\n\n  /**\n   * Get the last child of an activity\n   * @param {Activity} activity - The activity to get the last child of\n   * @return {Activity | null} - The last child of the activity, or null if it has no children\n   */\n  getLastChild(activity: Activity): Activity | null {\n    if (activity.children.length === 0) {\n      return null;\n    }\n    return activity.children[activity.children.length - 1];\n  }\n\n  /**\n   * Get the common ancestor of two activities\n   * @param {Activity} activity1 - The first activity\n   * @param {Activity} activity2 - The second activity\n   * @return {Activity | null} - The common ancestor of the two activities, or null if they have no common ancestor\n   */\n  getCommonAncestor(activity1: Activity, activity2: Activity): Activity | null {\n    // Get the path from the root to activity1\n    const path1: Activity[] = [];\n    let current: Activity | null = activity1;\n    while (current) {\n      path1.unshift(current);\n      current = current.parent;\n    }\n\n    // Check if activity2 is in the path from the root to activity1\n    current = activity2;\n    while (current) {\n      if (path1.includes(current)) {\n        return current;\n      }\n      current = current.parent;\n    }\n\n    return null;\n  }\n\n  /**\n   * toJSON for ActivityTree\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      root: this._root,\n      currentActivity: this._currentActivity ? this._currentActivity.id : null,\n      suspendedActivity: this._suspendedActivity ? this._suspendedActivity.id : null,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\n\n/**\n * Class representing SCORM 2004 sequencing controls\n */\nexport class SequencingControls extends BaseCMI {\n  // Sequencing Control Modes\n  private _enabled: boolean = true;\n  private _choiceExit: boolean = true;\n  private _flow: boolean = false;\n  private _forwardOnly: boolean = false;\n  private _useCurrentAttemptObjectiveInfo: boolean = true;\n  private _useCurrentAttemptProgressInfo: boolean = true;\n\n  // Constrain Choice Controls\n  private _preventActivation: boolean = false;\n  private _constrainChoice: boolean = false;\n\n  // Rollup Controls\n  private _rollupObjectiveSatisfied: boolean = true;\n  private _rollupProgressCompletion: boolean = true;\n  private _objectiveMeasureWeight: number = 1.0;\n\n  /**\n   * Constructor for SequencingControls\n   */\n  constructor() {\n    super(\"sequencingControls\");\n  }\n\n  /**\n   * Reset the sequencing controls to their default values\n   */\n  reset() {\n    this._initialized = false;\n    this._enabled = true;\n    this._choiceExit = true;\n    this._flow = false;\n    this._forwardOnly = false;\n    this._useCurrentAttemptObjectiveInfo = true;\n    this._useCurrentAttemptProgressInfo = true;\n    this._preventActivation = false;\n    this._constrainChoice = false;\n    this._rollupObjectiveSatisfied = true;\n    this._rollupProgressCompletion = true;\n    this._objectiveMeasureWeight = 1.0;\n  }\n\n  /**\n   * Getter for enabled\n   * @return {boolean}\n   */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  /**\n   * Setter for enabled\n   * @param {boolean} enabled\n   */\n  set enabled(enabled: boolean) {\n    this._enabled = enabled;\n  }\n\n  /**\n   * Getter for choiceExit\n   * @return {boolean}\n   */\n  get choiceExit(): boolean {\n    return this._choiceExit;\n  }\n\n  /**\n   * Setter for choiceExit\n   * @param {boolean} choiceExit\n   */\n  set choiceExit(choiceExit: boolean) {\n    this._choiceExit = choiceExit;\n  }\n\n  /**\n   * Getter for flow\n   * @return {boolean}\n   */\n  get flow(): boolean {\n    return this._flow;\n  }\n\n  /**\n   * Setter for flow\n   * @param {boolean} flow\n   */\n  set flow(flow: boolean) {\n    this._flow = flow;\n  }\n\n  /**\n   * Getter for forwardOnly\n   * @return {boolean}\n   */\n  get forwardOnly(): boolean {\n    return this._forwardOnly;\n  }\n\n  /**\n   * Setter for forwardOnly\n   * @param {boolean} forwardOnly\n   */\n  set forwardOnly(forwardOnly: boolean) {\n    this._forwardOnly = forwardOnly;\n  }\n\n  /**\n   * Getter for useCurrentAttemptObjectiveInfo\n   * @return {boolean}\n   */\n  get useCurrentAttemptObjectiveInfo(): boolean {\n    return this._useCurrentAttemptObjectiveInfo;\n  }\n\n  /**\n   * Setter for useCurrentAttemptObjectiveInfo\n   * @param {boolean} useCurrentAttemptObjectiveInfo\n   */\n  set useCurrentAttemptObjectiveInfo(useCurrentAttemptObjectiveInfo: boolean) {\n    this._useCurrentAttemptObjectiveInfo = useCurrentAttemptObjectiveInfo;\n  }\n\n  /**\n   * Getter for useCurrentAttemptProgressInfo\n   * @return {boolean}\n   */\n  get useCurrentAttemptProgressInfo(): boolean {\n    return this._useCurrentAttemptProgressInfo;\n  }\n\n  /**\n   * Setter for useCurrentAttemptProgressInfo\n   * @param {boolean} useCurrentAttemptProgressInfo\n   */\n  set useCurrentAttemptProgressInfo(useCurrentAttemptProgressInfo: boolean) {\n    this._useCurrentAttemptProgressInfo = useCurrentAttemptProgressInfo;\n  }\n\n  /**\n   * Getter for preventActivation\n   * @return {boolean}\n   */\n  get preventActivation(): boolean {\n    return this._preventActivation;\n  }\n\n  /**\n   * Setter for preventActivation\n   * @param {boolean} preventActivation\n   */\n  set preventActivation(preventActivation: boolean) {\n    this._preventActivation = preventActivation;\n  }\n\n  /**\n   * Getter for constrainChoice\n   * @return {boolean}\n   */\n  get constrainChoice(): boolean {\n    return this._constrainChoice;\n  }\n\n  /**\n   * Setter for constrainChoice\n   * @param {boolean} constrainChoice\n   */\n  set constrainChoice(constrainChoice: boolean) {\n    this._constrainChoice = constrainChoice;\n  }\n\n  /**\n   * Getter for rollupObjectiveSatisfied\n   * @return {boolean}\n   */\n  get rollupObjectiveSatisfied(): boolean {\n    return this._rollupObjectiveSatisfied;\n  }\n\n  /**\n   * Setter for rollupObjectiveSatisfied\n   * @param {boolean} rollupObjectiveSatisfied\n   */\n  set rollupObjectiveSatisfied(rollupObjectiveSatisfied: boolean) {\n    this._rollupObjectiveSatisfied = rollupObjectiveSatisfied;\n  }\n\n  /**\n   * Getter for rollupProgressCompletion\n   * @return {boolean}\n   */\n  get rollupProgressCompletion(): boolean {\n    return this._rollupProgressCompletion;\n  }\n\n  /**\n   * Setter for rollupProgressCompletion\n   * @param {boolean} rollupProgressCompletion\n   */\n  set rollupProgressCompletion(rollupProgressCompletion: boolean) {\n    this._rollupProgressCompletion = rollupProgressCompletion;\n  }\n\n  /**\n   * Getter for objectiveMeasureWeight\n   * @return {number}\n   */\n  get objectiveMeasureWeight(): number {\n    return this._objectiveMeasureWeight;\n  }\n\n  /**\n   * Setter for objectiveMeasureWeight\n   * @param {number} objectiveMeasureWeight\n   */\n  set objectiveMeasureWeight(objectiveMeasureWeight: number) {\n    if (objectiveMeasureWeight >= 0 && objectiveMeasureWeight <= 1) {\n      this._objectiveMeasureWeight = objectiveMeasureWeight;\n    }\n  }\n\n  /**\n   * Check if choice navigation is allowed\n   * @return {boolean} - True if choice navigation is allowed, false otherwise\n   */\n  isChoiceNavigationAllowed(): boolean {\n    return this._enabled && !this._constrainChoice;\n  }\n\n  /**\n   * Check if flow navigation is allowed\n   * @return {boolean} - True if flow navigation is allowed, false otherwise\n   */\n  isFlowNavigationAllowed(): boolean {\n    return this._enabled && this._flow;\n  }\n\n  /**\n   * Check if forward navigation is allowed\n   * @return {boolean} - True if forward navigation is allowed, false otherwise\n   */\n  isForwardNavigationAllowed(): boolean {\n    return this._enabled && (!this._forwardOnly || this._flow);\n  }\n\n  /**\n   * Check if backward navigation is allowed\n   * @return {boolean} - True if backward navigation is allowed, false otherwise\n   */\n  isBackwardNavigationAllowed(): boolean {\n    return this._enabled && !this._forwardOnly;\n  }\n\n  /**\n   * toJSON for SequencingControls\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      enabled: this._enabled,\n      choiceExit: this._choiceExit,\n      flow: this._flow,\n      forwardOnly: this._forwardOnly,\n      useCurrentAttemptObjectiveInfo: this._useCurrentAttemptObjectiveInfo,\n      useCurrentAttemptProgressInfo: this._useCurrentAttemptProgressInfo,\n      preventActivation: this._preventActivation,\n      constrainChoice: this._constrainChoice,\n      rollupObjectiveSatisfied: this._rollupObjectiveSatisfied,\n      rollupProgressCompletion: this._rollupProgressCompletion,\n      objectiveMeasureWeight: this._objectiveMeasureWeight,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { ActivityTree } from \"./activity_tree\";\nimport { RuleActionType, SequencingRules } from \"./sequencing_rules\";\nimport { SequencingControls } from \"./sequencing_controls\";\nimport { RollupRules } from \"./rollup_rules\";\nimport { ADLNav } from \"../adl\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\n\n/**\n * Class representing SCORM 2004 sequencing\n */\nexport class Sequencing extends BaseCMI {\n  private _activityTree: ActivityTree;\n  private _sequencingRules: SequencingRules;\n  private _sequencingControls: SequencingControls;\n  private _rollupRules: RollupRules;\n  private _adlNav: ADLNav | null = null;\n\n  /**\n   * Constructor for Sequencing\n   */\n  constructor() {\n    super(\"sequencing\");\n    this._activityTree = new ActivityTree();\n    this._sequencingRules = new SequencingRules();\n    this._sequencingControls = new SequencingControls();\n    this._rollupRules = new RollupRules();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this._activityTree.initialize();\n    this._sequencingRules.initialize();\n    this._sequencingControls.initialize();\n    this._rollupRules.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._activityTree.reset();\n    this._sequencingRules.reset();\n    this._sequencingControls.reset();\n    this._rollupRules.reset();\n  }\n\n  /**\n   * Getter for activityTree\n   * @return {ActivityTree}\n   */\n  get activityTree(): ActivityTree {\n    return this._activityTree;\n  }\n\n  /**\n   * Setter for activityTree\n   * @param {ActivityTree} activityTree\n   */\n  set activityTree(activityTree: ActivityTree) {\n    if (!(activityTree instanceof ActivityTree)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".activityTree\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._activityTree = activityTree;\n  }\n\n  /**\n   * Getter for sequencingRules\n   * @return {SequencingRules}\n   */\n  get sequencingRules(): SequencingRules {\n    return this._sequencingRules;\n  }\n\n  /**\n   * Setter for sequencingRules\n   * @param {SequencingRules} sequencingRules\n   */\n  set sequencingRules(sequencingRules: SequencingRules) {\n    if (!(sequencingRules instanceof SequencingRules)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".sequencingRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._sequencingRules = sequencingRules;\n  }\n\n  /**\n   * Getter for sequencingControls\n   * @return {SequencingControls}\n   */\n  get sequencingControls(): SequencingControls {\n    return this._sequencingControls;\n  }\n\n  /**\n   * Setter for sequencingControls\n   * @param {SequencingControls} sequencingControls\n   */\n  set sequencingControls(sequencingControls: SequencingControls) {\n    if (!(sequencingControls instanceof SequencingControls)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".sequencingControls\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._sequencingControls = sequencingControls;\n  }\n\n  /**\n   * Getter for rollupRules\n   * @return {RollupRules}\n   */\n  get rollupRules(): RollupRules {\n    return this._rollupRules;\n  }\n\n  /**\n   * Setter for rollupRules\n   * @param {RollupRules} rollupRules\n   */\n  set rollupRules(rollupRules: RollupRules) {\n    if (!(rollupRules instanceof RollupRules)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".rollupRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._rollupRules = rollupRules;\n  }\n\n  /**\n   * Getter for adlNav\n   * @return {ADLNav | null}\n   */\n  get adlNav(): ADLNav | null {\n    return this._adlNav;\n  }\n\n  /**\n   * Setter for adlNav\n   * @param {ADLNav | null} adlNav\n   */\n  set adlNav(adlNav: ADLNav | null) {\n    this._adlNav = adlNav;\n  }\n\n  /**\n   * Process navigation request\n   * @param {string} request - The navigation request\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processNavigationRequest(request: string): boolean {\n    if (!this._adlNav) {\n      return false;\n    }\n\n    // Set the navigation request\n    this._adlNav.request = request;\n\n    // Get the current activity\n    const currentActivity = this._activityTree.currentActivity;\n    if (!currentActivity) {\n      return false;\n    }\n\n    // Evaluate pre-condition rules\n    const preConditionAction = this._sequencingRules.evaluatePreConditionRules(currentActivity);\n    if (preConditionAction) {\n      // Handle pre-condition action\n      switch (preConditionAction) {\n        case RuleActionType.SKIP:\n          // Skip this activity\n          return false;\n        case RuleActionType.DISABLED:\n          // Disable this activity\n          return false;\n        case RuleActionType.HIDE_FROM_CHOICE:\n          // Hide this activity from choice\n          return false;\n        case RuleActionType.STOP_FORWARD_TRAVERSAL:\n          // Stop forward traversal\n          return false;\n        default:\n          break;\n      }\n    }\n\n    // Process the navigation request based on the request type\n    switch (request) {\n      case \"continue\":\n        return this.processContinueRequest(currentActivity);\n      case \"previous\":\n        return this.processPreviousRequest(currentActivity);\n      case \"choice\":\n        // Choice navigation would require additional parameters\n        return false;\n      case \"exit\":\n        return this.processExitRequest(currentActivity);\n      case \"exitAll\":\n        return this.processExitAllRequest();\n      case \"abandon\":\n        return this.processAbandonRequest(currentActivity);\n      case \"abandonAll\":\n        return this.processAbandonAllRequest();\n      case \"suspendAll\":\n        return this.processSuspendAllRequest(currentActivity);\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Process continue request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processContinueRequest(currentActivity: Activity): boolean {\n    // Check if continue is allowed\n    if (!this._sequencingControls.isForwardNavigationAllowed()) {\n      return false;\n    }\n\n    // Get the next activity\n    const nextActivity = this._activityTree.getNextSibling(currentActivity);\n    if (!nextActivity) {\n      return false;\n    }\n\n    // Evaluate exit condition rules\n    const exitConditionAction = this._sequencingRules.evaluateExitConditionRules(currentActivity);\n    if (exitConditionAction) {\n      // Handle exit condition action\n      switch (exitConditionAction) {\n        case RuleActionType.EXIT_PARENT: {\n          // Exit to parent\n          const parent = currentActivity.parent;\n          if (parent) {\n            this._activityTree.currentActivity = parent;\n            return true;\n          }\n          return false;\n        }\n        case RuleActionType.EXIT_ALL:\n          // Exit all\n          this._activityTree.currentActivity = null;\n          return true;\n        default:\n          break;\n      }\n    }\n\n    // Set the next activity as current\n    this._activityTree.currentActivity = nextActivity;\n\n    // Evaluate post-condition rules\n    const postConditionAction = this._sequencingRules.evaluatePostConditionRules(nextActivity);\n    if (postConditionAction) {\n      // Handle post-condition action\n      switch (postConditionAction) {\n        case RuleActionType.RETRY:\n          // Retry this activity\n          nextActivity.incrementAttemptCount();\n          return true;\n        case RuleActionType.RETRY_ALL:\n          // Retry all activities\n          this._activityTree.getAllActivities().forEach((activity) => {\n            activity.incrementAttemptCount();\n          });\n          return true;\n        case RuleActionType.CONTINUE:\n          // Continue to next activity\n          return this.processContinueRequest(nextActivity);\n        case RuleActionType.PREVIOUS:\n          // Go to previous activity\n          return this.processPreviousRequest(nextActivity);\n        case RuleActionType.EXIT:\n          // Exit this activity\n          this._activityTree.currentActivity = currentActivity;\n          return true;\n        default:\n          break;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Process previous request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processPreviousRequest(currentActivity: Activity): boolean {\n    // Check if backward navigation is allowed\n    if (!this._sequencingControls.isBackwardNavigationAllowed()) {\n      return false;\n    }\n\n    // Get the previous activity\n    const previousActivity = this._activityTree.getPreviousSibling(currentActivity);\n    if (!previousActivity) {\n      return false;\n    }\n\n    // Evaluate exit condition rules\n    const exitConditionAction = this._sequencingRules.evaluateExitConditionRules(currentActivity);\n    if (exitConditionAction) {\n      // Handle exit condition action\n      switch (exitConditionAction) {\n        case RuleActionType.EXIT_PARENT: {\n          // Exit to parent\n          const parent = currentActivity.parent;\n          if (parent) {\n            this._activityTree.currentActivity = parent;\n            return true;\n          }\n          return false;\n        }\n        case RuleActionType.EXIT_ALL:\n          // Exit all\n          this._activityTree.currentActivity = null;\n          return true;\n        default:\n          break;\n      }\n    }\n\n    // Set the previous activity as current\n    this._activityTree.currentActivity = previousActivity;\n\n    // Evaluate post-condition rules\n    const postConditionAction = this._sequencingRules.evaluatePostConditionRules(previousActivity);\n    if (postConditionAction) {\n      // Handle post-condition action\n      switch (postConditionAction) {\n        case RuleActionType.RETRY:\n          // Retry this activity\n          previousActivity.incrementAttemptCount();\n          return true;\n        case RuleActionType.RETRY_ALL:\n          // Retry all activities\n          this._activityTree.getAllActivities().forEach((activity) => {\n            activity.incrementAttemptCount();\n          });\n          return true;\n        case RuleActionType.CONTINUE:\n          // Continue to next activity\n          return this.processContinueRequest(previousActivity);\n        case RuleActionType.PREVIOUS:\n          // Go to previous activity\n          return this.processPreviousRequest(previousActivity);\n        case RuleActionType.EXIT:\n          // Exit this activity\n          this._activityTree.currentActivity = currentActivity;\n          return true;\n        default:\n          break;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Process exit request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processExitRequest(currentActivity: Activity): boolean {\n    // Check if exit is allowed\n    if (!this._sequencingControls.choiceExit) {\n      return false;\n    }\n\n    // Get the parent activity\n    const parent = currentActivity.parent;\n    if (!parent) {\n      return false;\n    }\n\n    // Set the parent activity as current\n    this._activityTree.currentActivity = parent;\n\n    return true;\n  }\n\n  /**\n   * Process exit all request\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processExitAllRequest(): boolean {\n    // Check if exit is allowed\n    if (!this._sequencingControls.choiceExit) {\n      return false;\n    }\n\n    // Set no activity as current\n    this._activityTree.currentActivity = null;\n\n    return true;\n  }\n\n  /**\n   * Process abandon request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processAbandonRequest(currentActivity: Activity): boolean {\n    // Get the parent activity\n    const parent = currentActivity.parent;\n    if (!parent) {\n      return false;\n    }\n\n    // Set the parent activity as current without processing exit rules\n    this._activityTree.currentActivity = parent;\n\n    return true;\n  }\n\n  /**\n   * Process abandon all request\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processAbandonAllRequest(): boolean {\n    // Set no activity as current without processing exit rules\n    this._activityTree.currentActivity = null;\n\n    return true;\n  }\n\n  /**\n   * Process suspend all request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processSuspendAllRequest(currentActivity: Activity): boolean {\n    // Set the current activity as suspended\n    this._activityTree.suspendedActivity = currentActivity;\n    this._activityTree.currentActivity = null;\n\n    return true;\n  }\n\n  /**\n   * Process rollup for the entire activity tree\n   */\n  processRollup(): void {\n    // Get the root activity\n    const root = this._activityTree.root;\n    if (!root) {\n      return;\n    }\n\n    // Process rollup from the bottom up\n    this._processRollupRecursive(root);\n  }\n\n  /**\n   * Process rollup recursively\n   * @param {Activity} activity - The activity to process rollup for\n   * @private\n   */\n  private _processRollupRecursive(activity: Activity): void {\n    // Process rollup for children first\n    for (const child of activity.children) {\n      this._processRollupRecursive(child);\n    }\n\n    // Process rollup for this activity\n    this._rollupRules.processRollup(activity);\n  }\n\n  /**\n   * toJSON for Sequencing\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      activityTree: this._activityTree,\n      sequencingRules: this._sequencingRules,\n      sequencingControls: this._sequencingControls,\n      rollupRules: this._rollupRules,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import BaseAPI from \"./BaseAPI\";\nimport { CMI } from \"./cmi/scorm2004/cmi\";\nimport * as Utilities from \"./utilities\";\nimport { StringKeyMap, stringMatches } from \"./utilities\";\nimport { global_constants, scorm2004_constants } from \"./constants/api_constants\";\nimport { scorm2004_errors } from \"./constants/error_codes\";\nimport { CMIObjectivesObject } from \"./cmi/scorm2004/objectives\";\nimport { ADL, ADLDataObject } from \"./cmi/scorm2004/adl\";\nimport { CommitObject, ResultObject, ScoreObject, Settings } from \"./types/api_types\";\nimport {\n  ActivitySettings,\n  RollupRuleSettings,\n  RollupRulesSettings,\n  SequencingControlsSettings,\n  SequencingRuleSettings,\n  SequencingRulesSettings,\n  SequencingSettings,\n} from \"./types/sequencing_types\";\nimport { RuleCondition, SequencingRule } from \"./cmi/scorm2004/sequencing/sequencing_rules\";\nimport { RollupCondition, RollupRule } from \"./cmi/scorm2004/sequencing/rollup_rules\";\nimport { scorm2004_regex } from \"./constants/regex\"; // Import functions from extracted modules\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport {\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n} from \"./cmi/scorm2004/interactions\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { CorrectResponses, ResponseType } from \"./constants/response_constants\";\nimport { CMICommentsObject } from \"./cmi/scorm2004/comments\";\nimport ValidLanguages from \"./constants/language_constants\";\nimport { CompletionStatus, SuccessStatus } from \"./constants/enums\";\nimport { Sequencing } from \"./cmi/scorm2004/sequencing/sequencing\";\nimport { Activity } from \"./cmi/scorm2004/sequencing/activity\";\n\n/**\n * API class for SCORM 2004\n */\nclass Scorm2004API extends BaseAPI {\n  private _version: string = \"1.0\";\n  private _globalObjectives: CMIObjectivesObject[] = [];\n  private _sequencing: Sequencing;\n  private _extractedScoItemIds: string[] = [];\n\n  /**\n   * Constructor for SCORM 2004 API\n   * @param {Settings} settings\n   */\n  constructor(settings?: Settings) {\n    if (settings) {\n      if (settings.mastery_override === undefined) {\n        settings.mastery_override = false;\n      }\n    }\n\n    super(scorm2004_errors, settings);\n\n    this.cmi = new CMI();\n    this.adl = new ADL();\n    this._sequencing = new Sequencing();\n\n    // Connect the sequencing object to the ADL's sequencing property\n    // The Sequencing object is used for both configuration and runtime navigation processing\n    // It needs to be attached to the ADL object for runtime navigation requests (adl.nav.request)\n    this.adl.sequencing = this._sequencing;\n\n    // Configure sequencing if settings are provided\n    if (settings?.sequencing) {\n      this.configureSequencing(settings.sequencing);\n    }\n\n    // Rename functions to match 2004 Spec and expose to modules\n    this.Initialize = this.lmsInitialize;\n    this.Terminate = this.lmsFinish;\n    this.GetValue = this.lmsGetValue;\n    this.SetValue = this.lmsSetValue;\n    this.Commit = this.lmsCommit;\n    this.GetLastError = this.lmsGetLastError;\n    this.GetErrorString = this.lmsGetErrorString;\n    this.GetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  public cmi: CMI;\n  public adl: ADL;\n\n  public Initialize: () => string;\n  public Terminate: () => string;\n  public GetValue: (CMIElement: string) => string;\n  public SetValue: (CMIElement: string, value: any) => string;\n  public Commit: () => string;\n  public GetLastError: () => string;\n  public GetErrorString: (CMIErrorCode: string | number) => string;\n  public GetDiagnostic: (CMIErrorCode: string | number) => string;\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset(settings?: Settings) {\n    this.commonReset(settings);\n\n    this.cmi?.reset();\n    this.adl?.reset();\n    this._sequencing?.reset();\n  }\n\n  /**\n   * Getter for _version\n   * @return {string}\n   */\n  get version(): string {\n    return this._version;\n  }\n\n  /**\n   * Getter for _globalObjectives\n   */\n  get globalObjectives(): CMIObjectivesObject[] {\n    return this._globalObjectives;\n  }\n\n  /**\n   * Initialize function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize(): string {\n    this.cmi.initialize();\n    return this.initialize(\n      \"Initialize\",\n      \"LMS was already initialized!\",\n      \"LMS is already finished!\",\n    );\n  }\n\n  /**\n   * Terminate function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish(): string {\n    (async () => {\n      await this.internalFinish();\n    })();\n    return global_constants.SCORM_TRUE;\n  }\n\n  async internalFinish(): Promise<string> {\n    const result = await this.terminate(\"Terminate\", true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      if (this.adl.nav.request !== \"_none_\") {\n        const navActions: { [key: string]: string } = {\n          continue: \"SequenceNext\",\n          previous: \"SequencePrevious\",\n          choice: \"SequenceChoice\",\n          jump: \"SequenceJump\",\n          exit: \"SequenceExit\",\n          exitAll: \"SequenceExitAll\",\n          abandon: \"SequenceAbandon\",\n          abandonAll: \"SequenceAbandonAll\",\n        };\n\n        let request = this.adl.nav.request;\n        const choiceJumpRegex = new RegExp(scorm2004_regex.NAVEvent);\n        const matches = request.match(choiceJumpRegex);\n        let target = \"\";\n        if (matches) {\n          if (matches.groups?.choice_target) {\n            target = matches.groups?.choice_target;\n            request = \"choice\";\n          } else if (matches.groups?.jump_target) {\n            target = matches.groups?.jump_target;\n            request = \"jump\";\n          }\n        }\n        const action = navActions[request];\n        if (action) {\n          this.processListeners(action, \"adl.nav.request\", target);\n        }\n      } else if (this.settings.autoProgress) {\n        this.processListeners(\"SequenceNext\", null, \"next\");\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * GetValue function from SCORM 2004 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement: string): string {\n    const adlNavRequestRegex =\n      \"^adl\\\\.nav\\\\.request_valid\\\\.(choice|jump)\\\\.{target=\\\\S{0,}([a-zA-Z0-9-_]+)}$\";\n    if (stringMatches(CMIElement, adlNavRequestRegex)) {\n      const matches = CMIElement.match(adlNavRequestRegex);\n      const request = matches[1];\n      const target = matches[2].replace(\"{target=\", \"\").replace(\"}\", \"\");\n      if (request === \"choice\" || request === \"jump\") {\n        if (this.settings.scoItemIdValidator) {\n          return String(this.settings.scoItemIdValidator(target));\n        }\n        // If we have extracted IDs from sequencing, use those exclusively\n        if (this._extractedScoItemIds.length > 0) {\n          return String(this._extractedScoItemIds.includes(target));\n        }\n        // Otherwise use the scoItemIds from settings\n        return String(this.settings.scoItemIds.includes(target));\n      }\n    }\n    return this.getValue(\"GetValue\", true, CMIElement);\n  }\n\n  /**\n   * SetValue function from SCORM 2004 Spec\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement: string, value: any): string {\n    // Proceed with regular setting for non-objective elements or fallback behavior\n    return this.setValue(\"SetValue\", \"Commit\", true, CMIElement, value);\n  }\n\n  /**\n   * Commit function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit(): string {\n    if (this.settings.asyncCommit) {\n      this.scheduleCommit(500, \"Commit\");\n    } else {\n      (async () => {\n        await this.commit(\"Commit\", false);\n      })();\n    }\n    return global_constants.SCORM_TRUE;\n  }\n\n  /**\n   * GetLastError function from SCORM 2004 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError(): string {\n    return this.getLastError(\"GetLastError\");\n  }\n\n  /**\n   * GetErrorString function from SCORM 2004 Spec\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode: string | number): string {\n    return this.getErrorString(\"GetErrorString\", CMIErrorCode);\n  }\n\n  /**\n   * GetDiagnostic function from SCORM 2004 Spec\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode: string | number): string {\n    return this.getDiagnostic(\"GetDiagnostic\", CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object - delegates to CMIValueHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  override setCMIValue(CMIElement: string, value: any): string {\n    // Check if we're updating a global or local objective\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      const parts = CMIElement.split(\".\");\n      const index = Number(parts[2]);\n      const element_base = `cmi.objectives.${index}`;\n\n      let objective_id;\n      const setting_id = stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\\\\.id\");\n\n      if (setting_id) {\n        // If we're setting the objective ID, capture it directly\n        objective_id = value;\n      } else {\n        // Find existing objective ID if available\n        const objective = this.cmi.objectives.findObjectiveByIndex(index);\n        objective_id = objective ? objective.id : undefined;\n      }\n\n      // Check if the objective ID matches a global objective\n      const is_global = objective_id && this.settings.globalObjectiveIds.includes(objective_id);\n\n      if (is_global) {\n        // Locate or create an entry in _globalObjectives for the global objective\n        let global_index = this._globalObjectives.findIndex((obj) => obj.id === objective_id);\n\n        if (global_index === -1) {\n          global_index = this._globalObjectives.length;\n          const newGlobalObjective = new CMIObjectivesObject();\n          newGlobalObjective.id = objective_id;\n          this._globalObjectives.push(newGlobalObjective);\n        }\n\n        // Update the global objective\n        const global_element = CMIElement.replace(\n          element_base,\n          `_globalObjectives.${global_index}`,\n        );\n        this._commonSetCMIValue(\"SetGlobalObjectiveValue\", true, global_element, value);\n      }\n    }\n    return this._commonSetCMIValue(\"SetValue\", true, CMIElement, value);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array - delegates to CMIElementHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI|null}\n   */\n  getChildElement(CMIElement: string, value: any, foundFirstIndex: boolean): BaseCMI | null {\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      return new CMIObjectivesObject();\n    }\n\n    if (foundFirstIndex) {\n      if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+\")) {\n        return this.createCorrectResponsesObject(CMIElement, value);\n      } else if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+\")) {\n        return new CMIInteractionsObjectivesObject();\n      }\n    } else if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\")) {\n      return new CMIInteractionsObject();\n    }\n\n    if (stringMatches(CMIElement, \"cmi\\\\.comments_from_learner\\\\.\\\\d+\")) {\n      return new CMICommentsObject();\n    } else if (stringMatches(CMIElement, \"cmi\\\\.comments_from_lms\\\\.\\\\d+\")) {\n      return new CMICommentsObject(true);\n    }\n\n    if (stringMatches(CMIElement, \"adl\\\\.data\\\\.\\\\d+\")) {\n      return new ADLDataObject();\n    }\n\n    return null;\n  }\n\n  /**\n   * Creates a correct responses object for an interaction - delegates to CMIElementHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {BaseCMI|null}\n   */\n  private createCorrectResponsesObject(CMIElement: string, value: any): BaseCMI | null {\n    const parts = CMIElement.split(\".\");\n    const index = Number(parts[2]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    if (this.isInitialized()) {\n      if (typeof interaction === \"undefined\" || !interaction.type) {\n        this.throwSCORMError(CMIElement, scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED, CMIElement);\n        return null;\n      } else {\n        this.checkDuplicateChoiceResponse(CMIElement, interaction, value);\n        const response_type = CorrectResponses[interaction.type];\n        if (response_type) {\n          this.checkValidResponseType(CMIElement, response_type, value, interaction.type);\n        } else {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.GENERAL_SET_FAILURE,\n            `Incorrect Response Type: ${interaction.type}`,\n          );\n          return null;\n        }\n      }\n    }\n\n    if (this.lastErrorCode === \"0\") {\n      return new CMIInteractionsCorrectResponsesObject(interaction);\n    }\n\n    return null;\n  }\n\n  /**\n   * Checks for valid response types - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {ResponseType} response_type\n   * @param {any} value\n   * @param {string} interaction_type\n   */\n  checkValidResponseType(\n    CMIElement: string,\n    response_type: ResponseType,\n    value: any,\n    interaction_type: string,\n  ) {\n    let nodes = [];\n    if (response_type?.delimiter) {\n      nodes = String(value).split(response_type.delimiter);\n    } else {\n      nodes[0] = value;\n    }\n\n    if (nodes.length > 0 && nodes.length <= response_type.max) {\n      this.checkCorrectResponseValue(CMIElement, interaction_type, nodes, value);\n    } else if (nodes.length > response_type.max) {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.GENERAL_SET_FAILURE,\n        `Data Model Element Pattern Too Long: ${value}`,\n      );\n    }\n  }\n\n  /**\n   * Checks for duplicate 'choice' responses - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {CMIInteractionsObject} interaction\n   * @param {any} value\n   */\n  checkDuplicateChoiceResponse(CMIElement: string, interaction: CMIInteractionsObject, value: any) {\n    const interaction_count = interaction.correct_responses._count;\n    if (interaction.type === \"choice\") {\n      for (let i = 0; i < interaction_count && this.lastErrorCode === \"0\"; i++) {\n        const response = interaction.correct_responses.childArray[i];\n        if (response.pattern === value) {\n          this.throwSCORMError(CMIElement, scorm2004_errors.GENERAL_SET_FAILURE, `${value}`);\n        }\n      }\n    }\n  }\n\n  /**\n   * Validate correct response - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {*} value\n   */\n  validateCorrectResponse(CMIElement: string, value: any) {\n    const parts = CMIElement.split(\".\");\n    const index = Number(parts[2]);\n    const pattern_index = Number(parts[4]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    const interaction_count = interaction.correct_responses._count;\n    this.checkDuplicateChoiceResponse(CMIElement, interaction, value);\n\n    const response_type = CorrectResponses[interaction.type];\n    if (typeof response_type.limit === \"undefined\" || interaction_count <= response_type.limit) {\n      this.checkValidResponseType(CMIElement, response_type, value, interaction.type);\n\n      if (\n        (this.lastErrorCode === \"0\" &&\n          (!response_type.duplicate ||\n            !this.checkDuplicatedPattern(interaction.correct_responses, pattern_index, value))) ||\n        (this.lastErrorCode === \"0\" && value === \"\")\n      ) {\n        // do nothing, we want the inverse\n      } else {\n        if (this.lastErrorCode === \"0\") {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.GENERAL_SET_FAILURE,\n            `Data Model Element Pattern Already Exists: ${CMIElement} - ${value}`,\n          );\n        }\n      }\n    } else {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.GENERAL_SET_FAILURE,\n        `Data Model Element Collection Limit Reached: ${CMIElement} - ${value}`,\n      );\n    }\n  }\n\n  /**\n   * Gets a value from the CMI Object - delegates to CMIValueHandlerModule\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  override getCMIValue(CMIElement: string): any {\n    return this._commonGetCMIValue(\"GetValue\", true, CMIElement);\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {(string|number)} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  override getLmsErrorMessageDetails(errorNumber: string | number, detail: boolean): string {\n    let basicMessage = \"\";\n    let detailMessage = \"\";\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (scorm2004_constants.error_descriptions[errorNumber]) {\n      basicMessage = scorm2004_constants.error_descriptions[errorNumber].basicMessage;\n      detailMessage = scorm2004_constants.error_descriptions[errorNumber].detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Check to see if a correct_response value has been duplicated - delegates to ValidationModule\n   * @param {CMIArray} correct_response\n   * @param {number} current_index\n   * @param {*} value\n   * @return {boolean}\n   */\n  checkDuplicatedPattern(correct_response: CMIArray, current_index: number, value: any): boolean {\n    let found = false;\n    const count = correct_response._count;\n    for (let i = 0; i < count && !found; i++) {\n      if (i !== current_index && correct_response.childArray[i] === value) {\n        found = true;\n      }\n    }\n    return found;\n  }\n\n  /**\n   * Checks for a valid correct_response value - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {string} interaction_type\n   * @param {Array} nodes\n   * @param {*} value\n   */\n  checkCorrectResponseValue(\n    CMIElement: string,\n    interaction_type: string,\n    nodes: Array<any>,\n    value: any,\n  ) {\n    const response = CorrectResponses[interaction_type];\n    if (!response) {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.TYPE_MISMATCH,\n        `Incorrect Response Type: ${interaction_type}`,\n      );\n      return;\n    }\n    const formatRegex = new RegExp(response.format);\n    for (let i = 0; i < nodes.length && this.lastErrorCode === \"0\"; i++) {\n      if (interaction_type.match(\"^(fill-in|long-fill-in|matching|performance|sequencing)$\")) {\n        nodes[i] = this.removeCorrectResponsePrefixes(CMIElement, nodes[i]);\n      }\n\n      if (response?.delimiter2) {\n        const values = nodes[i].split(response.delimiter2);\n        if (values.length === 2) {\n          const matches = values[0].match(formatRegex);\n          if (!matches) {\n            this.throwSCORMError(\n              CMIElement,\n              scorm2004_errors.TYPE_MISMATCH,\n              `${interaction_type}: ${value}`,\n            );\n          } else {\n            if (!response.format2 || !values[1].match(new RegExp(response.format2))) {\n              this.throwSCORMError(\n                CMIElement,\n                scorm2004_errors.TYPE_MISMATCH,\n                `${interaction_type}: ${value}`,\n              );\n            }\n          }\n        } else {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.TYPE_MISMATCH,\n            `${interaction_type}: ${value}`,\n          );\n        }\n      } else {\n        const matches = nodes[i].match(formatRegex);\n        if ((!matches && value !== \"\") || (!matches && interaction_type === \"true-false\")) {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.TYPE_MISMATCH,\n            `${interaction_type}: ${value}`,\n          );\n        } else {\n          if (interaction_type === \"numeric\" && nodes.length > 1) {\n            if (Number(nodes[0]) > Number(nodes[1])) {\n              this.throwSCORMError(\n                CMIElement,\n                scorm2004_errors.TYPE_MISMATCH,\n                `${interaction_type}: ${value}`,\n              );\n            }\n          } else {\n            if (nodes[i] !== \"\" && response.unique) {\n              for (let j = 0; j < i && this.lastErrorCode === \"0\"; j++) {\n                if (nodes[i] === nodes[j]) {\n                  this.throwSCORMError(\n                    CMIElement,\n                    scorm2004_errors.TYPE_MISMATCH,\n                    `${interaction_type}: ${value}`,\n                  );\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove prefixes from correct_response - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {string} node\n   * @return {*}\n   */\n  removeCorrectResponsePrefixes(CMIElement: string, node: string): any {\n    let seenOrder = false;\n    let seenCase = false;\n    let seenLang = false;\n\n    const prefixRegex = new RegExp(\"^({(lang|case_matters|order_matters)=([^}]+)})\");\n    let matches = node.match(prefixRegex);\n    let langMatches = null;\n    while (matches) {\n      switch (matches[2]) {\n        case \"lang\":\n          langMatches = node.match(scorm2004_regex.CMILangcr);\n          if (langMatches) {\n            const lang = langMatches[3];\n            if (lang !== undefined && lang.length > 0) {\n              if (!ValidLanguages.includes(lang.toLowerCase())) {\n                this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n              }\n            }\n          }\n          seenLang = true;\n          break;\n        case \"case_matters\":\n          if (!seenLang && !seenOrder && !seenCase) {\n            if (matches[3] !== \"true\" && matches[3] !== \"false\") {\n              this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n            }\n          }\n\n          seenCase = true;\n          break;\n        case \"order_matters\":\n          if (!seenCase && !seenLang && !seenOrder) {\n            if (matches[3] !== \"true\" && matches[3] !== \"false\") {\n              this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n            }\n          }\n\n          seenOrder = true;\n          break;\n      }\n      node = node.substring(matches[1].length);\n      matches = node.match(prefixRegex);\n    }\n\n    return node;\n  }\n\n  /**\n   * Replace the whole API with another\n   * @param {Scorm2004API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI: Scorm2004API) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.adl = newAPI.adl;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit - delegates to DataSerializationModule\n   *\n   * @param {boolean} terminateCommit\n   * @return {object|Array}\n   */\n  renderCommitCMI(terminateCommit: boolean): StringKeyMap | Array<any> {\n    const cmiExport: StringKeyMap = this.renderCMIToJSONObject();\n\n    if (terminateCommit) {\n      (cmiExport.cmi as any).total_time = (this.cmi as any).getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened: StringKeyMap = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case \"flattened\":\n        return Utilities.flatten(cmiExport);\n      case \"params\":\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case \"json\":\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit - delegates to DataSerializationModule\n   * @param {boolean} terminateCommit\n   * @return {CommitObject}\n   */\n  renderCommitObject(terminateCommit: boolean): CommitObject {\n    const cmiExport = this.renderCommitCMI(terminateCommit);\n    const totalTimeDuration = this.cmi.getCurrentTotalTime();\n    const totalTimeSeconds = Utilities.getDurationAsSeconds(\n      totalTimeDuration,\n      scorm2004_regex.CMITimespan,\n    );\n\n    let completionStatus = CompletionStatus.UNKNOWN;\n    let successStatus = SuccessStatus.UNKNOWN;\n    if (this.cmi.completion_status) {\n      if (this.cmi.completion_status === \"completed\") {\n        completionStatus = CompletionStatus.COMPLETED;\n      } else if (this.cmi.completion_status === \"incomplete\") {\n        completionStatus = CompletionStatus.INCOMPLETE;\n      }\n    }\n    if (this.cmi.success_status) {\n      if (this.cmi.success_status === \"passed\") {\n        successStatus = SuccessStatus.PASSED;\n      } else if (this.cmi.success_status === \"failed\") {\n        successStatus = SuccessStatus.FAILED;\n      }\n    }\n\n    const score = this.cmi.score;\n    let scoreObject: ScoreObject = null;\n    if (score) {\n      scoreObject = {};\n\n      if (!Number.isNaN(Number.parseFloat(score.raw))) {\n        scoreObject.raw = Number.parseFloat(score.raw);\n      }\n      if (!Number.isNaN(Number.parseFloat(score.min))) {\n        scoreObject.min = Number.parseFloat(score.min);\n      }\n      if (!Number.isNaN(Number.parseFloat(score.max))) {\n        scoreObject.max = Number.parseFloat(score.max);\n      }\n      if (!Number.isNaN(Number.parseFloat(score.scaled))) {\n        scoreObject.scaled = Number.parseFloat(score.scaled);\n      }\n    }\n\n    const commitObject: CommitObject = {\n      completionStatus: completionStatus,\n      successStatus: successStatus,\n      totalTimeSeconds: totalTimeSeconds,\n      runtimeData: cmiExport as StringKeyMap,\n    };\n    if (scoreObject) {\n      commitObject.score = scoreObject;\n    }\n    return commitObject;\n  }\n\n  /**\n   * Attempts to store the data to the LMS - delegates to DataSerializationModule\n   *\n   * @param {boolean} terminateCommit\n   * @return {ResultObject}\n   */\n  async storeData(terminateCommit: boolean): Promise<ResultObject> {\n    if (terminateCommit) {\n      if (this.cmi.mode === \"normal\") {\n        if (this.cmi.credit === \"credit\") {\n          if (this.cmi.completion_threshold && this.cmi.progress_measure) {\n            if (this.cmi.progress_measure >= this.cmi.completion_threshold) {\n              this.cmi.completion_status = \"completed\";\n            } else {\n              this.cmi.completion_status = \"incomplete\";\n            }\n          }\n          if (this.cmi.scaled_passing_score && this.cmi.score.scaled) {\n            if (this.cmi.score.scaled >= this.cmi.scaled_passing_score) {\n              this.cmi.success_status = \"passed\";\n            } else {\n              this.cmi.success_status = \"failed\";\n            }\n          }\n        }\n      }\n    }\n\n    let navRequest = false;\n    if (\n      this.adl.nav.request !==\n        ((this.startingData?.adl as StringKeyMap)?.nav as StringKeyMap)?.request &&\n      this.adl.nav.request !== \"_none_\"\n    ) {\n      navRequest = true;\n    }\n\n    const commitObject = this.getCommitObject(terminateCommit);\n    if (typeof this.settings.lmsCommitUrl === \"string\") {\n      const result = await this.processHttpRequest(\n        this.settings.lmsCommitUrl,\n        {\n          commitObject: commitObject,\n        },\n        terminateCommit,\n      );\n\n      // Check if this is a sequencing call, and then call the necessary JS\n      if (\n        navRequest &&\n        result.navRequest !== undefined &&\n        result.navRequest !== \"\" &&\n        typeof result.navRequest === \"string\"\n      ) {\n        Function(`\"use strict\";(() => { ${result.navRequest} })()`)();\n      } else if (result?.navRequest && !navRequest) {\n        if (\n          typeof result.navRequest === \"object\" &&\n          Object.hasOwnProperty.call(result.navRequest, \"name\")\n        ) {\n          this.processListeners(result.navRequest.name as string, result.navRequest.data as string);\n        }\n      }\n\n      return result;\n    }\n\n    return {\n      result: \"true\",\n      errorCode: 0,\n    };\n  }\n\n  /**\n   * Configure sequencing based on provided settings\n   * @param {SequencingSettings} sequencingSettings - The sequencing settings\n   */\n  private configureSequencing(sequencingSettings: SequencingSettings): void {\n    // Configure activity tree\n    if (sequencingSettings.activityTree) {\n      this.configureActivityTree(sequencingSettings.activityTree);\n    }\n\n    // Configure sequencing rules\n    if (sequencingSettings.sequencingRules) {\n      this.configureSequencingRules(sequencingSettings.sequencingRules);\n    }\n\n    // Configure sequencing controls\n    if (sequencingSettings.sequencingControls) {\n      this.configureSequencingControls(sequencingSettings.sequencingControls);\n    }\n\n    // Configure rollup rules\n    if (sequencingSettings.rollupRules) {\n      this.configureRollupRules(sequencingSettings.rollupRules);\n    }\n  }\n\n  /**\n   * Configure activity tree based on provided settings\n   * @param {ActivitySettings} activityTreeSettings - The activity tree settings\n   */\n  private configureActivityTree(activityTreeSettings: ActivitySettings): void {\n    // Create root activity\n    const rootActivity = this.createActivity(activityTreeSettings);\n\n    // Create activity tree\n    const activityTree = this._sequencing.activityTree;\n    activityTree.root = rootActivity;\n\n    // Extract activity IDs for use as scoItemIds\n    this._extractedScoItemIds = this.extractActivityIds(rootActivity);\n  }\n\n  /**\n   * Extract all activity IDs from an activity and its children\n   * @param {Activity} activity - The activity to extract IDs from\n   * @return {string[]} - Array of activity IDs\n   */\n  private extractActivityIds(activity: Activity): string[] {\n    const ids = [activity.id];\n\n    // Recursively extract IDs from children\n    for (const child of activity.children) {\n      ids.push(...this.extractActivityIds(child));\n    }\n\n    return ids;\n  }\n\n  /**\n   * Create an activity from settings\n   * @param {ActivitySettings} activitySettings - The activity settings\n   * @return {Activity} - The created activity\n   */\n  private createActivity(activitySettings: ActivitySettings): Activity {\n    // Create activity\n    const activity = new Activity(activitySettings.id, activitySettings.title);\n\n    // Set activity properties\n    if (activitySettings.isVisible !== undefined) {\n      activity.isVisible = activitySettings.isVisible;\n    }\n    if (activitySettings.isActive !== undefined) {\n      activity.isActive = activitySettings.isActive;\n    }\n    if (activitySettings.isSuspended !== undefined) {\n      activity.isSuspended = activitySettings.isSuspended;\n    }\n    if (activitySettings.isCompleted !== undefined) {\n      activity.isCompleted = activitySettings.isCompleted;\n    }\n\n    // Create child activities\n    if (activitySettings.children) {\n      for (const childSettings of activitySettings.children) {\n        const childActivity = this.createActivity(childSettings);\n        activity.addChild(childActivity);\n      }\n    }\n\n    return activity;\n  }\n\n  /**\n   * Configure sequencing rules based on provided settings\n   * @param {SequencingRulesSettings} sequencingRulesSettings - The sequencing rules settings\n   */\n  private configureSequencingRules(sequencingRulesSettings: SequencingRulesSettings): void {\n    const sequencingRules = this._sequencing.sequencingRules;\n\n    // Configure pre-condition rules\n    if (sequencingRulesSettings.preConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.preConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addPreConditionRule(rule);\n      }\n    }\n\n    // Configure exit condition rules\n    if (sequencingRulesSettings.exitConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.exitConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addExitConditionRule(rule);\n      }\n    }\n\n    // Configure post-condition rules\n    if (sequencingRulesSettings.postConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.postConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addPostConditionRule(rule);\n      }\n    }\n  }\n\n  /**\n   * Create a sequencing rule from settings\n   * @param {SequencingRuleSettings} ruleSettings - The sequencing rule settings\n   * @return {SequencingRule} - The created sequencing rule\n   */\n  private createSequencingRule(ruleSettings: SequencingRuleSettings): SequencingRule {\n    // Create rule\n    const rule = new SequencingRule(ruleSettings.action, ruleSettings.conditionCombination);\n\n    // Add conditions\n    for (const conditionSettings of ruleSettings.conditions) {\n      const condition = new RuleCondition(\n        conditionSettings.condition,\n        conditionSettings.operator,\n        new Map(Object.entries(conditionSettings.parameters || {})),\n      );\n      rule.addCondition(condition);\n    }\n\n    return rule;\n  }\n\n  /**\n   * Configure sequencing controls based on provided settings\n   * @param {SequencingControlsSettings} sequencingControlsSettings - The sequencing controls settings\n   */\n  private configureSequencingControls(\n    sequencingControlsSettings: SequencingControlsSettings,\n  ): void {\n    const sequencingControls = this._sequencing.sequencingControls;\n\n    // Set sequencing control properties\n    if (sequencingControlsSettings.enabled !== undefined) {\n      sequencingControls.enabled = sequencingControlsSettings.enabled;\n    }\n    if (sequencingControlsSettings.choiceExit !== undefined) {\n      sequencingControls.choiceExit = sequencingControlsSettings.choiceExit;\n    }\n    if (sequencingControlsSettings.flow !== undefined) {\n      sequencingControls.flow = sequencingControlsSettings.flow;\n    }\n    if (sequencingControlsSettings.forwardOnly !== undefined) {\n      sequencingControls.forwardOnly = sequencingControlsSettings.forwardOnly;\n    }\n    if (sequencingControlsSettings.useCurrentAttemptObjectiveInfo !== undefined) {\n      sequencingControls.useCurrentAttemptObjectiveInfo =\n        sequencingControlsSettings.useCurrentAttemptObjectiveInfo;\n    }\n    if (sequencingControlsSettings.useCurrentAttemptProgressInfo !== undefined) {\n      sequencingControls.useCurrentAttemptProgressInfo =\n        sequencingControlsSettings.useCurrentAttemptProgressInfo;\n    }\n    if (sequencingControlsSettings.preventActivation !== undefined) {\n      sequencingControls.preventActivation = sequencingControlsSettings.preventActivation;\n    }\n    if (sequencingControlsSettings.constrainChoice !== undefined) {\n      sequencingControls.constrainChoice = sequencingControlsSettings.constrainChoice;\n    }\n    if (sequencingControlsSettings.rollupObjectiveSatisfied !== undefined) {\n      sequencingControls.rollupObjectiveSatisfied =\n        sequencingControlsSettings.rollupObjectiveSatisfied;\n    }\n    if (sequencingControlsSettings.rollupProgressCompletion !== undefined) {\n      sequencingControls.rollupProgressCompletion =\n        sequencingControlsSettings.rollupProgressCompletion;\n    }\n    if (sequencingControlsSettings.objectiveMeasureWeight !== undefined) {\n      sequencingControls.objectiveMeasureWeight = sequencingControlsSettings.objectiveMeasureWeight;\n    }\n  }\n\n  /**\n   * Configure rollup rules based on provided settings\n   * @param {RollupRulesSettings} rollupRulesSettings - The rollup rules settings\n   */\n  private configureRollupRules(rollupRulesSettings: RollupRulesSettings): void {\n    const rollupRules = this._sequencing.rollupRules;\n\n    // Configure rollup rules\n    if (rollupRulesSettings.rules) {\n      for (const ruleSettings of rollupRulesSettings.rules) {\n        const rule = this.createRollupRule(ruleSettings);\n        rollupRules.addRule(rule);\n      }\n    }\n  }\n\n  /**\n   * Create a rollup rule from settings\n   * @param {RollupRuleSettings} ruleSettings - The rollup rule settings\n   * @return {RollupRule} - The created rollup rule\n   */\n  private createRollupRule(ruleSettings: RollupRuleSettings): RollupRule {\n    // Create rule\n    const rule = new RollupRule(\n      ruleSettings.action,\n      ruleSettings.consideration,\n      ruleSettings.minimumCount,\n      ruleSettings.minimumPercent,\n    );\n\n    // Add conditions\n    for (const conditionSettings of ruleSettings.conditions) {\n      const condition = new RollupCondition(\n        conditionSettings.condition,\n        new Map(Object.entries(conditionSettings.parameters || {})),\n      );\n      rule.addCondition(condition);\n    }\n\n    return rule;\n  }\n}\n\nexport default Scorm2004API;\n"],"names":["scorm12_constants","cmi_children","core_children","score_children","comments_children","objectives_children","correct_responses_children","student_data_children","student_preference_children","interactions_children","error_descriptions","basicMessage","detailMessage","aicc_constants","student_demographics_children","tries_children","attempt_records_children","paths_children","scorm2004_constants","adl_data_children","global_errors","GENERAL","INITIALIZATION_FAILED","INITIALIZED","TERMINATED","TERMINATION_FAILURE","TERMINATION_BEFORE_INIT","MULTIPLE_TERMINATION","RETRIEVE_BEFORE_INIT","RETRIEVE_AFTER_TERM","STORE_BEFORE_INIT","STORE_AFTER_TERM","COMMIT_BEFORE_INIT","COMMIT_AFTER_TERM","ARGUMENT_ERROR","CHILDREN_ERROR","COUNT_ERROR","GENERAL_GET_FAILURE","GENERAL_SET_FAILURE","GENERAL_COMMIT_FAILURE","UNDEFINED_DATA_MODEL","UNIMPLEMENTED_ELEMENT","VALUE_NOT_INITIALIZED","INVALID_SET_VALUE","READ_ONLY_ELEMENT","WRITE_ONLY_ELEMENT","TYPE_MISMATCH","VALUE_OUT_OF_RANGE","DEPENDENCY_NOT_ESTABLISHED","scorm12_errors","scorm2004_errors","MULTIPLE_TERMINATIONS","scorm12_regex","CMIString256","CMIString4096","CMITime","CMITimespan","CMIInteger","CMISInteger","CMIDecimal","CMIIdentifier","CMIFeedback","CMIIndex","CMIStatus","CMIStatus2","CMIExit","CMIType","CMIResult","NAVEvent","score_range","audio_range","speed_range","weighting_range","text_range","aicc_regex","scorm2004_regex","BaseScormValidationError","Error","constructor","CMIElement","errorCode","super","this","_errorCode","Object","setPrototypeOf","prototype","ValidationError","errorMessage","detailedMessage","_detailedMessage","message","_errorMessage","Scorm12ValidationError","hasOwnProperty","call","String","BaseCMI","cmi_element","jsonString","_initialized","_cmi_element","initialized","start_time","_start_time","initialize","setStartTime","Date","getTime","BaseRootCMI","designations","D","H","M","S","getSecondsAsHHMMSS","memoize","totalSeconds","hours","Math","floor","dateObj","minutes","getUTCMinutes","seconds","getSeconds","ms","msStr","countDecimals","toFixed","split","replace","getSecondsAsISODuration","duration","remainder","entries","forEach","designationsKey","current_seconds","value","indexOf","includes","getTimeAsSeconds","timeString","timeRegex","RegExp","match","parts","toString","getDurationAsSeconds","durationRegex","years","_","days","exec","result","flatten","data","recurse","cur","prop","Array","isArray","item","i","length","keys","filter","p","isEmpty","num","stringMatches","str","tester","fn","keyFn","cache","Map","args","key","JSON","stringify","has","get","set","checkValidFormat","regexPattern","errorClass","allowEmptyString","formatRegex","matches","_errorClass","checkValidRange","rangePattern","ranges","check12ValidFormat","check12ValidRange","validationService","validateScore","decimalRegex","scoreRange","invalidTypeCode","invalidRangeCode","validateScorm12Audio","validateScorm12Language","validateScorm12Speed","validateScorm12Text","validateReadOnly","CMIScore","params","_raw","_min","__children","__score_range","_max","max","__invalid_error_code","invalidErrorCode","__invalid_type_code","__invalid_range_code","__decimal_regex","__error_class","reset","_children","raw","min","toJSON","CMICore","_student_id","_student_name","_lesson_location","_credit","_lesson_status","_entry","_total_time","_lesson_mode","_exit","_session_time","_suspend_data","score","student_id","student_name","lesson_location","credit","lesson_status","entry","total_time","lesson_mode","exit","session_time","suspend_data","getCurrentTotalTime","sessionTime","startTime","Util.getSecondsAsHHMMSS","first","second","CMIArray","children","childArray","wipe","_count","_id","_status","id","status","CMIStudentData","_mastery_score","_max_time_allowed","_time_limit_action","mastery_score","max_time_allowed","time_limit_action","CMIStudentPreference","_audio","_language","_speed","_text","audio","language","speed","text","_time","_type","_weighting","_student_response","_result","_latency","objectives","correct_responses","time","type","weighting","student_response","latency","_pattern","pattern","student_data","__version","_launch_data","_comments","_comments_from_lms","core","CMIObjectives","student_preference","interactions","CMIInteractions","launch_data","comments","comments_from_lms","_version","NAV","_event","event","LogLevelEnum","DEBUG","INFO","WARN","ERROR","NONE","DefaultSettings","autocommit","autocommitSeconds","asyncCommit","sendFullCommit","lmsCommitUrl","dataCommitFormat","commitRequestDataType","autoProgress","logLevel","selfReportSessionTime","alwaysSendTotalTime","renderCommonCommitFields","strict_errors","xhrHeaders","xhrWithCredentials","fetchMode","responseHandler","async","response","httpResult","json","responseText","parse","e","requestHandler","commitObject","onLogMessage","defaultLogHandler","scoItemIds","scoItemIdValidator","globalObjectiveIds","enableOfflineSupport","courseId","syncOnInitialize","syncOnTerminate","maxSyncAttempts","messageLevel","logMessage","console","error","warn","info","debug","log","ScheduledCommit","API","when","callback","_cancelled","_API","_timeout","setTimeout","wrapper","bind","_callback","cancel","clearTimeout","commit","HttpService","settings","error_codes","processHttpRequest","url","immediate","apiLog","processListeners","genericError","performFetch","then","transformResponse","process","fetch","method","mode","body","join","headers","credentials","keepalive","updateSettings","EventService","listenerMap","listenerCount","parseListenerName","listenerName","listenerSplit","functionName","on","listenerFunctions","listenerFunction","parsedListener","listeners","push","off","removeIndex","findIndex","obj","splice","delete","clear","newListeners","listener","listenerHasCMIElement","CMIElementsMatch","endsWith","prefix","slice","startsWith","SerializationService","loadFromFlattenedJSON","setCMIValue","isNotInitialized","setStartingData","int_pattern","obj_pattern","others","intMatch","index","field","objMatch","sort","a","b","localeCompare","processItems","items","loadFromJSON","regex","from","m","unflatten","currentCMIElement","tempCMIElement","renderCMIToJSONString","cmi","k","v","renderCMIToJSONObject","getCommitObject","terminateCommit","renderCommitObject","renderCommitCMI","apiLogLevel","shouldTerminateCommit","LoggingService","_logLevel","_logHandler","getInstance","_instance","setLogLevel","level","getLogLevel","setLogHandler","handler","shouldLog","getNumericLevel","getLoggingService","ErrorHandlingService","errorCodes","getLmsErrorMessageDetails","loggingService","_lastErrorCode","_errorCodes","_apiLog","_getLmsErrorMessageDetails","_loggingService","lastErrorCode","throwSCORMError","errorNumber","formattedMessage","clearSCORMError","success","handleValueAccessException","returnValue","validationError","errorType","name","stack","errorDetails","jsonError","OfflineStorageService","storeName","syncQueue","isOnline","navigator","onLine","syncInProgress","window","addEventListener","handleOnlineStatusChange","wasOnline","syncOfflineData","storeOffline","commitData","queueItem","now","random","substr","timestamp","syncAttempts","currentQueue","getFromStorage","saveToStorage","getOfflineData","remainingQueue","sendDataToLMS","processedData","isDeviceOnline","storedData","localStorage","getItem","setItem","hasPendingOfflineData","some","BaseAPI","httpService","eventService","serializationService","cmiDataService","errorHandlingService","offlineStorageService","_settings","_courseId","TypeError","currentState","_error_codes","_httpService","_eventService","element","_serializationService","_errorHandlingService","detail","createErrorHandlingService","_offlineStorageService","offlineData","runtimeData","catch","commonReset","clearScheduledCommit","startingData","callbackName","initializeMessage","terminationMessage","isInitialized","isTerminated","hasPendingData","syncSuccess","messageString","padEnd","formatMessage","previousSettings","terminate","checkTerminated","checkState","storeData","getValue","getCMIValue","setValue","commitCallback","scheduleCommit","getLastError","getErrorString","CMIErrorCode","getDiagnostic","beforeInitError","afterTermError","_errorNumber","_detail","_CMIElement","_value","_commonSetCMIValue","methodName","scorm2004","structure","refObject","foundFirstIndex","invalidErrorMessage","idx","attribute","substring","_checkObjectHasProperty","validateCorrectResponse","parseInt","isNaN","newChild","getChildElement","_commonGetCMIValue","uninitializedErrorMessage","_isTargetValid","StringKeyMap","getOwnPropertyDescriptor","getPrototypeOf","Scorm12API","mastery_override","statusSetByModule","CMI","nav","LMSInitialize","lmsInitialize","LMSFinish","lmsFinish","LMSGetValue","lmsGetValue","LMSSetValue","lmsSetValue","LMSCommit","lmsCommit","LMSGetLastError","lmsGetLastError","LMSGetErrorString","lmsGetErrorString","LMSGetDiagnostic","lmsGetDiagnostic","internalFinish","CMIObjectivesObject","CMIInteractionsCorrectResponsesObject","CMIInteractionsObjectivesObject","CMIInteractionsObject","replaceWithAnotherScormAPI","newAPI","cmiExport","flattened","Utilities.flatten","totalTimeHHMMSS","totalTimeSeconds","Utilities.getTimeAsSeconds","lessonStatus","completionStatus","successStatus","scoreObject","Number","parseFloat","originalStatus","aicc_errors","AICCValidationError","checkAICCValidFormat","CMIEvaluation","CMIEvaluationComments","CMIEvaluationCommentsObject","_content","_location","content","location","AICCStudentPreferences","_lesson_type","_text_color","_text_location","_text_size","_video","windows","lesson_type","text_color","text_location","text_size","video","CMIStudentDemographics","_city","_class","_company","_country","_experience","_familiar_name","_instructor_name","_title","_native_language","_state","_street_address","_telephone","_years_experience","city","clazz","company","country","experience","familiar_name","instructor_name","title","native_language","state","street_address","telephone","years_experience","class","CMITries","CMITriesObject","CMIAttemptRecords","CMIAttemptRecordsObject","AICCCMIStudentData","_tries_during_lesson","tries","attempt_records","tries_during_lesson","CMIPaths","CMIPathsObject","_location_id","_date","_why_left","_time_in_element","location_id","date","why_left","time_in_element","Scorm12CMI.CMI","student_demographics","evaluation","paths","AICC","Scorm2004ValidationError","check2004ValidFormat","check2004ValidRange","CMILearnerPreference","_audio_level","_delivery_speed","_audio_captioning","audio_level","delivery_speed","audio_captioning","LearnerResponses","format","delimiter","unique","choice","matching","format2","delimiter2","performance","sequencing","likert","numeric","other","CorrectResponses","duplicate","limit","delimiter3","_timestamp","_learner_response","_description","learner_response","nodes","response_type","values","j","description","parent","_parent","interactionType","isValid","Scorm2004CMIScore","_scaled","scaled","CMICommentsFromLMS","CMICommentsFromLearner","CMICommentsObject","readOnlyAfterInit","_comment","_readOnlyAfterInit","comment","findObjectiveById","find","objective","findObjectiveByIndex","setObjectiveByIndex","_success_status","_completion_status","_progress_measure","success_status","completion_status","progress_measure","CMIMetadata","CMILearner","_learner_id","_learner_name","learner_id","learner_name","CMISession","Util.getSecondsAsISODuration","Util.addTwoDurations","CMIContent","CMISettings","_mode","CMIThresholds","_scaled_passing_score","_completion_threshold","scaled_passing_score","completion_threshold","metadata","learner","session","thresholds","learner_preference","comments_from_learner","ADL","ADLData","_sequencing","ADLNav","adlNav","_request","request_valid","ADLNavRequestValid","request","processNavigationRequest","ADLDataObject","_store","store","_continue","_previous","_choice","_jump","previous","jump","continue","RuleActionType","RuleCondition","condition","operator","parameters","_condition","_operator","_parameters","evaluate","activity","objectiveMeasureStatus","greaterThanValue","objectiveNormalizedMeasure","lessThanValue","isCompleted","attemptCount","attemptLimit","fromEntries","SequencingRule","action","conditionCombination","_conditions","_action","_conditionCombination","conditions","addCondition","removeCondition","every","SequencingRules","_preConditionRules","_exitConditionRules","_postConditionRules","preConditionRules","addPreConditionRule","rule","exitConditionRules","addExitConditionRule","postConditionRules","addPostConditionRule","evaluatePreConditionRules","evaluateExitConditionRules","evaluatePostConditionRules","RollupCondition","RollupRule","consideration","minimumCount","minimumPercent","_consideration","_minimumCount","_minimumPercent","matchingChildren","child","RollupRules","_rules","rules","addRule","removeRule","processRollup","completionRollup","successRollup","_defaultCompletionRollup","_defaultSuccessRollup","ValidLanguages","Activity","_isVisible","_isActive","_isSuspended","_isCompleted","_completionStatus","_successStatus","_attemptCount","_attemptCompletionAmount","_attemptAbsoluteDuration","_attemptExperiencedDuration","_activityAbsoluteDuration","_activityExperiencedDuration","_objectiveSatisfiedStatus","_objectiveMeasureStatus","_objectiveNormalizedMeasure","addChild","removeChild","isVisible","isActive","isSuspended","incrementAttemptCount","attemptCompletionAmount","attemptAbsoluteDuration","attemptExperiencedDuration","activityAbsoluteDuration","activityExperiencedDuration","objectiveSatisfiedStatus","map","ActivityTree","_root","_currentActivity","_suspendedActivity","_activities","root","_addActivitiesToMap","currentActivity","suspendedActivity","getActivity","getAllActivities","getParent","getChildren","getSiblings","getNextSibling","siblings","getPreviousSibling","getFirstChild","getLastChild","getCommonAncestor","activity1","activity2","path1","current","unshift","SequencingControls","_enabled","_choiceExit","_flow","_forwardOnly","_useCurrentAttemptObjectiveInfo","_useCurrentAttemptProgressInfo","_preventActivation","_constrainChoice","_rollupObjectiveSatisfied","_rollupProgressCompletion","_objectiveMeasureWeight","enabled","choiceExit","flow","forwardOnly","useCurrentAttemptObjectiveInfo","useCurrentAttemptProgressInfo","preventActivation","constrainChoice","rollupObjectiveSatisfied","rollupProgressCompletion","objectiveMeasureWeight","isChoiceNavigationAllowed","isFlowNavigationAllowed","isForwardNavigationAllowed","isBackwardNavigationAllowed","Sequencing","_adlNav","_activityTree","_sequencingRules","_sequencingControls","_rollupRules","activityTree","sequencingRules","sequencingControls","rollupRules","preConditionAction","SKIP","DISABLED","HIDE_FROM_CHOICE","STOP_FORWARD_TRAVERSAL","processContinueRequest","processPreviousRequest","processExitRequest","processExitAllRequest","processAbandonRequest","processAbandonAllRequest","processSuspendAllRequest","nextActivity","exitConditionAction","EXIT_PARENT","EXIT_ALL","postConditionAction","RETRY","RETRY_ALL","CONTINUE","PREVIOUS","EXIT","previousActivity","_processRollupRecursive","Scorm2004API","_globalObjectives","_extractedScoItemIds","adl","configureSequencing","Initialize","Terminate","GetValue","SetValue","Commit","GetLastError","GetErrorString","GetDiagnostic","version","globalObjectives","navActions","exitAll","abandon","abandonAll","choiceJumpRegex","target","groups","choice_target","jump_target","adlNavRequestRegex","element_base","objective_id","global_index","newGlobalObjective","global_element","createCorrectResponsesObject","interaction","checkDuplicateChoiceResponse","checkValidResponseType","interaction_type","checkCorrectResponseValue","interaction_count","pattern_index","checkDuplicatedPattern","correct_response","current_index","found","count","removeCorrectResponsePrefixes","node","seenOrder","seenCase","seenLang","prefixRegex","langMatches","lang","toLowerCase","totalTimeDuration","Utilities.getDurationAsSeconds","navRequest","Function","sequencingSettings","configureActivityTree","configureSequencingRules","configureSequencingControls","configureRollupRules","activityTreeSettings","rootActivity","createActivity","extractActivityIds","ids","activitySettings","childSettings","childActivity","sequencingRulesSettings","ruleSettings","createSequencingRule","conditionSettings","sequencingControlsSettings","rollupRulesSettings","createRollupRule"],"mappings":"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"}