{"version":3,"file":"scorm-again.min.js","sources":["../../src/constants/api_constants.ts","../../src/constants/error_codes.ts","../../src/constants/regex.ts","../../src/exceptions.ts","../../src/exceptions/scorm12_exceptions.ts","../../src/cmi/common/base_cmi.ts","../../src/utilities.ts","../../src/cmi/common/validation.ts","../../src/cmi/scorm12/validation.ts","../../src/services/ValidationService.ts","../../src/cmi/common/score.ts","../../src/cmi/aicc/core.ts","../../src/cmi/common/array.ts","../../src/cmi/scorm12/objectives.ts","../../src/cmi/scorm12/student_data.ts","../../src/cmi/scorm12/student_preference.ts","../../src/cmi/scorm12/interactions.ts","../../src/cmi/scorm12/cmi.ts","../../src/cmi/scorm12/nav.ts","../../src/constants/enums.ts","../../src/constants/default_settings.ts","../../src/types/scheduled_commit.ts","../../src/services/HttpService.ts","../../src/services/EventService.ts","../../src/services/SerializationService.ts","../../src/services/LoggingService.ts","../../src/services/ErrorHandlingService.ts","../../src/services/OfflineStorageService.ts","../../src/BaseAPI.ts","../../src/Scorm12API.ts","../../src/exceptions/aicc_exceptions.ts","../../src/cmi/aicc/validation.ts","../../src/cmi/aicc/evaluation.ts","../../src/cmi/aicc/student_preferences.ts","../../src/cmi/aicc/student_demographics.ts","../../src/cmi/aicc/tries.ts","../../src/cmi/aicc/attempts.ts","../../src/cmi/aicc/student_data.ts","../../src/cmi/aicc/paths.ts","../../src/cmi/aicc/cmi.ts","../../src/AICC.ts","../../src/exceptions/scorm2004_exceptions.ts","../../src/cmi/scorm2004/validation.ts","../../src/cmi/scorm2004/learner_preference.ts","../../src/constants/response_constants.ts","../../src/cmi/scorm2004/interactions.ts","../../src/cmi/scorm2004/score.ts","../../src/cmi/scorm2004/comments.ts","../../src/cmi/scorm2004/objectives.ts","../../src/cmi/scorm2004/metadata.ts","../../src/cmi/scorm2004/learner.ts","../../src/cmi/scorm2004/status.ts","../../src/cmi/scorm2004/session.ts","../../src/cmi/scorm2004/content.ts","../../src/cmi/scorm2004/settings.ts","../../src/cmi/scorm2004/thresholds.ts","../../src/cmi/scorm2004/cmi.ts","../../src/cmi/scorm2004/adl.ts","../../src/cmi/scorm2004/sequencing/sequencing_rules.ts","../../src/cmi/scorm2004/sequencing/rollup_rules.ts","../../src/constants/language_constants.ts","../../src/cmi/scorm2004/sequencing/sequencing_controls.ts","../../src/cmi/scorm2004/sequencing/activity.ts","../../src/cmi/scorm2004/sequencing/activity_tree.ts","../../src/cmi/scorm2004/sequencing/sequencing.ts","../../src/cmi/scorm2004/sequencing/rollup_process.ts","../../src/cmi/scorm2004/sequencing/selection_randomization.ts","../../src/cmi/scorm2004/sequencing/sequencing_process.ts","../../src/cmi/scorm2004/sequencing/overall_sequencing_process.ts","../../src/services/ActivityDeliveryService.ts","../../src/services/SequencingService.ts","../../src/Scorm2004API.ts","../../src/CrossFrameAPI.ts","../../src/CrossFrameLMS.ts"],"sourcesContent":["interface ErrorDescription {\n  basicMessage: string;\n  detailMessage: string;\n}\n\ninterface ErrorDescriptions {\n  [key: string]: ErrorDescription;\n}\n\ninterface ScormConstants {\n  cmi_children: string;\n  core_children: string;\n  score_children: string;\n  comments_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface AiccConstants extends ScormConstants {\n  student_demographics_children: string;\n  tries_children: string;\n  attempt_records_children: string;\n  paths_children: string;\n}\n\ninterface Scorm2004Constants {\n  cmi_children: string;\n  comments_children: string;\n  score_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  adl_data_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface GlobalConstants {\n  SCORM_TRUE: string;\n  SCORM_FALSE: string;\n  STATE_NOT_INITIALIZED: number;\n  STATE_INITIALIZED: number;\n  STATE_TERMINATED: number;\n}\n\nexport const global_constants: GlobalConstants = {\n  SCORM_TRUE: \"true\",\n  SCORM_FALSE: \"false\",\n  STATE_NOT_INITIALIZED: 0,\n  STATE_INITIALIZED: 1,\n  STATE_TERMINATED: 2,\n};\n\nexport const scorm12_constants: ScormConstants = {\n  // Children lists\n  cmi_children:\n    \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions\",\n  core_children:\n    \"student_id,student_name,lesson_location,credit,lesson_status,entry,score,total_time,lesson_mode,exit,session_time\",\n  score_children: \"raw,min,max\",\n  comments_children: \"content,location,time\",\n  objectives_children: \"id,score,status\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio,language,speed,text\",\n  interactions_children:\n    \"id,objectives,time,type,correct_responses,weighting,student_response,result,latency\",\n  error_descriptions: {\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage: \"No specific error code exists to describe the error.\",\n    },\n    \"201\": {\n      basicMessage: \"Invalid argument error\",\n      detailMessage:\n        \"Indicates that an argument represents an invalid data model element or is otherwise incorrect.\",\n    },\n    \"202\": {\n      basicMessage: \"Element cannot have children\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_children\" for a data model element that does not support the \"_children\" suffix.',\n    },\n    \"203\": {\n      basicMessage: \"Element not an array - cannot have count\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_count\" for a data model element that does not support the \"_count\" suffix.',\n    },\n    \"301\": {\n      basicMessage: \"Not initialized\",\n      detailMessage: \"Indicates that an API call was made before the call to lmsInitialize.\",\n    },\n    \"401\": {\n      basicMessage: \"Not implemented error\",\n      detailMessage:\n        \"The data model element indicated in a call to LMSGetValue or LMSSetValue is valid, but was not implemented by this LMS. SCORM 1.2 defines a set of data model elements as being optional for an LMS to implement.\",\n    },\n    \"402\": {\n      basicMessage: \"Invalid set value, element is a keyword\",\n      detailMessage:\n        'Indicates that LMSSetValue was called on a data model element that represents a keyword (elements that end in \"_children\" and \"_count\").',\n    },\n    \"403\": {\n      basicMessage: \"Element is read only\",\n      detailMessage: \"LMSSetValue was called with a data model element that can only be read.\",\n    },\n    \"404\": {\n      basicMessage: \"Element is write only\",\n      detailMessage: \"LMSGetValue was called on a data model element that can only be written to.\",\n    },\n    \"405\": {\n      basicMessage: \"Incorrect Data Type\",\n      detailMessage:\n        \"LMSSetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a LMSSetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\nexport const aicc_constants: AiccConstants = {\n  ...scorm12_constants,\n  ...{\n    cmi_children:\n      \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions,evaluation\",\n    student_preference_children:\n      \"audio,language,lesson_type,speed,text,text_color,text_location,text_size,video,windows\",\n    student_data_children: \"attempt_number,tries,mastery_score,max_time_allowed,time_limit_action\",\n    student_demographics_children:\n      \"city,class,company,country,experience,familiar_name,instructor_name,title,native_language,state,street_address,telephone,years_experience\",\n    tries_children: \"time,status,score\",\n    attempt_records_children: \"score,lesson_status\",\n    paths_children: \"location_id,date,time,status,why_left,time_in_element\",\n  },\n};\n\nexport const scorm2004_constants: Scorm2004Constants = {\n  // Children lists\n  cmi_children:\n    \"_version,comments_from_learner,comments_from_lms,completion_status,credit,entry,exit,interactions,launch_data,learner_id,learner_name,learner_preference,location,max_time_allowed,mode,objectives,progress_measure,scaled_passing_score,score,session_time,success_status,suspend_data,time_limit_action,total_time\",\n  comments_children: \"comment,timestamp,location\",\n  score_children: \"max,raw,scaled,min\",\n  objectives_children: \"progress_measure,completion_status,success_status,description,score,id\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio_level,audio_captioning,delivery_speed,language\",\n  interactions_children:\n    \"id,type,objectives,timestamp,correct_responses,weighting,learner_response,result,latency,description\",\n  adl_data_children: \"id,store\",\n  error_descriptions: {\n    \"0\": {\n      basicMessage: \"No Error\",\n      detailMessage: \"No error occurred, the previous API call was successful.\",\n    },\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage: \"No specific error code exists to describe the error.\",\n    },\n    \"102\": {\n      basicMessage: \"General Initialization Failure\",\n      detailMessage: \"Call to Initialize failed for an unknown reason.\",\n    },\n    \"103\": {\n      basicMessage: \"Already Initialized\",\n      detailMessage: \"Call to Initialize failed because Initialize was already called.\",\n    },\n    \"104\": {\n      basicMessage: \"Content Instance Terminated\",\n      detailMessage: \"Call to Initialize failed because Terminate was already called.\",\n    },\n    \"111\": {\n      basicMessage: \"General Termination Failure\",\n      detailMessage: \"Call to Terminate failed for an unknown reason.\",\n    },\n    \"112\": {\n      basicMessage: \"Termination Before Initialization\",\n      detailMessage: \"Call to Terminate failed because it was made before the call to Initialize.\",\n    },\n    \"113\": {\n      basicMessage: \"Termination After Termination\",\n      detailMessage: \"Call to Terminate failed because Terminate was already called.\",\n    },\n    \"122\": {\n      basicMessage: \"Retrieve Data Before Initialization\",\n      detailMessage: \"Call to GetValue failed because it was made before the call to Initialize.\",\n    },\n    \"123\": {\n      basicMessage: \"Retrieve Data After Termination\",\n      detailMessage: \"Call to GetValue failed because it was made after the call to Terminate.\",\n    },\n    \"132\": {\n      basicMessage: \"Store Data Before Initialization\",\n      detailMessage: \"Call to SetValue failed because it was made before the call to Initialize.\",\n    },\n    \"133\": {\n      basicMessage: \"Store Data After Termination\",\n      detailMessage: \"Call to SetValue failed because it was made after the call to Terminate.\",\n    },\n    \"142\": {\n      basicMessage: \"Commit Before Initialization\",\n      detailMessage: \"Call to Commit failed because it was made before the call to Initialize.\",\n    },\n    \"143\": {\n      basicMessage: \"Commit After Termination\",\n      detailMessage: \"Call to Commit failed because it was made after the call to Terminate.\",\n    },\n    \"201\": {\n      basicMessage: \"General Argument Error\",\n      detailMessage:\n        \"An invalid argument was passed to an API method (usually indicates that Initialize, Commit or Terminate did not receive the expected empty string argument.\",\n    },\n    \"301\": {\n      basicMessage: \"General Get Failure\",\n      detailMessage:\n        \"Indicates a failed GetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"351\": {\n      basicMessage: \"General Set Failure\",\n      detailMessage:\n        \"Indicates a failed SetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"391\": {\n      basicMessage: \"General Commit Failure\",\n      detailMessage:\n        \"Indicates a failed Commit call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"401\": {\n      basicMessage: \"Undefined Data Model Element\",\n      detailMessage:\n        \"The data model element name passed to GetValue or SetValue is not a valid SCORM data model element.\",\n    },\n    \"402\": {\n      basicMessage: \"Unimplemented Data Model Element\",\n      detailMessage:\n        \"The data model element indicated in a call to GetValue or SetValue is valid, but was not implemented by this LMS. In SCORM 2004, this error would indicate an LMS that is not fully SCORM conformant.\",\n    },\n    \"403\": {\n      basicMessage: \"Data Model Element Value Not Initialized\",\n      detailMessage:\n        \"Attempt to read a data model element that has not been initialized by the LMS or through a SetValue call. This error condition is often reached during normal execution of a SCO.\",\n    },\n    \"404\": {\n      basicMessage: \"Data Model Element Is Read Only\",\n      detailMessage: \"SetValue was called with a data model element that can only be read.\",\n    },\n    \"405\": {\n      basicMessage: \"Data Model Element Is Write Only\",\n      detailMessage: \"GetValue was called on a data model element that can only be written to.\",\n    },\n    \"406\": {\n      basicMessage: \"Data Model Element Type Mismatch\",\n      detailMessage:\n        \"SetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Data Model Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a SetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\n","export type ErrorCode = {\n  [key: string]: number;\n};\n\nexport const global_errors: ErrorCode = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nexport const scorm12_errors: ErrorCode = {\n  ...global_errors,\n  RETRIEVE_BEFORE_INIT: 301,\n  STORE_BEFORE_INIT: 301,\n  COMMIT_BEFORE_INIT: 301,\n  ARGUMENT_ERROR: 201,\n  CHILDREN_ERROR: 202,\n  COUNT_ERROR: 203,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 401,\n  VALUE_NOT_INITIALIZED: 301,\n  INVALID_SET_VALUE: 402,\n  READ_ONLY_ELEMENT: 403,\n  WRITE_ONLY_ELEMENT: 404,\n  TYPE_MISMATCH: 405,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n\nexport const scorm2004_errors: ErrorCode = {\n  ...global_errors,\n  INITIALIZATION_FAILED: 102,\n  INITIALIZED: 103,\n  TERMINATED: 104,\n  TERMINATION_FAILURE: 111,\n  TERMINATION_BEFORE_INIT: 112,\n  MULTIPLE_TERMINATION: 113,\n  MULTIPLE_TERMINATIONS: 113,\n  RETRIEVE_BEFORE_INIT: 122,\n  RETRIEVE_AFTER_TERM: 123,\n  STORE_BEFORE_INIT: 132,\n  STORE_AFTER_TERM: 133,\n  COMMIT_BEFORE_INIT: 142,\n  COMMIT_AFTER_TERM: 143,\n  ARGUMENT_ERROR: 201,\n  GENERAL_GET_FAILURE: 301,\n  GENERAL_SET_FAILURE: 351,\n  GENERAL_COMMIT_FAILURE: 391,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 402,\n  VALUE_NOT_INITIALIZED: 403,\n  READ_ONLY_ELEMENT: 404,\n  WRITE_ONLY_ELEMENT: 405,\n  TYPE_MISMATCH: 406,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n","export const scorm12_regex = {\n  CMIString256: \"^.{0,255}$\",\n  CMIString4096: \"^.{0,4096}$\",\n  CMITime: \"^(?:[01]\\\\d|2[0123]):(?:[012345]\\\\d):(?:[012345]\\\\d)$\",\n  CMITimespan: \"^([0-9]{2,}):([0-9]{2}):([0-9]{2})(.[0-9]{1,2})?$\",\n\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{0,3})(\\\\.[0-9]*)?$\",\n\n  CMIIdentifier: \"^[\\\\u0021-\\\\u007E\\\\s]{0,255}$\",\n  // Allow storing larger responses for interactions\n  // Some content packages may exceed the 255 character limit\n  // defined in the SCORM 1.2 specification.  The previous\n  // expression truncated these values which resulted in\n  // a \"101: General Exception\" being thrown when long\n  // answers were supplied.  To support these packages we\n  // relax the limitation and accept any length string.\n  CMIFeedback: \"^.*$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMIStatus: \"^(passed|completed|failed|incomplete|browsed)$\",\n  CMIStatus2: \"^(passed|completed|failed|incomplete|browsed|not attempted)$\",\n  CMIExit: \"^(time-out|suspend|logout|)$\",\n  CMIType: \"^(true-false|choice|fill-in|matching|performance|sequencing|likert|numeric)$\",\n  CMIResult: \"^(correct|wrong|unanticipated|neutral|([0-9]{0,3})?(\\\\.[0-9]*)?)$\",\n  NAVEvent:\n    \"^(previous|continue|start|resumeAll|choice|jump|exit|exitAll|abandon|abandonAll|suspendAll|retry|retryAll|_none_)$\",\n  // Data ranges\n  score_range: \"0#100\",\n  audio_range: \"-1#100\",\n  speed_range: \"-100#100\",\n  weighting_range: \"-100#100\",\n  text_range: \"-1#1\",\n};\nexport const aicc_regex = {\n  ...scorm12_regex,\n  ...{\n    // AICC identifiers may contain letters, numbers, underscores,\n    // periods, and hyphens up to 255 characters in length.\n    // The previous expression only allowed \"\\w\" characters which\n    // excluded periods and hyphens.\n    CMIIdentifier: \"^[A-Za-z0-9._-]{1,255}$\",\n  },\n};\nexport const scorm2004_regex = {\n  CMIString200: \"^[\\\\u0000-\\\\uFFFF]{0,200}$\",\n  CMIString250: \"^[\\\\u0000-\\\\uFFFF]{0,250}$\",\n  CMIString1000: \"^[\\\\u0000-\\\\uFFFF]{0,1000}$\",\n  CMIString4000: \"^[\\\\u0000-\\\\uFFFF]{0,4000}$\",\n  CMIString64000: \"^[\\\\u0000-\\\\uFFFF]{0,64000}$\",\n  CMILang: \"^([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?$|^$\",\n\n  CMILangString250: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,250}$)?$\",\n\n  CMILangcr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?}))(.*?)$\",\n\n  CMILangString250cr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?})?(.{0,250})?)?$\",\n\n  CMILangString4000: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,4000}$)?$\",\n\n  CMITime:\n    \"^(19[7-9]{1}[0-9]{1}|20[0-2]{1}[0-9]{1}|203[0-8]{1})((-(0[1-9]{1}|1[0-2]{1}))((-(0[1-9]{1}|[1-2]{1}[0-9]{1}|3[0-1]{1}))(T([0-1]{1}[0-9]{1}|2[0-3]{1})((:[0-5]{1}[0-9]{1})((:[0-5]{1}[0-9]{1})((\\\\.[0-9]{1,6})((Z|([+|-]([0-1]{1}[0-9]{1}|2[0-3]{1})))(:[0-5]{1}[0-9]{1})?)?)?)?)?)?)?)?$\",\n  CMITimespan:\n    \"^P(?:([.,\\\\d]+)Y)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)W)?(?:([.,\\\\d]+)D)?(?:T?(?:([.,\\\\d]+)H)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)S)?)?$\",\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{1,5})(\\\\.[0-9]{1,18})?$\",\n  CMIIdentifier: \"^\\\\S{1,250}[a-zA-Z0-9]$\",\n  CMIShortIdentifier: \"^[\\\\w\\\\.\\\\-\\\\_]{1,250}$\",\n  CMILongIdentifier: \"^(?:(?!urn:)\\\\S{1,4000}|urn:[A-Za-z0-9-]{1,31}:\\\\S{1,4000}|.{1,4000})$\",\n  // need to re-examine this\n  CMIFeedback: \"^.*$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  CMIIndexStore: \".N(\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMICStatus: \"^(completed|incomplete|not attempted|unknown)$\",\n  CMISStatus: \"^(passed|failed|unknown)$\",\n  CMIExit: \"^(time-out|suspend|logout|normal)$\",\n  CMIType:\n    \"^(true-false|choice|fill-in|long-fill-in|matching|performance|sequencing|likert|numeric|other)$\",\n  CMIResult: \"^(correct|incorrect|unanticipated|neutral|-?([0-9]{1,4})(\\\\.[0-9]{1,18})?)$\",\n  NAVEvent:\n    \"^(start|resumeAll|previous|continue|exit|exitAll|abandon|abandonAll|suspendAll|retry|retryAll|_none_|(\\\\{target=(?<choice_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?choice|(\\\\{target=(?<jump_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?jump)$\",\n\n  NAVBoolean: \"^(unknown|true|false)$\",\n  NAVTarget: \"^{target=\\\\S{0,}[a-zA-Z0-9-_]+}$\",\n  // Data ranges\n  scaled_range: \"-1#1\",\n  audio_range: \"0#999.9999999\",\n  speed_range: \"0#999.9999999\",\n  text_range: \"-1#1\",\n  progress_range: \"0#1\",\n};\n","type APIError = {\n  errorCode: number;\n  errorMessage: string;\n  detailedMessage: string;\n};\n\nexport class BaseScormValidationError extends Error {\n  constructor(CMIElement: string, errorCode: number) {\n    super(`${CMIElement} : ${errorCode.toString()}`);\n    this._errorCode = errorCode;\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, BaseScormValidationError.prototype);\n  }\n\n  private readonly _errorCode: number;\n\n  /**\n   * Getter for _errorCode\n   * @return {number}\n   */\n  get errorCode(): number {\n    return this._errorCode;\n  }\n}\n\n/**\n * Base Validation Exception\n */\nexport class ValidationError extends BaseScormValidationError implements APIError {\n  /**\n   * Constructor to take in an error message and code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   * @param {string} errorMessage\n   * @param {string} detailedMessage\n   */\n  constructor(\n    CMIElement: string,\n    errorCode: number,\n    errorMessage: string,\n    detailedMessage?: string,\n  ) {\n    super(CMIElement, errorCode);\n    this.message = `${CMIElement} : ${errorMessage}`;\n    this._errorMessage = errorMessage;\n    if (detailedMessage) {\n      this._detailedMessage = detailedMessage;\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  private readonly _errorMessage: string;\n  private readonly _detailedMessage: string = \"\";\n\n  /**\n   * Getter for _errorMessage\n   * @return {string}\n   */\n  get errorMessage(): string {\n    return this._errorMessage;\n  }\n\n  /**\n   * Getter for _detailedMessage\n   * @return {string}\n   */\n  get detailedMessage(): string {\n    return this._detailedMessage;\n  }\n}\n","import { ValidationError } from \"../exceptions\";\nimport { scorm12_constants } from \"../constants/api_constants\";\n\nconst scorm12_errors = scorm12_constants.error_descriptions;\n\n/**\n * SCORM 1.2 Validation Error\n */\nexport class Scorm12ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm12_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm12_errors[String(errorCode)]?.basicMessage || \"Unknown error\",\n        scorm12_errors[String(errorCode)]?.detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm12_errors[\"101\"]?.basicMessage ?? \"General error\",\n        scorm12_errors[\"101\"]?.detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm12ValidationError.prototype);\n  }\n}\n","/**\n * Base class for API cmi objects\n */\nexport abstract class BaseCMI {\n  jsonString = false;\n  protected readonly _cmi_element: string;\n  protected _initialized = false;\n\n  /**\n   * Constructor for BaseCMI\n   * @param {string} cmi_element\n   */\n  constructor(cmi_element: string) {\n    this._cmi_element = cmi_element;\n  }\n\n  /**\n   * Getter for _initialized\n   * @return {boolean}\n   */\n  get initialized(): boolean {\n    return this._initialized;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize(): void {\n    this._initialized = true;\n  }\n\n  abstract reset(): void;\n}\n\n/**\n * Base class for cmi root objects\n */\nexport abstract class BaseRootCMI extends BaseCMI {\n  protected _start_time: number | undefined;\n\n  /**\n   * Start time of the course\n   * @type {number | undefined}\n   * @protected\n   */\n  get start_time(): number | undefined {\n    return this._start_time;\n  }\n\n  /**\n   * Setter for start_time. Can only be called once.\n   */\n  setStartTime(): void {\n    if (this._start_time === undefined) {\n      this._start_time = new Date().getTime();\n    } else {\n      throw new Error(\"Start time has already been set.\");\n    }\n  }\n\n  abstract getCurrentTotalTime(): string;\n}\n","/**\n * Constants for time conversion calculations.\n * These are used throughout the codebase for converting between different time formats.\n */\nexport const SECONDS_PER_SECOND = 1.0;\nexport const SECONDS_PER_MINUTE = 60;\nexport const SECONDS_PER_HOUR = 60 * SECONDS_PER_MINUTE;\nexport const SECONDS_PER_DAY = 24 * SECONDS_PER_HOUR;\n\ntype Designation = {\n  [key: string]: number;\n};\n\n/**\n * A record with string keys and unknown values.\n * This is a more type-safe alternative to using `any`.\n */\nexport type StringKeyMap = Record<string, unknown>;\n\nconst designations: Designation = {\n  D: SECONDS_PER_DAY,\n  H: SECONDS_PER_HOUR,\n  M: SECONDS_PER_MINUTE,\n  S: SECONDS_PER_SECOND,\n};\n\n/**\n * Converts a number of seconds to a formatted time string in HH:MM:SS format.\n * This function handles decimal seconds and ensures proper formatting with leading zeros.\n *\n * @param {number|null} totalSeconds - The total number of seconds to convert. If null or negative, returns \"00:00:00\".\n * @return {string} A formatted time string in HH:MM:SS format, with up to 2 decimal places for seconds if applicable.\n *\n * @example\n * // Returns \"01:30:45\"\n * getSecondsAsHHMMSS(5445);\n *\n * @example\n * // Returns \"00:00:30.5\"\n * getSecondsAsHHMMSS(30.5);\n *\n * @example\n * // Returns \"00:00:00\"\n * getSecondsAsHHMMSS(null);\n */\nexport const getSecondsAsHHMMSS = memoize((totalSeconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!totalSeconds || totalSeconds <= 0) {\n    return \"00:00:00\";\n  }\n\n  const hours = Math.floor(totalSeconds / SECONDS_PER_HOUR);\n  const dateObj = new Date(totalSeconds * 1000);\n  const minutes = dateObj.getUTCMinutes();\n  // make sure we add any possible decimal value\n  const seconds = dateObj.getSeconds();\n  const ms = totalSeconds % 1.0;\n  let msStr = \"\";\n\n  if (countDecimals(ms) > 0) {\n    if (countDecimals(ms) > 2) {\n      msStr = ms.toFixed(2);\n    } else {\n      msStr = String(ms);\n    }\n\n    msStr = \".\" + msStr.split(\".\")[1];\n  }\n\n  return (hours + \":\" + minutes + \":\" + seconds).replace(/\\b\\d\\b/g, \"0$&\") + msStr;\n});\n\n/**\n * Converts a number of seconds to an ISO 8601 duration string (e.g., \"PT1H30M45S\").\n * This function handles the complexity of formatting according to the ISO 8601 standard,\n * including the proper placement of the \"T\" separator for time components.\n *\n * @param {number|null} seconds - The number of seconds to convert. If null or negative, returns \"PT0S\".\n * @return {string} An ISO 8601 formatted duration string.\n *\n * @example\n * // Returns \"PT1H30M45S\" (1 hour, 30 minutes, 45 seconds)\n * getSecondsAsISODuration(5445);\n *\n * @example\n * // Returns \"PT30.5S\" (30.5 seconds)\n * getSecondsAsISODuration(30.5);\n *\n * @example\n * // Returns \"P1DT1H\" (1 day, 1 hour)\n * getSecondsAsISODuration(90000);\n *\n * @example\n * // Returns \"PT0S\" (0 seconds)\n * getSecondsAsISODuration(null);\n */\nexport const getSecondsAsISODuration = memoize((seconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!seconds || seconds <= 0) {\n    return \"PT0S\";\n  }\n\n  let duration = \"P\";\n  let remainder = seconds;\n\n  // Convert to array of entries and use functional methods\n  const designationEntries = Object.entries(designations);\n\n  // Process each time designation\n  designationEntries.forEach(([designationsKey, current_seconds]) => {\n    let value = Math.floor(remainder / current_seconds);\n    remainder = remainder % current_seconds;\n\n    // Limit decimal places\n    if (countDecimals(remainder) > 2) {\n      remainder = Number(Number(remainder).toFixed(2));\n    }\n\n    // If we have anything left in the remainder, and we're currently adding\n    // seconds to the duration, go ahead and add the decimal to the seconds\n    if (designationsKey === \"S\" && remainder > 0) {\n      value += remainder;\n    }\n\n    if (value) {\n      // Add the 'T' separator for time components if needed\n      const needsTimeSeparator =\n        (duration.indexOf(\"D\") > 0 || [\"H\", \"M\", \"S\"].includes(designationsKey)) &&\n        duration.indexOf(\"T\") === -1;\n\n      if (needsTimeSeparator) {\n        duration += \"T\";\n      }\n\n      duration += `${value}${designationsKey}`;\n    }\n  });\n\n  return duration;\n});\n\n/**\n * Converts a time string in HH:MM:SS format to the equivalent number of seconds.\n * This function is flexible and can handle various input types, converting them to strings as needed.\n *\n * @param {string|number|boolean|null} timeString - The time string to convert, typically in HH:MM:SS format.\n *                                                 If not a string, it will be converted to one.\n *                                                 If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} timeRegex - The regular expression used to validate the time string format.\n *                                    If a string is provided, it will be converted to a RegExp.\n * @return {number} The total number of seconds represented by the time string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getTimeAsSeconds(\"01:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getTimeAsSeconds(\"invalid\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 30 (converts number to string \"30\" then parses as 0:0:30)\n * getTimeAsSeconds(30, /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport const getTimeAsSeconds = memoize(\n  (timeString: string | number | boolean | null, timeRegex: RegExp | string): number => {\n    if (typeof timeString === \"number\" || typeof timeString === \"boolean\") {\n      timeString = String(timeString);\n    }\n    if (typeof timeRegex === \"string\") {\n      timeRegex = new RegExp(timeRegex);\n    }\n    if (!timeString) {\n      return 0;\n    }\n\n    if (!timeString.match(timeRegex)) {\n      // If the string represents a simple number, treat it as seconds\n      if (/^\\d+(?:\\.\\d+)?$/.test(timeString)) {\n        return Number(timeString);\n      }\n      return 0;\n    }\n\n    const parts = timeString.split(\":\");\n    const hours = Number(parts[0]);\n    const minutes = Number(parts[1]);\n    const seconds = Number(parts[2]);\n    return hours * 3600 + minutes * 60 + seconds;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (timeString, timeRegex) => {\n    const timeStr = typeof timeString === \"string\" ? timeString : String(timeString ?? \"\");\n    const regexStr = typeof timeRegex === \"string\" ? timeRegex : (timeRegex?.toString() ?? \"\");\n    return `${timeStr}:${regexStr}`;\n  },\n);\n\n/**\n * Converts an ISO 8601 duration string (e.g., \"PT1H30M45S\") to the equivalent number of seconds.\n * This function parses the duration string using a regular expression to extract years, days,\n * hours, minutes, and seconds components.\n *\n * @param {string|null} duration - The ISO 8601 duration string to convert.\n *                                If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n *                                       The regex should have capture groups for years, days, hours, minutes, and seconds.\n * @return {number} The total number of seconds represented by the duration string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getDurationAsSeconds(\"PT1H30M45S\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 90000 (1 day, 1 hour)\n * getDurationAsSeconds(\"P1DT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getDurationAsSeconds(\"invalid\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport const getDurationAsSeconds = memoize(\n  (duration: string | null, durationRegex: RegExp | string): number => {\n    if (typeof durationRegex === \"string\") {\n      durationRegex = new RegExp(durationRegex);\n    }\n\n    if (!duration || !duration?.match?.(durationRegex)) {\n      return 0;\n    }\n\n    const [, years, _, , days, hours, minutes, seconds] =\n      new RegExp(durationRegex).exec?.(duration) ?? [];\n    let result = 0.0;\n    result += Number(seconds) || 0.0;\n    result += Number(minutes) * 60.0 || 0.0;\n    result += Number(hours) * 3600.0 || 0.0;\n    result += Number(days) * (60 * 60 * 24.0) || 0.0;\n    result += Number(years) * (60 * 60 * 24 * 365.0) || 0.0;\n    return result;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (duration, durationRegex) => {\n    const durationStr = duration ?? \"\";\n    const regexStr =\n      typeof durationRegex === \"string\" ? durationRegex : (durationRegex?.toString() ?? \"\");\n    return `${durationStr}:${regexStr}`;\n  },\n);\n\n/**\n * Validates ISO 8601 duration format according to SCORM 2004 specification\n * @param {string} duration - The duration string to validate\n * @return {boolean} - True if valid ISO 8601 duration format\n */\nexport const validateISO8601Duration = memoize(\n  (duration: string, durationRegex: RegExp | string): boolean => {\n    if (typeof durationRegex === \"string\") {\n      durationRegex = new RegExp(durationRegex);\n    }\n\n    return !(!duration || !duration?.match?.(durationRegex));\n  },\n);\n\n/**\n * Adds together two ISO 8601 duration strings and returns the result as a new ISO 8601 duration string.\n * This function works by converting both durations to seconds, adding them together, and then\n * converting the result back to an ISO 8601 duration string.\n *\n * @param {string} first - The first ISO 8601 duration string.\n * @param {string} second - The second ISO 8601 duration string.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n * @return {string} A new ISO 8601 duration string representing the sum of the two input durations.\n *\n * @example\n * // Returns \"PT2H\" (1 hour + 1 hour = 2 hours)\n * addTwoDurations(\"PT1H\", \"PT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"PT1H30M\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addTwoDurations(\"PT1H\", \"PT30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"P1DT1H30M\" (1 day + 1 hour and 30 minutes = 1 day, 1 hour, and 30 minutes)\n * addTwoDurations(\"P1D\", \"PT1H30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport function addTwoDurations(\n  first: string,\n  second: string,\n  durationRegex: RegExp | string,\n): string {\n  const regex: RegExp =\n    typeof durationRegex === \"string\" ? new RegExp(durationRegex) : durationRegex;\n  return getSecondsAsISODuration(\n    getDurationAsSeconds(first, regex) + getDurationAsSeconds(second, regex),\n  );\n}\n\n/**\n * Adds together two time strings in HH:MM:SS format and returns the result as a new time string.\n * This function works by converting both time strings to seconds, adding them together, and then\n * converting the result back to an HH:MM:SS format.\n *\n * @param {string} first - The first time string in HH:MM:SS format.\n * @param {string} second - The second time string in HH:MM:SS format.\n * @param {RegExp|string} timeRegex - The regular expression used to validate and parse the time strings.\n *                                   If a string is provided, it will be converted to a RegExp.\n * @return {string} A new time string in HH:MM:SS format representing the sum of the two input times.\n *\n * @example\n * // Returns \"02:00:00\" (1 hour + 1 hour = 2 hours)\n * addHHMMSSTimeStrings(\"01:00:00\", \"01:00:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:00\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:45\" (1 hour + 30 minutes and 45 seconds = 1 hour, 30 minutes, and 45 seconds)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport function addHHMMSSTimeStrings(\n  first: string,\n  second: string,\n  timeRegex: RegExp | string,\n): string {\n  if (typeof timeRegex === \"string\") {\n    timeRegex = new RegExp(timeRegex);\n  }\n  return getSecondsAsHHMMSS(\n    getTimeAsSeconds(first, timeRegex) + getTimeAsSeconds(second, timeRegex),\n  );\n}\n\n/**\n * Flattens a nested JSON object into a flat object with dot notation for nested properties.\n * This function recursively traverses the object and creates new keys using dot notation\n * for nested objects and bracket notation for arrays.\n *\n * @param {StringKeyMap} data - The nested object to flatten.\n * @return {StringKeyMap} A flattened object where nested properties are represented with dot notation.\n *\n * @example\n * // Returns { \"a\": 1, \"b.c\": 2, \"b.d\": 3, \"e[0]\": 4, \"e[1]\": 5 }\n * flatten({\n *   a: 1,\n *   b: { c: 2, d: 3 },\n *   e: [4, 5]\n * });\n *\n * @example\n * // Returns { \"\": [] } for an empty array\n * flatten([]);\n *\n * @example\n * // Returns { \"\": {} } for an empty object\n * flatten({});\n */\nexport function flatten(data: StringKeyMap): StringKeyMap {\n  const result: StringKeyMap = {};\n\n  /**\n   * Recurse through the object\n   * @param {*} cur\n   * @param {*} prop\n   */\n  function recurse(cur: any, prop: any) {\n    if (Object(cur) !== cur) {\n      result[prop] = cur;\n    } else if (Array.isArray(cur)) {\n      // Use forEach instead of for loop\n      cur.forEach((item, i) => {\n        recurse(item, `${prop}[${i}]`);\n      });\n\n      if (cur.length === 0) result[prop] = [];\n    } else {\n      const keys = Object.keys(cur).filter((p) => Object.prototype.hasOwnProperty.call(cur, p));\n\n      const isEmpty = keys.length === 0;\n\n      // Use forEach instead of for...in loop\n      keys.forEach((p) => {\n        recurse(cur[p], prop ? `${prop}.${p}` : p);\n      });\n\n      if (isEmpty && prop) result[prop] = {};\n    }\n  }\n\n  recurse(data, \"\");\n  return result;\n}\n\n/**\n * Converts a flattened object back into a nested object structure.\n * This function is the inverse of `flatten()`. It parses dot notation and bracket notation\n * in property names to recreate the original nested structure.\n *\n * @param {StringKeyMap} data - The flattened object to unflatten.\n * @return {object} A nested object recreated from the flattened structure.\n *\n * @example\n * // Returns { a: 1, b: { c: 2, d: 3 }, e: [4, 5] }\n * unflatten({\n *   \"a\": 1,\n *   \"b.c\": 2,\n *   \"b.d\": 3,\n *   \"e[0]\": 4,\n *   \"e[1]\": 5\n * });\n *\n * @example\n * // Handles array indices correctly\n * unflatten({\n *   \"users[0].name\": \"John\",\n *   \"users[0].email\": \"john@example.com\",\n *   \"users[1].name\": \"Jane\",\n *   \"users[1].email\": \"jane@example.com\"\n * });\n * // Returns:\n * // {\n * //   users: [\n * //     { name: \"John\", email: \"john@example.com\" },\n * //     { name: \"Jane\", email: \"jane@example.com\" }\n * //   ]\n * // }\n */\nexport function unflatten(data: StringKeyMap): object {\n  \"use strict\";\n\n  if (Object(data) !== data || Array.isArray(data)) return data;\n  const result: StringKeyMap = {};\n\n  // Regex pattern for parsing property paths\n  const pattern = /\\.?([^.[\\]]+)|\\[(\\d+)]/g;\n\n  // Get all own properties and process them\n  Object.keys(data)\n    .filter((p) => Object.prototype.hasOwnProperty.call(data, p))\n    .forEach((p) => {\n      let cur = result;\n      let prop = \"\";\n\n      // Create a new regex instance for each property to reset lastIndex\n      const regex = new RegExp(pattern);\n\n      // Process all matches in the property path\n      Array.from({ length: p.match(new RegExp(pattern, \"g\"))?.length ?? 0 }, () =>\n        regex.exec(p),\n      ).forEach((m) => {\n        if (m) {\n          // Create array or object as needed\n          cur = (cur[prop] ?? (cur[prop] = m[2] ? [] : ({} as StringKeyMap))) as StringKeyMap;\n          prop = m[2] || m[1] || \"\";\n        }\n      });\n\n      cur[prop] = data[p];\n    });\n\n  return (result[\"\"] ?? result) as object;\n}\n\n/**\n * Counts the number of decimal places in a number.\n * This function handles both integer and floating-point numbers.\n *\n * @param {number} num - The number to analyze.\n * @return {number} The number of decimal places. Returns 0 for integers or if the number doesn't have a decimal point.\n *\n * @example\n * // Returns 0\n * countDecimals(42);\n *\n * @example\n * // Returns 2\n * countDecimals(3.14);\n *\n * @example\n * // Returns 5\n * countDecimals(1.23456);\n */\nexport function countDecimals(num: number): number {\n  if (Math.floor(num) === num || String(num)?.indexOf?.(\".\") < 0) return 0;\n  const parts = num.toString().split(\".\")?.[1];\n  return parts?.length ?? 0;\n}\n\n/**\n * Formats SCORM messages for consistent and readable logging.\n * This function pads the function name and CMI element to create aligned log messages\n * that are easier to read in log files or console output.\n *\n * @param {string} functionName - The name of the function that generated the message.\n * @param {string} message - The message content to be logged.\n * @param {string} [CMIElement] - Optional. The CMI element related to the message.\n * @return {string} A formatted message string with consistent padding.\n *\n * @example\n * // Returns \"initialize          : Successfully initialized\"\n * formatMessage(\"initialize\", \"Successfully initialized\");\n *\n * @example\n * // Returns \"getValue            : cmi.core.student_id                                             : 12345\"\n * formatMessage(\"getValue\", \"12345\", \"cmi.core.student_id\");\n *\n * @example\n * // Returns \"setValue            : cmi.core.lesson_status                                          : completed\"\n * formatMessage(\"setValue\", \"completed\", \"cmi.core.lesson_status\");\n */\nexport function formatMessage(functionName: string, message: string, CMIElement?: string): string {\n  const baseLength = 20;\n\n  // Use string padding instead of loops\n  const paddedFunction = functionName.padEnd(baseLength);\n  let messageString = `${paddedFunction}: `;\n\n  if (CMIElement) {\n    const CMIElementBaseLength = 70;\n    // Add CMIElement and pad to the required length\n    messageString += CMIElement;\n    messageString = messageString.padEnd(CMIElementBaseLength);\n  }\n\n  // Add the message (or empty string if null/undefined)\n  messageString += message ?? \"\";\n\n  return messageString;\n}\n\n/**\n * Checks if a string contains a specific pattern using regular expression matching.\n * This function is a wrapper around JavaScript's String.match() method that handles\n * null/undefined values gracefully.\n *\n * @param {string} str - The string to search within. If null or undefined, returns false.\n * @param {string} tester - The pattern to search for. Can be a regular expression pattern.\n * @return {boolean} True if the pattern is found in the string, false otherwise.\n *\n * @example\n * // Returns true\n * stringMatches(\"Hello, world!\", \"world\");\n *\n * @example\n * // Returns true\n * stringMatches(\"The quick brown fox\", \"\\\\w+\\\\s+\\\\w+\");\n *\n * @example\n * // Returns false\n * stringMatches(\"Hello, world!\", \"universe\");\n *\n * @example\n * // Returns false (handles null gracefully)\n * stringMatches(null, \"test\");\n */\nexport function stringMatches(str: string | null | undefined, tester: string): boolean {\n  if (typeof str !== \"string\") {\n    return false;\n  }\n  return new RegExp(tester).test(str);\n}\n\n/**\n * Creates a memoized (cached) version of a function for performance optimization.\n * This function caches the results of previous calls with the same arguments,\n * avoiding redundant calculations for repeated calls with the same input.\n *\n * @template T - The type of the function to memoize\n * @param {T} fn - The function to memoize\n * @param {Function} [keyFn] - Optional function to generate a custom cache key.\n *                           Useful for functions with complex arguments that can't be serialized.\n * @return {T} A memoized version of the input function with the same signature\n *\n * @example\n * // Basic usage with a simple function\n * const memoizedAdd = memoize((a, b) => {\n *   console.log('Calculating...');\n *   return a + b;\n * });\n *\n * memoizedAdd(1, 2); // Logs \"Calculating...\" and returns 3\n * memoizedAdd(1, 2); // Returns 3 without logging (uses cached result)\n *\n * @example\n * // Using a custom key function for objects that can't be serialized\n * const memoizedProcessUser = memoize(\n *   (user) => {\n *     console.log('Processing user...');\n *     return { ...user, processed: true };\n *   },\n *   (user) => user.id // Use user.id as the cache key\n * );\n *\n * memoizedProcessUser({ id: 123, name: 'John' }); // Logs and processes\n * memoizedProcessUser({ id: 123, name: 'John' }); // Uses cached result\n */\nexport function memoize<T extends (...args: any[]) => any>(\n  fn: T,\n  keyFn?: (...args: Parameters<T>) => string,\n): T {\n  const cache = new Map<string, ReturnType<T>>();\n\n  return ((...args: Parameters<T>): ReturnType<T> => {\n    const key = keyFn ? keyFn(...args) : JSON.stringify(args);\n\n    return cache.has(key)\n      ? (cache.get(key) as ReturnType<T>)\n      : (() => {\n          const result = fn(...args);\n          cache.set(key, result);\n          return result;\n        })();\n  }) as T;\n}\n","import { BaseScormValidationError } from \"../../exceptions\";\nimport { memoize } from \"../../utilities\";\n\n/**\n * Check if the value matches the proper format. If not, throw proper error code.\n *\n * @param {string} value\n * @param {string} regexPattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @param {boolean} [allowEmptyString]\n * @return {boolean}\n */\nexport const checkValidFormat = memoize(\n  (\n    CMIElement: string,\n    value: string,\n    regexPattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n    allowEmptyString?: boolean,\n  ): boolean => {\n    // noinspection SuspiciousTypeOfGuard\n    if (typeof value !== \"string\") {\n      return false;\n    }\n    const formatRegex = new RegExp(regexPattern);\n    const matches = value.match(formatRegex);\n    if (allowEmptyString && value === \"\") {\n      return true;\n    }\n    if (value === undefined || !matches || matches[0] === \"\") {\n      throw new errorClass(CMIElement, errorCode);\n    }\n    return true;\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, regexPattern, errorCode, _errorClass, allowEmptyString) => {\n    // Use typeof for non-string values to ensure consistent cache keys\n    // noinspection SuspiciousTypeOfGuard\n    const valueKey = typeof value === \"string\" ? value : `[${typeof value}]`;\n    return `${CMIElement}:${valueKey}:${regexPattern}:${errorCode}:${allowEmptyString || false}`;\n  },\n);\n\n/**\n * Check if the value matches the proper range. If not, throw proper error code.\n *\n * @param {any} value\n * @param {string} rangePattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @return {boolean}\n */\nexport const checkValidRange = memoize(\n  (\n    CMIElement: string,\n    value: any,\n    rangePattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean => {\n    const ranges = rangePattern.split(\"#\");\n    value = value * 1.0;\n    if (ranges[0] && value >= ranges[0]) {\n      if (ranges[1] && (ranges[1] === \"*\" || value <= ranges[1])) {\n        return true;\n      } else {\n        throw new errorClass(CMIElement, errorCode);\n      }\n    } else {\n      throw new errorClass(CMIElement, errorCode);\n    }\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, rangePattern, errorCode, _errorClass) =>\n    `${CMIElement}:${value}:${rangePattern}:${errorCode}`,\n);\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm12_errors.TYPE_MISMATCH as number,\n    Scorm12ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidRange(\n  CMIElement: string,\n  value: any,\n  rangePattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  if (!allowEmptyString && value === \"\") {\n    throw new Scorm12ValidationError(CMIElement, scorm12_errors.VALUE_OUT_OF_RANGE as number);\n  }\n\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm12_errors.VALUE_OUT_OF_RANGE as number,\n    Scorm12ValidationError,\n  );\n}\n","import { BaseScormValidationError } from \"../exceptions\";\nimport { checkValidFormat, checkValidRange } from \"../cmi/common/validation\";\nimport { check12ValidFormat, check12ValidRange } from \"../cmi/scorm12/validation\";\nimport { scorm12_regex } from \"../constants/regex\";\nimport { scorm12_errors } from \"../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../exceptions/scorm12_exceptions\";\n\n/**\n * Service for validating CMI data model properties\n */\nexport class ValidationService {\n  /**\n   * Validates a score property (raw, min, max)\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @param {string} decimalRegex - The regex pattern for decimal validation\n   * @param {string | false} scoreRange - The range pattern for score validation, or false if no range validation is needed\n   * @param {number} invalidTypeCode - The error code for invalid type\n   * @param {number} invalidRangeCode - The error code for invalid range\n   * @param {typeof BaseScormValidationError} errorClass - The error class to use for validation errors\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScore(\n    CMIElement: string,\n    value: string,\n    decimalRegex: string,\n    scoreRange: string | false,\n    invalidTypeCode: number,\n    invalidRangeCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean {\n    return (\n      checkValidFormat(CMIElement, value, decimalRegex, invalidTypeCode, errorClass) &&\n      (!scoreRange || checkValidRange(CMIElement, value, scoreRange, invalidRangeCode, errorClass))\n    );\n    // This line should never be reached due to exceptions being thrown\n  }\n\n  /**\n   * Validates a SCORM 1.2 audio property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Audio(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.audio_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 language property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Language(CMIElement: string, value: string): boolean {\n    return check12ValidFormat(CMIElement, value, scorm12_regex.CMIString256);\n  }\n\n  /**\n   * Validates a SCORM 1.2 speed property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Speed(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.speed_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 text property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Text(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.text_range)\n    );\n  }\n\n  /**\n   * Validates if a property is read-only\n   *\n   * @param {string} CMIElement\n   * @param {boolean} initialized - Whether the object is initialized\n   * @throws {BaseScormValidationError} - Throws an error if the object is initialized\n   */\n  validateReadOnly(CMIElement: string, initialized: boolean): void {\n    if (initialized) {\n      throw new Scorm12ValidationError(CMIElement, scorm12_errors.READ_ONLY_ELEMENT as number);\n    }\n  }\n}\n\n// Export a singleton instance of the ValidationService\nexport const validationService = new ValidationService();\n","import { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"./base_cmi\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { validationService } from \"../../services/ValidationService\";\nimport { ScoreObject } from \"../../types/api_types\";\n\n/**\n * Base class for cmi *.score objects\n */\nexport class CMIScore extends BaseCMI {\n  private readonly __children: string;\n  private readonly __score_range: string | false;\n  private readonly __invalid_error_code: number;\n  private readonly __invalid_type_code: number;\n  private readonly __invalid_range_code: number;\n  private readonly __decimal_regex: string;\n  private readonly __error_class: typeof BaseScormValidationError;\n  protected _raw = \"\";\n  protected _min = \"\";\n  protected _max: string;\n\n  /**\n   * Constructor for *.score\n   * @param {\n   *     score_children: string,\n   *     score_range: string,\n   *     max: string,\n   *     invalidErrorCode: number,\n   *     invalidTypeCode: number,\n   *     invalidRangeCode: number,\n   *     decimalRegex: string,\n   *     errorClass: typeof BaseScormValidationError\n   * } params\n   */\n  constructor(params: {\n    CMIElement: string;\n    score_children?: string;\n    score_range?: string;\n    max?: string;\n    invalidErrorCode?: number;\n    invalidTypeCode?: number;\n    invalidRangeCode?: number;\n    decimalRegex?: string;\n    errorClass: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n\n    this.__children = params.score_children || scorm12_constants.score_children;\n    this.__score_range = !params.score_range ? false : scorm12_regex.score_range;\n    this._max = params.max || params.max === \"\" ? params.max : \"100\";\n    this.__invalid_error_code =\n      params.invalidErrorCode || (scorm12_errors.INVALID_SET_VALUE as number);\n    this.__invalid_type_code = params.invalidTypeCode || (scorm12_errors.TYPE_MISMATCH as number);\n    this.__invalid_range_code =\n      params.invalidRangeCode || (scorm12_errors.VALUE_OUT_OF_RANGE as number);\n    this.__decimal_regex = params.decimalRegex || scorm12_regex.CMIDecimal;\n    this.__error_class = params.errorClass;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this.__error_class(this._cmi_element + \"._children\", this.__invalid_error_code);\n  }\n\n  /**\n   * Getter for _raw\n   * @return {string}\n   */\n  get raw(): string {\n    return this._raw;\n  }\n\n  /**\n   * Setter for _raw\n   * @param {string} raw\n   */\n  set raw(raw: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".raw\",\n        raw,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._raw = raw;\n    }\n  }\n\n  /**\n   * Getter for _min\n   * @return {string}\n   */\n  get min(): string {\n    return this._min;\n  }\n\n  /**\n   * Setter for _min\n   * @param {string} min\n   */\n  set min(min: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".min\",\n        min,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._min = min;\n    }\n  }\n\n  /**\n   * Getter for _max\n   * @return {string}\n   */\n  get max(): string {\n    return this._max;\n  }\n\n  /**\n   * Setter for _max\n   * @param {string} max\n   */\n  set max(max: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".max\",\n        max,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._max = max;\n    }\n  }\n\n  /**\n   * Getter for _score_range\n   * @return {string | false}\n   */\n  public getScoreObject(): ScoreObject {\n    const scoreObject: ScoreObject = {};\n    if (!Number.isNaN(Number.parseFloat(this.raw))) {\n      scoreObject.raw = Number.parseFloat(this.raw);\n    }\n    if (!Number.isNaN(Number.parseFloat(this.min))) {\n      scoreObject.min = Number.parseFloat(this.min);\n    }\n    if (!Number.isNaN(Number.parseFloat(this.max))) {\n      scoreObject.max = Number.parseFloat(this.max);\n    }\n    return scoreObject;\n  }\n\n  /**\n   * toJSON for *.score\n   * @return {\n   *    {\n   *      min: string,\n   *      max: string,\n   *      raw: string\n   *    }\n   *    }\n   */\n  toJSON(): {\n    min: string;\n    max: string;\n    raw: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { check12ValidFormat } from \"../scorm12/validation\";\nimport * as Util from \"../../utilities\";\n\n/**\n * Class representing the `cmi.core` object\n * @extends BaseCMI\n */\nexport class CMICore extends BaseCMI {\n  /**\n   * Constructor for `cmi.core`\n   */\n  constructor() {\n    super(\"cmi.core\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.core.score\",\n      score_children: scorm12_constants.score_children,\n      score_range: scorm12_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE as number,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH as number,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE as number,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n\n  public readonly score: CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  private readonly __children = scorm12_constants.core_children;\n  private _student_id = \"\";\n  private _student_name = \"\";\n  private _lesson_location = \"\";\n  private _credit = \"\";\n  private _lesson_status = \"not attempted\";\n  private _entry = \"\";\n  private _total_time = \"\";\n  private _lesson_mode = \"normal\";\n  private _exit = \"\";\n  private _session_time = \"00:00:00\";\n  private _suspend_data = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._exit = \"\";\n    this._entry = \"\";\n\n    /**\n     * Resetting ensures we accurately track the time spent on each SCO session independently.\n     * Each new session should start from zero, so we can reset cmi.core.session_time at the beginning of each session.\n     */\n    this._session_time = \"00:00:00\";\n\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE as number,\n    );\n  }\n\n  /**\n   * Getter for _student_id\n   * @return {string}\n   */\n  get student_id(): string {\n    return this._student_id;\n  }\n\n  /**\n   * Setter for _student_id. Can only be called before  initialization.\n   * @param {string} student_id\n   */\n  set student_id(student_id: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".student_id\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._student_id = student_id;\n    }\n  }\n\n  /**\n   * Getter for _student_name\n   * @return {string}\n   */\n  get student_name(): string {\n    return this._student_name;\n  }\n\n  /**\n   * Setter for _student_name. Can only be called before  initialization.\n   * @param {string} student_name\n   */\n  set student_name(student_name: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".student_name\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._student_name = student_name;\n    }\n  }\n\n  /**\n   * Getter for _lesson_location\n   * @return {string}\n   */\n  get lesson_location(): string {\n    return this._lesson_location;\n  }\n\n  /**\n   * Setter for _lesson_location\n   * @param {string} lesson_location\n   */\n  set lesson_location(lesson_location: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".lesson_location\",\n        lesson_location,\n        scorm12_regex.CMIString256,\n        true,\n      )\n    ) {\n      this._lesson_location = lesson_location;\n    }\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this._credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before  initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".credit\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._credit = credit;\n    }\n  }\n\n  /**\n   * Getter for _lesson_status\n   * @return {string}\n   */\n  get lesson_status(): string {\n    return this._lesson_status;\n  }\n\n  /**\n   * Setter for _lesson_status\n   * @param {string} lesson_status\n   */\n  set lesson_status(lesson_status: string) {\n    if (this.initialized) {\n      if (\n        check12ValidFormat(\n          this._cmi_element + \".lesson_status\",\n          lesson_status,\n          scorm12_regex.CMIStatus,\n        )\n      ) {\n        this._lesson_status = lesson_status;\n      }\n    } else {\n      if (\n        check12ValidFormat(\n          this._cmi_element + \".lesson_status\",\n          lesson_status,\n          scorm12_regex.CMIStatus2,\n        )\n      ) {\n        this._lesson_status = lesson_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this._entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before  initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".entry\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._entry = entry;\n    }\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this._total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before  initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".total_time\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._total_time = total_time;\n    }\n  }\n\n  /**\n   * Getter for _lesson_mode\n   * @return {string}\n   */\n  get lesson_mode(): string {\n    return this._lesson_mode;\n  }\n\n  /**\n   * Setter for _lesson_mode. Can only be called before  initialization.\n   * @param {string} lesson_mode\n   */\n  set lesson_mode(lesson_mode: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".lesson_mode\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._lesson_mode = lesson_mode;\n    }\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".exit\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    if (check12ValidFormat(this._cmi_element + \".exit\", exit, scorm12_regex.CMIExit, true)) {\n      this._exit = exit;\n    }\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".session_time\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".session_time\",\n        session_time,\n        scorm12_regex.CMITimespan,\n      )\n    ) {\n      this._session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this._suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".suspend_data\",\n        suspend_data,\n        scorm12_regex.CMIString4096,\n        true,\n      )\n    ) {\n      this._suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   * @param {number} start_time\n   * @return {string}\n   */\n  getCurrentTotalTime(start_time: number | undefined): string {\n    let sessionTime = this._session_time;\n    if (typeof start_time !== \"undefined\" && start_time !== null) {\n      const seconds = new Date().getTime() - start_time;\n      sessionTime = Util.getSecondsAsHHMMSS(seconds / 1000);\n    }\n\n    return Util.addHHMMSSTimeStrings(\n      this._total_time,\n      sessionTime,\n      new RegExp(scorm12_regex.CMITimespan),\n    );\n  }\n\n  /**\n   * toJSON for cmi.core\n   *\n   * @return {\n   *    {\n   *      student_name: string,\n   *      entry: string,\n   *      exit: string,\n   *      score: CMIScore,\n   *      student_id: string,\n   *      lesson_mode: string,\n   *      lesson_location: string,\n   *      lesson_status: string,\n   *      credit: string,\n   *      session_time: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    student_name: string;\n    entry: string;\n    exit: string;\n    score: CMIScore;\n    student_id: string;\n    lesson_mode: string;\n    lesson_location: string;\n    lesson_status: string;\n    credit: string;\n    session_time: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      student_id: this.student_id,\n      student_name: this.student_name,\n      lesson_location: this.lesson_location,\n      credit: this.credit,\n      lesson_status: this.lesson_status,\n      entry: this.entry,\n      lesson_mode: this.lesson_mode,\n      exit: this.exit,\n      session_time: this.session_time,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"./base_cmi\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Base class for cmi *.n objects\n */\nexport class CMIArray extends BaseCMI {\n  private readonly _errorCode: number;\n  private readonly _errorClass: typeof BaseScormValidationError;\n  private readonly __children: string;\n  public childArray: any[];\n\n  /**\n   * Constructor cmi *.n arrays\n   * @param {object} params\n   */\n  constructor(params: {\n    CMIElement: string;\n    children: string;\n    errorCode?: number;\n    errorClass?: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n    this.__children = params.children;\n    this._errorCode = params.errorCode || (scorm12_errors.GENERAL as number);\n    this._errorClass = params.errorClass || BaseScormValidationError;\n    this.childArray = [];\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(wipe: boolean = false): void {\n    this._initialized = false;\n    if (wipe) {\n      this.childArray = [];\n    } else {\n      // Reset all children\n      for (let i = 0; i < this.childArray.length; i++) {\n        this.childArray[i].reset();\n      }\n    }\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this._errorClass(this._cmi_element + \"._children\", this._errorCode);\n  }\n\n  /**\n   * Getter for _count\n   * @return {number}\n   */\n  get _count(): number {\n    return this.childArray.length;\n  }\n\n  /**\n   * Setter for _count. Just throws an error.\n   * @param {number} _count\n   */\n  set _count(_count: number) {\n    throw new this._errorClass(this._cmi_element + \"._count\", this._errorCode);\n  }\n\n  /**\n   * toJSON for *.n arrays\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result: { [key: string]: any } = {};\n    for (let i = 0; i < this.childArray.length; i++) {\n      result[i + \"\"] = this.childArray[i];\n    }\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { check12ValidFormat } from \"./validation\";\nimport { CMIArray } from \"../common/array\";\n\n/**\n * Class representing SCORM 1.2's `cmi.objectives` object\n * @extends CMIArray\n */\nexport class CMIObjectives extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives`\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.objectives\",\n      children: scorm12_constants.objectives_children,\n      errorCode: scorm12_errors.INVALID_SET_VALUE as number,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super(\"cmi.objectives.n\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.objectives.n.score\",\n      score_children: scorm12_constants.score_children,\n      score_range: scorm12_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE as number,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH as number,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE as number,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n\n  public readonly score: CMIScore;\n\n  private _id = \"\";\n  private _status = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._id = \"\";\n    this._status = \"\";\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check12ValidFormat(this._cmi_element + \".id\", id, scorm12_regex.CMIIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _status\n   * @return {string}\n   */\n  get status(): string {\n    return this._status;\n  }\n\n  /**\n   * Setter for _status\n   * @param {string} status\n   */\n  set status(status: string) {\n    if (check12ValidFormat(this._cmi_element + \".status\", status, scorm12_regex.CMIStatus2)) {\n      this._status = status;\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   * @return {\n   *    {\n   *      id: string,\n   *      status: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    status: string;\n    score: CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      status: this.status,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { validationService } from \"../../services/ValidationService\";\n\n/**\n * Class representing the SCORM 1.2 cmi.student_data object\n * @extends BaseCMI\n */\nexport class CMIStudentData extends BaseCMI {\n  private readonly __children;\n  private _mastery_score = \"\";\n  private _max_time_allowed = \"\";\n  private _time_limit_action = \"\";\n\n  /**\n   * Constructor for cmi.student_data\n   * @param {string} student_data_children\n   */\n  constructor(student_data_children?: string) {\n    super(\"cmi.student_data\");\n    this.__children = student_data_children\n      ? student_data_children\n      : scorm12_constants.student_data_children;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE as number,\n    );\n  }\n\n  /**\n   * Getter for _master_score\n   * @return {string}\n   */\n  get mastery_score(): string {\n    return this._mastery_score;\n  }\n\n  /**\n   * Setter for _master_score. Can only be called before  initialization.\n   * @param {string} mastery_score\n   */\n  set mastery_score(mastery_score: string) {\n    validationService.validateReadOnly(this._cmi_element + \".mastery_score\", this.initialized);\n    this._mastery_score = mastery_score;\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this._max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before  initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    validationService.validateReadOnly(this._cmi_element + \".max_time_allowed\", this.initialized);\n    this._max_time_allowed = max_time_allowed;\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this._time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before  initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    validationService.validateReadOnly(this._cmi_element + \".time_limit_action\", this.initialized);\n    this._time_limit_action = time_limit_action;\n  }\n\n  /**\n   * toJSON for cmi.student_data\n   *\n   * @return {\n   *    {\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      mastery_score: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    mastery_score: string;\n    max_time_allowed: string;\n    time_limit_action: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      mastery_score: this.mastery_score,\n      max_time_allowed: this.max_time_allowed,\n      time_limit_action: this.time_limit_action,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { validationService } from \"../../services/ValidationService\";\n\n/**\n * Class representing the SCORM 1.2 cmi.student_preference object\n * @extends BaseCMI\n */\nexport class CMIStudentPreference extends BaseCMI {\n  private readonly __children;\n\n  /**\n   * Constructor for cmi.student_preference\n   * @param {string} student_preference_children\n   */\n  constructor(student_preference_children?: string) {\n    super(\"cmi.student_preference\");\n    this.__children = student_preference_children\n      ? student_preference_children\n      : scorm12_constants.student_preference_children;\n  }\n\n  private _audio = \"\";\n  private _language = \"\";\n  private _speed = \"\";\n  private _text = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE as number,\n    );\n  }\n\n  /**\n   * Getter for _audio\n   * @return {string}\n   */\n  get audio(): string {\n    return this._audio;\n  }\n\n  /**\n   * Setter for _audio\n   * @param {string} audio\n   */\n  set audio(audio: string) {\n    if (validationService.validateScorm12Audio(this._cmi_element + \".audio\", audio)) {\n      this._audio = audio;\n    }\n  }\n\n  /**\n   * Getter for _language\n   * @return {string}\n   */\n  get language(): string {\n    return this._language;\n  }\n\n  /**\n   * Setter for _language\n   * @param {string} language\n   */\n  set language(language: string) {\n    if (validationService.validateScorm12Language(this._cmi_element + \".language\", language)) {\n      this._language = language;\n    }\n  }\n\n  /**\n   * Getter for _speed\n   * @return {string}\n   */\n  get speed(): string {\n    return this._speed;\n  }\n\n  /**\n   * Setter for _speed\n   * @param {string} speed\n   */\n  set speed(speed: string) {\n    if (validationService.validateScorm12Speed(this._cmi_element + \".speed\", speed)) {\n      this._speed = speed;\n    }\n  }\n\n  /**\n   * Getter for _text\n   * @return {string}\n   */\n  get text(): string {\n    return this._text;\n  }\n\n  /**\n   * Setter for _text\n   * @param {string} text\n   */\n  set text(text: string) {\n    if (validationService.validateScorm12Text(this._cmi_element + \".text\", text)) {\n      this._text = text;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_preference\n   *\n   * @return {\n   *    {\n   *      audio: string,\n   *      language: string,\n   *      speed: string,\n   *      text: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    audio: string;\n    language: string;\n    speed: string;\n    text: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio: this.audio,\n      language: this.language,\n      speed: this.speed,\n      text: this.text,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check12ValidFormat, check12ValidRange } from \"./validation\";\nimport { scorm12_regex } from \"../../constants/regex\";\n\n/**\n * Class representing the SCORM 1.2 `cmi.interactions`\n * @extends CMIArray\n */\nexport class CMIInteractions extends CMIArray {\n  /**\n   * Constructor for `cmi.interactions`\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.interactions\",\n      children: scorm12_constants.interactions_children,\n      errorCode: scorm12_errors.INVALID_SET_VALUE as number,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n object\n   */\n  constructor() {\n    super(\"cmi.interactions.n\");\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm12_errors.INVALID_SET_VALUE as number,\n      errorClass: Scorm12ValidationError,\n      children: scorm12_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.correct_responses\",\n      errorCode: scorm12_errors.INVALID_SET_VALUE as number,\n      errorClass: Scorm12ValidationError,\n      children: scorm12_constants.correct_responses_children,\n    });\n  }\n\n  public readonly objectives: CMIArray;\n  public readonly correct_responses: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  private _id = \"\";\n  private _time = \"\";\n  private _type = \"\";\n  private _weighting = \"\";\n  private _student_response = \"\";\n  private _result = \"\";\n  private _latency = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n\n    this._id = \"\";\n    this._time = \"\";\n    this._type = \"\";\n    this._weighting = \"\";\n    this._student_response = \"\";\n    this._result = \"\";\n    this._latency = \"\";\n\n    this.objectives?.reset();\n    this.correct_responses?.reset();\n  }\n\n  /**\n   * Getter for _id. Should only be called during JSON export.\n   * @return {string}\n   */\n  get id(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".id\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check12ValidFormat(this._cmi_element + \".id\", id, scorm12_regex.CMIIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get time(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".time\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._time;\n  }\n\n  /**\n   * Setter for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (check12ValidFormat(this._cmi_element + \".time\", time, scorm12_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * Getter for _type. Should only be called during JSON export.\n   * @return {string}\n   */\n  get type(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".type\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._type;\n  }\n\n  /**\n   * Setter for _type\n   * @param {string} type\n   */\n  set type(type: string) {\n    if (check12ValidFormat(this._cmi_element + \".type\", type, scorm12_regex.CMIType)) {\n      this._type = type;\n    }\n  }\n\n  /**\n   * Getter for _weighting. Should only be called during JSON export.\n   * @return {string}\n   */\n  get weighting(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".weighting\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._weighting;\n  }\n\n  /**\n   * Setter for _weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting: string) {\n    if (\n      check12ValidFormat(this._cmi_element + \".weighting\", weighting, scorm12_regex.CMIDecimal) &&\n      check12ValidRange(this._cmi_element + \".weighting\", weighting, scorm12_regex.weighting_range)\n    ) {\n      this._weighting = weighting;\n    }\n  }\n\n  /**\n   * Getter for _student_response. Should only be called during JSON export.\n   * @return {string}\n   */\n  get student_response(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".student_response\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._student_response;\n  }\n\n  /**\n   * Setter for _student_response\n   * @param {string} student_response\n   */\n  set student_response(student_response: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".student_response\",\n        student_response,\n        scorm12_regex.CMIFeedback,\n        true,\n      )\n    ) {\n      this._student_response = student_response;\n    }\n  }\n\n  /**\n   * Getter for _result. Should only be called during JSON export.\n   * @return {string}\n   */\n  get result(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".result\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._result;\n  }\n\n  /**\n   * Setter for _result\n   * @param {string} result\n   */\n  set result(result: string) {\n    if (check12ValidFormat(this._cmi_element + \".result\", result, scorm12_regex.CMIResult)) {\n      this._result = result;\n    }\n  }\n\n  /**\n   * Getter for _latency. Should only be called during JSON export.\n   * @return {string}\n   */\n  get latency(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".latency\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._latency;\n  }\n\n  /**\n   * Setter for _latency\n   * @param {string} latency\n   */\n  set latency(latency: string) {\n    if (check12ValidFormat(this._cmi_element + \".latency\", latency, scorm12_regex.CMITimespan)) {\n      this._latency = latency;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      time: string,\n   *      type: string,\n   *      weighting: string,\n   *      student_response: string,\n   *      result: string,\n   *      latency: string,\n   *      objectives: CMIArray,\n   *      correct_responses: CMIArray\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    time: string;\n    type: string;\n    weighting: string;\n    student_response: string;\n    result: string;\n    latency: string;\n    objectives: CMIArray;\n    correct_responses: CMIArray;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      time: this.time,\n      type: this.type,\n      weighting: this.weighting,\n      student_response: this.student_response,\n      result: this.result,\n      latency: this.latency,\n      objectives: this.objectives,\n      correct_responses: this.correct_responses,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n.objectives.n\");\n  }\n\n  private _id = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._id = \"\";\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check12ValidFormat(this._cmi_element + \".id\", id, scorm12_regex.CMIIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.correct_responses.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.correct_responses.n\n   */\n  constructor() {\n    super(\"cmi.interactions.correct_responses.n\");\n  }\n\n  private _pattern = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._pattern = \"\";\n  }\n\n  /**\n   * Getter for _pattern\n   * @return {string}\n   */\n  get pattern(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".pattern\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._pattern;\n  }\n\n  /**\n   * Setter for _pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern: string) {\n    if (\n      check12ValidFormat(this._cmi_element + \".pattern\", pattern, scorm12_regex.CMIFeedback, true)\n    ) {\n      this._pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.correct_responses.n\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    pattern: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      pattern: this._pattern,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { BaseRootCMI } from \"../common/base_cmi\";\nimport { check12ValidFormat } from \"./validation\";\nimport { CMICore } from \"../aicc/core\";\nimport { CMIObjectives } from \"./objectives\";\nimport { CMIStudentData } from \"./student_data\";\nimport { CMIStudentPreference } from \"./student_preference\";\nimport { CMIInteractions } from \"./interactions\";\n\n/**\n * Class representing the cmi object for SCORM 1.2\n */\nexport class CMI extends BaseRootCMI {\n  private readonly __children: string = \"\";\n  private __version: string = \"3.4\";\n  private _launch_data: string = \"\";\n  private _comments: string = \"\";\n  private _comments_from_lms: string = \"\";\n\n  /**\n   * Constructor for the SCORM 1.2 cmi object\n   * @param {string} cmi_children\n   * @param {(CMIStudentData|AICCCMIStudentData)} student_data\n   * @param {boolean} initialized\n   */\n  constructor(cmi_children?: string, student_data?: CMIStudentData, initialized?: boolean) {\n    super(\"cmi\");\n    if (initialized) this.initialize();\n    this.__children = cmi_children ? cmi_children : scorm12_constants.cmi_children;\n    this.core = new CMICore();\n    this.objectives = new CMIObjectives();\n    this.student_data = student_data ? student_data : new CMIStudentData();\n    this.student_preference = new CMIStudentPreference();\n    this.interactions = new CMIInteractions();\n  }\n\n  public core: CMICore;\n  public objectives: CMIObjectives;\n  public student_data: CMIStudentData;\n  public student_preference: CMIStudentPreference;\n  public interactions: CMIInteractions;\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._launch_data = \"\";\n    this._comments = \"\";\n    this.core?.reset();\n    this.objectives = new CMIObjectives();\n    this.interactions = new CMIInteractions();\n    this.student_data?.reset();\n    this.student_preference?.reset();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.core?.initialize();\n    this.objectives?.initialize();\n    this.student_data?.initialize();\n    this.student_preference?.initialize();\n    this.interactions?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions\n   *    }\n   *  }\n   */\n  toJSON(): {\n    suspend_data: string;\n    launch_data: string;\n    comments: string;\n    comments_from_lms: string;\n    core: CMICore;\n    objectives: CMIObjectives;\n    student_data: CMIStudentData;\n    student_preference: CMIStudentPreference;\n    interactions: CMIInteractions;\n  } {\n    this.jsonString = true;\n    const result = {\n      suspend_data: this.suspend_data,\n      launch_data: this.launch_data,\n      comments: this.comments,\n      comments_from_lms: this.comments_from_lms,\n      core: this.core,\n      objectives: this.objectives,\n      student_data: this.student_data,\n      student_preference: this.student_preference,\n      interactions: this.interactions,\n    };\n    this.jsonString = false;\n    return result;\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   */\n  get _version(): string {\n    return this.__version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._version\",\n      scorm12_errors.INVALID_SET_VALUE as number,\n    );\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE as number,\n    );\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this.core?.suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (this.core) {\n      this.core.suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this._launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before  initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".launch_data\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._launch_data = launch_data;\n    }\n  }\n\n  /**\n   * Getter for _comments\n   * @return {string}\n   */\n  get comments(): string {\n    return this._comments;\n  }\n\n  /**\n   * Setter for _comments\n   * @param {string} comments\n   */\n  set comments(comments: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".comments\",\n        comments,\n        scorm12_regex.CMIString4096,\n        true,\n      )\n    ) {\n      this._comments = comments;\n    }\n  }\n\n  /**\n   * Getter for _comments_from_lms\n   * @return {string}\n   */\n  get comments_from_lms(): string {\n    return this._comments_from_lms;\n  }\n\n  /**\n   * Setter for _comments_from_lms. Can only be called before  initialization.\n   * @param {string} comments_from_lms\n   */\n  set comments_from_lms(comments_from_lms: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".comments_from_lms\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._comments_from_lms = comments_from_lms;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string}\n   */\n  getCurrentTotalTime(): string {\n    return this.core.getCurrentTotalTime(this.start_time);\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { check12ValidFormat } from \"./validation\";\nimport { scorm12_regex } from \"../../constants/regex\";\n\n/**\n * Class for AICC Navigation object\n */\nexport class NAV extends BaseCMI {\n  /**\n   * Constructor for NAV object\n   */\n  constructor() {\n    super(\"cmi.nav\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._event = \"\";\n    this._initialized = false;\n  }\n\n  private _event = \"\";\n\n  /**\n   * Getter for _event\n   * @return {string}\n   */\n  get event(): string {\n    return this._event;\n  }\n\n  /**\n   * Setter for _event\n   * @param {string} event\n   */\n  set event(event: string) {\n    if (\n      event === \"\" ||\n      check12ValidFormat(this._cmi_element + \".event\", event, scorm12_regex.NAVEvent)\n    ) {\n      this._event = event;\n    }\n  }\n\n  /**\n   * toJSON for nav object\n   * @return {\n   *    {\n   *      event: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    event: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      event: this.event,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","// Using plain objects instead of enums for better compatibility with strip-only mode\n// This approach avoids TypeScript enum runtime code while maintaining the same API\n\n// NAVBoolean values\nexport const NAVBoolean = {\n  UNKNOWN: \"unknown\",\n  TRUE: \"true\",\n  FALSE: \"false\",\n};\n\n// Type for NAVBoolean values\nexport type NAVBoolean = (typeof NAVBoolean)[keyof typeof NAVBoolean];\n\n// SuccessStatus values\nexport const SuccessStatus = {\n  PASSED: \"passed\",\n  FAILED: \"failed\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for SuccessStatus values\nexport type SuccessStatus = (typeof SuccessStatus)[keyof typeof SuccessStatus];\n\n// CompletionStatus values\nexport const CompletionStatus = {\n  COMPLETED: \"completed\",\n  INCOMPLETE: \"incomplete\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for CompletionStatus values\nexport type CompletionStatus = (typeof CompletionStatus)[keyof typeof CompletionStatus];\n\n// LogLevelEnum values\nexport const LogLevelEnum = {\n  _: 0,\n  DEBUG: 1,\n  INFO: 2,\n  WARN: 3,\n  ERROR: 4,\n  NONE: 5,\n};\n\n// Type for LogLevelEnum values\nexport type LogLevelEnum = (typeof LogLevelEnum)[keyof typeof LogLevelEnum];\n","import { InternalSettings, LogLevel, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"./api_constants\";\nimport { LogLevelEnum } from \"./enums\";\n\n/**\n * Default settings for the SCORM API\n */\nexport const DefaultSettings: InternalSettings = {\n  autocommit: false,\n  autocommitSeconds: 10,\n  asyncCommit: false,\n  sendFullCommit: true,\n  lmsCommitUrl: false,\n  dataCommitFormat: \"json\",\n  commitRequestDataType: \"application/json;charset=UTF-8\",\n  autoProgress: false,\n  logLevel: LogLevelEnum.ERROR,\n  selfReportSessionTime: false,\n  alwaysSendTotalTime: false,\n  renderCommonCommitFields: false,\n  strict_errors: true,\n  xhrHeaders: {},\n  xhrWithCredentials: false,\n  fetchMode: \"cors\",\n  useBeaconInsteadOfFetch: \"never\",\n  responseHandler: async function (response: Response): Promise<ResultObject> {\n    if (typeof response !== \"undefined\") {\n      let httpResult = null;\n\n      // Handle both text() and json() response methods\n      try {\n        if (typeof response.json === \"function\") {\n          // Try to get JSON directly if the method exists\n          httpResult = await response.json();\n        } else if (typeof response.text === \"function\") {\n          // Fall back to text() if json() is not available\n          const responseText = await response.text();\n          if (responseText) {\n            httpResult = JSON.parse(responseText);\n          }\n        }\n      } catch (e) {\n        // If parsing fails, continue with null httpResult\n      }\n\n      if (httpResult === null || !{}.hasOwnProperty.call(httpResult, \"result\")) {\n        if (response.status === 200) {\n          return {\n            result: global_constants.SCORM_TRUE,\n            errorCode: 0,\n          };\n        } else {\n          return {\n            result: global_constants.SCORM_FALSE,\n            errorCode: 101,\n          };\n        }\n      } else {\n        return {\n          result: httpResult.result,\n          errorCode: httpResult.errorCode\n            ? httpResult.errorCode\n            : httpResult.result === global_constants.SCORM_TRUE\n              ? 0\n              : 101,\n        };\n      }\n    }\n    return {\n      result: global_constants.SCORM_FALSE,\n      errorCode: 101,\n    };\n  },\n  requestHandler: function (commitObject) {\n    return commitObject;\n  },\n  onLogMessage: defaultLogHandler,\n  scoItemIds: [],\n  scoItemIdValidator: false,\n  globalObjectiveIds: [],\n\n  // Offline support settings\n  enableOfflineSupport: false,\n  courseId: \"\",\n  syncOnInitialize: true,\n  syncOnTerminate: true,\n  maxSyncAttempts: 5,\n};\n\nexport function defaultLogHandler(messageLevel: LogLevel, logMessage: string): void {\n  switch (messageLevel) {\n    case \"4\":\n    case 4:\n    case \"ERROR\":\n    case LogLevelEnum.ERROR:\n      console.error(logMessage);\n      break;\n    case \"3\":\n    case 3:\n    case \"WARN\":\n    case LogLevelEnum.WARN:\n      console.warn(logMessage);\n      break;\n    case \"2\":\n    case 2:\n    case \"INFO\":\n    case LogLevelEnum.INFO:\n      console.info(logMessage);\n      break;\n    case \"1\":\n    case 1:\n    case \"DEBUG\":\n    case LogLevelEnum.DEBUG:\n      if (console.debug) {\n        console.debug(logMessage);\n      } else {\n        console.log(logMessage);\n      }\n      break;\n  }\n}\n","import BaseAPI from \"../BaseAPI\";\n\n/**\n * Private class that wraps a timeout call to the commit() function\n */\nexport class ScheduledCommit {\n  private _API;\n  private _cancelled = false;\n  private readonly _timeout;\n  private readonly _callback;\n\n  /**\n   * Constructor for ScheduledCommit\n   * @param {BaseAPI} API\n   * @param {number} when\n   * @param {string} callback\n   */\n  constructor(API: BaseAPI, when: number, callback: string) {\n    this._API = API;\n    this._timeout = setTimeout(this.wrapper.bind(this), when);\n    this._callback = callback;\n  }\n\n  /**\n   * Cancel any currently scheduled commit\n   */\n  cancel() {\n    this._cancelled = true;\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n  }\n\n  /**\n   * Wrap the API commit call to check if the call has already been canceled\n   */\n  wrapper() {\n    if (!this._cancelled) {\n      // Only proceed with scheduled commit if API is properly initialized\n      if (this._API.isInitialized()) {\n        (async () => await this._API.commit(this._callback))();\n      }\n    }\n  }\n}\n","import { CommitObject, InternalSettings, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { IHttpService } from \"../interfaces/services\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { StringKeyMap } from \"../utilities\";\n\n/**\n * Service for handling HTTP communication with the LMS\n */\nexport class HttpService implements IHttpService {\n  private settings: InternalSettings;\n  private error_codes: ErrorCode;\n\n  /**\n   * Constructor for HttpService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   */\n  constructor(settings: InternalSettings, error_codes: ErrorCode) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n  }\n\n  /**\n   * Sends HTTP requests to the LMS with special handling for immediate and standard requests.\n   *\n   * This method handles communication with the LMS server, implementing two distinct\n   * request handling strategies based on the context:\n   *\n   * 1. Immediate Mode (used during termination):\n   *    When immediate=true, the method:\n   *    - Initiates the fetch request but doesn't wait for it to complete\n   *    - Returns a success result immediately\n   *    - Processes the response asynchronously when it arrives\n   *\n   *    This is critical for browser compatibility during page unload/termination,\n   *    as some browsers (especially Chrome) may cancel synchronous or awaited\n   *    requests when a page is closing.\n   *\n   * 2. Standard Mode (normal operation):\n   *    When immediate=false, the method:\n   *    - Processes the request parameters through the configured requestHandler\n   *    - Awaits the fetch response completely\n   *    - Transforms the response using the configured responseHandler\n   *    - Triggers appropriate event listeners based on success/failure\n   *    - Returns the complete result with appropriate error codes\n   *\n   * The method also includes error handling to catch network failures or other\n   * exceptions that might occur during the request process.\n   *\n   * @param {string} url - The URL endpoint to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The data to send to the LMS\n   * @param {boolean} immediate - Whether to send the request immediately without waiting (true) or process normally (false)\n   * @param {Function} apiLog - Function to log API messages with appropriate levels\n   * @param {Function} processListeners - Function to trigger event listeners for commit events\n   * @return {Promise<ResultObject>} - A promise that resolves with the result of the request\n   *\n   * @example\n   * // Standard request (waits for response)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   false,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   *\n   * @example\n   * // Immediate request (for termination)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   true,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   * // result will be success immediately, regardless of actual HTTP result\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n    apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    const genericError: ResultObject = {\n      result: global_constants.SCORM_FALSE,\n      errorCode: this.error_codes.GENERAL || 101,\n    };\n\n    // If immediate mode (for termination), handle differently\n    if (immediate) {\n      return this._handleImmediateRequest(url, params, apiLog, processListeners);\n    }\n\n    // Standard request processing\n    try {\n      const processedParams = this.settings.requestHandler(params) as\n        | CommitObject\n        | StringKeyMap\n        | Array<any>;\n      const response = await this.performFetch(url, processedParams);\n      return this.transformResponse(response, processListeners);\n    } catch (e: unknown) {\n      const message = e instanceof Error ? e.message : String(e);\n\n      // Enhanced error logging with more context\n      apiLog(\"processHttpRequest\", `HTTP request failed to ${url}: ${message}`, LogLevelEnum.ERROR);\n\n      if (e instanceof Error && e.stack) {\n        apiLog(\"processHttpRequest\", `Stack trace: ${e.stack}`, LogLevelEnum.DEBUG);\n      }\n\n      // Create enhanced error object with more details\n      const enhancedError: ResultObject = {\n        ...genericError,\n        errorMessage: message,\n        errorDetails: JSON.stringify({\n          url,\n          errorType: e instanceof Error ? e.constructor.name : typeof e,\n          originalError: message,\n        }),\n      };\n\n      processListeners(\"CommitError\");\n      return enhancedError;\n    }\n  }\n\n  /**\n   * Handles an immediate request (used during termination)\n   * @param {string} url - The URL to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The parameters to include in the request\n   * @param {Function} processListeners - Function to process event listeners\n   * @return {ResultObject} - A success result object\n   * @private\n   */\n  private _handleImmediateRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): ResultObject {\n    // Use Beacon API for final commit if specified in settings\n    if (this.settings.useBeaconInsteadOfFetch !== \"never\") {\n      const { body, contentType } = this._prepareRequestBody(params);\n      navigator.sendBeacon(url, new Blob([body], { type: contentType }));\n    } else {\n      // Use regular fetch with keepalive\n      this.performFetch(url, params)\n        .then(async (response) => {\n          await this.transformResponse(response, processListeners);\n        })\n        .catch((e: unknown) => {\n          const message = e instanceof Error ? e.message : String(e);\n          apiLog(\"processHttpRequest\", message, LogLevelEnum.ERROR);\n          processListeners(\"CommitError\");\n        });\n    }\n\n    // Return success immediately without waiting for response\n    return {\n      result: global_constants.SCORM_TRUE,\n      errorCode: 0,\n    };\n  }\n\n  /**\n   * Prepares the request body and content type based on params type\n   * @param {CommitObject|StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Object} - Object containing body and contentType\n   * @private\n   */\n  private _prepareRequestBody(params: CommitObject | StringKeyMap | Array<any>): {\n    body: string;\n    contentType: string;\n  } {\n    const body = params instanceof Array ? params.join(\"&\") : JSON.stringify(params);\n    const contentType =\n      params instanceof Array\n        ? \"application/x-www-form-urlencoded\"\n        : this.settings.commitRequestDataType;\n\n    return { body, contentType };\n  }\n\n  /**\n   * Perform the fetch request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - The response from the LMS\n   * @private\n   */\n  private async performFetch(url: string, params: StringKeyMap | Array<any>): Promise<Response> {\n    // Use Beacon API if specified in settings\n    if (this.settings.useBeaconInsteadOfFetch === \"always\") {\n      return this.performBeacon(url, params);\n    }\n\n    const { body, contentType } = this._prepareRequestBody(params);\n    const init = {\n      method: \"POST\",\n      mode: this.settings.fetchMode,\n      body,\n      headers: {\n        ...this.settings.xhrHeaders,\n        \"Content-Type\": contentType,\n      },\n      keepalive: true,\n    } as RequestInit;\n\n    if (this.settings.xhrWithCredentials) {\n      init.credentials = \"include\";\n    }\n\n    return fetch(url, init);\n  }\n\n  /**\n   * Perform the beacon request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - A promise that resolves with a mock Response object\n   * @private\n   */\n  private async performBeacon(url: string, params: StringKeyMap | Array<any>): Promise<Response> {\n    const { body, contentType } = this._prepareRequestBody(params);\n\n    // Send the beacon request\n    const beaconSuccess = navigator.sendBeacon(url, new Blob([body], { type: contentType }));\n\n    // Create a mock Response object since sendBeacon doesn't return a Response\n    return Promise.resolve({\n      status: beaconSuccess ? 200 : 0,\n      ok: beaconSuccess,\n      json: async () => ({\n        result: beaconSuccess ? \"true\" : \"false\",\n        errorCode: beaconSuccess ? 0 : this.error_codes.GENERAL,\n      }),\n      text: async () =>\n        JSON.stringify({\n          result: beaconSuccess ? \"true\" : \"false\",\n          errorCode: beaconSuccess ? 0 : this.error_codes.GENERAL,\n        }),\n    } as Response);\n  }\n\n  /**\n   * Transforms the response from the LMS to a ResultObject\n   * @param {Response} response - The response from the LMS\n   * @param {Function} processListeners - Function to process event listeners\n   * @return {Promise<ResultObject>} - The transformed response\n   * @private\n   */\n  private async transformResponse(\n    response: Response,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    let result: any;\n\n    try {\n      // Parse the response using the configured handler or default to json\n      result =\n        typeof this.settings.responseHandler === \"function\"\n          ? await this.settings.responseHandler(response)\n          : await response.json();\n    } catch (parseError) {\n      // If we can't parse the response, log the raw response for debugging\n      const responseText = await response.text().catch(() => \"Unable to read response text\");\n\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL || 101,\n        errorMessage: `Failed to parse LMS response: ${parseError instanceof Error ? parseError.message : String(parseError)}`,\n        errorDetails: JSON.stringify({\n          status: response.status,\n          statusText: response.statusText,\n          url: response.url,\n          responseText: responseText.substring(0, 500), // Limit response text to avoid huge logs\n          parseError: parseError instanceof Error ? parseError.message : String(parseError),\n        }),\n      };\n    }\n\n    // Ensure result has an errorCode property\n    if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n      result.errorCode = this._isSuccessResponse(response, result) ? 0 : this.error_codes.GENERAL;\n    }\n\n    // Add response details for failed requests\n    if (!this._isSuccessResponse(response, result)) {\n      result.errorDetails = {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n        ...result.errorDetails, // Preserve any existing error details\n      };\n    }\n\n    // Trigger appropriate event based on success/failure\n    if (this._isSuccessResponse(response, result)) {\n      processListeners(\"CommitSuccess\");\n    } else {\n      processListeners(\"CommitError\", undefined, result.errorCode);\n    }\n\n    return result;\n  }\n\n  /**\n   * Determines if a response is successful based on status code and result\n   * @param {Response} response - The HTTP response\n   * @param {ResultObject} result - The parsed result object\n   * @return {boolean} - Whether the response is successful\n   * @private\n   */\n  private _isSuccessResponse(response: Response, result: ResultObject): boolean {\n    const value = (result as any).result;\n    return (\n      response.status >= 200 &&\n      response.status <= 299 &&\n      (value === true || value === \"true\" || value === global_constants.SCORM_TRUE)\n    );\n  }\n\n  /**\n   * Updates the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: InternalSettings): void {\n    this.settings = settings;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { IEventService } from \"../interfaces/services\";\n\n/**\n * Interface for a listener object\n */\ninterface Listener {\n  functionName: string;\n  CMIElement: string | null;\n  callback: Function;\n}\n\n/**\n * Type for parsed listener information\n */\ninterface ParsedListener {\n  functionName: string;\n  CMIElement: string | null;\n}\n\n/**\n * Service for handling event listeners and event processing\n */\nexport class EventService implements IEventService {\n  // Map of function names to listeners for faster lookups\n  private listenerMap: Map<string, Listener[]> = new Map();\n  // Total count of listeners for logging\n  private listenerCount = 0;\n  // Function to log API messages\n  private readonly apiLog: (\n    functionName: string,\n    message: string,\n    messageLevel: LogLevel,\n    CMIElement?: string,\n  ) => void;\n\n  /**\n   * Constructor for EventService\n   * @param {Function} apiLog - Function to log API messages\n   */\n  constructor(\n    apiLog: (\n      functionName: string,\n      message: string,\n      messageLevel: LogLevel,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.apiLog = apiLog;\n  }\n\n  /**\n   * Parses a listener name into its components\n   *\n   * @param {string} listenerName - The name of the listener\n   * @returns {ParsedListener|null} - The parsed listener information or null if invalid\n   */\n  private parseListenerName(listenerName: string): ParsedListener | null {\n    const listenerSplit = listenerName.split(\".\");\n    if (listenerSplit.length === 0) return null;\n\n    const functionName = listenerSplit[0];\n    let CMIElement: string | null = null;\n\n    if (listenerSplit.length > 1) {\n      CMIElement = listenerName.replace(`${functionName}.`, \"\");\n    }\n\n    return { functionName: functionName ?? listenerName, CMIElement };\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener\n   * @param {Function} callback - The callback function to execute when the event occurs\n   */\n  on(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get or create the array for this function name\n      const listeners = this.listenerMap.get(functionName) ?? [];\n\n      // Add the new listener\n      listeners.push({\n        functionName,\n        CMIElement,\n        callback,\n      });\n\n      // Update the map and count\n      this.listenerMap.set(functionName, listeners);\n      this.listenerCount++;\n\n      this.apiLog(\n        \"on\",\n        `Added event listener: ${this.listenerCount}`,\n        LogLevelEnum.INFO,\n        functionName,\n      );\n    }\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener\n   *\n   * @param {string} listenerName - The name of the listener to remove\n   * @param {Function} callback - The callback function to remove\n   */\n  off(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get the listeners for this function name\n      const listeners = this.listenerMap.get(functionName);\n      if (!listeners) continue;\n\n      // Find the index of the listener to remove\n      const removeIndex = listeners.findIndex(\n        (obj) => obj.CMIElement === CMIElement && obj.callback === callback,\n      );\n\n      if (removeIndex !== -1) {\n        // Remove the listener\n        listeners.splice(removeIndex, 1);\n        this.listenerCount--;\n\n        // Update the map or remove the entry if empty\n        if (listeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, listeners);\n        }\n\n        this.apiLog(\n          \"off\",\n          `Removed event listener: ${this.listenerCount}`,\n          LogLevelEnum.INFO,\n          functionName,\n        );\n      }\n    }\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener to clear\n   */\n  clear(listenerName: string) {\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // If we have listeners for this function name\n      if (this.listenerMap.has(functionName)) {\n        const listeners = this.listenerMap.get(functionName)!;\n\n        // Filter out listeners that match the criteria\n        const newListeners = listeners.filter((obj) => obj.CMIElement !== CMIElement);\n\n        // Update the count and map\n        this.listenerCount -= listeners.length - newListeners.length;\n\n        if (newListeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, newListeners);\n        }\n      }\n    }\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created\n   *\n   * @param {string} functionName - The name of the function that triggered the event\n   * @param {string} CMIElement - The CMI element that was affected\n   * @param {any} value - The value that was set\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this.apiLog(functionName, value, LogLevelEnum.INFO, CMIElement);\n\n    // Get listeners for this function name\n    const listeners = this.listenerMap.get(functionName);\n    if (!listeners) return;\n\n    for (const listener of listeners) {\n      const listenerHasCMIElement = !!listener.CMIElement;\n      let CMIElementsMatch = false;\n\n      // Check if CMI elements match\n      if (CMIElement && listener.CMIElement) {\n        if (listener.CMIElement.endsWith(\"*\")) {\n          // For wildcard matches, check if the CMI element starts with the prefix\n          const prefix = listener.CMIElement.slice(0, -1);\n          CMIElementsMatch = CMIElement.startsWith(prefix);\n        } else {\n          // For exact matches, compare the strings directly\n          CMIElementsMatch = listener.CMIElement === CMIElement;\n        }\n      }\n\n      // If the listener matches, call the callback\n      if (!listenerHasCMIElement || CMIElementsMatch) {\n        this.apiLog(\n          \"processListeners\",\n          `Processing listener: ${listener.functionName}`,\n          LogLevelEnum.DEBUG,\n          CMIElement,\n        );\n\n        // Handle special event types\n        if (functionName.startsWith(\"Sequence\")) {\n          // For sequence events, pass the target as the first argument\n          listener.callback(value);\n        } else if (functionName === \"CommitError\") {\n          // For commit error events, pass the error code\n          listener.callback(value);\n        } else if (functionName === \"CommitSuccess\") {\n          // For commit success events, pass no arguments\n          listener.callback();\n        } else {\n          // For regular events, pass CMIElement and value\n          listener.callback(CMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Resets the event service by clearing all listeners\n   */\n  reset() {\n    this.listenerMap.clear();\n    this.listenerCount = 0;\n  }\n}\n","import { CommitObject, LogLevel } from \"../types/api_types\";\nimport { StringKeyMap, unflatten } from \"../utilities\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { BaseCMI } from \"../cmi/common/base_cmi\";\nimport { ISerializationService } from \"../interfaces/services\";\n\n/**\n * Service for handling data serialization and deserialization in scorm-again\n */\nexport class SerializationService implements ISerializationService {\n  /**\n   * Loads CMI data from a flattened JSON object with special handling for arrays and ordering.\n   *\n   * This method implements a complex algorithm for loading flattened JSON data into the CMI\n   * object structure. It handles several key challenges:\n   *\n   * 1. Ordering dependencies: Some CMI elements (like interactions and objectives) must be\n   *    loaded in a specific order to ensure proper initialization.\n   *\n   * 2. Array handling: Interactions and objectives are stored as arrays, and their properties\n   *    must be loaded in the correct order (e.g., 'id' and 'type' must be set before other properties).\n   *\n   * 3. Unflattening: The method converts flattened dot notation (e.g., \"cmi.objectives.0.id\")\n   *    back into nested objects before loading.\n   *\n   * The algorithm works by:\n   * - Categorizing keys into interactions, objectives, and other properties\n   * - Sorting interactions to prioritize 'id' and 'type' fields within each index\n   * - Sorting objectives to prioritize 'id' fields within each index\n   * - Processing each category in order: interactions, objectives, then other properties\n   *\n   * @param {StringKeyMap} json - The flattened JSON object with dot notation keys\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   *\n   * @param setStartingData\n   * @example\n   * // Example of flattened JSON input:\n   * // {\n   * //   \"cmi.objectives.0.id\": \"obj1\",\n   * //   \"cmi.objectives.0.score.raw\": \"80\",\n   * //   \"cmi.interactions.0.id\": \"int1\",\n   * //   \"cmi.interactions.0.type\": \"choice\",\n   * //   \"cmi.interactions.0.result\": \"correct\"\n   * // }\n   */\n  loadFromFlattenedJSON(\n    json: StringKeyMap,\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromFlattenedJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    const int_pattern = /^(cmi\\.interactions\\.)(\\d+)\\.(.*)$/;\n    const obj_pattern = /^(cmi\\.objectives\\.)(\\d+)\\.(.*)$/;\n\n    // Extract and categorize keys for better sorting\n    const interactions: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const objectives: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const others: { key: string; value: any }[] = [];\n\n    // Categorize keys\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key)) {\n        const intMatch = key.match(int_pattern);\n        if (intMatch) {\n          interactions.push({\n            key,\n            value: json[key],\n            index: Number(intMatch[2]),\n            field: intMatch[3] || \"\",\n          });\n          continue;\n        }\n\n        const objMatch = key.match(obj_pattern);\n        if (objMatch) {\n          objectives.push({\n            key,\n            value: json[key],\n            index: Number(objMatch[2]),\n            field: objMatch[3] || \"\",\n          });\n          continue;\n        }\n\n        others.push({ key, value: json[key] });\n      }\n    }\n\n    // Sort interactions: first by index, then prioritize 'id' and 'type' fields\n    interactions.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id and type\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n      if (a.field === \"type\") return -1;\n      if (b.field === \"type\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort objectives: first by index, then prioritize 'id' field\n    objectives.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort other keys alphabetically\n    others.sort((a, b) => a.key.localeCompare(b.key));\n\n    // Process all items in the correct order\n    const processItems = (items: { key: string; value: any }[]) => {\n      items.forEach((item) => {\n        const obj: StringKeyMap = {};\n        obj[item.key] = item.value;\n        this.loadFromJSON(\n          unflatten(obj) as StringKeyMap,\n          CMIElement,\n          setCMIValue,\n          isNotInitialized,\n          setStartingData,\n        );\n      });\n    };\n\n    // Process in order: interactions, objectives, others\n    processItems(interactions);\n    processItems(objectives);\n    processItems(others);\n  }\n\n  /**\n   * Loads CMI data from a nested JSON object with recursive traversal.\n   *\n   * This method implements a recursive algorithm for loading nested JSON data into the CMI\n   * object structure. It handles several key aspects:\n   *\n   * 1. Recursive traversal: The method recursively traverses the nested JSON structure,\n   *    building CMI element paths as it goes (e.g., \"cmi.core.student_id\").\n   *\n   * 2. Type-specific handling: Different data types are handled differently:\n   *    - Arrays: Each array element is processed individually with its index in the path\n   *    - Objects: Recursively processed with updated path\n   *    - Primitives: Set directly using setCMIValue\n   *\n   * 3. Initialization check: Ensures the method is only called before API initialization\n   *\n   * 4. Starting data storage: Stores the original JSON data for potential future use\n   *\n   * The algorithm works by:\n   * - First storing the complete JSON object via setStartingData\n   * - Iterating through each property in the JSON object\n   * - For each property, determining its type and handling it accordingly\n   * - Building the CMI element path as it traverses the structure\n   * - Setting values at the appropriate paths using setCMIValue\n   *\n   * @param {{[key: string]: any}} json - The nested JSON object to load\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value at a specific path\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   * @param {Function} setStartingData - Function to store the original JSON data\n   *\n   * @example\n   * // Example of nested JSON input:\n   * // {\n   * //   \"core\": {\n   * //     \"student_id\": \"12345\",\n   * //     \"student_name\": \"John Doe\"\n   * //   },\n   * //   \"objectives\": [\n   * //     { \"id\": \"obj1\", \"score\": { \"raw\": 80 } },\n   * //     { \"id\": \"obj2\", \"score\": { \"raw\": 90 } }\n   * //   ]\n   * // }\n   */\n  loadFromJSON(\n    json: { [key: string]: any },\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    CMIElement = CMIElement !== undefined ? CMIElement : \"cmi\";\n\n    setStartingData(json);\n\n    // could this be refactored down to flatten(json) then setCMIValue on each?\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key) && json[key]) {\n        const currentCMIElement = (CMIElement ? CMIElement + \".\" : \"\") + key;\n        const value = json[key];\n\n        if (value.constructor === Array) {\n          for (let i = 0; i < value.length; i++) {\n            if (value[i]) {\n              const item = value[i];\n              const tempCMIElement = `${currentCMIElement}.${i}`;\n\n              if (item.constructor === Object) {\n                this.loadFromJSON(\n                  item,\n                  tempCMIElement,\n                  setCMIValue,\n                  isNotInitialized,\n                  setStartingData,\n                );\n              } else {\n                setCMIValue(tempCMIElement, item);\n              }\n            }\n          }\n        } else if (value.constructor === Object) {\n          this.loadFromJSON(\n            value,\n            currentCMIElement,\n            setCMIValue,\n            isNotInitialized,\n            setStartingData,\n          );\n        } else {\n          setCMIValue(currentCMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Render the CMI object to JSON for sending to an LMS.\n   *\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {string}\n   */\n  renderCMIToJSONString(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): string {\n    // Do we want/need to return fields that have no set value?\n    if (sendFullCommit) {\n      return JSON.stringify({ cmi });\n    }\n    return JSON.stringify({ cmi }, (k, v) => (v === undefined ? null : v), 2);\n  }\n\n  /**\n   * Returns a JS object representing the current cmi\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {object}\n   */\n  renderCMIToJSONObject(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): StringKeyMap {\n    // Revert to the original implementation to maintain compatibility with tests\n    return JSON.parse(this.renderCMIToJSONString(cmi, sendFullCommit));\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} alwaysSendTotalTime - Whether to always send total time\n   * @param {boolean|Function} renderCommonCommitFields - Whether to render common commit fields\n   * @param {Function} renderCommitObject - Function to render commit object\n   * @param {Function} renderCommitCMI - Function to render commit CMI\n   * @param {LogLevel} apiLogLevel - The API log level\n   * @return {CommitObject|StringKeyMap|Array<any>}\n   */\n  getCommitObject(\n    terminateCommit: boolean,\n    alwaysSendTotalTime: boolean,\n    renderCommonCommitFields: boolean | ((commitObject: CommitObject) => boolean),\n    renderCommitObject: (terminateCommit: boolean, includeTotalTime?: boolean) => CommitObject,\n    renderCommitCMI: (\n      terminateCommit: boolean,\n      includeTotalTime?: boolean,\n    ) => StringKeyMap | Array<any>,\n    apiLogLevel: LogLevel,\n  ): CommitObject | StringKeyMap | Array<any> {\n    // Fix for issue: total time is being calculated incorrectly across multiple sessions\n    // when selfReportSessionTime and alwaysSendTotalTime are enabled.\n    //\n    // Previously, we were using a single variable (shouldTerminateCommit) that combined\n    // both concerns: whether this is a termination commit and whether to include total time.\n    // This caused the total time to be calculated as if every commit was a terminate commit\n    // when alwaysSendTotalTime was true, leading to incorrect time calculations.\n    //\n    // Now we pass the actual terminateCommit value and a separate parameter for whether\n    // to include total time, allowing the rendering functions to handle these concerns separately.\n    const includeTotalTime = alwaysSendTotalTime || terminateCommit;\n\n    const commitObject = renderCommonCommitFields\n      ? renderCommitObject(terminateCommit, includeTotalTime)\n      : renderCommitCMI(terminateCommit, includeTotalTime);\n\n    if ([LogLevelEnum.DEBUG, \"1\", 1, \"DEBUG\"].includes(apiLogLevel)) {\n      console.debug(\"Commit (terminated: \" + (terminateCommit ? \"yes\" : \"no\") + \"): \");\n      console.debug(commitObject);\n    }\n    return commitObject;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ILoggingService } from \"../interfaces/services\";\nimport { defaultLogHandler } from \"../constants/default_settings\";\n\n/**\n * Centralized logging service implemented as a singleton\n * Provides methods for logging at different levels and configuring the log level\n */\nexport class LoggingService implements ILoggingService {\n  private static _instance: LoggingService;\n  private _logLevel: LogLevel = LogLevelEnum.ERROR;\n  private _logHandler: (messageLevel: LogLevel, logMessage: string) => void;\n\n  /**\n   * Private constructor to prevent direct instantiation\n   */\n  private constructor() {\n    // Default log handler uses console methods based on log level\n    this._logHandler = defaultLogHandler;\n  }\n\n  /**\n   * Get the singleton instance of LoggingService\n   *\n   * @returns {LoggingService} The singleton instance\n   */\n  public static getInstance(): LoggingService {\n    if (!LoggingService._instance) {\n      LoggingService._instance = new LoggingService();\n    }\n    return LoggingService._instance;\n  }\n\n  /**\n   * Set the log level\n   *\n   * @param {LogLevel} level - The log level to set\n   */\n  public setLogLevel(level: LogLevel): void {\n    this._logLevel = level;\n  }\n\n  /**\n   * Get the current log level\n   *\n   * @returns {LogLevel} The current log level\n   */\n  public getLogLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  /**\n   * Set a custom log handler\n   *\n   * @param {Function} handler - The function to handle log messages\n   */\n  public setLogHandler(handler: (messageLevel: LogLevel, logMessage: string) => void): void {\n    this._logHandler = handler;\n  }\n\n  /**\n   * Log a message if the message level is greater than or equal to the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @param {string} logMessage - The message to log\n   */\n  public log(messageLevel: LogLevel, logMessage: string): void {\n    if (this.shouldLog(messageLevel)) {\n      this._logHandler(messageLevel, logMessage);\n    }\n  }\n\n  /**\n   * Log a message at ERROR level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public error(logMessage: string): void {\n    this.log(LogLevelEnum.ERROR, logMessage);\n  }\n\n  /**\n   * Log a message at WARN level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public warn(logMessage: string): void {\n    this.log(LogLevelEnum.WARN, logMessage);\n  }\n\n  /**\n   * Log a message at INFO level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public info(logMessage: string): void {\n    this.log(LogLevelEnum.INFO, logMessage);\n  }\n\n  /**\n   * Log a message at DEBUG level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public debug(logMessage: string): void {\n    this.log(LogLevelEnum.DEBUG, logMessage);\n  }\n\n  /**\n   * Determine if a message should be logged based on its level and the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @returns {boolean} Whether the message should be logged\n   */\n  private shouldLog(messageLevel: LogLevel): boolean {\n    // Convert string levels to numbers for comparison\n    const numericMessageLevel = this.getNumericLevel(messageLevel);\n    const numericLogLevel = this.getNumericLevel(this._logLevel);\n\n    return numericMessageLevel >= numericLogLevel;\n  }\n\n  /**\n   * Convert a log level to its numeric value\n   *\n   * @param {LogLevel} level - The log level to convert\n   * @returns {number} The numeric value of the log level\n   */\n  private getNumericLevel(level: LogLevel): number {\n    if (level === undefined) return LogLevelEnum.NONE;\n\n    if (typeof level === \"number\") return level;\n\n    switch (level) {\n      case \"1\":\n      case \"DEBUG\":\n        return LogLevelEnum.DEBUG;\n      case \"2\":\n      case \"INFO\":\n        return LogLevelEnum.INFO;\n      case \"3\":\n      case \"WARN\":\n        return LogLevelEnum.WARN;\n      case \"4\":\n      case \"ERROR\":\n        return LogLevelEnum.ERROR;\n      case \"5\":\n      case \"NONE\":\n        return LogLevelEnum.NONE;\n      default:\n        return LogLevelEnum.ERROR; // Default to ERROR if unknown\n    }\n  }\n}\n\n// Export a function to get the singleton instance\nexport function getLoggingService(): LoggingService {\n  return LoggingService.getInstance();\n}\n","import { LogLevelEnum } from \"../constants/enums\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { ValidationError } from \"../exceptions\";\nimport { IErrorHandlingService, ILoggingService } from \"../interfaces/services\";\nimport { getLoggingService } from \"./LoggingService\";\n\n/**\n * Service for handling SCORM errors\n */\nexport class ErrorHandlingService implements IErrorHandlingService {\n  private _lastErrorCode: string = \"0\";\n  private readonly _errorCodes: ErrorCode;\n  private readonly _apiLog: (\n    functionName: string,\n    message: string,\n    logLevel?: LogLevelEnum,\n    CMIElement?: string,\n  ) => void;\n  private readonly _getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string;\n  private readonly _loggingService: ILoggingService;\n\n  /**\n   * Constructor for ErrorHandlingService\n   *\n   * @param {ErrorCode} errorCodes - The error codes object\n   * @param {Function} apiLog - Function for logging API calls\n   * @param {Function} getLmsErrorMessageDetails - Function for getting error message details\n   * @param {ILoggingService} loggingService - Optional logging service instance\n   */\n  constructor(\n    errorCodes: ErrorCode,\n    apiLog: (\n      functionName: string,\n      message: string,\n      logLevel?: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n    loggingService?: ILoggingService,\n  ) {\n    this._errorCodes = errorCodes;\n    this._apiLog = apiLog;\n    this._getLmsErrorMessageDetails = getLmsErrorMessageDetails;\n    this._loggingService = loggingService || getLoggingService();\n  }\n\n  /**\n   * Get the last error code\n   *\n   * @return {string} - The last error code\n   */\n  get lastErrorCode(): string {\n    return this._lastErrorCode;\n  }\n\n  /**\n   * Set the last error code\n   *\n   * @param {string} errorCode - The error code to set\n   */\n  set lastErrorCode(errorCode: string) {\n    this._lastErrorCode = errorCode;\n  }\n\n  /**\n   * Throws a SCORM error\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The error number\n   * @param {string} message - The error message\n   * @throws {ValidationError} - If throwException is true, throws a ValidationError\n   */\n  throwSCORMError(CMIElement: string, errorNumber: number, message?: string): void {\n    if (!message) {\n      message = this._getLmsErrorMessageDetails(errorNumber, true);\n    }\n\n    // Format a more descriptive error message with context\n    const formattedMessage = `SCORM Error ${errorNumber}: ${message}${CMIElement ? ` [Element: ${CMIElement}]` : \"\"}`;\n\n    // Log using both the API log and the logging service for consistency\n    this._apiLog(\"throwSCORMError\", errorNumber + \": \" + message, LogLevelEnum.ERROR, CMIElement);\n    this._loggingService.error(formattedMessage);\n\n    this._lastErrorCode = String(errorNumber);\n  }\n\n  /**\n   * Clears the last SCORM error code on success.\n   *\n   * @param {string} success - Whether the operation was successful\n   */\n  clearSCORMError(success: string): void {\n    if (success !== undefined && success !== global_constants.SCORM_FALSE) {\n      this._lastErrorCode = \"0\";\n    }\n  }\n\n  /**\n   * Handles exceptions that occur when accessing or setting CMI values.\n   *\n   * This method provides centralized error handling for exceptions that occur during\n   * CMI data operations. It differentiates between different types of errors and\n   * handles them appropriately:\n   *\n   * 1. ValidationError: These are expected errors from the validation system that\n   *    indicate a specific SCORM error condition (like invalid data format or range).\n   *    For these errors, the method:\n   *    - Sets the lastErrorCode to the error code from the ValidationError\n   *    - Returns SCORM_FALSE to indicate failure to the caller\n   *\n   * 2. Standard JavaScript Error: For general JavaScript errors (like TypeError,\n   *    ReferenceError, etc.), the method:\n   *    - Logs the error message with stack trace to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * 3. Unknown exceptions: For any other type of exception that doesn't match the\n   *    above categories, the method:\n   *    - Logs the entire exception object to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * This method is critical for maintaining SCORM compliance by ensuring that\n   * all errors are properly translated into the appropriate SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {ValidationError|Error|unknown} e - The exception that was thrown\n   * @param {string} returnValue - The default return value (typically an empty string)\n   * @return {string} - Either the original returnValue or SCORM_FALSE if an error occurred\n   *\n   * @example\n   * try {\n   *   const value = getCMIValue(\"cmi.core.score.raw\");\n   *   return value;\n   * } catch (e) {\n   *   return handleValueAccessException(e, \"\");\n   * }\n   */\n  handleValueAccessException(\n    CMIElement: string,\n    e: Error | ValidationError | unknown,\n    returnValue: string,\n  ): string {\n    if (e instanceof ValidationError) {\n      const validationError = e as ValidationError;\n      this._lastErrorCode = String(validationError.errorCode);\n\n      // Log validation errors at WARN level with context\n      const errorMessage = `Validation Error ${validationError.errorCode}: ${validationError.message} [Element: ${CMIElement}]`;\n      this._loggingService.warn(errorMessage);\n\n      returnValue = global_constants.SCORM_FALSE;\n    } else if (e instanceof Error) {\n      // For standard JS errors, include the stack trace and error type\n      const errorType = e.constructor.name; // Gets the error type (e.g., TypeError, ReferenceError)\n      const errorMessage = `${errorType}: ${e.message} [Element: ${CMIElement}]`;\n      const stackTrace = e.stack || \"\";\n\n      // Log the detailed error with stack trace\n      this._loggingService.error(`${errorMessage}\\n${stackTrace}`);\n\n      this.throwSCORMError(\n        CMIElement,\n        this._errorCodes.GENERAL as number,\n        `${errorType}: ${e.message}`,\n      );\n    } else {\n      // For unknown errors, provide as much context as possible\n      const errorMessage = `Unknown error occurred while accessing [Element: ${CMIElement}]`;\n\n      this._loggingService.error(errorMessage);\n\n      try {\n        // Try to stringify the error object for more details\n        const errorDetails = JSON.stringify(e);\n        this._loggingService.error(`Error details: ${errorDetails}`);\n      } catch (jsonError) {\n        // If stringify fails, log that we couldn't get more details\n        this._loggingService.error(\"Could not stringify error object for details\");\n      }\n\n      this.throwSCORMError(CMIElement, this._errorCodes.GENERAL as number, \"Unknown error\");\n    }\n    return returnValue;\n  }\n\n  /**\n   * Get the error codes object\n   *\n   * @return {ErrorCode} - The error codes object\n   */\n  get errorCodes(): ErrorCode {\n    return this._errorCodes;\n  }\n}\n\n// Export a factory function to create the service\nexport function createErrorHandlingService(\n  errorCodes: ErrorCode,\n  apiLog: (\n    functionName: string,\n    message: string,\n    logLevel?: LogLevelEnum,\n    CMIElement?: string,\n  ) => void,\n  getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n  loggingService?: ILoggingService,\n): ErrorHandlingService {\n  return new ErrorHandlingService(errorCodes, apiLog, getLmsErrorMessageDetails, loggingService);\n}\n","import { CommitObject, InternalSettings, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ErrorCode } from \"../constants/error_codes\";\n\n/**\n * Interface for sync queue item\n */\ninterface SyncQueueItem {\n  id: string;\n  courseId: string;\n  timestamp: number;\n  data: CommitObject;\n  syncAttempts: number;\n}\n\n/**\n * Service for handling offline storage and synchronization of SCORM data\n */\nexport class OfflineStorageService {\n  private settings: InternalSettings;\n  private error_codes: ErrorCode;\n  private storeName: string = \"scorm_again_offline_data\";\n  private syncQueue: string = \"scorm_again_sync_queue\";\n  private isOnline: boolean = navigator.onLine;\n  private syncInProgress: boolean = false;\n\n  /**\n   * Constructor for OfflineStorageService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Function} apiLog - The logging function\n   */\n  constructor(\n    settings: InternalSettings,\n    error_codes: ErrorCode,\n    private apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n\n    // Initialize listeners for online/offline events\n    window.addEventListener(\"online\", this.handleOnlineStatusChange.bind(this));\n    window.addEventListener(\"offline\", this.handleOnlineStatusChange.bind(this));\n  }\n\n  /**\n   * Handle changes in online status\n   */\n  private handleOnlineStatusChange() {\n    const wasOnline = this.isOnline;\n    this.isOnline = navigator.onLine;\n\n    // If we've come back online, trigger sync process\n    if (!wasOnline && this.isOnline) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        \"Device is back online, attempting to sync...\",\n        LogLevelEnum.INFO,\n      );\n      this.syncOfflineData().then(\n        (success) => {\n          if (success) {\n            this.apiLog(\"OfflineStorageService\", \"Sync completed successfully\", LogLevelEnum.INFO);\n          } else {\n            this.apiLog(\"OfflineStorageService\", \"Sync failed\", LogLevelEnum.ERROR);\n          }\n        },\n        (error) => {\n          this.apiLog(\"OfflineStorageService\", `Error during sync: ${error}`, LogLevelEnum.ERROR);\n        },\n      );\n    } else if (wasOnline && !this.isOnline) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        \"Device is offline, data will be stored locally\",\n        LogLevelEnum.INFO,\n      );\n    }\n  }\n\n  /**\n   * Store commit data offline\n   * @param {string} courseId - Identifier for the course\n   * @param {CommitObject} commitData - The data to store offline\n   * @returns {Promise<ResultObject>} - Result of the storage operation\n   */\n  async storeOffline(courseId: string, commitData: CommitObject): Promise<ResultObject> {\n    try {\n      // Store the data in the sync queue with timestamp and unique ID\n      const queueItem: SyncQueueItem = {\n        id: `${courseId}_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`,\n        courseId,\n        timestamp: Date.now(),\n        data: commitData,\n        syncAttempts: 0,\n      };\n\n      // Get current queue\n      const currentQueue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n      currentQueue.push(queueItem);\n\n      // Save updated queue\n      await this.saveToStorage(this.syncQueue, currentQueue);\n\n      // Also update the current state in the main storage (latest known state)\n      await this.saveToStorage(`${this.storeName}_${courseId}`, commitData);\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Stored data offline for course ${courseId}`,\n        LogLevelEnum.INFO,\n      );\n\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error storing offline data: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL ?? 0,\n      };\n    }\n  }\n\n  /**\n   * Get the stored offline data for a course\n   * @param {string} courseId - Identifier for the course\n   * @returns {Promise<CommitObject|null>} - The stored data or null if not found\n   */\n  async getOfflineData(courseId: string): Promise<CommitObject | null> {\n    try {\n      const data = await this.getFromStorage<CommitObject>(`${this.storeName}_${courseId}`);\n      return data || null;\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error retrieving offline data: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return null;\n    }\n  }\n\n  /**\n   * Synchronize offline data with the LMS when connection is available\n   * @returns {Promise<boolean>} - Success status of synchronization\n   */\n  async syncOfflineData(): Promise<boolean> {\n    // Don't run multiple sync processes at once\n    if (this.syncInProgress || !this.isOnline) {\n      return false;\n    }\n\n    this.syncInProgress = true;\n\n    try {\n      // Get the queue of items to sync\n      const syncQueue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n\n      if (syncQueue.length === 0) {\n        this.syncInProgress = false;\n        return true;\n      }\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Found ${syncQueue.length} items to sync`,\n        LogLevelEnum.INFO,\n      );\n\n      // Keep track of successful and failed sync attempts\n      const remainingQueue: SyncQueueItem[] = [];\n\n      // Process each queue item\n      for (const item of syncQueue) {\n        // Skip items that have been attempted too many times\n        if (item.syncAttempts >= 5) {\n          this.apiLog(\n            \"OfflineStorageService\",\n            `Skipping item ${item.id} after 5 failed attempts`,\n            LogLevelEnum.WARN,\n          );\n          continue;\n        }\n\n        try {\n          // Attempt to sync this item\n          const syncResult = await this.sendDataToLMS(item.data);\n\n          if (syncResult.result === global_constants.SCORM_TRUE) {\n            // Sync was successful, no need to keep this item\n            this.apiLog(\n              \"OfflineStorageService\",\n              `Successfully synced item ${item.id}`,\n              LogLevelEnum.INFO,\n            );\n          } else {\n            // Sync failed, increment attempts and keep in queue\n            item.syncAttempts++;\n            remainingQueue.push(item);\n            this.apiLog(\n              \"OfflineStorageService\",\n              `Failed to sync item ${item.id}, attempt #${item.syncAttempts}`,\n              LogLevelEnum.WARN,\n            );\n          }\n        } catch (error) {\n          // On error, increment attempts and keep in queue\n          item.syncAttempts++;\n          remainingQueue.push(item);\n          this.apiLog(\n            \"OfflineStorageService\",\n            `Error syncing item ${item.id}: ${error}`,\n            LogLevelEnum.ERROR,\n          );\n        }\n      }\n\n      // Update the queue with remaining items\n      await this.saveToStorage(this.syncQueue, remainingQueue);\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Sync completed. ${syncQueue.length - remainingQueue.length} items synced, ${remainingQueue.length} items remaining`,\n        LogLevelEnum.INFO,\n      );\n\n      this.syncInProgress = false;\n      return true;\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error during sync process: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      this.syncInProgress = false;\n      return false;\n    }\n  }\n\n  /**\n   * Send data to the LMS when online\n   * @param {CommitObject} data - The data to send to the LMS\n   * @returns {Promise<ResultObject>} - Result of the sync operation\n   */\n  private async sendDataToLMS(data: CommitObject): Promise<ResultObject> {\n    if (!this.settings.lmsCommitUrl) {\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL || 101,\n      };\n    }\n\n    try {\n      // Apply request handler if configured\n      const processedData = this.settings.requestHandler(data);\n\n      // Send the data to the LMS\n      const init = {\n        method: \"POST\",\n        mode: this.settings.fetchMode,\n        body: JSON.stringify(processedData),\n        headers: {\n          ...this.settings.xhrHeaders,\n          \"Content-Type\": this.settings.commitRequestDataType,\n        },\n      } as RequestInit;\n\n      if (this.settings.xhrWithCredentials) {\n        init.credentials = \"include\";\n      }\n\n      const response = await fetch(this.settings.lmsCommitUrl as string, init);\n\n      // Process the response using the configured handler\n      const result =\n        typeof this.settings.responseHandler === \"function\"\n          ? await this.settings.responseHandler(response)\n          : await response.json();\n\n      if (\n        response.status >= 200 &&\n        response.status <= 299 &&\n        (result.result === true || result.result === global_constants.SCORM_TRUE)\n      ) {\n        if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n          result.errorCode = 0;\n        }\n        return result;\n      } else {\n        if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n          result.errorCode = this.error_codes.GENERAL;\n        }\n        return result;\n      }\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error sending data to LMS: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL || 101,\n      };\n    }\n  }\n\n  /**\n   * Check if the device is currently online\n   * @returns {boolean} - Online status\n   */\n  isDeviceOnline(): boolean {\n    return this.isOnline;\n  }\n\n  // noinspection JSValidateJSDoc\n  /**\n   * Get item from localStorage\n   * @param {string} key - The key to retrieve\n   * @returns {Promise<T|null>} - The retrieved data\n   */\n  private async getFromStorage<T>(key: string): Promise<T | null> {\n    const storedData = localStorage.getItem(key);\n    if (storedData) {\n      try {\n        return JSON.parse(storedData) as T;\n      } catch (e) {\n        return null;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Save item to localStorage\n   * @param {string} key - The key to store under\n   * @param {any} data - The data to store\n   * @returns {Promise<void>}\n   */\n  private async saveToStorage(key: string, data: any): Promise<void> {\n    localStorage.setItem(key, JSON.stringify(data));\n  }\n\n  /**\n   * Check if there is pending offline data for a course\n   * @param {string} courseId - Identifier for the course\n   * @returns {Promise<boolean>} - Whether there is pending data\n   */\n  async hasPendingOfflineData(courseId: string): Promise<boolean> {\n    const queue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n    return queue.some((item) => item.courseId === courseId);\n  }\n\n  /**\n   * Update the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: InternalSettings): void {\n    this.settings = settings;\n  }\n}\n","import { ErrorCode } from \"./constants/error_codes\";\nimport { global_constants } from \"./constants/api_constants\";\nimport * as Utilities from \"./utilities\";\nimport { formatMessage, StringKeyMap, stringMatches } from \"./utilities\";\nimport { BaseCMI, BaseRootCMI } from \"./cmi/common/base_cmi\";\nimport {\n  CommitObject,\n  InternalSettings,\n  LogLevel,\n  ResultObject,\n  Settings,\n} from \"./types/api_types\";\nimport { defaultLogHandler, DefaultSettings } from \"./constants/default_settings\";\nimport { IBaseAPI } from \"./interfaces/IBaseAPI\";\nimport { ScheduledCommit } from \"./types/scheduled_commit\";\nimport { LogLevelEnum } from \"./constants/enums\";\nimport { HttpService } from \"./services/HttpService\";\nimport { EventService } from \"./services/EventService\";\nimport { SerializationService } from \"./services/SerializationService\";\nimport { createErrorHandlingService } from \"./services/ErrorHandlingService\";\nimport { getLoggingService } from \"./services/LoggingService\";\nimport { OfflineStorageService } from \"./services/OfflineStorageService\";\nimport {\n  ICMIDataService,\n  IErrorHandlingService,\n  IEventService,\n  IHttpService,\n  ILoggingService,\n  IOfflineStorageService,\n  ISerializationService,\n} from \"./interfaces/services\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { ValidationError } from \"./exceptions\";\n\n/**\n * Base API class for AICC, SCORM 1.2, and SCORM 2004. Should be considered\n * abstract, and never initialized on its own.\n */\nexport default abstract class BaseAPI implements IBaseAPI {\n  private _timeout?: ScheduledCommit | undefined;\n  private readonly _error_codes: ErrorCode;\n  private _settings: InternalSettings = DefaultSettings;\n  private readonly _httpService: IHttpService;\n  private _eventService: IEventService;\n  private _serializationService: ISerializationService;\n  private readonly _errorHandlingService: IErrorHandlingService;\n  private readonly _loggingService: ILoggingService;\n  private readonly _offlineStorageService?: IOfflineStorageService;\n  private _courseId: string = \"\";\n\n  /**\n   * Constructor for Base API class. Sets some shared API fields, as well as\n   * sets up options for the API.\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Settings} settings - Optional settings for the API\n   * @param {IHttpService} httpService - Optional HTTP service instance\n   * @param {IEventService} eventService - Optional Event service instance\n   * @param {ISerializationService} serializationService - Optional Serialization service instance\n   * @param {ICMIDataService} cmiDataService - Optional CMI Data service instance\n   * @param {IErrorHandlingService} errorHandlingService - Optional Error Handling service instance\n   * @param {ILoggingService} loggingService - Optional Logging service instance\n   * @param {IOfflineStorageService} offlineStorageService - Optional Offline Storage service instance\n   */\n  protected constructor(\n    error_codes: ErrorCode,\n    settings?: Settings,\n    httpService?: IHttpService,\n    eventService?: IEventService,\n    serializationService?: ISerializationService,\n    cmiDataService?: ICMIDataService,\n    errorHandlingService?: IErrorHandlingService,\n    loggingService?: ILoggingService,\n    offlineStorageService?: IOfflineStorageService,\n  ) {\n    if (new.target === BaseAPI) {\n      throw new TypeError(\"Cannot construct BaseAPI instances directly\");\n    }\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n\n    this._error_codes = error_codes;\n\n    if (settings) {\n      this.settings = {\n        ...DefaultSettings,\n        ...settings,\n      } as InternalSettings;\n    }\n\n    // Initialize and configure LoggingService\n    this._loggingService = loggingService || getLoggingService();\n    this._loggingService.setLogLevel(this.settings.logLevel);\n\n    // If settings include a custom onLogMessage function, use it as the log handler\n    if (this.settings.onLogMessage) {\n      this._loggingService.setLogHandler(this.settings.onLogMessage);\n    } else {\n      this._loggingService.setLogHandler(defaultLogHandler);\n    }\n\n    // Initialize HTTP service\n    this._httpService = httpService || new HttpService(this.settings, this._error_codes);\n\n    // Initialize Event service\n    this._eventService =\n      eventService ||\n      new EventService((functionName, message, level, element) =>\n        this.apiLog(functionName, message, level, element),\n      );\n\n    // Initialize Serialization service\n    this._serializationService = serializationService || new SerializationService();\n\n    // Initialize Error Handling service\n    this._errorHandlingService =\n      errorHandlingService ||\n      createErrorHandlingService(\n        this._error_codes,\n        (functionName, message, level, element) =>\n          this.apiLog(functionName, message, level || LogLevelEnum.ERROR, element),\n        (errorNumber, detail) => this.getLmsErrorMessageDetails(errorNumber, detail),\n      );\n\n    // Initialize Offline Storage service if enabled\n    if (this.settings.enableOfflineSupport) {\n      this._offlineStorageService =\n        offlineStorageService ||\n        new OfflineStorageService(\n          this.settings,\n          this._error_codes,\n          (functionName, message, level, element) =>\n            this.apiLog(functionName, message, level, element),\n        );\n\n      if (this.settings.courseId) {\n        this._courseId = this.settings.courseId;\n      }\n\n      // Check for offline data to restore on initialization\n      if (this._offlineStorageService && this._courseId) {\n        this._offlineStorageService\n          .getOfflineData(this._courseId)\n          .then((offlineData) => {\n            if (offlineData) {\n              this.apiLog(\"constructor\", \"Found offline data to restore\", LogLevelEnum.INFO);\n              // Restore data from offline storage\n              this.loadFromJSON(offlineData.runtimeData);\n            }\n          })\n          .catch((error) => {\n            this.apiLog(\n              \"constructor\",\n              `Error retrieving offline data: ${error}`,\n              LogLevelEnum.ERROR,\n            );\n          });\n      }\n    }\n  }\n\n  public abstract cmi: BaseCMI;\n  public startingData?: StringKeyMap;\n\n  public currentState: number;\n\n  /**\n   * Get the last error code\n   * @return {string}\n   */\n  get lastErrorCode(): string {\n    return this._errorHandlingService?.lastErrorCode ?? \"0\";\n  }\n\n  /**\n   * Set the last error code\n   * @param {string} errorCode\n   */\n  set lastErrorCode(errorCode: string) {\n    if (this._errorHandlingService) {\n      this._errorHandlingService.lastErrorCode = errorCode;\n    }\n  }\n\n  /**\n   * Protected getter for eventService\n   * @return {IEventService}\n   */\n  protected get eventService(): IEventService {\n    return this._eventService;\n  }\n\n  /**\n   * Protected getter for loggingService\n   * @return {ILoggingService}\n   */\n  protected get loggingService(): ILoggingService {\n    return this._loggingService;\n  }\n\n  /**\n   * Reset the API to its initial state.\n   * This method clears all current data and resets the API to an uninitialized state.\n   * It can optionally accept new settings to configure the API after reset.\n   *\n   * @param {Settings} settings - Optional new settings to apply after reset\n   */\n  abstract reset(settings?: Settings): void;\n\n  /**\n   * Common reset method for all APIs. New settings are merged with the existing settings.\n   * @param {Settings} settings\n   * @protected\n   */\n  commonReset(settings?: Settings): void {\n    this.apiLog(\"reset\", \"Called\", LogLevelEnum.INFO);\n\n    this.settings = { ...this.settings, ...settings };\n\n    this.clearScheduledCommit();\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n    this.lastErrorCode = \"0\";\n    this._eventService.reset();\n    this.startingData = {};\n\n    // Update offline storage service with new settings if it exists\n    if (this._offlineStorageService) {\n      this._offlineStorageService.updateSettings(this.settings);\n\n      if (settings?.courseId) {\n        this._courseId = settings.courseId;\n      }\n    }\n  }\n\n  /**\n   * Initialize the API\n   * @param {string} callbackName\n   * @param {string} initializeMessage\n   * @param {string} terminationMessage\n   * @return {string}\n   */\n  initialize(\n    callbackName: string,\n    initializeMessage?: string,\n    terminationMessage?: string,\n  ): string {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.isInitialized()) {\n      this.throwSCORMError(\"api\", this._error_codes.INITIALIZED, initializeMessage);\n    } else if (this.isTerminated()) {\n      this.throwSCORMError(\"api\", this._error_codes.TERMINATED, terminationMessage);\n    } else {\n      if (this.settings.selfReportSessionTime) {\n        (this.cmi as BaseRootCMI).setStartTime();\n      }\n\n      this.currentState = global_constants.STATE_INITIALIZED;\n      this.lastErrorCode = \"0\";\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n\n      // If enabled, attempt to sync offline data on initialization\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._courseId &&\n        this.settings.syncOnInitialize &&\n        this._offlineStorageService.isDeviceOnline()\n      ) {\n        this._offlineStorageService.hasPendingOfflineData(this._courseId).then((hasPendingData) => {\n          if (hasPendingData) {\n            this.apiLog(\n              callbackName,\n              \"Syncing pending offline data on initialization\",\n              LogLevelEnum.INFO,\n            );\n            this._offlineStorageService?.syncOfflineData().then((syncSuccess) => {\n              if (syncSuccess) {\n                this.apiLog(callbackName, \"Successfully synced offline data\", LogLevelEnum.INFO);\n                this.processListeners(\"OfflineDataSynced\");\n              }\n            });\n          }\n        });\n      }\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Initialize the LMS API\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsInitialize(): string;\n\n  /**\n   * Finish the current LMS API session\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsFinish(): string;\n\n  /**\n   * Get the value of a CMI element from the LMS\n   * @param {string} CMIElement - The CMI element to get the value of\n   * @return {string} The value of the CMI element\n   */\n  abstract lmsGetValue(CMIElement: string): string;\n\n  /**\n   * Set the value of a CMI element in the LMS\n   * @param {string} CMIElement - The CMI element to set the value of\n   * @param {any} value - The value to set\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsSetValue(CMIElement: string, value: any): string;\n\n  /**\n   * Commit the current data to the LMS\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsCommit(): string;\n\n  /**\n   * Get the last error code from the LMS\n   * @return {string} The last error code\n   */\n  abstract lmsGetLastError(): string;\n\n  /**\n   * Get the error string for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get the string for\n   * @return {string} The error string\n   */\n  abstract lmsGetErrorString(CMIErrorCode: string | number): string;\n\n  /**\n   * Get diagnostic information for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get diagnostic information for\n   * @return {string} The diagnostic information\n   */\n  abstract lmsGetDiagnostic(CMIErrorCode: string | number): string;\n\n  /**\n   * Abstract method for validating that a response is correct.\n   * This method is used to validate the format and content of a response\n   * before it is set in the CMI data model.\n   *\n   * @param {string} _CMIElement - The CMI element path to validate\n   * @param {any} _value - The value to validate\n   * @throws {Error} If the response format is invalid\n   */\n  abstract validateCorrectResponse(_CMIElement: string, _value: any): void;\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   * APIs that inherit BaseAPI should override this method.\n   *\n   * @param {string} _CMIElement - unused\n   * @param {*} _value - unused\n   * @param {boolean} _foundFirstIndex - unused\n   * @return {BaseCMI|null}\n   * @abstract\n   */\n  abstract getChildElement(\n    _CMIElement: string,\n    _value: any,\n    _foundFirstIndex: boolean,\n  ): BaseCMI | null;\n\n  /**\n   * Attempts to store the data to the LMS, logs data if no LMS configured\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _calculateTotalTime\n   * @return {ResultObject}\n   * @abstract\n   */\n  abstract storeData(_calculateTotalTime: boolean): Promise<ResultObject>;\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   *\n   * @param {boolean} _terminateCommit - Whether this commit is part of the termination process\n   * @param {boolean} [_includeTotalTime] - Whether to include total time in the commit data\n   * @return {StringKeyMap|Array}\n   * @abstract\n   */\n  abstract renderCommitCMI(\n    _terminateCommit: boolean,\n    _includeTotalTime?: boolean,\n  ): StringKeyMap | Array<string>;\n\n  /**\n   * Render the commit object to the shortened format for LMS commit.\n   * This method transforms the CMI data into a format suitable for sending to the LMS.\n   * It is called during the commit process to prepare the data for transmission.\n   *\n   * @param {boolean} _terminateCommit - Whether this commit is part of the termination process\n   * @param {boolean} [_includeTotalTime] - Whether to include total time in the commit data\n   * @return {CommitObject} A formatted object containing the data to be sent to the LMS\n   * @example\n   * // Example of a commit object structure\n   * {\n   *   method: \"POST\",\n   *   params: {\n   *     cmi: { ... },\n   *     finishState: \"COMPLETED\"\n   *   }\n   * }\n   */\n  abstract renderCommitObject(_terminateCommit: boolean, _includeTotalTime?: boolean): CommitObject;\n\n  /**\n   * Logging for all SCORM actions\n   *\n   * @param {string} functionName\n   * @param {string} logMessage\n   * @param {number} messageLevel\n   * @param {string} CMIElement\n   */\n  apiLog(functionName: string, logMessage: string, messageLevel: LogLevel, CMIElement?: string) {\n    logMessage = formatMessage(functionName, logMessage, CMIElement);\n\n    // Delegate to LoggingService which handles log level comparison properly\n    this._loggingService.log(messageLevel, logMessage);\n  }\n\n  /**\n   * Getter for _settings\n   * @return {InternalSettings}\n   */\n  get settings(): InternalSettings {\n    return this._settings;\n  }\n\n  /**\n   * Setter for _settings\n   * @param {Settings} settings\n   */\n  set settings(settings: Settings) {\n    const previousSettings = this._settings;\n    // Merge the incoming settings with the existing settings\n    this._settings = { ...this._settings, ...settings } as InternalSettings;\n\n    // Update HTTP service settings\n    this._httpService?.updateSettings(this._settings);\n\n    // The following properties are duplicated as class properties for easier access\n    // and need to be manually updated to stay in sync with the settings object\n\n    // Update log level if it changed\n    if (settings.logLevel !== undefined && settings.logLevel !== previousSettings.logLevel) {\n      this._loggingService?.setLogLevel(settings.logLevel);\n    }\n\n    // Update log handler if onLogMessage changed\n    if (\n      settings.onLogMessage !== undefined &&\n      settings.onLogMessage !== previousSettings.onLogMessage\n    ) {\n      this._loggingService?.setLogHandler(settings.onLogMessage);\n    }\n  }\n\n  /**\n   * Terminates the current run of the API\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async terminate(callbackName: string, checkTerminated: boolean): Promise<string> {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.TERMINATION_BEFORE_INIT ?? 0,\n        this._error_codes.MULTIPLE_TERMINATION ?? 0,\n      )\n    ) {\n      this.currentState = global_constants.STATE_TERMINATED;\n      // If enabled, attempt to sync offline data before termination\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._courseId &&\n        this.settings.syncOnTerminate &&\n        this._offlineStorageService.isDeviceOnline()\n      ) {\n        const hasPendingData = await this._offlineStorageService.hasPendingOfflineData(\n          this._courseId,\n        );\n        if (hasPendingData) {\n          this.apiLog(\n            callbackName,\n            \"Syncing pending offline data before termination\",\n            LogLevelEnum.INFO,\n          );\n          await this._offlineStorageService.syncOfflineData();\n        }\n      }\n\n      const result: ResultObject = await this.storeData(true);\n      if ((result.errorCode ?? 0) > 0) {\n        // Log detailed error information before throwing SCORM error\n        if (result.errorMessage) {\n          this.apiLog(\n            \"terminate\",\n            `Terminate failed with error: ${result.errorMessage}`,\n            LogLevelEnum.ERROR,\n          );\n        }\n        if (result.errorDetails) {\n          this.apiLog(\n            \"terminate\",\n            `Error details: ${JSON.stringify(result.errorDetails)}`,\n            LogLevelEnum.DEBUG,\n          );\n        }\n        this.throwSCORMError(\"api\", result.errorCode ?? 0);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Get the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  getValue(callbackName: string, checkTerminated: boolean, CMIElement: string): string {\n    let returnValue: string = \"\";\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.RETRIEVE_BEFORE_INIT ?? 0,\n        this._error_codes.RETRIEVE_AFTER_TERM ?? 0,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.getCMIValue(CMIElement);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement);\n    }\n\n    this.apiLog(callbackName, \": returned: \" + returnValue, LogLevelEnum.INFO, CMIElement);\n\n    if (returnValue === undefined) {\n      return \"\";\n    }\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Sets the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {string} commitCallback\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  setValue(\n    callbackName: string,\n    commitCallback: string,\n    checkTerminated: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (value !== undefined) {\n      value = String(value);\n    }\n    let returnValue: string = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.STORE_BEFORE_INIT ?? 0,\n        this._error_codes.STORE_AFTER_TERM ?? 0,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.setCMIValue(CMIElement, value);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement, value);\n    }\n\n    if (returnValue === undefined) {\n      returnValue = global_constants.SCORM_FALSE;\n    }\n\n    // If we didn't have any errors while setting the data, go ahead and\n    // schedule a commit, if autocommit is turned on\n    if (String(this.lastErrorCode) === \"0\") {\n      if (this.settings.autocommit) {\n        this.scheduleCommit(this.settings.autocommitSeconds * 1000, commitCallback);\n      }\n    }\n\n    this.apiLog(\n      callbackName,\n      \": \" + value + \": result: \" + returnValue,\n      LogLevelEnum.INFO,\n      CMIElement,\n    );\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async commit(callbackName: string, checkTerminated: boolean = false): Promise<string> {\n    this.clearScheduledCommit();\n\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.COMMIT_BEFORE_INIT ?? 0,\n        this._error_codes.COMMIT_AFTER_TERM ?? 0,\n      )\n    ) {\n      const result = await this.storeData(false);\n      if ((result.errorCode ?? 0) > 0) {\n        // Log detailed error information before throwing SCORM error\n        if (result.errorMessage) {\n          this.apiLog(\n            \"commit\",\n            `Commit failed with error: ${result.errorMessage}`,\n            LogLevelEnum.ERROR,\n          );\n        }\n        if (result.errorDetails) {\n          this.apiLog(\n            \"commit\",\n            `Error details: ${JSON.stringify(result.errorDetails)}`,\n            LogLevelEnum.DEBUG,\n          );\n        }\n        this.throwSCORMError(\"api\", result.errorCode);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      this.apiLog(callbackName, \" Result: \" + returnValue, LogLevelEnum.DEBUG, \"HttpRequest\");\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      this.processListeners(callbackName);\n\n      // If online and there is offline data pending, attempt to sync it\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._offlineStorageService.isDeviceOnline() &&\n        this._courseId\n      ) {\n        this._offlineStorageService.hasPendingOfflineData(this._courseId).then((hasPendingData) => {\n          if (hasPendingData) {\n            this.apiLog(callbackName, \"Syncing pending offline data\", LogLevelEnum.INFO);\n            this._offlineStorageService?.syncOfflineData().then((syncSuccess) => {\n              if (syncSuccess) {\n                this.apiLog(callbackName, \"Successfully synced offline data\", LogLevelEnum.INFO);\n                this.processListeners(\"OfflineDataSynced\");\n              } else {\n                this.apiLog(callbackName, \"Failed to sync some offline data\", LogLevelEnum.WARN);\n              }\n            });\n          }\n        });\n      }\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Returns last error code\n   * @param {string} callbackName\n   * @return {string}\n   */\n  getLastError(callbackName: string): string {\n    const returnValue = String(this.lastErrorCode);\n\n    this.processListeners(callbackName);\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getErrorString(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getDiagnostic(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode, true);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Checks the LMS state and ensures it has been initialized.\n   *\n   * @param {boolean} checkTerminated\n   * @param {number} beforeInitError\n   * @param {number} afterTermError\n   * @return {boolean}\n   */\n  checkState(checkTerminated: boolean, beforeInitError: number, afterTermError: number): boolean {\n    if (this.isNotInitialized()) {\n      this.throwSCORMError(\"api\", beforeInitError);\n      return false;\n    } else if (checkTerminated && this.isTerminated()) {\n      this.throwSCORMError(\"api\", afterTermError);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {(string|number)} _errorNumber\n   * @param {boolean} _detail\n   * @return {string}\n   * @abstract\n   */\n  getLmsErrorMessageDetails(_errorNumber: string | number, _detail: boolean = false): string {\n    throw new Error(\"The getLmsErrorMessageDetails method has not been implemented\");\n  }\n\n  /**\n   * Gets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @return {string}\n   * @abstract\n   */\n  getCMIValue(_CMIElement: string): string {\n    throw new Error(\"The getCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Sets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @param {any} _value\n   * @return {string}\n   * @abstract\n   */\n  setCMIValue(_CMIElement: string, _value: any): string {\n    throw new Error(\"The setCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Shared API method to set a valid for a given element.\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  _commonSetCMIValue(\n    methodName: string,\n    scorm2004: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (!CMIElement || CMIElement === \"\") {\n      return global_constants.SCORM_FALSE;\n    }\n\n    this.lastErrorCode = \"0\";\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap | BaseCMI = this as StringKeyMap;\n    let returnValue = global_constants.SCORM_FALSE;\n    let foundFirstIndex = false;\n\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      const attribute = structure[idx];\n\n      if (idx === structure.length - 1) {\n        if (scorm2004 && attribute && attribute.substring(0, 8) === \"{target=\") {\n          if (this.isInitialized()) {\n            this.throwSCORMError(CMIElement, this._error_codes.READ_ONLY_ELEMENT);\n            break;\n          } else {\n            refObject = {\n              ...refObject,\n              attribute: value,\n            };\n          }\n        } else if (\n          typeof attribute === \"undefined\" ||\n          !this._checkObjectHasProperty(refObject as StringKeyMap, attribute)\n        ) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        } else {\n          if (\n            stringMatches(CMIElement, \"\\\\.correct_responses\\\\.\\\\d+$\") &&\n            this.isInitialized() &&\n            attribute !== \"pattern\"\n          ) {\n            this.validateCorrectResponse(CMIElement, value);\n            if (this.lastErrorCode !== \"0\") {\n              this.throwSCORMError(CMIElement, this._error_codes.TYPE_MISMATCH);\n              break;\n            }\n          }\n\n          if (!scorm2004 || this._errorHandlingService.lastErrorCode === \"0\") {\n            if (\n              typeof attribute === \"undefined\" ||\n              attribute === \"__proto__\" ||\n              attribute === \"constructor\"\n            ) {\n              this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n              break;\n            }\n            (refObject as StringKeyMap)[attribute] = value;\n            returnValue = global_constants.SCORM_TRUE;\n          }\n        }\n      } else {\n        if (\n          typeof attribute === \"undefined\" ||\n          !this._checkObjectHasProperty(refObject as StringKeyMap, attribute)\n        ) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n        refObject = (refObject as StringKeyMap)[attribute] as StringKeyMap;\n        if (!refObject) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n\n        if (refObject instanceof CMIArray) {\n          const index = parseInt(structure[idx + 1] || \"0\", 10);\n\n          // SCO is trying to set an item on an array\n          if (!isNaN(index)) {\n            const item = refObject.childArray[index];\n\n            if (item) {\n              refObject = item;\n              foundFirstIndex = true;\n            } else {\n              const newChild = this.getChildElement(CMIElement, value, foundFirstIndex);\n              foundFirstIndex = true;\n\n              if (!newChild) {\n                if (this.lastErrorCode === \"0\") {\n                  this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n                }\n                break;\n              } else {\n                if (refObject.initialized) newChild.initialize();\n                refObject.childArray[index] = newChild;\n                refObject = newChild;\n              }\n            }\n\n            // Have to update idx value to skip the array position\n            idx++;\n          }\n        }\n      }\n    }\n\n    if (returnValue === global_constants.SCORM_FALSE) {\n      this.apiLog(\n        methodName,\n        `There was an error setting the value for: ${CMIElement}, value of: ${value}`,\n        LogLevelEnum.WARN,\n      );\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @return {any}\n   */\n  _commonGetCMIValue(methodName: string, scorm2004: boolean, CMIElement: string): any {\n    if (!CMIElement || CMIElement === \"\") {\n      return \"\";\n    }\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap = this as StringKeyMap;\n    let attribute = null;\n\n    const uninitializedErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) has not been initialized.`;\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      attribute = structure[idx];\n\n      if (!scorm2004) {\n        if (idx === structure.length - 1) {\n          if (\n            typeof attribute === \"undefined\" ||\n            !this._checkObjectHasProperty(refObject, attribute)\n          ) {\n            this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n            return;\n          }\n        }\n      } else {\n        if (\n          String(attribute).substring(0, 8) === \"{target=\" &&\n          typeof refObject._isTargetValid == \"function\"\n        ) {\n          const target = String(attribute).substring(8, String(attribute).length - 9);\n          return refObject._isTargetValid(target);\n        } else if (\n          typeof attribute === \"undefined\" ||\n          !this._checkObjectHasProperty(refObject, attribute)\n        ) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          return;\n        }\n      }\n\n      if (attribute !== undefined && attribute !== null) {\n        refObject = refObject[attribute] as StringKeyMap;\n        if (refObject === undefined) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n      } else {\n        this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n        break;\n      }\n\n      if (refObject instanceof CMIArray) {\n        const index = parseInt(structure[idx + 1] || \"\", 10);\n\n        // SCO is trying to set an item on an array\n        if (!isNaN(index)) {\n          const item = refObject.childArray[index];\n\n          if (item) {\n            refObject = item;\n          } else {\n            this.throwSCORMError(\n              CMIElement,\n              this._error_codes.VALUE_NOT_INITIALIZED,\n              uninitializedErrorMessage,\n            );\n            break;\n          }\n\n          // Have to update idx value to skip the array position\n          idx++;\n        }\n      }\n    }\n\n    if (refObject === null || refObject === undefined) {\n      if (!scorm2004) {\n        if (attribute === \"_children\") {\n          this.throwSCORMError(CMIElement, this._error_codes.CHILDREN_ERROR, undefined);\n        } else if (attribute === \"_count\") {\n          this.throwSCORMError(CMIElement, this._error_codes.COUNT_ERROR, undefined);\n        }\n      }\n    } else {\n      return refObject;\n    }\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isInitialized(): boolean {\n    return this.currentState === global_constants.STATE_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_NOT_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isNotInitialized(): boolean {\n    return this.currentState === global_constants.STATE_NOT_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_TERMINATED\n   *\n   * @return {boolean}\n   */\n  isTerminated(): boolean {\n    return this.currentState === global_constants.STATE_TERMINATED;\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event.\n   * This method allows you to register a callback function that will be executed\n   * when the specified event occurs.\n   *\n   * @param {string} listenerName - The name of the event to listen for (e.g., \"Initialize\", \"Terminate\", \"GetValue\", \"SetValue\", \"Commit\")\n   * @param {function} callback - The function to execute when the event occurs. The callback will receive relevant event data.\n   * @example\n   * // Listen for Initialize events\n   * api.on(\"Initialize\", function() {\n   *   console.log(\"API has been initialized\");\n   * });\n   *\n   * // Listen for SetValue events\n   * api.on(\"SetValue\", function(element, value) {\n   *   console.log(\"Setting \" + element + \" to \" + value);\n   * });\n   */\n  on(listenerName: string, callback: Function) {\n    this._eventService.on(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener.\n   * This method removes a previously registered callback for an event.\n   * Both the event name and the callback reference must match what was used in the 'on' method.\n   *\n   * @param {string} listenerName - The name of the event to stop listening for\n   * @param {function} callback - The callback function to remove\n   * @example\n   * // Remove a specific listener\n   * const myCallback = function() { console.log(\"API initialized\"); };\n   * api.on(\"Initialize\", myCallback);\n   * // Later, when you want to remove it:\n   * api.off(\"Initialize\", myCallback);\n   */\n  off(listenerName: string, callback: Function) {\n    this._eventService.off(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event.\n   * This method removes all callbacks registered for the specified event.\n   *\n   * @param {string} listenerName - The name of the event to clear all listeners for\n   * @example\n   * // Remove all listeners for the Initialize event\n   * api.clear(\"Initialize\");\n   */\n  clear(listenerName: string) {\n    this._eventService.clear(listenerName);\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created for a specific event.\n   * This method is called internally when SCORM events occur to notify all registered listeners.\n   * It triggers all callback functions registered for the specified event.\n   *\n   * @param {string} functionName - The name of the function/event that occurred\n   * @param {string} CMIElement - Optional CMI element involved in the event\n   * @param {any} value - Optional value associated with the event\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this._eventService.processListeners(functionName, CMIElement, value);\n  }\n\n  /**\n   * Throws a SCORM error with the specified error number and optional message.\n   * This method sets the last error code and can be used to indicate that an operation failed.\n   * The error number should correspond to one of the standard SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The SCORM error code to set\n   * @param {string} message - Optional custom error message to provide additional context\n   * @example\n   * // Throw a \"not initialized\" error\n   * this.throwSCORMError(301, \"The API must be initialized before calling GetValue\");\n   */\n  throwSCORMError(\n    CMIElement: string | undefined,\n    errorNumber: number | undefined,\n    message?: string,\n  ) {\n    this._errorHandlingService.throwSCORMError(CMIElement, errorNumber ?? 0, message);\n  }\n\n  /**\n   * Clears the last SCORM error code when an operation succeeds.\n   * This method is typically called after successful API operations to reset the error state.\n   * It only clears the error if the success parameter is \"true\".\n   *\n   * @param {string} success - A string indicating whether the operation succeeded (\"true\" or \"false\")\n   * @example\n   * // Clear error after successful operation\n   * this.clearSCORMError(\"true\");\n   */\n  clearSCORMError(success: string) {\n    this._errorHandlingService.clearSCORMError(success);\n  }\n\n  /**\n   * Load the CMI from a flattened JSON object.\n   * This method populates the CMI data model from a flattened JSON structure\n   * where keys represent CMI element paths (e.g., \"cmi.core.student_id\").\n   *\n   * @param {StringKeyMap} json - The flattened JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a flattened JSON structure\n   * api.loadFromFlattenedJSON({\n   *   \"cmi.core.student_id\": \"12345\",\n   *   \"cmi.core.student_name\": \"John Doe\",\n   *   \"cmi.core.lesson_status\": \"incomplete\"\n   * });\n   */\n  loadFromFlattenedJSON(json: StringKeyMap, CMIElement?: string) {\n    if (!CMIElement) {\n      // by default, we start from a blank string because we're expecting each element to start with `cmi`\n      CMIElement = \"\";\n    }\n\n    this._serializationService.loadFromFlattenedJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Returns a flattened JSON object representing the current CMI data.\n   */\n  getFlattenedCMI(): StringKeyMap {\n    return Utilities.flatten(this.renderCMIToJSONObject());\n  }\n\n  /**\n   * Loads CMI data from a hierarchical JSON object.\n   * This method populates the CMI data model from a nested JSON structure\n   * that mirrors the CMI object hierarchy.\n   *\n   * @param {StringKeyMap} json - The hierarchical JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a hierarchical JSON structure\n   * api.loadFromJSON({\n   *   core: {\n   *     student_id: \"12345\",\n   *     student_name: \"John Doe\",\n   *     lesson_status: \"incomplete\"\n   *   },\n   *   objectives: [\n   *     { id: \"obj1\", score: { raw: 85 } }\n   *   ]\n   * });\n   */\n  loadFromJSON(json: StringKeyMap, CMIElement: string = \"\") {\n    if (\n      (!CMIElement || CMIElement === \"\") &&\n      !Object.hasOwnProperty.call(json, \"cmi\") &&\n      !Object.hasOwnProperty.call(json, \"adl\")\n    ) {\n      // providing a backward compatibility for the old v1 API\n      CMIElement = \"cmi\";\n    }\n    this._serializationService.loadFromJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Render the CMI object to a JSON string for sending to an LMS.\n   * This method serializes the current CMI data model to a JSON string.\n   * The output format is controlled by the sendFullCommit setting.\n   *\n   * @return {string} A JSON string representation of the CMI data\n   * @example\n   * // Get the current CMI data as a JSON string\n   * const jsonString = api.renderCMIToJSONString();\n   * console.log(jsonString); // '{\"core\":{\"student_id\":\"12345\",...}}'\n   */\n  renderCMIToJSONString(): string {\n    return this._serializationService.renderCMIToJSONString(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Returns a JavaScript object representing the current CMI data.\n   * This method creates a plain JavaScript object that mirrors the\n   * structure of the CMI data model, suitable for further processing.\n   *\n   * @return {StringKeyMap} A JavaScript object representing the CMI data\n   * @example\n   * // Get the current CMI data as a JavaScript object\n   * const cmiObject = api.renderCMIToJSONObject();\n   * console.log(cmiObject.core.student_id); // \"12345\"\n   */\n  renderCMIToJSONObject(): StringKeyMap {\n    return this._serializationService.renderCMIToJSONObject(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Process an HTTP request\n   *\n   * @param {string} url - The URL to send the request to\n   * @param {CommitObject | StringKeyMap | Array<any>} params - The parameters to send\n   * @param {boolean} immediate - Whether to send the request immediately without waiting\n   * @returns {Promise<ResultObject>} - The result of the request\n   * @async\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n  ): Promise<ResultObject> {\n    // If offline support is enabled and device is offline, store data locally instead of sending\n    if (\n      this.settings.enableOfflineSupport &&\n      this._offlineStorageService &&\n      !this._offlineStorageService.isDeviceOnline() &&\n      this._courseId\n    ) {\n      this.apiLog(\n        \"processHttpRequest\",\n        \"Device is offline, storing data locally\",\n        LogLevelEnum.INFO,\n      );\n\n      if (params && typeof params === \"object\" && \"cmi\" in params) {\n        return await this._offlineStorageService.storeOffline(\n          this._courseId,\n          params as CommitObject,\n        );\n      } else {\n        this.apiLog(\n          \"processHttpRequest\",\n          \"Invalid commit data format for offline storage\",\n          LogLevelEnum.ERROR,\n        );\n        return {\n          result: global_constants.SCORM_FALSE,\n          errorCode: this._error_codes.GENERAL ?? 101, // Fallback to a default error code if GENERAL is undefined\n        };\n      }\n    }\n\n    // Otherwise, proceed with normal HTTP request\n    return await this._httpService.processHttpRequest(\n      url,\n      params,\n      immediate,\n      (functionName, message, level, element) => this.apiLog(functionName, message, level, element),\n      (functionName, CMIElement, value) => this.processListeners(functionName, CMIElement, value),\n    );\n  }\n\n  /**\n   * Schedules a commit operation to occur after a specified delay.\n   * This method is used to implement auto-commit functionality, where data\n   * is periodically sent to the LMS without requiring explicit commit calls.\n   *\n   * @param {number} when - The number of milliseconds to wait before committing\n   * @param {string} callback - The name of the commit event callback\n   * @example\n   * // Schedule a commit to happen in 60 seconds\n   * api.scheduleCommit(60000, \"commit\");\n   */\n  scheduleCommit(when: number, callback: string) {\n    if (!this._timeout) {\n      this._timeout = new ScheduledCommit(this, when, callback);\n      this.apiLog(\"scheduleCommit\", \"scheduled\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Clears and cancels any currently scheduled commits.\n   * This method is typically called when an explicit commit is performed\n   * or when the API is terminated, to prevent redundant commits.\n   *\n   * @example\n   * // Cancel any pending scheduled commits\n   * api.clearScheduledCommit();\n   */\n  clearScheduledCommit() {\n    if (this._timeout) {\n      this._timeout.cancel();\n      this._timeout = undefined;\n      this.apiLog(\"clearScheduledCommit\", \"cleared\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Checks if an object has a specific property, using multiple detection methods.\n   * This method performs a thorough check for property existence by:\n   * 1. Checking if it's an own property using Object.hasOwnProperty\n   * 2. Checking if it's defined in the prototype with a property descriptor\n   * 3. Checking if it's accessible via the 'in' operator (includes inherited properties)\n   *\n   * @param {StringKeyMap} StringKeyMap - The object to check for the property\n   * @param {string} attribute - The property name to look for\n   * @return {boolean} True if the property exists on the object or its prototype chain\n   * @private\n   *\n   * @example\n   * // Check for an own property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"name\"); // Returns true\n   *\n   * @example\n   * // Check for an inherited property\n   * class Parent { get type() { return \"parent\"; } }\n   * const child = Object.create(new Parent());\n   * this._checkObjectHasProperty(child, \"type\"); // Returns true\n   *\n   * @example\n   * // Check for a non-existent property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"age\"); // Returns false\n   */\n  private _checkObjectHasProperty(StringKeyMap: StringKeyMap, attribute: string): boolean {\n    return (\n      Object.hasOwnProperty.call(StringKeyMap, attribute) ||\n      Object.getOwnPropertyDescriptor(Object.getPrototypeOf(StringKeyMap), attribute) != null ||\n      attribute in StringKeyMap\n    );\n  }\n\n  /**\n   * Handles exceptions that occur when accessing CMI values.\n   * This method delegates to the ErrorHandlingService to process exceptions\n   * that occur during CMI data operations, ensuring consistent error handling\n   * throughout the API.\n   *\n   * @param {string} CMIElement\n   * @param {any} e - The exception that was thrown\n   * @param {string} returnValue - The default return value to use if an error occurs\n   * @return {string} Either the original returnValue or SCORM_FALSE if an error occurred\n   * @private\n   *\n   * @example\n   * // Handle a validation error when getting a CMI value\n   * try {\n   *   return this.getCMIValue(\"cmi.core.score.raw\");\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"\");\n   * }\n   *\n   * @example\n   * // Handle a general error when setting a CMI value\n   * try {\n   *   this.setCMIValue(\"cmi.core.lesson_status\", \"completed\");\n   *   return \"true\";\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"false\");\n   * }\n   */\n  private handleValueAccessException(CMIElement: string, e: any, returnValue: string): string {\n    if (e instanceof ValidationError) {\n      this.lastErrorCode = String(e.errorCode);\n      returnValue = global_constants.SCORM_FALSE;\n      this.throwSCORMError(CMIElement, e.errorCode, e.errorMessage);\n    } else {\n      if (e instanceof Error && e.message) {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, e.message);\n      } else {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, \"Unknown error\");\n      }\n    }\n    return returnValue;\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS.\n   * This method delegates to the SerializationService to create a properly\n   * formatted object containing the CMI data that needs to be sent to the LMS.\n   * The format and content of the commit object depend on whether this is a\n   * regular commit or a termination commit.\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @return {CommitObject|StringKeyMap|Array} The formatted commit object\n   * @protected\n   *\n   * @example\n   * // Create a regular commit object\n   * const regularCommit = this.getCommitObject(false);\n   * // Result might be: { cmi: { core: { lesson_status: \"incomplete\" } } }\n   *\n   * @example\n   * // Create a termination commit object (includes total_time)\n   * const terminationCommit = this.getCommitObject(true);\n   * // Result might be: { cmi: { core: { lesson_status: \"completed\", total_time: \"PT1H30M\" } } }\n   */\n  protected getCommitObject(terminateCommit: boolean): CommitObject | StringKeyMap | Array<any> {\n    return this._serializationService.getCommitObject(\n      terminateCommit,\n      this.settings.alwaysSendTotalTime,\n      this.settings.renderCommonCommitFields,\n      (terminateCommit: boolean, includeTotalTime?: boolean) =>\n        this.renderCommitObject(terminateCommit, includeTotalTime),\n      (terminateCommit: boolean, includeTotalTime?: boolean) =>\n        this.renderCommitCMI(terminateCommit, includeTotalTime),\n      this.settings.logLevel,\n    );\n  }\n}\n","import { CMI } from \"./cmi/scorm12/cmi\";\nimport * as Utilities from \"./utilities\";\nimport { StringKeyMap, stringMatches } from \"./utilities\";\nimport { global_constants, scorm12_constants } from \"./constants/api_constants\";\nimport { scorm12_errors } from \"./constants/error_codes\";\n\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport { CMIObjectivesObject } from \"./cmi/scorm12/objectives\";\nimport {\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n} from \"./cmi/scorm12/interactions\";\nimport { NAV } from \"./cmi/scorm12/nav\";\nimport { CommitObject, ResultObject, ScoreObject, Settings } from \"./types/api_types\";\nimport { CompletionStatus, SuccessStatus } from \"./constants/enums\";\nimport BaseAPI from \"./BaseAPI\";\nimport { scorm12_regex } from \"./constants/regex\";\n\n/**\n * API class for SCORM 1.2\n */\nclass Scorm12API extends BaseAPI {\n  /**\n   * Constructor for SCORM 1.2 API\n   * @param {object} settings\n   */\n  constructor(settings?: Settings) {\n    if (settings) {\n      if (settings.mastery_override === undefined) {\n        settings.mastery_override = false;\n      }\n    }\n\n    super(scorm12_errors, settings);\n\n    this.cmi = new CMI();\n    this.nav = new NAV();\n\n    // Rename functions to match 1.2 Spec and expose to modules\n    this.LMSInitialize = this.lmsInitialize;\n    this.LMSFinish = this.lmsFinish;\n    this.LMSGetValue = this.lmsGetValue;\n    this.LMSSetValue = this.lmsSetValue;\n    this.LMSCommit = this.lmsCommit;\n    this.LMSGetLastError = this.lmsGetLastError;\n    this.LMSGetErrorString = this.lmsGetErrorString;\n    this.LMSGetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  public statusSetByModule = false;\n\n  cmi: CMI;\n  nav: NAV;\n\n  LMSInitialize: () => string;\n  LMSFinish: () => string;\n  LMSGetValue: (CMIElement: string) => string;\n  LMSSetValue: (CMIElement: string, value: any) => string;\n  LMSCommit: () => string;\n  LMSGetLastError: () => string;\n  LMSGetErrorString: (CMIErrorCode: string) => string;\n  LMSGetDiagnostic: (CMIErrorCode: string) => string;\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset(settings?: Settings) {\n    this.commonReset(settings);\n\n    this.cmi?.reset();\n    this.nav?.reset();\n  }\n\n  /**\n   * lmsInitialize function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize(): string {\n    this.cmi.initialize();\n    if (this.cmi.core.lesson_status) {\n      this.statusSetByModule = true;\n    } else {\n      this.cmi.core.lesson_status = \"not attempted\";\n    }\n    return this.initialize(\n      \"LMSInitialize\",\n      \"LMS was already initialized!\",\n      \"LMS is already finished!\",\n    );\n  }\n\n  /**\n   * LMSFinish function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish(): string {\n    (async () => {\n      await this.internalFinish();\n    })();\n    return global_constants.SCORM_TRUE;\n  }\n\n  async internalFinish(): Promise<string> {\n    const result = await this.terminate(\"LMSFinish\", true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      if (this.nav.event !== \"\") {\n        if (this.nav.event === \"continue\") {\n          this.processListeners(\"SequenceNext\");\n        } else {\n          this.processListeners(\"SequencePrevious\");\n        }\n      } else if (this.settings.autoProgress) {\n        this.processListeners(\"SequenceNext\");\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * LMSGetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement: string): string {\n    return this.getValue(\"LMSGetValue\", false, CMIElement);\n  }\n\n  /**\n   * LMSSetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement: string, value: any): string {\n    if (CMIElement === \"cmi.core.lesson_status\") {\n      this.statusSetByModule = true;\n    }\n    return this.setValue(\"LMSSetValue\", \"LMSCommit\", false, CMIElement, value);\n  }\n\n  /**\n   * LMSCommit function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit(): string {\n    if (this.settings.asyncCommit) {\n      this.scheduleCommit(500, \"LMSCommit\");\n    } else {\n      (async () => {\n        await this.commit(\"LMSCommit\", false);\n      })();\n    }\n    return global_constants.SCORM_TRUE;\n  }\n\n  /**\n   * LMSGetLastError function from SCORM 1.2 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError(): string {\n    return this.getLastError(\"LMSGetLastError\");\n  }\n\n  /**\n   * LMSGetErrorString function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode: string): string {\n    return this.getErrorString(\"LMSGetErrorString\", CMIErrorCode);\n  }\n\n  /**\n   * LMSGetDiagnostic function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode: string): string {\n    return this.getDiagnostic(\"LMSGetDiagnostic\", CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  override setCMIValue(CMIElement: string, value: any): string {\n    return this._commonSetCMIValue(\"LMSSetValue\", false, CMIElement, value);\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  override getCMIValue(CMIElement: string): any {\n    return this._commonGetCMIValue(\"getCMIValue\", false, CMIElement);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {*} _value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI|null}\n   */\n  getChildElement(CMIElement: string, _value: any, foundFirstIndex: boolean): BaseCMI | null {\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      return new CMIObjectivesObject();\n    } else if (\n      foundFirstIndex &&\n      stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+\")\n    ) {\n      return new CMIInteractionsCorrectResponsesObject();\n    } else if (\n      foundFirstIndex &&\n      stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+\")\n    ) {\n      return new CMIInteractionsObjectivesObject();\n    } else if (!foundFirstIndex && stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\")) {\n      return new CMIInteractionsObject();\n    }\n\n    return null;\n  }\n\n  /**\n   * Validates Correct Response values\n   *\n   * @param {string} _CMIElement\n   * @param {*} _value\n   */\n  validateCorrectResponse(_CMIElement: string, _value: any) {\n    // do nothing\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {number|string} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  override getLmsErrorMessageDetails(errorNumber: number | string, detail: boolean): string {\n    let basicMessage = \"No Error\";\n    let detailMessage = \"No Error\";\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (scorm12_constants.error_descriptions[errorNumber]) {\n      basicMessage =\n        scorm12_constants.error_descriptions[errorNumber]?.basicMessage || basicMessage;\n      detailMessage =\n        scorm12_constants.error_descriptions[errorNumber]?.detailMessage || detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {Scorm12API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI: Scorm12API) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} includeTotalTime - Whether to include total time in the commit data\n   * @return {object|Array}\n   */\n  renderCommitCMI(\n    terminateCommit: boolean,\n    includeTotalTime: boolean = false,\n  ): StringKeyMap | Array<string> {\n    const cmiExport: StringKeyMap = this.renderCMIToJSONObject();\n\n    if (terminateCommit || includeTotalTime) {\n      (cmiExport.cmi as any).core.total_time = this.cmi.getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened: StringKeyMap = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case \"flattened\":\n        return Utilities.flatten(cmiExport);\n      case \"params\":\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case \"json\":\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} includeTotalTime - Whether to include total time in the commit data\n   * @return {CommitObject}\n   */\n  renderCommitObject(terminateCommit: boolean, includeTotalTime: boolean = false): CommitObject {\n    const cmiExport = this.renderCommitCMI(terminateCommit, includeTotalTime);\n    const calculateTotalTime = terminateCommit || includeTotalTime;\n    const totalTimeHHMMSS = calculateTotalTime ? this.cmi.getCurrentTotalTime() : \"\";\n    const totalTimeSeconds = Utilities.getTimeAsSeconds(totalTimeHHMMSS, scorm12_regex.CMITimespan);\n    const lessonStatus = this.cmi.core.lesson_status;\n    let completionStatus = CompletionStatus.UNKNOWN;\n    let successStatus = SuccessStatus.UNKNOWN;\n    if (lessonStatus) {\n      completionStatus =\n        lessonStatus === \"completed\" || lessonStatus === \"passed\"\n          ? CompletionStatus.COMPLETED\n          : CompletionStatus.INCOMPLETE;\n      if (lessonStatus === \"passed\") {\n        successStatus = SuccessStatus.PASSED;\n      } else if (lessonStatus === \"failed\") {\n        successStatus = SuccessStatus.FAILED;\n      }\n    }\n\n    const scoreObject: ScoreObject = this.cmi?.core?.score?.getScoreObject() || {};\n    const commitObject: CommitObject = {\n      successStatus: successStatus,\n      completionStatus: completionStatus,\n      runtimeData: cmiExport as StringKeyMap,\n      totalTimeSeconds: totalTimeSeconds,\n    };\n    if (scoreObject) {\n      commitObject.score = scoreObject;\n    }\n    return commitObject;\n  }\n\n  /**\n   * Attempts to store the data to the LMS\n   *\n   * @param {boolean} terminateCommit\n   * @return {ResultObject}\n   */\n  async storeData(terminateCommit: boolean): Promise<ResultObject> {\n    if (terminateCommit) {\n      const originalStatus = this.cmi.core.lesson_status;\n      if (\n        !this.cmi.core.lesson_status ||\n        (!this.statusSetByModule && this.cmi.core.lesson_status === \"not attempted\")\n      ) {\n        this.cmi.core.lesson_status = \"completed\";\n      }\n\n      if (this.cmi.core.lesson_mode === \"normal\") {\n        if (this.cmi.core.credit === \"credit\") {\n          if (\n            this.settings.mastery_override &&\n            this.cmi.student_data.mastery_score !== \"\" &&\n            this.cmi.core.score.raw !== \"\"\n          ) {\n            this.cmi.core.lesson_status =\n              parseFloat(this.cmi.core.score.raw) >= parseFloat(this.cmi.student_data.mastery_score)\n                ? \"passed\"\n                : \"failed\";\n          }\n        }\n      } else if (this.cmi.core.lesson_mode === \"browse\") {\n        if (\n          ((this.startingData?.cmi as any)?.core?.lesson_status || \"\") === \"\" &&\n          originalStatus === \"not attempted\"\n        ) {\n          this.cmi.core.lesson_status = \"browsed\";\n        }\n      }\n    }\n\n    const commitObject = this.getCommitObject(terminateCommit);\n    if (typeof this.settings.lmsCommitUrl === \"string\") {\n      return await this.processHttpRequest(\n        this.settings.lmsCommitUrl,\n        commitObject,\n        terminateCommit,\n      );\n    } else {\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    }\n  }\n}\n\nexport default Scorm12API;\n","import { ValidationError } from \"../exceptions\";\nimport { aicc_constants } from \"../constants/api_constants\";\n\nconst aicc_errors = aicc_constants.error_descriptions;\n\n/**\n * AICC Validation Error\n */\nexport class AICCValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(aicc_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        aicc_errors[String(errorCode)]?.basicMessage || \"Unknown error\",\n        aicc_errors[String(errorCode)]?.detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        aicc_errors[\"101\"]?.basicMessage || \"General error\",\n        aicc_errors[\"101\"]?.detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, AICCValidationError.prototype);\n  }\n}\n","import { checkValidFormat } from \"../common/validation\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function checkAICCValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm12_errors.TYPE_MISMATCH as number,\n    AICCValidationError,\n    allowEmptyString,\n  );\n}\n","import { CMIArray } from \"../common/array\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { aicc_regex } from \"../../constants/regex\";\n\n/**\n * AICC Evaluation object\n */\nexport class CMIEvaluation extends BaseCMI {\n  /**\n   * Constructor for AICC Evaluation object\n   */\n  constructor() {\n    super(\"cmi.evaluation\");\n    this.comments = new CMIEvaluationComments();\n  }\n\n  public comments: CMIEvaluationComments;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.comments?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this.comments?.reset();\n  }\n\n  /**\n   * toJSON for cmi.evaluation object\n   * @return {{comments: CMIEvaluationComments}}\n   */\n  toJSON(): {\n    comments: CMIEvaluationComments;\n  } {\n    this.jsonString = true;\n    const result = {\n      comments: this.comments,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing AICC's cmi.evaluation.comments object\n */\n\nclass CMIEvaluationComments extends CMIArray {\n  /**\n   * Constructor for AICC Evaluation Comments object\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.evaluation.comments\",\n      children: aicc_constants.comments_children,\n      errorCode: scorm12_errors.INVALID_SET_VALUE as number,\n      errorClass: AICCValidationError,\n    });\n  }\n}\n\n/**\n * Class for AICC Evaluation Comments\n */\nexport class CMIEvaluationCommentsObject extends BaseCMI {\n  private _content = \"\";\n  private _location = \"\";\n  private _time = \"\";\n\n  /**\n   * Constructor for Evaluation Comments\n   */\n  constructor() {\n    super(\"cmi.evaluation.comments.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._content = \"\";\n    this._location = \"\";\n    this._time = \"\";\n  }\n\n  /**\n   * Getter for _content\n   * @return {string}\n   */\n  get content(): string {\n    return this._content;\n  }\n\n  /**\n   * Setter for _content\n   * @param {string} content\n   */\n  set content(content: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".content\", content, aicc_regex.CMIString256)) {\n      this._content = content;\n    }\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".location\", location, aicc_regex.CMIString256)) {\n      this._location = location;\n    }\n  }\n\n  /**\n   * Getter for _time\n   * @return {string}\n   */\n  get time(): string {\n    return this._time;\n  }\n\n  /**\n   * Setting for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".time\", time, aicc_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.evaluation.comments.n object\n   * @return {\n   *    {\n   *      content: string,\n   *      location: string,\n   *      time: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    content: string;\n    location: string;\n    time: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      content: this.content,\n      location: this.location,\n      time: this.time,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { CMIStudentPreference } from \"../scorm12/student_preference\";\n\n/**\n * StudentPreferences class for AICC\n */\nexport class AICCStudentPreferences extends CMIStudentPreference {\n  /**\n   * Constructor for AICC Student Preferences object\n   */\n  constructor() {\n    super(aicc_constants.student_preference_children);\n    this.windows = new CMIArray({\n      CMIElement: \"cmi.student_preference.windows\",\n      errorCode: scorm12_errors.INVALID_SET_VALUE as number,\n      errorClass: AICCValidationError,\n      children: \"\",\n    });\n  }\n\n  public windows: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.windows?.initialize();\n  }\n\n  private _lesson_type = \"\";\n  private _text_color = \"\";\n  private _text_location = \"\";\n  private _text_size = \"\";\n  private _video = \"\";\n\n  /**\n   * Getter for _lesson_type\n   * @return {string}\n   */\n  get lesson_type(): string {\n    return this._lesson_type;\n  }\n\n  /**\n   * Setter for _lesson_type\n   * @param {string} lesson_type\n   */\n  set lesson_type(lesson_type: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".lesson_type\", lesson_type, aicc_regex.CMIString256)\n    ) {\n      this._lesson_type = lesson_type;\n    }\n  }\n\n  /**\n   * Getter for _text_color\n   * @return {string}\n   */\n  get text_color(): string {\n    return this._text_color;\n  }\n\n  /**\n   * Setter for _text_color\n   * @param {string} text_color\n   */\n  set text_color(text_color: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".text_color\", text_color, aicc_regex.CMIString256)\n    ) {\n      this._text_color = text_color;\n    }\n  }\n\n  /**\n   * Getter for _text_location\n   * @return {string}\n   */\n  get text_location(): string {\n    return this._text_location;\n  }\n\n  /**\n   * Setter for _text_location\n   * @param {string} text_location\n   */\n  set text_location(text_location: string) {\n    if (\n      checkAICCValidFormat(\n        this._cmi_element + \".text_location\",\n        text_location,\n        aicc_regex.CMIString256,\n      )\n    ) {\n      this._text_location = text_location;\n    }\n  }\n\n  /**\n   * Getter for _text_size\n   * @return {string}\n   */\n  get text_size(): string {\n    return this._text_size;\n  }\n\n  /**\n   * Setter for _text_size\n   * @param {string} text_size\n   */\n  set text_size(text_size: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".text_size\", text_size, aicc_regex.CMIString256)\n    ) {\n      this._text_size = text_size;\n    }\n  }\n\n  /**\n   * Getter for _video\n   * @return {string}\n   */\n  get video(): string {\n    return this._video;\n  }\n\n  /**\n   * Setter for _video\n   * @param {string} video\n   */\n  set video(video: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".video\", video, aicc_regex.CMIString256)) {\n      this._video = video;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_preference\n   *\n   * @return {\n   *    {\n   *      audio: string,\n   *      language: string,\n   *      speed: string,\n   *      text: string,\n   *      text_color: string,\n   *      text_location: string,\n   *      text_size: string,\n   *      video: string,\n   *      windows: CMIArray\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    audio: string;\n    language: string;\n    lesson_type: string;\n    speed: string;\n    text: string;\n    text_color: string;\n    text_location: string;\n    text_size: string;\n    video: string;\n    windows: CMIArray;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio: this.audio,\n      language: this.language,\n      lesson_type: this.lesson_type,\n      speed: this.speed,\n      text: this.text,\n      text_color: this.text_color,\n      text_location: this.text_location,\n      text_size: this.text_size,\n      video: this.video,\n      windows: this.windows,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Class representing the AICC cmi.student_demographics object\n */\nexport class CMIStudentDemographics extends BaseCMI {\n  private __children = aicc_constants.student_demographics_children;\n  private _city = \"\";\n  private _class = \"\";\n  private _company = \"\";\n  private _country = \"\";\n  private _experience = \"\";\n  private _familiar_name = \"\";\n  private _instructor_name = \"\";\n  private _title = \"\";\n  private _native_language = \"\";\n  private _state = \"\";\n  private _street_address = \"\";\n  private _telephone = \"\";\n  private _years_experience = \"\";\n\n  /**\n   * Constructor for AICC StudentDemographics object\n   */\n  constructor() {\n    super(\"cmi.student_demographics\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Getter for city\n   * @return {string}\n   */\n  get city(): string {\n    return this._city;\n  }\n\n  /**\n   * Setter for _city. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} city\n   */\n  set city(city: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.city\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._city = city;\n    }\n  }\n\n  /**\n   * Getter for class\n   * @return {string}\n   */\n  get class(): string {\n    return this._class;\n  }\n\n  /**\n   * Setter for _class. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} clazz\n   */\n  set class(clazz: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.class\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._class = clazz;\n    }\n  }\n\n  /**\n   * Getter for company\n   * @return {string}\n   */\n  get company(): string {\n    return this._company;\n  }\n\n  /**\n   * Setter for _company. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} company\n   */\n  set company(company: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.company\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._company = company;\n    }\n  }\n\n  /**\n   * Getter for country\n   * @return {string}\n   */\n  get country(): string {\n    return this._country;\n  }\n\n  /**\n   * Setter for _country. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} country\n   */\n  set country(country: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.country\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._country = country;\n    }\n  }\n\n  /**\n   * Getter for experience\n   * @return {string}\n   */\n  get experience(): string {\n    return this._experience;\n  }\n\n  /**\n   * Setter for _experience. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} experience\n   */\n  set experience(experience: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.experience\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._experience = experience;\n    }\n  }\n\n  /**\n   * Getter for familiar_name\n   * @return {string}\n   */\n  get familiar_name(): string {\n    return this._familiar_name;\n  }\n\n  /**\n   * Setter for _familiar_name. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} familiar_name\n   */\n  set familiar_name(familiar_name: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.familiar_name\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._familiar_name = familiar_name;\n    }\n  }\n\n  /**\n   * Getter for instructor_name\n   * @return {string}\n   */\n  get instructor_name(): string {\n    return this._instructor_name;\n  }\n\n  /**\n   * Setter for _instructor_name. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} instructor_name\n   */\n  set instructor_name(instructor_name: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.instructor_name\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._instructor_name = instructor_name;\n    }\n  }\n\n  /**\n   * Getter for title\n   * @return {string}\n   */\n  get title(): string {\n    return this._title;\n  }\n\n  /**\n   * Setter for _title. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} title\n   */\n  set title(title: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.title\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._title = title;\n    }\n  }\n\n  /**\n   * Getter for native_language\n   * @return {string}\n   */\n  get native_language(): string {\n    return this._native_language;\n  }\n\n  /**\n   * Setter for _native_language. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} native_language\n   */\n  set native_language(native_language: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.native_language\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._native_language = native_language;\n    }\n  }\n\n  /**\n   * Getter for state\n   * @return {string}\n   */\n  get state(): string {\n    return this._state;\n  }\n\n  /**\n   * Setter for _state. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} state\n   */\n  set state(state: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.state\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._state = state;\n    }\n  }\n\n  /**\n   * Getter for street_address\n   * @return {string}\n   */\n  get street_address(): string {\n    return this._street_address;\n  }\n\n  /**\n   * Setter for _street_address. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} street_address\n   */\n  set street_address(street_address: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.street_address\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._street_address = street_address;\n    }\n  }\n\n  /**\n   * Getter for telephone\n   * @return {string}\n   */\n  get telephone(): string {\n    return this._telephone;\n  }\n\n  /**\n   * Setter for _telephone. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} telephone\n   */\n  set telephone(telephone: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.telephone\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._telephone = telephone;\n    }\n  }\n\n  /**\n   * Getter for years_experience\n   * @return {string}\n   */\n  get years_experience(): string {\n    return this._years_experience;\n  }\n\n  /**\n   * Setter for _years_experience. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} years_experience\n   */\n  set years_experience(years_experience: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.years_experience\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._years_experience = years_experience;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_demographics object\n   * @return {\n   *      {\n   *        city: string,\n   *        class: string,\n   *        company: string,\n   *        country: string,\n   *        experience: string,\n   *        familiar_name: string,\n   *        instructor_name: string,\n   *        title: string,\n   *        native_language: string,\n   *        state: string,\n   *        street_address: string,\n   *        telephone: string,\n   *        years_experience: string\n   *      }\n   *    }\n   */\n  toJSON(): {\n    city: string;\n    class: string;\n    company: string;\n    country: string;\n    experience: string;\n    familiar_name: string;\n    instructor_name: string;\n    title: string;\n    native_language: string;\n    state: string;\n    street_address: string;\n    telephone: string;\n    years_experience: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      city: this.city,\n      class: this.class,\n      company: this.company,\n      country: this.country,\n      experience: this.experience,\n      familiar_name: this.familiar_name,\n      instructor_name: this.instructor_name,\n      title: this.title,\n      native_language: this.native_language,\n      state: this.state,\n      street_address: this.street_address,\n      telephone: this.telephone,\n      years_experience: this.years_experience,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { checkAICCValidFormat } from \"./validation\";\n\n/**\n * Class representing the AICC cmi.student_data.tries object\n */\nexport class CMITries extends CMIArray {\n  /**\n   * Constructor for inline Tries Array class\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.student_data.tries\",\n      children: aicc_constants.tries_children,\n    });\n  }\n}\n\n/**\n * Class for AICC Tries\n */\nexport class CMITriesObject extends BaseCMI {\n  private _status = \"\";\n  private _time = \"\";\n\n  /**\n   * Constructor for AICC Tries object\n   */\n  constructor() {\n    super(\"cmi.student_data.tries.n\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.student_data.tries.n.score\",\n      score_children: aicc_constants.score_children,\n      score_range: aicc_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE as number,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH as number,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE as number,\n      errorClass: AICCValidationError,\n    });\n  }\n\n  public score: CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._status = \"\";\n    this._time = \"\";\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for _status\n   * @return {string}\n   */\n  get status(): string {\n    return this._status;\n  }\n\n  /**\n   * Setter for _status\n   * @param {string} status\n   */\n  set status(status: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".status\", status, aicc_regex.CMIStatus2)) {\n      this._status = status;\n    }\n  }\n\n  /**\n   * Getter for _time\n   * @return {string}\n   */\n  get time(): string {\n    return this._time;\n  }\n\n  /**\n   * Setter for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".time\", time, aicc_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data.tries.n object\n   * @return {\n   *    {\n   *      status: string,\n   *      time: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    status: string;\n    time: string;\n    score: CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      status: this.status,\n      time: this.time,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { CMIArray } from \"../common/array\";\n\n/**\n * Class for cmi.student_data.attempt_records array\n */\nexport class CMIAttemptRecords extends CMIArray {\n  /**\n   * Constructor for inline Tries Array class\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.student_data.attempt_records\",\n      children: aicc_constants.attempt_records_children,\n    });\n  }\n}\n\n/**\n * Class for AICC Attempt Records\n */\nexport class CMIAttemptRecordsObject extends BaseCMI {\n  private _lesson_status = \"\";\n\n  /**\n   * Constructor for AICC Attempt Records object\n   */\n  constructor() {\n    super(\"cmi.student_data.attempt_records.n\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.student_data.attempt_records.n.score\",\n      score_children: aicc_constants.score_children,\n      score_range: aicc_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE as number,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH as number,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE as number,\n      errorClass: AICCValidationError,\n    });\n  }\n\n  public score: CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n\n    this._lesson_status = \"\";\n    this.score?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for _lesson_status\n   * @return {string}\n   */\n  get lesson_status(): string {\n    return this._lesson_status;\n  }\n\n  /**\n   * Setter for _lesson_status\n   * @param {string} lesson_status\n   */\n  set lesson_status(lesson_status: string) {\n    if (\n      checkAICCValidFormat(\n        this._cmi_element + \".lesson_status\",\n        lesson_status,\n        aicc_regex.CMIStatus2,\n      )\n    ) {\n      this._lesson_status = lesson_status;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data.attempt_records.n object\n   * @return {\n   *    {\n   *         lesson_status: string,\n   *         score: CMIScore\n   *     }\n   *  }\n   */\n  toJSON(): {\n    lesson_status: string;\n    score: CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      lesson_status: this.lesson_status,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { CMITries } from \"./tries\";\nimport { CMIStudentData } from \"../scorm12/student_data\";\nimport { CMIAttemptRecords } from \"./attempts\";\n\n/**\n * StudentData class for AICC\n */\nexport class AICCCMIStudentData extends CMIStudentData {\n  /**\n   * Constructor for AICC StudentData object\n   */\n  constructor() {\n    super(aicc_constants.student_data_children);\n    this.tries = new CMITries();\n    this.attempt_records = new CMIAttemptRecords();\n  }\n\n  public tries: CMITries;\n  public attempt_records: CMIAttemptRecords;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.tries?.initialize();\n    this.attempt_records?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n    this.tries?.reset(true);\n    this.attempt_records?.reset(true);\n  }\n\n  private _tries_during_lesson = \"\";\n\n  /**\n   * Getter for tries_during_lesson\n   * @return {string}\n   */\n  get tries_during_lesson(): string {\n    return this._tries_during_lesson;\n  }\n\n  /**\n   * Setter for _tries_during_lesson. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} tries_during_lesson\n   */\n  set tries_during_lesson(tries_during_lesson: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_data.tries_during_lesson\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._tries_during_lesson = tries_during_lesson;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data object\n   * @return {\n   *    {\n   *      mastery_score: string,\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      tries: CMITries,\n   *      attempt_records: CMIAttemptRecords\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    mastery_score: string;\n    max_time_allowed: string;\n    time_limit_action: string;\n    tries: CMITries;\n    attempt_records: CMIAttemptRecords;\n  } {\n    this.jsonString = true;\n    const result = {\n      mastery_score: this.mastery_score,\n      max_time_allowed: this.max_time_allowed,\n      time_limit_action: this.time_limit_action,\n      tries: this.tries,\n      attempt_records: this.attempt_records,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { CMIArray } from \"../common/array\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { aicc_constants } from \"../../constants/api_constants\";\n\n/**\n * Class representing the AICC `cmi.paths` object\n */\nexport class CMIPaths extends CMIArray {\n  /**\n   * Constructor for inline Paths Array class\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.paths\",\n      children: aicc_constants.paths_children,\n    });\n  }\n}\n\n/**\n * Class for AICC Paths\n */\nexport class CMIPathsObject extends BaseCMI {\n  private _location_id = \"\";\n  private _date = \"\";\n  private _time = \"\";\n  private _status = \"\";\n  private _why_left = \"\";\n  private _time_in_element = \"\";\n\n  /**\n   * Constructor for AICC Paths objects\n   */\n  constructor() {\n    super(\"cmi.paths.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._location_id = \"\";\n    this._date = \"\";\n    this._time = \"\";\n    this._status = \"\";\n    this._why_left = \"\";\n    this._time_in_element = \"\";\n  }\n\n  /**\n   * Getter for _location_id\n   * @return {string}\n   */\n  get location_id(): string {\n    return this._location_id;\n  }\n\n  /**\n   * Setter for _location_id\n   * @param {string} location_id\n   */\n  set location_id(location_id: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".location_id\", location_id, aicc_regex.CMIString256)\n    ) {\n      this._location_id = location_id;\n    }\n  }\n\n  /**\n   * Getter for _date\n   * @return {string}\n   */\n  get date(): string {\n    return this._date;\n  }\n\n  /**\n   * Setter for _date\n   * @param {string} date\n   */\n  set date(date: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".date\", date, aicc_regex.CMIString256)) {\n      this._date = date;\n    }\n  }\n\n  /**\n   * Getter for _time\n   * @return {string}\n   */\n  get time(): string {\n    return this._time;\n  }\n\n  /**\n   * Setter for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".time\", time, aicc_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * Getter for _status\n   * @return {string}\n   */\n  get status(): string {\n    return this._status;\n  }\n\n  /**\n   * Setter for _status\n   * @param {string} status\n   */\n  set status(status: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".status\", status, aicc_regex.CMIStatus2)) {\n      this._status = status;\n    }\n  }\n\n  /**\n   * Getter for _why_left\n   * @return {string}\n   */\n  get why_left(): string {\n    return this._why_left;\n  }\n\n  /**\n   * Setter for _why_left\n   * @param {string} why_left\n   */\n  set why_left(why_left: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".why_left\", why_left, aicc_regex.CMIString256)) {\n      this._why_left = why_left;\n    }\n  }\n\n  /**\n   * Getter for _time_in_element\n   * @return {string}\n   */\n  get time_in_element(): string {\n    return this._time_in_element;\n  }\n\n  /**\n   * Setter for _time_in_element\n   * @param {string} time_in_element\n   */\n  set time_in_element(time_in_element: string) {\n    if (\n      checkAICCValidFormat(\n        this._cmi_element + \".time_in_element\",\n        time_in_element,\n        aicc_regex.CMITime,\n      )\n    ) {\n      this._time_in_element = time_in_element;\n    }\n  }\n\n  /**\n   * toJSON for cmi.paths.n object\n   * @return {\n   *    {\n   *      location_id: string,\n   *      date: string,\n   *      time: string,\n   *      status: string,\n   *      why_left: string,\n   *      time_in_element: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    location_id: string;\n    date: string;\n    time: string;\n    status: string;\n    why_left: string;\n    time_in_element: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      location_id: this.location_id,\n      date: this.date,\n      time: this.time,\n      status: this.status,\n      why_left: this.why_left,\n      time_in_element: this.time_in_element,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import * as Scorm12CMI from \"../scorm12/cmi\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { CMIEvaluation } from \"./evaluation\";\nimport { AICCStudentPreferences } from \"./student_preferences\";\nimport { CMIStudentDemographics } from \"./student_demographics\";\nimport { AICCCMIStudentData } from \"./student_data\";\nimport { CMIPaths } from \"./paths\";\nimport { CMICore } from \"./core\";\nimport { CMIObjectives } from \"../scorm12/objectives\";\nimport { CMIStudentData } from \"../scorm12/student_data\";\nimport { CMIStudentPreference } from \"../scorm12/student_preference\";\nimport { CMIInteractions } from \"../scorm12/interactions\";\n\n/**\n * CMI Class for AICC\n */\nexport class CMI extends Scorm12CMI.CMI {\n  /**\n   * Constructor for AICC CMI object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean = false) {\n    super(aicc_constants.cmi_children);\n    if (initialized) this.initialize();\n    this.student_preference = new AICCStudentPreferences();\n    this.student_data = new AICCCMIStudentData();\n    this.student_demographics = new CMIStudentDemographics();\n    this.evaluation = new CMIEvaluation();\n    this.paths = new CMIPaths();\n  }\n\n  public override student_data: AICCCMIStudentData;\n  public override student_preference: AICCStudentPreferences;\n  public student_demographics: CMIStudentDemographics;\n  public evaluation: CMIEvaluation;\n  public paths: CMIPaths;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.student_preference?.initialize();\n    this.student_data?.initialize();\n    this.student_demographics?.initialize();\n    this.evaluation?.initialize();\n    this.paths?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions,\n   *      paths: CMIPaths\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    suspend_data: string;\n    launch_data: string;\n    comments: string;\n    comments_from_lms: string;\n    core: CMICore;\n    objectives: CMIObjectives;\n    student_data: CMIStudentData;\n    student_preference: CMIStudentPreference;\n    student_demographics: CMIStudentDemographics;\n    interactions: CMIInteractions;\n    evaluation: CMIEvaluation;\n    paths: CMIPaths;\n  } {\n    this.jsonString = true;\n    const result = {\n      suspend_data: this.suspend_data,\n      launch_data: this.launch_data,\n      comments: this.comments,\n      comments_from_lms: this.comments_from_lms,\n      core: this.core,\n      objectives: this.objectives,\n      student_data: this.student_data,\n      student_preference: this.student_preference,\n      student_demographics: this.student_demographics,\n      interactions: this.interactions,\n      evaluation: this.evaluation,\n      paths: this.paths,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import Scorm12API from \"./Scorm12API\";\nimport { CMI } from \"./cmi/aicc/cmi\";\n\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport { CMITriesObject } from \"./cmi/aicc/tries\";\nimport { CMIAttemptRecordsObject } from \"./cmi/aicc/attempts\";\nimport { CMIEvaluationCommentsObject } from \"./cmi/aicc/evaluation\";\nimport { NAV } from \"./cmi/scorm12/nav\";\nimport { CMIPathsObject } from \"./cmi/aicc/paths\";\nimport { Settings } from \"./types/api_types\";\nimport { stringMatches } from \"./utilities\";\n\n/**\n * The AICC API class\n */\nclass AICC extends Scorm12API {\n  /**\n   * Constructor to create AICC API object\n   * @param {Settings} settings\n   */\n  constructor(settings?: Settings) {\n    super(settings);\n\n    this.cmi = new CMI();\n    this.nav = new NAV();\n  }\n\n  override cmi: CMI;\n  override nav: NAV;\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI | null}\n   */\n  override getChildElement(\n    CMIElement: string,\n    value: any,\n    foundFirstIndex: boolean,\n  ): BaseCMI | null {\n    let newChild = super.getChildElement(CMIElement, value, foundFirstIndex);\n\n    if (!newChild) {\n      if (stringMatches(CMIElement, \"cmi\\\\.evaluation\\\\.comments\\\\.\\\\d+\")) {\n        newChild = new CMIEvaluationCommentsObject();\n      } else if (stringMatches(CMIElement, \"cmi\\\\.student_data\\\\.tries\\\\.\\\\d+\")) {\n        newChild = new CMITriesObject();\n      } else if (stringMatches(CMIElement, \"cmi\\\\.student_data\\\\.attempt_records\\\\.\\\\d+\")) {\n        newChild = new CMIAttemptRecordsObject();\n      } else if (stringMatches(CMIElement, \"cmi\\\\.paths\\\\.\\\\d+\")) {\n        newChild = new CMIPathsObject();\n      }\n    }\n\n    return newChild;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {AICC} newAPI\n   */\n  override replaceWithAnotherScormAPI(newAPI: AICC) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.nav = newAPI.nav;\n  }\n}\n\nexport default AICC;\n","import { ValidationError } from \"../exceptions\";\nimport { scorm2004_constants } from \"../constants/api_constants\";\n\nconst scorm2004_errors = scorm2004_constants.error_descriptions;\n\n/**\n * SCORM 2004 Validation Error\n */\nexport class Scorm2004ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm2004_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm2004_errors[String(errorCode)]?.basicMessage || \"Unknown error\",\n        scorm2004_errors[String(errorCode)]?.detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm2004_errors[\"101\"]?.basicMessage || \"General error\",\n        scorm2004_errors[\"101\"]?.detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm2004ValidationError.prototype);\n  }\n}\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check2004ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm2004_errors.TYPE_MISMATCH as number,\n    Scorm2004ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @return {boolean}\n */\nexport function check2004ValidRange(\n  CMIElement: string,\n  value: string,\n  rangePattern: string,\n): boolean {\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm2004_errors.VALUE_OUT_OF_RANGE as number,\n    Scorm2004ValidationError,\n  );\n}\n","/**\n * Class for SCORM 2004's cmi.learner_preference object\n */\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\n\nexport class CMILearnerPreference extends BaseCMI {\n  private __children = scorm2004_constants.student_preference_children;\n  private _audio_level = \"1\";\n  private _language = \"\";\n  private _delivery_speed = \"1\";\n  private _audio_captioning = \"0\";\n\n  /**\n   * Constructor for cmi.learner_preference\n   */\n  constructor() {\n    super(\"cmi.learner_preference\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._children\",\n      scorm2004_errors.READ_ONLY_ELEMENT as number,\n    );\n  }\n\n  /**\n   * Getter for _audio_level\n   * @return {string}\n   */\n  get audio_level(): string {\n    return this._audio_level;\n  }\n\n  /**\n   * Setter for _audio_level\n   * @param {string} audio_level\n   */\n  set audio_level(audio_level: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".audio_level\",\n        audio_level,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".audio_level\",\n        audio_level,\n        scorm2004_regex.audio_range,\n      )\n    ) {\n      this._audio_level = audio_level;\n    }\n  }\n\n  /**\n   * Getter for _language\n   * @return {string}\n   */\n  get language(): string {\n    return this._language;\n  }\n\n  /**\n   * Setter for _language\n   * @param {string} language\n   */\n  set language(language: string) {\n    if (check2004ValidFormat(this._cmi_element + \".language\", language, scorm2004_regex.CMILang)) {\n      this._language = language;\n    }\n  }\n\n  /**\n   * Getter for _delivery_speed\n   * @return {string}\n   */\n  get delivery_speed(): string {\n    return this._delivery_speed;\n  }\n\n  /**\n   * Setter for _delivery_speed\n   * @param {string} delivery_speed\n   */\n  set delivery_speed(delivery_speed: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".delivery_speed\",\n        delivery_speed,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".delivery_speed\",\n        delivery_speed,\n        scorm2004_regex.speed_range,\n      )\n    ) {\n      this._delivery_speed = delivery_speed;\n    }\n  }\n\n  /**\n   * Getter for _audio_captioning\n   * @return {string}\n   */\n  get audio_captioning(): string {\n    return this._audio_captioning;\n  }\n\n  /**\n   * Setter for _audio_captioning\n   * @param {string} audio_captioning\n   */\n  set audio_captioning(audio_captioning: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".audio_captioning\",\n        audio_captioning,\n        scorm2004_regex.CMISInteger,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".audio_captioning\",\n        audio_captioning,\n        scorm2004_regex.text_range,\n      )\n    ) {\n      this._audio_captioning = audio_captioning;\n    }\n  }\n\n  /**\n   * toJSON for cmi.learner_preference\n   *\n   * @return {\n   *    {\n   *      audio_level: string,\n   *      language: string,\n   *      delivery_speed: string,\n   *      audio_captioning: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    audio_level: string;\n    language: string;\n    delivery_speed: string;\n    audio_captioning: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio_level: this.audio_level,\n      language: this.language,\n      delivery_speed: this.delivery_speed,\n      audio_captioning: this.audio_captioning,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { scorm2004_regex } from \"./regex\";\n\nexport const LearnerResponses: Responses = {\n  \"true-false\": {\n    format: \"^true$|^false$\",\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  choice: {\n    format: scorm2004_regex.CMILongIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    unique: true,\n  },\n  \"fill-in\": {\n    format: scorm2004_regex.CMILangString250,\n    max: 10,\n    delimiter: \"[,]\",\n    unique: false,\n  },\n  \"long-fill-in\": {\n    format: scorm2004_regex.CMILangString4000,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  matching: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n  },\n  performance: {\n    format: \"^$|\" + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + \"|^$|\" + scorm2004_regex.CMIShortIdentifier,\n    max: 250,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n  },\n  sequencing: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    unique: false,\n  },\n  likert: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  numeric: {\n    format: scorm2004_regex.CMIDecimal,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  other: {\n    format: scorm2004_regex.CMIString4000,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n};\nexport const CorrectResponses: Responses = {\n  \"true-false\": {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: \"^true$|^false$\",\n    limit: 1,\n  },\n  choice: {\n    max: 36,\n    delimiter: \"[,]\",\n    unique: true,\n    duplicate: false,\n    format: scorm2004_regex.CMILongIdentifier,\n  },\n  \"fill-in\": {\n    max: 10,\n    delimiter: \"[,]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMILangString250cr,\n  },\n  \"long-fill-in\": {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: true,\n    format: scorm2004_regex.CMILangString4000,\n  },\n  matching: {\n    max: 36,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n  },\n  performance: {\n    max: 250,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    delimiter3: \"[:]\",\n    unique: false,\n    duplicate: false,\n    // step_name must be a non-empty short identifier\n    format: scorm2004_regex.CMIShortIdentifier,\n    // step_answer may be short identifier or numeric range (<decimal>[:<decimal>])\n    format2: `^(${scorm2004_regex.CMIShortIdentifier})$|^(?:\\\\d+(?:\\\\.\\\\d+)?(?::\\\\d+(?:\\\\.\\\\d+)?)?)$`,\n  },\n  sequencing: {\n    max: 36,\n    delimiter: \"[,]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n  },\n  likert: {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    limit: 1,\n  },\n  numeric: {\n    max: 2,\n    delimiter: \"[:]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIDecimal,\n    limit: 1,\n  },\n  other: {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIString4000,\n    limit: 1,\n  },\n};\n\nexport type ResponseType = {\n  format: string;\n  max: number;\n  delimiter: string;\n  unique: boolean;\n  duplicate?: boolean;\n  format2?: string;\n  delimiter2?: string;\n  limit?: number;\n  delimiter3?: string;\n};\n\nexport type Responses = {\n  [key: string]: ResponseType;\n};\n","/**\n * Class representing SCORM 2004's `cmi.interactions` object\n */\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { CMIArray } from \"../common/array\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport {\n  CorrectResponses,\n  LearnerResponses,\n  ResponseType,\n} from \"../../constants/response_constants\";\n\nexport class CMIInteractions extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives` Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.interactions\",\n      children: scorm2004_constants.interactions_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.interaction.n object\n */\n\nexport class CMIInteractionsObject extends BaseCMI {\n  private _id = \"\";\n  private _type = \"\";\n  private _timestamp = \"\";\n  private _weighting = \"\";\n  private _learner_response = \"\";\n  private _result = \"\";\n  private _latency = \"\";\n  private _description = \"\";\n\n  /**\n   * Constructor for cmi.interaction.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n\");\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.n.correct_responses\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  public objectives: CMIArray;\n  public correct_responses: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._id = \"\";\n    this._type = \"\";\n    this._timestamp = \"\";\n    this._weighting = \"\";\n    this._learner_response = \"\";\n    this._result = \"\";\n    this._latency = \"\";\n    this._description = \"\";\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.n.correct_responses\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _type\n   * @return {string}\n   */\n  get type(): string {\n    return this._type;\n  }\n\n  /**\n   * Setter for _type\n   * @param {string} type\n   */\n  set type(type: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".type\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (check2004ValidFormat(this._cmi_element + \".type\", type, scorm2004_regex.CMIType)) {\n        this._type = type;\n      }\n    }\n  }\n\n  /**\n   * Getter for _timestamp\n   * @return {string}\n   */\n  get timestamp(): string {\n    return this._timestamp;\n  }\n\n  /**\n   * Setter for _timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".timestamp\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".timestamp\", timestamp, scorm2004_regex.CMITime)\n      ) {\n        this._timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * Getter for _weighting\n   * @return {string}\n   */\n  get weighting(): string {\n    return this._weighting;\n  }\n\n  /**\n   * Setter for _weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".weighting\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".weighting\",\n          weighting,\n          scorm2004_regex.CMIDecimal,\n        )\n      ) {\n        this._weighting = weighting;\n      }\n    }\n  }\n\n  /**\n   * Getter for _learner_response\n   * @return {string}\n   */\n  get learner_response(): string {\n    return this._learner_response;\n  }\n\n  /**\n   * Setter for _learner_response. Does type validation to make sure response\n   * matches SCORM 2004's spec\n   * @param {string} learner_response\n   */\n  set learner_response(learner_response: string) {\n    if (this.initialized && (this._type === \"\" || this._id === \"\")) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_response\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      let nodes = [];\n      const response_type = LearnerResponses[this.type];\n\n      if (response_type) {\n        if (response_type?.delimiter) {\n          // Convert regex-style delimiter to actual character\n          const delimiter = response_type.delimiter === \"[,]\" ? \",\" : response_type.delimiter;\n          nodes = learner_response.split(delimiter);\n        } else {\n          nodes[0] = learner_response;\n        }\n\n        if (nodes.length > 0 && nodes.length <= response_type.max) {\n          const formatRegex = new RegExp(response_type.format);\n\n          for (let i = 0; i < nodes.length; i++) {\n            if (response_type?.delimiter2) {\n              // Convert regex-style delimiter to actual character\n              const delimiter2 =\n                response_type.delimiter2 === \"[.]\" ? \".\" : response_type.delimiter2;\n              const values = nodes[i]?.split(delimiter2);\n\n              if (values?.length === 2) {\n                // For performance type, both parts must be non-empty\n                if (this.type === \"performance\" && (values[0] === \"\" || values[1] === \"\")) {\n                  throw new Scorm2004ValidationError(\n                    this._cmi_element + \".learner_response\",\n                    scorm2004_errors.TYPE_MISMATCH as number,\n                  );\n                }\n\n                if (!values[0]?.match(formatRegex)) {\n                  throw new Scorm2004ValidationError(\n                    this._cmi_element + \".learner_response\",\n                    scorm2004_errors.TYPE_MISMATCH as number,\n                  );\n                } else {\n                  if (\n                    !response_type.format2 ||\n                    !values[1]?.match(new RegExp(response_type.format2))\n                  ) {\n                    throw new Scorm2004ValidationError(\n                      this._cmi_element + \".learner_response\",\n                      scorm2004_errors.TYPE_MISMATCH as number,\n                    );\n                  }\n                }\n              } else {\n                throw new Scorm2004ValidationError(\n                  this._cmi_element + \".learner_response\",\n                  scorm2004_errors.TYPE_MISMATCH as number,\n                );\n              }\n            } else {\n              if (!nodes[i]?.match(formatRegex)) {\n                throw new Scorm2004ValidationError(\n                  this._cmi_element + \".learner_response\",\n                  scorm2004_errors.TYPE_MISMATCH as number,\n                );\n              } else {\n                if (nodes[i] !== \"\" && response_type.unique) {\n                  for (let j = 0; j < i; j++) {\n                    if (nodes[i] === nodes[j]) {\n                      throw new Scorm2004ValidationError(\n                        this._cmi_element + \".learner_response\",\n                        scorm2004_errors.TYPE_MISMATCH as number,\n                      );\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          throw new Scorm2004ValidationError(\n            this._cmi_element + \".learner_response\",\n            scorm2004_errors.GENERAL_SET_FAILURE as number,\n          );\n        }\n\n        this._learner_response = learner_response;\n      } else {\n        throw new Scorm2004ValidationError(\n          this._cmi_element + \".learner_response\",\n          scorm2004_errors.TYPE_MISMATCH as number,\n        );\n      }\n    }\n  }\n\n  /**\n   * Getter for _result\n   * @return {string}\n   */\n  get result(): string {\n    return this._result;\n  }\n\n  /**\n   * Setter for _result\n   * @param {string} result\n   */\n  set result(result: string) {\n    if (check2004ValidFormat(this._cmi_element + \".result\", result, scorm2004_regex.CMIResult)) {\n      this._result = result;\n    }\n  }\n\n  /**\n   * Getter for _latency\n   * @return {string}\n   */\n  get latency(): string {\n    return this._latency;\n  }\n\n  /**\n   * Setter for _latency\n   * @param {string} latency\n   */\n  set latency(latency: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".latency\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".latency\", latency, scorm2004_regex.CMITimespan)\n      ) {\n        this._latency = latency;\n      }\n    }\n  }\n\n  /**\n   * Getter for _description\n   * @return {string}\n   */\n  get description(): string {\n    return this._description;\n  }\n\n  /**\n   * Setter for _description\n   * @param {string} description\n   */\n  set description(description: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".description\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".description\",\n          description,\n          scorm2004_regex.CMILangString250,\n          true,\n        )\n      ) {\n        this._description = description;\n      }\n    }\n  }\n\n  // noinspection JSUnusedGlobalSymbols\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      type: string,\n   *      objectives: CMIArray,\n   *      timestamp: string,\n   *      correct_responses: CMIArray,\n   *      weighting: string,\n   *      learner_response: string,\n   *      result: string,\n   *      latency: string,\n   *      description: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    type: string;\n    objectives: CMIArray;\n    timestamp: string;\n    correct_responses: CMIArray;\n    weighting: string;\n    learner_response: string;\n    result: string;\n    latency: string;\n    description: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      type: this.type,\n      objectives: this.objectives,\n      timestamp: this.timestamp,\n      weighting: this.weighting,\n      learner_response: this.learner_response,\n      result: this.result,\n      latency: this.latency,\n      description: this.description,\n      correct_responses: this.correct_responses,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.objectives.n object\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  private _id = \"\";\n\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n.objectives.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._id = \"\";\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Helper: strip the square-bracket notation (e.g. \"[,]\") down to the character (\",\")\n */\nfunction stripBrackets(delim: string): string {\n  return delim.replace(/[[\\]]/g, \"\");\n}\n\n// Helper to escape a string for use in a RegExp\nfunction escapeRegex(s: string): string {\n  // Only , and . are expected, but escape any regex special chars for safety\n  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\n\n/**\n * Split on unescaped delimiter and unescape the delimiter in resulting parts.\n * @param text - the input string\n * @param delim - the delimiter character, e.g. ',' or '.'\n */\nfunction splitUnescaped(text: string, delim: string): string[] {\n  const reDelim = escapeRegex(delim);\n  const splitRe = new RegExp(`(?<!\\\\\\\\)${reDelim}`, \"g\");\n  const unescapeRe = new RegExp(`\\\\\\\\${reDelim}`, \"g\");\n  return text.split(splitRe).map((part) => part.replace(unescapeRe, delim));\n}\n\n/**\n * Helper: validate a `pattern` string against its SCORM definition\n */\nfunction validatePattern(type: string, pattern: string, responseDef: ResponseType) {\n  // Reject patterns with leading or trailing whitespace\n  if (pattern.trim() !== pattern) {\n    throw new Scorm2004ValidationError(\n      \"cmi.interactions.n.correct_responses.n.pattern\",\n      scorm2004_errors.TYPE_MISMATCH as number,\n    );\n  }\n\n  // Reject any nodes with leading/trailing whitespace around tokens\n  const subDelim1 = responseDef.delimiter ? stripBrackets(responseDef.delimiter) : null;\n  const rawNodes = subDelim1 ? splitUnescaped(pattern, subDelim1) : [pattern];\n  for (const raw of rawNodes) {\n    if (raw.trim() !== raw) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n  }\n\n  // Allow empty fill-in patterns\n  if (type === \"fill-in\" && pattern === \"\") {\n    return;\n  }\n  // Split into nodes on the primary delimiter (if any)\n  const delim1 = responseDef.delimiter ? stripBrackets(responseDef.delimiter) : null;\n  let nodes: string[];\n  if (delim1) {\n    nodes = splitUnescaped(pattern, delim1);\n  } else {\n    nodes = [pattern];\n  }\n\n  // If no primary delimiter but pattern contains comma, reject multiple entries\n  if (!responseDef.delimiter && pattern.includes(\",\")) {\n    throw new Scorm2004ValidationError(\n      \"cmi.interactions.n.correct_responses.n.pattern\",\n      scorm2004_errors.TYPE_MISMATCH as number,\n    );\n  }\n\n  // Enforce uniqueness or disallow duplicates if required\n  if (responseDef.unique || responseDef.duplicate === false) {\n    const seen = new Set(nodes);\n    if (seen.size !== nodes.length) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n  }\n\n  // Must have at least 1 node, and no more than max\n  if (nodes.length === 0 || nodes.length > responseDef.max) {\n    throw new Scorm2004ValidationError(\n      \"cmi.interactions.n.correct_responses.n.pattern\",\n      scorm2004_errors.GENERAL_SET_FAILURE as number,\n    );\n  }\n\n  const fmt1 = new RegExp(responseDef.format);\n  const fmt2 = responseDef.format2 ? new RegExp(responseDef.format2) : null;\n\n  const checkSingle = (value: string) => {\n    if (!fmt1.test(value)) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n  };\n\n  const checkPair = (value: string, delimBracketed?: string) => {\n    if (!delimBracketed) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    const delim = stripBrackets(delimBracketed);\n    const parts = value\n      .split(new RegExp(`(?<!\\\\\\\\)${escapeRegex(delim)}`, \"g\"))\n      .map((n) => n.replace(new RegExp(`\\\\\\\\${escapeRegex(delim)}`, \"g\"), delim));\n    if (parts.length !== 2 || parts[0] === \"\" || parts[1] === \"\") {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    // test both parts\n    if (\n      (parts[0] !== undefined && !fmt1.test(parts[0])) ||\n      (fmt2 && parts[1] !== undefined && !fmt2.test(parts[1]))\n    ) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n  };\n\n  for (const node of nodes) {\n    switch (type) {\n      case \"numeric\": {\n        // 1 or 2 numeric values separated by \":\"\n        const numDelim = responseDef.delimiter ? stripBrackets(responseDef.delimiter) : \":\";\n        const nums = node.split(numDelim);\n        if (nums.length < 1 || nums.length > 2) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        nums.forEach(checkSingle);\n        break;\n      }\n\n      case \"performance\": {\n        // split into parts on unescaped dot\n        const delimBracketed = responseDef.delimiter2;\n        if (!delimBracketed) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        const delim = stripBrackets(delimBracketed);\n        // split into parts on unescaped dot\n        const allParts = splitUnescaped(node, delim);\n        if (!node.includes(\":\") && allParts.length !== 2) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        // use splitUnescaped to get [part1, part2]\n        const [part1, part2] = splitUnescaped(node, delim);\n        // Validate non-empty\n        if (part1 === \"\" || part2 === \"\" || part1 === part2) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        // part1 against format1\n        if (part1 === undefined || !fmt1.test(part1)) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        // part2 against format2\n        if (fmt2 && part2 !== undefined && !fmt2.test(part2)) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        break;\n      }\n\n      default:\n        if (responseDef.delimiter2) {\n          // matching and other two-part types\n          checkPair(node, responseDef.delimiter2);\n        } else {\n          // simple single-value types (true-false, choice, fill-in, etc.)\n          checkSingle(node);\n        }\n    }\n  }\n}\n\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  private _pattern = \"\";\n  private readonly _interactionType?: string | undefined;\n\n  /**\n   * Constructor for cmi.interactions.n.correct_responses.n\n   * @param interactionType The type of interaction (e.g. \"numeric\", \"choice\", etc.)\n   */\n  constructor(interactionType?: string) {\n    super(\"cmi.interactions.n.correct_responses.n\");\n    this._interactionType = interactionType;\n  }\n\n  override reset() {\n    this._initialized = false;\n    this._pattern = \"\";\n  }\n\n  get pattern(): string {\n    return this._pattern;\n  }\n\n  set pattern(pattern: string) {\n    // Allow empty fill-in patterns\n    if (this._interactionType === \"fill-in\" && pattern === \"\") {\n      this._pattern = \"\";\n      return;\n    }\n    // 1) Basic SCORM‐pattern format check\n    if (\n      !check2004ValidFormat(this._cmi_element + \".pattern\", pattern, scorm2004_regex.CMIFeedback)\n    ) {\n      return;\n    }\n\n    // 2) If we know the interaction type, run the detailed validator\n    if (this._interactionType) {\n      const responseDef = CorrectResponses[this._interactionType];\n      if (responseDef) {\n        // Skip detailed validation for matching when pattern contains escaped comma or dot\n        if (this._interactionType === \"matching\" && /\\\\[.,]/.test(pattern)) {\n          // accept escaped comma or dot patterns without further validation\n        } else {\n          validatePattern(this._interactionType, pattern, responseDef);\n        }\n      }\n    }\n\n    // 3) Finally, set\n    this._pattern = pattern;\n  }\n\n  toJSON(): { pattern: string } {\n    this.jsonString = true;\n    const result = { pattern: this.pattern };\n    this.jsonString = false;\n    return result;\n  }\n}\n","/**\n * Class for SCORM 2004's cmi *.score object\n */\nimport { CMIScore } from \"../common/score\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { ScoreObject } from \"../../types/api_types\";\n\nexport class Scorm2004CMIScore extends CMIScore {\n  private _scaled = \"\";\n\n  /**\n   * Constructor for cmi *.score\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.score\",\n      score_children: scorm2004_constants.score_children,\n      max: \"\",\n      invalidErrorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      invalidTypeCode: scorm2004_errors.TYPE_MISMATCH as number,\n      invalidRangeCode: scorm2004_errors.VALUE_OUT_OF_RANGE as number,\n      decimalRegex: scorm2004_regex.CMIDecimal,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n    this._scaled = \"\";\n    this._raw = \"\";\n    this._min = \"\";\n    this._max = \"\";\n  }\n\n  /**\n   * Getter for _scaled\n   * @return {string}\n   */\n  get scaled(): string {\n    return this._scaled;\n  }\n\n  /**\n   * Setter for _scaled\n   * @param {string} scaled\n   */\n  set scaled(scaled: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".scaled\", scaled, scorm2004_regex.CMIDecimal) &&\n      check2004ValidRange(this._cmi_element + \".scaled\", scaled, scorm2004_regex.scaled_range)\n    ) {\n      this._scaled = scaled;\n    }\n  }\n\n  override getScoreObject(): ScoreObject {\n    const scoreObject = super.getScoreObject();\n\n    if (!Number.isNaN(Number.parseFloat(this.scaled))) {\n      scoreObject.scaled = Number.parseFloat(this.scaled);\n    }\n\n    return scoreObject;\n  }\n\n  /**\n   * toJSON for cmi *.score\n   *\n   * @return {\n   *    {\n   *      scaled: string,\n   *      raw: string,\n   *      min: string,\n   *      max: string\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    scaled: string;\n    raw: string;\n    min: string;\n    max: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      scaled: this.scaled,\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_lms object\n * @extends CMIArray\n */\nexport class CMICommentsFromLMS extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_lms Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.comments_from_lms\",\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner object\n */\n\nexport class CMICommentsFromLearner extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_learner Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.comments_from_learner\",\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner.n and cmi.comments_from_lms.n object\n */\n\nexport class CMICommentsObject extends BaseCMI {\n  private _comment = \"\";\n  private _location = \"\";\n  private _timestamp = \"\";\n  private readonly _readOnlyAfterInit: boolean;\n\n  /**\n   * Constructor for cmi.comments_from_learner.n and cmi.comments_from_lms.n\n   * @param {boolean} readOnlyAfterInit\n   */\n  constructor(readOnlyAfterInit: boolean = false) {\n    super(\"cmi.comments_from_learner.n\");\n    this._comment = \"\";\n    this._location = \"\";\n    this._timestamp = \"\";\n    this._readOnlyAfterInit = readOnlyAfterInit;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _comment\n   * @return {string}\n   */\n  get comment(): string {\n    return this._comment;\n  }\n\n  /**\n   * Setter for _comment\n   * @param {string} comment\n   */\n  set comment(comment: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".comment\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".comment\",\n          comment,\n          scorm2004_regex.CMILangString4000,\n          true,\n        )\n      ) {\n        this._comment = comment;\n      }\n    }\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".location\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".location\",\n          location,\n          scorm2004_regex.CMIString250,\n        )\n      ) {\n        this._location = location;\n      }\n    }\n  }\n\n  /**\n   * Getter for _timestamp\n   * @return {string}\n   */\n  get timestamp(): string {\n    return this._timestamp;\n  }\n\n  /**\n   * Setter for _timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".timestamp\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".timestamp\", timestamp, scorm2004_regex.CMITime)\n      ) {\n        this._timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.comments_from_learner.n object\n   * @return {\n   *    {\n   *      comment: string,\n   *      location: string,\n   *      timestamp: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    comment: string;\n    location: string;\n    timestamp: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      comment: this.comment,\n      location: this.location,\n      timestamp: this.timestamp,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { Scorm2004CMIScore } from \"./score\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\n\n/**\n * Class representing SCORM 2004's `cmi.objectives` object\n * @extends CMIArray\n */\nexport class CMIObjectives extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives` Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.objectives\",\n      children: scorm2004_constants.objectives_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n\n  /**\n   * Find an objective by its ID\n   */\n  public findObjectiveById(id: string): CMIObjectivesObject | undefined {\n    return this.childArray.find((objective) => objective.id === id);\n  }\n\n  /**\n   * Find objective by its index\n   */\n  public findObjectiveByIndex(index: number): CMIObjectivesObject {\n    return this.childArray[index];\n  }\n\n  /**\n   * Set an objective at the given index\n   */\n  public setObjectiveByIndex(index: number, objective: CMIObjectivesObject) {\n    this.childArray[index] = objective;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.objectives.n object\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  private _id = \"\";\n  private _success_status = \"unknown\";\n  private _completion_status = \"unknown\";\n  private _progress_measure = \"\";\n  private _description = \"\";\n\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super(\"cmi.objectives.n\");\n    this.score = new Scorm2004CMIScore();\n  }\n\n  override reset() {\n    this._initialized = false;\n  }\n\n  public score: Scorm2004CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this._success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".success_status\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".success_status\",\n          success_status,\n          scorm2004_regex.CMISStatus,\n        )\n      ) {\n        this._success_status = success_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this._completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".completion_status\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".completion_status\",\n          completion_status,\n          scorm2004_regex.CMICStatus,\n        )\n      ) {\n        this._completion_status = completion_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this._progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".progress_measure\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".progress_measure\",\n          progress_measure,\n          scorm2004_regex.CMIDecimal,\n        ) &&\n        check2004ValidRange(\n          this._cmi_element + \".progress_measure\",\n          progress_measure,\n          scorm2004_regex.progress_range,\n        )\n      ) {\n        this._progress_measure = progress_measure;\n      }\n    }\n  }\n\n  /**\n   * Getter for _description\n   * @return {string}\n   */\n  get description(): string {\n    return this._description;\n  }\n\n  /**\n   * Setter for _description\n   * @param {string} description\n   */\n  set description(description: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".description\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".description\",\n          description,\n          scorm2004_regex.CMILangString250,\n          true,\n        )\n      ) {\n        this._description = description;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      success_status: string,\n   *      completion_status: string,\n   *      progress_measure: string,\n   *      description: string,\n   *      score: Scorm2004CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    success_status: string;\n    completion_status: string;\n    progress_measure: string;\n    description: string;\n    score: Scorm2004CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      success_status: this.success_status,\n      completion_status: this.completion_status,\n      progress_measure: this.progress_measure,\n      description: this.description,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n\n  /**\n   * Populate this objective from a plain object\n   * @param {any} data\n   */\n  fromJSON(data: any): void {\n    if (!data || typeof data !== \"object\") return;\n    if (typeof data.id === \"string\") this.id = data.id;\n    if (typeof data.success_status === \"string\") this.success_status = data.success_status;\n    if (typeof data.completion_status === \"string\") this.completion_status = data.completion_status;\n    if (typeof data.progress_measure !== \"undefined\") this.progress_measure = String(data.progress_measure);\n    if (typeof data.description === \"string\") this.description = data.description;\n    if (data.score && typeof data.score === \"object\") {\n      if (typeof data.score.scaled !== \"undefined\") this.score.scaled = String(data.score.scaled);\n      if (typeof data.score.raw !== \"undefined\") this.score.raw = String(data.score.raw);\n      if (typeof data.score.min !== \"undefined\") this.score.min = String(data.score.min);\n      if (typeof data.score.max !== \"undefined\") this.score.max = String(data.score.max);\n    }\n  }\n}\n","/**\n * Class representing metadata properties for SCORM 2004's cmi object\n */\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing metadata properties for SCORM 2004's cmi object\n */\nexport class CMIMetadata extends BaseCMI {\n  private __version = \"1.0\";\n  private __children = scorm2004_constants.cmi_children;\n\n  /**\n   * Constructor for CMIMetadata\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   */\n  get _version(): string {\n    return this.__version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version: string) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._version\",\n      scorm2004_errors.READ_ONLY_ELEMENT as number,\n    );\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {number} _children\n   */\n  set _children(_children: number) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._children\",\n      scorm2004_errors.READ_ONLY_ELEMENT as number,\n    );\n  }\n\n  /**\n   * Reset the metadata properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // No need to reset __version and __children as they are constants\n  }\n}\n","/**\n * Class representing learner properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing learner properties for SCORM 2004's cmi object\n */\nexport class CMILearner extends BaseCMI {\n  private _learner_id = \"\";\n  private _learner_name = \"\";\n\n  /**\n   * Constructor for CMILearner\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _learner_id\n   * @return {string}\n   */\n  get learner_id(): string {\n    return this._learner_id;\n  }\n\n  /**\n   * Setter for _learner_id. Can only be called before initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_id\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._learner_id = learner_id;\n    }\n  }\n\n  /**\n   * Getter for _learner_name\n   * @return {string}\n   */\n  get learner_name(): string {\n    return this._learner_name;\n  }\n\n  /**\n   * Setter for _learner_name. Can only be called before initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_name\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._learner_name = learner_name;\n    }\n  }\n\n  /**\n   * Reset the learner properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset learner_id and learner_name as they are read-only after initialization\n  }\n}\n","/**\n * Class representing status properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\n\n/**\n * Class representing status properties for SCORM 2004's cmi object\n */\nexport class CMIStatus extends BaseCMI {\n  private _completion_status = \"unknown\";\n  private _success_status = \"unknown\";\n  private _progress_measure = \"\";\n\n  /**\n   * Constructor for CMIStatus\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this._completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".completion_status\",\n        completion_status,\n        scorm2004_regex.CMICStatus,\n      )\n    ) {\n      this._completion_status = completion_status;\n    }\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this._success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".success_status\",\n        success_status,\n        scorm2004_regex.CMISStatus,\n      )\n    ) {\n      this._success_status = success_status;\n    }\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this._progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".progress_measure\",\n        progress_measure,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".progress_measure\",\n        progress_measure,\n        scorm2004_regex.progress_range,\n      )\n    ) {\n      this._progress_measure = progress_measure;\n    }\n  }\n\n  /**\n   * Reset the status properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._completion_status = \"unknown\";\n    this._success_status = \"unknown\";\n    this._progress_measure = \"\";\n  }\n}\n","/**\n * Class representing session properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\nimport * as Util from \"../../utilities\";\n\n/**\n * Class representing session properties for SCORM 2004's cmi object\n */\nexport class CMISession extends BaseCMI {\n  private _entry = \"\";\n  private _exit = \"\";\n  private _session_time = \"PT0H0M0S\";\n  private _total_time = \"\";\n\n  /**\n   * Constructor for CMISession\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this._entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".entry\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._entry = entry;\n    }\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    if (!this.jsonString) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exit\",\n        scorm2004_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    if (check2004ValidFormat(this._cmi_element + \".exit\", exit, scorm2004_regex.CMIExit, true)) {\n      this._exit = exit;\n    }\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    if (!this.jsonString) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".session_time\",\n        scorm2004_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".session_time\",\n        session_time,\n        scorm2004_regex.CMITimespan,\n      )\n    ) {\n      this._session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this._total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".total_time\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._total_time = total_time;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime(start_time: number | undefined): string {\n    let sessionTime = this._session_time;\n    if (typeof start_time !== \"undefined\" && start_time !== null) {\n      const seconds = new Date().getTime() - start_time;\n      sessionTime = Util.getSecondsAsISODuration(seconds / 1000);\n    }\n\n    return Util.addTwoDurations(this._total_time, sessionTime, scorm2004_regex.CMITimespan);\n  }\n\n  /**\n   * Reset the session properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._entry = \"\";\n    this._exit = \"\";\n    this._session_time = \"PT0H0M0S\";\n    // Don't reset total_time as it's read-only after initialization\n  }\n}\n","/**\n * Class representing content properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\n\n/**\n * Class representing content properties for SCORM 2004's cmi object\n */\nexport class CMIContent extends BaseCMI {\n  private _location = \"\";\n  private _launch_data = \"\";\n  private _suspend_data = \"\";\n\n  /**\n   * Constructor for CMIContent\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".location\", location, scorm2004_regex.CMIString1000)\n    ) {\n      this._location = location;\n    }\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this._launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".launch_data\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._launch_data = launch_data;\n    }\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this._suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".suspend_data\",\n        suspend_data,\n        scorm2004_regex.CMIString64000,\n        true,\n      )\n    ) {\n      this._suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Reset the content properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._location = \"\";\n    // Don't reset launch_data as it's read-only after initialization\n    this._suspend_data = \"\";\n  }\n}\n","/**\n * Class representing settings properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing settings properties for SCORM 2004's cmi object\n */\nexport class CMISettings extends BaseCMI {\n  private _credit = \"credit\";\n  private _mode = \"normal\";\n  private _time_limit_action = \"continue,no message\";\n  private _max_time_allowed = \"\";\n\n  /**\n   * Constructor for CMISettings\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this._credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".credit\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._credit = credit;\n    }\n  }\n\n  /**\n   * Getter for _mode\n   * @return {string}\n   */\n  get mode(): string {\n    return this._mode;\n  }\n\n  /**\n   * Setter for _mode. Can only be called before initialization.\n   * @param {string} mode\n   */\n  set mode(mode: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".mode\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._mode = mode;\n    }\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this._time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".time_limit_action\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._time_limit_action = time_limit_action;\n    }\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this._max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".max_time_allowed\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._max_time_allowed = max_time_allowed;\n    }\n  }\n\n  /**\n   * Reset the settings properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset these properties as they are read-only after initialization\n  }\n}\n","/**\n * Class representing threshold properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing threshold properties for SCORM 2004's cmi object\n */\nexport class CMIThresholds extends BaseCMI {\n  private _scaled_passing_score = \"\";\n  private _completion_threshold = \"\";\n\n  /**\n   * Constructor for CMIThresholds\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score(): string {\n    return this._scaled_passing_score;\n  }\n\n  /**\n   * Setter for _scaled_passing_score. Can only be called before initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".scaled_passing_score\",\n        scorm2004_errors.READ_ONLY_ELEMENT ?? 404,\n      );\n    } else {\n      this._scaled_passing_score = scaled_passing_score;\n    }\n  }\n\n  /**\n   * Getter for _completion_threshold\n   * @return {string}\n   */\n  get completion_threshold(): string {\n    return this._completion_threshold;\n  }\n\n  /**\n   * Setter for _completion_threshold. Can only be called before initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".completion_threshold\",\n        scorm2004_errors.READ_ONLY_ELEMENT ?? 404,\n      );\n    } else {\n      this._completion_threshold = completion_threshold;\n    }\n  }\n\n  /**\n   * Reset the threshold properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset these properties as they are read-only after initialization\n  }\n}\n","import { BaseRootCMI } from \"../common/base_cmi\";\nimport { CMILearnerPreference } from \"./learner_preference\";\nimport { CMIInteractions } from \"./interactions\";\nimport { Scorm2004CMIScore } from \"./score\";\nimport { CMICommentsFromLearner, CMICommentsFromLMS } from \"./comments\";\nimport { CMIObjectives } from \"./objectives\";\nimport { CMIMetadata } from \"./metadata\";\nimport { CMILearner } from \"./learner\";\nimport { CMIStatus } from \"./status\";\nimport { CMISession } from \"./session\";\nimport { CMIContent } from \"./content\";\nimport { CMISettings } from \"./settings\";\nimport { CMIThresholds } from \"./thresholds\";\n\n/**\n * Class representing cmi object for SCORM 2004\n */\nexport class CMI extends BaseRootCMI {\n  /**\n   * Constructor for the SCORM 2004 cmi object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean = false) {\n    super(\"cmi\");\n    this.metadata = new CMIMetadata();\n    this.learner = new CMILearner();\n    this.status = new CMIStatus();\n    this.session = new CMISession();\n    this.content = new CMIContent();\n    this.settings = new CMISettings();\n    this.thresholds = new CMIThresholds();\n    this.learner_preference = new CMILearnerPreference();\n    this.score = new Scorm2004CMIScore();\n    this.comments_from_learner = new CMICommentsFromLearner();\n    this.comments_from_lms = new CMICommentsFromLMS();\n    this.interactions = new CMIInteractions();\n    this.objectives = new CMIObjectives();\n    if (initialized) this.initialize();\n  }\n\n  // New component classes\n  private metadata: CMIMetadata;\n  private learner: CMILearner;\n  private status: CMIStatus;\n  private session: CMISession;\n  private content: CMIContent;\n  private settings: CMISettings;\n  private thresholds: CMIThresholds;\n\n  // Original complex objects\n  public learner_preference: CMILearnerPreference;\n  public score: Scorm2004CMIScore;\n  public comments_from_learner: CMICommentsFromLearner;\n  public comments_from_lms: CMICommentsFromLMS;\n  public interactions: CMIInteractions;\n  public objectives: CMIObjectives;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    // Initialize new component classes\n    this.metadata?.initialize();\n    this.learner?.initialize();\n    this.status?.initialize();\n    this.session?.initialize();\n    this.content?.initialize();\n    this.settings?.initialize();\n    this.thresholds?.initialize();\n\n    // Initialize original complex objects\n    this.learner_preference?.initialize();\n    this.score?.initialize();\n    this.comments_from_learner?.initialize();\n    this.comments_from_lms?.initialize();\n    this.interactions?.initialize();\n    this.objectives?.initialize();\n  }\n\n  /**\n   * Called when API is moving to another SCO\n   */\n  reset() {\n    this._initialized = false;\n\n    // Reset new component classes\n    this.metadata?.reset();\n    this.learner?.reset();\n    this.status?.reset();\n    this.session?.reset();\n    this.content?.reset();\n    this.settings?.reset();\n    this.thresholds?.reset();\n\n    // Reset original complex objects\n    this.objectives?.reset(false);\n    this.interactions?.reset(true);\n    this.score?.reset();\n    this.comments_from_learner?.reset();\n    this.comments_from_lms?.reset();\n    this.learner_preference?.reset();\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   * @private\n   */\n  get _version(): string {\n    return this.metadata._version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   * @private\n   */\n  set _version(_version: string) {\n    this.metadata._version = _version;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.metadata._children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {number} _children\n   * @private\n   */\n  set _children(_children: number) {\n    this.metadata._children = _children;\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this.status.completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    this.status.completion_status = completion_status;\n  }\n\n  /**\n   * Getter for _completion_threshold\n   * @return {string}\n   */\n  get completion_threshold(): string {\n    return this.thresholds.completion_threshold;\n  }\n\n  /**\n   * Setter for _completion_threshold. Can only be called before initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold: string) {\n    this.thresholds.completion_threshold = completion_threshold;\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this.settings.credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    this.settings.credit = credit;\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this.session.entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    this.session.entry = entry;\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    this.session.jsonString = this.jsonString;\n    return this.session.exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    this.session.exit = exit;\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this.content.launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    this.content.launch_data = launch_data;\n  }\n\n  /**\n   * Getter for _learner_id\n   * @return {string}\n   */\n  get learner_id(): string {\n    return this.learner.learner_id;\n  }\n\n  /**\n   * Setter for _learner_id. Can only be called before initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id: string) {\n    this.learner.learner_id = learner_id;\n  }\n\n  /**\n   * Getter for _learner_name\n   * @return {string}\n   */\n  get learner_name(): string {\n    return this.learner.learner_name;\n  }\n\n  /**\n   * Setter for _learner_name. Can only be called before initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name: string) {\n    this.learner.learner_name = learner_name;\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this.content.location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    this.content.location = location;\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this.settings.max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    this.settings.max_time_allowed = max_time_allowed;\n  }\n\n  /**\n   * Getter for _mode\n   * @return {string}\n   */\n  get mode(): string {\n    return this.settings.mode;\n  }\n\n  /**\n   * Setter for _mode. Can only be called before initialization.\n   * @param {string} mode\n   */\n  set mode(mode: string) {\n    this.settings.mode = mode;\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this.status.progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    this.status.progress_measure = progress_measure;\n  }\n\n  /**\n   * Getter for _scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score(): string {\n    return this.thresholds.scaled_passing_score;\n  }\n\n  /**\n   * Setter for _scaled_passing_score. Can only be called before initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score: string) {\n    this.thresholds.scaled_passing_score = scaled_passing_score;\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    this.session.jsonString = this.jsonString;\n    return this.session.session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    this.session.session_time = session_time;\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this.status.success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    this.status.success_status = success_status;\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this.content.suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    this.content.suspend_data = suspend_data;\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this.settings.time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    this.settings.time_limit_action = time_limit_action;\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this.session.total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    this.session.total_time = total_time;\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime(): string {\n    return this.session.getCurrentTotalTime(this.start_time);\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      comments_from_learner: CMICommentsFromLearner,\n   *      comments_from_lms: CMICommentsFromLMS,\n   *      completion_status: string,\n   *      completion_threshold: string,\n   *      credit: string,\n   *      entry: string,\n   *      exit: string,\n   *      interactions: CMIInteractions,\n   *      launch_data: string,\n   *      learner_id: string,\n   *      learner_name: string,\n   *      learner_preference: CMILearnerPreference,\n   *      location: string,\n   *      max_time_allowed: string,\n   *      mode: string,\n   *      objectives: CMIObjectives,\n   *      progress_measure: string,\n   *      scaled_passing_score: string,\n   *      score: Scorm2004CMIScore,\n   *      session_time: string,\n   *      success_status: string,\n   *      suspend_data: string,\n   *      time_limit_action: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    comments_from_learner: CMICommentsFromLearner;\n    comments_from_lms: CMICommentsFromLMS;\n    completion_status: string;\n    completion_threshold: string;\n    credit: string;\n    entry: string;\n    exit: string;\n    interactions: CMIInteractions;\n    launch_data: string;\n    learner_id: string;\n    learner_name: string;\n    learner_preference: CMILearnerPreference;\n    location: string;\n    max_time_allowed: string;\n    mode: string;\n    objectives: CMIObjectives;\n    progress_measure: string;\n    scaled_passing_score: string;\n    score: Scorm2004CMIScore;\n    session_time: string;\n    success_status: string;\n    suspend_data: string;\n    time_limit_action: string;\n  } {\n    this.jsonString = true;\n\n    // Set jsonString flag on component classes that need it\n    this.session.jsonString = true;\n\n    const result = {\n      comments_from_learner: this.comments_from_learner,\n      comments_from_lms: this.comments_from_lms,\n      completion_status: this.completion_status,\n      completion_threshold: this.completion_threshold,\n      credit: this.credit,\n      entry: this.entry,\n      exit: this.exit,\n      interactions: this.interactions,\n      launch_data: this.launch_data,\n      learner_id: this.learner_id,\n      learner_name: this.learner_name,\n      learner_preference: this.learner_preference,\n      location: this.location,\n      max_time_allowed: this.max_time_allowed,\n      mode: this.mode,\n      objectives: this.objectives,\n      progress_measure: this.progress_measure,\n      scaled_passing_score: this.scaled_passing_score,\n      score: this.score,\n      session_time: this.session_time,\n      success_status: this.success_status,\n      suspend_data: this.suspend_data,\n      time_limit_action: this.time_limit_action,\n    };\n\n    // Clean up jsonString flags\n    this.jsonString = false;\n    this.session.jsonString = false;\n\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { NAVBoolean } from \"../../constants/enums\";\nimport { CMIArray } from \"../common/array\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Sequencing } from \"./sequencing/sequencing\";\n\n/**\n * Class representing SCORM 2004's adl object\n */\nexport class ADL extends BaseCMI {\n  /**\n   * Constructor for adl\n   */\n  constructor() {\n    super(\"adl\");\n    this.nav = new ADLNav();\n    this.data = new ADLData();\n  }\n\n  public nav: ADLNav;\n  public data = new ADLData();\n  private _sequencing: Sequencing | null = null;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.nav?.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this.nav?.reset();\n  }\n\n  /**\n   * Getter for sequencing\n   * @return {Sequencing | null}\n   */\n  get sequencing(): Sequencing | null {\n    return this._sequencing;\n  }\n\n  /**\n   * Setter for sequencing\n   * @param {Sequencing | null} sequencing\n   */\n  set sequencing(sequencing: Sequencing | null) {\n    this._sequencing = sequencing;\n    if (sequencing) {\n      sequencing.adlNav = this.nav;\n      this.nav.sequencing = sequencing;\n    }\n  }\n\n  /**\n   * toJSON for adl\n   * @return {\n   *    {\n   *      nav: ADLNav,\n   *      data: ADLData\n   *    }\n   *  }\n   */\n  toJSON(): {\n    nav: ADLNav;\n    data: ADLData;\n  } {\n    this.jsonString = true;\n    const result = {\n      nav: this.nav,\n      data: this.data,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's `adl.nav` object\n */\n\nexport class ADLNav extends BaseCMI {\n  private _request = \"_none_\";\n  private _sequencing: Sequencing | null = null;\n\n  /**\n   * Constructor for `adl.nav`\n   */\n  constructor() {\n    super(\"adl.nav\");\n    this.request_valid = new ADLNavRequestValid();\n  }\n\n  public request_valid: ADLNavRequestValid;\n\n  /**\n   * Getter for sequencing\n   * @return {Sequencing | null}\n   */\n  get sequencing(): Sequencing | null {\n    return this._sequencing;\n  }\n\n  /**\n   * Setter for sequencing\n   * @param {Sequencing | null} sequencing\n   */\n  set sequencing(sequencing: Sequencing | null) {\n    this._sequencing = sequencing;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.request_valid?.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._request = \"_none_\";\n    if (this._sequencing) {\n      this._sequencing.adlNav = null;\n    }\n    this._sequencing = null;\n    this.request_valid?.reset();\n  }\n\n  /**\n   * Getter for _request\n   * @return {string}\n   */\n  get request(): string {\n    return this._request;\n  }\n\n  /**\n   * Setter for _request\n   * @param {string} request\n   */\n  set request(request: string) {\n    if (check2004ValidFormat(this._cmi_element + \".request\", request, scorm2004_regex.NAVEvent)) {\n      this._request = request;\n    }\n  }\n\n  /**\n   * toJSON for adl.nav\n   *\n   * @return {\n   *    {\n   *      request: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    request: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      request: this.request,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's `adl.data` object\n */\nexport class ADLData extends CMIArray {\n  constructor() {\n    super({\n      CMIElement: \"adl.data\",\n      children: scorm2004_constants.adl_data_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's adl.data.n object\n */\nexport class ADLDataObject extends BaseCMI {\n  private _id = \"\";\n  private _store = \"\";\n\n  constructor() {\n    super(\"adl.data.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _store\n   * @return {string}\n   */\n  get store(): string {\n    return this._store;\n  }\n\n  /**\n   * Setter for _store\n   * @param {string} store\n   */\n  set store(store: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".store\", store, scorm2004_regex.CMILangString4000)\n    ) {\n      this._store = store;\n    }\n  }\n\n  /**\n   * toJSON for adl.data.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      store: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    store: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this._id,\n      store: this._store,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl.nav.request_valid object\n */\n\nexport class ADLNavRequestValid extends BaseCMI {\n  private _continue = \"unknown\";\n  private _previous = \"unknown\";\n  private _choice: {\n    [key: string]: NAVBoolean;\n  } = {};\n  private _jump: {\n    [key: string]: NAVBoolean;\n  } = {};\n  private _exit = \"unknown\";\n  private _exitAll = \"unknown\";\n  private _abandon = \"unknown\";\n  private _abandonAll = \"unknown\";\n  private _suspendAll = \"unknown\";\n\n  /**\n   * Constructor for adl.nav.request_valid\n   */\n  constructor() {\n    super(\"adl.nav.request_valid\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._continue = \"unknown\";\n    this._previous = \"unknown\";\n    this._choice = {};\n    this._jump = {};\n    this._exit = \"unknown\";\n    this._exitAll = \"unknown\";\n    this._abandon = \"unknown\";\n    this._abandonAll = \"unknown\";\n    this._suspendAll = \"unknown\";\n  }\n\n  /**\n   * Getter for _continue\n   * @return {string}\n   */\n  get continue(): string {\n    return this._continue;\n  }\n\n  /**\n   * Setter for _continue. Just throws an error.\n   * @param {string} _continue\n   */\n  set continue(_continue: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".continue\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".continue\", _continue, scorm2004_regex.NAVBoolean)\n    ) {\n      this._continue = _continue;\n    }\n  }\n\n  /**\n   * Getter for _previous\n   * @return {string}\n   */\n  get previous(): string {\n    return this._previous;\n  }\n\n  /**\n   * Setter for _previous. Just throws an error.\n   * @param {string} _previous\n   */\n  set previous(_previous: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".previous\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".previous\", _previous, scorm2004_regex.NAVBoolean)\n    ) {\n      this._previous = _previous;\n    }\n  }\n\n  /**\n   * Getter for _choice\n   * @return {{ [key: string]: NAVBoolean }}\n   */\n  get choice(): { [key: string]: NAVBoolean } {\n    return this._choice;\n  }\n\n  /**\n   * Setter for _choice\n   * @param {{ [key: string]: string }} choice\n   */\n  set choice(choice: { [key: string]: string }) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".choice\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (typeof choice !== \"object\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".choice\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    for (const key in choice) {\n      if ({}.hasOwnProperty.call(choice, key)) {\n        if (\n          check2004ValidFormat(\n            this._cmi_element + \".choice.\" + key,\n            choice[key] || \"\",\n            scorm2004_regex.NAVBoolean,\n          ) &&\n          check2004ValidFormat(this._cmi_element + \".choice.\" + key, key, scorm2004_regex.NAVTarget)\n        ) {\n          // Convert string value to NAVBoolean enum value\n          const value = choice[key];\n          if (value === \"true\") {\n            this._choice[key] = NAVBoolean.TRUE;\n          } else if (value === \"false\") {\n            this._choice[key] = NAVBoolean.FALSE;\n          } else if (value === \"unknown\") {\n            this._choice[key] = NAVBoolean.UNKNOWN;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Getter for _jump\n   * @return {{ [key: string]: NAVBoolean }}\n   */\n  get jump(): { [key: string]: NAVBoolean } {\n    return this._jump;\n  }\n\n  /**\n   * Setter for _jump\n   * @param {{ [key: string]: string }} jump\n   */\n  set jump(jump: { [key: string]: string }) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".jump\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (typeof jump !== \"object\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".jump\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    for (const key in jump) {\n      if ({}.hasOwnProperty.call(jump, key)) {\n        if (\n          check2004ValidFormat(\n            this._cmi_element + \".jump.\" + key,\n            jump[key] || \"\",\n            scorm2004_regex.NAVBoolean,\n          ) &&\n          check2004ValidFormat(this._cmi_element + \".jump.\" + key, key, scorm2004_regex.NAVTarget)\n        ) {\n          // Convert string value to NAVBoolean enum value\n          const value = jump[key];\n          if (value === \"true\") {\n            this._jump[key] = NAVBoolean.TRUE;\n          } else if (value === \"false\") {\n            this._jump[key] = NAVBoolean.FALSE;\n          } else if (value === \"unknown\") {\n            this._jump[key] = NAVBoolean.UNKNOWN;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Getter for _exit\n   * @return {string}\n   */\n  get exit(): string {\n    return this._exit;\n  }\n\n  /**\n   * Setter for _exit. Just throws an error.\n   * @param {string} _exit\n   */\n  set exit(_exit: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exit\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".exit\", _exit, scorm2004_regex.NAVBoolean)\n    ) {\n      this._exit = _exit;\n    }\n  }\n\n  /**\n   * Getter for _exitAll\n   * @return {string}\n   */\n  get exitAll(): string {\n    return this._exitAll;\n  }\n\n  /**\n   * Setter for _exitAll. Just throws an error.\n   * @param {string} _exitAll\n   */\n  set exitAll(_exitAll: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exitAll\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".exitAll\", _exitAll, scorm2004_regex.NAVBoolean)\n    ) {\n      this._exitAll = _exitAll;\n    }\n  }\n\n  /**\n   * Getter for _abandon\n   * @return {string}\n   */\n  get abandon(): string {\n    return this._abandon;\n  }\n\n  /**\n   * Setter for _abandon. Just throws an error.\n   * @param {string} _abandon\n   */\n  set abandon(_abandon: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".abandon\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".abandon\", _abandon, scorm2004_regex.NAVBoolean)\n    ) {\n      this._abandon = _abandon;\n    }\n  }\n\n  /**\n   * Getter for _abandonAll\n   * @return {string}\n   */\n  get abandonAll(): string {\n    return this._abandonAll;\n  }\n\n  /**\n   * Setter for _abandonAll. Just throws an error.\n   * @param {string} _abandonAll\n   */\n  set abandonAll(_abandonAll: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".abandonAll\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".abandonAll\", _abandonAll, scorm2004_regex.NAVBoolean)\n    ) {\n      this._abandonAll = _abandonAll;\n    }\n  }\n\n  /**\n   * Getter for _suspendAll\n   * @return {string}\n   */\n  get suspendAll(): string {\n    return this._suspendAll;\n  }\n\n  /**\n   * Setter for _suspendAll. Just throws an error.\n   * @param {string} _suspendAll\n   */\n  set suspendAll(_suspendAll: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".suspendAll\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".suspendAll\", _suspendAll, scorm2004_regex.NAVBoolean)\n    ) {\n      this._suspendAll = _suspendAll;\n    }\n  }\n\n  /**\n   * toJSON for adl.nav.request_valid\n   *\n   * @return {\n   *    {\n   *      previous: string,\n   *      continue: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    previous: string;\n    continue: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      previous: this._previous,\n      continue: this._continue,\n      choice: this._choice,\n      jump: this._jump,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Enum for rule condition operators\n */\nexport enum RuleConditionOperator {\n  NOT = \"not\",\n  AND = \"and\",\n  OR = \"or\",\n}\n\n/**\n * Enum for rule condition types\n */\nexport enum RuleConditionType {\n  SATISFIED = \"satisfied\",\n  OBJECTIVE_STATUS_KNOWN = \"objectiveStatusKnown\",\n  OBJECTIVE_MEASURE_KNOWN = \"objectiveMeasureKnown\",\n  OBJECTIVE_MEASURE_GREATER_THAN = \"objectiveMeasureGreaterThan\",\n  OBJECTIVE_MEASURE_LESS_THAN = \"objectiveMeasureLessThan\",\n  COMPLETED = \"completed\",\n  PROGRESS_KNOWN = \"progressKnown\",\n  ATTEMPTED = \"attempted\",\n  ATTEMPT_LIMIT_EXCEEDED = \"attemptLimitExceeded\",\n  TIME_LIMIT_EXCEEDED = \"timeLimitExceeded\",\n  OUTSIDE_AVAILABLE_TIME_RANGE = \"outsideAvailableTimeRange\",\n  ALWAYS = \"always\",\n}\n\n/**\n * Enum for rule action types\n */\nexport enum RuleActionType {\n  SKIP = \"skip\",\n  DISABLED = \"disabled\",\n  HIDE_FROM_CHOICE = \"hideFromChoice\",\n  STOP_FORWARD_TRAVERSAL = \"stopForwardTraversal\",\n  EXIT_PARENT = \"exitParent\",\n  EXIT_ALL = \"exitAll\",\n  RETRY = \"retry\",\n  RETRY_ALL = \"retryAll\",\n  CONTINUE = \"continue\",\n  PREVIOUS = \"previous\",\n  EXIT = \"exit\",\n}\n\n/**\n * Class representing a sequencing rule condition\n */\nexport class RuleCondition extends BaseCMI {\n  private _condition: RuleConditionType = RuleConditionType.ALWAYS;\n  private _operator: RuleConditionOperator | null = null;\n  private _parameters: Map<string, any> = new Map();\n  // Optional, overridable provider for current time (LMS may set via SequencingService)\n  private static _now: () => Date = () => new Date();\n\n  /**\n   * Constructor for RuleCondition\n   * @param {RuleConditionType} condition - The condition type\n   * @param {RuleConditionOperator | null} operator - The operator (null for no operator)\n   * @param {Map<string, any>} parameters - Additional parameters for the condition\n   */\n  constructor(\n    condition: RuleConditionType = RuleConditionType.ALWAYS,\n    operator: RuleConditionOperator | null = null,\n    parameters: Map<string, any> = new Map(),\n  ) {\n    super(\"ruleCondition\");\n    this._condition = condition;\n    this._operator = operator;\n    this._parameters = parameters;\n  }\n\n  /**\n   * Allow integrators to override the clock used for time-based rules.\n   */\n  public static setNowProvider(now: () => Date) {\n    if (typeof now === \"function\") {\n      RuleCondition._now = now;\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._condition = RuleConditionType.ALWAYS;\n    this._operator = null;\n    this._parameters = new Map();\n  }\n\n  /**\n   * Getter for condition\n   * @return {RuleConditionType}\n   */\n  get condition(): RuleConditionType {\n    return this._condition;\n  }\n\n  /**\n   * Setter for condition\n   * @param {RuleConditionType} condition\n   */\n  set condition(condition: RuleConditionType) {\n    this._condition = condition;\n  }\n\n  /**\n   * Getter for operator\n   * @return {RuleConditionOperator | null}\n   */\n  get operator(): RuleConditionOperator | null {\n    return this._operator;\n  }\n\n  /**\n   * Setter for operator\n   * @param {RuleConditionOperator | null} operator\n   */\n  set operator(operator: RuleConditionOperator | null) {\n    this._operator = operator;\n  }\n\n  /**\n   * Getter for parameters\n   * @return {Map<string, any>}\n   */\n  get parameters(): Map<string, any> {\n    return this._parameters;\n  }\n\n  /**\n   * Setter for parameters\n   * @param {Map<string, any>} parameters\n   */\n  set parameters(parameters: Map<string, any>) {\n    this._parameters = parameters;\n  }\n\n  /**\n   * Evaluate the condition for an activity\n   * @param {Activity} activity - The activity to evaluate the condition for\n   * @return {boolean} - True if the condition is met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    let result;\n    switch (this._condition) {\n      case RuleConditionType.SATISFIED:\n        result = activity.successStatus === SuccessStatus.PASSED;\n        break;\n      case RuleConditionType.OBJECTIVE_STATUS_KNOWN:\n        // noinspection PointlessBooleanExpressionJS\n        result = !!activity.objectiveMeasureStatus;\n        break;\n      case RuleConditionType.OBJECTIVE_MEASURE_KNOWN:\n        // noinspection PointlessBooleanExpressionJS\n        result = !!activity.objectiveMeasureStatus;\n        break;\n      case RuleConditionType.OBJECTIVE_MEASURE_GREATER_THAN: {\n        const greaterThanValue = this._parameters.get(\"threshold\") || 0;\n        result =\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure > greaterThanValue;\n        break;\n      }\n      case RuleConditionType.OBJECTIVE_MEASURE_LESS_THAN: {\n        const lessThanValue = this._parameters.get(\"threshold\") || 0;\n        result =\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure < lessThanValue;\n        break;\n      }\n      case RuleConditionType.COMPLETED:\n        result = activity.isCompleted;\n        break;\n      case RuleConditionType.PROGRESS_KNOWN:\n        result = activity.completionStatus !== \"unknown\";\n        break;\n      case RuleConditionType.ATTEMPTED:\n        result = activity.attemptCount > 0;\n        break;\n      case RuleConditionType.ATTEMPT_LIMIT_EXCEEDED: {\n        const attemptLimit = this._parameters.get(\"attemptLimit\") || 0;\n        result = activity.attemptCount >= attemptLimit;\n        break;\n      }\n      case RuleConditionType.TIME_LIMIT_EXCEEDED:\n        result = this.evaluateTimeLimitExceeded(activity);\n        break;\n      case RuleConditionType.OUTSIDE_AVAILABLE_TIME_RANGE:\n        result = this.evaluateOutsideAvailableTimeRange(activity);\n        break;\n      case RuleConditionType.ALWAYS:\n        result = true;\n        break;\n      default:\n        result = false;\n        break;\n    }\n\n    if (this._operator === RuleConditionOperator.NOT) {\n      result = !result;\n    }\n\n    return result;\n  }\n\n  /**\n   * Evaluate if time limit has been exceeded\n   * @param {Activity} activity - The activity to evaluate\n   * @return {boolean}\n   * @private\n   */\n  private evaluateTimeLimitExceeded(activity: Activity): boolean {\n    const timeLimitDuration = activity.timeLimitDuration;\n    if (!timeLimitDuration) {\n      return false;\n    }\n\n    // Parse ISO 8601 duration to milliseconds\n    const durationMs = this.parseISO8601Duration(timeLimitDuration);\n    if (durationMs === 0) {\n      return false;\n    }\n\n    // Get current attempt duration\n    const attemptDuration = activity.attemptExperiencedDuration;\n    const attemptDurationMs = this.parseISO8601Duration(attemptDuration);\n\n    return attemptDurationMs > durationMs;\n  }\n\n  /**\n   * Evaluate if activity is outside available time range\n   * @param {Activity} activity - The activity to evaluate\n   * @return {boolean}\n   * @private\n   */\n  private evaluateOutsideAvailableTimeRange(activity: Activity): boolean {\n    const beginTime = activity.beginTimeLimit;\n    const endTime = activity.endTimeLimit;\n\n    if (!beginTime && !endTime) {\n      return false;\n    }\n\n    const now = RuleCondition._now();\n\n    if (beginTime) {\n      const beginDate = new Date(beginTime);\n      if (now < beginDate) {\n        return true;\n      }\n    }\n\n    if (endTime) {\n      const endDate = new Date(endTime);\n      if (now > endDate) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Parse ISO 8601 duration to milliseconds\n   * @param {string} duration - ISO 8601 duration string\n   * @return {number} - Duration in milliseconds\n   * @private\n   */\n  private parseISO8601Duration(duration: string): number {\n    const regex = /PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?/;\n    const matches = duration.match(regex);\n\n    if (!matches) {\n      return 0;\n    }\n\n    const hours = parseInt(matches[1] || \"0\", 10);\n    const minutes = parseInt(matches[2] || \"0\", 10);\n    const seconds = parseFloat(matches[3] || \"0\");\n\n    return (hours * 3600 + minutes * 60 + seconds) * 1000;\n  }\n\n  /**\n   * toJSON for RuleCondition\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      condition: this._condition,\n      operator: this._operator,\n      parameters: Object.fromEntries(this._parameters),\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a sequencing rule\n */\nexport class SequencingRule extends BaseCMI {\n  private _conditions: RuleCondition[] = [];\n  private _action: RuleActionType = RuleActionType.SKIP;\n  private _conditionCombination: string | RuleConditionOperator = RuleConditionOperator.AND;\n\n  /**\n   * Constructor for SequencingRule\n   * @param {RuleActionType} action - The action to take when the rule conditions are met\n   * @param {string | RuleConditionOperator} conditionCombination - How to combine multiple conditions (\"all\"/\"and\" or \"any\"/\"or\")\n   */\n  constructor(\n    action: RuleActionType = RuleActionType.SKIP,\n    conditionCombination: string | RuleConditionOperator = RuleConditionOperator.AND,\n  ) {\n    super(\"sequencingRule\");\n    this._action = action;\n    this._conditionCombination = conditionCombination;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._conditions = [];\n    this._action = RuleActionType.SKIP;\n    this._conditionCombination = RuleConditionOperator.AND;\n  }\n\n  /**\n   * Getter for conditions\n   * @return {RuleCondition[]}\n   */\n  get conditions(): RuleCondition[] {\n    return this._conditions;\n  }\n\n  /**\n   * Add a condition to the rule\n   * @param {RuleCondition} condition - The condition to add\n   */\n  addCondition(condition: RuleCondition): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(condition instanceof RuleCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    // Check if the condition is already in the array\n    if (!this._conditions.includes(condition)) {\n      this._conditions.push(condition);\n    }\n  }\n\n  /**\n   * Remove a condition from the rule\n   * @param {RuleCondition} condition - The condition to remove\n   * @return {boolean} - True if the condition was removed, false otherwise\n   */\n  removeCondition(condition: RuleCondition): boolean {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(condition instanceof RuleCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    const index = this._conditions.indexOf(condition);\n    if (index !== -1) {\n      this._conditions.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for action\n   * @return {RuleActionType}\n   */\n  get action(): RuleActionType {\n    return this._action;\n  }\n\n  /**\n   * Setter for action\n   * @param {RuleActionType} action\n   */\n  set action(action: RuleActionType) {\n    this._action = action;\n  }\n\n  /**\n   * Getter for conditionCombination\n   * @return {string | RuleConditionOperator}\n   */\n  get conditionCombination(): string | RuleConditionOperator {\n    return this._conditionCombination;\n  }\n\n  /**\n   * Setter for conditionCombination\n   * @param {string | RuleConditionOperator} conditionCombination\n   */\n  set conditionCombination(conditionCombination: string | RuleConditionOperator) {\n    this._conditionCombination = conditionCombination;\n  }\n\n  /**\n   * Evaluate the rule for an activity\n   * @param {Activity} activity - The activity to evaluate the rule for\n   * @return {boolean} - True if the rule conditions are met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    if (this._conditions.length === 0) {\n      return true;\n    }\n\n    if (\n      this._conditionCombination === \"all\" ||\n      this._conditionCombination === RuleConditionOperator.AND\n    ) {\n      return this._conditions.every((condition) => condition.evaluate(activity));\n    } else if (\n      this._conditionCombination === \"any\" ||\n      this._conditionCombination === RuleConditionOperator.OR\n    ) {\n      return this._conditions.some((condition) => condition.evaluate(activity));\n    }\n\n    return false;\n  }\n\n  /**\n   * toJSON for SequencingRule\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      conditions: this._conditions,\n      action: this._action,\n      conditionCombination: this._conditionCombination,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a collection of sequencing rules\n */\nexport class SequencingRules extends BaseCMI {\n  private _preConditionRules: SequencingRule[] = [];\n  private _exitConditionRules: SequencingRule[] = [];\n  private _postConditionRules: SequencingRule[] = [];\n\n  /**\n   * Constructor for SequencingRules\n   */\n  constructor() {\n    super(\"sequencingRules\");\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._preConditionRules = [];\n    this._exitConditionRules = [];\n    this._postConditionRules = [];\n  }\n\n  /**\n   * Getter for preConditionRules\n   * @return {SequencingRule[]}\n   */\n  get preConditionRules(): SequencingRule[] {\n    return this._preConditionRules;\n  }\n\n  /**\n   * Add a pre-condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addPreConditionRule(rule: SequencingRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".preConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._preConditionRules.push(rule);\n  }\n\n  /**\n   * Getter for exitConditionRules\n   * @return {SequencingRule[]}\n   */\n  get exitConditionRules(): SequencingRule[] {\n    return this._exitConditionRules;\n  }\n\n  /**\n   * Add an exit condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addExitConditionRule(rule: SequencingRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exitConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._exitConditionRules.push(rule);\n  }\n\n  /**\n   * Getter for postConditionRules\n   * @return {SequencingRule[]}\n   */\n  get postConditionRules(): SequencingRule[] {\n    return this._postConditionRules;\n  }\n\n  /**\n   * Add a post-condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addPostConditionRule(rule: SequencingRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".postConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._postConditionRules.push(rule);\n  }\n\n  /**\n   * Evaluate pre-condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluatePreConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._preConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Evaluate exit condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluateExitConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._exitConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Evaluate post-condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluatePostConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._postConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * toJSON for SequencingRules\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      preConditionRules: this._preConditionRules,\n      exitConditionRules: this._exitConditionRules,\n      postConditionRules: this._postConditionRules,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { CompletionStatus, SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Enum for rollup action types\n */\nexport enum RollupActionType {\n  SATISFIED = \"satisfied\",\n  NOT_SATISFIED = \"notSatisfied\",\n  COMPLETED = \"completed\",\n  INCOMPLETE = \"incomplete\",\n}\n\n/**\n * Enum for rollup condition types\n */\nexport enum RollupConditionType {\n  SATISFIED = \"satisfied\",\n  OBJECTIVE_STATUS_KNOWN = \"objectiveStatusKnown\",\n  OBJECTIVE_MEASURE_KNOWN = \"objectiveMeasureKnown\",\n  OBJECTIVE_MEASURE_GREATER_THAN = \"objectiveMeasureGreaterThan\",\n  OBJECTIVE_MEASURE_LESS_THAN = \"objectiveMeasureLessThan\",\n  COMPLETED = \"completed\",\n  PROGRESS_KNOWN = \"progressKnown\",\n  ATTEMPTED = \"attempted\",\n  NOT_ATTEMPTED = \"notAttempted\",\n  ALWAYS = \"always\",\n}\n\n/**\n * Enum for rollup consideration types\n */\nexport enum RollupConsiderationType {\n  ALL = \"all\",\n  ANY = \"any\",\n  NONE = \"none\",\n  AT_LEAST_COUNT = \"atLeastCount\",\n  AT_LEAST_PERCENT = \"atLeastPercent\",\n}\n\n/**\n * Class representing a rollup condition\n */\nexport class RollupCondition extends BaseCMI {\n  private _condition: RollupConditionType = RollupConditionType.ALWAYS;\n  private _parameters: Map<string, any> = new Map();\n\n  /**\n   * Constructor for RollupCondition\n   * @param {RollupConditionType} condition - The condition type\n   * @param {Map<string, any>} parameters - Additional parameters for the condition\n   */\n  constructor(\n    condition: RollupConditionType = RollupConditionType.ALWAYS,\n    parameters: Map<string, any> = new Map(),\n  ) {\n    super(\"rollupCondition\");\n    this._condition = condition;\n    this._parameters = parameters;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for condition\n   * @return {RollupConditionType}\n   */\n  get condition(): RollupConditionType {\n    return this._condition;\n  }\n\n  /**\n   * Setter for condition\n   * @param {RollupConditionType} condition\n   */\n  set condition(condition: RollupConditionType) {\n    this._condition = condition;\n  }\n\n  /**\n   * Getter for parameters\n   * @return {Map<string, any>}\n   */\n  get parameters(): Map<string, any> {\n    return this._parameters;\n  }\n\n  /**\n   * Setter for parameters\n   * @param {Map<string, any>} parameters\n   */\n  set parameters(parameters: Map<string, any>) {\n    this._parameters = parameters;\n  }\n\n  /**\n   * Evaluate the condition for an activity\n   * @param {Activity} activity - The activity to evaluate the condition for\n   * @return {boolean} - True if the condition is met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    switch (this._condition) {\n      case RollupConditionType.SATISFIED:\n        return activity.successStatus === SuccessStatus.PASSED;\n      case RollupConditionType.OBJECTIVE_STATUS_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RollupConditionType.OBJECTIVE_MEASURE_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RollupConditionType.OBJECTIVE_MEASURE_GREATER_THAN: {\n        const greaterThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure > greaterThanValue\n        );\n      }\n      case RollupConditionType.OBJECTIVE_MEASURE_LESS_THAN: {\n        const lessThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure < lessThanValue\n        );\n      }\n      case RollupConditionType.COMPLETED:\n        return activity.isCompleted;\n      case RollupConditionType.PROGRESS_KNOWN:\n        return activity.completionStatus !== CompletionStatus.UNKNOWN;\n      case RollupConditionType.ATTEMPTED:\n        return activity.attemptCount > 0;\n      case RollupConditionType.NOT_ATTEMPTED:\n        return activity.attemptCount === 0;\n      case RollupConditionType.ALWAYS:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RollupCondition\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      condition: this._condition,\n      parameters: Object.fromEntries(this._parameters),\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a rollup rule\n */\nexport class RollupRule extends BaseCMI {\n  private _conditions: RollupCondition[] = [];\n  private _action: RollupActionType = RollupActionType.SATISFIED;\n  private _consideration: RollupConsiderationType = RollupConsiderationType.ALL;\n  private _minimumCount: number = 0;\n  private _minimumPercent: number = 0;\n\n  /**\n   * Constructor for RollupRule\n   * @param {RollupActionType} action - The action to take when the rule conditions are met\n   * @param {RollupConsiderationType} consideration - How to consider child activities\n   * @param {number} minimumCount - The minimum count for AT_LEAST_COUNT consideration\n   * @param {number} minimumPercent - The minimum percent for AT_LEAST_PERCENT consideration\n   */\n  constructor(\n    action: RollupActionType = RollupActionType.SATISFIED,\n    consideration: RollupConsiderationType = RollupConsiderationType.ALL,\n    minimumCount: number = 0,\n    minimumPercent: number = 0,\n  ) {\n    super(\"rollupRule\");\n    this._action = action;\n    this._consideration = consideration;\n    this._minimumCount = minimumCount;\n    this._minimumPercent = minimumPercent;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._conditions = [];\n  }\n\n  /**\n   * Getter for conditions\n   * @return {RollupCondition[]}\n   */\n  get conditions(): RollupCondition[] {\n    return this._conditions;\n  }\n\n  /**\n   * Add a condition to the rule\n   * @param {RollupCondition} condition - The condition to add\n   */\n  addCondition(condition: RollupCondition): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(condition instanceof RollupCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._conditions.push(condition);\n  }\n\n  /**\n   * Remove a condition from the rule\n   * @param {RollupCondition} condition - The condition to remove\n   * @return {boolean} - True if the condition was removed, false otherwise\n   */\n  removeCondition(condition: RollupCondition): boolean {\n    const index = this._conditions.indexOf(condition);\n    if (index !== -1) {\n      this._conditions.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for action\n   * @return {RollupActionType}\n   */\n  get action(): RollupActionType {\n    return this._action;\n  }\n\n  /**\n   * Setter for action\n   * @param {RollupActionType} action\n   */\n  set action(action: RollupActionType) {\n    this._action = action;\n  }\n\n  /**\n   * Getter for consideration\n   * @return {RollupConsiderationType}\n   */\n  get consideration(): RollupConsiderationType {\n    return this._consideration;\n  }\n\n  /**\n   * Setter for consideration\n   * @param {RollupConsiderationType} consideration\n   */\n  set consideration(consideration: RollupConsiderationType) {\n    this._consideration = consideration;\n  }\n\n  /**\n   * Getter for minimumCount\n   * @return {number}\n   */\n  get minimumCount(): number {\n    return this._minimumCount;\n  }\n\n  /**\n   * Setter for minimumCount\n   * @param {number} minimumCount\n   */\n  set minimumCount(minimumCount: number) {\n    if (minimumCount >= 0) {\n      this._minimumCount = minimumCount;\n    }\n  }\n\n  /**\n   * Getter for minimumPercent\n   * @return {number}\n   */\n  get minimumPercent(): number {\n    return this._minimumPercent;\n  }\n\n  /**\n   * Setter for minimumPercent\n   * @param {number} minimumPercent\n   */\n  set minimumPercent(minimumPercent: number) {\n    if (minimumPercent >= 0 && minimumPercent <= 100) {\n      this._minimumPercent = minimumPercent;\n    }\n  }\n\n  /**\n   * Evaluate the rule for a set of child activities\n   * @param {Activity[]} children - The child activities to evaluate the rule for\n   * @return {boolean} - True if the rule conditions are met, false otherwise\n   */\n  evaluate(children: Activity[]): boolean {\n    if (children.length === 0) {\n      return false;\n    }\n\n    // Filter children that meet all conditions\n    const matchingChildren = children.filter((child) => {\n      return this._conditions.every((condition) => condition.evaluate(child));\n    });\n\n    // Apply consideration\n    switch (this._consideration) {\n      case RollupConsiderationType.ALL:\n        return matchingChildren.length === children.length;\n      case RollupConsiderationType.ANY:\n        return matchingChildren.length > 0;\n      case RollupConsiderationType.NONE:\n        return matchingChildren.length === 0;\n      case RollupConsiderationType.AT_LEAST_COUNT:\n        return matchingChildren.length >= this._minimumCount;\n      case RollupConsiderationType.AT_LEAST_PERCENT: {\n        const percent = (matchingChildren.length / children.length) * 100;\n        return percent >= this._minimumPercent;\n      }\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RollupRule\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      conditions: this._conditions,\n      action: this._action,\n      consideration: this._consideration,\n      minimumCount: this._minimumCount,\n      minimumPercent: this._minimumPercent,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a collection of rollup rules\n */\nexport class RollupRules extends BaseCMI {\n  private _rules: RollupRule[] = [];\n\n  /**\n   * Constructor for RollupRules\n   */\n  constructor() {\n    super(\"rollupRules\");\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._rules = [];\n  }\n\n  /**\n   * Getter for rules\n   * @return {RollupRule[]}\n   */\n  get rules(): RollupRule[] {\n    return this._rules;\n  }\n\n  /**\n   * Add a rule\n   * @param {RollupRule} rule - The rule to add\n   */\n  addRule(rule: RollupRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof RollupRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".rules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._rules.push(rule);\n  }\n\n  /**\n   * Remove a rule\n   * @param {RollupRule} rule - The rule to remove\n   * @return {boolean} - True if the rule was removed, false otherwise\n   */\n  removeRule(rule: RollupRule): boolean {\n    const index = this._rules.indexOf(rule);\n    if (index !== -1) {\n      this._rules.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Process rollup for an activity\n   * @param {Activity} activity - The activity to process rollup for\n   */\n  processRollup(activity: Activity): void {\n    if (!activity || activity.children.length === 0) {\n      return;\n    }\n\n    const children = activity.getAvailableChildren();\n    let completionRollup = false;\n    let successRollup = false;\n\n    // First, check if we should use measure rollup (RB.1.2.a)\n    if (activity.sequencingControls.rollupObjectiveSatisfied) {\n      const measureRollupResult = this._objectiveRollupUsingMeasure(activity, children);\n      if (measureRollupResult !== null) {\n        successRollup = true;\n        // Skip rule-based rollup if measure rollup was successful\n      }\n    }\n\n    // Process each rule (RB.1.2.b)\n    if (!successRollup) {\n      for (const rule of this._rules) {\n        if (rule.evaluate(children)) {\n          switch (rule.action) {\n            case RollupActionType.SATISFIED:\n              activity.successStatus = SuccessStatus.PASSED;\n              successRollup = true;\n              break;\n            case RollupActionType.NOT_SATISFIED:\n              activity.successStatus = SuccessStatus.FAILED;\n              successRollup = true;\n              break;\n            case RollupActionType.COMPLETED:\n              activity.completionStatus = CompletionStatus.COMPLETED;\n              activity.isCompleted = true;\n              completionRollup = true;\n              break;\n            case RollupActionType.INCOMPLETE:\n              activity.completionStatus = CompletionStatus.INCOMPLETE;\n              activity.isCompleted = false;\n              completionRollup = true;\n              break;\n          }\n        }\n      }\n    }\n\n    // If no rules applied for completion, use default rollup\n    if (!completionRollup) {\n      this._defaultCompletionRollup(activity, children);\n    }\n\n    // If no rules applied for success, use default rollup (RB.1.2.c)\n    if (!successRollup) {\n      this._defaultSuccessRollup(activity, children);\n    }\n  }\n\n  /**\n   * Default completion rollup\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @private\n   */\n  private _defaultCompletionRollup(activity: Activity, children: Activity[]): void {\n    // If all children are completed, mark the parent as completed\n    const allCompleted = children.every((child) => child.isCompleted);\n    if (allCompleted) {\n      activity.completionStatus = CompletionStatus.COMPLETED;\n      activity.isCompleted = true;\n    } else {\n      // If any child is incomplete, mark the parent as incomplete\n      const anyIncomplete = children.some(\n        (child) => child.completionStatus === CompletionStatus.INCOMPLETE,\n      );\n      if (anyIncomplete) {\n        activity.completionStatus = CompletionStatus.INCOMPLETE;\n        activity.isCompleted = false;\n      }\n    }\n  }\n\n  /**\n   * Objective Rollup Using Measure Process (RB.1.2.a)\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @return {boolean | null} - True if satisfied, false if not satisfied, null if measure rollup not applicable\n   * @private\n   */\n  private _objectiveRollupUsingMeasure(activity: Activity, children: Activity[]): boolean | null {\n    // Check if objective measure weight is properly configured\n    const objectiveMeasureWeight = activity.sequencingControls.objectiveMeasureWeight;\n    if (objectiveMeasureWeight <= 0) {\n      return null; // Measure rollup not applicable\n    }\n\n    // Calculate weighted average of child objective measures\n    let totalWeight = 0;\n    let weightedSum = 0;\n    let hasValidMeasures = false;\n\n    for (const child of children) {\n      // Only include children that should contribute to rollup\n      if (!child.sequencingControls.rollupObjectiveSatisfied) {\n        continue;\n      }\n\n      // Check if child has a valid objective measure\n      if (child.objectiveMeasureStatus && child.objectiveMeasureStatus === true) {\n        const childWeight = child.sequencingControls.objectiveMeasureWeight;\n        if (childWeight > 0) {\n          weightedSum += child.objectiveNormalizedMeasure * childWeight;\n          totalWeight += childWeight;\n          hasValidMeasures = true;\n        }\n      }\n    }\n\n    // If no valid measures found, measure rollup is not applicable\n    if (!hasValidMeasures || totalWeight === 0) {\n      return null;\n    }\n\n    // Calculate the normalized measure for the parent activity\n    const normalizedMeasure = weightedSum / totalWeight;\n    activity.objectiveNormalizedMeasure = normalizedMeasure;\n    activity.objectiveMeasureStatus = true;\n\n    // Determine satisfaction based on scaled passing score\n    if (normalizedMeasure >= activity.scaledPassingScore) {\n      activity.successStatus = SuccessStatus.PASSED;\n      activity.objectiveSatisfiedStatus = true;\n      return true;\n    } else {\n      activity.successStatus = SuccessStatus.FAILED;\n      activity.objectiveSatisfiedStatus = false;\n      return false;\n    }\n  }\n\n  /**\n   * Default success rollup\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @private\n   */\n  private _defaultSuccessRollup(activity: Activity, children: Activity[]): void {\n    // If all children are satisfied, mark the parent as satisfied\n    const allSatisfied = children.every((child) => child.successStatus === SuccessStatus.PASSED);\n    if (allSatisfied) {\n      activity.successStatus = SuccessStatus.PASSED;\n    } else {\n      // If any child is not satisfied, mark the parent as not satisfied\n      const anyNotSatisfied = children.some(\n        (child) => child.successStatus === SuccessStatus.FAILED,\n      );\n      if (anyNotSatisfied) {\n        activity.successStatus = SuccessStatus.FAILED;\n      }\n    }\n  }\n\n  /**\n   * toJSON for RollupRules\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      rules: this._rules,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","const ValidLanguages: string[] = [\n  \"aa\",\n  \"ab\",\n  \"ae\",\n  \"af\",\n  \"ak\",\n  \"am\",\n  \"an\",\n  \"ar\",\n  \"as\",\n  \"av\",\n  \"ay\",\n  \"az\",\n  \"ba\",\n  \"be\",\n  \"bg\",\n  \"bh\",\n  \"bi\",\n  \"bm\",\n  \"bn\",\n  \"bo\",\n  \"br\",\n  \"bs\",\n  \"ca\",\n  \"ce\",\n  \"ch\",\n  \"co\",\n  \"cr\",\n  \"cs\",\n  \"cu\",\n  \"cv\",\n  \"cy\",\n  \"da\",\n  \"de\",\n  \"dv\",\n  \"dz\",\n  \"ee\",\n  \"el\",\n  \"en\",\n  \"eo\",\n  \"es\",\n  \"et\",\n  \"eu\",\n  \"fa\",\n  \"ff\",\n  \"fi\",\n  \"fj\",\n  \"fo\",\n  \"fr\",\n  \"fy\",\n  \"ga\",\n  \"gd\",\n  \"gl\",\n  \"gn\",\n  \"gu\",\n  \"gv\",\n  \"ha\",\n  \"he\",\n  \"hi\",\n  \"ho\",\n  \"hr\",\n  \"ht\",\n  \"hu\",\n  \"hy\",\n  \"hz\",\n  \"ia\",\n  \"id\",\n  \"ie\",\n  \"ig\",\n  \"ii\",\n  \"ik\",\n  \"io\",\n  \"is\",\n  \"it\",\n  \"iu\",\n  \"ja\",\n  \"jv\",\n  \"ka\",\n  \"kg\",\n  \"ki\",\n  \"kj\",\n  \"kk\",\n  \"kl\",\n  \"km\",\n  \"kn\",\n  \"ko\",\n  \"kr\",\n  \"ks\",\n  \"ku\",\n  \"kv\",\n  \"kw\",\n  \"ky\",\n  \"la\",\n  \"lb\",\n  \"lg\",\n  \"li\",\n  \"ln\",\n  \"lo\",\n  \"lt\",\n  \"lu\",\n  \"lv\",\n  \"mg\",\n  \"mh\",\n  \"mi\",\n  \"mk\",\n  \"ml\",\n  \"mn\",\n  \"mo\",\n  \"mr\",\n  \"ms\",\n  \"mt\",\n  \"my\",\n  \"na\",\n  \"nb\",\n  \"nd\",\n  \"ne\",\n  \"ng\",\n  \"nl\",\n  \"nn\",\n  \"no\",\n  \"nr\",\n  \"nv\",\n  \"ny\",\n  \"oc\",\n  \"oj\",\n  \"om\",\n  \"or\",\n  \"os\",\n  \"pa\",\n  \"pi\",\n  \"pl\",\n  \"ps\",\n  \"pt\",\n  \"qu\",\n  \"rm\",\n  \"rn\",\n  \"ro\",\n  \"ru\",\n  \"rw\",\n  \"sa\",\n  \"sc\",\n  \"sd\",\n  \"se\",\n  \"sg\",\n  \"sh\",\n  \"si\",\n  \"sk\",\n  \"sl\",\n  \"sm\",\n  \"sn\",\n  \"so\",\n  \"sq\",\n  \"sr\",\n  \"ss\",\n  \"st\",\n  \"su\",\n  \"sv\",\n  \"sw\",\n  \"ta\",\n  \"te\",\n  \"tg\",\n  \"th\",\n  \"ti\",\n  \"tk\",\n  \"tl\",\n  \"tn\",\n  \"to\",\n  \"tr\",\n  \"ts\",\n  \"tt\",\n  \"tw\",\n  \"ty\",\n  \"ug\",\n  \"uk\",\n  \"ur\",\n  \"uz\",\n  \"ve\",\n  \"vi\",\n  \"vo\",\n  \"wa\",\n  \"wo\",\n  \"xh\",\n  \"yi\",\n  \"yo\",\n  \"za\",\n  \"zh\",\n  \"zu\",\n  \"aar\",\n  \"abk\",\n  \"ave\",\n  \"afr\",\n  \"aka\",\n  \"amh\",\n  \"arg\",\n  \"ara\",\n  \"asm\",\n  \"ava\",\n  \"aym\",\n  \"aze\",\n  \"bak\",\n  \"bel\",\n  \"bul\",\n  \"bih\",\n  \"bis\",\n  \"bam\",\n  \"ben\",\n  \"tib\",\n  \"bod\",\n  \"bre\",\n  \"bos\",\n  \"cat\",\n  \"che\",\n  \"cha\",\n  \"cos\",\n  \"cre\",\n  \"cze\",\n  \"ces\",\n  \"chu\",\n  \"chv\",\n  \"wel\",\n  \"cym\",\n  \"dan\",\n  \"ger\",\n  \"deu\",\n  \"div\",\n  \"dzo\",\n  \"ewe\",\n  \"gre\",\n  \"ell\",\n  \"eng\",\n  \"epo\",\n  \"spa\",\n  \"est\",\n  \"baq\",\n  \"eus\",\n  \"per\",\n  \"fas\",\n  \"ful\",\n  \"fin\",\n  \"fij\",\n  \"fao\",\n  \"fre\",\n  \"fra\",\n  \"fry\",\n  \"gle\",\n  \"gla\",\n  \"glg\",\n  \"grn\",\n  \"guj\",\n  \"glv\",\n  \"hau\",\n  \"heb\",\n  \"hin\",\n  \"hmo\",\n  \"hrv\",\n  \"hat\",\n  \"hun\",\n  \"arm\",\n  \"hye\",\n  \"her\",\n  \"ina\",\n  \"ind\",\n  \"ile\",\n  \"ibo\",\n  \"iii\",\n  \"ipk\",\n  \"ido\",\n  \"ice\",\n  \"isl\",\n  \"ita\",\n  \"iku\",\n  \"jpn\",\n  \"jav\",\n  \"geo\",\n  \"kat\",\n  \"kon\",\n  \"kik\",\n  \"kua\",\n  \"kaz\",\n  \"kal\",\n  \"khm\",\n  \"kan\",\n  \"kor\",\n  \"kau\",\n  \"kas\",\n  \"kur\",\n  \"kom\",\n  \"cor\",\n  \"kir\",\n  \"lat\",\n  \"ltz\",\n  \"lug\",\n  \"lim\",\n  \"lin\",\n  \"lao\",\n  \"lit\",\n  \"lub\",\n  \"lav\",\n  \"mlg\",\n  \"mah\",\n  \"mao\",\n  \"mri\",\n  \"mac\",\n  \"mkd\",\n  \"mal\",\n  \"mon\",\n  \"mol\",\n  \"mar\",\n  \"may\",\n  \"msa\",\n  \"mlt\",\n  \"bur\",\n  \"mya\",\n  \"nau\",\n  \"nob\",\n  \"nde\",\n  \"nep\",\n  \"ndo\",\n  \"dut\",\n  \"nld\",\n  \"nno\",\n  \"nor\",\n  \"nbl\",\n  \"nav\",\n  \"nya\",\n  \"oci\",\n  \"oji\",\n  \"orm\",\n  \"ori\",\n  \"oss\",\n  \"pan\",\n  \"pli\",\n  \"pol\",\n  \"pus\",\n  \"por\",\n  \"que\",\n  \"roh\",\n  \"run\",\n  \"rum\",\n  \"ron\",\n  \"rus\",\n  \"kin\",\n  \"san\",\n  \"srd\",\n  \"snd\",\n  \"sme\",\n  \"sag\",\n  \"slo\",\n  \"sin\",\n  \"slk\",\n  \"slv\",\n  \"smo\",\n  \"sna\",\n  \"som\",\n  \"alb\",\n  \"sqi\",\n  \"srp\",\n  \"ssw\",\n  \"sot\",\n  \"sun\",\n  \"swe\",\n  \"swa\",\n  \"tam\",\n  \"tel\",\n  \"tgk\",\n  \"tha\",\n  \"tir\",\n  \"tuk\",\n  \"tgl\",\n  \"tsn\",\n  \"ton\",\n  \"tur\",\n  \"tso\",\n  \"tat\",\n  \"twi\",\n  \"tah\",\n  \"uig\",\n  \"ukr\",\n  \"urd\",\n  \"uzb\",\n  \"ven\",\n  \"vie\",\n  \"vol\",\n  \"wln\",\n  \"wol\",\n  \"xho\",\n  \"yid\",\n  \"yor\",\n  \"zha\",\n  \"chi\",\n  \"zho\",\n  \"zul\",\n];\nexport default ValidLanguages;\n","import { BaseCMI } from \"../../common/base_cmi\";\n\n/**\n * Enum for selection timing\n */\nexport enum SelectionTiming {\n  NEVER = \"never\",\n  ONCE = \"once\",\n  ON_EACH_NEW_ATTEMPT = \"onEachNewAttempt\",\n}\n\n/**\n * Enum for randomization timing\n */\nexport enum RandomizationTiming {\n  NEVER = \"never\",\n  ONCE = \"once\",\n  ON_EACH_NEW_ATTEMPT = \"onEachNewAttempt\",\n}\n\n/**\n * Class representing SCORM 2004 sequencing controls\n */\nexport class SequencingControls extends BaseCMI {\n  // Sequencing Control Modes\n  private _enabled: boolean = true;\n  private _choice: boolean = true;\n  private _choiceExit: boolean = true;\n  private _flow: boolean = false;\n  private _forwardOnly: boolean = false;\n  private _useCurrentAttemptObjectiveInfo: boolean = true;\n  private _useCurrentAttemptProgressInfo: boolean = true;\n\n  // Constrain Choice Controls\n  private _preventActivation: boolean = false;\n  private _constrainChoice: boolean = false;\n  // Rule-driven traversal limiter (e.g., post-condition stopForwardTraversal)\n  private _stopForwardTraversal: boolean = false;\n\n  // Rollup Controls\n  private _rollupObjectiveSatisfied: boolean = true;\n  private _rollupProgressCompletion: boolean = true;\n  private _objectiveMeasureWeight: number = 1.0;\n\n  // Selection Controls\n  private _selectionTiming: SelectionTiming = SelectionTiming.NEVER;\n  private _selectCount: number | null = null;\n  private _selectionCountStatus: boolean = false;\n  private _randomizeChildren: boolean = false;\n\n  // Randomization Controls\n  private _randomizationTiming: RandomizationTiming = RandomizationTiming.NEVER;\n  private _reorderChildren: boolean = false;\n\n  /**\n   * Constructor for SequencingControls\n   */\n  constructor() {\n    super(\"sequencingControls\");\n  }\n\n  /**\n   * Reset the sequencing controls to their default values\n   */\n  reset() {\n    this._initialized = false;\n    this._enabled = true;\n    this._choice = true;\n    this._choiceExit = true;\n    this._flow = false;\n    this._forwardOnly = false;\n    this._useCurrentAttemptObjectiveInfo = true;\n    this._useCurrentAttemptProgressInfo = true;\n    this._preventActivation = false;\n    this._constrainChoice = false;\n    this._stopForwardTraversal = false;\n    this._rollupObjectiveSatisfied = true;\n    this._rollupProgressCompletion = true;\n    this._objectiveMeasureWeight = 1.0;\n    this._selectionTiming = SelectionTiming.NEVER;\n    this._selectCount = null;\n    this._selectionCountStatus = false;\n    this._randomizeChildren = false;\n    this._randomizationTiming = RandomizationTiming.NEVER;\n    this._reorderChildren = false;\n  }\n\n  /**\n   * Getter for enabled\n   * @return {boolean}\n   */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  /**\n   * Setter for enabled\n   * @param {boolean} enabled\n   */\n  set enabled(enabled: boolean) {\n    this._enabled = enabled;\n  }\n\n  /**\n   * Getter for choice\n   * @return {boolean}\n   */\n  get choice(): boolean {\n    return this._choice;\n  }\n\n  /**\n   * Setter for choice\n   * @param {boolean} choice\n   */\n  set choice(choice: boolean) {\n    this._choice = choice;\n  }\n\n  /**\n   * Getter for choiceExit\n   * @return {boolean}\n   */\n  get choiceExit(): boolean {\n    return this._choiceExit;\n  }\n\n  /**\n   * Setter for choiceExit\n   * @param {boolean} choiceExit\n   */\n  set choiceExit(choiceExit: boolean) {\n    this._choiceExit = choiceExit;\n  }\n\n  /**\n   * Getter for flow\n   * @return {boolean}\n   */\n  get flow(): boolean {\n    return this._flow;\n  }\n\n  /**\n   * Setter for flow\n   * @param {boolean} flow\n   */\n  set flow(flow: boolean) {\n    this._flow = flow;\n  }\n\n  /**\n   * Getter for forwardOnly\n   * @return {boolean}\n   */\n  get forwardOnly(): boolean {\n    return this._forwardOnly;\n  }\n\n  /**\n   * Setter for forwardOnly\n   * @param {boolean} forwardOnly\n   */\n  set forwardOnly(forwardOnly: boolean) {\n    this._forwardOnly = forwardOnly;\n  }\n\n  /**\n   * Getter for useCurrentAttemptObjectiveInfo\n   * @return {boolean}\n   */\n  get useCurrentAttemptObjectiveInfo(): boolean {\n    return this._useCurrentAttemptObjectiveInfo;\n  }\n\n  /**\n   * Setter for useCurrentAttemptObjectiveInfo\n   * @param {boolean} useCurrentAttemptObjectiveInfo\n   */\n  set useCurrentAttemptObjectiveInfo(useCurrentAttemptObjectiveInfo: boolean) {\n    this._useCurrentAttemptObjectiveInfo = useCurrentAttemptObjectiveInfo;\n  }\n\n  /**\n   * Getter for useCurrentAttemptProgressInfo\n   * @return {boolean}\n   */\n  get useCurrentAttemptProgressInfo(): boolean {\n    return this._useCurrentAttemptProgressInfo;\n  }\n\n  /**\n   * Setter for useCurrentAttemptProgressInfo\n   * @param {boolean} useCurrentAttemptProgressInfo\n   */\n  set useCurrentAttemptProgressInfo(useCurrentAttemptProgressInfo: boolean) {\n    this._useCurrentAttemptProgressInfo = useCurrentAttemptProgressInfo;\n  }\n\n  /**\n   * Getter for preventActivation\n   * @return {boolean}\n   */\n  get preventActivation(): boolean {\n    return this._preventActivation;\n  }\n\n  /**\n   * Setter for preventActivation\n   * @param {boolean} preventActivation\n   */\n  set preventActivation(preventActivation: boolean) {\n    this._preventActivation = preventActivation;\n  }\n\n  /**\n   * Getter for constrainChoice\n   * @return {boolean}\n   */\n  get constrainChoice(): boolean {\n    return this._constrainChoice;\n  }\n\n  /**\n   * Setter for constrainChoice\n   * @param {boolean} constrainChoice\n   */\n  set constrainChoice(constrainChoice: boolean) {\n    this._constrainChoice = constrainChoice;\n  }\n\n  /**\n   * Getter for stopForwardTraversal\n   * @return {boolean}\n   */\n  get stopForwardTraversal(): boolean {\n    return this._stopForwardTraversal;\n  }\n\n  /**\n   * Setter for stopForwardTraversal\n   * @param {boolean} stopForwardTraversal\n   */\n  set stopForwardTraversal(stopForwardTraversal: boolean) {\n    this._stopForwardTraversal = stopForwardTraversal;\n  }\n\n  /**\n   * Getter for rollupObjectiveSatisfied\n   * @return {boolean}\n   */\n  get rollupObjectiveSatisfied(): boolean {\n    return this._rollupObjectiveSatisfied;\n  }\n\n  /**\n   * Setter for rollupObjectiveSatisfied\n   * @param {boolean} rollupObjectiveSatisfied\n   */\n  set rollupObjectiveSatisfied(rollupObjectiveSatisfied: boolean) {\n    this._rollupObjectiveSatisfied = rollupObjectiveSatisfied;\n  }\n\n  /**\n   * Getter for rollupProgressCompletion\n   * @return {boolean}\n   */\n  get rollupProgressCompletion(): boolean {\n    return this._rollupProgressCompletion;\n  }\n\n  /**\n   * Setter for rollupProgressCompletion\n   * @param {boolean} rollupProgressCompletion\n   */\n  set rollupProgressCompletion(rollupProgressCompletion: boolean) {\n    this._rollupProgressCompletion = rollupProgressCompletion;\n  }\n\n  /**\n   * Getter for objectiveMeasureWeight\n   * @return {number}\n   */\n  get objectiveMeasureWeight(): number {\n    return this._objectiveMeasureWeight;\n  }\n\n  /**\n   * Setter for objectiveMeasureWeight\n   * @param {number} objectiveMeasureWeight\n   */\n  set objectiveMeasureWeight(objectiveMeasureWeight: number) {\n    // According to SCORM 2004, weight must be >= 0 but there's no upper limit\n    if (objectiveMeasureWeight >= 0) {\n      this._objectiveMeasureWeight = objectiveMeasureWeight;\n    }\n  }\n\n  /**\n   * Check if choice navigation is allowed\n   * @return {boolean} - True if choice navigation is allowed, false otherwise\n   */\n  isChoiceNavigationAllowed(): boolean {\n    return this._enabled && !this._constrainChoice;\n  }\n\n  /**\n   * Check if flow navigation is allowed\n   * @return {boolean} - True if flow navigation is allowed, false otherwise\n   */\n  isFlowNavigationAllowed(): boolean {\n    return this._enabled && this._flow;\n  }\n\n  /**\n   * Check if forward navigation is allowed\n   * @return {boolean} - True if forward navigation is allowed, false otherwise\n   */\n  isForwardNavigationAllowed(): boolean {\n    // Forward navigation (Continue request) is only valid when flow mode is\n    // enabled. The forwardOnly flag simply restricts backward navigation and\n    // does not affect the ability to move forward when flow is disabled.\n    return this._enabled && this._flow;\n  }\n\n  /**\n   * Check if backward navigation is allowed\n   * @return {boolean} - True if backward navigation is allowed, false otherwise\n   */\n  isBackwardNavigationAllowed(): boolean {\n    // Previous navigation is also part of flow based navigation and should only\n    // be permitted when flow mode is enabled and forwardOnly does not restrict\n    // going backwards.\n    return this._enabled && this._flow && !this._forwardOnly;\n  }\n\n  /**\n   * Getter for selectionTiming\n   * @return {SelectionTiming}\n   */\n  get selectionTiming(): SelectionTiming {\n    return this._selectionTiming;\n  }\n\n  /**\n   * Setter for selectionTiming\n   * @param {SelectionTiming} selectionTiming\n   */\n  set selectionTiming(selectionTiming: SelectionTiming) {\n    this._selectionTiming = selectionTiming;\n  }\n\n  /**\n   * Getter for selectCount\n   * @return {number | null}\n   */\n  get selectCount(): number | null {\n    return this._selectCount;\n  }\n\n  /**\n   * Setter for selectCount\n   * @param {number | null} selectCount\n   */\n  set selectCount(selectCount: number | null) {\n    if (selectCount === null || selectCount > 0) {\n      this._selectCount = selectCount;\n    }\n  }\n\n  /**\n   * Getter for selectionCountStatus\n   * @return {boolean}\n   */\n  get selectionCountStatus(): boolean {\n    return this._selectionCountStatus;\n  }\n\n  /**\n   * Setter for selectionCountStatus\n   * @param {boolean} selectionCountStatus\n   */\n  set selectionCountStatus(selectionCountStatus: boolean) {\n    this._selectionCountStatus = selectionCountStatus;\n  }\n\n  /**\n   * Getter for randomizeChildren\n   * @return {boolean}\n   */\n  get randomizeChildren(): boolean {\n    return this._randomizeChildren;\n  }\n\n  /**\n   * Setter for randomizeChildren\n   * @param {boolean} randomizeChildren\n   */\n  set randomizeChildren(randomizeChildren: boolean) {\n    this._randomizeChildren = randomizeChildren;\n  }\n\n  /**\n   * Getter for randomizationTiming\n   * @return {RandomizationTiming}\n   */\n  get randomizationTiming(): RandomizationTiming {\n    return this._randomizationTiming;\n  }\n\n  /**\n   * Setter for randomizationTiming\n   * @param {RandomizationTiming} randomizationTiming\n   */\n  set randomizationTiming(randomizationTiming: RandomizationTiming) {\n    this._randomizationTiming = randomizationTiming;\n  }\n\n  /**\n   * Getter for reorderChildren\n   * @return {boolean}\n   */\n  get reorderChildren(): boolean {\n    return this._reorderChildren;\n  }\n\n  /**\n   * Setter for reorderChildren\n   * @param {boolean} reorderChildren\n   */\n  set reorderChildren(reorderChildren: boolean) {\n    this._reorderChildren = reorderChildren;\n  }\n\n  /**\n   * toJSON for SequencingControls\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      enabled: this._enabled,\n      choice: this._choice,\n      choiceExit: this._choiceExit,\n      flow: this._flow,\n      forwardOnly: this._forwardOnly,\n      useCurrentAttemptObjectiveInfo: this._useCurrentAttemptObjectiveInfo,\n      useCurrentAttemptProgressInfo: this._useCurrentAttemptProgressInfo,\n      preventActivation: this._preventActivation,\n      constrainChoice: this._constrainChoice,\n      stopForwardTraversal: this._stopForwardTraversal,\n      rollupObjectiveSatisfied: this._rollupObjectiveSatisfied,\n      rollupProgressCompletion: this._rollupProgressCompletion,\n      objectiveMeasureWeight: this._objectiveMeasureWeight,\n      selectionTiming: this._selectionTiming,\n      selectCount: this._selectCount,\n      selectionCountStatus: this._selectionCountStatus,\n      randomizeChildren: this._randomizeChildren,\n      randomizationTiming: this._randomizationTiming,\n      reorderChildren: this._reorderChildren,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { scorm2004_regex } from \"../../../constants/regex\";\nimport { check2004ValidFormat } from \"../validation\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { CompletionStatus, SuccessStatus } from \"../../../constants/enums\";\nimport { SequencingControls } from \"./sequencing_controls\";\nimport { SequencingRules } from \"./sequencing_rules\";\nimport { RollupRules } from \"./rollup_rules\";\nimport { validateISO8601Duration } from \"../../../utilities\";\n\n/**\n * Class representing a single activity in the SCORM 2004 activity tree\n */\nexport class Activity extends BaseCMI {\n  private _id: string = \"\";\n  private _title: string = \"\";\n  private _children: Activity[] = [];\n  private _parent: Activity | null = null;\n  private _isVisible: boolean = true;\n  private _isActive: boolean = false;\n  private _isSuspended: boolean = false;\n  private _isCompleted: boolean = false;\n  private _completionStatus: CompletionStatus = CompletionStatus.UNKNOWN;\n  private _successStatus: SuccessStatus = SuccessStatus.UNKNOWN;\n  private _attemptCount: number = 0;\n  private _attemptCompletionAmount: number = 0;\n  private _attemptAbsoluteDuration: string = \"PT0H0M0S\";\n  private _attemptExperiencedDuration: string = \"PT0H0M0S\";\n  private _activityAbsoluteDuration: string = \"PT0H0M0S\";\n  private _activityExperiencedDuration: string = \"PT0H0M0S\";\n  private _objectiveSatisfiedStatus: boolean = false;\n  private _objectiveMeasureStatus: boolean = false;\n  private _objectiveNormalizedMeasure: number = 0;\n  private _scaledPassingScore: number = 0.7; // Default passing score\n  private _progressMeasure: number = 0;\n  private _progressMeasureStatus: boolean = false;\n  private _location: string = \"\";\n  private _attemptAbsoluteStartTime: string = \"\";\n  private _learnerPrefs: any = null;\n  private _activityAttemptActive: boolean = false;\n  private _isHiddenFromChoice: boolean = false;\n  private _isAvailable: boolean = true;\n  private _attemptLimit: number | null = null;\n  private _attemptAbsoluteDurationLimit: string | null = null;\n  private _activityAbsoluteDurationLimit: string | null = null;\n  private _timeLimitAction: string | null = null;\n  private _timeLimitDuration: string | null = null;\n  private _beginTimeLimit: string | null = null;\n  private _endTimeLimit: string | null = null;\n  private _sequencingControls: SequencingControls;\n  private _sequencingRules: SequencingRules;\n  private _rollupRules: RollupRules;\n  private _processedChildren: Activity[] | null = null;\n  private _isNewAttempt: boolean = false;\n\n  /**\n   * Constructor for Activity\n   * @param {string} id - The unique identifier for this activity\n   * @param {string} title - The title of this activity\n   */\n  constructor(id: string = \"\", title: string = \"\") {\n    super(\"activity\");\n    this._id = id;\n    this._title = title;\n    this._sequencingControls = new SequencingControls();\n    this._sequencingRules = new SequencingRules();\n    this._rollupRules = new RollupRules();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    // Initialize children\n    for (const child of this._children) {\n      child.initialize();\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._isActive = false;\n    this._isSuspended = false;\n    this._isCompleted = false;\n    this._completionStatus = CompletionStatus.UNKNOWN;\n    this._successStatus = SuccessStatus.UNKNOWN;\n    this._attemptCount = 0;\n    this._attemptCompletionAmount = 0;\n    this._attemptAbsoluteDuration = \"PT0H0M0S\";\n    this._attemptExperiencedDuration = \"PT0H0M0S\";\n    this._activityAbsoluteDuration = \"PT0H0M0S\";\n    this._activityExperiencedDuration = \"PT0H0M0S\";\n    this._objectiveSatisfiedStatus = false;\n    this._objectiveMeasureStatus = false;\n    this._objectiveNormalizedMeasure = 0;\n    this._progressMeasure = 0;\n    this._progressMeasureStatus = false;\n    this._location = \"\";\n    this._attemptAbsoluteStartTime = \"\";\n    this._learnerPrefs = null;\n    this._activityAttemptActive = false;\n\n    // Reset children\n    for (const child of this._children) {\n      child.reset();\n    }\n  }\n\n  /**\n   * Getter for id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for title\n   * @return {string}\n   */\n  get title(): string {\n    return this._title;\n  }\n\n  /**\n   * Setter for title\n   * @param {string} title\n   */\n  set title(title: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".title\", title, scorm2004_regex.CMILangString250)\n    ) {\n      this._title = title;\n    }\n  }\n\n  /**\n   * Getter for children\n   * @return {Activity[]}\n   */\n  get children(): Activity[] {\n    return this._children;\n  }\n\n  /**\n   * Add a child activity to this activity\n   * @param {Activity} child - The child activity to add\n   */\n  addChild(child: Activity): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(child instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".children\",\n        scorm2004_errors.TYPE_MISMATCH as number\n      );\n    }\n    child._parent = this;\n    this._children.push(child);\n  }\n\n  /**\n   * Remove a child activity from this activity\n   * @param {Activity} child - The child activity to remove\n   * @return {boolean} - True if the child was removed, false otherwise\n   */\n  removeChild(child: Activity): boolean {\n    const index = this._children.indexOf(child);\n    if (index !== -1) {\n      this._children.splice(index, 1);\n      child._parent = null;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for parent\n   * @return {Activity | null}\n   */\n  get parent(): Activity | null {\n    return this._parent;\n  }\n\n  /**\n   * Getter for isVisible\n   * @return {boolean}\n   */\n  get isVisible(): boolean {\n    return this._isVisible;\n  }\n\n  /**\n   * Setter for isVisible\n   * @param {boolean} isVisible\n   */\n  set isVisible(isVisible: boolean) {\n    this._isVisible = isVisible;\n  }\n\n  /**\n   * Getter for isActive\n   * @return {boolean}\n   */\n  get isActive(): boolean {\n    return this._isActive;\n  }\n\n  /**\n   * Setter for isActive\n   * @param {boolean} isActive\n   */\n  set isActive(isActive: boolean) {\n    this._isActive = isActive;\n  }\n\n  /**\n   * Getter for isSuspended\n   * @return {boolean}\n   */\n  get isSuspended(): boolean {\n    return this._isSuspended;\n  }\n\n  /**\n   * Setter for isSuspended\n   * @param {boolean} isSuspended\n   */\n  set isSuspended(isSuspended: boolean) {\n    this._isSuspended = isSuspended;\n  }\n\n  /**\n   * Getter for isCompleted\n   * @return {boolean}\n   */\n  get isCompleted(): boolean {\n    return this._isCompleted;\n  }\n\n  /**\n   * Setter for isCompleted\n   * @param {boolean} isCompleted\n   */\n  set isCompleted(isCompleted: boolean) {\n    this._isCompleted = isCompleted;\n    // Update completion status based on boolean value\n    if (isCompleted) {\n      this._completionStatus = CompletionStatus.COMPLETED;\n    } else {\n      this._completionStatus = CompletionStatus.INCOMPLETE;\n    }\n  }\n\n  /**\n   * Getter for completionStatus\n   * @return {CompletionStatus}\n   */\n  get completionStatus(): CompletionStatus {\n    return this._completionStatus;\n  }\n\n  /**\n   * Setter for completionStatus\n   * @param {CompletionStatus} completionStatus\n   */\n  set completionStatus(completionStatus: CompletionStatus) {\n    this._completionStatus = completionStatus;\n    this._isCompleted = completionStatus === CompletionStatus.COMPLETED;\n  }\n\n  /**\n   * Getter for successStatus\n   * @return {SuccessStatus}\n   */\n  get successStatus(): SuccessStatus {\n    return this._successStatus;\n  }\n\n  /**\n   * Setter for successStatus\n   * @param {SuccessStatus} successStatus\n   */\n  set successStatus(successStatus: SuccessStatus) {\n    this._successStatus = successStatus;\n  }\n\n  /**\n   * Getter for attemptCount\n   * @return {number}\n   */\n  get attemptCount(): number {\n    return this._attemptCount;\n  }\n\n  /**\n   * Setter for attemptCount\n   * @param {number} value\n   */\n  set attemptCount(value: number) {\n    this._attemptCount = value;\n  }\n\n  /**\n   * Getter for attemptCompletionAmount\n   * @return {number}\n   */\n  get attemptCompletionAmount(): number {\n    return this._attemptCompletionAmount;\n  }\n\n  /**\n   * Setter for attemptCompletionAmount\n   * @param {number} value\n   */\n  set attemptCompletionAmount(value: number) {\n    this._attemptCompletionAmount = value;\n  }\n\n  /**\n   * Increment the attempt count\n   */\n  incrementAttemptCount(): void {\n    this._attemptCount++;\n    this._isNewAttempt = true;\n    // Reset processed children on new attempt if needed\n    const controls = this._sequencingControls;\n    if (\n      controls.selectionTiming === \"onEachNewAttempt\" ||\n      controls.randomizationTiming === \"onEachNewAttempt\"\n    ) {\n      this._processedChildren = null;\n    }\n  }\n\n  /**\n   * Getter for objectiveSatisfiedStatus\n   * @return {boolean}\n   */\n  get objectiveSatisfiedStatus(): boolean {\n    return this._objectiveSatisfiedStatus;\n  }\n\n  /**\n   * Setter for objectiveSatisfiedStatus\n   * @param {boolean} objectiveSatisfiedStatus\n   */\n  set objectiveSatisfiedStatus(objectiveSatisfiedStatus: boolean) {\n    this._objectiveSatisfiedStatus = objectiveSatisfiedStatus;\n    // Update success status based on objective satisfaction\n    if (objectiveSatisfiedStatus) {\n      this._successStatus = SuccessStatus.PASSED;\n    } else {\n      this._successStatus = SuccessStatus.FAILED;\n    }\n  }\n\n  /**\n   * Getter for objectiveMeasureStatus\n   * @return {boolean}\n   */\n  get objectiveMeasureStatus(): boolean {\n    return this._objectiveMeasureStatus;\n  }\n\n  /**\n   * Setter for objectiveMeasureStatus\n   * @param {boolean} objectiveMeasureStatus\n   */\n  set objectiveMeasureStatus(objectiveMeasureStatus: boolean) {\n    this._objectiveMeasureStatus = objectiveMeasureStatus;\n  }\n\n  /**\n   * Getter for objectiveNormalizedMeasure\n   * @return {number}\n   */\n  get objectiveNormalizedMeasure(): number {\n    return this._objectiveNormalizedMeasure;\n  }\n\n  /**\n   * Setter for objectiveNormalizedMeasure\n   * @param {number} objectiveNormalizedMeasure\n   */\n  set objectiveNormalizedMeasure(objectiveNormalizedMeasure: number) {\n    this._objectiveNormalizedMeasure = objectiveNormalizedMeasure;\n  }\n\n  /**\n   * Getter for scaledPassingScore\n   * @return {number}\n   */\n  get scaledPassingScore(): number {\n    return this._scaledPassingScore;\n  }\n\n  /**\n   * Setter for scaledPassingScore\n   * @param {number} scaledPassingScore\n   */\n  set scaledPassingScore(scaledPassingScore: number) {\n    if (scaledPassingScore >= -1 && scaledPassingScore <= 1) {\n      this._scaledPassingScore = scaledPassingScore;\n    }\n  }\n\n  /**\n   * Getter for progressMeasure\n   * @return {number}\n   */\n  get progressMeasure(): number {\n    return this._progressMeasure;\n  }\n\n  /**\n   * Setter for progressMeasure\n   * @param {number} progressMeasure\n   */\n  set progressMeasure(progressMeasure: number) {\n    this._progressMeasure = progressMeasure;\n  }\n\n  /**\n   * Getter for progressMeasureStatus\n   * @return {boolean}\n   */\n  get progressMeasureStatus(): boolean {\n    return this._progressMeasureStatus;\n  }\n\n  /**\n   * Setter for progressMeasureStatus\n   * @param {boolean} progressMeasureStatus\n   */\n  set progressMeasureStatus(progressMeasureStatus: boolean) {\n    this._progressMeasureStatus = progressMeasureStatus;\n  }\n\n  /**\n   * Getter for location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for location\n   * @param {string} location\n   */\n  set location(location: string) {\n    this._location = location;\n  }\n\n  /**\n   * Getter for attemptAbsoluteStartTime\n   * @return {string}\n   */\n  get attemptAbsoluteStartTime(): string {\n    return this._attemptAbsoluteStartTime;\n  }\n\n  /**\n   * Setter for attemptAbsoluteStartTime\n   * @param {string} attemptAbsoluteStartTime\n   */\n  set attemptAbsoluteStartTime(attemptAbsoluteStartTime: string) {\n    this._attemptAbsoluteStartTime = attemptAbsoluteStartTime;\n  }\n\n  /**\n   * Getter for learnerPrefs\n   * @return {any}\n   */\n  get learnerPrefs(): any {\n    return this._learnerPrefs;\n  }\n\n  /**\n   * Setter for learnerPrefs\n   * @param {any} learnerPrefs\n   */\n  set learnerPrefs(learnerPrefs: any) {\n    this._learnerPrefs = learnerPrefs;\n  }\n\n  /**\n   * Getter for activityAttemptActive\n   * @return {boolean}\n   */\n  get activityAttemptActive(): boolean {\n    return this._activityAttemptActive;\n  }\n\n  /**\n   * Setter for activityAttemptActive\n   * @param {boolean} activityAttemptActive\n   */\n  set activityAttemptActive(activityAttemptActive: boolean) {\n    this._activityAttemptActive = activityAttemptActive;\n  }\n\n  /**\n   * Getter for isHiddenFromChoice\n   * @return {boolean}\n   */\n  get isHiddenFromChoice(): boolean {\n    return this._isHiddenFromChoice;\n  }\n\n  /**\n   * Setter for isHiddenFromChoice\n   * @param {boolean} isHiddenFromChoice\n   */\n  set isHiddenFromChoice(isHiddenFromChoice: boolean) {\n    this._isHiddenFromChoice = isHiddenFromChoice;\n  }\n\n  /**\n   * Getter for isAvailable\n   * @return {boolean}\n   */\n  get isAvailable(): boolean {\n    return this._isAvailable;\n  }\n\n  /**\n   * Setter for isAvailable\n   * @param {boolean} isAvailable\n   */\n  set isAvailable(isAvailable: boolean) {\n    this._isAvailable = isAvailable;\n  }\n\n  /**\n   * Getter for attemptLimit\n   * @return {number | null}\n   */\n  get attemptLimit(): number | null {\n    return this._attemptLimit;\n  }\n\n  /**\n   * Setter for attemptLimit\n   * @param {number | null} attemptLimit\n   */\n  set attemptLimit(attemptLimit: number | null) {\n    this._attemptLimit = attemptLimit;\n  }\n\n  /**\n   * Check if attempt limit has been exceeded\n   * @return {boolean}\n   */\n  hasAttemptLimitExceeded(): boolean {\n    if (this._attemptLimit === null) {\n      return false;\n    }\n    return this._attemptCount >= this._attemptLimit;\n  }\n\n  /**\n   * Getter for timeLimitDuration\n   * @return {string | null}\n   */\n  get timeLimitDuration(): string | null {\n    return this._timeLimitDuration;\n  }\n\n  /**\n   * Setter for timeLimitDuration\n   * @param {string | null} timeLimitDuration\n   */\n  set timeLimitDuration(timeLimitDuration: string | null) {\n    this._timeLimitDuration = timeLimitDuration;\n  }\n\n  /**\n   * Getter for timeLimitAction\n   * @return {string | null}\n   */\n  get timeLimitAction(): string | null {\n    return this._timeLimitAction;\n  }\n\n  /**\n   * Setter for timeLimitAction\n   * @param {string | null} timeLimitAction\n   */\n  set timeLimitAction(timeLimitAction: string | null) {\n    this._timeLimitAction = timeLimitAction;\n  }\n\n  /**\n   * Getter for beginTimeLimit\n   * @return {string | null}\n   */\n  get beginTimeLimit(): string | null {\n    return this._beginTimeLimit;\n  }\n\n  /**\n   * Setter for beginTimeLimit\n   * @param {string | null} beginTimeLimit\n   */\n  set beginTimeLimit(beginTimeLimit: string | null) {\n    this._beginTimeLimit = beginTimeLimit;\n  }\n\n  /**\n   * Getter for endTimeLimit\n   * @return {string | null}\n   */\n  get endTimeLimit(): string | null {\n    return this._endTimeLimit;\n  }\n\n  /**\n   * Setter for endTimeLimit\n   * @param {string | null} endTimeLimit\n   */\n  set endTimeLimit(endTimeLimit: string | null) {\n    this._endTimeLimit = endTimeLimit;\n  }\n\n\n  /**\n   * Getter for attemptAbsoluteDurationLimit\n   * @return {string | null}\n   */\n  get attemptAbsoluteDurationLimit(): string | null {\n    return this._attemptAbsoluteDurationLimit;\n  }\n\n  /**\n   * Setter for attemptAbsoluteDurationLimit\n   * @param {string | null} attemptAbsoluteDurationLimit\n   */\n  set attemptAbsoluteDurationLimit(attemptAbsoluteDurationLimit: string | null) {\n    if (attemptAbsoluteDurationLimit !== null) {\n      if (!validateISO8601Duration(attemptAbsoluteDurationLimit, scorm2004_regex.CMITimespan)) {\n        throw new Scorm2004ValidationError(\n          this._cmi_element + \".attemptAbsoluteDurationLimit\",\n          scorm2004_errors.TYPE_MISMATCH as number\n        );\n      }\n    }\n    this._attemptAbsoluteDurationLimit = attemptAbsoluteDurationLimit;\n  }\n\n  /**\n   * Getter for attemptExperiencedDuration\n   * @return {string}\n   */\n  get attemptExperiencedDuration(): string {\n    return this._attemptExperiencedDuration;\n  }\n\n  /**\n   * Setter for attemptExperiencedDuration\n   * @param {string} attemptExperiencedDuration\n   */\n  set attemptExperiencedDuration(attemptExperiencedDuration: string) {\n    if (!validateISO8601Duration(attemptExperiencedDuration, scorm2004_regex.CMITimespan)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".attemptExperiencedDuration\",\n        scorm2004_errors.TYPE_MISMATCH as number\n      );\n    }\n    this._attemptExperiencedDuration = attemptExperiencedDuration;\n  }\n\n  /**\n   * Getter for activityAbsoluteDurationLimit\n   * @return {string | null}\n   */\n  get activityAbsoluteDurationLimit(): string | null {\n    return this._activityAbsoluteDurationLimit;\n  }\n\n  /**\n   * Setter for activityAbsoluteDurationLimit\n   * @param {string | null} activityAbsoluteDurationLimit\n   */\n  set activityAbsoluteDurationLimit(activityAbsoluteDurationLimit: string | null) {\n    if (activityAbsoluteDurationLimit !== null) {\n      if (!validateISO8601Duration(activityAbsoluteDurationLimit, scorm2004_regex.CMITimespan)) {\n        throw new Scorm2004ValidationError(\n          this._cmi_element + \".activityAbsoluteDurationLimit\",\n          scorm2004_errors.TYPE_MISMATCH as number\n        );\n      }\n    }\n    this._activityAbsoluteDurationLimit = activityAbsoluteDurationLimit;\n  }\n\n  /**\n   * Getter for activityExperiencedDuration\n   * @return {string}\n   */\n  get activityExperiencedDuration(): string {\n    return this._activityExperiencedDuration;\n  }\n\n  /**\n   * Setter for activityExperiencedDuration\n   * @param {string} activityExperiencedDuration\n   */\n  set activityExperiencedDuration(activityExperiencedDuration: string) {\n    if (!validateISO8601Duration(activityExperiencedDuration, scorm2004_regex.CMITimespan)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".activityExperiencedDuration\",\n        scorm2004_errors.TYPE_MISMATCH as number\n      );\n    }\n    this._activityExperiencedDuration = activityExperiencedDuration;\n  }\n\n  /**\n   * Getter for attemptAbsoluteDuration (alias for limit)\n   * @return {string}\n   */\n  get attemptAbsoluteDuration(): string {\n    return this._attemptAbsoluteDurationLimit || \"PT0H0M0S\";\n  }\n\n  /**\n   * Setter for attemptAbsoluteDuration\n   * @param {string} duration\n   */\n  set attemptAbsoluteDuration(duration: string) {\n    this._attemptAbsoluteDurationLimit = duration;\n  }\n\n  /**\n   * Getter for activityAbsoluteDuration (alias for limit)\n   * @return {string}\n   */\n  get activityAbsoluteDuration(): string {\n    return this._activityAbsoluteDurationLimit || \"PT0H0M0S\";\n  }\n\n  /**\n   * Setter for activityAbsoluteDuration\n   * @param {string} duration\n   */\n  set activityAbsoluteDuration(duration: string) {\n    this._activityAbsoluteDurationLimit = duration;\n  }\n\n\n  /**\n   * Getter for sequencingControls\n   * @return {SequencingControls}\n   */\n  get sequencingControls(): SequencingControls {\n    return this._sequencingControls;\n  }\n\n  /**\n   * Setter for sequencingControls\n   * @param {SequencingControls} sequencingControls\n   */\n  set sequencingControls(sequencingControls: SequencingControls) {\n    this._sequencingControls = sequencingControls;\n  }\n\n  /**\n   * Getter for sequencingRules\n   * @return {SequencingRules}\n   */\n  get sequencingRules(): SequencingRules {\n    return this._sequencingRules;\n  }\n\n  /**\n   * Setter for sequencingRules\n   * @param {SequencingRules} sequencingRules\n   */\n  set sequencingRules(sequencingRules: SequencingRules) {\n    this._sequencingRules = sequencingRules;\n  }\n\n  /**\n   * Getter for rollupRules\n   * @return {RollupRules}\n   */\n  get rollupRules(): RollupRules {\n    return this._rollupRules;\n  }\n\n  /**\n   * Setter for rollupRules\n   * @param {RollupRules} rollupRules\n   */\n  set rollupRules(rollupRules: RollupRules) {\n    this._rollupRules = rollupRules;\n  }\n\n  /**\n   * Get available children with selection and randomization applied\n   * @return {Activity[]}\n   */\n  getAvailableChildren(): Activity[] {\n    // If no children, return empty array\n    if (this._children.length === 0) {\n      return [];\n    }\n\n    // If processed children already exist and no new attempt, return them\n    if (this._processedChildren !== null) {\n      return this._processedChildren;\n    }\n\n    // If no processing has been done yet, return all children\n    // The sequencing process will call applySelectionAndRandomization when needed\n    return this._children;\n  }\n\n  /**\n   * Set the processed children (called by SelectionRandomization)\n   * @param {Activity[]} processedChildren\n   */\n  setProcessedChildren(processedChildren: Activity[]): void {\n    this._processedChildren = processedChildren;\n  }\n\n  /**\n   * Reset processed children (used when configuration changes)\n   */\n  resetProcessedChildren(): void {\n    this._processedChildren = null;\n  }\n\n  /**\n   * Get whether this is a new attempt\n   * @return {boolean}\n   */\n  get isNewAttempt(): boolean {\n    return this._isNewAttempt;\n  }\n\n  /**\n   * Set whether this is a new attempt\n   * @param {boolean} isNewAttempt\n   */\n  set isNewAttempt(isNewAttempt: boolean) {\n    this._isNewAttempt = isNewAttempt;\n  }\n\n  /**\n   * toJSON for Activity\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      id: this._id,\n      title: this._title,\n      isVisible: this._isVisible,\n      isActive: this._isActive,\n      isSuspended: this._isSuspended,\n      isCompleted: this._isCompleted,\n      completionStatus: this._completionStatus,\n      successStatus: this._successStatus,\n      attemptCount: this._attemptCount,\n      attemptCompletionAmount: this._attemptCompletionAmount,\n      attemptAbsoluteDuration: this._attemptAbsoluteDuration,\n      attemptExperiencedDuration: this._attemptExperiencedDuration,\n      activityAbsoluteDuration: this._activityAbsoluteDuration,\n      activityExperiencedDuration: this._activityExperiencedDuration,\n      objectiveSatisfiedStatus: this._objectiveSatisfiedStatus,\n      objectiveMeasureStatus: this._objectiveMeasureStatus,\n      objectiveNormalizedMeasure: this._objectiveNormalizedMeasure,\n      children: this._children.map((child) => child.toJSON())\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\n\n/**\n * Class representing the SCORM 2004 activity tree\n */\nexport class ActivityTree extends BaseCMI {\n  private _root: Activity | null = null;\n  private _currentActivity: Activity | null = null;\n  private _suspendedActivity: Activity | null = null;\n  private _activities: Map<string, Activity> = new Map();\n\n  /**\n   * Constructor for ActivityTree\n   */\n  constructor(root?: Activity) {\n    super(\"activityTree\");\n    if (root) {\n      this.root = root;\n    }\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    if (this._root) {\n      this._root.initialize();\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._currentActivity = null;\n    this._suspendedActivity = null;\n    // Clear the activities map so it can be rebuilt\n    this._activities.clear();\n    if (this._root) {\n      this._root.reset();\n      // Re-populate the activities map with the root and its children\n      this._activities.set(this._root.id, this._root);\n      this._addActivitiesToMap(this._root);\n    }\n  }\n\n  /**\n   * Getter for root\n   * @return {Activity | null}\n   */\n  get root(): Activity | null {\n    return this._root;\n  }\n\n  /**\n   * Setter for root\n   * @param {Activity} root\n   */\n  set root(root: Activity | null) {\n    // noinspection SuspiciousTypeOfGuard\n    if (root !== null && !(root instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".root\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    // Clear existing map when assigning a new root to avoid stale activities\n    this._activities.clear();\n    this._root = root;\n    if (root) {\n      this._activities.set(root.id, root);\n      this._addActivitiesToMap(root);\n    }\n  }\n\n  /**\n   * Recursively add activities to the activities map\n   * @param {Activity} activity\n   * @private\n   */\n  private _addActivitiesToMap(activity: Activity): void {\n    for (const child of activity.children) {\n      this._activities.set(child.id, child);\n      this._addActivitiesToMap(child);\n    }\n  }\n\n  /**\n   * Getter for currentActivity\n   * @return {Activity | null}\n   */\n  get currentActivity(): Activity | null {\n    return this._currentActivity;\n  }\n\n  /**\n   * Setter for currentActivity\n   * @param {Activity | null} activity\n   */\n  set currentActivity(activity: Activity | null) {\n    // noinspection SuspiciousTypeOfGuard\n    if (activity !== null && !(activity instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".currentActivity\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n\n    // If there's already a current activity, deactivate it\n    if (this._currentActivity) {\n      this._currentActivity.isActive = false;\n    }\n\n    // Set the new current activity and activate it\n    this._currentActivity = activity;\n    if (activity) {\n      activity.isActive = true;\n    }\n  }\n\n  /**\n   * Getter for suspendedActivity\n   * @return {Activity | null}\n   */\n  get suspendedActivity(): Activity | null {\n    return this._suspendedActivity;\n  }\n\n  /**\n   * Setter for suspendedActivity\n   * @param {Activity | null} activity\n   */\n  set suspendedActivity(activity: Activity | null) {\n    // noinspection SuspiciousTypeOfGuard\n    if (activity !== null && !(activity instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".suspendedActivity\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n\n    // If there's already a suspended activity, unsuspend it\n    if (this._suspendedActivity) {\n      this._suspendedActivity.isSuspended = false;\n    }\n\n    // Set the new suspended activity and mark it as suspended\n    this._suspendedActivity = activity;\n    if (activity) {\n      activity.isSuspended = true;\n    }\n  }\n\n  /**\n   * Get an activity by ID\n   * @param {string} id - The ID of the activity to get\n   * @return {Activity | null} - The activity with the given ID, or null if not found\n   */\n  getActivity(id: string): Activity | null {\n    return this._activities.get(id) || null;\n  }\n\n  /**\n   * Get all activities in the tree\n   * @return {Activity[]} - An array of all activities in the tree\n   */\n  getAllActivities(): Activity[] {\n    return Array.from(this._activities.values());\n  }\n\n  /**\n   * Get the parent of an activity\n   * @param {Activity} activity - The activity to get the parent of\n   * @return {Activity | null} - The parent of the activity, or null if it has no parent\n   */\n  getParent(activity: Activity): Activity | null {\n    return activity.parent;\n  }\n\n  /**\n   * Get the children of an activity\n   * @param {Activity} activity - The activity to get the children of\n   * @param {boolean} useAvailableChildren - Whether to use available children (with selection/randomization)\n   * @return {Activity[]} - An array of the activity's children\n   */\n  getChildren(activity: Activity, useAvailableChildren: boolean = true): Activity[] {\n    return useAvailableChildren ? activity.getAvailableChildren() : activity.children;\n  }\n\n  /**\n   * Get the siblings of an activity\n   * @param {Activity} activity - The activity to get the siblings of\n   * @return {Activity[]} - An array of the activity's siblings\n   */\n  getSiblings(activity: Activity): Activity[] {\n    if (!activity.parent) {\n      return [];\n    }\n    return activity.parent.children.filter((child) => child !== activity);\n  }\n\n  /**\n   * Get the next sibling of an activity\n   * @param {Activity} activity - The activity to get the next sibling of\n   * @param {boolean} useAvailableChildren - Whether to use available children (with selection/randomization)\n   * @return {Activity | null} - The next sibling of the activity, or null if it has no next sibling\n   */\n  getNextSibling(activity: Activity, useAvailableChildren: boolean = true): Activity | null {\n    if (!activity.parent) {\n      return null;\n    }\n    let siblings = useAvailableChildren \n      ? activity.parent.getAvailableChildren() \n      : activity.parent.children;\n    let index = siblings.indexOf(activity);\n    \n    // Fallback: if not found in available children, try raw children\n    if (index === -1 && useAvailableChildren) {\n      siblings = activity.parent.children;\n      index = siblings.indexOf(activity);\n    }\n    \n    if (index === -1 || index === siblings.length - 1) {\n      return null;\n    }\n    return siblings[index + 1] ?? null;\n  }\n\n  /**\n   * Get the previous sibling of an activity\n   * @param {Activity} activity - The activity to get the previous sibling of\n   * @param {boolean} useAvailableChildren - Whether to use available children (with selection/randomization)\n   * @return {Activity | null} - The previous sibling of the activity, or null if it has no previous sibling\n   */\n  getPreviousSibling(activity: Activity, useAvailableChildren: boolean = true): Activity | null {\n    if (!activity.parent) {\n      return null;\n    }\n    let siblings = useAvailableChildren \n      ? activity.parent.getAvailableChildren() \n      : activity.parent.children;\n    let index = siblings.indexOf(activity);\n    \n    // Fallback: if not found in available children, try raw children\n    if (index === -1 && useAvailableChildren) {\n      siblings = activity.parent.children;\n      index = siblings.indexOf(activity);\n    }\n    \n    if (index <= 0) {\n      return null;\n    }\n    return siblings[index - 1] ?? null;\n  }\n\n  /**\n   * Get the first child of an activity\n   * @param {Activity} activity - The activity to get the first child of\n   * @param {boolean} useAvailableChildren - Whether to use available children (with selection/randomization)\n   * @return {Activity | null} - The first child of the activity, or null if it has no children\n   */\n  getFirstChild(activity: Activity, useAvailableChildren: boolean = true): Activity | null {\n    const children = useAvailableChildren \n      ? activity.getAvailableChildren() \n      : activity.children;\n    if (children.length === 0) {\n      return null;\n    }\n    return children[0] ?? null;\n  }\n\n  /**\n   * Get the last child of an activity\n   * @param {Activity} activity - The activity to get the last child of\n   * @param {boolean} useAvailableChildren - Whether to use available children (with selection/randomization)\n   * @return {Activity | null} - The last child of the activity, or null if it has no children\n   */\n  getLastChild(activity: Activity, useAvailableChildren: boolean = true): Activity | null {\n    const children = useAvailableChildren \n      ? activity.getAvailableChildren() \n      : activity.children;\n    if (children.length === 0) {\n      return null;\n    }\n    return children[children.length - 1] ?? null;\n  }\n\n  /**\n   * Get the common ancestor of two activities\n   * @param {Activity} activity1 - The first activity\n   * @param {Activity} activity2 - The second activity\n   * @return {Activity | null} - The common ancestor of the two activities, or null if they have no common ancestor\n   */\n  getCommonAncestor(activity1: Activity, activity2: Activity): Activity | null {\n    // Get the path from the root to activity1\n    const path1: Activity[] = [];\n    let current: Activity | null = activity1;\n    while (current) {\n      path1.unshift(current);\n      current = current.parent;\n    }\n\n    // Check if activity2 is in the path from the root to activity1\n    current = activity2;\n    while (current) {\n      if (path1.includes(current)) {\n        return current;\n      }\n      current = current.parent;\n    }\n\n    return null;\n  }\n\n  /**\n   * toJSON for ActivityTree\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      root: this._root,\n      currentActivity: this._currentActivity ? this._currentActivity.id : null,\n      suspendedActivity: this._suspendedActivity ? this._suspendedActivity.id : null,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { ActivityTree } from \"./activity_tree\";\nimport { SequencingRules } from \"./sequencing_rules\";\nimport { SequencingControls } from \"./sequencing_controls\";\nimport { RollupRules } from \"./rollup_rules\";\nimport { ADLNav } from \"../adl\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\n\n/**\n * Class representing SCORM 2004 sequencing\n */\nexport class Sequencing extends BaseCMI {\n  private _activityTree: ActivityTree;\n  private _sequencingRules: SequencingRules;\n  private _sequencingControls: SequencingControls;\n  private _rollupRules: RollupRules;\n  private _adlNav: ADLNav | null = null;\n\n  /**\n   * Constructor for Sequencing\n   */\n  constructor() {\n    super(\"sequencing\");\n    this._activityTree = new ActivityTree();\n    this._sequencingRules = new SequencingRules();\n    this._sequencingControls = new SequencingControls();\n    this._rollupRules = new RollupRules();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this._activityTree.initialize();\n    this._sequencingRules.initialize();\n    this._sequencingControls.initialize();\n    this._rollupRules.initialize();\n    \n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._activityTree.reset();\n    this._sequencingRules.reset();\n    this._sequencingControls.reset();\n    this._rollupRules.reset();\n  }\n\n  /**\n   * Getter for activityTree\n   * @return {ActivityTree}\n   */\n  get activityTree(): ActivityTree {\n    return this._activityTree;\n  }\n\n  /**\n   * Setter for activityTree\n   * @param {ActivityTree} activityTree\n   */\n  set activityTree(activityTree: ActivityTree) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(activityTree instanceof ActivityTree)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".activityTree\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._activityTree = activityTree;\n  }\n\n  /**\n   * Getter for sequencingRules\n   * @return {SequencingRules}\n   */\n  get sequencingRules(): SequencingRules {\n    return this._sequencingRules;\n  }\n\n  /**\n   * Setter for sequencingRules\n   * @param {SequencingRules} sequencingRules\n   */\n  set sequencingRules(sequencingRules: SequencingRules) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(sequencingRules instanceof SequencingRules)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".sequencingRules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._sequencingRules = sequencingRules;\n  }\n\n  /**\n   * Getter for sequencingControls\n   * @return {SequencingControls}\n   */\n  get sequencingControls(): SequencingControls {\n    return this._sequencingControls;\n  }\n\n  /**\n   * Setter for sequencingControls\n   * @param {SequencingControls} sequencingControls\n   */\n  set sequencingControls(sequencingControls: SequencingControls) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(sequencingControls instanceof SequencingControls)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".sequencingControls\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._sequencingControls = sequencingControls;\n  }\n\n  /**\n   * Getter for rollupRules\n   * @return {RollupRules}\n   */\n  get rollupRules(): RollupRules {\n    return this._rollupRules;\n  }\n\n  /**\n   * Setter for rollupRules\n   * @param {RollupRules} rollupRules\n   */\n  set rollupRules(rollupRules: RollupRules) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rollupRules instanceof RollupRules)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".rollupRules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._rollupRules = rollupRules;\n  }\n\n  /**\n   * Getter for adlNav\n   * @return {ADLNav | null}\n   */\n  get adlNav(): ADLNav | null {\n    return this._adlNav;\n  }\n\n  /**\n   * Setter for adlNav\n   * @param {ADLNav | null} adlNav\n   */\n  set adlNav(adlNav: ADLNav | null) {\n    this._adlNav = adlNav;\n    \n  }\n\n\n\n\n\n  /**\n   * Process rollup for the entire activity tree\n   */\n  processRollup(): void {\n    // Get the root activity\n    const root = this._activityTree.root;\n    if (!root) {\n      return;\n    }\n\n    // Process rollup from the bottom up\n    this._processRollupRecursive(root);\n  }\n\n\n  /**\n   * Process rollup recursively\n   * @param {Activity} activity - The activity to process rollup for\n   * @private\n   */\n  private _processRollupRecursive(activity: Activity): void {\n    // Process rollup for children first\n    for (const child of activity.children) {\n      this._processRollupRecursive(child);\n    }\n\n    // Process rollup for this activity\n    this._rollupRules.processRollup(activity);\n  }\n\n\n  /**\n   * Get the current activity\n   * @return {Activity | null}\n   */\n  getCurrentActivity(): Activity | null {\n    return this._activityTree.currentActivity;\n  }\n\n  /**\n   * Get the root activity\n   * @return {Activity | null}\n   */\n  getRootActivity(): Activity | null {\n    return this._activityTree.root;\n  }\n\n  /**\n   * toJSON for Sequencing\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      activityTree: this._activityTree,\n      sequencingRules: this._sequencingRules,\n      sequencingControls: this._sequencingControls,\n      rollupRules: this._rollupRules,\n      adlNav: this._adlNav,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { Activity } from \"./activity\";\nimport { RollupActionType, RollupConsiderationType, RollupRule } from \"./rollup_rules\";\n\n/**\n * Enhanced Rollup Process implementation for SCORM 2004 sequencing\n * Priority 5 Gap: Comprehensive rollup with global objective mapping and complex weighting\n * Handles all rollup operations including measure, objective, and progress rollup\n */\nexport class RollupProcess {\n  private rollupStateLog: Array<{ activity: string, timestamp: string, state: any }> = [];\n  private eventCallback: ((eventType: string, data?: any) => void) | null = null;\n\n  constructor(eventCallback?: (eventType: string, data?: any) => void) {\n    this.eventCallback = eventCallback || null;\n  }\n\n  /**\n   * Overall Rollup Process (RB.1.5)\n   * Performs rollup from a given activity up through its ancestors\n   * @param {Activity} activity - The activity to start rollup from\n   */\n  public overallRollupProcess(activity: Activity): void {\n    let currentActivity: Activity | null = activity;\n\n    // Process rollup up the tree until we reach the root\n    while (currentActivity && currentActivity.parent) {\n      const parent: Activity = currentActivity.parent;\n\n      // Only perform rollup if the parent tracks status\n      if (parent.sequencingControls.rollupObjectiveSatisfied ||\n        parent.sequencingControls.rollupProgressCompletion) {\n\n        // Step 1: Measure Rollup Process (RB.1.1)\n        this.measureRollupProcess(parent);\n\n        // Step 2: Objective Rollup Process (RB.1.2)\n        if (parent.sequencingControls.rollupObjectiveSatisfied) {\n          this.objectiveRollupProcess(parent);\n        }\n\n        // Step 3: Activity Progress Rollup Process (RB.1.3)\n        if (parent.sequencingControls.rollupProgressCompletion) {\n          this.activityProgressRollupProcess(parent);\n        }\n      }\n\n      // Move up the tree\n      currentActivity = parent;\n    }\n  }\n\n  /**\n   * Measure Rollup Process (RB.1.1)\n   * Rolls up objective measure (score) from children to parent\n   * INTEGRATION: Uses complex weighted measure calculation\n   * @param {Activity} activity - The parent activity\n   */\n  private measureRollupProcess(activity: Activity): void {\n    if (!activity.sequencingControls.rollupObjectiveSatisfied) {\n      return;\n    }\n\n    const children = activity.getAvailableChildren();\n    if (children.length === 0) {\n      return;\n    }\n\n    // INTEGRATION: Use complex weighted measure calculation instead of simple calculation\n    // Determine if there are any valid child measures\n    const hasValidMeasures = children.some(\n      (c) => this.checkChildForRollupSubprocess(c, \"measure\") && c.objectiveMeasureStatus && c.objectiveNormalizedMeasure !== null,\n    );\n\n    if (!hasValidMeasures) {\n      activity.objectiveMeasureStatus = false;\n      return;\n    }\n\n    const complexWeightedMeasure = this.calculateComplexWeightedMeasure(activity, children, { enableThresholdBias: false });\n    activity.objectiveNormalizedMeasure = complexWeightedMeasure;\n    activity.objectiveMeasureStatus = true;\n\n    // INTEGRATION: Process cross-cluster dependencies if dealing with activity clusters\n    const clusters = this.identifyActivityClusters(children);\n    if (clusters.length > 1) {\n      this.processCrossClusterDependencies(activity, clusters);\n    }\n  }\n\n  /**\n   * Objective Rollup Process (RB.1.2)\n   * Determines objective satisfaction status using rules, measure, or default\n   * @param {Activity} activity - The parent activity\n   */\n  private objectiveRollupProcess(activity: Activity): void {\n    const rollupRules = activity.rollupRules;\n\n    // First, try rollup using rules (RB.1.2.b)\n    const ruleResult = this.objectiveRollupUsingRules(activity, rollupRules.rules);\n    if (ruleResult !== null) {\n      activity.objectiveSatisfiedStatus = ruleResult;\n      return;\n    }\n\n    // Then, try rollup using measure (RB.1.2.a)\n    const measureResult = this.objectiveRollupUsingMeasure(activity);\n    if (measureResult !== null) {\n      activity.objectiveSatisfiedStatus = measureResult;\n      return;\n    }\n\n    // Finally, use default rollup (RB.1.2.c)\n    activity.objectiveSatisfiedStatus = this.objectiveRollupUsingDefault(activity);\n  }\n\n  /**\n   * Objective Rollup Using Rules (RB.1.2.b)\n   * @param {Activity} activity - The parent activity\n   * @param {RollupRule[]} rules - The rollup rules to evaluate\n   * @return {boolean | null} - True if satisfied, false if not, null if no rule applies\n   */\n  private objectiveRollupUsingRules(activity: Activity, rules: RollupRule[]): boolean | null {\n    // Get satisfied and not satisfied rules\n    const satisfiedRules = rules.filter(rule =>\n      rule.action === RollupActionType.SATISFIED\n    );\n\n    const notSatisfiedRules = rules.filter(rule =>\n      rule.action === RollupActionType.NOT_SATISFIED\n    );\n\n    // Evaluate satisfied rules first\n    for (const rule of satisfiedRules) {\n      if (this.evaluateRollupRule(activity, rule)) {\n        return true;\n      }\n    }\n\n    // Then evaluate not satisfied rules\n    for (const rule of notSatisfiedRules) {\n      if (this.evaluateRollupRule(activity, rule)) {\n        return false;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Objective Rollup Using Measure (RB.1.2.a)\n   * @param {Activity} activity - The parent activity\n   * @return {boolean | null} - True if satisfied, false if not, null if no measure\n   */\n  private objectiveRollupUsingMeasure(activity: Activity): boolean | null {\n    if (!activity.objectiveMeasureStatus || activity.scaledPassingScore === null) {\n      return null;\n    }\n\n    return activity.objectiveNormalizedMeasure >= activity.scaledPassingScore;\n  }\n\n  /**\n   * Objective Rollup Using Default (RB.1.2.c)\n   * @param {Activity} activity - The parent activity\n   * @return {boolean} - True if all tracked children are satisfied\n   */\n  private objectiveRollupUsingDefault(activity: Activity): boolean {\n    const children = activity.getAvailableChildren();\n\n    // If no children, not satisfied\n    if (children.length === 0) {\n      return false;\n    }\n\n    // Check if all tracked children are satisfied\n    for (const child of children) {\n      if (this.checkChildForRollupSubprocess(child, \"objective\")) {\n        if (!child.objectiveSatisfiedStatus) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Activity Progress Rollup Process (RB.1.3)\n   * Determines activity completion status\n   * @param {Activity} activity - The parent activity\n   */\n  private activityProgressRollupProcess(activity: Activity): void {\n    const rollupRules = activity.rollupRules;\n\n    // Get completion rules\n    const completedRules = rollupRules.rules.filter(rule =>\n      rule.action === RollupActionType.COMPLETED\n    );\n\n    const incompleteRules = rollupRules.rules.filter(rule =>\n      rule.action === RollupActionType.INCOMPLETE\n    );\n\n    // Evaluate completed rules first\n    for (const rule of completedRules) {\n      if (this.evaluateRollupRule(activity, rule)) {\n        activity.completionStatus = \"completed\";\n        return;\n      }\n    }\n\n    // Then evaluate incomplete rules\n    for (const rule of incompleteRules) {\n      if (this.evaluateRollupRule(activity, rule)) {\n        activity.completionStatus = \"incomplete\";\n        return;\n      }\n    }\n\n    // Default: completed if all tracked children are completed\n    const children = activity.getAvailableChildren();\n    let allCompleted = true;\n\n    for (const child of children) {\n      if (this.checkChildForRollupSubprocess(child, \"progress\")) {\n        if (child.completionStatus !== \"completed\") {\n          allCompleted = false;\n          break;\n        }\n      }\n    }\n\n    activity.completionStatus = allCompleted ? \"completed\" : \"incomplete\";\n  }\n\n  /**\n   * Check Child For Rollup Subprocess (RB.1.4.2)\n   * Determines if a child activity contributes to rollup\n   * @param {Activity} child - The child activity to check\n   * @param {string} rollupType - Type of rollup (\"measure\", \"objective\", \"progress\")\n   * @return {boolean} - True if child contributes to rollup\n   */\n  private checkChildForRollupSubprocess(child: Activity, rollupType: string): boolean {\n    // Check if child is tracked\n    switch (rollupType) {\n      case \"measure\":\n      case \"objective\":\n        if (!child.sequencingControls.rollupObjectiveSatisfied) {\n          return false;\n        }\n        break;\n      case \"progress\":\n        if (!child.sequencingControls.rollupProgressCompletion) {\n          return false;\n        }\n        break;\n    }\n\n    // Check if child is available for rollup\n    if (!child.isAvailable) {\n      return false;\n    }\n\n    // Additional checks can be added here based on rollup configuration\n\n    return true;\n  }\n\n  /**\n   * Evaluate a rollup rule\n   * @param {Activity} activity - The parent activity\n   * @param {RollupRule} rule - The rule to evaluate\n   * @return {boolean} - True if the rule applies\n   */\n  private evaluateRollupRule(activity: Activity, rule: RollupRule): boolean {\n    const children = activity.getAvailableChildren();\n    let contributingChildren = 0;\n    let satisfiedCount = 0;\n\n    // Count children that meet the rule conditions\n    for (const child of children) {\n      // Check if child contributes based on rule action\n      let contributes = false;\n      switch (rule.action) {\n        case RollupActionType.SATISFIED:\n        case RollupActionType.NOT_SATISFIED:\n          contributes = this.checkChildForRollupSubprocess(child, \"objective\");\n          break;\n        case RollupActionType.COMPLETED:\n        case RollupActionType.INCOMPLETE:\n          contributes = this.checkChildForRollupSubprocess(child, \"progress\");\n          break;\n      }\n\n      if (contributes) {\n        contributingChildren++;\n\n        // Evaluate rule conditions for this child using RB.1.4.1\n        if (this.evaluateRollupConditionsSubprocess(child, rule)) {\n          satisfiedCount++;\n        }\n      }\n    }\n\n    // Apply minimum count/percent logic OR consideration type\n    if (rule.consideration === RollupConsiderationType.ALL) {\n      // For ALL consideration, all contributing children must satisfy\n      return contributingChildren > 0 && satisfiedCount === contributingChildren;\n    } else if (rule.minimumCount !== null) {\n      return satisfiedCount >= rule.minimumCount;\n    } else if (rule.minimumPercent !== null) {\n      const percent = contributingChildren > 0 ? (satisfiedCount / contributingChildren) : 0;\n      return percent >= rule.minimumPercent;\n    }\n\n    // Default: all contributing children must satisfy\n    return contributingChildren > 0 && satisfiedCount === contributingChildren;\n  }\n\n  /**\n   * Evaluate Rollup Conditions Subprocess (RB.1.4.1)\n   * Evaluates if rollup rule conditions are met for a given activity\n   * @param {Activity} child - The child activity to evaluate\n   * @param {RollupRule} rule - The rollup rule containing conditions to evaluate\n   * @return {boolean} - True if all conditions are met, false otherwise\n   */\n  private evaluateRollupConditionsSubprocess(child: Activity, rule: RollupRule): boolean {\n    // If no conditions are specified, the rule always applies\n    if (rule.conditions.length === 0) {\n      return true;\n    }\n\n    // Evaluate based on the rule's consideration type\n    switch (rule.consideration) {\n      case RollupConsiderationType.ALL:\n        // All conditions must be met\n        return rule.conditions.every(condition => condition.evaluate(child));\n\n      case RollupConsiderationType.ANY:\n        // At least one condition must be met\n        return rule.conditions.some(condition => condition.evaluate(child));\n\n      case RollupConsiderationType.NONE:\n        // No conditions should be met\n        return !rule.conditions.some(condition => condition.evaluate(child));\n\n      case RollupConsiderationType.AT_LEAST_COUNT:\n      case RollupConsiderationType.AT_LEAST_PERCENT:\n        // These are handled at the rule level, not condition level\n        // For individual condition evaluation, treat as ALL\n        return rule.conditions.every(condition => condition.evaluate(child));\n\n      default:\n        // Unknown consideration type, default to false\n        return false;\n    }\n  }\n\n  /**\n   * Priority 5 Gap: Validate rollup state consistency across the activity tree\n   * Ensures that rollup states are consistent and valid before processing\n   * @param {Activity} rootActivity - The root activity to validate from\n   * @return {boolean} - True if state is consistent, false otherwise\n   */\n  public validateRollupStateConsistency(rootActivity: Activity): boolean {\n    try {\n      this.eventCallback?.(\"rollup_validation_started\", {\n        activityId: rootActivity.id,\n        timestamp: new Date().toISOString()\n      });\n\n      const inconsistencies: string[] = [];\n\n      // Validate the entire tree recursively\n      this.validateActivityRollupState(rootActivity, inconsistencies);\n\n      if (inconsistencies.length > 0) {\n        this.eventCallback?.(\"rollup_state_inconsistencies\", {\n          activityId: rootActivity.id,\n          inconsistencies,\n          count: inconsistencies.length\n        });\n        return false;\n      }\n\n      this.eventCallback?.(\"rollup_validation_completed\", {\n        activityId: rootActivity.id,\n        result: \"consistent\"\n      });\n      return true;\n    } catch (error) {\n      this.eventCallback?.(\"rollup_validation_error\", {\n        activityId: rootActivity.id,\n        error: error instanceof Error ? error.message : String(error)\n      });\n      return false;\n    }\n  }\n\n  /**\n   * Priority 5 Gap: Process global objective mapping for shared objectives\n   * Handles cross-activity objective synchronization and global state management\n   * @param {Activity} activity - The activity to process objectives for\n   * @param {Map<string, any>} globalObjectives - Global objective map\n   */\n  public processGlobalObjectiveMapping(activity: Activity, globalObjectives: Map<string, any>): void {\n    try {\n      this.eventCallback?.(\"global_objective_processing_started\", {\n        activityId: activity.id,\n        globalObjectiveCount: globalObjectives.size\n      });\n\n      // Process shared objectives for this activity\n      this.synchronizeGlobalObjectives(activity, globalObjectives);\n\n      // Process children recursively\n      const children = activity.getAvailableChildren();\n      for (const child of children) {\n        this.processGlobalObjectiveMapping(child, globalObjectives);\n      }\n\n      this.eventCallback?.(\"global_objective_processing_completed\", {\n        activityId: activity.id,\n        processedObjectives: globalObjectives.size\n      });\n    } catch (error) {\n      this.eventCallback?.(\"global_objective_processing_error\", {\n        activityId: activity.id,\n        error: error instanceof Error ? error.message : String(error)\n      });\n    }\n  }\n\n  /**\n   * Priority 5 Gap: Handle complex objective weighting scenarios\n   * Supports weighted rollup calculations with complex dependency chains\n   * INTEGRATION: Now properly integrated into measureRollupProcess\n   * @param {Activity} activity - The parent activity\n   * @param {Activity[]} children - Child activities to weight\n   * @return {number} - Calculated weighted measure\n   */\n  public calculateComplexWeightedMeasure(\n    activity: Activity,\n    children: Activity[],\n    options?: { enableThresholdBias?: boolean }\n  ): number {\n    let totalWeightedMeasure = 0;\n    let totalWeight = 0;\n    const weightingLog: Array<{ childId: string, measure: number, weight: number }> = [];\n    const enableBias = options?.enableThresholdBias ?? true;\n\n    for (const child of children) {\n      if (!this.checkChildForRollupSubprocess(child, \"measure\")) {\n        continue;\n      }\n\n      if (child.objectiveMeasureStatus && child.objectiveNormalizedMeasure !== null) {\n        // Handle complex weighting scenarios\n        const baseWeight = child.sequencingControls.objectiveMeasureWeight;\n        const adjustedWeight = this.calculateAdjustedWeight(child, baseWeight, enableBias);\n        const contribution = child.objectiveNormalizedMeasure * adjustedWeight;\n\n        totalWeightedMeasure += contribution;\n        totalWeight += adjustedWeight;\n\n        weightingLog.push({\n          childId: child.id,\n          measure: child.objectiveNormalizedMeasure,\n          weight: adjustedWeight\n        });\n      }\n    }\n\n    this.eventCallback?.(\"complex_weighting_calculated\", {\n      activityId: activity.id,\n      weightingDetails: weightingLog,\n      totalWeight,\n      totalWeightedMeasure,\n      result: totalWeight > 0 ? totalWeightedMeasure / totalWeight : 0\n    });\n\n    return totalWeight > 0 ? totalWeightedMeasure / totalWeight : 0;\n  }\n\n  /**\n   * Priority 5 Gap: Handle cross-cluster dependencies in rollup\n   * Manages dependencies between activity clusters for accurate rollup\n   * INTEGRATION: Now properly integrated into rollup process\n   * @param {Activity} activity - The activity to process\n   * @param {Activity[]} clusters - Related activity clusters\n   */\n  public processCrossClusterDependencies(activity: Activity, clusters: Activity[]): void {\n    try {\n      this.eventCallback?.(\"cross_cluster_processing_started\", {\n        activityId: activity.id,\n        clusterCount: clusters.length\n      });\n\n      const dependencyMap = new Map<string, string[]>();\n\n      // Build dependency map across clusters\n      for (const cluster of clusters) {\n        this.analyzeCrossClusterDependencies(cluster, dependencyMap);\n      }\n\n      // Process dependencies in correct order\n      const processOrder = this.resolveDependencyOrder(dependencyMap);\n\n      for (const clusterId of processOrder) {\n        const cluster = clusters.find(c => c.id === clusterId);\n        if (cluster) {\n          this.processClusterRollup(cluster);\n        }\n      }\n\n      this.eventCallback?.(\"cross_cluster_processing_completed\", {\n        activityId: activity.id,\n        processedClusters: processOrder.length,\n        dependencyMap: Array.from(dependencyMap.entries())\n      });\n    } catch (error) {\n      this.eventCallback?.(\"cross_cluster_processing_error\", {\n        activityId: activity.id,\n        error: error instanceof Error ? error.message : String(error)\n      });\n    }\n  }\n\n  // Helper Methods for Priority 5 Gap Implementation\n\n  /**\n   * Validate rollup state for a single activity\n   */\n  private validateActivityRollupState(activity: Activity, inconsistencies: string[]): void {\n    const activityId = activity.id;\n\n    // Check measure status consistency\n    if (activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure === null) {\n      inconsistencies.push(`Activity ${activityId}: measure status true but normalized measure is null`);\n    }\n\n    // Check satisfaction status consistency with measure (only when success status is known)\n    if (\n      activity.objectiveMeasureStatus &&\n      activity.scaledPassingScore !== null &&\n      activity.successStatus !== \"unknown\"\n    ) {\n      const expectedSatisfied = activity.objectiveNormalizedMeasure >= activity.scaledPassingScore;\n      if (activity.objectiveSatisfiedStatus !== expectedSatisfied) {\n        inconsistencies.push(`Activity ${activityId}: satisfaction status inconsistent with measure`);\n      }\n    }\n\n    // Check rollup controls consistency\n    const controls = activity.sequencingControls;\n    if (!controls.rollupObjectiveSatisfied && !controls.rollupProgressCompletion) {\n      // Activity doesn't contribute to rollup but has rollup data\n      if (activity.objectiveMeasureStatus || activity.completionStatus !== \"unknown\") {\n        inconsistencies.push(`Activity ${activityId}: has rollup data but rollup controls disabled`);\n      }\n    }\n\n    // Check children consistency\n    const children = activity.getAvailableChildren();\n    for (const child of children) {\n      this.validateActivityRollupState(child, inconsistencies);\n    }\n\n    // Log validation state\n    this.rollupStateLog.push({\n      activity: activityId,\n      timestamp: new Date().toISOString(),\n      state: {\n        measureStatus: activity.objectiveMeasureStatus,\n        measure: activity.objectiveNormalizedMeasure,\n        satisfiedStatus: activity.objectiveSatisfiedStatus,\n        completionStatus: activity.completionStatus\n      }\n    });\n  }\n\n  /**\n   * Synchronize global objectives with activity-specific objectives\n   */\n  private synchronizeGlobalObjectives(activity: Activity, globalObjectives: Map<string, any>): void {\n    // Implementation would depend on the specific objective model\n    // For now, we'll implement a basic synchronization framework\n\n    const activityObjectives = this.getActivityObjectives(activity);\n\n    for (const objectiveId of activityObjectives) {\n      if (globalObjectives.has(objectiveId)) {\n        const globalObjective = globalObjectives.get(objectiveId);\n        this.syncObjectiveState(activity, objectiveId, globalObjective);\n      } else {\n        // Register new global objective\n        const localObjective = this.getLocalObjectiveState(activity, objectiveId);\n        globalObjectives.set(objectiveId, localObjective);\n      }\n    }\n  }\n\n  /**\n   * Calculate adjusted weight for complex weighting scenarios\n   */\n  private calculateAdjustedWeight(child: Activity, baseWeight: number, enableBias: boolean = true): number {\n    let adjustedWeight = baseWeight;\n\n    // Factor in completion status\n    if (child.completionStatus !== \"completed\") {\n      adjustedWeight *= 0.8; // Reduce weight for incomplete activities\n    }\n\n    // Factor in attempt count (penalize multiple attempts)\n    if (child.attemptCount > 1) {\n      const attemptPenalty = Math.max(0.5, 1 - (child.attemptCount - 1) * 0.1);\n      adjustedWeight *= attemptPenalty;\n    }\n\n    // Factor in time limits if exceeded\n    if (child.hasAttemptLimitExceeded()) {\n      adjustedWeight *= 0.6; // Significant penalty for exceeding limits\n    }\n\n    // Bias by relation to passing threshold when available\n    if (enableBias && child.objectiveMeasureStatus) {\n      const threshold = child.scaledPassingScore ?? 0.7;\n      if (child.objectiveNormalizedMeasure >= threshold) {\n        adjustedWeight *= 1.05; // small boost for above-threshold performance\n      } else {\n        adjustedWeight *= 0.95; // small penalty for below-threshold performance\n      }\n    }\n\n    return Math.max(0, adjustedWeight); // Ensure non-negative weight\n  }\n\n  /**\n   * Analyze cross-cluster dependencies\n   */\n  private analyzeCrossClusterDependencies(cluster: Activity, dependencyMap: Map<string, string[]>): void {\n    // Build dependency relationships based on sequencing rules and prerequisites\n    const dependencies: string[] = [];\n\n    // Check sequencing rules for dependencies\n    const sequencingRules = cluster.sequencingRules;\n    // Implementation would analyze rules to identify dependencies\n\n    dependencyMap.set(cluster.id, dependencies);\n  }\n\n  /**\n   * Resolve dependency processing order\n   */\n  private resolveDependencyOrder(dependencyMap: Map<string, string[]>): string[] {\n    const resolved: string[] = [];\n    const resolving: Set<string> = new Set();\n\n    const resolve = (id: string): void => {\n      if (resolved.includes(id)) return;\n      if (resolving.has(id)) {\n        // Circular dependency detected - log warning and continue\n        this.eventCallback?.(\"circular_dependency_detected\", { activityId: id });\n        return;\n      }\n\n      resolving.add(id);\n      const dependencies = dependencyMap.get(id) || [];\n\n      for (const depId of dependencies) {\n        resolve(depId);\n      }\n\n      resolving.delete(id);\n      resolved.push(id);\n    };\n\n    for (const id of Array.from(dependencyMap.keys())) {\n      resolve(id);\n    }\n\n    return resolved;\n  }\n\n  /**\n   * Process rollup for a specific cluster\n   */\n  private processClusterRollup(cluster: Activity): void {\n    // Perform standard rollup process for the cluster\n    this.measureRollupProcess(cluster);\n\n    if (cluster.sequencingControls.rollupObjectiveSatisfied) {\n      this.objectiveRollupProcess(cluster);\n    }\n\n    if (cluster.sequencingControls.rollupProgressCompletion) {\n      this.activityProgressRollupProcess(cluster);\n    }\n  }\n\n  /**\n   * Get activity objectives (implementation depends on objective model)\n   */\n  private getActivityObjectives(activity: Activity): string[] {\n    // This would return the list of objective IDs associated with the activity\n    // For now, return a basic implementation\n    return [activity.id + \"_primary_objective\"];\n  }\n\n  /**\n   * Synchronize objective state between local and global according to SCORM 2004 specification\n   */\n  private syncObjectiveState(activity: Activity, objectiveId: string, globalObjective: any): void {\n    try {\n      // Get current local objective state\n      const localObjective = this.getLocalObjectiveState(activity, objectiveId);\n\n      // Perform bidirectional synchronization according to SCORM 2004 rules\n\n      // 1. Read from global to local (if readSatisfiedStatus is true)\n      if (globalObjective.readSatisfiedStatus && globalObjective.satisfiedStatusKnown) {\n        activity.objectiveSatisfiedStatus = globalObjective.satisfiedStatus;\n        activity.objectiveMeasureStatus = true; // Mark as known\n      }\n\n      // 2. Read normalized measure from global to local (if readNormalizedMeasure is true)\n      if (globalObjective.readNormalizedMeasure && globalObjective.normalizedMeasureKnown) {\n        activity.objectiveNormalizedMeasure = globalObjective.normalizedMeasure;\n        activity.objectiveMeasureStatus = true;\n\n        // Update satisfaction based on measure if satisfiedByMeasure is true\n        if (globalObjective.satisfiedByMeasure) {\n          const scaledPassingScore = activity.scaledPassingScore || 0.7; // Default to 0.7\n          activity.objectiveSatisfiedStatus = globalObjective.normalizedMeasure >= scaledPassingScore;\n        }\n      }\n\n      // 3. Write from local to global (if writeSatisfiedStatus is true)\n      if (globalObjective.writeSatisfiedStatus && activity.objectiveMeasureStatus) {\n        globalObjective.satisfiedStatus = activity.objectiveSatisfiedStatus;\n        globalObjective.satisfiedStatusKnown = true;\n      }\n\n      // 4. Write normalized measure from local to global (if writeNormalizedMeasure is true)\n      if (globalObjective.writeNormalizedMeasure && activity.objectiveMeasureStatus) {\n        globalObjective.normalizedMeasure = activity.objectiveNormalizedMeasure;\n        globalObjective.normalizedMeasureKnown = true;\n\n        // Update global satisfaction based on measure if satisfiedByMeasure is true\n        if (globalObjective.satisfiedByMeasure) {\n          const scaledPassingScore = activity.scaledPassingScore || 0.7;\n          globalObjective.satisfiedStatus = activity.objectiveNormalizedMeasure >= scaledPassingScore;\n          globalObjective.satisfiedStatusKnown = true;\n        }\n      }\n\n      // 5. Handle objective completion status synchronization\n      if (globalObjective.writeCompletionStatus && activity.completionStatus !== \"unknown\") {\n        globalObjective.completionStatus = activity.completionStatus;\n        globalObjective.completionStatusKnown = true;\n      }\n\n      if (globalObjective.readCompletionStatus && globalObjective.completionStatusKnown) {\n        activity.completionStatus = globalObjective.completionStatus;\n      }\n\n      // 6. Handle progress measure synchronization\n      if (globalObjective.writeProgressMeasure && activity.progressMeasureStatus) {\n        globalObjective.progressMeasure = activity.progressMeasure;\n        globalObjective.progressMeasureKnown = true;\n      }\n\n      if (globalObjective.readProgressMeasure && globalObjective.progressMeasureKnown) {\n        activity.progressMeasure = globalObjective.progressMeasure;\n        activity.progressMeasureStatus = true;\n      }\n\n      // 7. Update activity attempt data based on global state\n      if (globalObjective.updateAttemptData) {\n        this.updateActivityAttemptData(activity, globalObjective);\n      }\n\n      // 8. Fire synchronization event for monitoring/logging\n      this.eventCallback?.(\"objective_synchronized\", {\n        activityId: activity.id,\n        objectiveId,\n        localState: localObjective,\n        globalState: globalObjective,\n        synchronizationTime: new Date().toISOString()\n      });\n\n    } catch (error) {\n      // Log synchronization error but don't fail the rollup process\n      this.eventCallback?.(\"objective_sync_error\", {\n        activityId: activity.id,\n        objectiveId,\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: new Date().toISOString()\n      });\n    }\n  }\n\n  /**\n   * Update activity attempt data based on global objective state\n   */\n  private updateActivityAttemptData(activity: Activity, globalObjective: any): void {\n    try {\n      // Update attempt completion based on global objective satisfaction\n      if (globalObjective.satisfiedStatusKnown && globalObjective.satisfiedStatus) {\n        // If global objective is satisfied, update local completion data\n        if (activity.completionStatus === \"unknown\" || activity.completionStatus === \"incomplete\") {\n          activity.completionStatus = \"completed\";\n        }\n\n        // Update success status based on objective satisfaction\n        if (activity.successStatus === \"unknown\") {\n          activity.successStatus = \"passed\";\n        }\n      }\n\n      // Update attempt count if global objective indicates new attempt\n      if (globalObjective.attemptCount && globalObjective.attemptCount > activity.attemptCount) {\n        activity.attemptCount = globalObjective.attemptCount;\n      }\n\n      // Update completion amount based on progress measure\n      if (globalObjective.progressMeasureKnown && globalObjective.progressMeasure !== undefined) {\n        activity.attemptCompletionAmount = globalObjective.progressMeasure;\n      }\n\n      // Update absolute duration from global timing data\n      if (globalObjective.attemptAbsoluteDuration) {\n        activity.attemptAbsoluteDuration = globalObjective.attemptAbsoluteDuration;\n      }\n\n      if (globalObjective.attemptExperiencedDuration) {\n        activity.attemptExperiencedDuration = globalObjective.attemptExperiencedDuration;\n      }\n\n      // Update activity-level durations\n      if (globalObjective.activityAbsoluteDuration) {\n        activity.activityAbsoluteDuration = globalObjective.activityAbsoluteDuration;\n      }\n\n      if (globalObjective.activityExperiencedDuration) {\n        activity.activityExperiencedDuration = globalObjective.activityExperiencedDuration;\n      }\n\n      // Update location if provided by global state\n      if (globalObjective.location !== undefined) {\n        activity.location = globalObjective.location;\n      }\n\n      // Update suspension state based on global objective\n      if (globalObjective.suspendData !== undefined) {\n        activity.isSuspended = globalObjective.suspendData.length > 0;\n      }\n\n    } catch (error) {\n      // Log attempt data update error\n      this.eventCallback?.(\"attempt_data_update_error\", {\n        activityId: activity.id,\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: new Date().toISOString()\n      });\n    }\n  }\n\n  /**\n   * Get local objective state\n   */\n  private getLocalObjectiveState(activity: Activity, objectiveId: string): any {\n    // Return current local state for the objective\n    return {\n      id: objectiveId,\n      satisfiedStatus: activity.objectiveSatisfiedStatus,\n      measureStatus: activity.objectiveMeasureStatus,\n      normalizedMeasure: activity.objectiveNormalizedMeasure,\n      scaledPassingScore: activity.scaledPassingScore\n    };\n  }\n\n  /**\n   * INTEGRATION: Identify Activity Clusters\n   * Identifies clusters among child activities for cross-cluster dependency processing\n   * @param {Activity[]} children - Child activities to analyze\n   * @return {Activity[]} - Array of identified clusters\n   */\n  private identifyActivityClusters(children: Activity[]): Activity[] {\n    const clusters: Activity[] = [];\n\n    for (const child of children) {\n      // An activity is considered a cluster if it has children and flow controls\n      if (child.children.length > 0 && child.sequencingControls.flow) {\n        clusters.push(child);\n      }\n    }\n\n    return clusters;\n  }\n\n}\n","import { Activity } from \"./activity\";\nimport { SelectionTiming, RandomizationTiming } from \"./sequencing_controls\";\n\n/**\n * Class implementing SCORM 2004 Selection and Randomization processes (SR.1 and SR.2)\n */\nexport class SelectionRandomization {\n  /**\n   * Select Children Process (SR.1)\n   * Selects a subset of child activities based on selection controls\n   * @param {Activity} activity - The parent activity whose children need to be selected\n   * @return {Activity[]} - The selected child activities\n   */\n  public static selectChildrenProcess(activity: Activity): Activity[] {\n    const controls = activity.sequencingControls;\n    const children = [...activity.children]; // Create a copy to avoid mutating original\n\n    // Check if selection should occur\n    if (controls.selectionTiming === SelectionTiming.NEVER) {\n      return children;\n    }\n\n    // Check if selection has already been done (for ONCE timing)\n    if (\n      controls.selectionTiming === SelectionTiming.ONCE &&\n      controls.selectionCountStatus\n    ) {\n      return children;\n    }\n\n    // Check if we need to select children\n    const selectCount = controls.selectCount;\n    if (selectCount === null || selectCount >= children.length) {\n      // Mark selection as done if timing is ONCE\n      if (controls.selectionTiming === SelectionTiming.ONCE) {\n        controls.selectionCountStatus = true;\n      }\n      return children;\n    }\n\n    // Perform selection\n    const selectedChildren: Activity[] = [];\n    const availableIndices = children.map((_, index) => index);\n\n    // Randomly select children\n    for (let i = 0; i < selectCount; i++) {\n      if (availableIndices.length === 0) break;\n      \n      const randomIndex = Math.floor(Math.random() * availableIndices.length);\n      const childIndex = availableIndices[randomIndex];\n      if (childIndex !== undefined && children[childIndex]) {\n        selectedChildren.push(children[childIndex]);\n      }\n      \n      // Remove selected index from available indices\n      availableIndices.splice(randomIndex, 1);\n    }\n\n    // Mark selection as done only if timing is ONCE\n    if (controls.selectionTiming === SelectionTiming.ONCE) {\n      controls.selectionCountStatus = true;\n    }\n\n    // Hide non-selected children from choice\n    for (const child of children) {\n      if (!selectedChildren.includes(child)) {\n        child.isHiddenFromChoice = true;\n        child.isAvailable = false;\n      }\n    }\n\n    return selectedChildren;\n  }\n\n  /**\n   * Randomize Children Process (SR.2)\n   * Randomizes the order of child activities based on randomization controls\n   * @param {Activity} activity - The parent activity whose children need to be randomized\n   * @return {Activity[]} - The randomized child activities\n   */\n  public static randomizeChildrenProcess(activity: Activity): Activity[] {\n    const controls = activity.sequencingControls;\n    const children = [...activity.children]; // Create a copy to avoid mutating original\n\n    // Check if randomization should occur\n    if (controls.randomizationTiming === RandomizationTiming.NEVER) {\n      return children;\n    }\n\n    // Check if randomization has already been done (for ONCE timing)\n    if (\n      controls.randomizationTiming === RandomizationTiming.ONCE &&\n      controls.reorderChildren\n    ) {\n      return children;\n    }\n\n    // Check if we need to randomize\n    if (!controls.randomizeChildren) {\n      return children;\n    }\n\n    // Perform Fisher-Yates shuffle\n    const randomizedChildren = [...children];\n    for (let i = randomizedChildren.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const tempI = randomizedChildren[i];\n      const tempJ = randomizedChildren[j];\n      if (tempI && tempJ) {\n        randomizedChildren[i] = tempJ;\n        randomizedChildren[j] = tempI;\n      }\n    }\n\n    // Mark randomization as done only if timing is ONCE\n    if (controls.randomizationTiming === RandomizationTiming.ONCE) {\n      controls.reorderChildren = true;\n    }\n\n    // Update the activity's children array with the new order\n    activity.children.length = 0;\n    activity.children.push(...randomizedChildren);\n\n    return randomizedChildren;\n  }\n\n  /**\n   * Apply selection and randomization to an activity\n   * This combines both SR.1 and SR.2 processes\n   * @param {Activity} activity - The parent activity\n   * @param {boolean} isNewAttempt - Whether this is a new attempt on the activity\n   * @return {Activity[]} - The processed child activities\n   */\n  public static applySelectionAndRandomization(\n    activity: Activity,\n    isNewAttempt: boolean = false,\n  ): Activity[] {\n    const controls = activity.sequencingControls;\n\n    // Check if we should apply selection/randomization\n    let shouldApplySelection = false;\n    let shouldApplyRandomization = false;\n\n    // For ON_EACH_NEW_ATTEMPT timing, only apply on new attempts\n    if (controls.selectionTiming === SelectionTiming.ON_EACH_NEW_ATTEMPT) {\n      shouldApplySelection = isNewAttempt;\n      if (isNewAttempt) {\n        controls.selectionCountStatus = false;\n      }\n    } else if (controls.selectionTiming === SelectionTiming.ONCE) {\n      shouldApplySelection = !controls.selectionCountStatus;\n    }\n\n    if (controls.randomizationTiming === RandomizationTiming.ON_EACH_NEW_ATTEMPT) {\n      shouldApplyRandomization = isNewAttempt;\n      if (isNewAttempt) {\n        controls.reorderChildren = false;\n      }\n    } else if (controls.randomizationTiming === RandomizationTiming.ONCE) {\n      shouldApplyRandomization = !controls.reorderChildren;\n    }\n\n    // Apply selection first if needed\n    if (shouldApplySelection) {\n      this.selectChildrenProcess(activity);\n    }\n\n    // Then apply randomization if needed\n    if (shouldApplyRandomization) {\n      this.randomizeChildrenProcess(activity);\n    }\n\n    // Get the final processed children\n    const processedChildren = activity.children.filter(child => child.isAvailable);\n    \n    // Store the processed children on the activity\n    activity.setProcessedChildren(processedChildren);\n    \n    return processedChildren;\n  }\n\n  /**\n   * Check if selection is needed for an activity\n   * @param {Activity} activity - The activity to check\n   * @return {boolean} - True if selection is needed\n   */\n  public static isSelectionNeeded(activity: Activity): boolean {\n    const controls = activity.sequencingControls;\n    \n    if (controls.selectionTiming === SelectionTiming.NEVER) {\n      return false;\n    }\n\n    if (\n      controls.selectionTiming === SelectionTiming.ONCE &&\n      controls.selectionCountStatus\n    ) {\n      return false;\n    }\n\n    return controls.selectCount !== null && controls.selectCount < activity.children.length;\n  }\n\n  /**\n   * Check if randomization is needed for an activity\n   * @param {Activity} activity - The activity to check\n   * @return {boolean} - True if randomization is needed\n   */\n  public static isRandomizationNeeded(activity: Activity): boolean {\n    const controls = activity.sequencingControls;\n    \n    if (controls.randomizationTiming === RandomizationTiming.NEVER) {\n      return false;\n    }\n\n    if (\n      controls.randomizationTiming === RandomizationTiming.ONCE &&\n      controls.reorderChildren\n    ) {\n      return false;\n    }\n\n    return controls.randomizeChildren;\n  }\n}","import { Activity } from \"./activity\";\nimport { ActivityTree } from \"./activity_tree\";\nimport {\n  RuleActionType,\n  RuleConditionOperator,\n  SequencingRule,\n  SequencingRules\n} from \"./sequencing_rules\";\nimport { SequencingControls } from \"./sequencing_controls\";\nimport { ADLNav } from \"../adl\";\nimport { getDurationAsSeconds } from \"../../../utilities\";\nimport { scorm2004_regex } from \"../../../constants/regex\";\nimport { SelectionRandomization } from \"./selection_randomization\";\n\n/**\n * Enum for sequencing request types\n */\nexport enum SequencingRequestType {\n  START = \"start\",\n  RESUME_ALL = \"resumeAll\",\n  CONTINUE = \"continue\",\n  PREVIOUS = \"previous\",\n  CHOICE = \"choice\",\n  JUMP = \"jump\",\n  EXIT = \"exit\",\n  EXIT_ALL = \"exitAll\",\n  ABANDON = \"abandon\",\n  ABANDON_ALL = \"abandonAll\",\n  SUSPEND_ALL = \"suspendAll\",\n  RETRY = \"retry\",\n  RETRY_ALL = \"retryAll\",\n}\n\n/**\n * Enum for delivery request types\n */\nexport enum DeliveryRequestType {\n  DELIVER = \"deliver\",\n  DO_NOT_DELIVER = \"doNotDeliver\",\n}\n\n/**\n * Class representing the result of a sequencing process\n */\nexport class SequencingResult {\n  public deliveryRequest: DeliveryRequestType;\n  public targetActivity: Activity | null;\n  public exception: string | null;\n\n  constructor(\n    deliveryRequest: DeliveryRequestType = DeliveryRequestType.DO_NOT_DELIVER,\n    targetActivity: Activity | null = null,\n    exception: string | null = null\n  ) {\n    this.deliveryRequest = deliveryRequest;\n    this.targetActivity = targetActivity;\n    this.exception = exception;\n  }\n}\n\n/**\n * Class implementing SCORM 2004 sequencing processes\n */\nexport class SequencingProcess {\n  private activityTree: ActivityTree;\n  private sequencingRules: SequencingRules | null;\n  private sequencingControls: SequencingControls | null;\n  private adlNav: ADLNav | null;\n  private now: () => Date;\n  private getAttemptElapsedSecondsHook: ((activity: Activity) => number) | undefined;\n  private getActivityElapsedSecondsHook: ((activity: Activity) => number) | undefined;\n\n  constructor(\n    activityTree: ActivityTree,\n    sequencingRules?: SequencingRules | null,\n    sequencingControls?: SequencingControls | null,\n    adlNav: ADLNav | null = null,\n    options?: {\n      now?: () => Date;\n      getAttemptElapsedSeconds?: (activity: Activity) => number;\n      getActivityElapsedSeconds?: (activity: Activity) => number;\n    }\n  ) {\n    this.activityTree = activityTree;\n    this.sequencingRules = sequencingRules || null;\n    this.sequencingControls = sequencingControls || null;\n    this.adlNav = adlNav;\n    this.now = options?.now || (() => new Date());\n    this.getAttemptElapsedSecondsHook = (options?.getAttemptElapsedSeconds as\n      | ((activity: Activity) => number)\n      | undefined);\n    this.getActivityElapsedSecondsHook = (options?.getActivityElapsedSeconds as\n      | ((activity: Activity) => number)\n      | undefined);\n  }\n\n  /**\n   * Main Sequencing Request Process (SB.2.12)\n   * This is the main entry point for all navigation requests\n   * @param {SequencingRequestType} request - The sequencing request\n   * @param {string} targetActivityId - The target activity ID (for choice/jump)\n   * @return {SequencingResult} - The result of the sequencing process\n   */\n  public sequencingRequestProcess(\n    request: SequencingRequestType,\n    targetActivityId: string | null = null\n  ): SequencingResult {\n    // Initialize result\n    const result = new SequencingResult();\n\n    // Get current activity\n    const currentActivity = this.activityTree.currentActivity;\n    const suspendedActivity = this.activityTree.suspendedActivity;\n\n    // Process based on request type\n    switch (request) {\n      case SequencingRequestType.START:\n        return this.startSequencingRequestProcess();\n\n      case SequencingRequestType.RESUME_ALL:\n        return this.resumeAllSequencingRequestProcess();\n\n      case SequencingRequestType.CONTINUE:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.continueSequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.PREVIOUS:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.previousSequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.CHOICE:\n        if (!targetActivityId) {\n          result.exception = \"SB.2.12-5\"; // No target specified\n          return result;\n        }\n        return this.choiceSequencingRequestProcess(targetActivityId, currentActivity);\n\n      case SequencingRequestType.JUMP:\n        if (!targetActivityId) {\n          result.exception = \"SB.2.12-5\"; // No target specified\n          return result;\n        }\n        return this.jumpSequencingRequestProcess(targetActivityId);\n\n      case SequencingRequestType.EXIT:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.exitSequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.EXIT_ALL:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.exitAllSequencingRequestProcess();\n\n      case SequencingRequestType.ABANDON:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.abandonSequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.ABANDON_ALL:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.abandonAllSequencingRequestProcess();\n\n      case SequencingRequestType.SUSPEND_ALL:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.suspendAllSequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.RETRY:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.retrySequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.RETRY_ALL:\n        return this.retryAllSequencingRequestProcess();\n\n      default:\n        result.exception = \"SB.2.12-6\"; // Undefined sequencing request\n        return result;\n    }\n  }\n\n  /**\n   * Start Sequencing Request Process (SB.2.5)\n   * Determines the first activity to deliver when starting\n   * @return {SequencingResult}\n   */\n  private startSequencingRequestProcess(): SequencingResult {\n    const result = new SequencingResult();\n    const root = this.activityTree.root;\n\n    if (!root) {\n      result.exception = \"SB.2.5-1\"; // No activity tree\n      return result;\n    }\n\n    // Check if sequencing session has already begun\n    if (this.activityTree.currentActivity !== null) {\n      result.exception = \"SB.2.5-2\"; // Sequencing session already begun\n      return result;\n    }\n\n    // For START, we need to flow into the activity tree from the root\n    // Start with the root and find first deliverable leaf activity\n    const deliverableActivity = this.findFirstDeliverableActivity(root);\n\n    if (!deliverableActivity) {\n      result.exception = \"SB.2.5-3\"; // No activity available\n      return result;\n    }\n\n    // Deliver the identified activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = deliverableActivity;\n    return result;\n  }\n\n  /**\n   * Find First Deliverable Activity\n   * Recursively searches from the given activity to find the first deliverable leaf\n   * @param {Activity} activity - The activity to start searching from\n   * @return {Activity | null} - The first deliverable activity, or null if none found\n   */\n  private findFirstDeliverableActivity(activity: Activity): Activity | null {\n    // Check if this activity can be delivered (leaf activity)\n    if (activity.children.length === 0) {\n      // This is a leaf - check if it can be delivered\n      if (this.checkActivityProcess(activity)) {\n        return activity;\n      }\n      return null;\n    }\n\n    // This is a cluster - look through children for deliverable activity\n    this.ensureSelectionAndRandomization(activity);\n    const children = activity.getAvailableChildren();\n\n    for (const child of children) {\n      const deliverable = this.findFirstDeliverableActivity(child);\n      if (deliverable) {\n        return deliverable;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Resume All Sequencing Request Process (SB.2.6)\n   * Resumes a suspended session\n   * @return {SequencingResult}\n   */\n  private resumeAllSequencingRequestProcess(): SequencingResult {\n    const result = new SequencingResult();\n    const suspendedActivity = this.activityTree.suspendedActivity;\n\n    if (!suspendedActivity) {\n      result.exception = \"SB.2.6-1\"; // No suspended activity\n      return result;\n    }\n\n    if (this.activityTree.currentActivity !== null) {\n      result.exception = \"SB.2.6-2\"; // Current activity already defined\n      return result;\n    }\n\n    // Deliver the suspended activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = suspendedActivity;\n    return result;\n  }\n\n  /**\n   * Continue Sequencing Request Process (SB.2.7)\n   * Processes continue navigation request\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private continueSequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Check if the current activity has been terminated\n    if (currentActivity.isActive) {\n      result.exception = \"SB.2.7-1\"; // Current activity not terminated\n      return result;\n    }\n\n    // Check if flow is allowed from the current activity's parent\n    if (currentActivity.parent && !currentActivity.parent.sequencingControls.flow) {\n      result.exception = \"SB.2.7-2\"; // No activity available (flow disabled)\n      return result;\n    }\n\n    // Flow from current activity to find next using flow subprocess\n    const flowResult = this.flowSubprocess(currentActivity, FlowSubprocessMode.FORWARD);\n\n    if (!flowResult) {\n      result.exception = \"SB.2.7-2\"; // No activity available\n      return result;\n    }\n\n    // Deliver the identified activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = flowResult;\n    return result;\n  }\n\n  /**\n   * Previous Sequencing Request Process (SB.2.8)\n   * Processes previous navigation request\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private previousSequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Check if the current activity has been terminated\n    if (currentActivity.isActive) {\n      result.exception = \"SB.2.8-1\"; // Current activity not terminated\n      return result;\n    }\n\n    // Check if flow is allowed from the current activity's parent\n    if (currentActivity.parent && !currentActivity.parent.sequencingControls.flow) {\n      result.exception = \"SB.2.8-2\"; // No activity available (flow disabled)\n      return result;\n    }\n\n    // Check if backward flow is allowed (forwardOnly control)\n    if (currentActivity.parent && currentActivity.parent.sequencingControls.forwardOnly) {\n      result.exception = \"SB.2.8-2\"; // No activity available (backward flow disabled)\n      return result;\n    }\n\n    // Flow from current activity to find previous using flow subprocess\n    const flowResult = this.flowSubprocess(currentActivity, FlowSubprocessMode.BACKWARD);\n\n    if (!flowResult) {\n      result.exception = \"SB.2.8-2\"; // No activity available\n      return result;\n    }\n\n    // Deliver the identified activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = flowResult;\n    return result;\n  }\n\n  /**\n   * Choice Sequencing Request Process (SB.2.9)\n   * Processes choice navigation request\n   * @param {string} targetActivityId - The target activity ID\n   * @param {Activity | null} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private choiceSequencingRequestProcess(\n    targetActivityId: string,\n    currentActivity: Activity | null\n  ): SequencingResult {\n    const result = new SequencingResult();\n\n    // Find the target activity\n    let targetActivity = this.activityTree.getActivity(targetActivityId);\n    if (!targetActivity) {\n      result.exception = \"SB.2.9-1\"; // Target activity does not exist\n      return result;\n    }\n\n    // Check if target is in the activity tree\n    if (!this.isActivityInTree(targetActivity)) {\n      result.exception = \"SB.2.9-2\"; // Target activity not in tree\n      return result;\n    }\n\n    // Cannot choose the root activity\n    if (targetActivity === this.activityTree.root) {\n      result.exception = \"SB.2.9-3\"; // Cannot choose root\n      return result;\n    }\n\n    // Path to root validation\n    let activity: Activity | null = targetActivity;\n    while (activity) {\n      if (activity.isHiddenFromChoice) {\n        result.exception = \"SB.2.9-4\"; // Activity hidden from choice\n        return result;\n      }\n\n      // Check if choice control is constrained\n      if (activity.parent && !activity.parent.sequencingControls.choice) {\n        result.exception = \"SB.2.9-5\"; // Choice control is not allowed\n        return result;\n      }\n\n      activity = activity.parent;\n    }\n\n    // Check if current activity needs to be terminated\n    if (currentActivity && currentActivity.isActive) {\n      result.exception = \"SB.2.9-6\"; // Current activity not terminated\n      return result;\n    }\n\n    // Find common ancestor\n    const commonAncestor = this.findCommonAncestor(currentActivity, targetActivity);\n\n    // Terminate descendent attempts from common ancestor\n    if (currentActivity) {\n      this.terminateDescendentAttemptsProcess(commonAncestor || this.activityTree.root!);\n    }\n\n    // Form the activity path from target to common ancestor\n    const activityPath: Activity[] = [];\n    activity = targetActivity;\n    while (activity && activity !== commonAncestor) {\n      activityPath.unshift(activity);\n      activity = activity.parent;\n    }\n\n    // Evaluate each activity in the path\n    for (const pathActivity of activityPath) {\n      if (!this.checkActivityProcess(pathActivity)) {\n        // Sequencing ends with no delivery\n        return result;\n      }\n    }\n\n    // If target is not a leaf, flow forward to find a leaf\n    if (targetActivity.children.length > 0) {\n      this.ensureSelectionAndRandomization(targetActivity);\n      const availableChildren = targetActivity.getAvailableChildren();\n\n      const flowResult = this.flowActivityTraversalSubprocess(\n        targetActivity,\n        true, // direction forward\n        true, // consider children\n        FlowSubprocessMode.FORWARD\n      );\n\n      if (!flowResult) {\n        result.exception = \"SB.2.9-7\"; // No activity available from target\n        return result;\n      }\n\n      targetActivity = flowResult;\n    }\n\n    // Deliver the identified activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = targetActivity;\n    return result;\n  }\n\n  /**\n   * Jump Sequencing Request Process (SB.2.13)\n   * Processes jump navigation request - SCORM 2004 4th Edition\n   * @param {string} targetActivityId - The target activity ID\n   * @return {SequencingResult}\n   */\n  private jumpSequencingRequestProcess(targetActivityId: string): SequencingResult {\n    const result = new SequencingResult();\n\n    // Find the target activity\n    const targetActivity = this.activityTree.getActivity(targetActivityId);\n    if (!targetActivity) {\n      result.exception = \"SB.2.13-1\"; // Target activity does not exist\n      return result;\n    }\n\n    // Check if target is in the activity tree\n    if (!this.isActivityInTree(targetActivity)) {\n      result.exception = \"SB.2.13-2\"; // Target activity not in tree\n      return result;\n    }\n\n    // Check if target is available\n    if (!targetActivity.isAvailable) {\n      result.exception = \"SB.2.13-3\"; // Target not available\n      return result;\n    }\n\n    // Deliver the target activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = targetActivity;\n    return result;\n  }\n\n  /**\n   * Exit Sequencing Request Process\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private exitSequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Check if exit is allowed\n    if (!currentActivity.parent) {\n      result.exception = \"SB.2.11-1\"; // Exit not allowed - no parent\n      return result;\n    }\n\n    // Check parent's sequencing controls\n    if (!currentActivity.parent.sequencingControls.choiceExit) {\n      result.exception = \"SB.2.11-2\"; // Exit not allowed by sequencing controls\n      return result;\n    }\n\n    // Terminate current activity\n    this.terminateDescendentAttemptsProcess(currentActivity);\n\n    return result;\n  }\n\n  /**\n   * Exit All Sequencing Request Process\n   * @return {SequencingResult}\n   */\n  private exitAllSequencingRequestProcess(): SequencingResult {\n    const result = new SequencingResult();\n\n    // Terminate all activities\n    if (this.activityTree.root) {\n      this.terminateDescendentAttemptsProcess(this.activityTree.root);\n    }\n\n    return result;\n  }\n\n  /**\n   * Abandon Sequencing Request Process\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private abandonSequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Set current activity as abandoned\n    currentActivity.isActive = false;\n    this.activityTree.currentActivity = currentActivity.parent;\n\n    return result;\n  }\n\n  /**\n   * Abandon All Sequencing Request Process\n   * @return {SequencingResult}\n   */\n  private abandonAllSequencingRequestProcess(): SequencingResult {\n    const result = new SequencingResult();\n\n    // Abandon all activities\n    this.activityTree.currentActivity = null;\n\n    return result;\n  }\n\n  /**\n   * Suspend All Sequencing Request Process\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private suspendAllSequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Check if suspend is allowed\n    if (currentActivity !== this.activityTree.root) {\n      currentActivity.isSuspended = true;\n      this.activityTree.suspendedActivity = currentActivity;\n      this.activityTree.currentActivity = null;\n    } else {\n      result.exception = \"SB.2.15-1\"; // Cannot suspend root\n    }\n\n    return result;\n  }\n\n  /**\n   * Retry Sequencing Request Process\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private retrySequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Terminate current activity\n    this.terminateDescendentAttemptsProcess(currentActivity);\n\n    // Increment attempt count\n    currentActivity.incrementAttemptCount();\n\n    // Deliver the activity again\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = currentActivity;\n    return result;\n  }\n\n  /**\n   * Retry All Sequencing Request Process\n   * @return {SequencingResult}\n   */\n  private retryAllSequencingRequestProcess(): SequencingResult {\n    // Clear current activity to allow restart\n    this.activityTree.currentActivity = null;\n\n    // Restart from the root\n    return this.startSequencingRequestProcess();\n  }\n\n  /**\n   * Ensure selection and randomization is applied to an activity\n   * @param {Activity} activity - The activity to process\n   */\n  private ensureSelectionAndRandomization(activity: Activity): void {\n    // Check if processing is needed\n    if (activity.getAvailableChildren() === activity.children &&\n      (SelectionRandomization.isSelectionNeeded(activity) ||\n        SelectionRandomization.isRandomizationNeeded(activity))) {\n      SelectionRandomization.applySelectionAndRandomization(activity, activity.isNewAttempt);\n    }\n  }\n\n  /**\n   * Flow Activity Traversal Subprocess (SB.2.2)\n   * Checks if an activity can be delivered and flows into clusters if needed\n   */\n  private flowActivityTraversalSubprocess(\n    activity: Activity,\n    _direction: boolean,\n    considerChildren: boolean,\n    mode: FlowSubprocessMode\n  ): Activity | null {\n    // Check if the activity is available\n    if (!activity.isAvailable) {\n      return null;\n    }\n\n    // Check sequencing control modes\n    const parent = activity.parent;\n    if (parent && !parent.sequencingControls.flow) {\n      return null;\n    }\n\n    // Activity is a cluster, try to flow into it to find a deliverable leaf\n    if (considerChildren) {\n      this.ensureSelectionAndRandomization(activity);\n      const availableChildren = activity.getAvailableChildren();\n\n      for (const child of availableChildren) {\n        const deliverable = this.flowActivityTraversalSubprocess(\n          child,\n          mode === FlowSubprocessMode.FORWARD,\n          true,\n          mode\n        );\n        if (deliverable) {\n          return deliverable;\n        }\n      }\n    }\n\n    // If activity is a leaf (no children), check if it can be delivered\n    if (activity.children.length === 0) {\n      // Check if this activity was intended to be a cluster but is empty\n      // A cluster typically has flow control enabled\n      if (activity.sequencingControls.flow) {\n        // This appears to be an empty cluster, not a true leaf\n        return null;\n      }\n\n      if (this.checkActivityProcess(activity)) {\n        return activity;\n      }\n      return null;\n    }\n\n    return null;\n  }\n\n  /**\n   * Check Activity Process (SB.2.3)\n   * Validates if an activity can be delivered\n   */\n  private checkActivityProcess(activity: Activity): boolean {\n    // Check if activity is available\n    if (!activity.isAvailable) {\n      return false;\n    }\n\n    // Check limit conditions (UP.1)\n    if (this.limitConditionsCheckProcess(activity)) {\n      return false; // Activity violates limit conditions\n    }\n\n    // Check pre-condition rules using UP.2\n    const preConditionResult = this.sequencingRulesCheckProcess(\n      activity,\n      activity.sequencingRules.preConditionRules\n    );\n\n    return preConditionResult !== RuleActionType.SKIP &&\n      preConditionResult !== RuleActionType.DISABLED;\n  }\n\n  /**\n   * Terminate Descendent Attempts Process (SB.2.4)\n   * Ends attempts on an activity and its descendants\n   */\n  private terminateDescendentAttemptsProcess(activity: Activity, skipExitRules: boolean = false): void {\n    // Apply Exit Action Rules (TB.2.1) first to check for exit actions\n    let exitAction = null;\n    if (!skipExitRules) {\n      exitAction = this.exitActionRulesSubprocess(activity);\n    }\n\n    // End attempt on the activity\n    activity.isActive = false;\n\n    // Recursively terminate descendants\n    // Use all children here, not just available ones, since we need to terminate all\n    for (const child of activity.children) {\n      this.terminateDescendentAttemptsProcess(child, skipExitRules);\n    }\n\n    // Process deferred exit actions after termination to avoid recursion\n    if (exitAction && !skipExitRules) {\n      this.processDeferredExitAction(exitAction, activity);\n    }\n  }\n\n  /**\n   * Exit Action Rules Subprocess (TB.2.1)\n   * Evaluates the exit condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate exit rules for\n   * @return {RuleActionType | null} - The exit action to process, if any\n   * @private\n   */\n  private exitActionRulesSubprocess(activity: Activity): RuleActionType | null {\n    // Evaluate exit condition rules using UP.2\n    const exitAction = this.sequencingRulesCheckProcess(\n      activity,\n      activity.sequencingRules.exitConditionRules\n    );\n\n    // Only certain actions are valid for exit condition rules\n    if (exitAction === RuleActionType.EXIT ||\n      exitAction === RuleActionType.EXIT_PARENT ||\n      exitAction === RuleActionType.EXIT_ALL) {\n      return exitAction;\n    }\n\n    return null;\n  }\n\n  /**\n   * Process deferred exit action after termination\n   * @param {RuleActionType} exitAction - The exit action to process\n   * @param {Activity} activity - The activity that triggered the exit action\n   * @private\n   */\n  private processDeferredExitAction(exitAction: RuleActionType, activity: Activity): void {\n    switch (exitAction) {\n      case RuleActionType.EXIT:\n        // Exit terminates the current attempt on the activity\n        // Already handled by terminateDescendentAttemptsProcess\n        break;\n\n      case RuleActionType.EXIT_PARENT:\n        // Exit parent terminates the current attempt on the parent activity\n        if (activity.parent && activity.parent.isActive) {\n          this.terminateDescendentAttemptsProcess(activity.parent, true);\n        }\n        break;\n\n      case RuleActionType.EXIT_ALL:\n        // Exit all terminates all activities\n        if (this.activityTree.root && this.activityTree.root !== activity) {\n          // Only process if we haven't already terminated the root\n          const allActivities = this.activityTree.getAllActivities();\n          const anyActive = allActivities.some(a => a.isActive);\n          if (anyActive) {\n            this.terminateDescendentAttemptsProcess(this.activityTree.root, true);\n          }\n        }\n        break;\n    }\n  }\n\n  /**\n   * Post Condition Rules Subprocess (TB.2.2)\n   * Evaluates the post-condition rules for an activity after delivery\n   * @param {Activity} activity - The activity to evaluate post-condition rules for\n   * @return {RuleActionType | null} - The action to take, if any\n   * @private\n   */\n  private postConditionRulesSubprocess(activity: Activity): RuleActionType | null {\n    // Evaluate post-condition rules using UP.2\n    const postAction = this.sequencingRulesCheckProcess(\n      activity,\n      activity.sequencingRules.postConditionRules\n    );\n\n    // Only certain actions are valid for post-condition rules\n    const validActions = [\n      RuleActionType.EXIT_PARENT,\n      RuleActionType.EXIT_ALL,\n      RuleActionType.RETRY,\n      RuleActionType.RETRY_ALL,\n      RuleActionType.CONTINUE,\n      RuleActionType.PREVIOUS,\n      RuleActionType.STOP_FORWARD_TRAVERSAL,\n    ];\n\n    if (postAction && validActions.includes(postAction)) {\n      return postAction;\n    }\n\n    return null;\n  }\n\n  /**\n   * Validate Sequencing Request\n   * Priority 3 Gap: Comprehensive sequencing request validation\n   * @param {SequencingRequestType} request - The sequencing request\n   * @param {string | null} targetActivityId - Target activity ID\n   * @return {{valid: boolean, exception: string | null}} - Validation result\n   */\n  private validateSequencingRequest(request: SequencingRequestType, targetActivityId: string | null): {\n    valid: boolean,\n    exception: string | null\n  } {\n    // Validate request type\n    const validRequestTypes = Object.values(SequencingRequestType);\n    if (!validRequestTypes.includes(request)) {\n      return { valid: false, exception: \"SB.2.12-6\" };\n    }\n\n    // Validate target activity ID for choice and jump requests\n    if ((request === SequencingRequestType.CHOICE || request === SequencingRequestType.JUMP) && !targetActivityId) {\n      return { valid: false, exception: \"SB.2.12-5\" };\n    }\n\n    // Additional request-specific validation\n    const requestSpecificValidation = this.validateRequestSpecificConstraints(request, targetActivityId);\n    if (!requestSpecificValidation.valid) {\n      return requestSpecificValidation;\n    }\n\n    return { valid: true, exception: null };\n  }\n\n  /**\n   * Validate Request-Specific Constraints\n   * @param {SequencingRequestType} request - The sequencing request\n   * @param {string | null} targetActivityId - Target activity ID\n   * @return {{valid: boolean, exception: string | null}} - Validation result\n   */\n  private validateRequestSpecificConstraints(request: SequencingRequestType, targetActivityId: string | null): {\n    valid: boolean,\n    exception: string | null\n  } {\n    const currentActivity = this.activityTree.currentActivity;\n\n    switch (request) {\n      case SequencingRequestType.CONTINUE:\n      case SequencingRequestType.PREVIOUS:\n      case SequencingRequestType.EXIT:\n      case SequencingRequestType.EXIT_ALL:\n      case SequencingRequestType.ABANDON:\n      case SequencingRequestType.ABANDON_ALL:\n      case SequencingRequestType.SUSPEND_ALL:\n      case SequencingRequestType.RETRY:\n        if (!currentActivity) {\n          return { valid: false, exception: \"SB.2.12-1\" };\n        }\n        break;\n      case SequencingRequestType.CHOICE:\n        if (targetActivityId) {\n          const targetActivity = this.activityTree.getActivity(targetActivityId);\n          if (!targetActivity) {\n            return { valid: false, exception: \"SB.2.9-1\" };\n          }\n        }\n        break;\n      case SequencingRequestType.JUMP:\n        if (targetActivityId) {\n          const targetActivity = this.activityTree.getActivity(targetActivityId);\n          if (!targetActivity) {\n            return { valid: false, exception: \"SB.2.13-1\" };\n          }\n        }\n        break;\n    }\n\n    return { valid: true, exception: null };\n  }\n\n  /**\n   * Limit Conditions Check Process (UP.1)\n   * Checks if an activity has exceeded its limit conditions (attempt limit or duration limits)\n   * @param {Activity} activity - The activity to check\n   * @return {boolean} - True if limit conditions are violated, false otherwise\n   * @private\n   */\n  private limitConditionsCheckProcess(activity: Activity): boolean {\n    // Check attempt limit\n    if (activity.attemptLimit !== null && activity.attemptCount >= activity.attemptLimit) {\n      return true; // Attempt limit exceeded\n    }\n\n    // Check attempt absolute duration limit\n    if (activity.attemptAbsoluteDurationLimit !== null) {\n      const attemptDurationMs = this.parseISO8601Duration(activity.attemptExperiencedDuration);\n      const attemptLimitMs = this.parseISO8601Duration(activity.attemptAbsoluteDurationLimit);\n\n      if (attemptDurationMs >= attemptLimitMs) {\n        return true; // Attempt duration limit exceeded\n      }\n    }\n\n    // Check activity absolute duration limit\n    if (activity.activityAbsoluteDurationLimit !== null) {\n      const activityDurationMs = this.parseISO8601Duration(activity.activityExperiencedDuration);\n      const activityLimitMs = this.parseISO8601Duration(activity.activityAbsoluteDurationLimit);\n\n      if (activityDurationMs >= activityLimitMs) {\n        return true; // Activity duration limit exceeded\n      }\n    }\n\n    return false; // No limit conditions violated\n  }\n\n  /**\n   * Parse ISO 8601 duration to milliseconds\n   * @param {string} duration - ISO 8601 duration string\n   * @return {number} - Duration in milliseconds\n   * @private\n   */\n  private parseISO8601Duration(duration: string): number {\n    const regex = /PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?/;\n    const matches = duration.match(regex);\n\n    if (!matches) {\n      return 0;\n    }\n\n    const hours = parseInt(matches[1] || \"0\", 10);\n    const minutes = parseInt(matches[2] || \"0\", 10);\n    const seconds = parseFloat(matches[3] || \"0\");\n\n    return (hours * 3600 + minutes * 60 + seconds) * 1000;\n  }\n\n  /**\n   * Sequencing Rules Check Process (UP.2)\n   * General process for evaluating a set of sequencing rules\n   * @param {Activity} activity - The activity to evaluate rules for\n   * @param {SequencingRule[]} rules - The rules to evaluate\n   * @return {RuleActionType | null} - The action to take, or null if no rules apply\n   * @private\n   */\n  private sequencingRulesCheckProcess(activity: Activity, rules: SequencingRule[]): RuleActionType | null {\n    // Evaluate each rule in order\n    for (const rule of rules) {\n      // Use the Sequencing Rules Check Subprocess (UP.2.1) to evaluate\n      if (this.sequencingRulesCheckSubprocess(activity, rule)) {\n        // Rule condition(s) met, return the action\n        return rule.action;\n      }\n    }\n\n    // No rules applied\n    return null;\n  }\n\n  /**\n   * Sequencing Rules Check Subprocess (UP.2.1)\n   * Evaluates individual sequencing rule conditions\n   * @param {Activity} activity - The activity to evaluate the rule for\n   * @param {SequencingRule} rule - The rule to evaluate\n   * @return {boolean} - True if all rule conditions are met\n   * @private\n   */\n  private sequencingRulesCheckSubprocess(activity: Activity, rule: SequencingRule): boolean {\n    // If no conditions, the rule always applies\n    if (rule.conditions.length === 0) {\n      return true;\n    }\n\n    // Evaluate based on condition combination\n    const conditionCombination = rule.conditionCombination;\n\n    if (conditionCombination === \"all\" || conditionCombination === RuleConditionOperator.AND) {\n      // All conditions must be true\n      return rule.conditions.every((condition) => {\n        // Log evaluation for debugging\n        return condition.evaluate(activity);\n      });\n    } else if (conditionCombination === \"any\" || conditionCombination === RuleConditionOperator.OR) {\n      // At least one condition must be true\n      return rule.conditions.some((condition) => {\n        // Log evaluation for debugging\n        return condition.evaluate(activity);\n      });\n    }\n\n    // Unknown combination, default to false\n    return false;\n  }\n\n  /**\n   * Check if activity is in the activity tree\n   */\n  private isActivityInTree(activity: Activity): boolean {\n    return this.activityTree.getAllActivities().includes(activity);\n  }\n\n  /**\n   * Find common ancestor of two activities\n   */\n  private findCommonAncestor(activity1: Activity | null, activity2: Activity | null): Activity | null {\n    if (!activity1 || !activity2) {\n      return null;\n    }\n\n    // Get ancestors of activity1\n    const ancestors1: Activity[] = [];\n    let current: Activity | null = activity1;\n    while (current) {\n      ancestors1.push(current);\n      current = current.parent;\n    }\n\n    // Find first common ancestor\n    current = activity2;\n    while (current) {\n      if (ancestors1.includes(current)) {\n        return current;\n      }\n      current = current.parent;\n    }\n\n    return null;\n  }\n\n  /**\n   * Flow Subprocess (SB.2.3)\n   * Traverses the activity tree in the specified direction to find a deliverable activity\n   * @param {Activity} fromActivity - The activity to flow from\n   * @param {FlowSubprocessMode} direction - The flow direction\n   * @return {Activity | null} - The next deliverable activity, or null if none found\n   */\n  private flowSubprocess(fromActivity: Activity, direction: FlowSubprocessMode): Activity | null {\n    let candidateActivity: Activity | null = fromActivity;\n    let firstIteration = true;\n\n    // Keep traversing until we find a deliverable activity or run out of candidates\n    while (candidateActivity) {\n      // Get next candidate using flow tree traversal\n      // On first iteration, we want to skip the current activity's children\n      const nextCandidate = this.flowTreeTraversalSubprocess(\n        candidateActivity,\n        direction,\n        firstIteration\n      );\n\n      if (!nextCandidate) {\n        // No more candidates\n        return null;\n      }\n\n      // Check if this candidate can be delivered\n      const deliverable = this.flowActivityTraversalSubprocess(\n        nextCandidate,\n        direction === FlowSubprocessMode.FORWARD,\n        true, // consider children\n        direction\n      );\n\n      if (deliverable) {\n        return deliverable;\n      }\n\n      // Continue with next candidate\n      candidateActivity = nextCandidate;\n      firstIteration = false;\n    }\n\n    return null;\n  }\n\n\n  /**\n   * Flow Tree Traversal Subprocess (SB.2.1)\n   * Traverses the activity tree to find the next activity in the specified direction\n   * @param {Activity} fromActivity - The activity to traverse from\n   * @param {FlowSubprocessMode} direction - The traversal direction\n   * @param {boolean} skipChildren - Whether to skip checking children (for continuing from current)\n   * @return {Activity | null} - The next activity in the tree, or null if none\n   */\n  private flowTreeTraversalSubprocess(\n    fromActivity: Activity,\n    direction: FlowSubprocessMode,\n    skipChildren: boolean = false\n  ): Activity | null {\n    if (direction === FlowSubprocessMode.FORWARD) {\n      // First, check if activity has children (unless we're skipping them)\n      if (!skipChildren) {\n        this.ensureSelectionAndRandomization(fromActivity);\n        const children = fromActivity.getAvailableChildren();\n        if (children.length > 0) {\n          return children[0] || null;\n        }\n      }\n\n      // No children, try to get next sibling\n      let current: Activity | null = fromActivity;\n      while (current) {\n        const nextSibling = this.activityTree.getNextSibling(current);\n        if (nextSibling) {\n          return nextSibling;\n        }\n        // No next sibling, move up to parent\n        current = current.parent;\n      }\n    } else {\n      // Backward direction\n      // Try to get previous sibling\n      const previousSibling = this.activityTree.getPreviousSibling(fromActivity);\n      if (previousSibling) {\n        // If previous sibling has children, go to the last descendant\n        let lastDescendant = previousSibling;\n        while (true) {\n          this.ensureSelectionAndRandomization(lastDescendant);\n          const children = lastDescendant.getAvailableChildren();\n          if (children.length === 0) {\n            break;\n          }\n          const lastChild = children[children.length - 1];\n          if (!lastChild) break;\n          lastDescendant = lastChild;\n        }\n        return lastDescendant;\n      }\n\n      // No previous sibling at this level, try going up to parent and then its previous sibling\n      let current: Activity | null = fromActivity;\n      while (current && current.parent) {\n        const parentPreviousSibling = this.activityTree.getPreviousSibling(current.parent);\n        if (parentPreviousSibling) {\n          // Found a previous sibling of an ancestor, go to its last descendant\n          let lastDescendant = parentPreviousSibling;\n          while (true) {\n            this.ensureSelectionAndRandomization(lastDescendant);\n            const children = lastDescendant.getAvailableChildren();\n            if (children.length === 0) {\n              break;\n            }\n            const lastChild = children[children.length - 1];\n            if (!lastChild) break;\n            lastDescendant = lastChild;\n          }\n          return lastDescendant;\n        }\n        // Move up to grandparent\n        current = current.parent;\n      }\n\n      return null; // Reached beginning of tree\n    }\n\n    return null;\n  }\n\n  /**\n   * Choice Flow Subprocess (SB.2.9.1)\n   * Handles the flow logic specific to choice navigation requests\n   * @param {Activity} targetActivity - The target activity for the choice\n   * @param {Activity | null} commonAncestor - The common ancestor between current and target\n   * @return {Activity | null} - The activity to deliver, or null if flow fails\n   */\n  private choiceFlowSubprocess(\n    targetActivity: Activity,\n    commonAncestor: Activity | null\n  ): Activity | null {\n    // If target is a leaf, it's the delivery candidate\n    if (targetActivity.children.length === 0) {\n      return targetActivity;\n    }\n\n    // If target is a cluster, use choice flow tree traversal\n    return this.choiceFlowTreeTraversalSubprocess(targetActivity);\n  }\n\n  /**\n   * Enhanced Choice Flow Tree Traversal Subprocess (SB.2.9.2)\n   * Priority 3 Gap: Choice Flow Tree Traversal with complete constraint validation\n   * @param {Activity} fromActivity - The cluster activity to traverse from\n   * @return {Activity | null} - A leaf activity for delivery, or null if none found\n   */\n  private choiceFlowTreeTraversalSubprocess(fromActivity: Activity): Activity | null {\n    // Apply selection and randomization\n    this.ensureSelectionAndRandomization(fromActivity);\n    const children = fromActivity.getAvailableChildren();\n\n    // Enhanced constraint validation for choice flow tree traversal\n    const constraintValidation = this.validateChoiceFlowConstraints(fromActivity, children);\n    if (!constraintValidation.valid) {\n      return null;\n    }\n\n    // Find the first available child that can be delivered\n    for (const child of constraintValidation.validChildren) {\n      // Check if child can be delivered or traverse into it\n      const deliverable = this.enhancedChoiceActivityTraversalSubprocess(child);\n      if (deliverable) {\n        return deliverable;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Enhanced Choice Activity Traversal Subprocess (SB.2.4)\n   * Priority 3 Gap: Choice Activity Traversal with stopForwardTraversal and forwardOnly checks\n   * @param {Activity} activity - The activity to check and possibly traverse\n   * @return {Activity | null} - A deliverable activity, or null if none found\n   */\n  private enhancedChoiceActivityTraversalSubprocess(activity: Activity): Activity | null {\n    // Check if activity is available\n    if (!activity.isAvailable) {\n      return null;\n    }\n\n    // Check if activity is hidden from choice\n    if (activity.isHiddenFromChoice) {\n      return null;\n    }\n\n    // Enhanced constraint checks including stopForwardTraversal and forwardOnly\n    const traversalValidation = this.validateChoiceTraversalConstraints(activity);\n    if (!traversalValidation.canTraverse) {\n      return null;\n    }\n\n    // If it's a leaf, check if it can be delivered\n    if (activity.children.length === 0) {\n      if (this.checkActivityProcess(activity)) {\n        return activity;\n      }\n      return null;\n    }\n\n    // If it's a cluster, traverse into it with enhanced validation\n    if (traversalValidation.canTraverseInto) {\n      return this.choiceFlowTreeTraversalSubprocess(activity);\n    }\n\n    return null;\n  }\n\n  /**\n   * Original Choice Activity Traversal Subprocess for backwards compatibility\n   */\n  private choiceActivityTraversalSubprocess(activity: Activity): Activity | null {\n    return this.enhancedChoiceActivityTraversalSubprocess(activity);\n  }\n\n  /**\n   * Evaluate post-condition rules for the current activity\n   * This should be called after an activity has been delivered and the learner has interacted with it\n   * @param {Activity} activity - The activity to evaluate\n   * @return {SequencingRequestType | null} - The sequencing request to process, if any\n   */\n  public evaluatePostConditionRules(activity: Activity): SequencingRequestType | null {\n    const postAction = this.postConditionRulesSubprocess(activity);\n\n    if (!postAction) {\n      return null;\n    }\n\n    // Map post-condition actions to sequencing requests\n    switch (postAction) {\n      case RuleActionType.EXIT_PARENT:\n        // Exit parent will be handled by exit action rules\n        return SequencingRequestType.EXIT;\n\n      case RuleActionType.EXIT_ALL:\n        return SequencingRequestType.EXIT_ALL;\n\n      case RuleActionType.RETRY:\n        return SequencingRequestType.RETRY;\n\n      case RuleActionType.RETRY_ALL:\n        return SequencingRequestType.RETRY_ALL;\n\n      case RuleActionType.CONTINUE:\n        return SequencingRequestType.CONTINUE;\n\n      case RuleActionType.PREVIOUS:\n        return SequencingRequestType.PREVIOUS;\n\n      case RuleActionType.STOP_FORWARD_TRAVERSAL:\n        // Set traversal limiter on controls; not a navigation request\n        activity.sequencingControls.stopForwardTraversal = true;\n        return null;\n\n      default:\n        return null;\n    }\n  }\n\n  /**\n   * Validate Choice Flow Constraints\n   * Priority 3 Gap: Choice Flow Tree Traversal constraint validation\n   * @param {Activity} fromActivity - Activity to traverse from\n   * @param {Activity[]} children - Available children\n   * @return {{valid: boolean, validChildren: Activity[]}} - Validation result\n   */\n  private validateChoiceFlowConstraints(fromActivity: Activity, children: Activity[]): {\n    valid: boolean,\n    validChildren: Activity[]\n  } {\n    const validChildren: Activity[] = [];\n\n    for (const child of children) {\n      // Check if child meets all choice flow constraints\n      if (this.meetsChoiceFlowConstraints(child, fromActivity)) {\n        validChildren.push(child);\n      }\n    }\n\n    return {\n      valid: validChildren.length > 0,\n      validChildren\n    };\n  }\n\n  /**\n   * Check if activity meets choice flow constraints\n   * @param {Activity} activity - Activity to check\n   * @param {Activity} parent - Parent activity\n   * @return {boolean} - True if constraints are met\n   */\n  private meetsChoiceFlowConstraints(activity: Activity, parent: Activity): boolean {\n    // Check basic availability\n    if (!activity.isAvailable || activity.isHiddenFromChoice) {\n      return false;\n    }\n\n    // Check parent constraint controls\n    if (parent.sequencingControls.constrainChoice) {\n      // Apply constrain choice logic specific to flow\n      return this.validateConstrainChoiceForFlow(activity, parent);\n    }\n\n    return true;\n  }\n\n  /**\n   * Validate Choice Traversal Constraints\n   * Priority 3 Gap: stopForwardTraversal and forwardOnly checks\n   * @param {Activity} activity - Activity to validate\n   * @return {{canTraverse: boolean, canTraverseInto: boolean}} - Traversal permissions\n   */\n  private validateChoiceTraversalConstraints(activity: Activity): {\n    canTraverse: boolean,\n    canTraverseInto: boolean\n  } {\n    let canTraverse = true;\n    let canTraverseInto = true;\n\n    // Check constrain choice control\n    if (activity.parent?.sequencingControls.constrainChoice) {\n      // Apply constrainChoice logic that might prevent traversal\n      canTraverse = this.evaluateConstrainChoiceForTraversal(activity);\n    }\n\n    // Check stopForwardTraversal control (if implemented in sequencing controls)\n    if (activity.sequencingControls && activity.sequencingControls.stopForwardTraversal) {\n      canTraverseInto = false;\n    }\n\n    // Check forwardOnly control in parent context\n    if (activity.parent?.sequencingControls.forwardOnly) {\n      // forwardOnly might restrict certain types of choice traversal\n      // depending on the current position and target\n      canTraverseInto = this.evaluateForwardOnlyForChoice(activity);\n    }\n\n    return { canTraverse, canTraverseInto };\n  }\n\n  /**\n   * Validate Constrained Choice Boundaries\n   * Priority 3 Gap: Proper choice boundary checking\n   * @param {Activity | null} currentActivity - Current activity\n   * @param {Activity} targetActivity - Target activity\n   * @return {{valid: boolean, exception: string | null}} - Validation result\n   */\n  private validateConstrainedChoiceBoundaries(currentActivity: Activity | null, targetActivity: Activity): {\n    valid: boolean,\n    exception: string | null\n  } {\n    // Path to root validation with enhanced constraint checking\n    let activity: Activity | null = targetActivity;\n    while (activity) {\n      if (activity.isHiddenFromChoice) {\n        return { valid: false, exception: \"SB.2.9-4\" }; // Activity hidden from choice\n      }\n\n      // Enhanced choice control validation\n      if (activity.parent && !activity.parent.sequencingControls.choice) {\n        return { valid: false, exception: \"SB.2.9-5\" }; // Choice control is not allowed\n      }\n\n      // Check constrained choice boundaries\n      if (activity.parent?.sequencingControls.constrainChoice) {\n        const boundaryCheck = this.checkConstrainedChoiceBoundary(currentActivity, activity, activity.parent);\n        if (!boundaryCheck.valid) {\n          return boundaryCheck;\n        }\n      }\n\n      activity = activity.parent;\n    }\n\n    return { valid: true, exception: null };\n  }\n\n  /**\n   * Helper methods for enhanced choice processing\n   */\n  private validateConstrainChoiceForFlow(activity: Activity, parent: Activity): boolean {\n    // Implement specific constrainChoice logic for flow scenarios according to SCORM 2004\n\n    // If constrainChoice is false, no restrictions apply\n    if (!parent.sequencingControls || !parent.sequencingControls.constrainChoice) {\n      return true;\n    }\n\n    // When constrainChoice is true, choices are restricted based on flow direction\n    const children = parent.children;\n    if (!children || children.length === 0) {\n      return true;\n    }\n\n    const targetIndex = children.indexOf(activity);\n    if (targetIndex === -1) {\n      return false; // Activity not found in parent's children\n    }\n\n    // Get the current activity in the flow\n    const currentActivity = this.getCurrentActivity(parent);\n    if (!currentActivity) {\n      // No current activity, allow choice to first available activity\n      return this.isActivityAvailableForChoice(activity);\n    }\n\n    const currentIndex = children.indexOf(currentActivity);\n    if (currentIndex === -1) {\n      return false; // Current activity not found\n    }\n\n    // Check flow direction constraints\n    if (parent.sequencingControls.flow) {\n      // In forward flow mode with constrainChoice, only allow:\n      // 1. Next activity in sequence\n      // 2. Previously completed activities if forwardOnly is false\n\n      if (targetIndex === currentIndex + 1) {\n        // Next activity - allow if available\n        return this.isActivityAvailableForChoice(activity);\n      }\n\n      if (targetIndex < currentIndex && !parent.sequencingControls.forwardOnly) {\n        // Previous activity - allow if it was completed\n        return activity.completionStatus === \"completed\" ||\n          activity.completionStatus === \"passed\";\n      }\n\n      // All other choices are constrained\n      return false;\n    } else {\n      // Non-flow mode - constrainChoice limits to completed/available activities\n      return this.isActivityAvailableForChoice(activity) &&\n        (activity.completionStatus === \"completed\" ||\n          activity.completionStatus === \"unknown\" ||\n          activity.completionStatus === \"incomplete\");\n    }\n  }\n\n  private evaluateConstrainChoiceForTraversal(activity: Activity): boolean {\n    // Implement constrainChoice evaluation for traversal according to SCORM 2004\n\n    if (!activity.parent) {\n      return true; // Root activity has no traversal constraints\n    }\n\n    const parent = activity.parent;\n\n    // If constrainChoice is false, traversal is allowed\n    if (!parent.sequencingControls || !parent.sequencingControls.constrainChoice) {\n      return true;\n    }\n\n    // When constrainChoice is true, traversal must respect choice constraints\n    // This is evaluated during navigation request processing\n\n    const siblings = parent.children;\n    if (!siblings || siblings.length === 0) {\n      return true;\n    }\n\n    const activityIndex = siblings.indexOf(activity);\n    if (activityIndex === -1) {\n      return false; // Activity not found in siblings\n    }\n\n    // Check if this activity can be reached through constrained choice\n    // 1. Check if activity is available for choice\n    if (!this.isActivityAvailableForChoice(activity)) {\n      return false;\n    }\n\n    // 2. Check traversal path constraints\n    if (parent.sequencingControls.flow) {\n      // In flow mode, check if we can traverse to this activity\n      const currentActivity = this.getCurrentActivity(parent);\n      if (currentActivity) {\n        const currentIndex = siblings.indexOf(currentActivity);\n\n        // If forwardOnly is true, can only traverse forward\n        if (parent.sequencingControls.forwardOnly && activityIndex < currentIndex) {\n          return false;\n        }\n\n        // Check if there are any blocking activities between current and target\n        if (currentIndex < activityIndex) {\n          // Forward traversal - check for mandatory intermediate activities\n          for (let i = currentIndex + 1; i < activityIndex; i++) {\n            const intermediateActivity = siblings[i];\n            if (intermediateActivity &&\n              this.isActivityMandatory(intermediateActivity) &&\n              !this.isActivityCompleted(intermediateActivity)) {\n              return false; // Cannot skip mandatory incomplete activity\n            }\n          }\n        }\n      }\n    }\n\n    // 3. Check specific choice constraints based on activity state\n    return this.validateActivityChoiceState(activity);\n  }\n\n  private evaluateForwardOnlyForChoice(activity: Activity): boolean {\n    // Implement forwardOnly evaluation for choice scenarios according to SCORM 2004\n\n    if (!activity.parent) {\n      return true; // Root activity has no forwardOnly constraints\n    }\n\n    const parent = activity.parent;\n\n    // If forwardOnly is false, choice is allowed in any direction\n    if (!parent.sequencingControls || !parent.sequencingControls.forwardOnly) {\n      return true;\n    }\n\n    // When forwardOnly is true, restrict backward navigation choices\n    const siblings = parent.children;\n    if (!siblings || siblings.length === 0) {\n      return true;\n    }\n\n    const targetIndex = siblings.indexOf(activity);\n    if (targetIndex === -1) {\n      return false; // Activity not found in siblings\n    }\n\n    // Find the current activity to determine navigation direction\n    const currentActivity = this.getCurrentActivity(parent);\n    if (!currentActivity) {\n      // No current activity, allow choice to any available activity\n      return this.isActivityAvailableForChoice(activity);\n    }\n\n    const currentIndex = siblings.indexOf(currentActivity);\n    if (currentIndex === -1) {\n      return true; // Current activity not found, allow choice\n    }\n\n    // ForwardOnly constraint: only allow choice to activities at or after current position\n    if (targetIndex < currentIndex) {\n      // Backward choice - check for exceptions\n\n      // Exception 1: Allow choice to previously completed activities if they are choice-enabled\n      if (activity.completionStatus === \"completed\" ||\n        activity.completionStatus === \"passed\") {\n        // Check if the activity allows choice even in forwardOnly mode\n        if (activity.sequencingControls && activity.sequencingControls.choice) {\n          return true;\n        }\n      }\n\n      // Exception 2: Allow choice if there's a specific choice rule allowing backward navigation\n      if (this.hasBackwardChoiceException(activity, parent)) {\n        return true;\n      }\n\n      // Otherwise, forwardOnly constraint blocks backward choice\n      return false;\n    }\n\n    // Forward or current position choice - allowed\n    return this.isActivityAvailableForChoice(activity);\n  }\n\n  private checkConstrainedChoiceBoundary(currentActivity: Activity | null, activity: Activity, parent: Activity): {\n    valid: boolean,\n    exception: string | null\n  } {\n    // Implement boundary checking logic for constrained choice according to SCORM 2004\n\n    try {\n      // If no current activity, choice to any available activity is valid\n      if (!currentActivity) {\n        if (this.isActivityAvailableForChoice(activity)) {\n          return { valid: true, exception: null };\n        } else {\n          return { valid: false, exception: \"Activity not available for choice\" };\n        }\n      }\n\n      // Check if parent has constrainChoice enabled\n      if (!parent.sequencingControls || !parent.sequencingControls.constrainChoice) {\n        // No constraints - just check basic availability\n        if (this.isActivityAvailableForChoice(activity)) {\n          return { valid: true, exception: null };\n        } else {\n          return { valid: false, exception: \"Activity not available for choice\" };\n        }\n      }\n\n      const siblings = parent.children;\n      if (!siblings || siblings.length === 0) {\n        return { valid: true, exception: null };\n      }\n\n      const currentIndex = siblings.indexOf(currentActivity);\n      const targetIndex = siblings.indexOf(activity);\n\n      if (currentIndex === -1 || targetIndex === -1) {\n        return { valid: false, exception: \"Activity not found in parent structure\" };\n      }\n\n      // Check flow and forwardOnly constraints\n      if (parent.sequencingControls.flow) {\n        // Flow mode constraints\n        if (parent.sequencingControls.forwardOnly && targetIndex < currentIndex) {\n          // Backward navigation in forwardOnly flow\n          if (activity.completionStatus !== \"completed\" &&\n            activity.completionStatus !== \"passed\") {\n            return { valid: false, exception: \"Forward-only constraint violated\" };\n          }\n        }\n\n        // Check if we're skipping mandatory activities\n        if (targetIndex > currentIndex) {\n          for (let i = currentIndex + 1; i < targetIndex; i++) {\n            const intermediateActivity = siblings[i];\n            if (intermediateActivity &&\n              this.isActivityMandatory(intermediateActivity) &&\n              !this.isActivityCompleted(intermediateActivity)) {\n              return { valid: false, exception: \"Cannot skip mandatory incomplete activity\" };\n            }\n          }\n        }\n      }\n\n      // Check choice boundaries based on completion and availability\n      if (!this.isActivityAvailableForChoice(activity)) {\n        return { valid: false, exception: \"Activity not available for choice\" };\n      }\n\n      // Check for specific boundary violations\n      if (this.hasChoiceBoundaryViolation(currentActivity, activity, parent)) {\n        return { valid: false, exception: \"Choice boundary constraint violation\" };\n      }\n\n      // All boundary checks passed\n      return { valid: true, exception: null };\n\n    } catch (error) {\n      return { valid: false, exception: `Boundary check error: ${error}` };\n    }\n  }\n\n  /**\n   * Helper methods for constraint validation\n   */\n  private getCurrentActivity(parent: Activity): Activity | null {\n    // Find the currently active activity within the parent\n    if (parent.children) {\n      for (const child of parent.children) {\n        if (child.isActive) {\n          return child;\n        }\n      }\n    }\n    return null;\n  }\n\n  private isActivityAvailableForChoice(activity: Activity): boolean {\n    // Check if activity is available for choice according to SCORM 2004 rules\n    return activity.isVisible &&\n      !activity.isHiddenFromChoice &&\n      activity.isAvailable &&\n      (activity.sequencingControls ? activity.sequencingControls.choice : true);\n  }\n\n  private isActivityMandatory(activity: Activity): boolean {\n    // Check if activity is mandatory (cannot be skipped)\n    // In SCORM 2004, this is typically determined by sequencing rules\n    if (activity.sequencingRules && activity.sequencingRules.preConditionRules) {\n      for (const rule of activity.sequencingRules.preConditionRules) {\n        if (rule.action === \"skip\" && rule.conditions && rule.conditions.length === 0) {\n          return false; // Has unconditional skip rule, not mandatory\n        }\n      }\n    }\n\n    // Check for explicit mandatory flag or default to true for flow sequences\n    return (activity as any).mandatory !== false;\n  }\n\n  private isActivityCompleted(activity: Activity): boolean {\n    // Check if activity is completed\n    return activity.completionStatus === \"completed\" ||\n      activity.completionStatus === \"passed\" ||\n      activity.successStatus === \"passed\";\n  }\n\n  private validateActivityChoiceState(activity: Activity): boolean {\n    // Validate activity state for choice according to SCORM 2004\n\n    // Check basic availability\n    if (!this.isActivityAvailableForChoice(activity)) {\n      return false;\n    }\n\n    // Check pre-condition rules\n    if (activity.sequencingRules && activity.sequencingRules.preConditionRules) {\n      for (const rule of activity.sequencingRules.preConditionRules) {\n        if (rule.action === RuleActionType.DISABLED || rule.action === RuleActionType.HIDE_FROM_CHOICE) {\n          // Check if conditions are met for disabling/hiding\n          const combinationMode = (rule as any).conditionCombination || \"all\";\n          if (this.evaluateRuleConditions(rule.conditions || [], activity, combinationMode)) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n\n  private hasBackwardChoiceException(activity: Activity, parent: Activity): boolean {\n    // Check for exceptions that allow backward choice in forwardOnly mode\n\n    // Check for specific sequencing rules that allow backward navigation\n    if (parent.sequencingRules && parent.sequencingRules.preConditionRules) {\n      for (const rule of parent.sequencingRules.preConditionRules) {\n        if (rule.action === \"exitParent\" || rule.action === \"retry\") {\n          // These actions might allow backward navigation\n          const combinationMode = (rule as any).conditionCombination || \"all\";\n          return this.evaluateRuleConditions(rule.conditions || [], activity, combinationMode);\n        }\n      }\n    }\n\n    // Check for explicit backward navigation permissions\n    return (activity as any).allowBackwardChoice === true;\n  }\n\n  private hasChoiceBoundaryViolation(currentActivity: Activity, targetActivity: Activity, parent: Activity): boolean {\n    // Check for specific boundary violations\n\n    // Check for time-based constraints\n    if (targetActivity.timeLimitAction && targetActivity.beginTimeLimit) {\n      const now = new Date();\n      const beginTime = new Date(targetActivity.beginTimeLimit);\n      if (now < beginTime) {\n        return true; // Not yet available\n      }\n    }\n\n    if (targetActivity.endTimeLimit) {\n      const now = new Date();\n      const endTime = new Date(targetActivity.endTimeLimit);\n      if (now > endTime) {\n        return true; // No longer available\n      }\n    }\n\n    // Check for attempt limit violations\n    return !!(targetActivity.attemptLimit &&\n      targetActivity.attemptCount >= targetActivity.attemptLimit);\n  }\n\n  private evaluateRuleConditions(conditions: any[], activity: Activity, combinationMode: string = \"all\"): boolean {\n    // Full SCORM 2004 rule condition evaluation\n    if (conditions.length === 0) {\n      return true; // No conditions means always true\n    }\n\n    // Evaluate each condition and collect results\n    const conditionResults: boolean[] = [];\n    \n    for (const condition of conditions) {\n      const conditionType = condition.condition || condition.conditionType;\n      let result = false;\n\n      switch (conditionType) {\n        case \"always\":\n          result = true;\n          break;\n        case \"never\":\n          result = false;\n          break;\n        case \"activityAttempted\":\n        case \"attempted\":\n          result = activity.attemptCount > 0;\n          break;\n        case \"activityCompleted\":\n        case \"completed\":\n          result = this.isActivityCompleted(activity);\n          break;\n        case \"satisfied\":\n          result = activity.objectiveSatisfiedStatus === true;\n          break;\n        case \"objectiveStatusKnown\":\n          result = activity.objectiveMeasureStatus === true;\n          break;\n        case \"objectiveMeasureKnown\":\n          result = activity.objectiveMeasureStatus === true;\n          break;\n        case \"objectiveMeasureGreaterThan\":\n          if (activity.objectiveMeasureStatus) {\n            const threshold = condition.measureThreshold || 0;\n            result = activity.objectiveNormalizedMeasure > threshold;\n          }\n          break;\n        case \"objectiveMeasureLessThan\":\n          if (activity.objectiveMeasureStatus) {\n            const threshold = condition.measureThreshold || 0;\n            result = activity.objectiveNormalizedMeasure < threshold;\n          }\n          break;\n        case \"progressKnown\":\n          result = activity.completionStatus !== \"unknown\";\n          break;\n        case \"attemptLimitExceeded\":\n          result = activity.hasAttemptLimitExceeded();\n          break;\n        case \"timeLimitExceeded\": {\n          const limit = activity.timeLimitDuration;\n          if (!limit) {\n            result = false;\n            break;\n          }\n          const limitSeconds = getDurationAsSeconds(limit, scorm2004_regex.CMITimespan);\n          let elapsedSeconds = 0;\n          // Prefer LMS-provided hook\n          if (this.getAttemptElapsedSecondsHook) {\n            try {\n              elapsedSeconds = this.getAttemptElapsedSecondsHook(activity) || 0;\n            } catch (_) {\n              elapsedSeconds = 0;\n            }\n          } else if (activity.attemptAbsoluteStartTime) {\n            const start = new Date(activity.attemptAbsoluteStartTime).getTime();\n            const nowMs = this.now().getTime();\n            if (!Number.isNaN(start) && nowMs > start) {\n              elapsedSeconds = Math.max(0, (nowMs - start) / 1000);\n            }\n          }\n          result = elapsedSeconds > limitSeconds && limitSeconds > 0;\n          break;\n        }\n        case \"outsideAvailableTimeRange\":\n          // Check if current time is outside available time range\n          if (activity.beginTimeLimit || activity.endTimeLimit) {\n            const now = new Date();\n            if (activity.beginTimeLimit) {\n              const beginDate = new Date(activity.beginTimeLimit);\n              if (now < beginDate) result = true;\n            }\n            if (activity.endTimeLimit) {\n              const endDate = new Date(activity.endTimeLimit);\n              if (now > endDate) result = true;\n            }\n          }\n          break;\n        default:\n          // For unknown conditions, assume false for safety\n          result = false;\n          break;\n      }\n\n      // Apply NOT operator if present\n      if (condition.operator === \"not\" || condition.not === true) {\n        result = !result;\n      }\n\n      conditionResults.push(result);\n    }\n\n    // Combine results based on combination mode\n    if (combinationMode === \"all\" || combinationMode === \"and\") {\n      // All conditions must be true (AND logic)\n      return conditionResults.every(result => result);\n    } else if (combinationMode === \"any\" || combinationMode === \"or\") {\n      // At least one condition must be true (OR logic)\n      return conditionResults.some(result => result);\n    } else {\n      // Default to AND logic if combination mode is unknown\n      return conditionResults.every(result => result);\n    }\n  }\n\n  /**\n   * Get elapsed attempt seconds for an activity using hook or timestamps\n   */\n  private getAttemptElapsedSeconds(activity: Activity): number {\n    if (this.getAttemptElapsedSecondsHook) {\n      try { return this.getAttemptElapsedSecondsHook(activity) || 0; } catch { return 0; }\n    }\n    if (activity.attemptAbsoluteStartTime) {\n      const start = new Date(activity.attemptAbsoluteStartTime).getTime();\n      const nowMs = this.now().getTime();\n      if (!Number.isNaN(start) && nowMs > start) {\n        return Math.max(0, (nowMs - start) / 1000);\n      }\n    }\n    return 0;\n  }\n}\n\n/**\n * Enum for flow subprocess modes\n */\nenum FlowSubprocessMode {\n  FORWARD = \"forward\",\n  BACKWARD = \"backward\",\n}\n","import { Activity } from \"./activity\";\nimport { ActivityTree } from \"./activity_tree\";\nimport {\n  DeliveryRequestType,\n  SequencingProcess,\n  SequencingRequestType\n} from \"./sequencing_process\";\nimport { RollupProcess } from \"./rollup_process\";\nimport { ADLNav } from \"../adl\";\nimport { RuleActionType } from \"./sequencing_rules\";\nimport { getDurationAsSeconds } from \"../../../utilities\";\nimport { scorm2004_regex } from \"../../../constants/regex\";\n\n/**\n * Enum for navigation request types\n */\nexport enum NavigationRequestType {\n  START = \"start\",\n  RESUME_ALL = \"resumeAll\",\n  CONTINUE = \"continue\",\n  PREVIOUS = \"previous\",\n  CHOICE = \"choice\",\n  JUMP = \"jump\",\n  EXIT = \"exit\",\n  EXIT_ALL = \"exitAll\",\n  ABANDON = \"abandon\",\n  ABANDON_ALL = \"abandonAll\",\n  SUSPEND_ALL = \"suspendAll\",\n  NOT_VALID = \"_none_\"\n}\n\n/**\n * Class representing a navigation request result\n */\nexport class NavigationRequestResult {\n  public valid: boolean;\n  public terminationRequest: SequencingRequestType | null;\n  public sequencingRequest: SequencingRequestType | null;\n  public targetActivityId: string | null;\n  public exception: string | null;\n\n  constructor(\n    valid: boolean = false,\n    terminationRequest: SequencingRequestType | null = null,\n    sequencingRequest: SequencingRequestType | null = null,\n    targetActivityId: string | null = null,\n    exception: string | null = null\n  ) {\n    this.valid = valid;\n    this.terminationRequest = terminationRequest;\n    this.sequencingRequest = sequencingRequest;\n    this.targetActivityId = targetActivityId;\n    this.exception = exception;\n  }\n}\n\n/**\n * Class representing a delivery request\n */\nexport class DeliveryRequest {\n  public valid: boolean;\n  public targetActivity: Activity | null;\n  public exception: string | null;\n\n  constructor(\n    valid: boolean = false,\n    targetActivity: Activity | null = null,\n    exception: string | null = null\n  ) {\n    this.valid = valid;\n    this.targetActivity = targetActivity;\n    this.exception = exception;\n  }\n}\n\n/**\n * Overall Sequencing Process (OP.1)\n * Controls the overall execution of the sequencing loop\n */\nexport class OverallSequencingProcess {\n  private activityTree: ActivityTree;\n  private sequencingProcess: SequencingProcess;\n  private rollupProcess: RollupProcess;\n  private adlNav: ADLNav | null;\n  private contentDelivered: boolean = false;\n  private eventCallback: ((eventType: string, data?: any) => void) | null = null;\n  private globalObjectiveMap: Map<string, any> = new Map();\n  private now: () => Date;\n  private enhancedDeliveryValidation: boolean;\n\n  constructor(\n    activityTree: ActivityTree,\n    sequencingProcess: SequencingProcess,\n    rollupProcess: RollupProcess,\n    adlNav: ADLNav | null = null,\n    eventCallback: ((eventType: string, data?: any) => void) | null = null,\n    options?: { now?: () => Date; enhancedDeliveryValidation?: boolean }\n  ) {\n    this.activityTree = activityTree;\n    this.sequencingProcess = sequencingProcess;\n    this.rollupProcess = rollupProcess;\n    this.adlNav = adlNav;\n    this.eventCallback = eventCallback;\n    this.now = options?.now || (() => new Date());\n    this.enhancedDeliveryValidation = options?.enhancedDeliveryValidation === true;\n\n    // Initialize global objective map\n    this.initializeGlobalObjectiveMap();\n  }\n\n  /**\n   * Overall Sequencing Process (OP.1)\n   * Main entry point for processing navigation requests\n   * @param {NavigationRequestType} navigationRequest - The navigation request\n   * @param {string | null} targetActivityId - Target activity for choice/jump requests\n   * @return {DeliveryRequest} - The delivery request result\n   */\n  public processNavigationRequest(\n    navigationRequest: NavigationRequestType,\n    targetActivityId: string | null = null\n  ): DeliveryRequest {\n    // Step 1: Navigation Request Process (NB.2.1)\n    const navResult = this.navigationRequestProcess(navigationRequest, targetActivityId);\n\n    if (!navResult.valid) {\n      return new DeliveryRequest(false, null, navResult.exception);\n    }\n\n    // Step 2: Termination Request Process (TB.2.3) if needed\n    if (navResult.terminationRequest) {\n      const termResult = this.terminationRequestProcess(navResult.terminationRequest, !!navResult.sequencingRequest);\n      if (!termResult) {\n        return new DeliveryRequest(false, null, \"TB.2.3-1\");\n      }\n\n      // If this is a termination-only request (no sequencing request), return success\n      if (!navResult.sequencingRequest) {\n        return new DeliveryRequest(true, null);\n      }\n    }\n\n    // Step 3: Sequencing Request Process (SB.2.12)\n    if (navResult.sequencingRequest) {\n      const seqResult = this.sequencingProcess.sequencingRequestProcess(\n        navResult.sequencingRequest,\n        navResult.targetActivityId\n      );\n\n      if (seqResult.exception) {\n        return new DeliveryRequest(false, null, seqResult.exception);\n      }\n\n      if (seqResult.deliveryRequest === DeliveryRequestType.DELIVER && seqResult.targetActivity) {\n        // INTEGRATION: Validate rollup state consistency before delivery\n        if (this.activityTree.root && !this.rollupProcess.validateRollupStateConsistency(this.activityTree.root)) {\n          return new DeliveryRequest(false, null, \"OP.1-3\");\n        }\n\n        // INTEGRATION: Process global objective mapping before delivery\n        this.rollupProcess.processGlobalObjectiveMapping(seqResult.targetActivity, this.globalObjectiveMap);\n\n        // Step 4: Delivery Request Process (DB.1.1)\n        const deliveryResult = this.deliveryRequestProcess(seqResult.targetActivity);\n\n        if (deliveryResult.valid) {\n          // Step 5: Content Delivery Environment Process (DB.2)\n          this.contentDeliveryEnvironmentProcess(deliveryResult.targetActivity!);\n\n          // INTEGRATION: Validate rollup state consistency after delivery\n          if (this.activityTree.root) {\n            this.rollupProcess.validateRollupStateConsistency(this.activityTree.root);\n          }\n\n          return deliveryResult;\n        }\n\n        return deliveryResult;\n      }\n    }\n\n    return new DeliveryRequest(false, null, \"OP.1-1\");\n  }\n\n  /**\n   * Navigation Request Process (NB.2.1)\n   * Validates navigation requests and converts them to termination/sequencing requests\n   * @param {NavigationRequestType} request - The navigation request\n   * @param {string | null} targetActivityId - Target activity for choice/jump\n   * @return {NavigationRequestResult} - The validation result\n   */\n  private navigationRequestProcess(\n    request: NavigationRequestType,\n    targetActivityId: string | null = null\n  ): NavigationRequestResult {\n    // Enhanced logging for debugging\n    this.fireEvent(\"onNavigationRequestProcessing\", { request, targetActivityId });\n    const currentActivity = this.activityTree.currentActivity;\n\n    // Check if navigation request is valid\n    switch (request) {\n      case NavigationRequestType.START:\n        if (currentActivity !== null) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-1\");\n        }\n        return new NavigationRequestResult(\n          true,\n          null,\n          SequencingRequestType.START,\n          null\n        );\n\n      case NavigationRequestType.RESUME_ALL:\n        if (currentActivity !== null) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-2\");\n        }\n        if (this.activityTree.suspendedActivity === null) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-3\");\n        }\n        return new NavigationRequestResult(\n          true,\n          null,\n          SequencingRequestType.RESUME_ALL,\n          null\n        );\n\n      case NavigationRequestType.CONTINUE:\n        if (!currentActivity) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-4\");\n        }\n        if (!currentActivity.parent || !currentActivity.parent.sequencingControls.flow) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-5\");\n        }\n        return new NavigationRequestResult(\n          true,\n          SequencingRequestType.EXIT,\n          SequencingRequestType.CONTINUE,\n          null\n        );\n\n      case NavigationRequestType.PREVIOUS: {\n        if (!currentActivity) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-6\");\n        }\n        if (!currentActivity.parent || !currentActivity.parent.sequencingControls.flow) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-7\");\n        }\n\n        // Enhanced Forward-Only Navigation Constraints - Check at multiple cluster levels\n        const forwardOnlyValidation = this.validateForwardOnlyConstraints(currentActivity);\n        if (!forwardOnlyValidation.valid) {\n          return new NavigationRequestResult(false, null, null, null, forwardOnlyValidation.exception);\n        }\n\n        return new NavigationRequestResult(\n          true,\n          SequencingRequestType.EXIT,\n          SequencingRequestType.PREVIOUS,\n          null\n        );\n      }\n\n      case NavigationRequestType.CHOICE: {\n        if (!targetActivityId) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-9\");\n        }\n        const targetActivity = this.activityTree.getActivity(targetActivityId);\n        if (!targetActivity) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-10\");\n        }\n\n        // Enhanced Choice Path Validation\n        const choiceValidation = this.validateComplexChoicePath(currentActivity, targetActivity);\n        if (!choiceValidation.valid) {\n          return new NavigationRequestResult(false, null, null, null, choiceValidation.exception);\n        }\n\n        return new NavigationRequestResult(\n          true,\n          currentActivity ? SequencingRequestType.EXIT : null,\n          SequencingRequestType.CHOICE,\n          targetActivityId\n        );\n      }\n\n      case NavigationRequestType.JUMP:\n        if (!targetActivityId) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-12\");\n        }\n        return new NavigationRequestResult(\n          true,\n          null,\n          SequencingRequestType.JUMP,\n          targetActivityId\n        );\n\n      case NavigationRequestType.EXIT:\n        if (!currentActivity) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-13\");\n        }\n        if (currentActivity === this.activityTree.root) {\n          return new NavigationRequestResult(\n            true,\n            SequencingRequestType.EXIT_ALL,\n            null,\n            null\n          );\n        }\n        return new NavigationRequestResult(\n          true,\n          SequencingRequestType.EXIT,\n          null,\n          null\n        );\n\n      case NavigationRequestType.EXIT_ALL:\n        if (!currentActivity) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-14\");\n        }\n        return new NavigationRequestResult(\n          true,\n          SequencingRequestType.EXIT_ALL,\n          null,\n          null\n        );\n\n      case NavigationRequestType.ABANDON:\n        if (!currentActivity) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-15\");\n        }\n        return new NavigationRequestResult(\n          true,\n          SequencingRequestType.ABANDON,\n          null,\n          null\n        );\n\n      case NavigationRequestType.ABANDON_ALL:\n        if (!currentActivity) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-16\");\n        }\n        return new NavigationRequestResult(\n          true,\n          SequencingRequestType.ABANDON_ALL,\n          null,\n          null\n        );\n\n      case NavigationRequestType.SUSPEND_ALL:\n        if (!currentActivity) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-17\");\n        }\n        return new NavigationRequestResult(\n          true,\n          SequencingRequestType.SUSPEND_ALL,\n          null,\n          null\n        );\n\n      default:\n        return new NavigationRequestResult(false, null, null, null, \"NB.2.1-18\");\n    }\n  }\n\n  /**\n   * Enhanced Termination Request Process (TB.2.3)\n   * Processes termination requests with improved post-condition handling\n   * Priority 2 Gap: Post-Condition Rule Evaluation & Exit Action Rule Recursion\n   * @param {SequencingRequestType} request - The termination request\n   * @param {boolean} hasSequencingRequest - Whether a sequencing request follows\n   * @return {boolean} - True if termination was successful\n   */\n  private terminationRequestProcess(request: SequencingRequestType, hasSequencingRequest: boolean = false): boolean {\n    const currentActivity = this.activityTree.currentActivity;\n\n    if (!currentActivity) {\n      return false;\n    }\n\n    // Enhanced logging for debugging\n    this.fireEvent(\"onTerminationRequestProcessing\", {\n      request,\n      hasSequencingRequest,\n      currentActivity: currentActivity.id\n    });\n\n    // First, check exit action rules (TB.2.1) for EXIT request with recursion detection\n    if (request === SequencingRequestType.EXIT) {\n      const exitActionResult = this.enhancedExitActionRulesSubprocess(currentActivity);\n      if (exitActionResult.action) {\n        // Check for recursion to prevent infinite loops\n        if (exitActionResult.recursionDepth > 10) {\n          this.fireEvent(\"onSequencingError\", {\n            error: \"Exit action recursion detected\",\n            depth: exitActionResult.recursionDepth,\n            activity: currentActivity.id\n          });\n          return false;\n        }\n\n        switch (exitActionResult.action) {\n          case \"EXIT_PARENT\":\n            // Move up to parent and terminate from there\n            if (currentActivity.parent) {\n              this.activityTree.currentActivity = currentActivity.parent;\n              return this.terminationRequestProcess(request, hasSequencingRequest);\n            }\n            break;\n          case \"EXIT_ALL\":\n            // Convert to EXIT_ALL request\n            request = SequencingRequestType.EXIT_ALL;\n            break;\n        }\n      }\n    }\n\n    // For EXIT_ALL and ABANDON_ALL, terminate descendant attempts first\n    // For regular EXIT, also terminate descendants if current has children\n    if (request === SequencingRequestType.EXIT_ALL ||\n      request === SequencingRequestType.ABANDON_ALL ||\n      (request === SequencingRequestType.EXIT && currentActivity.children.length > 0)) {\n      this.terminateDescendentAttemptsProcess(currentActivity);\n    }\n\n    // For descendant activities in the tree, terminate them first\n    // For EXIT_ALL and ABANDON_ALL, also terminate descendants\n    // For regular EXIT, also terminate descendants if current has children\n    if (request === SequencingRequestType.EXIT_ALL ||\n      request === SequencingRequestType.ABANDON_ALL ||\n      (request === SequencingRequestType.EXIT && currentActivity.children.length > 0)) {\n      this.terminateDescendentAttemptsProcess(currentActivity);\n    }\n\n    // Enhanced termination processing with post-condition rule evaluation\n    const terminationResult = this.executeTermination(request, currentActivity, hasSequencingRequest);\n    if (!terminationResult.success) {\n      return false;\n    }\n\n    // Priority 2 Gap: Post-Condition Rule Evaluation Integration\n    // Evaluate post-condition rules after termination but before clearing current activity\n    if (terminationResult.shouldEvaluatePostConditions) {\n      const postConditionResult = this.integratePostConditionRulesSubprocess(currentActivity);\n      if (postConditionResult) {\n        // Post-condition rules triggered additional sequencing action\n        this.fireEvent(\"onPostConditionTriggered\", {\n          activity: currentActivity.id,\n          action: postConditionResult\n        });\n\n        // Handle post-condition sequencing request\n        // This might need to be processed by the sequencing engine\n        // but for termination we log it for now\n      }\n    }\n\n    // Priority 2 Gap: Complex Suspended Activity Cleanup\n    if (request === SequencingRequestType.EXIT_ALL || request === SequencingRequestType.ABANDON_ALL) {\n      this.performComplexSuspendedActivityCleanup();\n    }\n\n    return true;\n  }\n\n  /**\n   * Execute Termination\n   * Enhanced termination execution with proper state management\n   * @param {SequencingRequestType} request - Termination request\n   * @param {Activity} currentActivity - Current activity\n   * @param {boolean} hasSequencingRequest - Whether sequencing follows\n   * @return {{success: boolean, shouldEvaluatePostConditions: boolean}} - Termination result\n   */\n  private executeTermination(request: SequencingRequestType, currentActivity: Activity, hasSequencingRequest: boolean): {\n    success: boolean,\n    shouldEvaluatePostConditions: boolean\n  } {\n    let shouldEvaluatePostConditions = false;\n\n    try {\n      switch (request) {\n        case SequencingRequestType.EXIT:\n          // Terminate normally with post-condition evaluation\n          if (currentActivity.isActive) {\n            this.endAttemptProcess(currentActivity);\n            shouldEvaluatePostConditions = true;\n          }\n          // Move to parent only if no sequencing follows\n          if (!hasSequencingRequest) {\n            this.activityTree.currentActivity = currentActivity.parent;\n          }\n          break;\n\n        case SequencingRequestType.EXIT_ALL:\n          // Priority 2 Gap: Multi-Level Exit Actions\n          this.handleMultiLevelExitActions(this.activityTree.root!);\n          this.activityTree.currentActivity = null;\n          break;\n\n        case SequencingRequestType.ABANDON:\n          // Abandon without ending attempt\n          currentActivity.isActive = false;\n          // Move to parent only if no sequencing follows\n          if (!hasSequencingRequest) {\n            this.activityTree.currentActivity = currentActivity.parent;\n          }\n          break;\n\n        case SequencingRequestType.ABANDON_ALL:\n          // Abandon without ending attempt - clear current activity\n          currentActivity.isActive = false;\n          this.activityTree.currentActivity = null;\n          break;\n\n        case SequencingRequestType.SUSPEND_ALL:\n          // Suspend the current activity with enhanced cleanup\n          this.handleSuspendAllRequest(currentActivity);\n          break;\n\n        default:\n          return { success: false, shouldEvaluatePostConditions: false };\n      }\n\n      return { success: true, shouldEvaluatePostConditions };\n    } catch (error) {\n      this.fireEvent(\"onTerminationError\", {\n        error: error instanceof Error ? error.message : String(error),\n        request,\n        activity: currentActivity.id\n      });\n      return { success: false, shouldEvaluatePostConditions: false };\n    }\n  }\n\n  /**\n   * Enhanced Exit Action Rules Subprocess with recursion detection\n   * Priority 2 Gap: Exit Action Rule Recursion\n   * @param {Activity} activity - Activity to evaluate\n   * @param {number} recursionDepth - Current recursion depth\n   * @return {{action: string | null, recursionDepth: number}} - Exit action result\n   */\n  private enhancedExitActionRulesSubprocess(activity: Activity, recursionDepth: number = 0): {\n    action: string | null,\n    recursionDepth: number\n  } {\n    // Increment recursion depth to detect infinite loops\n    recursionDepth++;\n\n    // Check if activity has exit action rules\n    const exitRules = activity.sequencingRules.exitConditionRules;\n\n    for (const rule of exitRules) {\n      // Evaluate the rule conditions\n      let conditionsMet = true;\n\n      // Check rule condition combination\n      if (rule.conditionCombination === \"all\") {\n        conditionsMet = rule.conditions.every(condition => condition.evaluate(activity));\n      } else {\n        conditionsMet = rule.conditions.some(condition => condition.evaluate(activity));\n      }\n\n      if (conditionsMet) {\n        // Return the action to take with recursion tracking\n        if (rule.action === RuleActionType.EXIT_PARENT) {\n          return { action: \"EXIT_PARENT\", recursionDepth };\n        } else if (rule.action === RuleActionType.EXIT_ALL) {\n          return { action: \"EXIT_ALL\", recursionDepth };\n        }\n      }\n    }\n\n    return { action: null, recursionDepth };\n  }\n\n  /**\n   * Integrate Post-Condition Rules Subprocess\n   * Priority 2 Gap: Post-Condition Rule Evaluation Integration\n   * @param {Activity} activity - Activity to evaluate post-conditions for\n   * @return {string | null} - Post-condition action or null\n   */\n  private integratePostConditionRulesSubprocess(activity: Activity): string | null {\n    // Evaluate post-condition rules using the sequencing process\n    const postAction = this.sequencingProcess.evaluatePostConditionRules(activity);\n\n    if (postAction) {\n      // Log the post-condition action for tracking\n      this.fireEvent(\"onPostConditionEvaluated\", {\n        activity: activity.id,\n        action: postAction,\n        timestamp: new Date().toISOString()\n      });\n\n      return postAction;\n    }\n\n    return null;\n  }\n\n  /**\n   * Handle Multi-Level Exit Actions\n   * Priority 2 Gap: Multi-Level Exit Actions\n   * @param {Activity} rootActivity - Root activity to start from\n   */\n  private handleMultiLevelExitActions(rootActivity: Activity): void {\n    // Process exit actions at each level systematically\n    this.processExitActionsAtLevel(rootActivity, 0);\n\n    // Then terminate all activities\n    this.terminateAllActivities(rootActivity);\n  }\n\n  /**\n   * Process exit actions at specific level\n   * @param {Activity} activity - Activity to process\n   * @param {number} level - Current level in hierarchy\n   */\n  private processExitActionsAtLevel(activity: Activity, level: number): void {\n    // Process exit actions for this activity\n    const exitAction = this.enhancedExitActionRulesSubprocess(activity, 0);\n\n    if (exitAction.action) {\n      this.fireEvent(\"onMultiLevelExitAction\", {\n        activity: activity.id,\n        level,\n        action: exitAction.action\n      });\n    }\n\n    // Recursively process children\n    for (const child of activity.children) {\n      this.processExitActionsAtLevel(child, level + 1);\n    }\n  }\n\n  /**\n   * Perform Complex Suspended Activity Cleanup\n   * Priority 2 Gap: Complex Suspended Activity Cleanup\n   */\n  private performComplexSuspendedActivityCleanup(): void {\n    const suspendedActivity = this.activityTree.suspendedActivity;\n\n    if (suspendedActivity) {\n      // Clear suspended state from the activity and all its ancestors\n      let current: Activity | null = suspendedActivity;\n      const cleanedActivities: string[] = [];\n\n      while (current) {\n        if (current.isSuspended) {\n          current.isSuspended = false;\n          cleanedActivities.push(current.id);\n        }\n        current = current.parent;\n      }\n\n      // Clear suspended activity reference\n      this.activityTree.suspendedActivity = null;\n\n      // Fire cleanup event\n      this.fireEvent(\"onSuspendedActivityCleanup\", {\n        cleanedActivities,\n        originalSuspendedActivity: suspendedActivity.id\n      });\n    }\n  }\n\n  /**\n   * Handle Suspend All Request\n   * Enhanced suspend handling with proper state management\n   * @param {Activity} currentActivity - Current activity to suspend\n   */\n  private handleSuspendAllRequest(currentActivity: Activity): void {\n    // Suspend the current activity\n    currentActivity.isSuspended = true;\n    currentActivity.isActive = false;\n    this.activityTree.suspendedActivity = currentActivity;\n    this.activityTree.currentActivity = null;\n\n    // Log suspend event\n    this.fireEvent(\"onActivitySuspended\", {\n      activity: currentActivity.id,\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  /**\n   * Enhanced Delivery Request Process (DB.1.1)\n   * Priority 4 Gap: Comprehensive delivery validation with state consistency checks\n   * @param {Activity} activity - The activity to deliver\n   * @return {DeliveryRequest} - The delivery validation result\n   */\n  private deliveryRequestProcess(activity: Activity): DeliveryRequest {\n    // Enhanced logging for debugging\n    this.fireEvent(\"onDeliveryRequestProcessing\", {\n      activity: activity.id,\n      timestamp: new Date().toISOString()\n    });\n\n    if (this.enhancedDeliveryValidation) {\n      // Activity Tree State Consistency\n      const stateConsistencyCheck = this.validateActivityTreeStateConsistency(activity);\n      if (!stateConsistencyCheck.consistent) {\n        return new DeliveryRequest(false, null, stateConsistencyCheck.exception);\n      }\n    }\n\n    // Check if activity is a cluster (has children)\n    if (activity.children.length > 0) {\n      return new DeliveryRequest(false, null, \"DB.1.1-1\");\n    }\n\n    // Check if activity is an empty cluster (has flow control but no children)\n    // According to SCORM 2004, empty clusters should not be deliverable\n    if (activity.sequencingControls.flow && activity.children.length === 0) {\n      return new DeliveryRequest(false, null, \"DB.1.1-2\");\n    }\n\n    if (this.enhancedDeliveryValidation) {\n      const resourceConstraintCheck = this.validateResourceConstraints(activity);\n      if (!resourceConstraintCheck.available) {\n        return new DeliveryRequest(false, null, resourceConstraintCheck.exception);\n      }\n    }\n\n    if (this.enhancedDeliveryValidation) {\n      const concurrentDeliveryCheck = this.validateConcurrentDeliveryPrevention(activity);\n      if (!concurrentDeliveryCheck.allowed) {\n        return new DeliveryRequest(false, null, concurrentDeliveryCheck.exception);\n      }\n    }\n\n    if (this.enhancedDeliveryValidation) {\n      const dependencyCheck = this.validateActivityDependencies(activity);\n      if (!dependencyCheck.satisfied) {\n        return new DeliveryRequest(false, null, dependencyCheck.exception);\n      }\n    }\n\n    // Use Check Activity Process (UP.5) to validate if activity can be delivered\n    if (!this.checkActivityProcess(activity)) {\n      return new DeliveryRequest(false, null, \"DB.1.1-3\");\n    }\n\n    // Activity is a true leaf and passes all checks - can be delivered\n    return new DeliveryRequest(true, activity);\n  }\n\n  /**\n   * Content Delivery Environment Process (DB.2)\n   * Handles the delivery of content to the learner\n   * @param {Activity} activity - The activity to deliver\n   */\n  private contentDeliveryEnvironmentProcess(activity: Activity): void {\n    // Step 1: Clear Suspended Activity Subprocess (DB.2.1) if needed\n    if (this.activityTree.suspendedActivity &&\n      this.activityTree.suspendedActivity !== activity) {\n      this.clearSuspendedActivitySubprocess();\n    }\n\n    // Step 2: Set the activity as current and active\n    this.activityTree.currentActivity = activity;\n    activity.isActive = true;\n\n    // Step 3: Initialize attempt for the delivered activity (DB.2.2)\n    this.initializeActivityForDelivery(activity);\n\n    // Step 4: Set up activity attempt tracking information\n    this.setupActivityAttemptTracking(activity);\n\n    // Step 5: Mark that content has been delivered\n    this.contentDelivered = true;\n\n    // Step 6: Update navigation validity if ADL nav is available\n    if (this.adlNav) {\n      this.updateNavigationValidity();\n    }\n\n    // Step 7: Fire activity delivery event\n    this.fireActivityDeliveryEvent(activity);\n  }\n\n  /**\n   * Initialize Activity For Delivery (DB.2.2)\n   * Set up initial tracking states for a delivered activity\n   * @param {Activity} activity - The activity being delivered\n   */\n  private initializeActivityForDelivery(activity: Activity): void {\n    // Set initial attempt states if not already set\n    if (activity.completionStatus === \"unknown\") {\n      // For leaf activities, set to \"not attempted\" initially\n      if (activity.children.length === 0) {\n        activity.completionStatus = \"not attempted\";\n      }\n    }\n\n    // Initialize objective satisfied status if not set\n    if (activity.objectiveSatisfiedStatus === null) {\n      activity.objectiveSatisfiedStatus = false;\n    }\n\n    // Initialize progress measure status\n    if (activity.progressMeasure === null) {\n      activity.progressMeasure = 0.0;\n      activity.progressMeasureStatus = false;\n    }\n\n    // Initialize objective measure if not set\n    if (activity.objectiveNormalizedMeasure === null) {\n      activity.objectiveNormalizedMeasure = 0.0;\n      activity.objectiveMeasureStatus = false;\n    }\n\n    // Set up activity attempt information\n    activity.attemptAbsoluteDuration = \"PT0H0M0S\";\n    activity.attemptExperiencedDuration = \"PT0H0M0S\";\n\n    // Mark as available for sequencing\n    activity.isAvailable = true;\n  }\n\n  /**\n   * Setup Activity Attempt Tracking\n   * Initialize attempt tracking information per SCORM 2004 4th Edition\n   * @param {Activity} activity - The activity being delivered\n   */\n  private setupActivityAttemptTracking(activity: Activity): void {\n    // Initialize attempt counter if this is a new attempt\n    if (!activity.attemptCount || activity.attemptCount === 0) {\n      activity.attemptCount = 1;\n    }\n\n    // Set attempt start time (use injected clock)\n    activity.attemptAbsoluteStartTime = this.now().toISOString();\n\n    // Initialize location if not set\n    if (!activity.location) {\n      activity.location = \"\";\n    }\n\n    // Set up activity state\n    activity.activityAttemptActive = true;\n\n    // Initialize learner preferences if not set\n    if (!activity.learnerPrefs) {\n      activity.learnerPrefs = {\n        audioCaptioning: \"0\",\n        audioLevel: \"1\",\n        deliverySpeed: \"1\",\n        language: \"\"\n      };\n    }\n  }\n\n  /**\n   * Fire Activity Delivery Event\n   * Notify listeners that an activity has been delivered\n   * @param {Activity} activity - The activity that was delivered\n   */\n  private fireActivityDeliveryEvent(activity: Activity): void {\n    // Fire event through callback if available\n    try {\n      if (this.eventCallback) {\n        this.eventCallback(\"onActivityDelivery\", activity);\n      }\n      console.debug(`Activity delivered: ${activity.id} - ${activity.title}`);\n    } catch (error) {\n      // Silently handle event firing errors to not disrupt sequencing\n      console.warn(`Failed to fire activity delivery event: ${error}`);\n    }\n  }\n\n  /**\n   * Fire a sequencing event\n   * @param {string} eventType - The type of event\n   * @param {any} data - Event data\n   */\n  private fireEvent(eventType: string, data?: any): void {\n    try {\n      if (this.eventCallback) {\n        this.eventCallback(eventType, data);\n      }\n    } catch (error) {\n      console.warn(`Failed to fire sequencing event ${eventType}: ${error}`);\n    }\n  }\n\n  /**\n   * Clear Suspended Activity Subprocess (DB.2.1)\n   * Clears the suspended activity state\n   */\n  private clearSuspendedActivitySubprocess(): void {\n    if (this.activityTree.suspendedActivity) {\n      // Clear suspended state from the activity and all its ancestors\n      let current: Activity | null = this.activityTree.suspendedActivity;\n      while (current) {\n        current.isSuspended = false;\n        current = current.parent;\n      }\n      this.activityTree.suspendedActivity = null;\n    }\n  }\n\n  /**\n   * End Attempt Process (UP.4)\n   * Ends an attempt on an activity\n   * @param {Activity} activity - The activity to end attempt on\n   */\n  private endAttemptProcess(activity: Activity): void {\n    if (!activity.isActive) {\n      return;\n    }\n\n    // Set activity as inactive\n    activity.isActive = false;\n\n    // Update attempt completion status if not already set\n    if (activity.completionStatus === \"unknown\") {\n      activity.completionStatus = \"incomplete\";\n    }\n\n    // Update success status if needed\n    if (activity.successStatus === \"unknown\" && activity.objectiveSatisfiedStatus) {\n      activity.successStatus = activity.objectiveSatisfiedStatus ? \"passed\" : \"failed\";\n    }\n\n    // INTEGRATION: Process global objective mapping after activity completion\n    this.rollupProcess.processGlobalObjectiveMapping(activity, this.globalObjectiveMap);\n\n    // Trigger rollup from this activity\n    this.rollupProcess.overallRollupProcess(activity);\n\n    // INTEGRATION: Validate rollup state consistency after rollup\n    if (this.activityTree.root) {\n      this.rollupProcess.validateRollupStateConsistency(this.activityTree.root);\n    }\n  }\n\n  /**\n   * Update navigation validity in ADL nav\n   */\n  private updateNavigationValidity(): void {\n    if (!this.adlNav || !this.activityTree.currentActivity) {\n      return;\n    }\n\n    // Update continue validity\n    const continueResult = this.navigationRequestProcess(NavigationRequestType.CONTINUE);\n    try {\n      this.adlNav.request_valid.continue = continueResult.valid ? \"true\" : \"false\";\n    } catch (e) {\n      // Navigation validity might be read-only after init\n    }\n\n    // Update previous validity\n    const previousResult = this.navigationRequestProcess(NavigationRequestType.PREVIOUS);\n    try {\n      this.adlNav.request_valid.previous = previousResult.valid ? \"true\" : \"false\";\n    } catch (e) {\n      // Navigation validity might be read-only after init\n    }\n\n    // Compute per-target choice/jump validity and emit an event snapshot\n    const allActivities = this.activityTree.getAllActivities();\n    const choiceMap: { [key: string]: string } = {};\n    const jumpMap: { [key: string]: string } = {};\n    for (const act of allActivities) {\n      const choiceRes = this.navigationRequestProcess(NavigationRequestType.CHOICE, act.id);\n      choiceMap[act.id] = choiceRes.valid ? \"true\" : \"false\";\n      const jumpRes = this.navigationRequestProcess(NavigationRequestType.JUMP, act.id);\n      jumpMap[act.id] = jumpRes.valid ? \"true\" : \"false\";\n    }\n    // Best-effort update of adl.nav.request_valid maps (may be RO post-init)\n    try {\n      this.adlNav.request_valid.choice = choiceMap;\n    } catch (e) {\n      // Ignore read-only constraints on nav request_valid during runtime\n    }\n    try {\n      this.adlNav.request_valid.jump = jumpMap;\n    } catch (e) {\n      // Ignore read-only constraints on nav request_valid during runtime\n    }\n    // Notify listeners so LMS can update UI regardless of read-only state\n    this.fireEvent(\"onNavigationValidityUpdate\", {\n      continue: continueResult.valid,\n      previous: previousResult.valid,\n      choice: choiceMap,\n      jump: jumpMap,\n    });\n  }\n\n  /**\n   * Find common ancestor between two activities\n   */\n  private findCommonAncestor(activity1: Activity, activity2: Activity): Activity | null {\n    // Get ancestors of activity1\n    const ancestors1: Activity[] = [];\n    let current: Activity | null = activity1;\n    while (current) {\n      ancestors1.push(current);\n      current = current.parent;\n    }\n\n    // Find first common ancestor\n    current = activity2;\n    while (current) {\n      if (ancestors1.includes(current)) {\n        return current;\n      }\n      current = current.parent;\n    }\n\n    return null;\n  }\n\n  /**\n   * Check if content has been delivered\n   */\n  public hasContentBeenDelivered(): boolean {\n    return this.contentDelivered;\n  }\n\n  /**\n   * Reset content delivered flag\n   */\n  public resetContentDelivered(): void {\n    this.contentDelivered = false;\n  }\n\n  /**\n   * Exit Action Rules Subprocess (TB.2.1)\n   * Evaluates exit action rules for the current activity\n   * @param {Activity} activity - The activity to evaluate\n   * @return {string | null} - The exit action to take, or null if none\n   */\n  private exitActionRulesSubprocess(activity: Activity): string | null {\n    // Check if activity has exit action rules\n    const exitRules = activity.sequencingRules.exitConditionRules;\n\n    for (const rule of exitRules) {\n      // Evaluate the rule conditions\n      let conditionsMet = true;\n\n      // Check rule condition combination\n      if (rule.conditionCombination === \"all\") {\n        conditionsMet = rule.conditions.every(condition => condition.evaluate(activity));\n      } else {\n        conditionsMet = rule.conditions.some(condition => condition.evaluate(activity));\n      }\n\n      if (conditionsMet) {\n        // Return the action to take\n        if (rule.action === RuleActionType.EXIT_PARENT) {\n          return \"EXIT_PARENT\";\n        } else if (rule.action === RuleActionType.EXIT_ALL) {\n          return \"EXIT_ALL\";\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Terminate all activities in the tree\n   * @param {Activity} activity - The activity to start from (usually root)\n   */\n  private terminateAllActivities(activity: Activity): void {\n    // Recursively terminate all children first\n    for (const child of activity.children) {\n      this.terminateAllActivities(child);\n    }\n\n    // Then terminate this activity\n    if (activity.isActive) {\n      this.endAttemptProcess(activity);\n    }\n  }\n\n  /**\n   * Limit Conditions Check Process (UP.1)\n   * Checks if any limit conditions are violated for the activity\n   * @param {Activity} activity - The activity to check limit conditions for\n   * @return {boolean} - True if limit conditions are met, false if violated\n   */\n  private limitConditionsCheckProcess(activity: Activity): boolean {\n    let result = true;\n    let failureReason = \"\";\n\n    // Check attempt limit\n    if (activity.attemptLimit !== null && activity.attemptLimit > 0) {\n      if (activity.attemptCount >= activity.attemptLimit) {\n        result = false;\n        failureReason = \"Attempt limit exceeded\";\n      }\n    }\n\n    // Check attempt absolute duration limit\n    if (result && activity.attemptAbsoluteDurationLimit) {\n      const currentDuration = getDurationAsSeconds(activity.attemptAbsoluteDuration || \"PT0H0M0S\", scorm2004_regex.CMITimespan);\n      const limitDuration = getDurationAsSeconds(activity.attemptAbsoluteDurationLimit, scorm2004_regex.CMITimespan);\n      if (currentDuration >= limitDuration) {\n        result = false;\n        failureReason = \"Attempt duration limit exceeded\";\n      }\n    }\n\n    // Check activity absolute duration limit\n    if (result && activity.activityAbsoluteDurationLimit) {\n      const currentDuration = getDurationAsSeconds(activity.activityAbsoluteDuration || \"PT0H0M0S\", scorm2004_regex.CMITimespan);\n      const limitDuration = getDurationAsSeconds(activity.activityAbsoluteDurationLimit, scorm2004_regex.CMITimespan);\n      if (currentDuration >= limitDuration) {\n        result = false;\n        failureReason = \"Activity duration limit exceeded\";\n      }\n    }\n\n    // Check begin time limit\n    if (result && activity.beginTimeLimit) {\n      const currentTime = this.now();\n      const beginTime = new Date(activity.beginTimeLimit);\n      if (currentTime < beginTime) {\n        result = false;\n        failureReason = \"Not yet time to begin\";\n      }\n    }\n\n    // Check end time limit\n    if (result && activity.endTimeLimit) {\n      const currentTime = this.now();\n      const endTime = new Date(activity.endTimeLimit);\n      if (currentTime > endTime) {\n        result = false;\n        failureReason = \"Time limit expired\";\n      }\n    }\n\n    // Fire limit condition check event\n    this.fireEvent(\"onLimitConditionCheck\", {\n      activity: activity,\n      result: result,\n      failureReason: failureReason,\n      checks: {\n        attemptLimit: activity.attemptLimit,\n        attemptCount: activity.attemptCount,\n        attemptDurationLimit: activity.attemptAbsoluteDurationLimit,\n        activityDurationLimit: activity.activityAbsoluteDurationLimit,\n        beginTimeLimit: activity.beginTimeLimit,\n        endTimeLimit: activity.endTimeLimit\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Check Activity Process (UP.5)\n   * Validates if an activity can be delivered\n   * @param {Activity} activity - The activity to check\n   * @return {boolean} - True if activity can be delivered\n   */\n  private checkActivityProcess(activity: Activity): boolean {\n    // Check if activity is available\n    if (!activity.isAvailable) {\n      return false;\n    }\n\n    // Check if activity is hidden from choice (if this is a choice request)\n    if (activity.isHiddenFromChoice) {\n      // This would be false for choice navigation, but we need context\n      // For now, we'll allow it but this should be enhanced\n    }\n\n    // Check limit conditions (UP.1)\n    if (!this.limitConditionsCheckProcess(activity)) {\n      return false;\n    }\n\n    // Check if activity is a cluster that can't be delivered directly\n    if (activity.children.length > 0 && !activity.sequencingControls.flow) {\n      return false; // Clusters without flow can't be delivered\n    }\n\n    // Activity passes all checks\n    return true;\n  }\n\n  /**\n   * Terminate Descendent Attempts Process (UP.3)\n   * Recursively terminates all active descendant attempts\n   * @param {Activity} activity - The activity whose descendants to terminate\n   */\n  private terminateDescendentAttemptsProcess(activity: Activity): void {\n    // Process all children\n    for (const child of activity.children) {\n      // Recursively terminate descendants first\n      if (child.children.length > 0) {\n        this.terminateDescendentAttemptsProcess(child);\n      }\n\n      // Check exit rules for the child\n      const exitAction = this.exitActionRulesSubprocess(child);\n\n      // Terminate the child if it's active\n      if (child.isActive) {\n        // Apply exit action if any\n        if (exitAction === \"EXIT_ALL\") {\n          // Recursively terminate all descendants\n          this.terminateDescendentAttemptsProcess(child);\n        }\n\n        // End the attempt\n        this.endAttemptProcess(child);\n      }\n    }\n  }\n\n  /**\n   * Get Sequencing State for Persistence\n   * Returns the current state of the sequencing engine for multi-session support\n   * @return {object} - Serializable sequencing state\n   */\n  public getSequencingState(): any {\n    return {\n      version: \"1.0\",\n      timestamp: new Date().toISOString(),\n      contentDelivered: this.contentDelivered,\n      currentActivity: this.activityTree.currentActivity?.id || null,\n      suspendedActivity: this.activityTree.suspendedActivity?.id || null,\n      activityStates: this.serializeActivityStates(),\n      navigationState: this.getNavigationState()\n    };\n  }\n\n  /**\n   * Restore Sequencing State from Persistence\n   * Restores the sequencing engine state from a previous session\n   * @param {any} state - Previously saved sequencing state\n   * @return {boolean} - True if restoration was successful\n   */\n  public restoreSequencingState(state: any): boolean {\n    try {\n      if (!state || state.version !== \"1.0\") {\n        console.warn(\"Incompatible sequencing state version\");\n        return false;\n      }\n\n      // Restore basic flags\n      this.contentDelivered = state.contentDelivered || false;\n\n      // Restore activity states\n      if (state.activityStates) {\n        this.deserializeActivityStates(state.activityStates);\n      }\n\n      // Restore current activity\n      if (state.currentActivity) {\n        const currentActivity = this.activityTree.getActivity(state.currentActivity);\n        if (currentActivity) {\n          this.activityTree.currentActivity = currentActivity;\n          currentActivity.isActive = true;\n        }\n      }\n\n      // Restore suspended activity\n      if (state.suspendedActivity) {\n        const suspendedActivity = this.activityTree.getActivity(state.suspendedActivity);\n        if (suspendedActivity) {\n          this.activityTree.suspendedActivity = suspendedActivity;\n          suspendedActivity.isSuspended = true;\n        }\n      }\n\n      // Restore navigation state\n      if (state.navigationState) {\n        this.restoreNavigationState(state.navigationState);\n      }\n\n      console.debug(\"Sequencing state restored successfully\");\n      return true;\n    } catch (error) {\n      console.error(`Failed to restore sequencing state: ${error}`);\n      return false;\n    }\n  }\n\n  /**\n   * Serialize Activity States\n   * Creates a serializable representation of all activity states\n   * @return {object} - Serialized activity states\n   */\n  private serializeActivityStates(): any {\n    const states: any = {};\n\n    const serializeActivity = (activity: Activity) => {\n      states[activity.id] = {\n        id: activity.id,\n        title: activity.title,\n        isActive: activity.isActive,\n        isSuspended: activity.isSuspended,\n        isCompleted: activity.isCompleted,\n        completionStatus: activity.completionStatus,\n        successStatus: activity.successStatus,\n        attemptCount: activity.attemptCount,\n        attemptCompletionAmount: activity.attemptCompletionAmount,\n        attemptAbsoluteDuration: activity.attemptAbsoluteDuration,\n        attemptExperiencedDuration: activity.attemptExperiencedDuration,\n        activityAbsoluteDuration: activity.activityAbsoluteDuration,\n        activityExperiencedDuration: activity.activityExperiencedDuration,\n        objectiveSatisfiedStatus: activity.objectiveSatisfiedStatus,\n        objectiveMeasureStatus: activity.objectiveMeasureStatus,\n        objectiveNormalizedMeasure: activity.objectiveNormalizedMeasure,\n        progressMeasure: activity.progressMeasure,\n        progressMeasureStatus: activity.progressMeasureStatus,\n        isAvailable: activity.isAvailable,\n        location: activity.location,\n        attemptAbsoluteStartTime: activity.attemptAbsoluteStartTime\n      };\n\n      // Recursively serialize children\n      for (const child of activity.children) {\n        serializeActivity(child);\n      }\n    };\n\n    if (this.activityTree.root) {\n      serializeActivity(this.activityTree.root);\n    }\n\n    return states;\n  }\n\n  /**\n   * Deserialize Activity States\n   * Restores activity states from serialized data\n   * @param {any} states - Serialized activity states\n   */\n  private deserializeActivityStates(states: any): void {\n    const restoreActivity = (activity: Activity) => {\n      const state = states[activity.id];\n      if (state) {\n        activity.isActive = state.isActive || false;\n        activity.isSuspended = state.isSuspended || false;\n        activity.isCompleted = state.isCompleted || false;\n        activity.completionStatus = state.completionStatus || \"unknown\";\n        activity.successStatus = state.successStatus || \"unknown\";\n        activity.attemptCount = state.attemptCount || 0;\n        activity.attemptCompletionAmount = state.attemptCompletionAmount || 0;\n        activity.attemptAbsoluteDuration = state.attemptAbsoluteDuration || \"PT0H0M0S\";\n        activity.attemptExperiencedDuration = state.attemptExperiencedDuration || \"PT0H0M0S\";\n        activity.activityAbsoluteDuration = state.activityAbsoluteDuration || \"PT0H0M0S\";\n        activity.activityExperiencedDuration = state.activityExperiencedDuration || \"PT0H0M0S\";\n        activity.objectiveSatisfiedStatus = state.objectiveSatisfiedStatus || false;\n        activity.objectiveMeasureStatus = state.objectiveMeasureStatus || false;\n        activity.objectiveNormalizedMeasure = state.objectiveNormalizedMeasure || 0;\n        activity.progressMeasure = state.progressMeasure || null;\n        activity.progressMeasureStatus = state.progressMeasureStatus || false;\n        activity.isAvailable = state.isAvailable !== false; // Default to true\n        activity.location = state.location || \"\";\n        activity.attemptAbsoluteStartTime = state.attemptAbsoluteStartTime || null;\n      }\n\n      // Recursively restore children\n      for (const child of activity.children) {\n        restoreActivity(child);\n      }\n    };\n\n    if (this.activityTree.root) {\n      restoreActivity(this.activityTree.root);\n    }\n  }\n\n  /**\n   * Get Navigation State\n   * Returns current navigation validity and ADL nav state\n   * @return {any} - Navigation state\n   */\n  private getNavigationState(): any {\n    if (!this.adlNav) {\n      return null;\n    }\n\n    return {\n      request: this.adlNav.request || \"_none_\",\n      requestValid: {\n        continue: this.adlNav.request_valid?.continue || \"false\",\n        previous: this.adlNav.request_valid?.previous || \"false\",\n        choice: this.adlNav.request_valid?.choice || \"false\",\n        jump: this.adlNav.request_valid?.jump || \"false\",\n        exit: this.adlNav.request_valid?.exit || \"false\",\n        exitAll: this.adlNav.request_valid?.exitAll || \"false\",\n        abandon: this.adlNav.request_valid?.abandon || \"false\",\n        abandonAll: this.adlNav.request_valid?.abandonAll || \"false\",\n        suspendAll: this.adlNav.request_valid?.suspendAll || \"false\"\n      }\n    };\n  }\n\n  /**\n   * Restore Navigation State\n   * Restores ADL navigation state\n   * @param {any} navState - Navigation state to restore\n   */\n  private restoreNavigationState(navState: any): void {\n    if (!this.adlNav || !navState) {\n      return;\n    }\n\n    try {\n      // Restore navigation request validity\n      if (navState.requestValid) {\n        const requestValid = navState.requestValid;\n        this.adlNav.request_valid.continue = requestValid.continue || \"false\";\n        this.adlNav.request_valid.previous = requestValid.previous || \"false\";\n        this.adlNav.request_valid.choice = requestValid.choice || \"false\";\n        this.adlNav.request_valid.jump = requestValid.jump || \"false\";\n        this.adlNav.request_valid.exit = requestValid.exit || \"false\";\n        this.adlNav.request_valid.exitAll = requestValid.exitAll || \"false\";\n        this.adlNav.request_valid.abandon = requestValid.abandon || \"false\";\n        this.adlNav.request_valid.abandonAll = requestValid.abandonAll || \"false\";\n        this.adlNav.request_valid.suspendAll = requestValid.suspendAll || \"false\";\n      }\n    } catch (error) {\n      // Navigation properties might be read-only after initialization\n      console.warn(`Could not fully restore navigation state: ${error}`);\n    }\n  }\n\n  /**\n   * Enhanced Complex Choice Path Validation\n   * Implements comprehensive choice validation with nested hierarchy support\n   * Priority 1 Gap: Complex Choice Path Validation\n   * @param {Activity | null} currentActivity - Current activity\n   * @param {Activity} targetActivity - Target activity for choice\n   * @return {{valid: boolean, exception: string | null}} - Validation result\n   */\n  private validateComplexChoicePath(currentActivity: Activity | null, targetActivity: Activity): {\n    valid: boolean,\n    exception: string | null\n  } {\n    // Check if target is hidden from choice\n    if (targetActivity.isHiddenFromChoice) {\n      return { valid: false, exception: \"NB.2.1-11\" };\n    }\n\n    // Check if target is disabled\n    if (this.isActivityDisabled(targetActivity)) {\n      return { valid: false, exception: \"NB.2.1-11\" };\n    }\n\n    if (currentActivity) {\n      const commonAncestor = this.findCommonAncestor(currentActivity, targetActivity);\n      if (!commonAncestor) {\n        return { valid: false, exception: \"NB.2.1-11\" };\n      }\n\n      // Enhanced constrainChoice control validation in nested hierarchies\n      const constrainChoiceValidation = this.validateConstrainChoiceControls(currentActivity, targetActivity, commonAncestor);\n      if (!constrainChoiceValidation.valid) {\n        return constrainChoiceValidation;\n      }\n\n      // Validate choice sets with multiple targets\n      const choiceSetValidation = this.validateChoiceSetConstraints(currentActivity, targetActivity, commonAncestor);\n      if (!choiceSetValidation.valid) {\n        return choiceSetValidation;\n      }\n    }\n\n    // Path to root validation for choice control\n    let activity: Activity | null = targetActivity;\n    while (activity) {\n      if (activity.parent && !activity.parent.sequencingControls.choice) {\n        return { valid: false, exception: \"NB.2.1-11\" };\n      }\n      activity = activity.parent;\n    }\n\n    return { valid: true, exception: null };\n  }\n\n  /**\n   * Enhanced Forward-Only Navigation Constraints\n   * Handles forward-only constraints at different cluster levels\n   * Priority 1 Gap: Forward-Only Navigation Constraints\n   * @param {Activity} currentActivity - Current activity\n   * @return {{valid: boolean, exception: string | null}} - Validation result\n   */\n  private validateForwardOnlyConstraints(currentActivity: Activity): {\n    valid: boolean,\n    exception: string | null\n  } {\n    // Check forward-only constraint at immediate parent level\n    if (currentActivity.parent?.sequencingControls.forwardOnly) {\n      return { valid: false, exception: \"NB.2.1-8\" };\n    }\n\n    // Check forward-only constraints at higher cluster levels\n    let ancestor = currentActivity.parent?.parent;\n    while (ancestor) {\n      if (ancestor.sequencingControls.forwardOnly) {\n        // If any ancestor cluster has forwardOnly=true, previous navigation is blocked\n        return { valid: false, exception: \"NB.2.1-8\" };\n      }\n      ancestor = ancestor.parent;\n    }\n\n    return { valid: true, exception: null };\n  }\n\n  /**\n   * Enhanced constrainChoice Control Validation\n   * Implements proper constrainChoice validation in nested hierarchies\n   * Priority 1 Gap: constrainChoice control validation\n   * @param {Activity} currentActivity - Current activity\n   * @param {Activity} targetActivity - Target activity\n   * @param {Activity} commonAncestor - Common ancestor\n   * @return {{valid: boolean, exception: string | null}} - Validation result\n   */\n  private validateConstrainChoiceControls(currentActivity: Activity, targetActivity: Activity, commonAncestor: Activity): {\n    valid: boolean,\n    exception: string | null\n  } {\n    // Check constrainChoice at common ancestor level\n    if (commonAncestor.sequencingControls.constrainChoice) {\n      // Additional constraint validation for choice navigation\n      // This would include checking if the choice is within allowed boundaries\n      const currentIndex = commonAncestor.children.indexOf(this.findChildContaining(commonAncestor, currentActivity)!);\n      const targetIndex = commonAncestor.children.indexOf(this.findChildContaining(commonAncestor, targetActivity)!);\n\n      // Example constraint: constrainChoice might limit choices to adjacent activities only\n      if (Math.abs(currentIndex - targetIndex) > 1) {\n        return { valid: false, exception: \"NB.2.1-11\" };\n      }\n    }\n\n    // Check constrainChoice controls up the hierarchy\n    let ancestor = commonAncestor.parent;\n    while (ancestor) {\n      if (ancestor.sequencingControls.constrainChoice) {\n        // Apply ancestor-level constraints\n        const ancestorValidation = this.validateAncestorConstraints(ancestor, currentActivity, targetActivity);\n        if (!ancestorValidation.valid) {\n          return ancestorValidation;\n        }\n      }\n      ancestor = ancestor.parent;\n    }\n\n    return { valid: true, exception: null };\n  }\n\n  /**\n   * Validate Choice Set Constraints\n   * Validates choice sets with multiple targets\n   * Priority 1 Gap: Choice Set Constraints\n   * @param {Activity} currentActivity - Current activity\n   * @param {Activity} targetActivity - Target activity\n   * @param {Activity} commonAncestor - Common ancestor\n   * @return {{valid: boolean, exception: string | null}} - Validation result\n   */\n  private validateChoiceSetConstraints(currentActivity: Activity, targetActivity: Activity, commonAncestor: Activity): {\n    valid: boolean,\n    exception: string | null\n  } {\n    // Check if target is within the valid choice set\n    const validChoiceSet = this.getValidChoiceSet(commonAncestor, currentActivity);\n    if (!validChoiceSet.includes(targetActivity)) {\n      return { valid: false, exception: \"NB.2.1-11\" };\n    }\n\n    return { valid: true, exception: null };\n  }\n\n  /**\n   * Check if activity is disabled\n   * Priority 1 Gap: Disabled Activity Detection\n   * @param {Activity} activity - Activity to check\n   * @return {boolean} - True if disabled\n   */\n  private isActivityDisabled(activity: Activity): boolean {\n    // Check if activity is disabled through sequencing rules\n    const preConditionResult = this.evaluatePreConditionRulesForChoice(activity);\n    return preConditionResult === \"DISABLED\";\n  }\n\n  /**\n   * Find child activity that contains the target activity\n   * @param {Activity} parent - Parent activity\n   * @param {Activity} target - Target activity to find\n   * @return {Activity | null} - Child activity containing target\n   */\n  private findChildContaining(parent: Activity, target: Activity): Activity | null {\n    for (const child of parent.children) {\n      if (child === target) {\n        return child;\n      }\n      if (this.activityContains(child, target)) {\n        return child;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Check if an activity contains another activity in its hierarchy\n   * @param {Activity} container - Container activity\n   * @param {Activity} target - Target activity\n   * @return {boolean} - True if container contains target\n   */\n  private activityContains(container: Activity, target: Activity): boolean {\n    let current: Activity | null = target;\n    while (current) {\n      if (current === container) {\n        return true;\n      }\n      current = current.parent;\n    }\n    return false;\n  }\n\n  /**\n   * Validate ancestor-level constraints\n   * @param {Activity} ancestor - Ancestor activity\n   * @param {Activity} currentActivity - Current activity\n   * @param {Activity} targetActivity - Target activity\n   * @return {{valid: boolean, exception: string | null}} - Validation result\n   */\n  private validateAncestorConstraints(ancestor: Activity, currentActivity: Activity, targetActivity: Activity): {\n    valid: boolean,\n    exception: string | null\n  } {\n    // Enforce forwardOnly and mandatory activity constraints at ancestor level\n    const children = ancestor.children;\n    if (!children || children.length === 0) {\n      return { valid: true, exception: null };\n    }\n\n    const currentTop = this.findChildContaining(ancestor, currentActivity);\n    const targetTop = this.findChildContaining(ancestor, targetActivity);\n    if (!currentTop || !targetTop) {\n      return { valid: false, exception: \"NB.2.1-11\" };\n    }\n\n    const currentIndex = children.indexOf(currentTop);\n    const targetIndex = children.indexOf(targetTop);\n\n    // Forward-only prevents backwards choice under this ancestor\n    if (ancestor.sequencingControls.forwardOnly && targetIndex < currentIndex) {\n      return { valid: false, exception: \"NB.2.1-8\" };\n    }\n\n    // Do not skip mandatory incomplete siblings when moving forward\n    if (targetIndex > currentIndex) {\n      for (let i = currentIndex + 1; i < targetIndex; i++) {\n        const between = children[i];\n        if (between && this.helperIsActivityMandatory(between) && !this.helperIsActivityCompleted(between)) {\n          return { valid: false, exception: \"NB.2.1-11\" };\n        }\n      }\n    }\n\n    return { valid: true, exception: null };\n  }\n\n  /** Helper: mandatory activity detection (mirrors SequencingProcess behavior) */\n  private helperIsActivityMandatory(activity: Activity): boolean {\n    if (activity.sequencingRules && activity.sequencingRules.preConditionRules) {\n      for (const rule of activity.sequencingRules.preConditionRules) {\n        if ((rule as any).action === \"skip\" && (rule as any).conditions && (rule as any).conditions.length === 0) {\n          return false;\n        }\n      }\n    }\n    return (activity as any).mandatory !== false;\n  }\n\n  /** Helper: completed-state check (mirrors SequencingProcess behavior) */\n  private helperIsActivityCompleted(activity: Activity): boolean {\n    return (\n      activity.completionStatus === \"completed\" ||\n      (activity as any).successStatus === \"passed\" ||\n      activity.successStatus === \"passed\"\n    );\n  }\n\n  /**\n   * Get valid choice set for current activity\n   * @param {Activity} commonAncestor - Common ancestor\n   * @param {Activity} currentActivity - Current activity\n   * @return {Activity[]} - Array of valid choice activities\n   */\n  private getValidChoiceSet(commonAncestor: Activity, currentActivity: Activity): Activity[] {\n    const validChoices: Activity[] = [];\n\n    // Get all potential choice targets within the common ancestor\n    const allDescendants = this.getAllDescendants(commonAncestor);\n\n    for (const descendant of allDescendants) {\n      if (this.isValidChoiceTarget(descendant, currentActivity)) {\n        validChoices.push(descendant);\n      }\n    }\n\n    return validChoices;\n  }\n\n  /**\n   * Get all descendants of an activity\n   * @param {Activity} activity - Parent activity\n   * @return {Activity[]} - Array of all descendant activities\n   */\n  private getAllDescendants(activity: Activity): Activity[] {\n    const descendants: Activity[] = [];\n\n    for (const child of activity.children) {\n      descendants.push(child);\n      descendants.push(...this.getAllDescendants(child));\n    }\n\n    return descendants;\n  }\n\n  /**\n   * Check if activity is valid choice target\n   * @param {Activity} target - Target activity\n   * @param {Activity} currentActivity - Current activity\n   * @return {boolean} - True if valid choice target\n   */\n  private isValidChoiceTarget(target: Activity, currentActivity: Activity): boolean {\n    // Basic validation for choice target\n    if (target.isHiddenFromChoice) {\n      return false;\n    }\n\n    if (target === currentActivity) {\n      return false;\n    }\n\n    return !this.isActivityDisabled(target);\n  }\n\n  /**\n   * Evaluate pre-condition rules for choice navigation\n   * @param {Activity} activity - Activity to evaluate\n   * @return {string | null} - Rule result or null\n   */\n  private evaluatePreConditionRulesForChoice(activity: Activity): string | null {\n    // This would evaluate the activity's pre-condition rules\n    // and return \"DISABLED\", \"SKIP\", \"HIDDEN_FROM_CHOICE\", or null\n    const preRules = activity.sequencingRules.preConditionRules;\n\n    for (const rule of preRules) {\n      // Evaluate rule conditions\n      let conditionsMet = true;\n\n      if (rule.conditionCombination === \"all\") {\n        conditionsMet = rule.conditions.every(condition => condition.evaluate(activity));\n      } else {\n        conditionsMet = rule.conditions.some(condition => condition.evaluate(activity));\n      }\n\n      if (conditionsMet) {\n        // Return the action as string\n        switch (rule.action) {\n          case \"skip\":\n            return \"SKIP\";\n          case \"disabled\":\n            return \"DISABLED\";\n          case \"hideFromChoice\":\n            return \"HIDDEN_FROM_CHOICE\";\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Validate Activity Tree State Consistency\n   * Priority 4 Gap: Activity Tree State Consistency\n   * @param {Activity} activity - Activity to validate\n   * @return {{consistent: boolean, exception: string | null}} - Consistency result\n   */\n  private validateActivityTreeStateConsistency(activity: Activity): {\n    consistent: boolean,\n    exception: string | null\n  } {\n    // Check that the activity tree is in a consistent state for delivery\n    if (!this.activityTree.root) {\n      return { consistent: false, exception: \"DB.1.1-4\" }; // No activity tree\n    }\n\n    // Validate activity is part of the current tree\n    if (!this.isActivityPartOfTree(activity, this.activityTree.root)) {\n      return { consistent: false, exception: \"DB.1.1-5\" }; // Activity not in tree\n    }\n\n    // Check for conflicting active activities\n    const activeActivities = this.getActiveActivities();\n    if (activeActivities.length > 1) {\n      // Multiple active activities indicate inconsistent state\n      this.fireEvent(\"onStateInconsistency\", {\n        activeActivities: activeActivities.map(a => a.id),\n        targetActivity: activity.id\n      });\n      return { consistent: false, exception: \"DB.1.1-6\" }; // State inconsistency\n    }\n\n    // Validate parent-child relationships are intact\n    let current: Activity | null = activity;\n    while (current?.parent) {\n      if (!current.parent.children.includes(current)) {\n        return { consistent: false, exception: \"DB.1.1-7\" }; // Broken parent-child relationship\n      }\n      current = current.parent;\n    }\n\n    return { consistent: true, exception: null };\n  }\n\n  /**\n   * Validate Resource Constraints\n   * Priority 4 Gap: Resource Constraint Checking\n   * @param {Activity} activity - Activity to validate\n   * @return {{available: boolean, exception: string | null}} - Resource availability result\n   */\n  private validateResourceConstraints(activity: Activity): {\n    available: boolean,\n    exception: string | null\n  } {\n    // Check if required resources are available\n    // This could include checking for:\n    // - Required plugins or software components\n    // - Network connectivity for web-based resources\n    // - File system access for local resources\n    // - Memory and processing capacity\n\n    // Example resource validations (simplified):\n\n    // Check if activity requires specific resources that might not be available\n    const requiredResources = this.getActivityRequiredResources(activity);\n    for (const resource of requiredResources) {\n      if (!this.isResourceAvailable(resource)) {\n        return {\n          available: false,\n          exception: \"DB.1.1-8\" // Resource not available\n        };\n      }\n    }\n\n    // Check system resource limits\n    const systemResourceCheck = this.checkSystemResourceLimits();\n    if (!systemResourceCheck.adequate) {\n      return {\n        available: false,\n        exception: \"DB.1.1-9\" // Insufficient system resources\n      };\n    }\n\n    return { available: true, exception: null };\n  }\n\n  /**\n   * Validate Concurrent Delivery Prevention\n   * Priority 4 Gap: Prevent Multiple Simultaneous Deliveries\n   * @param {Activity} activity - Activity to validate\n   * @return {{allowed: boolean, exception: string | null}} - Concurrency check result\n   */\n  private validateConcurrentDeliveryPrevention(activity: Activity): {\n    allowed: boolean,\n    exception: string | null\n  } {\n    // Check if another delivery is currently in progress\n    if (this.contentDelivered && this.activityTree.currentActivity && this.activityTree.currentActivity !== activity) {\n      return {\n        allowed: false,\n        exception: \"DB.1.1-10\" // Another activity is currently being delivered\n      };\n    }\n\n    // Check for pending delivery requests in queue\n    if (this.hasPendingDeliveryRequests()) {\n      return {\n        allowed: false,\n        exception: \"DB.1.1-11\" // Delivery request already in queue\n      };\n    }\n\n    // Validate delivery lock status\n    if (this.isDeliveryLocked()) {\n      return {\n        allowed: false,\n        exception: \"DB.1.1-12\" // Delivery is currently locked\n      };\n    }\n\n    return { allowed: true, exception: null };\n  }\n\n  /**\n   * Validate Activity Dependencies\n   * Priority 4 Gap: Dependency Resolution\n   * @param {Activity} activity - Activity to validate\n   * @return {{satisfied: boolean, exception: string | null}} - Dependency check result\n   */\n  private validateActivityDependencies(activity: Activity): {\n    satisfied: boolean,\n    exception: string | null\n  } {\n    // Check prerequisite activities\n    const prerequisites = this.getActivityPrerequisites(activity);\n    for (const prerequisite of prerequisites) {\n      if (!this.isPrerequisiteSatisfied(prerequisite, activity)) {\n        return {\n          satisfied: false,\n          exception: \"DB.1.1-13\" // Prerequisites not satisfied\n        };\n      }\n    }\n\n    // Check objective dependencies\n    const objectiveDependencies = this.getObjectiveDependencies(activity);\n    for (const dependency of objectiveDependencies) {\n      if (!this.isObjectiveDependencySatisfied(dependency)) {\n        return {\n          satisfied: false,\n          exception: \"DB.1.1-14\" // Objective dependencies not met\n        };\n      }\n    }\n\n    // Check sequencing rule dependencies\n    const sequencingDependencies = this.getSequencingRuleDependencies(activity);\n    if (!sequencingDependencies.satisfied) {\n      return {\n        satisfied: false,\n        exception: \"DB.1.1-15\" // Sequencing dependencies not met\n      };\n    }\n\n    return { satisfied: true, exception: null };\n  }\n\n  /**\n   * Helper methods for delivery request validation\n   */\n  private isActivityPartOfTree(activity: Activity, root: Activity): boolean {\n    if (activity === root) {\n      return true;\n    }\n\n    for (const child of root.children) {\n      if (this.isActivityPartOfTree(activity, child)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private getActiveActivities(): Activity[] {\n    const activeActivities: Activity[] = [];\n    if (this.activityTree.root) {\n      this.collectActiveActivities(this.activityTree.root, activeActivities);\n    }\n    return activeActivities;\n  }\n\n  private collectActiveActivities(activity: Activity, activeActivities: Activity[]): void {\n    if (activity.isActive) {\n      activeActivities.push(activity);\n    }\n    for (const child of activity.children) {\n      this.collectActiveActivities(child, activeActivities);\n    }\n  }\n\n  private getActivityRequiredResources(activity: Activity): string[] {\n    // Parse activity metadata for resource requirements\n    // Check activity definition for required resources like bandwidth, plugins, etc.\n    const resources: string[] = [];\n\n    // Check for multimedia requirements based on activity title and location\n    const activityInfo = (activity.title + \" \" + activity.location).toLowerCase();\n    if (activityInfo.includes(\"video\") || activityInfo.includes(\"multimedia\")) {\n      resources.push(\"video-codec\");\n    }\n    if (activityInfo.includes(\"audio\") || activityInfo.includes(\"sound\")) {\n      resources.push(\"audio-codec\");\n    }\n\n    // Check for plugin requirements from activity location/title\n    if (activityInfo.includes(\"flash\") || activityInfo.includes(\".swf\")) {\n      resources.push(\"flash-plugin\");\n    }\n    if (activityInfo.includes(\"java\") || activityInfo.includes(\"applet\")) {\n      resources.push(\"java-runtime\");\n    }\n\n    // Check for bandwidth requirements based on activity type\n    if (activity.children && activity.children.length > 0) {\n      resources.push(\"high-bandwidth\"); // Container activities may need more bandwidth\n    }\n\n    // Check for storage requirements based on duration limits\n    if (activity.attemptAbsoluteDurationLimit &&\n      this.parseDurationToMinutes(activity.attemptAbsoluteDurationLimit) > 60) {\n      resources.push(\"extended-storage\"); // Long duration activities need more storage\n    }\n\n    // Check for specific SCORM requirements\n    if (activity.attemptLimit && activity.attemptLimit > 1) {\n      resources.push(\"persistent-storage\"); // Multiple attempts need storage\n    }\n\n    return resources;\n  }\n\n  private isResourceAvailable(resource: string): boolean {\n    // Check if the specified resource is available in the runtime environment\n    try {\n      switch (resource) {\n        case \"video-codec\":\n          // Check if HTML5 video is supported\n          return !!(document.createElement(\"video\").canPlayType);\n\n        case \"audio-codec\":\n          // Check if HTML5 audio is supported\n          return !!(document.createElement(\"audio\").canPlayType);\n\n        case \"flash-plugin\":\n          // Check for Flash plugin (legacy support)\n          return (navigator.plugins && Array.from(navigator.plugins).some(plugin => plugin.name === \"Shockwave Flash\"));\n\n        case \"java-runtime\":\n          // Check for Java support (mostly deprecated in modern browsers)\n          return (navigator.plugins && Array.from(navigator.plugins).some(plugin => plugin.name === \"Java\"));\n\n        case \"high-bandwidth\":\n          // Check network connection (basic heuristic)\n          if (\"connection\" in navigator) {\n            const connection = (navigator as any).connection;\n            return connection.effectiveType === \"4g\" || connection.downlink > 5;\n          }\n          return true; // Assume available if can't detect\n\n        case \"extended-storage\":\n          // Check for sufficient storage (estimate 100MB needed)\n          if (\"storage\" in navigator && \"estimate\" in navigator.storage) {\n            navigator.storage.estimate().then(estimate => {\n              return (estimate.quota || 0) > 100 * 1024 * 1024; // 100MB\n            });\n          }\n          return true; // Assume available if can't detect\n\n        case \"persistent-storage\":\n          // Check for persistent storage capabilities\n          return \"localStorage\" in window && \"sessionStorage\" in window;\n\n        default:\n          // Unknown resource, assume available\n          return true;\n      }\n    } catch (error) {\n      // If any check fails, assume resource is unavailable\n      return false;\n    }\n  }\n\n  private checkSystemResourceLimits(): { adequate: boolean } {\n    // Check system memory, CPU, and other resource constraints\n    try {\n      let adequate = true;\n\n      // Check memory usage if available (Chrome/Edge only)\n      if (\"memory\" in performance) {\n        const memory = (performance as any).memory;\n        const memoryUsagePercent = memory.usedJSHeapSize / memory.jsHeapSizeLimit;\n        if (memoryUsagePercent > 0.8) { // More than 80% memory used\n          adequate = false;\n        }\n      }\n\n      // Check for device memory hint (modern browsers)\n      if (\"deviceMemory\" in navigator) {\n        const deviceMemory = (navigator as any).deviceMemory;\n        if (deviceMemory < 2) { // Less than 2GB device memory\n          adequate = false;\n        }\n      }\n\n      // Check hardware concurrency (rough CPU check)\n      if (\"hardwareConcurrency\" in navigator) {\n        const cores = navigator.hardwareConcurrency;\n        if (cores < 2) { // Single core devices might struggle\n          adequate = false;\n        }\n      }\n\n      // Check connection quality for network-intensive activities\n      if (\"connection\" in navigator) {\n        const connection = (navigator as any).connection;\n        if (connection.saveData || connection.effectiveType === \"slow-2g\") {\n          adequate = false;\n        }\n      }\n\n      return { adequate };\n    } catch (error) {\n      // If checks fail, assume resources are adequate\n      return { adequate: true };\n    }\n  }\n\n  private hasPendingDeliveryRequests(): boolean {\n    // Check if there are pending delivery requests in the system\n    // This would track asynchronous operations like:\n    // - CMI data commits to LMS\n    // - Asset downloads\n    // - External service calls\n\n    // Check for pending async operations in the activity tree state\n    if (this.activityTree && (this.activityTree as any).pendingRequests) {\n      return (this.activityTree as any).pendingRequests.length > 0;\n    }\n\n    // Check for any pending fetch operations (if using fetch API)\n    if (typeof window !== \"undefined\" && (window as any).pendingScormRequests) {\n      return (window as any).pendingScormRequests > 0;\n    }\n\n    // Check event service for pending operations\n    if (this.eventCallback) {\n      // Fire event to check for pending operations\n      try {\n        this.eventCallback(\"check_pending_requests\", {});\n        // Implementation would depend on the event system returning status\n      } catch (error) {\n        // If event fails, assume no pending requests\n      }\n    }\n\n    return false;\n  }\n\n  private isDeliveryLocked(): boolean {\n    // Check if delivery is currently locked due to:\n    // - Active navigation request processing\n    // - Pending termination/suspension\n    // - Resource constraints\n    // - System maintenance mode\n\n    // Check for navigation lock\n    if (this.activityTree && (this.activityTree as any).navigationLocked) {\n      return true;\n    }\n\n    // Check for active termination process\n    if (this.activityTree && (this.activityTree as any).terminationInProgress) {\n      return true;\n    }\n\n    // Check system resource limits\n    const resourceCheck = this.checkSystemResourceLimits();\n    if (!resourceCheck.adequate) {\n      return true; // Lock delivery if resources are inadequate\n    }\n\n    // Check for maintenance mode (would be set by LMS)\n    return !!(typeof window !== \"undefined\" && (window as any).scormMaintenanceMode);\n  }\n\n  private getActivityPrerequisites(activity: Activity): string[] {\n    // Return list of prerequisite activity IDs based on SCORM 2004 sequencing rules\n    const prerequisites: string[] = [];\n\n    // Check for preCondition rules that reference other activities\n    if (activity.sequencingRules && activity.sequencingRules.preConditionRules) {\n      for (const rule of activity.sequencingRules.preConditionRules) {\n        if (rule.conditions && rule.conditions.length > 0) {\n          for (const condition of rule.conditions) {\n            // Look for objectiveStatusKnown, objectiveSatisfied, etc. conditions\n            // that reference global objectives which may be satisfied by other activities\n            if ((condition as any).referencedObjectiveID &&\n              (condition as any).referencedObjectiveID !== activity.id) {\n              prerequisites.push((condition as any).referencedObjectiveID);\n            }\n          }\n        }\n      }\n    }\n\n    // Check for sequencing control dependencies\n    // Activities with choiceExit=false may depend on completion of siblings\n    if (activity.parent && activity.sequencingControls &&\n      !activity.sequencingControls.choiceExit) {\n      const siblings = activity.parent.children;\n      if (siblings) {\n        const activityIndex = siblings.indexOf(activity);\n\n        // Add previous siblings as prerequisites for sequential flow\n        for (let i = 0; i < activityIndex; i++) {\n          const sibling = siblings[i];\n          if (sibling) {\n            prerequisites.push(sibling.id);\n          }\n        }\n      }\n    }\n\n    // Check for explicit prerequisite metadata (if defined in activity)\n    if ((activity as any).prerequisiteActivities) {\n      prerequisites.push(...(activity as any).prerequisiteActivities);\n    }\n\n    return Array.from(new Set(prerequisites)); // Remove duplicates\n  }\n\n  private isPrerequisiteSatisfied(prerequisiteId: string, _activity: Activity): boolean {\n    // Check if prerequisite is satisfied\n    const prerequisite = this.activityTree.getActivity(prerequisiteId);\n    if (!prerequisite) {\n      return false;\n    }\n\n    // Check if prerequisite is completed\n    return prerequisite.completionStatus === \"completed\";\n  }\n\n  private getObjectiveDependencies(activity: Activity): string[] {\n    // Return list of objective dependencies based on SCORM 2004 objective mapping\n    const dependencies: string[] = [];\n\n    // Check activity's objective mappings for global objective references\n    // Note: Activity class doesn't currently have objectives property - this is a future enhancement\n    const objectives = (activity as any).objectives;\n    if (objectives && objectives.length > 0) {\n      for (const objective of objectives) {\n        // Check for global objective mapping\n        if ((objective as any).globalObjectiveID) {\n          dependencies.push((objective as any).globalObjectiveID);\n        }\n\n        // Check for read/write objective mappings\n        if (!(objective as any).satisfiedByMeasure && (objective as any).readNormalizedMeasure) {\n          // This objective depends on external measure\n          dependencies.push(objective.id + \"_measure\");\n        }\n      }\n    }\n\n    // Check sequencing rules for objective references\n    if (activity.sequencingRules) {\n      const allRules = [\n        ...(activity.sequencingRules.preConditionRules || []),\n        ...(activity.sequencingRules.exitConditionRules || []),\n        ...(activity.sequencingRules.postConditionRules || [])\n      ];\n\n      for (const rule of allRules) {\n        if (rule.conditions && rule.conditions.length > 0) {\n          for (const condition of rule.conditions) {\n            if ((condition as any).objectiveReference &&\n              (condition as any).objectiveReference !== activity.id) {\n              dependencies.push((condition as any).objectiveReference);\n            }\n          }\n        }\n      }\n    }\n\n    return Array.from(new Set(dependencies)); // Remove duplicates\n  }\n\n  private isObjectiveDependencySatisfied(objectiveId: string): boolean {\n    // Check if objective dependency is satisfied according to SCORM 2004 rules\n\n    // Handle global objective references\n    if (this.activityTree && (this.activityTree as any).globalObjectives) {\n      const globalObjectives = (this.activityTree as any).globalObjectives;\n      const globalObjective = globalObjectives[objectiveId];\n\n      if (globalObjective) {\n        // Check if global objective is satisfied\n        return globalObjective.satisfied === true &&\n          globalObjective.statusKnown === true;\n      }\n    }\n\n    // Handle measure-based dependencies\n    if (objectiveId.endsWith(\"_measure\")) {\n      const baseObjectiveId = objectiveId.replace(\"_measure\", \"\");\n      if (this.activityTree && (this.activityTree as any).globalObjectives) {\n        const globalObjectives = (this.activityTree as any).globalObjectives;\n        const globalObjective = globalObjectives[baseObjectiveId];\n\n        if (globalObjective) {\n          // Check if measure is available and within acceptable range\n          return globalObjective.measureKnown === true &&\n            globalObjective.normalizedMeasure >= 0;\n        }\n      }\n    }\n\n    // Handle activity-specific objective references\n    const referencedActivity = this.activityTree.getActivity(objectiveId);\n    if (referencedActivity) {\n      return referencedActivity.objectiveSatisfiedStatus && referencedActivity.objectiveMeasureStatus;\n    }\n\n    // If objective is not found or cannot be evaluated, assume not satisfied\n    return false;\n  }\n\n  private getSequencingRuleDependencies(activity: Activity): { satisfied: boolean } {\n    // Check sequencing rule dependencies for SCORM 2004 compliance\n    let satisfied = true;\n\n    try {\n      // Check pre-condition rule dependencies\n      if (activity.sequencingRules && activity.sequencingRules.preConditionRules) {\n        for (const rule of activity.sequencingRules.preConditionRules) {\n          if (rule.conditions && rule.conditions.length > 0) {\n            for (const condition of rule.conditions) {\n              // Check condition-specific dependencies\n              const conditionType = (condition as any).conditionType || condition.condition;\n\n              switch (conditionType) {\n                case \"activityProgressKnown\":\n                  // Depends on activity progress tracking being available\n                  if (!activity.progressMeasureStatus) satisfied = false;\n                  break;\n\n                case \"objectiveStatusKnown\":\n                case \"objectiveSatisfied\": {\n                  // Depends on objective evaluation system\n                  const objectiveId = (condition as any).referencedObjectiveID || activity.id;\n                  if (!this.isObjectiveDependencySatisfied(objectiveId)) satisfied = false;\n                  break;\n                }\n\n                case \"attemptLimitExceeded\":\n                  // Depends on attempt tracking\n                  if (activity.attemptLimit === null) satisfied = false;\n                  break;\n\n                case \"timeLimitExceeded\":\n                  // Depends on time tracking\n                  if (!activity.attemptAbsoluteDurationLimit &&\n                    !activity.activityAbsoluteDurationLimit) satisfied = false;\n                  break;\n\n                case \"always\":\n                case \"never\":\n                  // These conditions have no dependencies\n                  break;\n\n                default:\n                  // Unknown condition type, assume dependency not satisfied\n                  satisfied = false;\n              }\n            }\n          }\n        }\n      }\n\n      // Check exit condition rule dependencies (similar logic)\n      if (activity.sequencingRules && activity.sequencingRules.exitConditionRules) {\n        for (const rule of activity.sequencingRules.exitConditionRules) {\n          if (rule.conditions && rule.conditions.length > 0) {\n            for (const condition of rule.conditions) {\n              const conditionType = (condition as any).conditionType || condition.condition;\n\n              // Similar dependency checks as pre-conditions\n              if ([\"objectiveStatusKnown\", \"objectiveSatisfied\"].includes(conditionType)) {\n                const objectiveId = (condition as any).referencedObjectiveID || activity.id;\n                if (!this.isObjectiveDependencySatisfied(objectiveId)) satisfied = false;\n              }\n            }\n          }\n        }\n      }\n\n      // Check rollup rule dependencies\n      if (activity.rollupRules && activity.rollupRules.rules) {\n        for (const rule of activity.rollupRules.rules) {\n          if (rule.conditions && rule.conditions.length > 0) {\n            // Rollup rules depend on child activity completion\n            if (activity.children && activity.children.length > 0) {\n              for (const child of activity.children) {\n                if (!child.isCompleted) {\n                  satisfied = false;\n                  break;\n                }\n              }\n            }\n          }\n        }\n      }\n\n    } catch (error) {\n      // If any error occurs during dependency check, mark as not satisfied\n      satisfied = false;\n    }\n\n    return { satisfied };\n  }\n\n  /**\n   * Helper method to parse ISO 8601 duration to minutes\n   */\n  private parseDurationToMinutes(duration: string): number {\n    return getDurationAsSeconds(duration, scorm2004_regex.CMITimespan) / 60; // Convert seconds to minutes\n  }\n\n  /**\n   * INTEGRATION: Initialize Global Objective Map\n   * Sets up the global objective map for cross-activity objective synchronization\n   */\n  private initializeGlobalObjectiveMap(): void {\n    try {\n      this.globalObjectiveMap.clear();\n\n      // Initialize global objectives from activity tree if available\n      if (this.activityTree.root) {\n        this.collectGlobalObjectives(this.activityTree.root);\n      }\n\n      this.fireEvent(\"onGlobalObjectiveMapInitialized\", {\n        objectiveCount: this.globalObjectiveMap.size,\n        timestamp: new Date().toISOString()\n      });\n    } catch (error) {\n      this.fireEvent(\"onGlobalObjectiveMapError\", {\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: new Date().toISOString()\n      });\n    }\n  }\n\n  /**\n   * INTEGRATION: Collect Global Objectives\n   * Recursively collects global objectives from the activity tree\n   * @param {Activity} activity - Activity to collect objectives from\n   */\n  private collectGlobalObjectives(activity: Activity): void {\n    // Create a default global objective for this activity\n    const globalObjectiveId = activity.id + \"_global\";\n    if (!this.globalObjectiveMap.has(globalObjectiveId)) {\n      this.globalObjectiveMap.set(globalObjectiveId, {\n        id: globalObjectiveId,\n        satisfiedStatus: activity.objectiveSatisfiedStatus,\n        satisfiedStatusKnown: activity.objectiveMeasureStatus,\n        normalizedMeasure: activity.objectiveNormalizedMeasure,\n        normalizedMeasureKnown: activity.objectiveMeasureStatus,\n        progressMeasure: activity.progressMeasure,\n        progressMeasureKnown: activity.progressMeasureStatus,\n        completionStatus: activity.completionStatus,\n        completionStatusKnown: activity.completionStatus !== \"unknown\",\n        readSatisfiedStatus: true,\n        writeSatisfiedStatus: true,\n        readNormalizedMeasure: true,\n        writeNormalizedMeasure: true,\n        readProgressMeasure: true,\n        writeProgressMeasure: true,\n        readCompletionStatus: true,\n        writeCompletionStatus: true,\n        satisfiedByMeasure: activity.scaledPassingScore !== null,\n        updateAttemptData: true\n      });\n    }\n\n    // Process children recursively\n    for (const child of activity.children) {\n      this.collectGlobalObjectives(child);\n    }\n  }\n\n  /**\n   * INTEGRATION: Get Global Objective Map\n   * Returns the current global objective map for external access\n   * @return {Map<string, any>} - Current global objective map\n   */\n  public getGlobalObjectiveMap(): Map<string, any> {\n    return this.globalObjectiveMap;\n  }\n\n  /**\n   * INTEGRATION: Update Global Objective\n   * Updates a specific global objective with new data\n   * @param {string} objectiveId - Objective ID to update\n   * @param {any} objectiveData - New objective data\n   */\n  public updateGlobalObjective(objectiveId: string, objectiveData: any): void {\n    try {\n      this.globalObjectiveMap.set(objectiveId, {\n        ...this.globalObjectiveMap.get(objectiveId),\n        ...objectiveData,\n        lastUpdated: new Date().toISOString()\n      });\n\n      this.fireEvent(\"onGlobalObjectiveUpdated\", {\n        objectiveId,\n        data: objectiveData,\n        timestamp: new Date().toISOString()\n      });\n    } catch (error) {\n      this.fireEvent(\"onGlobalObjectiveUpdateError\", {\n        objectiveId,\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: new Date().toISOString()\n      });\n    }\n  }\n}\n","import { Activity } from \"../cmi/scorm2004/sequencing/activity\";\nimport {\n  SequencingResult,\n  DeliveryRequestType,\n} from \"../cmi/scorm2004/sequencing/sequencing_process\";\nimport { EventService } from \"./EventService\";\nimport { LoggingService } from \"./LoggingService\";\nimport { IEventService, ILoggingService } from \"../interfaces/services\";\n\n/**\n * Interface for activity delivery callbacks\n */\nexport interface ActivityDeliveryCallbacks {\n  onDeliverActivity?: (activity: Activity) => void;\n  onUnloadActivity?: (activity: Activity) => void;\n  onSequencingComplete?: (result: SequencingResult) => void;\n  onSequencingError?: (error: string) => void;\n}\n\n/**\n * Service for managing activity delivery in SCORM 2004\n */\nexport class ActivityDeliveryService {\n  private eventService: IEventService;\n  private loggingService: ILoggingService;\n  private callbacks: ActivityDeliveryCallbacks;\n  private currentDeliveredActivity: Activity | null = null;\n  private pendingDelivery: Activity | null = null;\n\n  constructor(\n    eventService: IEventService,\n    loggingService: ILoggingService,\n    callbacks: ActivityDeliveryCallbacks = {},\n  ) {\n    this.eventService = eventService;\n    this.loggingService = loggingService;\n    this.callbacks = callbacks;\n  }\n\n  /**\n   * Process a sequencing result and handle activity delivery\n   * @param {SequencingResult} result - The sequencing result to process\n   */\n  public processSequencingResult(result: SequencingResult): void {\n    // Log the sequencing result\n    if (result.exception) {\n      this.loggingService.error(`Sequencing error: ${result.exception}`);\n      this.callbacks.onSequencingError?.(result.exception);\n      return;\n    }\n\n    // Handle delivery request\n    if (result.deliveryRequest === DeliveryRequestType.DELIVER && result.targetActivity) {\n      this.deliverActivity(result.targetActivity);\n    } else {\n      // No delivery requested\n      this.loggingService.info(\"Sequencing completed with no delivery request\");\n    }\n\n    // Notify sequencing complete\n    this.callbacks.onSequencingComplete?.(result);\n  }\n\n  /**\n   * Deliver an activity\n   * @param {Activity} activity - The activity to deliver\n   */\n  private deliverActivity(activity: Activity): void {\n    // If there's a currently delivered activity, unload it first\n    if (this.currentDeliveredActivity && this.currentDeliveredActivity !== activity) {\n      this.unloadActivity(this.currentDeliveredActivity);\n    }\n\n    // Mark the activity as pending delivery\n    this.pendingDelivery = activity;\n\n    // Log delivery\n    this.loggingService.info(`Delivering activity: ${activity.id} - ${activity.title}`);\n\n    // Fire delivery event\n    this.eventService.processListeners(\"ActivityDelivery\", activity.id, activity);\n\n    // Call delivery callback\n    this.callbacks.onDeliverActivity?.(activity);\n\n    // Update current delivered activity\n    this.currentDeliveredActivity = activity;\n    this.pendingDelivery = null;\n\n    // Mark activity as active\n    activity.isActive = true;\n  }\n\n  /**\n   * Unload an activity\n   * @param {Activity} activity - The activity to unload\n   */\n  private unloadActivity(activity: Activity): void {\n    // Log unload\n    this.loggingService.info(`Unloading activity: ${activity.id} - ${activity.title}`);\n\n    // Fire unload event\n    this.eventService.processListeners(\"ActivityUnload\", activity.id, activity);\n\n    // Call unload callback\n    this.callbacks.onUnloadActivity?.(activity);\n\n    // Mark activity as inactive\n    activity.isActive = false;\n  }\n\n  /**\n   * Get the currently delivered activity\n   * @return {Activity | null}\n   */\n  public getCurrentDeliveredActivity(): Activity | null {\n    return this.currentDeliveredActivity;\n  }\n\n  /**\n   * Get the pending delivery activity\n   * @return {Activity | null}\n   */\n  public getPendingDelivery(): Activity | null {\n    return this.pendingDelivery;\n  }\n\n  /**\n   * Update delivery callbacks\n   * @param {ActivityDeliveryCallbacks} callbacks - The new callbacks\n   */\n  public updateCallbacks(callbacks: ActivityDeliveryCallbacks): void {\n    this.callbacks = { ...this.callbacks, ...callbacks };\n  }\n\n  /**\n   * Reset the delivery service\n   */\n  public reset(): void {\n    if (this.currentDeliveredActivity) {\n      this.unloadActivity(this.currentDeliveredActivity);\n    }\n    this.currentDeliveredActivity = null;\n    this.pendingDelivery = null;\n  }\n}\n","import { Activity } from \"../cmi/scorm2004/sequencing/activity\";\nimport { Sequencing } from \"../cmi/scorm2004/sequencing/sequencing\";\nimport { RollupProcess } from \"../cmi/scorm2004/sequencing/rollup_process\";\nimport {\n  OverallSequencingProcess,\n  NavigationRequestType,\n  DeliveryRequest,\n} from \"../cmi/scorm2004/sequencing/overall_sequencing_process\";\nimport {\n  SequencingProcess,\n  SequencingResult,\n  DeliveryRequestType,\n} from \"../cmi/scorm2004/sequencing/sequencing_process\";\nimport { EventService } from \"./EventService\";\nimport { IEventService, ILoggingService } from \"../interfaces/services\";\nimport { LoggingService } from \"./LoggingService\";\nimport { ActivityDeliveryService, ActivityDeliveryCallbacks } from \"./ActivityDeliveryService\";\nimport { CMI } from \"../cmi/scorm2004/cmi\";\nimport { ADL } from \"../cmi/scorm2004/adl\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { RuleCondition } from \"../cmi/scorm2004/sequencing/sequencing_rules\";\n\n/**\n * Interface for sequencing event listeners\n */\nexport interface SequencingEventListeners {\n  onSequencingStart?: (activity: Activity) => void;\n  onSequencingEnd?: () => void;\n  onActivityDelivery?: (activity: Activity) => void;\n  onActivityUnload?: (activity: Activity) => void;\n  onNavigationRequest?: (request: string, target?: string) => void;\n  onRollupComplete?: (activity: Activity) => void;\n  onSequencingError?: (error: string, context?: string) => void;\n  // Enhanced debugging events\n  onSequencingDebug?: (event: string, data?: any) => void;\n  onActivityAttemptStart?: (activity: Activity) => void;\n  onActivityAttemptEnd?: (activity: Activity) => void;\n  onLimitConditionCheck?: (activity: Activity, result: boolean) => void;\n  onNavigationValidityUpdate?: (validity: any) => void;\n  onSequencingStateChange?: (state: any) => void;\n}\n\n/**\n * Interface for sequencing configuration\n */\nexport interface SequencingConfiguration {\n  autoRollupOnCMIChange?: boolean;\n  autoProgressOnCompletion?: boolean;\n  validateNavigationRequests?: boolean;\n  enableEventSystem?: boolean;\n  logLevel?: \"debug\" | \"info\" | \"warn\" | \"error\";\n  // Time providers/hooks (LMS can override)\n  now?: () => Date;\n  getAttemptElapsedSeconds?: (activity: Activity) => number;\n  getActivityElapsedSeconds?: (activity: Activity) => number;\n}\n\n/**\n * Comprehensive SCORM 2004 Sequencing Service\n * Handles all aspects of sequencing integration with runtime API calls\n */\nexport class SequencingService {\n  private sequencing: Sequencing;\n  private cmi: CMI;\n  private adl: ADL;\n  private eventService: IEventService;\n  private loggingService: ILoggingService;\n  private activityDeliveryService: ActivityDeliveryService;\n  private rollupProcess: RollupProcess;\n  private overallSequencingProcess: OverallSequencingProcess | null = null;\n  private sequencingProcess: SequencingProcess | null = null;\n\n  private eventListeners: SequencingEventListeners = {};\n  private configuration: SequencingConfiguration;\n  private isInitialized: boolean = false;\n  private isSequencingActive: boolean = false;\n  private lastCMIValues: Map<string, any> = new Map();\n  private lastSequencingResult: SequencingResult | null = null;\n\n  constructor(\n    sequencing: Sequencing,\n    cmi: CMI,\n    adl: ADL,\n    eventService: IEventService,\n    loggingService: ILoggingService,\n    configuration: SequencingConfiguration = {},\n  ) {\n    this.sequencing = sequencing;\n    this.cmi = cmi;\n    this.adl = adl;\n    this.eventService = eventService;\n    this.loggingService = loggingService;\n\n    // Default configuration\n    this.configuration = {\n      autoRollupOnCMIChange: true,\n      autoProgressOnCompletion: false,\n      validateNavigationRequests: true,\n      enableEventSystem: true,\n      logLevel: \"info\",\n      now: () => new Date(),\n      ...configuration,\n    };\n\n    // Create activity delivery service\n    const deliveryCallbacks: ActivityDeliveryCallbacks = {\n      onDeliverActivity: (activity) => this.handleActivityDelivery(activity),\n      onUnloadActivity: (activity) => this.handleActivityUnload(activity),\n      onSequencingComplete: (result) => this.handleSequencingComplete(result),\n      onSequencingError: (error) => this.handleSequencingError(error),\n    };\n\n    this.activityDeliveryService = new ActivityDeliveryService(\n      eventService,\n      loggingService,\n      deliveryCallbacks,\n    );\n\n    this.rollupProcess = new RollupProcess();\n    // Propagate time provider to rule evaluation (time-based conditions)\n    if (this.configuration.now) {\n      RuleCondition.setNowProvider(this.configuration.now);\n    }\n    this.setupCMIChangeWatchers();\n  }\n\n  /**\n   * Initialize the sequencing service\n   * Called when SCORM API Initialize() is called\n   */\n  public initialize(): string {\n    try {\n      this.log(\"info\", \"Initializing sequencing service\");\n\n      // Initialize sequencing components\n      if (!this.sequencing.initialized) {\n        this.sequencing.initialize();\n      }\n\n      // Set up ADL Nav connection\n      this.sequencing.adlNav = this.adl.nav;\n\n      // Create sequencing processes if we have an activity tree\n      if (this.sequencing.activityTree.root) {\n        const seqOptions: { now?: () => Date; getAttemptElapsedSeconds?: (a: Activity) => number; getActivityElapsedSeconds?: (a: Activity) => number } = {};\n        if (this.configuration.now) seqOptions.now = this.configuration.now;\n        if (this.configuration.getAttemptElapsedSeconds) seqOptions.getAttemptElapsedSeconds = this.configuration.getAttemptElapsedSeconds;\n        if (this.configuration.getActivityElapsedSeconds) seqOptions.getActivityElapsedSeconds = this.configuration.getActivityElapsedSeconds;\n\n        this.sequencingProcess = new SequencingProcess(\n          this.sequencing.activityTree,\n          this.sequencing.sequencingRules,\n          this.sequencing.sequencingControls,\n          this.adl.nav,\n          seqOptions,\n        );\n\n        const overallOptions: { now?: () => Date } = {};\n        if (this.configuration.now) overallOptions.now = this.configuration.now;\n\n        this.overallSequencingProcess = new OverallSequencingProcess(\n          this.sequencing.activityTree,\n          this.sequencingProcess,\n          this.rollupProcess,\n          this.adl.nav,\n          (eventType: string, data?: any) => this.handleSequencingProcessEvent(eventType, data),\n          overallOptions,\n        );\n\n        this.log(\"info\", \"Sequencing processes created\");\n      }\n\n      // Start automatic sequencing if configured\n      if (this.shouldAutoStartSequencing()) {\n        this.startSequencing();\n      }\n\n      // Initialize CMI tracking\n      this.initializeCMITracking();\n\n      this.isInitialized = true;\n      this.fireEvent(\"onSequencingStart\", this.sequencing.getCurrentActivity());\n\n      this.log(\"info\", \"Sequencing service initialized successfully\");\n      return global_constants.SCORM_TRUE;\n    } catch (error) {\n      const errorMsg = `Failed to initialize sequencing service: ${error}`;\n      this.log(\"error\", errorMsg);\n      this.fireEvent(\"onSequencingError\", errorMsg, \"initialization\");\n      return global_constants.SCORM_FALSE;\n    }\n  }\n\n  /**\n   * Terminate the sequencing service\n   * Called when SCORM API Terminate() is called\n   */\n  public terminate(): string {\n    try {\n      this.log(\"info\", \"Terminating sequencing service\");\n\n      // Process any pending navigation requests\n      if (this.adl.nav.request !== \"_none_\") {\n        this.processNavigationRequest(this.adl.nav.request);\n      }\n\n      // Trigger final rollup\n      this.triggerFinalRollup();\n\n      // End sequencing session\n      this.endSequencing();\n\n      this.isInitialized = false;\n      this.fireEvent(\"onSequencingEnd\");\n\n      this.log(\"info\", \"Sequencing service terminated successfully\");\n      return global_constants.SCORM_TRUE;\n    } catch (error) {\n      const errorMsg = `Failed to terminate sequencing service: ${error}`;\n      this.log(\"error\", errorMsg);\n      this.fireEvent(\"onSequencingError\", errorMsg, \"termination\");\n      return global_constants.SCORM_FALSE;\n    }\n  }\n\n  /**\n   * Process a navigation request\n   * Implements the complete Overall Sequencing Process (OP.1)\n   */\n  public processNavigationRequest(request: string, targetActivityId?: string): boolean {\n    if (!this.isInitialized || !this.overallSequencingProcess) {\n      this.log(\"warn\", `Navigation request '${request}' ignored - sequencing not initialized`);\n      return false;\n    }\n\n    try {\n      this.log(\n        \"info\",\n        `Processing navigation request: ${request}${targetActivityId ? ` (target: ${targetActivityId})` : \"\"}`,\n      );\n\n      // Fire navigation request event\n      this.fireEvent(\"onNavigationRequest\", request, targetActivityId);\n\n      // Parse the request to NavigationRequestType\n      const navRequestType = this.parseNavigationRequest(request);\n      if (navRequestType === null) {\n        this.log(\"warn\", `Invalid navigation request: ${request}`);\n        return false;\n      }\n\n      // Process the navigation request through Overall Sequencing Process\n      const deliveryRequest: DeliveryRequest =\n        this.overallSequencingProcess.processNavigationRequest(\n          navRequestType,\n          targetActivityId || null,\n        );\n\n      // Handle the delivery request\n      if (deliveryRequest.valid && deliveryRequest.targetActivity) {\n        // Process delivery through activity delivery service\n        const sequencingResult: SequencingResult = {\n          deliveryRequest: deliveryRequest.valid\n            ? DeliveryRequestType.DELIVER\n            : DeliveryRequestType.DO_NOT_DELIVER,\n          targetActivity: deliveryRequest.targetActivity,\n          exception: deliveryRequest.exception || null,\n        };\n\n        // Store the result\n        this.lastSequencingResult = sequencingResult;\n        this.activityDeliveryService.processSequencingResult(sequencingResult);\n        this.log(\n          \"info\",\n          `Navigation request '${request}' resulted in activity delivery: ${deliveryRequest.targetActivity.id}`,\n        );\n        return true;\n      } else {\n        // No delivery requested or invalid\n        if (deliveryRequest.exception) {\n          this.log(\"warn\", `Navigation request '${request}' failed: ${deliveryRequest.exception}`);\n          this.fireEvent(\"onSequencingError\", deliveryRequest.exception, \"navigation\");\n        } else {\n          this.log(\"info\", `Navigation request '${request}' completed with no activity delivery`);\n        }\n        return deliveryRequest.valid;\n      }\n    } catch (error) {\n      const errorMsg = `Error processing navigation request '${request}': ${error}`;\n      this.log(\"error\", errorMsg);\n      this.fireEvent(\"onSequencingError\", errorMsg, \"navigation\");\n      return false;\n    }\n  }\n\n  /**\n   * Trigger rollup when CMI values change\n   * Called automatically when tracked CMI values are updated\n   */\n  public triggerRollupOnCMIChange(cmiElement: string, oldValue: any, newValue: any): void {\n    if (!this.configuration.autoRollupOnCMIChange || !this.isInitialized) {\n      return;\n    }\n\n    // Only trigger rollup for specific CMI elements that affect sequencing\n    const rollupTriggeringElements = [\n      \"cmi.completion_status\",\n      \"cmi.success_status\",\n      \"cmi.score.scaled\",\n      \"cmi.score.raw\",\n      \"cmi.score.min\",\n      \"cmi.score.max\",\n      \"cmi.progress_measure\",\n      \"cmi.objectives.n.success_status\",\n      \"cmi.objectives.n.completion_status\",\n      \"cmi.objectives.n.score.scaled\",\n    ];\n\n    if (!rollupTriggeringElements.some((element) => cmiElement.startsWith(element))) {\n      return;\n    }\n\n    try {\n      this.log(\n        \"debug\",\n        `Triggering rollup due to CMI change: ${cmiElement} = ${newValue} (was ${oldValue})`,\n      );\n\n      // Get current activity\n      const currentActivity = this.sequencing.getCurrentActivity();\n      if (!currentActivity) {\n        this.log(\"debug\", \"No current activity for rollup\");\n        return;\n      }\n\n      // Update activity status based on CMI changes\n      this.updateActivityFromCMI(currentActivity);\n\n      // Trigger rollup process\n      this.rollupProcess.overallRollupProcess(currentActivity);\n\n      this.fireEvent(\"onRollupComplete\", currentActivity);\n\n      this.log(\"debug\", `Rollup completed for activity: ${currentActivity.id}`);\n    } catch (error) {\n      const errorMsg = `Error during rollup on CMI change: ${error}`;\n      this.log(\"error\", errorMsg);\n      this.fireEvent(\"onSequencingError\", errorMsg, \"rollup\");\n    }\n  }\n\n  /**\n   * Set event listeners for sequencing events\n   */\n  public setEventListeners(listeners: SequencingEventListeners): void {\n    this.eventListeners = { ...this.eventListeners, ...listeners };\n    this.log(\"debug\", \"Sequencing event listeners updated\");\n  }\n\n  /**\n   * Update sequencing configuration\n   */\n  public updateConfiguration(config: Partial<SequencingConfiguration>): void {\n    this.configuration = { ...this.configuration, ...config };\n    this.log(\"debug\", \"Sequencing configuration updated\");\n  }\n\n  /**\n   * Get the current sequencing state\n   */\n  public getSequencingState(): {\n    isInitialized: boolean;\n    isActive: boolean;\n    currentActivity: Activity | null;\n    rootActivity: Activity | null;\n    lastSequencingResult: SequencingResult | null;\n  } {\n    return {\n      isInitialized: this.isInitialized,\n      isActive: this.isSequencingActive,\n      currentActivity: this.sequencing.getCurrentActivity(),\n      rootActivity: this.sequencing.getRootActivity(),\n      lastSequencingResult: this.lastSequencingResult,\n    };\n  }\n\n  /**\n   * Get the overall sequencing process instance\n   * @return {OverallSequencingProcess | null} The overall sequencing process or null if not initialized\n   */\n  public getOverallSequencingProcess(): OverallSequencingProcess | null {\n    return this.overallSequencingProcess;\n  }\n\n  // Private helper methods\n\n  /**\n   * Set up watchers for CMI value changes\n   */\n  private setupCMIChangeWatchers(): void {\n    // We'll hook into the setter methods to detect changes\n    // This would typically be done by modifying the CMI setters\n    // For now, we'll track changes when values are set\n  }\n\n  /**\n   * Initialize CMI tracking by storing current values\n   */\n  private initializeCMITracking(): void {\n    // Store initial CMI values for change detection\n    this.lastCMIValues.set(\"cmi.completion_status\", this.cmi.completion_status);\n    this.lastCMIValues.set(\"cmi.success_status\", this.cmi.success_status);\n    this.lastCMIValues.set(\"cmi.progress_measure\", this.cmi.progress_measure);\n\n    if (this.cmi.score) {\n      this.lastCMIValues.set(\"cmi.score.scaled\", this.cmi.score.scaled);\n      this.lastCMIValues.set(\"cmi.score.raw\", this.cmi.score.raw);\n    }\n  }\n\n  /**\n   * Check if sequencing should auto-start\n   */\n  private shouldAutoStartSequencing(): boolean {\n    // Auto-start if we have a root activity and no current activity\n    return !!(this.sequencing.activityTree.root && !this.sequencing.getCurrentActivity());\n  }\n\n  /**\n   * Start automatic sequencing\n   */\n  private startSequencing(): void {\n    if (!this.overallSequencingProcess) {\n      return;\n    }\n\n    try {\n      // Process a \"start\" navigation request to begin sequencing\n      const startResult = this.processNavigationRequest(\"start\");\n      if (startResult) {\n        this.isSequencingActive = true;\n        this.log(\"info\", \"Automatic sequencing started\");\n      }\n    } catch (error) {\n      this.log(\"error\", `Failed to start automatic sequencing: ${error}`);\n    }\n  }\n\n  /**\n   * End sequencing session\n   */\n  private endSequencing(): void {\n    this.isSequencingActive = false;\n    this.activityDeliveryService.reset();\n  }\n\n  /**\n   * Trigger final rollup on termination\n   */\n  private triggerFinalRollup(): void {\n    try {\n      const currentActivity = this.sequencing.getCurrentActivity();\n      if (currentActivity) {\n        // Update activity with final CMI values\n        this.updateActivityFromCMI(currentActivity);\n\n        // Trigger rollup\n        this.rollupProcess.overallRollupProcess(currentActivity);\n\n        this.log(\"info\", \"Final rollup completed\");\n      }\n    } catch (error) {\n      this.log(\"error\", `Error during final rollup: ${error}`);\n    }\n  }\n\n  /**\n   * Update activity properties from current CMI values\n   */\n  private updateActivityFromCMI(activity: Activity): void {\n    // Update completion status\n    if (this.cmi.completion_status !== \"unknown\") {\n      activity.completionStatus = this.cmi.completion_status as\n        | \"completed\"\n        | \"incomplete\"\n        | \"not attempted\"\n        | \"unknown\";\n    }\n\n    // Update success status\n    if (this.cmi.success_status !== \"unknown\") {\n      activity.successStatus = this.cmi.success_status as \"passed\" | \"failed\" | \"unknown\";\n      activity.objectiveSatisfiedStatus = this.cmi.success_status === \"passed\";\n    }\n\n    // Update progress measure\n    if (this.cmi.progress_measure !== \"\") {\n      const progressMeasure = parseFloat(this.cmi.progress_measure);\n      if (!isNaN(progressMeasure)) {\n        activity.progressMeasure = progressMeasure;\n        activity.progressMeasureStatus = true;\n      }\n    }\n\n    // Update score information\n    if (this.cmi.score && this.cmi.score.scaled !== \"\") {\n      const scaledScore = parseFloat(this.cmi.score.scaled);\n      if (!isNaN(scaledScore)) {\n        activity.objectiveNormalizedMeasure = scaledScore;\n        activity.objectiveMeasureStatus = true;\n      }\n    }\n  }\n\n  /**\n   * Parse navigation request string to NavigationRequestType\n   */\n  private parseNavigationRequest(request: string): NavigationRequestType | null {\n    // Handle choice and jump with targets\n    if (request.includes(\"choice\")) {\n      return NavigationRequestType.CHOICE;\n    }\n    if (request.includes(\"jump\")) {\n      return NavigationRequestType.JUMP;\n    }\n\n    // Handle standard navigation requests\n    switch (request) {\n      case \"start\":\n        return NavigationRequestType.START;\n      case \"resumeAll\":\n        return NavigationRequestType.RESUME_ALL;\n      case \"continue\":\n        return NavigationRequestType.CONTINUE;\n      case \"previous\":\n        return NavigationRequestType.PREVIOUS;\n      case \"exit\":\n        return NavigationRequestType.EXIT;\n      case \"exitAll\":\n        return NavigationRequestType.EXIT_ALL;\n      case \"abandon\":\n        return NavigationRequestType.ABANDON;\n      case \"abandonAll\":\n        return NavigationRequestType.ABANDON_ALL;\n      case \"suspendAll\":\n        return NavigationRequestType.SUSPEND_ALL;\n      case \"_none_\":\n        return NavigationRequestType.NOT_VALID;\n      default:\n        return null;\n    }\n  }\n\n  /**\n   * Handle activity delivery event\n   */\n  private handleActivityDelivery(activity: Activity): void {\n    this.log(\"info\", `Activity delivered: ${activity.id} - ${activity.title}`);\n    this.fireEvent(\"onActivityDelivery\", activity);\n  }\n\n  /**\n   * Handle activity unload event\n   */\n  private handleActivityUnload(activity: Activity): void {\n    this.log(\"info\", `Activity unloaded: ${activity.id} - ${activity.title}`);\n    this.fireEvent(\"onActivityUnload\", activity);\n  }\n\n  /**\n   * Handle sequencing completion event\n   */\n  private handleSequencingComplete(result: SequencingResult): void {\n    this.log(\"debug\", \"Sequencing completed\", result);\n  }\n\n  /**\n   * Handle sequencing error event\n   */\n  private handleSequencingError(error: string): void {\n    this.log(\"error\", `Sequencing error: ${error}`);\n    this.fireEvent(\"onSequencingError\", error, \"sequencing\");\n  }\n\n  /**\n   * Fire an event to registered listeners with enhanced error handling\n   */\n  private fireEvent(eventType: keyof SequencingEventListeners, ...args: any[]): void {\n    if (!this.configuration.enableEventSystem) {\n      return;\n    }\n\n    // Only fire debug event for non-debug events to prevent recursion\n    if (eventType !== \"onSequencingDebug\") {\n      this.fireDebugEvent(`${eventType} fired`, { eventType, argsLength: args.length });\n    }\n\n    try {\n      // Fire to internal listeners first\n      const listener = this.eventListeners[eventType];\n      if (listener && typeof listener === \"function\") {\n        try {\n          (listener as any)(...args);\n          this.log(\"debug\", `Internal listener for ${eventType} executed successfully`);\n        } catch (listenerError) {\n          this.log(\"error\", `Internal listener for ${eventType} failed: ${listenerError}`);\n          // Don't let listener errors stop event propagation\n        }\n      }\n\n      // Fire through the event service for broader integration\n      try {\n        this.eventService.processListeners(`Sequencing.${eventType}`, args[0], ...args.slice(1));\n        this.log(\"debug\", `Event service listeners for ${eventType} processed`);\n      } catch (eventServiceError) {\n        // Event service might not be properly initialized in test contexts\n        // This is not a critical error for sequencing functionality\n        this.log(\"warn\", `Event service failed for ${eventType}: ${eventServiceError}`);\n      }\n\n      // Fire to external global listeners if available\n      try {\n        if (typeof window !== \"undefined\" && (window as any).scormSequencingEvents) {\n          const globalListeners = (window as any).scormSequencingEvents;\n          if (globalListeners[eventType] && typeof globalListeners[eventType] === \"function\") {\n            globalListeners[eventType](...args);\n            this.log(\"debug\", `Global listener for ${eventType} executed`);\n          }\n        }\n      } catch (globalError) {\n        this.log(\"warn\", `Global listener for ${eventType} failed: ${globalError}`);\n      }\n    } catch (error) {\n      this.log(\"error\", `Critical error firing event ${eventType}: ${error}`);\n    }\n  }\n\n  /**\n   * Fire a debug event with detailed information\n   */\n  private fireDebugEvent(event: string, data?: any): void {\n    try {\n      // Direct execution to avoid recursion through fireEvent\n      const listener = this.eventListeners[\"onSequencingDebug\"];\n      if (listener && typeof listener === \"function\") {\n        listener(event, {\n          timestamp: new Date().toISOString(),\n          ...data,\n        });\n      }\n\n      // Also fire through event service directly\n      try {\n        this.eventService.processListeners(\"Sequencing.onSequencingDebug\", event, {\n          timestamp: new Date().toISOString(),\n          ...data,\n        });\n      } catch (eventServiceError) {\n        // Silent fail for event service debug events\n      }\n    } catch (error) {\n      // Silent fail for debug events to avoid recursion\n      console.debug(`Debug event failed: ${error}`);\n    }\n  }\n\n  /**\n   * Fire activity attempt start event\n   */\n  public fireActivityAttemptStart(activity: Activity): void {\n    this.fireEvent(\"onActivityAttemptStart\", activity);\n    this.fireDebugEvent(\"Activity attempt started\", {\n      activityId: activity.id,\n      title: activity.title,\n      attemptCount: activity.attemptCount,\n    });\n  }\n\n  /**\n   * Fire activity attempt end event\n   */\n  public fireActivityAttemptEnd(activity: Activity): void {\n    this.fireEvent(\"onActivityAttemptEnd\", activity);\n    this.fireDebugEvent(\"Activity attempt ended\", {\n      activityId: activity.id,\n      title: activity.title,\n      completionStatus: activity.completionStatus,\n      successStatus: activity.successStatus,\n    });\n  }\n\n  /**\n   * Fire limit condition check event\n   */\n  public fireLimitConditionCheck(activity: Activity, result: boolean): void {\n    this.fireEvent(\"onLimitConditionCheck\", activity, result);\n    this.fireDebugEvent(\"Limit condition check\", {\n      activityId: activity.id,\n      result,\n      attemptCount: activity.attemptCount,\n      attemptLimit: activity.attemptLimit,\n    });\n  }\n\n  /**\n   * Fire navigation validity update event\n   */\n  public fireNavigationValidityUpdate(validity: any): void {\n    this.fireEvent(\"onNavigationValidityUpdate\", validity);\n    this.fireDebugEvent(\"Navigation validity updated\", { validity });\n  }\n\n  /**\n   * Fire sequencing state change event\n   */\n  public fireSequencingStateChange(state: any): void {\n    this.fireEvent(\"onSequencingStateChange\", state);\n    this.fireDebugEvent(\"Sequencing state changed\", { stateKeys: Object.keys(state) });\n  }\n\n  /**\n   * Handle events from the sequencing process\n   */\n  private handleSequencingProcessEvent(eventType: string, data?: any): void {\n    try {\n      switch (eventType) {\n        case \"onActivityDelivery\":\n          this.fireEvent(\"onActivityDelivery\", data);\n          break;\n        case \"onLimitConditionCheck\":\n          this.fireLimitConditionCheck(data.activity, data.result);\n          break;\n        case \"onActivityAttemptStart\":\n          this.fireActivityAttemptStart(data);\n          break;\n        case \"onActivityAttemptEnd\":\n          this.fireActivityAttemptEnd(data);\n          break;\n        default:\n          // Pass through unknown events as debug events\n          this.fireDebugEvent(`Sequencing process event: ${eventType}`, data);\n      }\n    } catch (error) {\n      this.log(\"error\", `Error handling sequencing process event ${eventType}: ${error}`);\n    }\n  }\n\n  /**\n   * Log message with appropriate level\n   */\n  private log(level: \"debug\" | \"info\" | \"warn\" | \"error\", message: string, data?: any): void {\n    const logLevels = [\"debug\", \"info\", \"warn\", \"error\"];\n    const configLevel = this.configuration.logLevel || \"info\";\n\n    if (logLevels.indexOf(level) >= logLevels.indexOf(configLevel)) {\n      switch (level) {\n        case \"debug\":\n          this.loggingService.debug(\n            `[Sequencing] ${message}${data ? ` - ${JSON.stringify(data)}` : \"\"}`,\n          );\n          break;\n        case \"info\":\n          this.loggingService.info(\n            `[Sequencing] ${message}${data ? ` - ${JSON.stringify(data)}` : \"\"}`,\n          );\n          break;\n        case \"warn\":\n          this.loggingService.warn(\n            `[Sequencing] ${message}${data ? ` - ${JSON.stringify(data)}` : \"\"}`,\n          );\n          break;\n        case \"error\":\n          this.loggingService.error(\n            `[Sequencing] ${message}${data ? ` - ${JSON.stringify(data)}` : \"\"}`,\n          );\n          break;\n      }\n    }\n  }\n}\n","import BaseAPI from \"./BaseAPI\";\nimport { CMI } from \"./cmi/scorm2004/cmi\";\nimport * as Utilities from \"./utilities\";\nimport { StringKeyMap, stringMatches } from \"./utilities\";\nimport { global_constants, scorm2004_constants } from \"./constants/api_constants\";\nimport { scorm2004_errors } from \"./constants/error_codes\";\nimport { CMIObjectivesObject } from \"./cmi/scorm2004/objectives\";\nimport { ADL, ADLDataObject } from \"./cmi/scorm2004/adl\";\nimport {\n  CommitObject,\n  ResultObject,\n  ScoreObject,\n  Settings,\n  SequencingStateMetadata,\n} from \"./types/api_types\";\nimport {\n  ActivitySettings,\n  RollupRuleSettings,\n  RollupRulesSettings,\n  SequencingControlsSettings,\n  SequencingRuleSettings,\n  SequencingRulesSettings,\n  SequencingSettings,\n  SequencingEventListeners,\n} from \"./types/sequencing_types\";\nimport { RuleCondition, SequencingRule } from \"./cmi/scorm2004/sequencing/sequencing_rules\";\nimport { RollupCondition, RollupRule } from \"./cmi/scorm2004/sequencing/rollup_rules\";\nimport { scorm2004_regex } from \"./constants/regex\"; // Import functions from extracted modules\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport {\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n} from \"./cmi/scorm2004/interactions\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { CorrectResponses, ResponseType } from \"./constants/response_constants\";\nimport { CMICommentsObject } from \"./cmi/scorm2004/comments\";\nimport ValidLanguages from \"./constants/language_constants\";\nimport { CompletionStatus, SuccessStatus, LogLevelEnum } from \"./constants/enums\";\nimport { Sequencing } from \"./cmi/scorm2004/sequencing/sequencing\";\nimport { Activity } from \"./cmi/scorm2004/sequencing/activity\";\nimport { SequencingService, SequencingConfiguration } from \"./services/SequencingService\";\n\n/**\n * API class for SCORM 2004\n */\nclass Scorm2004API extends BaseAPI {\n  private _version: string = \"1.0\";\n  private _globalObjectives: CMIObjectivesObject[] = [];\n  private readonly _sequencing: Sequencing;\n  private _sequencingService: SequencingService | null = null;\n  private _extractedScoItemIds: string[] = [];\n\n  /**\n   * Constructor for SCORM 2004 API\n   * @param {Settings} settings\n   */\n  constructor(settings?: Settings) {\n    if (settings) {\n      if (settings.mastery_override === undefined) {\n        settings.mastery_override = false;\n      }\n    }\n\n    super(scorm2004_errors, settings);\n\n    this.cmi = new CMI();\n    this.adl = new ADL();\n    this._sequencing = new Sequencing();\n\n    // Connect the sequencing object to the ADL's sequencing property\n    // The Sequencing object is used for both configuration and runtime navigation processing\n    // It needs to be attached to the ADL object for runtime navigation requests (adl.nav.request)\n    this.adl.sequencing = this._sequencing;\n\n    // Configure sequencing if settings are provided\n    if (settings?.sequencing) {\n      this.configureSequencing(settings.sequencing);\n    }\n\n    // Initialize sequencing service\n    this.initializeSequencingService(settings);\n\n    // Rename functions to match 2004 Spec and expose to modules\n    this.Initialize = this.lmsInitialize;\n    this.Terminate = this.lmsFinish;\n    this.GetValue = this.lmsGetValue;\n    this.SetValue = this.lmsSetValue;\n    this.Commit = this.lmsCommit;\n    this.GetLastError = this.lmsGetLastError;\n    this.GetErrorString = this.lmsGetErrorString;\n    this.GetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  public cmi: CMI;\n  public adl: ADL;\n\n  public Initialize: () => string;\n  public Terminate: () => string;\n  public GetValue: (CMIElement: string) => string;\n  public SetValue: (CMIElement: string, value: any) => string;\n  public Commit: () => string;\n  public GetLastError: () => string;\n  public GetErrorString: (CMIErrorCode: string | number) => string;\n  public GetDiagnostic: (CMIErrorCode: string | number) => string;\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset(settings?: Settings) {\n    this.commonReset(settings);\n\n    this.cmi?.reset();\n    this.adl?.reset();\n    this._sequencing?.reset();\n  }\n\n  /**\n   * Getter for _version\n   * @return {string}\n   */\n  get version(): string {\n    return this._version;\n  }\n\n  /**\n   * Getter for _globalObjectives\n   */\n  get globalObjectives(): CMIObjectivesObject[] {\n    return this._globalObjectives;\n  }\n\n  /**\n   * Initialize function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize(): string {\n    this.cmi.initialize();\n    const result = this.initialize(\n      \"Initialize\",\n      \"LMS was already initialized!\",\n      \"LMS is already finished!\",\n    );\n\n    // Initialize sequencing service after successful API initialization\n    if (result === global_constants.SCORM_TRUE && this._sequencingService) {\n      this._sequencingService.initialize();\n    }\n\n    // Auto-load sequencing state after successful initialization if configured\n    if (result === global_constants.SCORM_TRUE && this.settings.sequencingStatePersistence) {\n      this.loadSequencingState().catch(() => {\n        this.apiLog(\"lmsInitialize\", \"Failed to auto-load sequencing state\", LogLevelEnum.WARN);\n      });\n    }\n\n    return result;\n  }\n\n  /**\n   * Terminate function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish(): string {\n    (async () => {\n      await this.internalFinish();\n    })();\n    return global_constants.SCORM_TRUE;\n  }\n\n  async internalFinish(): Promise<string> {\n    // Terminate sequencing service first (before normal termination)\n    if (this._sequencingService) {\n      this._sequencingService.terminate();\n    }\n\n    const result = await this.terminate(\"Terminate\", true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      // Handle navigation requests - first try sequencing service, then fall back to legacy\n      let navigationHandled = false;\n\n      if (this._sequencingService && this.adl.nav.request !== \"_none_\") {\n        try {\n          // Extract target for choice/jump requests\n          let target = \"\";\n          let request = this.adl.nav.request;\n          const choiceJumpRegex = new RegExp(scorm2004_regex.NAVEvent);\n          const matches = request.match(choiceJumpRegex);\n          if (matches) {\n            if (matches.groups?.choice_target) {\n              target = matches.groups?.choice_target;\n              request = \"choice\";\n            } else if (matches.groups?.jump_target) {\n              target = matches.groups?.jump_target;\n              request = \"jump\";\n            }\n          }\n\n          // Process navigation request through sequencing service\n          navigationHandled = this._sequencingService.processNavigationRequest(request, target);\n        } catch (error) {\n          // Fall back to legacy navigation handling if sequencing fails\n          navigationHandled = false;\n        }\n      }\n\n      // Legacy navigation handling (fallback)\n      if (!navigationHandled) {\n        if (this.adl.nav.request !== \"_none_\") {\n          const navActions: { [key: string]: string } = {\n            continue: \"SequenceNext\",\n            previous: \"SequencePrevious\",\n            choice: \"SequenceChoice\",\n            jump: \"SequenceJump\",\n            exit: \"SequenceExit\",\n            exitAll: \"SequenceExitAll\",\n            abandon: \"SequenceAbandon\",\n            abandonAll: \"SequenceAbandonAll\",\n          };\n\n          let request = this.adl.nav.request;\n          const choiceJumpRegex = new RegExp(scorm2004_regex.NAVEvent);\n          const matches = request.match(choiceJumpRegex);\n          let target = \"\";\n          if (matches) {\n            if (matches.groups?.choice_target) {\n              target = matches.groups?.choice_target;\n              request = \"choice\";\n            } else if (matches.groups?.jump_target) {\n              target = matches.groups?.jump_target;\n              request = \"jump\";\n            }\n          }\n          const action = navActions[request];\n          if (action) {\n            this.processListeners(action, \"adl.nav.request\", target);\n          }\n        } else if (this.settings.autoProgress) {\n          this.processListeners(\"SequenceNext\", undefined, \"next\");\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * GetValue function from SCORM 2004 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement: string): string {\n    const adlNavRequestRegex =\n      \"^adl\\\\.nav\\\\.request_valid\\\\.(choice|jump)\\\\.{target=\\\\S{0,}([a-zA-Z0-9-_]+)}$\";\n    if (stringMatches(CMIElement, adlNavRequestRegex)) {\n      const matches = CMIElement.match(adlNavRequestRegex);\n      if (matches) {\n        const request = matches[1];\n        const target = matches[2]?.replace(/{target=/g, \"\").replace(/}/g, \"\") || \"\";\n        if (request === \"choice\" || request === \"jump\") {\n          if (this.settings.scoItemIdValidator) {\n            return String(this.settings.scoItemIdValidator(target));\n          }\n          // If we have extracted IDs from sequencing, use those exclusively\n          if (this._extractedScoItemIds.length > 0) {\n            return String(this._extractedScoItemIds.includes(target));\n          }\n          // Otherwise use the scoItemIds from settings\n          return String(this.settings?.scoItemIds?.includes(target));\n        }\n      }\n    }\n    return this.getValue(\"GetValue\", true, CMIElement);\n  }\n\n  /**\n   * SetValue function from SCORM 2004 Spec\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement: string, value: any): string {\n    // Get old value for change detection with error handling\n    let oldValue: any = null;\n    try {\n      oldValue = this.getCMIValue(CMIElement);\n    } catch (error) {\n      // If getting the old value fails, proceed without change detection\n      // This prevents errors during normal operation when CMI elements don't exist yet\n      oldValue = null;\n    }\n\n    // Proceed with regular setting for non-objective elements or fallback behavior\n    const result = this.setValue(\"SetValue\", \"Commit\", true, CMIElement, value);\n\n    // If successful and sequencing service is available, trigger rollup on critical CMI changes\n    if (result === global_constants.SCORM_TRUE && this._sequencingService) {\n      try {\n        this._sequencingService.triggerRollupOnCMIChange(CMIElement, oldValue, value);\n      } catch (rollupError) {\n        // Log rollup error but don't fail the SetValue operation\n        console.warn(`Sequencing rollup failed for ${CMIElement}: ${rollupError}`);\n      }\n    }\n\n    // Auto-save sequencing state on critical CMI changes if configured\n    if (\n      result === global_constants.SCORM_TRUE &&\n      this.settings.sequencingStatePersistence?.autoSaveOn === \"setValue\"\n    ) {\n      const sequencingElements = [\n        \"cmi.completion_status\",\n        \"cmi.success_status\",\n        \"cmi.score.scaled\",\n        \"cmi.objectives\",\n        \"adl.nav.request\",\n      ];\n\n      if (sequencingElements.some((element) => CMIElement.startsWith(element))) {\n        this.saveSequencingState().catch(() => {\n          this.apiLog(\"lmsSetValue\", \"Failed to auto-save sequencing state\", LogLevelEnum.WARN);\n        });\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Commit function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit(): string {\n    if (this.settings.asyncCommit) {\n      this.scheduleCommit(500, \"Commit\");\n    } else {\n      (async () => {\n        const result = await this.commit(\"Commit\", false);\n\n        // Auto-save sequencing state after successful commit if configured\n        if (\n          result === global_constants.SCORM_TRUE &&\n          this.settings.sequencingStatePersistence?.autoSaveOn === \"commit\"\n        ) {\n          await this.saveSequencingState().catch(() => {\n            this.apiLog(\"lmsCommit\", \"Failed to auto-save sequencing state\", LogLevelEnum.WARN);\n          });\n        }\n      })();\n    }\n    return global_constants.SCORM_TRUE;\n  }\n\n  /**\n   * GetLastError function from SCORM 2004 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError(): string {\n    return this.getLastError(\"GetLastError\");\n  }\n\n  /**\n   * GetErrorString function from SCORM 2004 Spec\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode: string | number): string {\n    return this.getErrorString(\"GetErrorString\", CMIErrorCode);\n  }\n\n  /**\n   * GetDiagnostic function from SCORM 2004 Spec\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode: string | number): string {\n    return this.getDiagnostic(\"GetDiagnostic\", CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object - delegates to CMIValueHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  override setCMIValue(CMIElement: string, value: any): string {\n    // Check if we're updating a global or local objective\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      const parts = CMIElement.split(\".\");\n      const index = Number(parts[2]);\n      const element_base = `cmi.objectives.${index}`;\n\n      let objective_id;\n      const setting_id = stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\\\\.id\");\n\n      if (setting_id) {\n        // If we're setting the objective ID, capture it directly\n        objective_id = value;\n      } else {\n        // Find existing objective ID if available\n        const objective = this.cmi.objectives.findObjectiveByIndex(index);\n        objective_id = objective ? objective.id : undefined;\n      }\n\n      // Check if the objective ID matches a global objective\n      const is_global = objective_id && this.settings.globalObjectiveIds?.includes(objective_id);\n\n      if (is_global) {\n        // Locate or create an entry in _globalObjectives for the global objective\n        let global_index = this._globalObjectives.findIndex((obj) => obj.id === objective_id);\n\n        if (global_index === -1) {\n          global_index = this._globalObjectives.length;\n          const newGlobalObjective = new CMIObjectivesObject();\n          newGlobalObjective.id = objective_id;\n          this._globalObjectives.push(newGlobalObjective);\n        }\n\n        // Update the global objective\n        const global_element = CMIElement.replace(\n          element_base,\n          `_globalObjectives.${global_index}`,\n        );\n        this._commonSetCMIValue(\"SetGlobalObjectiveValue\", true, global_element, value);\n      }\n    }\n    return this._commonSetCMIValue(\"SetValue\", true, CMIElement, value);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array - delegates to CMIElementHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI|null}\n   */\n  getChildElement(CMIElement: string, value: any, foundFirstIndex: boolean): BaseCMI | null {\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      return new CMIObjectivesObject();\n    }\n\n    if (foundFirstIndex) {\n      if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+\")) {\n        return this.createCorrectResponsesObject(CMIElement, value);\n      } else if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+\")) {\n        return new CMIInteractionsObjectivesObject();\n      }\n    } else if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\")) {\n      return new CMIInteractionsObject();\n    }\n\n    if (stringMatches(CMIElement, \"cmi\\\\.comments_from_learner\\\\.\\\\d+\")) {\n      return new CMICommentsObject();\n    } else if (stringMatches(CMIElement, \"cmi\\\\.comments_from_lms\\\\.\\\\d+\")) {\n      return new CMICommentsObject(true);\n    }\n\n    if (stringMatches(CMIElement, \"adl\\\\.data\\\\.\\\\d+\")) {\n      return new ADLDataObject();\n    }\n\n    return null;\n  }\n\n  /**\n   * Creates a correct responses object for an interaction - delegates to CMIElementHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {BaseCMI|null}\n   */\n  private createCorrectResponsesObject(CMIElement: string, value: any): BaseCMI | null {\n    const parts = CMIElement.split(\".\");\n    const index = Number(parts[2]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    if (this.isInitialized()) {\n      if (typeof interaction === \"undefined\" || !interaction.type) {\n        this.throwSCORMError(CMIElement, scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED, CMIElement);\n        return null;\n      } else {\n        this.checkDuplicateChoiceResponse(CMIElement, interaction, value);\n        const response_type = CorrectResponses[interaction.type];\n        if (response_type) {\n          this.checkValidResponseType(CMIElement, response_type, value, interaction.type);\n        } else {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.GENERAL_SET_FAILURE,\n            `Incorrect Response Type: ${interaction.type}`,\n          );\n          return null;\n        }\n      }\n    }\n\n    if (this.lastErrorCode === \"0\") {\n      return new CMIInteractionsCorrectResponsesObject(interaction);\n    }\n\n    return null;\n  }\n\n  /**\n   * Checks for valid response types - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {ResponseType} response_type\n   * @param {any} value\n   * @param {string} interaction_type\n   */\n  checkValidResponseType(\n    CMIElement: string,\n    response_type: ResponseType,\n    value: any,\n    interaction_type: string,\n  ) {\n    let nodes = [];\n    if (response_type?.delimiter) {\n      nodes = String(value).split(response_type.delimiter);\n    } else {\n      nodes[0] = value;\n    }\n\n    if (nodes.length > 0 && nodes.length <= response_type.max) {\n      this.checkCorrectResponseValue(CMIElement, interaction_type, nodes, value);\n    } else if (nodes.length > response_type.max) {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.GENERAL_SET_FAILURE,\n        `Data Model Element Pattern Too Long: ${value}`,\n      );\n    }\n  }\n\n  /**\n   * Checks for duplicate 'choice' responses - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {CMIInteractionsObject} interaction\n   * @param {any} value\n   */\n  checkDuplicateChoiceResponse(CMIElement: string, interaction: CMIInteractionsObject, value: any) {\n    const interaction_count = interaction.correct_responses._count;\n    if (interaction.type === \"choice\") {\n      for (let i = 0; i < interaction_count && this.lastErrorCode === \"0\"; i++) {\n        const response = interaction.correct_responses.childArray[i];\n        if (response.pattern === value) {\n          this.throwSCORMError(CMIElement, scorm2004_errors.GENERAL_SET_FAILURE, `${value}`);\n        }\n      }\n    }\n  }\n\n  /**\n   * Validate correct response - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {*} value\n   */\n  validateCorrectResponse(CMIElement: string, value: any) {\n    const parts = CMIElement.split(\".\");\n    const index = Number(parts[2]);\n    const pattern_index = Number(parts[4]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    const interaction_count = interaction.correct_responses._count;\n    this.checkDuplicateChoiceResponse(CMIElement, interaction, value);\n\n    const response_type = CorrectResponses[interaction.type];\n    if (\n      response_type &&\n      (typeof response_type.limit === \"undefined\" || interaction_count <= response_type.limit)\n    ) {\n      this.checkValidResponseType(CMIElement, response_type, value, interaction.type);\n\n      if (\n        (this.lastErrorCode === \"0\" &&\n          (!response_type.duplicate ||\n            !this.checkDuplicatedPattern(interaction.correct_responses, pattern_index, value))) ||\n        (this.lastErrorCode === \"0\" && value === \"\")\n      ) {\n        // do nothing, we want the inverse\n      } else {\n        if (this.lastErrorCode === \"0\") {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.GENERAL_SET_FAILURE,\n            `Data Model Element Pattern Already Exists: ${CMIElement} - ${value}`,\n          );\n        }\n      }\n    } else {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.GENERAL_SET_FAILURE,\n        `Data Model Element Collection Limit Reached: ${CMIElement} - ${value}`,\n      );\n    }\n  }\n\n  /**\n   * Gets a value from the CMI Object - delegates to CMIValueHandlerModule\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  override getCMIValue(CMIElement: string): any {\n    return this._commonGetCMIValue(\"GetValue\", true, CMIElement);\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {(string|number)} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  override getLmsErrorMessageDetails(errorNumber: string | number, detail: boolean): string {\n    let basicMessage = \"\";\n    let detailMessage = \"\";\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    const errorDescription = scorm2004_constants.error_descriptions[errorNumber];\n    if (errorDescription) {\n      basicMessage = errorDescription.basicMessage;\n      detailMessage = errorDescription.detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Check to see if a correct_response value has been duplicated - delegates to ValidationModule\n   * @param {CMIArray} correct_response\n   * @param {number} current_index\n   * @param {*} value\n   * @return {boolean}\n   */\n  checkDuplicatedPattern(correct_response: CMIArray, current_index: number, value: any): boolean {\n    let found = false;\n    const count = correct_response._count;\n    for (let i = 0; i < count && !found; i++) {\n      if (i !== current_index && correct_response.childArray[i] === value) {\n        found = true;\n      }\n    }\n    return found;\n  }\n\n  /**\n   * Checks for a valid correct_response value - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {string} interaction_type\n   * @param {Array} nodes\n   * @param {*} value\n   */\n  checkCorrectResponseValue(\n    CMIElement: string,\n    interaction_type: string,\n    nodes: Array<any>,\n    value: any,\n  ) {\n    const response = CorrectResponses[interaction_type];\n    if (!response) {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.TYPE_MISMATCH,\n        `Incorrect Response Type: ${interaction_type}`,\n      );\n      return;\n    }\n    const formatRegex = new RegExp(response.format);\n    for (let i = 0; i < nodes.length && this.lastErrorCode === \"0\"; i++) {\n      if (interaction_type.match(\"^(fill-in|long-fill-in|matching|performance|sequencing)$\")) {\n        nodes[i] = this.removeCorrectResponsePrefixes(CMIElement, nodes[i]);\n      }\n\n      if (response?.delimiter2) {\n        const values = nodes[i].split(response.delimiter2);\n        if (values.length === 2) {\n          const matches = values[0].match(formatRegex);\n          if (!matches) {\n            this.throwSCORMError(\n              CMIElement,\n              scorm2004_errors.TYPE_MISMATCH,\n              `${interaction_type}: ${value}`,\n            );\n          } else {\n            if (!response.format2 || !values[1].match(new RegExp(response.format2))) {\n              this.throwSCORMError(\n                CMIElement,\n                scorm2004_errors.TYPE_MISMATCH,\n                `${interaction_type}: ${value}`,\n              );\n            }\n          }\n        } else {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.TYPE_MISMATCH,\n            `${interaction_type}: ${value}`,\n          );\n        }\n      } else {\n        const matches = nodes[i].match(formatRegex);\n        if ((!matches && value !== \"\") || (!matches && interaction_type === \"true-false\")) {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.TYPE_MISMATCH,\n            `${interaction_type}: ${value}`,\n          );\n        } else {\n          if (interaction_type === \"numeric\" && nodes.length > 1) {\n            if (Number(nodes[0]) > Number(nodes[1])) {\n              this.throwSCORMError(\n                CMIElement,\n                scorm2004_errors.TYPE_MISMATCH,\n                `${interaction_type}: ${value}`,\n              );\n            }\n          } else {\n            if (nodes[i] !== \"\" && response.unique) {\n              for (let j = 0; j < i && this.lastErrorCode === \"0\"; j++) {\n                if (nodes[i] === nodes[j]) {\n                  this.throwSCORMError(\n                    CMIElement,\n                    scorm2004_errors.TYPE_MISMATCH,\n                    `${interaction_type}: ${value}`,\n                  );\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove prefixes from correct_response - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {string} node\n   * @return {*}\n   */\n  removeCorrectResponsePrefixes(CMIElement: string, node: string): any {\n    let seenOrder = false;\n    let seenCase = false;\n    let seenLang = false;\n\n    const prefixRegex = new RegExp(\"^({(lang|case_matters|order_matters)=([^}]+)})\");\n    let matches = node.match(prefixRegex);\n    let langMatches = null;\n    while (matches) {\n      switch (matches[2]) {\n        case \"lang\":\n          langMatches = node.match(scorm2004_regex.CMILangcr);\n          if (langMatches) {\n            const lang = langMatches[3];\n            if (lang !== undefined && lang.length > 0) {\n              if (!ValidLanguages.includes(lang.toLowerCase())) {\n                this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n              }\n            }\n          }\n          seenLang = true;\n          break;\n        case \"case_matters\":\n          if (!seenLang && !seenOrder && !seenCase) {\n            if (matches[3] !== \"true\" && matches[3] !== \"false\") {\n              this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n            }\n          }\n\n          seenCase = true;\n          break;\n        case \"order_matters\":\n          if (!seenCase && !seenLang && !seenOrder) {\n            if (matches[3] !== \"true\" && matches[3] !== \"false\") {\n              this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n            }\n          }\n\n          seenOrder = true;\n          break;\n      }\n      node = node.substring(matches[1]?.length || 0);\n      matches = node.match(prefixRegex);\n    }\n\n    return node;\n  }\n\n  /**\n   * Replace the whole API with another\n   * @param {Scorm2004API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI: Scorm2004API) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.adl = newAPI.adl;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit - delegates to DataSerializationModule\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} includeTotalTime - Whether to include total time in the commit data\n   * @return {object|Array}\n   */\n  renderCommitCMI(\n    terminateCommit: boolean,\n    includeTotalTime: boolean = false,\n  ): StringKeyMap | Array<any> {\n    const cmiExport: StringKeyMap = this.renderCMIToJSONObject();\n\n    if (terminateCommit || includeTotalTime) {\n      (cmiExport.cmi as any).total_time = (this.cmi as any).getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened: StringKeyMap = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case \"flattened\":\n        return Utilities.flatten(cmiExport);\n      case \"params\":\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case \"json\":\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit - delegates to DataSerializationModule\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} includeTotalTime - Whether to include total time in the commit data\n   * @return {CommitObject}\n   */\n  renderCommitObject(terminateCommit: boolean, includeTotalTime: boolean = false): CommitObject {\n    const cmiExport = this.renderCommitCMI(terminateCommit, includeTotalTime);\n    const calculateTotalTime = terminateCommit || includeTotalTime;\n    const totalTimeDuration = calculateTotalTime ? this.cmi.getCurrentTotalTime() : \"\";\n    const totalTimeSeconds = Utilities.getDurationAsSeconds(\n      totalTimeDuration,\n      scorm2004_regex.CMITimespan,\n    );\n\n    let completionStatus = CompletionStatus.UNKNOWN;\n    let successStatus = SuccessStatus.UNKNOWN;\n    if (this.cmi.completion_status) {\n      if (this.cmi.completion_status === \"completed\") {\n        completionStatus = CompletionStatus.COMPLETED;\n      } else if (this.cmi.completion_status === \"incomplete\") {\n        completionStatus = CompletionStatus.INCOMPLETE;\n      }\n    }\n    if (this.cmi.success_status) {\n      if (this.cmi.success_status === \"passed\") {\n        successStatus = SuccessStatus.PASSED;\n      } else if (this.cmi.success_status === \"failed\") {\n        successStatus = SuccessStatus.FAILED;\n      }\n    }\n\n    const scoreObject: ScoreObject = this.cmi?.score?.getScoreObject() || {};\n    const commitObject: CommitObject = {\n      completionStatus: completionStatus,\n      successStatus: successStatus,\n      totalTimeSeconds: totalTimeSeconds,\n      runtimeData: cmiExport as StringKeyMap,\n    };\n    if (scoreObject) {\n      commitObject.score = scoreObject;\n    }\n    return commitObject;\n  }\n\n  /**\n   * Attempts to store the data to the LMS - delegates to DataSerializationModule\n   *\n   * @param {boolean} terminateCommit\n   * @return {ResultObject}\n   */\n  async storeData(terminateCommit: boolean): Promise<ResultObject> {\n    if (terminateCommit) {\n      if (this.cmi.mode === \"normal\") {\n        if (this.cmi.credit === \"credit\") {\n          if (this.cmi.completion_threshold && this.cmi.progress_measure) {\n            if (this.cmi.progress_measure >= this.cmi.completion_threshold) {\n              this.cmi.completion_status = \"completed\";\n            } else {\n              this.cmi.completion_status = \"incomplete\";\n            }\n          }\n          if (this.cmi.scaled_passing_score && this.cmi.score.scaled) {\n            if (this.cmi.score.scaled >= this.cmi.scaled_passing_score) {\n              this.cmi.success_status = \"passed\";\n            } else {\n              this.cmi.success_status = \"failed\";\n            }\n          }\n        }\n      }\n    }\n\n    let navRequest = false;\n    if (\n      this.adl.nav.request !==\n        ((this.startingData?.adl as StringKeyMap)?.nav as StringKeyMap)?.request &&\n      this.adl.nav.request !== \"_none_\"\n    ) {\n      navRequest = true;\n    }\n\n    const commitObject = this.getCommitObject(terminateCommit);\n    if (typeof this.settings.lmsCommitUrl === \"string\") {\n      const result = await this.processHttpRequest(\n        this.settings.lmsCommitUrl,\n        commitObject,\n        terminateCommit,\n      );\n\n      // Check if this is a sequencing call, and then call the necessary JS\n      if (\n        navRequest &&\n        result.navRequest !== undefined &&\n        result.navRequest !== \"\" &&\n        typeof result.navRequest === \"string\"\n      ) {\n        Function(`\"use strict\";(() => { ${result.navRequest} })()`)();\n      } else if (result?.navRequest && !navRequest) {\n        if (\n          typeof result.navRequest === \"object\" &&\n          Object.hasOwnProperty.call(result.navRequest, \"name\")\n        ) {\n          this.processListeners(result.navRequest.name as string, result.navRequest.data as string);\n        }\n      }\n\n      return result;\n    }\n\n    return {\n      result: global_constants.SCORM_TRUE,\n      errorCode: 0,\n    };\n  }\n\n  /**\n   * Configure sequencing based on provided settings\n   * @param {SequencingSettings} sequencingSettings - The sequencing settings\n   */\n  private configureSequencing(sequencingSettings: SequencingSettings): void {\n    // Configure activity tree\n    if (sequencingSettings.activityTree) {\n      this.configureActivityTree(sequencingSettings.activityTree);\n    }\n\n    // Configure sequencing rules\n    if (sequencingSettings.sequencingRules) {\n      this.configureSequencingRules(sequencingSettings.sequencingRules);\n    }\n\n    // Configure sequencing controls\n    if (sequencingSettings.sequencingControls) {\n      this.configureSequencingControls(sequencingSettings.sequencingControls);\n    }\n\n    // Configure rollup rules\n    if (sequencingSettings.rollupRules) {\n      this.configureRollupRules(sequencingSettings.rollupRules);\n    }\n  }\n\n  /**\n   * Configure activity tree based on provided settings\n   * @param {ActivitySettings} activityTreeSettings - The activity tree settings\n   */\n  private configureActivityTree(activityTreeSettings: ActivitySettings): void {\n    // Create root activity\n    const rootActivity = this.createActivity(activityTreeSettings);\n\n    // Create activity tree\n    const activityTree = this._sequencing.activityTree;\n    activityTree.root = rootActivity;\n\n    // Extract activity IDs for use as scoItemIds\n    this._extractedScoItemIds = this.extractActivityIds(rootActivity);\n  }\n\n  /**\n   * Extract all activity IDs from an activity and its children\n   * @param {Activity} activity - The activity to extract IDs from\n   * @return {string[]} - Array of activity IDs\n   */\n  private extractActivityIds(activity: Activity): string[] {\n    const ids = [activity.id];\n\n    // Recursively extract IDs from children\n    for (const child of activity.children) {\n      ids.push(...this.extractActivityIds(child));\n    }\n\n    return ids;\n  }\n\n  /**\n   * Create an activity from settings\n   * @param {ActivitySettings} activitySettings - The activity settings\n   * @return {Activity} - The created activity\n   */\n  private createActivity(activitySettings: ActivitySettings): Activity {\n    // Create activity\n    const activity = new Activity(activitySettings.id, activitySettings.title);\n\n    // Set activity properties\n    if (activitySettings.isVisible !== undefined) {\n      activity.isVisible = activitySettings.isVisible;\n    }\n    if (activitySettings.isActive !== undefined) {\n      activity.isActive = activitySettings.isActive;\n    }\n    if (activitySettings.isSuspended !== undefined) {\n      activity.isSuspended = activitySettings.isSuspended;\n    }\n    if (activitySettings.isCompleted !== undefined) {\n      activity.isCompleted = activitySettings.isCompleted;\n    }\n\n    // Create child activities\n    if (activitySettings.children) {\n      for (const childSettings of activitySettings.children) {\n        const childActivity = this.createActivity(childSettings);\n        activity.addChild(childActivity);\n      }\n    }\n    // Apply per-activity sequencing settings if provided\n    if (activitySettings.sequencingControls) {\n      const sc = activity.sequencingControls;\n      const c = activitySettings.sequencingControls;\n      if (c.enabled !== undefined) sc.enabled = c.enabled;\n      if (c.choiceExit !== undefined) sc.choiceExit = c.choiceExit;\n      if (c.flow !== undefined) sc.flow = c.flow;\n      if (c.forwardOnly !== undefined) sc.forwardOnly = c.forwardOnly;\n      if (c.useCurrentAttemptObjectiveInfo !== undefined)\n        sc.useCurrentAttemptObjectiveInfo = c.useCurrentAttemptObjectiveInfo;\n      if (c.useCurrentAttemptProgressInfo !== undefined)\n        sc.useCurrentAttemptProgressInfo = c.useCurrentAttemptProgressInfo;\n      if (c.preventActivation !== undefined) sc.preventActivation = c.preventActivation;\n      if (c.constrainChoice !== undefined) sc.constrainChoice = c.constrainChoice;\n      if (c.rollupObjectiveSatisfied !== undefined)\n        sc.rollupObjectiveSatisfied = c.rollupObjectiveSatisfied;\n      if (c.rollupProgressCompletion !== undefined)\n        sc.rollupProgressCompletion = c.rollupProgressCompletion;\n      if (c.objectiveMeasureWeight !== undefined)\n        sc.objectiveMeasureWeight = c.objectiveMeasureWeight;\n    }\n\n    if (activitySettings.sequencingRules) {\n      const rs = activitySettings.sequencingRules;\n      if (rs.preConditionRules) {\n        for (const ruleSettings of rs.preConditionRules) {\n          const rule = this.createSequencingRule(ruleSettings);\n          activity.sequencingRules.addPreConditionRule(rule);\n        }\n      }\n      if (rs.exitConditionRules) {\n        for (const ruleSettings of rs.exitConditionRules) {\n          const rule = this.createSequencingRule(ruleSettings);\n          activity.sequencingRules.addExitConditionRule(rule);\n        }\n      }\n      if (rs.postConditionRules) {\n        for (const ruleSettings of rs.postConditionRules) {\n          const rule = this.createSequencingRule(ruleSettings);\n          activity.sequencingRules.addPostConditionRule(rule);\n        }\n      }\n    }\n\n    if (activitySettings.rollupRules && activitySettings.rollupRules.rules) {\n      for (const ruleSettings of activitySettings.rollupRules.rules) {\n        const rule = this.createRollupRule(ruleSettings);\n        activity.rollupRules.addRule(rule);\n      }\n    }\n\n    return activity;\n  }\n\n  /**\n   * Configure sequencing rules based on provided settings\n   * @param {SequencingRulesSettings} sequencingRulesSettings - The sequencing rules settings\n   */\n  private configureSequencingRules(sequencingRulesSettings: SequencingRulesSettings): void {\n    const sequencingRules = this._sequencing.sequencingRules;\n\n    // Configure pre-condition rules\n    if (sequencingRulesSettings.preConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.preConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addPreConditionRule(rule);\n      }\n    }\n\n    // Configure exit condition rules\n    if (sequencingRulesSettings.exitConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.exitConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addExitConditionRule(rule);\n      }\n    }\n\n    // Configure post-condition rules\n    if (sequencingRulesSettings.postConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.postConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addPostConditionRule(rule);\n      }\n    }\n  }\n\n  /**\n   * Create a sequencing rule from settings\n   * @param {SequencingRuleSettings} ruleSettings - The sequencing rule settings\n   * @return {SequencingRule} - The created sequencing rule\n   */\n  private createSequencingRule(ruleSettings: SequencingRuleSettings): SequencingRule {\n    // Create rule\n    const rule = new SequencingRule(ruleSettings.action, ruleSettings.conditionCombination);\n\n    // Add conditions\n    for (const conditionSettings of ruleSettings.conditions) {\n      const condition = new RuleCondition(\n        conditionSettings.condition,\n        conditionSettings.operator,\n        new Map(Object.entries(conditionSettings.parameters || {})),\n      );\n      rule.addCondition(condition);\n    }\n\n    return rule;\n  }\n\n  /**\n   * Configure sequencing controls based on provided settings\n   * @param {SequencingControlsSettings} sequencingControlsSettings - The sequencing controls settings\n   */\n  private configureSequencingControls(\n    sequencingControlsSettings: SequencingControlsSettings,\n  ): void {\n    const sequencingControls = this._sequencing.sequencingControls;\n\n    // Set sequencing control properties\n    if (sequencingControlsSettings.enabled !== undefined) {\n      sequencingControls.enabled = sequencingControlsSettings.enabled;\n    }\n    if (sequencingControlsSettings.choiceExit !== undefined) {\n      sequencingControls.choiceExit = sequencingControlsSettings.choiceExit;\n    }\n    if (sequencingControlsSettings.flow !== undefined) {\n      sequencingControls.flow = sequencingControlsSettings.flow;\n    }\n    if (sequencingControlsSettings.forwardOnly !== undefined) {\n      sequencingControls.forwardOnly = sequencingControlsSettings.forwardOnly;\n    }\n    if (sequencingControlsSettings.useCurrentAttemptObjectiveInfo !== undefined) {\n      sequencingControls.useCurrentAttemptObjectiveInfo =\n        sequencingControlsSettings.useCurrentAttemptObjectiveInfo;\n    }\n    if (sequencingControlsSettings.useCurrentAttemptProgressInfo !== undefined) {\n      sequencingControls.useCurrentAttemptProgressInfo =\n        sequencingControlsSettings.useCurrentAttemptProgressInfo;\n    }\n    if (sequencingControlsSettings.preventActivation !== undefined) {\n      sequencingControls.preventActivation = sequencingControlsSettings.preventActivation;\n    }\n    if (sequencingControlsSettings.constrainChoice !== undefined) {\n      sequencingControls.constrainChoice = sequencingControlsSettings.constrainChoice;\n    }\n    if (sequencingControlsSettings.rollupObjectiveSatisfied !== undefined) {\n      sequencingControls.rollupObjectiveSatisfied =\n        sequencingControlsSettings.rollupObjectiveSatisfied;\n    }\n    if (sequencingControlsSettings.rollupProgressCompletion !== undefined) {\n      sequencingControls.rollupProgressCompletion =\n        sequencingControlsSettings.rollupProgressCompletion;\n    }\n    if (sequencingControlsSettings.objectiveMeasureWeight !== undefined) {\n      sequencingControls.objectiveMeasureWeight = sequencingControlsSettings.objectiveMeasureWeight;\n    }\n  }\n\n  /**\n   * Configure rollup rules based on provided settings\n   * @param {RollupRulesSettings} rollupRulesSettings - The rollup rules settings\n   */\n  private configureRollupRules(rollupRulesSettings: RollupRulesSettings): void {\n    const rollupRules = this._sequencing.rollupRules;\n\n    // Configure rollup rules\n    if (rollupRulesSettings.rules) {\n      for (const ruleSettings of rollupRulesSettings.rules) {\n        const rule = this.createRollupRule(ruleSettings);\n        rollupRules.addRule(rule);\n      }\n    }\n  }\n\n  /**\n   * Create a rollup rule from settings\n   * @param {RollupRuleSettings} ruleSettings - The rollup rule settings\n   * @return {RollupRule} - The created rollup rule\n   */\n  private createRollupRule(ruleSettings: RollupRuleSettings): RollupRule {\n    // Create rule\n    const rule = new RollupRule(\n      ruleSettings.action,\n      ruleSettings.consideration,\n      ruleSettings.minimumCount,\n      ruleSettings.minimumPercent,\n    );\n\n    // Add conditions\n    for (const conditionSettings of ruleSettings.conditions) {\n      const condition = new RollupCondition(\n        conditionSettings.condition,\n        new Map(Object.entries(conditionSettings.parameters || {})),\n      );\n      rule.addCondition(condition);\n    }\n\n    return rule;\n  }\n\n  /**\n   * Initialize the sequencing service\n   * @param {Settings} settings - API settings that may include sequencing configuration\n   */\n  private initializeSequencingService(settings?: Settings): void {\n    try {\n      // Create sequencing configuration from settings\n      const sequencingConfig: SequencingConfiguration = {\n        autoRollupOnCMIChange: settings?.sequencing?.autoRollupOnCMIChange ?? true,\n        autoProgressOnCompletion: settings?.sequencing?.autoProgressOnCompletion ?? false,\n        validateNavigationRequests: settings?.sequencing?.validateNavigationRequests ?? true,\n        enableEventSystem: settings?.sequencing?.enableEventSystem ?? true,\n        logLevel: settings?.sequencing?.logLevel ?? \"info\",\n      };\n\n      // Create the sequencing service\n      this._sequencingService = new SequencingService(\n        this._sequencing,\n        this.cmi,\n        this.adl,\n        this.eventService || this, // Use eventService if available, fallback to this\n        this.loggingService || (console as any), // Use loggingService if available, fallback to console\n        sequencingConfig,\n      );\n\n      // Set up event listeners if provided in settings\n      if (settings?.sequencing?.eventListeners) {\n        this._sequencingService.setEventListeners(settings.sequencing.eventListeners);\n      }\n    } catch (error) {\n      // If sequencing service initialization fails, log error but continue\n      console.warn(\"Failed to initialize sequencing service:\", error);\n      this._sequencingService = null;\n    }\n  }\n\n  /**\n   * Get the sequencing service (for advanced sequencing operations)\n   * @return {SequencingService | null}\n   */\n  public getSequencingService(): SequencingService | null {\n    return this._sequencingService;\n  }\n\n  /**\n   * Set sequencing event listeners\n   * @param {SequencingEventListeners} listeners - Event listeners for sequencing events\n   */\n  public setSequencingEventListeners(listeners: SequencingEventListeners): void {\n    if (this._sequencingService) {\n      this._sequencingService.setEventListeners(listeners);\n    }\n  }\n\n  /**\n   * Update sequencing configuration\n   * @param {SequencingConfiguration} config - New sequencing configuration\n   */\n  public updateSequencingConfiguration(config: SequencingConfiguration): void {\n    if (this._sequencingService) {\n      this._sequencingService.updateConfiguration(config);\n    }\n  }\n\n  /**\n   * Get current sequencing state information\n   * @return {object} Current sequencing state\n   */\n  public getSequencingState(): any {\n    if (this._sequencingService) {\n      return this._sequencingService.getSequencingState();\n    }\n    return {\n      isInitialized: false,\n      isActive: false,\n      currentActivity: null,\n      rootActivity: this._sequencing.getRootActivity(),\n      lastSequencingResult: null,\n    };\n  }\n\n  /**\n   * Process a navigation request directly (for advanced use)\n   * @param {string} request - Navigation request\n   * @param {string} targetActivityId - Target activity ID for choice/jump requests\n   * @return {boolean} True if request was processed successfully\n   */\n  public processNavigationRequest(request: string, targetActivityId?: string): boolean {\n    if (this._sequencingService) {\n      return this._sequencingService.processNavigationRequest(request, targetActivityId);\n    }\n    return false;\n  }\n\n  /**\n   * Save current sequencing state to persistent storage\n   * @param {Partial<SequencingStateMetadata>} metadata - Optional metadata override\n   * @return {Promise<boolean>} Promise resolving to success status\n   */\n  public async saveSequencingState(metadata?: Partial<SequencingStateMetadata>): Promise<boolean> {\n    if (!this.settings.sequencingStatePersistence) {\n      this.apiLog(\"saveSequencingState\", \"No persistence configuration provided\", LogLevelEnum.WARN);\n      return false;\n    }\n\n    try {\n      const stateData = this.serializeSequencingState();\n      const fullMetadata: SequencingStateMetadata = {\n        learnerId: this.cmi.learner_id || \"unknown\",\n        courseId: this.settings.courseId || \"unknown\",\n        attemptNumber: 1,\n        lastUpdated: new Date().toISOString(),\n        version: this.settings.sequencingStatePersistence.stateVersion || \"1.0\",\n        ...metadata,\n      };\n\n      const config = this.settings.sequencingStatePersistence;\n      let dataToSave = stateData;\n\n      // Compress if enabled (using simple base64 encoding for now)\n      if (config.compress !== false) {\n        dataToSave = this.compressStateData(stateData);\n      }\n\n      // Check size limits\n      if (config.maxStateSize && dataToSave.length > config.maxStateSize) {\n        throw new Error(`State size ${dataToSave.length} exceeds limit ${config.maxStateSize}`);\n      }\n\n      const success = await config.persistence.saveState(dataToSave, fullMetadata);\n\n      if (config.debugPersistence) {\n        this.apiLog(\n          \"saveSequencingState\",\n          `State save ${success ? \"succeeded\" : \"failed\"}: size=${dataToSave.length}`,\n          success ? LogLevelEnum.INFO : LogLevelEnum.WARN,\n        );\n      }\n\n      return success;\n    } catch (error) {\n      this.apiLog(\n        \"saveSequencingState\",\n        `Error saving sequencing state: ${error instanceof Error ? error.message : String(error)}`,\n        LogLevelEnum.ERROR,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Load sequencing state from persistent storage\n   * @param {Partial<SequencingStateMetadata>} metadata - Optional metadata override\n   * @return {Promise<boolean>} Promise resolving to success status\n   */\n  public async loadSequencingState(metadata?: Partial<SequencingStateMetadata>): Promise<boolean> {\n    if (!this.settings.sequencingStatePersistence) {\n      this.apiLog(\"loadSequencingState\", \"No persistence configuration provided\", LogLevelEnum.WARN);\n      return false;\n    }\n\n    try {\n      const fullMetadata: SequencingStateMetadata = {\n        learnerId: this.cmi.learner_id || \"unknown\",\n        courseId: this.settings.courseId || \"unknown\",\n        attemptNumber: 1,\n        version: this.settings.sequencingStatePersistence.stateVersion || \"1.0\",\n        ...metadata,\n      };\n\n      const config = this.settings.sequencingStatePersistence;\n      const stateData = await config.persistence.loadState(fullMetadata);\n\n      if (!stateData) {\n        if (config.debugPersistence) {\n          this.apiLog(\"loadSequencingState\", \"No sequencing state found to load\", LogLevelEnum.INFO);\n        }\n        return false;\n      }\n\n      // Decompress if needed\n      let dataToLoad = stateData;\n      if (config.compress !== false) {\n        dataToLoad = this.decompressStateData(stateData);\n      }\n\n      const success = this.deserializeSequencingState(dataToLoad);\n\n      if (config.debugPersistence) {\n        this.apiLog(\n          \"loadSequencingState\",\n          `State load ${success ? \"succeeded\" : \"failed\"}: size=${stateData.length}`,\n          success ? LogLevelEnum.INFO : LogLevelEnum.WARN,\n        );\n      }\n\n      return success;\n    } catch (error) {\n      this.apiLog(\n        \"loadSequencingState\",\n        `Error loading sequencing state: ${error instanceof Error ? error.message : String(error)}`,\n        LogLevelEnum.ERROR,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Serialize current sequencing state to JSON string\n   * @return {string} Serialized state\n   */\n  private serializeSequencingState(): string {\n    const state: any = {\n      version: this.settings.sequencingStatePersistence?.stateVersion || \"1.0\",\n      timestamp: new Date().toISOString(),\n      sequencing: null,\n      currentActivityId: null,\n      globalObjectives: this._globalObjectives.map((obj) => obj.toJSON()),\n      adlNavState: {\n        request: this.adl.nav.request,\n        request_valid: this.adl.nav.request_valid,\n      },\n      contentDelivered: false,\n    };\n\n    // Get sequencing state from overall sequencing process if available\n    if (this._sequencingService) {\n      const overallProcess = this._sequencingService.getOverallSequencingProcess();\n      if (overallProcess) {\n        // Use the getSequencingState method from overall_sequencing_process\n        const sequencingState = overallProcess.getSequencingState();\n        state.sequencing = sequencingState;\n        state.contentDelivered = overallProcess.hasContentBeenDelivered();\n      }\n\n      // Get current activity\n      const currentActivity = this._sequencing.getCurrentActivity();\n      if (currentActivity) {\n        state.currentActivityId = currentActivity.id;\n      }\n    }\n\n    return JSON.stringify(state);\n  }\n\n  /**\n   * Deserialize sequencing state from JSON string\n   * @param {string} stateData - Serialized state data\n   * @return {boolean} Success status\n   */\n  private deserializeSequencingState(stateData: string): boolean {\n    try {\n      const state = JSON.parse(stateData);\n\n      // Version compatibility check\n      const expectedVersion = this.settings.sequencingStatePersistence?.stateVersion || \"1.0\";\n      if (state.version !== expectedVersion) {\n        this.apiLog(\n          \"deserializeSequencingState\",\n          `State version mismatch: ${state.version} vs expected ${expectedVersion}`,\n          LogLevelEnum.WARN,\n        );\n      }\n\n      // Restore sequencing state\n      if (state.sequencing && this._sequencingService) {\n        const overallProcess = this._sequencingService.getOverallSequencingProcess();\n        if (overallProcess) {\n          overallProcess.restoreSequencingState(state.sequencing);\n\n          // Restore content delivered flag\n          if (state.contentDelivered) {\n            // Mark content as delivered (there's no direct setter, so we'll need to add one)\n            // For now, we'll just log it\n            this.apiLog(\"deserializeSequencingState\", \"Content delivery state restored\", LogLevelEnum.DEBUG);\n          }\n        }\n      }\n\n      // Restore global objectives\n      if (state.globalObjectives && Array.isArray(state.globalObjectives)) {\n        this._globalObjectives = state.globalObjectives.map((objData: any) => {\n          const obj = new CMIObjectivesObject();\n          // If available, populate from serialized data (method added on CMIObjectivesObject)\n          // Fallback to direct field assignment if fromJSON is unavailable at runtime\n          if ((obj as any).fromJSON) {\n            (obj as any).fromJSON(objData);\n          } else {\n            Object.assign(obj as any, objData);\n          }\n          return obj;\n        });\n      }\n\n      // Restore ADL nav state\n      if (state.adlNavState) {\n        this.adl.nav.request = state.adlNavState.request || \"_none_\";\n        this.adl.nav.request_valid = state.adlNavState.request_valid || {};\n      }\n\n      return true;\n    } catch (error) {\n      this.apiLog(\n        \"deserializeSequencingState\",\n        `Error deserializing sequencing state: ${error instanceof Error ? error.message : String(error)}`,\n        LogLevelEnum.ERROR,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Simple compression using base64 encoding\n   * @param {string} data - Data to compress\n   * @return {string} Compressed data\n   */\n  private compressStateData(data: string): string {\n    // For now, just use base64 encoding\n    // In a real implementation, you might use a library like lz-string\n    if (typeof btoa !== \"undefined\") {\n      return btoa(encodeURIComponent(data));\n    }\n    return data;\n  }\n\n  /**\n   * Simple decompression from base64\n   * @param {string} data - Data to decompress\n   * @return {string} Decompressed data\n   */\n  private decompressStateData(data: string): string {\n    // For now, just use base64 decoding\n    // In a real implementation, you might use a library like lz-string\n    if (typeof atob !== \"undefined\") {\n      try {\n        return decodeURIComponent(atob(data));\n      } catch {\n        return data;\n      }\n    }\n    return data;\n  }\n}\n\nexport default Scorm2004API;\n","// src/CrossFrameAPI.ts\nimport { MessageData, MessageResponse } from \"./types/CrossFrame\";\nimport { global_errors } from \"./constants/error_codes\";\n\n/**\n * Client-side SCORM façade running in your content frame.\n * Returns cached/default values synchronously, then fires off an async\n * postMessage to the LMS frame to refresh cache and error state.\n */\nexport default class CrossFrameAPI {\n  private _cache = new Map<string, string>();\n  private _lastError = \"0\";\n  private _pending = new Map<\n    string,\n    {\n      resolve: (v: any) => void;\n      reject: (e: any) => void;\n      timer: ReturnType<typeof setTimeout>;\n    }\n  >();\n  private _counter = 0;\n  private readonly _origin: string;\n  private readonly _targetWindow: Window;\n\n  private _handler: ProxyHandler<CrossFrameAPI> = {\n    get: (target, prop, receiver) => {\n      // If it's an existing property/method, return it\n      if (typeof prop !== \"string\" || prop in target) {\n        const v = Reflect.get(target, prop, receiver);\n        return typeof v === \"function\" ? v.bind(target) : v;\n      }\n\n      // Otherwise treat prop as a SCORM call\n      const methodName = prop;\n      const isGet = methodName.endsWith(\"GetValue\");\n      const isSet = methodName.startsWith(\"LMSSet\") || methodName.endsWith(\"SetValue\");\n      const isInit = methodName === \"Initialize\" || methodName === \"LMSInitialize\";\n      const isFinish = methodName === \"Terminate\" || methodName === \"LMSFinish\";\n      const isCommit = methodName === \"Commit\" || methodName === \"LMSCommit\";\n      const isErrorString = methodName === \"GetErrorString\" || methodName === \"LMSGetErrorString\";\n      const isDiagnostic = methodName === \"GetDiagnostic\" || methodName === \"LMSGetDiagnostic\";\n\n      return (...args: any[]): string => {\n        // Synchronous cache update for setter calls\n        if (isSet && args.length >= 2) {\n          target._cache.set(args[0], String(args[1]));\n          target._lastError = \"0\";\n        }\n\n        // Fire off async postMessage to refresh cache and error\n        target\n          ._post(methodName, args)\n          .then((res) => {\n            if (isGet && args.length >= 1) {\n              target._cache.set(args[0], String(res));\n              target._lastError = \"0\";\n            }\n            if (isErrorString && args.length >= 1) {\n              const code = String(args[0]);\n              target._cache.set(`error_${code}`, String(res));\n            }\n            if (isDiagnostic && args.length >= 1) {\n              const code = String(args[0]);\n              target._cache.set(`diag_${code}`, String(res));\n            }\n            if (methodName === \"GetLastError\" || methodName === \"LMSGetLastError\") {\n              target._lastError = String(res);\n            }\n          })\n          .catch((err) => target._capture(methodName, err));\n\n        // Return synchronously\n        if (isGet && args.length >= 1) {\n          return target._cache.get(args[0]) ?? \"\";\n        }\n        if (isErrorString && args.length >= 1) {\n          const code = String(args[0]);\n          return target._cache.get(`error_${code}`) ?? \"\";\n        }\n        if (isDiagnostic && args.length >= 1) {\n          const code = String(args[0]);\n          return target._cache.get(`diag_${code}`) ?? \"\";\n        }\n        if (isInit || isFinish || isCommit || isSet) {\n          // Immediately return “true”\n          const result = \"true\";\n          // Then warm cache:\n          target\n            ._post(\"getFlattenedCMI\", [])\n            .then((all: Record<string, string>) => {\n              Object.entries(all).forEach(([key, val]) => {\n                target._cache.set(key, val);\n              });\n              // reset error\n              target._lastError = \"0\";\n            })\n            .catch((err) => target._capture(\"getFlattenedCMI\", err));\n          return result;\n        }\n        if (methodName === \"GetLastError\" || methodName === \"LMSGetLastError\") {\n          return target._lastError;\n        }\n        return \"\";\n      };\n    },\n  };\n\n  constructor(targetOrigin: string = \"*\", targetWindow: Window = window.parent) {\n    this._origin = targetOrigin;\n    this._targetWindow = targetWindow;\n    window.addEventListener(\"message\", this._onMessage.bind(this));\n    return new Proxy(this, this._handler);\n  }\n\n  /** Send a message to the LMS frame and return a promise for its response */\n  private _post(method: string, params: any[]): Promise<any> {\n    const messageId = `cfapi-${Date.now()}-${this._counter++}`;\n\n    // Deep‐clean params of non-cloneables (e.g. functions)\n    const safeParams = params.map((p) => {\n      if (typeof p === \"function\") {\n        console.warn(\"Dropping function param when posting SCORM call:\", method);\n        return undefined;\n      }\n      return p;\n    });\n\n    return new Promise((resolve, reject) => {\n      const timer = setTimeout(() => {\n        if (this._pending.has(messageId)) {\n          this._pending.delete(messageId);\n          reject(new Error(`Timeout calling ${method}`));\n        }\n      }, 5000);\n\n      this._pending.set(messageId, { resolve, reject, timer });\n      const msg: MessageData = { messageId, method, params: safeParams };\n      this._targetWindow.postMessage(msg, this._origin);\n    });\n  }\n\n  /** Handle incoming postMessage responses from the LMS frame */\n  private _onMessage(ev: MessageEvent) {\n    // Validate the message origin and source unless all origins are allowed\n    if (this._origin !== \"*\" && ev.origin !== this._origin) {\n      return;\n    }\n    if (ev.source && ev.source !== this._targetWindow) {\n      return;\n    }\n    const data = ev.data as MessageResponse;\n    if (!data?.messageId) return;\n    const pending = this._pending.get(data.messageId);\n    if (!pending) return;\n    clearTimeout(pending.timer);\n    this._pending.delete(data.messageId);\n    if (data.error) pending.reject(data.error);\n    else pending.resolve(data.result);\n  }\n\n  /** Capture and cache SCORM errors */\n  private _capture(method: string, err: any) {\n    console.error(`CrossFrameAPI ${method} error:`, err);\n    const match = /\\b(\\d{3})\\b/.exec(err.message);\n    const code = match ? match[1] : String(global_errors.GENERAL);\n    this._lastError = code as string;\n    this._cache.set(`error_${code}`, err.message);\n  }\n}\n","// src/CrossFrameLMS.ts\nimport { MessageData, MessageResponse } from \"./types/CrossFrame\";\nimport { IBaseAPI } from \"./interfaces/IBaseAPI\";\n\n/**\n * Server‐side SCORM adapter running in your LMS frame (lms.example.com).\n * Listens for postMessage from child (content) frames, invokes real API,\n * and posts back { messageId, result, error }.\n */\nexport default class CrossFrameLMS {\n  private readonly _api: IBaseAPI;\n  private readonly _origin: string;\n\n  constructor(api: IBaseAPI, targetOrigin: string = \"*\") {\n    this._api = api;\n    this._origin = targetOrigin;\n    window.addEventListener(\"message\", this._onMessage.bind(this));\n  }\n\n  private _onMessage(ev: MessageEvent) {\n    // Validate the message origin unless all origins are allowed\n    if (this._origin !== \"*\" && ev.origin !== this._origin) {\n      return;\n    }\n\n    const msg = ev.data as MessageData;\n    if (!msg?.messageId || !msg.method || !ev.source) return;\n\n    this._process(msg, ev.source as Window);\n  }\n\n  private _process(msg: MessageData, source: Window) {\n    const sendResponse = (result?: any, error?: { message: string; stack?: string }) => {\n      const resp: MessageResponse = { messageId: msg.messageId };\n      if (result !== undefined) resp.result = result;\n      if (error !== undefined) resp.error = error;\n      source.postMessage(resp, this._origin);\n    };\n\n    try {\n      const fn = (this._api as any)[msg.method];\n      if (typeof fn !== \"function\") {\n        sendResponse(undefined, { message: `Method ${msg.method} not found` });\n        return;\n      }\n\n      const result = fn.apply(this._api, msg.params);\n\n      if (result && typeof (result as Promise<any>).then === \"function\") {\n        (result as Promise<any>)\n          .then((r) => sendResponse(r))\n          .catch((e: any) => sendResponse(undefined, { message: e.message, stack: e.stack }));\n      } else {\n        sendResponse(result);\n      }\n    } catch (e: any) {\n      sendResponse(undefined, { message: e.message, stack: e.stack });\n    }\n  }\n}\n"],"names":["global_constants","scorm12_constants","cmi_children","core_children","score_children","comments_children","objectives_children","correct_responses_children","student_data_children","student_preference_children","interactions_children","error_descriptions","basicMessage","detailMessage","aicc_constants","student_demographics_children","tries_children","attempt_records_children","paths_children","scorm2004_constants","adl_data_children","global_errors","GENERAL","INITIALIZATION_FAILED","INITIALIZED","TERMINATED","TERMINATION_FAILURE","TERMINATION_BEFORE_INIT","MULTIPLE_TERMINATION","RETRIEVE_BEFORE_INIT","RETRIEVE_AFTER_TERM","STORE_BEFORE_INIT","STORE_AFTER_TERM","COMMIT_BEFORE_INIT","COMMIT_AFTER_TERM","ARGUMENT_ERROR","CHILDREN_ERROR","COUNT_ERROR","GENERAL_GET_FAILURE","GENERAL_SET_FAILURE","GENERAL_COMMIT_FAILURE","UNDEFINED_DATA_MODEL","UNIMPLEMENTED_ELEMENT","VALUE_NOT_INITIALIZED","INVALID_SET_VALUE","READ_ONLY_ELEMENT","WRITE_ONLY_ELEMENT","TYPE_MISMATCH","VALUE_OUT_OF_RANGE","DEPENDENCY_NOT_ESTABLISHED","scorm12_errors","scorm2004_errors","MULTIPLE_TERMINATIONS","scorm12_regex","CMIString256","CMIString4096","CMITime","CMITimespan","CMIInteger","CMISInteger","CMIDecimal","CMIIdentifier","CMIFeedback","CMIIndex","CMIStatus","CMIStatus2","CMIExit","CMIType","CMIResult","NAVEvent","score_range","audio_range","speed_range","weighting_range","text_range","aicc_regex","scorm2004_regex","BaseScormValidationError","Error","constructor","CMIElement","errorCode","super","this","_errorCode","Object","setPrototypeOf","prototype","ValidationError","errorMessage","detailedMessage","_detailedMessage","message","_errorMessage","Scorm12ValidationError","hasOwnProperty","call","String","BaseCMI","cmi_element","jsonString","_initialized","_cmi_element","initialized","initialize","BaseRootCMI","start_time","_start_time","setStartTime","Date","getTime","designations","D","H","M","S","getSecondsAsHHMMSS","memoize","totalSeconds","hours","Math","floor","dateObj","minutes","getUTCMinutes","seconds","getSeconds","ms","msStr","countDecimals","toFixed","split","replace","getSecondsAsISODuration","duration","remainder","entries","forEach","designationsKey","current_seconds","value","indexOf","includes","getTimeAsSeconds","timeString","timeRegex","RegExp","match","test","parts","toString","getDurationAsSeconds","durationRegex","years","_","days","exec","result","validateISO8601Duration","flatten","data","recurse","cur","prop","Array","isArray","item","i","length","keys","filter","p","isEmpty","num","stringMatches","str","tester","fn","keyFn","cache","Map","args","key","JSON","stringify","has","get","set","checkValidFormat","regexPattern","errorClass","allowEmptyString","formatRegex","matches","_errorClass","checkValidRange","rangePattern","ranges","check12ValidFormat","check12ValidRange","validationService","validateScore","decimalRegex","scoreRange","invalidTypeCode","invalidRangeCode","validateScorm12Audio","validateScorm12Language","validateScorm12Speed","validateScorm12Text","validateReadOnly","CMIScore","params","_raw","_min","__children","__score_range","_max","max","__invalid_error_code","invalidErrorCode","__invalid_type_code","__invalid_range_code","__decimal_regex","__error_class","reset","_children","raw","min","getScoreObject","scoreObject","Number","isNaN","parseFloat","toJSON","CMICore","_student_id","_student_name","_lesson_location","_credit","_lesson_status","_entry","_total_time","_lesson_mode","_exit","_session_time","_suspend_data","score","student_id","student_name","lesson_location","credit","lesson_status","entry","total_time","lesson_mode","exit","session_time","suspend_data","getCurrentTotalTime","sessionTime","Util.getSecondsAsHHMMSS","first","second","CMIArray","children","childArray","wipe","_count","_id","_status","id","status","CMIStudentData","_mastery_score","_max_time_allowed","_time_limit_action","mastery_score","max_time_allowed","time_limit_action","CMIStudentPreference","_audio","_language","_speed","_text","audio","language","speed","text","_time","_type","_weighting","_student_response","_result","_latency","objectives","correct_responses","time","type","weighting","student_response","latency","_pattern","pattern","student_data","__version","_launch_data","_comments","_comments_from_lms","core","CMIObjectives","student_preference","interactions","CMIInteractions","launch_data","comments","comments_from_lms","_version","NAV","_event","event","NAVBoolean","SuccessStatus","CompletionStatus","LogLevelEnum","DEBUG","INFO","WARN","ERROR","NONE","DefaultSettings","autocommit","autocommitSeconds","asyncCommit","sendFullCommit","lmsCommitUrl","dataCommitFormat","commitRequestDataType","autoProgress","logLevel","selfReportSessionTime","alwaysSendTotalTime","renderCommonCommitFields","strict_errors","xhrHeaders","xhrWithCredentials","fetchMode","useBeaconInsteadOfFetch","responseHandler","async","response","httpResult","json","responseText","parse","e","requestHandler","commitObject","onLogMessage","defaultLogHandler","scoItemIds","scoItemIdValidator","globalObjectiveIds","enableOfflineSupport","courseId","syncOnInitialize","syncOnTerminate","maxSyncAttempts","messageLevel","logMessage","console","error","warn","info","debug","log","ScheduledCommit","API","when","callback","_cancelled","_API","_timeout","setTimeout","wrapper","bind","_callback","cancel","clearTimeout","isInitialized","commit","HttpService","settings","error_codes","processHttpRequest","url","immediate","apiLog","processListeners","genericError","_handleImmediateRequest","processedParams","performFetch","transformResponse","stack","enhancedError","errorDetails","errorType","name","originalError","body","contentType","_prepareRequestBody","navigator","sendBeacon","Blob","then","catch","join","performBeacon","init","method","mode","headers","keepalive","credentials","fetch","beaconSuccess","Promise","resolve","ok","parseError","statusText","substring","_isSuccessResponse","updateSettings","EventService","listenerMap","listenerCount","parseListenerName","listenerName","listenerSplit","functionName","on","listenerFunctions","listenerFunction","parsedListener","listeners","push","off","removeIndex","findIndex","obj","splice","delete","clear","newListeners","listener","listenerHasCMIElement","CMIElementsMatch","endsWith","prefix","slice","startsWith","SerializationService","loadFromFlattenedJSON","setCMIValue","isNotInitialized","setStartingData","int_pattern","obj_pattern","others","intMatch","index","field","objMatch","sort","a","b","localeCompare","processItems","items","loadFromJSON","regex","from","m","unflatten","currentCMIElement","tempCMIElement","renderCMIToJSONString","cmi","k","v","renderCMIToJSONObject","getCommitObject","terminateCommit","renderCommitObject","renderCommitCMI","apiLogLevel","includeTotalTime","LoggingService","_logLevel","_logHandler","getInstance","_instance","setLogLevel","level","getLogLevel","setLogHandler","handler","shouldLog","getNumericLevel","getLoggingService","ErrorHandlingService","errorCodes","getLmsErrorMessageDetails","loggingService","_lastErrorCode","_errorCodes","_apiLog","_getLmsErrorMessageDetails","_loggingService","lastErrorCode","throwSCORMError","errorNumber","formattedMessage","clearSCORMError","success","handleValueAccessException","returnValue","validationError","jsonError","OfflineStorageService","storeName","syncQueue","isOnline","onLine","syncInProgress","window","addEventListener","handleOnlineStatusChange","wasOnline","syncOfflineData","storeOffline","commitData","queueItem","now","random","timestamp","syncAttempts","currentQueue","getFromStorage","saveToStorage","getOfflineData","remainingQueue","sendDataToLMS","processedData","isDeviceOnline","storedData","localStorage","getItem","setItem","hasPendingOfflineData","some","BaseAPI","httpService","eventService","serializationService","cmiDataService","errorHandlingService","offlineStorageService","_settings","_courseId","TypeError","currentState","_error_codes","_httpService","_eventService","element","_serializationService","_errorHandlingService","detail","createErrorHandlingService","_offlineStorageService","offlineData","runtimeData","commonReset","clearScheduledCommit","startingData","callbackName","initializeMessage","terminationMessage","isTerminated","hasPendingData","syncSuccess","messageString","padEnd","formatMessage","previousSettings","terminate","checkTerminated","checkState","storeData","getValue","getCMIValue","setValue","commitCallback","scheduleCommit","getLastError","getErrorString","CMIErrorCode","getDiagnostic","beforeInitError","afterTermError","_errorNumber","_detail","_CMIElement","_value","_commonSetCMIValue","methodName","scorm2004","structure","refObject","foundFirstIndex","invalidErrorMessage","idx","attribute","_checkObjectHasProperty","validateCorrectResponse","parseInt","newChild","getChildElement","_commonGetCMIValue","uninitializedErrorMessage","_isTargetValid","getFlattenedCMI","Utilities.flatten","StringKeyMap","getOwnPropertyDescriptor","getPrototypeOf","Scorm12API","mastery_override","statusSetByModule","CMI","nav","LMSInitialize","lmsInitialize","LMSFinish","lmsFinish","LMSGetValue","lmsGetValue","LMSSetValue","lmsSetValue","LMSCommit","lmsCommit","LMSGetLastError","lmsGetLastError","LMSGetErrorString","lmsGetErrorString","LMSGetDiagnostic","lmsGetDiagnostic","internalFinish","CMIObjectivesObject","CMIInteractionsCorrectResponsesObject","CMIInteractionsObjectivesObject","CMIInteractionsObject","replaceWithAnotherScormAPI","newAPI","cmiExport","flattened","totalTimeHHMMSS","totalTimeSeconds","Utilities.getTimeAsSeconds","lessonStatus","completionStatus","successStatus","originalStatus","aicc_errors","AICCValidationError","checkAICCValidFormat","CMIEvaluation","CMIEvaluationComments","CMIEvaluationCommentsObject","_content","_location","content","location","AICCStudentPreferences","_lesson_type","_text_color","_text_location","_text_size","_video","windows","lesson_type","text_color","text_location","text_size","video","CMIStudentDemographics","_city","_class","_company","_country","_experience","_familiar_name","_instructor_name","_title","_native_language","_state","_street_address","_telephone","_years_experience","city","clazz","company","country","experience","familiar_name","instructor_name","title","native_language","state","street_address","telephone","years_experience","class","CMITries","CMITriesObject","CMIAttemptRecords","CMIAttemptRecordsObject","AICCCMIStudentData","_tries_during_lesson","tries","attempt_records","tries_during_lesson","CMIPaths","CMIPathsObject","_location_id","_date","_why_left","_time_in_element","location_id","date","why_left","time_in_element","Scorm12CMI.CMI","student_demographics","evaluation","paths","AICC","Scorm2004ValidationError","check2004ValidFormat","check2004ValidRange","CMILearnerPreference","_audio_level","_delivery_speed","_audio_captioning","audio_level","delivery_speed","audio_captioning","LearnerResponses","format","delimiter","unique","choice","matching","format2","delimiter2","performance","sequencing","likert","numeric","other","CorrectResponses","duplicate","limit","delimiter3","_timestamp","_learner_response","_description","learner_response","nodes","response_type","values","j","description","stripBrackets","delim","escapeRegex","s","splitUnescaped","reDelim","splitRe","unescapeRe","map","part","interactionType","_interactionType","responseDef","trim","subDelim1","rawNodes","delim1","Set","size","fmt1","fmt2","checkSingle","checkPair","delimBracketed","n","node","numDelim","nums","allParts","part1","part2","validatePattern","Scorm2004CMIScore","_scaled","scaled","CMICommentsFromLMS","CMICommentsFromLearner","CMICommentsObject","readOnlyAfterInit","_comment","_readOnlyAfterInit","comment","findObjectiveById","find","objective","findObjectiveByIndex","setObjectiveByIndex","_success_status","_completion_status","_progress_measure","success_status","completion_status","progress_measure","fromJSON","CMIMetadata","CMILearner","_learner_id","_learner_name","learner_id","learner_name","CMISession","Util.getSecondsAsISODuration","Util.addTwoDurations","CMIContent","CMISettings","_mode","CMIThresholds","_scaled_passing_score","_completion_threshold","scaled_passing_score","completion_threshold","metadata","learner","session","thresholds","learner_preference","comments_from_learner","ADL","ADLData","_sequencing","ADLNav","adlNav","_request","request_valid","ADLNavRequestValid","request","ADLDataObject","_store","store","_continue","_previous","_choice","_jump","_exitAll","_abandon","_abandonAll","_suspendAll","previous","jump","exitAll","abandon","abandonAll","suspendAll","continue","RuleConditionOperator","RuleActionType","RuleCondition","condition","operator","parameters","_condition","_operator","_parameters","_now","setNowProvider","evaluate","activity","objectiveMeasureStatus","greaterThanValue","objectiveNormalizedMeasure","lessThanValue","isCompleted","attemptCount","attemptLimit","evaluateTimeLimitExceeded","evaluateOutsideAvailableTimeRange","timeLimitDuration","durationMs","parseISO8601Duration","attemptExperiencedDuration","beginTime","beginTimeLimit","endTime","endTimeLimit","fromEntries","SequencingRule","action","conditionCombination","_conditions","_action","_conditionCombination","conditions","addCondition","removeCondition","every","SequencingRules","_preConditionRules","_exitConditionRules","_postConditionRules","preConditionRules","addPreConditionRule","rule","exitConditionRules","addExitConditionRule","postConditionRules","addPostConditionRule","evaluatePreConditionRules","evaluateExitConditionRules","evaluatePostConditionRules","RollupActionType","RollupConsiderationType","RollupCondition","RollupRule","consideration","minimumCount","minimumPercent","_consideration","_minimumCount","_minimumPercent","matchingChildren","child","RollupRules","_rules","rules","addRule","removeRule","processRollup","getAvailableChildren","completionRollup","successRollup","sequencingControls","rollupObjectiveSatisfied","_objectiveRollupUsingMeasure","_defaultCompletionRollup","_defaultSuccessRollup","objectiveMeasureWeight","totalWeight","weightedSum","hasValidMeasures","childWeight","normalizedMeasure","scaledPassingScore","objectiveSatisfiedStatus","ValidLanguages","SelectionTiming","RandomizationTiming","SequencingControls","_enabled","_choiceExit","_flow","_forwardOnly","_useCurrentAttemptObjectiveInfo","_useCurrentAttemptProgressInfo","_preventActivation","_constrainChoice","_stopForwardTraversal","_rollupObjectiveSatisfied","_rollupProgressCompletion","_objectiveMeasureWeight","_selectionTiming","_selectCount","_selectionCountStatus","_randomizeChildren","_randomizationTiming","_reorderChildren","enabled","choiceExit","flow","forwardOnly","useCurrentAttemptObjectiveInfo","useCurrentAttemptProgressInfo","preventActivation","constrainChoice","stopForwardTraversal","rollupProgressCompletion","isChoiceNavigationAllowed","isFlowNavigationAllowed","isForwardNavigationAllowed","isBackwardNavigationAllowed","selectionTiming","selectCount","selectionCountStatus","randomizeChildren","randomizationTiming","reorderChildren","Activity","_parent","_isVisible","_isActive","_isSuspended","_isCompleted","_completionStatus","_successStatus","_attemptCount","_attemptCompletionAmount","_attemptAbsoluteDuration","_attemptExperiencedDuration","_activityAbsoluteDuration","_activityExperiencedDuration","_objectiveSatisfiedStatus","_objectiveMeasureStatus","_objectiveNormalizedMeasure","_scaledPassingScore","_progressMeasure","_progressMeasureStatus","_attemptAbsoluteStartTime","_learnerPrefs","_activityAttemptActive","_isHiddenFromChoice","_isAvailable","_attemptLimit","_attemptAbsoluteDurationLimit","_activityAbsoluteDurationLimit","_timeLimitAction","_timeLimitDuration","_beginTimeLimit","_endTimeLimit","_processedChildren","_isNewAttempt","_sequencingControls","_sequencingRules","_rollupRules","addChild","removeChild","parent","isVisible","isActive","isSuspended","attemptCompletionAmount","incrementAttemptCount","controls","progressMeasure","progressMeasureStatus","attemptAbsoluteStartTime","learnerPrefs","activityAttemptActive","isHiddenFromChoice","isAvailable","hasAttemptLimitExceeded","timeLimitAction","attemptAbsoluteDurationLimit","activityAbsoluteDurationLimit","activityExperiencedDuration","attemptAbsoluteDuration","activityAbsoluteDuration","sequencingRules","rollupRules","setProcessedChildren","processedChildren","resetProcessedChildren","isNewAttempt","ActivityTree","root","_root","_currentActivity","_suspendedActivity","_activities","_addActivitiesToMap","currentActivity","suspendedActivity","getActivity","getAllActivities","getParent","getChildren","useAvailableChildren","getSiblings","getNextSibling","siblings","getPreviousSibling","getFirstChild","getLastChild","getCommonAncestor","activity1","activity2","path1","current","unshift","Sequencing","_adlNav","_activityTree","activityTree","_processRollupRecursive","getCurrentActivity","getRootActivity","RollupProcess","eventCallback","rollupStateLog","overallRollupProcess","measureRollupProcess","objectiveRollupProcess","activityProgressRollupProcess","c","checkChildForRollupSubprocess","complexWeightedMeasure","calculateComplexWeightedMeasure","enableThresholdBias","clusters","identifyActivityClusters","processCrossClusterDependencies","ruleResult","objectiveRollupUsingRules","measureResult","objectiveRollupUsingMeasure","objectiveRollupUsingDefault","satisfiedRules","SATISFIED","notSatisfiedRules","NOT_SATISFIED","evaluateRollupRule","completedRules","COMPLETED","incompleteRules","INCOMPLETE","allCompleted","rollupType","contributingChildren","satisfiedCount","contributes","evaluateRollupConditionsSubprocess","ALL","ANY","AT_LEAST_COUNT","AT_LEAST_PERCENT","validateRollupStateConsistency","rootActivity","activityId","toISOString","inconsistencies","validateActivityRollupState","count","processGlobalObjectiveMapping","globalObjectives","globalObjectiveCount","synchronizeGlobalObjectives","processedObjectives","options","totalWeightedMeasure","weightingLog","enableBias","adjustedWeight","calculateAdjustedWeight","childId","measure","weight","weightingDetails","clusterCount","dependencyMap","cluster","analyzeCrossClusterDependencies","processOrder","resolveDependencyOrder","clusterId","processClusterRollup","processedClusters","measureStatus","satisfiedStatus","activityObjectives","getActivityObjectives","objectiveId","globalObjective","syncObjectiveState","localObjective","getLocalObjectiveState","baseWeight","resolved","resolving","add","dependencies","depId","readSatisfiedStatus","satisfiedStatusKnown","readNormalizedMeasure","normalizedMeasureKnown","satisfiedByMeasure","writeSatisfiedStatus","writeNormalizedMeasure","writeCompletionStatus","completionStatusKnown","readCompletionStatus","writeProgressMeasure","progressMeasureKnown","readProgressMeasure","updateAttemptData","updateActivityAttemptData","localState","globalState","synchronizationTime","suspendData","SelectionRandomization","selectChildrenProcess","NEVER","ONCE","selectedChildren","availableIndices","randomIndex","childIndex","randomizeChildrenProcess","randomizedChildren","tempI","tempJ","applySelectionAndRandomization","shouldApplySelection","shouldApplyRandomization","ON_EACH_NEW_ATTEMPT","isSelectionNeeded","isRandomizationNeeded","SequencingRequestType","DeliveryRequestType","SequencingResult","deliveryRequest","targetActivity","exception","SequencingProcess","getAttemptElapsedSecondsHook","getAttemptElapsedSeconds","getActivityElapsedSecondsHook","getActivityElapsedSeconds","sequencingRequestProcess","targetActivityId","startSequencingRequestProcess","resumeAllSequencingRequestProcess","continueSequencingRequestProcess","previousSequencingRequestProcess","choiceSequencingRequestProcess","jumpSequencingRequestProcess","exitSequencingRequestProcess","exitAllSequencingRequestProcess","abandonSequencingRequestProcess","abandonAllSequencingRequestProcess","suspendAllSequencingRequestProcess","retrySequencingRequestProcess","retryAllSequencingRequestProcess","deliverableActivity","findFirstDeliverableActivity","checkActivityProcess","ensureSelectionAndRandomization","deliverable","flowResult","flowSubprocess","isActivityInTree","commonAncestor","findCommonAncestor","terminateDescendentAttemptsProcess","activityPath","pathActivity","flowActivityTraversalSubprocess","_direction","considerChildren","availableChildren","limitConditionsCheckProcess","preConditionResult","sequencingRulesCheckProcess","SKIP","DISABLED","skipExitRules","exitAction","exitActionRulesSubprocess","processDeferredExitAction","EXIT","EXIT_PARENT","EXIT_ALL","postConditionRulesSubprocess","postAction","RETRY","RETRY_ALL","CONTINUE","PREVIOUS","STOP_FORWARD_TRAVERSAL","validateSequencingRequest","valid","requestSpecificValidation","validateRequestSpecificConstraints","sequencingRulesCheckSubprocess","AND","OR","ancestors1","fromActivity","direction","candidateActivity","firstIteration","nextCandidate","flowTreeTraversalSubprocess","skipChildren","previousSibling","lastDescendant","lastChild","parentPreviousSibling","nextSibling","choiceFlowSubprocess","choiceFlowTreeTraversalSubprocess","constraintValidation","validateChoiceFlowConstraints","validChildren","enhancedChoiceActivityTraversalSubprocess","traversalValidation","validateChoiceTraversalConstraints","canTraverse","canTraverseInto","choiceActivityTraversalSubprocess","meetsChoiceFlowConstraints","validateConstrainChoiceForFlow","evaluateConstrainChoiceForTraversal","evaluateForwardOnlyForChoice","validateConstrainedChoiceBoundaries","boundaryCheck","checkConstrainedChoiceBoundary","targetIndex","isActivityAvailableForChoice","currentIndex","activityIndex","intermediateActivity","isActivityMandatory","isActivityCompleted","validateActivityChoiceState","hasBackwardChoiceException","hasChoiceBoundaryViolation","mandatory","HIDE_FROM_CHOICE","evaluateRuleConditions","allowBackwardChoice","combinationMode","conditionResults","conditionType","measureThreshold","limitSeconds","elapsedSeconds","start","nowMs","not","NavigationRequestType","NavigationRequestResult","terminationRequest","sequencingRequest","DeliveryRequest","OverallSequencingProcess","sequencingProcess","rollupProcess","contentDelivered","globalObjectiveMap","enhancedDeliveryValidation","initializeGlobalObjectiveMap","processNavigationRequest","navigationRequest","navResult","navigationRequestProcess","terminationRequestProcess","seqResult","DELIVER","deliveryResult","deliveryRequestProcess","contentDeliveryEnvironmentProcess","fireEvent","START","RESUME_ALL","forwardOnlyValidation","validateForwardOnlyConstraints","choiceValidation","validateComplexChoicePath","CHOICE","JUMP","ABANDON","ABANDON_ALL","SUSPEND_ALL","hasSequencingRequest","exitActionResult","enhancedExitActionRulesSubprocess","recursionDepth","depth","terminationResult","executeTermination","shouldEvaluatePostConditions","postConditionResult","integratePostConditionRulesSubprocess","performComplexSuspendedActivityCleanup","endAttemptProcess","handleMultiLevelExitActions","handleSuspendAllRequest","exitRules","conditionsMet","processExitActionsAtLevel","terminateAllActivities","cleanedActivities","originalSuspendedActivity","stateConsistencyCheck","validateActivityTreeStateConsistency","consistent","resourceConstraintCheck","validateResourceConstraints","available","concurrentDeliveryCheck","validateConcurrentDeliveryPrevention","allowed","dependencyCheck","validateActivityDependencies","satisfied","clearSuspendedActivitySubprocess","initializeActivityForDelivery","setupActivityAttemptTracking","updateNavigationValidity","fireActivityDeliveryEvent","audioCaptioning","audioLevel","deliverySpeed","eventType","continueResult","previousResult","allActivities","choiceMap","jumpMap","act","choiceRes","jumpRes","hasContentBeenDelivered","resetContentDelivered","failureReason","currentDuration","currentTime","checks","attemptDurationLimit","activityDurationLimit","getSequencingState","version","activityStates","serializeActivityStates","navigationState","getNavigationState","restoreSequencingState","deserializeActivityStates","restoreNavigationState","states","serializeActivity","restoreActivity","requestValid","navState","isActivityDisabled","constrainChoiceValidation","validateConstrainChoiceControls","choiceSetValidation","validateChoiceSetConstraints","ancestor","findChildContaining","abs","ancestorValidation","validateAncestorConstraints","getValidChoiceSet","evaluatePreConditionRulesForChoice","target","activityContains","container","currentTop","targetTop","between","helperIsActivityMandatory","helperIsActivityCompleted","validChoices","allDescendants","getAllDescendants","descendant","isValidChoiceTarget","descendants","preRules","isActivityPartOfTree","activeActivities","getActiveActivities","requiredResources","getActivityRequiredResources","resource","isResourceAvailable","checkSystemResourceLimits","adequate","hasPendingDeliveryRequests","isDeliveryLocked","prerequisites","getActivityPrerequisites","prerequisite","isPrerequisiteSatisfied","objectiveDependencies","getObjectiveDependencies","dependency","isObjectiveDependencySatisfied","getSequencingRuleDependencies","collectActiveActivities","resources","activityInfo","toLowerCase","parseDurationToMinutes","document","createElement","canPlayType","plugins","plugin","connection","effectiveType","downlink","storage","estimate","quota","memory","usedJSHeapSize","jsHeapSizeLimit","deviceMemory","hardwareConcurrency","saveData","pendingRequests","pendingScormRequests","navigationLocked","terminationInProgress","scormMaintenanceMode","referencedObjectiveID","sibling","prerequisiteActivities","prerequisiteId","_activity","globalObjectiveID","allRules","objectiveReference","statusKnown","baseObjectiveId","measureKnown","referencedActivity","collectGlobalObjectives","objectiveCount","globalObjectiveId","getGlobalObjectiveMap","updateGlobalObjective","objectiveData","lastUpdated","ActivityDeliveryService","callbacks","currentDeliveredActivity","pendingDelivery","processSequencingResult","onSequencingError","deliverActivity","onSequencingComplete","unloadActivity","onDeliverActivity","onUnloadActivity","getCurrentDeliveredActivity","getPendingDelivery","updateCallbacks","SequencingService","adl","configuration","overallSequencingProcess","eventListeners","isSequencingActive","lastCMIValues","lastSequencingResult","autoRollupOnCMIChange","autoProgressOnCompletion","validateNavigationRequests","enableEventSystem","activityDeliveryService","handleActivityDelivery","handleActivityUnload","handleSequencingComplete","handleSequencingError","setupCMIChangeWatchers","seqOptions","overallOptions","handleSequencingProcessEvent","shouldAutoStartSequencing","startSequencing","initializeCMITracking","errorMsg","triggerFinalRollup","endSequencing","navRequestType","parseNavigationRequest","sequencingResult","DO_NOT_DELIVER","triggerRollupOnCMIChange","cmiElement","oldValue","newValue","updateActivityFromCMI","setEventListeners","updateConfiguration","config","getOverallSequencingProcess","scaledScore","NOT_VALID","fireDebugEvent","argsLength","listenerError","eventServiceError","scormSequencingEvents","globalListeners","globalError","fireActivityAttemptStart","fireActivityAttemptEnd","fireLimitConditionCheck","fireNavigationValidityUpdate","validity","fireSequencingStateChange","stateKeys","logLevels","configLevel","Scorm2004API","_globalObjectives","_sequencingService","_extractedScoItemIds","configureSequencing","initializeSequencingService","Initialize","Terminate","GetValue","SetValue","Commit","GetLastError","GetErrorString","GetDiagnostic","sequencingStatePersistence","loadSequencingState","navigationHandled","choiceJumpRegex","groups","choice_target","jump_target","navActions","adlNavRequestRegex","rollupError","autoSaveOn","saveSequencingState","element_base","objective_id","global_index","newGlobalObjective","global_element","createCorrectResponsesObject","interaction","checkDuplicateChoiceResponse","checkValidResponseType","interaction_type","checkCorrectResponseValue","interaction_count","pattern_index","checkDuplicatedPattern","errorDescription","correct_response","current_index","found","removeCorrectResponsePrefixes","seenOrder","seenCase","seenLang","prefixRegex","langMatches","lang","totalTimeDuration","Utilities.getDurationAsSeconds","navRequest","Function","sequencingSettings","configureActivityTree","configureSequencingRules","configureSequencingControls","configureRollupRules","activityTreeSettings","createActivity","extractActivityIds","ids","activitySettings","childSettings","childActivity","sc","rs","ruleSettings","createSequencingRule","createRollupRule","sequencingRulesSettings","conditionSettings","sequencingControlsSettings","rollupRulesSettings","getSequencingService","setSequencingEventListeners","updateSequencingConfiguration","stateData","serializeSequencingState","fullMetadata","learnerId","attemptNumber","stateVersion","dataToSave","compress","compressStateData","maxStateSize","persistence","saveState","debugPersistence","loadState","dataToLoad","decompressStateData","deserializeSequencingState","currentActivityId","adlNavState","overallProcess","sequencingState","expectedVersion","objData","assign","btoa","encodeURIComponent","atob","decodeURIComponent","CrossFrameAPI","targetOrigin","targetWindow","_cache","_lastError","_pending","_counter","_handler","receiver","Reflect","isGet","isSet","isInit","isFinish","isCommit","isErrorString","isDiagnostic","_post","res","err","_capture","all","val","_origin","_targetWindow","_onMessage","Proxy","messageId","safeParams","reject","timer","postMessage","ev","origin","source","pending","code","CrossFrameLMS","api","_api","msg","_process","sendResponse","resp","apply","r"],"mappings":"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"}