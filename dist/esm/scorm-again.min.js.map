{"version":3,"file":"scorm-again.min.js","sources":["../../src/constants/api_constants.ts","../../src/constants/error_codes.ts","../../src/constants/regex.ts","../../src/exceptions.ts","../../src/exceptions/scorm12_exceptions.ts","../../src/cmi/common/base_cmi.ts","../../src/utilities.ts","../../src/cmi/common/validation.ts","../../src/cmi/scorm12/validation.ts","../../src/services/ValidationService.ts","../../src/cmi/common/score.ts","../../src/cmi/aicc/core.ts","../../src/cmi/common/array.ts","../../src/cmi/scorm12/objectives.ts","../../src/cmi/scorm12/student_data.ts","../../src/cmi/scorm12/student_preference.ts","../../src/cmi/scorm12/interactions.ts","../../src/cmi/scorm12/cmi.ts","../../src/cmi/scorm12/nav.ts","../../src/constants/enums.ts","../../src/constants/default_settings.ts","../../src/types/scheduled_commit.ts","../../src/services/HttpService.ts","../../src/services/EventService.ts","../../src/services/SerializationService.ts","../../src/services/LoggingService.ts","../../src/services/ErrorHandlingService.ts","../../src/services/OfflineStorageService.ts","../../src/BaseAPI.ts","../../src/Scorm12API.ts","../../src/exceptions/aicc_exceptions.ts","../../src/cmi/aicc/validation.ts","../../src/cmi/aicc/evaluation.ts","../../src/cmi/aicc/student_preferences.ts","../../src/cmi/aicc/student_demographics.ts","../../src/cmi/aicc/tries.ts","../../src/cmi/aicc/attempts.ts","../../src/cmi/aicc/student_data.ts","../../src/cmi/aicc/paths.ts","../../src/cmi/aicc/cmi.ts","../../src/AICC.ts","../../src/exceptions/scorm2004_exceptions.ts","../../src/cmi/scorm2004/validation.ts","../../src/cmi/scorm2004/learner_preference.ts","../../src/constants/response_constants.ts","../../src/cmi/scorm2004/interactions.ts","../../src/cmi/scorm2004/score.ts","../../src/cmi/scorm2004/comments.ts","../../src/cmi/scorm2004/objectives.ts","../../src/cmi/scorm2004/metadata.ts","../../src/cmi/scorm2004/learner.ts","../../src/cmi/scorm2004/status.ts","../../src/cmi/scorm2004/session.ts","../../src/cmi/scorm2004/content.ts","../../src/cmi/scorm2004/settings.ts","../../src/cmi/scorm2004/thresholds.ts","../../src/cmi/scorm2004/cmi.ts","../../src/cmi/scorm2004/adl.ts","../../src/cmi/scorm2004/sequencing/sequencing_rules.ts","../../src/cmi/scorm2004/sequencing/rollup_rules.ts","../../src/constants/language_constants.ts","../../src/cmi/scorm2004/sequencing/activity.ts","../../src/cmi/scorm2004/sequencing/activity_tree.ts","../../src/cmi/scorm2004/sequencing/sequencing_controls.ts","../../src/cmi/scorm2004/sequencing/sequencing.ts","../../src/Scorm2004API.ts","../../src/CrossFrameAPI.ts","../../src/CrossFrameLMS.ts"],"sourcesContent":["interface ErrorDescription {\n  basicMessage: string;\n  detailMessage: string;\n}\n\ninterface ErrorDescriptions {\n  [key: string]: ErrorDescription;\n}\n\ninterface ScormConstants {\n  cmi_children: string;\n  core_children: string;\n  score_children: string;\n  comments_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface AiccConstants extends ScormConstants {\n  student_demographics_children: string;\n  tries_children: string;\n  attempt_records_children: string;\n  paths_children: string;\n}\n\ninterface Scorm2004Constants {\n  cmi_children: string;\n  comments_children: string;\n  score_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  adl_data_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface GlobalConstants {\n  SCORM_TRUE: string;\n  SCORM_FALSE: string;\n  STATE_NOT_INITIALIZED: number;\n  STATE_INITIALIZED: number;\n  STATE_TERMINATED: number;\n}\n\nexport const global_constants: GlobalConstants = {\n  SCORM_TRUE: \"true\",\n  SCORM_FALSE: \"false\",\n  STATE_NOT_INITIALIZED: 0,\n  STATE_INITIALIZED: 1,\n  STATE_TERMINATED: 2,\n};\n\nexport const scorm12_constants: ScormConstants = {\n  // Children lists\n  cmi_children:\n    \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions\",\n  core_children:\n    \"student_id,student_name,lesson_location,credit,lesson_status,entry,score,total_time,lesson_mode,exit,session_time\",\n  score_children: \"raw,min,max\",\n  comments_children: \"content,location,time\",\n  objectives_children: \"id,score,status\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio,language,speed,text\",\n  interactions_children:\n    \"id,objectives,time,type,correct_responses,weighting,student_response,result,latency\",\n  error_descriptions: {\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage: \"No specific error code exists to describe the error.\",\n    },\n    \"201\": {\n      basicMessage: \"Invalid argument error\",\n      detailMessage:\n        \"Indicates that an argument represents an invalid data model element or is otherwise incorrect.\",\n    },\n    \"202\": {\n      basicMessage: \"Element cannot have children\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_children\" for a data model element that does not support the \"_children\" suffix.',\n    },\n    \"203\": {\n      basicMessage: \"Element not an array - cannot have count\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_count\" for a data model element that does not support the \"_count\" suffix.',\n    },\n    \"301\": {\n      basicMessage: \"Not initialized\",\n      detailMessage: \"Indicates that an API call was made before the call to lmsInitialize.\",\n    },\n    \"401\": {\n      basicMessage: \"Not implemented error\",\n      detailMessage:\n        \"The data model element indicated in a call to LMSGetValue or LMSSetValue is valid, but was not implemented by this LMS. SCORM 1.2 defines a set of data model elements as being optional for an LMS to implement.\",\n    },\n    \"402\": {\n      basicMessage: \"Invalid set value, element is a keyword\",\n      detailMessage:\n        'Indicates that LMSSetValue was called on a data model element that represents a keyword (elements that end in \"_children\" and \"_count\").',\n    },\n    \"403\": {\n      basicMessage: \"Element is read only\",\n      detailMessage: \"LMSSetValue was called with a data model element that can only be read.\",\n    },\n    \"404\": {\n      basicMessage: \"Element is write only\",\n      detailMessage: \"LMSGetValue was called on a data model element that can only be written to.\",\n    },\n    \"405\": {\n      basicMessage: \"Incorrect Data Type\",\n      detailMessage:\n        \"LMSSetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a LMSSetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\nexport const aicc_constants: AiccConstants = {\n  ...scorm12_constants,\n  ...{\n    cmi_children:\n      \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions,evaluation\",\n    student_preference_children:\n      \"audio,language,lesson_type,speed,text,text_color,text_location,text_size,video,windows\",\n    student_data_children: \"attempt_number,tries,mastery_score,max_time_allowed,time_limit_action\",\n    student_demographics_children:\n      \"city,class,company,country,experience,familiar_name,instructor_name,title,native_language,state,street_address,telephone,years_experience\",\n    tries_children: \"time,status,score\",\n    attempt_records_children: \"score,lesson_status\",\n    paths_children: \"location_id,date,time,status,why_left,time_in_element\",\n  },\n};\n\nexport const scorm2004_constants: Scorm2004Constants = {\n  // Children lists\n  cmi_children:\n    \"_version,comments_from_learner,comments_from_lms,completion_status,credit,entry,exit,interactions,launch_data,learner_id,learner_name,learner_preference,location,max_time_allowed,mode,objectives,progress_measure,scaled_passing_score,score,session_time,success_status,suspend_data,time_limit_action,total_time\",\n  comments_children: \"comment,timestamp,location\",\n  score_children: \"max,raw,scaled,min\",\n  objectives_children: \"progress_measure,completion_status,success_status,description,score,id\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio_level,audio_captioning,delivery_speed,language\",\n  interactions_children:\n    \"id,type,objectives,timestamp,correct_responses,weighting,learner_response,result,latency,description\",\n  adl_data_children: \"id,store\",\n  error_descriptions: {\n    \"0\": {\n      basicMessage: \"No Error\",\n      detailMessage: \"No error occurred, the previous API call was successful.\",\n    },\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage: \"No specific error code exists to describe the error.\",\n    },\n    \"102\": {\n      basicMessage: \"General Initialization Failure\",\n      detailMessage: \"Call to Initialize failed for an unknown reason.\",\n    },\n    \"103\": {\n      basicMessage: \"Already Initialized\",\n      detailMessage: \"Call to Initialize failed because Initialize was already called.\",\n    },\n    \"104\": {\n      basicMessage: \"Content Instance Terminated\",\n      detailMessage: \"Call to Initialize failed because Terminate was already called.\",\n    },\n    \"111\": {\n      basicMessage: \"General Termination Failure\",\n      detailMessage: \"Call to Terminate failed for an unknown reason.\",\n    },\n    \"112\": {\n      basicMessage: \"Termination Before Initialization\",\n      detailMessage: \"Call to Terminate failed because it was made before the call to Initialize.\",\n    },\n    \"113\": {\n      basicMessage: \"Termination After Termination\",\n      detailMessage: \"Call to Terminate failed because Terminate was already called.\",\n    },\n    \"122\": {\n      basicMessage: \"Retrieve Data Before Initialization\",\n      detailMessage: \"Call to GetValue failed because it was made before the call to Initialize.\",\n    },\n    \"123\": {\n      basicMessage: \"Retrieve Data After Termination\",\n      detailMessage: \"Call to GetValue failed because it was made after the call to Terminate.\",\n    },\n    \"132\": {\n      basicMessage: \"Store Data Before Initialization\",\n      detailMessage: \"Call to SetValue failed because it was made before the call to Initialize.\",\n    },\n    \"133\": {\n      basicMessage: \"Store Data After Termination\",\n      detailMessage: \"Call to SetValue failed because it was made after the call to Terminate.\",\n    },\n    \"142\": {\n      basicMessage: \"Commit Before Initialization\",\n      detailMessage: \"Call to Commit failed because it was made before the call to Initialize.\",\n    },\n    \"143\": {\n      basicMessage: \"Commit After Termination\",\n      detailMessage: \"Call to Commit failed because it was made after the call to Terminate.\",\n    },\n    \"201\": {\n      basicMessage: \"General Argument Error\",\n      detailMessage:\n        \"An invalid argument was passed to an API method (usually indicates that Initialize, Commit or Terminate did not receive the expected empty string argument.\",\n    },\n    \"301\": {\n      basicMessage: \"General Get Failure\",\n      detailMessage:\n        \"Indicates a failed GetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"351\": {\n      basicMessage: \"General Set Failure\",\n      detailMessage:\n        \"Indicates a failed SetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"391\": {\n      basicMessage: \"General Commit Failure\",\n      detailMessage:\n        \"Indicates a failed Commit call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"401\": {\n      basicMessage: \"Undefined Data Model Element\",\n      detailMessage:\n        \"The data model element name passed to GetValue or SetValue is not a valid SCORM data model element.\",\n    },\n    \"402\": {\n      basicMessage: \"Unimplemented Data Model Element\",\n      detailMessage:\n        \"The data model element indicated in a call to GetValue or SetValue is valid, but was not implemented by this LMS. In SCORM 2004, this error would indicate an LMS that is not fully SCORM conformant.\",\n    },\n    \"403\": {\n      basicMessage: \"Data Model Element Value Not Initialized\",\n      detailMessage:\n        \"Attempt to read a data model element that has not been initialized by the LMS or through a SetValue call. This error condition is often reached during normal execution of a SCO.\",\n    },\n    \"404\": {\n      basicMessage: \"Data Model Element Is Read Only\",\n      detailMessage: \"SetValue was called with a data model element that can only be read.\",\n    },\n    \"405\": {\n      basicMessage: \"Data Model Element Is Write Only\",\n      detailMessage: \"GetValue was called on a data model element that can only be written to.\",\n    },\n    \"406\": {\n      basicMessage: \"Data Model Element Type Mismatch\",\n      detailMessage:\n        \"SetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Data Model Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a SetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\n","export type ErrorCode = {\n  [key: string]: number;\n};\n\nexport const global_errors: ErrorCode = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nexport const scorm12_errors: ErrorCode = {\n  ...global_errors,\n  RETRIEVE_BEFORE_INIT: 301,\n  STORE_BEFORE_INIT: 301,\n  COMMIT_BEFORE_INIT: 301,\n  ARGUMENT_ERROR: 201,\n  CHILDREN_ERROR: 202,\n  COUNT_ERROR: 203,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 401,\n  VALUE_NOT_INITIALIZED: 301,\n  INVALID_SET_VALUE: 402,\n  READ_ONLY_ELEMENT: 403,\n  WRITE_ONLY_ELEMENT: 404,\n  TYPE_MISMATCH: 405,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n\nexport const scorm2004_errors: ErrorCode = {\n  ...global_errors,\n  INITIALIZATION_FAILED: 102,\n  INITIALIZED: 103,\n  TERMINATED: 104,\n  TERMINATION_FAILURE: 111,\n  TERMINATION_BEFORE_INIT: 112,\n  MULTIPLE_TERMINATIONS: 113,\n  RETRIEVE_BEFORE_INIT: 122,\n  RETRIEVE_AFTER_TERM: 123,\n  STORE_BEFORE_INIT: 132,\n  STORE_AFTER_TERM: 133,\n  COMMIT_BEFORE_INIT: 142,\n  COMMIT_AFTER_TERM: 143,\n  ARGUMENT_ERROR: 201,\n  GENERAL_GET_FAILURE: 301,\n  GENERAL_SET_FAILURE: 351,\n  GENERAL_COMMIT_FAILURE: 391,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 402,\n  VALUE_NOT_INITIALIZED: 403,\n  READ_ONLY_ELEMENT: 404,\n  WRITE_ONLY_ELEMENT: 405,\n  TYPE_MISMATCH: 406,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n","export const scorm12_regex = {\n  CMIString256: \"^.{0,255}$\",\n  CMIString4096: \"^.{0,4096}$\",\n  CMITime: \"^(?:[01]\\\\d|2[0123]):(?:[012345]\\\\d):(?:[012345]\\\\d)$\",\n  CMITimespan: \"^([0-9]{2,}):([0-9]{2}):([0-9]{2})(.[0-9]{1,2})?$\",\n\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{0,3})(\\\\.[0-9]*)?$\",\n\n  CMIIdentifier: \"^[\\\\u0021-\\\\u007E\\\\s]{0,255}$\",\n  CMIFeedback: \"^.{0,255}$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMIStatus: \"^(passed|completed|failed|incomplete|browsed)$\",\n  CMIStatus2: \"^(passed|completed|failed|incomplete|browsed|not attempted)$\",\n  CMIExit: \"^(time-out|suspend|logout|)$\",\n  CMIType: \"^(true-false|choice|fill-in|matching|performance|sequencing|likert|numeric)$\",\n  CMIResult: \"^(correct|wrong|unanticipated|neutral|([0-9]{0,3})?(\\\\.[0-9]*)?)$\",\n  NAVEvent: \"^(previous|continue)$\",\n  // Data ranges\n  score_range: \"0#100\",\n  audio_range: \"-1#100\",\n  speed_range: \"-100#100\",\n  weighting_range: \"-100#100\",\n  text_range: \"-1#1\",\n};\nexport const aicc_regex = {\n  ...scorm12_regex,\n  ...{\n    CMIIdentifier: \"^\\\\w{1,255}$\",\n  },\n};\nexport const scorm2004_regex = {\n  CMIString200: \"^[\\\\u0000-\\\\uFFFF]{0,200}$\",\n  CMIString250: \"^[\\\\u0000-\\\\uFFFF]{0,250}$\",\n  CMIString1000: \"^[\\\\u0000-\\\\uFFFF]{0,1000}$\",\n  CMIString4000: \"^[\\\\u0000-\\\\uFFFF]{0,4000}$\",\n  CMIString64000: \"^[\\\\u0000-\\\\uFFFF]{0,64000}$\",\n  CMILang: \"^([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?$|^$\",\n\n  CMILangString250: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,250}$)?$\",\n\n  CMILangcr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?}))(.*?)$\",\n\n  CMILangString250cr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?})?(.{0,250})?)?$\",\n\n  CMILangString4000: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,4000}$)?$\",\n\n  CMITime:\n    \"^(19[7-9]{1}[0-9]{1}|20[0-2]{1}[0-9]{1}|203[0-8]{1})((-(0[1-9]{1}|1[0-2]{1}))((-(0[1-9]{1}|[1-2]{1}[0-9]{1}|3[0-1]{1}))(T([0-1]{1}[0-9]{1}|2[0-3]{1})((:[0-5]{1}[0-9]{1})((:[0-5]{1}[0-9]{1})((\\\\.[0-9]{1,6})((Z|([+|-]([0-1]{1}[0-9]{1}|2[0-3]{1})))(:[0-5]{1}[0-9]{1})?)?)?)?)?)?)?)?$\",\n  CMITimespan:\n    \"^P(?:([.,\\\\d]+)Y)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)W)?(?:([.,\\\\d]+)D)?(?:T?(?:([.,\\\\d]+)H)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)S)?)?$\",\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{1,5})(\\\\.[0-9]{1,18})?$\",\n  CMIIdentifier: \"^\\\\S{1,250}[a-zA-Z0-9]$\",\n  CMIShortIdentifier: \"^[\\\\w\\\\.\\\\-\\\\_]{1,250}$\",\n  CMILongIdentifier: \"^(?:(?!urn:)\\\\S{1,4000}|urn:[A-Za-z0-9-]{1,31}:\\\\S{1,4000}|.{1,4000})$\",\n  // need to re-examine this\n  CMIFeedback: \"^.*$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  CMIIndexStore: \".N(\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMICStatus: \"^(completed|incomplete|not attempted|unknown)$\",\n  CMISStatus: \"^(passed|failed|unknown)$\",\n  CMIExit: \"^(time-out|suspend|logout|normal)$\",\n  CMIType:\n    \"^(true-false|choice|fill-in|long-fill-in|matching|performance|sequencing|likert|numeric|other)$\",\n  CMIResult: \"^(correct|incorrect|unanticipated|neutral|-?([0-9]{1,4})(\\\\.[0-9]{1,18})?)$\",\n  NAVEvent:\n    \"^(previous|continue|exit|exitAll|abandon|abandonAll|suspendAll|_none_|(\\\\{target=(?<choice_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?choice|(\\\\{target=(?<jump_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?jump)$\",\n\n  NAVBoolean: \"^(unknown|true|false)$\",\n  NAVTarget: \"^{target=\\\\S{0,}[a-zA-Z0-9-_]+}$\",\n  // Data ranges\n  scaled_range: \"-1#1\",\n  audio_range: \"0#999.9999999\",\n  speed_range: \"0#999.9999999\",\n  text_range: \"-1#1\",\n  progress_range: \"0#1\",\n};\n","type APIError = {\n  errorCode: number;\n  errorMessage: string;\n  detailedMessage: string;\n};\n\nexport class BaseScormValidationError extends Error {\n  constructor(CMIElement: string, errorCode: number) {\n    super(`${CMIElement} : ${errorCode.toString()}`);\n    this._errorCode = errorCode;\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, BaseScormValidationError.prototype);\n  }\n\n  private readonly _errorCode: number;\n\n  /**\n   * Getter for _errorCode\n   * @return {number}\n   */\n  get errorCode(): number {\n    return this._errorCode;\n  }\n}\n\n/**\n * Base Validation Exception\n */\nexport class ValidationError extends BaseScormValidationError implements APIError {\n  /**\n   * Constructor to take in an error message and code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   * @param {string} errorMessage\n   * @param {string} detailedMessage\n   */\n  constructor(\n    CMIElement: string,\n    errorCode: number,\n    errorMessage: string,\n    detailedMessage?: string,\n  ) {\n    super(CMIElement, errorCode);\n    this.message = `${CMIElement} : ${errorMessage}`;\n    this._errorMessage = errorMessage;\n    if (detailedMessage) {\n      this._detailedMessage = detailedMessage;\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  private readonly _errorMessage: string;\n  private readonly _detailedMessage: string = \"\";\n\n  /**\n   * Getter for _errorMessage\n   * @return {string}\n   */\n  get errorMessage(): string {\n    return this._errorMessage;\n  }\n\n  /**\n   * Getter for _detailedMessage\n   * @return {string}\n   */\n  get detailedMessage(): string {\n    return this._detailedMessage;\n  }\n}\n","import { ValidationError } from \"../exceptions\";\nimport { scorm12_constants } from \"../constants/api_constants\";\n\nconst scorm12_errors = scorm12_constants.error_descriptions;\n\n/**\n * SCORM 1.2 Validation Error\n */\nexport class Scorm12ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm12_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm12_errors[String(errorCode)].basicMessage,\n        scorm12_errors[String(errorCode)].detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm12_errors[\"101\"].basicMessage,\n        scorm12_errors[\"101\"].detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm12ValidationError.prototype);\n  }\n}\n","/**\n * Base class for API cmi objects\n */\nexport abstract class BaseCMI {\n  jsonString = false;\n  protected readonly _cmi_element: string;\n  protected _initialized = false;\n\n  /**\n   * Constructor for BaseCMI\n   * @param {string} cmi_element\n   */\n  constructor(cmi_element: string) {\n    this._cmi_element = cmi_element;\n  }\n\n  /**\n   * Getter for _initialized\n   * @return {boolean}\n   */\n  get initialized(): boolean {\n    return this._initialized;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize(): void {\n    this._initialized = true;\n  }\n\n  abstract reset(): void;\n}\n\n/**\n * Base class for cmi root objects\n */\nexport abstract class BaseRootCMI extends BaseCMI {\n  protected _start_time: number | undefined;\n\n  /**\n   * Start time of the course\n   * @type {number | undefined}\n   * @protected\n   */\n  get start_time(): number | undefined {\n    return this._start_time;\n  }\n\n  /**\n   * Setter for start_time. Can only be called once.\n   */\n  setStartTime(): void {\n    if (this._start_time === undefined) {\n      this._start_time = new Date().getTime();\n    } else {\n      throw new Error(\"Start time has already been set.\");\n    }\n  }\n\n  abstract getCurrentTotalTime(): string;\n}\n","/**\n * Constants for time conversion calculations.\n * These are used throughout the codebase for converting between different time formats.\n */\nexport const SECONDS_PER_SECOND = 1.0;\nexport const SECONDS_PER_MINUTE = 60;\nexport const SECONDS_PER_HOUR = 60 * SECONDS_PER_MINUTE;\nexport const SECONDS_PER_DAY = 24 * SECONDS_PER_HOUR;\n\ntype Designation = {\n  [key: string]: number;\n};\n\n/**\n * A record with string keys and unknown values.\n * This is a more type-safe alternative to using `any`.\n */\nexport type StringKeyMap = Record<string, unknown>;\n\nconst designations: Designation = {\n  D: SECONDS_PER_DAY,\n  H: SECONDS_PER_HOUR,\n  M: SECONDS_PER_MINUTE,\n  S: SECONDS_PER_SECOND,\n};\n\n/**\n * Converts a number of seconds to a formatted time string in HH:MM:SS format.\n * This function handles decimal seconds and ensures proper formatting with leading zeros.\n *\n * @param {number|null} totalSeconds - The total number of seconds to convert. If null or negative, returns \"00:00:00\".\n * @return {string} A formatted time string in HH:MM:SS format, with up to 2 decimal places for seconds if applicable.\n *\n * @example\n * // Returns \"01:30:45\"\n * getSecondsAsHHMMSS(5445);\n *\n * @example\n * // Returns \"00:00:30.5\"\n * getSecondsAsHHMMSS(30.5);\n *\n * @example\n * // Returns \"00:00:00\"\n * getSecondsAsHHMMSS(null);\n */\nexport const getSecondsAsHHMMSS = memoize((totalSeconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!totalSeconds || totalSeconds <= 0) {\n    return \"00:00:00\";\n  }\n\n  const hours = Math.floor(totalSeconds / SECONDS_PER_HOUR);\n  const dateObj = new Date(totalSeconds * 1000);\n  const minutes = dateObj.getUTCMinutes();\n  // make sure we add any possible decimal value\n  const seconds = dateObj.getSeconds();\n  const ms = totalSeconds % 1.0;\n  let msStr = \"\";\n\n  if (countDecimals(ms) > 0) {\n    if (countDecimals(ms) > 2) {\n      msStr = ms.toFixed(2);\n    } else {\n      msStr = String(ms);\n    }\n\n    msStr = \".\" + msStr.split(\".\")[1];\n  }\n\n  return (hours + \":\" + minutes + \":\" + seconds).replace(/\\b\\d\\b/g, \"0$&\") + msStr;\n});\n\n/**\n * Converts a number of seconds to an ISO 8601 duration string (e.g., \"PT1H30M45S\").\n * This function handles the complexity of formatting according to the ISO 8601 standard,\n * including the proper placement of the \"T\" separator for time components.\n *\n * @param {number|null} seconds - The number of seconds to convert. If null or negative, returns \"PT0S\".\n * @return {string} An ISO 8601 formatted duration string.\n *\n * @example\n * // Returns \"PT1H30M45S\" (1 hour, 30 minutes, 45 seconds)\n * getSecondsAsISODuration(5445);\n *\n * @example\n * // Returns \"PT30.5S\" (30.5 seconds)\n * getSecondsAsISODuration(30.5);\n *\n * @example\n * // Returns \"P1DT1H\" (1 day, 1 hour)\n * getSecondsAsISODuration(90000);\n *\n * @example\n * // Returns \"PT0S\" (0 seconds)\n * getSecondsAsISODuration(null);\n */\nexport const getSecondsAsISODuration = memoize((seconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!seconds || seconds <= 0) {\n    return \"PT0S\";\n  }\n\n  let duration = \"P\";\n  let remainder = seconds;\n\n  // Convert to array of entries and use functional methods\n  const designationEntries = Object.entries(designations);\n\n  // Process each time designation\n  designationEntries.forEach(([designationsKey, current_seconds]) => {\n    let value = Math.floor(remainder / current_seconds);\n    remainder = remainder % current_seconds;\n\n    // Limit decimal places\n    if (countDecimals(remainder) > 2) {\n      remainder = Number(Number(remainder).toFixed(2));\n    }\n\n    // If we have anything left in the remainder, and we're currently adding\n    // seconds to the duration, go ahead and add the decimal to the seconds\n    if (designationsKey === \"S\" && remainder > 0) {\n      value += remainder;\n    }\n\n    if (value) {\n      // Add the 'T' separator for time components if needed\n      const needsTimeSeparator =\n        (duration.indexOf(\"D\") > 0 || [\"H\", \"M\", \"S\"].includes(designationsKey)) &&\n        duration.indexOf(\"T\") === -1;\n\n      if (needsTimeSeparator) {\n        duration += \"T\";\n      }\n\n      duration += `${value}${designationsKey}`;\n    }\n  });\n\n  return duration;\n});\n\n/**\n * Converts a time string in HH:MM:SS format to the equivalent number of seconds.\n * This function is flexible and can handle various input types, converting them to strings as needed.\n *\n * @param {string|number|boolean|null} timeString - The time string to convert, typically in HH:MM:SS format.\n *                                                 If not a string, it will be converted to one.\n *                                                 If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} timeRegex - The regular expression used to validate the time string format.\n *                                    If a string is provided, it will be converted to a RegExp.\n * @return {number} The total number of seconds represented by the time string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getTimeAsSeconds(\"01:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getTimeAsSeconds(\"invalid\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 30 (converts number to string \"30\" then parses as 0:0:30)\n * getTimeAsSeconds(30, /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport const getTimeAsSeconds = memoize(\n  (timeString: string | number | boolean | null, timeRegex: RegExp | string): number => {\n    if (typeof timeString === \"number\" || typeof timeString === \"boolean\") {\n      timeString = String(timeString);\n    }\n    if (typeof timeRegex === \"string\") {\n      timeRegex = new RegExp(timeRegex);\n    }\n    if (!timeString || !timeString?.match?.(timeRegex)) {\n      return 0;\n    }\n\n    const parts = timeString.split(\":\");\n    const hours = Number(parts[0]);\n    const minutes = Number(parts[1]);\n    const seconds = Number(parts[2]);\n    return hours * 3600 + minutes * 60 + seconds;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (timeString, timeRegex) => {\n    const timeStr = typeof timeString === \"string\" ? timeString : String(timeString ?? \"\");\n    const regexStr = typeof timeRegex === \"string\" ? timeRegex : (timeRegex?.toString() ?? \"\");\n    return `${timeStr}:${regexStr}`;\n  },\n);\n\n/**\n * Converts an ISO 8601 duration string (e.g., \"PT1H30M45S\") to the equivalent number of seconds.\n * This function parses the duration string using a regular expression to extract years, days,\n * hours, minutes, and seconds components.\n *\n * @param {string|null} duration - The ISO 8601 duration string to convert.\n *                                If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n *                                       The regex should have capture groups for years, days, hours, minutes, and seconds.\n * @return {number} The total number of seconds represented by the duration string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getDurationAsSeconds(\"PT1H30M45S\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 90000 (1 day, 1 hour)\n * getDurationAsSeconds(\"P1DT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getDurationAsSeconds(\"invalid\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport const getDurationAsSeconds = memoize(\n  (duration: string | null, durationRegex: RegExp | string): number => {\n    if (typeof durationRegex === \"string\") {\n      durationRegex = new RegExp(durationRegex);\n    }\n\n    if (!duration || !duration?.match?.(durationRegex)) {\n      return 0;\n    }\n\n    const [, years, _, , days, hours, minutes, seconds] =\n      new RegExp(durationRegex).exec?.(duration) ?? [];\n    let result = 0.0;\n    result += Number(seconds) || 0.0;\n    result += Number(minutes) * 60.0 || 0.0;\n    result += Number(hours) * 3600.0 || 0.0;\n    result += Number(days) * (60 * 60 * 24.0) || 0.0;\n    result += Number(years) * (60 * 60 * 24 * 365.0) || 0.0;\n    return result;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (duration, durationRegex) => {\n    const durationStr = duration ?? \"\";\n    const regexStr =\n      typeof durationRegex === \"string\" ? durationRegex : (durationRegex?.toString() ?? \"\");\n    return `${durationStr}:${regexStr}`;\n  },\n);\n\n/**\n * Adds together two ISO 8601 duration strings and returns the result as a new ISO 8601 duration string.\n * This function works by converting both durations to seconds, adding them together, and then\n * converting the result back to an ISO 8601 duration string.\n *\n * @param {string} first - The first ISO 8601 duration string.\n * @param {string} second - The second ISO 8601 duration string.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n * @return {string} A new ISO 8601 duration string representing the sum of the two input durations.\n *\n * @example\n * // Returns \"PT2H\" (1 hour + 1 hour = 2 hours)\n * addTwoDurations(\"PT1H\", \"PT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"PT1H30M\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addTwoDurations(\"PT1H\", \"PT30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"P1DT1H30M\" (1 day + 1 hour and 30 minutes = 1 day, 1 hour, and 30 minutes)\n * addTwoDurations(\"P1D\", \"PT1H30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport function addTwoDurations(\n  first: string,\n  second: string,\n  durationRegex: RegExp | string,\n): string {\n  const regex: RegExp =\n    typeof durationRegex === \"string\" ? new RegExp(durationRegex) : durationRegex;\n  return getSecondsAsISODuration(\n    getDurationAsSeconds(first, regex) + getDurationAsSeconds(second, regex),\n  );\n}\n\n/**\n * Adds together two time strings in HH:MM:SS format and returns the result as a new time string.\n * This function works by converting both time strings to seconds, adding them together, and then\n * converting the result back to an HH:MM:SS format.\n *\n * @param {string} first - The first time string in HH:MM:SS format.\n * @param {string} second - The second time string in HH:MM:SS format.\n * @param {RegExp|string} timeRegex - The regular expression used to validate and parse the time strings.\n *                                   If a string is provided, it will be converted to a RegExp.\n * @return {string} A new time string in HH:MM:SS format representing the sum of the two input times.\n *\n * @example\n * // Returns \"02:00:00\" (1 hour + 1 hour = 2 hours)\n * addHHMMSSTimeStrings(\"01:00:00\", \"01:00:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:00\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:45\" (1 hour + 30 minutes and 45 seconds = 1 hour, 30 minutes, and 45 seconds)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport function addHHMMSSTimeStrings(\n  first: string,\n  second: string,\n  timeRegex: RegExp | string,\n): string {\n  if (typeof timeRegex === \"string\") {\n    timeRegex = new RegExp(timeRegex);\n  }\n  return getSecondsAsHHMMSS(\n    getTimeAsSeconds(first, timeRegex) + getTimeAsSeconds(second, timeRegex),\n  );\n}\n\n/**\n * Flattens a nested JSON object into a flat object with dot notation for nested properties.\n * This function recursively traverses the object and creates new keys using dot notation\n * for nested objects and bracket notation for arrays.\n *\n * @param {StringKeyMap} data - The nested object to flatten.\n * @return {StringKeyMap} A flattened object where nested properties are represented with dot notation.\n *\n * @example\n * // Returns { \"a\": 1, \"b.c\": 2, \"b.d\": 3, \"e[0]\": 4, \"e[1]\": 5 }\n * flatten({\n *   a: 1,\n *   b: { c: 2, d: 3 },\n *   e: [4, 5]\n * });\n *\n * @example\n * // Returns { \"\": [] } for an empty array\n * flatten([]);\n *\n * @example\n * // Returns { \"\": {} } for an empty object\n * flatten({});\n */\nexport function flatten(data: StringKeyMap): StringKeyMap {\n  const result: StringKeyMap = {};\n\n  /**\n   * Recurse through the object\n   * @param {*} cur\n   * @param {*} prop\n   */\n  function recurse(cur: any, prop: any) {\n    if (Object(cur) !== cur) {\n      result[prop] = cur;\n    } else if (Array.isArray(cur)) {\n      // Use forEach instead of for loop\n      cur.forEach((item, i) => {\n        recurse(item, `${prop}[${i}]`);\n      });\n\n      if (cur.length === 0) result[prop] = [];\n    } else {\n      const keys = Object.keys(cur).filter((p) => Object.prototype.hasOwnProperty.call(cur, p));\n\n      const isEmpty = keys.length === 0;\n\n      // Use forEach instead of for...in loop\n      keys.forEach((p) => {\n        recurse(cur[p], prop ? `${prop}.${p}` : p);\n      });\n\n      if (isEmpty && prop) result[prop] = {};\n    }\n  }\n\n  recurse(data, \"\");\n  return result;\n}\n\n/**\n * Converts a flattened object back into a nested object structure.\n * This function is the inverse of `flatten()`. It parses dot notation and bracket notation\n * in property names to recreate the original nested structure.\n *\n * @param {StringKeyMap} data - The flattened object to unflatten.\n * @return {object} A nested object recreated from the flattened structure.\n *\n * @example\n * // Returns { a: 1, b: { c: 2, d: 3 }, e: [4, 5] }\n * unflatten({\n *   \"a\": 1,\n *   \"b.c\": 2,\n *   \"b.d\": 3,\n *   \"e[0]\": 4,\n *   \"e[1]\": 5\n * });\n *\n * @example\n * // Handles array indices correctly\n * unflatten({\n *   \"users[0].name\": \"John\",\n *   \"users[0].email\": \"john@example.com\",\n *   \"users[1].name\": \"Jane\",\n *   \"users[1].email\": \"jane@example.com\"\n * });\n * // Returns:\n * // {\n * //   users: [\n * //     { name: \"John\", email: \"john@example.com\" },\n * //     { name: \"Jane\", email: \"jane@example.com\" }\n * //   ]\n * // }\n */\nexport function unflatten(data: StringKeyMap): object {\n  \"use strict\";\n\n  if (Object(data) !== data || Array.isArray(data)) return data;\n  const result: StringKeyMap = {};\n\n  // Regex pattern for parsing property paths\n  const pattern = /\\.?([^.[\\]]+)|\\[(\\d+)]/g;\n\n  // Get all own properties and process them\n  Object.keys(data)\n    .filter((p) => Object.prototype.hasOwnProperty.call(data, p))\n    .forEach((p) => {\n      let cur = result;\n      let prop = \"\";\n\n      // Create a new regex instance for each property to reset lastIndex\n      const regex = new RegExp(pattern);\n\n      // Process all matches in the property path\n      Array.from({ length: p.match(new RegExp(pattern, \"g\"))?.length ?? 0 }, () =>\n        regex.exec(p),\n      ).forEach((m) => {\n        if (m) {\n          // Create array or object as needed\n          cur = (cur[prop] ?? (cur[prop] = m[2] ? [] : ({} as StringKeyMap))) as StringKeyMap;\n          prop = m[2] || m[1];\n        }\n      });\n\n      cur[prop] = data[p];\n    });\n\n  return (result[\"\"] ?? result) as object;\n}\n\n/**\n * Counts the number of decimal places in a number.\n * This function handles both integer and floating-point numbers.\n *\n * @param {number} num - The number to analyze.\n * @return {number} The number of decimal places. Returns 0 for integers or if the number doesn't have a decimal point.\n *\n * @example\n * // Returns 0\n * countDecimals(42);\n *\n * @example\n * // Returns 2\n * countDecimals(3.14);\n *\n * @example\n * // Returns 5\n * countDecimals(1.23456);\n */\nexport function countDecimals(num: number): number {\n  if (Math.floor(num) === num || String(num)?.indexOf?.(\".\") < 0) return 0;\n  const parts = num.toString().split(\".\")?.[1];\n  return parts?.length ?? 0;\n}\n\n/**\n * Formats SCORM messages for consistent and readable logging.\n * This function pads the function name and CMI element to create aligned log messages\n * that are easier to read in log files or console output.\n *\n * @param {string} functionName - The name of the function that generated the message.\n * @param {string} message - The message content to be logged.\n * @param {string} [CMIElement] - Optional. The CMI element related to the message.\n * @return {string} A formatted message string with consistent padding.\n *\n * @example\n * // Returns \"initialize          : Successfully initialized\"\n * formatMessage(\"initialize\", \"Successfully initialized\");\n *\n * @example\n * // Returns \"getValue            : cmi.core.student_id                                             : 12345\"\n * formatMessage(\"getValue\", \"12345\", \"cmi.core.student_id\");\n *\n * @example\n * // Returns \"setValue            : cmi.core.lesson_status                                          : completed\"\n * formatMessage(\"setValue\", \"completed\", \"cmi.core.lesson_status\");\n */\nexport function formatMessage(functionName: string, message: string, CMIElement?: string): string {\n  const baseLength = 20;\n\n  // Use string padding instead of loops\n  const paddedFunction = functionName.padEnd(baseLength);\n  let messageString = `${paddedFunction}: `;\n\n  if (CMIElement) {\n    const CMIElementBaseLength = 70;\n    // Add CMIElement and pad to the required length\n    messageString += CMIElement;\n    messageString = messageString.padEnd(CMIElementBaseLength);\n  }\n\n  // Add the message (or empty string if null/undefined)\n  messageString += message ?? \"\";\n\n  return messageString;\n}\n\n/**\n * Checks if a string contains a specific pattern using regular expression matching.\n * This function is a wrapper around JavaScript's String.match() method that handles\n * null/undefined values gracefully.\n *\n * @param {string} str - The string to search within. If null or undefined, returns false.\n * @param {string} tester - The pattern to search for. Can be a regular expression pattern.\n * @return {boolean} True if the pattern is found in the string, false otherwise.\n *\n * @example\n * // Returns true\n * stringMatches(\"Hello, world!\", \"world\");\n *\n * @example\n * // Returns true\n * stringMatches(\"The quick brown fox\", \"\\\\w+\\\\s+\\\\w+\");\n *\n * @example\n * // Returns false\n * stringMatches(\"Hello, world!\", \"universe\");\n *\n * @example\n * // Returns false (handles null gracefully)\n * stringMatches(null, \"test\");\n */\nexport function stringMatches(str: string | null | undefined, tester: string): boolean {\n  if (typeof str !== \"string\") {\n    return false;\n  }\n  return new RegExp(tester).test(str);\n}\n\n/**\n * Creates a memoized (cached) version of a function for performance optimization.\n * This function caches the results of previous calls with the same arguments,\n * avoiding redundant calculations for repeated calls with the same input.\n *\n * @template T - The type of the function to memoize\n * @param {T} fn - The function to memoize\n * @param {Function} [keyFn] - Optional function to generate a custom cache key.\n *                           Useful for functions with complex arguments that can't be serialized.\n * @return {T} A memoized version of the input function with the same signature\n *\n * @example\n * // Basic usage with a simple function\n * const memoizedAdd = memoize((a, b) => {\n *   console.log('Calculating...');\n *   return a + b;\n * });\n *\n * memoizedAdd(1, 2); // Logs \"Calculating...\" and returns 3\n * memoizedAdd(1, 2); // Returns 3 without logging (uses cached result)\n *\n * @example\n * // Using a custom key function for objects that can't be serialized\n * const memoizedProcessUser = memoize(\n *   (user) => {\n *     console.log('Processing user...');\n *     return { ...user, processed: true };\n *   },\n *   (user) => user.id // Use user.id as the cache key\n * );\n *\n * memoizedProcessUser({ id: 123, name: 'John' }); // Logs and processes\n * memoizedProcessUser({ id: 123, name: 'John' }); // Uses cached result\n */\nexport function memoize<T extends (...args: any[]) => any>(\n  fn: T,\n  keyFn?: (...args: Parameters<T>) => string,\n): T {\n  const cache = new Map<string, ReturnType<T>>();\n\n  return ((...args: Parameters<T>): ReturnType<T> => {\n    const key = keyFn ? keyFn(...args) : JSON.stringify(args);\n\n    return cache.has(key)\n      ? (cache.get(key) as ReturnType<T>)\n      : (() => {\n          const result = fn(...args);\n          cache.set(key, result);\n          return result;\n        })();\n  }) as T;\n}\n","import { BaseScormValidationError } from \"../../exceptions\";\nimport { memoize } from \"../../utilities\";\n\n/**\n * Check if the value matches the proper format. If not, throw proper error code.\n *\n * @param {string} value\n * @param {string} regexPattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @param {boolean} [allowEmptyString]\n * @return {boolean}\n */\nexport const checkValidFormat = memoize(\n  (\n    CMIElement: string,\n    value: string,\n    regexPattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n    allowEmptyString?: boolean,\n  ): boolean => {\n    // noinspection SuspiciousTypeOfGuard\n    if (typeof value !== \"string\") {\n      return false;\n    }\n    const formatRegex = new RegExp(regexPattern);\n    const matches = value.match(formatRegex);\n    if (allowEmptyString && value === \"\") {\n      return true;\n    }\n    if (value === undefined || !matches || matches[0] === \"\") {\n      throw new errorClass(CMIElement, errorCode);\n    }\n    return true;\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, regexPattern, errorCode, _errorClass, allowEmptyString) => {\n    // Use typeof for non-string values to ensure consistent cache keys\n    // noinspection SuspiciousTypeOfGuard\n    const valueKey = typeof value === \"string\" ? value : `[${typeof value}]`;\n    return `${CMIElement}:${valueKey}:${regexPattern}:${errorCode}:${allowEmptyString || false}`;\n  },\n);\n\n/**\n * Check if the value matches the proper range. If not, throw proper error code.\n *\n * @param {any} value\n * @param {string} rangePattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @return {boolean}\n */\nexport const checkValidRange = memoize(\n  (\n    CMIElement: string,\n    value: any,\n    rangePattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean => {\n    const ranges = rangePattern.split(\"#\");\n    value = value * 1.0;\n    if (value >= ranges[0]) {\n      if (ranges[1] === \"*\" || value <= ranges[1]) {\n        return true;\n      } else {\n        throw new errorClass(CMIElement, errorCode);\n      }\n    } else {\n      throw new errorClass(CMIElement, errorCode);\n    }\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, rangePattern, errorCode, _errorClass) =>\n    `${CMIElement}:${value}:${rangePattern}:${errorCode}`,\n);\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm12_errors.TYPE_MISMATCH,\n    Scorm12ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidRange(\n  CMIElement: string,\n  value: any,\n  rangePattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  if (!allowEmptyString && value === \"\") {\n    throw new Scorm12ValidationError(CMIElement, scorm12_errors.VALUE_OUT_OF_RANGE);\n  }\n\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm12_errors.VALUE_OUT_OF_RANGE,\n    Scorm12ValidationError,\n  );\n}\n","import { BaseScormValidationError } from \"../exceptions\";\nimport { checkValidFormat, checkValidRange } from \"../cmi/common/validation\";\nimport { check12ValidFormat, check12ValidRange } from \"../cmi/scorm12/validation\";\nimport { scorm12_regex } from \"../constants/regex\";\nimport { scorm12_errors } from \"../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../exceptions/scorm12_exceptions\";\n\n/**\n * Service for validating CMI data model properties\n */\nexport class ValidationService {\n  /**\n   * Validates a score property (raw, min, max)\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @param {string} decimalRegex - The regex pattern for decimal validation\n   * @param {string | false} scoreRange - The range pattern for score validation, or false if no range validation is needed\n   * @param {number} invalidTypeCode - The error code for invalid type\n   * @param {number} invalidRangeCode - The error code for invalid range\n   * @param {typeof BaseScormValidationError} errorClass - The error class to use for validation errors\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScore(\n    CMIElement: string,\n    value: string,\n    decimalRegex: string,\n    scoreRange: string | false,\n    invalidTypeCode: number,\n    invalidRangeCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean {\n    return (\n      checkValidFormat(CMIElement, value, decimalRegex, invalidTypeCode, errorClass) &&\n      (!scoreRange || checkValidRange(CMIElement, value, scoreRange, invalidRangeCode, errorClass))\n    );\n    // This line should never be reached due to exceptions being thrown\n  }\n\n  /**\n   * Validates a SCORM 1.2 audio property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Audio(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.audio_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 language property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Language(CMIElement: string, value: string): boolean {\n    return check12ValidFormat(CMIElement, value, scorm12_regex.CMIString256);\n  }\n\n  /**\n   * Validates a SCORM 1.2 speed property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Speed(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.speed_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 text property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Text(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.text_range)\n    );\n  }\n\n  /**\n   * Validates if a property is read-only\n   *\n   * @param {string} CMIElement\n   * @param {boolean} initialized - Whether the object is initialized\n   * @throws {BaseScormValidationError} - Throws an error if the object is initialized\n   */\n  validateReadOnly(CMIElement: string, initialized: boolean): void {\n    if (initialized) {\n      throw new Scorm12ValidationError(CMIElement, scorm12_errors.READ_ONLY_ELEMENT);\n    }\n  }\n}\n\n// Export a singleton instance of the ValidationService\nexport const validationService = new ValidationService();\n","import { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"./base_cmi\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { validationService } from \"../../services/ValidationService\";\nimport { ScoreObject } from \"../../types/api_types\";\n\n/**\n * Base class for cmi *.score objects\n */\nexport class CMIScore extends BaseCMI {\n  private readonly __children: string;\n  private readonly __score_range: string | false;\n  private readonly __invalid_error_code: number;\n  private readonly __invalid_type_code: number;\n  private readonly __invalid_range_code: number;\n  private readonly __decimal_regex: string;\n  private readonly __error_class: typeof BaseScormValidationError;\n  protected _raw = \"\";\n  protected _min = \"\";\n  protected _max: string;\n\n  /**\n   * Constructor for *.score\n   * @param {\n   *     score_children: string,\n   *     score_range: string,\n   *     max: string,\n   *     invalidErrorCode: number,\n   *     invalidTypeCode: number,\n   *     invalidRangeCode: number,\n   *     decimalRegex: string,\n   *     errorClass: typeof BaseScormValidationError\n   * } params\n   */\n  constructor(params: {\n    CMIElement: string;\n    score_children?: string;\n    score_range?: string;\n    max?: string;\n    invalidErrorCode?: number;\n    invalidTypeCode?: number;\n    invalidRangeCode?: number;\n    decimalRegex?: string;\n    errorClass: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n\n    this.__children = params.score_children || scorm12_constants.score_children;\n    this.__score_range = !params.score_range ? false : scorm12_regex.score_range;\n    this._max = params.max || params.max === \"\" ? params.max : \"100\";\n    this.__invalid_error_code = params.invalidErrorCode || scorm12_errors.INVALID_SET_VALUE;\n    this.__invalid_type_code = params.invalidTypeCode || scorm12_errors.TYPE_MISMATCH;\n    this.__invalid_range_code = params.invalidRangeCode || scorm12_errors.VALUE_OUT_OF_RANGE;\n    this.__decimal_regex = params.decimalRegex || scorm12_regex.CMIDecimal;\n    this.__error_class = params.errorClass;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this.__error_class(this._cmi_element + \"._children\", this.__invalid_error_code);\n  }\n\n  /**\n   * Getter for _raw\n   * @return {string}\n   */\n  get raw(): string {\n    return this._raw;\n  }\n\n  /**\n   * Setter for _raw\n   * @param {string} raw\n   */\n  set raw(raw: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".raw\",\n        raw,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._raw = raw;\n    }\n  }\n\n  /**\n   * Getter for _min\n   * @return {string}\n   */\n  get min(): string {\n    return this._min;\n  }\n\n  /**\n   * Setter for _min\n   * @param {string} min\n   */\n  set min(min: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".min\",\n        min,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._min = min;\n    }\n  }\n\n  /**\n   * Getter for _max\n   * @return {string}\n   */\n  get max(): string {\n    return this._max;\n  }\n\n  /**\n   * Setter for _max\n   * @param {string} max\n   */\n  set max(max: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".max\",\n        max,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._max = max;\n    }\n  }\n\n  /**\n   * Getter for _score_range\n   * @return {string | false}\n   */\n  public getScoreObject(): ScoreObject {\n    const scoreObject: ScoreObject = {};\n    if (!Number.isNaN(Number.parseFloat(this.raw))) {\n      scoreObject.raw = Number.parseFloat(this.raw);\n    }\n    if (!Number.isNaN(Number.parseFloat(this.min))) {\n      scoreObject.min = Number.parseFloat(this.min);\n    }\n    if (!Number.isNaN(Number.parseFloat(this.max))) {\n      scoreObject.max = Number.parseFloat(this.max);\n    }\n    return scoreObject;\n  }\n\n  /**\n   * toJSON for *.score\n   * @return {\n   *    {\n   *      min: string,\n   *      max: string,\n   *      raw: string\n   *    }\n   *    }\n   */\n  toJSON(): {\n    min: string;\n    max: string;\n    raw: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { check12ValidFormat } from \"../scorm12/validation\";\nimport * as Util from \"../../utilities\";\n\n/**\n * Class representing the `cmi.core` object\n * @extends BaseCMI\n */\nexport class CMICore extends BaseCMI {\n  /**\n   * Constructor for `cmi.core`\n   */\n  constructor() {\n    super(\"cmi.core\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.core.score\",\n      score_children: scorm12_constants.score_children,\n      score_range: scorm12_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n\n  public readonly score: CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  private __children = scorm12_constants.core_children;\n  private _student_id = \"\";\n  private _student_name = \"\";\n  private _lesson_location = \"\";\n  private _credit = \"\";\n  private _lesson_status = \"not attempted\";\n  private _entry = \"\";\n  private _total_time = \"\";\n  private _lesson_mode = \"normal\";\n  private _exit = \"\";\n  private _session_time = \"00:00:00\";\n  private _suspend_data = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._exit = \"\";\n    this._entry = \"\";\n\n    /**\n     * Resetting ensures we accurately track the time spent on each individual SCO session independently. Each new\n     * session should start from zero, so we can reset cmi.core.session_time at the beginning of each session.\n     */\n    this._session_time = \"00:00:00\";\n\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for _student_id\n   * @return {string}\n   */\n  get student_id(): string {\n    return this._student_id;\n  }\n\n  /**\n   * Setter for _student_id. Can only be called before  initialization.\n   * @param {string} student_id\n   */\n  set student_id(student_id: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".student_id\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._student_id = student_id;\n    }\n  }\n\n  /**\n   * Getter for _student_name\n   * @return {string}\n   */\n  get student_name(): string {\n    return this._student_name;\n  }\n\n  /**\n   * Setter for _student_name. Can only be called before  initialization.\n   * @param {string} student_name\n   */\n  set student_name(student_name: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".student_name\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._student_name = student_name;\n    }\n  }\n\n  /**\n   * Getter for _lesson_location\n   * @return {string}\n   */\n  get lesson_location(): string {\n    return this._lesson_location;\n  }\n\n  /**\n   * Setter for _lesson_location\n   * @param {string} lesson_location\n   */\n  set lesson_location(lesson_location: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".lesson_location\",\n        lesson_location,\n        scorm12_regex.CMIString256,\n        true,\n      )\n    ) {\n      this._lesson_location = lesson_location;\n    }\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this._credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before  initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".credit\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._credit = credit;\n    }\n  }\n\n  /**\n   * Getter for _lesson_status\n   * @return {string}\n   */\n  get lesson_status(): string {\n    return this._lesson_status;\n  }\n\n  /**\n   * Setter for _lesson_status\n   * @param {string} lesson_status\n   */\n  set lesson_status(lesson_status: string) {\n    if (this.initialized) {\n      if (\n        check12ValidFormat(\n          this._cmi_element + \".lesson_status\",\n          lesson_status,\n          scorm12_regex.CMIStatus,\n        )\n      ) {\n        this._lesson_status = lesson_status;\n      }\n    } else {\n      if (\n        check12ValidFormat(\n          this._cmi_element + \".lesson_status\",\n          lesson_status,\n          scorm12_regex.CMIStatus2,\n        )\n      ) {\n        this._lesson_status = lesson_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this._entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before  initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".entry\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._entry = entry;\n    }\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this._total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before  initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".total_time\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._total_time = total_time;\n    }\n  }\n\n  /**\n   * Getter for _lesson_mode\n   * @return {string}\n   */\n  get lesson_mode(): string {\n    return this._lesson_mode;\n  }\n\n  /**\n   * Setter for _lesson_mode. Can only be called before  initialization.\n   * @param {string} lesson_mode\n   */\n  set lesson_mode(lesson_mode: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".lesson_mode\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._lesson_mode = lesson_mode;\n    }\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".exit\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    if (check12ValidFormat(this._cmi_element + \".exit\", exit, scorm12_regex.CMIExit, true)) {\n      this._exit = exit;\n    }\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".session_time\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".session_time\",\n        session_time,\n        scorm12_regex.CMITimespan,\n      )\n    ) {\n      this._session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this._suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".suspend_data\",\n        suspend_data,\n        scorm12_regex.CMIString4096,\n        true,\n      )\n    ) {\n      this._suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   * @param {number} start_time\n   * @return {string}\n   */\n  getCurrentTotalTime(start_time: number | undefined): string {\n    let sessionTime = this._session_time;\n    if (typeof start_time !== \"undefined\" && start_time !== null) {\n      const seconds = new Date().getTime() - start_time;\n      sessionTime = Util.getSecondsAsHHMMSS(seconds / 1000);\n    }\n\n    return Util.addHHMMSSTimeStrings(\n      this._total_time,\n      sessionTime,\n      new RegExp(scorm12_regex.CMITimespan),\n    );\n  }\n\n  /**\n   * toJSON for cmi.core\n   *\n   * @return {\n   *    {\n   *      student_name: string,\n   *      entry: string,\n   *      exit: string,\n   *      score: CMIScore,\n   *      student_id: string,\n   *      lesson_mode: string,\n   *      lesson_location: string,\n   *      lesson_status: string,\n   *      credit: string,\n   *      session_time: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    student_name: string;\n    entry: string;\n    exit: string;\n    score: CMIScore;\n    student_id: string;\n    lesson_mode: string;\n    lesson_location: string;\n    lesson_status: string;\n    credit: string;\n    session_time: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      student_id: this.student_id,\n      student_name: this.student_name,\n      lesson_location: this.lesson_location,\n      credit: this.credit,\n      lesson_status: this.lesson_status,\n      entry: this.entry,\n      lesson_mode: this.lesson_mode,\n      exit: this.exit,\n      session_time: this.session_time,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"./base_cmi\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Base class for cmi *.n objects\n */\nexport class CMIArray extends BaseCMI {\n  private readonly _errorCode: number;\n  private readonly _errorClass: typeof BaseScormValidationError;\n  private readonly __children: string;\n  public childArray: any[];\n\n  /**\n   * Constructor cmi *.n arrays\n   * @param {object} params\n   */\n  constructor(params: {\n    CMIElement: string;\n    children: string;\n    errorCode?: number;\n    errorClass?: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n    this.__children = params.children;\n    this._errorCode = params.errorCode || scorm12_errors.GENERAL;\n    this._errorClass = params.errorClass || BaseScormValidationError;\n    this.childArray = [];\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(wipe: boolean = false): void {\n    this._initialized = false;\n    if (wipe) {\n      this.childArray = [];\n    } else {\n      // Reset all children\n      for (let i = 0; i < this.childArray.length; i++) {\n        this.childArray[i].reset();\n      }\n    }\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this._errorClass(this._cmi_element + \"._children\", this._errorCode);\n  }\n\n  /**\n   * Getter for _count\n   * @return {number}\n   */\n  get _count(): number {\n    return this.childArray.length;\n  }\n\n  /**\n   * Setter for _count. Just throws an error.\n   * @param {number} _count\n   */\n  set _count(_count: number) {\n    throw new this._errorClass(this._cmi_element + \"._count\", this._errorCode);\n  }\n\n  /**\n   * toJSON for *.n arrays\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result: { [key: string]: any } = {};\n    for (let i = 0; i < this.childArray.length; i++) {\n      result[i + \"\"] = this.childArray[i];\n    }\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { check12ValidFormat } from \"./validation\";\nimport { CMIArray } from \"../common/array\";\n\n/**\n * Class representing SCORM 1.2's `cmi.objectives` object\n * @extends CMIArray\n */\nexport class CMIObjectives extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives`\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.objectives\",\n      children: scorm12_constants.objectives_children,\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super(\"cmi.objectives.n\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.objectives.n.score\",\n      score_children: scorm12_constants.score_children,\n      score_range: scorm12_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n\n  public readonly score: CMIScore;\n\n  private _id = \"\";\n  private _status = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._id = \"\";\n    this._status = \"\";\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check12ValidFormat(this._cmi_element + \".id\", id, scorm12_regex.CMIIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _status\n   * @return {string}\n   */\n  get status(): string {\n    return this._status;\n  }\n\n  /**\n   * Setter for _status\n   * @param {string} status\n   */\n  set status(status: string) {\n    if (check12ValidFormat(this._cmi_element + \".status\", status, scorm12_regex.CMIStatus2)) {\n      this._status = status;\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   * @return {\n   *    {\n   *      id: string,\n   *      status: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    status: string;\n    score: CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      status: this.status,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { validationService } from \"../../services/ValidationService\";\n\n/**\n * Class representing the SCORM 1.2 cmi.student_data object\n * @extends BaseCMI\n */\nexport class CMIStudentData extends BaseCMI {\n  private readonly __children;\n  private _mastery_score = \"\";\n  private _max_time_allowed = \"\";\n  private _time_limit_action = \"\";\n\n  /**\n   * Constructor for cmi.student_data\n   * @param {string} student_data_children\n   */\n  constructor(student_data_children?: string) {\n    super(\"cmi.student_data\");\n    this.__children = student_data_children\n      ? student_data_children\n      : scorm12_constants.student_data_children;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for _master_score\n   * @return {string}\n   */\n  get mastery_score(): string {\n    return this._mastery_score;\n  }\n\n  /**\n   * Setter for _master_score. Can only be called before  initialization.\n   * @param {string} mastery_score\n   */\n  set mastery_score(mastery_score: string) {\n    validationService.validateReadOnly(this._cmi_element + \".mastery_score\", this.initialized);\n    this._mastery_score = mastery_score;\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this._max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before  initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    validationService.validateReadOnly(this._cmi_element + \".max_time_allowed\", this.initialized);\n    this._max_time_allowed = max_time_allowed;\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this._time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before  initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    validationService.validateReadOnly(this._cmi_element + \".time_limit_action\", this.initialized);\n    this._time_limit_action = time_limit_action;\n  }\n\n  /**\n   * toJSON for cmi.student_data\n   *\n   * @return {\n   *    {\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      mastery_score: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    mastery_score: string;\n    max_time_allowed: string;\n    time_limit_action: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      mastery_score: this.mastery_score,\n      max_time_allowed: this.max_time_allowed,\n      time_limit_action: this.time_limit_action,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { validationService } from \"../../services/ValidationService\";\n\n/**\n * Class representing the SCORM 1.2 cmi.student_preference object\n * @extends BaseCMI\n */\nexport class CMIStudentPreference extends BaseCMI {\n  private readonly __children;\n\n  /**\n   * Constructor for cmi.student_preference\n   * @param {string} student_preference_children\n   */\n  constructor(student_preference_children?: string) {\n    super(\"cmi.student_preference\");\n    this.__children = student_preference_children\n      ? student_preference_children\n      : scorm12_constants.student_preference_children;\n  }\n\n  private _audio = \"\";\n  private _language = \"\";\n  private _speed = \"\";\n  private _text = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for _audio\n   * @return {string}\n   */\n  get audio(): string {\n    return this._audio;\n  }\n\n  /**\n   * Setter for _audio\n   * @param {string} audio\n   */\n  set audio(audio: string) {\n    if (validationService.validateScorm12Audio(this._cmi_element + \".audio\", audio)) {\n      this._audio = audio;\n    }\n  }\n\n  /**\n   * Getter for _language\n   * @return {string}\n   */\n  get language(): string {\n    return this._language;\n  }\n\n  /**\n   * Setter for _language\n   * @param {string} language\n   */\n  set language(language: string) {\n    if (validationService.validateScorm12Language(this._cmi_element + \".language\", language)) {\n      this._language = language;\n    }\n  }\n\n  /**\n   * Getter for _speed\n   * @return {string}\n   */\n  get speed(): string {\n    return this._speed;\n  }\n\n  /**\n   * Setter for _speed\n   * @param {string} speed\n   */\n  set speed(speed: string) {\n    if (validationService.validateScorm12Speed(this._cmi_element + \".speed\", speed)) {\n      this._speed = speed;\n    }\n  }\n\n  /**\n   * Getter for _text\n   * @return {string}\n   */\n  get text(): string {\n    return this._text;\n  }\n\n  /**\n   * Setter for _text\n   * @param {string} text\n   */\n  set text(text: string) {\n    if (validationService.validateScorm12Text(this._cmi_element + \".text\", text)) {\n      this._text = text;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_preference\n   *\n   * @return {\n   *    {\n   *      audio: string,\n   *      language: string,\n   *      speed: string,\n   *      text: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    audio: string;\n    language: string;\n    speed: string;\n    text: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio: this.audio,\n      language: this.language,\n      speed: this.speed,\n      text: this.text,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check12ValidFormat, check12ValidRange } from \"./validation\";\nimport { scorm12_regex } from \"../../constants/regex\";\n\n/**\n * Class representing the SCORM 1.2 `cmi.interactions`\n * @extends CMIArray\n */\nexport class CMIInteractions extends CMIArray {\n  /**\n   * Constructor for `cmi.interactions`\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.interactions\",\n      children: scorm12_constants.interactions_children,\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n object\n   */\n  constructor() {\n    super(\"cmi.interactions.n\");\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: Scorm12ValidationError,\n      children: scorm12_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.correct_responses\",\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: Scorm12ValidationError,\n      children: scorm12_constants.correct_responses_children,\n    });\n  }\n\n  public readonly objectives: CMIArray;\n  public readonly correct_responses: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  private _id = \"\";\n  private _time = \"\";\n  private _type = \"\";\n  private _weighting = \"\";\n  private _student_response = \"\";\n  private _result = \"\";\n  private _latency = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n\n    this._id = \"\";\n    this._time = \"\";\n    this._type = \"\";\n    this._weighting = \"\";\n    this._student_response = \"\";\n    this._result = \"\";\n    this._latency = \"\";\n\n    this.objectives?.reset();\n    this.correct_responses?.reset();\n  }\n\n  /**\n   * Getter for _id. Should only be called during JSON export.\n   * @return {string}\n   */\n  get id(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".id\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check12ValidFormat(this._cmi_element + \".id\", id, scorm12_regex.CMIIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get time(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".time\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._time;\n  }\n\n  /**\n   * Setter for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (check12ValidFormat(this._cmi_element + \".time\", time, scorm12_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * Getter for _type. Should only be called during JSON export.\n   * @return {string}\n   */\n  get type(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".type\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._type;\n  }\n\n  /**\n   * Setter for _type\n   * @param {string} type\n   */\n  set type(type: string) {\n    if (check12ValidFormat(this._cmi_element + \".type\", type, scorm12_regex.CMIType)) {\n      this._type = type;\n    }\n  }\n\n  /**\n   * Getter for _weighting. Should only be called during JSON export.\n   * @return {string}\n   */\n  get weighting(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".weighting\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._weighting;\n  }\n\n  /**\n   * Setter for _weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting: string) {\n    if (\n      check12ValidFormat(this._cmi_element + \".weighting\", weighting, scorm12_regex.CMIDecimal) &&\n      check12ValidRange(this._cmi_element + \".weighting\", weighting, scorm12_regex.weighting_range)\n    ) {\n      this._weighting = weighting;\n    }\n  }\n\n  /**\n   * Getter for _student_response. Should only be called during JSON export.\n   * @return {string}\n   */\n  get student_response(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".student_response\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._student_response;\n  }\n\n  /**\n   * Setter for _student_response\n   * @param {string} student_response\n   */\n  set student_response(student_response: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".student_response\",\n        student_response,\n        scorm12_regex.CMIFeedback,\n        true,\n      )\n    ) {\n      this._student_response = student_response;\n    }\n  }\n\n  /**\n   * Getter for _result. Should only be called during JSON export.\n   * @return {string}\n   */\n  get result(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".result\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._result;\n  }\n\n  /**\n   * Setter for _result\n   * @param {string} result\n   */\n  set result(result: string) {\n    if (check12ValidFormat(this._cmi_element + \".result\", result, scorm12_regex.CMIResult)) {\n      this._result = result;\n    }\n  }\n\n  /**\n   * Getter for _latency. Should only be called during JSON export.\n   * @return {string}\n   */\n  get latency(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".latency\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._latency;\n  }\n\n  /**\n   * Setter for _latency\n   * @param {string} latency\n   */\n  set latency(latency: string) {\n    if (check12ValidFormat(this._cmi_element + \".latency\", latency, scorm12_regex.CMITimespan)) {\n      this._latency = latency;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      time: string,\n   *      type: string,\n   *      weighting: string,\n   *      student_response: string,\n   *      result: string,\n   *      latency: string,\n   *      objectives: CMIArray,\n   *      correct_responses: CMIArray\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    time: string;\n    type: string;\n    weighting: string;\n    student_response: string;\n    result: string;\n    latency: string;\n    objectives: CMIArray;\n    correct_responses: CMIArray;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      time: this.time,\n      type: this.type,\n      weighting: this.weighting,\n      student_response: this.student_response,\n      result: this.result,\n      latency: this.latency,\n      objectives: this.objectives,\n      correct_responses: this.correct_responses,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n.objectives.n\");\n  }\n\n  private _id = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._id = \"\";\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check12ValidFormat(this._cmi_element + \".id\", id, scorm12_regex.CMIIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.correct_responses.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.correct_responses.n\n   */\n  constructor() {\n    super(\"cmi.interactions.correct_responses.n\");\n  }\n\n  private _pattern = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._pattern = \"\";\n  }\n\n  /**\n   * Getter for _pattern\n   * @return {string}\n   */\n  get pattern(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".pattern\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._pattern;\n  }\n\n  /**\n   * Setter for _pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern: string) {\n    if (\n      check12ValidFormat(this._cmi_element + \".pattern\", pattern, scorm12_regex.CMIFeedback, true)\n    ) {\n      this._pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.correct_responses.n\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    pattern: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      pattern: this._pattern,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { BaseRootCMI } from \"../common/base_cmi\";\nimport { check12ValidFormat } from \"./validation\";\nimport { CMICore } from \"../aicc/core\";\nimport { CMIObjectives } from \"./objectives\";\nimport { CMIStudentData } from \"./student_data\";\nimport { CMIStudentPreference } from \"./student_preference\";\nimport { CMIInteractions } from \"./interactions\";\n\n/**\n * Class representing the cmi object for SCORM 1.2\n */\nexport class CMI extends BaseRootCMI {\n  private readonly __children: string = \"\";\n  private __version: string = \"3.4\";\n  private _launch_data: string = \"\";\n  private _comments: string = \"\";\n  private _comments_from_lms: string = \"\";\n\n  /**\n   * Constructor for the SCORM 1.2 cmi object\n   * @param {string} cmi_children\n   * @param {(CMIStudentData|AICCCMIStudentData)} student_data\n   * @param {boolean} initialized\n   */\n  constructor(cmi_children?: string, student_data?: CMIStudentData, initialized?: boolean) {\n    super(\"cmi\");\n    if (initialized) this.initialize();\n    this.__children = cmi_children ? cmi_children : scorm12_constants.cmi_children;\n    this.core = new CMICore();\n    this.objectives = new CMIObjectives();\n    this.student_data = student_data ? student_data : new CMIStudentData();\n    this.student_preference = new CMIStudentPreference();\n    this.interactions = new CMIInteractions();\n  }\n\n  public core: CMICore;\n  public objectives: CMIObjectives;\n  public student_data: CMIStudentData;\n  public student_preference: CMIStudentPreference;\n  public interactions: CMIInteractions;\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._launch_data = \"\";\n    this._comments = \"\";\n    this.core?.reset();\n    this.objectives = new CMIObjectives();\n    this.interactions = new CMIInteractions();\n    this.student_data?.reset();\n    this.student_preference?.reset();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.core?.initialize();\n    this.objectives?.initialize();\n    this.student_data?.initialize();\n    this.student_preference?.initialize();\n    this.interactions?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions\n   *    }\n   *  }\n   */\n  toJSON(): {\n    suspend_data: string;\n    launch_data: string;\n    comments: string;\n    comments_from_lms: string;\n    core: CMICore;\n    objectives: CMIObjectives;\n    student_data: CMIStudentData;\n    student_preference: CMIStudentPreference;\n    interactions: CMIInteractions;\n  } {\n    this.jsonString = true;\n    const result = {\n      suspend_data: this.suspend_data,\n      launch_data: this.launch_data,\n      comments: this.comments,\n      comments_from_lms: this.comments_from_lms,\n      core: this.core,\n      objectives: this.objectives,\n      student_data: this.student_data,\n      student_preference: this.student_preference,\n      interactions: this.interactions,\n    };\n    this.jsonString = false;\n    return result;\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   */\n  get _version(): string {\n    return this.__version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._version\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this.core?.suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (this.core) {\n      this.core.suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this._launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before  initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".launch_data\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._launch_data = launch_data;\n    }\n  }\n\n  /**\n   * Getter for _comments\n   * @return {string}\n   */\n  get comments(): string {\n    return this._comments;\n  }\n\n  /**\n   * Setter for _comments\n   * @param {string} comments\n   */\n  set comments(comments: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".comments\",\n        comments,\n        scorm12_regex.CMIString4096,\n        true,\n      )\n    ) {\n      this._comments = comments;\n    }\n  }\n\n  /**\n   * Getter for _comments_from_lms\n   * @return {string}\n   */\n  get comments_from_lms(): string {\n    return this._comments_from_lms;\n  }\n\n  /**\n   * Setter for _comments_from_lms. Can only be called before  initialization.\n   * @param {string} comments_from_lms\n   */\n  set comments_from_lms(comments_from_lms: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".comments_from_lms\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._comments_from_lms = comments_from_lms;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string}\n   */\n  getCurrentTotalTime(): string {\n    return this.core.getCurrentTotalTime(this.start_time);\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { check12ValidFormat } from \"./validation\";\nimport { scorm12_regex } from \"../../constants/regex\";\n\n/**\n * Class for AICC Navigation object\n */\nexport class NAV extends BaseCMI {\n  /**\n   * Constructor for NAV object\n   */\n  constructor() {\n    super(\"cmi.nav\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._event = \"\";\n    this._initialized = false;\n  }\n\n  private _event = \"\";\n\n  /**\n   * Getter for _event\n   * @return {string}\n   */\n  get event(): string {\n    return this._event;\n  }\n\n  /**\n   * Setter for _event\n   * @param {string} event\n   */\n  set event(event: string) {\n    if (\n      event === \"\" ||\n      check12ValidFormat(this._cmi_element + \".event\", event, scorm12_regex.NAVEvent)\n    ) {\n      this._event = event;\n    }\n  }\n\n  /**\n   * toJSON for nav object\n   * @return {\n   *    {\n   *      event: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    event: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      event: this.event,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","// Using plain objects instead of enums for better compatibility with strip-only mode\n// This approach avoids TypeScript enum runtime code while maintaining the same API\n\n// NAVBoolean values\nexport const NAVBoolean = {\n  UNKNOWN: \"unknown\",\n  TRUE: \"true\",\n  FALSE: \"false\",\n};\n\n// Type for NAVBoolean values\nexport type NAVBoolean = (typeof NAVBoolean)[keyof typeof NAVBoolean];\n\n// SuccessStatus values\nexport const SuccessStatus = {\n  PASSED: \"passed\",\n  FAILED: \"failed\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for SuccessStatus values\nexport type SuccessStatus = (typeof SuccessStatus)[keyof typeof SuccessStatus];\n\n// CompletionStatus values\nexport const CompletionStatus = {\n  COMPLETED: \"completed\",\n  INCOMPLETE: \"incomplete\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for CompletionStatus values\nexport type CompletionStatus = (typeof CompletionStatus)[keyof typeof CompletionStatus];\n\n// LogLevelEnum values\nexport const LogLevelEnum = {\n  _: 0,\n  DEBUG: 1,\n  INFO: 2,\n  WARN: 3,\n  ERROR: 4,\n  NONE: 5,\n};\n\n// Type for LogLevelEnum values\nexport type LogLevelEnum = (typeof LogLevelEnum)[keyof typeof LogLevelEnum];\n","import { InternalSettings, LogLevel, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"./api_constants\";\nimport { LogLevelEnum } from \"./enums\";\n\n/**\n * Default settings for the SCORM API\n */\nexport const DefaultSettings: InternalSettings = {\n  autocommit: false,\n  autocommitSeconds: 10,\n  asyncCommit: false,\n  sendFullCommit: true,\n  lmsCommitUrl: false,\n  dataCommitFormat: \"json\",\n  commitRequestDataType: \"application/json;charset=UTF-8\",\n  autoProgress: false,\n  logLevel: LogLevelEnum.ERROR,\n  selfReportSessionTime: false,\n  alwaysSendTotalTime: false,\n  renderCommonCommitFields: false,\n  strict_errors: true,\n  xhrHeaders: {},\n  xhrWithCredentials: false,\n  fetchMode: \"cors\",\n  useBeaconInsteadOfFetch: \"never\",\n  responseHandler: async function (response: Response): Promise<ResultObject> {\n    if (typeof response !== \"undefined\") {\n      let httpResult = null;\n\n      // Handle both text() and json() response methods\n      try {\n        if (typeof response.json === \"function\") {\n          // Try to get JSON directly if the method exists\n          httpResult = await response.json();\n        } else if (typeof response.text === \"function\") {\n          // Fall back to text() if json() is not available\n          const responseText = await response.text();\n          if (responseText) {\n            httpResult = JSON.parse(responseText);\n          }\n        }\n      } catch (e) {\n        // If parsing fails, continue with null httpResult\n      }\n\n      if (httpResult === null || !{}.hasOwnProperty.call(httpResult, \"result\")) {\n        if (response.status === 200) {\n          return {\n            result: global_constants.SCORM_TRUE,\n            errorCode: 0,\n          };\n        } else {\n          return {\n            result: global_constants.SCORM_FALSE,\n            errorCode: 101,\n          };\n        }\n      } else {\n        return {\n          result: httpResult.result,\n          errorCode: httpResult.errorCode\n            ? httpResult.errorCode\n            : httpResult.result === global_constants.SCORM_TRUE\n              ? 0\n              : 101,\n        };\n      }\n    }\n    return {\n      result: global_constants.SCORM_FALSE,\n      errorCode: 101,\n    };\n  },\n  requestHandler: function (commitObject) {\n    return commitObject;\n  },\n  onLogMessage: defaultLogHandler,\n  scoItemIds: [],\n  scoItemIdValidator: false,\n  globalObjectiveIds: [],\n\n  // Offline support settings\n  enableOfflineSupport: false,\n  courseId: \"\",\n  syncOnInitialize: true,\n  syncOnTerminate: true,\n  maxSyncAttempts: 5,\n};\n\nexport function defaultLogHandler(messageLevel: LogLevel, logMessage: string): void {\n  switch (messageLevel) {\n    case \"4\":\n    case 4:\n    case \"ERROR\":\n    case LogLevelEnum.ERROR:\n      console.error(logMessage);\n      break;\n    case \"3\":\n    case 3:\n    case \"WARN\":\n    case LogLevelEnum.WARN:\n      console.warn(logMessage);\n      break;\n    case \"2\":\n    case 2:\n    case \"INFO\":\n    case LogLevelEnum.INFO:\n      console.info(logMessage);\n      break;\n    case \"1\":\n    case 1:\n    case \"DEBUG\":\n    case LogLevelEnum.DEBUG:\n      if (console.debug) {\n        console.debug(logMessage);\n      } else {\n        console.log(logMessage);\n      }\n      break;\n  }\n}\n","import BaseAPI from \"../BaseAPI\";\n\n/**\n * Private class that wraps a timeout call to the commit() function\n */\nexport class ScheduledCommit {\n  private _API;\n  private _cancelled = false;\n  private readonly _timeout;\n  private readonly _callback;\n\n  /**\n   * Constructor for ScheduledCommit\n   * @param {BaseAPI} API\n   * @param {number} when\n   * @param {string} callback\n   */\n  constructor(API: BaseAPI, when: number, callback: string) {\n    this._API = API;\n    this._timeout = setTimeout(this.wrapper.bind(this), when);\n    this._callback = callback;\n  }\n\n  /**\n   * Cancel any currently scheduled commit\n   */\n  cancel() {\n    this._cancelled = true;\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n  }\n\n  /**\n   * Wrap the API commit call to check if the call has already been cancelled\n   */\n  wrapper() {\n    if (!this._cancelled) {\n      (async () => await this._API.commit(this._callback))();\n    }\n  }\n}\n","import { CommitObject, InternalSettings, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { IHttpService } from \"../interfaces/services\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { StringKeyMap } from \"../utilities\";\n\n/**\n * Service for handling HTTP communication with the LMS\n */\nexport class HttpService implements IHttpService {\n  private settings: InternalSettings;\n  private error_codes: ErrorCode;\n\n  /**\n   * Constructor for HttpService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   */\n  constructor(settings: InternalSettings, error_codes: ErrorCode) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n  }\n\n  /**\n   * Sends HTTP requests to the LMS with special handling for immediate and standard requests.\n   *\n   * This method handles communication with the LMS server, implementing two distinct\n   * request handling strategies based on the context:\n   *\n   * 1. Immediate Mode (used during termination):\n   *    When immediate=true, the method:\n   *    - Initiates the fetch request but doesn't wait for it to complete\n   *    - Returns a success result immediately\n   *    - Processes the response asynchronously when it arrives\n   *\n   *    This is critical for browser compatibility during page unload/termination,\n   *    as some browsers (especially Chrome) may cancel synchronous or awaited\n   *    requests when a page is closing.\n   *\n   * 2. Standard Mode (normal operation):\n   *    When immediate=false, the method:\n   *    - Processes the request parameters through the configured requestHandler\n   *    - Awaits the fetch response completely\n   *    - Transforms the response using the configured responseHandler\n   *    - Triggers appropriate event listeners based on success/failure\n   *    - Returns the complete result with appropriate error codes\n   *\n   * The method also includes error handling to catch network failures or other\n   * exceptions that might occur during the request process.\n   *\n   * @param {string} url - The URL endpoint to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The data to send to the LMS\n   * @param {boolean} immediate - Whether to send the request immediately without waiting (true) or process normally (false)\n   * @param {Function} apiLog - Function to log API messages with appropriate levels\n   * @param {Function} processListeners - Function to trigger event listeners for commit events\n   * @return {Promise<ResultObject>} - A promise that resolves with the result of the request\n   *\n   * @example\n   * // Standard request (waits for response)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   false,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   *\n   * @example\n   * // Immediate request (for termination)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   true,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   * // result will be success immediately, regardless of actual HTTP result\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n    apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    const genericError: ResultObject = {\n      result: global_constants.SCORM_FALSE,\n      errorCode: this.error_codes.GENERAL,\n    };\n\n    // If immediate mode (for termination), handle differently\n    if (immediate) {\n      return this._handleImmediateRequest(url, params, processListeners);\n    }\n\n    // Standard request processing\n    try {\n      const processedParams = this.settings.requestHandler(params) as\n        | CommitObject\n        | StringKeyMap\n        | Array<any>;\n      const response = await this.performFetch(url, processedParams);\n      return this.transformResponse(response, processListeners);\n    } catch (e) {\n      apiLog(\"processHttpRequest\", e, LogLevelEnum.ERROR);\n      processListeners(\"CommitError\");\n      return genericError;\n    }\n  }\n\n  /**\n   * Handles an immediate request (used during termination)\n   * @param {string} url - The URL to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The parameters to include in the request\n   * @param {Function} processListeners - Function to process event listeners\n   * @return {ResultObject} - A success result object\n   * @private\n   */\n  private _handleImmediateRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): ResultObject {\n    // Use Beacon API for final commit if specified in settings\n    if (this.settings.useBeaconInsteadOfFetch !== \"never\") {\n      const { body, contentType } = this._prepareRequestBody(params);\n      navigator.sendBeacon(url, new Blob([body], { type: contentType }));\n    } else {\n      // Use regular fetch with keepalive\n      this.performFetch(url, params).then(async (response) => {\n        await this.transformResponse(response, processListeners);\n      });\n    }\n\n    // Return success immediately without waiting for response\n    return {\n      result: global_constants.SCORM_TRUE,\n      errorCode: 0,\n    };\n  }\n\n  /**\n   * Prepares the request body and content type based on params type\n   * @param {CommitObject|StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Object} - Object containing body and contentType\n   * @private\n   */\n  private _prepareRequestBody(params: CommitObject | StringKeyMap | Array<any>): {\n    body: string;\n    contentType: string;\n  } {\n    const body = params instanceof Array ? params.join(\"&\") : JSON.stringify(params);\n    const contentType =\n      params instanceof Array\n        ? \"application/x-www-form-urlencoded\"\n        : this.settings.commitRequestDataType;\n\n    return { body, contentType };\n  }\n\n  /**\n   * Perform the fetch request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - The response from the LMS\n   * @private\n   */\n  private async performFetch(url: string, params: StringKeyMap | Array<any>): Promise<Response> {\n    // Use Beacon API if specified in settings\n    if (this.settings.useBeaconInsteadOfFetch === \"always\") {\n      return this.performBeacon(url, params);\n    }\n\n    const { body, contentType } = this._prepareRequestBody(params);\n    const init = {\n      method: \"POST\",\n      mode: this.settings.fetchMode,\n      body,\n      headers: {\n        ...this.settings.xhrHeaders,\n        \"Content-Type\": contentType,\n      },\n      keepalive: true,\n    } as RequestInit;\n\n    if (this.settings.xhrWithCredentials) {\n      init.credentials = \"include\";\n    }\n\n    return fetch(url, init);\n  }\n\n  /**\n   * Perform the beacon request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - A promise that resolves with a mock Response object\n   * @private\n   */\n  private async performBeacon(url: string, params: StringKeyMap | Array<any>): Promise<Response> {\n    const { body, contentType } = this._prepareRequestBody(params);\n\n    // Send the beacon request\n    const beaconSuccess = navigator.sendBeacon(url, new Blob([body], { type: contentType }));\n\n    // Create a mock Response object since sendBeacon doesn't return a Response\n    return Promise.resolve({\n      status: beaconSuccess ? 200 : 0,\n      ok: beaconSuccess,\n      json: async () => ({\n        result: beaconSuccess ? \"true\" : \"false\",\n        errorCode: beaconSuccess ? 0 : this.error_codes.GENERAL,\n      }),\n      text: async () =>\n        JSON.stringify({\n          result: beaconSuccess ? \"true\" : \"false\",\n          errorCode: beaconSuccess ? 0 : this.error_codes.GENERAL,\n        }),\n    } as Response);\n  }\n\n  /**\n   * Transforms the response from the LMS to a ResultObject\n   * @param {Response} response - The response from the LMS\n   * @param {Function} processListeners - Function to process event listeners\n   * @return {Promise<ResultObject>} - The transformed response\n   * @private\n   */\n  private async transformResponse(\n    response: Response,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    // Parse the response using the configured handler or default to json\n    const result =\n      typeof this.settings.responseHandler === \"function\"\n        ? await this.settings.responseHandler(response)\n        : await response.json();\n\n    // Ensure result has an errorCode property\n    if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n      result.errorCode = this._isSuccessResponse(response, result) ? 0 : this.error_codes.GENERAL;\n    }\n\n    // Trigger appropriate event based on success/failure\n    if (this._isSuccessResponse(response, result)) {\n      processListeners(\"CommitSuccess\");\n    } else {\n      processListeners(\"CommitError\", undefined, result.errorCode);\n    }\n\n    return result;\n  }\n\n  /**\n   * Determines if a response is successful based on status code and result\n   * @param {Response} response - The HTTP response\n   * @param {ResultObject} result - The parsed result object\n   * @return {boolean} - Whether the response is successful\n   * @private\n   */\n  private _isSuccessResponse(response: Response, result: ResultObject): boolean {\n    return (\n      response.status >= 200 &&\n      response.status <= 299 &&\n      (result.result === \"true\" || result.result === global_constants.SCORM_TRUE)\n    );\n  }\n\n  /**\n   * Updates the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: InternalSettings): void {\n    this.settings = settings;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { IEventService } from \"../interfaces/services\";\n\n/**\n * Interface for a listener object\n */\ninterface Listener {\n  functionName: string;\n  CMIElement: string | null;\n  callback: Function;\n}\n\n/**\n * Type for parsed listener information\n */\ninterface ParsedListener {\n  functionName: string;\n  CMIElement: string | null;\n}\n\n/**\n * Service for handling event listeners and event processing\n */\nexport class EventService implements IEventService {\n  // Map of function names to listeners for faster lookups\n  private listenerMap: Map<string, Listener[]> = new Map();\n  // Total count of listeners for logging\n  private listenerCount = 0;\n  // Function to log API messages\n  private readonly apiLog: (\n    functionName: string,\n    message: string,\n    messageLevel: LogLevel,\n    CMIElement?: string,\n  ) => void;\n\n  /**\n   * Constructor for EventService\n   * @param {Function} apiLog - Function to log API messages\n   */\n  constructor(\n    apiLog: (\n      functionName: string,\n      message: string,\n      messageLevel: LogLevel,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.apiLog = apiLog;\n  }\n\n  /**\n   * Parses a listener name into its components\n   *\n   * @param {string} listenerName - The name of the listener\n   * @returns {ParsedListener|null} - The parsed listener information or null if invalid\n   */\n  private parseListenerName(listenerName: string): ParsedListener | null {\n    const listenerSplit = listenerName.split(\".\");\n    if (listenerSplit.length === 0) return null;\n\n    const functionName = listenerSplit[0];\n    let CMIElement = null;\n\n    if (listenerSplit.length > 1) {\n      CMIElement = listenerName.replace(`${functionName}.`, \"\");\n    }\n\n    return { functionName, CMIElement };\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener\n   * @param {Function} callback - The callback function to execute when the event occurs\n   */\n  on(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get or create the array for this function name\n      const listeners = this.listenerMap.get(functionName) ?? [];\n\n      // Add the new listener\n      listeners.push({\n        functionName,\n        CMIElement,\n        callback,\n      });\n\n      // Update the map and count\n      this.listenerMap.set(functionName, listeners);\n      this.listenerCount++;\n\n      this.apiLog(\n        \"on\",\n        `Added event listener: ${this.listenerCount}`,\n        LogLevelEnum.INFO,\n        functionName,\n      );\n    }\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener\n   *\n   * @param {string} listenerName - The name of the listener to remove\n   * @param {Function} callback - The callback function to remove\n   */\n  off(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get the listeners for this function name\n      const listeners = this.listenerMap.get(functionName);\n      if (!listeners) continue;\n\n      // Find the index of the listener to remove\n      const removeIndex = listeners.findIndex(\n        (obj) => obj.CMIElement === CMIElement && obj.callback === callback,\n      );\n\n      if (removeIndex !== -1) {\n        // Remove the listener\n        listeners.splice(removeIndex, 1);\n        this.listenerCount--;\n\n        // Update the map or remove the entry if empty\n        if (listeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, listeners);\n        }\n\n        this.apiLog(\n          \"off\",\n          `Removed event listener: ${this.listenerCount}`,\n          LogLevelEnum.INFO,\n          functionName,\n        );\n      }\n    }\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener to clear\n   */\n  clear(listenerName: string) {\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // If we have listeners for this function name\n      if (this.listenerMap.has(functionName)) {\n        const listeners = this.listenerMap.get(functionName)!;\n\n        // Filter out listeners that match the criteria\n        const newListeners = listeners.filter((obj) => obj.CMIElement !== CMIElement);\n\n        // Update the count and map\n        this.listenerCount -= listeners.length - newListeners.length;\n\n        if (newListeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, newListeners);\n        }\n      }\n    }\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created\n   *\n   * @param {string} functionName - The name of the function that triggered the event\n   * @param {string} CMIElement - The CMI element that was affected\n   * @param {any} value - The value that was set\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this.apiLog(functionName, value, LogLevelEnum.INFO, CMIElement);\n\n    // Get listeners for this function name\n    const listeners = this.listenerMap.get(functionName);\n    if (!listeners) return;\n\n    for (const listener of listeners) {\n      const listenerHasCMIElement = !!listener.CMIElement;\n      let CMIElementsMatch = false;\n\n      // Check if CMI elements match\n      if (CMIElement && listener.CMIElement) {\n        if (listener.CMIElement.endsWith(\"*\")) {\n          // For wildcard matches, check if the CMI element starts with the prefix\n          const prefix = listener.CMIElement.slice(0, -1);\n          CMIElementsMatch = CMIElement.startsWith(prefix);\n        } else {\n          // For exact matches, compare the strings directly\n          CMIElementsMatch = listener.CMIElement === CMIElement;\n        }\n      }\n\n      // If the listener matches, call the callback\n      if (!listenerHasCMIElement || CMIElementsMatch) {\n        this.apiLog(\n          \"processListeners\",\n          `Processing listener: ${listener.functionName}`,\n          LogLevelEnum.DEBUG,\n          CMIElement,\n        );\n\n        // Handle special event types\n        if (functionName.startsWith(\"Sequence\")) {\n          // For sequence events, pass the target as the first argument\n          listener.callback(value);\n        } else if (functionName === \"CommitError\") {\n          // For commit error events, pass the error code\n          listener.callback(value);\n        } else if (functionName === \"CommitSuccess\") {\n          // For commit success events, pass no arguments\n          listener.callback();\n        } else {\n          // For regular events, pass CMIElement and value\n          listener.callback(CMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Resets the event service by clearing all listeners\n   */\n  reset() {\n    this.listenerMap.clear();\n    this.listenerCount = 0;\n  }\n}\n","import { CommitObject, LogLevel } from \"../types/api_types\";\nimport { StringKeyMap, unflatten } from \"../utilities\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { BaseCMI } from \"../cmi/common/base_cmi\";\nimport { ISerializationService } from \"../interfaces/services\";\n\n/**\n * Service for handling data serialization and deserialization in scorm-again\n */\nexport class SerializationService implements ISerializationService {\n  /**\n   * Loads CMI data from a flattened JSON object with special handling for arrays and ordering.\n   *\n   * This method implements a complex algorithm for loading flattened JSON data into the CMI\n   * object structure. It handles several key challenges:\n   *\n   * 1. Ordering dependencies: Some CMI elements (like interactions and objectives) must be\n   *    loaded in a specific order to ensure proper initialization.\n   *\n   * 2. Array handling: Interactions and objectives are stored as arrays, and their properties\n   *    must be loaded in the correct order (e.g., 'id' and 'type' must be set before other properties).\n   *\n   * 3. Unflattening: The method converts flattened dot notation (e.g., \"cmi.objectives.0.id\")\n   *    back into nested objects before loading.\n   *\n   * The algorithm works by:\n   * - Categorizing keys into interactions, objectives, and other properties\n   * - Sorting interactions to prioritize 'id' and 'type' fields within each index\n   * - Sorting objectives to prioritize 'id' fields within each index\n   * - Processing each category in order: interactions, objectives, then other properties\n   *\n   * @param {StringKeyMap} json - The flattened JSON object with dot notation keys\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   *\n   * @param setStartingData\n   * @example\n   * // Example of flattened JSON input:\n   * // {\n   * //   \"cmi.objectives.0.id\": \"obj1\",\n   * //   \"cmi.objectives.0.score.raw\": \"80\",\n   * //   \"cmi.interactions.0.id\": \"int1\",\n   * //   \"cmi.interactions.0.type\": \"choice\",\n   * //   \"cmi.interactions.0.result\": \"correct\"\n   * // }\n   */\n  loadFromFlattenedJSON(\n    json: StringKeyMap,\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromFlattenedJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    const int_pattern = /^(cmi\\.interactions\\.)(\\d+)\\.(.*)$/;\n    const obj_pattern = /^(cmi\\.objectives\\.)(\\d+)\\.(.*)$/;\n\n    // Extract and categorize keys for better sorting\n    const interactions: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const objectives: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const others: { key: string; value: any }[] = [];\n\n    // Categorize keys\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key)) {\n        const intMatch = key.match(int_pattern);\n        if (intMatch) {\n          interactions.push({\n            key,\n            value: json[key],\n            index: Number(intMatch[2]),\n            field: intMatch[3],\n          });\n          continue;\n        }\n\n        const objMatch = key.match(obj_pattern);\n        if (objMatch) {\n          objectives.push({\n            key,\n            value: json[key],\n            index: Number(objMatch[2]),\n            field: objMatch[3],\n          });\n          continue;\n        }\n\n        others.push({ key, value: json[key] });\n      }\n    }\n\n    // Sort interactions: first by index, then prioritize 'id' and 'type' fields\n    interactions.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id and type\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n      if (a.field === \"type\") return -1;\n      if (b.field === \"type\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort objectives: first by index, then prioritize 'id' field\n    objectives.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort other keys alphabetically\n    others.sort((a, b) => a.key.localeCompare(b.key));\n\n    // Process all items in the correct order\n    const processItems = (items: { key: string; value: any }[]) => {\n      items.forEach((item) => {\n        const obj: StringKeyMap = {};\n        obj[item.key] = item.value;\n        this.loadFromJSON(\n          unflatten(obj) as StringKeyMap,\n          CMIElement,\n          setCMIValue,\n          isNotInitialized,\n          setStartingData,\n        );\n      });\n    };\n\n    // Process in order: interactions, objectives, others\n    processItems(interactions);\n    processItems(objectives);\n    processItems(others);\n  }\n\n  /**\n   * Loads CMI data from a nested JSON object with recursive traversal.\n   *\n   * This method implements a recursive algorithm for loading nested JSON data into the CMI\n   * object structure. It handles several key aspects:\n   *\n   * 1. Recursive traversal: The method recursively traverses the nested JSON structure,\n   *    building CMI element paths as it goes (e.g., \"cmi.core.student_id\").\n   *\n   * 2. Type-specific handling: Different data types are handled differently:\n   *    - Arrays: Each array element is processed individually with its index in the path\n   *    - Objects: Recursively processed with updated path\n   *    - Primitives: Set directly using setCMIValue\n   *\n   * 3. Initialization check: Ensures the method is only called before API initialization\n   *\n   * 4. Starting data storage: Stores the original JSON data for potential future use\n   *\n   * The algorithm works by:\n   * - First storing the complete JSON object via setStartingData\n   * - Iterating through each property in the JSON object\n   * - For each property, determining its type and handling it accordingly\n   * - Building the CMI element path as it traverses the structure\n   * - Setting values at the appropriate paths using setCMIValue\n   *\n   * @param {{[key: string]: any}} json - The nested JSON object to load\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value at a specific path\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   * @param {Function} setStartingData - Function to store the original JSON data\n   *\n   * @example\n   * // Example of nested JSON input:\n   * // {\n   * //   \"core\": {\n   * //     \"student_id\": \"12345\",\n   * //     \"student_name\": \"John Doe\"\n   * //   },\n   * //   \"objectives\": [\n   * //     { \"id\": \"obj1\", \"score\": { \"raw\": 80 } },\n   * //     { \"id\": \"obj2\", \"score\": { \"raw\": 90 } }\n   * //   ]\n   * // }\n   */\n  loadFromJSON(\n    json: { [key: string]: any },\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    CMIElement = CMIElement !== undefined ? CMIElement : \"cmi\";\n\n    setStartingData(json);\n\n    // could this be refactored down to flatten(json) then setCMIValue on each?\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key) && json[key]) {\n        const currentCMIElement = (CMIElement ? CMIElement + \".\" : \"\") + key;\n        const value = json[key];\n\n        if (value.constructor === Array) {\n          for (let i = 0; i < value.length; i++) {\n            if (value[i]) {\n              const item = value[i];\n              const tempCMIElement = `${currentCMIElement}.${i}`;\n\n              if (item.constructor === Object) {\n                this.loadFromJSON(\n                  item,\n                  tempCMIElement,\n                  setCMIValue,\n                  isNotInitialized,\n                  setStartingData,\n                );\n              } else {\n                setCMIValue(tempCMIElement, item);\n              }\n            }\n          }\n        } else if (value.constructor === Object) {\n          this.loadFromJSON(\n            value,\n            currentCMIElement,\n            setCMIValue,\n            isNotInitialized,\n            setStartingData,\n          );\n        } else {\n          setCMIValue(currentCMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Render the CMI object to JSON for sending to an LMS.\n   *\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {string}\n   */\n  renderCMIToJSONString(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): string {\n    // Do we want/need to return fields that have no set value?\n    if (sendFullCommit) {\n      return JSON.stringify({ cmi });\n    }\n    return JSON.stringify({ cmi }, (k, v) => (v === undefined ? null : v), 2);\n  }\n\n  /**\n   * Returns a JS object representing the current cmi\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {object}\n   */\n  renderCMIToJSONObject(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): StringKeyMap {\n    // Revert to the original implementation to maintain compatibility with tests\n    return JSON.parse(this.renderCMIToJSONString(cmi, sendFullCommit));\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} alwaysSendTotalTime - Whether to always send total time\n   * @param {boolean|Function} renderCommonCommitFields - Whether to render common commit fields\n   * @param {Function} renderCommitObject - Function to render commit object\n   * @param {Function} renderCommitCMI - Function to render commit CMI\n   * @param {LogLevel} apiLogLevel - The API log level\n   * @return {CommitObject|StringKeyMap|Array<any>}\n   */\n  getCommitObject(\n    terminateCommit: boolean,\n    alwaysSendTotalTime: boolean,\n    renderCommonCommitFields: boolean | ((commitObject: CommitObject) => boolean),\n    renderCommitObject: (terminateCommit: boolean, includeTotalTime?: boolean) => CommitObject,\n    renderCommitCMI: (\n      terminateCommit: boolean,\n      includeTotalTime?: boolean,\n    ) => StringKeyMap | Array<any>,\n    apiLogLevel: LogLevel,\n  ): CommitObject | StringKeyMap | Array<any> {\n    // Fix for issue: total time is being calculated incorrectly across multiple sessions\n    // when selfReportSessionTime and alwaysSendTotalTime are enabled.\n    //\n    // Previously, we were using a single variable (shouldTerminateCommit) that combined\n    // both concerns: whether this is a termination commit and whether to include total time.\n    // This caused the total time to be calculated as if every commit was a terminate commit\n    // when alwaysSendTotalTime was true, leading to incorrect time calculations.\n    //\n    // Now we pass the actual terminateCommit value and a separate parameter for whether\n    // to include total time, allowing the rendering functions to handle these concerns separately.\n    const includeTotalTime = alwaysSendTotalTime || terminateCommit;\n\n    const commitObject = renderCommonCommitFields\n      ? renderCommitObject(terminateCommit, includeTotalTime)\n      : renderCommitCMI(terminateCommit, includeTotalTime);\n\n    if ([LogLevelEnum.DEBUG, \"1\", 1, \"DEBUG\"].includes(apiLogLevel)) {\n      console.debug(\"Commit (terminated: \" + (terminateCommit ? \"yes\" : \"no\") + \"): \");\n      console.debug(commitObject);\n    }\n    return commitObject;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ILoggingService } from \"../interfaces/services\";\nimport { defaultLogHandler } from \"../constants/default_settings\";\n\n/**\n * Centralized logging service implemented as a singleton\n * Provides methods for logging at different levels and configuring the log level\n */\nexport class LoggingService implements ILoggingService {\n  private static _instance: LoggingService;\n  private _logLevel: LogLevel = LogLevelEnum.ERROR;\n  private _logHandler: (messageLevel: LogLevel, logMessage: string) => void;\n\n  /**\n   * Private constructor to prevent direct instantiation\n   */\n  private constructor() {\n    // Default log handler uses console methods based on log level\n    this._logHandler = defaultLogHandler;\n  }\n\n  /**\n   * Get the singleton instance of LoggingService\n   *\n   * @returns {LoggingService} The singleton instance\n   */\n  public static getInstance(): LoggingService {\n    if (!LoggingService._instance) {\n      LoggingService._instance = new LoggingService();\n    }\n    return LoggingService._instance;\n  }\n\n  /**\n   * Set the log level\n   *\n   * @param {LogLevel} level - The log level to set\n   */\n  public setLogLevel(level: LogLevel): void {\n    this._logLevel = level;\n  }\n\n  /**\n   * Get the current log level\n   *\n   * @returns {LogLevel} The current log level\n   */\n  public getLogLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  /**\n   * Set a custom log handler\n   *\n   * @param {Function} handler - The function to handle log messages\n   */\n  public setLogHandler(handler: (messageLevel: LogLevel, logMessage: string) => void): void {\n    this._logHandler = handler;\n  }\n\n  /**\n   * Log a message if the message level is greater than or equal to the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @param {string} logMessage - The message to log\n   */\n  public log(messageLevel: LogLevel, logMessage: string): void {\n    if (this.shouldLog(messageLevel)) {\n      this._logHandler(messageLevel, logMessage);\n    }\n  }\n\n  /**\n   * Log a message at ERROR level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public error(logMessage: string): void {\n    this.log(LogLevelEnum.ERROR, logMessage);\n  }\n\n  /**\n   * Log a message at WARN level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public warn(logMessage: string): void {\n    this.log(LogLevelEnum.WARN, logMessage);\n  }\n\n  /**\n   * Log a message at INFO level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public info(logMessage: string): void {\n    this.log(LogLevelEnum.INFO, logMessage);\n  }\n\n  /**\n   * Log a message at DEBUG level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public debug(logMessage: string): void {\n    this.log(LogLevelEnum.DEBUG, logMessage);\n  }\n\n  /**\n   * Determine if a message should be logged based on its level and the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @returns {boolean} Whether the message should be logged\n   */\n  private shouldLog(messageLevel: LogLevel): boolean {\n    // Convert string levels to numbers for comparison\n    const numericMessageLevel = this.getNumericLevel(messageLevel);\n    const numericLogLevel = this.getNumericLevel(this._logLevel);\n\n    return numericMessageLevel >= numericLogLevel;\n  }\n\n  /**\n   * Convert a log level to its numeric value\n   *\n   * @param {LogLevel} level - The log level to convert\n   * @returns {number} The numeric value of the log level\n   */\n  private getNumericLevel(level: LogLevel): number {\n    if (level === undefined) return LogLevelEnum.NONE;\n\n    if (typeof level === \"number\") return level;\n\n    switch (level) {\n      case \"1\":\n      case \"DEBUG\":\n        return LogLevelEnum.DEBUG;\n      case \"2\":\n      case \"INFO\":\n        return LogLevelEnum.INFO;\n      case \"3\":\n      case \"WARN\":\n        return LogLevelEnum.WARN;\n      case \"4\":\n      case \"ERROR\":\n        return LogLevelEnum.ERROR;\n      case \"5\":\n      case \"NONE\":\n        return LogLevelEnum.NONE;\n      default:\n        return LogLevelEnum.ERROR; // Default to ERROR if unknown\n    }\n  }\n}\n\n// Export a function to get the singleton instance\nexport function getLoggingService(): LoggingService {\n  return LoggingService.getInstance();\n}\n","import { LogLevelEnum } from \"../constants/enums\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { ValidationError } from \"../exceptions\";\nimport { IErrorHandlingService, ILoggingService } from \"../interfaces/services\";\nimport { getLoggingService } from \"./LoggingService\";\n\n/**\n * Service for handling SCORM errors\n */\nexport class ErrorHandlingService implements IErrorHandlingService {\n  private _lastErrorCode: string = \"0\";\n  private readonly _errorCodes: ErrorCode;\n  private readonly _apiLog: (\n    functionName: string,\n    message: string,\n    logLevel?: LogLevelEnum,\n    CMIElement?: string,\n  ) => void;\n  private readonly _getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string;\n  private readonly _loggingService: ILoggingService;\n\n  /**\n   * Constructor for ErrorHandlingService\n   *\n   * @param {ErrorCode} errorCodes - The error codes object\n   * @param {Function} apiLog - Function for logging API calls\n   * @param {Function} getLmsErrorMessageDetails - Function for getting error message details\n   * @param {ILoggingService} loggingService - Optional logging service instance\n   */\n  constructor(\n    errorCodes: ErrorCode,\n    apiLog: (\n      functionName: string,\n      message: string,\n      logLevel?: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n    loggingService?: ILoggingService,\n  ) {\n    this._errorCodes = errorCodes;\n    this._apiLog = apiLog;\n    this._getLmsErrorMessageDetails = getLmsErrorMessageDetails;\n    this._loggingService = loggingService || getLoggingService();\n  }\n\n  /**\n   * Get the last error code\n   *\n   * @return {string} - The last error code\n   */\n  get lastErrorCode(): string {\n    return this._lastErrorCode;\n  }\n\n  /**\n   * Set the last error code\n   *\n   * @param {string} errorCode - The error code to set\n   */\n  set lastErrorCode(errorCode: string) {\n    this._lastErrorCode = errorCode;\n  }\n\n  /**\n   * Throws a SCORM error\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The error number\n   * @param {string} message - The error message\n   * @throws {ValidationError} - If throwException is true, throws a ValidationError\n   */\n  throwSCORMError(CMIElement: string, errorNumber: number, message?: string): void {\n    if (!message) {\n      message = this._getLmsErrorMessageDetails(errorNumber, true);\n    }\n\n    // Format a more descriptive error message with context\n    const formattedMessage = `SCORM Error ${errorNumber}: ${message}${CMIElement ? ` [Element: ${CMIElement}]` : \"\"}`;\n\n    // Log using both the API log and the logging service for consistency\n    this._apiLog(\"throwSCORMError\", errorNumber + \": \" + message, LogLevelEnum.ERROR, CMIElement);\n    this._loggingService.error(formattedMessage);\n\n    this._lastErrorCode = String(errorNumber);\n  }\n\n  /**\n   * Clears the last SCORM error code on success.\n   *\n   * @param {string} success - Whether the operation was successful\n   */\n  clearSCORMError(success: string): void {\n    if (success !== undefined && success !== global_constants.SCORM_FALSE) {\n      this._lastErrorCode = \"0\";\n    }\n  }\n\n  /**\n   * Handles exceptions that occur when accessing or setting CMI values.\n   *\n   * This method provides centralized error handling for exceptions that occur during\n   * CMI data operations. It differentiates between different types of errors and\n   * handles them appropriately:\n   *\n   * 1. ValidationError: These are expected errors from the validation system that\n   *    indicate a specific SCORM error condition (like invalid data format or range).\n   *    For these errors, the method:\n   *    - Sets the lastErrorCode to the error code from the ValidationError\n   *    - Returns SCORM_FALSE to indicate failure to the caller\n   *\n   * 2. Standard JavaScript Error: For general JavaScript errors (like TypeError,\n   *    ReferenceError, etc.), the method:\n   *    - Logs the error message with stack trace to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * 3. Unknown exceptions: For any other type of exception that doesn't match the\n   *    above categories, the method:\n   *    - Logs the entire exception object to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * This method is critical for maintaining SCORM compliance by ensuring that\n   * all errors are properly translated into the appropriate SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {ValidationError|Error|unknown} e - The exception that was thrown\n   * @param {string} returnValue - The default return value (typically an empty string)\n   * @return {string} - Either the original returnValue or SCORM_FALSE if an error occurred\n   *\n   * @example\n   * try {\n   *   const value = getCMIValue(\"cmi.core.score.raw\");\n   *   return value;\n   * } catch (e) {\n   *   return handleValueAccessException(e, \"\");\n   * }\n   */\n  handleValueAccessException(\n    CMIElement: string,\n    e: Error | ValidationError | unknown,\n    returnValue: string,\n  ): string {\n    if (e instanceof ValidationError) {\n      const validationError = e as ValidationError;\n      this._lastErrorCode = String(validationError.errorCode);\n\n      // Log validation errors at WARN level with context\n      const errorMessage = `Validation Error ${validationError.errorCode}: ${validationError.message} [Element: ${CMIElement}]`;\n      this._loggingService.warn(errorMessage);\n\n      returnValue = global_constants.SCORM_FALSE;\n    } else if (e instanceof Error) {\n      // For standard JS errors, include the stack trace and error type\n      const errorType = e.constructor.name; // Gets the error type (e.g., TypeError, ReferenceError)\n      const errorMessage = `${errorType}: ${e.message} [Element: ${CMIElement}]`;\n      const stackTrace = e.stack || \"\";\n\n      // Log the detailed error with stack trace\n      this._loggingService.error(`${errorMessage}\\n${stackTrace}`);\n\n      this.throwSCORMError(CMIElement, this._errorCodes.GENERAL, `${errorType}: ${e.message}`);\n    } else {\n      // For unknown errors, provide as much context as possible\n      const errorMessage = `Unknown error occurred while accessing [Element: ${CMIElement}]`;\n\n      this._loggingService.error(errorMessage);\n\n      try {\n        // Try to stringify the error object for more details\n        const errorDetails = JSON.stringify(e);\n        this._loggingService.error(`Error details: ${errorDetails}`);\n      } catch (jsonError) {\n        // If stringify fails, log that we couldn't get more details\n        this._loggingService.error(\"Could not stringify error object for details\");\n      }\n\n      this.throwSCORMError(CMIElement, this._errorCodes.GENERAL, \"Unknown error\");\n    }\n    return returnValue;\n  }\n\n  /**\n   * Get the error codes object\n   *\n   * @return {ErrorCode} - The error codes object\n   */\n  get errorCodes(): ErrorCode {\n    return this._errorCodes;\n  }\n}\n\n// Export a factory function to create the service\nexport function createErrorHandlingService(\n  errorCodes: ErrorCode,\n  apiLog: (\n    functionName: string,\n    message: string,\n    logLevel: LogLevelEnum,\n    CMIElement?: string,\n  ) => void,\n  getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n  loggingService?: ILoggingService,\n): ErrorHandlingService {\n  return new ErrorHandlingService(errorCodes, apiLog, getLmsErrorMessageDetails, loggingService);\n}\n","import { CommitObject, InternalSettings, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ErrorCode } from \"../constants/error_codes\";\n\n/**\n * Interface for sync queue item\n */\ninterface SyncQueueItem {\n  id: string;\n  courseId: string;\n  timestamp: number;\n  data: CommitObject;\n  syncAttempts: number;\n}\n\n/**\n * Service for handling offline storage and synchronization of SCORM data\n */\nexport class OfflineStorageService {\n  private settings: InternalSettings;\n  private error_codes: ErrorCode;\n  private storeName: string = \"scorm_again_offline_data\";\n  private syncQueue: string = \"scorm_again_sync_queue\";\n  private isOnline: boolean = navigator.onLine;\n  private syncInProgress: boolean = false;\n\n  /**\n   * Constructor for OfflineStorageService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Function} apiLog - The logging function\n   */\n  constructor(\n    settings: InternalSettings,\n    error_codes: ErrorCode,\n    private apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n\n    // Initialize listeners for online/offline events\n    window.addEventListener(\"online\", this.handleOnlineStatusChange.bind(this));\n    window.addEventListener(\"offline\", this.handleOnlineStatusChange.bind(this));\n  }\n\n  /**\n   * Handle changes in online status\n   */\n  private handleOnlineStatusChange() {\n    const wasOnline = this.isOnline;\n    this.isOnline = navigator.onLine;\n\n    // If we've come back online, trigger sync process\n    if (!wasOnline && this.isOnline) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        \"Device is back online, attempting to sync...\",\n        LogLevelEnum.INFO,\n      );\n      this.syncOfflineData().then(\n        (success) => {\n          if (success) {\n            this.apiLog(\"OfflineStorageService\", \"Sync completed successfully\", LogLevelEnum.INFO);\n          } else {\n            this.apiLog(\"OfflineStorageService\", \"Sync failed\", LogLevelEnum.ERROR);\n          }\n        },\n        (error) => {\n          this.apiLog(\"OfflineStorageService\", `Error during sync: ${error}`, LogLevelEnum.ERROR);\n        },\n      );\n    } else if (wasOnline && !this.isOnline) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        \"Device is offline, data will be stored locally\",\n        LogLevelEnum.INFO,\n      );\n    }\n  }\n\n  /**\n   * Store commit data offline\n   * @param {string} courseId - Identifier for the course\n   * @param {CommitObject} commitData - The data to store offline\n   * @returns {Promise<ResultObject>} - Result of the storage operation\n   */\n  async storeOffline(courseId: string, commitData: CommitObject): Promise<ResultObject> {\n    try {\n      // Store the data in the sync queue with timestamp and unique ID\n      const queueItem: SyncQueueItem = {\n        id: `${courseId}_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`,\n        courseId,\n        timestamp: Date.now(),\n        data: commitData,\n        syncAttempts: 0,\n      };\n\n      // Get current queue\n      const currentQueue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n      currentQueue.push(queueItem);\n\n      // Save updated queue\n      await this.saveToStorage(this.syncQueue, currentQueue);\n\n      // Also update the current state in the main storage (latest known state)\n      await this.saveToStorage(`${this.storeName}_${courseId}`, commitData);\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Stored data offline for course ${courseId}`,\n        LogLevelEnum.INFO,\n      );\n\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error storing offline data: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL,\n      };\n    }\n  }\n\n  /**\n   * Get the stored offline data for a course\n   * @param {string} courseId - Identifier for the course\n   * @returns {Promise<CommitObject|null>} - The stored data or null if not found\n   */\n  async getOfflineData(courseId: string): Promise<CommitObject | null> {\n    try {\n      const data = await this.getFromStorage<CommitObject>(`${this.storeName}_${courseId}`);\n      return data || null;\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error retrieving offline data: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return null;\n    }\n  }\n\n  /**\n   * Synchronize offline data with the LMS when connection is available\n   * @returns {Promise<boolean>} - Success status of synchronization\n   */\n  async syncOfflineData(): Promise<boolean> {\n    // Don't run multiple sync processes at once\n    if (this.syncInProgress || !this.isOnline) {\n      return false;\n    }\n\n    this.syncInProgress = true;\n\n    try {\n      // Get the queue of items to sync\n      const syncQueue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n\n      if (syncQueue.length === 0) {\n        this.syncInProgress = false;\n        return true;\n      }\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Found ${syncQueue.length} items to sync`,\n        LogLevelEnum.INFO,\n      );\n\n      // Keep track of successful and failed sync attempts\n      const remainingQueue: SyncQueueItem[] = [];\n\n      // Process each queue item\n      for (const item of syncQueue) {\n        // Skip items that have been attempted too many times\n        if (item.syncAttempts >= 5) {\n          this.apiLog(\n            \"OfflineStorageService\",\n            `Skipping item ${item.id} after 5 failed attempts`,\n            LogLevelEnum.WARN,\n          );\n          continue;\n        }\n\n        try {\n          // Attempt to sync this item\n          const syncResult = await this.sendDataToLMS(item.data);\n\n          if (syncResult.result === global_constants.SCORM_TRUE) {\n            // Sync was successful, no need to keep this item\n            this.apiLog(\n              \"OfflineStorageService\",\n              `Successfully synced item ${item.id}`,\n              LogLevelEnum.INFO,\n            );\n          } else {\n            // Sync failed, increment attempts and keep in queue\n            item.syncAttempts++;\n            remainingQueue.push(item);\n            this.apiLog(\n              \"OfflineStorageService\",\n              `Failed to sync item ${item.id}, attempt #${item.syncAttempts}`,\n              LogLevelEnum.WARN,\n            );\n          }\n        } catch (error) {\n          // On error, increment attempts and keep in queue\n          item.syncAttempts++;\n          remainingQueue.push(item);\n          this.apiLog(\n            \"OfflineStorageService\",\n            `Error syncing item ${item.id}: ${error}`,\n            LogLevelEnum.ERROR,\n          );\n        }\n      }\n\n      // Update the queue with remaining items\n      await this.saveToStorage(this.syncQueue, remainingQueue);\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Sync completed. ${syncQueue.length - remainingQueue.length} items synced, ${remainingQueue.length} items remaining`,\n        LogLevelEnum.INFO,\n      );\n\n      this.syncInProgress = false;\n      return true;\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error during sync process: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      this.syncInProgress = false;\n      return false;\n    }\n  }\n\n  /**\n   * Send data to the LMS when online\n   * @param {CommitObject} data - The data to send to the LMS\n   * @returns {Promise<ResultObject>} - Result of the sync operation\n   */\n  private async sendDataToLMS(data: CommitObject): Promise<ResultObject> {\n    if (!this.settings.lmsCommitUrl) {\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL,\n      };\n    }\n\n    try {\n      // Apply request handler if configured\n      const processedData = this.settings.requestHandler(data);\n\n      // Send the data to the LMS\n      const init = {\n        method: \"POST\",\n        mode: this.settings.fetchMode,\n        body: JSON.stringify(processedData),\n        headers: {\n          ...this.settings.xhrHeaders,\n          \"Content-Type\": this.settings.commitRequestDataType,\n        },\n      } as RequestInit;\n\n      if (this.settings.xhrWithCredentials) {\n        init.credentials = \"include\";\n      }\n\n      const response = await fetch(this.settings.lmsCommitUrl as string, init);\n\n      // Process the response using the configured handler\n      const result =\n        typeof this.settings.responseHandler === \"function\"\n          ? await this.settings.responseHandler(response)\n          : await response.json();\n\n      if (\n        response.status >= 200 &&\n        response.status <= 299 &&\n        (result.result === true || result.result === global_constants.SCORM_TRUE)\n      ) {\n        if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n          result.errorCode = 0;\n        }\n        return result;\n      } else {\n        if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n          result.errorCode = this.error_codes.GENERAL;\n        }\n        return result;\n      }\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error sending data to LMS: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL,\n      };\n    }\n  }\n\n  /**\n   * Check if the device is currently online\n   * @returns {boolean} - Online status\n   */\n  isDeviceOnline(): boolean {\n    return this.isOnline;\n  }\n\n  // noinspection JSValidateJSDoc\n  /**\n   * Get item from localStorage\n   * @param {string} key - The key to retrieve\n   * @returns {Promise<T|null>} - The retrieved data\n   */\n  private async getFromStorage<T>(key: string): Promise<T | null> {\n    const storedData = localStorage.getItem(key);\n    if (storedData) {\n      try {\n        return JSON.parse(storedData) as T;\n      } catch (e) {\n        return null;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Save item to localStorage\n   * @param {string} key - The key to store under\n   * @param {any} data - The data to store\n   * @returns {Promise<void>}\n   */\n  private async saveToStorage(key: string, data: any): Promise<void> {\n    localStorage.setItem(key, JSON.stringify(data));\n  }\n\n  /**\n   * Check if there is pending offline data for a course\n   * @param {string} courseId - Identifier for the course\n   * @returns {Promise<boolean>} - Whether there is pending data\n   */\n  async hasPendingOfflineData(courseId: string): Promise<boolean> {\n    const queue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n    return queue.some((item) => item.courseId === courseId);\n  }\n\n  /**\n   * Update the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: InternalSettings): void {\n    this.settings = settings;\n  }\n}\n","import { ErrorCode } from \"./constants/error_codes\";\nimport { global_constants } from \"./constants/api_constants\";\nimport * as Utilities from \"./utilities\";\nimport { formatMessage, StringKeyMap, stringMatches } from \"./utilities\";\nimport { BaseCMI, BaseRootCMI } from \"./cmi/common/base_cmi\";\nimport {\n  CommitObject,\n  InternalSettings,\n  LogLevel,\n  ResultObject,\n  Settings,\n} from \"./types/api_types\";\nimport { DefaultSettings } from \"./constants/default_settings\";\nimport { IBaseAPI } from \"./interfaces/IBaseAPI\";\nimport { ScheduledCommit } from \"./types/scheduled_commit\";\nimport { LogLevelEnum } from \"./constants/enums\";\nimport { HttpService } from \"./services/HttpService\";\nimport { EventService } from \"./services/EventService\";\nimport { SerializationService } from \"./services/SerializationService\";\nimport { createErrorHandlingService } from \"./services/ErrorHandlingService\";\nimport { getLoggingService } from \"./services/LoggingService\";\nimport { OfflineStorageService } from \"./services/OfflineStorageService\";\nimport {\n  ICMIDataService,\n  IErrorHandlingService,\n  IEventService,\n  IHttpService,\n  ILoggingService,\n  IOfflineStorageService,\n  ISerializationService,\n} from \"./interfaces/services\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { ValidationError } from \"./exceptions\";\n\n/**\n * Base API class for AICC, SCORM 1.2, and SCORM 2004. Should be considered\n * abstract, and never initialized on its own.\n */\nexport default abstract class BaseAPI implements IBaseAPI {\n  private _timeout?: ScheduledCommit | undefined;\n  private readonly _error_codes: ErrorCode;\n  private _settings: InternalSettings = DefaultSettings;\n  private readonly _httpService: IHttpService;\n  private _eventService: IEventService;\n  private _serializationService: ISerializationService;\n  private readonly _errorHandlingService: IErrorHandlingService;\n  private readonly _loggingService: ILoggingService;\n  private readonly _offlineStorageService?: IOfflineStorageService;\n  private _courseId: string = \"\";\n\n  /**\n   * Constructor for Base API class. Sets some shared API fields, as well as\n   * sets up options for the API.\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Settings} settings - Optional settings for the API\n   * @param {IHttpService} httpService - Optional HTTP service instance\n   * @param {IEventService} eventService - Optional Event service instance\n   * @param {ISerializationService} serializationService - Optional Serialization service instance\n   * @param {ICMIDataService} cmiDataService - Optional CMI Data service instance\n   * @param {IErrorHandlingService} errorHandlingService - Optional Error Handling service instance\n   * @param {ILoggingService} loggingService - Optional Logging service instance\n   * @param {IOfflineStorageService} offlineStorageService - Optional Offline Storage service instance\n   */\n  protected constructor(\n    error_codes: ErrorCode,\n    settings?: Settings,\n    httpService?: IHttpService,\n    eventService?: IEventService,\n    serializationService?: ISerializationService,\n    cmiDataService?: ICMIDataService,\n    errorHandlingService?: IErrorHandlingService,\n    loggingService?: ILoggingService,\n    offlineStorageService?: IOfflineStorageService,\n  ) {\n    if (new.target === BaseAPI) {\n      throw new TypeError(\"Cannot construct BaseAPI instances directly\");\n    }\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n\n    this._error_codes = error_codes;\n\n    if (settings) {\n      this.settings = {\n        ...DefaultSettings,\n        ...settings,\n      } as InternalSettings;\n    }\n\n    // Initialize and configure LoggingService\n    this._loggingService = loggingService || getLoggingService();\n    this._loggingService.setLogLevel(this.settings.logLevel);\n\n    // If settings include a custom onLogMessage function, use it as the log handler\n    if (this.settings.onLogMessage) {\n      this._loggingService.setLogHandler(this.settings.onLogMessage);\n    }\n\n    // Initialize HTTP service\n    this._httpService = httpService || new HttpService(this.settings, this._error_codes);\n\n    // Initialize Event service\n    this._eventService =\n      eventService ||\n      new EventService((functionName, message, level, element) =>\n        this.apiLog(functionName, message, level, element),\n      );\n\n    // Initialize Serialization service\n    this._serializationService = serializationService || new SerializationService();\n\n    // Initialize Error Handling service\n    this._errorHandlingService =\n      errorHandlingService ||\n      createErrorHandlingService(\n        this._error_codes,\n        (functionName, message, level, element) =>\n          this.apiLog(functionName, message, level, element),\n        (errorNumber, detail) => this.getLmsErrorMessageDetails(errorNumber, detail),\n      );\n\n    // Initialize Offline Storage service if enabled\n    if (this.settings.enableOfflineSupport) {\n      this._offlineStorageService =\n        offlineStorageService ||\n        new OfflineStorageService(\n          this.settings,\n          this._error_codes,\n          (functionName, message, level, element) =>\n            this.apiLog(functionName, message, level, element),\n        );\n\n      if (this.settings.courseId) {\n        this._courseId = this.settings.courseId;\n      }\n\n      // Check for offline data to restore on initialization\n      if (this._offlineStorageService && this._courseId) {\n        this._offlineStorageService\n          .getOfflineData(this._courseId)\n          .then((offlineData) => {\n            if (offlineData) {\n              this.apiLog(\"constructor\", \"Found offline data to restore\", LogLevelEnum.INFO);\n              // Restore data from offline storage\n              this.loadFromJSON(offlineData.runtimeData);\n            }\n          })\n          .catch((error) => {\n            this.apiLog(\n              \"constructor\",\n              `Error retrieving offline data: ${error}`,\n              LogLevelEnum.ERROR,\n            );\n          });\n      }\n    }\n  }\n\n  public abstract cmi: BaseCMI;\n  public startingData?: StringKeyMap;\n\n  public currentState: number;\n\n  /**\n   * Get the last error code\n   * @return {string}\n   */\n  get lastErrorCode(): string {\n    return this._errorHandlingService?.lastErrorCode ?? \"0\";\n  }\n\n  /**\n   * Set the last error code\n   * @param {string} errorCode\n   */\n  set lastErrorCode(errorCode: string) {\n    if (this._errorHandlingService) {\n      this._errorHandlingService.lastErrorCode = errorCode;\n    }\n  }\n\n  /**\n   * Reset the API to its initial state.\n   * This method clears all current data and resets the API to an uninitialized state.\n   * It can optionally accept new settings to configure the API after reset.\n   *\n   * @param {Settings} settings - Optional new settings to apply after reset\n   */\n  abstract reset(settings?: Settings): void;\n\n  /**\n   * Common reset method for all APIs. New settings are merged with the existing settings.\n   * @param {Settings} settings\n   * @protected\n   */\n  commonReset(settings?: Settings): void {\n    this.apiLog(\"reset\", \"Called\", LogLevelEnum.INFO);\n\n    this.settings = { ...this.settings, ...settings };\n\n    this.clearScheduledCommit();\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n    this.lastErrorCode = \"0\";\n    this._eventService.reset();\n    this.startingData = {};\n\n    // Update offline storage service with new settings if it exists\n    if (this._offlineStorageService) {\n      this._offlineStorageService.updateSettings(this.settings);\n\n      if (settings?.courseId) {\n        this._courseId = settings.courseId;\n      }\n    }\n  }\n\n  /**\n   * Initialize the API\n   * @param {string} callbackName\n   * @param {string} initializeMessage\n   * @param {string} terminationMessage\n   * @return {string}\n   */\n  initialize(\n    callbackName: string,\n    initializeMessage?: string,\n    terminationMessage?: string,\n  ): string {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.isInitialized()) {\n      this.throwSCORMError(\"api\", this._error_codes.INITIALIZED, initializeMessage);\n    } else if (this.isTerminated()) {\n      this.throwSCORMError(\"api\", this._error_codes.TERMINATED, terminationMessage);\n    } else {\n      if (this.settings.selfReportSessionTime) {\n        (this.cmi as BaseRootCMI).setStartTime();\n      }\n\n      this.currentState = global_constants.STATE_INITIALIZED;\n      this.lastErrorCode = \"0\";\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n\n      // If enabled, attempt to sync offline data on initialization\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._courseId &&\n        this.settings.syncOnInitialize &&\n        this._offlineStorageService.isDeviceOnline()\n      ) {\n        this._offlineStorageService.hasPendingOfflineData(this._courseId).then((hasPendingData) => {\n          if (hasPendingData) {\n            this.apiLog(\n              callbackName,\n              \"Syncing pending offline data on initialization\",\n              LogLevelEnum.INFO,\n            );\n            this._offlineStorageService?.syncOfflineData().then((syncSuccess) => {\n              if (syncSuccess) {\n                this.apiLog(callbackName, \"Successfully synced offline data\", LogLevelEnum.INFO);\n                this.processListeners(\"OfflineDataSynced\");\n              }\n            });\n          }\n        });\n      }\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Initialize the LMS API\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsInitialize(): string;\n\n  /**\n   * Finish the current LMS API session\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsFinish(): string;\n\n  /**\n   * Get the value of a CMI element from the LMS\n   * @param {string} CMIElement - The CMI element to get the value of\n   * @return {string} The value of the CMI element\n   */\n  abstract lmsGetValue(CMIElement: string): string;\n\n  /**\n   * Set the value of a CMI element in the LMS\n   * @param {string} CMIElement - The CMI element to set the value of\n   * @param {any} value - The value to set\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsSetValue(CMIElement: string, value: any): string;\n\n  /**\n   * Commit the current data to the LMS\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsCommit(): string;\n\n  /**\n   * Get the last error code from the LMS\n   * @return {string} The last error code\n   */\n  abstract lmsGetLastError(): string;\n\n  /**\n   * Get the error string for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get the string for\n   * @return {string} The error string\n   */\n  abstract lmsGetErrorString(CMIErrorCode: string | number): string;\n\n  /**\n   * Get diagnostic information for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get diagnostic information for\n   * @return {string} The diagnostic information\n   */\n  abstract lmsGetDiagnostic(CMIErrorCode: string | number): string;\n\n  /**\n   * Abstract method for validating that a response is correct.\n   * This method is used to validate the format and content of a response\n   * before it is set in the CMI data model.\n   *\n   * @param {string} _CMIElement - The CMI element path to validate\n   * @param {any} _value - The value to validate\n   * @throws {Error} If the response format is invalid\n   */\n  abstract validateCorrectResponse(_CMIElement: string, _value: any): void;\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   * APIs that inherit BaseAPI should override this method.\n   *\n   * @param {string} _CMIElement - unused\n   * @param {*} _value - unused\n   * @param {boolean} _foundFirstIndex - unused\n   * @return {BaseCMI|null}\n   * @abstract\n   */\n  abstract getChildElement(\n    _CMIElement: string,\n    _value: any,\n    _foundFirstIndex: boolean,\n  ): BaseCMI | null;\n\n  /**\n   * Attempts to store the data to the LMS, logs data if no LMS configured\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _calculateTotalTime\n   * @return {ResultObject}\n   * @abstract\n   */\n  abstract storeData(_calculateTotalTime: boolean): Promise<ResultObject>;\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   *\n   * @param {boolean} _terminateCommit - Whether this commit is part of the termination process\n   * @param {boolean} [_includeTotalTime] - Whether to include total time in the commit data\n   * @return {StringKeyMap|Array}\n   * @abstract\n   */\n  abstract renderCommitCMI(\n    _terminateCommit: boolean,\n    _includeTotalTime?: boolean,\n  ): StringKeyMap | Array<string>;\n\n  /**\n   * Render the commit object to the shortened format for LMS commit.\n   * This method transforms the CMI data into a format suitable for sending to the LMS.\n   * It is called during the commit process to prepare the data for transmission.\n   *\n   * @param {boolean} _terminateCommit - Whether this commit is part of the termination process\n   * @param {boolean} [_includeTotalTime] - Whether to include total time in the commit data\n   * @return {CommitObject} A formatted object containing the data to be sent to the LMS\n   * @example\n   * // Example of a commit object structure\n   * {\n   *   method: \"POST\",\n   *   params: {\n   *     cmi: { ... },\n   *     finishState: \"COMPLETED\"\n   *   }\n   * }\n   */\n  abstract renderCommitObject(_terminateCommit: boolean, _includeTotalTime?: boolean): CommitObject;\n\n  /**\n   * Logging for all SCORM actions\n   *\n   * @param {string} functionName\n   * @param {string} logMessage\n   * @param {number} messageLevel\n   * @param {string} CMIElement\n   */\n  apiLog(functionName: string, logMessage: string, messageLevel: LogLevel, CMIElement?: string) {\n    logMessage = formatMessage(functionName, logMessage, CMIElement);\n\n    if (messageLevel >= this.settings.logLevel) {\n      // Use the injected LoggingService\n      this._loggingService.log(messageLevel, logMessage);\n    }\n  }\n\n  /**\n   * Getter for _settings\n   * @return {InternalSettings}\n   */\n  get settings(): InternalSettings {\n    return this._settings;\n  }\n\n  /**\n   * Setter for _settings\n   * @param {Settings} settings\n   */\n  set settings(settings: Settings) {\n    const previousSettings = this._settings;\n    // Merge the incoming settings with the existing settings\n    this._settings = { ...this._settings, ...settings } as InternalSettings;\n\n    // Update HTTP service settings\n    this._httpService?.updateSettings(this._settings);\n\n    // The following properties are duplicated as class properties for easier access\n    // and need to be manually updated to stay in sync with the settings object\n\n    // Update log level if it changed\n    if (settings.logLevel !== undefined && settings.logLevel !== previousSettings.logLevel) {\n      this.settings.logLevel = settings.logLevel;\n      this._loggingService?.setLogLevel(settings.logLevel);\n    }\n\n    // Update log handler if onLogMessage changed\n    if (\n      settings.onLogMessage !== undefined &&\n      settings.onLogMessage !== previousSettings.onLogMessage\n    ) {\n      this._loggingService?.setLogHandler(settings.onLogMessage);\n    }\n  }\n\n  /**\n   * Terminates the current run of the API\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async terminate(callbackName: string, checkTerminated: boolean): Promise<string> {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.TERMINATION_BEFORE_INIT,\n        this._error_codes.MULTIPLE_TERMINATION,\n      )\n    ) {\n      this.currentState = global_constants.STATE_TERMINATED;\n      // If enabled, attempt to sync offline data before termination\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._courseId &&\n        this.settings.syncOnTerminate &&\n        this._offlineStorageService.isDeviceOnline()\n      ) {\n        const hasPendingData = await this._offlineStorageService.hasPendingOfflineData(\n          this._courseId,\n        );\n        if (hasPendingData) {\n          this.apiLog(\n            callbackName,\n            \"Syncing pending offline data before termination\",\n            LogLevelEnum.INFO,\n          );\n          await this._offlineStorageService.syncOfflineData();\n        }\n      }\n\n      const result: ResultObject = await this.storeData(true);\n      if ((result.errorCode ?? 0) > 0) {\n        this.throwSCORMError(\"api\", result.errorCode);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Get the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  getValue(callbackName: string, checkTerminated: boolean, CMIElement: string): string {\n    let returnValue: string = \"\";\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.RETRIEVE_BEFORE_INIT,\n        this._error_codes.RETRIEVE_AFTER_TERM,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.getCMIValue(CMIElement);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement);\n    }\n\n    this.apiLog(callbackName, \": returned: \" + returnValue, LogLevelEnum.INFO, CMIElement);\n\n    if (returnValue === undefined) {\n      return \"\";\n    }\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Sets the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {string} commitCallback\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  setValue(\n    callbackName: string,\n    commitCallback: string,\n    checkTerminated: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (value !== undefined) {\n      value = String(value);\n    }\n    let returnValue: string = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.STORE_BEFORE_INIT,\n        this._error_codes.STORE_AFTER_TERM,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.setCMIValue(CMIElement, value);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement, value);\n    }\n\n    if (returnValue === undefined) {\n      returnValue = global_constants.SCORM_FALSE;\n    }\n\n    // If we didn't have any errors while setting the data, go ahead and\n    // schedule a commit, if autocommit is turned on\n    if (String(this.lastErrorCode) === \"0\") {\n      if (this.settings.autocommit) {\n        this.scheduleCommit(this.settings.autocommitSeconds * 1000, commitCallback);\n      }\n    }\n\n    this.apiLog(\n      callbackName,\n      \": \" + value + \": result: \" + returnValue,\n      LogLevelEnum.INFO,\n      CMIElement,\n    );\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async commit(callbackName: string, checkTerminated: boolean = false): Promise<string> {\n    this.clearScheduledCommit();\n\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.COMMIT_BEFORE_INIT,\n        this._error_codes.COMMIT_AFTER_TERM,\n      )\n    ) {\n      const result = await this.storeData(false);\n      if ((result.errorCode ?? 0) > 0) {\n        this.throwSCORMError(\"api\", result.errorCode);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      this.apiLog(callbackName, \" Result: \" + returnValue, LogLevelEnum.DEBUG, \"HttpRequest\");\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      this.processListeners(callbackName);\n\n      // If online and there is offline data pending, attempt to sync it\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._offlineStorageService.isDeviceOnline() &&\n        this._courseId\n      ) {\n        this._offlineStorageService.hasPendingOfflineData(this._courseId).then((hasPendingData) => {\n          if (hasPendingData) {\n            this.apiLog(callbackName, \"Syncing pending offline data\", LogLevelEnum.INFO);\n            this._offlineStorageService?.syncOfflineData().then((syncSuccess) => {\n              if (syncSuccess) {\n                this.apiLog(callbackName, \"Successfully synced offline data\", LogLevelEnum.INFO);\n                this.processListeners(\"OfflineDataSynced\");\n              } else {\n                this.apiLog(callbackName, \"Failed to sync some offline data\", LogLevelEnum.WARN);\n              }\n            });\n          }\n        });\n      }\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Returns last error code\n   * @param {string} callbackName\n   * @return {string}\n   */\n  getLastError(callbackName: string): string {\n    const returnValue = String(this.lastErrorCode);\n\n    this.processListeners(callbackName);\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getErrorString(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getDiagnostic(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode, true);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Checks the LMS state and ensures it has been initialized.\n   *\n   * @param {boolean} checkTerminated\n   * @param {number} beforeInitError\n   * @param {number} afterTermError\n   * @return {boolean}\n   */\n  checkState(checkTerminated: boolean, beforeInitError: number, afterTermError: number): boolean {\n    if (this.isNotInitialized()) {\n      this.throwSCORMError(\"api\", beforeInitError);\n      return false;\n    } else if (checkTerminated && this.isTerminated()) {\n      this.throwSCORMError(\"api\", afterTermError);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {(string|number)} _errorNumber\n   * @param {boolean} _detail\n   * @return {string}\n   * @abstract\n   */\n  getLmsErrorMessageDetails(_errorNumber: string | number, _detail: boolean = false): string {\n    throw new Error(\"The getLmsErrorMessageDetails method has not been implemented\");\n  }\n\n  /**\n   * Gets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @return {string}\n   * @abstract\n   */\n  getCMIValue(_CMIElement: string): string {\n    throw new Error(\"The getCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Sets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @param {any} _value\n   * @return {string}\n   * @abstract\n   */\n  setCMIValue(_CMIElement: string, _value: any): string {\n    throw new Error(\"The setCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Shared API method to set a valid for a given element.\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  _commonSetCMIValue(\n    methodName: string,\n    scorm2004: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (!CMIElement || CMIElement === \"\") {\n      return global_constants.SCORM_FALSE;\n    }\n\n    this.lastErrorCode = \"0\";\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap | BaseCMI = this as StringKeyMap;\n    let returnValue = global_constants.SCORM_FALSE;\n    let foundFirstIndex = false;\n\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      const attribute = structure[idx];\n\n      if (idx === structure.length - 1) {\n        if (scorm2004 && attribute.substring(0, 8) === \"{target=\") {\n          if (this.isInitialized()) {\n            this.throwSCORMError(CMIElement, this._error_codes.READ_ONLY_ELEMENT);\n            break;\n          } else {\n            refObject = {\n              ...refObject,\n              attribute: value,\n            };\n          }\n        } else if (!this._checkObjectHasProperty(refObject as StringKeyMap, attribute)) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        } else {\n          if (\n            stringMatches(CMIElement, \"\\\\.correct_responses\\\\.\\\\d+$\") &&\n            this.isInitialized() &&\n            attribute !== \"pattern\"\n          ) {\n            this.validateCorrectResponse(CMIElement, value);\n            if (this.lastErrorCode !== \"0\") {\n              this.throwSCORMError(CMIElement, this._error_codes.TYPE_MISMATCH);\n              break;\n            }\n          }\n\n          if (!scorm2004 || this._errorHandlingService.lastErrorCode === \"0\") {\n            if (attribute === \"__proto__\" || attribute === \"constructor\") {\n              this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n              break;\n            }\n            (refObject as StringKeyMap)[attribute] = value;\n            returnValue = global_constants.SCORM_TRUE;\n          }\n        }\n      } else {\n        refObject = (refObject as StringKeyMap)[attribute] as StringKeyMap;\n        if (!refObject) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n\n        if (refObject instanceof CMIArray) {\n          const index = parseInt(structure[idx + 1], 10);\n\n          // SCO is trying to set an item on an array\n          if (!isNaN(index)) {\n            const item = refObject.childArray[index];\n\n            if (item) {\n              refObject = item;\n              foundFirstIndex = true;\n            } else {\n              const newChild = this.getChildElement(CMIElement, value, foundFirstIndex);\n              foundFirstIndex = true;\n\n              if (!newChild) {\n                if (this.lastErrorCode === \"0\") {\n                  this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n                }\n                break;\n              } else {\n                if (refObject.initialized) newChild.initialize();\n                refObject.childArray[index] = newChild;\n                refObject = newChild;\n              }\n            }\n\n            // Have to update idx value to skip the array position\n            idx++;\n          }\n        }\n      }\n    }\n\n    if (returnValue === global_constants.SCORM_FALSE) {\n      this.apiLog(\n        methodName,\n        `There was an error setting the value for: ${CMIElement}, value of: ${value}`,\n        LogLevelEnum.WARN,\n      );\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @return {any}\n   */\n  _commonGetCMIValue(methodName: string, scorm2004: boolean, CMIElement: string): any {\n    if (!CMIElement || CMIElement === \"\") {\n      return \"\";\n    }\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap = this as StringKeyMap;\n    let attribute = null;\n\n    const uninitializedErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) has not been initialized.`;\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      attribute = structure[idx];\n\n      if (!scorm2004) {\n        if (idx === structure.length - 1) {\n          if (!this._checkObjectHasProperty(refObject, attribute)) {\n            this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n            return;\n          }\n        }\n      } else {\n        if (\n          String(attribute).substring(0, 8) === \"{target=\" &&\n          typeof refObject._isTargetValid == \"function\"\n        ) {\n          const target = String(attribute).substring(8, String(attribute).length - 9);\n          return refObject._isTargetValid(target);\n        } else if (!this._checkObjectHasProperty(refObject, attribute)) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          return;\n        }\n      }\n\n      refObject = refObject[attribute] as StringKeyMap;\n      if (refObject === undefined) {\n        this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n        break;\n      }\n\n      if (refObject instanceof CMIArray) {\n        const index = parseInt(structure[idx + 1], 10);\n\n        // SCO is trying to set an item on an array\n        if (!isNaN(index)) {\n          const item = refObject.childArray[index];\n\n          if (item) {\n            refObject = item;\n          } else {\n            this.throwSCORMError(\n              CMIElement,\n              this._error_codes.VALUE_NOT_INITIALIZED,\n              uninitializedErrorMessage,\n            );\n            break;\n          }\n\n          // Have to update idx value to skip the array position\n          idx++;\n        }\n      }\n    }\n\n    if (refObject === null || refObject === undefined) {\n      if (!scorm2004) {\n        if (attribute === \"_children\") {\n          this.throwSCORMError(CMIElement, this._error_codes.CHILDREN_ERROR, undefined);\n        } else if (attribute === \"_count\") {\n          this.throwSCORMError(CMIElement, this._error_codes.COUNT_ERROR, undefined);\n        }\n      }\n    } else {\n      return refObject;\n    }\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isInitialized(): boolean {\n    return this.currentState === global_constants.STATE_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_NOT_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isNotInitialized(): boolean {\n    return this.currentState === global_constants.STATE_NOT_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_TERMINATED\n   *\n   * @return {boolean}\n   */\n  isTerminated(): boolean {\n    return this.currentState === global_constants.STATE_TERMINATED;\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event.\n   * This method allows you to register a callback function that will be executed\n   * when the specified event occurs.\n   *\n   * @param {string} listenerName - The name of the event to listen for (e.g., \"Initialize\", \"Terminate\", \"GetValue\", \"SetValue\", \"Commit\")\n   * @param {function} callback - The function to execute when the event occurs. The callback will receive relevant event data.\n   * @example\n   * // Listen for Initialize events\n   * api.on(\"Initialize\", function() {\n   *   console.log(\"API has been initialized\");\n   * });\n   *\n   * // Listen for SetValue events\n   * api.on(\"SetValue\", function(element, value) {\n   *   console.log(\"Setting \" + element + \" to \" + value);\n   * });\n   */\n  on(listenerName: string, callback: Function) {\n    this._eventService.on(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener.\n   * This method removes a previously registered callback for an event.\n   * Both the event name and the callback reference must match what was used in the 'on' method.\n   *\n   * @param {string} listenerName - The name of the event to stop listening for\n   * @param {function} callback - The callback function to remove\n   * @example\n   * // Remove a specific listener\n   * const myCallback = function() { console.log(\"API initialized\"); };\n   * api.on(\"Initialize\", myCallback);\n   * // Later, when you want to remove it:\n   * api.off(\"Initialize\", myCallback);\n   */\n  off(listenerName: string, callback: Function) {\n    this._eventService.off(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event.\n   * This method removes all callbacks registered for the specified event.\n   *\n   * @param {string} listenerName - The name of the event to clear all listeners for\n   * @example\n   * // Remove all listeners for the Initialize event\n   * api.clear(\"Initialize\");\n   */\n  clear(listenerName: string) {\n    this._eventService.clear(listenerName);\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created for a specific event.\n   * This method is called internally when SCORM events occur to notify all registered listeners.\n   * It triggers all callback functions registered for the specified event.\n   *\n   * @param {string} functionName - The name of the function/event that occurred\n   * @param {string} CMIElement - Optional CMI element involved in the event\n   * @param {any} value - Optional value associated with the event\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this._eventService.processListeners(functionName, CMIElement, value);\n  }\n\n  /**\n   * Throws a SCORM error with the specified error number and optional message.\n   * This method sets the last error code and can be used to indicate that an operation failed.\n   * The error number should correspond to one of the standard SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The SCORM error code to set\n   * @param {string} message - Optional custom error message to provide additional context\n   * @example\n   * // Throw a \"not initialized\" error\n   * this.throwSCORMError(301, \"The API must be initialized before calling GetValue\");\n   */\n  throwSCORMError(CMIElement: string, errorNumber: number, message?: string) {\n    this._errorHandlingService.throwSCORMError(CMIElement, errorNumber, message);\n  }\n\n  /**\n   * Clears the last SCORM error code when an operation succeeds.\n   * This method is typically called after successful API operations to reset the error state.\n   * It only clears the error if the success parameter is \"true\".\n   *\n   * @param {string} success - A string indicating whether the operation succeeded (\"true\" or \"false\")\n   * @example\n   * // Clear error after successful operation\n   * this.clearSCORMError(\"true\");\n   */\n  clearSCORMError(success: string) {\n    this._errorHandlingService.clearSCORMError(success);\n  }\n\n  /**\n   * Load the CMI from a flattened JSON object.\n   * This method populates the CMI data model from a flattened JSON structure\n   * where keys represent CMI element paths (e.g., \"cmi.core.student_id\").\n   *\n   * @param {StringKeyMap} json - The flattened JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a flattened JSON structure\n   * api.loadFromFlattenedJSON({\n   *   \"cmi.core.student_id\": \"12345\",\n   *   \"cmi.core.student_name\": \"John Doe\",\n   *   \"cmi.core.lesson_status\": \"incomplete\"\n   * });\n   */\n  loadFromFlattenedJSON(json: StringKeyMap, CMIElement?: string) {\n    if (!CMIElement) {\n      // by default, we start from a blank string because we're expecting each element to start with `cmi`\n      CMIElement = \"\";\n    }\n\n    this._serializationService.loadFromFlattenedJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Returns a flattened JSON object representing the current CMI data.\n   */\n  getFlattenedCMI(): StringKeyMap {\n    return Utilities.flatten(this.renderCMIToJSONObject());\n  }\n\n  /**\n   * Loads CMI data from a hierarchical JSON object.\n   * This method populates the CMI data model from a nested JSON structure\n   * that mirrors the CMI object hierarchy.\n   *\n   * @param {StringKeyMap} json - The hierarchical JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a hierarchical JSON structure\n   * api.loadFromJSON({\n   *   core: {\n   *     student_id: \"12345\",\n   *     student_name: \"John Doe\",\n   *     lesson_status: \"incomplete\"\n   *   },\n   *   objectives: [\n   *     { id: \"obj1\", score: { raw: 85 } }\n   *   ]\n   * });\n   */\n  loadFromJSON(json: StringKeyMap, CMIElement: string = \"\") {\n    if (\n      (!CMIElement || CMIElement === \"\") &&\n      !Object.hasOwnProperty.call(json, \"cmi\") &&\n      !Object.hasOwnProperty.call(json, \"adl\")\n    ) {\n      // providing a backward compatibility for the old v1 API\n      CMIElement = \"cmi\";\n    }\n    this._serializationService.loadFromJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Render the CMI object to a JSON string for sending to an LMS.\n   * This method serializes the current CMI data model to a JSON string.\n   * The output format is controlled by the sendFullCommit setting.\n   *\n   * @return {string} A JSON string representation of the CMI data\n   * @example\n   * // Get the current CMI data as a JSON string\n   * const jsonString = api.renderCMIToJSONString();\n   * console.log(jsonString); // '{\"core\":{\"student_id\":\"12345\",...}}'\n   */\n  renderCMIToJSONString(): string {\n    return this._serializationService.renderCMIToJSONString(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Returns a JavaScript object representing the current CMI data.\n   * This method creates a plain JavaScript object that mirrors the\n   * structure of the CMI data model, suitable for further processing.\n   *\n   * @return {StringKeyMap} A JavaScript object representing the CMI data\n   * @example\n   * // Get the current CMI data as a JavaScript object\n   * const cmiObject = api.renderCMIToJSONObject();\n   * console.log(cmiObject.core.student_id); // \"12345\"\n   */\n  renderCMIToJSONObject(): StringKeyMap {\n    return this._serializationService.renderCMIToJSONObject(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Process an HTTP request\n   *\n   * @param {string} url - The URL to send the request to\n   * @param {CommitObject | StringKeyMap | Array<any>} params - The parameters to send\n   * @param {boolean} immediate - Whether to send the request immediately without waiting\n   * @returns {Promise<ResultObject>} - The result of the request\n   * @async\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n  ): Promise<ResultObject> {\n    // If offline support is enabled and device is offline, store data locally instead of sending\n    if (\n      this.settings.enableOfflineSupport &&\n      this._offlineStorageService &&\n      !this._offlineStorageService.isDeviceOnline() &&\n      this._courseId\n    ) {\n      this.apiLog(\n        \"processHttpRequest\",\n        \"Device is offline, storing data locally\",\n        LogLevelEnum.INFO,\n      );\n\n      if (params && typeof params === \"object\" && \"cmi\" in params) {\n        return await this._offlineStorageService.storeOffline(\n          this._courseId,\n          params as CommitObject,\n        );\n      } else {\n        this.apiLog(\n          \"processHttpRequest\",\n          \"Invalid commit data format for offline storage\",\n          LogLevelEnum.ERROR,\n        );\n        return {\n          result: global_constants.SCORM_FALSE,\n          errorCode: this._error_codes.GENERAL,\n        };\n      }\n    }\n\n    // Otherwise, proceed with normal HTTP request\n    return await this._httpService.processHttpRequest(\n      url,\n      params,\n      immediate,\n      (functionName, message, level, element) => this.apiLog(functionName, message, level, element),\n      (functionName, CMIElement, value) => this.processListeners(functionName, CMIElement, value),\n    );\n  }\n\n  /**\n   * Schedules a commit operation to occur after a specified delay.\n   * This method is used to implement auto-commit functionality, where data\n   * is periodically sent to the LMS without requiring explicit commit calls.\n   *\n   * @param {number} when - The number of milliseconds to wait before committing\n   * @param {string} callback - The name of the commit event callback\n   * @example\n   * // Schedule a commit to happen in 60 seconds\n   * api.scheduleCommit(60000, \"commit\");\n   */\n  scheduleCommit(when: number, callback: string) {\n    if (!this._timeout) {\n      this._timeout = new ScheduledCommit(this, when, callback);\n      this.apiLog(\"scheduleCommit\", \"scheduled\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Clears and cancels any currently scheduled commits.\n   * This method is typically called when an explicit commit is performed\n   * or when the API is terminated, to prevent redundant commits.\n   *\n   * @example\n   * // Cancel any pending scheduled commits\n   * api.clearScheduledCommit();\n   */\n  clearScheduledCommit() {\n    if (this._timeout) {\n      this._timeout.cancel();\n      this._timeout = undefined;\n      this.apiLog(\"clearScheduledCommit\", \"cleared\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Checks if an object has a specific property, using multiple detection methods.\n   * This method performs a thorough check for property existence by:\n   * 1. Checking if it's an own property using Object.hasOwnProperty\n   * 2. Checking if it's defined in the prototype with a property descriptor\n   * 3. Checking if it's accessible via the 'in' operator (includes inherited properties)\n   *\n   * @param {StringKeyMap} StringKeyMap - The object to check for the property\n   * @param {string} attribute - The property name to look for\n   * @return {boolean} True if the property exists on the object or its prototype chain\n   * @private\n   *\n   * @example\n   * // Check for an own property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"name\"); // Returns true\n   *\n   * @example\n   * // Check for an inherited property\n   * class Parent { get type() { return \"parent\"; } }\n   * const child = Object.create(new Parent());\n   * this._checkObjectHasProperty(child, \"type\"); // Returns true\n   *\n   * @example\n   * // Check for a non-existent property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"age\"); // Returns false\n   */\n  private _checkObjectHasProperty(StringKeyMap: StringKeyMap, attribute: string): boolean {\n    return (\n      Object.hasOwnProperty.call(StringKeyMap, attribute) ||\n      Object.getOwnPropertyDescriptor(Object.getPrototypeOf(StringKeyMap), attribute) != null ||\n      attribute in StringKeyMap\n    );\n  }\n\n  /**\n   * Handles exceptions that occur when accessing CMI values.\n   * This method delegates to the ErrorHandlingService to process exceptions\n   * that occur during CMI data operations, ensuring consistent error handling\n   * throughout the API.\n   *\n   * @param {string} CMIElement\n   * @param {any} e - The exception that was thrown\n   * @param {string} returnValue - The default return value to use if an error occurs\n   * @return {string} Either the original returnValue or SCORM_FALSE if an error occurred\n   * @private\n   *\n   * @example\n   * // Handle a validation error when getting a CMI value\n   * try {\n   *   return this.getCMIValue(\"cmi.core.score.raw\");\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"\");\n   * }\n   *\n   * @example\n   * // Handle a general error when setting a CMI value\n   * try {\n   *   this.setCMIValue(\"cmi.core.lesson_status\", \"completed\");\n   *   return \"true\";\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"false\");\n   * }\n   */\n  private handleValueAccessException(CMIElement: string, e: any, returnValue: string): string {\n    if (e instanceof ValidationError) {\n      this.lastErrorCode = String(e.errorCode);\n      returnValue = global_constants.SCORM_FALSE;\n      this.throwSCORMError(CMIElement, e.errorCode, e.errorMessage);\n    } else {\n      if (e instanceof Error && e.message) {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, e.message);\n      } else {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, \"Unknown error\");\n      }\n    }\n    return returnValue;\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS.\n   * This method delegates to the SerializationService to create a properly\n   * formatted object containing the CMI data that needs to be sent to the LMS.\n   * The format and content of the commit object depend on whether this is a\n   * regular commit or a termination commit.\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @return {CommitObject|StringKeyMap|Array} The formatted commit object\n   * @protected\n   *\n   * @example\n   * // Create a regular commit object\n   * const regularCommit = this.getCommitObject(false);\n   * // Result might be: { cmi: { core: { lesson_status: \"incomplete\" } } }\n   *\n   * @example\n   * // Create a termination commit object (includes total_time)\n   * const terminationCommit = this.getCommitObject(true);\n   * // Result might be: { cmi: { core: { lesson_status: \"completed\", total_time: \"PT1H30M\" } } }\n   */\n  protected getCommitObject(terminateCommit: boolean): CommitObject | StringKeyMap | Array<any> {\n    return this._serializationService.getCommitObject(\n      terminateCommit,\n      this.settings.alwaysSendTotalTime,\n      this.settings.renderCommonCommitFields,\n      (terminateCommit: boolean, includeTotalTime?: boolean) =>\n        this.renderCommitObject(terminateCommit, includeTotalTime),\n      (terminateCommit: boolean, includeTotalTime?: boolean) =>\n        this.renderCommitCMI(terminateCommit, includeTotalTime),\n      this.settings.logLevel,\n    );\n  }\n}\n","import { CMI } from \"./cmi/scorm12/cmi\";\nimport * as Utilities from \"./utilities\";\nimport { StringKeyMap, stringMatches } from \"./utilities\";\nimport { global_constants, scorm12_constants } from \"./constants/api_constants\";\nimport { scorm12_errors } from \"./constants/error_codes\";\n\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport { CMIObjectivesObject } from \"./cmi/scorm12/objectives\";\nimport {\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n} from \"./cmi/scorm12/interactions\";\nimport { NAV } from \"./cmi/scorm12/nav\";\nimport { CommitObject, ResultObject, ScoreObject, Settings } from \"./types/api_types\";\nimport { CompletionStatus, SuccessStatus } from \"./constants/enums\";\nimport BaseAPI from \"./BaseAPI\";\nimport { scorm12_regex } from \"./constants/regex\";\n\n/**\n * API class for SCORM 1.2\n */\nclass Scorm12API extends BaseAPI {\n  /**\n   * Constructor for SCORM 1.2 API\n   * @param {object} settings\n   */\n  constructor(settings?: Settings) {\n    if (settings) {\n      if (settings.mastery_override === undefined) {\n        settings.mastery_override = false;\n      }\n    }\n\n    super(scorm12_errors, settings);\n\n    this.cmi = new CMI();\n    this.nav = new NAV();\n\n    // Rename functions to match 1.2 Spec and expose to modules\n    this.LMSInitialize = this.lmsInitialize;\n    this.LMSFinish = this.lmsFinish;\n    this.LMSGetValue = this.lmsGetValue;\n    this.LMSSetValue = this.lmsSetValue;\n    this.LMSCommit = this.lmsCommit;\n    this.LMSGetLastError = this.lmsGetLastError;\n    this.LMSGetErrorString = this.lmsGetErrorString;\n    this.LMSGetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  public statusSetByModule = false;\n\n  cmi: CMI;\n  nav: NAV;\n\n  LMSInitialize: () => string;\n  LMSFinish: () => string;\n  LMSGetValue: (CMIElement: string) => string;\n  LMSSetValue: (CMIElement: string, value: any) => string;\n  LMSCommit: () => string;\n  LMSGetLastError: () => string;\n  LMSGetErrorString: (CMIErrorCode: string) => string;\n  LMSGetDiagnostic: (CMIErrorCode: string) => string;\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset(settings?: Settings) {\n    this.commonReset(settings);\n\n    this.cmi?.reset();\n    this.nav?.reset();\n  }\n\n  /**\n   * lmsInitialize function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize(): string {\n    this.cmi.initialize();\n    if (this.cmi.core.lesson_status) {\n      this.statusSetByModule = true;\n    } else {\n      this.cmi.core.lesson_status = \"not attempted\";\n    }\n    return this.initialize(\n      \"LMSInitialize\",\n      \"LMS was already initialized!\",\n      \"LMS is already finished!\",\n    );\n  }\n\n  /**\n   * LMSFinish function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish(): string {\n    (async () => {\n      await this.internalFinish();\n    })();\n    return global_constants.SCORM_TRUE;\n  }\n\n  async internalFinish(): Promise<string> {\n    const result = await this.terminate(\"LMSFinish\", true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      if (this.nav.event !== \"\") {\n        if (this.nav.event === \"continue\") {\n          this.processListeners(\"SequenceNext\");\n        } else {\n          this.processListeners(\"SequencePrevious\");\n        }\n      } else if (this.settings.autoProgress) {\n        this.processListeners(\"SequenceNext\");\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * LMSGetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement: string): string {\n    return this.getValue(\"LMSGetValue\", false, CMIElement);\n  }\n\n  /**\n   * LMSSetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement: string, value: any): string {\n    if (CMIElement === \"cmi.core.lesson_status\") {\n      this.statusSetByModule = true;\n    }\n    return this.setValue(\"LMSSetValue\", \"LMSCommit\", false, CMIElement, value);\n  }\n\n  /**\n   * LMSCommit function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit(): string {\n    if (this.settings.asyncCommit) {\n      this.scheduleCommit(500, \"LMSCommit\");\n    } else {\n      (async () => {\n        await this.commit(\"LMSCommit\", false);\n      })();\n    }\n    return global_constants.SCORM_TRUE;\n  }\n\n  /**\n   * LMSGetLastError function from SCORM 1.2 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError(): string {\n    return this.getLastError(\"LMSGetLastError\");\n  }\n\n  /**\n   * LMSGetErrorString function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode: string): string {\n    return this.getErrorString(\"LMSGetErrorString\", CMIErrorCode);\n  }\n\n  /**\n   * LMSGetDiagnostic function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode: string): string {\n    return this.getDiagnostic(\"LMSGetDiagnostic\", CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  override setCMIValue(CMIElement: string, value: any): string {\n    return this._commonSetCMIValue(\"LMSSetValue\", false, CMIElement, value);\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  override getCMIValue(CMIElement: string): any {\n    return this._commonGetCMIValue(\"getCMIValue\", false, CMIElement);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {*} _value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI|null}\n   */\n  getChildElement(CMIElement: string, _value: any, foundFirstIndex: boolean): BaseCMI | null {\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      return new CMIObjectivesObject();\n    } else if (\n      foundFirstIndex &&\n      stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+\")\n    ) {\n      return new CMIInteractionsCorrectResponsesObject();\n    } else if (\n      foundFirstIndex &&\n      stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+\")\n    ) {\n      return new CMIInteractionsObjectivesObject();\n    } else if (!foundFirstIndex && stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\")) {\n      return new CMIInteractionsObject();\n    }\n\n    return null;\n  }\n\n  /**\n   * Validates Correct Response values\n   *\n   * @param {string} _CMIElement\n   * @param {*} _value\n   */\n  validateCorrectResponse(_CMIElement: string, _value: any) {\n    // do nothing\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {number|string} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  override getLmsErrorMessageDetails(errorNumber: number | string, detail: boolean): string {\n    let basicMessage = \"No Error\";\n    let detailMessage = \"No Error\";\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (scorm12_constants.error_descriptions[errorNumber]) {\n      basicMessage = scorm12_constants.error_descriptions[errorNumber].basicMessage;\n      detailMessage = scorm12_constants.error_descriptions[errorNumber].detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {Scorm12API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI: Scorm12API) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} includeTotalTime - Whether to include total time in the commit data\n   * @return {object|Array}\n   */\n  renderCommitCMI(\n    terminateCommit: boolean,\n    includeTotalTime: boolean = false,\n  ): StringKeyMap | Array<string> {\n    const cmiExport: StringKeyMap = this.renderCMIToJSONObject();\n\n    if (terminateCommit || includeTotalTime) {\n      (cmiExport.cmi as any).core.total_time = this.cmi.getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened: StringKeyMap = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case \"flattened\":\n        return Utilities.flatten(cmiExport);\n      case \"params\":\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case \"json\":\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} includeTotalTime - Whether to include total time in the commit data\n   * @return {CommitObject}\n   */\n  renderCommitObject(terminateCommit: boolean, includeTotalTime: boolean = false): CommitObject {\n    const cmiExport = this.renderCommitCMI(terminateCommit, includeTotalTime);\n    const calculateTotalTime = terminateCommit || includeTotalTime;\n    const totalTimeHHMMSS = calculateTotalTime ? this.cmi.getCurrentTotalTime() : \"\";\n    const totalTimeSeconds = Utilities.getTimeAsSeconds(totalTimeHHMMSS, scorm12_regex.CMITimespan);\n    const lessonStatus = this.cmi.core.lesson_status;\n    let completionStatus = CompletionStatus.UNKNOWN;\n    let successStatus = SuccessStatus.UNKNOWN;\n    if (lessonStatus) {\n      completionStatus =\n        lessonStatus === \"completed\" || lessonStatus === \"passed\"\n          ? CompletionStatus.COMPLETED\n          : CompletionStatus.INCOMPLETE;\n      if (lessonStatus === \"passed\") {\n        successStatus = SuccessStatus.PASSED;\n      } else if (lessonStatus === \"failed\") {\n        successStatus = SuccessStatus.FAILED;\n      }\n    }\n\n    const scoreObject: ScoreObject = this.cmi?.core?.score?.getScoreObject() || {};\n    const commitObject: CommitObject = {\n      successStatus: successStatus,\n      completionStatus: completionStatus,\n      runtimeData: cmiExport as StringKeyMap,\n      totalTimeSeconds: totalTimeSeconds,\n    };\n    if (scoreObject) {\n      commitObject.score = scoreObject;\n    }\n    return commitObject;\n  }\n\n  /**\n   * Attempts to store the data to the LMS\n   *\n   * @param {boolean} terminateCommit\n   * @return {ResultObject}\n   */\n  async storeData(terminateCommit: boolean): Promise<ResultObject> {\n    if (terminateCommit) {\n      const originalStatus = this.cmi.core.lesson_status;\n      if (\n        !this.cmi.core.lesson_status ||\n        (!this.statusSetByModule && this.cmi.core.lesson_status === \"not attempted\")\n      ) {\n        this.cmi.core.lesson_status = \"completed\";\n      }\n\n      if (this.cmi.core.lesson_mode === \"normal\") {\n        if (this.cmi.core.credit === \"credit\") {\n          if (\n            this.settings.mastery_override &&\n            this.cmi.student_data.mastery_score !== \"\" &&\n            this.cmi.core.score.raw !== \"\"\n          ) {\n            this.cmi.core.lesson_status =\n              parseFloat(this.cmi.core.score.raw) >= parseFloat(this.cmi.student_data.mastery_score)\n                ? \"passed\"\n                : \"failed\";\n          }\n        }\n      } else if (this.cmi.core.lesson_mode === \"browse\") {\n        if (\n          ((this.startingData?.cmi as any)?.core?.lesson_status || \"\") === \"\" &&\n          originalStatus === \"not attempted\"\n        ) {\n          this.cmi.core.lesson_status = \"browsed\";\n        }\n      }\n    }\n\n    const commitObject = this.getCommitObject(terminateCommit);\n    if (typeof this.settings.lmsCommitUrl === \"string\") {\n      return await this.processHttpRequest(\n        this.settings.lmsCommitUrl,\n        commitObject,\n        terminateCommit,\n      );\n    } else {\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    }\n  }\n}\n\nexport default Scorm12API;\n","import { ValidationError } from \"../exceptions\";\nimport { aicc_constants } from \"../constants/api_constants\";\n\nconst aicc_errors = aicc_constants.error_descriptions;\n\n/**\n * AICC Validation Error\n */\nexport class AICCValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(aicc_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        aicc_errors[String(errorCode)].basicMessage,\n        aicc_errors[String(errorCode)].detailMessage,\n      );\n    } else {\n      super(CMIElement, 101, aicc_errors[\"101\"].basicMessage, aicc_errors[\"101\"].detailMessage);\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, AICCValidationError.prototype);\n  }\n}\n","import { checkValidFormat } from \"../common/validation\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function checkAICCValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm12_errors.TYPE_MISMATCH,\n    AICCValidationError,\n    allowEmptyString,\n  );\n}\n","import { CMIArray } from \"../common/array\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { aicc_regex } from \"../../constants/regex\";\n\n/**\n * AICC Evaluation object\n */\nexport class CMIEvaluation extends BaseCMI {\n  /**\n   * Constructor for AICC Evaluation object\n   */\n  constructor() {\n    super(\"cmi.evaluation\");\n    this.comments = new CMIEvaluationComments();\n  }\n\n  public comments: CMIEvaluationComments;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.comments?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this.comments?.reset();\n  }\n\n  /**\n   * toJSON for cmi.evaluation object\n   * @return {{comments: CMIEvaluationComments}}\n   */\n  toJSON(): {\n    comments: CMIEvaluationComments;\n  } {\n    this.jsonString = true;\n    const result = {\n      comments: this.comments,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing AICC's cmi.evaluation.comments object\n */\n\nclass CMIEvaluationComments extends CMIArray {\n  /**\n   * Constructor for AICC Evaluation Comments object\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.evaluation.comments\",\n      children: aicc_constants.comments_children,\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: AICCValidationError,\n    });\n  }\n}\n\n/**\n * Class for AICC Evaluation Comments\n */\nexport class CMIEvaluationCommentsObject extends BaseCMI {\n  private _content = \"\";\n  private _location = \"\";\n  private _time = \"\";\n\n  /**\n   * Constructor for Evaluation Comments\n   */\n  constructor() {\n    super(\"cmi.evaluation.comments.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._content = \"\";\n    this._location = \"\";\n    this._time = \"\";\n  }\n\n  /**\n   * Getter for _content\n   * @return {string}\n   */\n  get content(): string {\n    return this._content;\n  }\n\n  /**\n   * Setter for _content\n   * @param {string} content\n   */\n  set content(content: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".content\", content, aicc_regex.CMIString256)) {\n      this._content = content;\n    }\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".location\", location, aicc_regex.CMIString256)) {\n      this._location = location;\n    }\n  }\n\n  /**\n   * Getter for _time\n   * @return {string}\n   */\n  get time(): string {\n    return this._time;\n  }\n\n  /**\n   * Setting for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".time\", time, aicc_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.evaluation.comments.n object\n   * @return {\n   *    {\n   *      content: string,\n   *      location: string,\n   *      time: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    content: string;\n    location: string;\n    time: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      content: this.content,\n      location: this.location,\n      time: this.time,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { CMIStudentPreference } from \"../scorm12/student_preference\";\n\n/**\n * StudentPreferences class for AICC\n */\nexport class AICCStudentPreferences extends CMIStudentPreference {\n  /**\n   * Constructor for AICC Student Preferences object\n   */\n  constructor() {\n    super(aicc_constants.student_preference_children);\n    this.windows = new CMIArray({\n      CMIElement: \"cmi.student_preference.windows\",\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: AICCValidationError,\n      children: \"\",\n    });\n  }\n\n  public windows: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.windows?.initialize();\n  }\n\n  private _lesson_type = \"\";\n  private _text_color = \"\";\n  private _text_location = \"\";\n  private _text_size = \"\";\n  private _video = \"\";\n\n  /**\n   * Getter for _lesson_type\n   * @return {string}\n   */\n  get lesson_type(): string {\n    return this._lesson_type;\n  }\n\n  /**\n   * Setter for _lesson_type\n   * @param {string} lesson_type\n   */\n  set lesson_type(lesson_type: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".lesson_type\", lesson_type, aicc_regex.CMIString256)\n    ) {\n      this._lesson_type = lesson_type;\n    }\n  }\n\n  /**\n   * Getter for _text_color\n   * @return {string}\n   */\n  get text_color(): string {\n    return this._text_color;\n  }\n\n  /**\n   * Setter for _text_color\n   * @param {string} text_color\n   */\n  set text_color(text_color: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".text_color\", text_color, aicc_regex.CMIString256)\n    ) {\n      this._text_color = text_color;\n    }\n  }\n\n  /**\n   * Getter for _text_location\n   * @return {string}\n   */\n  get text_location(): string {\n    return this._text_location;\n  }\n\n  /**\n   * Setter for _text_location\n   * @param {string} text_location\n   */\n  set text_location(text_location: string) {\n    if (\n      checkAICCValidFormat(\n        this._cmi_element + \".text_location\",\n        text_location,\n        aicc_regex.CMIString256,\n      )\n    ) {\n      this._text_location = text_location;\n    }\n  }\n\n  /**\n   * Getter for _text_size\n   * @return {string}\n   */\n  get text_size(): string {\n    return this._text_size;\n  }\n\n  /**\n   * Setter for _text_size\n   * @param {string} text_size\n   */\n  set text_size(text_size: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".text_size\", text_size, aicc_regex.CMIString256)\n    ) {\n      this._text_size = text_size;\n    }\n  }\n\n  /**\n   * Getter for _video\n   * @return {string}\n   */\n  get video(): string {\n    return this._video;\n  }\n\n  /**\n   * Setter for _video\n   * @param {string} video\n   */\n  set video(video: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".video\", video, aicc_regex.CMIString256)) {\n      this._video = video;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_preference\n   *\n   * @return {\n   *    {\n   *      audio: string,\n   *      language: string,\n   *      speed: string,\n   *      text: string,\n   *      text_color: string,\n   *      text_location: string,\n   *      text_size: string,\n   *      video: string,\n   *      windows: CMIArray\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    audio: string;\n    language: string;\n    lesson_type: string;\n    speed: string;\n    text: string;\n    text_color: string;\n    text_location: string;\n    text_size: string;\n    video: string;\n    windows: CMIArray;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio: this.audio,\n      language: this.language,\n      lesson_type: this.lesson_type,\n      speed: this.speed,\n      text: this.text,\n      text_color: this.text_color,\n      text_location: this.text_location,\n      text_size: this.text_size,\n      video: this.video,\n      windows: this.windows,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Class representing the AICC cmi.student_demographics object\n */\nexport class CMIStudentDemographics extends BaseCMI {\n  private __children = aicc_constants.student_demographics_children;\n  private _city = \"\";\n  private _class = \"\";\n  private _company = \"\";\n  private _country = \"\";\n  private _experience = \"\";\n  private _familiar_name = \"\";\n  private _instructor_name = \"\";\n  private _title = \"\";\n  private _native_language = \"\";\n  private _state = \"\";\n  private _street_address = \"\";\n  private _telephone = \"\";\n  private _years_experience = \"\";\n\n  /**\n   * Constructor for AICC StudentDemographics object\n   */\n  constructor() {\n    super(\"cmi.student_demographics\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Getter for city\n   * @return {string}\n   */\n  get city(): string {\n    return this._city;\n  }\n\n  /**\n   * Setter for _city. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} city\n   */\n  set city(city: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.city\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._city = city;\n    }\n  }\n\n  /**\n   * Getter for class\n   * @return {string}\n   */\n  get class(): string {\n    return this._class;\n  }\n\n  /**\n   * Setter for _class. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} clazz\n   */\n  set class(clazz: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.class\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._class = clazz;\n    }\n  }\n\n  /**\n   * Getter for company\n   * @return {string}\n   */\n  get company(): string {\n    return this._company;\n  }\n\n  /**\n   * Setter for _company. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} company\n   */\n  set company(company: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.company\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._company = company;\n    }\n  }\n\n  /**\n   * Getter for country\n   * @return {string}\n   */\n  get country(): string {\n    return this._country;\n  }\n\n  /**\n   * Setter for _country. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} country\n   */\n  set country(country: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.country\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._country = country;\n    }\n  }\n\n  /**\n   * Getter for experience\n   * @return {string}\n   */\n  get experience(): string {\n    return this._experience;\n  }\n\n  /**\n   * Setter for _experience. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} experience\n   */\n  set experience(experience: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.experience\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._experience = experience;\n    }\n  }\n\n  /**\n   * Getter for familiar_name\n   * @return {string}\n   */\n  get familiar_name(): string {\n    return this._familiar_name;\n  }\n\n  /**\n   * Setter for _familiar_name. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} familiar_name\n   */\n  set familiar_name(familiar_name: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.familiar_name\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._familiar_name = familiar_name;\n    }\n  }\n\n  /**\n   * Getter for instructor_name\n   * @return {string}\n   */\n  get instructor_name(): string {\n    return this._instructor_name;\n  }\n\n  /**\n   * Setter for _instructor_name. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} instructor_name\n   */\n  set instructor_name(instructor_name: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.instructor_name\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._instructor_name = instructor_name;\n    }\n  }\n\n  /**\n   * Getter for title\n   * @return {string}\n   */\n  get title(): string {\n    return this._title;\n  }\n\n  /**\n   * Setter for _title. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} title\n   */\n  set title(title: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.title\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._title = title;\n    }\n  }\n\n  /**\n   * Getter for native_language\n   * @return {string}\n   */\n  get native_language(): string {\n    return this._native_language;\n  }\n\n  /**\n   * Setter for _native_language. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} native_language\n   */\n  set native_language(native_language: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.native_language\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._native_language = native_language;\n    }\n  }\n\n  /**\n   * Getter for state\n   * @return {string}\n   */\n  get state(): string {\n    return this._state;\n  }\n\n  /**\n   * Setter for _state. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} state\n   */\n  set state(state: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.state\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._state = state;\n    }\n  }\n\n  /**\n   * Getter for street_address\n   * @return {string}\n   */\n  get street_address(): string {\n    return this._street_address;\n  }\n\n  /**\n   * Setter for _street_address. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} street_address\n   */\n  set street_address(street_address: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.street_address\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._street_address = street_address;\n    }\n  }\n\n  /**\n   * Getter for telephone\n   * @return {string}\n   */\n  get telephone(): string {\n    return this._telephone;\n  }\n\n  /**\n   * Setter for _telephone. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} telephone\n   */\n  set telephone(telephone: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.telephone\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._telephone = telephone;\n    }\n  }\n\n  /**\n   * Getter for years_experience\n   * @return {string}\n   */\n  get years_experience(): string {\n    return this._years_experience;\n  }\n\n  /**\n   * Setter for _years_experience. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} years_experience\n   */\n  set years_experience(years_experience: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.years_experience\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._years_experience = years_experience;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_demographics object\n   * @return {\n   *      {\n   *        city: string,\n   *        class: string,\n   *        company: string,\n   *        country: string,\n   *        experience: string,\n   *        familiar_name: string,\n   *        instructor_name: string,\n   *        title: string,\n   *        native_language: string,\n   *        state: string,\n   *        street_address: string,\n   *        telephone: string,\n   *        years_experience: string\n   *      }\n   *    }\n   */\n  toJSON(): {\n    city: string;\n    class: string;\n    company: string;\n    country: string;\n    experience: string;\n    familiar_name: string;\n    instructor_name: string;\n    title: string;\n    native_language: string;\n    state: string;\n    street_address: string;\n    telephone: string;\n    years_experience: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      city: this.city,\n      class: this.class,\n      company: this.company,\n      country: this.country,\n      experience: this.experience,\n      familiar_name: this.familiar_name,\n      instructor_name: this.instructor_name,\n      title: this.title,\n      native_language: this.native_language,\n      state: this.state,\n      street_address: this.street_address,\n      telephone: this.telephone,\n      years_experience: this.years_experience,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { checkAICCValidFormat } from \"./validation\";\n\n/**\n * Class representing the AICC cmi.student_data.tries object\n */\nexport class CMITries extends CMIArray {\n  /**\n   * Constructor for inline Tries Array class\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.student_data.tries\",\n      children: aicc_constants.tries_children,\n    });\n  }\n}\n\n/**\n * Class for AICC Tries\n */\nexport class CMITriesObject extends BaseCMI {\n  private _status = \"\";\n  private _time = \"\";\n\n  /**\n   * Constructor for AICC Tries object\n   */\n  constructor() {\n    super(\"cmi.student_data.tries.n\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.student_data.tries.n.score\",\n      score_children: aicc_constants.score_children,\n      score_range: aicc_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE,\n      errorClass: AICCValidationError,\n    });\n  }\n\n  public score: CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._status = \"\";\n    this._time = \"\";\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for _status\n   * @return {string}\n   */\n  get status(): string {\n    return this._status;\n  }\n\n  /**\n   * Setter for _status\n   * @param {string} status\n   */\n  set status(status: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".status\", status, aicc_regex.CMIStatus2)) {\n      this._status = status;\n    }\n  }\n\n  /**\n   * Getter for _time\n   * @return {string}\n   */\n  get time(): string {\n    return this._time;\n  }\n\n  /**\n   * Setter for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".time\", time, aicc_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data.tries.n object\n   * @return {\n   *    {\n   *      status: string,\n   *      time: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    status: string;\n    time: string;\n    score: CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      status: this.status,\n      time: this.time,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { CMIArray } from \"../common/array\";\n\n/**\n * Class for cmi.student_data.attempt_records array\n */\nexport class CMIAttemptRecords extends CMIArray {\n  /**\n   * Constructor for inline Tries Array class\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.student_data.attempt_records\",\n      children: aicc_constants.attempt_records_children,\n    });\n  }\n}\n\n/**\n * Class for AICC Attempt Records\n */\nexport class CMIAttemptRecordsObject extends BaseCMI {\n  private _lesson_status = \"\";\n\n  /**\n   * Constructor for AICC Attempt Records object\n   */\n  constructor() {\n    super(\"cmi.student_data.attempt_records.n\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.student_data.attempt_records.n.score\",\n      score_children: aicc_constants.score_children,\n      score_range: aicc_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE,\n      errorClass: AICCValidationError,\n    });\n  }\n\n  public score: CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n\n    this._lesson_status = \"\";\n    this.score?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for _lesson_status\n   * @return {string}\n   */\n  get lesson_status(): string {\n    return this._lesson_status;\n  }\n\n  /**\n   * Setter for _lesson_status\n   * @param {string} lesson_status\n   */\n  set lesson_status(lesson_status: string) {\n    if (\n      checkAICCValidFormat(\n        this._cmi_element + \".lesson_status\",\n        lesson_status,\n        aicc_regex.CMIStatus2,\n      )\n    ) {\n      this._lesson_status = lesson_status;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data.attempt_records.n object\n   * @return {\n   *    {\n   *         lesson_status: string,\n   *         score: CMIScore\n   *     }\n   *  }\n   */\n  toJSON(): {\n    lesson_status: string;\n    score: CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      lesson_status: this.lesson_status,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { CMITries } from \"./tries\";\nimport { CMIStudentData } from \"../scorm12/student_data\";\nimport { CMIAttemptRecords } from \"./attempts\";\n\n/**\n * StudentData class for AICC\n */\nexport class AICCCMIStudentData extends CMIStudentData {\n  /**\n   * Constructor for AICC StudentData object\n   */\n  constructor() {\n    super(aicc_constants.student_data_children);\n    this.tries = new CMITries();\n    this.attempt_records = new CMIAttemptRecords();\n  }\n\n  public tries: CMITries;\n  public attempt_records: CMIAttemptRecords;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.tries?.initialize();\n    this.attempt_records?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n    this.tries?.reset(true);\n    this.attempt_records?.reset(true);\n  }\n\n  private _tries_during_lesson = \"\";\n\n  /**\n   * Getter for tries_during_lesson\n   * @return {string}\n   */\n  get tries_during_lesson(): string {\n    return this._tries_during_lesson;\n  }\n\n  /**\n   * Setter for _tries_during_lesson. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} tries_during_lesson\n   */\n  set tries_during_lesson(tries_during_lesson: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_data.tries_during_lesson\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._tries_during_lesson = tries_during_lesson;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data object\n   * @return {\n   *    {\n   *      mastery_score: string,\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      tries: CMITries,\n   *      attempt_records: CMIAttemptRecords\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    mastery_score: string;\n    max_time_allowed: string;\n    time_limit_action: string;\n    tries: CMITries;\n    attempt_records: CMIAttemptRecords;\n  } {\n    this.jsonString = true;\n    const result = {\n      mastery_score: this.mastery_score,\n      max_time_allowed: this.max_time_allowed,\n      time_limit_action: this.time_limit_action,\n      tries: this.tries,\n      attempt_records: this.attempt_records,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { CMIArray } from \"../common/array\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { aicc_constants } from \"../../constants/api_constants\";\n\n/**\n * Class representing the AICC `cmi.paths` object\n */\nexport class CMIPaths extends CMIArray {\n  /**\n   * Constructor for inline Paths Array class\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.paths\",\n      children: aicc_constants.paths_children,\n    });\n  }\n}\n\n/**\n * Class for AICC Paths\n */\nexport class CMIPathsObject extends BaseCMI {\n  private _location_id = \"\";\n  private _date = \"\";\n  private _time = \"\";\n  private _status = \"\";\n  private _why_left = \"\";\n  private _time_in_element = \"\";\n\n  /**\n   * Constructor for AICC Paths objects\n   */\n  constructor() {\n    super(\"cmi.paths.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._location_id = \"\";\n    this._date = \"\";\n    this._time = \"\";\n    this._status = \"\";\n    this._why_left = \"\";\n    this._time_in_element = \"\";\n  }\n\n  /**\n   * Getter for _location_id\n   * @return {string}\n   */\n  get location_id(): string {\n    return this._location_id;\n  }\n\n  /**\n   * Setter for _location_id\n   * @param {string} location_id\n   */\n  set location_id(location_id: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".location_id\", location_id, aicc_regex.CMIString256)\n    ) {\n      this._location_id = location_id;\n    }\n  }\n\n  /**\n   * Getter for _date\n   * @return {string}\n   */\n  get date(): string {\n    return this._date;\n  }\n\n  /**\n   * Setter for _date\n   * @param {string} date\n   */\n  set date(date: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".date\", date, aicc_regex.CMIString256)) {\n      this._date = date;\n    }\n  }\n\n  /**\n   * Getter for _time\n   * @return {string}\n   */\n  get time(): string {\n    return this._time;\n  }\n\n  /**\n   * Setter for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".time\", time, aicc_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * Getter for _status\n   * @return {string}\n   */\n  get status(): string {\n    return this._status;\n  }\n\n  /**\n   * Setter for _status\n   * @param {string} status\n   */\n  set status(status: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".status\", status, aicc_regex.CMIStatus2)) {\n      this._status = status;\n    }\n  }\n\n  /**\n   * Getter for _why_left\n   * @return {string}\n   */\n  get why_left(): string {\n    return this._why_left;\n  }\n\n  /**\n   * Setter for _why_left\n   * @param {string} why_left\n   */\n  set why_left(why_left: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".why_left\", why_left, aicc_regex.CMIString256)) {\n      this._why_left = why_left;\n    }\n  }\n\n  /**\n   * Getter for _time_in_element\n   * @return {string}\n   */\n  get time_in_element(): string {\n    return this._time_in_element;\n  }\n\n  /**\n   * Setter for _time_in_element\n   * @param {string} time_in_element\n   */\n  set time_in_element(time_in_element: string) {\n    if (\n      checkAICCValidFormat(\n        this._cmi_element + \".time_in_element\",\n        time_in_element,\n        aicc_regex.CMITime,\n      )\n    ) {\n      this._time_in_element = time_in_element;\n    }\n  }\n\n  /**\n   * toJSON for cmi.paths.n object\n   * @return {\n   *    {\n   *      location_id: string,\n   *      date: string,\n   *      time: string,\n   *      status: string,\n   *      why_left: string,\n   *      time_in_element: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    location_id: string;\n    date: string;\n    time: string;\n    status: string;\n    why_left: string;\n    time_in_element: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      location_id: this.location_id,\n      date: this.date,\n      time: this.time,\n      status: this.status,\n      why_left: this.why_left,\n      time_in_element: this.time_in_element,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import * as Scorm12CMI from \"../scorm12/cmi\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { CMIEvaluation } from \"./evaluation\";\nimport { AICCStudentPreferences } from \"./student_preferences\";\nimport { CMIStudentDemographics } from \"./student_demographics\";\nimport { AICCCMIStudentData } from \"./student_data\";\nimport { CMIPaths } from \"./paths\";\nimport { CMICore } from \"./core\";\nimport { CMIObjectives } from \"../scorm12/objectives\";\nimport { CMIStudentData } from \"../scorm12/student_data\";\nimport { CMIStudentPreference } from \"../scorm12/student_preference\";\nimport { CMIInteractions } from \"../scorm12/interactions\";\n\n/**\n * CMI Class for AICC\n */\nexport class CMI extends Scorm12CMI.CMI {\n  /**\n   * Constructor for AICC CMI object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean = false) {\n    super(aicc_constants.cmi_children);\n    if (initialized) this.initialize();\n    this.student_preference = new AICCStudentPreferences();\n    this.student_data = new AICCCMIStudentData();\n    this.student_demographics = new CMIStudentDemographics();\n    this.evaluation = new CMIEvaluation();\n    this.paths = new CMIPaths();\n  }\n\n  public override student_data: AICCCMIStudentData;\n  public override student_preference: AICCStudentPreferences;\n  public student_demographics: CMIStudentDemographics;\n  public evaluation: CMIEvaluation;\n  public paths: CMIPaths;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.student_preference?.initialize();\n    this.student_data?.initialize();\n    this.student_demographics?.initialize();\n    this.evaluation?.initialize();\n    this.paths?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions,\n   *      paths: CMIPaths\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    suspend_data: string;\n    launch_data: string;\n    comments: string;\n    comments_from_lms: string;\n    core: CMICore;\n    objectives: CMIObjectives;\n    student_data: CMIStudentData;\n    student_preference: CMIStudentPreference;\n    student_demographics: CMIStudentDemographics;\n    interactions: CMIInteractions;\n    evaluation: CMIEvaluation;\n    paths: CMIPaths;\n  } {\n    this.jsonString = true;\n    const result = {\n      suspend_data: this.suspend_data,\n      launch_data: this.launch_data,\n      comments: this.comments,\n      comments_from_lms: this.comments_from_lms,\n      core: this.core,\n      objectives: this.objectives,\n      student_data: this.student_data,\n      student_preference: this.student_preference,\n      student_demographics: this.student_demographics,\n      interactions: this.interactions,\n      evaluation: this.evaluation,\n      paths: this.paths,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import Scorm12API from \"./Scorm12API\";\nimport { CMI } from \"./cmi/aicc/cmi\";\n\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport { CMITriesObject } from \"./cmi/aicc/tries\";\nimport { CMIAttemptRecordsObject } from \"./cmi/aicc/attempts\";\nimport { CMIEvaluationCommentsObject } from \"./cmi/aicc/evaluation\";\nimport { NAV } from \"./cmi/scorm12/nav\";\nimport { CMIPathsObject } from \"./cmi/aicc/paths\";\nimport { Settings } from \"./types/api_types\";\nimport { stringMatches } from \"./utilities\";\n\n/**\n * The AICC API class\n */\nclass AICC extends Scorm12API {\n  /**\n   * Constructor to create AICC API object\n   * @param {Settings} settings\n   */\n  constructor(settings?: Settings) {\n    super(settings);\n\n    this.cmi = new CMI();\n    this.nav = new NAV();\n  }\n\n  override cmi: CMI;\n  override nav: NAV;\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI | null}\n   */\n  override getChildElement(\n    CMIElement: string,\n    value: any,\n    foundFirstIndex: boolean,\n  ): BaseCMI | null {\n    let newChild = super.getChildElement(CMIElement, value, foundFirstIndex);\n\n    if (!newChild) {\n      if (stringMatches(CMIElement, \"cmi\\\\.evaluation\\\\.comments\\\\.\\\\d+\")) {\n        newChild = new CMIEvaluationCommentsObject();\n      } else if (stringMatches(CMIElement, \"cmi\\\\.student_data\\\\.tries\\\\.\\\\d+\")) {\n        newChild = new CMITriesObject();\n      } else if (stringMatches(CMIElement, \"cmi\\\\.student_data\\\\.attempt_records\\\\.\\\\d+\")) {\n        newChild = new CMIAttemptRecordsObject();\n      } else if (stringMatches(CMIElement, \"cmi\\\\.paths\\\\.\\\\d+\")) {\n        newChild = new CMIPathsObject();\n      }\n    }\n\n    return newChild;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {AICC} newAPI\n   */\n  override replaceWithAnotherScormAPI(newAPI: AICC) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.nav = newAPI.nav;\n  }\n}\n\nexport default AICC;\n","import { ValidationError } from \"../exceptions\";\nimport { scorm2004_constants } from \"../constants/api_constants\";\n\nconst scorm2004_errors = scorm2004_constants.error_descriptions;\n\n/**\n * SCORM 2004 Validation Error\n */\nexport class Scorm2004ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm2004_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm2004_errors[String(errorCode)].basicMessage,\n        scorm2004_errors[String(errorCode)].detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm2004_errors[\"101\"].basicMessage,\n        scorm2004_errors[\"101\"].detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm2004ValidationError.prototype);\n  }\n}\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check2004ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm2004_errors.TYPE_MISMATCH,\n    Scorm2004ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @return {boolean}\n */\nexport function check2004ValidRange(\n  CMIElement: string,\n  value: string,\n  rangePattern: string,\n): boolean {\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm2004_errors.VALUE_OUT_OF_RANGE,\n    Scorm2004ValidationError,\n  );\n}\n","/**\n * Class for SCORM 2004's cmi.learner_preference object\n */\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\n\nexport class CMILearnerPreference extends BaseCMI {\n  private __children = scorm2004_constants.student_preference_children;\n  private _audio_level = \"1\";\n  private _language = \"\";\n  private _delivery_speed = \"1\";\n  private _audio_captioning = \"0\";\n\n  /**\n   * Constructor for cmi.learner_preference\n   */\n  constructor() {\n    super(\"cmi.learner_preference\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._children\",\n      scorm2004_errors.READ_ONLY_ELEMENT,\n    );\n  }\n\n  /**\n   * Getter for _audio_level\n   * @return {string}\n   */\n  get audio_level(): string {\n    return this._audio_level;\n  }\n\n  /**\n   * Setter for _audio_level\n   * @param {string} audio_level\n   */\n  set audio_level(audio_level: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".audio_level\",\n        audio_level,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".audio_level\",\n        audio_level,\n        scorm2004_regex.audio_range,\n      )\n    ) {\n      this._audio_level = audio_level;\n    }\n  }\n\n  /**\n   * Getter for _language\n   * @return {string}\n   */\n  get language(): string {\n    return this._language;\n  }\n\n  /**\n   * Setter for _language\n   * @param {string} language\n   */\n  set language(language: string) {\n    if (check2004ValidFormat(this._cmi_element + \".language\", language, scorm2004_regex.CMILang)) {\n      this._language = language;\n    }\n  }\n\n  /**\n   * Getter for _delivery_speed\n   * @return {string}\n   */\n  get delivery_speed(): string {\n    return this._delivery_speed;\n  }\n\n  /**\n   * Setter for _delivery_speed\n   * @param {string} delivery_speed\n   */\n  set delivery_speed(delivery_speed: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".delivery_speed\",\n        delivery_speed,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".delivery_speed\",\n        delivery_speed,\n        scorm2004_regex.speed_range,\n      )\n    ) {\n      this._delivery_speed = delivery_speed;\n    }\n  }\n\n  /**\n   * Getter for _audio_captioning\n   * @return {string}\n   */\n  get audio_captioning(): string {\n    return this._audio_captioning;\n  }\n\n  /**\n   * Setter for _audio_captioning\n   * @param {string} audio_captioning\n   */\n  set audio_captioning(audio_captioning: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".audio_captioning\",\n        audio_captioning,\n        scorm2004_regex.CMISInteger,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".audio_captioning\",\n        audio_captioning,\n        scorm2004_regex.text_range,\n      )\n    ) {\n      this._audio_captioning = audio_captioning;\n    }\n  }\n\n  /**\n   * toJSON for cmi.learner_preference\n   *\n   * @return {\n   *    {\n   *      audio_level: string,\n   *      language: string,\n   *      delivery_speed: string,\n   *      audio_captioning: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    audio_level: string;\n    language: string;\n    delivery_speed: string;\n    audio_captioning: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio_level: this.audio_level,\n      language: this.language,\n      delivery_speed: this.delivery_speed,\n      audio_captioning: this.audio_captioning,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { scorm2004_regex } from \"./regex\";\n\nexport const LearnerResponses: Responses = {\n  \"true-false\": {\n    format: \"^true$|^false$\",\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  choice: {\n    format: scorm2004_regex.CMILongIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    unique: true,\n  },\n  \"fill-in\": {\n    format: scorm2004_regex.CMILangString250,\n    max: 10,\n    delimiter: \"[,]\",\n    unique: false,\n  },\n  \"long-fill-in\": {\n    format: scorm2004_regex.CMILangString4000,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  matching: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n  },\n  performance: {\n    format: \"^$|\" + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + \"|^$|\" + scorm2004_regex.CMIShortIdentifier,\n    max: 250,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n  },\n  sequencing: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    unique: false,\n  },\n  likert: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  numeric: {\n    format: scorm2004_regex.CMIDecimal,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  other: {\n    format: scorm2004_regex.CMIString4000,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n};\nexport const CorrectResponses: Responses = {\n  \"true-false\": {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: \"^true$|^false$\",\n    limit: 1,\n  },\n  choice: {\n    max: 36,\n    delimiter: \"[,]\",\n    unique: true,\n    duplicate: false,\n    format: scorm2004_regex.CMILongIdentifier,\n  },\n  \"fill-in\": {\n    max: 10,\n    delimiter: \"[,]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMILangString250cr,\n  },\n  \"long-fill-in\": {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: true,\n    format: scorm2004_regex.CMILangString4000,\n  },\n  matching: {\n    max: 36,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n  },\n  performance: {\n    max: 250,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    delimiter3: \"[:]\",\n    unique: false,\n    duplicate: false,\n    // step_name must be a non-empty short identifier\n    format: scorm2004_regex.CMIShortIdentifier,\n    // step_answer may be short identifier or numeric range (<decimal>[:<decimal>])\n    format2: `^(${scorm2004_regex.CMIShortIdentifier})$|^(?:\\\\d+(?:\\\\.\\\\d+)?(?::\\\\d+(?:\\\\.\\\\d+)?)?)$`,\n  },\n  sequencing: {\n    max: 36,\n    delimiter: \"[,]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n  },\n  likert: {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    limit: 1,\n  },\n  numeric: {\n    max: 2,\n    delimiter: \"[:]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIDecimal,\n    limit: 1,\n  },\n  other: {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIString4000,\n    limit: 1,\n  },\n};\n\nexport type ResponseType = {\n  format: string;\n  max: number;\n  delimiter: string;\n  unique: boolean;\n  duplicate?: boolean;\n  format2?: string;\n  delimiter2?: string;\n  limit?: number;\n  delimiter3?: string;\n};\n\nexport type Responses = {\n  [key: string]: ResponseType;\n};\n","/**\n * Class representing SCORM 2004's `cmi.interactions` object\n */\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { CMIArray } from \"../common/array\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport {\n  CorrectResponses,\n  LearnerResponses,\n  ResponseType,\n} from \"../../constants/response_constants\";\n\nexport class CMIInteractions extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives` Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.interactions\",\n      children: scorm2004_constants.interactions_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.interaction.n object\n */\n\nexport class CMIInteractionsObject extends BaseCMI {\n  private _id = \"\";\n  private _type = \"\";\n  private _timestamp = \"\";\n  private _weighting = \"\";\n  private _learner_response = \"\";\n  private _result = \"\";\n  private _latency = \"\";\n  private _description = \"\";\n\n  /**\n   * Constructor for cmi.interaction.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n\");\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.n.correct_responses\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  public objectives: CMIArray;\n  public correct_responses: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._id = \"\";\n    this._type = \"\";\n    this._timestamp = \"\";\n    this._weighting = \"\";\n    this._learner_response = \"\";\n    this._result = \"\";\n    this._latency = \"\";\n    this._description = \"\";\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.n.correct_responses\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _type\n   * @return {string}\n   */\n  get type(): string {\n    return this._type;\n  }\n\n  /**\n   * Setter for _type\n   * @param {string} type\n   */\n  set type(type: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".type\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (check2004ValidFormat(this._cmi_element + \".type\", type, scorm2004_regex.CMIType)) {\n        this._type = type;\n      }\n    }\n  }\n\n  /**\n   * Getter for _timestamp\n   * @return {string}\n   */\n  get timestamp(): string {\n    return this._timestamp;\n  }\n\n  /**\n   * Setter for _timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".timestamp\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".timestamp\", timestamp, scorm2004_regex.CMITime)\n      ) {\n        this._timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * Getter for _weighting\n   * @return {string}\n   */\n  get weighting(): string {\n    return this._weighting;\n  }\n\n  /**\n   * Setter for _weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".weighting\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".weighting\",\n          weighting,\n          scorm2004_regex.CMIDecimal,\n        )\n      ) {\n        this._weighting = weighting;\n      }\n    }\n  }\n\n  /**\n   * Getter for _learner_response\n   * @return {string}\n   */\n  get learner_response(): string {\n    return this._learner_response;\n  }\n\n  /**\n   * Setter for _learner_response. Does type validation to make sure response\n   * matches SCORM 2004's spec\n   * @param {string} learner_response\n   */\n  set learner_response(learner_response: string) {\n    if (this.initialized && (this._type === \"\" || this._id === \"\")) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_response\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      let nodes = [];\n      const response_type = LearnerResponses[this.type];\n\n      if (response_type) {\n        if (response_type?.delimiter) {\n          // Convert regex-style delimiter to actual character\n          const delimiter = response_type.delimiter === \"[,]\" ? \",\" : response_type.delimiter;\n          nodes = learner_response.split(delimiter);\n        } else {\n          nodes[0] = learner_response;\n        }\n\n        if (nodes.length > 0 && nodes.length <= response_type.max) {\n          const formatRegex = new RegExp(response_type.format);\n\n          for (let i = 0; i < nodes.length; i++) {\n            if (response_type?.delimiter2) {\n              // Convert regex-style delimiter to actual character\n              const delimiter2 =\n                response_type.delimiter2 === \"[.]\" ? \".\" : response_type.delimiter2;\n              const values = nodes[i].split(delimiter2);\n\n              if (values.length === 2) {\n                // For performance type, both parts must be non-empty\n                if (this.type === \"performance\" && (values[0] === \"\" || values[1] === \"\")) {\n                  throw new Scorm2004ValidationError(\n                    this._cmi_element + \".learner_response\",\n                    scorm2004_errors.TYPE_MISMATCH,\n                  );\n                }\n\n                if (!values[0].match(formatRegex)) {\n                  throw new Scorm2004ValidationError(\n                    this._cmi_element + \".learner_response\",\n                    scorm2004_errors.TYPE_MISMATCH,\n                  );\n                } else {\n                  if (\n                    !response_type.format2 ||\n                    !values[1].match(new RegExp(response_type.format2))\n                  ) {\n                    throw new Scorm2004ValidationError(\n                      this._cmi_element + \".learner_response\",\n                      scorm2004_errors.TYPE_MISMATCH,\n                    );\n                  }\n                }\n              } else {\n                throw new Scorm2004ValidationError(\n                  this._cmi_element + \".learner_response\",\n                  scorm2004_errors.TYPE_MISMATCH,\n                );\n              }\n            } else {\n              if (!nodes[i].match(formatRegex)) {\n                throw new Scorm2004ValidationError(\n                  this._cmi_element + \".learner_response\",\n                  scorm2004_errors.TYPE_MISMATCH,\n                );\n              } else {\n                if (nodes[i] !== \"\" && response_type.unique) {\n                  for (let j = 0; j < i; j++) {\n                    if (nodes[i] === nodes[j]) {\n                      throw new Scorm2004ValidationError(\n                        this._cmi_element + \".learner_response\",\n                        scorm2004_errors.TYPE_MISMATCH,\n                      );\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          throw new Scorm2004ValidationError(\n            this._cmi_element + \".learner_response\",\n            scorm2004_errors.GENERAL_SET_FAILURE,\n          );\n        }\n\n        this._learner_response = learner_response;\n      } else {\n        throw new Scorm2004ValidationError(\n          this._cmi_element + \".learner_response\",\n          scorm2004_errors.TYPE_MISMATCH,\n        );\n      }\n    }\n  }\n\n  /**\n   * Getter for _result\n   * @return {string}\n   */\n  get result(): string {\n    return this._result;\n  }\n\n  /**\n   * Setter for _result\n   * @param {string} result\n   */\n  set result(result: string) {\n    if (check2004ValidFormat(this._cmi_element + \".result\", result, scorm2004_regex.CMIResult)) {\n      this._result = result;\n    }\n  }\n\n  /**\n   * Getter for _latency\n   * @return {string}\n   */\n  get latency(): string {\n    return this._latency;\n  }\n\n  /**\n   * Setter for _latency\n   * @param {string} latency\n   */\n  set latency(latency: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".latency\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".latency\", latency, scorm2004_regex.CMITimespan)\n      ) {\n        this._latency = latency;\n      }\n    }\n  }\n\n  /**\n   * Getter for _description\n   * @return {string}\n   */\n  get description(): string {\n    return this._description;\n  }\n\n  /**\n   * Setter for _description\n   * @param {string} description\n   */\n  set description(description: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".description\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".description\",\n          description,\n          scorm2004_regex.CMILangString250,\n          true,\n        )\n      ) {\n        this._description = description;\n      }\n    }\n  }\n\n  // noinspection JSUnusedGlobalSymbols\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      type: string,\n   *      objectives: CMIArray,\n   *      timestamp: string,\n   *      correct_responses: CMIArray,\n   *      weighting: string,\n   *      learner_response: string,\n   *      result: string,\n   *      latency: string,\n   *      description: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    type: string;\n    objectives: CMIArray;\n    timestamp: string;\n    correct_responses: CMIArray;\n    weighting: string;\n    learner_response: string;\n    result: string;\n    latency: string;\n    description: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      type: this.type,\n      objectives: this.objectives,\n      timestamp: this.timestamp,\n      weighting: this.weighting,\n      learner_response: this.learner_response,\n      result: this.result,\n      latency: this.latency,\n      description: this.description,\n      correct_responses: this.correct_responses,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.objectives.n object\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  private _id = \"\";\n\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n.objectives.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._id = \"\";\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Helper: strip the square-bracket notation (e.g. \"[,]\") down to the character (\",\")\n */\nfunction stripBrackets(delim: string): string {\n  return delim.replace(/[[\\]]/g, \"\");\n}\n\n// Helper to escape a string for use in a RegExp\nfunction escapeRegex(s: string): string {\n  // Only , and . are expected, but escape any regex special chars for safety\n  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\n\n/**\n * Split on unescaped delimiter and unescape the delimiter in resulting parts.\n * @param text - the input string\n * @param delim - the delimiter character, e.g. ',' or '.'\n */\nfunction splitUnescaped(text: string, delim: string): string[] {\n  const reDelim = escapeRegex(delim);\n  const splitRe = new RegExp(`(?<!\\\\\\\\)${reDelim}`, \"g\");\n  const unescapeRe = new RegExp(`\\\\\\\\${reDelim}`, \"g\");\n  return text.split(splitRe).map((part) => part.replace(unescapeRe, delim));\n}\n\n/**\n * Helper: validate a `pattern` string against its SCORM definition\n */\nfunction validatePattern(type: string, pattern: string, responseDef: ResponseType) {\n  // Reject patterns with leading or trailing whitespace\n  if (pattern.trim() !== pattern) {\n    throw new Scorm2004ValidationError(\n      \"cmi.interactions.n.correct_responses.n.pattern\",\n      scorm2004_errors.TYPE_MISMATCH,\n    );\n  }\n\n  // Reject any nodes with leading/trailing whitespace around tokens\n  const subDelim1 = responseDef.delimiter ? stripBrackets(responseDef.delimiter) : null;\n  const rawNodes = subDelim1 ? splitUnescaped(pattern, subDelim1) : [pattern];\n  for (const raw of rawNodes) {\n    if (raw.trim() !== raw) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n  }\n\n  // Allow empty fill-in patterns\n  if (type === \"fill-in\" && pattern === \"\") {\n    return;\n  }\n  // Split into nodes on the primary delimiter (if any)\n  const delim1 = responseDef.delimiter ? stripBrackets(responseDef.delimiter) : null;\n  let nodes: string[];\n  if (delim1) {\n    nodes = splitUnescaped(pattern, delim1);\n  } else {\n    nodes = [pattern];\n  }\n\n  // If no primary delimiter but pattern contains comma, reject multiple entries\n  if (!responseDef.delimiter && pattern.includes(\",\")) {\n    throw new Scorm2004ValidationError(\n      \"cmi.interactions.n.correct_responses.n.pattern\",\n      scorm2004_errors.TYPE_MISMATCH,\n    );\n  }\n\n  // Enforce uniqueness or disallow duplicates if required\n  if (responseDef.unique || responseDef.duplicate === false) {\n    const seen = new Set(nodes);\n    if (seen.size !== nodes.length) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n  }\n\n  // Must have at least 1 node, and no more than max\n  if (nodes.length === 0 || nodes.length > responseDef.max) {\n    throw new Scorm2004ValidationError(\n      \"cmi.interactions.n.correct_responses.n.pattern\",\n      scorm2004_errors.GENERAL_SET_FAILURE,\n    );\n  }\n\n  const fmt1 = new RegExp(responseDef.format);\n  const fmt2 = responseDef.format2 ? new RegExp(responseDef.format2) : null;\n\n  const checkSingle = (value: string) => {\n    if (!fmt1.test(value)) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n  };\n\n  const checkPair = (value: string, delimBracketed?: string) => {\n    if (!delimBracketed) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    const delim = stripBrackets(delimBracketed);\n    const parts = value\n      .split(new RegExp(`(?<!\\\\\\\\)${escapeRegex(delim)}`, \"g\"))\n      .map((n) => n.replace(new RegExp(`\\\\\\\\${escapeRegex(delim)}`, \"g\"), delim));\n    if (parts.length !== 2 || parts[0] === \"\" || parts[1] === \"\") {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    // test both parts\n    if (!fmt1.test(parts[0]) || (fmt2 && !fmt2.test(parts[1]))) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n  };\n\n  for (const node of nodes) {\n    switch (type) {\n      case \"numeric\": {\n        // 1 or 2 numeric values separated by \":\"\n        const numDelim = responseDef.delimiter ? stripBrackets(responseDef.delimiter) : \":\";\n        const nums = node.split(numDelim);\n        if (nums.length < 1 || nums.length > 2) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH,\n          );\n        }\n        nums.forEach(checkSingle);\n        break;\n      }\n\n      case \"performance\": {\n        // split into parts on unescaped dot\n        const delimBracketed = responseDef.delimiter2;\n        if (!delimBracketed) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH,\n          );\n        }\n        const delim = stripBrackets(delimBracketed);\n        // split into parts on unescaped dot\n        const allParts = splitUnescaped(node, delim);\n        if (!node.includes(\":\") && allParts.length !== 2) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH,\n          );\n        }\n        // use splitUnescaped to get [part1, part2]\n        const [part1, part2] = splitUnescaped(node, delim);\n        // Validate non-empty\n        if (part1 === \"\" || part2 === \"\" || part1 === part2) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH,\n          );\n        }\n        // part1 against format1\n        if (!fmt1.test(part1)) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH,\n          );\n        }\n        // part2 against format2\n        if (fmt2 && !fmt2.test(part2)) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH,\n          );\n        }\n        break;\n      }\n\n      default:\n        if (responseDef.delimiter2) {\n          // matching and other two-part types\n          checkPair(node, responseDef.delimiter2);\n        } else {\n          // simple single-value types (true-false, choice, fill-in, etc.)\n          checkSingle(node);\n        }\n    }\n  }\n}\n\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  private _pattern = \"\";\n  private readonly _interactionType?: string | undefined;\n\n  /**\n   * Constructor for cmi.interactions.n.correct_responses.n\n   * @param interactionType The type of interaction (e.g. \"numeric\", \"choice\", etc.)\n   */\n  constructor(interactionType?: string) {\n    super(\"cmi.interactions.n.correct_responses.n\");\n    this._interactionType = interactionType;\n  }\n\n  override reset() {\n    this._initialized = false;\n    this._pattern = \"\";\n  }\n\n  get pattern(): string {\n    return this._pattern;\n  }\n\n  set pattern(pattern: string) {\n    // Allow empty fill-in patterns\n    if (this._interactionType === \"fill-in\" && pattern === \"\") {\n      this._pattern = \"\";\n      return;\n    }\n    // 1) Basic SCORM‐pattern format check\n    if (\n      !check2004ValidFormat(this._cmi_element + \".pattern\", pattern, scorm2004_regex.CMIFeedback)\n    ) {\n      return;\n    }\n\n    // 2) If we know the interaction type, run the detailed validator\n    if (this._interactionType) {\n      const responseDef = CorrectResponses[this._interactionType];\n      if (responseDef) {\n        // Skip detailed validation for matching when pattern contains escaped comma or dot\n        if (this._interactionType === \"matching\" && /\\\\[.,]/.test(pattern)) {\n          // accept escaped comma or dot patterns without further validation\n        } else {\n          validatePattern(this._interactionType, pattern, responseDef);\n        }\n      }\n    }\n\n    // 3) Finally, set\n    this._pattern = pattern;\n  }\n\n  toJSON(): { pattern: string } {\n    this.jsonString = true;\n    const result = { pattern: this.pattern };\n    this.jsonString = false;\n    return result;\n  }\n}\n","/**\n * Class for SCORM 2004's cmi *.score object\n */\nimport { CMIScore } from \"../common/score\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { ScoreObject } from \"../../types/api_types\";\n\nexport class Scorm2004CMIScore extends CMIScore {\n  private _scaled = \"\";\n\n  /**\n   * Constructor for cmi *.score\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.score\",\n      score_children: scorm2004_constants.score_children,\n      max: \"\",\n      invalidErrorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      invalidTypeCode: scorm2004_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm2004_errors.VALUE_OUT_OF_RANGE,\n      decimalRegex: scorm2004_regex.CMIDecimal,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n    this._scaled = \"\";\n    this._raw = \"\";\n    this._min = \"\";\n    this._max = \"\";\n  }\n\n  /**\n   * Getter for _scaled\n   * @return {string}\n   */\n  get scaled(): string {\n    return this._scaled;\n  }\n\n  /**\n   * Setter for _scaled\n   * @param {string} scaled\n   */\n  set scaled(scaled: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".scaled\", scaled, scorm2004_regex.CMIDecimal) &&\n      check2004ValidRange(this._cmi_element + \".scaled\", scaled, scorm2004_regex.scaled_range)\n    ) {\n      this._scaled = scaled;\n    }\n  }\n\n  override getScoreObject(): ScoreObject {\n    const scoreObject = super.getScoreObject();\n\n    if (!Number.isNaN(Number.parseFloat(this.scaled))) {\n      scoreObject.scaled = Number.parseFloat(this.scaled);\n    }\n\n    return scoreObject;\n  }\n\n  /**\n   * toJSON for cmi *.score\n   *\n   * @return {\n   *    {\n   *      scaled: string,\n   *      raw: string,\n   *      min: string,\n   *      max: string\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    scaled: string;\n    raw: string;\n    min: string;\n    max: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      scaled: this.scaled,\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_lms object\n * @extends CMIArray\n */\nexport class CMICommentsFromLMS extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_lms Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.comments_from_lms\",\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner object\n */\n\nexport class CMICommentsFromLearner extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_learner Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.comments_from_learner\",\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner.n and cmi.comments_from_lms.n object\n */\n\nexport class CMICommentsObject extends BaseCMI {\n  private _comment = \"\";\n  private _location = \"\";\n  private _timestamp = \"\";\n  private readonly _readOnlyAfterInit: boolean;\n\n  /**\n   * Constructor for cmi.comments_from_learner.n and cmi.comments_from_lms.n\n   * @param {boolean} readOnlyAfterInit\n   */\n  constructor(readOnlyAfterInit: boolean = false) {\n    super(\"cmi.comments_from_learner.n\");\n    this._comment = \"\";\n    this._location = \"\";\n    this._timestamp = \"\";\n    this._readOnlyAfterInit = readOnlyAfterInit;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _comment\n   * @return {string}\n   */\n  get comment(): string {\n    return this._comment;\n  }\n\n  /**\n   * Setter for _comment\n   * @param {string} comment\n   */\n  set comment(comment: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".comment\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".comment\",\n          comment,\n          scorm2004_regex.CMILangString4000,\n          true,\n        )\n      ) {\n        this._comment = comment;\n      }\n    }\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".location\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".location\",\n          location,\n          scorm2004_regex.CMIString250,\n        )\n      ) {\n        this._location = location;\n      }\n    }\n  }\n\n  /**\n   * Getter for _timestamp\n   * @return {string}\n   */\n  get timestamp(): string {\n    return this._timestamp;\n  }\n\n  /**\n   * Setter for _timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".timestamp\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".timestamp\", timestamp, scorm2004_regex.CMITime)\n      ) {\n        this._timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.comments_from_learner.n object\n   * @return {\n   *    {\n   *      comment: string,\n   *      location: string,\n   *      timestamp: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    comment: string;\n    location: string;\n    timestamp: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      comment: this.comment,\n      location: this.location,\n      timestamp: this.timestamp,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { Scorm2004CMIScore } from \"./score\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\n\n/**\n * Class representing SCORM 2004's `cmi.objectives` object\n * @extends CMIArray\n */\nexport class CMIObjectives extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives` Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.objectives\",\n      children: scorm2004_constants.objectives_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n\n  /**\n   * Find an objective by its ID\n   */\n  public findObjectiveById(id: string): CMIObjectivesObject | undefined {\n    return this.childArray.find((objective) => objective.id === id);\n  }\n\n  /**\n   * Find objective by its index\n   */\n  public findObjectiveByIndex(index: number): CMIObjectivesObject {\n    return this.childArray[index];\n  }\n\n  /**\n   * Set an objective at the given index\n   */\n  public setObjectiveByIndex(index: number, objective: CMIObjectivesObject) {\n    this.childArray[index] = objective;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.objectives.n object\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  private _id = \"\";\n  private _success_status = \"unknown\";\n  private _completion_status = \"unknown\";\n  private _progress_measure = \"\";\n  private _description = \"\";\n\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super(\"cmi.objectives.n\");\n    this.score = new Scorm2004CMIScore();\n  }\n\n  override reset() {\n    this._initialized = false;\n  }\n\n  public score: Scorm2004CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this._success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".success_status\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".success_status\",\n          success_status,\n          scorm2004_regex.CMISStatus,\n        )\n      ) {\n        this._success_status = success_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this._completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".completion_status\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".completion_status\",\n          completion_status,\n          scorm2004_regex.CMICStatus,\n        )\n      ) {\n        this._completion_status = completion_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this._progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".progress_measure\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".progress_measure\",\n          progress_measure,\n          scorm2004_regex.CMIDecimal,\n        ) &&\n        check2004ValidRange(\n          this._cmi_element + \".progress_measure\",\n          progress_measure,\n          scorm2004_regex.progress_range,\n        )\n      ) {\n        this._progress_measure = progress_measure;\n      }\n    }\n  }\n\n  /**\n   * Getter for _description\n   * @return {string}\n   */\n  get description(): string {\n    return this._description;\n  }\n\n  /**\n   * Setter for _description\n   * @param {string} description\n   */\n  set description(description: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".description\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".description\",\n          description,\n          scorm2004_regex.CMILangString250,\n          true,\n        )\n      ) {\n        this._description = description;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      success_status: string,\n   *      completion_status: string,\n   *      progress_measure: string,\n   *      description: string,\n   *      score: Scorm2004CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    success_status: string;\n    completion_status: string;\n    progress_measure: string;\n    description: string;\n    score: Scorm2004CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      success_status: this.success_status,\n      completion_status: this.completion_status,\n      progress_measure: this.progress_measure,\n      description: this.description,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","/**\n * Class representing metadata properties for SCORM 2004's cmi object\n */\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing metadata properties for SCORM 2004's cmi object\n */\nexport class CMIMetadata extends BaseCMI {\n  private __version = \"1.0\";\n  private __children = scorm2004_constants.cmi_children;\n\n  /**\n   * Constructor for CMIMetadata\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   */\n  get _version(): string {\n    return this.__version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version: string) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._version\",\n      scorm2004_errors.READ_ONLY_ELEMENT,\n    );\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {number} _children\n   */\n  set _children(_children: number) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._children\",\n      scorm2004_errors.READ_ONLY_ELEMENT,\n    );\n  }\n\n  /**\n   * Reset the metadata properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // No need to reset __version and __children as they are constants\n  }\n}\n","/**\n * Class representing learner properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing learner properties for SCORM 2004's cmi object\n */\nexport class CMILearner extends BaseCMI {\n  private _learner_id = \"\";\n  private _learner_name = \"\";\n\n  /**\n   * Constructor for CMILearner\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _learner_id\n   * @return {string}\n   */\n  get learner_id(): string {\n    return this._learner_id;\n  }\n\n  /**\n   * Setter for _learner_id. Can only be called before initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_id\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._learner_id = learner_id;\n    }\n  }\n\n  /**\n   * Getter for _learner_name\n   * @return {string}\n   */\n  get learner_name(): string {\n    return this._learner_name;\n  }\n\n  /**\n   * Setter for _learner_name. Can only be called before initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_name\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._learner_name = learner_name;\n    }\n  }\n\n  /**\n   * Reset the learner properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset learner_id and learner_name as they are read-only after initialization\n  }\n}\n","/**\n * Class representing status properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\n\n/**\n * Class representing status properties for SCORM 2004's cmi object\n */\nexport class CMIStatus extends BaseCMI {\n  private _completion_status = \"unknown\";\n  private _success_status = \"unknown\";\n  private _progress_measure = \"\";\n\n  /**\n   * Constructor for CMIStatus\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this._completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".completion_status\",\n        completion_status,\n        scorm2004_regex.CMICStatus,\n      )\n    ) {\n      this._completion_status = completion_status;\n    }\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this._success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".success_status\",\n        success_status,\n        scorm2004_regex.CMISStatus,\n      )\n    ) {\n      this._success_status = success_status;\n    }\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this._progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".progress_measure\",\n        progress_measure,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".progress_measure\",\n        progress_measure,\n        scorm2004_regex.progress_range,\n      )\n    ) {\n      this._progress_measure = progress_measure;\n    }\n  }\n\n  /**\n   * Reset the status properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._completion_status = \"unknown\";\n    this._success_status = \"unknown\";\n    this._progress_measure = \"\";\n  }\n}\n","/**\n * Class representing session properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\nimport * as Util from \"../../utilities\";\n\n/**\n * Class representing session properties for SCORM 2004's cmi object\n */\nexport class CMISession extends BaseCMI {\n  private _entry = \"\";\n  private _exit = \"\";\n  private _session_time = \"PT0H0M0S\";\n  private _total_time = \"\";\n\n  /**\n   * Constructor for CMISession\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this._entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".entry\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._entry = entry;\n    }\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    if (!this.jsonString) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exit\",\n        scorm2004_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    if (check2004ValidFormat(this._cmi_element + \".exit\", exit, scorm2004_regex.CMIExit, true)) {\n      this._exit = exit;\n    }\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    if (!this.jsonString) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".session_time\",\n        scorm2004_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".session_time\",\n        session_time,\n        scorm2004_regex.CMITimespan,\n      )\n    ) {\n      this._session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this._total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".total_time\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._total_time = total_time;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime(start_time: number | undefined): string {\n    let sessionTime = this._session_time;\n    if (typeof start_time !== \"undefined\" && start_time !== null) {\n      const seconds = new Date().getTime() - start_time;\n      sessionTime = Util.getSecondsAsISODuration(seconds / 1000);\n    }\n\n    return Util.addTwoDurations(this._total_time, sessionTime, scorm2004_regex.CMITimespan);\n  }\n\n  /**\n   * Reset the session properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._entry = \"\";\n    this._exit = \"\";\n    this._session_time = \"PT0H0M0S\";\n    // Don't reset total_time as it's read-only after initialization\n  }\n}\n","/**\n * Class representing content properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\n\n/**\n * Class representing content properties for SCORM 2004's cmi object\n */\nexport class CMIContent extends BaseCMI {\n  private _location = \"\";\n  private _launch_data = \"\";\n  private _suspend_data = \"\";\n\n  /**\n   * Constructor for CMIContent\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".location\", location, scorm2004_regex.CMIString1000)\n    ) {\n      this._location = location;\n    }\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this._launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".launch_data\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._launch_data = launch_data;\n    }\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this._suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".suspend_data\",\n        suspend_data,\n        scorm2004_regex.CMIString64000,\n        true,\n      )\n    ) {\n      this._suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Reset the content properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._location = \"\";\n    // Don't reset launch_data as it's read-only after initialization\n    this._suspend_data = \"\";\n  }\n}\n","/**\n * Class representing settings properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing settings properties for SCORM 2004's cmi object\n */\nexport class CMISettings extends BaseCMI {\n  private _credit = \"credit\";\n  private _mode = \"normal\";\n  private _time_limit_action = \"continue,no message\";\n  private _max_time_allowed = \"\";\n\n  /**\n   * Constructor for CMISettings\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this._credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".credit\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._credit = credit;\n    }\n  }\n\n  /**\n   * Getter for _mode\n   * @return {string}\n   */\n  get mode(): string {\n    return this._mode;\n  }\n\n  /**\n   * Setter for _mode. Can only be called before initialization.\n   * @param {string} mode\n   */\n  set mode(mode: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".mode\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._mode = mode;\n    }\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this._time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".time_limit_action\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._time_limit_action = time_limit_action;\n    }\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this._max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".max_time_allowed\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._max_time_allowed = max_time_allowed;\n    }\n  }\n\n  /**\n   * Reset the settings properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset these properties as they are read-only after initialization\n  }\n}\n","/**\n * Class representing threshold properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing threshold properties for SCORM 2004's cmi object\n */\nexport class CMIThresholds extends BaseCMI {\n  private _scaled_passing_score = \"\";\n  private _completion_threshold = \"\";\n\n  /**\n   * Constructor for CMIThresholds\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score(): string {\n    return this._scaled_passing_score;\n  }\n\n  /**\n   * Setter for _scaled_passing_score. Can only be called before initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".scaled_passing_score\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._scaled_passing_score = scaled_passing_score;\n    }\n  }\n\n  /**\n   * Getter for _completion_threshold\n   * @return {string}\n   */\n  get completion_threshold(): string {\n    return this._completion_threshold;\n  }\n\n  /**\n   * Setter for _completion_threshold. Can only be called before initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".completion_threshold\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._completion_threshold = completion_threshold;\n    }\n  }\n\n  /**\n   * Reset the threshold properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset these properties as they are read-only after initialization\n  }\n}\n","import { BaseRootCMI } from \"../common/base_cmi\";\nimport { CMILearnerPreference } from \"./learner_preference\";\nimport { CMIInteractions } from \"./interactions\";\nimport { Scorm2004CMIScore } from \"./score\";\nimport { CMICommentsFromLearner, CMICommentsFromLMS } from \"./comments\";\nimport { CMIObjectives } from \"./objectives\";\nimport { CMIMetadata } from \"./metadata\";\nimport { CMILearner } from \"./learner\";\nimport { CMIStatus } from \"./status\";\nimport { CMISession } from \"./session\";\nimport { CMIContent } from \"./content\";\nimport { CMISettings } from \"./settings\";\nimport { CMIThresholds } from \"./thresholds\";\n\n/**\n * Class representing cmi object for SCORM 2004\n */\nexport class CMI extends BaseRootCMI {\n  /**\n   * Constructor for the SCORM 2004 cmi object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean = false) {\n    super(\"cmi\");\n    this.metadata = new CMIMetadata();\n    this.learner = new CMILearner();\n    this.status = new CMIStatus();\n    this.session = new CMISession();\n    this.content = new CMIContent();\n    this.settings = new CMISettings();\n    this.thresholds = new CMIThresholds();\n    this.learner_preference = new CMILearnerPreference();\n    this.score = new Scorm2004CMIScore();\n    this.comments_from_learner = new CMICommentsFromLearner();\n    this.comments_from_lms = new CMICommentsFromLMS();\n    this.interactions = new CMIInteractions();\n    this.objectives = new CMIObjectives();\n    if (initialized) this.initialize();\n  }\n\n  // New component classes\n  private metadata: CMIMetadata;\n  private learner: CMILearner;\n  private status: CMIStatus;\n  private session: CMISession;\n  private content: CMIContent;\n  private settings: CMISettings;\n  private thresholds: CMIThresholds;\n\n  // Original complex objects\n  public learner_preference: CMILearnerPreference;\n  public score: Scorm2004CMIScore;\n  public comments_from_learner: CMICommentsFromLearner;\n  public comments_from_lms: CMICommentsFromLMS;\n  public interactions: CMIInteractions;\n  public objectives: CMIObjectives;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    // Initialize new component classes\n    this.metadata?.initialize();\n    this.learner?.initialize();\n    this.status?.initialize();\n    this.session?.initialize();\n    this.content?.initialize();\n    this.settings?.initialize();\n    this.thresholds?.initialize();\n\n    // Initialize original complex objects\n    this.learner_preference?.initialize();\n    this.score?.initialize();\n    this.comments_from_learner?.initialize();\n    this.comments_from_lms?.initialize();\n    this.interactions?.initialize();\n    this.objectives?.initialize();\n  }\n\n  /**\n   * Called when API is moving to another SCO\n   */\n  reset() {\n    this._initialized = false;\n\n    // Reset new component classes\n    this.metadata?.reset();\n    this.learner?.reset();\n    this.status?.reset();\n    this.session?.reset();\n    this.content?.reset();\n    this.settings?.reset();\n    this.thresholds?.reset();\n\n    // Reset original complex objects\n    this.objectives?.reset(false);\n    this.interactions?.reset(true);\n    this.score?.reset();\n    this.comments_from_learner?.reset();\n    this.comments_from_lms?.reset();\n    this.learner_preference?.reset();\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   * @private\n   */\n  get _version(): string {\n    return this.metadata._version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   * @private\n   */\n  set _version(_version: string) {\n    this.metadata._version = _version;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.metadata._children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {number} _children\n   * @private\n   */\n  set _children(_children: number) {\n    this.metadata._children = _children;\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this.status.completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    this.status.completion_status = completion_status;\n  }\n\n  /**\n   * Getter for _completion_threshold\n   * @return {string}\n   */\n  get completion_threshold(): string {\n    return this.thresholds.completion_threshold;\n  }\n\n  /**\n   * Setter for _completion_threshold. Can only be called before initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold: string) {\n    this.thresholds.completion_threshold = completion_threshold;\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this.settings.credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    this.settings.credit = credit;\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this.session.entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    this.session.entry = entry;\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    this.session.jsonString = this.jsonString;\n    return this.session.exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    this.session.exit = exit;\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this.content.launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    this.content.launch_data = launch_data;\n  }\n\n  /**\n   * Getter for _learner_id\n   * @return {string}\n   */\n  get learner_id(): string {\n    return this.learner.learner_id;\n  }\n\n  /**\n   * Setter for _learner_id. Can only be called before initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id: string) {\n    this.learner.learner_id = learner_id;\n  }\n\n  /**\n   * Getter for _learner_name\n   * @return {string}\n   */\n  get learner_name(): string {\n    return this.learner.learner_name;\n  }\n\n  /**\n   * Setter for _learner_name. Can only be called before initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name: string) {\n    this.learner.learner_name = learner_name;\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this.content.location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    this.content.location = location;\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this.settings.max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    this.settings.max_time_allowed = max_time_allowed;\n  }\n\n  /**\n   * Getter for _mode\n   * @return {string}\n   */\n  get mode(): string {\n    return this.settings.mode;\n  }\n\n  /**\n   * Setter for _mode. Can only be called before initialization.\n   * @param {string} mode\n   */\n  set mode(mode: string) {\n    this.settings.mode = mode;\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this.status.progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    this.status.progress_measure = progress_measure;\n  }\n\n  /**\n   * Getter for _scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score(): string {\n    return this.thresholds.scaled_passing_score;\n  }\n\n  /**\n   * Setter for _scaled_passing_score. Can only be called before initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score: string) {\n    this.thresholds.scaled_passing_score = scaled_passing_score;\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    this.session.jsonString = this.jsonString;\n    return this.session.session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    this.session.session_time = session_time;\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this.status.success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    this.status.success_status = success_status;\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this.content.suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    this.content.suspend_data = suspend_data;\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this.settings.time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    this.settings.time_limit_action = time_limit_action;\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this.session.total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    this.session.total_time = total_time;\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime(): string {\n    return this.session.getCurrentTotalTime(this.start_time);\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      comments_from_learner: CMICommentsFromLearner,\n   *      comments_from_lms: CMICommentsFromLMS,\n   *      completion_status: string,\n   *      completion_threshold: string,\n   *      credit: string,\n   *      entry: string,\n   *      exit: string,\n   *      interactions: CMIInteractions,\n   *      launch_data: string,\n   *      learner_id: string,\n   *      learner_name: string,\n   *      learner_preference: CMILearnerPreference,\n   *      location: string,\n   *      max_time_allowed: string,\n   *      mode: string,\n   *      objectives: CMIObjectives,\n   *      progress_measure: string,\n   *      scaled_passing_score: string,\n   *      score: Scorm2004CMIScore,\n   *      session_time: string,\n   *      success_status: string,\n   *      suspend_data: string,\n   *      time_limit_action: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    comments_from_learner: CMICommentsFromLearner;\n    comments_from_lms: CMICommentsFromLMS;\n    completion_status: string;\n    completion_threshold: string;\n    credit: string;\n    entry: string;\n    exit: string;\n    interactions: CMIInteractions;\n    launch_data: string;\n    learner_id: string;\n    learner_name: string;\n    learner_preference: CMILearnerPreference;\n    location: string;\n    max_time_allowed: string;\n    mode: string;\n    objectives: CMIObjectives;\n    progress_measure: string;\n    scaled_passing_score: string;\n    score: Scorm2004CMIScore;\n    session_time: string;\n    success_status: string;\n    suspend_data: string;\n    time_limit_action: string;\n  } {\n    this.jsonString = true;\n\n    // Set jsonString flag on component classes that need it\n    this.session.jsonString = true;\n\n    const result = {\n      comments_from_learner: this.comments_from_learner,\n      comments_from_lms: this.comments_from_lms,\n      completion_status: this.completion_status,\n      completion_threshold: this.completion_threshold,\n      credit: this.credit,\n      entry: this.entry,\n      exit: this.exit,\n      interactions: this.interactions,\n      launch_data: this.launch_data,\n      learner_id: this.learner_id,\n      learner_name: this.learner_name,\n      learner_preference: this.learner_preference,\n      location: this.location,\n      max_time_allowed: this.max_time_allowed,\n      mode: this.mode,\n      objectives: this.objectives,\n      progress_measure: this.progress_measure,\n      scaled_passing_score: this.scaled_passing_score,\n      score: this.score,\n      session_time: this.session_time,\n      success_status: this.success_status,\n      suspend_data: this.suspend_data,\n      time_limit_action: this.time_limit_action,\n    };\n\n    // Clean up jsonString flags\n    this.jsonString = false;\n    this.session.jsonString = false;\n\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { NAVBoolean } from \"../../constants/enums\";\nimport { CMIArray } from \"../common/array\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Sequencing } from \"./sequencing/sequencing\";\n\n/**\n * Class representing SCORM 2004's adl object\n */\nexport class ADL extends BaseCMI {\n  /**\n   * Constructor for adl\n   */\n  constructor() {\n    super(\"adl\");\n    this.nav = new ADLNav();\n    this.data = new ADLData();\n  }\n\n  public nav: ADLNav;\n  public data = new ADLData();\n  private _sequencing: Sequencing | null = null;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.nav?.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this.nav?.reset();\n  }\n\n  /**\n   * Getter for sequencing\n   * @return {Sequencing | null}\n   */\n  get sequencing(): Sequencing | null {\n    return this._sequencing;\n  }\n\n  /**\n   * Setter for sequencing\n   * @param {Sequencing | null} sequencing\n   */\n  set sequencing(sequencing: Sequencing | null) {\n    this._sequencing = sequencing;\n    if (sequencing) {\n      sequencing.adlNav = this.nav;\n      this.nav.sequencing = sequencing;\n    }\n  }\n\n  /**\n   * toJSON for adl\n   * @return {\n   *    {\n   *      nav: ADLNav,\n   *      data: ADLData\n   *    }\n   *  }\n   */\n  toJSON(): {\n    nav: ADLNav;\n    data: ADLData;\n  } {\n    this.jsonString = true;\n    const result = {\n      nav: this.nav,\n      data: this.data,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's `adl.nav` object\n */\n\nexport class ADLNav extends BaseCMI {\n  private _request = \"_none_\";\n  private _sequencing: Sequencing | null = null;\n\n  /**\n   * Constructor for `adl.nav`\n   */\n  constructor() {\n    super(\"adl.nav\");\n    this.request_valid = new ADLNavRequestValid();\n  }\n\n  public request_valid: ADLNavRequestValid;\n\n  /**\n   * Getter for sequencing\n   * @return {Sequencing | null}\n   */\n  get sequencing(): Sequencing | null {\n    return this._sequencing;\n  }\n\n  /**\n   * Setter for sequencing\n   * @param {Sequencing | null} sequencing\n   */\n  set sequencing(sequencing: Sequencing | null) {\n    this._sequencing = sequencing;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.request_valid?.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._request = \"_none_\";\n    this._sequencing = null;\n    this.request_valid?.reset();\n  }\n\n  /**\n   * Getter for _request\n   * @return {string}\n   */\n  get request(): string {\n    return this._request;\n  }\n\n  /**\n   * Setter for _request\n   * @param {string} request\n   */\n  set request(request: string) {\n    if (check2004ValidFormat(this._cmi_element + \".request\", request, scorm2004_regex.NAVEvent)) {\n      // Only process if the request is different from the current request\n      if (this._request !== request) {\n        this._request = request;\n\n        // Process the navigation request using the sequencing implementation\n        if (this._sequencing) {\n          this._sequencing.processNavigationRequest(request);\n        }\n      }\n    }\n  }\n\n  /**\n   * toJSON for adl.nav\n   *\n   * @return {\n   *    {\n   *      request: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    request: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      request: this.request,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's `adl.data` object\n */\nexport class ADLData extends CMIArray {\n  constructor() {\n    super({\n      CMIElement: \"adl.data\",\n      children: scorm2004_constants.adl_data_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's adl.data.n object\n */\nexport class ADLDataObject extends BaseCMI {\n  private _id = \"\";\n  private _store = \"\";\n\n  constructor() {\n    super(\"adl.data.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _store\n   * @return {string}\n   */\n  get store(): string {\n    return this._store;\n  }\n\n  /**\n   * Setter for _store\n   * @param {string} store\n   */\n  set store(store: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".store\", store, scorm2004_regex.CMILangString4000)\n    ) {\n      this._store = store;\n    }\n  }\n\n  /**\n   * toJSON for adl.data.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      store: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    store: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this._id,\n      store: this._store,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl.nav.request_valid object\n */\n\nexport class ADLNavRequestValid extends BaseCMI {\n  private _continue = \"unknown\";\n  private _previous = \"unknown\";\n  private _choice: {\n    [key: string]: NAVBoolean;\n  } = {};\n  private _jump: {\n    [key: string]: NAVBoolean;\n  } = {};\n\n  /**\n   * Constructor for adl.nav.request_valid\n   */\n  constructor() {\n    super(\"adl.nav.request_valid\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._continue = \"unknown\";\n    this._previous = \"unknown\";\n  }\n\n  /**\n   * Getter for _continue\n   * @return {string}\n   */\n  get continue(): string {\n    return this._continue;\n  }\n\n  /**\n   * Setter for _continue. Just throws an error.\n   * @param {string} _continue\n   */\n  set continue(_continue: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".continue\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".continue\", _continue, scorm2004_regex.NAVBoolean)\n    ) {\n      this._continue = _continue;\n    }\n  }\n\n  /**\n   * Getter for _previous\n   * @return {string}\n   */\n  get previous(): string {\n    return this._previous;\n  }\n\n  /**\n   * Setter for _previous. Just throws an error.\n   * @param {string} _previous\n   */\n  set previous(_previous: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".previous\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".previous\", _previous, scorm2004_regex.NAVBoolean)\n    ) {\n      this._previous = _previous;\n    }\n  }\n\n  /**\n   * Getter for _choice\n   * @return {{ [key: string]: NAVBoolean }}\n   */\n  get choice(): { [key: string]: NAVBoolean } {\n    return this._choice;\n  }\n\n  /**\n   * Setter for _choice\n   * @param {{ [key: string]: string }} choice\n   */\n  set choice(choice: { [key: string]: string }) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".choice\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (typeof choice !== \"object\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".choice\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    for (const key in choice) {\n      if ({}.hasOwnProperty.call(choice, key)) {\n        if (\n          check2004ValidFormat(\n            this._cmi_element + \".choice.\" + key,\n            choice[key],\n            scorm2004_regex.NAVBoolean,\n          ) &&\n          check2004ValidFormat(this._cmi_element + \".choice.\" + key, key, scorm2004_regex.NAVTarget)\n        ) {\n          // Convert string value to NAVBoolean enum value\n          const value = choice[key];\n          if (value === \"true\") {\n            this._choice[key] = NAVBoolean.TRUE;\n          } else if (value === \"false\") {\n            this._choice[key] = NAVBoolean.FALSE;\n          } else if (value === \"unknown\") {\n            this._choice[key] = NAVBoolean.UNKNOWN;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Getter for _jump\n   * @return {{ [key: string]: NAVBoolean }}\n   */\n  get jump(): { [key: string]: NAVBoolean } {\n    return this._jump;\n  }\n\n  /**\n   * Setter for _jump\n   * @param {{ [key: string]: string }} jump\n   */\n  set jump(jump: { [key: string]: string }) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".jump\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (typeof jump !== \"object\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".jump\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    for (const key in jump) {\n      if ({}.hasOwnProperty.call(jump, key)) {\n        if (\n          check2004ValidFormat(\n            this._cmi_element + \".jump.\" + key,\n            jump[key],\n            scorm2004_regex.NAVBoolean,\n          ) &&\n          check2004ValidFormat(this._cmi_element + \".jump.\" + key, key, scorm2004_regex.NAVTarget)\n        ) {\n          // Convert string value to NAVBoolean enum value\n          const value = jump[key];\n          if (value === \"true\") {\n            this._jump[key] = NAVBoolean.TRUE;\n          } else if (value === \"false\") {\n            this._jump[key] = NAVBoolean.FALSE;\n          } else if (value === \"unknown\") {\n            this._jump[key] = NAVBoolean.UNKNOWN;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * toJSON for adl.nav.request_valid\n   *\n   * @return {\n   *    {\n   *      previous: string,\n   *      continue: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    previous: string;\n    continue: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      previous: this._previous,\n      continue: this._continue,\n      choice: this._choice,\n      jump: this._jump,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Enum for rule condition operators\n */\nexport enum RuleConditionOperator {\n  NOT = \"not\",\n  AND = \"and\",\n  OR = \"or\",\n}\n\n/**\n * Enum for rule condition types\n */\nexport enum RuleConditionType {\n  SATISFIED = \"satisfied\",\n  OBJECTIVE_STATUS_KNOWN = \"objectiveStatusKnown\",\n  OBJECTIVE_MEASURE_KNOWN = \"objectiveMeasureKnown\",\n  OBJECTIVE_MEASURE_GREATER_THAN = \"objectiveMeasureGreaterThan\",\n  OBJECTIVE_MEASURE_LESS_THAN = \"objectiveMeasureLessThan\",\n  COMPLETED = \"completed\",\n  PROGRESS_KNOWN = \"progressKnown\",\n  ATTEMPTED = \"attempted\",\n  ATTEMPT_LIMIT_EXCEEDED = \"attemptLimitExceeded\",\n  TIME_LIMIT_EXCEEDED = \"timeLimitExceeded\",\n  OUTSIDE_AVAILABLE_TIME_RANGE = \"outsideAvailableTimeRange\",\n  ALWAYS = \"always\",\n}\n\n/**\n * Enum for rule action types\n */\nexport enum RuleActionType {\n  SKIP = \"skip\",\n  DISABLED = \"disabled\",\n  HIDE_FROM_CHOICE = \"hideFromChoice\",\n  STOP_FORWARD_TRAVERSAL = \"stopForwardTraversal\",\n  EXIT_PARENT = \"exitParent\",\n  EXIT_ALL = \"exitAll\",\n  RETRY = \"retry\",\n  RETRY_ALL = \"retryAll\",\n  CONTINUE = \"continue\",\n  PREVIOUS = \"previous\",\n  EXIT = \"exit\",\n}\n\n/**\n * Class representing a sequencing rule condition\n */\nexport class RuleCondition extends BaseCMI {\n  private _condition: RuleConditionType = RuleConditionType.ALWAYS;\n  private _operator: RuleConditionOperator | null = null;\n  private _parameters: Map<string, any> = new Map();\n\n  /**\n   * Constructor for RuleCondition\n   * @param {RuleConditionType} condition - The condition type\n   * @param {RuleConditionOperator | null} operator - The operator (null for no operator)\n   * @param {Map<string, any>} parameters - Additional parameters for the condition\n   */\n  constructor(\n    condition: RuleConditionType = RuleConditionType.ALWAYS,\n    operator: RuleConditionOperator | null = null,\n    parameters: Map<string, any> = new Map(),\n  ) {\n    super(\"ruleCondition\");\n    this._condition = condition;\n    this._operator = operator;\n    this._parameters = parameters;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._condition = RuleConditionType.ALWAYS;\n    this._operator = null;\n    this._parameters = new Map();\n  }\n\n  /**\n   * Getter for condition\n   * @return {RuleConditionType}\n   */\n  get condition(): RuleConditionType {\n    return this._condition;\n  }\n\n  /**\n   * Setter for condition\n   * @param {RuleConditionType} condition\n   */\n  set condition(condition: RuleConditionType) {\n    this._condition = condition;\n  }\n\n  /**\n   * Getter for operator\n   * @return {RuleConditionOperator | null}\n   */\n  get operator(): RuleConditionOperator | null {\n    return this._operator;\n  }\n\n  /**\n   * Setter for operator\n   * @param {RuleConditionOperator | null} operator\n   */\n  set operator(operator: RuleConditionOperator | null) {\n    this._operator = operator;\n  }\n\n  /**\n   * Getter for parameters\n   * @return {Map<string, any>}\n   */\n  get parameters(): Map<string, any> {\n    return this._parameters;\n  }\n\n  /**\n   * Setter for parameters\n   * @param {Map<string, any>} parameters\n   */\n  set parameters(parameters: Map<string, any>) {\n    this._parameters = parameters;\n  }\n\n  /**\n   * Evaluate the condition for an activity\n   * @param {Activity} activity - The activity to evaluate the condition for\n   * @return {boolean} - True if the condition is met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    let result;\n    switch (this._condition) {\n      case RuleConditionType.SATISFIED:\n        result = activity.successStatus === SuccessStatus.PASSED;\n        break;\n      case RuleConditionType.OBJECTIVE_STATUS_KNOWN:\n        // noinspection PointlessBooleanExpressionJS\n        result = !!activity.objectiveMeasureStatus;\n        break;\n      case RuleConditionType.OBJECTIVE_MEASURE_KNOWN:\n        // noinspection PointlessBooleanExpressionJS\n        result = !!activity.objectiveMeasureStatus;\n        break;\n      case RuleConditionType.OBJECTIVE_MEASURE_GREATER_THAN: {\n        const greaterThanValue = this._parameters.get(\"threshold\") || 0;\n        result =\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure > greaterThanValue;\n        break;\n      }\n      case RuleConditionType.OBJECTIVE_MEASURE_LESS_THAN: {\n        const lessThanValue = this._parameters.get(\"threshold\") || 0;\n        result =\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure < lessThanValue;\n        break;\n      }\n      case RuleConditionType.COMPLETED:\n        result = activity.isCompleted;\n        break;\n      case RuleConditionType.PROGRESS_KNOWN:\n        result = activity.completionStatus !== \"unknown\";\n        break;\n      case RuleConditionType.ATTEMPTED:\n        result = activity.attemptCount > 0;\n        break;\n      case RuleConditionType.ATTEMPT_LIMIT_EXCEEDED: {\n        const attemptLimit = this._parameters.get(\"attemptLimit\") || 0;\n        result = activity.attemptCount >= attemptLimit;\n        break;\n      }\n      case RuleConditionType.TIME_LIMIT_EXCEEDED:\n        // Time limit exceeded would require additional tracking\n        result = false;\n        break;\n      case RuleConditionType.OUTSIDE_AVAILABLE_TIME_RANGE:\n        // Outside available time range would require additional tracking\n        result = false;\n        break;\n      case RuleConditionType.ALWAYS:\n        result = true;\n        break;\n      default:\n        result = false;\n        break;\n    }\n\n    if (this._operator === RuleConditionOperator.NOT) {\n      result = !result;\n    }\n\n    return result;\n  }\n\n  /**\n   * toJSON for RuleCondition\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      condition: this._condition,\n      operator: this._operator,\n      parameters: Object.fromEntries(this._parameters),\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a sequencing rule\n */\nexport class SequencingRule extends BaseCMI {\n  private _conditions: RuleCondition[] = [];\n  private _action: RuleActionType = RuleActionType.SKIP;\n  private _conditionCombination: string | RuleConditionOperator = RuleConditionOperator.AND;\n\n  /**\n   * Constructor for SequencingRule\n   * @param {RuleActionType} action - The action to take when the rule conditions are met\n   * @param {string | RuleConditionOperator} conditionCombination - How to combine multiple conditions (\"all\"/\"and\" or \"any\"/\"or\")\n   */\n  constructor(\n    action: RuleActionType = RuleActionType.SKIP,\n    conditionCombination: string | RuleConditionOperator = RuleConditionOperator.AND,\n  ) {\n    super(\"sequencingRule\");\n    this._action = action;\n    this._conditionCombination = conditionCombination;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._conditions = [];\n    this._action = RuleActionType.SKIP;\n    this._conditionCombination = RuleConditionOperator.AND;\n  }\n\n  /**\n   * Getter for conditions\n   * @return {RuleCondition[]}\n   */\n  get conditions(): RuleCondition[] {\n    return this._conditions;\n  }\n\n  /**\n   * Add a condition to the rule\n   * @param {RuleCondition} condition - The condition to add\n   */\n  addCondition(condition: RuleCondition): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(condition instanceof RuleCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    // Check if the condition is already in the array\n    if (!this._conditions.includes(condition)) {\n      this._conditions.push(condition);\n    }\n  }\n\n  /**\n   * Remove a condition from the rule\n   * @param {RuleCondition} condition - The condition to remove\n   * @return {boolean} - True if the condition was removed, false otherwise\n   */\n  removeCondition(condition: RuleCondition): boolean {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(condition instanceof RuleCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    const index = this._conditions.indexOf(condition);\n    if (index !== -1) {\n      this._conditions.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for action\n   * @return {RuleActionType}\n   */\n  get action(): RuleActionType {\n    return this._action;\n  }\n\n  /**\n   * Setter for action\n   * @param {RuleActionType} action\n   */\n  set action(action: RuleActionType) {\n    this._action = action;\n  }\n\n  /**\n   * Getter for conditionCombination\n   * @return {string | RuleConditionOperator}\n   */\n  get conditionCombination(): string | RuleConditionOperator {\n    return this._conditionCombination;\n  }\n\n  /**\n   * Setter for conditionCombination\n   * @param {string | RuleConditionOperator} conditionCombination\n   */\n  set conditionCombination(conditionCombination: string | RuleConditionOperator) {\n    this._conditionCombination = conditionCombination;\n  }\n\n  /**\n   * Evaluate the rule for an activity\n   * @param {Activity} activity - The activity to evaluate the rule for\n   * @return {boolean} - True if the rule conditions are met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    if (this._conditions.length === 0) {\n      return true;\n    }\n\n    if (\n      this._conditionCombination === \"all\" ||\n      this._conditionCombination === RuleConditionOperator.AND\n    ) {\n      return this._conditions.every((condition) => condition.evaluate(activity));\n    } else if (\n      this._conditionCombination === \"any\" ||\n      this._conditionCombination === RuleConditionOperator.OR\n    ) {\n      return this._conditions.some((condition) => condition.evaluate(activity));\n    }\n\n    return false;\n  }\n\n  /**\n   * toJSON for SequencingRule\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      conditions: this._conditions,\n      action: this._action,\n      conditionCombination: this._conditionCombination,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a collection of sequencing rules\n */\nexport class SequencingRules extends BaseCMI {\n  private _preConditionRules: SequencingRule[] = [];\n  private _exitConditionRules: SequencingRule[] = [];\n  private _postConditionRules: SequencingRule[] = [];\n\n  /**\n   * Constructor for SequencingRules\n   */\n  constructor() {\n    super(\"sequencingRules\");\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._preConditionRules = [];\n    this._exitConditionRules = [];\n    this._postConditionRules = [];\n  }\n\n  /**\n   * Getter for preConditionRules\n   * @return {SequencingRule[]}\n   */\n  get preConditionRules(): SequencingRule[] {\n    return this._preConditionRules;\n  }\n\n  /**\n   * Add a pre-condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addPreConditionRule(rule: SequencingRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".preConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._preConditionRules.push(rule);\n  }\n\n  /**\n   * Getter for exitConditionRules\n   * @return {SequencingRule[]}\n   */\n  get exitConditionRules(): SequencingRule[] {\n    return this._exitConditionRules;\n  }\n\n  /**\n   * Add an exit condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addExitConditionRule(rule: SequencingRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exitConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._exitConditionRules.push(rule);\n  }\n\n  /**\n   * Getter for postConditionRules\n   * @return {SequencingRule[]}\n   */\n  get postConditionRules(): SequencingRule[] {\n    return this._postConditionRules;\n  }\n\n  /**\n   * Add a post-condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addPostConditionRule(rule: SequencingRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".postConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._postConditionRules.push(rule);\n  }\n\n  /**\n   * Evaluate pre-condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluatePreConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._preConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Evaluate exit condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluateExitConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._exitConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Evaluate post-condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluatePostConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._postConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * toJSON for SequencingRules\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      preConditionRules: this._preConditionRules,\n      exitConditionRules: this._exitConditionRules,\n      postConditionRules: this._postConditionRules,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { CompletionStatus, SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Enum for rollup action types\n */\nexport enum RollupActionType {\n  SATISFIED = \"satisfied\",\n  NOT_SATISFIED = \"notSatisfied\",\n  COMPLETED = \"completed\",\n  INCOMPLETE = \"incomplete\",\n}\n\n/**\n * Enum for rollup condition types\n */\nexport enum RollupConditionType {\n  SATISFIED = \"satisfied\",\n  OBJECTIVE_STATUS_KNOWN = \"objectiveStatusKnown\",\n  OBJECTIVE_MEASURE_KNOWN = \"objectiveMeasureKnown\",\n  OBJECTIVE_MEASURE_GREATER_THAN = \"objectiveMeasureGreaterThan\",\n  OBJECTIVE_MEASURE_LESS_THAN = \"objectiveMeasureLessThan\",\n  COMPLETED = \"completed\",\n  PROGRESS_KNOWN = \"progressKnown\",\n  ATTEMPTED = \"attempted\",\n  NOT_ATTEMPTED = \"notAttempted\",\n  ALWAYS = \"always\",\n}\n\n/**\n * Enum for rollup consideration types\n */\nexport enum RollupConsiderationType {\n  ALL = \"all\",\n  ANY = \"any\",\n  NONE = \"none\",\n  AT_LEAST_COUNT = \"atLeastCount\",\n  AT_LEAST_PERCENT = \"atLeastPercent\",\n}\n\n/**\n * Class representing a rollup condition\n */\nexport class RollupCondition extends BaseCMI {\n  private _condition: RollupConditionType = RollupConditionType.ALWAYS;\n  private _parameters: Map<string, any> = new Map();\n\n  /**\n   * Constructor for RollupCondition\n   * @param {RollupConditionType} condition - The condition type\n   * @param {Map<string, any>} parameters - Additional parameters for the condition\n   */\n  constructor(\n    condition: RollupConditionType = RollupConditionType.ALWAYS,\n    parameters: Map<string, any> = new Map(),\n  ) {\n    super(\"rollupCondition\");\n    this._condition = condition;\n    this._parameters = parameters;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for condition\n   * @return {RollupConditionType}\n   */\n  get condition(): RollupConditionType {\n    return this._condition;\n  }\n\n  /**\n   * Setter for condition\n   * @param {RollupConditionType} condition\n   */\n  set condition(condition: RollupConditionType) {\n    this._condition = condition;\n  }\n\n  /**\n   * Getter for parameters\n   * @return {Map<string, any>}\n   */\n  get parameters(): Map<string, any> {\n    return this._parameters;\n  }\n\n  /**\n   * Setter for parameters\n   * @param {Map<string, any>} parameters\n   */\n  set parameters(parameters: Map<string, any>) {\n    this._parameters = parameters;\n  }\n\n  /**\n   * Evaluate the condition for an activity\n   * @param {Activity} activity - The activity to evaluate the condition for\n   * @return {boolean} - True if the condition is met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    switch (this._condition) {\n      case RollupConditionType.SATISFIED:\n        return activity.successStatus === SuccessStatus.PASSED;\n      case RollupConditionType.OBJECTIVE_STATUS_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RollupConditionType.OBJECTIVE_MEASURE_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RollupConditionType.OBJECTIVE_MEASURE_GREATER_THAN: {\n        const greaterThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure > greaterThanValue\n        );\n      }\n      case RollupConditionType.OBJECTIVE_MEASURE_LESS_THAN: {\n        const lessThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure < lessThanValue\n        );\n      }\n      case RollupConditionType.COMPLETED:\n        return activity.isCompleted;\n      case RollupConditionType.PROGRESS_KNOWN:\n        return activity.completionStatus !== CompletionStatus.UNKNOWN;\n      case RollupConditionType.ATTEMPTED:\n        return activity.attemptCount > 0;\n      case RollupConditionType.NOT_ATTEMPTED:\n        return activity.attemptCount === 0;\n      case RollupConditionType.ALWAYS:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RollupCondition\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      condition: this._condition,\n      parameters: Object.fromEntries(this._parameters),\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a rollup rule\n */\nexport class RollupRule extends BaseCMI {\n  private _conditions: RollupCondition[] = [];\n  private _action: RollupActionType = RollupActionType.SATISFIED;\n  private _consideration: RollupConsiderationType = RollupConsiderationType.ALL;\n  private _minimumCount: number = 0;\n  private _minimumPercent: number = 0;\n\n  /**\n   * Constructor for RollupRule\n   * @param {RollupActionType} action - The action to take when the rule conditions are met\n   * @param {RollupConsiderationType} consideration - How to consider child activities\n   * @param {number} minimumCount - The minimum count for AT_LEAST_COUNT consideration\n   * @param {number} minimumPercent - The minimum percent for AT_LEAST_PERCENT consideration\n   */\n  constructor(\n    action: RollupActionType = RollupActionType.SATISFIED,\n    consideration: RollupConsiderationType = RollupConsiderationType.ALL,\n    minimumCount: number = 0,\n    minimumPercent: number = 0,\n  ) {\n    super(\"rollupRule\");\n    this._action = action;\n    this._consideration = consideration;\n    this._minimumCount = minimumCount;\n    this._minimumPercent = minimumPercent;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._conditions = [];\n  }\n\n  /**\n   * Getter for conditions\n   * @return {RollupCondition[]}\n   */\n  get conditions(): RollupCondition[] {\n    return this._conditions;\n  }\n\n  /**\n   * Add a condition to the rule\n   * @param {RollupCondition} condition - The condition to add\n   */\n  addCondition(condition: RollupCondition): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(condition instanceof RollupCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._conditions.push(condition);\n  }\n\n  /**\n   * Remove a condition from the rule\n   * @param {RollupCondition} condition - The condition to remove\n   * @return {boolean} - True if the condition was removed, false otherwise\n   */\n  removeCondition(condition: RollupCondition): boolean {\n    const index = this._conditions.indexOf(condition);\n    if (index !== -1) {\n      this._conditions.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for action\n   * @return {RollupActionType}\n   */\n  get action(): RollupActionType {\n    return this._action;\n  }\n\n  /**\n   * Setter for action\n   * @param {RollupActionType} action\n   */\n  set action(action: RollupActionType) {\n    this._action = action;\n  }\n\n  /**\n   * Getter for consideration\n   * @return {RollupConsiderationType}\n   */\n  get consideration(): RollupConsiderationType {\n    return this._consideration;\n  }\n\n  /**\n   * Setter for consideration\n   * @param {RollupConsiderationType} consideration\n   */\n  set consideration(consideration: RollupConsiderationType) {\n    this._consideration = consideration;\n  }\n\n  /**\n   * Getter for minimumCount\n   * @return {number}\n   */\n  get minimumCount(): number {\n    return this._minimumCount;\n  }\n\n  /**\n   * Setter for minimumCount\n   * @param {number} minimumCount\n   */\n  set minimumCount(minimumCount: number) {\n    if (minimumCount >= 0) {\n      this._minimumCount = minimumCount;\n    }\n  }\n\n  /**\n   * Getter for minimumPercent\n   * @return {number}\n   */\n  get minimumPercent(): number {\n    return this._minimumPercent;\n  }\n\n  /**\n   * Setter for minimumPercent\n   * @param {number} minimumPercent\n   */\n  set minimumPercent(minimumPercent: number) {\n    if (minimumPercent >= 0 && minimumPercent <= 100) {\n      this._minimumPercent = minimumPercent;\n    }\n  }\n\n  /**\n   * Evaluate the rule for a set of child activities\n   * @param {Activity[]} children - The child activities to evaluate the rule for\n   * @return {boolean} - True if the rule conditions are met, false otherwise\n   */\n  evaluate(children: Activity[]): boolean {\n    if (children.length === 0) {\n      return false;\n    }\n\n    // Filter children that meet all conditions\n    const matchingChildren = children.filter((child) => {\n      return this._conditions.every((condition) => condition.evaluate(child));\n    });\n\n    // Apply consideration\n    switch (this._consideration) {\n      case RollupConsiderationType.ALL:\n        return matchingChildren.length === children.length;\n      case RollupConsiderationType.ANY:\n        return matchingChildren.length > 0;\n      case RollupConsiderationType.NONE:\n        return matchingChildren.length === 0;\n      case RollupConsiderationType.AT_LEAST_COUNT:\n        return matchingChildren.length >= this._minimumCount;\n      case RollupConsiderationType.AT_LEAST_PERCENT: {\n        const percent = (matchingChildren.length / children.length) * 100;\n        return percent >= this._minimumPercent;\n      }\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RollupRule\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      conditions: this._conditions,\n      action: this._action,\n      consideration: this._consideration,\n      minimumCount: this._minimumCount,\n      minimumPercent: this._minimumPercent,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a collection of rollup rules\n */\nexport class RollupRules extends BaseCMI {\n  private _rules: RollupRule[] = [];\n\n  /**\n   * Constructor for RollupRules\n   */\n  constructor() {\n    super(\"rollupRules\");\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._rules = [];\n  }\n\n  /**\n   * Getter for rules\n   * @return {RollupRule[]}\n   */\n  get rules(): RollupRule[] {\n    return this._rules;\n  }\n\n  /**\n   * Add a rule\n   * @param {RollupRule} rule - The rule to add\n   */\n  addRule(rule: RollupRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof RollupRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".rules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._rules.push(rule);\n  }\n\n  /**\n   * Remove a rule\n   * @param {RollupRule} rule - The rule to remove\n   * @return {boolean} - True if the rule was removed, false otherwise\n   */\n  removeRule(rule: RollupRule): boolean {\n    const index = this._rules.indexOf(rule);\n    if (index !== -1) {\n      this._rules.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Process rollup for an activity\n   * @param {Activity} activity - The activity to process rollup for\n   */\n  processRollup(activity: Activity): void {\n    if (!activity || activity.children.length === 0) {\n      return;\n    }\n\n    const children = activity.children;\n    let completionRollup = false;\n    let successRollup = false;\n\n    // Process each rule\n    for (const rule of this._rules) {\n      if (rule.evaluate(children)) {\n        switch (rule.action) {\n          case RollupActionType.SATISFIED:\n            activity.successStatus = SuccessStatus.PASSED;\n            successRollup = true;\n            break;\n          case RollupActionType.NOT_SATISFIED:\n            activity.successStatus = SuccessStatus.FAILED;\n            successRollup = true;\n            break;\n          case RollupActionType.COMPLETED:\n            activity.completionStatus = CompletionStatus.COMPLETED;\n            activity.isCompleted = true;\n            completionRollup = true;\n            break;\n          case RollupActionType.INCOMPLETE:\n            activity.completionStatus = CompletionStatus.INCOMPLETE;\n            activity.isCompleted = false;\n            completionRollup = true;\n            break;\n        }\n      }\n    }\n\n    // If no rules applied for completion, use default rollup\n    if (!completionRollup) {\n      this._defaultCompletionRollup(activity, children);\n    }\n\n    // If no rules applied for success, use default rollup\n    if (!successRollup) {\n      this._defaultSuccessRollup(activity, children);\n    }\n  }\n\n  /**\n   * Default completion rollup\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @private\n   */\n  private _defaultCompletionRollup(activity: Activity, children: Activity[]): void {\n    // If all children are completed, mark the parent as completed\n    const allCompleted = children.every((child) => child.isCompleted);\n    if (allCompleted) {\n      activity.completionStatus = CompletionStatus.COMPLETED;\n      activity.isCompleted = true;\n    } else {\n      // If any child is incomplete, mark the parent as incomplete\n      const anyIncomplete = children.some(\n        (child) => child.completionStatus === CompletionStatus.INCOMPLETE,\n      );\n      if (anyIncomplete) {\n        activity.completionStatus = CompletionStatus.INCOMPLETE;\n        activity.isCompleted = false;\n      }\n    }\n  }\n\n  /**\n   * Default success rollup\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @private\n   */\n  private _defaultSuccessRollup(activity: Activity, children: Activity[]): void {\n    // If all children are satisfied, mark the parent as satisfied\n    const allSatisfied = children.every((child) => child.successStatus === SuccessStatus.PASSED);\n    if (allSatisfied) {\n      activity.successStatus = SuccessStatus.PASSED;\n    } else {\n      // If any child is not satisfied, mark the parent as not satisfied\n      const anyNotSatisfied = children.some(\n        (child) => child.successStatus === SuccessStatus.FAILED,\n      );\n      if (anyNotSatisfied) {\n        activity.successStatus = SuccessStatus.FAILED;\n      }\n    }\n  }\n\n  /**\n   * toJSON for RollupRules\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      rules: this._rules,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","const ValidLanguages: string[] = [\n  \"aa\",\n  \"ab\",\n  \"ae\",\n  \"af\",\n  \"ak\",\n  \"am\",\n  \"an\",\n  \"ar\",\n  \"as\",\n  \"av\",\n  \"ay\",\n  \"az\",\n  \"ba\",\n  \"be\",\n  \"bg\",\n  \"bh\",\n  \"bi\",\n  \"bm\",\n  \"bn\",\n  \"bo\",\n  \"br\",\n  \"bs\",\n  \"ca\",\n  \"ce\",\n  \"ch\",\n  \"co\",\n  \"cr\",\n  \"cs\",\n  \"cu\",\n  \"cv\",\n  \"cy\",\n  \"da\",\n  \"de\",\n  \"dv\",\n  \"dz\",\n  \"ee\",\n  \"el\",\n  \"en\",\n  \"eo\",\n  \"es\",\n  \"et\",\n  \"eu\",\n  \"fa\",\n  \"ff\",\n  \"fi\",\n  \"fj\",\n  \"fo\",\n  \"fr\",\n  \"fy\",\n  \"ga\",\n  \"gd\",\n  \"gl\",\n  \"gn\",\n  \"gu\",\n  \"gv\",\n  \"ha\",\n  \"he\",\n  \"hi\",\n  \"ho\",\n  \"hr\",\n  \"ht\",\n  \"hu\",\n  \"hy\",\n  \"hz\",\n  \"ia\",\n  \"id\",\n  \"ie\",\n  \"ig\",\n  \"ii\",\n  \"ik\",\n  \"io\",\n  \"is\",\n  \"it\",\n  \"iu\",\n  \"ja\",\n  \"jv\",\n  \"ka\",\n  \"kg\",\n  \"ki\",\n  \"kj\",\n  \"kk\",\n  \"kl\",\n  \"km\",\n  \"kn\",\n  \"ko\",\n  \"kr\",\n  \"ks\",\n  \"ku\",\n  \"kv\",\n  \"kw\",\n  \"ky\",\n  \"la\",\n  \"lb\",\n  \"lg\",\n  \"li\",\n  \"ln\",\n  \"lo\",\n  \"lt\",\n  \"lu\",\n  \"lv\",\n  \"mg\",\n  \"mh\",\n  \"mi\",\n  \"mk\",\n  \"ml\",\n  \"mn\",\n  \"mo\",\n  \"mr\",\n  \"ms\",\n  \"mt\",\n  \"my\",\n  \"na\",\n  \"nb\",\n  \"nd\",\n  \"ne\",\n  \"ng\",\n  \"nl\",\n  \"nn\",\n  \"no\",\n  \"nr\",\n  \"nv\",\n  \"ny\",\n  \"oc\",\n  \"oj\",\n  \"om\",\n  \"or\",\n  \"os\",\n  \"pa\",\n  \"pi\",\n  \"pl\",\n  \"ps\",\n  \"pt\",\n  \"qu\",\n  \"rm\",\n  \"rn\",\n  \"ro\",\n  \"ru\",\n  \"rw\",\n  \"sa\",\n  \"sc\",\n  \"sd\",\n  \"se\",\n  \"sg\",\n  \"sh\",\n  \"si\",\n  \"sk\",\n  \"sl\",\n  \"sm\",\n  \"sn\",\n  \"so\",\n  \"sq\",\n  \"sr\",\n  \"ss\",\n  \"st\",\n  \"su\",\n  \"sv\",\n  \"sw\",\n  \"ta\",\n  \"te\",\n  \"tg\",\n  \"th\",\n  \"ti\",\n  \"tk\",\n  \"tl\",\n  \"tn\",\n  \"to\",\n  \"tr\",\n  \"ts\",\n  \"tt\",\n  \"tw\",\n  \"ty\",\n  \"ug\",\n  \"uk\",\n  \"ur\",\n  \"uz\",\n  \"ve\",\n  \"vi\",\n  \"vo\",\n  \"wa\",\n  \"wo\",\n  \"xh\",\n  \"yi\",\n  \"yo\",\n  \"za\",\n  \"zh\",\n  \"zu\",\n  \"aar\",\n  \"abk\",\n  \"ave\",\n  \"afr\",\n  \"aka\",\n  \"amh\",\n  \"arg\",\n  \"ara\",\n  \"asm\",\n  \"ava\",\n  \"aym\",\n  \"aze\",\n  \"bak\",\n  \"bel\",\n  \"bul\",\n  \"bih\",\n  \"bis\",\n  \"bam\",\n  \"ben\",\n  \"tib\",\n  \"bod\",\n  \"bre\",\n  \"bos\",\n  \"cat\",\n  \"che\",\n  \"cha\",\n  \"cos\",\n  \"cre\",\n  \"cze\",\n  \"ces\",\n  \"chu\",\n  \"chv\",\n  \"wel\",\n  \"cym\",\n  \"dan\",\n  \"ger\",\n  \"deu\",\n  \"div\",\n  \"dzo\",\n  \"ewe\",\n  \"gre\",\n  \"ell\",\n  \"eng\",\n  \"epo\",\n  \"spa\",\n  \"est\",\n  \"baq\",\n  \"eus\",\n  \"per\",\n  \"fas\",\n  \"ful\",\n  \"fin\",\n  \"fij\",\n  \"fao\",\n  \"fre\",\n  \"fra\",\n  \"fry\",\n  \"gle\",\n  \"gla\",\n  \"glg\",\n  \"grn\",\n  \"guj\",\n  \"glv\",\n  \"hau\",\n  \"heb\",\n  \"hin\",\n  \"hmo\",\n  \"hrv\",\n  \"hat\",\n  \"hun\",\n  \"arm\",\n  \"hye\",\n  \"her\",\n  \"ina\",\n  \"ind\",\n  \"ile\",\n  \"ibo\",\n  \"iii\",\n  \"ipk\",\n  \"ido\",\n  \"ice\",\n  \"isl\",\n  \"ita\",\n  \"iku\",\n  \"jpn\",\n  \"jav\",\n  \"geo\",\n  \"kat\",\n  \"kon\",\n  \"kik\",\n  \"kua\",\n  \"kaz\",\n  \"kal\",\n  \"khm\",\n  \"kan\",\n  \"kor\",\n  \"kau\",\n  \"kas\",\n  \"kur\",\n  \"kom\",\n  \"cor\",\n  \"kir\",\n  \"lat\",\n  \"ltz\",\n  \"lug\",\n  \"lim\",\n  \"lin\",\n  \"lao\",\n  \"lit\",\n  \"lub\",\n  \"lav\",\n  \"mlg\",\n  \"mah\",\n  \"mao\",\n  \"mri\",\n  \"mac\",\n  \"mkd\",\n  \"mal\",\n  \"mon\",\n  \"mol\",\n  \"mar\",\n  \"may\",\n  \"msa\",\n  \"mlt\",\n  \"bur\",\n  \"mya\",\n  \"nau\",\n  \"nob\",\n  \"nde\",\n  \"nep\",\n  \"ndo\",\n  \"dut\",\n  \"nld\",\n  \"nno\",\n  \"nor\",\n  \"nbl\",\n  \"nav\",\n  \"nya\",\n  \"oci\",\n  \"oji\",\n  \"orm\",\n  \"ori\",\n  \"oss\",\n  \"pan\",\n  \"pli\",\n  \"pol\",\n  \"pus\",\n  \"por\",\n  \"que\",\n  \"roh\",\n  \"run\",\n  \"rum\",\n  \"ron\",\n  \"rus\",\n  \"kin\",\n  \"san\",\n  \"srd\",\n  \"snd\",\n  \"sme\",\n  \"sag\",\n  \"slo\",\n  \"sin\",\n  \"slk\",\n  \"slv\",\n  \"smo\",\n  \"sna\",\n  \"som\",\n  \"alb\",\n  \"sqi\",\n  \"srp\",\n  \"ssw\",\n  \"sot\",\n  \"sun\",\n  \"swe\",\n  \"swa\",\n  \"tam\",\n  \"tel\",\n  \"tgk\",\n  \"tha\",\n  \"tir\",\n  \"tuk\",\n  \"tgl\",\n  \"tsn\",\n  \"ton\",\n  \"tur\",\n  \"tso\",\n  \"tat\",\n  \"twi\",\n  \"tah\",\n  \"uig\",\n  \"ukr\",\n  \"urd\",\n  \"uzb\",\n  \"ven\",\n  \"vie\",\n  \"vol\",\n  \"wln\",\n  \"wol\",\n  \"xho\",\n  \"yid\",\n  \"yor\",\n  \"zha\",\n  \"chi\",\n  \"zho\",\n  \"zul\",\n];\nexport default ValidLanguages;\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { scorm2004_regex } from \"../../../constants/regex\";\nimport { check2004ValidFormat } from \"../validation\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { CompletionStatus, SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Class representing a single activity in the SCORM 2004 activity tree\n */\nexport class Activity extends BaseCMI {\n  private _id: string = \"\";\n  private _title: string = \"\";\n  private _children: Activity[] = [];\n  private _parent: Activity | null = null;\n  private _isVisible: boolean = true;\n  private _isActive: boolean = false;\n  private _isSuspended: boolean = false;\n  private _isCompleted: boolean = false;\n  private _completionStatus: CompletionStatus = CompletionStatus.UNKNOWN;\n  private _successStatus: SuccessStatus = SuccessStatus.UNKNOWN;\n  private _attemptCount: number = 0;\n  private _attemptCompletionAmount: number = 0;\n  private _attemptAbsoluteDuration: string = \"PT0H0M0S\";\n  private _attemptExperiencedDuration: string = \"PT0H0M0S\";\n  private _activityAbsoluteDuration: string = \"PT0H0M0S\";\n  private _activityExperiencedDuration: string = \"PT0H0M0S\";\n  private _objectiveSatisfiedStatus: boolean = false;\n  private _objectiveMeasureStatus: boolean = false;\n  private _objectiveNormalizedMeasure: number = 0;\n\n  /**\n   * Constructor for Activity\n   * @param {string} id - The unique identifier for this activity\n   * @param {string} title - The title of this activity\n   */\n  constructor(id: string = \"\", title: string = \"\") {\n    super(\"activity\");\n    this._id = id;\n    this._title = title;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    // Initialize children\n    for (const child of this._children) {\n      child.initialize();\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._isActive = false;\n    this._isSuspended = false;\n    this._isCompleted = false;\n    this._completionStatus = CompletionStatus.UNKNOWN;\n    this._successStatus = SuccessStatus.UNKNOWN;\n    this._attemptCount = 0;\n    this._attemptCompletionAmount = 0;\n    this._attemptAbsoluteDuration = \"PT0H0M0S\";\n    this._attemptExperiencedDuration = \"PT0H0M0S\";\n    this._activityAbsoluteDuration = \"PT0H0M0S\";\n    this._activityExperiencedDuration = \"PT0H0M0S\";\n    this._objectiveSatisfiedStatus = false;\n    this._objectiveMeasureStatus = false;\n    this._objectiveNormalizedMeasure = 0;\n\n    // Reset children\n    for (const child of this._children) {\n      child.reset();\n    }\n  }\n\n  /**\n   * Getter for id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for title\n   * @return {string}\n   */\n  get title(): string {\n    return this._title;\n  }\n\n  /**\n   * Setter for title\n   * @param {string} title\n   */\n  set title(title: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".title\", title, scorm2004_regex.CMILangString250)\n    ) {\n      this._title = title;\n    }\n  }\n\n  /**\n   * Getter for children\n   * @return {Activity[]}\n   */\n  get children(): Activity[] {\n    return this._children;\n  }\n\n  /**\n   * Add a child activity to this activity\n   * @param {Activity} child - The child activity to add\n   */\n  addChild(child: Activity): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(child instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".children\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    child._parent = this;\n    this._children.push(child);\n  }\n\n  /**\n   * Remove a child activity from this activity\n   * @param {Activity} child - The child activity to remove\n   * @return {boolean} - True if the child was removed, false otherwise\n   */\n  removeChild(child: Activity): boolean {\n    const index = this._children.indexOf(child);\n    if (index !== -1) {\n      this._children.splice(index, 1);\n      child._parent = null;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for parent\n   * @return {Activity | null}\n   */\n  get parent(): Activity | null {\n    return this._parent;\n  }\n\n  /**\n   * Getter for isVisible\n   * @return {boolean}\n   */\n  get isVisible(): boolean {\n    return this._isVisible;\n  }\n\n  /**\n   * Setter for isVisible\n   * @param {boolean} isVisible\n   */\n  set isVisible(isVisible: boolean) {\n    this._isVisible = isVisible;\n  }\n\n  /**\n   * Getter for isActive\n   * @return {boolean}\n   */\n  get isActive(): boolean {\n    return this._isActive;\n  }\n\n  /**\n   * Setter for isActive\n   * @param {boolean} isActive\n   */\n  set isActive(isActive: boolean) {\n    this._isActive = isActive;\n  }\n\n  /**\n   * Getter for isSuspended\n   * @return {boolean}\n   */\n  get isSuspended(): boolean {\n    return this._isSuspended;\n  }\n\n  /**\n   * Setter for isSuspended\n   * @param {boolean} isSuspended\n   */\n  set isSuspended(isSuspended: boolean) {\n    this._isSuspended = isSuspended;\n  }\n\n  /**\n   * Getter for isCompleted\n   * @return {boolean}\n   */\n  get isCompleted(): boolean {\n    return this._isCompleted;\n  }\n\n  /**\n   * Setter for isCompleted\n   * @param {boolean} isCompleted\n   */\n  set isCompleted(isCompleted: boolean) {\n    this._isCompleted = isCompleted;\n  }\n\n  /**\n   * Getter for completionStatus\n   * @return {CompletionStatus}\n   */\n  get completionStatus(): CompletionStatus {\n    return this._completionStatus;\n  }\n\n  /**\n   * Setter for completionStatus\n   * @param {CompletionStatus} completionStatus\n   */\n  set completionStatus(completionStatus: CompletionStatus) {\n    this._completionStatus = completionStatus;\n    this._isCompleted = completionStatus === CompletionStatus.COMPLETED;\n  }\n\n  /**\n   * Getter for successStatus\n   * @return {SuccessStatus}\n   */\n  get successStatus(): SuccessStatus {\n    return this._successStatus;\n  }\n\n  /**\n   * Setter for successStatus\n   * @param {SuccessStatus} successStatus\n   */\n  set successStatus(successStatus: SuccessStatus) {\n    this._successStatus = successStatus;\n  }\n\n  /**\n   * Getter for attemptCount\n   * @return {number}\n   */\n  get attemptCount(): number {\n    return this._attemptCount;\n  }\n\n  /**\n   * Increment the attempt count\n   */\n  incrementAttemptCount(): void {\n    this._attemptCount++;\n  }\n\n  /**\n   * Getter for objectiveMeasureStatus\n   * @return {boolean}\n   */\n  get objectiveMeasureStatus(): boolean {\n    return this._objectiveMeasureStatus;\n  }\n\n  /**\n   * Setter for objectiveMeasureStatus\n   * @param {boolean} objectiveMeasureStatus\n   */\n  set objectiveMeasureStatus(objectiveMeasureStatus: boolean) {\n    this._objectiveMeasureStatus = objectiveMeasureStatus;\n  }\n\n  /**\n   * Getter for objectiveNormalizedMeasure\n   * @return {number}\n   */\n  get objectiveNormalizedMeasure(): number {\n    return this._objectiveNormalizedMeasure;\n  }\n\n  /**\n   * Setter for objectiveNormalizedMeasure\n   * @param {number} objectiveNormalizedMeasure\n   */\n  set objectiveNormalizedMeasure(objectiveNormalizedMeasure: number) {\n    this._objectiveNormalizedMeasure = objectiveNormalizedMeasure;\n  }\n\n  /**\n   * toJSON for Activity\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      id: this._id,\n      title: this._title,\n      isVisible: this._isVisible,\n      isActive: this._isActive,\n      isSuspended: this._isSuspended,\n      isCompleted: this._isCompleted,\n      completionStatus: this._completionStatus,\n      successStatus: this._successStatus,\n      attemptCount: this._attemptCount,\n      attemptCompletionAmount: this._attemptCompletionAmount,\n      attemptAbsoluteDuration: this._attemptAbsoluteDuration,\n      attemptExperiencedDuration: this._attemptExperiencedDuration,\n      activityAbsoluteDuration: this._activityAbsoluteDuration,\n      activityExperiencedDuration: this._activityExperiencedDuration,\n      objectiveSatisfiedStatus: this._objectiveSatisfiedStatus,\n      objectiveMeasureStatus: this._objectiveMeasureStatus,\n      objectiveNormalizedMeasure: this._objectiveNormalizedMeasure,\n      children: this._children.map((child) => child.toJSON()),\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\n\n/**\n * Class representing the SCORM 2004 activity tree\n */\nexport class ActivityTree extends BaseCMI {\n  private _root: Activity | null = null;\n  private _currentActivity: Activity | null = null;\n  private _suspendedActivity: Activity | null = null;\n  private _activities: Map<string, Activity> = new Map();\n\n  /**\n   * Constructor for ActivityTree\n   */\n  constructor() {\n    super(\"activityTree\");\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    if (this._root) {\n      this._root.initialize();\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._currentActivity = null;\n    this._suspendedActivity = null;\n    if (this._root) {\n      this._root.reset();\n    }\n  }\n\n  /**\n   * Getter for root\n   * @return {Activity | null}\n   */\n  get root(): Activity | null {\n    return this._root;\n  }\n\n  /**\n   * Setter for root\n   * @param {Activity} root\n   */\n  set root(root: Activity | null) {\n    // noinspection SuspiciousTypeOfGuard\n    if (root !== null && !(root instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".root\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._root = root;\n    if (root) {\n      this._activities.set(root.id, root);\n      this._addActivitiesToMap(root);\n    }\n  }\n\n  /**\n   * Recursively add activities to the activities map\n   * @param {Activity} activity\n   * @private\n   */\n  private _addActivitiesToMap(activity: Activity): void {\n    for (const child of activity.children) {\n      this._activities.set(child.id, child);\n      this._addActivitiesToMap(child);\n    }\n  }\n\n  /**\n   * Getter for currentActivity\n   * @return {Activity | null}\n   */\n  get currentActivity(): Activity | null {\n    return this._currentActivity;\n  }\n\n  /**\n   * Setter for currentActivity\n   * @param {Activity | null} activity\n   */\n  set currentActivity(activity: Activity | null) {\n    // noinspection SuspiciousTypeOfGuard\n    if (activity !== null && !(activity instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".currentActivity\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n\n    // If there's already a current activity, deactivate it\n    if (this._currentActivity) {\n      this._currentActivity.isActive = false;\n    }\n\n    // Set the new current activity and activate it\n    this._currentActivity = activity;\n    if (activity) {\n      activity.isActive = true;\n    }\n  }\n\n  /**\n   * Getter for suspendedActivity\n   * @return {Activity | null}\n   */\n  get suspendedActivity(): Activity | null {\n    return this._suspendedActivity;\n  }\n\n  /**\n   * Setter for suspendedActivity\n   * @param {Activity | null} activity\n   */\n  set suspendedActivity(activity: Activity | null) {\n    // noinspection SuspiciousTypeOfGuard\n    if (activity !== null && !(activity instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".suspendedActivity\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n\n    // If there's already a suspended activity, unsuspend it\n    if (this._suspendedActivity) {\n      this._suspendedActivity.isSuspended = false;\n    }\n\n    // Set the new suspended activity and mark it as suspended\n    this._suspendedActivity = activity;\n    if (activity) {\n      activity.isSuspended = true;\n    }\n  }\n\n  /**\n   * Get an activity by ID\n   * @param {string} id - The ID of the activity to get\n   * @return {Activity | undefined} - The activity with the given ID, or undefined if not found\n   */\n  getActivity(id: string): Activity | undefined {\n    return this._activities.get(id);\n  }\n\n  /**\n   * Get all activities in the tree\n   * @return {Activity[]} - An array of all activities in the tree\n   */\n  getAllActivities(): Activity[] {\n    return Array.from(this._activities.values());\n  }\n\n  /**\n   * Get the parent of an activity\n   * @param {Activity} activity - The activity to get the parent of\n   * @return {Activity | null} - The parent of the activity, or null if it has no parent\n   */\n  getParent(activity: Activity): Activity | null {\n    return activity.parent;\n  }\n\n  /**\n   * Get the children of an activity\n   * @param {Activity} activity - The activity to get the children of\n   * @return {Activity[]} - An array of the activity's children\n   */\n  getChildren(activity: Activity): Activity[] {\n    return activity.children;\n  }\n\n  /**\n   * Get the siblings of an activity\n   * @param {Activity} activity - The activity to get the siblings of\n   * @return {Activity[]} - An array of the activity's siblings\n   */\n  getSiblings(activity: Activity): Activity[] {\n    if (!activity.parent) {\n      return [];\n    }\n    return activity.parent.children.filter((child) => child !== activity);\n  }\n\n  /**\n   * Get the next sibling of an activity\n   * @param {Activity} activity - The activity to get the next sibling of\n   * @return {Activity | null} - The next sibling of the activity, or null if it has no next sibling\n   */\n  getNextSibling(activity: Activity): Activity | null {\n    if (!activity.parent) {\n      return null;\n    }\n    const siblings = activity.parent.children;\n    const index = siblings.indexOf(activity);\n    if (index === -1 || index === siblings.length - 1) {\n      return null;\n    }\n    return siblings[index + 1];\n  }\n\n  /**\n   * Get the previous sibling of an activity\n   * @param {Activity} activity - The activity to get the previous sibling of\n   * @return {Activity | null} - The previous sibling of the activity, or null if it has no previous sibling\n   */\n  getPreviousSibling(activity: Activity): Activity | null {\n    if (!activity.parent) {\n      return null;\n    }\n    const siblings = activity.parent.children;\n    const index = siblings.indexOf(activity);\n    if (index <= 0) {\n      return null;\n    }\n    return siblings[index - 1];\n  }\n\n  /**\n   * Get the first child of an activity\n   * @param {Activity} activity - The activity to get the first child of\n   * @return {Activity | null} - The first child of the activity, or null if it has no children\n   */\n  getFirstChild(activity: Activity): Activity | null {\n    if (activity.children.length === 0) {\n      return null;\n    }\n    return activity.children[0];\n  }\n\n  /**\n   * Get the last child of an activity\n   * @param {Activity} activity - The activity to get the last child of\n   * @return {Activity | null} - The last child of the activity, or null if it has no children\n   */\n  getLastChild(activity: Activity): Activity | null {\n    if (activity.children.length === 0) {\n      return null;\n    }\n    return activity.children[activity.children.length - 1];\n  }\n\n  /**\n   * Get the common ancestor of two activities\n   * @param {Activity} activity1 - The first activity\n   * @param {Activity} activity2 - The second activity\n   * @return {Activity | null} - The common ancestor of the two activities, or null if they have no common ancestor\n   */\n  getCommonAncestor(activity1: Activity, activity2: Activity): Activity | null {\n    // Get the path from the root to activity1\n    const path1: Activity[] = [];\n    let current: Activity | null = activity1;\n    while (current) {\n      path1.unshift(current);\n      current = current.parent;\n    }\n\n    // Check if activity2 is in the path from the root to activity1\n    current = activity2;\n    while (current) {\n      if (path1.includes(current)) {\n        return current;\n      }\n      current = current.parent;\n    }\n\n    return null;\n  }\n\n  /**\n   * toJSON for ActivityTree\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      root: this._root,\n      currentActivity: this._currentActivity ? this._currentActivity.id : null,\n      suspendedActivity: this._suspendedActivity ? this._suspendedActivity.id : null,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\n\n/**\n * Class representing SCORM 2004 sequencing controls\n */\nexport class SequencingControls extends BaseCMI {\n  // Sequencing Control Modes\n  private _enabled: boolean = true;\n  private _choiceExit: boolean = true;\n  private _flow: boolean = false;\n  private _forwardOnly: boolean = false;\n  private _useCurrentAttemptObjectiveInfo: boolean = true;\n  private _useCurrentAttemptProgressInfo: boolean = true;\n\n  // Constrain Choice Controls\n  private _preventActivation: boolean = false;\n  private _constrainChoice: boolean = false;\n\n  // Rollup Controls\n  private _rollupObjectiveSatisfied: boolean = true;\n  private _rollupProgressCompletion: boolean = true;\n  private _objectiveMeasureWeight: number = 1.0;\n\n  /**\n   * Constructor for SequencingControls\n   */\n  constructor() {\n    super(\"sequencingControls\");\n  }\n\n  /**\n   * Reset the sequencing controls to their default values\n   */\n  reset() {\n    this._initialized = false;\n    this._enabled = true;\n    this._choiceExit = true;\n    this._flow = false;\n    this._forwardOnly = false;\n    this._useCurrentAttemptObjectiveInfo = true;\n    this._useCurrentAttemptProgressInfo = true;\n    this._preventActivation = false;\n    this._constrainChoice = false;\n    this._rollupObjectiveSatisfied = true;\n    this._rollupProgressCompletion = true;\n    this._objectiveMeasureWeight = 1.0;\n  }\n\n  /**\n   * Getter for enabled\n   * @return {boolean}\n   */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  /**\n   * Setter for enabled\n   * @param {boolean} enabled\n   */\n  set enabled(enabled: boolean) {\n    this._enabled = enabled;\n  }\n\n  /**\n   * Getter for choiceExit\n   * @return {boolean}\n   */\n  get choiceExit(): boolean {\n    return this._choiceExit;\n  }\n\n  /**\n   * Setter for choiceExit\n   * @param {boolean} choiceExit\n   */\n  set choiceExit(choiceExit: boolean) {\n    this._choiceExit = choiceExit;\n  }\n\n  /**\n   * Getter for flow\n   * @return {boolean}\n   */\n  get flow(): boolean {\n    return this._flow;\n  }\n\n  /**\n   * Setter for flow\n   * @param {boolean} flow\n   */\n  set flow(flow: boolean) {\n    this._flow = flow;\n  }\n\n  /**\n   * Getter for forwardOnly\n   * @return {boolean}\n   */\n  get forwardOnly(): boolean {\n    return this._forwardOnly;\n  }\n\n  /**\n   * Setter for forwardOnly\n   * @param {boolean} forwardOnly\n   */\n  set forwardOnly(forwardOnly: boolean) {\n    this._forwardOnly = forwardOnly;\n  }\n\n  /**\n   * Getter for useCurrentAttemptObjectiveInfo\n   * @return {boolean}\n   */\n  get useCurrentAttemptObjectiveInfo(): boolean {\n    return this._useCurrentAttemptObjectiveInfo;\n  }\n\n  /**\n   * Setter for useCurrentAttemptObjectiveInfo\n   * @param {boolean} useCurrentAttemptObjectiveInfo\n   */\n  set useCurrentAttemptObjectiveInfo(useCurrentAttemptObjectiveInfo: boolean) {\n    this._useCurrentAttemptObjectiveInfo = useCurrentAttemptObjectiveInfo;\n  }\n\n  /**\n   * Getter for useCurrentAttemptProgressInfo\n   * @return {boolean}\n   */\n  get useCurrentAttemptProgressInfo(): boolean {\n    return this._useCurrentAttemptProgressInfo;\n  }\n\n  /**\n   * Setter for useCurrentAttemptProgressInfo\n   * @param {boolean} useCurrentAttemptProgressInfo\n   */\n  set useCurrentAttemptProgressInfo(useCurrentAttemptProgressInfo: boolean) {\n    this._useCurrentAttemptProgressInfo = useCurrentAttemptProgressInfo;\n  }\n\n  /**\n   * Getter for preventActivation\n   * @return {boolean}\n   */\n  get preventActivation(): boolean {\n    return this._preventActivation;\n  }\n\n  /**\n   * Setter for preventActivation\n   * @param {boolean} preventActivation\n   */\n  set preventActivation(preventActivation: boolean) {\n    this._preventActivation = preventActivation;\n  }\n\n  /**\n   * Getter for constrainChoice\n   * @return {boolean}\n   */\n  get constrainChoice(): boolean {\n    return this._constrainChoice;\n  }\n\n  /**\n   * Setter for constrainChoice\n   * @param {boolean} constrainChoice\n   */\n  set constrainChoice(constrainChoice: boolean) {\n    this._constrainChoice = constrainChoice;\n  }\n\n  /**\n   * Getter for rollupObjectiveSatisfied\n   * @return {boolean}\n   */\n  get rollupObjectiveSatisfied(): boolean {\n    return this._rollupObjectiveSatisfied;\n  }\n\n  /**\n   * Setter for rollupObjectiveSatisfied\n   * @param {boolean} rollupObjectiveSatisfied\n   */\n  set rollupObjectiveSatisfied(rollupObjectiveSatisfied: boolean) {\n    this._rollupObjectiveSatisfied = rollupObjectiveSatisfied;\n  }\n\n  /**\n   * Getter for rollupProgressCompletion\n   * @return {boolean}\n   */\n  get rollupProgressCompletion(): boolean {\n    return this._rollupProgressCompletion;\n  }\n\n  /**\n   * Setter for rollupProgressCompletion\n   * @param {boolean} rollupProgressCompletion\n   */\n  set rollupProgressCompletion(rollupProgressCompletion: boolean) {\n    this._rollupProgressCompletion = rollupProgressCompletion;\n  }\n\n  /**\n   * Getter for objectiveMeasureWeight\n   * @return {number}\n   */\n  get objectiveMeasureWeight(): number {\n    return this._objectiveMeasureWeight;\n  }\n\n  /**\n   * Setter for objectiveMeasureWeight\n   * @param {number} objectiveMeasureWeight\n   */\n  set objectiveMeasureWeight(objectiveMeasureWeight: number) {\n    if (objectiveMeasureWeight >= 0 && objectiveMeasureWeight <= 1) {\n      this._objectiveMeasureWeight = objectiveMeasureWeight;\n    }\n  }\n\n  /**\n   * Check if choice navigation is allowed\n   * @return {boolean} - True if choice navigation is allowed, false otherwise\n   */\n  isChoiceNavigationAllowed(): boolean {\n    return this._enabled && !this._constrainChoice;\n  }\n\n  /**\n   * Check if flow navigation is allowed\n   * @return {boolean} - True if flow navigation is allowed, false otherwise\n   */\n  isFlowNavigationAllowed(): boolean {\n    return this._enabled && this._flow;\n  }\n\n  /**\n   * Check if forward navigation is allowed\n   * @return {boolean} - True if forward navigation is allowed, false otherwise\n   */\n  isForwardNavigationAllowed(): boolean {\n    return this._enabled && (!this._forwardOnly || this._flow);\n  }\n\n  /**\n   * Check if backward navigation is allowed\n   * @return {boolean} - True if backward navigation is allowed, false otherwise\n   */\n  isBackwardNavigationAllowed(): boolean {\n    return this._enabled && !this._forwardOnly;\n  }\n\n  /**\n   * toJSON for SequencingControls\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      enabled: this._enabled,\n      choiceExit: this._choiceExit,\n      flow: this._flow,\n      forwardOnly: this._forwardOnly,\n      useCurrentAttemptObjectiveInfo: this._useCurrentAttemptObjectiveInfo,\n      useCurrentAttemptProgressInfo: this._useCurrentAttemptProgressInfo,\n      preventActivation: this._preventActivation,\n      constrainChoice: this._constrainChoice,\n      rollupObjectiveSatisfied: this._rollupObjectiveSatisfied,\n      rollupProgressCompletion: this._rollupProgressCompletion,\n      objectiveMeasureWeight: this._objectiveMeasureWeight,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { ActivityTree } from \"./activity_tree\";\nimport { RuleActionType, SequencingRules } from \"./sequencing_rules\";\nimport { SequencingControls } from \"./sequencing_controls\";\nimport { RollupRules } from \"./rollup_rules\";\nimport { ADLNav } from \"../adl\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\n\n/**\n * Class representing SCORM 2004 sequencing\n */\nexport class Sequencing extends BaseCMI {\n  private _activityTree: ActivityTree;\n  private _sequencingRules: SequencingRules;\n  private _sequencingControls: SequencingControls;\n  private _rollupRules: RollupRules;\n  private _adlNav: ADLNav | null = null;\n\n  /**\n   * Constructor for Sequencing\n   */\n  constructor() {\n    super(\"sequencing\");\n    this._activityTree = new ActivityTree();\n    this._sequencingRules = new SequencingRules();\n    this._sequencingControls = new SequencingControls();\n    this._rollupRules = new RollupRules();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this._activityTree.initialize();\n    this._sequencingRules.initialize();\n    this._sequencingControls.initialize();\n    this._rollupRules.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._activityTree.reset();\n    this._sequencingRules.reset();\n    this._sequencingControls.reset();\n    this._rollupRules.reset();\n  }\n\n  /**\n   * Getter for activityTree\n   * @return {ActivityTree}\n   */\n  get activityTree(): ActivityTree {\n    return this._activityTree;\n  }\n\n  /**\n   * Setter for activityTree\n   * @param {ActivityTree} activityTree\n   */\n  set activityTree(activityTree: ActivityTree) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(activityTree instanceof ActivityTree)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".activityTree\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._activityTree = activityTree;\n  }\n\n  /**\n   * Getter for sequencingRules\n   * @return {SequencingRules}\n   */\n  get sequencingRules(): SequencingRules {\n    return this._sequencingRules;\n  }\n\n  /**\n   * Setter for sequencingRules\n   * @param {SequencingRules} sequencingRules\n   */\n  set sequencingRules(sequencingRules: SequencingRules) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(sequencingRules instanceof SequencingRules)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".sequencingRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._sequencingRules = sequencingRules;\n  }\n\n  /**\n   * Getter for sequencingControls\n   * @return {SequencingControls}\n   */\n  get sequencingControls(): SequencingControls {\n    return this._sequencingControls;\n  }\n\n  /**\n   * Setter for sequencingControls\n   * @param {SequencingControls} sequencingControls\n   */\n  set sequencingControls(sequencingControls: SequencingControls) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(sequencingControls instanceof SequencingControls)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".sequencingControls\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._sequencingControls = sequencingControls;\n  }\n\n  /**\n   * Getter for rollupRules\n   * @return {RollupRules}\n   */\n  get rollupRules(): RollupRules {\n    return this._rollupRules;\n  }\n\n  /**\n   * Setter for rollupRules\n   * @param {RollupRules} rollupRules\n   */\n  set rollupRules(rollupRules: RollupRules) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rollupRules instanceof RollupRules)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".rollupRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._rollupRules = rollupRules;\n  }\n\n  /**\n   * Getter for adlNav\n   * @return {ADLNav | null}\n   */\n  get adlNav(): ADLNav | null {\n    return this._adlNav;\n  }\n\n  /**\n   * Setter for adlNav\n   * @param {ADLNav | null} adlNav\n   */\n  set adlNav(adlNav: ADLNav | null) {\n    this._adlNav = adlNav;\n  }\n\n  /**\n   * Process navigation request\n   * @param {string} request - The navigation request\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processNavigationRequest(request: string): boolean {\n    if (!this._adlNav) {\n      return false;\n    }\n\n    // Set the navigation request\n    this._adlNav.request = request;\n\n    // Get the current activity\n    const currentActivity = this._activityTree.currentActivity;\n    if (!currentActivity) {\n      return false;\n    }\n\n    // Evaluate pre-condition rules\n    const preConditionAction = this._sequencingRules.evaluatePreConditionRules(currentActivity);\n    if (preConditionAction) {\n      // Handle pre-condition action\n      switch (preConditionAction) {\n        case RuleActionType.SKIP:\n          // Skip this activity\n          return false;\n        case RuleActionType.DISABLED:\n          // Disable this activity\n          return false;\n        case RuleActionType.HIDE_FROM_CHOICE:\n          // Hide this activity from choice\n          return false;\n        case RuleActionType.STOP_FORWARD_TRAVERSAL:\n          // Stop forward traversal\n          return false;\n        default:\n          break;\n      }\n    }\n\n    // Process the navigation request based on the request type\n    switch (request) {\n      case \"continue\":\n        return this.processContinueRequest(currentActivity);\n      case \"previous\":\n        return this.processPreviousRequest(currentActivity);\n      case \"choice\":\n        // Choice navigation would require additional parameters\n        return false;\n      case \"exit\":\n        return this.processExitRequest(currentActivity);\n      case \"exitAll\":\n        return this.processExitAllRequest();\n      case \"abandon\":\n        return this.processAbandonRequest(currentActivity);\n      case \"abandonAll\":\n        return this.processAbandonAllRequest();\n      case \"suspendAll\":\n        return this.processSuspendAllRequest(currentActivity);\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Process continue request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processContinueRequest(currentActivity: Activity): boolean {\n    // Check if continue is allowed\n    if (!this._sequencingControls.isForwardNavigationAllowed()) {\n      return false;\n    }\n\n    // Get the next activity\n    const nextActivity = this._activityTree.getNextSibling(currentActivity);\n    if (!nextActivity) {\n      return false;\n    }\n\n    // Handle exit condition actions\n    if (this._handleExitConditionAction(currentActivity)) {\n      return true;\n    }\n\n    // Set the next activity as current\n    this._activityTree.currentActivity = nextActivity;\n\n    // Evaluate post-condition rules\n    const postConditionAction = this._sequencingRules.evaluatePostConditionRules(nextActivity);\n    if (postConditionAction) {\n      // Handle post-condition action\n      switch (postConditionAction) {\n        case RuleActionType.RETRY:\n          // Retry this activity\n          nextActivity.incrementAttemptCount();\n          return true;\n        case RuleActionType.RETRY_ALL:\n          // Retry all activities\n          this._activityTree.getAllActivities().forEach((activity) => {\n            activity.incrementAttemptCount();\n          });\n          return true;\n        case RuleActionType.CONTINUE:\n          // Continue to next activity\n          return this.processContinueRequest(nextActivity);\n        case RuleActionType.PREVIOUS:\n          // Go to previous activity\n          return this.processPreviousRequest(nextActivity);\n        case RuleActionType.EXIT:\n          // Exit this activity\n          this._activityTree.currentActivity = currentActivity;\n          return true;\n        default:\n          break;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Process previous request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processPreviousRequest(currentActivity: Activity): boolean {\n    // Check if backward navigation is allowed\n    if (!this._sequencingControls.isBackwardNavigationAllowed()) {\n      return false;\n    }\n\n    // Get the previous activity\n    const previousActivity = this._activityTree.getPreviousSibling(currentActivity);\n    if (!previousActivity) {\n      return false;\n    }\n\n    // Handle exit condition actions\n    if (this._handleExitConditionAction(currentActivity)) {\n      return true;\n    }\n\n    // Set the previous activity as current\n    this._activityTree.currentActivity = previousActivity;\n\n    // Evaluate post-condition rules\n    const postConditionAction = this._sequencingRules.evaluatePostConditionRules(previousActivity);\n    if (postConditionAction) {\n      // Handle post-condition action\n      switch (postConditionAction) {\n        case RuleActionType.RETRY:\n          // Retry this activity\n          previousActivity.incrementAttemptCount();\n          return true;\n        case RuleActionType.RETRY_ALL:\n          // Retry all activities\n          this._activityTree.getAllActivities().forEach((activity) => {\n            activity.incrementAttemptCount();\n          });\n          return true;\n        case RuleActionType.CONTINUE:\n          // Continue to next activity\n          return this.processContinueRequest(previousActivity);\n        case RuleActionType.PREVIOUS:\n          // Go to previous activity\n          return this.processPreviousRequest(previousActivity);\n        case RuleActionType.EXIT:\n          // Exit this activity\n          this._activityTree.currentActivity = currentActivity;\n          return true;\n        default:\n          break;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Process exit request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processExitRequest(currentActivity: Activity): boolean {\n    // Check if exit is allowed\n    if (!this._sequencingControls.choiceExit) {\n      return false;\n    }\n\n    // Get the parent activity\n    const parent = currentActivity.parent;\n    if (!parent) {\n      return false;\n    }\n\n    // Set the parent activity as current\n    this._activityTree.currentActivity = parent;\n\n    return true;\n  }\n\n  /**\n   * Process exit all request\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processExitAllRequest(): boolean {\n    // Check if exit is allowed\n    if (!this._sequencingControls.choiceExit) {\n      return false;\n    }\n\n    // Set no activity as current\n    this._activityTree.currentActivity = null;\n\n    return true;\n  }\n\n  /**\n   * Process abandon request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processAbandonRequest(currentActivity: Activity): boolean {\n    // Get the parent activity\n    const parent = currentActivity.parent;\n    if (!parent) {\n      return false;\n    }\n\n    // Set the parent activity as current without processing exit rules\n    this._activityTree.currentActivity = parent;\n\n    return true;\n  }\n\n  /**\n   * Process abandon all request\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processAbandonAllRequest(): boolean {\n    // Set no activity as current without processing exit rules\n    this._activityTree.currentActivity = null;\n\n    return true;\n  }\n\n  /**\n   * Process suspend all request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processSuspendAllRequest(currentActivity: Activity): boolean {\n    // Set the current activity as suspended\n    this._activityTree.suspendedActivity = currentActivity;\n    this._activityTree.currentActivity = null;\n\n    return true;\n  }\n\n  /**\n   * Process rollup for the entire activity tree\n   */\n  processRollup(): void {\n    // Get the root activity\n    const root = this._activityTree.root;\n    if (!root) {\n      return;\n    }\n\n    // Process rollup from the bottom up\n    this._processRollupRecursive(root);\n  }\n\n  /**\n   * Handle exit condition actions for an activity\n   * @param {Activity} activity - The activity to handle exit conditions for\n   * @return {boolean} - True if an exit action was handled, false otherwise\n   * @private\n   */\n  private _handleExitConditionAction(activity: Activity): boolean {\n    const exitConditionAction = this._sequencingRules.evaluateExitConditionRules(activity);\n    if (exitConditionAction) {\n      // Handle exit condition action\n      switch (exitConditionAction) {\n        case RuleActionType.EXIT_PARENT: {\n          // Exit to parent\n          const parent = activity.parent;\n          if (parent) {\n            this._activityTree.currentActivity = parent;\n            return true;\n          }\n          return false;\n        }\n        case RuleActionType.EXIT_ALL:\n          // Exit all\n          this._activityTree.currentActivity = null;\n          return true;\n        default:\n          break;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Process rollup recursively\n   * @param {Activity} activity - The activity to process rollup for\n   * @private\n   */\n  private _processRollupRecursive(activity: Activity): void {\n    // Process rollup for children first\n    for (const child of activity.children) {\n      this._processRollupRecursive(child);\n    }\n\n    // Process rollup for this activity\n    this._rollupRules.processRollup(activity);\n  }\n\n  /**\n   * toJSON for Sequencing\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      activityTree: this._activityTree,\n      sequencingRules: this._sequencingRules,\n      sequencingControls: this._sequencingControls,\n      rollupRules: this._rollupRules,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import BaseAPI from \"./BaseAPI\";\nimport { CMI } from \"./cmi/scorm2004/cmi\";\nimport * as Utilities from \"./utilities\";\nimport { StringKeyMap, stringMatches } from \"./utilities\";\nimport { global_constants, scorm2004_constants } from \"./constants/api_constants\";\nimport { scorm2004_errors } from \"./constants/error_codes\";\nimport { CMIObjectivesObject } from \"./cmi/scorm2004/objectives\";\nimport { ADL, ADLDataObject } from \"./cmi/scorm2004/adl\";\nimport { CommitObject, ResultObject, ScoreObject, Settings } from \"./types/api_types\";\nimport {\n  ActivitySettings,\n  RollupRuleSettings,\n  RollupRulesSettings,\n  SequencingControlsSettings,\n  SequencingRuleSettings,\n  SequencingRulesSettings,\n  SequencingSettings,\n} from \"./types/sequencing_types\";\nimport { RuleCondition, SequencingRule } from \"./cmi/scorm2004/sequencing/sequencing_rules\";\nimport { RollupCondition, RollupRule } from \"./cmi/scorm2004/sequencing/rollup_rules\";\nimport { scorm2004_regex } from \"./constants/regex\"; // Import functions from extracted modules\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport {\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n} from \"./cmi/scorm2004/interactions\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { CorrectResponses, ResponseType } from \"./constants/response_constants\";\nimport { CMICommentsObject } from \"./cmi/scorm2004/comments\";\nimport ValidLanguages from \"./constants/language_constants\";\nimport { CompletionStatus, SuccessStatus } from \"./constants/enums\";\nimport { Sequencing } from \"./cmi/scorm2004/sequencing/sequencing\";\nimport { Activity } from \"./cmi/scorm2004/sequencing/activity\";\n\n/**\n * API class for SCORM 2004\n */\nclass Scorm2004API extends BaseAPI {\n  private _version: string = \"1.0\";\n  private _globalObjectives: CMIObjectivesObject[] = [];\n  private readonly _sequencing: Sequencing;\n  private _extractedScoItemIds: string[] = [];\n\n  /**\n   * Constructor for SCORM 2004 API\n   * @param {Settings} settings\n   */\n  constructor(settings?: Settings) {\n    if (settings) {\n      if (settings.mastery_override === undefined) {\n        settings.mastery_override = false;\n      }\n    }\n\n    super(scorm2004_errors, settings);\n\n    this.cmi = new CMI();\n    this.adl = new ADL();\n    this._sequencing = new Sequencing();\n\n    // Connect the sequencing object to the ADL's sequencing property\n    // The Sequencing object is used for both configuration and runtime navigation processing\n    // It needs to be attached to the ADL object for runtime navigation requests (adl.nav.request)\n    this.adl.sequencing = this._sequencing;\n\n    // Configure sequencing if settings are provided\n    if (settings?.sequencing) {\n      this.configureSequencing(settings.sequencing);\n    }\n\n    // Rename functions to match 2004 Spec and expose to modules\n    this.Initialize = this.lmsInitialize;\n    this.Terminate = this.lmsFinish;\n    this.GetValue = this.lmsGetValue;\n    this.SetValue = this.lmsSetValue;\n    this.Commit = this.lmsCommit;\n    this.GetLastError = this.lmsGetLastError;\n    this.GetErrorString = this.lmsGetErrorString;\n    this.GetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  public cmi: CMI;\n  public adl: ADL;\n\n  public Initialize: () => string;\n  public Terminate: () => string;\n  public GetValue: (CMIElement: string) => string;\n  public SetValue: (CMIElement: string, value: any) => string;\n  public Commit: () => string;\n  public GetLastError: () => string;\n  public GetErrorString: (CMIErrorCode: string | number) => string;\n  public GetDiagnostic: (CMIErrorCode: string | number) => string;\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset(settings?: Settings) {\n    this.commonReset(settings);\n\n    this.cmi?.reset();\n    this.adl?.reset();\n    this._sequencing?.reset();\n  }\n\n  /**\n   * Getter for _version\n   * @return {string}\n   */\n  get version(): string {\n    return this._version;\n  }\n\n  /**\n   * Getter for _globalObjectives\n   */\n  get globalObjectives(): CMIObjectivesObject[] {\n    return this._globalObjectives;\n  }\n\n  /**\n   * Initialize function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize(): string {\n    this.cmi.initialize();\n    return this.initialize(\n      \"Initialize\",\n      \"LMS was already initialized!\",\n      \"LMS is already finished!\",\n    );\n  }\n\n  /**\n   * Terminate function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish(): string {\n    (async () => {\n      await this.internalFinish();\n    })();\n    return global_constants.SCORM_TRUE;\n  }\n\n  async internalFinish(): Promise<string> {\n    const result = await this.terminate(\"Terminate\", true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      if (this.adl.nav.request !== \"_none_\") {\n        const navActions: { [key: string]: string } = {\n          continue: \"SequenceNext\",\n          previous: \"SequencePrevious\",\n          choice: \"SequenceChoice\",\n          jump: \"SequenceJump\",\n          exit: \"SequenceExit\",\n          exitAll: \"SequenceExitAll\",\n          abandon: \"SequenceAbandon\",\n          abandonAll: \"SequenceAbandonAll\",\n        };\n\n        let request = this.adl.nav.request;\n        const choiceJumpRegex = new RegExp(scorm2004_regex.NAVEvent);\n        const matches = request.match(choiceJumpRegex);\n        let target = \"\";\n        if (matches) {\n          if (matches.groups?.choice_target) {\n            target = matches.groups?.choice_target;\n            request = \"choice\";\n          } else if (matches.groups?.jump_target) {\n            target = matches.groups?.jump_target;\n            request = \"jump\";\n          }\n        }\n        const action = navActions[request];\n        if (action) {\n          this.processListeners(action, \"adl.nav.request\", target);\n        }\n      } else if (this.settings.autoProgress) {\n        this.processListeners(\"SequenceNext\", undefined, \"next\");\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * GetValue function from SCORM 2004 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement: string): string {\n    const adlNavRequestRegex =\n      \"^adl\\\\.nav\\\\.request_valid\\\\.(choice|jump)\\\\.{target=\\\\S{0,}([a-zA-Z0-9-_]+)}$\";\n    if (stringMatches(CMIElement, adlNavRequestRegex)) {\n      const matches = CMIElement.match(adlNavRequestRegex);\n      if (matches) {\n        const request = matches[1];\n        const target = matches[2].replace(/{target=/g, \"\").replace(/}/g, \"\");\n        if (request === \"choice\" || request === \"jump\") {\n          if (this.settings.scoItemIdValidator) {\n            return String(this.settings.scoItemIdValidator(target));\n          }\n          // If we have extracted IDs from sequencing, use those exclusively\n          if (this._extractedScoItemIds.length > 0) {\n            return String(this._extractedScoItemIds.includes(target));\n          }\n          // Otherwise use the scoItemIds from settings\n          return String(this.settings?.scoItemIds?.includes(target));\n        }\n      }\n    }\n    return this.getValue(\"GetValue\", true, CMIElement);\n  }\n\n  /**\n   * SetValue function from SCORM 2004 Spec\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement: string, value: any): string {\n    // Proceed with regular setting for non-objective elements or fallback behavior\n    return this.setValue(\"SetValue\", \"Commit\", true, CMIElement, value);\n  }\n\n  /**\n   * Commit function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit(): string {\n    if (this.settings.asyncCommit) {\n      this.scheduleCommit(500, \"Commit\");\n    } else {\n      (async () => {\n        await this.commit(\"Commit\", false);\n      })();\n    }\n    return global_constants.SCORM_TRUE;\n  }\n\n  /**\n   * GetLastError function from SCORM 2004 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError(): string {\n    return this.getLastError(\"GetLastError\");\n  }\n\n  /**\n   * GetErrorString function from SCORM 2004 Spec\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode: string | number): string {\n    return this.getErrorString(\"GetErrorString\", CMIErrorCode);\n  }\n\n  /**\n   * GetDiagnostic function from SCORM 2004 Spec\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode: string | number): string {\n    return this.getDiagnostic(\"GetDiagnostic\", CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object - delegates to CMIValueHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  override setCMIValue(CMIElement: string, value: any): string {\n    // Check if we're updating a global or local objective\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      const parts = CMIElement.split(\".\");\n      const index = Number(parts[2]);\n      const element_base = `cmi.objectives.${index}`;\n\n      let objective_id;\n      const setting_id = stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\\\\.id\");\n\n      if (setting_id) {\n        // If we're setting the objective ID, capture it directly\n        objective_id = value;\n      } else {\n        // Find existing objective ID if available\n        const objective = this.cmi.objectives.findObjectiveByIndex(index);\n        objective_id = objective ? objective.id : undefined;\n      }\n\n      // Check if the objective ID matches a global objective\n      const is_global = objective_id && this.settings.globalObjectiveIds?.includes(objective_id);\n\n      if (is_global) {\n        // Locate or create an entry in _globalObjectives for the global objective\n        let global_index = this._globalObjectives.findIndex((obj) => obj.id === objective_id);\n\n        if (global_index === -1) {\n          global_index = this._globalObjectives.length;\n          const newGlobalObjective = new CMIObjectivesObject();\n          newGlobalObjective.id = objective_id;\n          this._globalObjectives.push(newGlobalObjective);\n        }\n\n        // Update the global objective\n        const global_element = CMIElement.replace(\n          element_base,\n          `_globalObjectives.${global_index}`,\n        );\n        this._commonSetCMIValue(\"SetGlobalObjectiveValue\", true, global_element, value);\n      }\n    }\n    return this._commonSetCMIValue(\"SetValue\", true, CMIElement, value);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array - delegates to CMIElementHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI|null}\n   */\n  getChildElement(CMIElement: string, value: any, foundFirstIndex: boolean): BaseCMI | null {\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      return new CMIObjectivesObject();\n    }\n\n    if (foundFirstIndex) {\n      if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+\")) {\n        return this.createCorrectResponsesObject(CMIElement, value);\n      } else if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+\")) {\n        return new CMIInteractionsObjectivesObject();\n      }\n    } else if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\")) {\n      return new CMIInteractionsObject();\n    }\n\n    if (stringMatches(CMIElement, \"cmi\\\\.comments_from_learner\\\\.\\\\d+\")) {\n      return new CMICommentsObject();\n    } else if (stringMatches(CMIElement, \"cmi\\\\.comments_from_lms\\\\.\\\\d+\")) {\n      return new CMICommentsObject(true);\n    }\n\n    if (stringMatches(CMIElement, \"adl\\\\.data\\\\.\\\\d+\")) {\n      return new ADLDataObject();\n    }\n\n    return null;\n  }\n\n  /**\n   * Creates a correct responses object for an interaction - delegates to CMIElementHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {BaseCMI|null}\n   */\n  private createCorrectResponsesObject(CMIElement: string, value: any): BaseCMI | null {\n    const parts = CMIElement.split(\".\");\n    const index = Number(parts[2]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    if (this.isInitialized()) {\n      if (typeof interaction === \"undefined\" || !interaction.type) {\n        this.throwSCORMError(CMIElement, scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED, CMIElement);\n        return null;\n      } else {\n        this.checkDuplicateChoiceResponse(CMIElement, interaction, value);\n        const response_type = CorrectResponses[interaction.type];\n        if (response_type) {\n          this.checkValidResponseType(CMIElement, response_type, value, interaction.type);\n        } else {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.GENERAL_SET_FAILURE,\n            `Incorrect Response Type: ${interaction.type}`,\n          );\n          return null;\n        }\n      }\n    }\n\n    if (this.lastErrorCode === \"0\") {\n      return new CMIInteractionsCorrectResponsesObject(interaction);\n    }\n\n    return null;\n  }\n\n  /**\n   * Checks for valid response types - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {ResponseType} response_type\n   * @param {any} value\n   * @param {string} interaction_type\n   */\n  checkValidResponseType(\n    CMIElement: string,\n    response_type: ResponseType,\n    value: any,\n    interaction_type: string,\n  ) {\n    let nodes = [];\n    if (response_type?.delimiter) {\n      nodes = String(value).split(response_type.delimiter);\n    } else {\n      nodes[0] = value;\n    }\n\n    if (nodes.length > 0 && nodes.length <= response_type.max) {\n      this.checkCorrectResponseValue(CMIElement, interaction_type, nodes, value);\n    } else if (nodes.length > response_type.max) {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.GENERAL_SET_FAILURE,\n        `Data Model Element Pattern Too Long: ${value}`,\n      );\n    }\n  }\n\n  /**\n   * Checks for duplicate 'choice' responses - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {CMIInteractionsObject} interaction\n   * @param {any} value\n   */\n  checkDuplicateChoiceResponse(CMIElement: string, interaction: CMIInteractionsObject, value: any) {\n    const interaction_count = interaction.correct_responses._count;\n    if (interaction.type === \"choice\") {\n      for (let i = 0; i < interaction_count && this.lastErrorCode === \"0\"; i++) {\n        const response = interaction.correct_responses.childArray[i];\n        if (response.pattern === value) {\n          this.throwSCORMError(CMIElement, scorm2004_errors.GENERAL_SET_FAILURE, `${value}`);\n        }\n      }\n    }\n  }\n\n  /**\n   * Validate correct response - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {*} value\n   */\n  validateCorrectResponse(CMIElement: string, value: any) {\n    const parts = CMIElement.split(\".\");\n    const index = Number(parts[2]);\n    const pattern_index = Number(parts[4]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    const interaction_count = interaction.correct_responses._count;\n    this.checkDuplicateChoiceResponse(CMIElement, interaction, value);\n\n    const response_type = CorrectResponses[interaction.type];\n    if (typeof response_type.limit === \"undefined\" || interaction_count <= response_type.limit) {\n      this.checkValidResponseType(CMIElement, response_type, value, interaction.type);\n\n      if (\n        (this.lastErrorCode === \"0\" &&\n          (!response_type.duplicate ||\n            !this.checkDuplicatedPattern(interaction.correct_responses, pattern_index, value))) ||\n        (this.lastErrorCode === \"0\" && value === \"\")\n      ) {\n        // do nothing, we want the inverse\n      } else {\n        if (this.lastErrorCode === \"0\") {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.GENERAL_SET_FAILURE,\n            `Data Model Element Pattern Already Exists: ${CMIElement} - ${value}`,\n          );\n        }\n      }\n    } else {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.GENERAL_SET_FAILURE,\n        `Data Model Element Collection Limit Reached: ${CMIElement} - ${value}`,\n      );\n    }\n  }\n\n  /**\n   * Gets a value from the CMI Object - delegates to CMIValueHandlerModule\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  override getCMIValue(CMIElement: string): any {\n    return this._commonGetCMIValue(\"GetValue\", true, CMIElement);\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {(string|number)} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  override getLmsErrorMessageDetails(errorNumber: string | number, detail: boolean): string {\n    let basicMessage = \"\";\n    let detailMessage = \"\";\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (scorm2004_constants.error_descriptions[errorNumber]) {\n      basicMessage = scorm2004_constants.error_descriptions[errorNumber].basicMessage;\n      detailMessage = scorm2004_constants.error_descriptions[errorNumber].detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Check to see if a correct_response value has been duplicated - delegates to ValidationModule\n   * @param {CMIArray} correct_response\n   * @param {number} current_index\n   * @param {*} value\n   * @return {boolean}\n   */\n  checkDuplicatedPattern(correct_response: CMIArray, current_index: number, value: any): boolean {\n    let found = false;\n    const count = correct_response._count;\n    for (let i = 0; i < count && !found; i++) {\n      if (i !== current_index && correct_response.childArray[i] === value) {\n        found = true;\n      }\n    }\n    return found;\n  }\n\n  /**\n   * Checks for a valid correct_response value - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {string} interaction_type\n   * @param {Array} nodes\n   * @param {*} value\n   */\n  checkCorrectResponseValue(\n    CMIElement: string,\n    interaction_type: string,\n    nodes: Array<any>,\n    value: any,\n  ) {\n    const response = CorrectResponses[interaction_type];\n    if (!response) {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.TYPE_MISMATCH,\n        `Incorrect Response Type: ${interaction_type}`,\n      );\n      return;\n    }\n    const formatRegex = new RegExp(response.format);\n    for (let i = 0; i < nodes.length && this.lastErrorCode === \"0\"; i++) {\n      if (interaction_type.match(\"^(fill-in|long-fill-in|matching|performance|sequencing)$\")) {\n        nodes[i] = this.removeCorrectResponsePrefixes(CMIElement, nodes[i]);\n      }\n\n      if (response?.delimiter2) {\n        const values = nodes[i].split(response.delimiter2);\n        if (values.length === 2) {\n          const matches = values[0].match(formatRegex);\n          if (!matches) {\n            this.throwSCORMError(\n              CMIElement,\n              scorm2004_errors.TYPE_MISMATCH,\n              `${interaction_type}: ${value}`,\n            );\n          } else {\n            if (!response.format2 || !values[1].match(new RegExp(response.format2))) {\n              this.throwSCORMError(\n                CMIElement,\n                scorm2004_errors.TYPE_MISMATCH,\n                `${interaction_type}: ${value}`,\n              );\n            }\n          }\n        } else {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.TYPE_MISMATCH,\n            `${interaction_type}: ${value}`,\n          );\n        }\n      } else {\n        const matches = nodes[i].match(formatRegex);\n        if ((!matches && value !== \"\") || (!matches && interaction_type === \"true-false\")) {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.TYPE_MISMATCH,\n            `${interaction_type}: ${value}`,\n          );\n        } else {\n          if (interaction_type === \"numeric\" && nodes.length > 1) {\n            if (Number(nodes[0]) > Number(nodes[1])) {\n              this.throwSCORMError(\n                CMIElement,\n                scorm2004_errors.TYPE_MISMATCH,\n                `${interaction_type}: ${value}`,\n              );\n            }\n          } else {\n            if (nodes[i] !== \"\" && response.unique) {\n              for (let j = 0; j < i && this.lastErrorCode === \"0\"; j++) {\n                if (nodes[i] === nodes[j]) {\n                  this.throwSCORMError(\n                    CMIElement,\n                    scorm2004_errors.TYPE_MISMATCH,\n                    `${interaction_type}: ${value}`,\n                  );\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove prefixes from correct_response - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {string} node\n   * @return {*}\n   */\n  removeCorrectResponsePrefixes(CMIElement: string, node: string): any {\n    let seenOrder = false;\n    let seenCase = false;\n    let seenLang = false;\n\n    const prefixRegex = new RegExp(\"^({(lang|case_matters|order_matters)=([^}]+)})\");\n    let matches = node.match(prefixRegex);\n    let langMatches = null;\n    while (matches) {\n      switch (matches[2]) {\n        case \"lang\":\n          langMatches = node.match(scorm2004_regex.CMILangcr);\n          if (langMatches) {\n            const lang = langMatches[3];\n            if (lang !== undefined && lang.length > 0) {\n              if (!ValidLanguages.includes(lang.toLowerCase())) {\n                this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n              }\n            }\n          }\n          seenLang = true;\n          break;\n        case \"case_matters\":\n          if (!seenLang && !seenOrder && !seenCase) {\n            if (matches[3] !== \"true\" && matches[3] !== \"false\") {\n              this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n            }\n          }\n\n          seenCase = true;\n          break;\n        case \"order_matters\":\n          if (!seenCase && !seenLang && !seenOrder) {\n            if (matches[3] !== \"true\" && matches[3] !== \"false\") {\n              this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n            }\n          }\n\n          seenOrder = true;\n          break;\n      }\n      node = node.substring(matches[1].length);\n      matches = node.match(prefixRegex);\n    }\n\n    return node;\n  }\n\n  /**\n   * Replace the whole API with another\n   * @param {Scorm2004API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI: Scorm2004API) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.adl = newAPI.adl;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit - delegates to DataSerializationModule\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} includeTotalTime - Whether to include total time in the commit data\n   * @return {object|Array}\n   */\n  renderCommitCMI(\n    terminateCommit: boolean,\n    includeTotalTime: boolean = false,\n  ): StringKeyMap | Array<any> {\n    const cmiExport: StringKeyMap = this.renderCMIToJSONObject();\n\n    if (terminateCommit || includeTotalTime) {\n      (cmiExport.cmi as any).total_time = (this.cmi as any).getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened: StringKeyMap = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case \"flattened\":\n        return Utilities.flatten(cmiExport);\n      case \"params\":\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case \"json\":\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit - delegates to DataSerializationModule\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} includeTotalTime - Whether to include total time in the commit data\n   * @return {CommitObject}\n   */\n  renderCommitObject(terminateCommit: boolean, includeTotalTime: boolean = false): CommitObject {\n    const cmiExport = this.renderCommitCMI(terminateCommit, includeTotalTime);\n    const calculateTotalTime = terminateCommit || includeTotalTime;\n    const totalTimeDuration = calculateTotalTime ? this.cmi.getCurrentTotalTime() : \"\";\n    const totalTimeSeconds = Utilities.getDurationAsSeconds(\n      totalTimeDuration,\n      scorm2004_regex.CMITimespan,\n    );\n\n    let completionStatus = CompletionStatus.UNKNOWN;\n    let successStatus = SuccessStatus.UNKNOWN;\n    if (this.cmi.completion_status) {\n      if (this.cmi.completion_status === \"completed\") {\n        completionStatus = CompletionStatus.COMPLETED;\n      } else if (this.cmi.completion_status === \"incomplete\") {\n        completionStatus = CompletionStatus.INCOMPLETE;\n      }\n    }\n    if (this.cmi.success_status) {\n      if (this.cmi.success_status === \"passed\") {\n        successStatus = SuccessStatus.PASSED;\n      } else if (this.cmi.success_status === \"failed\") {\n        successStatus = SuccessStatus.FAILED;\n      }\n    }\n\n    const scoreObject: ScoreObject = this.cmi?.score?.getScoreObject() || {};\n    const commitObject: CommitObject = {\n      completionStatus: completionStatus,\n      successStatus: successStatus,\n      totalTimeSeconds: totalTimeSeconds,\n      runtimeData: cmiExport as StringKeyMap,\n    };\n    if (scoreObject) {\n      commitObject.score = scoreObject;\n    }\n    return commitObject;\n  }\n\n  /**\n   * Attempts to store the data to the LMS - delegates to DataSerializationModule\n   *\n   * @param {boolean} terminateCommit\n   * @return {ResultObject}\n   */\n  async storeData(terminateCommit: boolean): Promise<ResultObject> {\n    if (terminateCommit) {\n      if (this.cmi.mode === \"normal\") {\n        if (this.cmi.credit === \"credit\") {\n          if (this.cmi.completion_threshold && this.cmi.progress_measure) {\n            if (this.cmi.progress_measure >= this.cmi.completion_threshold) {\n              this.cmi.completion_status = \"completed\";\n            } else {\n              this.cmi.completion_status = \"incomplete\";\n            }\n          }\n          if (this.cmi.scaled_passing_score && this.cmi.score.scaled) {\n            if (this.cmi.score.scaled >= this.cmi.scaled_passing_score) {\n              this.cmi.success_status = \"passed\";\n            } else {\n              this.cmi.success_status = \"failed\";\n            }\n          }\n        }\n      }\n    }\n\n    let navRequest = false;\n    if (\n      this.adl.nav.request !==\n        ((this.startingData?.adl as StringKeyMap)?.nav as StringKeyMap)?.request &&\n      this.adl.nav.request !== \"_none_\"\n    ) {\n      navRequest = true;\n    }\n\n    const commitObject = this.getCommitObject(terminateCommit);\n    if (typeof this.settings.lmsCommitUrl === \"string\") {\n      const result = await this.processHttpRequest(\n        this.settings.lmsCommitUrl,\n        commitObject,\n        terminateCommit,\n      );\n\n      // Check if this is a sequencing call, and then call the necessary JS\n      if (\n        navRequest &&\n        result.navRequest !== undefined &&\n        result.navRequest !== \"\" &&\n        typeof result.navRequest === \"string\"\n      ) {\n        Function(`\"use strict\";(() => { ${result.navRequest} })()`)();\n      } else if (result?.navRequest && !navRequest) {\n        if (\n          typeof result.navRequest === \"object\" &&\n          Object.hasOwnProperty.call(result.navRequest, \"name\")\n        ) {\n          this.processListeners(result.navRequest.name as string, result.navRequest.data as string);\n        }\n      }\n\n      return result;\n    }\n\n    return {\n      result: global_constants.SCORM_TRUE,\n      errorCode: 0,\n    };\n  }\n\n  /**\n   * Configure sequencing based on provided settings\n   * @param {SequencingSettings} sequencingSettings - The sequencing settings\n   */\n  private configureSequencing(sequencingSettings: SequencingSettings): void {\n    // Configure activity tree\n    if (sequencingSettings.activityTree) {\n      this.configureActivityTree(sequencingSettings.activityTree);\n    }\n\n    // Configure sequencing rules\n    if (sequencingSettings.sequencingRules) {\n      this.configureSequencingRules(sequencingSettings.sequencingRules);\n    }\n\n    // Configure sequencing controls\n    if (sequencingSettings.sequencingControls) {\n      this.configureSequencingControls(sequencingSettings.sequencingControls);\n    }\n\n    // Configure rollup rules\n    if (sequencingSettings.rollupRules) {\n      this.configureRollupRules(sequencingSettings.rollupRules);\n    }\n  }\n\n  /**\n   * Configure activity tree based on provided settings\n   * @param {ActivitySettings} activityTreeSettings - The activity tree settings\n   */\n  private configureActivityTree(activityTreeSettings: ActivitySettings): void {\n    // Create root activity\n    const rootActivity = this.createActivity(activityTreeSettings);\n\n    // Create activity tree\n    const activityTree = this._sequencing.activityTree;\n    activityTree.root = rootActivity;\n\n    // Extract activity IDs for use as scoItemIds\n    this._extractedScoItemIds = this.extractActivityIds(rootActivity);\n  }\n\n  /**\n   * Extract all activity IDs from an activity and its children\n   * @param {Activity} activity - The activity to extract IDs from\n   * @return {string[]} - Array of activity IDs\n   */\n  private extractActivityIds(activity: Activity): string[] {\n    const ids = [activity.id];\n\n    // Recursively extract IDs from children\n    for (const child of activity.children) {\n      ids.push(...this.extractActivityIds(child));\n    }\n\n    return ids;\n  }\n\n  /**\n   * Create an activity from settings\n   * @param {ActivitySettings} activitySettings - The activity settings\n   * @return {Activity} - The created activity\n   */\n  private createActivity(activitySettings: ActivitySettings): Activity {\n    // Create activity\n    const activity = new Activity(activitySettings.id, activitySettings.title);\n\n    // Set activity properties\n    if (activitySettings.isVisible !== undefined) {\n      activity.isVisible = activitySettings.isVisible;\n    }\n    if (activitySettings.isActive !== undefined) {\n      activity.isActive = activitySettings.isActive;\n    }\n    if (activitySettings.isSuspended !== undefined) {\n      activity.isSuspended = activitySettings.isSuspended;\n    }\n    if (activitySettings.isCompleted !== undefined) {\n      activity.isCompleted = activitySettings.isCompleted;\n    }\n\n    // Create child activities\n    if (activitySettings.children) {\n      for (const childSettings of activitySettings.children) {\n        const childActivity = this.createActivity(childSettings);\n        activity.addChild(childActivity);\n      }\n    }\n\n    return activity;\n  }\n\n  /**\n   * Configure sequencing rules based on provided settings\n   * @param {SequencingRulesSettings} sequencingRulesSettings - The sequencing rules settings\n   */\n  private configureSequencingRules(sequencingRulesSettings: SequencingRulesSettings): void {\n    const sequencingRules = this._sequencing.sequencingRules;\n\n    // Configure pre-condition rules\n    if (sequencingRulesSettings.preConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.preConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addPreConditionRule(rule);\n      }\n    }\n\n    // Configure exit condition rules\n    if (sequencingRulesSettings.exitConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.exitConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addExitConditionRule(rule);\n      }\n    }\n\n    // Configure post-condition rules\n    if (sequencingRulesSettings.postConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.postConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addPostConditionRule(rule);\n      }\n    }\n  }\n\n  /**\n   * Create a sequencing rule from settings\n   * @param {SequencingRuleSettings} ruleSettings - The sequencing rule settings\n   * @return {SequencingRule} - The created sequencing rule\n   */\n  private createSequencingRule(ruleSettings: SequencingRuleSettings): SequencingRule {\n    // Create rule\n    const rule = new SequencingRule(ruleSettings.action, ruleSettings.conditionCombination);\n\n    // Add conditions\n    for (const conditionSettings of ruleSettings.conditions) {\n      const condition = new RuleCondition(\n        conditionSettings.condition,\n        conditionSettings.operator,\n        new Map(Object.entries(conditionSettings.parameters || {})),\n      );\n      rule.addCondition(condition);\n    }\n\n    return rule;\n  }\n\n  /**\n   * Configure sequencing controls based on provided settings\n   * @param {SequencingControlsSettings} sequencingControlsSettings - The sequencing controls settings\n   */\n  private configureSequencingControls(\n    sequencingControlsSettings: SequencingControlsSettings,\n  ): void {\n    const sequencingControls = this._sequencing.sequencingControls;\n\n    // Set sequencing control properties\n    if (sequencingControlsSettings.enabled !== undefined) {\n      sequencingControls.enabled = sequencingControlsSettings.enabled;\n    }\n    if (sequencingControlsSettings.choiceExit !== undefined) {\n      sequencingControls.choiceExit = sequencingControlsSettings.choiceExit;\n    }\n    if (sequencingControlsSettings.flow !== undefined) {\n      sequencingControls.flow = sequencingControlsSettings.flow;\n    }\n    if (sequencingControlsSettings.forwardOnly !== undefined) {\n      sequencingControls.forwardOnly = sequencingControlsSettings.forwardOnly;\n    }\n    if (sequencingControlsSettings.useCurrentAttemptObjectiveInfo !== undefined) {\n      sequencingControls.useCurrentAttemptObjectiveInfo =\n        sequencingControlsSettings.useCurrentAttemptObjectiveInfo;\n    }\n    if (sequencingControlsSettings.useCurrentAttemptProgressInfo !== undefined) {\n      sequencingControls.useCurrentAttemptProgressInfo =\n        sequencingControlsSettings.useCurrentAttemptProgressInfo;\n    }\n    if (sequencingControlsSettings.preventActivation !== undefined) {\n      sequencingControls.preventActivation = sequencingControlsSettings.preventActivation;\n    }\n    if (sequencingControlsSettings.constrainChoice !== undefined) {\n      sequencingControls.constrainChoice = sequencingControlsSettings.constrainChoice;\n    }\n    if (sequencingControlsSettings.rollupObjectiveSatisfied !== undefined) {\n      sequencingControls.rollupObjectiveSatisfied =\n        sequencingControlsSettings.rollupObjectiveSatisfied;\n    }\n    if (sequencingControlsSettings.rollupProgressCompletion !== undefined) {\n      sequencingControls.rollupProgressCompletion =\n        sequencingControlsSettings.rollupProgressCompletion;\n    }\n    if (sequencingControlsSettings.objectiveMeasureWeight !== undefined) {\n      sequencingControls.objectiveMeasureWeight = sequencingControlsSettings.objectiveMeasureWeight;\n    }\n  }\n\n  /**\n   * Configure rollup rules based on provided settings\n   * @param {RollupRulesSettings} rollupRulesSettings - The rollup rules settings\n   */\n  private configureRollupRules(rollupRulesSettings: RollupRulesSettings): void {\n    const rollupRules = this._sequencing.rollupRules;\n\n    // Configure rollup rules\n    if (rollupRulesSettings.rules) {\n      for (const ruleSettings of rollupRulesSettings.rules) {\n        const rule = this.createRollupRule(ruleSettings);\n        rollupRules.addRule(rule);\n      }\n    }\n  }\n\n  /**\n   * Create a rollup rule from settings\n   * @param {RollupRuleSettings} ruleSettings - The rollup rule settings\n   * @return {RollupRule} - The created rollup rule\n   */\n  private createRollupRule(ruleSettings: RollupRuleSettings): RollupRule {\n    // Create rule\n    const rule = new RollupRule(\n      ruleSettings.action,\n      ruleSettings.consideration,\n      ruleSettings.minimumCount,\n      ruleSettings.minimumPercent,\n    );\n\n    // Add conditions\n    for (const conditionSettings of ruleSettings.conditions) {\n      const condition = new RollupCondition(\n        conditionSettings.condition,\n        new Map(Object.entries(conditionSettings.parameters || {})),\n      );\n      rule.addCondition(condition);\n    }\n\n    return rule;\n  }\n}\n\nexport default Scorm2004API;\n","// src/CrossFrameAPI.ts\nimport { MessageData, MessageResponse } from \"./types/CrossFrame\";\nimport { global_errors } from \"./constants/error_codes\";\n\n/**\n * Client-side SCORM façade running in your content frame.\n * Returns cached/default values synchronously, then fires off an async\n * postMessage to the LMS frame to refresh cache and error state.\n */\nexport default class CrossFrameAPI {\n  private _cache = new Map<string, string>();\n  private _lastError = \"0\";\n  private _pending = new Map<string, { resolve: (v: any) => void; reject: (e: any) => void }>();\n  private _counter = 0;\n  private readonly _origin: string;\n\n  private _handler: ProxyHandler<CrossFrameAPI> = {\n    get: (target, prop, receiver) => {\n      // If it's an existing property/method, return it\n      if (typeof prop !== \"string\" || prop in target) {\n        const v = Reflect.get(target, prop, receiver);\n        return typeof v === \"function\" ? v.bind(target) : v;\n      }\n\n      // Otherwise treat prop as a SCORM call\n      const methodName = prop;\n      const isGet = methodName.endsWith(\"GetValue\");\n      const isSet = methodName.startsWith(\"LMSSet\") || methodName.endsWith(\"SetValue\");\n      const isInit = methodName === \"Initialize\" || methodName === \"LMSInitialize\";\n      const isFinish = methodName === \"Terminate\" || methodName === \"LMSFinish\";\n      const isCommit = methodName === \"Commit\" || methodName === \"LMSCommit\";\n      const isErrorString = methodName === \"GetErrorString\" || methodName === \"LMSGetErrorString\";\n      const isDiagnostic = methodName === \"GetDiagnostic\" || methodName === \"LMSGetDiagnostic\";\n\n      return (...args: any[]): string => {\n        // Synchronous cache update for setter calls\n        if (isSet && args.length >= 2) {\n          target._cache.set(args[0], String(args[1]));\n          target._lastError = \"0\";\n        }\n\n        // Fire off async postMessage to refresh cache & error\n        target\n          ._post(methodName, args)\n          .then((res) => {\n            if (isGet && args.length >= 1) {\n              target._cache.set(args[0], String(res));\n              target._lastError = \"0\";\n            }\n            if (isErrorString && args.length >= 1) {\n              const code = String(args[0]);\n              target._cache.set(`error_${code}`, String(res));\n            }\n            if (isDiagnostic && args.length >= 1) {\n              const code = String(args[0]);\n              target._cache.set(`diag_${code}`, String(res));\n            }\n            if (methodName === \"GetLastError\" || methodName === \"LMSGetLastError\") {\n              target._lastError = String(res);\n            }\n          })\n          .catch((err) => target._capture(methodName, err));\n\n        // Return synchronously\n        if (isGet && args.length >= 1) {\n          return target._cache.get(args[0]) ?? \"\";\n        }\n        if (isErrorString && args.length >= 1) {\n          const code = String(args[0]);\n          return target._cache.get(`error_${code}`) ?? \"\";\n        }\n        if (isDiagnostic && args.length >= 1) {\n          const code = String(args[0]);\n          return target._cache.get(`diag_${code}`) ?? \"\";\n        }\n        if (isInit || isFinish || isCommit || isSet) {\n          // Immediately return “true”\n          const result = \"true\";\n          // Then warm cache:\n          target\n            ._post(\"getFlattenedCMI\", [])\n            .then((all: Record<string, string>) => {\n              Object.entries(all).forEach(([key, val]) => {\n                target._cache.set(key, val);\n              });\n              // reset error\n              target._lastError = \"0\";\n            })\n            .catch((err) => target._capture(\"getFlattenedCMI\", err));\n          return result;\n        }\n        if (methodName === \"GetLastError\" || methodName === \"LMSGetLastError\") {\n          return target._lastError;\n        }\n        return \"\";\n      };\n    },\n  };\n\n  constructor(targetOrigin: string = \"*\") {\n    this._origin = targetOrigin;\n    window.addEventListener(\"message\", this._onMessage.bind(this));\n    return new Proxy(this, this._handler);\n  }\n\n  /** Send a message to the LMS frame and return a promise for its response */\n  private _post(method: string, params: any[]): Promise<any> {\n    const messageId = `cfapi-${Date.now()}-${this._counter++}`;\n\n    // Deep‐clean params of non-cloneables (e.g. functions)\n    const safeParams = params.map((p) => {\n      if (typeof p === \"function\") {\n        console.warn(\"Dropping function param when posting SCORM call:\", method);\n        return undefined;\n      }\n      return p;\n    });\n\n    return new Promise((resolve, reject) => {\n      this._pending.set(messageId, { resolve, reject });\n      const msg: MessageData = { messageId, method, params: safeParams };\n      window.parent.postMessage(msg, this._origin);\n      // Optional timeout\n      setTimeout(() => {\n        if (this._pending.has(messageId)) {\n          this._pending.delete(messageId);\n          reject(new Error(`Timeout calling ${method}`));\n        }\n      }, 5000);\n    });\n  }\n\n  /** Handle incoming postMessage responses from the LMS frame */\n  private _onMessage(ev: MessageEvent) {\n    const data = ev.data as MessageResponse;\n    if (!data?.messageId) return;\n    const pending = this._pending.get(data.messageId);\n    if (!pending) return;\n    this._pending.delete(data.messageId);\n    if (data.error) pending.reject(data.error);\n    else pending.resolve(data.result);\n  }\n\n  /** Capture and cache SCORM errors */\n  private _capture(method: string, err: any) {\n    console.error(`CrossFrameAPI ${method} error:`, err);\n    const match = /\\b(\\d{3})\\b/.exec(err.message);\n    const code = match ? match[1] : String(global_errors.GENERAL);\n    this._lastError = code;\n    this._cache.set(`error_${code}`, err.message);\n  }\n}\n","// src/CrossFrameLMS.ts\nimport { MessageData, MessageResponse } from \"./types/CrossFrame\";\nimport { IBaseAPI } from \"./interfaces/IBaseAPI\";\n\n/**\n * Server‐side SCORM adapter running in your LMS frame (lms.example.com).\n * Listens for postMessage from child (content) frames, invokes real API,\n * and posts back { messageId, result, error }.\n */\nexport default class CrossFrameLMS {\n  private readonly _api: IBaseAPI;\n  private readonly _origin: string;\n\n  constructor(api: IBaseAPI, targetOrigin: string = \"*\") {\n    this._api = api;\n    this._origin = targetOrigin;\n    window.addEventListener(\"message\", this._onMessage.bind(this));\n  }\n\n  private _onMessage(ev: MessageEvent) {\n    // Validate the message origin unless all origins are allowed\n    if (this._origin !== \"*\" && ev.origin !== this._origin) {\n      return;\n    }\n\n    const msg = ev.data as MessageData;\n    if (!msg?.messageId || !msg.method || !ev.source) return;\n\n    this._process(msg, ev.source as Window);\n  }\n\n  private _process(msg: MessageData, source: Window) {\n    let result: any, error: any;\n    try {\n      const fn = (this._api as any)[msg.method];\n      if (typeof fn !== \"function\") {\n        error = {\n          message: `Method ${msg.method} not found`,\n        };\n      } else {\n        result = fn.apply(this._api, msg.params);\n      }\n    } catch (e: any) {\n      error = { message: e.message, stack: e.stack };\n    }\n    const resp: MessageResponse = {\n      messageId: msg.messageId,\n      result,\n      error,\n    };\n    source.postMessage(resp, this._origin);\n  }\n}\n"],"names":["global_constants","scorm12_constants","cmi_children","core_children","score_children","comments_children","objectives_children","correct_responses_children","student_data_children","student_preference_children","interactions_children","error_descriptions","basicMessage","detailMessage","aicc_constants","student_demographics_children","tries_children","attempt_records_children","paths_children","scorm2004_constants","adl_data_children","global_errors","GENERAL","INITIALIZATION_FAILED","INITIALIZED","TERMINATED","TERMINATION_FAILURE","TERMINATION_BEFORE_INIT","MULTIPLE_TERMINATION","RETRIEVE_BEFORE_INIT","RETRIEVE_AFTER_TERM","STORE_BEFORE_INIT","STORE_AFTER_TERM","COMMIT_BEFORE_INIT","COMMIT_AFTER_TERM","ARGUMENT_ERROR","CHILDREN_ERROR","COUNT_ERROR","GENERAL_GET_FAILURE","GENERAL_SET_FAILURE","GENERAL_COMMIT_FAILURE","UNDEFINED_DATA_MODEL","UNIMPLEMENTED_ELEMENT","VALUE_NOT_INITIALIZED","INVALID_SET_VALUE","READ_ONLY_ELEMENT","WRITE_ONLY_ELEMENT","TYPE_MISMATCH","VALUE_OUT_OF_RANGE","DEPENDENCY_NOT_ESTABLISHED","scorm12_errors","scorm2004_errors","MULTIPLE_TERMINATIONS","scorm12_regex","CMIString256","CMIString4096","CMITime","CMITimespan","CMIInteger","CMISInteger","CMIDecimal","CMIIdentifier","CMIFeedback","CMIIndex","CMIStatus","CMIStatus2","CMIExit","CMIType","CMIResult","NAVEvent","score_range","audio_range","speed_range","weighting_range","text_range","aicc_regex","scorm2004_regex","BaseScormValidationError","Error","constructor","CMIElement","errorCode","super","this","_errorCode","Object","setPrototypeOf","prototype","ValidationError","errorMessage","detailedMessage","_detailedMessage","message","_errorMessage","Scorm12ValidationError","hasOwnProperty","call","String","BaseCMI","cmi_element","jsonString","_initialized","_cmi_element","initialized","initialize","BaseRootCMI","start_time","_start_time","setStartTime","Date","getTime","designations","D","H","M","S","getSecondsAsHHMMSS","memoize","totalSeconds","hours","Math","floor","dateObj","minutes","getUTCMinutes","seconds","getSeconds","ms","msStr","countDecimals","toFixed","split","replace","getSecondsAsISODuration","duration","remainder","entries","forEach","designationsKey","current_seconds","value","indexOf","includes","getTimeAsSeconds","timeString","timeRegex","RegExp","match","parts","toString","getDurationAsSeconds","durationRegex","years","_","days","exec","result","flatten","data","recurse","cur","prop","Array","isArray","item","i","length","keys","filter","p","isEmpty","num","stringMatches","str","tester","test","fn","keyFn","cache","Map","args","key","JSON","stringify","has","get","set","checkValidFormat","regexPattern","errorClass","allowEmptyString","formatRegex","matches","_errorClass","checkValidRange","rangePattern","ranges","check12ValidFormat","check12ValidRange","validationService","validateScore","decimalRegex","scoreRange","invalidTypeCode","invalidRangeCode","validateScorm12Audio","validateScorm12Language","validateScorm12Speed","validateScorm12Text","validateReadOnly","CMIScore","params","_raw","_min","__children","__score_range","_max","max","__invalid_error_code","invalidErrorCode","__invalid_type_code","__invalid_range_code","__decimal_regex","__error_class","reset","_children","raw","min","getScoreObject","scoreObject","Number","isNaN","parseFloat","toJSON","CMICore","_student_id","_student_name","_lesson_location","_credit","_lesson_status","_entry","_total_time","_lesson_mode","_exit","_session_time","_suspend_data","score","student_id","student_name","lesson_location","credit","lesson_status","entry","total_time","lesson_mode","exit","session_time","suspend_data","getCurrentTotalTime","sessionTime","Util.getSecondsAsHHMMSS","first","second","CMIArray","children","childArray","wipe","_count","_id","_status","id","status","CMIStudentData","_mastery_score","_max_time_allowed","_time_limit_action","mastery_score","max_time_allowed","time_limit_action","CMIStudentPreference","_audio","_language","_speed","_text","audio","language","speed","text","_time","_type","_weighting","_student_response","_result","_latency","objectives","correct_responses","time","type","weighting","student_response","latency","_pattern","pattern","student_data","__version","_launch_data","_comments","_comments_from_lms","core","CMIObjectives","student_preference","interactions","CMIInteractions","launch_data","comments","comments_from_lms","_version","NAV","_event","event","NAVBoolean","SuccessStatus","CompletionStatus","LogLevelEnum","DEBUG","INFO","WARN","ERROR","NONE","DefaultSettings","autocommit","autocommitSeconds","asyncCommit","sendFullCommit","lmsCommitUrl","dataCommitFormat","commitRequestDataType","autoProgress","logLevel","selfReportSessionTime","alwaysSendTotalTime","renderCommonCommitFields","strict_errors","xhrHeaders","xhrWithCredentials","fetchMode","useBeaconInsteadOfFetch","responseHandler","async","response","httpResult","json","responseText","parse","e","requestHandler","commitObject","onLogMessage","defaultLogHandler","scoItemIds","scoItemIdValidator","globalObjectiveIds","enableOfflineSupport","courseId","syncOnInitialize","syncOnTerminate","maxSyncAttempts","messageLevel","logMessage","console","error","warn","info","debug","log","ScheduledCommit","API","when","callback","_cancelled","_API","_timeout","setTimeout","wrapper","bind","_callback","cancel","clearTimeout","commit","HttpService","settings","error_codes","processHttpRequest","url","immediate","apiLog","processListeners","genericError","_handleImmediateRequest","processedParams","performFetch","transformResponse","body","contentType","_prepareRequestBody","navigator","sendBeacon","Blob","then","join","performBeacon","init","method","mode","headers","keepalive","credentials","fetch","beaconSuccess","Promise","resolve","ok","_isSuccessResponse","updateSettings","EventService","listenerMap","listenerCount","parseListenerName","listenerName","listenerSplit","functionName","on","listenerFunctions","listenerFunction","parsedListener","listeners","push","off","removeIndex","findIndex","obj","splice","delete","clear","newListeners","listener","listenerHasCMIElement","CMIElementsMatch","endsWith","prefix","slice","startsWith","SerializationService","loadFromFlattenedJSON","setCMIValue","isNotInitialized","setStartingData","int_pattern","obj_pattern","others","intMatch","index","field","objMatch","sort","a","b","localeCompare","processItems","items","loadFromJSON","regex","from","m","unflatten","currentCMIElement","tempCMIElement","renderCMIToJSONString","cmi","k","v","renderCMIToJSONObject","getCommitObject","terminateCommit","renderCommitObject","renderCommitCMI","apiLogLevel","includeTotalTime","LoggingService","_logLevel","_logHandler","getInstance","_instance","setLogLevel","level","getLogLevel","setLogHandler","handler","shouldLog","getNumericLevel","getLoggingService","ErrorHandlingService","errorCodes","getLmsErrorMessageDetails","loggingService","_lastErrorCode","_errorCodes","_apiLog","_getLmsErrorMessageDetails","_loggingService","lastErrorCode","throwSCORMError","errorNumber","formattedMessage","clearSCORMError","success","handleValueAccessException","returnValue","validationError","errorType","name","stack","errorDetails","jsonError","OfflineStorageService","storeName","syncQueue","isOnline","onLine","syncInProgress","window","addEventListener","handleOnlineStatusChange","wasOnline","syncOfflineData","storeOffline","commitData","queueItem","now","random","substring","timestamp","syncAttempts","currentQueue","getFromStorage","saveToStorage","getOfflineData","remainingQueue","sendDataToLMS","processedData","isDeviceOnline","storedData","localStorage","getItem","setItem","hasPendingOfflineData","some","BaseAPI","httpService","eventService","serializationService","cmiDataService","errorHandlingService","offlineStorageService","_settings","_courseId","TypeError","currentState","_error_codes","_httpService","_eventService","element","_serializationService","_errorHandlingService","detail","createErrorHandlingService","_offlineStorageService","offlineData","runtimeData","catch","commonReset","clearScheduledCommit","startingData","callbackName","initializeMessage","terminationMessage","isInitialized","isTerminated","hasPendingData","syncSuccess","messageString","padEnd","formatMessage","previousSettings","terminate","checkTerminated","checkState","storeData","getValue","getCMIValue","setValue","commitCallback","scheduleCommit","getLastError","getErrorString","CMIErrorCode","getDiagnostic","beforeInitError","afterTermError","_errorNumber","_detail","_CMIElement","_value","_commonSetCMIValue","methodName","scorm2004","structure","refObject","foundFirstIndex","invalidErrorMessage","idx","attribute","_checkObjectHasProperty","validateCorrectResponse","parseInt","newChild","getChildElement","_commonGetCMIValue","uninitializedErrorMessage","_isTargetValid","getFlattenedCMI","Utilities.flatten","StringKeyMap","getOwnPropertyDescriptor","getPrototypeOf","Scorm12API","mastery_override","statusSetByModule","CMI","nav","LMSInitialize","lmsInitialize","LMSFinish","lmsFinish","LMSGetValue","lmsGetValue","LMSSetValue","lmsSetValue","LMSCommit","lmsCommit","LMSGetLastError","lmsGetLastError","LMSGetErrorString","lmsGetErrorString","LMSGetDiagnostic","lmsGetDiagnostic","internalFinish","CMIObjectivesObject","CMIInteractionsCorrectResponsesObject","CMIInteractionsObjectivesObject","CMIInteractionsObject","replaceWithAnotherScormAPI","newAPI","cmiExport","flattened","totalTimeHHMMSS","totalTimeSeconds","Utilities.getTimeAsSeconds","lessonStatus","completionStatus","successStatus","originalStatus","aicc_errors","AICCValidationError","checkAICCValidFormat","CMIEvaluation","CMIEvaluationComments","CMIEvaluationCommentsObject","_content","_location","content","location","AICCStudentPreferences","_lesson_type","_text_color","_text_location","_text_size","_video","windows","lesson_type","text_color","text_location","text_size","video","CMIStudentDemographics","_city","_class","_company","_country","_experience","_familiar_name","_instructor_name","_title","_native_language","_state","_street_address","_telephone","_years_experience","city","clazz","company","country","experience","familiar_name","instructor_name","title","native_language","state","street_address","telephone","years_experience","class","CMITries","CMITriesObject","CMIAttemptRecords","CMIAttemptRecordsObject","AICCCMIStudentData","_tries_during_lesson","tries","attempt_records","tries_during_lesson","CMIPaths","CMIPathsObject","_location_id","_date","_why_left","_time_in_element","location_id","date","why_left","time_in_element","Scorm12CMI.CMI","student_demographics","evaluation","paths","AICC","Scorm2004ValidationError","check2004ValidFormat","check2004ValidRange","CMILearnerPreference","_audio_level","_delivery_speed","_audio_captioning","audio_level","delivery_speed","audio_captioning","LearnerResponses","format","delimiter","unique","choice","matching","format2","delimiter2","performance","sequencing","likert","numeric","other","CorrectResponses","duplicate","limit","delimiter3","_timestamp","_learner_response","_description","learner_response","nodes","response_type","values","j","description","stripBrackets","delim","escapeRegex","s","splitUnescaped","reDelim","splitRe","unescapeRe","map","part","interactionType","_interactionType","responseDef","trim","subDelim1","rawNodes","delim1","Set","size","fmt1","fmt2","checkSingle","checkPair","delimBracketed","n","node","numDelim","nums","allParts","part1","part2","validatePattern","Scorm2004CMIScore","_scaled","scaled","CMICommentsFromLMS","CMICommentsFromLearner","CMICommentsObject","readOnlyAfterInit","_comment","_readOnlyAfterInit","comment","findObjectiveById","find","objective","findObjectiveByIndex","setObjectiveByIndex","_success_status","_completion_status","_progress_measure","success_status","completion_status","progress_measure","CMIMetadata","CMILearner","_learner_id","_learner_name","learner_id","learner_name","CMISession","Util.getSecondsAsISODuration","Util.addTwoDurations","CMIContent","CMISettings","_mode","CMIThresholds","_scaled_passing_score","_completion_threshold","scaled_passing_score","completion_threshold","metadata","learner","session","thresholds","learner_preference","comments_from_learner","ADL","ADLData","_sequencing","ADLNav","adlNav","_request","request_valid","ADLNavRequestValid","request","processNavigationRequest","ADLDataObject","_store","store","_continue","_previous","_choice","_jump","previous","jump","continue","RuleActionType","RuleCondition","condition","operator","parameters","_condition","_operator","_parameters","evaluate","activity","objectiveMeasureStatus","greaterThanValue","objectiveNormalizedMeasure","lessThanValue","isCompleted","attemptCount","attemptLimit","fromEntries","SequencingRule","action","conditionCombination","_conditions","_action","_conditionCombination","conditions","addCondition","removeCondition","every","SequencingRules","_preConditionRules","_exitConditionRules","_postConditionRules","preConditionRules","addPreConditionRule","rule","exitConditionRules","addExitConditionRule","postConditionRules","addPostConditionRule","evaluatePreConditionRules","evaluateExitConditionRules","evaluatePostConditionRules","RollupCondition","RollupRule","consideration","minimumCount","minimumPercent","_consideration","_minimumCount","_minimumPercent","matchingChildren","child","RollupRules","_rules","rules","addRule","removeRule","processRollup","completionRollup","successRollup","_defaultCompletionRollup","_defaultSuccessRollup","ValidLanguages","Activity","_parent","_isVisible","_isActive","_isSuspended","_isCompleted","_completionStatus","_successStatus","_attemptCount","_attemptCompletionAmount","_attemptAbsoluteDuration","_attemptExperiencedDuration","_activityAbsoluteDuration","_activityExperiencedDuration","_objectiveSatisfiedStatus","_objectiveMeasureStatus","_objectiveNormalizedMeasure","addChild","removeChild","parent","isVisible","isActive","isSuspended","incrementAttemptCount","attemptCompletionAmount","attemptAbsoluteDuration","attemptExperiencedDuration","activityAbsoluteDuration","activityExperiencedDuration","objectiveSatisfiedStatus","ActivityTree","_root","_currentActivity","_suspendedActivity","_activities","root","_addActivitiesToMap","currentActivity","suspendedActivity","getActivity","getAllActivities","getParent","getChildren","getSiblings","getNextSibling","siblings","getPreviousSibling","getFirstChild","getLastChild","getCommonAncestor","activity1","activity2","path1","current","unshift","SequencingControls","_enabled","_choiceExit","_flow","_forwardOnly","_useCurrentAttemptObjectiveInfo","_useCurrentAttemptProgressInfo","_preventActivation","_constrainChoice","_rollupObjectiveSatisfied","_rollupProgressCompletion","_objectiveMeasureWeight","enabled","choiceExit","flow","forwardOnly","useCurrentAttemptObjectiveInfo","useCurrentAttemptProgressInfo","preventActivation","constrainChoice","rollupObjectiveSatisfied","rollupProgressCompletion","objectiveMeasureWeight","isChoiceNavigationAllowed","isFlowNavigationAllowed","isForwardNavigationAllowed","isBackwardNavigationAllowed","Sequencing","_adlNav","_activityTree","_sequencingRules","_sequencingControls","_rollupRules","activityTree","sequencingRules","sequencingControls","rollupRules","preConditionAction","SKIP","DISABLED","HIDE_FROM_CHOICE","STOP_FORWARD_TRAVERSAL","processContinueRequest","processPreviousRequest","processExitRequest","processExitAllRequest","processAbandonRequest","processAbandonAllRequest","processSuspendAllRequest","nextActivity","_handleExitConditionAction","postConditionAction","RETRY","RETRY_ALL","CONTINUE","PREVIOUS","EXIT","previousActivity","_processRollupRecursive","exitConditionAction","EXIT_PARENT","EXIT_ALL","Scorm2004API","_globalObjectives","_extractedScoItemIds","adl","configureSequencing","Initialize","Terminate","GetValue","SetValue","Commit","GetLastError","GetErrorString","GetDiagnostic","version","globalObjectives","navActions","exitAll","abandon","abandonAll","choiceJumpRegex","target","groups","choice_target","jump_target","adlNavRequestRegex","element_base","objective_id","global_index","newGlobalObjective","global_element","createCorrectResponsesObject","interaction","checkDuplicateChoiceResponse","checkValidResponseType","interaction_type","checkCorrectResponseValue","interaction_count","pattern_index","checkDuplicatedPattern","correct_response","current_index","found","count","removeCorrectResponsePrefixes","seenOrder","seenCase","seenLang","prefixRegex","langMatches","lang","toLowerCase","totalTimeDuration","Utilities.getDurationAsSeconds","navRequest","Function","sequencingSettings","configureActivityTree","configureSequencingRules","configureSequencingControls","configureRollupRules","activityTreeSettings","rootActivity","createActivity","extractActivityIds","ids","activitySettings","childSettings","childActivity","sequencingRulesSettings","ruleSettings","createSequencingRule","conditionSettings","sequencingControlsSettings","rollupRulesSettings","createRollupRule","CrossFrameAPI","targetOrigin","_cache","_lastError","_pending","_counter","_handler","receiver","Reflect","isGet","isSet","isInit","isFinish","isCommit","isErrorString","isDiagnostic","_post","res","err","_capture","all","val","_origin","_onMessage","Proxy","messageId","safeParams","reject","postMessage","ev","pending","code","CrossFrameLMS","api","_api","origin","msg","source","_process","apply"],"mappings":"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"}