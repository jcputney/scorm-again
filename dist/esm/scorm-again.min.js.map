{"version":3,"file":"scorm-again.min.js","sources":["../../src/constants/api_constants.ts","../../src/constants/error_codes.ts","../../src/constants/regex.ts","../../src/exceptions.ts","../../src/exceptions/scorm12_exceptions.ts","../../src/cmi/common/base_cmi.ts","../../src/utilities.ts","../../src/cmi/common/validation.ts","../../src/cmi/scorm12/validation.ts","../../src/services/ValidationService.ts","../../src/cmi/common/score.ts","../../src/cmi/aicc/core.ts","../../src/cmi/common/array.ts","../../src/cmi/scorm12/objectives.ts","../../src/cmi/scorm12/student_data.ts","../../src/cmi/scorm12/student_preference.ts","../../src/cmi/scorm12/interactions.ts","../../src/cmi/scorm12/cmi.ts","../../src/cmi/scorm12/nav.ts","../../src/constants/enums.ts","../../src/constants/default_settings.ts","../../src/types/scheduled_commit.ts","../../src/services/HttpService.ts","../../src/services/EventService.ts","../../src/services/SerializationService.ts","../../src/services/LoggingService.ts","../../src/services/ErrorHandlingService.ts","../../src/services/OfflineStorageService.ts","../../src/BaseAPI.ts","../../src/Scorm12API.ts","../../src/exceptions/aicc_exceptions.ts","../../src/cmi/aicc/validation.ts","../../src/cmi/aicc/evaluation.ts","../../src/cmi/aicc/student_preferences.ts","../../src/cmi/aicc/student_demographics.ts","../../src/cmi/aicc/tries.ts","../../src/cmi/aicc/attempts.ts","../../src/cmi/aicc/student_data.ts","../../src/cmi/aicc/paths.ts","../../src/cmi/aicc/cmi.ts","../../src/AICC.ts","../../src/exceptions/scorm2004_exceptions.ts","../../src/cmi/scorm2004/validation.ts","../../src/cmi/scorm2004/learner_preference.ts","../../src/constants/response_constants.ts","../../src/cmi/scorm2004/interactions.ts","../../src/cmi/scorm2004/score.ts","../../src/cmi/scorm2004/comments.ts","../../src/cmi/scorm2004/objectives.ts","../../src/cmi/scorm2004/metadata.ts","../../src/cmi/scorm2004/learner.ts","../../src/cmi/scorm2004/status.ts","../../src/cmi/scorm2004/session.ts","../../src/cmi/scorm2004/content.ts","../../src/cmi/scorm2004/settings.ts","../../src/cmi/scorm2004/thresholds.ts","../../src/cmi/scorm2004/cmi.ts","../../src/cmi/scorm2004/adl.ts","../../src/cmi/scorm2004/sequencing/sequencing_rules.ts","../../src/cmi/scorm2004/sequencing/rollup_rules.ts","../../src/constants/language_constants.ts","../../src/cmi/scorm2004/sequencing/sequencing_controls.ts","../../src/cmi/scorm2004/sequencing/activity.ts","../../src/cmi/scorm2004/sequencing/activity_tree.ts","../../src/cmi/scorm2004/sequencing/selection_randomization.ts","../../src/cmi/scorm2004/sequencing/sequencing_process.ts","../../src/cmi/scorm2004/sequencing/sequencing.ts","../../src/Scorm2004API.ts","../../src/CrossFrameAPI.ts","../../src/CrossFrameLMS.ts"],"sourcesContent":["interface ErrorDescription {\n  basicMessage: string;\n  detailMessage: string;\n}\n\ninterface ErrorDescriptions {\n  [key: string]: ErrorDescription;\n}\n\ninterface ScormConstants {\n  cmi_children: string;\n  core_children: string;\n  score_children: string;\n  comments_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface AiccConstants extends ScormConstants {\n  student_demographics_children: string;\n  tries_children: string;\n  attempt_records_children: string;\n  paths_children: string;\n}\n\ninterface Scorm2004Constants {\n  cmi_children: string;\n  comments_children: string;\n  score_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  adl_data_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface GlobalConstants {\n  SCORM_TRUE: string;\n  SCORM_FALSE: string;\n  STATE_NOT_INITIALIZED: number;\n  STATE_INITIALIZED: number;\n  STATE_TERMINATED: number;\n}\n\nexport const global_constants: GlobalConstants = {\n  SCORM_TRUE: \"true\",\n  SCORM_FALSE: \"false\",\n  STATE_NOT_INITIALIZED: 0,\n  STATE_INITIALIZED: 1,\n  STATE_TERMINATED: 2,\n};\n\nexport const scorm12_constants: ScormConstants = {\n  // Children lists\n  cmi_children:\n    \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions\",\n  core_children:\n    \"student_id,student_name,lesson_location,credit,lesson_status,entry,score,total_time,lesson_mode,exit,session_time\",\n  score_children: \"raw,min,max\",\n  comments_children: \"content,location,time\",\n  objectives_children: \"id,score,status\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio,language,speed,text\",\n  interactions_children:\n    \"id,objectives,time,type,correct_responses,weighting,student_response,result,latency\",\n  error_descriptions: {\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage: \"No specific error code exists to describe the error.\",\n    },\n    \"201\": {\n      basicMessage: \"Invalid argument error\",\n      detailMessage:\n        \"Indicates that an argument represents an invalid data model element or is otherwise incorrect.\",\n    },\n    \"202\": {\n      basicMessage: \"Element cannot have children\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_children\" for a data model element that does not support the \"_children\" suffix.',\n    },\n    \"203\": {\n      basicMessage: \"Element not an array - cannot have count\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_count\" for a data model element that does not support the \"_count\" suffix.',\n    },\n    \"301\": {\n      basicMessage: \"Not initialized\",\n      detailMessage: \"Indicates that an API call was made before the call to lmsInitialize.\",\n    },\n    \"401\": {\n      basicMessage: \"Not implemented error\",\n      detailMessage:\n        \"The data model element indicated in a call to LMSGetValue or LMSSetValue is valid, but was not implemented by this LMS. SCORM 1.2 defines a set of data model elements as being optional for an LMS to implement.\",\n    },\n    \"402\": {\n      basicMessage: \"Invalid set value, element is a keyword\",\n      detailMessage:\n        'Indicates that LMSSetValue was called on a data model element that represents a keyword (elements that end in \"_children\" and \"_count\").',\n    },\n    \"403\": {\n      basicMessage: \"Element is read only\",\n      detailMessage: \"LMSSetValue was called with a data model element that can only be read.\",\n    },\n    \"404\": {\n      basicMessage: \"Element is write only\",\n      detailMessage: \"LMSGetValue was called on a data model element that can only be written to.\",\n    },\n    \"405\": {\n      basicMessage: \"Incorrect Data Type\",\n      detailMessage:\n        \"LMSSetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a LMSSetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\nexport const aicc_constants: AiccConstants = {\n  ...scorm12_constants,\n  ...{\n    cmi_children:\n      \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions,evaluation\",\n    student_preference_children:\n      \"audio,language,lesson_type,speed,text,text_color,text_location,text_size,video,windows\",\n    student_data_children: \"attempt_number,tries,mastery_score,max_time_allowed,time_limit_action\",\n    student_demographics_children:\n      \"city,class,company,country,experience,familiar_name,instructor_name,title,native_language,state,street_address,telephone,years_experience\",\n    tries_children: \"time,status,score\",\n    attempt_records_children: \"score,lesson_status\",\n    paths_children: \"location_id,date,time,status,why_left,time_in_element\",\n  },\n};\n\nexport const scorm2004_constants: Scorm2004Constants = {\n  // Children lists\n  cmi_children:\n    \"_version,comments_from_learner,comments_from_lms,completion_status,credit,entry,exit,interactions,launch_data,learner_id,learner_name,learner_preference,location,max_time_allowed,mode,objectives,progress_measure,scaled_passing_score,score,session_time,success_status,suspend_data,time_limit_action,total_time\",\n  comments_children: \"comment,timestamp,location\",\n  score_children: \"max,raw,scaled,min\",\n  objectives_children: \"progress_measure,completion_status,success_status,description,score,id\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio_level,audio_captioning,delivery_speed,language\",\n  interactions_children:\n    \"id,type,objectives,timestamp,correct_responses,weighting,learner_response,result,latency,description\",\n  adl_data_children: \"id,store\",\n  error_descriptions: {\n    \"0\": {\n      basicMessage: \"No Error\",\n      detailMessage: \"No error occurred, the previous API call was successful.\",\n    },\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage: \"No specific error code exists to describe the error.\",\n    },\n    \"102\": {\n      basicMessage: \"General Initialization Failure\",\n      detailMessage: \"Call to Initialize failed for an unknown reason.\",\n    },\n    \"103\": {\n      basicMessage: \"Already Initialized\",\n      detailMessage: \"Call to Initialize failed because Initialize was already called.\",\n    },\n    \"104\": {\n      basicMessage: \"Content Instance Terminated\",\n      detailMessage: \"Call to Initialize failed because Terminate was already called.\",\n    },\n    \"111\": {\n      basicMessage: \"General Termination Failure\",\n      detailMessage: \"Call to Terminate failed for an unknown reason.\",\n    },\n    \"112\": {\n      basicMessage: \"Termination Before Initialization\",\n      detailMessage: \"Call to Terminate failed because it was made before the call to Initialize.\",\n    },\n    \"113\": {\n      basicMessage: \"Termination After Termination\",\n      detailMessage: \"Call to Terminate failed because Terminate was already called.\",\n    },\n    \"122\": {\n      basicMessage: \"Retrieve Data Before Initialization\",\n      detailMessage: \"Call to GetValue failed because it was made before the call to Initialize.\",\n    },\n    \"123\": {\n      basicMessage: \"Retrieve Data After Termination\",\n      detailMessage: \"Call to GetValue failed because it was made after the call to Terminate.\",\n    },\n    \"132\": {\n      basicMessage: \"Store Data Before Initialization\",\n      detailMessage: \"Call to SetValue failed because it was made before the call to Initialize.\",\n    },\n    \"133\": {\n      basicMessage: \"Store Data After Termination\",\n      detailMessage: \"Call to SetValue failed because it was made after the call to Terminate.\",\n    },\n    \"142\": {\n      basicMessage: \"Commit Before Initialization\",\n      detailMessage: \"Call to Commit failed because it was made before the call to Initialize.\",\n    },\n    \"143\": {\n      basicMessage: \"Commit After Termination\",\n      detailMessage: \"Call to Commit failed because it was made after the call to Terminate.\",\n    },\n    \"201\": {\n      basicMessage: \"General Argument Error\",\n      detailMessage:\n        \"An invalid argument was passed to an API method (usually indicates that Initialize, Commit or Terminate did not receive the expected empty string argument.\",\n    },\n    \"301\": {\n      basicMessage: \"General Get Failure\",\n      detailMessage:\n        \"Indicates a failed GetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"351\": {\n      basicMessage: \"General Set Failure\",\n      detailMessage:\n        \"Indicates a failed SetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"391\": {\n      basicMessage: \"General Commit Failure\",\n      detailMessage:\n        \"Indicates a failed Commit call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"401\": {\n      basicMessage: \"Undefined Data Model Element\",\n      detailMessage:\n        \"The data model element name passed to GetValue or SetValue is not a valid SCORM data model element.\",\n    },\n    \"402\": {\n      basicMessage: \"Unimplemented Data Model Element\",\n      detailMessage:\n        \"The data model element indicated in a call to GetValue or SetValue is valid, but was not implemented by this LMS. In SCORM 2004, this error would indicate an LMS that is not fully SCORM conformant.\",\n    },\n    \"403\": {\n      basicMessage: \"Data Model Element Value Not Initialized\",\n      detailMessage:\n        \"Attempt to read a data model element that has not been initialized by the LMS or through a SetValue call. This error condition is often reached during normal execution of a SCO.\",\n    },\n    \"404\": {\n      basicMessage: \"Data Model Element Is Read Only\",\n      detailMessage: \"SetValue was called with a data model element that can only be read.\",\n    },\n    \"405\": {\n      basicMessage: \"Data Model Element Is Write Only\",\n      detailMessage: \"GetValue was called on a data model element that can only be written to.\",\n    },\n    \"406\": {\n      basicMessage: \"Data Model Element Type Mismatch\",\n      detailMessage:\n        \"SetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Data Model Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a SetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\n","export type ErrorCode = {\n  [key: string]: number;\n};\n\nexport const global_errors: ErrorCode = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nexport const scorm12_errors: ErrorCode = {\n  ...global_errors,\n  RETRIEVE_BEFORE_INIT: 301,\n  STORE_BEFORE_INIT: 301,\n  COMMIT_BEFORE_INIT: 301,\n  ARGUMENT_ERROR: 201,\n  CHILDREN_ERROR: 202,\n  COUNT_ERROR: 203,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 401,\n  VALUE_NOT_INITIALIZED: 301,\n  INVALID_SET_VALUE: 402,\n  READ_ONLY_ELEMENT: 403,\n  WRITE_ONLY_ELEMENT: 404,\n  TYPE_MISMATCH: 405,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n\nexport const scorm2004_errors: ErrorCode = {\n  ...global_errors,\n  INITIALIZATION_FAILED: 102,\n  INITIALIZED: 103,\n  TERMINATED: 104,\n  TERMINATION_FAILURE: 111,\n  TERMINATION_BEFORE_INIT: 112,\n  MULTIPLE_TERMINATION: 113,\n  MULTIPLE_TERMINATIONS: 113,\n  RETRIEVE_BEFORE_INIT: 122,\n  RETRIEVE_AFTER_TERM: 123,\n  STORE_BEFORE_INIT: 132,\n  STORE_AFTER_TERM: 133,\n  COMMIT_BEFORE_INIT: 142,\n  COMMIT_AFTER_TERM: 143,\n  ARGUMENT_ERROR: 201,\n  GENERAL_GET_FAILURE: 301,\n  GENERAL_SET_FAILURE: 351,\n  GENERAL_COMMIT_FAILURE: 391,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 402,\n  VALUE_NOT_INITIALIZED: 403,\n  READ_ONLY_ELEMENT: 404,\n  WRITE_ONLY_ELEMENT: 405,\n  TYPE_MISMATCH: 406,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n","export const scorm12_regex = {\n  CMIString256: \"^.{0,255}$\",\n  CMIString4096: \"^.{0,4096}$\",\n  CMITime: \"^(?:[01]\\\\d|2[0123]):(?:[012345]\\\\d):(?:[012345]\\\\d)$\",\n  CMITimespan: \"^([0-9]{2,}):([0-9]{2}):([0-9]{2})(.[0-9]{1,2})?$\",\n\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{0,3})(\\\\.[0-9]*)?$\",\n\n  CMIIdentifier: \"^[\\\\u0021-\\\\u007E\\\\s]{0,255}$\",\n  // Allow storing larger responses for interactions\n  // Some content packages may exceed the 255 character limit\n  // defined in the SCORM 1.2 specification.  The previous\n  // expression truncated these values which resulted in\n  // a \"101: General Exception\" being thrown when long\n  // answers were supplied.  To support these packages we\n  // relax the limitation and accept any length string.\n  CMIFeedback: \"^.*$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMIStatus: \"^(passed|completed|failed|incomplete|browsed)$\",\n  CMIStatus2: \"^(passed|completed|failed|incomplete|browsed|not attempted)$\",\n  CMIExit: \"^(time-out|suspend|logout|)$\",\n  CMIType: \"^(true-false|choice|fill-in|matching|performance|sequencing|likert|numeric)$\",\n  CMIResult: \"^(correct|wrong|unanticipated|neutral|([0-9]{0,3})?(\\\\.[0-9]*)?)$\",\n  NAVEvent:\n    \"^(previous|continue|start|resumeAll|choice|jump|exit|exitAll|abandon|abandonAll|suspendAll|retry|retryAll|_none_)$\",\n  // Data ranges\n  score_range: \"0#100\",\n  audio_range: \"-1#100\",\n  speed_range: \"-100#100\",\n  weighting_range: \"-100#100\",\n  text_range: \"-1#1\",\n};\nexport const aicc_regex = {\n  ...scorm12_regex,\n  ...{\n    // AICC identifiers may contain letters, numbers, underscores,\n    // periods, and hyphens up to 255 characters in length.\n    // The previous expression only allowed \"\\w\" characters which\n    // excluded periods and hyphens.\n    CMIIdentifier: \"^[A-Za-z0-9._-]{1,255}$\",\n  },\n};\nexport const scorm2004_regex = {\n  CMIString200: \"^[\\\\u0000-\\\\uFFFF]{0,200}$\",\n  CMIString250: \"^[\\\\u0000-\\\\uFFFF]{0,250}$\",\n  CMIString1000: \"^[\\\\u0000-\\\\uFFFF]{0,1000}$\",\n  CMIString4000: \"^[\\\\u0000-\\\\uFFFF]{0,4000}$\",\n  CMIString64000: \"^[\\\\u0000-\\\\uFFFF]{0,64000}$\",\n  CMILang: \"^([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?$|^$\",\n\n  CMILangString250: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,250}$)?$\",\n\n  CMILangcr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?}))(.*?)$\",\n\n  CMILangString250cr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?})?(.{0,250})?)?$\",\n\n  CMILangString4000: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,4000}$)?$\",\n\n  CMITime:\n    \"^(19[7-9]{1}[0-9]{1}|20[0-2]{1}[0-9]{1}|203[0-8]{1})((-(0[1-9]{1}|1[0-2]{1}))((-(0[1-9]{1}|[1-2]{1}[0-9]{1}|3[0-1]{1}))(T([0-1]{1}[0-9]{1}|2[0-3]{1})((:[0-5]{1}[0-9]{1})((:[0-5]{1}[0-9]{1})((\\\\.[0-9]{1,6})((Z|([+|-]([0-1]{1}[0-9]{1}|2[0-3]{1})))(:[0-5]{1}[0-9]{1})?)?)?)?)?)?)?)?$\",\n  CMITimespan:\n    \"^P(?:([.,\\\\d]+)Y)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)W)?(?:([.,\\\\d]+)D)?(?:T?(?:([.,\\\\d]+)H)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)S)?)?$\",\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{1,5})(\\\\.[0-9]{1,18})?$\",\n  CMIIdentifier: \"^\\\\S{1,250}[a-zA-Z0-9]$\",\n  CMIShortIdentifier: \"^[\\\\w\\\\.\\\\-\\\\_]{1,250}$\",\n  CMILongIdentifier: \"^(?:(?!urn:)\\\\S{1,4000}|urn:[A-Za-z0-9-]{1,31}:\\\\S{1,4000}|.{1,4000})$\",\n  // need to re-examine this\n  CMIFeedback: \"^.*$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  CMIIndexStore: \".N(\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMICStatus: \"^(completed|incomplete|not attempted|unknown)$\",\n  CMISStatus: \"^(passed|failed|unknown)$\",\n  CMIExit: \"^(time-out|suspend|logout|normal)$\",\n  CMIType:\n    \"^(true-false|choice|fill-in|long-fill-in|matching|performance|sequencing|likert|numeric|other)$\",\n  CMIResult: \"^(correct|incorrect|unanticipated|neutral|-?([0-9]{1,4})(\\\\.[0-9]{1,18})?)$\",\n  NAVEvent:\n    \"^(start|resumeAll|previous|continue|exit|exitAll|abandon|abandonAll|suspendAll|retry|retryAll|_none_|(\\\\{target=(?<choice_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?choice|(\\\\{target=(?<jump_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?jump)$\",\n\n  NAVBoolean: \"^(unknown|true|false)$\",\n  NAVTarget: \"^{target=\\\\S{0,}[a-zA-Z0-9-_]+}$\",\n  // Data ranges\n  scaled_range: \"-1#1\",\n  audio_range: \"0#999.9999999\",\n  speed_range: \"0#999.9999999\",\n  text_range: \"-1#1\",\n  progress_range: \"0#1\",\n};\n","type APIError = {\n  errorCode: number;\n  errorMessage: string;\n  detailedMessage: string;\n};\n\nexport class BaseScormValidationError extends Error {\n  constructor(CMIElement: string, errorCode: number) {\n    super(`${CMIElement} : ${errorCode.toString()}`);\n    this._errorCode = errorCode;\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, BaseScormValidationError.prototype);\n  }\n\n  private readonly _errorCode: number;\n\n  /**\n   * Getter for _errorCode\n   * @return {number}\n   */\n  get errorCode(): number {\n    return this._errorCode;\n  }\n}\n\n/**\n * Base Validation Exception\n */\nexport class ValidationError extends BaseScormValidationError implements APIError {\n  /**\n   * Constructor to take in an error message and code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   * @param {string} errorMessage\n   * @param {string} detailedMessage\n   */\n  constructor(\n    CMIElement: string,\n    errorCode: number,\n    errorMessage: string,\n    detailedMessage?: string,\n  ) {\n    super(CMIElement, errorCode);\n    this.message = `${CMIElement} : ${errorMessage}`;\n    this._errorMessage = errorMessage;\n    if (detailedMessage) {\n      this._detailedMessage = detailedMessage;\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  private readonly _errorMessage: string;\n  private readonly _detailedMessage: string = \"\";\n\n  /**\n   * Getter for _errorMessage\n   * @return {string}\n   */\n  get errorMessage(): string {\n    return this._errorMessage;\n  }\n\n  /**\n   * Getter for _detailedMessage\n   * @return {string}\n   */\n  get detailedMessage(): string {\n    return this._detailedMessage;\n  }\n}\n","import { ValidationError } from \"../exceptions\";\nimport { scorm12_constants } from \"../constants/api_constants\";\n\nconst scorm12_errors = scorm12_constants.error_descriptions;\n\n/**\n * SCORM 1.2 Validation Error\n */\nexport class Scorm12ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm12_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm12_errors[String(errorCode)]?.basicMessage || \"Unknown error\",\n        scorm12_errors[String(errorCode)]?.detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm12_errors[\"101\"]?.basicMessage ?? \"General error\",\n        scorm12_errors[\"101\"]?.detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm12ValidationError.prototype);\n  }\n}\n","/**\n * Base class for API cmi objects\n */\nexport abstract class BaseCMI {\n  jsonString = false;\n  protected readonly _cmi_element: string;\n  protected _initialized = false;\n\n  /**\n   * Constructor for BaseCMI\n   * @param {string} cmi_element\n   */\n  constructor(cmi_element: string) {\n    this._cmi_element = cmi_element;\n  }\n\n  /**\n   * Getter for _initialized\n   * @return {boolean}\n   */\n  get initialized(): boolean {\n    return this._initialized;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize(): void {\n    this._initialized = true;\n  }\n\n  abstract reset(): void;\n}\n\n/**\n * Base class for cmi root objects\n */\nexport abstract class BaseRootCMI extends BaseCMI {\n  protected _start_time: number | undefined;\n\n  /**\n   * Start time of the course\n   * @type {number | undefined}\n   * @protected\n   */\n  get start_time(): number | undefined {\n    return this._start_time;\n  }\n\n  /**\n   * Setter for start_time. Can only be called once.\n   */\n  setStartTime(): void {\n    if (this._start_time === undefined) {\n      this._start_time = new Date().getTime();\n    } else {\n      throw new Error(\"Start time has already been set.\");\n    }\n  }\n\n  abstract getCurrentTotalTime(): string;\n}\n","/**\n * Constants for time conversion calculations.\n * These are used throughout the codebase for converting between different time formats.\n */\nexport const SECONDS_PER_SECOND = 1.0;\nexport const SECONDS_PER_MINUTE = 60;\nexport const SECONDS_PER_HOUR = 60 * SECONDS_PER_MINUTE;\nexport const SECONDS_PER_DAY = 24 * SECONDS_PER_HOUR;\n\ntype Designation = {\n  [key: string]: number;\n};\n\n/**\n * A record with string keys and unknown values.\n * This is a more type-safe alternative to using `any`.\n */\nexport type StringKeyMap = Record<string, unknown>;\n\nconst designations: Designation = {\n  D: SECONDS_PER_DAY,\n  H: SECONDS_PER_HOUR,\n  M: SECONDS_PER_MINUTE,\n  S: SECONDS_PER_SECOND,\n};\n\n/**\n * Converts a number of seconds to a formatted time string in HH:MM:SS format.\n * This function handles decimal seconds and ensures proper formatting with leading zeros.\n *\n * @param {number|null} totalSeconds - The total number of seconds to convert. If null or negative, returns \"00:00:00\".\n * @return {string} A formatted time string in HH:MM:SS format, with up to 2 decimal places for seconds if applicable.\n *\n * @example\n * // Returns \"01:30:45\"\n * getSecondsAsHHMMSS(5445);\n *\n * @example\n * // Returns \"00:00:30.5\"\n * getSecondsAsHHMMSS(30.5);\n *\n * @example\n * // Returns \"00:00:00\"\n * getSecondsAsHHMMSS(null);\n */\nexport const getSecondsAsHHMMSS = memoize((totalSeconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!totalSeconds || totalSeconds <= 0) {\n    return \"00:00:00\";\n  }\n\n  const hours = Math.floor(totalSeconds / SECONDS_PER_HOUR);\n  const dateObj = new Date(totalSeconds * 1000);\n  const minutes = dateObj.getUTCMinutes();\n  // make sure we add any possible decimal value\n  const seconds = dateObj.getSeconds();\n  const ms = totalSeconds % 1.0;\n  let msStr = \"\";\n\n  if (countDecimals(ms) > 0) {\n    if (countDecimals(ms) > 2) {\n      msStr = ms.toFixed(2);\n    } else {\n      msStr = String(ms);\n    }\n\n    msStr = \".\" + msStr.split(\".\")[1];\n  }\n\n  return (hours + \":\" + minutes + \":\" + seconds).replace(/\\b\\d\\b/g, \"0$&\") + msStr;\n});\n\n/**\n * Converts a number of seconds to an ISO 8601 duration string (e.g., \"PT1H30M45S\").\n * This function handles the complexity of formatting according to the ISO 8601 standard,\n * including the proper placement of the \"T\" separator for time components.\n *\n * @param {number|null} seconds - The number of seconds to convert. If null or negative, returns \"PT0S\".\n * @return {string} An ISO 8601 formatted duration string.\n *\n * @example\n * // Returns \"PT1H30M45S\" (1 hour, 30 minutes, 45 seconds)\n * getSecondsAsISODuration(5445);\n *\n * @example\n * // Returns \"PT30.5S\" (30.5 seconds)\n * getSecondsAsISODuration(30.5);\n *\n * @example\n * // Returns \"P1DT1H\" (1 day, 1 hour)\n * getSecondsAsISODuration(90000);\n *\n * @example\n * // Returns \"PT0S\" (0 seconds)\n * getSecondsAsISODuration(null);\n */\nexport const getSecondsAsISODuration = memoize((seconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!seconds || seconds <= 0) {\n    return \"PT0S\";\n  }\n\n  let duration = \"P\";\n  let remainder = seconds;\n\n  // Convert to array of entries and use functional methods\n  const designationEntries = Object.entries(designations);\n\n  // Process each time designation\n  designationEntries.forEach(([designationsKey, current_seconds]) => {\n    let value = Math.floor(remainder / current_seconds);\n    remainder = remainder % current_seconds;\n\n    // Limit decimal places\n    if (countDecimals(remainder) > 2) {\n      remainder = Number(Number(remainder).toFixed(2));\n    }\n\n    // If we have anything left in the remainder, and we're currently adding\n    // seconds to the duration, go ahead and add the decimal to the seconds\n    if (designationsKey === \"S\" && remainder > 0) {\n      value += remainder;\n    }\n\n    if (value) {\n      // Add the 'T' separator for time components if needed\n      const needsTimeSeparator =\n        (duration.indexOf(\"D\") > 0 || [\"H\", \"M\", \"S\"].includes(designationsKey)) &&\n        duration.indexOf(\"T\") === -1;\n\n      if (needsTimeSeparator) {\n        duration += \"T\";\n      }\n\n      duration += `${value}${designationsKey}`;\n    }\n  });\n\n  return duration;\n});\n\n/**\n * Converts a time string in HH:MM:SS format to the equivalent number of seconds.\n * This function is flexible and can handle various input types, converting them to strings as needed.\n *\n * @param {string|number|boolean|null} timeString - The time string to convert, typically in HH:MM:SS format.\n *                                                 If not a string, it will be converted to one.\n *                                                 If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} timeRegex - The regular expression used to validate the time string format.\n *                                    If a string is provided, it will be converted to a RegExp.\n * @return {number} The total number of seconds represented by the time string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getTimeAsSeconds(\"01:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getTimeAsSeconds(\"invalid\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 30 (converts number to string \"30\" then parses as 0:0:30)\n * getTimeAsSeconds(30, /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport const getTimeAsSeconds = memoize(\n  (timeString: string | number | boolean | null, timeRegex: RegExp | string): number => {\n    if (typeof timeString === \"number\" || typeof timeString === \"boolean\") {\n      timeString = String(timeString);\n    }\n    if (typeof timeRegex === \"string\") {\n      timeRegex = new RegExp(timeRegex);\n    }\n    if (!timeString) {\n      return 0;\n    }\n\n    if (!timeString.match(timeRegex)) {\n      // If the string represents a simple number, treat it as seconds\n      if (/^\\d+(?:\\.\\d+)?$/.test(timeString)) {\n        return Number(timeString);\n      }\n      return 0;\n    }\n\n    const parts = timeString.split(\":\");\n    const hours = Number(parts[0]);\n    const minutes = Number(parts[1]);\n    const seconds = Number(parts[2]);\n    return hours * 3600 + minutes * 60 + seconds;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (timeString, timeRegex) => {\n    const timeStr = typeof timeString === \"string\" ? timeString : String(timeString ?? \"\");\n    const regexStr = typeof timeRegex === \"string\" ? timeRegex : (timeRegex?.toString() ?? \"\");\n    return `${timeStr}:${regexStr}`;\n  },\n);\n\n/**\n * Converts an ISO 8601 duration string (e.g., \"PT1H30M45S\") to the equivalent number of seconds.\n * This function parses the duration string using a regular expression to extract years, days,\n * hours, minutes, and seconds components.\n *\n * @param {string|null} duration - The ISO 8601 duration string to convert.\n *                                If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n *                                       The regex should have capture groups for years, days, hours, minutes, and seconds.\n * @return {number} The total number of seconds represented by the duration string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getDurationAsSeconds(\"PT1H30M45S\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 90000 (1 day, 1 hour)\n * getDurationAsSeconds(\"P1DT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getDurationAsSeconds(\"invalid\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport const getDurationAsSeconds = memoize(\n  (duration: string | null, durationRegex: RegExp | string): number => {\n    if (typeof durationRegex === \"string\") {\n      durationRegex = new RegExp(durationRegex);\n    }\n\n    if (!duration || !duration?.match?.(durationRegex)) {\n      return 0;\n    }\n\n    const [, years, _, , days, hours, minutes, seconds] =\n      new RegExp(durationRegex).exec?.(duration) ?? [];\n    let result = 0.0;\n    result += Number(seconds) || 0.0;\n    result += Number(minutes) * 60.0 || 0.0;\n    result += Number(hours) * 3600.0 || 0.0;\n    result += Number(days) * (60 * 60 * 24.0) || 0.0;\n    result += Number(years) * (60 * 60 * 24 * 365.0) || 0.0;\n    return result;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (duration, durationRegex) => {\n    const durationStr = duration ?? \"\";\n    const regexStr =\n      typeof durationRegex === \"string\" ? durationRegex : (durationRegex?.toString() ?? \"\");\n    return `${durationStr}:${regexStr}`;\n  },\n);\n\n/**\n * Adds together two ISO 8601 duration strings and returns the result as a new ISO 8601 duration string.\n * This function works by converting both durations to seconds, adding them together, and then\n * converting the result back to an ISO 8601 duration string.\n *\n * @param {string} first - The first ISO 8601 duration string.\n * @param {string} second - The second ISO 8601 duration string.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n * @return {string} A new ISO 8601 duration string representing the sum of the two input durations.\n *\n * @example\n * // Returns \"PT2H\" (1 hour + 1 hour = 2 hours)\n * addTwoDurations(\"PT1H\", \"PT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"PT1H30M\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addTwoDurations(\"PT1H\", \"PT30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"P1DT1H30M\" (1 day + 1 hour and 30 minutes = 1 day, 1 hour, and 30 minutes)\n * addTwoDurations(\"P1D\", \"PT1H30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport function addTwoDurations(\n  first: string,\n  second: string,\n  durationRegex: RegExp | string,\n): string {\n  const regex: RegExp =\n    typeof durationRegex === \"string\" ? new RegExp(durationRegex) : durationRegex;\n  return getSecondsAsISODuration(\n    getDurationAsSeconds(first, regex) + getDurationAsSeconds(second, regex),\n  );\n}\n\n/**\n * Adds together two time strings in HH:MM:SS format and returns the result as a new time string.\n * This function works by converting both time strings to seconds, adding them together, and then\n * converting the result back to an HH:MM:SS format.\n *\n * @param {string} first - The first time string in HH:MM:SS format.\n * @param {string} second - The second time string in HH:MM:SS format.\n * @param {RegExp|string} timeRegex - The regular expression used to validate and parse the time strings.\n *                                   If a string is provided, it will be converted to a RegExp.\n * @return {string} A new time string in HH:MM:SS format representing the sum of the two input times.\n *\n * @example\n * // Returns \"02:00:00\" (1 hour + 1 hour = 2 hours)\n * addHHMMSSTimeStrings(\"01:00:00\", \"01:00:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:00\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:45\" (1 hour + 30 minutes and 45 seconds = 1 hour, 30 minutes, and 45 seconds)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport function addHHMMSSTimeStrings(\n  first: string,\n  second: string,\n  timeRegex: RegExp | string,\n): string {\n  if (typeof timeRegex === \"string\") {\n    timeRegex = new RegExp(timeRegex);\n  }\n  return getSecondsAsHHMMSS(\n    getTimeAsSeconds(first, timeRegex) + getTimeAsSeconds(second, timeRegex),\n  );\n}\n\n/**\n * Flattens a nested JSON object into a flat object with dot notation for nested properties.\n * This function recursively traverses the object and creates new keys using dot notation\n * for nested objects and bracket notation for arrays.\n *\n * @param {StringKeyMap} data - The nested object to flatten.\n * @return {StringKeyMap} A flattened object where nested properties are represented with dot notation.\n *\n * @example\n * // Returns { \"a\": 1, \"b.c\": 2, \"b.d\": 3, \"e[0]\": 4, \"e[1]\": 5 }\n * flatten({\n *   a: 1,\n *   b: { c: 2, d: 3 },\n *   e: [4, 5]\n * });\n *\n * @example\n * // Returns { \"\": [] } for an empty array\n * flatten([]);\n *\n * @example\n * // Returns { \"\": {} } for an empty object\n * flatten({});\n */\nexport function flatten(data: StringKeyMap): StringKeyMap {\n  const result: StringKeyMap = {};\n\n  /**\n   * Recurse through the object\n   * @param {*} cur\n   * @param {*} prop\n   */\n  function recurse(cur: any, prop: any) {\n    if (Object(cur) !== cur) {\n      result[prop] = cur;\n    } else if (Array.isArray(cur)) {\n      // Use forEach instead of for loop\n      cur.forEach((item, i) => {\n        recurse(item, `${prop}[${i}]`);\n      });\n\n      if (cur.length === 0) result[prop] = [];\n    } else {\n      const keys = Object.keys(cur).filter((p) => Object.prototype.hasOwnProperty.call(cur, p));\n\n      const isEmpty = keys.length === 0;\n\n      // Use forEach instead of for...in loop\n      keys.forEach((p) => {\n        recurse(cur[p], prop ? `${prop}.${p}` : p);\n      });\n\n      if (isEmpty && prop) result[prop] = {};\n    }\n  }\n\n  recurse(data, \"\");\n  return result;\n}\n\n/**\n * Converts a flattened object back into a nested object structure.\n * This function is the inverse of `flatten()`. It parses dot notation and bracket notation\n * in property names to recreate the original nested structure.\n *\n * @param {StringKeyMap} data - The flattened object to unflatten.\n * @return {object} A nested object recreated from the flattened structure.\n *\n * @example\n * // Returns { a: 1, b: { c: 2, d: 3 }, e: [4, 5] }\n * unflatten({\n *   \"a\": 1,\n *   \"b.c\": 2,\n *   \"b.d\": 3,\n *   \"e[0]\": 4,\n *   \"e[1]\": 5\n * });\n *\n * @example\n * // Handles array indices correctly\n * unflatten({\n *   \"users[0].name\": \"John\",\n *   \"users[0].email\": \"john@example.com\",\n *   \"users[1].name\": \"Jane\",\n *   \"users[1].email\": \"jane@example.com\"\n * });\n * // Returns:\n * // {\n * //   users: [\n * //     { name: \"John\", email: \"john@example.com\" },\n * //     { name: \"Jane\", email: \"jane@example.com\" }\n * //   ]\n * // }\n */\nexport function unflatten(data: StringKeyMap): object {\n  \"use strict\";\n\n  if (Object(data) !== data || Array.isArray(data)) return data;\n  const result: StringKeyMap = {};\n\n  // Regex pattern for parsing property paths\n  const pattern = /\\.?([^.[\\]]+)|\\[(\\d+)]/g;\n\n  // Get all own properties and process them\n  Object.keys(data)\n    .filter((p) => Object.prototype.hasOwnProperty.call(data, p))\n    .forEach((p) => {\n      let cur = result;\n      let prop = \"\";\n\n      // Create a new regex instance for each property to reset lastIndex\n      const regex = new RegExp(pattern);\n\n      // Process all matches in the property path\n      Array.from({ length: p.match(new RegExp(pattern, \"g\"))?.length ?? 0 }, () =>\n        regex.exec(p),\n      ).forEach((m) => {\n        if (m) {\n          // Create array or object as needed\n          cur = (cur[prop] ?? (cur[prop] = m[2] ? [] : ({} as StringKeyMap))) as StringKeyMap;\n          prop = m[2] || m[1] || \"\";\n        }\n      });\n\n      cur[prop] = data[p];\n    });\n\n  return (result[\"\"] ?? result) as object;\n}\n\n/**\n * Counts the number of decimal places in a number.\n * This function handles both integer and floating-point numbers.\n *\n * @param {number} num - The number to analyze.\n * @return {number} The number of decimal places. Returns 0 for integers or if the number doesn't have a decimal point.\n *\n * @example\n * // Returns 0\n * countDecimals(42);\n *\n * @example\n * // Returns 2\n * countDecimals(3.14);\n *\n * @example\n * // Returns 5\n * countDecimals(1.23456);\n */\nexport function countDecimals(num: number): number {\n  if (Math.floor(num) === num || String(num)?.indexOf?.(\".\") < 0) return 0;\n  const parts = num.toString().split(\".\")?.[1];\n  return parts?.length ?? 0;\n}\n\n/**\n * Formats SCORM messages for consistent and readable logging.\n * This function pads the function name and CMI element to create aligned log messages\n * that are easier to read in log files or console output.\n *\n * @param {string} functionName - The name of the function that generated the message.\n * @param {string} message - The message content to be logged.\n * @param {string} [CMIElement] - Optional. The CMI element related to the message.\n * @return {string} A formatted message string with consistent padding.\n *\n * @example\n * // Returns \"initialize          : Successfully initialized\"\n * formatMessage(\"initialize\", \"Successfully initialized\");\n *\n * @example\n * // Returns \"getValue            : cmi.core.student_id                                             : 12345\"\n * formatMessage(\"getValue\", \"12345\", \"cmi.core.student_id\");\n *\n * @example\n * // Returns \"setValue            : cmi.core.lesson_status                                          : completed\"\n * formatMessage(\"setValue\", \"completed\", \"cmi.core.lesson_status\");\n */\nexport function formatMessage(functionName: string, message: string, CMIElement?: string): string {\n  const baseLength = 20;\n\n  // Use string padding instead of loops\n  const paddedFunction = functionName.padEnd(baseLength);\n  let messageString = `${paddedFunction}: `;\n\n  if (CMIElement) {\n    const CMIElementBaseLength = 70;\n    // Add CMIElement and pad to the required length\n    messageString += CMIElement;\n    messageString = messageString.padEnd(CMIElementBaseLength);\n  }\n\n  // Add the message (or empty string if null/undefined)\n  messageString += message ?? \"\";\n\n  return messageString;\n}\n\n/**\n * Checks if a string contains a specific pattern using regular expression matching.\n * This function is a wrapper around JavaScript's String.match() method that handles\n * null/undefined values gracefully.\n *\n * @param {string} str - The string to search within. If null or undefined, returns false.\n * @param {string} tester - The pattern to search for. Can be a regular expression pattern.\n * @return {boolean} True if the pattern is found in the string, false otherwise.\n *\n * @example\n * // Returns true\n * stringMatches(\"Hello, world!\", \"world\");\n *\n * @example\n * // Returns true\n * stringMatches(\"The quick brown fox\", \"\\\\w+\\\\s+\\\\w+\");\n *\n * @example\n * // Returns false\n * stringMatches(\"Hello, world!\", \"universe\");\n *\n * @example\n * // Returns false (handles null gracefully)\n * stringMatches(null, \"test\");\n */\nexport function stringMatches(str: string | null | undefined, tester: string): boolean {\n  if (typeof str !== \"string\") {\n    return false;\n  }\n  return new RegExp(tester).test(str);\n}\n\n/**\n * Creates a memoized (cached) version of a function for performance optimization.\n * This function caches the results of previous calls with the same arguments,\n * avoiding redundant calculations for repeated calls with the same input.\n *\n * @template T - The type of the function to memoize\n * @param {T} fn - The function to memoize\n * @param {Function} [keyFn] - Optional function to generate a custom cache key.\n *                           Useful for functions with complex arguments that can't be serialized.\n * @return {T} A memoized version of the input function with the same signature\n *\n * @example\n * // Basic usage with a simple function\n * const memoizedAdd = memoize((a, b) => {\n *   console.log('Calculating...');\n *   return a + b;\n * });\n *\n * memoizedAdd(1, 2); // Logs \"Calculating...\" and returns 3\n * memoizedAdd(1, 2); // Returns 3 without logging (uses cached result)\n *\n * @example\n * // Using a custom key function for objects that can't be serialized\n * const memoizedProcessUser = memoize(\n *   (user) => {\n *     console.log('Processing user...');\n *     return { ...user, processed: true };\n *   },\n *   (user) => user.id // Use user.id as the cache key\n * );\n *\n * memoizedProcessUser({ id: 123, name: 'John' }); // Logs and processes\n * memoizedProcessUser({ id: 123, name: 'John' }); // Uses cached result\n */\nexport function memoize<T extends (...args: any[]) => any>(\n  fn: T,\n  keyFn?: (...args: Parameters<T>) => string,\n): T {\n  const cache = new Map<string, ReturnType<T>>();\n\n  return ((...args: Parameters<T>): ReturnType<T> => {\n    const key = keyFn ? keyFn(...args) : JSON.stringify(args);\n\n    return cache.has(key)\n      ? (cache.get(key) as ReturnType<T>)\n      : (() => {\n          const result = fn(...args);\n          cache.set(key, result);\n          return result;\n        })();\n  }) as T;\n}\n","import { BaseScormValidationError } from \"../../exceptions\";\nimport { memoize } from \"../../utilities\";\n\n/**\n * Check if the value matches the proper format. If not, throw proper error code.\n *\n * @param {string} value\n * @param {string} regexPattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @param {boolean} [allowEmptyString]\n * @return {boolean}\n */\nexport const checkValidFormat = memoize(\n  (\n    CMIElement: string,\n    value: string,\n    regexPattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n    allowEmptyString?: boolean,\n  ): boolean => {\n    // noinspection SuspiciousTypeOfGuard\n    if (typeof value !== \"string\") {\n      return false;\n    }\n    const formatRegex = new RegExp(regexPattern);\n    const matches = value.match(formatRegex);\n    if (allowEmptyString && value === \"\") {\n      return true;\n    }\n    if (value === undefined || !matches || matches[0] === \"\") {\n      throw new errorClass(CMIElement, errorCode);\n    }\n    return true;\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, regexPattern, errorCode, _errorClass, allowEmptyString) => {\n    // Use typeof for non-string values to ensure consistent cache keys\n    // noinspection SuspiciousTypeOfGuard\n    const valueKey = typeof value === \"string\" ? value : `[${typeof value}]`;\n    return `${CMIElement}:${valueKey}:${regexPattern}:${errorCode}:${allowEmptyString || false}`;\n  },\n);\n\n/**\n * Check if the value matches the proper range. If not, throw proper error code.\n *\n * @param {any} value\n * @param {string} rangePattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @return {boolean}\n */\nexport const checkValidRange = memoize(\n  (\n    CMIElement: string,\n    value: any,\n    rangePattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean => {\n    const ranges = rangePattern.split(\"#\");\n    value = value * 1.0;\n    if (ranges[0] && value >= ranges[0]) {\n      if (ranges[1] && (ranges[1] === \"*\" || value <= ranges[1])) {\n        return true;\n      } else {\n        throw new errorClass(CMIElement, errorCode);\n      }\n    } else {\n      throw new errorClass(CMIElement, errorCode);\n    }\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, rangePattern, errorCode, _errorClass) =>\n    `${CMIElement}:${value}:${rangePattern}:${errorCode}`,\n);\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm12_errors.TYPE_MISMATCH as number,\n    Scorm12ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidRange(\n  CMIElement: string,\n  value: any,\n  rangePattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  if (!allowEmptyString && value === \"\") {\n    throw new Scorm12ValidationError(CMIElement, scorm12_errors.VALUE_OUT_OF_RANGE as number);\n  }\n\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm12_errors.VALUE_OUT_OF_RANGE as number,\n    Scorm12ValidationError,\n  );\n}\n","import { BaseScormValidationError } from \"../exceptions\";\nimport { checkValidFormat, checkValidRange } from \"../cmi/common/validation\";\nimport { check12ValidFormat, check12ValidRange } from \"../cmi/scorm12/validation\";\nimport { scorm12_regex } from \"../constants/regex\";\nimport { scorm12_errors } from \"../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../exceptions/scorm12_exceptions\";\n\n/**\n * Service for validating CMI data model properties\n */\nexport class ValidationService {\n  /**\n   * Validates a score property (raw, min, max)\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @param {string} decimalRegex - The regex pattern for decimal validation\n   * @param {string | false} scoreRange - The range pattern for score validation, or false if no range validation is needed\n   * @param {number} invalidTypeCode - The error code for invalid type\n   * @param {number} invalidRangeCode - The error code for invalid range\n   * @param {typeof BaseScormValidationError} errorClass - The error class to use for validation errors\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScore(\n    CMIElement: string,\n    value: string,\n    decimalRegex: string,\n    scoreRange: string | false,\n    invalidTypeCode: number,\n    invalidRangeCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean {\n    return (\n      checkValidFormat(CMIElement, value, decimalRegex, invalidTypeCode, errorClass) &&\n      (!scoreRange || checkValidRange(CMIElement, value, scoreRange, invalidRangeCode, errorClass))\n    );\n    // This line should never be reached due to exceptions being thrown\n  }\n\n  /**\n   * Validates a SCORM 1.2 audio property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Audio(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.audio_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 language property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Language(CMIElement: string, value: string): boolean {\n    return check12ValidFormat(CMIElement, value, scorm12_regex.CMIString256);\n  }\n\n  /**\n   * Validates a SCORM 1.2 speed property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Speed(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.speed_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 text property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Text(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.text_range)\n    );\n  }\n\n  /**\n   * Validates if a property is read-only\n   *\n   * @param {string} CMIElement\n   * @param {boolean} initialized - Whether the object is initialized\n   * @throws {BaseScormValidationError} - Throws an error if the object is initialized\n   */\n  validateReadOnly(CMIElement: string, initialized: boolean): void {\n    if (initialized) {\n      throw new Scorm12ValidationError(CMIElement, scorm12_errors.READ_ONLY_ELEMENT as number);\n    }\n  }\n}\n\n// Export a singleton instance of the ValidationService\nexport const validationService = new ValidationService();\n","import { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"./base_cmi\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { validationService } from \"../../services/ValidationService\";\nimport { ScoreObject } from \"../../types/api_types\";\n\n/**\n * Base class for cmi *.score objects\n */\nexport class CMIScore extends BaseCMI {\n  private readonly __children: string;\n  private readonly __score_range: string | false;\n  private readonly __invalid_error_code: number;\n  private readonly __invalid_type_code: number;\n  private readonly __invalid_range_code: number;\n  private readonly __decimal_regex: string;\n  private readonly __error_class: typeof BaseScormValidationError;\n  protected _raw = \"\";\n  protected _min = \"\";\n  protected _max: string;\n\n  /**\n   * Constructor for *.score\n   * @param {\n   *     score_children: string,\n   *     score_range: string,\n   *     max: string,\n   *     invalidErrorCode: number,\n   *     invalidTypeCode: number,\n   *     invalidRangeCode: number,\n   *     decimalRegex: string,\n   *     errorClass: typeof BaseScormValidationError\n   * } params\n   */\n  constructor(params: {\n    CMIElement: string;\n    score_children?: string;\n    score_range?: string;\n    max?: string;\n    invalidErrorCode?: number;\n    invalidTypeCode?: number;\n    invalidRangeCode?: number;\n    decimalRegex?: string;\n    errorClass: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n\n    this.__children = params.score_children || scorm12_constants.score_children;\n    this.__score_range = !params.score_range ? false : scorm12_regex.score_range;\n    this._max = params.max || params.max === \"\" ? params.max : \"100\";\n    this.__invalid_error_code =\n      params.invalidErrorCode || (scorm12_errors.INVALID_SET_VALUE as number);\n    this.__invalid_type_code = params.invalidTypeCode || (scorm12_errors.TYPE_MISMATCH as number);\n    this.__invalid_range_code =\n      params.invalidRangeCode || (scorm12_errors.VALUE_OUT_OF_RANGE as number);\n    this.__decimal_regex = params.decimalRegex || scorm12_regex.CMIDecimal;\n    this.__error_class = params.errorClass;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this.__error_class(this._cmi_element + \"._children\", this.__invalid_error_code);\n  }\n\n  /**\n   * Getter for _raw\n   * @return {string}\n   */\n  get raw(): string {\n    return this._raw;\n  }\n\n  /**\n   * Setter for _raw\n   * @param {string} raw\n   */\n  set raw(raw: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".raw\",\n        raw,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._raw = raw;\n    }\n  }\n\n  /**\n   * Getter for _min\n   * @return {string}\n   */\n  get min(): string {\n    return this._min;\n  }\n\n  /**\n   * Setter for _min\n   * @param {string} min\n   */\n  set min(min: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".min\",\n        min,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._min = min;\n    }\n  }\n\n  /**\n   * Getter for _max\n   * @return {string}\n   */\n  get max(): string {\n    return this._max;\n  }\n\n  /**\n   * Setter for _max\n   * @param {string} max\n   */\n  set max(max: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".max\",\n        max,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._max = max;\n    }\n  }\n\n  /**\n   * Getter for _score_range\n   * @return {string | false}\n   */\n  public getScoreObject(): ScoreObject {\n    const scoreObject: ScoreObject = {};\n    if (!Number.isNaN(Number.parseFloat(this.raw))) {\n      scoreObject.raw = Number.parseFloat(this.raw);\n    }\n    if (!Number.isNaN(Number.parseFloat(this.min))) {\n      scoreObject.min = Number.parseFloat(this.min);\n    }\n    if (!Number.isNaN(Number.parseFloat(this.max))) {\n      scoreObject.max = Number.parseFloat(this.max);\n    }\n    return scoreObject;\n  }\n\n  /**\n   * toJSON for *.score\n   * @return {\n   *    {\n   *      min: string,\n   *      max: string,\n   *      raw: string\n   *    }\n   *    }\n   */\n  toJSON(): {\n    min: string;\n    max: string;\n    raw: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { check12ValidFormat } from \"../scorm12/validation\";\nimport * as Util from \"../../utilities\";\n\n/**\n * Class representing the `cmi.core` object\n * @extends BaseCMI\n */\nexport class CMICore extends BaseCMI {\n  /**\n   * Constructor for `cmi.core`\n   */\n  constructor() {\n    super(\"cmi.core\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.core.score\",\n      score_children: scorm12_constants.score_children,\n      score_range: scorm12_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE as number,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH as number,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE as number,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n\n  public readonly score: CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  private readonly __children = scorm12_constants.core_children;\n  private _student_id = \"\";\n  private _student_name = \"\";\n  private _lesson_location = \"\";\n  private _credit = \"\";\n  private _lesson_status = \"not attempted\";\n  private _entry = \"\";\n  private _total_time = \"\";\n  private _lesson_mode = \"normal\";\n  private _exit = \"\";\n  private _session_time = \"00:00:00\";\n  private _suspend_data = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._exit = \"\";\n    this._entry = \"\";\n\n    /**\n     * Resetting ensures we accurately track the time spent on each SCO session independently.\n     * Each new session should start from zero, so we can reset cmi.core.session_time at the beginning of each session.\n     */\n    this._session_time = \"00:00:00\";\n\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE as number,\n    );\n  }\n\n  /**\n   * Getter for _student_id\n   * @return {string}\n   */\n  get student_id(): string {\n    return this._student_id;\n  }\n\n  /**\n   * Setter for _student_id. Can only be called before  initialization.\n   * @param {string} student_id\n   */\n  set student_id(student_id: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".student_id\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._student_id = student_id;\n    }\n  }\n\n  /**\n   * Getter for _student_name\n   * @return {string}\n   */\n  get student_name(): string {\n    return this._student_name;\n  }\n\n  /**\n   * Setter for _student_name. Can only be called before  initialization.\n   * @param {string} student_name\n   */\n  set student_name(student_name: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".student_name\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._student_name = student_name;\n    }\n  }\n\n  /**\n   * Getter for _lesson_location\n   * @return {string}\n   */\n  get lesson_location(): string {\n    return this._lesson_location;\n  }\n\n  /**\n   * Setter for _lesson_location\n   * @param {string} lesson_location\n   */\n  set lesson_location(lesson_location: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".lesson_location\",\n        lesson_location,\n        scorm12_regex.CMIString256,\n        true,\n      )\n    ) {\n      this._lesson_location = lesson_location;\n    }\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this._credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before  initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".credit\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._credit = credit;\n    }\n  }\n\n  /**\n   * Getter for _lesson_status\n   * @return {string}\n   */\n  get lesson_status(): string {\n    return this._lesson_status;\n  }\n\n  /**\n   * Setter for _lesson_status\n   * @param {string} lesson_status\n   */\n  set lesson_status(lesson_status: string) {\n    if (this.initialized) {\n      if (\n        check12ValidFormat(\n          this._cmi_element + \".lesson_status\",\n          lesson_status,\n          scorm12_regex.CMIStatus,\n        )\n      ) {\n        this._lesson_status = lesson_status;\n      }\n    } else {\n      if (\n        check12ValidFormat(\n          this._cmi_element + \".lesson_status\",\n          lesson_status,\n          scorm12_regex.CMIStatus2,\n        )\n      ) {\n        this._lesson_status = lesson_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this._entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before  initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".entry\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._entry = entry;\n    }\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this._total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before  initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".total_time\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._total_time = total_time;\n    }\n  }\n\n  /**\n   * Getter for _lesson_mode\n   * @return {string}\n   */\n  get lesson_mode(): string {\n    return this._lesson_mode;\n  }\n\n  /**\n   * Setter for _lesson_mode. Can only be called before  initialization.\n   * @param {string} lesson_mode\n   */\n  set lesson_mode(lesson_mode: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".lesson_mode\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._lesson_mode = lesson_mode;\n    }\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".exit\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    if (check12ValidFormat(this._cmi_element + \".exit\", exit, scorm12_regex.CMIExit, true)) {\n      this._exit = exit;\n    }\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".session_time\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".session_time\",\n        session_time,\n        scorm12_regex.CMITimespan,\n      )\n    ) {\n      this._session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this._suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".suspend_data\",\n        suspend_data,\n        scorm12_regex.CMIString4096,\n        true,\n      )\n    ) {\n      this._suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   * @param {number} start_time\n   * @return {string}\n   */\n  getCurrentTotalTime(start_time: number | undefined): string {\n    let sessionTime = this._session_time;\n    if (typeof start_time !== \"undefined\" && start_time !== null) {\n      const seconds = new Date().getTime() - start_time;\n      sessionTime = Util.getSecondsAsHHMMSS(seconds / 1000);\n    }\n\n    return Util.addHHMMSSTimeStrings(\n      this._total_time,\n      sessionTime,\n      new RegExp(scorm12_regex.CMITimespan),\n    );\n  }\n\n  /**\n   * toJSON for cmi.core\n   *\n   * @return {\n   *    {\n   *      student_name: string,\n   *      entry: string,\n   *      exit: string,\n   *      score: CMIScore,\n   *      student_id: string,\n   *      lesson_mode: string,\n   *      lesson_location: string,\n   *      lesson_status: string,\n   *      credit: string,\n   *      session_time: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    student_name: string;\n    entry: string;\n    exit: string;\n    score: CMIScore;\n    student_id: string;\n    lesson_mode: string;\n    lesson_location: string;\n    lesson_status: string;\n    credit: string;\n    session_time: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      student_id: this.student_id,\n      student_name: this.student_name,\n      lesson_location: this.lesson_location,\n      credit: this.credit,\n      lesson_status: this.lesson_status,\n      entry: this.entry,\n      lesson_mode: this.lesson_mode,\n      exit: this.exit,\n      session_time: this.session_time,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"./base_cmi\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Base class for cmi *.n objects\n */\nexport class CMIArray extends BaseCMI {\n  private readonly _errorCode: number;\n  private readonly _errorClass: typeof BaseScormValidationError;\n  private readonly __children: string;\n  public childArray: any[];\n\n  /**\n   * Constructor cmi *.n arrays\n   * @param {object} params\n   */\n  constructor(params: {\n    CMIElement: string;\n    children: string;\n    errorCode?: number;\n    errorClass?: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n    this.__children = params.children;\n    this._errorCode = params.errorCode || (scorm12_errors.GENERAL as number);\n    this._errorClass = params.errorClass || BaseScormValidationError;\n    this.childArray = [];\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(wipe: boolean = false): void {\n    this._initialized = false;\n    if (wipe) {\n      this.childArray = [];\n    } else {\n      // Reset all children\n      for (let i = 0; i < this.childArray.length; i++) {\n        this.childArray[i].reset();\n      }\n    }\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this._errorClass(this._cmi_element + \"._children\", this._errorCode);\n  }\n\n  /**\n   * Getter for _count\n   * @return {number}\n   */\n  get _count(): number {\n    return this.childArray.length;\n  }\n\n  /**\n   * Setter for _count. Just throws an error.\n   * @param {number} _count\n   */\n  set _count(_count: number) {\n    throw new this._errorClass(this._cmi_element + \"._count\", this._errorCode);\n  }\n\n  /**\n   * toJSON for *.n arrays\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result: { [key: string]: any } = {};\n    for (let i = 0; i < this.childArray.length; i++) {\n      result[i + \"\"] = this.childArray[i];\n    }\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { check12ValidFormat } from \"./validation\";\nimport { CMIArray } from \"../common/array\";\n\n/**\n * Class representing SCORM 1.2's `cmi.objectives` object\n * @extends CMIArray\n */\nexport class CMIObjectives extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives`\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.objectives\",\n      children: scorm12_constants.objectives_children,\n      errorCode: scorm12_errors.INVALID_SET_VALUE as number,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super(\"cmi.objectives.n\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.objectives.n.score\",\n      score_children: scorm12_constants.score_children,\n      score_range: scorm12_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE as number,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH as number,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE as number,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n\n  public readonly score: CMIScore;\n\n  private _id = \"\";\n  private _status = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._id = \"\";\n    this._status = \"\";\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check12ValidFormat(this._cmi_element + \".id\", id, scorm12_regex.CMIIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _status\n   * @return {string}\n   */\n  get status(): string {\n    return this._status;\n  }\n\n  /**\n   * Setter for _status\n   * @param {string} status\n   */\n  set status(status: string) {\n    if (check12ValidFormat(this._cmi_element + \".status\", status, scorm12_regex.CMIStatus2)) {\n      this._status = status;\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   * @return {\n   *    {\n   *      id: string,\n   *      status: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    status: string;\n    score: CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      status: this.status,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { validationService } from \"../../services/ValidationService\";\n\n/**\n * Class representing the SCORM 1.2 cmi.student_data object\n * @extends BaseCMI\n */\nexport class CMIStudentData extends BaseCMI {\n  private readonly __children;\n  private _mastery_score = \"\";\n  private _max_time_allowed = \"\";\n  private _time_limit_action = \"\";\n\n  /**\n   * Constructor for cmi.student_data\n   * @param {string} student_data_children\n   */\n  constructor(student_data_children?: string) {\n    super(\"cmi.student_data\");\n    this.__children = student_data_children\n      ? student_data_children\n      : scorm12_constants.student_data_children;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE as number,\n    );\n  }\n\n  /**\n   * Getter for _master_score\n   * @return {string}\n   */\n  get mastery_score(): string {\n    return this._mastery_score;\n  }\n\n  /**\n   * Setter for _master_score. Can only be called before  initialization.\n   * @param {string} mastery_score\n   */\n  set mastery_score(mastery_score: string) {\n    validationService.validateReadOnly(this._cmi_element + \".mastery_score\", this.initialized);\n    this._mastery_score = mastery_score;\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this._max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before  initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    validationService.validateReadOnly(this._cmi_element + \".max_time_allowed\", this.initialized);\n    this._max_time_allowed = max_time_allowed;\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this._time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before  initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    validationService.validateReadOnly(this._cmi_element + \".time_limit_action\", this.initialized);\n    this._time_limit_action = time_limit_action;\n  }\n\n  /**\n   * toJSON for cmi.student_data\n   *\n   * @return {\n   *    {\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      mastery_score: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    mastery_score: string;\n    max_time_allowed: string;\n    time_limit_action: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      mastery_score: this.mastery_score,\n      max_time_allowed: this.max_time_allowed,\n      time_limit_action: this.time_limit_action,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { validationService } from \"../../services/ValidationService\";\n\n/**\n * Class representing the SCORM 1.2 cmi.student_preference object\n * @extends BaseCMI\n */\nexport class CMIStudentPreference extends BaseCMI {\n  private readonly __children;\n\n  /**\n   * Constructor for cmi.student_preference\n   * @param {string} student_preference_children\n   */\n  constructor(student_preference_children?: string) {\n    super(\"cmi.student_preference\");\n    this.__children = student_preference_children\n      ? student_preference_children\n      : scorm12_constants.student_preference_children;\n  }\n\n  private _audio = \"\";\n  private _language = \"\";\n  private _speed = \"\";\n  private _text = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE as number,\n    );\n  }\n\n  /**\n   * Getter for _audio\n   * @return {string}\n   */\n  get audio(): string {\n    return this._audio;\n  }\n\n  /**\n   * Setter for _audio\n   * @param {string} audio\n   */\n  set audio(audio: string) {\n    if (validationService.validateScorm12Audio(this._cmi_element + \".audio\", audio)) {\n      this._audio = audio;\n    }\n  }\n\n  /**\n   * Getter for _language\n   * @return {string}\n   */\n  get language(): string {\n    return this._language;\n  }\n\n  /**\n   * Setter for _language\n   * @param {string} language\n   */\n  set language(language: string) {\n    if (validationService.validateScorm12Language(this._cmi_element + \".language\", language)) {\n      this._language = language;\n    }\n  }\n\n  /**\n   * Getter for _speed\n   * @return {string}\n   */\n  get speed(): string {\n    return this._speed;\n  }\n\n  /**\n   * Setter for _speed\n   * @param {string} speed\n   */\n  set speed(speed: string) {\n    if (validationService.validateScorm12Speed(this._cmi_element + \".speed\", speed)) {\n      this._speed = speed;\n    }\n  }\n\n  /**\n   * Getter for _text\n   * @return {string}\n   */\n  get text(): string {\n    return this._text;\n  }\n\n  /**\n   * Setter for _text\n   * @param {string} text\n   */\n  set text(text: string) {\n    if (validationService.validateScorm12Text(this._cmi_element + \".text\", text)) {\n      this._text = text;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_preference\n   *\n   * @return {\n   *    {\n   *      audio: string,\n   *      language: string,\n   *      speed: string,\n   *      text: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    audio: string;\n    language: string;\n    speed: string;\n    text: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio: this.audio,\n      language: this.language,\n      speed: this.speed,\n      text: this.text,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check12ValidFormat, check12ValidRange } from \"./validation\";\nimport { scorm12_regex } from \"../../constants/regex\";\n\n/**\n * Class representing the SCORM 1.2 `cmi.interactions`\n * @extends CMIArray\n */\nexport class CMIInteractions extends CMIArray {\n  /**\n   * Constructor for `cmi.interactions`\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.interactions\",\n      children: scorm12_constants.interactions_children,\n      errorCode: scorm12_errors.INVALID_SET_VALUE as number,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n object\n   */\n  constructor() {\n    super(\"cmi.interactions.n\");\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm12_errors.INVALID_SET_VALUE as number,\n      errorClass: Scorm12ValidationError,\n      children: scorm12_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.correct_responses\",\n      errorCode: scorm12_errors.INVALID_SET_VALUE as number,\n      errorClass: Scorm12ValidationError,\n      children: scorm12_constants.correct_responses_children,\n    });\n  }\n\n  public readonly objectives: CMIArray;\n  public readonly correct_responses: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  private _id = \"\";\n  private _time = \"\";\n  private _type = \"\";\n  private _weighting = \"\";\n  private _student_response = \"\";\n  private _result = \"\";\n  private _latency = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n\n    this._id = \"\";\n    this._time = \"\";\n    this._type = \"\";\n    this._weighting = \"\";\n    this._student_response = \"\";\n    this._result = \"\";\n    this._latency = \"\";\n\n    this.objectives?.reset();\n    this.correct_responses?.reset();\n  }\n\n  /**\n   * Getter for _id. Should only be called during JSON export.\n   * @return {string}\n   */\n  get id(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".id\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check12ValidFormat(this._cmi_element + \".id\", id, scorm12_regex.CMIIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get time(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".time\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._time;\n  }\n\n  /**\n   * Setter for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (check12ValidFormat(this._cmi_element + \".time\", time, scorm12_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * Getter for _type. Should only be called during JSON export.\n   * @return {string}\n   */\n  get type(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".type\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._type;\n  }\n\n  /**\n   * Setter for _type\n   * @param {string} type\n   */\n  set type(type: string) {\n    if (check12ValidFormat(this._cmi_element + \".type\", type, scorm12_regex.CMIType)) {\n      this._type = type;\n    }\n  }\n\n  /**\n   * Getter for _weighting. Should only be called during JSON export.\n   * @return {string}\n   */\n  get weighting(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".weighting\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._weighting;\n  }\n\n  /**\n   * Setter for _weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting: string) {\n    if (\n      check12ValidFormat(this._cmi_element + \".weighting\", weighting, scorm12_regex.CMIDecimal) &&\n      check12ValidRange(this._cmi_element + \".weighting\", weighting, scorm12_regex.weighting_range)\n    ) {\n      this._weighting = weighting;\n    }\n  }\n\n  /**\n   * Getter for _student_response. Should only be called during JSON export.\n   * @return {string}\n   */\n  get student_response(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".student_response\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._student_response;\n  }\n\n  /**\n   * Setter for _student_response\n   * @param {string} student_response\n   */\n  set student_response(student_response: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".student_response\",\n        student_response,\n        scorm12_regex.CMIFeedback,\n        true,\n      )\n    ) {\n      this._student_response = student_response;\n    }\n  }\n\n  /**\n   * Getter for _result. Should only be called during JSON export.\n   * @return {string}\n   */\n  get result(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".result\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._result;\n  }\n\n  /**\n   * Setter for _result\n   * @param {string} result\n   */\n  set result(result: string) {\n    if (check12ValidFormat(this._cmi_element + \".result\", result, scorm12_regex.CMIResult)) {\n      this._result = result;\n    }\n  }\n\n  /**\n   * Getter for _latency. Should only be called during JSON export.\n   * @return {string}\n   */\n  get latency(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".latency\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._latency;\n  }\n\n  /**\n   * Setter for _latency\n   * @param {string} latency\n   */\n  set latency(latency: string) {\n    if (check12ValidFormat(this._cmi_element + \".latency\", latency, scorm12_regex.CMITimespan)) {\n      this._latency = latency;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      time: string,\n   *      type: string,\n   *      weighting: string,\n   *      student_response: string,\n   *      result: string,\n   *      latency: string,\n   *      objectives: CMIArray,\n   *      correct_responses: CMIArray\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    time: string;\n    type: string;\n    weighting: string;\n    student_response: string;\n    result: string;\n    latency: string;\n    objectives: CMIArray;\n    correct_responses: CMIArray;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      time: this.time,\n      type: this.type,\n      weighting: this.weighting,\n      student_response: this.student_response,\n      result: this.result,\n      latency: this.latency,\n      objectives: this.objectives,\n      correct_responses: this.correct_responses,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n.objectives.n\");\n  }\n\n  private _id = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._id = \"\";\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check12ValidFormat(this._cmi_element + \".id\", id, scorm12_regex.CMIIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.correct_responses.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.correct_responses.n\n   */\n  constructor() {\n    super(\"cmi.interactions.correct_responses.n\");\n  }\n\n  private _pattern = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._pattern = \"\";\n  }\n\n  /**\n   * Getter for _pattern\n   * @return {string}\n   */\n  get pattern(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".pattern\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._pattern;\n  }\n\n  /**\n   * Setter for _pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern: string) {\n    if (\n      check12ValidFormat(this._cmi_element + \".pattern\", pattern, scorm12_regex.CMIFeedback, true)\n    ) {\n      this._pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.correct_responses.n\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    pattern: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      pattern: this._pattern,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { BaseRootCMI } from \"../common/base_cmi\";\nimport { check12ValidFormat } from \"./validation\";\nimport { CMICore } from \"../aicc/core\";\nimport { CMIObjectives } from \"./objectives\";\nimport { CMIStudentData } from \"./student_data\";\nimport { CMIStudentPreference } from \"./student_preference\";\nimport { CMIInteractions } from \"./interactions\";\n\n/**\n * Class representing the cmi object for SCORM 1.2\n */\nexport class CMI extends BaseRootCMI {\n  private readonly __children: string = \"\";\n  private __version: string = \"3.4\";\n  private _launch_data: string = \"\";\n  private _comments: string = \"\";\n  private _comments_from_lms: string = \"\";\n\n  /**\n   * Constructor for the SCORM 1.2 cmi object\n   * @param {string} cmi_children\n   * @param {(CMIStudentData|AICCCMIStudentData)} student_data\n   * @param {boolean} initialized\n   */\n  constructor(cmi_children?: string, student_data?: CMIStudentData, initialized?: boolean) {\n    super(\"cmi\");\n    if (initialized) this.initialize();\n    this.__children = cmi_children ? cmi_children : scorm12_constants.cmi_children;\n    this.core = new CMICore();\n    this.objectives = new CMIObjectives();\n    this.student_data = student_data ? student_data : new CMIStudentData();\n    this.student_preference = new CMIStudentPreference();\n    this.interactions = new CMIInteractions();\n  }\n\n  public core: CMICore;\n  public objectives: CMIObjectives;\n  public student_data: CMIStudentData;\n  public student_preference: CMIStudentPreference;\n  public interactions: CMIInteractions;\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._launch_data = \"\";\n    this._comments = \"\";\n    this.core?.reset();\n    this.objectives = new CMIObjectives();\n    this.interactions = new CMIInteractions();\n    this.student_data?.reset();\n    this.student_preference?.reset();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.core?.initialize();\n    this.objectives?.initialize();\n    this.student_data?.initialize();\n    this.student_preference?.initialize();\n    this.interactions?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions\n   *    }\n   *  }\n   */\n  toJSON(): {\n    suspend_data: string;\n    launch_data: string;\n    comments: string;\n    comments_from_lms: string;\n    core: CMICore;\n    objectives: CMIObjectives;\n    student_data: CMIStudentData;\n    student_preference: CMIStudentPreference;\n    interactions: CMIInteractions;\n  } {\n    this.jsonString = true;\n    const result = {\n      suspend_data: this.suspend_data,\n      launch_data: this.launch_data,\n      comments: this.comments,\n      comments_from_lms: this.comments_from_lms,\n      core: this.core,\n      objectives: this.objectives,\n      student_data: this.student_data,\n      student_preference: this.student_preference,\n      interactions: this.interactions,\n    };\n    this.jsonString = false;\n    return result;\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   */\n  get _version(): string {\n    return this.__version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._version\",\n      scorm12_errors.INVALID_SET_VALUE as number,\n    );\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE as number,\n    );\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this.core?.suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (this.core) {\n      this.core.suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this._launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before  initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".launch_data\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._launch_data = launch_data;\n    }\n  }\n\n  /**\n   * Getter for _comments\n   * @return {string}\n   */\n  get comments(): string {\n    return this._comments;\n  }\n\n  /**\n   * Setter for _comments\n   * @param {string} comments\n   */\n  set comments(comments: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".comments\",\n        comments,\n        scorm12_regex.CMIString4096,\n        true,\n      )\n    ) {\n      this._comments = comments;\n    }\n  }\n\n  /**\n   * Getter for _comments_from_lms\n   * @return {string}\n   */\n  get comments_from_lms(): string {\n    return this._comments_from_lms;\n  }\n\n  /**\n   * Setter for _comments_from_lms. Can only be called before  initialization.\n   * @param {string} comments_from_lms\n   */\n  set comments_from_lms(comments_from_lms: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".comments_from_lms\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._comments_from_lms = comments_from_lms;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string}\n   */\n  getCurrentTotalTime(): string {\n    return this.core.getCurrentTotalTime(this.start_time);\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { check12ValidFormat } from \"./validation\";\nimport { scorm12_regex } from \"../../constants/regex\";\n\n/**\n * Class for AICC Navigation object\n */\nexport class NAV extends BaseCMI {\n  /**\n   * Constructor for NAV object\n   */\n  constructor() {\n    super(\"cmi.nav\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._event = \"\";\n    this._initialized = false;\n  }\n\n  private _event = \"\";\n\n  /**\n   * Getter for _event\n   * @return {string}\n   */\n  get event(): string {\n    return this._event;\n  }\n\n  /**\n   * Setter for _event\n   * @param {string} event\n   */\n  set event(event: string) {\n    if (\n      event === \"\" ||\n      check12ValidFormat(this._cmi_element + \".event\", event, scorm12_regex.NAVEvent)\n    ) {\n      this._event = event;\n    }\n  }\n\n  /**\n   * toJSON for nav object\n   * @return {\n   *    {\n   *      event: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    event: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      event: this.event,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","// Using plain objects instead of enums for better compatibility with strip-only mode\n// This approach avoids TypeScript enum runtime code while maintaining the same API\n\n// NAVBoolean values\nexport const NAVBoolean = {\n  UNKNOWN: \"unknown\",\n  TRUE: \"true\",\n  FALSE: \"false\",\n};\n\n// Type for NAVBoolean values\nexport type NAVBoolean = (typeof NAVBoolean)[keyof typeof NAVBoolean];\n\n// SuccessStatus values\nexport const SuccessStatus = {\n  PASSED: \"passed\",\n  FAILED: \"failed\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for SuccessStatus values\nexport type SuccessStatus = (typeof SuccessStatus)[keyof typeof SuccessStatus];\n\n// CompletionStatus values\nexport const CompletionStatus = {\n  COMPLETED: \"completed\",\n  INCOMPLETE: \"incomplete\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for CompletionStatus values\nexport type CompletionStatus = (typeof CompletionStatus)[keyof typeof CompletionStatus];\n\n// LogLevelEnum values\nexport const LogLevelEnum = {\n  _: 0,\n  DEBUG: 1,\n  INFO: 2,\n  WARN: 3,\n  ERROR: 4,\n  NONE: 5,\n};\n\n// Type for LogLevelEnum values\nexport type LogLevelEnum = (typeof LogLevelEnum)[keyof typeof LogLevelEnum];\n","import { InternalSettings, LogLevel, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"./api_constants\";\nimport { LogLevelEnum } from \"./enums\";\n\n/**\n * Default settings for the SCORM API\n */\nexport const DefaultSettings: InternalSettings = {\n  autocommit: false,\n  autocommitSeconds: 10,\n  asyncCommit: false,\n  sendFullCommit: true,\n  lmsCommitUrl: false,\n  dataCommitFormat: \"json\",\n  commitRequestDataType: \"application/json;charset=UTF-8\",\n  autoProgress: false,\n  logLevel: LogLevelEnum.ERROR,\n  selfReportSessionTime: false,\n  alwaysSendTotalTime: false,\n  renderCommonCommitFields: false,\n  strict_errors: true,\n  xhrHeaders: {},\n  xhrWithCredentials: false,\n  fetchMode: \"cors\",\n  useBeaconInsteadOfFetch: \"never\",\n  responseHandler: async function (response: Response): Promise<ResultObject> {\n    if (typeof response !== \"undefined\") {\n      let httpResult = null;\n\n      // Handle both text() and json() response methods\n      try {\n        if (typeof response.json === \"function\") {\n          // Try to get JSON directly if the method exists\n          httpResult = await response.json();\n        } else if (typeof response.text === \"function\") {\n          // Fall back to text() if json() is not available\n          const responseText = await response.text();\n          if (responseText) {\n            httpResult = JSON.parse(responseText);\n          }\n        }\n      } catch (e) {\n        // If parsing fails, continue with null httpResult\n      }\n\n      if (httpResult === null || !{}.hasOwnProperty.call(httpResult, \"result\")) {\n        if (response.status === 200) {\n          return {\n            result: global_constants.SCORM_TRUE,\n            errorCode: 0,\n          };\n        } else {\n          return {\n            result: global_constants.SCORM_FALSE,\n            errorCode: 101,\n          };\n        }\n      } else {\n        return {\n          result: httpResult.result,\n          errorCode: httpResult.errorCode\n            ? httpResult.errorCode\n            : httpResult.result === global_constants.SCORM_TRUE\n              ? 0\n              : 101,\n        };\n      }\n    }\n    return {\n      result: global_constants.SCORM_FALSE,\n      errorCode: 101,\n    };\n  },\n  requestHandler: function (commitObject) {\n    return commitObject;\n  },\n  onLogMessage: defaultLogHandler,\n  scoItemIds: [],\n  scoItemIdValidator: false,\n  globalObjectiveIds: [],\n\n  // Offline support settings\n  enableOfflineSupport: false,\n  courseId: \"\",\n  syncOnInitialize: true,\n  syncOnTerminate: true,\n  maxSyncAttempts: 5,\n};\n\nexport function defaultLogHandler(messageLevel: LogLevel, logMessage: string): void {\n  switch (messageLevel) {\n    case \"4\":\n    case 4:\n    case \"ERROR\":\n    case LogLevelEnum.ERROR:\n      console.error(logMessage);\n      break;\n    case \"3\":\n    case 3:\n    case \"WARN\":\n    case LogLevelEnum.WARN:\n      console.warn(logMessage);\n      break;\n    case \"2\":\n    case 2:\n    case \"INFO\":\n    case LogLevelEnum.INFO:\n      console.info(logMessage);\n      break;\n    case \"1\":\n    case 1:\n    case \"DEBUG\":\n    case LogLevelEnum.DEBUG:\n      if (console.debug) {\n        console.debug(logMessage);\n      } else {\n        console.log(logMessage);\n      }\n      break;\n  }\n}\n","import BaseAPI from \"../BaseAPI\";\n\n/**\n * Private class that wraps a timeout call to the commit() function\n */\nexport class ScheduledCommit {\n  private _API;\n  private _cancelled = false;\n  private readonly _timeout;\n  private readonly _callback;\n\n  /**\n   * Constructor for ScheduledCommit\n   * @param {BaseAPI} API\n   * @param {number} when\n   * @param {string} callback\n   */\n  constructor(API: BaseAPI, when: number, callback: string) {\n    this._API = API;\n    this._timeout = setTimeout(this.wrapper.bind(this), when);\n    this._callback = callback;\n  }\n\n  /**\n   * Cancel any currently scheduled commit\n   */\n  cancel() {\n    this._cancelled = true;\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n  }\n\n  /**\n   * Wrap the API commit call to check if the call has already been canceled\n   */\n  wrapper() {\n    if (!this._cancelled) {\n      // Only proceed with scheduled commit if API is properly initialized\n      if (this._API.isInitialized()) {\n        (async () => await this._API.commit(this._callback))();\n      }\n    }\n  }\n}\n","import { CommitObject, InternalSettings, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { IHttpService } from \"../interfaces/services\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { StringKeyMap } from \"../utilities\";\n\n/**\n * Service for handling HTTP communication with the LMS\n */\nexport class HttpService implements IHttpService {\n  private settings: InternalSettings;\n  private error_codes: ErrorCode;\n\n  /**\n   * Constructor for HttpService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   */\n  constructor(settings: InternalSettings, error_codes: ErrorCode) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n  }\n\n  /**\n   * Sends HTTP requests to the LMS with special handling for immediate and standard requests.\n   *\n   * This method handles communication with the LMS server, implementing two distinct\n   * request handling strategies based on the context:\n   *\n   * 1. Immediate Mode (used during termination):\n   *    When immediate=true, the method:\n   *    - Initiates the fetch request but doesn't wait for it to complete\n   *    - Returns a success result immediately\n   *    - Processes the response asynchronously when it arrives\n   *\n   *    This is critical for browser compatibility during page unload/termination,\n   *    as some browsers (especially Chrome) may cancel synchronous or awaited\n   *    requests when a page is closing.\n   *\n   * 2. Standard Mode (normal operation):\n   *    When immediate=false, the method:\n   *    - Processes the request parameters through the configured requestHandler\n   *    - Awaits the fetch response completely\n   *    - Transforms the response using the configured responseHandler\n   *    - Triggers appropriate event listeners based on success/failure\n   *    - Returns the complete result with appropriate error codes\n   *\n   * The method also includes error handling to catch network failures or other\n   * exceptions that might occur during the request process.\n   *\n   * @param {string} url - The URL endpoint to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The data to send to the LMS\n   * @param {boolean} immediate - Whether to send the request immediately without waiting (true) or process normally (false)\n   * @param {Function} apiLog - Function to log API messages with appropriate levels\n   * @param {Function} processListeners - Function to trigger event listeners for commit events\n   * @return {Promise<ResultObject>} - A promise that resolves with the result of the request\n   *\n   * @example\n   * // Standard request (waits for response)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   false,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   *\n   * @example\n   * // Immediate request (for termination)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   true,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   * // result will be success immediately, regardless of actual HTTP result\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n    apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    const genericError: ResultObject = {\n      result: global_constants.SCORM_FALSE,\n      errorCode: this.error_codes.GENERAL || 101,\n    };\n\n    // If immediate mode (for termination), handle differently\n    if (immediate) {\n      return this._handleImmediateRequest(url, params, apiLog, processListeners);\n    }\n\n    // Standard request processing\n    try {\n      const processedParams = this.settings.requestHandler(params) as\n        | CommitObject\n        | StringKeyMap\n        | Array<any>;\n      const response = await this.performFetch(url, processedParams);\n      return this.transformResponse(response, processListeners);\n    } catch (e: unknown) {\n      const message = e instanceof Error ? e.message : String(e);\n\n      // Enhanced error logging with more context\n      apiLog(\"processHttpRequest\", `HTTP request failed to ${url}: ${message}`, LogLevelEnum.ERROR);\n\n      if (e instanceof Error && e.stack) {\n        apiLog(\"processHttpRequest\", `Stack trace: ${e.stack}`, LogLevelEnum.DEBUG);\n      }\n\n      // Create enhanced error object with more details\n      const enhancedError: ResultObject = {\n        ...genericError,\n        errorMessage: message,\n        errorDetails: JSON.stringify({\n          url,\n          errorType: e instanceof Error ? e.constructor.name : typeof e,\n          originalError: message,\n        }),\n      };\n\n      processListeners(\"CommitError\");\n      return enhancedError;\n    }\n  }\n\n  /**\n   * Handles an immediate request (used during termination)\n   * @param {string} url - The URL to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The parameters to include in the request\n   * @param {Function} processListeners - Function to process event listeners\n   * @return {ResultObject} - A success result object\n   * @private\n   */\n  private _handleImmediateRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): ResultObject {\n    // Use Beacon API for final commit if specified in settings\n    if (this.settings.useBeaconInsteadOfFetch !== \"never\") {\n      const { body, contentType } = this._prepareRequestBody(params);\n      navigator.sendBeacon(url, new Blob([body], { type: contentType }));\n    } else {\n      // Use regular fetch with keepalive\n      this.performFetch(url, params)\n        .then(async (response) => {\n          await this.transformResponse(response, processListeners);\n        })\n        .catch((e: unknown) => {\n          const message = e instanceof Error ? e.message : String(e);\n          apiLog(\"processHttpRequest\", message, LogLevelEnum.ERROR);\n          processListeners(\"CommitError\");\n        });\n    }\n\n    // Return success immediately without waiting for response\n    return {\n      result: global_constants.SCORM_TRUE,\n      errorCode: 0,\n    };\n  }\n\n  /**\n   * Prepares the request body and content type based on params type\n   * @param {CommitObject|StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Object} - Object containing body and contentType\n   * @private\n   */\n  private _prepareRequestBody(params: CommitObject | StringKeyMap | Array<any>): {\n    body: string;\n    contentType: string;\n  } {\n    const body = params instanceof Array ? params.join(\"&\") : JSON.stringify(params);\n    const contentType =\n      params instanceof Array\n        ? \"application/x-www-form-urlencoded\"\n        : this.settings.commitRequestDataType;\n\n    return { body, contentType };\n  }\n\n  /**\n   * Perform the fetch request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - The response from the LMS\n   * @private\n   */\n  private async performFetch(url: string, params: StringKeyMap | Array<any>): Promise<Response> {\n    // Use Beacon API if specified in settings\n    if (this.settings.useBeaconInsteadOfFetch === \"always\") {\n      return this.performBeacon(url, params);\n    }\n\n    const { body, contentType } = this._prepareRequestBody(params);\n    const init = {\n      method: \"POST\",\n      mode: this.settings.fetchMode,\n      body,\n      headers: {\n        ...this.settings.xhrHeaders,\n        \"Content-Type\": contentType,\n      },\n      keepalive: true,\n    } as RequestInit;\n\n    if (this.settings.xhrWithCredentials) {\n      init.credentials = \"include\";\n    }\n\n    return fetch(url, init);\n  }\n\n  /**\n   * Perform the beacon request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - A promise that resolves with a mock Response object\n   * @private\n   */\n  private async performBeacon(url: string, params: StringKeyMap | Array<any>): Promise<Response> {\n    const { body, contentType } = this._prepareRequestBody(params);\n\n    // Send the beacon request\n    const beaconSuccess = navigator.sendBeacon(url, new Blob([body], { type: contentType }));\n\n    // Create a mock Response object since sendBeacon doesn't return a Response\n    return Promise.resolve({\n      status: beaconSuccess ? 200 : 0,\n      ok: beaconSuccess,\n      json: async () => ({\n        result: beaconSuccess ? \"true\" : \"false\",\n        errorCode: beaconSuccess ? 0 : this.error_codes.GENERAL,\n      }),\n      text: async () =>\n        JSON.stringify({\n          result: beaconSuccess ? \"true\" : \"false\",\n          errorCode: beaconSuccess ? 0 : this.error_codes.GENERAL,\n        }),\n    } as Response);\n  }\n\n  /**\n   * Transforms the response from the LMS to a ResultObject\n   * @param {Response} response - The response from the LMS\n   * @param {Function} processListeners - Function to process event listeners\n   * @return {Promise<ResultObject>} - The transformed response\n   * @private\n   */\n  private async transformResponse(\n    response: Response,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    let result: any;\n\n    try {\n      // Parse the response using the configured handler or default to json\n      result =\n        typeof this.settings.responseHandler === \"function\"\n          ? await this.settings.responseHandler(response)\n          : await response.json();\n    } catch (parseError) {\n      // If we can't parse the response, log the raw response for debugging\n      const responseText = await response.text().catch(() => \"Unable to read response text\");\n\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL || 101,\n        errorMessage: `Failed to parse LMS response: ${parseError instanceof Error ? parseError.message : String(parseError)}`,\n        errorDetails: JSON.stringify({\n          status: response.status,\n          statusText: response.statusText,\n          url: response.url,\n          responseText: responseText.substring(0, 500), // Limit response text to avoid huge logs\n          parseError: parseError instanceof Error ? parseError.message : String(parseError),\n        }),\n      };\n    }\n\n    // Ensure result has an errorCode property\n    if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n      result.errorCode = this._isSuccessResponse(response, result) ? 0 : this.error_codes.GENERAL;\n    }\n\n    // Add response details for failed requests\n    if (!this._isSuccessResponse(response, result)) {\n      result.errorDetails = {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n        ...result.errorDetails, // Preserve any existing error details\n      };\n    }\n\n    // Trigger appropriate event based on success/failure\n    if (this._isSuccessResponse(response, result)) {\n      processListeners(\"CommitSuccess\");\n    } else {\n      processListeners(\"CommitError\", undefined, result.errorCode);\n    }\n\n    return result;\n  }\n\n  /**\n   * Determines if a response is successful based on status code and result\n   * @param {Response} response - The HTTP response\n   * @param {ResultObject} result - The parsed result object\n   * @return {boolean} - Whether the response is successful\n   * @private\n   */\n  private _isSuccessResponse(response: Response, result: ResultObject): boolean {\n    const value = (result as any).result;\n    return (\n      response.status >= 200 &&\n      response.status <= 299 &&\n      (value === true || value === \"true\" || value === global_constants.SCORM_TRUE)\n    );\n  }\n\n  /**\n   * Updates the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: InternalSettings): void {\n    this.settings = settings;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { IEventService } from \"../interfaces/services\";\n\n/**\n * Interface for a listener object\n */\ninterface Listener {\n  functionName: string;\n  CMIElement: string | null;\n  callback: Function;\n}\n\n/**\n * Type for parsed listener information\n */\ninterface ParsedListener {\n  functionName: string;\n  CMIElement: string | null;\n}\n\n/**\n * Service for handling event listeners and event processing\n */\nexport class EventService implements IEventService {\n  // Map of function names to listeners for faster lookups\n  private listenerMap: Map<string, Listener[]> = new Map();\n  // Total count of listeners for logging\n  private listenerCount = 0;\n  // Function to log API messages\n  private readonly apiLog: (\n    functionName: string,\n    message: string,\n    messageLevel: LogLevel,\n    CMIElement?: string,\n  ) => void;\n\n  /**\n   * Constructor for EventService\n   * @param {Function} apiLog - Function to log API messages\n   */\n  constructor(\n    apiLog: (\n      functionName: string,\n      message: string,\n      messageLevel: LogLevel,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.apiLog = apiLog;\n  }\n\n  /**\n   * Parses a listener name into its components\n   *\n   * @param {string} listenerName - The name of the listener\n   * @returns {ParsedListener|null} - The parsed listener information or null if invalid\n   */\n  private parseListenerName(listenerName: string): ParsedListener | null {\n    const listenerSplit = listenerName.split(\".\");\n    if (listenerSplit.length === 0) return null;\n\n    const functionName = listenerSplit[0];\n    let CMIElement: string | null = null;\n\n    if (listenerSplit.length > 1) {\n      CMIElement = listenerName.replace(`${functionName}.`, \"\");\n    }\n\n    return { functionName: functionName ?? listenerName, CMIElement };\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener\n   * @param {Function} callback - The callback function to execute when the event occurs\n   */\n  on(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get or create the array for this function name\n      const listeners = this.listenerMap.get(functionName) ?? [];\n\n      // Add the new listener\n      listeners.push({\n        functionName,\n        CMIElement,\n        callback,\n      });\n\n      // Update the map and count\n      this.listenerMap.set(functionName, listeners);\n      this.listenerCount++;\n\n      this.apiLog(\n        \"on\",\n        `Added event listener: ${this.listenerCount}`,\n        LogLevelEnum.INFO,\n        functionName,\n      );\n    }\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener\n   *\n   * @param {string} listenerName - The name of the listener to remove\n   * @param {Function} callback - The callback function to remove\n   */\n  off(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get the listeners for this function name\n      const listeners = this.listenerMap.get(functionName);\n      if (!listeners) continue;\n\n      // Find the index of the listener to remove\n      const removeIndex = listeners.findIndex(\n        (obj) => obj.CMIElement === CMIElement && obj.callback === callback,\n      );\n\n      if (removeIndex !== -1) {\n        // Remove the listener\n        listeners.splice(removeIndex, 1);\n        this.listenerCount--;\n\n        // Update the map or remove the entry if empty\n        if (listeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, listeners);\n        }\n\n        this.apiLog(\n          \"off\",\n          `Removed event listener: ${this.listenerCount}`,\n          LogLevelEnum.INFO,\n          functionName,\n        );\n      }\n    }\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener to clear\n   */\n  clear(listenerName: string) {\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // If we have listeners for this function name\n      if (this.listenerMap.has(functionName)) {\n        const listeners = this.listenerMap.get(functionName)!;\n\n        // Filter out listeners that match the criteria\n        const newListeners = listeners.filter((obj) => obj.CMIElement !== CMIElement);\n\n        // Update the count and map\n        this.listenerCount -= listeners.length - newListeners.length;\n\n        if (newListeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, newListeners);\n        }\n      }\n    }\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created\n   *\n   * @param {string} functionName - The name of the function that triggered the event\n   * @param {string} CMIElement - The CMI element that was affected\n   * @param {any} value - The value that was set\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this.apiLog(functionName, value, LogLevelEnum.INFO, CMIElement);\n\n    // Get listeners for this function name\n    const listeners = this.listenerMap.get(functionName);\n    if (!listeners) return;\n\n    for (const listener of listeners) {\n      const listenerHasCMIElement = !!listener.CMIElement;\n      let CMIElementsMatch = false;\n\n      // Check if CMI elements match\n      if (CMIElement && listener.CMIElement) {\n        if (listener.CMIElement.endsWith(\"*\")) {\n          // For wildcard matches, check if the CMI element starts with the prefix\n          const prefix = listener.CMIElement.slice(0, -1);\n          CMIElementsMatch = CMIElement.startsWith(prefix);\n        } else {\n          // For exact matches, compare the strings directly\n          CMIElementsMatch = listener.CMIElement === CMIElement;\n        }\n      }\n\n      // If the listener matches, call the callback\n      if (!listenerHasCMIElement || CMIElementsMatch) {\n        this.apiLog(\n          \"processListeners\",\n          `Processing listener: ${listener.functionName}`,\n          LogLevelEnum.DEBUG,\n          CMIElement,\n        );\n\n        // Handle special event types\n        if (functionName.startsWith(\"Sequence\")) {\n          // For sequence events, pass the target as the first argument\n          listener.callback(value);\n        } else if (functionName === \"CommitError\") {\n          // For commit error events, pass the error code\n          listener.callback(value);\n        } else if (functionName === \"CommitSuccess\") {\n          // For commit success events, pass no arguments\n          listener.callback();\n        } else {\n          // For regular events, pass CMIElement and value\n          listener.callback(CMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Resets the event service by clearing all listeners\n   */\n  reset() {\n    this.listenerMap.clear();\n    this.listenerCount = 0;\n  }\n}\n","import { CommitObject, LogLevel } from \"../types/api_types\";\nimport { StringKeyMap, unflatten } from \"../utilities\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { BaseCMI } from \"../cmi/common/base_cmi\";\nimport { ISerializationService } from \"../interfaces/services\";\n\n/**\n * Service for handling data serialization and deserialization in scorm-again\n */\nexport class SerializationService implements ISerializationService {\n  /**\n   * Loads CMI data from a flattened JSON object with special handling for arrays and ordering.\n   *\n   * This method implements a complex algorithm for loading flattened JSON data into the CMI\n   * object structure. It handles several key challenges:\n   *\n   * 1. Ordering dependencies: Some CMI elements (like interactions and objectives) must be\n   *    loaded in a specific order to ensure proper initialization.\n   *\n   * 2. Array handling: Interactions and objectives are stored as arrays, and their properties\n   *    must be loaded in the correct order (e.g., 'id' and 'type' must be set before other properties).\n   *\n   * 3. Unflattening: The method converts flattened dot notation (e.g., \"cmi.objectives.0.id\")\n   *    back into nested objects before loading.\n   *\n   * The algorithm works by:\n   * - Categorizing keys into interactions, objectives, and other properties\n   * - Sorting interactions to prioritize 'id' and 'type' fields within each index\n   * - Sorting objectives to prioritize 'id' fields within each index\n   * - Processing each category in order: interactions, objectives, then other properties\n   *\n   * @param {StringKeyMap} json - The flattened JSON object with dot notation keys\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   *\n   * @param setStartingData\n   * @example\n   * // Example of flattened JSON input:\n   * // {\n   * //   \"cmi.objectives.0.id\": \"obj1\",\n   * //   \"cmi.objectives.0.score.raw\": \"80\",\n   * //   \"cmi.interactions.0.id\": \"int1\",\n   * //   \"cmi.interactions.0.type\": \"choice\",\n   * //   \"cmi.interactions.0.result\": \"correct\"\n   * // }\n   */\n  loadFromFlattenedJSON(\n    json: StringKeyMap,\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromFlattenedJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    const int_pattern = /^(cmi\\.interactions\\.)(\\d+)\\.(.*)$/;\n    const obj_pattern = /^(cmi\\.objectives\\.)(\\d+)\\.(.*)$/;\n\n    // Extract and categorize keys for better sorting\n    const interactions: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const objectives: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const others: { key: string; value: any }[] = [];\n\n    // Categorize keys\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key)) {\n        const intMatch = key.match(int_pattern);\n        if (intMatch) {\n          interactions.push({\n            key,\n            value: json[key],\n            index: Number(intMatch[2]),\n            field: intMatch[3] || \"\",\n          });\n          continue;\n        }\n\n        const objMatch = key.match(obj_pattern);\n        if (objMatch) {\n          objectives.push({\n            key,\n            value: json[key],\n            index: Number(objMatch[2]),\n            field: objMatch[3] || \"\",\n          });\n          continue;\n        }\n\n        others.push({ key, value: json[key] });\n      }\n    }\n\n    // Sort interactions: first by index, then prioritize 'id' and 'type' fields\n    interactions.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id and type\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n      if (a.field === \"type\") return -1;\n      if (b.field === \"type\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort objectives: first by index, then prioritize 'id' field\n    objectives.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort other keys alphabetically\n    others.sort((a, b) => a.key.localeCompare(b.key));\n\n    // Process all items in the correct order\n    const processItems = (items: { key: string; value: any }[]) => {\n      items.forEach((item) => {\n        const obj: StringKeyMap = {};\n        obj[item.key] = item.value;\n        this.loadFromJSON(\n          unflatten(obj) as StringKeyMap,\n          CMIElement,\n          setCMIValue,\n          isNotInitialized,\n          setStartingData,\n        );\n      });\n    };\n\n    // Process in order: interactions, objectives, others\n    processItems(interactions);\n    processItems(objectives);\n    processItems(others);\n  }\n\n  /**\n   * Loads CMI data from a nested JSON object with recursive traversal.\n   *\n   * This method implements a recursive algorithm for loading nested JSON data into the CMI\n   * object structure. It handles several key aspects:\n   *\n   * 1. Recursive traversal: The method recursively traverses the nested JSON structure,\n   *    building CMI element paths as it goes (e.g., \"cmi.core.student_id\").\n   *\n   * 2. Type-specific handling: Different data types are handled differently:\n   *    - Arrays: Each array element is processed individually with its index in the path\n   *    - Objects: Recursively processed with updated path\n   *    - Primitives: Set directly using setCMIValue\n   *\n   * 3. Initialization check: Ensures the method is only called before API initialization\n   *\n   * 4. Starting data storage: Stores the original JSON data for potential future use\n   *\n   * The algorithm works by:\n   * - First storing the complete JSON object via setStartingData\n   * - Iterating through each property in the JSON object\n   * - For each property, determining its type and handling it accordingly\n   * - Building the CMI element path as it traverses the structure\n   * - Setting values at the appropriate paths using setCMIValue\n   *\n   * @param {{[key: string]: any}} json - The nested JSON object to load\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value at a specific path\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   * @param {Function} setStartingData - Function to store the original JSON data\n   *\n   * @example\n   * // Example of nested JSON input:\n   * // {\n   * //   \"core\": {\n   * //     \"student_id\": \"12345\",\n   * //     \"student_name\": \"John Doe\"\n   * //   },\n   * //   \"objectives\": [\n   * //     { \"id\": \"obj1\", \"score\": { \"raw\": 80 } },\n   * //     { \"id\": \"obj2\", \"score\": { \"raw\": 90 } }\n   * //   ]\n   * // }\n   */\n  loadFromJSON(\n    json: { [key: string]: any },\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    CMIElement = CMIElement !== undefined ? CMIElement : \"cmi\";\n\n    setStartingData(json);\n\n    // could this be refactored down to flatten(json) then setCMIValue on each?\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key) && json[key]) {\n        const currentCMIElement = (CMIElement ? CMIElement + \".\" : \"\") + key;\n        const value = json[key];\n\n        if (value.constructor === Array) {\n          for (let i = 0; i < value.length; i++) {\n            if (value[i]) {\n              const item = value[i];\n              const tempCMIElement = `${currentCMIElement}.${i}`;\n\n              if (item.constructor === Object) {\n                this.loadFromJSON(\n                  item,\n                  tempCMIElement,\n                  setCMIValue,\n                  isNotInitialized,\n                  setStartingData,\n                );\n              } else {\n                setCMIValue(tempCMIElement, item);\n              }\n            }\n          }\n        } else if (value.constructor === Object) {\n          this.loadFromJSON(\n            value,\n            currentCMIElement,\n            setCMIValue,\n            isNotInitialized,\n            setStartingData,\n          );\n        } else {\n          setCMIValue(currentCMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Render the CMI object to JSON for sending to an LMS.\n   *\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {string}\n   */\n  renderCMIToJSONString(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): string {\n    // Do we want/need to return fields that have no set value?\n    if (sendFullCommit) {\n      return JSON.stringify({ cmi });\n    }\n    return JSON.stringify({ cmi }, (k, v) => (v === undefined ? null : v), 2);\n  }\n\n  /**\n   * Returns a JS object representing the current cmi\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {object}\n   */\n  renderCMIToJSONObject(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): StringKeyMap {\n    // Revert to the original implementation to maintain compatibility with tests\n    return JSON.parse(this.renderCMIToJSONString(cmi, sendFullCommit));\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} alwaysSendTotalTime - Whether to always send total time\n   * @param {boolean|Function} renderCommonCommitFields - Whether to render common commit fields\n   * @param {Function} renderCommitObject - Function to render commit object\n   * @param {Function} renderCommitCMI - Function to render commit CMI\n   * @param {LogLevel} apiLogLevel - The API log level\n   * @return {CommitObject|StringKeyMap|Array<any>}\n   */\n  getCommitObject(\n    terminateCommit: boolean,\n    alwaysSendTotalTime: boolean,\n    renderCommonCommitFields: boolean | ((commitObject: CommitObject) => boolean),\n    renderCommitObject: (terminateCommit: boolean, includeTotalTime?: boolean) => CommitObject,\n    renderCommitCMI: (\n      terminateCommit: boolean,\n      includeTotalTime?: boolean,\n    ) => StringKeyMap | Array<any>,\n    apiLogLevel: LogLevel,\n  ): CommitObject | StringKeyMap | Array<any> {\n    // Fix for issue: total time is being calculated incorrectly across multiple sessions\n    // when selfReportSessionTime and alwaysSendTotalTime are enabled.\n    //\n    // Previously, we were using a single variable (shouldTerminateCommit) that combined\n    // both concerns: whether this is a termination commit and whether to include total time.\n    // This caused the total time to be calculated as if every commit was a terminate commit\n    // when alwaysSendTotalTime was true, leading to incorrect time calculations.\n    //\n    // Now we pass the actual terminateCommit value and a separate parameter for whether\n    // to include total time, allowing the rendering functions to handle these concerns separately.\n    const includeTotalTime = alwaysSendTotalTime || terminateCommit;\n\n    const commitObject = renderCommonCommitFields\n      ? renderCommitObject(terminateCommit, includeTotalTime)\n      : renderCommitCMI(terminateCommit, includeTotalTime);\n\n    if ([LogLevelEnum.DEBUG, \"1\", 1, \"DEBUG\"].includes(apiLogLevel)) {\n      console.debug(\"Commit (terminated: \" + (terminateCommit ? \"yes\" : \"no\") + \"): \");\n      console.debug(commitObject);\n    }\n    return commitObject;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ILoggingService } from \"../interfaces/services\";\nimport { defaultLogHandler } from \"../constants/default_settings\";\n\n/**\n * Centralized logging service implemented as a singleton\n * Provides methods for logging at different levels and configuring the log level\n */\nexport class LoggingService implements ILoggingService {\n  private static _instance: LoggingService;\n  private _logLevel: LogLevel = LogLevelEnum.ERROR;\n  private _logHandler: (messageLevel: LogLevel, logMessage: string) => void;\n\n  /**\n   * Private constructor to prevent direct instantiation\n   */\n  private constructor() {\n    // Default log handler uses console methods based on log level\n    this._logHandler = defaultLogHandler;\n  }\n\n  /**\n   * Get the singleton instance of LoggingService\n   *\n   * @returns {LoggingService} The singleton instance\n   */\n  public static getInstance(): LoggingService {\n    if (!LoggingService._instance) {\n      LoggingService._instance = new LoggingService();\n    }\n    return LoggingService._instance;\n  }\n\n  /**\n   * Set the log level\n   *\n   * @param {LogLevel} level - The log level to set\n   */\n  public setLogLevel(level: LogLevel): void {\n    this._logLevel = level;\n  }\n\n  /**\n   * Get the current log level\n   *\n   * @returns {LogLevel} The current log level\n   */\n  public getLogLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  /**\n   * Set a custom log handler\n   *\n   * @param {Function} handler - The function to handle log messages\n   */\n  public setLogHandler(handler: (messageLevel: LogLevel, logMessage: string) => void): void {\n    this._logHandler = handler;\n  }\n\n  /**\n   * Log a message if the message level is greater than or equal to the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @param {string} logMessage - The message to log\n   */\n  public log(messageLevel: LogLevel, logMessage: string): void {\n    if (this.shouldLog(messageLevel)) {\n      this._logHandler(messageLevel, logMessage);\n    }\n  }\n\n  /**\n   * Log a message at ERROR level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public error(logMessage: string): void {\n    this.log(LogLevelEnum.ERROR, logMessage);\n  }\n\n  /**\n   * Log a message at WARN level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public warn(logMessage: string): void {\n    this.log(LogLevelEnum.WARN, logMessage);\n  }\n\n  /**\n   * Log a message at INFO level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public info(logMessage: string): void {\n    this.log(LogLevelEnum.INFO, logMessage);\n  }\n\n  /**\n   * Log a message at DEBUG level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public debug(logMessage: string): void {\n    this.log(LogLevelEnum.DEBUG, logMessage);\n  }\n\n  /**\n   * Determine if a message should be logged based on its level and the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @returns {boolean} Whether the message should be logged\n   */\n  private shouldLog(messageLevel: LogLevel): boolean {\n    // Convert string levels to numbers for comparison\n    const numericMessageLevel = this.getNumericLevel(messageLevel);\n    const numericLogLevel = this.getNumericLevel(this._logLevel);\n\n    return numericMessageLevel >= numericLogLevel;\n  }\n\n  /**\n   * Convert a log level to its numeric value\n   *\n   * @param {LogLevel} level - The log level to convert\n   * @returns {number} The numeric value of the log level\n   */\n  private getNumericLevel(level: LogLevel): number {\n    if (level === undefined) return LogLevelEnum.NONE;\n\n    if (typeof level === \"number\") return level;\n\n    switch (level) {\n      case \"1\":\n      case \"DEBUG\":\n        return LogLevelEnum.DEBUG;\n      case \"2\":\n      case \"INFO\":\n        return LogLevelEnum.INFO;\n      case \"3\":\n      case \"WARN\":\n        return LogLevelEnum.WARN;\n      case \"4\":\n      case \"ERROR\":\n        return LogLevelEnum.ERROR;\n      case \"5\":\n      case \"NONE\":\n        return LogLevelEnum.NONE;\n      default:\n        return LogLevelEnum.ERROR; // Default to ERROR if unknown\n    }\n  }\n}\n\n// Export a function to get the singleton instance\nexport function getLoggingService(): LoggingService {\n  return LoggingService.getInstance();\n}\n","import { LogLevelEnum } from \"../constants/enums\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { ValidationError } from \"../exceptions\";\nimport { IErrorHandlingService, ILoggingService } from \"../interfaces/services\";\nimport { getLoggingService } from \"./LoggingService\";\n\n/**\n * Service for handling SCORM errors\n */\nexport class ErrorHandlingService implements IErrorHandlingService {\n  private _lastErrorCode: string = \"0\";\n  private readonly _errorCodes: ErrorCode;\n  private readonly _apiLog: (\n    functionName: string,\n    message: string,\n    logLevel?: LogLevelEnum,\n    CMIElement?: string,\n  ) => void;\n  private readonly _getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string;\n  private readonly _loggingService: ILoggingService;\n\n  /**\n   * Constructor for ErrorHandlingService\n   *\n   * @param {ErrorCode} errorCodes - The error codes object\n   * @param {Function} apiLog - Function for logging API calls\n   * @param {Function} getLmsErrorMessageDetails - Function for getting error message details\n   * @param {ILoggingService} loggingService - Optional logging service instance\n   */\n  constructor(\n    errorCodes: ErrorCode,\n    apiLog: (\n      functionName: string,\n      message: string,\n      logLevel?: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n    loggingService?: ILoggingService,\n  ) {\n    this._errorCodes = errorCodes;\n    this._apiLog = apiLog;\n    this._getLmsErrorMessageDetails = getLmsErrorMessageDetails;\n    this._loggingService = loggingService || getLoggingService();\n  }\n\n  /**\n   * Get the last error code\n   *\n   * @return {string} - The last error code\n   */\n  get lastErrorCode(): string {\n    return this._lastErrorCode;\n  }\n\n  /**\n   * Set the last error code\n   *\n   * @param {string} errorCode - The error code to set\n   */\n  set lastErrorCode(errorCode: string) {\n    this._lastErrorCode = errorCode;\n  }\n\n  /**\n   * Throws a SCORM error\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The error number\n   * @param {string} message - The error message\n   * @throws {ValidationError} - If throwException is true, throws a ValidationError\n   */\n  throwSCORMError(CMIElement: string, errorNumber: number, message?: string): void {\n    if (!message) {\n      message = this._getLmsErrorMessageDetails(errorNumber, true);\n    }\n\n    // Format a more descriptive error message with context\n    const formattedMessage = `SCORM Error ${errorNumber}: ${message}${CMIElement ? ` [Element: ${CMIElement}]` : \"\"}`;\n\n    // Log using both the API log and the logging service for consistency\n    this._apiLog(\"throwSCORMError\", errorNumber + \": \" + message, LogLevelEnum.ERROR, CMIElement);\n    this._loggingService.error(formattedMessage);\n\n    this._lastErrorCode = String(errorNumber);\n  }\n\n  /**\n   * Clears the last SCORM error code on success.\n   *\n   * @param {string} success - Whether the operation was successful\n   */\n  clearSCORMError(success: string): void {\n    if (success !== undefined && success !== global_constants.SCORM_FALSE) {\n      this._lastErrorCode = \"0\";\n    }\n  }\n\n  /**\n   * Handles exceptions that occur when accessing or setting CMI values.\n   *\n   * This method provides centralized error handling for exceptions that occur during\n   * CMI data operations. It differentiates between different types of errors and\n   * handles them appropriately:\n   *\n   * 1. ValidationError: These are expected errors from the validation system that\n   *    indicate a specific SCORM error condition (like invalid data format or range).\n   *    For these errors, the method:\n   *    - Sets the lastErrorCode to the error code from the ValidationError\n   *    - Returns SCORM_FALSE to indicate failure to the caller\n   *\n   * 2. Standard JavaScript Error: For general JavaScript errors (like TypeError,\n   *    ReferenceError, etc.), the method:\n   *    - Logs the error message with stack trace to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * 3. Unknown exceptions: For any other type of exception that doesn't match the\n   *    above categories, the method:\n   *    - Logs the entire exception object to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * This method is critical for maintaining SCORM compliance by ensuring that\n   * all errors are properly translated into the appropriate SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {ValidationError|Error|unknown} e - The exception that was thrown\n   * @param {string} returnValue - The default return value (typically an empty string)\n   * @return {string} - Either the original returnValue or SCORM_FALSE if an error occurred\n   *\n   * @example\n   * try {\n   *   const value = getCMIValue(\"cmi.core.score.raw\");\n   *   return value;\n   * } catch (e) {\n   *   return handleValueAccessException(e, \"\");\n   * }\n   */\n  handleValueAccessException(\n    CMIElement: string,\n    e: Error | ValidationError | unknown,\n    returnValue: string,\n  ): string {\n    if (e instanceof ValidationError) {\n      const validationError = e as ValidationError;\n      this._lastErrorCode = String(validationError.errorCode);\n\n      // Log validation errors at WARN level with context\n      const errorMessage = `Validation Error ${validationError.errorCode}: ${validationError.message} [Element: ${CMIElement}]`;\n      this._loggingService.warn(errorMessage);\n\n      returnValue = global_constants.SCORM_FALSE;\n    } else if (e instanceof Error) {\n      // For standard JS errors, include the stack trace and error type\n      const errorType = e.constructor.name; // Gets the error type (e.g., TypeError, ReferenceError)\n      const errorMessage = `${errorType}: ${e.message} [Element: ${CMIElement}]`;\n      const stackTrace = e.stack || \"\";\n\n      // Log the detailed error with stack trace\n      this._loggingService.error(`${errorMessage}\\n${stackTrace}`);\n\n      this.throwSCORMError(\n        CMIElement,\n        this._errorCodes.GENERAL as number,\n        `${errorType}: ${e.message}`,\n      );\n    } else {\n      // For unknown errors, provide as much context as possible\n      const errorMessage = `Unknown error occurred while accessing [Element: ${CMIElement}]`;\n\n      this._loggingService.error(errorMessage);\n\n      try {\n        // Try to stringify the error object for more details\n        const errorDetails = JSON.stringify(e);\n        this._loggingService.error(`Error details: ${errorDetails}`);\n      } catch (jsonError) {\n        // If stringify fails, log that we couldn't get more details\n        this._loggingService.error(\"Could not stringify error object for details\");\n      }\n\n      this.throwSCORMError(CMIElement, this._errorCodes.GENERAL as number, \"Unknown error\");\n    }\n    return returnValue;\n  }\n\n  /**\n   * Get the error codes object\n   *\n   * @return {ErrorCode} - The error codes object\n   */\n  get errorCodes(): ErrorCode {\n    return this._errorCodes;\n  }\n}\n\n// Export a factory function to create the service\nexport function createErrorHandlingService(\n  errorCodes: ErrorCode,\n  apiLog: (\n    functionName: string,\n    message: string,\n    logLevel: LogLevelEnum,\n    CMIElement?: string,\n  ) => void,\n  getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n  loggingService?: ILoggingService,\n): ErrorHandlingService {\n  return new ErrorHandlingService(errorCodes, apiLog, getLmsErrorMessageDetails, loggingService);\n}\n","import { CommitObject, InternalSettings, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ErrorCode } from \"../constants/error_codes\";\n\n/**\n * Interface for sync queue item\n */\ninterface SyncQueueItem {\n  id: string;\n  courseId: string;\n  timestamp: number;\n  data: CommitObject;\n  syncAttempts: number;\n}\n\n/**\n * Service for handling offline storage and synchronization of SCORM data\n */\nexport class OfflineStorageService {\n  private settings: InternalSettings;\n  private error_codes: ErrorCode;\n  private storeName: string = \"scorm_again_offline_data\";\n  private syncQueue: string = \"scorm_again_sync_queue\";\n  private isOnline: boolean = navigator.onLine;\n  private syncInProgress: boolean = false;\n\n  /**\n   * Constructor for OfflineStorageService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Function} apiLog - The logging function\n   */\n  constructor(\n    settings: InternalSettings,\n    error_codes: ErrorCode,\n    private apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n\n    // Initialize listeners for online/offline events\n    window.addEventListener(\"online\", this.handleOnlineStatusChange.bind(this));\n    window.addEventListener(\"offline\", this.handleOnlineStatusChange.bind(this));\n  }\n\n  /**\n   * Handle changes in online status\n   */\n  private handleOnlineStatusChange() {\n    const wasOnline = this.isOnline;\n    this.isOnline = navigator.onLine;\n\n    // If we've come back online, trigger sync process\n    if (!wasOnline && this.isOnline) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        \"Device is back online, attempting to sync...\",\n        LogLevelEnum.INFO,\n      );\n      this.syncOfflineData().then(\n        (success) => {\n          if (success) {\n            this.apiLog(\"OfflineStorageService\", \"Sync completed successfully\", LogLevelEnum.INFO);\n          } else {\n            this.apiLog(\"OfflineStorageService\", \"Sync failed\", LogLevelEnum.ERROR);\n          }\n        },\n        (error) => {\n          this.apiLog(\"OfflineStorageService\", `Error during sync: ${error}`, LogLevelEnum.ERROR);\n        },\n      );\n    } else if (wasOnline && !this.isOnline) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        \"Device is offline, data will be stored locally\",\n        LogLevelEnum.INFO,\n      );\n    }\n  }\n\n  /**\n   * Store commit data offline\n   * @param {string} courseId - Identifier for the course\n   * @param {CommitObject} commitData - The data to store offline\n   * @returns {Promise<ResultObject>} - Result of the storage operation\n   */\n  async storeOffline(courseId: string, commitData: CommitObject): Promise<ResultObject> {\n    try {\n      // Store the data in the sync queue with timestamp and unique ID\n      const queueItem: SyncQueueItem = {\n        id: `${courseId}_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`,\n        courseId,\n        timestamp: Date.now(),\n        data: commitData,\n        syncAttempts: 0,\n      };\n\n      // Get current queue\n      const currentQueue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n      currentQueue.push(queueItem);\n\n      // Save updated queue\n      await this.saveToStorage(this.syncQueue, currentQueue);\n\n      // Also update the current state in the main storage (latest known state)\n      await this.saveToStorage(`${this.storeName}_${courseId}`, commitData);\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Stored data offline for course ${courseId}`,\n        LogLevelEnum.INFO,\n      );\n\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error storing offline data: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL ?? 0,\n      };\n    }\n  }\n\n  /**\n   * Get the stored offline data for a course\n   * @param {string} courseId - Identifier for the course\n   * @returns {Promise<CommitObject|null>} - The stored data or null if not found\n   */\n  async getOfflineData(courseId: string): Promise<CommitObject | null> {\n    try {\n      const data = await this.getFromStorage<CommitObject>(`${this.storeName}_${courseId}`);\n      return data || null;\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error retrieving offline data: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return null;\n    }\n  }\n\n  /**\n   * Synchronize offline data with the LMS when connection is available\n   * @returns {Promise<boolean>} - Success status of synchronization\n   */\n  async syncOfflineData(): Promise<boolean> {\n    // Don't run multiple sync processes at once\n    if (this.syncInProgress || !this.isOnline) {\n      return false;\n    }\n\n    this.syncInProgress = true;\n\n    try {\n      // Get the queue of items to sync\n      const syncQueue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n\n      if (syncQueue.length === 0) {\n        this.syncInProgress = false;\n        return true;\n      }\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Found ${syncQueue.length} items to sync`,\n        LogLevelEnum.INFO,\n      );\n\n      // Keep track of successful and failed sync attempts\n      const remainingQueue: SyncQueueItem[] = [];\n\n      // Process each queue item\n      for (const item of syncQueue) {\n        // Skip items that have been attempted too many times\n        if (item.syncAttempts >= 5) {\n          this.apiLog(\n            \"OfflineStorageService\",\n            `Skipping item ${item.id} after 5 failed attempts`,\n            LogLevelEnum.WARN,\n          );\n          continue;\n        }\n\n        try {\n          // Attempt to sync this item\n          const syncResult = await this.sendDataToLMS(item.data);\n\n          if (syncResult.result === global_constants.SCORM_TRUE) {\n            // Sync was successful, no need to keep this item\n            this.apiLog(\n              \"OfflineStorageService\",\n              `Successfully synced item ${item.id}`,\n              LogLevelEnum.INFO,\n            );\n          } else {\n            // Sync failed, increment attempts and keep in queue\n            item.syncAttempts++;\n            remainingQueue.push(item);\n            this.apiLog(\n              \"OfflineStorageService\",\n              `Failed to sync item ${item.id}, attempt #${item.syncAttempts}`,\n              LogLevelEnum.WARN,\n            );\n          }\n        } catch (error) {\n          // On error, increment attempts and keep in queue\n          item.syncAttempts++;\n          remainingQueue.push(item);\n          this.apiLog(\n            \"OfflineStorageService\",\n            `Error syncing item ${item.id}: ${error}`,\n            LogLevelEnum.ERROR,\n          );\n        }\n      }\n\n      // Update the queue with remaining items\n      await this.saveToStorage(this.syncQueue, remainingQueue);\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Sync completed. ${syncQueue.length - remainingQueue.length} items synced, ${remainingQueue.length} items remaining`,\n        LogLevelEnum.INFO,\n      );\n\n      this.syncInProgress = false;\n      return true;\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error during sync process: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      this.syncInProgress = false;\n      return false;\n    }\n  }\n\n  /**\n   * Send data to the LMS when online\n   * @param {CommitObject} data - The data to send to the LMS\n   * @returns {Promise<ResultObject>} - Result of the sync operation\n   */\n  private async sendDataToLMS(data: CommitObject): Promise<ResultObject> {\n    if (!this.settings.lmsCommitUrl) {\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL || 101,\n      };\n    }\n\n    try {\n      // Apply request handler if configured\n      const processedData = this.settings.requestHandler(data);\n\n      // Send the data to the LMS\n      const init = {\n        method: \"POST\",\n        mode: this.settings.fetchMode,\n        body: JSON.stringify(processedData),\n        headers: {\n          ...this.settings.xhrHeaders,\n          \"Content-Type\": this.settings.commitRequestDataType,\n        },\n      } as RequestInit;\n\n      if (this.settings.xhrWithCredentials) {\n        init.credentials = \"include\";\n      }\n\n      const response = await fetch(this.settings.lmsCommitUrl as string, init);\n\n      // Process the response using the configured handler\n      const result =\n        typeof this.settings.responseHandler === \"function\"\n          ? await this.settings.responseHandler(response)\n          : await response.json();\n\n      if (\n        response.status >= 200 &&\n        response.status <= 299 &&\n        (result.result === true || result.result === global_constants.SCORM_TRUE)\n      ) {\n        if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n          result.errorCode = 0;\n        }\n        return result;\n      } else {\n        if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n          result.errorCode = this.error_codes.GENERAL;\n        }\n        return result;\n      }\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error sending data to LMS: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL || 101,\n      };\n    }\n  }\n\n  /**\n   * Check if the device is currently online\n   * @returns {boolean} - Online status\n   */\n  isDeviceOnline(): boolean {\n    return this.isOnline;\n  }\n\n  // noinspection JSValidateJSDoc\n  /**\n   * Get item from localStorage\n   * @param {string} key - The key to retrieve\n   * @returns {Promise<T|null>} - The retrieved data\n   */\n  private async getFromStorage<T>(key: string): Promise<T | null> {\n    const storedData = localStorage.getItem(key);\n    if (storedData) {\n      try {\n        return JSON.parse(storedData) as T;\n      } catch (e) {\n        return null;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Save item to localStorage\n   * @param {string} key - The key to store under\n   * @param {any} data - The data to store\n   * @returns {Promise<void>}\n   */\n  private async saveToStorage(key: string, data: any): Promise<void> {\n    localStorage.setItem(key, JSON.stringify(data));\n  }\n\n  /**\n   * Check if there is pending offline data for a course\n   * @param {string} courseId - Identifier for the course\n   * @returns {Promise<boolean>} - Whether there is pending data\n   */\n  async hasPendingOfflineData(courseId: string): Promise<boolean> {\n    const queue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n    return queue.some((item) => item.courseId === courseId);\n  }\n\n  /**\n   * Update the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: InternalSettings): void {\n    this.settings = settings;\n  }\n}\n","import { ErrorCode } from \"./constants/error_codes\";\nimport { global_constants } from \"./constants/api_constants\";\nimport * as Utilities from \"./utilities\";\nimport { formatMessage, StringKeyMap, stringMatches } from \"./utilities\";\nimport { BaseCMI, BaseRootCMI } from \"./cmi/common/base_cmi\";\nimport {\n  CommitObject,\n  InternalSettings,\n  LogLevel,\n  ResultObject,\n  Settings,\n} from \"./types/api_types\";\nimport { DefaultSettings } from \"./constants/default_settings\";\nimport { IBaseAPI } from \"./interfaces/IBaseAPI\";\nimport { ScheduledCommit } from \"./types/scheduled_commit\";\nimport { LogLevelEnum } from \"./constants/enums\";\nimport { HttpService } from \"./services/HttpService\";\nimport { EventService } from \"./services/EventService\";\nimport { SerializationService } from \"./services/SerializationService\";\nimport { createErrorHandlingService } from \"./services/ErrorHandlingService\";\nimport { getLoggingService } from \"./services/LoggingService\";\nimport { OfflineStorageService } from \"./services/OfflineStorageService\";\nimport {\n  ICMIDataService,\n  IErrorHandlingService,\n  IEventService,\n  IHttpService,\n  ILoggingService,\n  IOfflineStorageService,\n  ISerializationService,\n} from \"./interfaces/services\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { ValidationError } from \"./exceptions\";\n\n/**\n * Base API class for AICC, SCORM 1.2, and SCORM 2004. Should be considered\n * abstract, and never initialized on its own.\n */\nexport default abstract class BaseAPI implements IBaseAPI {\n  private _timeout?: ScheduledCommit | undefined;\n  private readonly _error_codes: ErrorCode;\n  private _settings: InternalSettings = DefaultSettings;\n  private readonly _httpService: IHttpService;\n  private _eventService: IEventService;\n  private _serializationService: ISerializationService;\n  private readonly _errorHandlingService: IErrorHandlingService;\n  private readonly _loggingService: ILoggingService;\n  private readonly _offlineStorageService?: IOfflineStorageService;\n  private _courseId: string = \"\";\n\n  /**\n   * Constructor for Base API class. Sets some shared API fields, as well as\n   * sets up options for the API.\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Settings} settings - Optional settings for the API\n   * @param {IHttpService} httpService - Optional HTTP service instance\n   * @param {IEventService} eventService - Optional Event service instance\n   * @param {ISerializationService} serializationService - Optional Serialization service instance\n   * @param {ICMIDataService} cmiDataService - Optional CMI Data service instance\n   * @param {IErrorHandlingService} errorHandlingService - Optional Error Handling service instance\n   * @param {ILoggingService} loggingService - Optional Logging service instance\n   * @param {IOfflineStorageService} offlineStorageService - Optional Offline Storage service instance\n   */\n  protected constructor(\n    error_codes: ErrorCode,\n    settings?: Settings,\n    httpService?: IHttpService,\n    eventService?: IEventService,\n    serializationService?: ISerializationService,\n    cmiDataService?: ICMIDataService,\n    errorHandlingService?: IErrorHandlingService,\n    loggingService?: ILoggingService,\n    offlineStorageService?: IOfflineStorageService,\n  ) {\n    if (new.target === BaseAPI) {\n      throw new TypeError(\"Cannot construct BaseAPI instances directly\");\n    }\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n\n    this._error_codes = error_codes;\n\n    if (settings) {\n      this.settings = {\n        ...DefaultSettings,\n        ...settings,\n      } as InternalSettings;\n    }\n\n    // Initialize and configure LoggingService\n    this._loggingService = loggingService || getLoggingService();\n    this._loggingService.setLogLevel(this.settings.logLevel);\n\n    // If settings include a custom onLogMessage function, use it as the log handler\n    if (this.settings.onLogMessage) {\n      this._loggingService.setLogHandler(this.settings.onLogMessage);\n    }\n\n    // Initialize HTTP service\n    this._httpService = httpService || new HttpService(this.settings, this._error_codes);\n\n    // Initialize Event service\n    this._eventService =\n      eventService ||\n      new EventService((functionName, message, level, element) =>\n        this.apiLog(functionName, message, level, element),\n      );\n\n    // Initialize Serialization service\n    this._serializationService = serializationService || new SerializationService();\n\n    // Initialize Error Handling service\n    this._errorHandlingService =\n      errorHandlingService ||\n      createErrorHandlingService(\n        this._error_codes,\n        (functionName, message, level, element) =>\n          this.apiLog(functionName, message, level, element),\n        (errorNumber, detail) => this.getLmsErrorMessageDetails(errorNumber, detail),\n      );\n\n    // Initialize Offline Storage service if enabled\n    if (this.settings.enableOfflineSupport) {\n      this._offlineStorageService =\n        offlineStorageService ||\n        new OfflineStorageService(\n          this.settings,\n          this._error_codes,\n          (functionName, message, level, element) =>\n            this.apiLog(functionName, message, level, element),\n        );\n\n      if (this.settings.courseId) {\n        this._courseId = this.settings.courseId;\n      }\n\n      // Check for offline data to restore on initialization\n      if (this._offlineStorageService && this._courseId) {\n        this._offlineStorageService\n          .getOfflineData(this._courseId)\n          .then((offlineData) => {\n            if (offlineData) {\n              this.apiLog(\"constructor\", \"Found offline data to restore\", LogLevelEnum.INFO);\n              // Restore data from offline storage\n              this.loadFromJSON(offlineData.runtimeData);\n            }\n          })\n          .catch((error) => {\n            this.apiLog(\n              \"constructor\",\n              `Error retrieving offline data: ${error}`,\n              LogLevelEnum.ERROR,\n            );\n          });\n      }\n    }\n  }\n\n  public abstract cmi: BaseCMI;\n  public startingData?: StringKeyMap;\n\n  public currentState: number;\n\n  /**\n   * Get the last error code\n   * @return {string}\n   */\n  get lastErrorCode(): string {\n    return this._errorHandlingService?.lastErrorCode ?? \"0\";\n  }\n\n  /**\n   * Set the last error code\n   * @param {string} errorCode\n   */\n  set lastErrorCode(errorCode: string) {\n    if (this._errorHandlingService) {\n      this._errorHandlingService.lastErrorCode = errorCode;\n    }\n  }\n\n  /**\n   * Reset the API to its initial state.\n   * This method clears all current data and resets the API to an uninitialized state.\n   * It can optionally accept new settings to configure the API after reset.\n   *\n   * @param {Settings} settings - Optional new settings to apply after reset\n   */\n  abstract reset(settings?: Settings): void;\n\n  /**\n   * Common reset method for all APIs. New settings are merged with the existing settings.\n   * @param {Settings} settings\n   * @protected\n   */\n  commonReset(settings?: Settings): void {\n    this.apiLog(\"reset\", \"Called\", LogLevelEnum.INFO);\n\n    this.settings = { ...this.settings, ...settings };\n\n    this.clearScheduledCommit();\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n    this.lastErrorCode = \"0\";\n    this._eventService.reset();\n    this.startingData = {};\n\n    // Update offline storage service with new settings if it exists\n    if (this._offlineStorageService) {\n      this._offlineStorageService.updateSettings(this.settings);\n\n      if (settings?.courseId) {\n        this._courseId = settings.courseId;\n      }\n    }\n  }\n\n  /**\n   * Initialize the API\n   * @param {string} callbackName\n   * @param {string} initializeMessage\n   * @param {string} terminationMessage\n   * @return {string}\n   */\n  initialize(\n    callbackName: string,\n    initializeMessage?: string,\n    terminationMessage?: string,\n  ): string {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.isInitialized()) {\n      this.throwSCORMError(\"api\", this._error_codes.INITIALIZED, initializeMessage);\n    } else if (this.isTerminated()) {\n      this.throwSCORMError(\"api\", this._error_codes.TERMINATED, terminationMessage);\n    } else {\n      if (this.settings.selfReportSessionTime) {\n        (this.cmi as BaseRootCMI).setStartTime();\n      }\n\n      this.currentState = global_constants.STATE_INITIALIZED;\n      this.lastErrorCode = \"0\";\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n\n      // If enabled, attempt to sync offline data on initialization\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._courseId &&\n        this.settings.syncOnInitialize &&\n        this._offlineStorageService.isDeviceOnline()\n      ) {\n        this._offlineStorageService.hasPendingOfflineData(this._courseId).then((hasPendingData) => {\n          if (hasPendingData) {\n            this.apiLog(\n              callbackName,\n              \"Syncing pending offline data on initialization\",\n              LogLevelEnum.INFO,\n            );\n            this._offlineStorageService?.syncOfflineData().then((syncSuccess) => {\n              if (syncSuccess) {\n                this.apiLog(callbackName, \"Successfully synced offline data\", LogLevelEnum.INFO);\n                this.processListeners(\"OfflineDataSynced\");\n              }\n            });\n          }\n        });\n      }\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Initialize the LMS API\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsInitialize(): string;\n\n  /**\n   * Finish the current LMS API session\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsFinish(): string;\n\n  /**\n   * Get the value of a CMI element from the LMS\n   * @param {string} CMIElement - The CMI element to get the value of\n   * @return {string} The value of the CMI element\n   */\n  abstract lmsGetValue(CMIElement: string): string;\n\n  /**\n   * Set the value of a CMI element in the LMS\n   * @param {string} CMIElement - The CMI element to set the value of\n   * @param {any} value - The value to set\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsSetValue(CMIElement: string, value: any): string;\n\n  /**\n   * Commit the current data to the LMS\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsCommit(): string;\n\n  /**\n   * Get the last error code from the LMS\n   * @return {string} The last error code\n   */\n  abstract lmsGetLastError(): string;\n\n  /**\n   * Get the error string for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get the string for\n   * @return {string} The error string\n   */\n  abstract lmsGetErrorString(CMIErrorCode: string | number): string;\n\n  /**\n   * Get diagnostic information for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get diagnostic information for\n   * @return {string} The diagnostic information\n   */\n  abstract lmsGetDiagnostic(CMIErrorCode: string | number): string;\n\n  /**\n   * Abstract method for validating that a response is correct.\n   * This method is used to validate the format and content of a response\n   * before it is set in the CMI data model.\n   *\n   * @param {string} _CMIElement - The CMI element path to validate\n   * @param {any} _value - The value to validate\n   * @throws {Error} If the response format is invalid\n   */\n  abstract validateCorrectResponse(_CMIElement: string, _value: any): void;\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   * APIs that inherit BaseAPI should override this method.\n   *\n   * @param {string} _CMIElement - unused\n   * @param {*} _value - unused\n   * @param {boolean} _foundFirstIndex - unused\n   * @return {BaseCMI|null}\n   * @abstract\n   */\n  abstract getChildElement(\n    _CMIElement: string,\n    _value: any,\n    _foundFirstIndex: boolean,\n  ): BaseCMI | null;\n\n  /**\n   * Attempts to store the data to the LMS, logs data if no LMS configured\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _calculateTotalTime\n   * @return {ResultObject}\n   * @abstract\n   */\n  abstract storeData(_calculateTotalTime: boolean): Promise<ResultObject>;\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   *\n   * @param {boolean} _terminateCommit - Whether this commit is part of the termination process\n   * @param {boolean} [_includeTotalTime] - Whether to include total time in the commit data\n   * @return {StringKeyMap|Array}\n   * @abstract\n   */\n  abstract renderCommitCMI(\n    _terminateCommit: boolean,\n    _includeTotalTime?: boolean,\n  ): StringKeyMap | Array<string>;\n\n  /**\n   * Render the commit object to the shortened format for LMS commit.\n   * This method transforms the CMI data into a format suitable for sending to the LMS.\n   * It is called during the commit process to prepare the data for transmission.\n   *\n   * @param {boolean} _terminateCommit - Whether this commit is part of the termination process\n   * @param {boolean} [_includeTotalTime] - Whether to include total time in the commit data\n   * @return {CommitObject} A formatted object containing the data to be sent to the LMS\n   * @example\n   * // Example of a commit object structure\n   * {\n   *   method: \"POST\",\n   *   params: {\n   *     cmi: { ... },\n   *     finishState: \"COMPLETED\"\n   *   }\n   * }\n   */\n  abstract renderCommitObject(_terminateCommit: boolean, _includeTotalTime?: boolean): CommitObject;\n\n  /**\n   * Logging for all SCORM actions\n   *\n   * @param {string} functionName\n   * @param {string} logMessage\n   * @param {number} messageLevel\n   * @param {string} CMIElement\n   */\n  apiLog(functionName: string, logMessage: string, messageLevel: LogLevel, CMIElement?: string) {\n    logMessage = formatMessage(functionName, logMessage, CMIElement);\n\n    // Delegate to LoggingService which handles log level comparison properly\n    this._loggingService.log(messageLevel, logMessage);\n  }\n\n  /**\n   * Getter for _settings\n   * @return {InternalSettings}\n   */\n  get settings(): InternalSettings {\n    return this._settings;\n  }\n\n  /**\n   * Setter for _settings\n   * @param {Settings} settings\n   */\n  set settings(settings: Settings) {\n    const previousSettings = this._settings;\n    // Merge the incoming settings with the existing settings\n    this._settings = { ...this._settings, ...settings } as InternalSettings;\n\n    // Update HTTP service settings\n    this._httpService?.updateSettings(this._settings);\n\n    // The following properties are duplicated as class properties for easier access\n    // and need to be manually updated to stay in sync with the settings object\n\n    // Update log level if it changed\n    if (settings.logLevel !== undefined && settings.logLevel !== previousSettings.logLevel) {\n      this._loggingService?.setLogLevel(settings.logLevel);\n    }\n\n    // Update log handler if onLogMessage changed\n    if (\n      settings.onLogMessage !== undefined &&\n      settings.onLogMessage !== previousSettings.onLogMessage\n    ) {\n      this._loggingService?.setLogHandler(settings.onLogMessage);\n    }\n  }\n\n  /**\n   * Terminates the current run of the API\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async terminate(callbackName: string, checkTerminated: boolean): Promise<string> {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.TERMINATION_BEFORE_INIT ?? 0,\n        this._error_codes.MULTIPLE_TERMINATION ?? 0,\n      )\n    ) {\n      this.currentState = global_constants.STATE_TERMINATED;\n      // If enabled, attempt to sync offline data before termination\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._courseId &&\n        this.settings.syncOnTerminate &&\n        this._offlineStorageService.isDeviceOnline()\n      ) {\n        const hasPendingData = await this._offlineStorageService.hasPendingOfflineData(\n          this._courseId,\n        );\n        if (hasPendingData) {\n          this.apiLog(\n            callbackName,\n            \"Syncing pending offline data before termination\",\n            LogLevelEnum.INFO,\n          );\n          await this._offlineStorageService.syncOfflineData();\n        }\n      }\n\n      const result: ResultObject = await this.storeData(true);\n      if ((result.errorCode ?? 0) > 0) {\n        // Log detailed error information before throwing SCORM error\n        if (result.errorMessage) {\n          this.apiLog(\n            \"terminate\",\n            `Terminate failed with error: ${result.errorMessage}`,\n            LogLevelEnum.ERROR,\n          );\n        }\n        if (result.errorDetails) {\n          this.apiLog(\n            \"terminate\",\n            `Error details: ${JSON.stringify(result.errorDetails)}`,\n            LogLevelEnum.DEBUG,\n          );\n        }\n        this.throwSCORMError(\"api\", result.errorCode ?? 0);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Get the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  getValue(callbackName: string, checkTerminated: boolean, CMIElement: string): string {\n    let returnValue: string = \"\";\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.RETRIEVE_BEFORE_INIT ?? 0,\n        this._error_codes.RETRIEVE_AFTER_TERM ?? 0,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.getCMIValue(CMIElement);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement);\n    }\n\n    this.apiLog(callbackName, \": returned: \" + returnValue, LogLevelEnum.INFO, CMIElement);\n\n    if (returnValue === undefined) {\n      return \"\";\n    }\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Sets the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {string} commitCallback\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  setValue(\n    callbackName: string,\n    commitCallback: string,\n    checkTerminated: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (value !== undefined) {\n      value = String(value);\n    }\n    let returnValue: string = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.STORE_BEFORE_INIT ?? 0,\n        this._error_codes.STORE_AFTER_TERM ?? 0,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.setCMIValue(CMIElement, value);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement, value);\n    }\n\n    if (returnValue === undefined) {\n      returnValue = global_constants.SCORM_FALSE;\n    }\n\n    // If we didn't have any errors while setting the data, go ahead and\n    // schedule a commit, if autocommit is turned on\n    if (String(this.lastErrorCode) === \"0\") {\n      if (this.settings.autocommit) {\n        this.scheduleCommit(this.settings.autocommitSeconds * 1000, commitCallback);\n      }\n    }\n\n    this.apiLog(\n      callbackName,\n      \": \" + value + \": result: \" + returnValue,\n      LogLevelEnum.INFO,\n      CMIElement,\n    );\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async commit(callbackName: string, checkTerminated: boolean = false): Promise<string> {\n    this.clearScheduledCommit();\n\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.COMMIT_BEFORE_INIT ?? 0,\n        this._error_codes.COMMIT_AFTER_TERM ?? 0,\n      )\n    ) {\n      const result = await this.storeData(false);\n      if ((result.errorCode ?? 0) > 0) {\n        // Log detailed error information before throwing SCORM error\n        if (result.errorMessage) {\n          this.apiLog(\n            \"commit\",\n            `Commit failed with error: ${result.errorMessage}`,\n            LogLevelEnum.ERROR,\n          );\n        }\n        if (result.errorDetails) {\n          this.apiLog(\n            \"commit\",\n            `Error details: ${JSON.stringify(result.errorDetails)}`,\n            LogLevelEnum.DEBUG,\n          );\n        }\n        this.throwSCORMError(\"api\", result.errorCode);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      this.apiLog(callbackName, \" Result: \" + returnValue, LogLevelEnum.DEBUG, \"HttpRequest\");\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      this.processListeners(callbackName);\n\n      // If online and there is offline data pending, attempt to sync it\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._offlineStorageService.isDeviceOnline() &&\n        this._courseId\n      ) {\n        this._offlineStorageService.hasPendingOfflineData(this._courseId).then((hasPendingData) => {\n          if (hasPendingData) {\n            this.apiLog(callbackName, \"Syncing pending offline data\", LogLevelEnum.INFO);\n            this._offlineStorageService?.syncOfflineData().then((syncSuccess) => {\n              if (syncSuccess) {\n                this.apiLog(callbackName, \"Successfully synced offline data\", LogLevelEnum.INFO);\n                this.processListeners(\"OfflineDataSynced\");\n              } else {\n                this.apiLog(callbackName, \"Failed to sync some offline data\", LogLevelEnum.WARN);\n              }\n            });\n          }\n        });\n      }\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Returns last error code\n   * @param {string} callbackName\n   * @return {string}\n   */\n  getLastError(callbackName: string): string {\n    const returnValue = String(this.lastErrorCode);\n\n    this.processListeners(callbackName);\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getErrorString(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getDiagnostic(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode, true);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Checks the LMS state and ensures it has been initialized.\n   *\n   * @param {boolean} checkTerminated\n   * @param {number} beforeInitError\n   * @param {number} afterTermError\n   * @return {boolean}\n   */\n  checkState(checkTerminated: boolean, beforeInitError: number, afterTermError: number): boolean {\n    if (this.isNotInitialized()) {\n      this.throwSCORMError(\"api\", beforeInitError);\n      return false;\n    } else if (checkTerminated && this.isTerminated()) {\n      this.throwSCORMError(\"api\", afterTermError);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {(string|number)} _errorNumber\n   * @param {boolean} _detail\n   * @return {string}\n   * @abstract\n   */\n  getLmsErrorMessageDetails(_errorNumber: string | number, _detail: boolean = false): string {\n    throw new Error(\"The getLmsErrorMessageDetails method has not been implemented\");\n  }\n\n  /**\n   * Gets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @return {string}\n   * @abstract\n   */\n  getCMIValue(_CMIElement: string): string {\n    throw new Error(\"The getCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Sets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @param {any} _value\n   * @return {string}\n   * @abstract\n   */\n  setCMIValue(_CMIElement: string, _value: any): string {\n    throw new Error(\"The setCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Shared API method to set a valid for a given element.\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  _commonSetCMIValue(\n    methodName: string,\n    scorm2004: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (!CMIElement || CMIElement === \"\") {\n      return global_constants.SCORM_FALSE;\n    }\n\n    this.lastErrorCode = \"0\";\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap | BaseCMI = this as StringKeyMap;\n    let returnValue = global_constants.SCORM_FALSE;\n    let foundFirstIndex = false;\n\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      const attribute = structure[idx];\n\n      if (idx === structure.length - 1) {\n        if (scorm2004 && attribute && attribute.substring(0, 8) === \"{target=\") {\n          if (this.isInitialized()) {\n            this.throwSCORMError(CMIElement, this._error_codes.READ_ONLY_ELEMENT);\n            break;\n          } else {\n            refObject = {\n              ...refObject,\n              attribute: value,\n            };\n          }\n        } else if (\n          typeof attribute === \"undefined\" ||\n          !this._checkObjectHasProperty(refObject as StringKeyMap, attribute)\n        ) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        } else {\n          if (\n            stringMatches(CMIElement, \"\\\\.correct_responses\\\\.\\\\d+$\") &&\n            this.isInitialized() &&\n            attribute !== \"pattern\"\n          ) {\n            this.validateCorrectResponse(CMIElement, value);\n            if (this.lastErrorCode !== \"0\") {\n              this.throwSCORMError(CMIElement, this._error_codes.TYPE_MISMATCH);\n              break;\n            }\n          }\n\n          if (!scorm2004 || this._errorHandlingService.lastErrorCode === \"0\") {\n            if (\n              typeof attribute === \"undefined\" ||\n              attribute === \"__proto__\" ||\n              attribute === \"constructor\"\n            ) {\n              this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n              break;\n            }\n            (refObject as StringKeyMap)[attribute] = value;\n            returnValue = global_constants.SCORM_TRUE;\n          }\n        }\n      } else {\n        if (\n          typeof attribute === \"undefined\" ||\n          !this._checkObjectHasProperty(refObject as StringKeyMap, attribute)\n        ) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n        refObject = (refObject as StringKeyMap)[attribute] as StringKeyMap;\n        if (!refObject) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n\n        if (refObject instanceof CMIArray) {\n          const index = parseInt(structure[idx + 1] || \"0\", 10);\n\n          // SCO is trying to set an item on an array\n          if (!isNaN(index)) {\n            const item = refObject.childArray[index];\n\n            if (item) {\n              refObject = item;\n              foundFirstIndex = true;\n            } else {\n              const newChild = this.getChildElement(CMIElement, value, foundFirstIndex);\n              foundFirstIndex = true;\n\n              if (!newChild) {\n                if (this.lastErrorCode === \"0\") {\n                  this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n                }\n                break;\n              } else {\n                if (refObject.initialized) newChild.initialize();\n                refObject.childArray[index] = newChild;\n                refObject = newChild;\n              }\n            }\n\n            // Have to update idx value to skip the array position\n            idx++;\n          }\n        }\n      }\n    }\n\n    if (returnValue === global_constants.SCORM_FALSE) {\n      this.apiLog(\n        methodName,\n        `There was an error setting the value for: ${CMIElement}, value of: ${value}`,\n        LogLevelEnum.WARN,\n      );\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @return {any}\n   */\n  _commonGetCMIValue(methodName: string, scorm2004: boolean, CMIElement: string): any {\n    if (!CMIElement || CMIElement === \"\") {\n      return \"\";\n    }\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap = this as StringKeyMap;\n    let attribute = null;\n\n    const uninitializedErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) has not been initialized.`;\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      attribute = structure[idx];\n\n      if (!scorm2004) {\n        if (idx === structure.length - 1) {\n          if (\n            typeof attribute === \"undefined\" ||\n            !this._checkObjectHasProperty(refObject, attribute)\n          ) {\n            this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n            return;\n          }\n        }\n      } else {\n        if (\n          String(attribute).substring(0, 8) === \"{target=\" &&\n          typeof refObject._isTargetValid == \"function\"\n        ) {\n          const target = String(attribute).substring(8, String(attribute).length - 9);\n          return refObject._isTargetValid(target);\n        } else if (\n          typeof attribute === \"undefined\" ||\n          !this._checkObjectHasProperty(refObject, attribute)\n        ) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          return;\n        }\n      }\n\n      if (attribute !== undefined && attribute !== null) {\n        refObject = refObject[attribute] as StringKeyMap;\n        if (refObject === undefined) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n      } else {\n        this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n        break;\n      }\n\n      if (refObject instanceof CMIArray) {\n        const index = parseInt(structure[idx + 1] || \"\", 10);\n\n        // SCO is trying to set an item on an array\n        if (!isNaN(index)) {\n          const item = refObject.childArray[index];\n\n          if (item) {\n            refObject = item;\n          } else {\n            this.throwSCORMError(\n              CMIElement,\n              this._error_codes.VALUE_NOT_INITIALIZED,\n              uninitializedErrorMessage,\n            );\n            break;\n          }\n\n          // Have to update idx value to skip the array position\n          idx++;\n        }\n      }\n    }\n\n    if (refObject === null || refObject === undefined) {\n      if (!scorm2004) {\n        if (attribute === \"_children\") {\n          this.throwSCORMError(CMIElement, this._error_codes.CHILDREN_ERROR, undefined);\n        } else if (attribute === \"_count\") {\n          this.throwSCORMError(CMIElement, this._error_codes.COUNT_ERROR, undefined);\n        }\n      }\n    } else {\n      return refObject;\n    }\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isInitialized(): boolean {\n    return this.currentState === global_constants.STATE_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_NOT_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isNotInitialized(): boolean {\n    return this.currentState === global_constants.STATE_NOT_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_TERMINATED\n   *\n   * @return {boolean}\n   */\n  isTerminated(): boolean {\n    return this.currentState === global_constants.STATE_TERMINATED;\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event.\n   * This method allows you to register a callback function that will be executed\n   * when the specified event occurs.\n   *\n   * @param {string} listenerName - The name of the event to listen for (e.g., \"Initialize\", \"Terminate\", \"GetValue\", \"SetValue\", \"Commit\")\n   * @param {function} callback - The function to execute when the event occurs. The callback will receive relevant event data.\n   * @example\n   * // Listen for Initialize events\n   * api.on(\"Initialize\", function() {\n   *   console.log(\"API has been initialized\");\n   * });\n   *\n   * // Listen for SetValue events\n   * api.on(\"SetValue\", function(element, value) {\n   *   console.log(\"Setting \" + element + \" to \" + value);\n   * });\n   */\n  on(listenerName: string, callback: Function) {\n    this._eventService.on(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener.\n   * This method removes a previously registered callback for an event.\n   * Both the event name and the callback reference must match what was used in the 'on' method.\n   *\n   * @param {string} listenerName - The name of the event to stop listening for\n   * @param {function} callback - The callback function to remove\n   * @example\n   * // Remove a specific listener\n   * const myCallback = function() { console.log(\"API initialized\"); };\n   * api.on(\"Initialize\", myCallback);\n   * // Later, when you want to remove it:\n   * api.off(\"Initialize\", myCallback);\n   */\n  off(listenerName: string, callback: Function) {\n    this._eventService.off(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event.\n   * This method removes all callbacks registered for the specified event.\n   *\n   * @param {string} listenerName - The name of the event to clear all listeners for\n   * @example\n   * // Remove all listeners for the Initialize event\n   * api.clear(\"Initialize\");\n   */\n  clear(listenerName: string) {\n    this._eventService.clear(listenerName);\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created for a specific event.\n   * This method is called internally when SCORM events occur to notify all registered listeners.\n   * It triggers all callback functions registered for the specified event.\n   *\n   * @param {string} functionName - The name of the function/event that occurred\n   * @param {string} CMIElement - Optional CMI element involved in the event\n   * @param {any} value - Optional value associated with the event\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this._eventService.processListeners(functionName, CMIElement, value);\n  }\n\n  /**\n   * Throws a SCORM error with the specified error number and optional message.\n   * This method sets the last error code and can be used to indicate that an operation failed.\n   * The error number should correspond to one of the standard SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The SCORM error code to set\n   * @param {string} message - Optional custom error message to provide additional context\n   * @example\n   * // Throw a \"not initialized\" error\n   * this.throwSCORMError(301, \"The API must be initialized before calling GetValue\");\n   */\n  throwSCORMError(\n    CMIElement: string | undefined,\n    errorNumber: number | undefined,\n    message?: string,\n  ) {\n    this._errorHandlingService.throwSCORMError(CMIElement, errorNumber ?? 0, message);\n  }\n\n  /**\n   * Clears the last SCORM error code when an operation succeeds.\n   * This method is typically called after successful API operations to reset the error state.\n   * It only clears the error if the success parameter is \"true\".\n   *\n   * @param {string} success - A string indicating whether the operation succeeded (\"true\" or \"false\")\n   * @example\n   * // Clear error after successful operation\n   * this.clearSCORMError(\"true\");\n   */\n  clearSCORMError(success: string) {\n    this._errorHandlingService.clearSCORMError(success);\n  }\n\n  /**\n   * Load the CMI from a flattened JSON object.\n   * This method populates the CMI data model from a flattened JSON structure\n   * where keys represent CMI element paths (e.g., \"cmi.core.student_id\").\n   *\n   * @param {StringKeyMap} json - The flattened JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a flattened JSON structure\n   * api.loadFromFlattenedJSON({\n   *   \"cmi.core.student_id\": \"12345\",\n   *   \"cmi.core.student_name\": \"John Doe\",\n   *   \"cmi.core.lesson_status\": \"incomplete\"\n   * });\n   */\n  loadFromFlattenedJSON(json: StringKeyMap, CMIElement?: string) {\n    if (!CMIElement) {\n      // by default, we start from a blank string because we're expecting each element to start with `cmi`\n      CMIElement = \"\";\n    }\n\n    this._serializationService.loadFromFlattenedJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Returns a flattened JSON object representing the current CMI data.\n   */\n  getFlattenedCMI(): StringKeyMap {\n    return Utilities.flatten(this.renderCMIToJSONObject());\n  }\n\n  /**\n   * Loads CMI data from a hierarchical JSON object.\n   * This method populates the CMI data model from a nested JSON structure\n   * that mirrors the CMI object hierarchy.\n   *\n   * @param {StringKeyMap} json - The hierarchical JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a hierarchical JSON structure\n   * api.loadFromJSON({\n   *   core: {\n   *     student_id: \"12345\",\n   *     student_name: \"John Doe\",\n   *     lesson_status: \"incomplete\"\n   *   },\n   *   objectives: [\n   *     { id: \"obj1\", score: { raw: 85 } }\n   *   ]\n   * });\n   */\n  loadFromJSON(json: StringKeyMap, CMIElement: string = \"\") {\n    if (\n      (!CMIElement || CMIElement === \"\") &&\n      !Object.hasOwnProperty.call(json, \"cmi\") &&\n      !Object.hasOwnProperty.call(json, \"adl\")\n    ) {\n      // providing a backward compatibility for the old v1 API\n      CMIElement = \"cmi\";\n    }\n    this._serializationService.loadFromJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Render the CMI object to a JSON string for sending to an LMS.\n   * This method serializes the current CMI data model to a JSON string.\n   * The output format is controlled by the sendFullCommit setting.\n   *\n   * @return {string} A JSON string representation of the CMI data\n   * @example\n   * // Get the current CMI data as a JSON string\n   * const jsonString = api.renderCMIToJSONString();\n   * console.log(jsonString); // '{\"core\":{\"student_id\":\"12345\",...}}'\n   */\n  renderCMIToJSONString(): string {\n    return this._serializationService.renderCMIToJSONString(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Returns a JavaScript object representing the current CMI data.\n   * This method creates a plain JavaScript object that mirrors the\n   * structure of the CMI data model, suitable for further processing.\n   *\n   * @return {StringKeyMap} A JavaScript object representing the CMI data\n   * @example\n   * // Get the current CMI data as a JavaScript object\n   * const cmiObject = api.renderCMIToJSONObject();\n   * console.log(cmiObject.core.student_id); // \"12345\"\n   */\n  renderCMIToJSONObject(): StringKeyMap {\n    return this._serializationService.renderCMIToJSONObject(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Process an HTTP request\n   *\n   * @param {string} url - The URL to send the request to\n   * @param {CommitObject | StringKeyMap | Array<any>} params - The parameters to send\n   * @param {boolean} immediate - Whether to send the request immediately without waiting\n   * @returns {Promise<ResultObject>} - The result of the request\n   * @async\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n  ): Promise<ResultObject> {\n    // If offline support is enabled and device is offline, store data locally instead of sending\n    if (\n      this.settings.enableOfflineSupport &&\n      this._offlineStorageService &&\n      !this._offlineStorageService.isDeviceOnline() &&\n      this._courseId\n    ) {\n      this.apiLog(\n        \"processHttpRequest\",\n        \"Device is offline, storing data locally\",\n        LogLevelEnum.INFO,\n      );\n\n      if (params && typeof params === \"object\" && \"cmi\" in params) {\n        return await this._offlineStorageService.storeOffline(\n          this._courseId,\n          params as CommitObject,\n        );\n      } else {\n        this.apiLog(\n          \"processHttpRequest\",\n          \"Invalid commit data format for offline storage\",\n          LogLevelEnum.ERROR,\n        );\n        return {\n          result: global_constants.SCORM_FALSE,\n          errorCode: this._error_codes.GENERAL ?? 101, // Fallback to a default error code if GENERAL is undefined\n        };\n      }\n    }\n\n    // Otherwise, proceed with normal HTTP request\n    return await this._httpService.processHttpRequest(\n      url,\n      params,\n      immediate,\n      (functionName, message, level, element) => this.apiLog(functionName, message, level, element),\n      (functionName, CMIElement, value) => this.processListeners(functionName, CMIElement, value),\n    );\n  }\n\n  /**\n   * Schedules a commit operation to occur after a specified delay.\n   * This method is used to implement auto-commit functionality, where data\n   * is periodically sent to the LMS without requiring explicit commit calls.\n   *\n   * @param {number} when - The number of milliseconds to wait before committing\n   * @param {string} callback - The name of the commit event callback\n   * @example\n   * // Schedule a commit to happen in 60 seconds\n   * api.scheduleCommit(60000, \"commit\");\n   */\n  scheduleCommit(when: number, callback: string) {\n    if (!this._timeout) {\n      this._timeout = new ScheduledCommit(this, when, callback);\n      this.apiLog(\"scheduleCommit\", \"scheduled\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Clears and cancels any currently scheduled commits.\n   * This method is typically called when an explicit commit is performed\n   * or when the API is terminated, to prevent redundant commits.\n   *\n   * @example\n   * // Cancel any pending scheduled commits\n   * api.clearScheduledCommit();\n   */\n  clearScheduledCommit() {\n    if (this._timeout) {\n      this._timeout.cancel();\n      this._timeout = undefined;\n      this.apiLog(\"clearScheduledCommit\", \"cleared\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Checks if an object has a specific property, using multiple detection methods.\n   * This method performs a thorough check for property existence by:\n   * 1. Checking if it's an own property using Object.hasOwnProperty\n   * 2. Checking if it's defined in the prototype with a property descriptor\n   * 3. Checking if it's accessible via the 'in' operator (includes inherited properties)\n   *\n   * @param {StringKeyMap} StringKeyMap - The object to check for the property\n   * @param {string} attribute - The property name to look for\n   * @return {boolean} True if the property exists on the object or its prototype chain\n   * @private\n   *\n   * @example\n   * // Check for an own property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"name\"); // Returns true\n   *\n   * @example\n   * // Check for an inherited property\n   * class Parent { get type() { return \"parent\"; } }\n   * const child = Object.create(new Parent());\n   * this._checkObjectHasProperty(child, \"type\"); // Returns true\n   *\n   * @example\n   * // Check for a non-existent property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"age\"); // Returns false\n   */\n  private _checkObjectHasProperty(StringKeyMap: StringKeyMap, attribute: string): boolean {\n    return (\n      Object.hasOwnProperty.call(StringKeyMap, attribute) ||\n      Object.getOwnPropertyDescriptor(Object.getPrototypeOf(StringKeyMap), attribute) != null ||\n      attribute in StringKeyMap\n    );\n  }\n\n  /**\n   * Handles exceptions that occur when accessing CMI values.\n   * This method delegates to the ErrorHandlingService to process exceptions\n   * that occur during CMI data operations, ensuring consistent error handling\n   * throughout the API.\n   *\n   * @param {string} CMIElement\n   * @param {any} e - The exception that was thrown\n   * @param {string} returnValue - The default return value to use if an error occurs\n   * @return {string} Either the original returnValue or SCORM_FALSE if an error occurred\n   * @private\n   *\n   * @example\n   * // Handle a validation error when getting a CMI value\n   * try {\n   *   return this.getCMIValue(\"cmi.core.score.raw\");\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"\");\n   * }\n   *\n   * @example\n   * // Handle a general error when setting a CMI value\n   * try {\n   *   this.setCMIValue(\"cmi.core.lesson_status\", \"completed\");\n   *   return \"true\";\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"false\");\n   * }\n   */\n  private handleValueAccessException(CMIElement: string, e: any, returnValue: string): string {\n    if (e instanceof ValidationError) {\n      this.lastErrorCode = String(e.errorCode);\n      returnValue = global_constants.SCORM_FALSE;\n      this.throwSCORMError(CMIElement, e.errorCode, e.errorMessage);\n    } else {\n      if (e instanceof Error && e.message) {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, e.message);\n      } else {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, \"Unknown error\");\n      }\n    }\n    return returnValue;\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS.\n   * This method delegates to the SerializationService to create a properly\n   * formatted object containing the CMI data that needs to be sent to the LMS.\n   * The format and content of the commit object depend on whether this is a\n   * regular commit or a termination commit.\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @return {CommitObject|StringKeyMap|Array} The formatted commit object\n   * @protected\n   *\n   * @example\n   * // Create a regular commit object\n   * const regularCommit = this.getCommitObject(false);\n   * // Result might be: { cmi: { core: { lesson_status: \"incomplete\" } } }\n   *\n   * @example\n   * // Create a termination commit object (includes total_time)\n   * const terminationCommit = this.getCommitObject(true);\n   * // Result might be: { cmi: { core: { lesson_status: \"completed\", total_time: \"PT1H30M\" } } }\n   */\n  protected getCommitObject(terminateCommit: boolean): CommitObject | StringKeyMap | Array<any> {\n    return this._serializationService.getCommitObject(\n      terminateCommit,\n      this.settings.alwaysSendTotalTime,\n      this.settings.renderCommonCommitFields,\n      (terminateCommit: boolean, includeTotalTime?: boolean) =>\n        this.renderCommitObject(terminateCommit, includeTotalTime),\n      (terminateCommit: boolean, includeTotalTime?: boolean) =>\n        this.renderCommitCMI(terminateCommit, includeTotalTime),\n      this.settings.logLevel,\n    );\n  }\n}\n","import { CMI } from \"./cmi/scorm12/cmi\";\nimport * as Utilities from \"./utilities\";\nimport { StringKeyMap, stringMatches } from \"./utilities\";\nimport { global_constants, scorm12_constants } from \"./constants/api_constants\";\nimport { scorm12_errors } from \"./constants/error_codes\";\n\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport { CMIObjectivesObject } from \"./cmi/scorm12/objectives\";\nimport {\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n} from \"./cmi/scorm12/interactions\";\nimport { NAV } from \"./cmi/scorm12/nav\";\nimport { CommitObject, ResultObject, ScoreObject, Settings } from \"./types/api_types\";\nimport { CompletionStatus, SuccessStatus } from \"./constants/enums\";\nimport BaseAPI from \"./BaseAPI\";\nimport { scorm12_regex } from \"./constants/regex\";\n\n/**\n * API class for SCORM 1.2\n */\nclass Scorm12API extends BaseAPI {\n  /**\n   * Constructor for SCORM 1.2 API\n   * @param {object} settings\n   */\n  constructor(settings?: Settings) {\n    if (settings) {\n      if (settings.mastery_override === undefined) {\n        settings.mastery_override = false;\n      }\n    }\n\n    super(scorm12_errors, settings);\n\n    this.cmi = new CMI();\n    this.nav = new NAV();\n\n    // Rename functions to match 1.2 Spec and expose to modules\n    this.LMSInitialize = this.lmsInitialize;\n    this.LMSFinish = this.lmsFinish;\n    this.LMSGetValue = this.lmsGetValue;\n    this.LMSSetValue = this.lmsSetValue;\n    this.LMSCommit = this.lmsCommit;\n    this.LMSGetLastError = this.lmsGetLastError;\n    this.LMSGetErrorString = this.lmsGetErrorString;\n    this.LMSGetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  public statusSetByModule = false;\n\n  cmi: CMI;\n  nav: NAV;\n\n  LMSInitialize: () => string;\n  LMSFinish: () => string;\n  LMSGetValue: (CMIElement: string) => string;\n  LMSSetValue: (CMIElement: string, value: any) => string;\n  LMSCommit: () => string;\n  LMSGetLastError: () => string;\n  LMSGetErrorString: (CMIErrorCode: string) => string;\n  LMSGetDiagnostic: (CMIErrorCode: string) => string;\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset(settings?: Settings) {\n    this.commonReset(settings);\n\n    this.cmi?.reset();\n    this.nav?.reset();\n  }\n\n  /**\n   * lmsInitialize function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize(): string {\n    this.cmi.initialize();\n    if (this.cmi.core.lesson_status) {\n      this.statusSetByModule = true;\n    } else {\n      this.cmi.core.lesson_status = \"not attempted\";\n    }\n    return this.initialize(\n      \"LMSInitialize\",\n      \"LMS was already initialized!\",\n      \"LMS is already finished!\",\n    );\n  }\n\n  /**\n   * LMSFinish function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish(): string {\n    (async () => {\n      await this.internalFinish();\n    })();\n    return global_constants.SCORM_TRUE;\n  }\n\n  async internalFinish(): Promise<string> {\n    const result = await this.terminate(\"LMSFinish\", true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      if (this.nav.event !== \"\") {\n        if (this.nav.event === \"continue\") {\n          this.processListeners(\"SequenceNext\");\n        } else {\n          this.processListeners(\"SequencePrevious\");\n        }\n      } else if (this.settings.autoProgress) {\n        this.processListeners(\"SequenceNext\");\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * LMSGetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement: string): string {\n    return this.getValue(\"LMSGetValue\", false, CMIElement);\n  }\n\n  /**\n   * LMSSetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement: string, value: any): string {\n    if (CMIElement === \"cmi.core.lesson_status\") {\n      this.statusSetByModule = true;\n    }\n    return this.setValue(\"LMSSetValue\", \"LMSCommit\", false, CMIElement, value);\n  }\n\n  /**\n   * LMSCommit function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit(): string {\n    if (this.settings.asyncCommit) {\n      this.scheduleCommit(500, \"LMSCommit\");\n    } else {\n      (async () => {\n        await this.commit(\"LMSCommit\", false);\n      })();\n    }\n    return global_constants.SCORM_TRUE;\n  }\n\n  /**\n   * LMSGetLastError function from SCORM 1.2 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError(): string {\n    return this.getLastError(\"LMSGetLastError\");\n  }\n\n  /**\n   * LMSGetErrorString function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode: string): string {\n    return this.getErrorString(\"LMSGetErrorString\", CMIErrorCode);\n  }\n\n  /**\n   * LMSGetDiagnostic function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode: string): string {\n    return this.getDiagnostic(\"LMSGetDiagnostic\", CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  override setCMIValue(CMIElement: string, value: any): string {\n    return this._commonSetCMIValue(\"LMSSetValue\", false, CMIElement, value);\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  override getCMIValue(CMIElement: string): any {\n    return this._commonGetCMIValue(\"getCMIValue\", false, CMIElement);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {*} _value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI|null}\n   */\n  getChildElement(CMIElement: string, _value: any, foundFirstIndex: boolean): BaseCMI | null {\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      return new CMIObjectivesObject();\n    } else if (\n      foundFirstIndex &&\n      stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+\")\n    ) {\n      return new CMIInteractionsCorrectResponsesObject();\n    } else if (\n      foundFirstIndex &&\n      stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+\")\n    ) {\n      return new CMIInteractionsObjectivesObject();\n    } else if (!foundFirstIndex && stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\")) {\n      return new CMIInteractionsObject();\n    }\n\n    return null;\n  }\n\n  /**\n   * Validates Correct Response values\n   *\n   * @param {string} _CMIElement\n   * @param {*} _value\n   */\n  validateCorrectResponse(_CMIElement: string, _value: any) {\n    // do nothing\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {number|string} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  override getLmsErrorMessageDetails(errorNumber: number | string, detail: boolean): string {\n    let basicMessage = \"No Error\";\n    let detailMessage = \"No Error\";\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (scorm12_constants.error_descriptions[errorNumber]) {\n      basicMessage =\n        scorm12_constants.error_descriptions[errorNumber]?.basicMessage || basicMessage;\n      detailMessage =\n        scorm12_constants.error_descriptions[errorNumber]?.detailMessage || detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {Scorm12API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI: Scorm12API) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} includeTotalTime - Whether to include total time in the commit data\n   * @return {object|Array}\n   */\n  renderCommitCMI(\n    terminateCommit: boolean,\n    includeTotalTime: boolean = false,\n  ): StringKeyMap | Array<string> {\n    const cmiExport: StringKeyMap = this.renderCMIToJSONObject();\n\n    if (terminateCommit || includeTotalTime) {\n      (cmiExport.cmi as any).core.total_time = this.cmi.getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened: StringKeyMap = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case \"flattened\":\n        return Utilities.flatten(cmiExport);\n      case \"params\":\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case \"json\":\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} includeTotalTime - Whether to include total time in the commit data\n   * @return {CommitObject}\n   */\n  renderCommitObject(terminateCommit: boolean, includeTotalTime: boolean = false): CommitObject {\n    const cmiExport = this.renderCommitCMI(terminateCommit, includeTotalTime);\n    const calculateTotalTime = terminateCommit || includeTotalTime;\n    const totalTimeHHMMSS = calculateTotalTime ? this.cmi.getCurrentTotalTime() : \"\";\n    const totalTimeSeconds = Utilities.getTimeAsSeconds(totalTimeHHMMSS, scorm12_regex.CMITimespan);\n    const lessonStatus = this.cmi.core.lesson_status;\n    let completionStatus = CompletionStatus.UNKNOWN;\n    let successStatus = SuccessStatus.UNKNOWN;\n    if (lessonStatus) {\n      completionStatus =\n        lessonStatus === \"completed\" || lessonStatus === \"passed\"\n          ? CompletionStatus.COMPLETED\n          : CompletionStatus.INCOMPLETE;\n      if (lessonStatus === \"passed\") {\n        successStatus = SuccessStatus.PASSED;\n      } else if (lessonStatus === \"failed\") {\n        successStatus = SuccessStatus.FAILED;\n      }\n    }\n\n    const scoreObject: ScoreObject = this.cmi?.core?.score?.getScoreObject() || {};\n    const commitObject: CommitObject = {\n      successStatus: successStatus,\n      completionStatus: completionStatus,\n      runtimeData: cmiExport as StringKeyMap,\n      totalTimeSeconds: totalTimeSeconds,\n    };\n    if (scoreObject) {\n      commitObject.score = scoreObject;\n    }\n    return commitObject;\n  }\n\n  /**\n   * Attempts to store the data to the LMS\n   *\n   * @param {boolean} terminateCommit\n   * @return {ResultObject}\n   */\n  async storeData(terminateCommit: boolean): Promise<ResultObject> {\n    if (terminateCommit) {\n      const originalStatus = this.cmi.core.lesson_status;\n      if (\n        !this.cmi.core.lesson_status ||\n        (!this.statusSetByModule && this.cmi.core.lesson_status === \"not attempted\")\n      ) {\n        this.cmi.core.lesson_status = \"completed\";\n      }\n\n      if (this.cmi.core.lesson_mode === \"normal\") {\n        if (this.cmi.core.credit === \"credit\") {\n          if (\n            this.settings.mastery_override &&\n            this.cmi.student_data.mastery_score !== \"\" &&\n            this.cmi.core.score.raw !== \"\"\n          ) {\n            this.cmi.core.lesson_status =\n              parseFloat(this.cmi.core.score.raw) >= parseFloat(this.cmi.student_data.mastery_score)\n                ? \"passed\"\n                : \"failed\";\n          }\n        }\n      } else if (this.cmi.core.lesson_mode === \"browse\") {\n        if (\n          ((this.startingData?.cmi as any)?.core?.lesson_status || \"\") === \"\" &&\n          originalStatus === \"not attempted\"\n        ) {\n          this.cmi.core.lesson_status = \"browsed\";\n        }\n      }\n    }\n\n    const commitObject = this.getCommitObject(terminateCommit);\n    if (typeof this.settings.lmsCommitUrl === \"string\") {\n      return await this.processHttpRequest(\n        this.settings.lmsCommitUrl,\n        commitObject,\n        terminateCommit,\n      );\n    } else {\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    }\n  }\n}\n\nexport default Scorm12API;\n","import { ValidationError } from \"../exceptions\";\nimport { aicc_constants } from \"../constants/api_constants\";\n\nconst aicc_errors = aicc_constants.error_descriptions;\n\n/**\n * AICC Validation Error\n */\nexport class AICCValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(aicc_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        aicc_errors[String(errorCode)]?.basicMessage || \"Unknown error\",\n        aicc_errors[String(errorCode)]?.detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        aicc_errors[\"101\"]?.basicMessage || \"General error\",\n        aicc_errors[\"101\"]?.detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, AICCValidationError.prototype);\n  }\n}\n","import { checkValidFormat } from \"../common/validation\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function checkAICCValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm12_errors.TYPE_MISMATCH as number,\n    AICCValidationError,\n    allowEmptyString,\n  );\n}\n","import { CMIArray } from \"../common/array\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { aicc_regex } from \"../../constants/regex\";\n\n/**\n * AICC Evaluation object\n */\nexport class CMIEvaluation extends BaseCMI {\n  /**\n   * Constructor for AICC Evaluation object\n   */\n  constructor() {\n    super(\"cmi.evaluation\");\n    this.comments = new CMIEvaluationComments();\n  }\n\n  public comments: CMIEvaluationComments;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.comments?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this.comments?.reset();\n  }\n\n  /**\n   * toJSON for cmi.evaluation object\n   * @return {{comments: CMIEvaluationComments}}\n   */\n  toJSON(): {\n    comments: CMIEvaluationComments;\n  } {\n    this.jsonString = true;\n    const result = {\n      comments: this.comments,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing AICC's cmi.evaluation.comments object\n */\n\nclass CMIEvaluationComments extends CMIArray {\n  /**\n   * Constructor for AICC Evaluation Comments object\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.evaluation.comments\",\n      children: aicc_constants.comments_children,\n      errorCode: scorm12_errors.INVALID_SET_VALUE as number,\n      errorClass: AICCValidationError,\n    });\n  }\n}\n\n/**\n * Class for AICC Evaluation Comments\n */\nexport class CMIEvaluationCommentsObject extends BaseCMI {\n  private _content = \"\";\n  private _location = \"\";\n  private _time = \"\";\n\n  /**\n   * Constructor for Evaluation Comments\n   */\n  constructor() {\n    super(\"cmi.evaluation.comments.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._content = \"\";\n    this._location = \"\";\n    this._time = \"\";\n  }\n\n  /**\n   * Getter for _content\n   * @return {string}\n   */\n  get content(): string {\n    return this._content;\n  }\n\n  /**\n   * Setter for _content\n   * @param {string} content\n   */\n  set content(content: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".content\", content, aicc_regex.CMIString256)) {\n      this._content = content;\n    }\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".location\", location, aicc_regex.CMIString256)) {\n      this._location = location;\n    }\n  }\n\n  /**\n   * Getter for _time\n   * @return {string}\n   */\n  get time(): string {\n    return this._time;\n  }\n\n  /**\n   * Setting for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".time\", time, aicc_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.evaluation.comments.n object\n   * @return {\n   *    {\n   *      content: string,\n   *      location: string,\n   *      time: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    content: string;\n    location: string;\n    time: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      content: this.content,\n      location: this.location,\n      time: this.time,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { CMIStudentPreference } from \"../scorm12/student_preference\";\n\n/**\n * StudentPreferences class for AICC\n */\nexport class AICCStudentPreferences extends CMIStudentPreference {\n  /**\n   * Constructor for AICC Student Preferences object\n   */\n  constructor() {\n    super(aicc_constants.student_preference_children);\n    this.windows = new CMIArray({\n      CMIElement: \"cmi.student_preference.windows\",\n      errorCode: scorm12_errors.INVALID_SET_VALUE as number,\n      errorClass: AICCValidationError,\n      children: \"\",\n    });\n  }\n\n  public windows: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.windows?.initialize();\n  }\n\n  private _lesson_type = \"\";\n  private _text_color = \"\";\n  private _text_location = \"\";\n  private _text_size = \"\";\n  private _video = \"\";\n\n  /**\n   * Getter for _lesson_type\n   * @return {string}\n   */\n  get lesson_type(): string {\n    return this._lesson_type;\n  }\n\n  /**\n   * Setter for _lesson_type\n   * @param {string} lesson_type\n   */\n  set lesson_type(lesson_type: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".lesson_type\", lesson_type, aicc_regex.CMIString256)\n    ) {\n      this._lesson_type = lesson_type;\n    }\n  }\n\n  /**\n   * Getter for _text_color\n   * @return {string}\n   */\n  get text_color(): string {\n    return this._text_color;\n  }\n\n  /**\n   * Setter for _text_color\n   * @param {string} text_color\n   */\n  set text_color(text_color: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".text_color\", text_color, aicc_regex.CMIString256)\n    ) {\n      this._text_color = text_color;\n    }\n  }\n\n  /**\n   * Getter for _text_location\n   * @return {string}\n   */\n  get text_location(): string {\n    return this._text_location;\n  }\n\n  /**\n   * Setter for _text_location\n   * @param {string} text_location\n   */\n  set text_location(text_location: string) {\n    if (\n      checkAICCValidFormat(\n        this._cmi_element + \".text_location\",\n        text_location,\n        aicc_regex.CMIString256,\n      )\n    ) {\n      this._text_location = text_location;\n    }\n  }\n\n  /**\n   * Getter for _text_size\n   * @return {string}\n   */\n  get text_size(): string {\n    return this._text_size;\n  }\n\n  /**\n   * Setter for _text_size\n   * @param {string} text_size\n   */\n  set text_size(text_size: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".text_size\", text_size, aicc_regex.CMIString256)\n    ) {\n      this._text_size = text_size;\n    }\n  }\n\n  /**\n   * Getter for _video\n   * @return {string}\n   */\n  get video(): string {\n    return this._video;\n  }\n\n  /**\n   * Setter for _video\n   * @param {string} video\n   */\n  set video(video: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".video\", video, aicc_regex.CMIString256)) {\n      this._video = video;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_preference\n   *\n   * @return {\n   *    {\n   *      audio: string,\n   *      language: string,\n   *      speed: string,\n   *      text: string,\n   *      text_color: string,\n   *      text_location: string,\n   *      text_size: string,\n   *      video: string,\n   *      windows: CMIArray\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    audio: string;\n    language: string;\n    lesson_type: string;\n    speed: string;\n    text: string;\n    text_color: string;\n    text_location: string;\n    text_size: string;\n    video: string;\n    windows: CMIArray;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio: this.audio,\n      language: this.language,\n      lesson_type: this.lesson_type,\n      speed: this.speed,\n      text: this.text,\n      text_color: this.text_color,\n      text_location: this.text_location,\n      text_size: this.text_size,\n      video: this.video,\n      windows: this.windows,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Class representing the AICC cmi.student_demographics object\n */\nexport class CMIStudentDemographics extends BaseCMI {\n  private __children = aicc_constants.student_demographics_children;\n  private _city = \"\";\n  private _class = \"\";\n  private _company = \"\";\n  private _country = \"\";\n  private _experience = \"\";\n  private _familiar_name = \"\";\n  private _instructor_name = \"\";\n  private _title = \"\";\n  private _native_language = \"\";\n  private _state = \"\";\n  private _street_address = \"\";\n  private _telephone = \"\";\n  private _years_experience = \"\";\n\n  /**\n   * Constructor for AICC StudentDemographics object\n   */\n  constructor() {\n    super(\"cmi.student_demographics\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Getter for city\n   * @return {string}\n   */\n  get city(): string {\n    return this._city;\n  }\n\n  /**\n   * Setter for _city. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} city\n   */\n  set city(city: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.city\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._city = city;\n    }\n  }\n\n  /**\n   * Getter for class\n   * @return {string}\n   */\n  get class(): string {\n    return this._class;\n  }\n\n  /**\n   * Setter for _class. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} clazz\n   */\n  set class(clazz: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.class\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._class = clazz;\n    }\n  }\n\n  /**\n   * Getter for company\n   * @return {string}\n   */\n  get company(): string {\n    return this._company;\n  }\n\n  /**\n   * Setter for _company. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} company\n   */\n  set company(company: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.company\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._company = company;\n    }\n  }\n\n  /**\n   * Getter for country\n   * @return {string}\n   */\n  get country(): string {\n    return this._country;\n  }\n\n  /**\n   * Setter for _country. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} country\n   */\n  set country(country: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.country\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._country = country;\n    }\n  }\n\n  /**\n   * Getter for experience\n   * @return {string}\n   */\n  get experience(): string {\n    return this._experience;\n  }\n\n  /**\n   * Setter for _experience. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} experience\n   */\n  set experience(experience: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.experience\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._experience = experience;\n    }\n  }\n\n  /**\n   * Getter for familiar_name\n   * @return {string}\n   */\n  get familiar_name(): string {\n    return this._familiar_name;\n  }\n\n  /**\n   * Setter for _familiar_name. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} familiar_name\n   */\n  set familiar_name(familiar_name: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.familiar_name\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._familiar_name = familiar_name;\n    }\n  }\n\n  /**\n   * Getter for instructor_name\n   * @return {string}\n   */\n  get instructor_name(): string {\n    return this._instructor_name;\n  }\n\n  /**\n   * Setter for _instructor_name. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} instructor_name\n   */\n  set instructor_name(instructor_name: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.instructor_name\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._instructor_name = instructor_name;\n    }\n  }\n\n  /**\n   * Getter for title\n   * @return {string}\n   */\n  get title(): string {\n    return this._title;\n  }\n\n  /**\n   * Setter for _title. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} title\n   */\n  set title(title: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.title\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._title = title;\n    }\n  }\n\n  /**\n   * Getter for native_language\n   * @return {string}\n   */\n  get native_language(): string {\n    return this._native_language;\n  }\n\n  /**\n   * Setter for _native_language. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} native_language\n   */\n  set native_language(native_language: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.native_language\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._native_language = native_language;\n    }\n  }\n\n  /**\n   * Getter for state\n   * @return {string}\n   */\n  get state(): string {\n    return this._state;\n  }\n\n  /**\n   * Setter for _state. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} state\n   */\n  set state(state: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.state\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._state = state;\n    }\n  }\n\n  /**\n   * Getter for street_address\n   * @return {string}\n   */\n  get street_address(): string {\n    return this._street_address;\n  }\n\n  /**\n   * Setter for _street_address. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} street_address\n   */\n  set street_address(street_address: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.street_address\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._street_address = street_address;\n    }\n  }\n\n  /**\n   * Getter for telephone\n   * @return {string}\n   */\n  get telephone(): string {\n    return this._telephone;\n  }\n\n  /**\n   * Setter for _telephone. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} telephone\n   */\n  set telephone(telephone: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.telephone\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._telephone = telephone;\n    }\n  }\n\n  /**\n   * Getter for years_experience\n   * @return {string}\n   */\n  get years_experience(): string {\n    return this._years_experience;\n  }\n\n  /**\n   * Setter for _years_experience. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} years_experience\n   */\n  set years_experience(years_experience: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.years_experience\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._years_experience = years_experience;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_demographics object\n   * @return {\n   *      {\n   *        city: string,\n   *        class: string,\n   *        company: string,\n   *        country: string,\n   *        experience: string,\n   *        familiar_name: string,\n   *        instructor_name: string,\n   *        title: string,\n   *        native_language: string,\n   *        state: string,\n   *        street_address: string,\n   *        telephone: string,\n   *        years_experience: string\n   *      }\n   *    }\n   */\n  toJSON(): {\n    city: string;\n    class: string;\n    company: string;\n    country: string;\n    experience: string;\n    familiar_name: string;\n    instructor_name: string;\n    title: string;\n    native_language: string;\n    state: string;\n    street_address: string;\n    telephone: string;\n    years_experience: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      city: this.city,\n      class: this.class,\n      company: this.company,\n      country: this.country,\n      experience: this.experience,\n      familiar_name: this.familiar_name,\n      instructor_name: this.instructor_name,\n      title: this.title,\n      native_language: this.native_language,\n      state: this.state,\n      street_address: this.street_address,\n      telephone: this.telephone,\n      years_experience: this.years_experience,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { checkAICCValidFormat } from \"./validation\";\n\n/**\n * Class representing the AICC cmi.student_data.tries object\n */\nexport class CMITries extends CMIArray {\n  /**\n   * Constructor for inline Tries Array class\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.student_data.tries\",\n      children: aicc_constants.tries_children,\n    });\n  }\n}\n\n/**\n * Class for AICC Tries\n */\nexport class CMITriesObject extends BaseCMI {\n  private _status = \"\";\n  private _time = \"\";\n\n  /**\n   * Constructor for AICC Tries object\n   */\n  constructor() {\n    super(\"cmi.student_data.tries.n\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.student_data.tries.n.score\",\n      score_children: aicc_constants.score_children,\n      score_range: aicc_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE as number,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH as number,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE as number,\n      errorClass: AICCValidationError,\n    });\n  }\n\n  public score: CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._status = \"\";\n    this._time = \"\";\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for _status\n   * @return {string}\n   */\n  get status(): string {\n    return this._status;\n  }\n\n  /**\n   * Setter for _status\n   * @param {string} status\n   */\n  set status(status: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".status\", status, aicc_regex.CMIStatus2)) {\n      this._status = status;\n    }\n  }\n\n  /**\n   * Getter for _time\n   * @return {string}\n   */\n  get time(): string {\n    return this._time;\n  }\n\n  /**\n   * Setter for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".time\", time, aicc_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data.tries.n object\n   * @return {\n   *    {\n   *      status: string,\n   *      time: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    status: string;\n    time: string;\n    score: CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      status: this.status,\n      time: this.time,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { CMIArray } from \"../common/array\";\n\n/**\n * Class for cmi.student_data.attempt_records array\n */\nexport class CMIAttemptRecords extends CMIArray {\n  /**\n   * Constructor for inline Tries Array class\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.student_data.attempt_records\",\n      children: aicc_constants.attempt_records_children,\n    });\n  }\n}\n\n/**\n * Class for AICC Attempt Records\n */\nexport class CMIAttemptRecordsObject extends BaseCMI {\n  private _lesson_status = \"\";\n\n  /**\n   * Constructor for AICC Attempt Records object\n   */\n  constructor() {\n    super(\"cmi.student_data.attempt_records.n\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.student_data.attempt_records.n.score\",\n      score_children: aicc_constants.score_children,\n      score_range: aicc_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE as number,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH as number,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE as number,\n      errorClass: AICCValidationError,\n    });\n  }\n\n  public score: CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n\n    this._lesson_status = \"\";\n    this.score?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for _lesson_status\n   * @return {string}\n   */\n  get lesson_status(): string {\n    return this._lesson_status;\n  }\n\n  /**\n   * Setter for _lesson_status\n   * @param {string} lesson_status\n   */\n  set lesson_status(lesson_status: string) {\n    if (\n      checkAICCValidFormat(\n        this._cmi_element + \".lesson_status\",\n        lesson_status,\n        aicc_regex.CMIStatus2,\n      )\n    ) {\n      this._lesson_status = lesson_status;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data.attempt_records.n object\n   * @return {\n   *    {\n   *         lesson_status: string,\n   *         score: CMIScore\n   *     }\n   *  }\n   */\n  toJSON(): {\n    lesson_status: string;\n    score: CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      lesson_status: this.lesson_status,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { CMITries } from \"./tries\";\nimport { CMIStudentData } from \"../scorm12/student_data\";\nimport { CMIAttemptRecords } from \"./attempts\";\n\n/**\n * StudentData class for AICC\n */\nexport class AICCCMIStudentData extends CMIStudentData {\n  /**\n   * Constructor for AICC StudentData object\n   */\n  constructor() {\n    super(aicc_constants.student_data_children);\n    this.tries = new CMITries();\n    this.attempt_records = new CMIAttemptRecords();\n  }\n\n  public tries: CMITries;\n  public attempt_records: CMIAttemptRecords;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.tries?.initialize();\n    this.attempt_records?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n    this.tries?.reset(true);\n    this.attempt_records?.reset(true);\n  }\n\n  private _tries_during_lesson = \"\";\n\n  /**\n   * Getter for tries_during_lesson\n   * @return {string}\n   */\n  get tries_during_lesson(): string {\n    return this._tries_during_lesson;\n  }\n\n  /**\n   * Setter for _tries_during_lesson. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} tries_during_lesson\n   */\n  set tries_during_lesson(tries_during_lesson: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_data.tries_during_lesson\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._tries_during_lesson = tries_during_lesson;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data object\n   * @return {\n   *    {\n   *      mastery_score: string,\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      tries: CMITries,\n   *      attempt_records: CMIAttemptRecords\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    mastery_score: string;\n    max_time_allowed: string;\n    time_limit_action: string;\n    tries: CMITries;\n    attempt_records: CMIAttemptRecords;\n  } {\n    this.jsonString = true;\n    const result = {\n      mastery_score: this.mastery_score,\n      max_time_allowed: this.max_time_allowed,\n      time_limit_action: this.time_limit_action,\n      tries: this.tries,\n      attempt_records: this.attempt_records,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { CMIArray } from \"../common/array\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { aicc_constants } from \"../../constants/api_constants\";\n\n/**\n * Class representing the AICC `cmi.paths` object\n */\nexport class CMIPaths extends CMIArray {\n  /**\n   * Constructor for inline Paths Array class\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.paths\",\n      children: aicc_constants.paths_children,\n    });\n  }\n}\n\n/**\n * Class for AICC Paths\n */\nexport class CMIPathsObject extends BaseCMI {\n  private _location_id = \"\";\n  private _date = \"\";\n  private _time = \"\";\n  private _status = \"\";\n  private _why_left = \"\";\n  private _time_in_element = \"\";\n\n  /**\n   * Constructor for AICC Paths objects\n   */\n  constructor() {\n    super(\"cmi.paths.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._location_id = \"\";\n    this._date = \"\";\n    this._time = \"\";\n    this._status = \"\";\n    this._why_left = \"\";\n    this._time_in_element = \"\";\n  }\n\n  /**\n   * Getter for _location_id\n   * @return {string}\n   */\n  get location_id(): string {\n    return this._location_id;\n  }\n\n  /**\n   * Setter for _location_id\n   * @param {string} location_id\n   */\n  set location_id(location_id: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".location_id\", location_id, aicc_regex.CMIString256)\n    ) {\n      this._location_id = location_id;\n    }\n  }\n\n  /**\n   * Getter for _date\n   * @return {string}\n   */\n  get date(): string {\n    return this._date;\n  }\n\n  /**\n   * Setter for _date\n   * @param {string} date\n   */\n  set date(date: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".date\", date, aicc_regex.CMIString256)) {\n      this._date = date;\n    }\n  }\n\n  /**\n   * Getter for _time\n   * @return {string}\n   */\n  get time(): string {\n    return this._time;\n  }\n\n  /**\n   * Setter for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".time\", time, aicc_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * Getter for _status\n   * @return {string}\n   */\n  get status(): string {\n    return this._status;\n  }\n\n  /**\n   * Setter for _status\n   * @param {string} status\n   */\n  set status(status: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".status\", status, aicc_regex.CMIStatus2)) {\n      this._status = status;\n    }\n  }\n\n  /**\n   * Getter for _why_left\n   * @return {string}\n   */\n  get why_left(): string {\n    return this._why_left;\n  }\n\n  /**\n   * Setter for _why_left\n   * @param {string} why_left\n   */\n  set why_left(why_left: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".why_left\", why_left, aicc_regex.CMIString256)) {\n      this._why_left = why_left;\n    }\n  }\n\n  /**\n   * Getter for _time_in_element\n   * @return {string}\n   */\n  get time_in_element(): string {\n    return this._time_in_element;\n  }\n\n  /**\n   * Setter for _time_in_element\n   * @param {string} time_in_element\n   */\n  set time_in_element(time_in_element: string) {\n    if (\n      checkAICCValidFormat(\n        this._cmi_element + \".time_in_element\",\n        time_in_element,\n        aicc_regex.CMITime,\n      )\n    ) {\n      this._time_in_element = time_in_element;\n    }\n  }\n\n  /**\n   * toJSON for cmi.paths.n object\n   * @return {\n   *    {\n   *      location_id: string,\n   *      date: string,\n   *      time: string,\n   *      status: string,\n   *      why_left: string,\n   *      time_in_element: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    location_id: string;\n    date: string;\n    time: string;\n    status: string;\n    why_left: string;\n    time_in_element: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      location_id: this.location_id,\n      date: this.date,\n      time: this.time,\n      status: this.status,\n      why_left: this.why_left,\n      time_in_element: this.time_in_element,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import * as Scorm12CMI from \"../scorm12/cmi\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { CMIEvaluation } from \"./evaluation\";\nimport { AICCStudentPreferences } from \"./student_preferences\";\nimport { CMIStudentDemographics } from \"./student_demographics\";\nimport { AICCCMIStudentData } from \"./student_data\";\nimport { CMIPaths } from \"./paths\";\nimport { CMICore } from \"./core\";\nimport { CMIObjectives } from \"../scorm12/objectives\";\nimport { CMIStudentData } from \"../scorm12/student_data\";\nimport { CMIStudentPreference } from \"../scorm12/student_preference\";\nimport { CMIInteractions } from \"../scorm12/interactions\";\n\n/**\n * CMI Class for AICC\n */\nexport class CMI extends Scorm12CMI.CMI {\n  /**\n   * Constructor for AICC CMI object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean = false) {\n    super(aicc_constants.cmi_children);\n    if (initialized) this.initialize();\n    this.student_preference = new AICCStudentPreferences();\n    this.student_data = new AICCCMIStudentData();\n    this.student_demographics = new CMIStudentDemographics();\n    this.evaluation = new CMIEvaluation();\n    this.paths = new CMIPaths();\n  }\n\n  public override student_data: AICCCMIStudentData;\n  public override student_preference: AICCStudentPreferences;\n  public student_demographics: CMIStudentDemographics;\n  public evaluation: CMIEvaluation;\n  public paths: CMIPaths;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.student_preference?.initialize();\n    this.student_data?.initialize();\n    this.student_demographics?.initialize();\n    this.evaluation?.initialize();\n    this.paths?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions,\n   *      paths: CMIPaths\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    suspend_data: string;\n    launch_data: string;\n    comments: string;\n    comments_from_lms: string;\n    core: CMICore;\n    objectives: CMIObjectives;\n    student_data: CMIStudentData;\n    student_preference: CMIStudentPreference;\n    student_demographics: CMIStudentDemographics;\n    interactions: CMIInteractions;\n    evaluation: CMIEvaluation;\n    paths: CMIPaths;\n  } {\n    this.jsonString = true;\n    const result = {\n      suspend_data: this.suspend_data,\n      launch_data: this.launch_data,\n      comments: this.comments,\n      comments_from_lms: this.comments_from_lms,\n      core: this.core,\n      objectives: this.objectives,\n      student_data: this.student_data,\n      student_preference: this.student_preference,\n      student_demographics: this.student_demographics,\n      interactions: this.interactions,\n      evaluation: this.evaluation,\n      paths: this.paths,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import Scorm12API from \"./Scorm12API\";\nimport { CMI } from \"./cmi/aicc/cmi\";\n\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport { CMITriesObject } from \"./cmi/aicc/tries\";\nimport { CMIAttemptRecordsObject } from \"./cmi/aicc/attempts\";\nimport { CMIEvaluationCommentsObject } from \"./cmi/aicc/evaluation\";\nimport { NAV } from \"./cmi/scorm12/nav\";\nimport { CMIPathsObject } from \"./cmi/aicc/paths\";\nimport { Settings } from \"./types/api_types\";\nimport { stringMatches } from \"./utilities\";\n\n/**\n * The AICC API class\n */\nclass AICC extends Scorm12API {\n  /**\n   * Constructor to create AICC API object\n   * @param {Settings} settings\n   */\n  constructor(settings?: Settings) {\n    super(settings);\n\n    this.cmi = new CMI();\n    this.nav = new NAV();\n  }\n\n  override cmi: CMI;\n  override nav: NAV;\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI | null}\n   */\n  override getChildElement(\n    CMIElement: string,\n    value: any,\n    foundFirstIndex: boolean,\n  ): BaseCMI | null {\n    let newChild = super.getChildElement(CMIElement, value, foundFirstIndex);\n\n    if (!newChild) {\n      if (stringMatches(CMIElement, \"cmi\\\\.evaluation\\\\.comments\\\\.\\\\d+\")) {\n        newChild = new CMIEvaluationCommentsObject();\n      } else if (stringMatches(CMIElement, \"cmi\\\\.student_data\\\\.tries\\\\.\\\\d+\")) {\n        newChild = new CMITriesObject();\n      } else if (stringMatches(CMIElement, \"cmi\\\\.student_data\\\\.attempt_records\\\\.\\\\d+\")) {\n        newChild = new CMIAttemptRecordsObject();\n      } else if (stringMatches(CMIElement, \"cmi\\\\.paths\\\\.\\\\d+\")) {\n        newChild = new CMIPathsObject();\n      }\n    }\n\n    return newChild;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {AICC} newAPI\n   */\n  override replaceWithAnotherScormAPI(newAPI: AICC) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.nav = newAPI.nav;\n  }\n}\n\nexport default AICC;\n","import { ValidationError } from \"../exceptions\";\nimport { scorm2004_constants } from \"../constants/api_constants\";\n\nconst scorm2004_errors = scorm2004_constants.error_descriptions;\n\n/**\n * SCORM 2004 Validation Error\n */\nexport class Scorm2004ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm2004_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm2004_errors[String(errorCode)]?.basicMessage || \"Unknown error\",\n        scorm2004_errors[String(errorCode)]?.detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm2004_errors[\"101\"]?.basicMessage || \"General error\",\n        scorm2004_errors[\"101\"]?.detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm2004ValidationError.prototype);\n  }\n}\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check2004ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm2004_errors.TYPE_MISMATCH as number,\n    Scorm2004ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @return {boolean}\n */\nexport function check2004ValidRange(\n  CMIElement: string,\n  value: string,\n  rangePattern: string,\n): boolean {\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm2004_errors.VALUE_OUT_OF_RANGE as number,\n    Scorm2004ValidationError,\n  );\n}\n","/**\n * Class for SCORM 2004's cmi.learner_preference object\n */\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\n\nexport class CMILearnerPreference extends BaseCMI {\n  private __children = scorm2004_constants.student_preference_children;\n  private _audio_level = \"1\";\n  private _language = \"\";\n  private _delivery_speed = \"1\";\n  private _audio_captioning = \"0\";\n\n  /**\n   * Constructor for cmi.learner_preference\n   */\n  constructor() {\n    super(\"cmi.learner_preference\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._children\",\n      scorm2004_errors.READ_ONLY_ELEMENT as number,\n    );\n  }\n\n  /**\n   * Getter for _audio_level\n   * @return {string}\n   */\n  get audio_level(): string {\n    return this._audio_level;\n  }\n\n  /**\n   * Setter for _audio_level\n   * @param {string} audio_level\n   */\n  set audio_level(audio_level: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".audio_level\",\n        audio_level,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".audio_level\",\n        audio_level,\n        scorm2004_regex.audio_range,\n      )\n    ) {\n      this._audio_level = audio_level;\n    }\n  }\n\n  /**\n   * Getter for _language\n   * @return {string}\n   */\n  get language(): string {\n    return this._language;\n  }\n\n  /**\n   * Setter for _language\n   * @param {string} language\n   */\n  set language(language: string) {\n    if (check2004ValidFormat(this._cmi_element + \".language\", language, scorm2004_regex.CMILang)) {\n      this._language = language;\n    }\n  }\n\n  /**\n   * Getter for _delivery_speed\n   * @return {string}\n   */\n  get delivery_speed(): string {\n    return this._delivery_speed;\n  }\n\n  /**\n   * Setter for _delivery_speed\n   * @param {string} delivery_speed\n   */\n  set delivery_speed(delivery_speed: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".delivery_speed\",\n        delivery_speed,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".delivery_speed\",\n        delivery_speed,\n        scorm2004_regex.speed_range,\n      )\n    ) {\n      this._delivery_speed = delivery_speed;\n    }\n  }\n\n  /**\n   * Getter for _audio_captioning\n   * @return {string}\n   */\n  get audio_captioning(): string {\n    return this._audio_captioning;\n  }\n\n  /**\n   * Setter for _audio_captioning\n   * @param {string} audio_captioning\n   */\n  set audio_captioning(audio_captioning: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".audio_captioning\",\n        audio_captioning,\n        scorm2004_regex.CMISInteger,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".audio_captioning\",\n        audio_captioning,\n        scorm2004_regex.text_range,\n      )\n    ) {\n      this._audio_captioning = audio_captioning;\n    }\n  }\n\n  /**\n   * toJSON for cmi.learner_preference\n   *\n   * @return {\n   *    {\n   *      audio_level: string,\n   *      language: string,\n   *      delivery_speed: string,\n   *      audio_captioning: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    audio_level: string;\n    language: string;\n    delivery_speed: string;\n    audio_captioning: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio_level: this.audio_level,\n      language: this.language,\n      delivery_speed: this.delivery_speed,\n      audio_captioning: this.audio_captioning,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { scorm2004_regex } from \"./regex\";\n\nexport const LearnerResponses: Responses = {\n  \"true-false\": {\n    format: \"^true$|^false$\",\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  choice: {\n    format: scorm2004_regex.CMILongIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    unique: true,\n  },\n  \"fill-in\": {\n    format: scorm2004_regex.CMILangString250,\n    max: 10,\n    delimiter: \"[,]\",\n    unique: false,\n  },\n  \"long-fill-in\": {\n    format: scorm2004_regex.CMILangString4000,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  matching: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n  },\n  performance: {\n    format: \"^$|\" + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + \"|^$|\" + scorm2004_regex.CMIShortIdentifier,\n    max: 250,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n  },\n  sequencing: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    unique: false,\n  },\n  likert: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  numeric: {\n    format: scorm2004_regex.CMIDecimal,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  other: {\n    format: scorm2004_regex.CMIString4000,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n};\nexport const CorrectResponses: Responses = {\n  \"true-false\": {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: \"^true$|^false$\",\n    limit: 1,\n  },\n  choice: {\n    max: 36,\n    delimiter: \"[,]\",\n    unique: true,\n    duplicate: false,\n    format: scorm2004_regex.CMILongIdentifier,\n  },\n  \"fill-in\": {\n    max: 10,\n    delimiter: \"[,]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMILangString250cr,\n  },\n  \"long-fill-in\": {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: true,\n    format: scorm2004_regex.CMILangString4000,\n  },\n  matching: {\n    max: 36,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n  },\n  performance: {\n    max: 250,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    delimiter3: \"[:]\",\n    unique: false,\n    duplicate: false,\n    // step_name must be a non-empty short identifier\n    format: scorm2004_regex.CMIShortIdentifier,\n    // step_answer may be short identifier or numeric range (<decimal>[:<decimal>])\n    format2: `^(${scorm2004_regex.CMIShortIdentifier})$|^(?:\\\\d+(?:\\\\.\\\\d+)?(?::\\\\d+(?:\\\\.\\\\d+)?)?)$`,\n  },\n  sequencing: {\n    max: 36,\n    delimiter: \"[,]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n  },\n  likert: {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    limit: 1,\n  },\n  numeric: {\n    max: 2,\n    delimiter: \"[:]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIDecimal,\n    limit: 1,\n  },\n  other: {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIString4000,\n    limit: 1,\n  },\n};\n\nexport type ResponseType = {\n  format: string;\n  max: number;\n  delimiter: string;\n  unique: boolean;\n  duplicate?: boolean;\n  format2?: string;\n  delimiter2?: string;\n  limit?: number;\n  delimiter3?: string;\n};\n\nexport type Responses = {\n  [key: string]: ResponseType;\n};\n","/**\n * Class representing SCORM 2004's `cmi.interactions` object\n */\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { CMIArray } from \"../common/array\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport {\n  CorrectResponses,\n  LearnerResponses,\n  ResponseType,\n} from \"../../constants/response_constants\";\n\nexport class CMIInteractions extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives` Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.interactions\",\n      children: scorm2004_constants.interactions_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.interaction.n object\n */\n\nexport class CMIInteractionsObject extends BaseCMI {\n  private _id = \"\";\n  private _type = \"\";\n  private _timestamp = \"\";\n  private _weighting = \"\";\n  private _learner_response = \"\";\n  private _result = \"\";\n  private _latency = \"\";\n  private _description = \"\";\n\n  /**\n   * Constructor for cmi.interaction.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n\");\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.n.correct_responses\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  public objectives: CMIArray;\n  public correct_responses: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._id = \"\";\n    this._type = \"\";\n    this._timestamp = \"\";\n    this._weighting = \"\";\n    this._learner_response = \"\";\n    this._result = \"\";\n    this._latency = \"\";\n    this._description = \"\";\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.n.correct_responses\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _type\n   * @return {string}\n   */\n  get type(): string {\n    return this._type;\n  }\n\n  /**\n   * Setter for _type\n   * @param {string} type\n   */\n  set type(type: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".type\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (check2004ValidFormat(this._cmi_element + \".type\", type, scorm2004_regex.CMIType)) {\n        this._type = type;\n      }\n    }\n  }\n\n  /**\n   * Getter for _timestamp\n   * @return {string}\n   */\n  get timestamp(): string {\n    return this._timestamp;\n  }\n\n  /**\n   * Setter for _timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".timestamp\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".timestamp\", timestamp, scorm2004_regex.CMITime)\n      ) {\n        this._timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * Getter for _weighting\n   * @return {string}\n   */\n  get weighting(): string {\n    return this._weighting;\n  }\n\n  /**\n   * Setter for _weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".weighting\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".weighting\",\n          weighting,\n          scorm2004_regex.CMIDecimal,\n        )\n      ) {\n        this._weighting = weighting;\n      }\n    }\n  }\n\n  /**\n   * Getter for _learner_response\n   * @return {string}\n   */\n  get learner_response(): string {\n    return this._learner_response;\n  }\n\n  /**\n   * Setter for _learner_response. Does type validation to make sure response\n   * matches SCORM 2004's spec\n   * @param {string} learner_response\n   */\n  set learner_response(learner_response: string) {\n    if (this.initialized && (this._type === \"\" || this._id === \"\")) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_response\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      let nodes = [];\n      const response_type = LearnerResponses[this.type];\n\n      if (response_type) {\n        if (response_type?.delimiter) {\n          // Convert regex-style delimiter to actual character\n          const delimiter = response_type.delimiter === \"[,]\" ? \",\" : response_type.delimiter;\n          nodes = learner_response.split(delimiter);\n        } else {\n          nodes[0] = learner_response;\n        }\n\n        if (nodes.length > 0 && nodes.length <= response_type.max) {\n          const formatRegex = new RegExp(response_type.format);\n\n          for (let i = 0; i < nodes.length; i++) {\n            if (response_type?.delimiter2) {\n              // Convert regex-style delimiter to actual character\n              const delimiter2 =\n                response_type.delimiter2 === \"[.]\" ? \".\" : response_type.delimiter2;\n              const values = nodes[i]?.split(delimiter2);\n\n              if (values?.length === 2) {\n                // For performance type, both parts must be non-empty\n                if (this.type === \"performance\" && (values[0] === \"\" || values[1] === \"\")) {\n                  throw new Scorm2004ValidationError(\n                    this._cmi_element + \".learner_response\",\n                    scorm2004_errors.TYPE_MISMATCH as number,\n                  );\n                }\n\n                if (!values[0]?.match(formatRegex)) {\n                  throw new Scorm2004ValidationError(\n                    this._cmi_element + \".learner_response\",\n                    scorm2004_errors.TYPE_MISMATCH as number,\n                  );\n                } else {\n                  if (\n                    !response_type.format2 ||\n                    !values[1]?.match(new RegExp(response_type.format2))\n                  ) {\n                    throw new Scorm2004ValidationError(\n                      this._cmi_element + \".learner_response\",\n                      scorm2004_errors.TYPE_MISMATCH as number,\n                    );\n                  }\n                }\n              } else {\n                throw new Scorm2004ValidationError(\n                  this._cmi_element + \".learner_response\",\n                  scorm2004_errors.TYPE_MISMATCH as number,\n                );\n              }\n            } else {\n              if (!nodes[i]?.match(formatRegex)) {\n                throw new Scorm2004ValidationError(\n                  this._cmi_element + \".learner_response\",\n                  scorm2004_errors.TYPE_MISMATCH as number,\n                );\n              } else {\n                if (nodes[i] !== \"\" && response_type.unique) {\n                  for (let j = 0; j < i; j++) {\n                    if (nodes[i] === nodes[j]) {\n                      throw new Scorm2004ValidationError(\n                        this._cmi_element + \".learner_response\",\n                        scorm2004_errors.TYPE_MISMATCH as number,\n                      );\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          throw new Scorm2004ValidationError(\n            this._cmi_element + \".learner_response\",\n            scorm2004_errors.GENERAL_SET_FAILURE as number,\n          );\n        }\n\n        this._learner_response = learner_response;\n      } else {\n        throw new Scorm2004ValidationError(\n          this._cmi_element + \".learner_response\",\n          scorm2004_errors.TYPE_MISMATCH as number,\n        );\n      }\n    }\n  }\n\n  /**\n   * Getter for _result\n   * @return {string}\n   */\n  get result(): string {\n    return this._result;\n  }\n\n  /**\n   * Setter for _result\n   * @param {string} result\n   */\n  set result(result: string) {\n    if (check2004ValidFormat(this._cmi_element + \".result\", result, scorm2004_regex.CMIResult)) {\n      this._result = result;\n    }\n  }\n\n  /**\n   * Getter for _latency\n   * @return {string}\n   */\n  get latency(): string {\n    return this._latency;\n  }\n\n  /**\n   * Setter for _latency\n   * @param {string} latency\n   */\n  set latency(latency: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".latency\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".latency\", latency, scorm2004_regex.CMITimespan)\n      ) {\n        this._latency = latency;\n      }\n    }\n  }\n\n  /**\n   * Getter for _description\n   * @return {string}\n   */\n  get description(): string {\n    return this._description;\n  }\n\n  /**\n   * Setter for _description\n   * @param {string} description\n   */\n  set description(description: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".description\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".description\",\n          description,\n          scorm2004_regex.CMILangString250,\n          true,\n        )\n      ) {\n        this._description = description;\n      }\n    }\n  }\n\n  // noinspection JSUnusedGlobalSymbols\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      type: string,\n   *      objectives: CMIArray,\n   *      timestamp: string,\n   *      correct_responses: CMIArray,\n   *      weighting: string,\n   *      learner_response: string,\n   *      result: string,\n   *      latency: string,\n   *      description: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    type: string;\n    objectives: CMIArray;\n    timestamp: string;\n    correct_responses: CMIArray;\n    weighting: string;\n    learner_response: string;\n    result: string;\n    latency: string;\n    description: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      type: this.type,\n      objectives: this.objectives,\n      timestamp: this.timestamp,\n      weighting: this.weighting,\n      learner_response: this.learner_response,\n      result: this.result,\n      latency: this.latency,\n      description: this.description,\n      correct_responses: this.correct_responses,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.objectives.n object\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  private _id = \"\";\n\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n.objectives.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._id = \"\";\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Helper: strip the square-bracket notation (e.g. \"[,]\") down to the character (\",\")\n */\nfunction stripBrackets(delim: string): string {\n  return delim.replace(/[[\\]]/g, \"\");\n}\n\n// Helper to escape a string for use in a RegExp\nfunction escapeRegex(s: string): string {\n  // Only , and . are expected, but escape any regex special chars for safety\n  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\n\n/**\n * Split on unescaped delimiter and unescape the delimiter in resulting parts.\n * @param text - the input string\n * @param delim - the delimiter character, e.g. ',' or '.'\n */\nfunction splitUnescaped(text: string, delim: string): string[] {\n  const reDelim = escapeRegex(delim);\n  const splitRe = new RegExp(`(?<!\\\\\\\\)${reDelim}`, \"g\");\n  const unescapeRe = new RegExp(`\\\\\\\\${reDelim}`, \"g\");\n  return text.split(splitRe).map((part) => part.replace(unescapeRe, delim));\n}\n\n/**\n * Helper: validate a `pattern` string against its SCORM definition\n */\nfunction validatePattern(type: string, pattern: string, responseDef: ResponseType) {\n  // Reject patterns with leading or trailing whitespace\n  if (pattern.trim() !== pattern) {\n    throw new Scorm2004ValidationError(\n      \"cmi.interactions.n.correct_responses.n.pattern\",\n      scorm2004_errors.TYPE_MISMATCH as number,\n    );\n  }\n\n  // Reject any nodes with leading/trailing whitespace around tokens\n  const subDelim1 = responseDef.delimiter ? stripBrackets(responseDef.delimiter) : null;\n  const rawNodes = subDelim1 ? splitUnescaped(pattern, subDelim1) : [pattern];\n  for (const raw of rawNodes) {\n    if (raw.trim() !== raw) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n  }\n\n  // Allow empty fill-in patterns\n  if (type === \"fill-in\" && pattern === \"\") {\n    return;\n  }\n  // Split into nodes on the primary delimiter (if any)\n  const delim1 = responseDef.delimiter ? stripBrackets(responseDef.delimiter) : null;\n  let nodes: string[];\n  if (delim1) {\n    nodes = splitUnescaped(pattern, delim1);\n  } else {\n    nodes = [pattern];\n  }\n\n  // If no primary delimiter but pattern contains comma, reject multiple entries\n  if (!responseDef.delimiter && pattern.includes(\",\")) {\n    throw new Scorm2004ValidationError(\n      \"cmi.interactions.n.correct_responses.n.pattern\",\n      scorm2004_errors.TYPE_MISMATCH as number,\n    );\n  }\n\n  // Enforce uniqueness or disallow duplicates if required\n  if (responseDef.unique || responseDef.duplicate === false) {\n    const seen = new Set(nodes);\n    if (seen.size !== nodes.length) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n  }\n\n  // Must have at least 1 node, and no more than max\n  if (nodes.length === 0 || nodes.length > responseDef.max) {\n    throw new Scorm2004ValidationError(\n      \"cmi.interactions.n.correct_responses.n.pattern\",\n      scorm2004_errors.GENERAL_SET_FAILURE as number,\n    );\n  }\n\n  const fmt1 = new RegExp(responseDef.format);\n  const fmt2 = responseDef.format2 ? new RegExp(responseDef.format2) : null;\n\n  const checkSingle = (value: string) => {\n    if (!fmt1.test(value)) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n  };\n\n  const checkPair = (value: string, delimBracketed?: string) => {\n    if (!delimBracketed) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    const delim = stripBrackets(delimBracketed);\n    const parts = value\n      .split(new RegExp(`(?<!\\\\\\\\)${escapeRegex(delim)}`, \"g\"))\n      .map((n) => n.replace(new RegExp(`\\\\\\\\${escapeRegex(delim)}`, \"g\"), delim));\n    if (parts.length !== 2 || parts[0] === \"\" || parts[1] === \"\") {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    // test both parts\n    if (\n      (parts[0] !== undefined && !fmt1.test(parts[0])) ||\n      (fmt2 && parts[1] !== undefined && !fmt2.test(parts[1]))\n    ) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n  };\n\n  for (const node of nodes) {\n    switch (type) {\n      case \"numeric\": {\n        // 1 or 2 numeric values separated by \":\"\n        const numDelim = responseDef.delimiter ? stripBrackets(responseDef.delimiter) : \":\";\n        const nums = node.split(numDelim);\n        if (nums.length < 1 || nums.length > 2) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        nums.forEach(checkSingle);\n        break;\n      }\n\n      case \"performance\": {\n        // split into parts on unescaped dot\n        const delimBracketed = responseDef.delimiter2;\n        if (!delimBracketed) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        const delim = stripBrackets(delimBracketed);\n        // split into parts on unescaped dot\n        const allParts = splitUnescaped(node, delim);\n        if (!node.includes(\":\") && allParts.length !== 2) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        // use splitUnescaped to get [part1, part2]\n        const [part1, part2] = splitUnescaped(node, delim);\n        // Validate non-empty\n        if (part1 === \"\" || part2 === \"\" || part1 === part2) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        // part1 against format1\n        if (part1 === undefined || !fmt1.test(part1)) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        // part2 against format2\n        if (fmt2 && part2 !== undefined && !fmt2.test(part2)) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        break;\n      }\n\n      default:\n        if (responseDef.delimiter2) {\n          // matching and other two-part types\n          checkPair(node, responseDef.delimiter2);\n        } else {\n          // simple single-value types (true-false, choice, fill-in, etc.)\n          checkSingle(node);\n        }\n    }\n  }\n}\n\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  private _pattern = \"\";\n  private readonly _interactionType?: string | undefined;\n\n  /**\n   * Constructor for cmi.interactions.n.correct_responses.n\n   * @param interactionType The type of interaction (e.g. \"numeric\", \"choice\", etc.)\n   */\n  constructor(interactionType?: string) {\n    super(\"cmi.interactions.n.correct_responses.n\");\n    this._interactionType = interactionType;\n  }\n\n  override reset() {\n    this._initialized = false;\n    this._pattern = \"\";\n  }\n\n  get pattern(): string {\n    return this._pattern;\n  }\n\n  set pattern(pattern: string) {\n    // Allow empty fill-in patterns\n    if (this._interactionType === \"fill-in\" && pattern === \"\") {\n      this._pattern = \"\";\n      return;\n    }\n    // 1) Basic SCORM‐pattern format check\n    if (\n      !check2004ValidFormat(this._cmi_element + \".pattern\", pattern, scorm2004_regex.CMIFeedback)\n    ) {\n      return;\n    }\n\n    // 2) If we know the interaction type, run the detailed validator\n    if (this._interactionType) {\n      const responseDef = CorrectResponses[this._interactionType];\n      if (responseDef) {\n        // Skip detailed validation for matching when pattern contains escaped comma or dot\n        if (this._interactionType === \"matching\" && /\\\\[.,]/.test(pattern)) {\n          // accept escaped comma or dot patterns without further validation\n        } else {\n          validatePattern(this._interactionType, pattern, responseDef);\n        }\n      }\n    }\n\n    // 3) Finally, set\n    this._pattern = pattern;\n  }\n\n  toJSON(): { pattern: string } {\n    this.jsonString = true;\n    const result = { pattern: this.pattern };\n    this.jsonString = false;\n    return result;\n  }\n}\n","/**\n * Class for SCORM 2004's cmi *.score object\n */\nimport { CMIScore } from \"../common/score\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { ScoreObject } from \"../../types/api_types\";\n\nexport class Scorm2004CMIScore extends CMIScore {\n  private _scaled = \"\";\n\n  /**\n   * Constructor for cmi *.score\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.score\",\n      score_children: scorm2004_constants.score_children,\n      max: \"\",\n      invalidErrorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      invalidTypeCode: scorm2004_errors.TYPE_MISMATCH as number,\n      invalidRangeCode: scorm2004_errors.VALUE_OUT_OF_RANGE as number,\n      decimalRegex: scorm2004_regex.CMIDecimal,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n    this._scaled = \"\";\n    this._raw = \"\";\n    this._min = \"\";\n    this._max = \"\";\n  }\n\n  /**\n   * Getter for _scaled\n   * @return {string}\n   */\n  get scaled(): string {\n    return this._scaled;\n  }\n\n  /**\n   * Setter for _scaled\n   * @param {string} scaled\n   */\n  set scaled(scaled: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".scaled\", scaled, scorm2004_regex.CMIDecimal) &&\n      check2004ValidRange(this._cmi_element + \".scaled\", scaled, scorm2004_regex.scaled_range)\n    ) {\n      this._scaled = scaled;\n    }\n  }\n\n  override getScoreObject(): ScoreObject {\n    const scoreObject = super.getScoreObject();\n\n    if (!Number.isNaN(Number.parseFloat(this.scaled))) {\n      scoreObject.scaled = Number.parseFloat(this.scaled);\n    }\n\n    return scoreObject;\n  }\n\n  /**\n   * toJSON for cmi *.score\n   *\n   * @return {\n   *    {\n   *      scaled: string,\n   *      raw: string,\n   *      min: string,\n   *      max: string\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    scaled: string;\n    raw: string;\n    min: string;\n    max: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      scaled: this.scaled,\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_lms object\n * @extends CMIArray\n */\nexport class CMICommentsFromLMS extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_lms Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.comments_from_lms\",\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner object\n */\n\nexport class CMICommentsFromLearner extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_learner Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.comments_from_learner\",\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner.n and cmi.comments_from_lms.n object\n */\n\nexport class CMICommentsObject extends BaseCMI {\n  private _comment = \"\";\n  private _location = \"\";\n  private _timestamp = \"\";\n  private readonly _readOnlyAfterInit: boolean;\n\n  /**\n   * Constructor for cmi.comments_from_learner.n and cmi.comments_from_lms.n\n   * @param {boolean} readOnlyAfterInit\n   */\n  constructor(readOnlyAfterInit: boolean = false) {\n    super(\"cmi.comments_from_learner.n\");\n    this._comment = \"\";\n    this._location = \"\";\n    this._timestamp = \"\";\n    this._readOnlyAfterInit = readOnlyAfterInit;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _comment\n   * @return {string}\n   */\n  get comment(): string {\n    return this._comment;\n  }\n\n  /**\n   * Setter for _comment\n   * @param {string} comment\n   */\n  set comment(comment: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".comment\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".comment\",\n          comment,\n          scorm2004_regex.CMILangString4000,\n          true,\n        )\n      ) {\n        this._comment = comment;\n      }\n    }\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".location\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".location\",\n          location,\n          scorm2004_regex.CMIString250,\n        )\n      ) {\n        this._location = location;\n      }\n    }\n  }\n\n  /**\n   * Getter for _timestamp\n   * @return {string}\n   */\n  get timestamp(): string {\n    return this._timestamp;\n  }\n\n  /**\n   * Setter for _timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".timestamp\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".timestamp\", timestamp, scorm2004_regex.CMITime)\n      ) {\n        this._timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.comments_from_learner.n object\n   * @return {\n   *    {\n   *      comment: string,\n   *      location: string,\n   *      timestamp: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    comment: string;\n    location: string;\n    timestamp: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      comment: this.comment,\n      location: this.location,\n      timestamp: this.timestamp,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { Scorm2004CMIScore } from \"./score\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\n\n/**\n * Class representing SCORM 2004's `cmi.objectives` object\n * @extends CMIArray\n */\nexport class CMIObjectives extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives` Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.objectives\",\n      children: scorm2004_constants.objectives_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n\n  /**\n   * Find an objective by its ID\n   */\n  public findObjectiveById(id: string): CMIObjectivesObject | undefined {\n    return this.childArray.find((objective) => objective.id === id);\n  }\n\n  /**\n   * Find objective by its index\n   */\n  public findObjectiveByIndex(index: number): CMIObjectivesObject {\n    return this.childArray[index];\n  }\n\n  /**\n   * Set an objective at the given index\n   */\n  public setObjectiveByIndex(index: number, objective: CMIObjectivesObject) {\n    this.childArray[index] = objective;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.objectives.n object\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  private _id = \"\";\n  private _success_status = \"unknown\";\n  private _completion_status = \"unknown\";\n  private _progress_measure = \"\";\n  private _description = \"\";\n\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super(\"cmi.objectives.n\");\n    this.score = new Scorm2004CMIScore();\n  }\n\n  override reset() {\n    this._initialized = false;\n  }\n\n  public score: Scorm2004CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this._success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".success_status\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".success_status\",\n          success_status,\n          scorm2004_regex.CMISStatus,\n        )\n      ) {\n        this._success_status = success_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this._completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".completion_status\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".completion_status\",\n          completion_status,\n          scorm2004_regex.CMICStatus,\n        )\n      ) {\n        this._completion_status = completion_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this._progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".progress_measure\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".progress_measure\",\n          progress_measure,\n          scorm2004_regex.CMIDecimal,\n        ) &&\n        check2004ValidRange(\n          this._cmi_element + \".progress_measure\",\n          progress_measure,\n          scorm2004_regex.progress_range,\n        )\n      ) {\n        this._progress_measure = progress_measure;\n      }\n    }\n  }\n\n  /**\n   * Getter for _description\n   * @return {string}\n   */\n  get description(): string {\n    return this._description;\n  }\n\n  /**\n   * Setter for _description\n   * @param {string} description\n   */\n  set description(description: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".description\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".description\",\n          description,\n          scorm2004_regex.CMILangString250,\n          true,\n        )\n      ) {\n        this._description = description;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      success_status: string,\n   *      completion_status: string,\n   *      progress_measure: string,\n   *      description: string,\n   *      score: Scorm2004CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    success_status: string;\n    completion_status: string;\n    progress_measure: string;\n    description: string;\n    score: Scorm2004CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      success_status: this.success_status,\n      completion_status: this.completion_status,\n      progress_measure: this.progress_measure,\n      description: this.description,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","/**\n * Class representing metadata properties for SCORM 2004's cmi object\n */\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing metadata properties for SCORM 2004's cmi object\n */\nexport class CMIMetadata extends BaseCMI {\n  private __version = \"1.0\";\n  private __children = scorm2004_constants.cmi_children;\n\n  /**\n   * Constructor for CMIMetadata\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   */\n  get _version(): string {\n    return this.__version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version: string) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._version\",\n      scorm2004_errors.READ_ONLY_ELEMENT as number,\n    );\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {number} _children\n   */\n  set _children(_children: number) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._children\",\n      scorm2004_errors.READ_ONLY_ELEMENT as number,\n    );\n  }\n\n  /**\n   * Reset the metadata properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // No need to reset __version and __children as they are constants\n  }\n}\n","/**\n * Class representing learner properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing learner properties for SCORM 2004's cmi object\n */\nexport class CMILearner extends BaseCMI {\n  private _learner_id = \"\";\n  private _learner_name = \"\";\n\n  /**\n   * Constructor for CMILearner\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _learner_id\n   * @return {string}\n   */\n  get learner_id(): string {\n    return this._learner_id;\n  }\n\n  /**\n   * Setter for _learner_id. Can only be called before initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_id\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._learner_id = learner_id;\n    }\n  }\n\n  /**\n   * Getter for _learner_name\n   * @return {string}\n   */\n  get learner_name(): string {\n    return this._learner_name;\n  }\n\n  /**\n   * Setter for _learner_name. Can only be called before initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_name\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._learner_name = learner_name;\n    }\n  }\n\n  /**\n   * Reset the learner properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset learner_id and learner_name as they are read-only after initialization\n  }\n}\n","/**\n * Class representing status properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\n\n/**\n * Class representing status properties for SCORM 2004's cmi object\n */\nexport class CMIStatus extends BaseCMI {\n  private _completion_status = \"unknown\";\n  private _success_status = \"unknown\";\n  private _progress_measure = \"\";\n\n  /**\n   * Constructor for CMIStatus\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this._completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".completion_status\",\n        completion_status,\n        scorm2004_regex.CMICStatus,\n      )\n    ) {\n      this._completion_status = completion_status;\n    }\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this._success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".success_status\",\n        success_status,\n        scorm2004_regex.CMISStatus,\n      )\n    ) {\n      this._success_status = success_status;\n    }\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this._progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".progress_measure\",\n        progress_measure,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".progress_measure\",\n        progress_measure,\n        scorm2004_regex.progress_range,\n      )\n    ) {\n      this._progress_measure = progress_measure;\n    }\n  }\n\n  /**\n   * Reset the status properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._completion_status = \"unknown\";\n    this._success_status = \"unknown\";\n    this._progress_measure = \"\";\n  }\n}\n","/**\n * Class representing session properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\nimport * as Util from \"../../utilities\";\n\n/**\n * Class representing session properties for SCORM 2004's cmi object\n */\nexport class CMISession extends BaseCMI {\n  private _entry = \"\";\n  private _exit = \"\";\n  private _session_time = \"PT0H0M0S\";\n  private _total_time = \"\";\n\n  /**\n   * Constructor for CMISession\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this._entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".entry\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._entry = entry;\n    }\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    if (!this.jsonString) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exit\",\n        scorm2004_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    if (check2004ValidFormat(this._cmi_element + \".exit\", exit, scorm2004_regex.CMIExit, true)) {\n      this._exit = exit;\n    }\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    if (!this.jsonString) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".session_time\",\n        scorm2004_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".session_time\",\n        session_time,\n        scorm2004_regex.CMITimespan,\n      )\n    ) {\n      this._session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this._total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".total_time\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._total_time = total_time;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime(start_time: number | undefined): string {\n    let sessionTime = this._session_time;\n    if (typeof start_time !== \"undefined\" && start_time !== null) {\n      const seconds = new Date().getTime() - start_time;\n      sessionTime = Util.getSecondsAsISODuration(seconds / 1000);\n    }\n\n    return Util.addTwoDurations(this._total_time, sessionTime, scorm2004_regex.CMITimespan);\n  }\n\n  /**\n   * Reset the session properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._entry = \"\";\n    this._exit = \"\";\n    this._session_time = \"PT0H0M0S\";\n    // Don't reset total_time as it's read-only after initialization\n  }\n}\n","/**\n * Class representing content properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\n\n/**\n * Class representing content properties for SCORM 2004's cmi object\n */\nexport class CMIContent extends BaseCMI {\n  private _location = \"\";\n  private _launch_data = \"\";\n  private _suspend_data = \"\";\n\n  /**\n   * Constructor for CMIContent\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".location\", location, scorm2004_regex.CMIString1000)\n    ) {\n      this._location = location;\n    }\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this._launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".launch_data\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._launch_data = launch_data;\n    }\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this._suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".suspend_data\",\n        suspend_data,\n        scorm2004_regex.CMIString64000,\n        true,\n      )\n    ) {\n      this._suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Reset the content properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._location = \"\";\n    // Don't reset launch_data as it's read-only after initialization\n    this._suspend_data = \"\";\n  }\n}\n","/**\n * Class representing settings properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing settings properties for SCORM 2004's cmi object\n */\nexport class CMISettings extends BaseCMI {\n  private _credit = \"credit\";\n  private _mode = \"normal\";\n  private _time_limit_action = \"continue,no message\";\n  private _max_time_allowed = \"\";\n\n  /**\n   * Constructor for CMISettings\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this._credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".credit\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._credit = credit;\n    }\n  }\n\n  /**\n   * Getter for _mode\n   * @return {string}\n   */\n  get mode(): string {\n    return this._mode;\n  }\n\n  /**\n   * Setter for _mode. Can only be called before initialization.\n   * @param {string} mode\n   */\n  set mode(mode: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".mode\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._mode = mode;\n    }\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this._time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".time_limit_action\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._time_limit_action = time_limit_action;\n    }\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this._max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".max_time_allowed\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._max_time_allowed = max_time_allowed;\n    }\n  }\n\n  /**\n   * Reset the settings properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset these properties as they are read-only after initialization\n  }\n}\n","/**\n * Class representing threshold properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing threshold properties for SCORM 2004's cmi object\n */\nexport class CMIThresholds extends BaseCMI {\n  private _scaled_passing_score = \"\";\n  private _completion_threshold = \"\";\n\n  /**\n   * Constructor for CMIThresholds\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score(): string {\n    return this._scaled_passing_score;\n  }\n\n  /**\n   * Setter for _scaled_passing_score. Can only be called before initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".scaled_passing_score\",\n        scorm2004_errors.READ_ONLY_ELEMENT ?? 404,\n      );\n    } else {\n      this._scaled_passing_score = scaled_passing_score;\n    }\n  }\n\n  /**\n   * Getter for _completion_threshold\n   * @return {string}\n   */\n  get completion_threshold(): string {\n    return this._completion_threshold;\n  }\n\n  /**\n   * Setter for _completion_threshold. Can only be called before initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".completion_threshold\",\n        scorm2004_errors.READ_ONLY_ELEMENT ?? 404,\n      );\n    } else {\n      this._completion_threshold = completion_threshold;\n    }\n  }\n\n  /**\n   * Reset the threshold properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset these properties as they are read-only after initialization\n  }\n}\n","import { BaseRootCMI } from \"../common/base_cmi\";\nimport { CMILearnerPreference } from \"./learner_preference\";\nimport { CMIInteractions } from \"./interactions\";\nimport { Scorm2004CMIScore } from \"./score\";\nimport { CMICommentsFromLearner, CMICommentsFromLMS } from \"./comments\";\nimport { CMIObjectives } from \"./objectives\";\nimport { CMIMetadata } from \"./metadata\";\nimport { CMILearner } from \"./learner\";\nimport { CMIStatus } from \"./status\";\nimport { CMISession } from \"./session\";\nimport { CMIContent } from \"./content\";\nimport { CMISettings } from \"./settings\";\nimport { CMIThresholds } from \"./thresholds\";\n\n/**\n * Class representing cmi object for SCORM 2004\n */\nexport class CMI extends BaseRootCMI {\n  /**\n   * Constructor for the SCORM 2004 cmi object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean = false) {\n    super(\"cmi\");\n    this.metadata = new CMIMetadata();\n    this.learner = new CMILearner();\n    this.status = new CMIStatus();\n    this.session = new CMISession();\n    this.content = new CMIContent();\n    this.settings = new CMISettings();\n    this.thresholds = new CMIThresholds();\n    this.learner_preference = new CMILearnerPreference();\n    this.score = new Scorm2004CMIScore();\n    this.comments_from_learner = new CMICommentsFromLearner();\n    this.comments_from_lms = new CMICommentsFromLMS();\n    this.interactions = new CMIInteractions();\n    this.objectives = new CMIObjectives();\n    if (initialized) this.initialize();\n  }\n\n  // New component classes\n  private metadata: CMIMetadata;\n  private learner: CMILearner;\n  private status: CMIStatus;\n  private session: CMISession;\n  private content: CMIContent;\n  private settings: CMISettings;\n  private thresholds: CMIThresholds;\n\n  // Original complex objects\n  public learner_preference: CMILearnerPreference;\n  public score: Scorm2004CMIScore;\n  public comments_from_learner: CMICommentsFromLearner;\n  public comments_from_lms: CMICommentsFromLMS;\n  public interactions: CMIInteractions;\n  public objectives: CMIObjectives;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    // Initialize new component classes\n    this.metadata?.initialize();\n    this.learner?.initialize();\n    this.status?.initialize();\n    this.session?.initialize();\n    this.content?.initialize();\n    this.settings?.initialize();\n    this.thresholds?.initialize();\n\n    // Initialize original complex objects\n    this.learner_preference?.initialize();\n    this.score?.initialize();\n    this.comments_from_learner?.initialize();\n    this.comments_from_lms?.initialize();\n    this.interactions?.initialize();\n    this.objectives?.initialize();\n  }\n\n  /**\n   * Called when API is moving to another SCO\n   */\n  reset() {\n    this._initialized = false;\n\n    // Reset new component classes\n    this.metadata?.reset();\n    this.learner?.reset();\n    this.status?.reset();\n    this.session?.reset();\n    this.content?.reset();\n    this.settings?.reset();\n    this.thresholds?.reset();\n\n    // Reset original complex objects\n    this.objectives?.reset(false);\n    this.interactions?.reset(true);\n    this.score?.reset();\n    this.comments_from_learner?.reset();\n    this.comments_from_lms?.reset();\n    this.learner_preference?.reset();\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   * @private\n   */\n  get _version(): string {\n    return this.metadata._version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   * @private\n   */\n  set _version(_version: string) {\n    this.metadata._version = _version;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.metadata._children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {number} _children\n   * @private\n   */\n  set _children(_children: number) {\n    this.metadata._children = _children;\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this.status.completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    this.status.completion_status = completion_status;\n  }\n\n  /**\n   * Getter for _completion_threshold\n   * @return {string}\n   */\n  get completion_threshold(): string {\n    return this.thresholds.completion_threshold;\n  }\n\n  /**\n   * Setter for _completion_threshold. Can only be called before initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold: string) {\n    this.thresholds.completion_threshold = completion_threshold;\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this.settings.credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    this.settings.credit = credit;\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this.session.entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    this.session.entry = entry;\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    this.session.jsonString = this.jsonString;\n    return this.session.exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    this.session.exit = exit;\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this.content.launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    this.content.launch_data = launch_data;\n  }\n\n  /**\n   * Getter for _learner_id\n   * @return {string}\n   */\n  get learner_id(): string {\n    return this.learner.learner_id;\n  }\n\n  /**\n   * Setter for _learner_id. Can only be called before initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id: string) {\n    this.learner.learner_id = learner_id;\n  }\n\n  /**\n   * Getter for _learner_name\n   * @return {string}\n   */\n  get learner_name(): string {\n    return this.learner.learner_name;\n  }\n\n  /**\n   * Setter for _learner_name. Can only be called before initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name: string) {\n    this.learner.learner_name = learner_name;\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this.content.location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    this.content.location = location;\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this.settings.max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    this.settings.max_time_allowed = max_time_allowed;\n  }\n\n  /**\n   * Getter for _mode\n   * @return {string}\n   */\n  get mode(): string {\n    return this.settings.mode;\n  }\n\n  /**\n   * Setter for _mode. Can only be called before initialization.\n   * @param {string} mode\n   */\n  set mode(mode: string) {\n    this.settings.mode = mode;\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this.status.progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    this.status.progress_measure = progress_measure;\n  }\n\n  /**\n   * Getter for _scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score(): string {\n    return this.thresholds.scaled_passing_score;\n  }\n\n  /**\n   * Setter for _scaled_passing_score. Can only be called before initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score: string) {\n    this.thresholds.scaled_passing_score = scaled_passing_score;\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    this.session.jsonString = this.jsonString;\n    return this.session.session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    this.session.session_time = session_time;\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this.status.success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    this.status.success_status = success_status;\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this.content.suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    this.content.suspend_data = suspend_data;\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this.settings.time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    this.settings.time_limit_action = time_limit_action;\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this.session.total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    this.session.total_time = total_time;\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime(): string {\n    return this.session.getCurrentTotalTime(this.start_time);\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      comments_from_learner: CMICommentsFromLearner,\n   *      comments_from_lms: CMICommentsFromLMS,\n   *      completion_status: string,\n   *      completion_threshold: string,\n   *      credit: string,\n   *      entry: string,\n   *      exit: string,\n   *      interactions: CMIInteractions,\n   *      launch_data: string,\n   *      learner_id: string,\n   *      learner_name: string,\n   *      learner_preference: CMILearnerPreference,\n   *      location: string,\n   *      max_time_allowed: string,\n   *      mode: string,\n   *      objectives: CMIObjectives,\n   *      progress_measure: string,\n   *      scaled_passing_score: string,\n   *      score: Scorm2004CMIScore,\n   *      session_time: string,\n   *      success_status: string,\n   *      suspend_data: string,\n   *      time_limit_action: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    comments_from_learner: CMICommentsFromLearner;\n    comments_from_lms: CMICommentsFromLMS;\n    completion_status: string;\n    completion_threshold: string;\n    credit: string;\n    entry: string;\n    exit: string;\n    interactions: CMIInteractions;\n    launch_data: string;\n    learner_id: string;\n    learner_name: string;\n    learner_preference: CMILearnerPreference;\n    location: string;\n    max_time_allowed: string;\n    mode: string;\n    objectives: CMIObjectives;\n    progress_measure: string;\n    scaled_passing_score: string;\n    score: Scorm2004CMIScore;\n    session_time: string;\n    success_status: string;\n    suspend_data: string;\n    time_limit_action: string;\n  } {\n    this.jsonString = true;\n\n    // Set jsonString flag on component classes that need it\n    this.session.jsonString = true;\n\n    const result = {\n      comments_from_learner: this.comments_from_learner,\n      comments_from_lms: this.comments_from_lms,\n      completion_status: this.completion_status,\n      completion_threshold: this.completion_threshold,\n      credit: this.credit,\n      entry: this.entry,\n      exit: this.exit,\n      interactions: this.interactions,\n      launch_data: this.launch_data,\n      learner_id: this.learner_id,\n      learner_name: this.learner_name,\n      learner_preference: this.learner_preference,\n      location: this.location,\n      max_time_allowed: this.max_time_allowed,\n      mode: this.mode,\n      objectives: this.objectives,\n      progress_measure: this.progress_measure,\n      scaled_passing_score: this.scaled_passing_score,\n      score: this.score,\n      session_time: this.session_time,\n      success_status: this.success_status,\n      suspend_data: this.suspend_data,\n      time_limit_action: this.time_limit_action,\n    };\n\n    // Clean up jsonString flags\n    this.jsonString = false;\n    this.session.jsonString = false;\n\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { NAVBoolean } from \"../../constants/enums\";\nimport { CMIArray } from \"../common/array\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Sequencing } from \"./sequencing/sequencing\";\n\n/**\n * Class representing SCORM 2004's adl object\n */\nexport class ADL extends BaseCMI {\n  /**\n   * Constructor for adl\n   */\n  constructor() {\n    super(\"adl\");\n    this.nav = new ADLNav();\n    this.data = new ADLData();\n  }\n\n  public nav: ADLNav;\n  public data = new ADLData();\n  private _sequencing: Sequencing | null = null;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.nav?.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this.nav?.reset();\n  }\n\n  /**\n   * Getter for sequencing\n   * @return {Sequencing | null}\n   */\n  get sequencing(): Sequencing | null {\n    return this._sequencing;\n  }\n\n  /**\n   * Setter for sequencing\n   * @param {Sequencing | null} sequencing\n   */\n  set sequencing(sequencing: Sequencing | null) {\n    this._sequencing = sequencing;\n    if (sequencing) {\n      sequencing.adlNav = this.nav;\n      this.nav.sequencing = sequencing;\n    }\n  }\n\n  /**\n   * toJSON for adl\n   * @return {\n   *    {\n   *      nav: ADLNav,\n   *      data: ADLData\n   *    }\n   *  }\n   */\n  toJSON(): {\n    nav: ADLNav;\n    data: ADLData;\n  } {\n    this.jsonString = true;\n    const result = {\n      nav: this.nav,\n      data: this.data,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's `adl.nav` object\n */\n\nexport class ADLNav extends BaseCMI {\n  private _request = \"_none_\";\n  private _sequencing: Sequencing | null = null;\n\n  /**\n   * Constructor for `adl.nav`\n   */\n  constructor() {\n    super(\"adl.nav\");\n    this.request_valid = new ADLNavRequestValid();\n  }\n\n  public request_valid: ADLNavRequestValid;\n\n  /**\n   * Getter for sequencing\n   * @return {Sequencing | null}\n   */\n  get sequencing(): Sequencing | null {\n    return this._sequencing;\n  }\n\n  /**\n   * Setter for sequencing\n   * @param {Sequencing | null} sequencing\n   */\n  set sequencing(sequencing: Sequencing | null) {\n    this._sequencing = sequencing;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.request_valid?.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._request = \"_none_\";\n    if (this._sequencing) {\n      this._sequencing.adlNav = null;\n    }\n    this._sequencing = null;\n    this.request_valid?.reset();\n  }\n\n  /**\n   * Getter for _request\n   * @return {string}\n   */\n  get request(): string {\n    return this._request;\n  }\n\n  /**\n   * Setter for _request\n   * @param {string} request\n   */\n  set request(request: string) {\n    if (check2004ValidFormat(this._cmi_element + \".request\", request, scorm2004_regex.NAVEvent)) {\n      // Only process if the request is different from the current request\n      if (this._request !== request) {\n        this._request = request;\n\n        // Process the navigation request using the sequencing implementation\n        if (this._sequencing) {\n          this._sequencing.processNavigationRequest(request);\n        }\n      }\n    }\n  }\n\n  /**\n   * toJSON for adl.nav\n   *\n   * @return {\n   *    {\n   *      request: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    request: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      request: this.request,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's `adl.data` object\n */\nexport class ADLData extends CMIArray {\n  constructor() {\n    super({\n      CMIElement: \"adl.data\",\n      children: scorm2004_constants.adl_data_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's adl.data.n object\n */\nexport class ADLDataObject extends BaseCMI {\n  private _id = \"\";\n  private _store = \"\";\n\n  constructor() {\n    super(\"adl.data.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _store\n   * @return {string}\n   */\n  get store(): string {\n    return this._store;\n  }\n\n  /**\n   * Setter for _store\n   * @param {string} store\n   */\n  set store(store: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".store\", store, scorm2004_regex.CMILangString4000)\n    ) {\n      this._store = store;\n    }\n  }\n\n  /**\n   * toJSON for adl.data.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      store: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    store: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this._id,\n      store: this._store,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl.nav.request_valid object\n */\n\nexport class ADLNavRequestValid extends BaseCMI {\n  private _continue = \"unknown\";\n  private _previous = \"unknown\";\n  private _choice: {\n    [key: string]: NAVBoolean;\n  } = {};\n  private _jump: {\n    [key: string]: NAVBoolean;\n  } = {};\n\n  /**\n   * Constructor for adl.nav.request_valid\n   */\n  constructor() {\n    super(\"adl.nav.request_valid\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._continue = \"unknown\";\n    this._previous = \"unknown\";\n    this._choice = {};\n    this._jump = {};\n  }\n\n  /**\n   * Getter for _continue\n   * @return {string}\n   */\n  get continue(): string {\n    return this._continue;\n  }\n\n  /**\n   * Setter for _continue. Just throws an error.\n   * @param {string} _continue\n   */\n  set continue(_continue: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".continue\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".continue\", _continue, scorm2004_regex.NAVBoolean)\n    ) {\n      this._continue = _continue;\n    }\n  }\n\n  /**\n   * Getter for _previous\n   * @return {string}\n   */\n  get previous(): string {\n    return this._previous;\n  }\n\n  /**\n   * Setter for _previous. Just throws an error.\n   * @param {string} _previous\n   */\n  set previous(_previous: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".previous\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".previous\", _previous, scorm2004_regex.NAVBoolean)\n    ) {\n      this._previous = _previous;\n    }\n  }\n\n  /**\n   * Getter for _choice\n   * @return {{ [key: string]: NAVBoolean }}\n   */\n  get choice(): { [key: string]: NAVBoolean } {\n    return this._choice;\n  }\n\n  /**\n   * Setter for _choice\n   * @param {{ [key: string]: string }} choice\n   */\n  set choice(choice: { [key: string]: string }) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".choice\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (typeof choice !== \"object\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".choice\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    for (const key in choice) {\n      if ({}.hasOwnProperty.call(choice, key)) {\n        if (\n          check2004ValidFormat(\n            this._cmi_element + \".choice.\" + key,\n            choice[key] || \"\",\n            scorm2004_regex.NAVBoolean,\n          ) &&\n          check2004ValidFormat(this._cmi_element + \".choice.\" + key, key, scorm2004_regex.NAVTarget)\n        ) {\n          // Convert string value to NAVBoolean enum value\n          const value = choice[key];\n          if (value === \"true\") {\n            this._choice[key] = NAVBoolean.TRUE;\n          } else if (value === \"false\") {\n            this._choice[key] = NAVBoolean.FALSE;\n          } else if (value === \"unknown\") {\n            this._choice[key] = NAVBoolean.UNKNOWN;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Getter for _jump\n   * @return {{ [key: string]: NAVBoolean }}\n   */\n  get jump(): { [key: string]: NAVBoolean } {\n    return this._jump;\n  }\n\n  /**\n   * Setter for _jump\n   * @param {{ [key: string]: string }} jump\n   */\n  set jump(jump: { [key: string]: string }) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".jump\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (typeof jump !== \"object\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".jump\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    for (const key in jump) {\n      if ({}.hasOwnProperty.call(jump, key)) {\n        if (\n          check2004ValidFormat(\n            this._cmi_element + \".jump.\" + key,\n            jump[key] || \"\",\n            scorm2004_regex.NAVBoolean,\n          ) &&\n          check2004ValidFormat(this._cmi_element + \".jump.\" + key, key, scorm2004_regex.NAVTarget)\n        ) {\n          // Convert string value to NAVBoolean enum value\n          const value = jump[key];\n          if (value === \"true\") {\n            this._jump[key] = NAVBoolean.TRUE;\n          } else if (value === \"false\") {\n            this._jump[key] = NAVBoolean.FALSE;\n          } else if (value === \"unknown\") {\n            this._jump[key] = NAVBoolean.UNKNOWN;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * toJSON for adl.nav.request_valid\n   *\n   * @return {\n   *    {\n   *      previous: string,\n   *      continue: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    previous: string;\n    continue: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      previous: this._previous,\n      continue: this._continue,\n      choice: this._choice,\n      jump: this._jump,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Enum for rule condition operators\n */\nexport enum RuleConditionOperator {\n  NOT = \"not\",\n  AND = \"and\",\n  OR = \"or\",\n}\n\n/**\n * Enum for rule condition types\n */\nexport enum RuleConditionType {\n  SATISFIED = \"satisfied\",\n  OBJECTIVE_STATUS_KNOWN = \"objectiveStatusKnown\",\n  OBJECTIVE_MEASURE_KNOWN = \"objectiveMeasureKnown\",\n  OBJECTIVE_MEASURE_GREATER_THAN = \"objectiveMeasureGreaterThan\",\n  OBJECTIVE_MEASURE_LESS_THAN = \"objectiveMeasureLessThan\",\n  COMPLETED = \"completed\",\n  PROGRESS_KNOWN = \"progressKnown\",\n  ATTEMPTED = \"attempted\",\n  ATTEMPT_LIMIT_EXCEEDED = \"attemptLimitExceeded\",\n  TIME_LIMIT_EXCEEDED = \"timeLimitExceeded\",\n  OUTSIDE_AVAILABLE_TIME_RANGE = \"outsideAvailableTimeRange\",\n  ALWAYS = \"always\",\n}\n\n/**\n * Enum for rule action types\n */\nexport enum RuleActionType {\n  SKIP = \"skip\",\n  DISABLED = \"disabled\",\n  HIDE_FROM_CHOICE = \"hideFromChoice\",\n  STOP_FORWARD_TRAVERSAL = \"stopForwardTraversal\",\n  EXIT_PARENT = \"exitParent\",\n  EXIT_ALL = \"exitAll\",\n  RETRY = \"retry\",\n  RETRY_ALL = \"retryAll\",\n  CONTINUE = \"continue\",\n  PREVIOUS = \"previous\",\n  EXIT = \"exit\",\n}\n\n/**\n * Class representing a sequencing rule condition\n */\nexport class RuleCondition extends BaseCMI {\n  private _condition: RuleConditionType = RuleConditionType.ALWAYS;\n  private _operator: RuleConditionOperator | null = null;\n  private _parameters: Map<string, any> = new Map();\n\n  /**\n   * Constructor for RuleCondition\n   * @param {RuleConditionType} condition - The condition type\n   * @param {RuleConditionOperator | null} operator - The operator (null for no operator)\n   * @param {Map<string, any>} parameters - Additional parameters for the condition\n   */\n  constructor(\n    condition: RuleConditionType = RuleConditionType.ALWAYS,\n    operator: RuleConditionOperator | null = null,\n    parameters: Map<string, any> = new Map(),\n  ) {\n    super(\"ruleCondition\");\n    this._condition = condition;\n    this._operator = operator;\n    this._parameters = parameters;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._condition = RuleConditionType.ALWAYS;\n    this._operator = null;\n    this._parameters = new Map();\n  }\n\n  /**\n   * Getter for condition\n   * @return {RuleConditionType}\n   */\n  get condition(): RuleConditionType {\n    return this._condition;\n  }\n\n  /**\n   * Setter for condition\n   * @param {RuleConditionType} condition\n   */\n  set condition(condition: RuleConditionType) {\n    this._condition = condition;\n  }\n\n  /**\n   * Getter for operator\n   * @return {RuleConditionOperator | null}\n   */\n  get operator(): RuleConditionOperator | null {\n    return this._operator;\n  }\n\n  /**\n   * Setter for operator\n   * @param {RuleConditionOperator | null} operator\n   */\n  set operator(operator: RuleConditionOperator | null) {\n    this._operator = operator;\n  }\n\n  /**\n   * Getter for parameters\n   * @return {Map<string, any>}\n   */\n  get parameters(): Map<string, any> {\n    return this._parameters;\n  }\n\n  /**\n   * Setter for parameters\n   * @param {Map<string, any>} parameters\n   */\n  set parameters(parameters: Map<string, any>) {\n    this._parameters = parameters;\n  }\n\n  /**\n   * Evaluate the condition for an activity\n   * @param {Activity} activity - The activity to evaluate the condition for\n   * @return {boolean} - True if the condition is met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    let result;\n    switch (this._condition) {\n      case RuleConditionType.SATISFIED:\n        result = activity.successStatus === SuccessStatus.PASSED;\n        break;\n      case RuleConditionType.OBJECTIVE_STATUS_KNOWN:\n        // noinspection PointlessBooleanExpressionJS\n        result = !!activity.objectiveMeasureStatus;\n        break;\n      case RuleConditionType.OBJECTIVE_MEASURE_KNOWN:\n        // noinspection PointlessBooleanExpressionJS\n        result = !!activity.objectiveMeasureStatus;\n        break;\n      case RuleConditionType.OBJECTIVE_MEASURE_GREATER_THAN: {\n        const greaterThanValue = this._parameters.get(\"threshold\") || 0;\n        result =\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure > greaterThanValue;\n        break;\n      }\n      case RuleConditionType.OBJECTIVE_MEASURE_LESS_THAN: {\n        const lessThanValue = this._parameters.get(\"threshold\") || 0;\n        result =\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure < lessThanValue;\n        break;\n      }\n      case RuleConditionType.COMPLETED:\n        result = activity.isCompleted;\n        break;\n      case RuleConditionType.PROGRESS_KNOWN:\n        result = activity.completionStatus !== \"unknown\";\n        break;\n      case RuleConditionType.ATTEMPTED:\n        result = activity.attemptCount > 0;\n        break;\n      case RuleConditionType.ATTEMPT_LIMIT_EXCEEDED: {\n        const attemptLimit = this._parameters.get(\"attemptLimit\") || 0;\n        result = activity.attemptCount >= attemptLimit;\n        break;\n      }\n      case RuleConditionType.TIME_LIMIT_EXCEEDED:\n        result = this.evaluateTimeLimitExceeded(activity);\n        break;\n      case RuleConditionType.OUTSIDE_AVAILABLE_TIME_RANGE:\n        result = this.evaluateOutsideAvailableTimeRange(activity);\n        break;\n      case RuleConditionType.ALWAYS:\n        result = true;\n        break;\n      default:\n        result = false;\n        break;\n    }\n\n    if (this._operator === RuleConditionOperator.NOT) {\n      result = !result;\n    }\n\n    return result;\n  }\n\n  /**\n   * Evaluate if time limit has been exceeded\n   * @param {Activity} activity - The activity to evaluate\n   * @return {boolean}\n   * @private\n   */\n  private evaluateTimeLimitExceeded(activity: Activity): boolean {\n    const timeLimitDuration = activity.timeLimitDuration;\n    if (!timeLimitDuration) {\n      return false;\n    }\n\n    // Parse ISO 8601 duration to milliseconds\n    const durationMs = this.parseISO8601Duration(timeLimitDuration);\n    if (durationMs === 0) {\n      return false;\n    }\n\n    // Get current attempt duration\n    const attemptDuration = activity.attemptExperiencedDuration;\n    const attemptDurationMs = this.parseISO8601Duration(attemptDuration);\n\n    return attemptDurationMs > durationMs;\n  }\n\n  /**\n   * Evaluate if activity is outside available time range\n   * @param {Activity} activity - The activity to evaluate\n   * @return {boolean}\n   * @private\n   */\n  private evaluateOutsideAvailableTimeRange(activity: Activity): boolean {\n    const beginTime = activity.beginTimeLimit;\n    const endTime = activity.endTimeLimit;\n\n    if (!beginTime && !endTime) {\n      return false;\n    }\n\n    const now = new Date();\n\n    if (beginTime) {\n      const beginDate = new Date(beginTime);\n      if (now < beginDate) {\n        return true;\n      }\n    }\n\n    if (endTime) {\n      const endDate = new Date(endTime);\n      if (now > endDate) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Parse ISO 8601 duration to milliseconds\n   * @param {string} duration - ISO 8601 duration string\n   * @return {number} - Duration in milliseconds\n   * @private\n   */\n  private parseISO8601Duration(duration: string): number {\n    const regex = /PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?/;\n    const matches = duration.match(regex);\n\n    if (!matches) {\n      return 0;\n    }\n\n    const hours = parseInt(matches[1] || \"0\", 10);\n    const minutes = parseInt(matches[2] || \"0\", 10);\n    const seconds = parseFloat(matches[3] || \"0\");\n\n    return (hours * 3600 + minutes * 60 + seconds) * 1000;\n  }\n\n  /**\n   * toJSON for RuleCondition\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      condition: this._condition,\n      operator: this._operator,\n      parameters: Object.fromEntries(this._parameters),\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a sequencing rule\n */\nexport class SequencingRule extends BaseCMI {\n  private _conditions: RuleCondition[] = [];\n  private _action: RuleActionType = RuleActionType.SKIP;\n  private _conditionCombination: string | RuleConditionOperator = RuleConditionOperator.AND;\n\n  /**\n   * Constructor for SequencingRule\n   * @param {RuleActionType} action - The action to take when the rule conditions are met\n   * @param {string | RuleConditionOperator} conditionCombination - How to combine multiple conditions (\"all\"/\"and\" or \"any\"/\"or\")\n   */\n  constructor(\n    action: RuleActionType = RuleActionType.SKIP,\n    conditionCombination: string | RuleConditionOperator = RuleConditionOperator.AND,\n  ) {\n    super(\"sequencingRule\");\n    this._action = action;\n    this._conditionCombination = conditionCombination;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._conditions = [];\n    this._action = RuleActionType.SKIP;\n    this._conditionCombination = RuleConditionOperator.AND;\n  }\n\n  /**\n   * Getter for conditions\n   * @return {RuleCondition[]}\n   */\n  get conditions(): RuleCondition[] {\n    return this._conditions;\n  }\n\n  /**\n   * Add a condition to the rule\n   * @param {RuleCondition} condition - The condition to add\n   */\n  addCondition(condition: RuleCondition): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(condition instanceof RuleCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    // Check if the condition is already in the array\n    if (!this._conditions.includes(condition)) {\n      this._conditions.push(condition);\n    }\n  }\n\n  /**\n   * Remove a condition from the rule\n   * @param {RuleCondition} condition - The condition to remove\n   * @return {boolean} - True if the condition was removed, false otherwise\n   */\n  removeCondition(condition: RuleCondition): boolean {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(condition instanceof RuleCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    const index = this._conditions.indexOf(condition);\n    if (index !== -1) {\n      this._conditions.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for action\n   * @return {RuleActionType}\n   */\n  get action(): RuleActionType {\n    return this._action;\n  }\n\n  /**\n   * Setter for action\n   * @param {RuleActionType} action\n   */\n  set action(action: RuleActionType) {\n    this._action = action;\n  }\n\n  /**\n   * Getter for conditionCombination\n   * @return {string | RuleConditionOperator}\n   */\n  get conditionCombination(): string | RuleConditionOperator {\n    return this._conditionCombination;\n  }\n\n  /**\n   * Setter for conditionCombination\n   * @param {string | RuleConditionOperator} conditionCombination\n   */\n  set conditionCombination(conditionCombination: string | RuleConditionOperator) {\n    this._conditionCombination = conditionCombination;\n  }\n\n  /**\n   * Evaluate the rule for an activity\n   * @param {Activity} activity - The activity to evaluate the rule for\n   * @return {boolean} - True if the rule conditions are met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    if (this._conditions.length === 0) {\n      return true;\n    }\n\n    if (\n      this._conditionCombination === \"all\" ||\n      this._conditionCombination === RuleConditionOperator.AND\n    ) {\n      return this._conditions.every((condition) => condition.evaluate(activity));\n    } else if (\n      this._conditionCombination === \"any\" ||\n      this._conditionCombination === RuleConditionOperator.OR\n    ) {\n      return this._conditions.some((condition) => condition.evaluate(activity));\n    }\n\n    return false;\n  }\n\n  /**\n   * toJSON for SequencingRule\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      conditions: this._conditions,\n      action: this._action,\n      conditionCombination: this._conditionCombination,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a collection of sequencing rules\n */\nexport class SequencingRules extends BaseCMI {\n  private _preConditionRules: SequencingRule[] = [];\n  private _exitConditionRules: SequencingRule[] = [];\n  private _postConditionRules: SequencingRule[] = [];\n\n  /**\n   * Constructor for SequencingRules\n   */\n  constructor() {\n    super(\"sequencingRules\");\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._preConditionRules = [];\n    this._exitConditionRules = [];\n    this._postConditionRules = [];\n  }\n\n  /**\n   * Getter for preConditionRules\n   * @return {SequencingRule[]}\n   */\n  get preConditionRules(): SequencingRule[] {\n    return this._preConditionRules;\n  }\n\n  /**\n   * Add a pre-condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addPreConditionRule(rule: SequencingRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".preConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._preConditionRules.push(rule);\n  }\n\n  /**\n   * Getter for exitConditionRules\n   * @return {SequencingRule[]}\n   */\n  get exitConditionRules(): SequencingRule[] {\n    return this._exitConditionRules;\n  }\n\n  /**\n   * Add an exit condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addExitConditionRule(rule: SequencingRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exitConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._exitConditionRules.push(rule);\n  }\n\n  /**\n   * Getter for postConditionRules\n   * @return {SequencingRule[]}\n   */\n  get postConditionRules(): SequencingRule[] {\n    return this._postConditionRules;\n  }\n\n  /**\n   * Add a post-condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addPostConditionRule(rule: SequencingRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".postConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._postConditionRules.push(rule);\n  }\n\n  /**\n   * Evaluate pre-condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluatePreConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._preConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Evaluate exit condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluateExitConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._exitConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Evaluate post-condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluatePostConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._postConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * toJSON for SequencingRules\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      preConditionRules: this._preConditionRules,\n      exitConditionRules: this._exitConditionRules,\n      postConditionRules: this._postConditionRules,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { CompletionStatus, SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Enum for rollup action types\n */\nexport enum RollupActionType {\n  SATISFIED = \"satisfied\",\n  NOT_SATISFIED = \"notSatisfied\",\n  COMPLETED = \"completed\",\n  INCOMPLETE = \"incomplete\",\n}\n\n/**\n * Enum for rollup condition types\n */\nexport enum RollupConditionType {\n  SATISFIED = \"satisfied\",\n  OBJECTIVE_STATUS_KNOWN = \"objectiveStatusKnown\",\n  OBJECTIVE_MEASURE_KNOWN = \"objectiveMeasureKnown\",\n  OBJECTIVE_MEASURE_GREATER_THAN = \"objectiveMeasureGreaterThan\",\n  OBJECTIVE_MEASURE_LESS_THAN = \"objectiveMeasureLessThan\",\n  COMPLETED = \"completed\",\n  PROGRESS_KNOWN = \"progressKnown\",\n  ATTEMPTED = \"attempted\",\n  NOT_ATTEMPTED = \"notAttempted\",\n  ALWAYS = \"always\",\n}\n\n/**\n * Enum for rollup consideration types\n */\nexport enum RollupConsiderationType {\n  ALL = \"all\",\n  ANY = \"any\",\n  NONE = \"none\",\n  AT_LEAST_COUNT = \"atLeastCount\",\n  AT_LEAST_PERCENT = \"atLeastPercent\",\n}\n\n/**\n * Class representing a rollup condition\n */\nexport class RollupCondition extends BaseCMI {\n  private _condition: RollupConditionType = RollupConditionType.ALWAYS;\n  private _parameters: Map<string, any> = new Map();\n\n  /**\n   * Constructor for RollupCondition\n   * @param {RollupConditionType} condition - The condition type\n   * @param {Map<string, any>} parameters - Additional parameters for the condition\n   */\n  constructor(\n    condition: RollupConditionType = RollupConditionType.ALWAYS,\n    parameters: Map<string, any> = new Map(),\n  ) {\n    super(\"rollupCondition\");\n    this._condition = condition;\n    this._parameters = parameters;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for condition\n   * @return {RollupConditionType}\n   */\n  get condition(): RollupConditionType {\n    return this._condition;\n  }\n\n  /**\n   * Setter for condition\n   * @param {RollupConditionType} condition\n   */\n  set condition(condition: RollupConditionType) {\n    this._condition = condition;\n  }\n\n  /**\n   * Getter for parameters\n   * @return {Map<string, any>}\n   */\n  get parameters(): Map<string, any> {\n    return this._parameters;\n  }\n\n  /**\n   * Setter for parameters\n   * @param {Map<string, any>} parameters\n   */\n  set parameters(parameters: Map<string, any>) {\n    this._parameters = parameters;\n  }\n\n  /**\n   * Evaluate the condition for an activity\n   * @param {Activity} activity - The activity to evaluate the condition for\n   * @return {boolean} - True if the condition is met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    switch (this._condition) {\n      case RollupConditionType.SATISFIED:\n        return activity.successStatus === SuccessStatus.PASSED;\n      case RollupConditionType.OBJECTIVE_STATUS_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RollupConditionType.OBJECTIVE_MEASURE_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RollupConditionType.OBJECTIVE_MEASURE_GREATER_THAN: {\n        const greaterThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure > greaterThanValue\n        );\n      }\n      case RollupConditionType.OBJECTIVE_MEASURE_LESS_THAN: {\n        const lessThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure < lessThanValue\n        );\n      }\n      case RollupConditionType.COMPLETED:\n        return activity.isCompleted;\n      case RollupConditionType.PROGRESS_KNOWN:\n        return activity.completionStatus !== CompletionStatus.UNKNOWN;\n      case RollupConditionType.ATTEMPTED:\n        return activity.attemptCount > 0;\n      case RollupConditionType.NOT_ATTEMPTED:\n        return activity.attemptCount === 0;\n      case RollupConditionType.ALWAYS:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RollupCondition\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      condition: this._condition,\n      parameters: Object.fromEntries(this._parameters),\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a rollup rule\n */\nexport class RollupRule extends BaseCMI {\n  private _conditions: RollupCondition[] = [];\n  private _action: RollupActionType = RollupActionType.SATISFIED;\n  private _consideration: RollupConsiderationType = RollupConsiderationType.ALL;\n  private _minimumCount: number = 0;\n  private _minimumPercent: number = 0;\n\n  /**\n   * Constructor for RollupRule\n   * @param {RollupActionType} action - The action to take when the rule conditions are met\n   * @param {RollupConsiderationType} consideration - How to consider child activities\n   * @param {number} minimumCount - The minimum count for AT_LEAST_COUNT consideration\n   * @param {number} minimumPercent - The minimum percent for AT_LEAST_PERCENT consideration\n   */\n  constructor(\n    action: RollupActionType = RollupActionType.SATISFIED,\n    consideration: RollupConsiderationType = RollupConsiderationType.ALL,\n    minimumCount: number = 0,\n    minimumPercent: number = 0,\n  ) {\n    super(\"rollupRule\");\n    this._action = action;\n    this._consideration = consideration;\n    this._minimumCount = minimumCount;\n    this._minimumPercent = minimumPercent;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._conditions = [];\n  }\n\n  /**\n   * Getter for conditions\n   * @return {RollupCondition[]}\n   */\n  get conditions(): RollupCondition[] {\n    return this._conditions;\n  }\n\n  /**\n   * Add a condition to the rule\n   * @param {RollupCondition} condition - The condition to add\n   */\n  addCondition(condition: RollupCondition): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(condition instanceof RollupCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._conditions.push(condition);\n  }\n\n  /**\n   * Remove a condition from the rule\n   * @param {RollupCondition} condition - The condition to remove\n   * @return {boolean} - True if the condition was removed, false otherwise\n   */\n  removeCondition(condition: RollupCondition): boolean {\n    const index = this._conditions.indexOf(condition);\n    if (index !== -1) {\n      this._conditions.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for action\n   * @return {RollupActionType}\n   */\n  get action(): RollupActionType {\n    return this._action;\n  }\n\n  /**\n   * Setter for action\n   * @param {RollupActionType} action\n   */\n  set action(action: RollupActionType) {\n    this._action = action;\n  }\n\n  /**\n   * Getter for consideration\n   * @return {RollupConsiderationType}\n   */\n  get consideration(): RollupConsiderationType {\n    return this._consideration;\n  }\n\n  /**\n   * Setter for consideration\n   * @param {RollupConsiderationType} consideration\n   */\n  set consideration(consideration: RollupConsiderationType) {\n    this._consideration = consideration;\n  }\n\n  /**\n   * Getter for minimumCount\n   * @return {number}\n   */\n  get minimumCount(): number {\n    return this._minimumCount;\n  }\n\n  /**\n   * Setter for minimumCount\n   * @param {number} minimumCount\n   */\n  set minimumCount(minimumCount: number) {\n    if (minimumCount >= 0) {\n      this._minimumCount = minimumCount;\n    }\n  }\n\n  /**\n   * Getter for minimumPercent\n   * @return {number}\n   */\n  get minimumPercent(): number {\n    return this._minimumPercent;\n  }\n\n  /**\n   * Setter for minimumPercent\n   * @param {number} minimumPercent\n   */\n  set minimumPercent(minimumPercent: number) {\n    if (minimumPercent >= 0 && minimumPercent <= 100) {\n      this._minimumPercent = minimumPercent;\n    }\n  }\n\n  /**\n   * Evaluate the rule for a set of child activities\n   * @param {Activity[]} children - The child activities to evaluate the rule for\n   * @return {boolean} - True if the rule conditions are met, false otherwise\n   */\n  evaluate(children: Activity[]): boolean {\n    if (children.length === 0) {\n      return false;\n    }\n\n    // Filter children that meet all conditions\n    const matchingChildren = children.filter((child) => {\n      return this._conditions.every((condition) => condition.evaluate(child));\n    });\n\n    // Apply consideration\n    switch (this._consideration) {\n      case RollupConsiderationType.ALL:\n        return matchingChildren.length === children.length;\n      case RollupConsiderationType.ANY:\n        return matchingChildren.length > 0;\n      case RollupConsiderationType.NONE:\n        return matchingChildren.length === 0;\n      case RollupConsiderationType.AT_LEAST_COUNT:\n        return matchingChildren.length >= this._minimumCount;\n      case RollupConsiderationType.AT_LEAST_PERCENT: {\n        const percent = (matchingChildren.length / children.length) * 100;\n        return percent >= this._minimumPercent;\n      }\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RollupRule\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      conditions: this._conditions,\n      action: this._action,\n      consideration: this._consideration,\n      minimumCount: this._minimumCount,\n      minimumPercent: this._minimumPercent,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a collection of rollup rules\n */\nexport class RollupRules extends BaseCMI {\n  private _rules: RollupRule[] = [];\n\n  /**\n   * Constructor for RollupRules\n   */\n  constructor() {\n    super(\"rollupRules\");\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._rules = [];\n  }\n\n  /**\n   * Getter for rules\n   * @return {RollupRule[]}\n   */\n  get rules(): RollupRule[] {\n    return this._rules;\n  }\n\n  /**\n   * Add a rule\n   * @param {RollupRule} rule - The rule to add\n   */\n  addRule(rule: RollupRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof RollupRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".rules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._rules.push(rule);\n  }\n\n  /**\n   * Remove a rule\n   * @param {RollupRule} rule - The rule to remove\n   * @return {boolean} - True if the rule was removed, false otherwise\n   */\n  removeRule(rule: RollupRule): boolean {\n    const index = this._rules.indexOf(rule);\n    if (index !== -1) {\n      this._rules.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Process rollup for an activity\n   * @param {Activity} activity - The activity to process rollup for\n   */\n  processRollup(activity: Activity): void {\n    if (!activity || activity.children.length === 0) {\n      return;\n    }\n\n    const children = activity.getAvailableChildren();\n    let completionRollup = false;\n    let successRollup = false;\n\n    // First, check if we should use measure rollup (RB.1.2.a)\n    if (activity.sequencingControls.rollupObjectiveSatisfied) {\n      const measureRollupResult = this._objectiveRollupUsingMeasure(activity, children);\n      if (measureRollupResult !== null) {\n        successRollup = true;\n        // Skip rule-based rollup if measure rollup was successful\n      }\n    }\n\n    // Process each rule (RB.1.2.b)\n    if (!successRollup) {\n      for (const rule of this._rules) {\n        if (rule.evaluate(children)) {\n          switch (rule.action) {\n            case RollupActionType.SATISFIED:\n              activity.successStatus = SuccessStatus.PASSED;\n              successRollup = true;\n              break;\n            case RollupActionType.NOT_SATISFIED:\n              activity.successStatus = SuccessStatus.FAILED;\n              successRollup = true;\n              break;\n            case RollupActionType.COMPLETED:\n              activity.completionStatus = CompletionStatus.COMPLETED;\n              activity.isCompleted = true;\n              completionRollup = true;\n              break;\n            case RollupActionType.INCOMPLETE:\n              activity.completionStatus = CompletionStatus.INCOMPLETE;\n              activity.isCompleted = false;\n              completionRollup = true;\n              break;\n          }\n        }\n      }\n    }\n\n    // If no rules applied for completion, use default rollup\n    if (!completionRollup) {\n      this._defaultCompletionRollup(activity, children);\n    }\n\n    // If no rules applied for success, use default rollup (RB.1.2.c)\n    if (!successRollup) {\n      this._defaultSuccessRollup(activity, children);\n    }\n  }\n\n  /**\n   * Default completion rollup\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @private\n   */\n  private _defaultCompletionRollup(activity: Activity, children: Activity[]): void {\n    // If all children are completed, mark the parent as completed\n    const allCompleted = children.every((child) => child.isCompleted);\n    if (allCompleted) {\n      activity.completionStatus = CompletionStatus.COMPLETED;\n      activity.isCompleted = true;\n    } else {\n      // If any child is incomplete, mark the parent as incomplete\n      const anyIncomplete = children.some(\n        (child) => child.completionStatus === CompletionStatus.INCOMPLETE,\n      );\n      if (anyIncomplete) {\n        activity.completionStatus = CompletionStatus.INCOMPLETE;\n        activity.isCompleted = false;\n      }\n    }\n  }\n\n  /**\n   * Objective Rollup Using Measure Process (RB.1.2.a)\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @return {boolean | null} - True if satisfied, false if not satisfied, null if measure rollup not applicable\n   * @private\n   */\n  private _objectiveRollupUsingMeasure(activity: Activity, children: Activity[]): boolean | null {\n    // Check if objective measure weight is properly configured\n    const objectiveMeasureWeight = activity.sequencingControls.objectiveMeasureWeight;\n    if (objectiveMeasureWeight <= 0) {\n      return null; // Measure rollup not applicable\n    }\n\n    // Calculate weighted average of child objective measures\n    let totalWeight = 0;\n    let weightedSum = 0;\n    let hasValidMeasures = false;\n\n    for (const child of children) {\n      // Only include children that should contribute to rollup\n      if (!child.sequencingControls.rollupObjectiveSatisfied) {\n        continue;\n      }\n\n      // Check if child has a valid objective measure\n      if (child.objectiveMeasureStatus && child.objectiveMeasureStatus === true) {\n        const childWeight = child.sequencingControls.objectiveMeasureWeight;\n        if (childWeight > 0) {\n          weightedSum += child.objectiveNormalizedMeasure * childWeight;\n          totalWeight += childWeight;\n          hasValidMeasures = true;\n        }\n      }\n    }\n\n    // If no valid measures found, measure rollup is not applicable\n    if (!hasValidMeasures || totalWeight === 0) {\n      return null;\n    }\n\n    // Calculate the normalized measure for the parent activity\n    const normalizedMeasure = weightedSum / totalWeight;\n    activity.objectiveNormalizedMeasure = normalizedMeasure;\n    activity.objectiveMeasureStatus = true;\n\n    // Determine satisfaction based on scaled passing score\n    if (normalizedMeasure >= activity.scaledPassingScore) {\n      activity.successStatus = SuccessStatus.PASSED;\n      activity.objectiveSatisfiedStatus = true;\n      return true;\n    } else {\n      activity.successStatus = SuccessStatus.FAILED;\n      activity.objectiveSatisfiedStatus = false;\n      return false;\n    }\n  }\n\n  /**\n   * Default success rollup\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @private\n   */\n  private _defaultSuccessRollup(activity: Activity, children: Activity[]): void {\n    // If all children are satisfied, mark the parent as satisfied\n    const allSatisfied = children.every((child) => child.successStatus === SuccessStatus.PASSED);\n    if (allSatisfied) {\n      activity.successStatus = SuccessStatus.PASSED;\n    } else {\n      // If any child is not satisfied, mark the parent as not satisfied\n      const anyNotSatisfied = children.some(\n        (child) => child.successStatus === SuccessStatus.FAILED,\n      );\n      if (anyNotSatisfied) {\n        activity.successStatus = SuccessStatus.FAILED;\n      }\n    }\n  }\n\n  /**\n   * toJSON for RollupRules\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      rules: this._rules,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","const ValidLanguages: string[] = [\n  \"aa\",\n  \"ab\",\n  \"ae\",\n  \"af\",\n  \"ak\",\n  \"am\",\n  \"an\",\n  \"ar\",\n  \"as\",\n  \"av\",\n  \"ay\",\n  \"az\",\n  \"ba\",\n  \"be\",\n  \"bg\",\n  \"bh\",\n  \"bi\",\n  \"bm\",\n  \"bn\",\n  \"bo\",\n  \"br\",\n  \"bs\",\n  \"ca\",\n  \"ce\",\n  \"ch\",\n  \"co\",\n  \"cr\",\n  \"cs\",\n  \"cu\",\n  \"cv\",\n  \"cy\",\n  \"da\",\n  \"de\",\n  \"dv\",\n  \"dz\",\n  \"ee\",\n  \"el\",\n  \"en\",\n  \"eo\",\n  \"es\",\n  \"et\",\n  \"eu\",\n  \"fa\",\n  \"ff\",\n  \"fi\",\n  \"fj\",\n  \"fo\",\n  \"fr\",\n  \"fy\",\n  \"ga\",\n  \"gd\",\n  \"gl\",\n  \"gn\",\n  \"gu\",\n  \"gv\",\n  \"ha\",\n  \"he\",\n  \"hi\",\n  \"ho\",\n  \"hr\",\n  \"ht\",\n  \"hu\",\n  \"hy\",\n  \"hz\",\n  \"ia\",\n  \"id\",\n  \"ie\",\n  \"ig\",\n  \"ii\",\n  \"ik\",\n  \"io\",\n  \"is\",\n  \"it\",\n  \"iu\",\n  \"ja\",\n  \"jv\",\n  \"ka\",\n  \"kg\",\n  \"ki\",\n  \"kj\",\n  \"kk\",\n  \"kl\",\n  \"km\",\n  \"kn\",\n  \"ko\",\n  \"kr\",\n  \"ks\",\n  \"ku\",\n  \"kv\",\n  \"kw\",\n  \"ky\",\n  \"la\",\n  \"lb\",\n  \"lg\",\n  \"li\",\n  \"ln\",\n  \"lo\",\n  \"lt\",\n  \"lu\",\n  \"lv\",\n  \"mg\",\n  \"mh\",\n  \"mi\",\n  \"mk\",\n  \"ml\",\n  \"mn\",\n  \"mo\",\n  \"mr\",\n  \"ms\",\n  \"mt\",\n  \"my\",\n  \"na\",\n  \"nb\",\n  \"nd\",\n  \"ne\",\n  \"ng\",\n  \"nl\",\n  \"nn\",\n  \"no\",\n  \"nr\",\n  \"nv\",\n  \"ny\",\n  \"oc\",\n  \"oj\",\n  \"om\",\n  \"or\",\n  \"os\",\n  \"pa\",\n  \"pi\",\n  \"pl\",\n  \"ps\",\n  \"pt\",\n  \"qu\",\n  \"rm\",\n  \"rn\",\n  \"ro\",\n  \"ru\",\n  \"rw\",\n  \"sa\",\n  \"sc\",\n  \"sd\",\n  \"se\",\n  \"sg\",\n  \"sh\",\n  \"si\",\n  \"sk\",\n  \"sl\",\n  \"sm\",\n  \"sn\",\n  \"so\",\n  \"sq\",\n  \"sr\",\n  \"ss\",\n  \"st\",\n  \"su\",\n  \"sv\",\n  \"sw\",\n  \"ta\",\n  \"te\",\n  \"tg\",\n  \"th\",\n  \"ti\",\n  \"tk\",\n  \"tl\",\n  \"tn\",\n  \"to\",\n  \"tr\",\n  \"ts\",\n  \"tt\",\n  \"tw\",\n  \"ty\",\n  \"ug\",\n  \"uk\",\n  \"ur\",\n  \"uz\",\n  \"ve\",\n  \"vi\",\n  \"vo\",\n  \"wa\",\n  \"wo\",\n  \"xh\",\n  \"yi\",\n  \"yo\",\n  \"za\",\n  \"zh\",\n  \"zu\",\n  \"aar\",\n  \"abk\",\n  \"ave\",\n  \"afr\",\n  \"aka\",\n  \"amh\",\n  \"arg\",\n  \"ara\",\n  \"asm\",\n  \"ava\",\n  \"aym\",\n  \"aze\",\n  \"bak\",\n  \"bel\",\n  \"bul\",\n  \"bih\",\n  \"bis\",\n  \"bam\",\n  \"ben\",\n  \"tib\",\n  \"bod\",\n  \"bre\",\n  \"bos\",\n  \"cat\",\n  \"che\",\n  \"cha\",\n  \"cos\",\n  \"cre\",\n  \"cze\",\n  \"ces\",\n  \"chu\",\n  \"chv\",\n  \"wel\",\n  \"cym\",\n  \"dan\",\n  \"ger\",\n  \"deu\",\n  \"div\",\n  \"dzo\",\n  \"ewe\",\n  \"gre\",\n  \"ell\",\n  \"eng\",\n  \"epo\",\n  \"spa\",\n  \"est\",\n  \"baq\",\n  \"eus\",\n  \"per\",\n  \"fas\",\n  \"ful\",\n  \"fin\",\n  \"fij\",\n  \"fao\",\n  \"fre\",\n  \"fra\",\n  \"fry\",\n  \"gle\",\n  \"gla\",\n  \"glg\",\n  \"grn\",\n  \"guj\",\n  \"glv\",\n  \"hau\",\n  \"heb\",\n  \"hin\",\n  \"hmo\",\n  \"hrv\",\n  \"hat\",\n  \"hun\",\n  \"arm\",\n  \"hye\",\n  \"her\",\n  \"ina\",\n  \"ind\",\n  \"ile\",\n  \"ibo\",\n  \"iii\",\n  \"ipk\",\n  \"ido\",\n  \"ice\",\n  \"isl\",\n  \"ita\",\n  \"iku\",\n  \"jpn\",\n  \"jav\",\n  \"geo\",\n  \"kat\",\n  \"kon\",\n  \"kik\",\n  \"kua\",\n  \"kaz\",\n  \"kal\",\n  \"khm\",\n  \"kan\",\n  \"kor\",\n  \"kau\",\n  \"kas\",\n  \"kur\",\n  \"kom\",\n  \"cor\",\n  \"kir\",\n  \"lat\",\n  \"ltz\",\n  \"lug\",\n  \"lim\",\n  \"lin\",\n  \"lao\",\n  \"lit\",\n  \"lub\",\n  \"lav\",\n  \"mlg\",\n  \"mah\",\n  \"mao\",\n  \"mri\",\n  \"mac\",\n  \"mkd\",\n  \"mal\",\n  \"mon\",\n  \"mol\",\n  \"mar\",\n  \"may\",\n  \"msa\",\n  \"mlt\",\n  \"bur\",\n  \"mya\",\n  \"nau\",\n  \"nob\",\n  \"nde\",\n  \"nep\",\n  \"ndo\",\n  \"dut\",\n  \"nld\",\n  \"nno\",\n  \"nor\",\n  \"nbl\",\n  \"nav\",\n  \"nya\",\n  \"oci\",\n  \"oji\",\n  \"orm\",\n  \"ori\",\n  \"oss\",\n  \"pan\",\n  \"pli\",\n  \"pol\",\n  \"pus\",\n  \"por\",\n  \"que\",\n  \"roh\",\n  \"run\",\n  \"rum\",\n  \"ron\",\n  \"rus\",\n  \"kin\",\n  \"san\",\n  \"srd\",\n  \"snd\",\n  \"sme\",\n  \"sag\",\n  \"slo\",\n  \"sin\",\n  \"slk\",\n  \"slv\",\n  \"smo\",\n  \"sna\",\n  \"som\",\n  \"alb\",\n  \"sqi\",\n  \"srp\",\n  \"ssw\",\n  \"sot\",\n  \"sun\",\n  \"swe\",\n  \"swa\",\n  \"tam\",\n  \"tel\",\n  \"tgk\",\n  \"tha\",\n  \"tir\",\n  \"tuk\",\n  \"tgl\",\n  \"tsn\",\n  \"ton\",\n  \"tur\",\n  \"tso\",\n  \"tat\",\n  \"twi\",\n  \"tah\",\n  \"uig\",\n  \"ukr\",\n  \"urd\",\n  \"uzb\",\n  \"ven\",\n  \"vie\",\n  \"vol\",\n  \"wln\",\n  \"wol\",\n  \"xho\",\n  \"yid\",\n  \"yor\",\n  \"zha\",\n  \"chi\",\n  \"zho\",\n  \"zul\",\n];\nexport default ValidLanguages;\n","import { BaseCMI } from \"../../common/base_cmi\";\n\n/**\n * Enum for selection timing\n */\nexport enum SelectionTiming {\n  NEVER = \"never\",\n  ONCE = \"once\",\n  ON_EACH_NEW_ATTEMPT = \"onEachNewAttempt\",\n}\n\n/**\n * Enum for randomization timing\n */\nexport enum RandomizationTiming {\n  NEVER = \"never\",\n  ONCE = \"once\",\n  ON_EACH_NEW_ATTEMPT = \"onEachNewAttempt\",\n}\n\n/**\n * Class representing SCORM 2004 sequencing controls\n */\nexport class SequencingControls extends BaseCMI {\n  // Sequencing Control Modes\n  private _enabled: boolean = true;\n  private _choice: boolean = true;\n  private _choiceExit: boolean = true;\n  private _flow: boolean = false;\n  private _forwardOnly: boolean = false;\n  private _useCurrentAttemptObjectiveInfo: boolean = true;\n  private _useCurrentAttemptProgressInfo: boolean = true;\n\n  // Constrain Choice Controls\n  private _preventActivation: boolean = false;\n  private _constrainChoice: boolean = false;\n\n  // Rollup Controls\n  private _rollupObjectiveSatisfied: boolean = true;\n  private _rollupProgressCompletion: boolean = true;\n  private _objectiveMeasureWeight: number = 1.0;\n\n  // Selection Controls\n  private _selectionTiming: SelectionTiming = SelectionTiming.NEVER;\n  private _selectCount: number | null = null;\n  private _selectionCountStatus: boolean = false;\n  private _randomizeChildren: boolean = false;\n\n  // Randomization Controls\n  private _randomizationTiming: RandomizationTiming = RandomizationTiming.NEVER;\n  private _reorderChildren: boolean = false;\n\n  /**\n   * Constructor for SequencingControls\n   */\n  constructor() {\n    super(\"sequencingControls\");\n  }\n\n  /**\n   * Reset the sequencing controls to their default values\n   */\n  reset() {\n    this._initialized = false;\n    this._enabled = true;\n    this._choice = true;\n    this._choiceExit = true;\n    this._flow = false;\n    this._forwardOnly = false;\n    this._useCurrentAttemptObjectiveInfo = true;\n    this._useCurrentAttemptProgressInfo = true;\n    this._preventActivation = false;\n    this._constrainChoice = false;\n    this._rollupObjectiveSatisfied = true;\n    this._rollupProgressCompletion = true;\n    this._objectiveMeasureWeight = 1.0;\n    this._selectionTiming = SelectionTiming.NEVER;\n    this._selectCount = null;\n    this._selectionCountStatus = false;\n    this._randomizeChildren = false;\n    this._randomizationTiming = RandomizationTiming.NEVER;\n    this._reorderChildren = false;\n  }\n\n  /**\n   * Getter for enabled\n   * @return {boolean}\n   */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  /**\n   * Setter for enabled\n   * @param {boolean} enabled\n   */\n  set enabled(enabled: boolean) {\n    this._enabled = enabled;\n  }\n\n  /**\n   * Getter for choice\n   * @return {boolean}\n   */\n  get choice(): boolean {\n    return this._choice;\n  }\n\n  /**\n   * Setter for choice\n   * @param {boolean} choice\n   */\n  set choice(choice: boolean) {\n    this._choice = choice;\n  }\n\n  /**\n   * Getter for choiceExit\n   * @return {boolean}\n   */\n  get choiceExit(): boolean {\n    return this._choiceExit;\n  }\n\n  /**\n   * Setter for choiceExit\n   * @param {boolean} choiceExit\n   */\n  set choiceExit(choiceExit: boolean) {\n    this._choiceExit = choiceExit;\n  }\n\n  /**\n   * Getter for flow\n   * @return {boolean}\n   */\n  get flow(): boolean {\n    return this._flow;\n  }\n\n  /**\n   * Setter for flow\n   * @param {boolean} flow\n   */\n  set flow(flow: boolean) {\n    this._flow = flow;\n  }\n\n  /**\n   * Getter for forwardOnly\n   * @return {boolean}\n   */\n  get forwardOnly(): boolean {\n    return this._forwardOnly;\n  }\n\n  /**\n   * Setter for forwardOnly\n   * @param {boolean} forwardOnly\n   */\n  set forwardOnly(forwardOnly: boolean) {\n    this._forwardOnly = forwardOnly;\n  }\n\n  /**\n   * Getter for useCurrentAttemptObjectiveInfo\n   * @return {boolean}\n   */\n  get useCurrentAttemptObjectiveInfo(): boolean {\n    return this._useCurrentAttemptObjectiveInfo;\n  }\n\n  /**\n   * Setter for useCurrentAttemptObjectiveInfo\n   * @param {boolean} useCurrentAttemptObjectiveInfo\n   */\n  set useCurrentAttemptObjectiveInfo(useCurrentAttemptObjectiveInfo: boolean) {\n    this._useCurrentAttemptObjectiveInfo = useCurrentAttemptObjectiveInfo;\n  }\n\n  /**\n   * Getter for useCurrentAttemptProgressInfo\n   * @return {boolean}\n   */\n  get useCurrentAttemptProgressInfo(): boolean {\n    return this._useCurrentAttemptProgressInfo;\n  }\n\n  /**\n   * Setter for useCurrentAttemptProgressInfo\n   * @param {boolean} useCurrentAttemptProgressInfo\n   */\n  set useCurrentAttemptProgressInfo(useCurrentAttemptProgressInfo: boolean) {\n    this._useCurrentAttemptProgressInfo = useCurrentAttemptProgressInfo;\n  }\n\n  /**\n   * Getter for preventActivation\n   * @return {boolean}\n   */\n  get preventActivation(): boolean {\n    return this._preventActivation;\n  }\n\n  /**\n   * Setter for preventActivation\n   * @param {boolean} preventActivation\n   */\n  set preventActivation(preventActivation: boolean) {\n    this._preventActivation = preventActivation;\n  }\n\n  /**\n   * Getter for constrainChoice\n   * @return {boolean}\n   */\n  get constrainChoice(): boolean {\n    return this._constrainChoice;\n  }\n\n  /**\n   * Setter for constrainChoice\n   * @param {boolean} constrainChoice\n   */\n  set constrainChoice(constrainChoice: boolean) {\n    this._constrainChoice = constrainChoice;\n  }\n\n  /**\n   * Getter for rollupObjectiveSatisfied\n   * @return {boolean}\n   */\n  get rollupObjectiveSatisfied(): boolean {\n    return this._rollupObjectiveSatisfied;\n  }\n\n  /**\n   * Setter for rollupObjectiveSatisfied\n   * @param {boolean} rollupObjectiveSatisfied\n   */\n  set rollupObjectiveSatisfied(rollupObjectiveSatisfied: boolean) {\n    this._rollupObjectiveSatisfied = rollupObjectiveSatisfied;\n  }\n\n  /**\n   * Getter for rollupProgressCompletion\n   * @return {boolean}\n   */\n  get rollupProgressCompletion(): boolean {\n    return this._rollupProgressCompletion;\n  }\n\n  /**\n   * Setter for rollupProgressCompletion\n   * @param {boolean} rollupProgressCompletion\n   */\n  set rollupProgressCompletion(rollupProgressCompletion: boolean) {\n    this._rollupProgressCompletion = rollupProgressCompletion;\n  }\n\n  /**\n   * Getter for objectiveMeasureWeight\n   * @return {number}\n   */\n  get objectiveMeasureWeight(): number {\n    return this._objectiveMeasureWeight;\n  }\n\n  /**\n   * Setter for objectiveMeasureWeight\n   * @param {number} objectiveMeasureWeight\n   */\n  set objectiveMeasureWeight(objectiveMeasureWeight: number) {\n    // According to SCORM 2004, weight must be >= 0 but there's no upper limit\n    if (objectiveMeasureWeight >= 0) {\n      this._objectiveMeasureWeight = objectiveMeasureWeight;\n    }\n  }\n\n  /**\n   * Check if choice navigation is allowed\n   * @return {boolean} - True if choice navigation is allowed, false otherwise\n   */\n  isChoiceNavigationAllowed(): boolean {\n    return this._enabled && !this._constrainChoice;\n  }\n\n  /**\n   * Check if flow navigation is allowed\n   * @return {boolean} - True if flow navigation is allowed, false otherwise\n   */\n  isFlowNavigationAllowed(): boolean {\n    return this._enabled && this._flow;\n  }\n\n  /**\n   * Check if forward navigation is allowed\n   * @return {boolean} - True if forward navigation is allowed, false otherwise\n   */\n  isForwardNavigationAllowed(): boolean {\n    // Forward navigation (Continue request) is only valid when flow mode is\n    // enabled. The forwardOnly flag simply restricts backward navigation and\n    // does not affect the ability to move forward when flow is disabled.\n    return this._enabled && this._flow;\n  }\n\n  /**\n   * Check if backward navigation is allowed\n   * @return {boolean} - True if backward navigation is allowed, false otherwise\n   */\n  isBackwardNavigationAllowed(): boolean {\n    // Previous navigation is also part of flow based navigation and should only\n    // be permitted when flow mode is enabled and forwardOnly does not restrict\n    // going backwards.\n    return this._enabled && this._flow && !this._forwardOnly;\n  }\n\n  /**\n   * Getter for selectionTiming\n   * @return {SelectionTiming}\n   */\n  get selectionTiming(): SelectionTiming {\n    return this._selectionTiming;\n  }\n\n  /**\n   * Setter for selectionTiming\n   * @param {SelectionTiming} selectionTiming\n   */\n  set selectionTiming(selectionTiming: SelectionTiming) {\n    this._selectionTiming = selectionTiming;\n  }\n\n  /**\n   * Getter for selectCount\n   * @return {number | null}\n   */\n  get selectCount(): number | null {\n    return this._selectCount;\n  }\n\n  /**\n   * Setter for selectCount\n   * @param {number | null} selectCount\n   */\n  set selectCount(selectCount: number | null) {\n    if (selectCount === null || selectCount > 0) {\n      this._selectCount = selectCount;\n    }\n  }\n\n  /**\n   * Getter for selectionCountStatus\n   * @return {boolean}\n   */\n  get selectionCountStatus(): boolean {\n    return this._selectionCountStatus;\n  }\n\n  /**\n   * Setter for selectionCountStatus\n   * @param {boolean} selectionCountStatus\n   */\n  set selectionCountStatus(selectionCountStatus: boolean) {\n    this._selectionCountStatus = selectionCountStatus;\n  }\n\n  /**\n   * Getter for randomizeChildren\n   * @return {boolean}\n   */\n  get randomizeChildren(): boolean {\n    return this._randomizeChildren;\n  }\n\n  /**\n   * Setter for randomizeChildren\n   * @param {boolean} randomizeChildren\n   */\n  set randomizeChildren(randomizeChildren: boolean) {\n    this._randomizeChildren = randomizeChildren;\n  }\n\n  /**\n   * Getter for randomizationTiming\n   * @return {RandomizationTiming}\n   */\n  get randomizationTiming(): RandomizationTiming {\n    return this._randomizationTiming;\n  }\n\n  /**\n   * Setter for randomizationTiming\n   * @param {RandomizationTiming} randomizationTiming\n   */\n  set randomizationTiming(randomizationTiming: RandomizationTiming) {\n    this._randomizationTiming = randomizationTiming;\n  }\n\n  /**\n   * Getter for reorderChildren\n   * @return {boolean}\n   */\n  get reorderChildren(): boolean {\n    return this._reorderChildren;\n  }\n\n  /**\n   * Setter for reorderChildren\n   * @param {boolean} reorderChildren\n   */\n  set reorderChildren(reorderChildren: boolean) {\n    this._reorderChildren = reorderChildren;\n  }\n\n  /**\n   * toJSON for SequencingControls\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      enabled: this._enabled,\n      choice: this._choice,\n      choiceExit: this._choiceExit,\n      flow: this._flow,\n      forwardOnly: this._forwardOnly,\n      useCurrentAttemptObjectiveInfo: this._useCurrentAttemptObjectiveInfo,\n      useCurrentAttemptProgressInfo: this._useCurrentAttemptProgressInfo,\n      preventActivation: this._preventActivation,\n      constrainChoice: this._constrainChoice,\n      rollupObjectiveSatisfied: this._rollupObjectiveSatisfied,\n      rollupProgressCompletion: this._rollupProgressCompletion,\n      objectiveMeasureWeight: this._objectiveMeasureWeight,\n      selectionTiming: this._selectionTiming,\n      selectCount: this._selectCount,\n      selectionCountStatus: this._selectionCountStatus,\n      randomizeChildren: this._randomizeChildren,\n      randomizationTiming: this._randomizationTiming,\n      reorderChildren: this._reorderChildren,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { scorm2004_regex } from \"../../../constants/regex\";\nimport { check2004ValidFormat } from \"../validation\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { CompletionStatus, SuccessStatus } from \"../../../constants/enums\";\nimport { SequencingControls } from \"./sequencing_controls\";\nimport { SequencingRules } from \"./sequencing_rules\";\nimport { RollupRules } from \"./rollup_rules\";\n\n/**\n * Class representing a single activity in the SCORM 2004 activity tree\n */\nexport class Activity extends BaseCMI {\n  private _id: string = \"\";\n  private _title: string = \"\";\n  private _children: Activity[] = [];\n  private _parent: Activity | null = null;\n  private _isVisible: boolean = true;\n  private _isActive: boolean = false;\n  private _isSuspended: boolean = false;\n  private _isCompleted: boolean = false;\n  private _completionStatus: CompletionStatus = CompletionStatus.UNKNOWN;\n  private _successStatus: SuccessStatus = SuccessStatus.UNKNOWN;\n  private _attemptCount: number = 0;\n  private _attemptCompletionAmount: number = 0;\n  private _attemptAbsoluteDuration: string = \"PT0H0M0S\";\n  private _attemptExperiencedDuration: string = \"PT0H0M0S\";\n  private _activityAbsoluteDuration: string = \"PT0H0M0S\";\n  private _activityExperiencedDuration: string = \"PT0H0M0S\";\n  private _objectiveSatisfiedStatus: boolean = false;\n  private _objectiveMeasureStatus: boolean = false;\n  private _objectiveNormalizedMeasure: number = 0;\n  private _scaledPassingScore: number = 0.7; // Default passing score\n  private _isHiddenFromChoice: boolean = false;\n  private _isAvailable: boolean = true;\n  private _attemptLimit: number | null = null;\n  private _attemptAbsoluteDurationLimit: string | null = null;\n  private _activityAbsoluteDurationLimit: string | null = null;\n  private _timeLimitAction: string | null = null;\n  private _timeLimitDuration: string | null = null;\n  private _beginTimeLimit: string | null = null;\n  private _endTimeLimit: string | null = null;\n  private _sequencingControls: SequencingControls;\n  private _sequencingRules: SequencingRules;\n  private _rollupRules: RollupRules;\n  private _processedChildren: Activity[] | null = null;\n  private _isNewAttempt: boolean = false;\n\n  /**\n   * Constructor for Activity\n   * @param {string} id - The unique identifier for this activity\n   * @param {string} title - The title of this activity\n   */\n  constructor(id: string = \"\", title: string = \"\") {\n    super(\"activity\");\n    this._id = id;\n    this._title = title;\n    this._sequencingControls = new SequencingControls();\n    this._sequencingRules = new SequencingRules();\n    this._rollupRules = new RollupRules();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    // Initialize children\n    for (const child of this._children) {\n      child.initialize();\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._isActive = false;\n    this._isSuspended = false;\n    this._isCompleted = false;\n    this._completionStatus = CompletionStatus.UNKNOWN;\n    this._successStatus = SuccessStatus.UNKNOWN;\n    this._attemptCount = 0;\n    this._attemptCompletionAmount = 0;\n    this._attemptAbsoluteDuration = \"PT0H0M0S\";\n    this._attemptExperiencedDuration = \"PT0H0M0S\";\n    this._activityAbsoluteDuration = \"PT0H0M0S\";\n    this._activityExperiencedDuration = \"PT0H0M0S\";\n    this._objectiveSatisfiedStatus = false;\n    this._objectiveMeasureStatus = false;\n    this._objectiveNormalizedMeasure = 0;\n\n    // Reset children\n    for (const child of this._children) {\n      child.reset();\n    }\n  }\n\n  /**\n   * Getter for id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for title\n   * @return {string}\n   */\n  get title(): string {\n    return this._title;\n  }\n\n  /**\n   * Setter for title\n   * @param {string} title\n   */\n  set title(title: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".title\", title, scorm2004_regex.CMILangString250)\n    ) {\n      this._title = title;\n    }\n  }\n\n  /**\n   * Getter for children\n   * @return {Activity[]}\n   */\n  get children(): Activity[] {\n    return this._children;\n  }\n\n  /**\n   * Add a child activity to this activity\n   * @param {Activity} child - The child activity to add\n   */\n  addChild(child: Activity): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(child instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".children\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    child._parent = this;\n    this._children.push(child);\n  }\n\n  /**\n   * Remove a child activity from this activity\n   * @param {Activity} child - The child activity to remove\n   * @return {boolean} - True if the child was removed, false otherwise\n   */\n  removeChild(child: Activity): boolean {\n    const index = this._children.indexOf(child);\n    if (index !== -1) {\n      this._children.splice(index, 1);\n      child._parent = null;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for parent\n   * @return {Activity | null}\n   */\n  get parent(): Activity | null {\n    return this._parent;\n  }\n\n  /**\n   * Getter for isVisible\n   * @return {boolean}\n   */\n  get isVisible(): boolean {\n    return this._isVisible;\n  }\n\n  /**\n   * Setter for isVisible\n   * @param {boolean} isVisible\n   */\n  set isVisible(isVisible: boolean) {\n    this._isVisible = isVisible;\n  }\n\n  /**\n   * Getter for isActive\n   * @return {boolean}\n   */\n  get isActive(): boolean {\n    return this._isActive;\n  }\n\n  /**\n   * Setter for isActive\n   * @param {boolean} isActive\n   */\n  set isActive(isActive: boolean) {\n    this._isActive = isActive;\n  }\n\n  /**\n   * Getter for isSuspended\n   * @return {boolean}\n   */\n  get isSuspended(): boolean {\n    return this._isSuspended;\n  }\n\n  /**\n   * Setter for isSuspended\n   * @param {boolean} isSuspended\n   */\n  set isSuspended(isSuspended: boolean) {\n    this._isSuspended = isSuspended;\n  }\n\n  /**\n   * Getter for isCompleted\n   * @return {boolean}\n   */\n  get isCompleted(): boolean {\n    return this._isCompleted;\n  }\n\n  /**\n   * Setter for isCompleted\n   * @param {boolean} isCompleted\n   */\n  set isCompleted(isCompleted: boolean) {\n    this._isCompleted = isCompleted;\n    // Update completion status based on boolean value\n    if (isCompleted) {\n      this._completionStatus = CompletionStatus.COMPLETED;\n    } else {\n      this._completionStatus = CompletionStatus.INCOMPLETE;\n    }\n  }\n\n  /**\n   * Getter for completionStatus\n   * @return {CompletionStatus}\n   */\n  get completionStatus(): CompletionStatus {\n    return this._completionStatus;\n  }\n\n  /**\n   * Setter for completionStatus\n   * @param {CompletionStatus} completionStatus\n   */\n  set completionStatus(completionStatus: CompletionStatus) {\n    this._completionStatus = completionStatus;\n    this._isCompleted = completionStatus === CompletionStatus.COMPLETED;\n  }\n\n  /**\n   * Getter for successStatus\n   * @return {SuccessStatus}\n   */\n  get successStatus(): SuccessStatus {\n    return this._successStatus;\n  }\n\n  /**\n   * Setter for successStatus\n   * @param {SuccessStatus} successStatus\n   */\n  set successStatus(successStatus: SuccessStatus) {\n    this._successStatus = successStatus;\n  }\n\n  /**\n   * Getter for attemptCount\n   * @return {number}\n   */\n  get attemptCount(): number {\n    return this._attemptCount;\n  }\n\n  /**\n   * Setter for attemptCount\n   * @param {number} value\n   */\n  set attemptCount(value: number) {\n    this._attemptCount = value;\n  }\n\n  /**\n   * Increment the attempt count\n   */\n  incrementAttemptCount(): void {\n    this._attemptCount++;\n    this._isNewAttempt = true;\n    // Reset processed children on new attempt if needed\n    const controls = this._sequencingControls;\n    if (\n      controls.selectionTiming === \"onEachNewAttempt\" ||\n      controls.randomizationTiming === \"onEachNewAttempt\"\n    ) {\n      this._processedChildren = null;\n    }\n  }\n\n  /**\n   * Getter for objectiveSatisfiedStatus\n   * @return {boolean}\n   */\n  get objectiveSatisfiedStatus(): boolean {\n    return this._objectiveSatisfiedStatus;\n  }\n\n  /**\n   * Setter for objectiveSatisfiedStatus\n   * @param {boolean} objectiveSatisfiedStatus\n   */\n  set objectiveSatisfiedStatus(objectiveSatisfiedStatus: boolean) {\n    this._objectiveSatisfiedStatus = objectiveSatisfiedStatus;\n    // Update success status based on objective satisfaction\n    if (objectiveSatisfiedStatus) {\n      this._successStatus = SuccessStatus.PASSED;\n    } else {\n      this._successStatus = SuccessStatus.FAILED;\n    }\n  }\n\n  /**\n   * Getter for objectiveMeasureStatus\n   * @return {boolean}\n   */\n  get objectiveMeasureStatus(): boolean {\n    return this._objectiveMeasureStatus;\n  }\n\n  /**\n   * Setter for objectiveMeasureStatus\n   * @param {boolean} objectiveMeasureStatus\n   */\n  set objectiveMeasureStatus(objectiveMeasureStatus: boolean) {\n    this._objectiveMeasureStatus = objectiveMeasureStatus;\n  }\n\n  /**\n   * Getter for objectiveNormalizedMeasure\n   * @return {number}\n   */\n  get objectiveNormalizedMeasure(): number {\n    return this._objectiveNormalizedMeasure;\n  }\n\n  /**\n   * Setter for objectiveNormalizedMeasure\n   * @param {number} objectiveNormalizedMeasure\n   */\n  set objectiveNormalizedMeasure(objectiveNormalizedMeasure: number) {\n    this._objectiveNormalizedMeasure = objectiveNormalizedMeasure;\n  }\n\n  /**\n   * Getter for scaledPassingScore\n   * @return {number}\n   */\n  get scaledPassingScore(): number {\n    return this._scaledPassingScore;\n  }\n\n  /**\n   * Setter for scaledPassingScore\n   * @param {number} scaledPassingScore\n   */\n  set scaledPassingScore(scaledPassingScore: number) {\n    if (scaledPassingScore >= -1 && scaledPassingScore <= 1) {\n      this._scaledPassingScore = scaledPassingScore;\n    }\n  }\n\n  /**\n   * Getter for isHiddenFromChoice\n   * @return {boolean}\n   */\n  get isHiddenFromChoice(): boolean {\n    return this._isHiddenFromChoice;\n  }\n\n  /**\n   * Setter for isHiddenFromChoice\n   * @param {boolean} isHiddenFromChoice\n   */\n  set isHiddenFromChoice(isHiddenFromChoice: boolean) {\n    this._isHiddenFromChoice = isHiddenFromChoice;\n  }\n\n  /**\n   * Getter for isAvailable\n   * @return {boolean}\n   */\n  get isAvailable(): boolean {\n    return this._isAvailable;\n  }\n\n  /**\n   * Setter for isAvailable\n   * @param {boolean} isAvailable\n   */\n  set isAvailable(isAvailable: boolean) {\n    this._isAvailable = isAvailable;\n  }\n\n  /**\n   * Getter for attemptLimit\n   * @return {number | null}\n   */\n  get attemptLimit(): number | null {\n    return this._attemptLimit;\n  }\n\n  /**\n   * Setter for attemptLimit\n   * @param {number | null} attemptLimit\n   */\n  set attemptLimit(attemptLimit: number | null) {\n    this._attemptLimit = attemptLimit;\n  }\n\n  /**\n   * Check if attempt limit has been exceeded\n   * @return {boolean}\n   */\n  hasAttemptLimitExceeded(): boolean {\n    if (this._attemptLimit === null) {\n      return false;\n    }\n    return this._attemptCount >= this._attemptLimit;\n  }\n\n  /**\n   * Getter for timeLimitDuration\n   * @return {string | null}\n   */\n  get timeLimitDuration(): string | null {\n    return this._timeLimitDuration;\n  }\n\n  /**\n   * Setter for timeLimitDuration\n   * @param {string | null} timeLimitDuration\n   */\n  set timeLimitDuration(timeLimitDuration: string | null) {\n    this._timeLimitDuration = timeLimitDuration;\n  }\n\n  /**\n   * Getter for timeLimitAction\n   * @return {string | null}\n   */\n  get timeLimitAction(): string | null {\n    return this._timeLimitAction;\n  }\n\n  /**\n   * Setter for timeLimitAction\n   * @param {string | null} timeLimitAction\n   */\n  set timeLimitAction(timeLimitAction: string | null) {\n    this._timeLimitAction = timeLimitAction;\n  }\n\n  /**\n   * Getter for beginTimeLimit\n   * @return {string | null}\n   */\n  get beginTimeLimit(): string | null {\n    return this._beginTimeLimit;\n  }\n\n  /**\n   * Setter for beginTimeLimit\n   * @param {string | null} beginTimeLimit\n   */\n  set beginTimeLimit(beginTimeLimit: string | null) {\n    this._beginTimeLimit = beginTimeLimit;\n  }\n\n  /**\n   * Getter for endTimeLimit\n   * @return {string | null}\n   */\n  get endTimeLimit(): string | null {\n    return this._endTimeLimit;\n  }\n\n  /**\n   * Setter for endTimeLimit\n   * @param {string | null} endTimeLimit\n   */\n  set endTimeLimit(endTimeLimit: string | null) {\n    this._endTimeLimit = endTimeLimit;\n  }\n\n\n  /**\n   * Getter for attemptAbsoluteDurationLimit\n   * @return {string | null}\n   */\n  get attemptAbsoluteDurationLimit(): string | null {\n    return this._attemptAbsoluteDurationLimit;\n  }\n\n  /**\n   * Setter for attemptAbsoluteDurationLimit\n   * @param {string | null} attemptAbsoluteDurationLimit\n   */\n  set attemptAbsoluteDurationLimit(attemptAbsoluteDurationLimit: string | null) {\n    // TODO: Add proper validation for ISO 8601 duration format\n    this._attemptAbsoluteDurationLimit = attemptAbsoluteDurationLimit;\n  }\n\n  /**\n   * Getter for attemptExperiencedDuration\n   * @return {string}\n   */\n  get attemptExperiencedDuration(): string {\n    return this._attemptExperiencedDuration;\n  }\n\n  /**\n   * Setter for attemptExperiencedDuration\n   * @param {string} attemptExperiencedDuration\n   */\n  set attemptExperiencedDuration(attemptExperiencedDuration: string) {\n    // TODO: Add proper validation for ISO 8601 duration format\n    this._attemptExperiencedDuration = attemptExperiencedDuration;\n  }\n\n  /**\n   * Getter for activityAbsoluteDurationLimit\n   * @return {string | null}\n   */\n  get activityAbsoluteDurationLimit(): string | null {\n    return this._activityAbsoluteDurationLimit;\n  }\n\n  /**\n   * Setter for activityAbsoluteDurationLimit\n   * @param {string | null} activityAbsoluteDurationLimit\n   */\n  set activityAbsoluteDurationLimit(activityAbsoluteDurationLimit: string | null) {\n    // TODO: Add proper validation for ISO 8601 duration format\n    this._activityAbsoluteDurationLimit = activityAbsoluteDurationLimit;\n  }\n\n  /**\n   * Getter for activityExperiencedDuration\n   * @return {string}\n   */\n  get activityExperiencedDuration(): string {\n    return this._activityExperiencedDuration;\n  }\n\n  /**\n   * Setter for activityExperiencedDuration\n   * @param {string} activityExperiencedDuration\n   */\n  set activityExperiencedDuration(activityExperiencedDuration: string) {\n    // TODO: Add proper validation for ISO 8601 duration format\n    this._activityExperiencedDuration = activityExperiencedDuration;\n  }\n\n\n  /**\n   * Getter for sequencingControls\n   * @return {SequencingControls}\n   */\n  get sequencingControls(): SequencingControls {\n    return this._sequencingControls;\n  }\n\n  /**\n   * Setter for sequencingControls\n   * @param {SequencingControls} sequencingControls\n   */\n  set sequencingControls(sequencingControls: SequencingControls) {\n    this._sequencingControls = sequencingControls;\n  }\n\n  /**\n   * Getter for sequencingRules\n   * @return {SequencingRules}\n   */\n  get sequencingRules(): SequencingRules {\n    return this._sequencingRules;\n  }\n\n  /**\n   * Setter for sequencingRules\n   * @param {SequencingRules} sequencingRules\n   */\n  set sequencingRules(sequencingRules: SequencingRules) {\n    this._sequencingRules = sequencingRules;\n  }\n\n  /**\n   * Getter for rollupRules\n   * @return {RollupRules}\n   */\n  get rollupRules(): RollupRules {\n    return this._rollupRules;\n  }\n\n  /**\n   * Setter for rollupRules\n   * @param {RollupRules} rollupRules\n   */\n  set rollupRules(rollupRules: RollupRules) {\n    this._rollupRules = rollupRules;\n  }\n\n  /**\n   * Get available children with selection and randomization applied\n   * @return {Activity[]}\n   */\n  getAvailableChildren(): Activity[] {\n    // If no children, return empty array\n    if (this._children.length === 0) {\n      return [];\n    }\n\n    // If processed children already exist and no new attempt, return them\n    if (this._processedChildren !== null) {\n      return this._processedChildren;\n    }\n\n    // If no processing has been done yet, return all children\n    // The sequencing process will call applySelectionAndRandomization when needed\n    return this._children;\n  }\n\n  /**\n   * Set the processed children (called by SelectionRandomization)\n   * @param {Activity[]} processedChildren\n   */\n  setProcessedChildren(processedChildren: Activity[]): void {\n    this._processedChildren = processedChildren;\n  }\n\n  /**\n   * Reset processed children (used when configuration changes)\n   */\n  resetProcessedChildren(): void {\n    this._processedChildren = null;\n  }\n\n  /**\n   * Get whether this is a new attempt\n   * @return {boolean}\n   */\n  get isNewAttempt(): boolean {\n    return this._isNewAttempt;\n  }\n\n  /**\n   * Set whether this is a new attempt\n   * @param {boolean} isNewAttempt\n   */\n  set isNewAttempt(isNewAttempt: boolean) {\n    this._isNewAttempt = isNewAttempt;\n  }\n\n  /**\n   * toJSON for Activity\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      id: this._id,\n      title: this._title,\n      isVisible: this._isVisible,\n      isActive: this._isActive,\n      isSuspended: this._isSuspended,\n      isCompleted: this._isCompleted,\n      completionStatus: this._completionStatus,\n      successStatus: this._successStatus,\n      attemptCount: this._attemptCount,\n      attemptCompletionAmount: this._attemptCompletionAmount,\n      attemptAbsoluteDuration: this._attemptAbsoluteDuration,\n      attemptExperiencedDuration: this._attemptExperiencedDuration,\n      activityAbsoluteDuration: this._activityAbsoluteDuration,\n      activityExperiencedDuration: this._activityExperiencedDuration,\n      objectiveSatisfiedStatus: this._objectiveSatisfiedStatus,\n      objectiveMeasureStatus: this._objectiveMeasureStatus,\n      objectiveNormalizedMeasure: this._objectiveNormalizedMeasure,\n      children: this._children.map((child) => child.toJSON()),\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\n\n/**\n * Class representing the SCORM 2004 activity tree\n */\nexport class ActivityTree extends BaseCMI {\n  private _root: Activity | null = null;\n  private _currentActivity: Activity | null = null;\n  private _suspendedActivity: Activity | null = null;\n  private _activities: Map<string, Activity> = new Map();\n\n  /**\n   * Constructor for ActivityTree\n   */\n  constructor() {\n    super(\"activityTree\");\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    if (this._root) {\n      this._root.initialize();\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._currentActivity = null;\n    this._suspendedActivity = null;\n    // Clear the activities map so it can be rebuilt\n    this._activities.clear();\n    if (this._root) {\n      this._root.reset();\n      // Re-populate the activities map with the root and its children\n      this._activities.set(this._root.id, this._root);\n      this._addActivitiesToMap(this._root);\n    }\n  }\n\n  /**\n   * Getter for root\n   * @return {Activity | null}\n   */\n  get root(): Activity | null {\n    return this._root;\n  }\n\n  /**\n   * Setter for root\n   * @param {Activity} root\n   */\n  set root(root: Activity | null) {\n    // noinspection SuspiciousTypeOfGuard\n    if (root !== null && !(root instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".root\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    // Clear existing map when assigning a new root to avoid stale activities\n    this._activities.clear();\n    this._root = root;\n    if (root) {\n      this._activities.set(root.id, root);\n      this._addActivitiesToMap(root);\n    }\n  }\n\n  /**\n   * Recursively add activities to the activities map\n   * @param {Activity} activity\n   * @private\n   */\n  private _addActivitiesToMap(activity: Activity): void {\n    for (const child of activity.children) {\n      this._activities.set(child.id, child);\n      this._addActivitiesToMap(child);\n    }\n  }\n\n  /**\n   * Getter for currentActivity\n   * @return {Activity | null}\n   */\n  get currentActivity(): Activity | null {\n    return this._currentActivity;\n  }\n\n  /**\n   * Setter for currentActivity\n   * @param {Activity | null} activity\n   */\n  set currentActivity(activity: Activity | null) {\n    // noinspection SuspiciousTypeOfGuard\n    if (activity !== null && !(activity instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".currentActivity\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n\n    // If there's already a current activity, deactivate it\n    if (this._currentActivity) {\n      this._currentActivity.isActive = false;\n    }\n\n    // Set the new current activity and activate it\n    this._currentActivity = activity;\n    if (activity) {\n      activity.isActive = true;\n    }\n  }\n\n  /**\n   * Getter for suspendedActivity\n   * @return {Activity | null}\n   */\n  get suspendedActivity(): Activity | null {\n    return this._suspendedActivity;\n  }\n\n  /**\n   * Setter for suspendedActivity\n   * @param {Activity | null} activity\n   */\n  set suspendedActivity(activity: Activity | null) {\n    // noinspection SuspiciousTypeOfGuard\n    if (activity !== null && !(activity instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".suspendedActivity\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n\n    // If there's already a suspended activity, unsuspend it\n    if (this._suspendedActivity) {\n      this._suspendedActivity.isSuspended = false;\n    }\n\n    // Set the new suspended activity and mark it as suspended\n    this._suspendedActivity = activity;\n    if (activity) {\n      activity.isSuspended = true;\n    }\n  }\n\n  /**\n   * Get an activity by ID\n   * @param {string} id - The ID of the activity to get\n   * @return {Activity | null} - The activity with the given ID, or null if not found\n   */\n  getActivity(id: string): Activity | null {\n    return this._activities.get(id) || null;\n  }\n\n  /**\n   * Get all activities in the tree\n   * @return {Activity[]} - An array of all activities in the tree\n   */\n  getAllActivities(): Activity[] {\n    return Array.from(this._activities.values());\n  }\n\n  /**\n   * Get the parent of an activity\n   * @param {Activity} activity - The activity to get the parent of\n   * @return {Activity | null} - The parent of the activity, or null if it has no parent\n   */\n  getParent(activity: Activity): Activity | null {\n    return activity.parent;\n  }\n\n  /**\n   * Get the children of an activity\n   * @param {Activity} activity - The activity to get the children of\n   * @param {boolean} useAvailableChildren - Whether to use available children (with selection/randomization)\n   * @return {Activity[]} - An array of the activity's children\n   */\n  getChildren(activity: Activity, useAvailableChildren: boolean = true): Activity[] {\n    return useAvailableChildren ? activity.getAvailableChildren() : activity.children;\n  }\n\n  /**\n   * Get the siblings of an activity\n   * @param {Activity} activity - The activity to get the siblings of\n   * @return {Activity[]} - An array of the activity's siblings\n   */\n  getSiblings(activity: Activity): Activity[] {\n    if (!activity.parent) {\n      return [];\n    }\n    return activity.parent.children.filter((child) => child !== activity);\n  }\n\n  /**\n   * Get the next sibling of an activity\n   * @param {Activity} activity - The activity to get the next sibling of\n   * @param {boolean} useAvailableChildren - Whether to use available children (with selection/randomization)\n   * @return {Activity | null} - The next sibling of the activity, or null if it has no next sibling\n   */\n  getNextSibling(activity: Activity, useAvailableChildren: boolean = true): Activity | null {\n    if (!activity.parent) {\n      return null;\n    }\n    let siblings = useAvailableChildren \n      ? activity.parent.getAvailableChildren() \n      : activity.parent.children;\n    let index = siblings.indexOf(activity);\n    \n    // Fallback: if not found in available children, try raw children\n    if (index === -1 && useAvailableChildren) {\n      siblings = activity.parent.children;\n      index = siblings.indexOf(activity);\n    }\n    \n    if (index === -1 || index === siblings.length - 1) {\n      return null;\n    }\n    return siblings[index + 1] ?? null;\n  }\n\n  /**\n   * Get the previous sibling of an activity\n   * @param {Activity} activity - The activity to get the previous sibling of\n   * @param {boolean} useAvailableChildren - Whether to use available children (with selection/randomization)\n   * @return {Activity | null} - The previous sibling of the activity, or null if it has no previous sibling\n   */\n  getPreviousSibling(activity: Activity, useAvailableChildren: boolean = true): Activity | null {\n    if (!activity.parent) {\n      return null;\n    }\n    let siblings = useAvailableChildren \n      ? activity.parent.getAvailableChildren() \n      : activity.parent.children;\n    let index = siblings.indexOf(activity);\n    \n    // Fallback: if not found in available children, try raw children\n    if (index === -1 && useAvailableChildren) {\n      siblings = activity.parent.children;\n      index = siblings.indexOf(activity);\n    }\n    \n    if (index <= 0) {\n      return null;\n    }\n    return siblings[index - 1] ?? null;\n  }\n\n  /**\n   * Get the first child of an activity\n   * @param {Activity} activity - The activity to get the first child of\n   * @param {boolean} useAvailableChildren - Whether to use available children (with selection/randomization)\n   * @return {Activity | null} - The first child of the activity, or null if it has no children\n   */\n  getFirstChild(activity: Activity, useAvailableChildren: boolean = true): Activity | null {\n    const children = useAvailableChildren \n      ? activity.getAvailableChildren() \n      : activity.children;\n    if (children.length === 0) {\n      return null;\n    }\n    return children[0] ?? null;\n  }\n\n  /**\n   * Get the last child of an activity\n   * @param {Activity} activity - The activity to get the last child of\n   * @param {boolean} useAvailableChildren - Whether to use available children (with selection/randomization)\n   * @return {Activity | null} - The last child of the activity, or null if it has no children\n   */\n  getLastChild(activity: Activity, useAvailableChildren: boolean = true): Activity | null {\n    const children = useAvailableChildren \n      ? activity.getAvailableChildren() \n      : activity.children;\n    if (children.length === 0) {\n      return null;\n    }\n    return children[children.length - 1] ?? null;\n  }\n\n  /**\n   * Get the common ancestor of two activities\n   * @param {Activity} activity1 - The first activity\n   * @param {Activity} activity2 - The second activity\n   * @return {Activity | null} - The common ancestor of the two activities, or null if they have no common ancestor\n   */\n  getCommonAncestor(activity1: Activity, activity2: Activity): Activity | null {\n    // Get the path from the root to activity1\n    const path1: Activity[] = [];\n    let current: Activity | null = activity1;\n    while (current) {\n      path1.unshift(current);\n      current = current.parent;\n    }\n\n    // Check if activity2 is in the path from the root to activity1\n    current = activity2;\n    while (current) {\n      if (path1.includes(current)) {\n        return current;\n      }\n      current = current.parent;\n    }\n\n    return null;\n  }\n\n  /**\n   * toJSON for ActivityTree\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      root: this._root,\n      currentActivity: this._currentActivity ? this._currentActivity.id : null,\n      suspendedActivity: this._suspendedActivity ? this._suspendedActivity.id : null,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { Activity } from \"./activity\";\nimport { SelectionTiming, RandomizationTiming } from \"./sequencing_controls\";\n\n/**\n * Class implementing SCORM 2004 Selection and Randomization processes (SR.1 and SR.2)\n */\nexport class SelectionRandomization {\n  /**\n   * Select Children Process (SR.1)\n   * Selects a subset of child activities based on selection controls\n   * @param {Activity} activity - The parent activity whose children need to be selected\n   * @return {Activity[]} - The selected child activities\n   */\n  public static selectChildrenProcess(activity: Activity): Activity[] {\n    const controls = activity.sequencingControls;\n    const children = [...activity.children]; // Create a copy to avoid mutating original\n\n    // Check if selection should occur\n    if (controls.selectionTiming === SelectionTiming.NEVER) {\n      return children;\n    }\n\n    // Check if selection has already been done (for ONCE timing)\n    if (\n      controls.selectionTiming === SelectionTiming.ONCE &&\n      controls.selectionCountStatus\n    ) {\n      return children;\n    }\n\n    // Check if we need to select children\n    const selectCount = controls.selectCount;\n    if (selectCount === null || selectCount >= children.length) {\n      // Mark selection as done if timing is ONCE\n      if (controls.selectionTiming === SelectionTiming.ONCE) {\n        controls.selectionCountStatus = true;\n      }\n      return children;\n    }\n\n    // Perform selection\n    const selectedChildren: Activity[] = [];\n    const availableIndices = children.map((_, index) => index);\n\n    // Randomly select children\n    for (let i = 0; i < selectCount; i++) {\n      if (availableIndices.length === 0) break;\n      \n      const randomIndex = Math.floor(Math.random() * availableIndices.length);\n      const childIndex = availableIndices[randomIndex];\n      if (childIndex !== undefined && children[childIndex]) {\n        selectedChildren.push(children[childIndex]);\n      }\n      \n      // Remove selected index from available indices\n      availableIndices.splice(randomIndex, 1);\n    }\n\n    // Mark selection as done only if timing is ONCE\n    if (controls.selectionTiming === SelectionTiming.ONCE) {\n      controls.selectionCountStatus = true;\n    }\n\n    // Hide non-selected children from choice\n    for (const child of children) {\n      if (!selectedChildren.includes(child)) {\n        child.isHiddenFromChoice = true;\n        child.isAvailable = false;\n      }\n    }\n\n    return selectedChildren;\n  }\n\n  /**\n   * Randomize Children Process (SR.2)\n   * Randomizes the order of child activities based on randomization controls\n   * @param {Activity} activity - The parent activity whose children need to be randomized\n   * @return {Activity[]} - The randomized child activities\n   */\n  public static randomizeChildrenProcess(activity: Activity): Activity[] {\n    const controls = activity.sequencingControls;\n    const children = [...activity.children]; // Create a copy to avoid mutating original\n\n    // Check if randomization should occur\n    if (controls.randomizationTiming === RandomizationTiming.NEVER) {\n      return children;\n    }\n\n    // Check if randomization has already been done (for ONCE timing)\n    if (\n      controls.randomizationTiming === RandomizationTiming.ONCE &&\n      controls.reorderChildren\n    ) {\n      return children;\n    }\n\n    // Check if we need to randomize\n    if (!controls.randomizeChildren) {\n      return children;\n    }\n\n    // Perform Fisher-Yates shuffle\n    const randomizedChildren = [...children];\n    for (let i = randomizedChildren.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const tempI = randomizedChildren[i];\n      const tempJ = randomizedChildren[j];\n      if (tempI && tempJ) {\n        randomizedChildren[i] = tempJ;\n        randomizedChildren[j] = tempI;\n      }\n    }\n\n    // Mark randomization as done only if timing is ONCE\n    if (controls.randomizationTiming === RandomizationTiming.ONCE) {\n      controls.reorderChildren = true;\n    }\n\n    // Update the activity's children array with the new order\n    activity.children.length = 0;\n    activity.children.push(...randomizedChildren);\n\n    return randomizedChildren;\n  }\n\n  /**\n   * Apply selection and randomization to an activity\n   * This combines both SR.1 and SR.2 processes\n   * @param {Activity} activity - The parent activity\n   * @param {boolean} isNewAttempt - Whether this is a new attempt on the activity\n   * @return {Activity[]} - The processed child activities\n   */\n  public static applySelectionAndRandomization(\n    activity: Activity,\n    isNewAttempt: boolean = false,\n  ): Activity[] {\n    const controls = activity.sequencingControls;\n\n    // Check if we should apply selection/randomization\n    let shouldApplySelection = false;\n    let shouldApplyRandomization = false;\n\n    // For ON_EACH_NEW_ATTEMPT timing, only apply on new attempts\n    if (controls.selectionTiming === SelectionTiming.ON_EACH_NEW_ATTEMPT) {\n      shouldApplySelection = isNewAttempt;\n      if (isNewAttempt) {\n        controls.selectionCountStatus = false;\n      }\n    } else if (controls.selectionTiming === SelectionTiming.ONCE) {\n      shouldApplySelection = !controls.selectionCountStatus;\n    }\n\n    if (controls.randomizationTiming === RandomizationTiming.ON_EACH_NEW_ATTEMPT) {\n      shouldApplyRandomization = isNewAttempt;\n      if (isNewAttempt) {\n        controls.reorderChildren = false;\n      }\n    } else if (controls.randomizationTiming === RandomizationTiming.ONCE) {\n      shouldApplyRandomization = !controls.reorderChildren;\n    }\n\n    // Apply selection first if needed\n    if (shouldApplySelection) {\n      this.selectChildrenProcess(activity);\n    }\n\n    // Then apply randomization if needed\n    if (shouldApplyRandomization) {\n      this.randomizeChildrenProcess(activity);\n    }\n\n    // Get the final processed children\n    const processedChildren = activity.children.filter(child => child.isAvailable);\n    \n    // Store the processed children on the activity\n    activity.setProcessedChildren(processedChildren);\n    \n    return processedChildren;\n  }\n\n  /**\n   * Check if selection is needed for an activity\n   * @param {Activity} activity - The activity to check\n   * @return {boolean} - True if selection is needed\n   */\n  public static isSelectionNeeded(activity: Activity): boolean {\n    const controls = activity.sequencingControls;\n    \n    if (controls.selectionTiming === SelectionTiming.NEVER) {\n      return false;\n    }\n\n    if (\n      controls.selectionTiming === SelectionTiming.ONCE &&\n      controls.selectionCountStatus\n    ) {\n      return false;\n    }\n\n    return controls.selectCount !== null && controls.selectCount < activity.children.length;\n  }\n\n  /**\n   * Check if randomization is needed for an activity\n   * @param {Activity} activity - The activity to check\n   * @return {boolean} - True if randomization is needed\n   */\n  public static isRandomizationNeeded(activity: Activity): boolean {\n    const controls = activity.sequencingControls;\n    \n    if (controls.randomizationTiming === RandomizationTiming.NEVER) {\n      return false;\n    }\n\n    if (\n      controls.randomizationTiming === RandomizationTiming.ONCE &&\n      controls.reorderChildren\n    ) {\n      return false;\n    }\n\n    return controls.randomizeChildren;\n  }\n}","import { Activity } from \"./activity\";\nimport { ActivityTree } from \"./activity_tree\";\nimport { SequencingRules, SequencingRule, RuleActionType, RuleConditionOperator } from \"./sequencing_rules\";\nimport { SequencingControls } from \"./sequencing_controls\";\nimport { ADLNav } from \"../adl\";\nimport { SelectionRandomization } from \"./selection_randomization\";\n\n/**\n * Enum for sequencing request types\n */\nexport enum SequencingRequestType {\n  START = \"start\",\n  RESUME_ALL = \"resumeAll\",\n  CONTINUE = \"continue\",\n  PREVIOUS = \"previous\",\n  CHOICE = \"choice\",\n  JUMP = \"jump\",\n  EXIT = \"exit\",\n  EXIT_ALL = \"exitAll\",\n  ABANDON = \"abandon\",\n  ABANDON_ALL = \"abandonAll\",\n  SUSPEND_ALL = \"suspendAll\",\n  RETRY = \"retry\",\n  RETRY_ALL = \"retryAll\",\n}\n\n/**\n * Enum for delivery request types\n */\nexport enum DeliveryRequestType {\n  DELIVER = \"deliver\",\n  DO_NOT_DELIVER = \"doNotDeliver\",\n}\n\n/**\n * Class representing the result of a sequencing process\n */\nexport class SequencingResult {\n  public deliveryRequest: DeliveryRequestType;\n  public targetActivity: Activity | null;\n  public exception: string | null;\n\n  constructor(\n    deliveryRequest: DeliveryRequestType = DeliveryRequestType.DO_NOT_DELIVER,\n    targetActivity: Activity | null = null,\n    exception: string | null = null,\n  ) {\n    this.deliveryRequest = deliveryRequest;\n    this.targetActivity = targetActivity;\n    this.exception = exception;\n  }\n}\n\n/**\n * Class implementing SCORM 2004 sequencing processes\n */\nexport class SequencingProcess {\n  private activityTree: ActivityTree;\n  private sequencingRules: SequencingRules | null;\n  private sequencingControls: SequencingControls | null;\n  private adlNav: ADLNav | null;\n\n  constructor(\n    activityTree: ActivityTree,\n    sequencingRules?: SequencingRules | null,\n    sequencingControls?: SequencingControls | null,\n    adlNav: ADLNav | null = null,\n  ) {\n    this.activityTree = activityTree;\n    this.sequencingRules = sequencingRules || null;\n    this.sequencingControls = sequencingControls || null;\n    this.adlNav = adlNav;\n  }\n\n  /**\n   * Main Sequencing Request Process (SB.2.12)\n   * This is the main entry point for all navigation requests\n   * @param {SequencingRequestType} request - The sequencing request\n   * @param {string} targetActivityId - The target activity ID (for choice/jump)\n   * @return {SequencingResult} - The result of the sequencing process\n   */\n  public sequencingRequestProcess(\n    request: SequencingRequestType,\n    targetActivityId: string | null = null,\n  ): SequencingResult {\n    // Initialize result\n    const result = new SequencingResult();\n\n    // Get current activity\n    const currentActivity = this.activityTree.currentActivity;\n    const suspendedActivity = this.activityTree.suspendedActivity;\n\n    // Process based on request type\n    switch (request) {\n      case SequencingRequestType.START:\n        return this.startSequencingRequestProcess();\n\n      case SequencingRequestType.RESUME_ALL:\n        return this.resumeAllSequencingRequestProcess();\n\n      case SequencingRequestType.CONTINUE:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.continueSequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.PREVIOUS:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.previousSequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.CHOICE:\n        if (!targetActivityId) {\n          result.exception = \"SB.2.12-5\"; // No target specified\n          return result;\n        }\n        return this.choiceSequencingRequestProcess(targetActivityId, currentActivity);\n\n      case SequencingRequestType.JUMP:\n        if (!targetActivityId) {\n          result.exception = \"SB.2.12-5\"; // No target specified\n          return result;\n        }\n        return this.jumpSequencingRequestProcess(targetActivityId);\n\n      case SequencingRequestType.EXIT:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.exitSequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.EXIT_ALL:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.exitAllSequencingRequestProcess();\n\n      case SequencingRequestType.ABANDON:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.abandonSequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.ABANDON_ALL:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.abandonAllSequencingRequestProcess();\n\n      case SequencingRequestType.SUSPEND_ALL:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.suspendAllSequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.RETRY:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.retrySequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.RETRY_ALL:\n        return this.retryAllSequencingRequestProcess();\n\n      default:\n        result.exception = \"SB.2.12-6\"; // Undefined sequencing request\n        return result;\n    }\n  }\n\n  /**\n   * Start Sequencing Request Process (SB.2.5)\n   * Determines the first activity to deliver when starting\n   * @return {SequencingResult}\n   */\n  private startSequencingRequestProcess(): SequencingResult {\n    const result = new SequencingResult();\n    const root = this.activityTree.root;\n\n    if (!root) {\n      result.exception = \"SB.2.5-1\"; // No activity tree\n      return result;\n    }\n\n    // Check if sequencing session has already begun\n    if (this.activityTree.currentActivity !== null) {\n      result.exception = \"SB.2.5-2\"; // Sequencing session already begun\n      return result;\n    }\n\n    // For START, we need to flow into the activity tree from the root\n    // Start with the root and find first deliverable leaf activity\n    const deliverableActivity = this.findFirstDeliverableActivity(root);\n\n    if (!deliverableActivity) {\n      result.exception = \"SB.2.5-3\"; // No activity available\n      return result;\n    }\n\n    // Deliver the identified activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = deliverableActivity;\n    return result;\n  }\n\n  /**\n   * Find First Deliverable Activity\n   * Recursively searches from the given activity to find the first deliverable leaf\n   * @param {Activity} activity - The activity to start searching from\n   * @return {Activity | null} - The first deliverable activity, or null if none found\n   */\n  private findFirstDeliverableActivity(activity: Activity): Activity | null {\n    // Check if this activity can be delivered (leaf activity)\n    if (activity.children.length === 0) {\n      // This is a leaf - check if it can be delivered\n      if (this.checkActivityProcess(activity)) {\n        return activity;\n      }\n      return null;\n    }\n\n    // This is a cluster - look through children for deliverable activity\n    this.ensureSelectionAndRandomization(activity);\n    const children = activity.getAvailableChildren();\n    \n    for (const child of children) {\n      const deliverable = this.findFirstDeliverableActivity(child);\n      if (deliverable) {\n        return deliverable;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Resume All Sequencing Request Process (SB.2.6)\n   * Resumes a suspended session\n   * @return {SequencingResult}\n   */\n  private resumeAllSequencingRequestProcess(): SequencingResult {\n    const result = new SequencingResult();\n    const suspendedActivity = this.activityTree.suspendedActivity;\n\n    if (!suspendedActivity) {\n      result.exception = \"SB.2.6-1\"; // No suspended activity\n      return result;\n    }\n\n    if (this.activityTree.currentActivity !== null) {\n      result.exception = \"SB.2.6-2\"; // Current activity already defined\n      return result;\n    }\n\n    // Deliver the suspended activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = suspendedActivity;\n    return result;\n  }\n\n  /**\n   * Continue Sequencing Request Process (SB.2.7)\n   * Processes continue navigation request\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private continueSequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Check if the current activity has been terminated\n    if (currentActivity.isActive) {\n      result.exception = \"SB.2.7-1\"; // Current activity not terminated\n      return result;\n    }\n\n    // Check if flow is allowed from the current activity's parent\n    if (currentActivity.parent && !currentActivity.parent.sequencingControls.flow) {\n      result.exception = \"SB.2.7-2\"; // No activity available (flow disabled)\n      return result;\n    }\n\n    // Flow from current activity to find next using flow subprocess\n    const flowResult = this.flowSubprocess(currentActivity, FlowSubprocessMode.FORWARD);\n\n    if (!flowResult) {\n      result.exception = \"SB.2.7-2\"; // No activity available\n      return result;\n    }\n\n    // Deliver the identified activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = flowResult;\n    return result;\n  }\n\n  /**\n   * Previous Sequencing Request Process (SB.2.8)\n   * Processes previous navigation request\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private previousSequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Check if the current activity has been terminated\n    if (currentActivity.isActive) {\n      result.exception = \"SB.2.8-1\"; // Current activity not terminated\n      return result;\n    }\n\n    // Check if flow is allowed from the current activity's parent\n    if (currentActivity.parent && !currentActivity.parent.sequencingControls.flow) {\n      result.exception = \"SB.2.8-2\"; // No activity available (flow disabled)\n      return result;\n    }\n\n    // Check if backward flow is allowed (forwardOnly control)\n    if (currentActivity.parent && currentActivity.parent.sequencingControls.forwardOnly) {\n      result.exception = \"SB.2.8-2\"; // No activity available (backward flow disabled)\n      return result;\n    }\n\n    // Flow from current activity to find previous using flow subprocess\n    const flowResult = this.flowSubprocess(currentActivity, FlowSubprocessMode.BACKWARD);\n\n    if (!flowResult) {\n      result.exception = \"SB.2.8-2\"; // No activity available\n      return result;\n    }\n\n    // Deliver the identified activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = flowResult;\n    return result;\n  }\n\n  /**\n   * Choice Sequencing Request Process (SB.2.9)\n   * Processes choice navigation request\n   * @param {string} targetActivityId - The target activity ID\n   * @param {Activity | null} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private choiceSequencingRequestProcess(\n    targetActivityId: string,\n    currentActivity: Activity | null,\n  ): SequencingResult {\n    const result = new SequencingResult();\n\n    // Find the target activity\n    let targetActivity = this.activityTree.getActivity(targetActivityId);\n    if (!targetActivity) {\n      result.exception = \"SB.2.9-1\"; // Target activity does not exist\n      return result;\n    }\n\n    // Check if target is in the activity tree\n    if (!this.isActivityInTree(targetActivity)) {\n      result.exception = \"SB.2.9-2\"; // Target activity not in tree\n      return result;\n    }\n\n    // Cannot choose the root activity\n    if (targetActivity === this.activityTree.root) {\n      result.exception = \"SB.2.9-3\"; // Cannot choose root\n      return result;\n    }\n\n    // Path to root validation\n    let activity: Activity | null = targetActivity;\n    while (activity) {\n      if (activity.isHiddenFromChoice) {\n        result.exception = \"SB.2.9-4\"; // Activity hidden from choice\n        return result;\n      }\n\n      // Check if choice control is constrained\n      if (activity.parent && !activity.parent.sequencingControls.choice) {\n        result.exception = \"SB.2.9-5\"; // Choice control is not allowed\n        return result;\n      }\n\n      activity = activity.parent;\n    }\n\n    // Check if current activity needs to be terminated\n    if (currentActivity && currentActivity.isActive) {\n      result.exception = \"SB.2.9-6\"; // Current activity not terminated\n      return result;\n    }\n\n    // Find common ancestor\n    const commonAncestor = this.findCommonAncestor(currentActivity, targetActivity);\n\n    // Terminate descendent attempts from common ancestor\n    if (currentActivity) {\n      this.terminateDescendentAttemptsProcess(commonAncestor || this.activityTree.root!);\n    }\n\n    // Form the activity path from target to common ancestor\n    const activityPath: Activity[] = [];\n    activity = targetActivity;\n    while (activity && activity !== commonAncestor) {\n      activityPath.unshift(activity);\n      activity = activity.parent;\n    }\n\n    // Evaluate each activity in the path\n    for (const pathActivity of activityPath) {\n      if (!this.checkActivityProcess(pathActivity)) {\n        // Sequencing ends with no delivery\n        return result;\n      }\n    }\n\n    // If target is not a leaf, flow forward to find a leaf\n    if (targetActivity.children.length > 0) {\n      this.ensureSelectionAndRandomization(targetActivity);\n      const availableChildren = targetActivity.getAvailableChildren();\n      \n      const flowResult = this.flowActivityTraversalSubprocess(\n        targetActivity,\n        true, // direction forward\n        true, // consider children\n        FlowSubprocessMode.FORWARD,\n      );\n\n      if (!flowResult) {\n        result.exception = \"SB.2.9-7\"; // No activity available from target\n        return result;\n      }\n\n      targetActivity = flowResult;\n    }\n\n    // Deliver the identified activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = targetActivity;\n    return result;\n  }\n\n  /**\n   * Jump Sequencing Request Process (SB.2.13)\n   * Processes jump navigation request - SCORM 2004 4th Edition\n   * @param {string} targetActivityId - The target activity ID\n   * @return {SequencingResult}\n   */\n  private jumpSequencingRequestProcess(targetActivityId: string): SequencingResult {\n    const result = new SequencingResult();\n\n    // Find the target activity\n    const targetActivity = this.activityTree.getActivity(targetActivityId);\n    if (!targetActivity) {\n      result.exception = \"SB.2.13-1\"; // Target activity does not exist\n      return result;\n    }\n\n    // Check if target is in the activity tree\n    if (!this.isActivityInTree(targetActivity)) {\n      result.exception = \"SB.2.13-2\"; // Target activity not in tree\n      return result;\n    }\n\n    // Check if target is available\n    if (!targetActivity.isAvailable) {\n      result.exception = \"SB.2.13-3\"; // Target not available\n      return result;\n    }\n\n    // Deliver the target activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = targetActivity;\n    return result;\n  }\n\n  /**\n   * Exit Sequencing Request Process\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private exitSequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Check if exit is allowed\n    if (!currentActivity.parent) {\n      result.exception = \"SB.2.11-1\"; // Exit not allowed - no parent\n      return result;\n    }\n    \n    // Check parent's sequencing controls\n    if (!currentActivity.parent.sequencingControls.choiceExit) {\n      result.exception = \"SB.2.11-2\"; // Exit not allowed by sequencing controls\n      return result;\n    }\n\n    // Terminate current activity\n    this.terminateDescendentAttemptsProcess(currentActivity);\n\n    return result;\n  }\n\n  /**\n   * Exit All Sequencing Request Process\n   * @return {SequencingResult}\n   */\n  private exitAllSequencingRequestProcess(): SequencingResult {\n    const result = new SequencingResult();\n\n    // Terminate all activities\n    if (this.activityTree.root) {\n      this.terminateDescendentAttemptsProcess(this.activityTree.root);\n    }\n\n    return result;\n  }\n\n  /**\n   * Abandon Sequencing Request Process\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private abandonSequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Set current activity as abandoned\n    currentActivity.isActive = false;\n    this.activityTree.currentActivity = currentActivity.parent;\n\n    return result;\n  }\n\n  /**\n   * Abandon All Sequencing Request Process\n   * @return {SequencingResult}\n   */\n  private abandonAllSequencingRequestProcess(): SequencingResult {\n    const result = new SequencingResult();\n\n    // Abandon all activities\n    this.activityTree.currentActivity = null;\n\n    return result;\n  }\n\n  /**\n   * Suspend All Sequencing Request Process\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private suspendAllSequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Check if suspend is allowed\n    if (currentActivity !== this.activityTree.root) {\n      currentActivity.isSuspended = true;\n      this.activityTree.suspendedActivity = currentActivity;\n      this.activityTree.currentActivity = null;\n    } else {\n      result.exception = \"SB.2.15-1\"; // Cannot suspend root\n    }\n\n    return result;\n  }\n\n  /**\n   * Retry Sequencing Request Process\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private retrySequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Terminate current activity\n    this.terminateDescendentAttemptsProcess(currentActivity);\n\n    // Increment attempt count\n    currentActivity.incrementAttemptCount();\n\n    // Deliver the activity again\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = currentActivity;\n    return result;\n  }\n\n  /**\n   * Retry All Sequencing Request Process\n   * @return {SequencingResult}\n   */\n  private retryAllSequencingRequestProcess(): SequencingResult {\n    // Clear current activity to allow restart\n    this.activityTree.currentActivity = null;\n    \n    // Restart from the root\n    return this.startSequencingRequestProcess();\n  }\n\n  /**\n   * Ensure selection and randomization is applied to an activity\n   * @param {Activity} activity - The activity to process\n   */\n  private ensureSelectionAndRandomization(activity: Activity): void {\n    // Check if processing is needed\n    if (activity.getAvailableChildren() === activity.children && \n        (SelectionRandomization.isSelectionNeeded(activity) || \n         SelectionRandomization.isRandomizationNeeded(activity))) {\n      SelectionRandomization.applySelectionAndRandomization(activity, activity.isNewAttempt);\n    }\n  }\n\n  /**\n   * Flow Activity Traversal Subprocess (SB.2.2)\n   * Checks if an activity can be delivered and flows into clusters if needed\n   */\n  private flowActivityTraversalSubprocess(\n    activity: Activity,\n    _direction: boolean,\n    considerChildren: boolean,\n    mode: FlowSubprocessMode,\n  ): Activity | null {\n    // Check if the activity is available\n    if (!activity.isAvailable) {\n      return null;\n    }\n\n    // Check sequencing control modes\n    const parent = activity.parent;\n    if (parent && !parent.sequencingControls.flow) {\n      return null;\n    }\n\n    // Activity is a cluster, try to flow into it to find a deliverable leaf\n    if (considerChildren) {\n      this.ensureSelectionAndRandomization(activity);\n      const availableChildren = activity.getAvailableChildren();\n      \n      for (const child of availableChildren) {\n        const deliverable = this.flowActivityTraversalSubprocess(\n          child,\n          mode === FlowSubprocessMode.FORWARD,\n          true,\n          mode\n        );\n        if (deliverable) {\n          return deliverable;\n        }\n      }\n    }\n\n    // If activity is a leaf (no children), check if it can be delivered\n    if (activity.children.length === 0) {\n      // Check if this activity was intended to be a cluster but is empty\n      // A cluster typically has flow control enabled\n      if (activity.sequencingControls.flow) {\n        // This appears to be an empty cluster, not a true leaf\n        return null;\n      }\n      \n      if (this.checkActivityProcess(activity)) {\n        return activity;\n      }\n      return null;\n    }\n\n    return null;\n  }\n\n  /**\n   * Check Activity Process (SB.2.3)\n   * Validates if an activity can be delivered\n   */\n  private checkActivityProcess(activity: Activity): boolean {\n    // Check if activity is available\n    if (!activity.isAvailable) {\n      return false;\n    }\n\n    // Check limit conditions (UP.1)\n    if (this.limitConditionsCheckProcess(activity)) {\n      return false; // Activity violates limit conditions\n    }\n\n    // Check pre-condition rules using UP.2\n    const preConditionResult = this.sequencingRulesCheckProcess(\n      activity, \n      activity.sequencingRules.preConditionRules\n    );\n    \n    return preConditionResult !== RuleActionType.SKIP && \n           preConditionResult !== RuleActionType.DISABLED;\n  }\n\n  /**\n   * Terminate Descendent Attempts Process (SB.2.4)\n   * Ends attempts on an activity and its descendants\n   */\n  private terminateDescendentAttemptsProcess(activity: Activity, skipExitRules: boolean = false): void {\n    // Apply Exit Action Rules (TB.2.1) first to check for exit actions\n    let exitAction = null;\n    if (!skipExitRules) {\n      exitAction = this.exitActionRulesSubprocess(activity);\n    }\n\n    // End attempt on the activity\n    activity.isActive = false;\n\n    // Recursively terminate descendants\n    // Use all children here, not just available ones, since we need to terminate all\n    for (const child of activity.children) {\n      this.terminateDescendentAttemptsProcess(child, skipExitRules);\n    }\n\n    // Process deferred exit actions after termination to avoid recursion\n    if (exitAction && !skipExitRules) {\n      this.processDeferredExitAction(exitAction, activity);\n    }\n  }\n\n  /**\n   * Exit Action Rules Subprocess (TB.2.1)\n   * Evaluates the exit condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate exit rules for\n   * @return {RuleActionType | null} - The exit action to process, if any\n   * @private\n   */\n  private exitActionRulesSubprocess(activity: Activity): RuleActionType | null {\n    // Evaluate exit condition rules using UP.2\n    const exitAction = this.sequencingRulesCheckProcess(\n      activity,\n      activity.sequencingRules.exitConditionRules\n    );\n\n    // Only certain actions are valid for exit condition rules\n    if (exitAction === RuleActionType.EXIT || \n        exitAction === RuleActionType.EXIT_PARENT || \n        exitAction === RuleActionType.EXIT_ALL) {\n      return exitAction;\n    }\n\n    return null;\n  }\n\n  /**\n   * Process deferred exit action after termination\n   * @param {RuleActionType} exitAction - The exit action to process\n   * @param {Activity} activity - The activity that triggered the exit action\n   * @private\n   */\n  private processDeferredExitAction(exitAction: RuleActionType, activity: Activity): void {\n    switch (exitAction) {\n      case RuleActionType.EXIT:\n        // Exit terminates the current attempt on the activity\n        // Already handled by terminateDescendentAttemptsProcess\n        break;\n      \n      case RuleActionType.EXIT_PARENT:\n        // Exit parent terminates the current attempt on the parent activity\n        if (activity.parent && activity.parent.isActive) {\n          this.terminateDescendentAttemptsProcess(activity.parent, true);\n        }\n        break;\n      \n      case RuleActionType.EXIT_ALL:\n        // Exit all terminates all activities\n        if (this.activityTree.root && this.activityTree.root !== activity) {\n          // Only process if we haven't already terminated the root\n          const allActivities = this.activityTree.getAllActivities();\n          const anyActive = allActivities.some(a => a.isActive);\n          if (anyActive) {\n            this.terminateDescendentAttemptsProcess(this.activityTree.root, true);\n          }\n        }\n        break;\n    }\n  }\n\n  /**\n   * Post Condition Rules Subprocess (TB.2.2)\n   * Evaluates the post-condition rules for an activity after delivery\n   * @param {Activity} activity - The activity to evaluate post-condition rules for\n   * @return {RuleActionType | null} - The action to take, if any\n   * @private\n   */\n  private postConditionRulesSubprocess(activity: Activity): RuleActionType | null {\n    // Evaluate post-condition rules using UP.2\n    const postAction = this.sequencingRulesCheckProcess(\n      activity,\n      activity.sequencingRules.postConditionRules\n    );\n\n    // Only certain actions are valid for post-condition rules\n    const validActions = [\n      RuleActionType.EXIT_PARENT,\n      RuleActionType.EXIT_ALL,\n      RuleActionType.RETRY,\n      RuleActionType.RETRY_ALL,\n      RuleActionType.CONTINUE,\n      RuleActionType.PREVIOUS\n    ];\n\n    if (postAction && validActions.includes(postAction)) {\n      return postAction;\n    }\n\n    return null;\n  }\n\n  /**\n   * Limit Conditions Check Process (UP.1)\n   * Checks if an activity has exceeded its limit conditions (attempt limit or duration limits)\n   * @param {Activity} activity - The activity to check\n   * @return {boolean} - True if limit conditions are violated, false otherwise\n   * @private\n   */\n  private limitConditionsCheckProcess(activity: Activity): boolean {\n    // Check attempt limit\n    if (activity.attemptLimit !== null && activity.attemptCount >= activity.attemptLimit) {\n      return true; // Attempt limit exceeded\n    }\n\n    // Check attempt absolute duration limit\n    if (activity.attemptAbsoluteDurationLimit !== null) {\n      const attemptDurationMs = this.parseISO8601Duration(activity.attemptExperiencedDuration);\n      const attemptLimitMs = this.parseISO8601Duration(activity.attemptAbsoluteDurationLimit);\n      \n      if (attemptDurationMs >= attemptLimitMs) {\n        return true; // Attempt duration limit exceeded\n      }\n    }\n\n    // Check activity absolute duration limit\n    if (activity.activityAbsoluteDurationLimit !== null) {\n      const activityDurationMs = this.parseISO8601Duration(activity.activityExperiencedDuration);\n      const activityLimitMs = this.parseISO8601Duration(activity.activityAbsoluteDurationLimit);\n      \n      if (activityDurationMs >= activityLimitMs) {\n        return true; // Activity duration limit exceeded\n      }\n    }\n\n    return false; // No limit conditions violated\n  }\n\n  /**\n   * Parse ISO 8601 duration to milliseconds\n   * @param {string} duration - ISO 8601 duration string\n   * @return {number} - Duration in milliseconds\n   * @private\n   */\n  private parseISO8601Duration(duration: string): number {\n    const regex = /PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?/;\n    const matches = duration.match(regex);\n\n    if (!matches) {\n      return 0;\n    }\n\n    const hours = parseInt(matches[1] || \"0\", 10);\n    const minutes = parseInt(matches[2] || \"0\", 10);\n    const seconds = parseFloat(matches[3] || \"0\");\n\n    return (hours * 3600 + minutes * 60 + seconds) * 1000;\n  }\n\n  /**\n   * Sequencing Rules Check Process (UP.2)\n   * General process for evaluating a set of sequencing rules\n   * @param {Activity} activity - The activity to evaluate rules for\n   * @param {SequencingRule[]} rules - The rules to evaluate\n   * @return {RuleActionType | null} - The action to take, or null if no rules apply\n   * @private\n   */\n  private sequencingRulesCheckProcess(activity: Activity, rules: SequencingRule[]): RuleActionType | null {\n    // Evaluate each rule in order\n    for (const rule of rules) {\n      // Use the Sequencing Rules Check Subprocess (UP.2.1) to evaluate\n      if (this.sequencingRulesCheckSubprocess(activity, rule)) {\n        // Rule condition(s) met, return the action\n        return rule.action;\n      }\n    }\n    \n    // No rules applied\n    return null;\n  }\n\n  /**\n   * Sequencing Rules Check Subprocess (UP.2.1)\n   * Evaluates individual sequencing rule conditions\n   * @param {Activity} activity - The activity to evaluate the rule for\n   * @param {SequencingRule} rule - The rule to evaluate\n   * @return {boolean} - True if all rule conditions are met\n   * @private\n   */\n  private sequencingRulesCheckSubprocess(activity: Activity, rule: SequencingRule): boolean {\n    // If no conditions, the rule always applies\n    if (rule.conditions.length === 0) {\n      return true;\n    }\n\n    // Evaluate based on condition combination\n    const conditionCombination = rule.conditionCombination;\n    \n    if (conditionCombination === \"all\" || conditionCombination === RuleConditionOperator.AND) {\n      // All conditions must be true\n      return rule.conditions.every((condition) => {\n        const result = condition.evaluate(activity);\n        // Log evaluation for debugging\n        if (!result) {\n          // Condition failed, rule doesn't apply\n          return false;\n        }\n        return true;\n      });\n    } else if (conditionCombination === \"any\" || conditionCombination === RuleConditionOperator.OR) {\n      // At least one condition must be true\n      return rule.conditions.some((condition) => {\n        const result = condition.evaluate(activity);\n        // Log evaluation for debugging\n        if (result) {\n          // Condition passed, rule applies\n          return true;\n        }\n        return false;\n      });\n    }\n\n    // Unknown combination, default to false\n    return false;\n  }\n\n  /**\n   * Check if activity is in the activity tree\n   */\n  private isActivityInTree(activity: Activity): boolean {\n    return this.activityTree.getAllActivities().includes(activity);\n  }\n\n  /**\n   * Find common ancestor of two activities\n   */\n  private findCommonAncestor(activity1: Activity | null, activity2: Activity | null): Activity | null {\n    if (!activity1 || !activity2) {\n      return null;\n    }\n\n    // Get ancestors of activity1\n    const ancestors1: Activity[] = [];\n    let current: Activity | null = activity1;\n    while (current) {\n      ancestors1.push(current);\n      current = current.parent;\n    }\n\n    // Find first common ancestor\n    current = activity2;\n    while (current) {\n      if (ancestors1.includes(current)) {\n        return current;\n      }\n      current = current.parent;\n    }\n\n    return null;\n  }\n\n  /**\n   * Flow Subprocess (SB.2.3)\n   * Traverses the activity tree in the specified direction to find a deliverable activity\n   * @param {Activity} fromActivity - The activity to flow from\n   * @param {FlowSubprocessMode} direction - The flow direction\n   * @return {Activity | null} - The next deliverable activity, or null if none found\n   */\n  private flowSubprocess(fromActivity: Activity, direction: FlowSubprocessMode): Activity | null {\n    let candidateActivity: Activity | null = fromActivity;\n    let firstIteration = true;\n\n    // Keep traversing until we find a deliverable activity or run out of candidates\n    while (candidateActivity) {\n      // Get next candidate using flow tree traversal\n      // On first iteration, we want to skip the current activity's children\n      const nextCandidate = this.flowTreeTraversalSubprocess(\n        candidateActivity,\n        direction,\n        firstIteration\n      );\n\n      if (!nextCandidate) {\n        // No more candidates\n        return null;\n      }\n\n      // Check if this candidate can be delivered\n      const deliverable = this.flowActivityTraversalSubprocess(\n        nextCandidate,\n        direction === FlowSubprocessMode.FORWARD,\n        true, // consider children\n        direction\n      );\n\n      if (deliverable) {\n        return deliverable;\n      }\n\n      // Continue with next candidate\n      candidateActivity = nextCandidate;\n      firstIteration = false;\n    }\n\n    return null;\n  }\n\n\n  /**\n   * Flow Tree Traversal Subprocess (SB.2.1)\n   * Traverses the activity tree to find the next activity in the specified direction\n   * @param {Activity} fromActivity - The activity to traverse from\n   * @param {FlowSubprocessMode} direction - The traversal direction\n   * @param {boolean} skipChildren - Whether to skip checking children (for continuing from current)\n   * @return {Activity | null} - The next activity in the tree, or null if none\n   */\n  private flowTreeTraversalSubprocess(\n    fromActivity: Activity,\n    direction: FlowSubprocessMode,\n    skipChildren: boolean = false\n  ): Activity | null {\n    if (direction === FlowSubprocessMode.FORWARD) {\n      // First, check if activity has children (unless we're skipping them)\n      if (!skipChildren) {\n        this.ensureSelectionAndRandomization(fromActivity);\n        const children = fromActivity.getAvailableChildren();\n        if (children.length > 0) {\n          return children[0] || null;\n        }\n      }\n\n      // No children, try to get next sibling\n      let current: Activity | null = fromActivity;\n      while (current) {\n        const nextSibling = this.activityTree.getNextSibling(current);\n        if (nextSibling) {\n          return nextSibling;\n        }\n        // No next sibling, move up to parent\n        current = current.parent;\n      }\n    } else {\n      // Backward direction\n      // Try to get previous sibling\n      const previousSibling = this.activityTree.getPreviousSibling(fromActivity);\n      if (previousSibling) {\n        // If previous sibling has children, go to the last descendant\n        let lastDescendant = previousSibling;\n        while (true) {\n          this.ensureSelectionAndRandomization(lastDescendant);\n          const children = lastDescendant.getAvailableChildren();\n          if (children.length === 0) {\n            break;\n          }\n          const lastChild = children[children.length - 1];\n          if (!lastChild) break;\n          lastDescendant = lastChild;\n        }\n        return lastDescendant;\n      }\n\n      // No previous sibling at this level, try going up to parent and then its previous sibling\n      let current: Activity | null = fromActivity;\n      while (current && current.parent) {\n        const parentPreviousSibling = this.activityTree.getPreviousSibling(current.parent);\n        if (parentPreviousSibling) {\n          // Found a previous sibling of an ancestor, go to its last descendant\n          let lastDescendant = parentPreviousSibling;\n          while (true) {\n            this.ensureSelectionAndRandomization(lastDescendant);\n            const children = lastDescendant.getAvailableChildren();\n            if (children.length === 0) {\n              break;\n            }\n            const lastChild = children[children.length - 1];\n            if (!lastChild) break;\n            lastDescendant = lastChild;\n          }\n          return lastDescendant;\n        }\n        // Move up to grandparent\n        current = current.parent;\n      }\n\n      return null; // Reached beginning of tree\n    }\n\n    return null;\n  }\n\n  /**\n   * Choice Flow Subprocess (SB.2.9.1)\n   * Handles the flow logic specific to choice navigation requests\n   * @param {Activity} targetActivity - The target activity for the choice\n   * @param {Activity | null} commonAncestor - The common ancestor between current and target\n   * @return {Activity | null} - The activity to deliver, or null if flow fails\n   */\n  private choiceFlowSubprocess(\n    targetActivity: Activity,\n    commonAncestor: Activity | null\n  ): Activity | null {\n    // If target is a leaf, it's the delivery candidate\n    if (targetActivity.children.length === 0) {\n      return targetActivity;\n    }\n\n    // If target is a cluster, use choice flow tree traversal\n    return this.choiceFlowTreeTraversalSubprocess(targetActivity);\n  }\n\n  /**\n   * Choice Flow Tree Traversal Subprocess (SB.2.9.2)\n   * Traverses into a cluster activity to find a leaf for delivery\n   * @param {Activity} fromActivity - The cluster activity to traverse from\n   * @return {Activity | null} - A leaf activity for delivery, or null if none found\n   */\n  private choiceFlowTreeTraversalSubprocess(fromActivity: Activity): Activity | null {\n    // Apply selection and randomization\n    this.ensureSelectionAndRandomization(fromActivity);\n    const children = fromActivity.getAvailableChildren();\n\n    // Find the first available child that can be delivered\n    for (const child of children) {\n      // Check if child can be delivered or traverse into it\n      const deliverable = this.choiceActivityTraversalSubprocess(child);\n      if (deliverable) {\n        return deliverable;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Choice Activity Traversal Subprocess (SB.2.4)\n   * Checks constraints and traverses into activities for choice navigation\n   * @param {Activity} activity - The activity to check and possibly traverse\n   * @return {Activity | null} - A deliverable activity, or null if none found\n   */\n  private choiceActivityTraversalSubprocess(activity: Activity): Activity | null {\n    // Check if activity is available\n    if (!activity.isAvailable) {\n      return null;\n    }\n\n    // Check if activity is hidden from choice\n    if (activity.isHiddenFromChoice) {\n      return null;\n    }\n\n    // Check constrain choice control\n    if (activity.parent && activity.parent.sequencingControls.constrainChoice) {\n      // Additional constraint checks can be added here\n      // For now, we'll allow the choice if not hidden\n    }\n\n    // If it's a leaf, check if it can be delivered\n    if (activity.children.length === 0) {\n      if (this.checkActivityProcess(activity)) {\n        return activity;\n      }\n      return null;\n    }\n\n    // If it's a cluster, traverse into it\n    return this.choiceFlowTreeTraversalSubprocess(activity);\n  }\n\n  /**\n   * Evaluate post-condition rules for the current activity\n   * This should be called after an activity has been delivered and the learner has interacted with it\n   * @param {Activity} activity - The activity to evaluate\n   * @return {SequencingRequestType | null} - The sequencing request to process, if any\n   */\n  public evaluatePostConditionRules(activity: Activity): SequencingRequestType | null {\n    const postAction = this.postConditionRulesSubprocess(activity);\n    \n    if (!postAction) {\n      return null;\n    }\n\n    // Map post-condition actions to sequencing requests\n    switch (postAction) {\n      case RuleActionType.EXIT_PARENT:\n        // Exit parent will be handled by exit action rules\n        return SequencingRequestType.EXIT;\n        \n      case RuleActionType.EXIT_ALL:\n        return SequencingRequestType.EXIT_ALL;\n        \n      case RuleActionType.RETRY:\n        return SequencingRequestType.RETRY;\n        \n      case RuleActionType.RETRY_ALL:\n        return SequencingRequestType.RETRY_ALL;\n        \n      case RuleActionType.CONTINUE:\n        return SequencingRequestType.CONTINUE;\n        \n      case RuleActionType.PREVIOUS:\n        return SequencingRequestType.PREVIOUS;\n        \n      default:\n        return null;\n    }\n  }\n}\n\n/**\n * Enum for flow subprocess modes\n */\nenum FlowSubprocessMode {\n  FORWARD = \"forward\",\n  BACKWARD = \"backward\",\n}","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { ActivityTree } from \"./activity_tree\";\nimport { SequencingRules } from \"./sequencing_rules\";\nimport { SequencingControls } from \"./sequencing_controls\";\nimport { RollupRules } from \"./rollup_rules\";\nimport { ADLNav } from \"../adl\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport {\n  SequencingProcess,\n  SequencingRequestType,\n  SequencingResult,\n  DeliveryRequestType,\n} from \"./sequencing_process\";\n\n/**\n * Class representing SCORM 2004 sequencing\n */\nexport class Sequencing extends BaseCMI {\n  private _activityTree: ActivityTree;\n  private _sequencingRules: SequencingRules;\n  private _sequencingControls: SequencingControls;\n  private _rollupRules: RollupRules;\n  private _adlNav: ADLNav | null = null;\n  private _sequencingProcess: SequencingProcess | null = null;\n  private _lastSequencingResult: SequencingResult | null = null;\n\n  /**\n   * Constructor for Sequencing\n   */\n  constructor() {\n    super(\"sequencing\");\n    this._activityTree = new ActivityTree();\n    this._sequencingRules = new SequencingRules();\n    this._sequencingControls = new SequencingControls();\n    this._rollupRules = new RollupRules();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this._activityTree.initialize();\n    this._sequencingRules.initialize();\n    this._sequencingControls.initialize();\n    this._rollupRules.initialize();\n    \n    // Initialize sequencing process if ADL Nav is available\n    if (this._adlNav) {\n      this._sequencingProcess = new SequencingProcess(\n        this._activityTree,\n        this._sequencingRules,\n        this._sequencingControls,\n        this._adlNav,\n      );\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._activityTree.reset();\n    this._sequencingRules.reset();\n    this._sequencingControls.reset();\n    this._rollupRules.reset();\n  }\n\n  /**\n   * Getter for activityTree\n   * @return {ActivityTree}\n   */\n  get activityTree(): ActivityTree {\n    return this._activityTree;\n  }\n\n  /**\n   * Setter for activityTree\n   * @param {ActivityTree} activityTree\n   */\n  set activityTree(activityTree: ActivityTree) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(activityTree instanceof ActivityTree)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".activityTree\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._activityTree = activityTree;\n  }\n\n  /**\n   * Getter for sequencingRules\n   * @return {SequencingRules}\n   */\n  get sequencingRules(): SequencingRules {\n    return this._sequencingRules;\n  }\n\n  /**\n   * Setter for sequencingRules\n   * @param {SequencingRules} sequencingRules\n   */\n  set sequencingRules(sequencingRules: SequencingRules) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(sequencingRules instanceof SequencingRules)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".sequencingRules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._sequencingRules = sequencingRules;\n  }\n\n  /**\n   * Getter for sequencingControls\n   * @return {SequencingControls}\n   */\n  get sequencingControls(): SequencingControls {\n    return this._sequencingControls;\n  }\n\n  /**\n   * Setter for sequencingControls\n   * @param {SequencingControls} sequencingControls\n   */\n  set sequencingControls(sequencingControls: SequencingControls) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(sequencingControls instanceof SequencingControls)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".sequencingControls\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._sequencingControls = sequencingControls;\n  }\n\n  /**\n   * Getter for rollupRules\n   * @return {RollupRules}\n   */\n  get rollupRules(): RollupRules {\n    return this._rollupRules;\n  }\n\n  /**\n   * Setter for rollupRules\n   * @param {RollupRules} rollupRules\n   */\n  set rollupRules(rollupRules: RollupRules) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rollupRules instanceof RollupRules)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".rollupRules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._rollupRules = rollupRules;\n  }\n\n  /**\n   * Getter for adlNav\n   * @return {ADLNav | null}\n   */\n  get adlNav(): ADLNav | null {\n    return this._adlNav;\n  }\n\n  /**\n   * Setter for adlNav\n   * @param {ADLNav | null} adlNav\n   */\n  set adlNav(adlNav: ADLNav | null) {\n    this._adlNav = adlNav;\n    \n    // Update sequencing process with new ADL Nav\n    if (adlNav) {\n      this._sequencingProcess = new SequencingProcess(\n        this._activityTree,\n        this._sequencingRules,\n        this._sequencingControls,\n        adlNav,\n      );\n    }\n  }\n\n  /**\n   * Get the last sequencing result\n   * @return {SequencingResult | null}\n   */\n  get lastSequencingResult(): SequencingResult | null {\n    return this._lastSequencingResult;\n  }\n\n  /**\n   * Process navigation request using the new sequencing process\n   * @param {string} request - The navigation request\n   * @param {string | null} targetActivityId - Target activity ID for choice/jump requests\n   * @return {boolean} - True if the request is valid and results in delivery, false otherwise\n   */\n  processNavigationRequest(request: string, targetActivityId: string | null = null): boolean {\n    if (!this._sequencingProcess || !this._adlNav) {\n      return false;\n    }\n\n    // Parse choice and jump requests to extract target\n    if (request.includes(\"choice\") && request.includes(\"{target=\")) {\n      const match = request.match(/\\{target=([^}]+)\\}/);\n      if (match) {\n        targetActivityId = match[1] || null;\n        request = \"choice\";\n      }\n    } else if (request.includes(\"jump\") && request.includes(\"{target=\")) {\n      const match = request.match(/\\{target=([^}]+)\\}/);\n      if (match) {\n        targetActivityId = match[1] || null;\n        request = \"jump\";\n      }\n    }\n\n    // Map string request to SequencingRequestType\n    let requestType: SequencingRequestType;\n    switch (request) {\n      case \"start\":\n        requestType = SequencingRequestType.START;\n        break;\n      case \"resumeAll\":\n        requestType = SequencingRequestType.RESUME_ALL;\n        break;\n      case \"continue\":\n        requestType = SequencingRequestType.CONTINUE;\n        break;\n      case \"previous\":\n        requestType = SequencingRequestType.PREVIOUS;\n        break;\n      case \"choice\":\n        requestType = SequencingRequestType.CHOICE;\n        break;\n      case \"jump\":\n        requestType = SequencingRequestType.JUMP;\n        break;\n      case \"exit\":\n        requestType = SequencingRequestType.EXIT;\n        break;\n      case \"exitAll\":\n        requestType = SequencingRequestType.EXIT_ALL;\n        break;\n      case \"abandon\":\n        requestType = SequencingRequestType.ABANDON;\n        break;\n      case \"abandonAll\":\n        requestType = SequencingRequestType.ABANDON_ALL;\n        break;\n      case \"suspendAll\":\n        requestType = SequencingRequestType.SUSPEND_ALL;\n        break;\n      case \"retry\":\n        requestType = SequencingRequestType.RETRY;\n        break;\n      case \"retryAll\":\n        requestType = SequencingRequestType.RETRY_ALL;\n        break;\n      default:\n        return false;\n    }\n\n    // Process the sequencing request\n    const result = this._sequencingProcess.sequencingRequestProcess(requestType, targetActivityId);\n    this._lastSequencingResult = result;\n\n    // Update navigation request validity\n    if (result.exception) {\n      // Don't modify _choice and _jump as they are target-specific objects\n      // Note: These setters may throw if already initialized, but that's expected behavior\n      try {\n        this._adlNav.request_valid.continue = \"false\";\n        this._adlNav.request_valid.previous = \"false\";\n      } catch (e) {\n        // Expected when already initialized - navigation validity is read-only after init\n      }\n      return false;\n    }\n\n    // Update navigation request validity based on current state\n    this.updateNavigationRequestValidity();\n\n    // Return true if delivery is requested\n    return result.deliveryRequest === DeliveryRequestType.DELIVER;\n  }\n\n  /**\n   * Update navigation request validity based on current state\n   */\n  private updateNavigationRequestValidity(): void {\n    if (!this._adlNav || !this._sequencingProcess) {\n      return;\n    }\n\n    // Check continue validity\n    const continueResult = this._sequencingProcess.sequencingRequestProcess(\n      SequencingRequestType.CONTINUE,\n    );\n    try {\n      this._adlNav.request_valid.continue = !continueResult.exception ? \"true\" : \"false\";\n    } catch (e) {\n      // Expected when already initialized - navigation validity is read-only after init\n    }\n\n    // Check previous validity\n    const previousResult = this._sequencingProcess.sequencingRequestProcess(\n      SequencingRequestType.PREVIOUS,\n    );\n    try {\n      this._adlNav.request_valid.previous = !previousResult.exception ? \"true\" : \"false\";\n    } catch (e) {\n      // Expected when already initialized - navigation validity is read-only after init\n    }\n\n    // Choice and jump are target-specific and handled separately\n    // They are objects that map target IDs to NAVBoolean values\n  }\n\n\n  /**\n   * Process rollup for the entire activity tree\n   */\n  processRollup(): void {\n    // Get the root activity\n    const root = this._activityTree.root;\n    if (!root) {\n      return;\n    }\n\n    // Process rollup from the bottom up\n    this._processRollupRecursive(root);\n  }\n\n\n  /**\n   * Process rollup recursively\n   * @param {Activity} activity - The activity to process rollup for\n   * @private\n   */\n  private _processRollupRecursive(activity: Activity): void {\n    // Process rollup for children first\n    for (const child of activity.children) {\n      this._processRollupRecursive(child);\n    }\n\n    // Process rollup for this activity\n    this._rollupRules.processRollup(activity);\n  }\n\n  /**\n   * Get the last sequencing result\n   * @return {SequencingResult | null}\n   */\n  getLastSequencingResult(): SequencingResult | null {\n    return this._lastSequencingResult;\n  }\n\n  /**\n   * Get the current activity\n   * @return {Activity | null}\n   */\n  getCurrentActivity(): Activity | null {\n    return this._activityTree.currentActivity;\n  }\n\n  /**\n   * Get the root activity\n   * @return {Activity | null}\n   */\n  getRootActivity(): Activity | null {\n    return this._activityTree.root;\n  }\n\n  /**\n   * toJSON for Sequencing\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      activityTree: this._activityTree,\n      sequencingRules: this._sequencingRules,\n      sequencingControls: this._sequencingControls,\n      rollupRules: this._rollupRules,\n      adlNav: this._adlNav,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import BaseAPI from \"./BaseAPI\";\nimport { CMI } from \"./cmi/scorm2004/cmi\";\nimport * as Utilities from \"./utilities\";\nimport { StringKeyMap, stringMatches } from \"./utilities\";\nimport { global_constants, scorm2004_constants } from \"./constants/api_constants\";\nimport { scorm2004_errors } from \"./constants/error_codes\";\nimport { CMIObjectivesObject } from \"./cmi/scorm2004/objectives\";\nimport { ADL, ADLDataObject } from \"./cmi/scorm2004/adl\";\nimport { CommitObject, ResultObject, ScoreObject, Settings } from \"./types/api_types\";\nimport {\n  ActivitySettings,\n  RollupRuleSettings,\n  RollupRulesSettings,\n  SequencingControlsSettings,\n  SequencingRuleSettings,\n  SequencingRulesSettings,\n  SequencingSettings,\n} from \"./types/sequencing_types\";\nimport { RuleCondition, SequencingRule } from \"./cmi/scorm2004/sequencing/sequencing_rules\";\nimport { RollupCondition, RollupRule } from \"./cmi/scorm2004/sequencing/rollup_rules\";\nimport { scorm2004_regex } from \"./constants/regex\"; // Import functions from extracted modules\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport {\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n} from \"./cmi/scorm2004/interactions\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { CorrectResponses, ResponseType } from \"./constants/response_constants\";\nimport { CMICommentsObject } from \"./cmi/scorm2004/comments\";\nimport ValidLanguages from \"./constants/language_constants\";\nimport { CompletionStatus, SuccessStatus } from \"./constants/enums\";\nimport { Sequencing } from \"./cmi/scorm2004/sequencing/sequencing\";\nimport { Activity } from \"./cmi/scorm2004/sequencing/activity\";\n\n/**\n * API class for SCORM 2004\n */\nclass Scorm2004API extends BaseAPI {\n  private _version: string = \"1.0\";\n  private _globalObjectives: CMIObjectivesObject[] = [];\n  private readonly _sequencing: Sequencing;\n  private _extractedScoItemIds: string[] = [];\n\n  /**\n   * Constructor for SCORM 2004 API\n   * @param {Settings} settings\n   */\n  constructor(settings?: Settings) {\n    if (settings) {\n      if (settings.mastery_override === undefined) {\n        settings.mastery_override = false;\n      }\n    }\n\n    super(scorm2004_errors, settings);\n\n    this.cmi = new CMI();\n    this.adl = new ADL();\n    this._sequencing = new Sequencing();\n\n    // Connect the sequencing object to the ADL's sequencing property\n    // The Sequencing object is used for both configuration and runtime navigation processing\n    // It needs to be attached to the ADL object for runtime navigation requests (adl.nav.request)\n    this.adl.sequencing = this._sequencing;\n\n    // Configure sequencing if settings are provided\n    if (settings?.sequencing) {\n      this.configureSequencing(settings.sequencing);\n    }\n\n    // Rename functions to match 2004 Spec and expose to modules\n    this.Initialize = this.lmsInitialize;\n    this.Terminate = this.lmsFinish;\n    this.GetValue = this.lmsGetValue;\n    this.SetValue = this.lmsSetValue;\n    this.Commit = this.lmsCommit;\n    this.GetLastError = this.lmsGetLastError;\n    this.GetErrorString = this.lmsGetErrorString;\n    this.GetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  public cmi: CMI;\n  public adl: ADL;\n\n  public Initialize: () => string;\n  public Terminate: () => string;\n  public GetValue: (CMIElement: string) => string;\n  public SetValue: (CMIElement: string, value: any) => string;\n  public Commit: () => string;\n  public GetLastError: () => string;\n  public GetErrorString: (CMIErrorCode: string | number) => string;\n  public GetDiagnostic: (CMIErrorCode: string | number) => string;\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset(settings?: Settings) {\n    this.commonReset(settings);\n\n    this.cmi?.reset();\n    this.adl?.reset();\n    this._sequencing?.reset();\n  }\n\n  /**\n   * Getter for _version\n   * @return {string}\n   */\n  get version(): string {\n    return this._version;\n  }\n\n  /**\n   * Getter for _globalObjectives\n   */\n  get globalObjectives(): CMIObjectivesObject[] {\n    return this._globalObjectives;\n  }\n\n  /**\n   * Initialize function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize(): string {\n    this.cmi.initialize();\n    return this.initialize(\n      \"Initialize\",\n      \"LMS was already initialized!\",\n      \"LMS is already finished!\",\n    );\n  }\n\n  /**\n   * Terminate function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish(): string {\n    (async () => {\n      await this.internalFinish();\n    })();\n    return global_constants.SCORM_TRUE;\n  }\n\n  async internalFinish(): Promise<string> {\n    const result = await this.terminate(\"Terminate\", true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      if (this.adl.nav.request !== \"_none_\") {\n        const navActions: { [key: string]: string } = {\n          continue: \"SequenceNext\",\n          previous: \"SequencePrevious\",\n          choice: \"SequenceChoice\",\n          jump: \"SequenceJump\",\n          exit: \"SequenceExit\",\n          exitAll: \"SequenceExitAll\",\n          abandon: \"SequenceAbandon\",\n          abandonAll: \"SequenceAbandonAll\",\n        };\n\n        let request = this.adl.nav.request;\n        const choiceJumpRegex = new RegExp(scorm2004_regex.NAVEvent);\n        const matches = request.match(choiceJumpRegex);\n        let target = \"\";\n        if (matches) {\n          if (matches.groups?.choice_target) {\n            target = matches.groups?.choice_target;\n            request = \"choice\";\n          } else if (matches.groups?.jump_target) {\n            target = matches.groups?.jump_target;\n            request = \"jump\";\n          }\n        }\n        const action = navActions[request];\n        if (action) {\n          this.processListeners(action, \"adl.nav.request\", target);\n        }\n      } else if (this.settings.autoProgress) {\n        this.processListeners(\"SequenceNext\", undefined, \"next\");\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * GetValue function from SCORM 2004 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement: string): string {\n    const adlNavRequestRegex =\n      \"^adl\\\\.nav\\\\.request_valid\\\\.(choice|jump)\\\\.{target=\\\\S{0,}([a-zA-Z0-9-_]+)}$\";\n    if (stringMatches(CMIElement, adlNavRequestRegex)) {\n      const matches = CMIElement.match(adlNavRequestRegex);\n      if (matches) {\n        const request = matches[1];\n        const target = matches[2]?.replace(/{target=/g, \"\").replace(/}/g, \"\") || \"\";\n        if (request === \"choice\" || request === \"jump\") {\n          if (this.settings.scoItemIdValidator) {\n            return String(this.settings.scoItemIdValidator(target));\n          }\n          // If we have extracted IDs from sequencing, use those exclusively\n          if (this._extractedScoItemIds.length > 0) {\n            return String(this._extractedScoItemIds.includes(target));\n          }\n          // Otherwise use the scoItemIds from settings\n          return String(this.settings?.scoItemIds?.includes(target));\n        }\n      }\n    }\n    return this.getValue(\"GetValue\", true, CMIElement);\n  }\n\n  /**\n   * SetValue function from SCORM 2004 Spec\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement: string, value: any): string {\n    // Proceed with regular setting for non-objective elements or fallback behavior\n    return this.setValue(\"SetValue\", \"Commit\", true, CMIElement, value);\n  }\n\n  /**\n   * Commit function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit(): string {\n    if (this.settings.asyncCommit) {\n      this.scheduleCommit(500, \"Commit\");\n    } else {\n      (async () => {\n        await this.commit(\"Commit\", false);\n      })();\n    }\n    return global_constants.SCORM_TRUE;\n  }\n\n  /**\n   * GetLastError function from SCORM 2004 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError(): string {\n    return this.getLastError(\"GetLastError\");\n  }\n\n  /**\n   * GetErrorString function from SCORM 2004 Spec\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode: string | number): string {\n    return this.getErrorString(\"GetErrorString\", CMIErrorCode);\n  }\n\n  /**\n   * GetDiagnostic function from SCORM 2004 Spec\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode: string | number): string {\n    return this.getDiagnostic(\"GetDiagnostic\", CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object - delegates to CMIValueHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  override setCMIValue(CMIElement: string, value: any): string {\n    // Check if we're updating a global or local objective\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      const parts = CMIElement.split(\".\");\n      const index = Number(parts[2]);\n      const element_base = `cmi.objectives.${index}`;\n\n      let objective_id;\n      const setting_id = stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\\\\.id\");\n\n      if (setting_id) {\n        // If we're setting the objective ID, capture it directly\n        objective_id = value;\n      } else {\n        // Find existing objective ID if available\n        const objective = this.cmi.objectives.findObjectiveByIndex(index);\n        objective_id = objective ? objective.id : undefined;\n      }\n\n      // Check if the objective ID matches a global objective\n      const is_global = objective_id && this.settings.globalObjectiveIds?.includes(objective_id);\n\n      if (is_global) {\n        // Locate or create an entry in _globalObjectives for the global objective\n        let global_index = this._globalObjectives.findIndex((obj) => obj.id === objective_id);\n\n        if (global_index === -1) {\n          global_index = this._globalObjectives.length;\n          const newGlobalObjective = new CMIObjectivesObject();\n          newGlobalObjective.id = objective_id;\n          this._globalObjectives.push(newGlobalObjective);\n        }\n\n        // Update the global objective\n        const global_element = CMIElement.replace(\n          element_base,\n          `_globalObjectives.${global_index}`,\n        );\n        this._commonSetCMIValue(\"SetGlobalObjectiveValue\", true, global_element, value);\n      }\n    }\n    return this._commonSetCMIValue(\"SetValue\", true, CMIElement, value);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array - delegates to CMIElementHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI|null}\n   */\n  getChildElement(CMIElement: string, value: any, foundFirstIndex: boolean): BaseCMI | null {\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      return new CMIObjectivesObject();\n    }\n\n    if (foundFirstIndex) {\n      if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+\")) {\n        return this.createCorrectResponsesObject(CMIElement, value);\n      } else if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+\")) {\n        return new CMIInteractionsObjectivesObject();\n      }\n    } else if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\")) {\n      return new CMIInteractionsObject();\n    }\n\n    if (stringMatches(CMIElement, \"cmi\\\\.comments_from_learner\\\\.\\\\d+\")) {\n      return new CMICommentsObject();\n    } else if (stringMatches(CMIElement, \"cmi\\\\.comments_from_lms\\\\.\\\\d+\")) {\n      return new CMICommentsObject(true);\n    }\n\n    if (stringMatches(CMIElement, \"adl\\\\.data\\\\.\\\\d+\")) {\n      return new ADLDataObject();\n    }\n\n    return null;\n  }\n\n  /**\n   * Creates a correct responses object for an interaction - delegates to CMIElementHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {BaseCMI|null}\n   */\n  private createCorrectResponsesObject(CMIElement: string, value: any): BaseCMI | null {\n    const parts = CMIElement.split(\".\");\n    const index = Number(parts[2]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    if (this.isInitialized()) {\n      if (typeof interaction === \"undefined\" || !interaction.type) {\n        this.throwSCORMError(CMIElement, scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED, CMIElement);\n        return null;\n      } else {\n        this.checkDuplicateChoiceResponse(CMIElement, interaction, value);\n        const response_type = CorrectResponses[interaction.type];\n        if (response_type) {\n          this.checkValidResponseType(CMIElement, response_type, value, interaction.type);\n        } else {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.GENERAL_SET_FAILURE,\n            `Incorrect Response Type: ${interaction.type}`,\n          );\n          return null;\n        }\n      }\n    }\n\n    if (this.lastErrorCode === \"0\") {\n      return new CMIInteractionsCorrectResponsesObject(interaction);\n    }\n\n    return null;\n  }\n\n  /**\n   * Checks for valid response types - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {ResponseType} response_type\n   * @param {any} value\n   * @param {string} interaction_type\n   */\n  checkValidResponseType(\n    CMIElement: string,\n    response_type: ResponseType,\n    value: any,\n    interaction_type: string,\n  ) {\n    let nodes = [];\n    if (response_type?.delimiter) {\n      nodes = String(value).split(response_type.delimiter);\n    } else {\n      nodes[0] = value;\n    }\n\n    if (nodes.length > 0 && nodes.length <= response_type.max) {\n      this.checkCorrectResponseValue(CMIElement, interaction_type, nodes, value);\n    } else if (nodes.length > response_type.max) {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.GENERAL_SET_FAILURE,\n        `Data Model Element Pattern Too Long: ${value}`,\n      );\n    }\n  }\n\n  /**\n   * Checks for duplicate 'choice' responses - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {CMIInteractionsObject} interaction\n   * @param {any} value\n   */\n  checkDuplicateChoiceResponse(CMIElement: string, interaction: CMIInteractionsObject, value: any) {\n    const interaction_count = interaction.correct_responses._count;\n    if (interaction.type === \"choice\") {\n      for (let i = 0; i < interaction_count && this.lastErrorCode === \"0\"; i++) {\n        const response = interaction.correct_responses.childArray[i];\n        if (response.pattern === value) {\n          this.throwSCORMError(CMIElement, scorm2004_errors.GENERAL_SET_FAILURE, `${value}`);\n        }\n      }\n    }\n  }\n\n  /**\n   * Validate correct response - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {*} value\n   */\n  validateCorrectResponse(CMIElement: string, value: any) {\n    const parts = CMIElement.split(\".\");\n    const index = Number(parts[2]);\n    const pattern_index = Number(parts[4]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    const interaction_count = interaction.correct_responses._count;\n    this.checkDuplicateChoiceResponse(CMIElement, interaction, value);\n\n    const response_type = CorrectResponses[interaction.type];\n    if (\n      response_type &&\n      (typeof response_type.limit === \"undefined\" || interaction_count <= response_type.limit)\n    ) {\n      this.checkValidResponseType(CMIElement, response_type, value, interaction.type);\n\n      if (\n        (this.lastErrorCode === \"0\" &&\n          (!response_type.duplicate ||\n            !this.checkDuplicatedPattern(interaction.correct_responses, pattern_index, value))) ||\n        (this.lastErrorCode === \"0\" && value === \"\")\n      ) {\n        // do nothing, we want the inverse\n      } else {\n        if (this.lastErrorCode === \"0\") {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.GENERAL_SET_FAILURE,\n            `Data Model Element Pattern Already Exists: ${CMIElement} - ${value}`,\n          );\n        }\n      }\n    } else {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.GENERAL_SET_FAILURE,\n        `Data Model Element Collection Limit Reached: ${CMIElement} - ${value}`,\n      );\n    }\n  }\n\n  /**\n   * Gets a value from the CMI Object - delegates to CMIValueHandlerModule\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  override getCMIValue(CMIElement: string): any {\n    return this._commonGetCMIValue(\"GetValue\", true, CMIElement);\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {(string|number)} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  override getLmsErrorMessageDetails(errorNumber: string | number, detail: boolean): string {\n    let basicMessage = \"\";\n    let detailMessage = \"\";\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    const errorDescription = scorm2004_constants.error_descriptions[errorNumber];\n    if (errorDescription) {\n      basicMessage = errorDescription.basicMessage;\n      detailMessage = errorDescription.detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Check to see if a correct_response value has been duplicated - delegates to ValidationModule\n   * @param {CMIArray} correct_response\n   * @param {number} current_index\n   * @param {*} value\n   * @return {boolean}\n   */\n  checkDuplicatedPattern(correct_response: CMIArray, current_index: number, value: any): boolean {\n    let found = false;\n    const count = correct_response._count;\n    for (let i = 0; i < count && !found; i++) {\n      if (i !== current_index && correct_response.childArray[i] === value) {\n        found = true;\n      }\n    }\n    return found;\n  }\n\n  /**\n   * Checks for a valid correct_response value - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {string} interaction_type\n   * @param {Array} nodes\n   * @param {*} value\n   */\n  checkCorrectResponseValue(\n    CMIElement: string,\n    interaction_type: string,\n    nodes: Array<any>,\n    value: any,\n  ) {\n    const response = CorrectResponses[interaction_type];\n    if (!response) {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.TYPE_MISMATCH,\n        `Incorrect Response Type: ${interaction_type}`,\n      );\n      return;\n    }\n    const formatRegex = new RegExp(response.format);\n    for (let i = 0; i < nodes.length && this.lastErrorCode === \"0\"; i++) {\n      if (interaction_type.match(\"^(fill-in|long-fill-in|matching|performance|sequencing)$\")) {\n        nodes[i] = this.removeCorrectResponsePrefixes(CMIElement, nodes[i]);\n      }\n\n      if (response?.delimiter2) {\n        const values = nodes[i].split(response.delimiter2);\n        if (values.length === 2) {\n          const matches = values[0].match(formatRegex);\n          if (!matches) {\n            this.throwSCORMError(\n              CMIElement,\n              scorm2004_errors.TYPE_MISMATCH,\n              `${interaction_type}: ${value}`,\n            );\n          } else {\n            if (!response.format2 || !values[1].match(new RegExp(response.format2))) {\n              this.throwSCORMError(\n                CMIElement,\n                scorm2004_errors.TYPE_MISMATCH,\n                `${interaction_type}: ${value}`,\n              );\n            }\n          }\n        } else {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.TYPE_MISMATCH,\n            `${interaction_type}: ${value}`,\n          );\n        }\n      } else {\n        const matches = nodes[i].match(formatRegex);\n        if ((!matches && value !== \"\") || (!matches && interaction_type === \"true-false\")) {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.TYPE_MISMATCH,\n            `${interaction_type}: ${value}`,\n          );\n        } else {\n          if (interaction_type === \"numeric\" && nodes.length > 1) {\n            if (Number(nodes[0]) > Number(nodes[1])) {\n              this.throwSCORMError(\n                CMIElement,\n                scorm2004_errors.TYPE_MISMATCH,\n                `${interaction_type}: ${value}`,\n              );\n            }\n          } else {\n            if (nodes[i] !== \"\" && response.unique) {\n              for (let j = 0; j < i && this.lastErrorCode === \"0\"; j++) {\n                if (nodes[i] === nodes[j]) {\n                  this.throwSCORMError(\n                    CMIElement,\n                    scorm2004_errors.TYPE_MISMATCH,\n                    `${interaction_type}: ${value}`,\n                  );\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove prefixes from correct_response - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {string} node\n   * @return {*}\n   */\n  removeCorrectResponsePrefixes(CMIElement: string, node: string): any {\n    let seenOrder = false;\n    let seenCase = false;\n    let seenLang = false;\n\n    const prefixRegex = new RegExp(\"^({(lang|case_matters|order_matters)=([^}]+)})\");\n    let matches = node.match(prefixRegex);\n    let langMatches = null;\n    while (matches) {\n      switch (matches[2]) {\n        case \"lang\":\n          langMatches = node.match(scorm2004_regex.CMILangcr);\n          if (langMatches) {\n            const lang = langMatches[3];\n            if (lang !== undefined && lang.length > 0) {\n              if (!ValidLanguages.includes(lang.toLowerCase())) {\n                this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n              }\n            }\n          }\n          seenLang = true;\n          break;\n        case \"case_matters\":\n          if (!seenLang && !seenOrder && !seenCase) {\n            if (matches[3] !== \"true\" && matches[3] !== \"false\") {\n              this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n            }\n          }\n\n          seenCase = true;\n          break;\n        case \"order_matters\":\n          if (!seenCase && !seenLang && !seenOrder) {\n            if (matches[3] !== \"true\" && matches[3] !== \"false\") {\n              this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n            }\n          }\n\n          seenOrder = true;\n          break;\n      }\n      node = node.substring(matches[1]?.length || 0);\n      matches = node.match(prefixRegex);\n    }\n\n    return node;\n  }\n\n  /**\n   * Replace the whole API with another\n   * @param {Scorm2004API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI: Scorm2004API) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.adl = newAPI.adl;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit - delegates to DataSerializationModule\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} includeTotalTime - Whether to include total time in the commit data\n   * @return {object|Array}\n   */\n  renderCommitCMI(\n    terminateCommit: boolean,\n    includeTotalTime: boolean = false,\n  ): StringKeyMap | Array<any> {\n    const cmiExport: StringKeyMap = this.renderCMIToJSONObject();\n\n    if (terminateCommit || includeTotalTime) {\n      (cmiExport.cmi as any).total_time = (this.cmi as any).getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened: StringKeyMap = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case \"flattened\":\n        return Utilities.flatten(cmiExport);\n      case \"params\":\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case \"json\":\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit - delegates to DataSerializationModule\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} includeTotalTime - Whether to include total time in the commit data\n   * @return {CommitObject}\n   */\n  renderCommitObject(terminateCommit: boolean, includeTotalTime: boolean = false): CommitObject {\n    const cmiExport = this.renderCommitCMI(terminateCommit, includeTotalTime);\n    const calculateTotalTime = terminateCommit || includeTotalTime;\n    const totalTimeDuration = calculateTotalTime ? this.cmi.getCurrentTotalTime() : \"\";\n    const totalTimeSeconds = Utilities.getDurationAsSeconds(\n      totalTimeDuration,\n      scorm2004_regex.CMITimespan,\n    );\n\n    let completionStatus = CompletionStatus.UNKNOWN;\n    let successStatus = SuccessStatus.UNKNOWN;\n    if (this.cmi.completion_status) {\n      if (this.cmi.completion_status === \"completed\") {\n        completionStatus = CompletionStatus.COMPLETED;\n      } else if (this.cmi.completion_status === \"incomplete\") {\n        completionStatus = CompletionStatus.INCOMPLETE;\n      }\n    }\n    if (this.cmi.success_status) {\n      if (this.cmi.success_status === \"passed\") {\n        successStatus = SuccessStatus.PASSED;\n      } else if (this.cmi.success_status === \"failed\") {\n        successStatus = SuccessStatus.FAILED;\n      }\n    }\n\n    const scoreObject: ScoreObject = this.cmi?.score?.getScoreObject() || {};\n    const commitObject: CommitObject = {\n      completionStatus: completionStatus,\n      successStatus: successStatus,\n      totalTimeSeconds: totalTimeSeconds,\n      runtimeData: cmiExport as StringKeyMap,\n    };\n    if (scoreObject) {\n      commitObject.score = scoreObject;\n    }\n    return commitObject;\n  }\n\n  /**\n   * Attempts to store the data to the LMS - delegates to DataSerializationModule\n   *\n   * @param {boolean} terminateCommit\n   * @return {ResultObject}\n   */\n  async storeData(terminateCommit: boolean): Promise<ResultObject> {\n    if (terminateCommit) {\n      if (this.cmi.mode === \"normal\") {\n        if (this.cmi.credit === \"credit\") {\n          if (this.cmi.completion_threshold && this.cmi.progress_measure) {\n            if (this.cmi.progress_measure >= this.cmi.completion_threshold) {\n              this.cmi.completion_status = \"completed\";\n            } else {\n              this.cmi.completion_status = \"incomplete\";\n            }\n          }\n          if (this.cmi.scaled_passing_score && this.cmi.score.scaled) {\n            if (this.cmi.score.scaled >= this.cmi.scaled_passing_score) {\n              this.cmi.success_status = \"passed\";\n            } else {\n              this.cmi.success_status = \"failed\";\n            }\n          }\n        }\n      }\n    }\n\n    let navRequest = false;\n    if (\n      this.adl.nav.request !==\n        ((this.startingData?.adl as StringKeyMap)?.nav as StringKeyMap)?.request &&\n      this.adl.nav.request !== \"_none_\"\n    ) {\n      navRequest = true;\n    }\n\n    const commitObject = this.getCommitObject(terminateCommit);\n    if (typeof this.settings.lmsCommitUrl === \"string\") {\n      const result = await this.processHttpRequest(\n        this.settings.lmsCommitUrl,\n        commitObject,\n        terminateCommit,\n      );\n\n      // Check if this is a sequencing call, and then call the necessary JS\n      if (\n        navRequest &&\n        result.navRequest !== undefined &&\n        result.navRequest !== \"\" &&\n        typeof result.navRequest === \"string\"\n      ) {\n        Function(`\"use strict\";(() => { ${result.navRequest} })()`)();\n      } else if (result?.navRequest && !navRequest) {\n        if (\n          typeof result.navRequest === \"object\" &&\n          Object.hasOwnProperty.call(result.navRequest, \"name\")\n        ) {\n          this.processListeners(result.navRequest.name as string, result.navRequest.data as string);\n        }\n      }\n\n      return result;\n    }\n\n    return {\n      result: global_constants.SCORM_TRUE,\n      errorCode: 0,\n    };\n  }\n\n  /**\n   * Configure sequencing based on provided settings\n   * @param {SequencingSettings} sequencingSettings - The sequencing settings\n   */\n  private configureSequencing(sequencingSettings: SequencingSettings): void {\n    // Configure activity tree\n    if (sequencingSettings.activityTree) {\n      this.configureActivityTree(sequencingSettings.activityTree);\n    }\n\n    // Configure sequencing rules\n    if (sequencingSettings.sequencingRules) {\n      this.configureSequencingRules(sequencingSettings.sequencingRules);\n    }\n\n    // Configure sequencing controls\n    if (sequencingSettings.sequencingControls) {\n      this.configureSequencingControls(sequencingSettings.sequencingControls);\n    }\n\n    // Configure rollup rules\n    if (sequencingSettings.rollupRules) {\n      this.configureRollupRules(sequencingSettings.rollupRules);\n    }\n  }\n\n  /**\n   * Configure activity tree based on provided settings\n   * @param {ActivitySettings} activityTreeSettings - The activity tree settings\n   */\n  private configureActivityTree(activityTreeSettings: ActivitySettings): void {\n    // Create root activity\n    const rootActivity = this.createActivity(activityTreeSettings);\n\n    // Create activity tree\n    const activityTree = this._sequencing.activityTree;\n    activityTree.root = rootActivity;\n\n    // Extract activity IDs for use as scoItemIds\n    this._extractedScoItemIds = this.extractActivityIds(rootActivity);\n  }\n\n  /**\n   * Extract all activity IDs from an activity and its children\n   * @param {Activity} activity - The activity to extract IDs from\n   * @return {string[]} - Array of activity IDs\n   */\n  private extractActivityIds(activity: Activity): string[] {\n    const ids = [activity.id];\n\n    // Recursively extract IDs from children\n    for (const child of activity.children) {\n      ids.push(...this.extractActivityIds(child));\n    }\n\n    return ids;\n  }\n\n  /**\n   * Create an activity from settings\n   * @param {ActivitySettings} activitySettings - The activity settings\n   * @return {Activity} - The created activity\n   */\n  private createActivity(activitySettings: ActivitySettings): Activity {\n    // Create activity\n    const activity = new Activity(activitySettings.id, activitySettings.title);\n\n    // Set activity properties\n    if (activitySettings.isVisible !== undefined) {\n      activity.isVisible = activitySettings.isVisible;\n    }\n    if (activitySettings.isActive !== undefined) {\n      activity.isActive = activitySettings.isActive;\n    }\n    if (activitySettings.isSuspended !== undefined) {\n      activity.isSuspended = activitySettings.isSuspended;\n    }\n    if (activitySettings.isCompleted !== undefined) {\n      activity.isCompleted = activitySettings.isCompleted;\n    }\n\n    // Create child activities\n    if (activitySettings.children) {\n      for (const childSettings of activitySettings.children) {\n        const childActivity = this.createActivity(childSettings);\n        activity.addChild(childActivity);\n      }\n    }\n\n    return activity;\n  }\n\n  /**\n   * Configure sequencing rules based on provided settings\n   * @param {SequencingRulesSettings} sequencingRulesSettings - The sequencing rules settings\n   */\n  private configureSequencingRules(sequencingRulesSettings: SequencingRulesSettings): void {\n    const sequencingRules = this._sequencing.sequencingRules;\n\n    // Configure pre-condition rules\n    if (sequencingRulesSettings.preConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.preConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addPreConditionRule(rule);\n      }\n    }\n\n    // Configure exit condition rules\n    if (sequencingRulesSettings.exitConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.exitConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addExitConditionRule(rule);\n      }\n    }\n\n    // Configure post-condition rules\n    if (sequencingRulesSettings.postConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.postConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addPostConditionRule(rule);\n      }\n    }\n  }\n\n  /**\n   * Create a sequencing rule from settings\n   * @param {SequencingRuleSettings} ruleSettings - The sequencing rule settings\n   * @return {SequencingRule} - The created sequencing rule\n   */\n  private createSequencingRule(ruleSettings: SequencingRuleSettings): SequencingRule {\n    // Create rule\n    const rule = new SequencingRule(ruleSettings.action, ruleSettings.conditionCombination);\n\n    // Add conditions\n    for (const conditionSettings of ruleSettings.conditions) {\n      const condition = new RuleCondition(\n        conditionSettings.condition,\n        conditionSettings.operator,\n        new Map(Object.entries(conditionSettings.parameters || {})),\n      );\n      rule.addCondition(condition);\n    }\n\n    return rule;\n  }\n\n  /**\n   * Configure sequencing controls based on provided settings\n   * @param {SequencingControlsSettings} sequencingControlsSettings - The sequencing controls settings\n   */\n  private configureSequencingControls(\n    sequencingControlsSettings: SequencingControlsSettings,\n  ): void {\n    const sequencingControls = this._sequencing.sequencingControls;\n\n    // Set sequencing control properties\n    if (sequencingControlsSettings.enabled !== undefined) {\n      sequencingControls.enabled = sequencingControlsSettings.enabled;\n    }\n    if (sequencingControlsSettings.choiceExit !== undefined) {\n      sequencingControls.choiceExit = sequencingControlsSettings.choiceExit;\n    }\n    if (sequencingControlsSettings.flow !== undefined) {\n      sequencingControls.flow = sequencingControlsSettings.flow;\n    }\n    if (sequencingControlsSettings.forwardOnly !== undefined) {\n      sequencingControls.forwardOnly = sequencingControlsSettings.forwardOnly;\n    }\n    if (sequencingControlsSettings.useCurrentAttemptObjectiveInfo !== undefined) {\n      sequencingControls.useCurrentAttemptObjectiveInfo =\n        sequencingControlsSettings.useCurrentAttemptObjectiveInfo;\n    }\n    if (sequencingControlsSettings.useCurrentAttemptProgressInfo !== undefined) {\n      sequencingControls.useCurrentAttemptProgressInfo =\n        sequencingControlsSettings.useCurrentAttemptProgressInfo;\n    }\n    if (sequencingControlsSettings.preventActivation !== undefined) {\n      sequencingControls.preventActivation = sequencingControlsSettings.preventActivation;\n    }\n    if (sequencingControlsSettings.constrainChoice !== undefined) {\n      sequencingControls.constrainChoice = sequencingControlsSettings.constrainChoice;\n    }\n    if (sequencingControlsSettings.rollupObjectiveSatisfied !== undefined) {\n      sequencingControls.rollupObjectiveSatisfied =\n        sequencingControlsSettings.rollupObjectiveSatisfied;\n    }\n    if (sequencingControlsSettings.rollupProgressCompletion !== undefined) {\n      sequencingControls.rollupProgressCompletion =\n        sequencingControlsSettings.rollupProgressCompletion;\n    }\n    if (sequencingControlsSettings.objectiveMeasureWeight !== undefined) {\n      sequencingControls.objectiveMeasureWeight = sequencingControlsSettings.objectiveMeasureWeight;\n    }\n  }\n\n  /**\n   * Configure rollup rules based on provided settings\n   * @param {RollupRulesSettings} rollupRulesSettings - The rollup rules settings\n   */\n  private configureRollupRules(rollupRulesSettings: RollupRulesSettings): void {\n    const rollupRules = this._sequencing.rollupRules;\n\n    // Configure rollup rules\n    if (rollupRulesSettings.rules) {\n      for (const ruleSettings of rollupRulesSettings.rules) {\n        const rule = this.createRollupRule(ruleSettings);\n        rollupRules.addRule(rule);\n      }\n    }\n  }\n\n  /**\n   * Create a rollup rule from settings\n   * @param {RollupRuleSettings} ruleSettings - The rollup rule settings\n   * @return {RollupRule} - The created rollup rule\n   */\n  private createRollupRule(ruleSettings: RollupRuleSettings): RollupRule {\n    // Create rule\n    const rule = new RollupRule(\n      ruleSettings.action,\n      ruleSettings.consideration,\n      ruleSettings.minimumCount,\n      ruleSettings.minimumPercent,\n    );\n\n    // Add conditions\n    for (const conditionSettings of ruleSettings.conditions) {\n      const condition = new RollupCondition(\n        conditionSettings.condition,\n        new Map(Object.entries(conditionSettings.parameters || {})),\n      );\n      rule.addCondition(condition);\n    }\n\n    return rule;\n  }\n}\n\nexport default Scorm2004API;\n","// src/CrossFrameAPI.ts\nimport { MessageData, MessageResponse } from \"./types/CrossFrame\";\nimport { global_errors } from \"./constants/error_codes\";\n\n/**\n * Client-side SCORM façade running in your content frame.\n * Returns cached/default values synchronously, then fires off an async\n * postMessage to the LMS frame to refresh cache and error state.\n */\nexport default class CrossFrameAPI {\n  private _cache = new Map<string, string>();\n  private _lastError = \"0\";\n  private _pending = new Map<\n    string,\n    {\n      resolve: (v: any) => void;\n      reject: (e: any) => void;\n      timer: ReturnType<typeof setTimeout>;\n    }\n  >();\n  private _counter = 0;\n  private readonly _origin: string;\n  private readonly _targetWindow: Window;\n\n  private _handler: ProxyHandler<CrossFrameAPI> = {\n    get: (target, prop, receiver) => {\n      // If it's an existing property/method, return it\n      if (typeof prop !== \"string\" || prop in target) {\n        const v = Reflect.get(target, prop, receiver);\n        return typeof v === \"function\" ? v.bind(target) : v;\n      }\n\n      // Otherwise treat prop as a SCORM call\n      const methodName = prop;\n      const isGet = methodName.endsWith(\"GetValue\");\n      const isSet = methodName.startsWith(\"LMSSet\") || methodName.endsWith(\"SetValue\");\n      const isInit = methodName === \"Initialize\" || methodName === \"LMSInitialize\";\n      const isFinish = methodName === \"Terminate\" || methodName === \"LMSFinish\";\n      const isCommit = methodName === \"Commit\" || methodName === \"LMSCommit\";\n      const isErrorString = methodName === \"GetErrorString\" || methodName === \"LMSGetErrorString\";\n      const isDiagnostic = methodName === \"GetDiagnostic\" || methodName === \"LMSGetDiagnostic\";\n\n      return (...args: any[]): string => {\n        // Synchronous cache update for setter calls\n        if (isSet && args.length >= 2) {\n          target._cache.set(args[0], String(args[1]));\n          target._lastError = \"0\";\n        }\n\n        // Fire off async postMessage to refresh cache and error\n        target\n          ._post(methodName, args)\n          .then((res) => {\n            if (isGet && args.length >= 1) {\n              target._cache.set(args[0], String(res));\n              target._lastError = \"0\";\n            }\n            if (isErrorString && args.length >= 1) {\n              const code = String(args[0]);\n              target._cache.set(`error_${code}`, String(res));\n            }\n            if (isDiagnostic && args.length >= 1) {\n              const code = String(args[0]);\n              target._cache.set(`diag_${code}`, String(res));\n            }\n            if (methodName === \"GetLastError\" || methodName === \"LMSGetLastError\") {\n              target._lastError = String(res);\n            }\n          })\n          .catch((err) => target._capture(methodName, err));\n\n        // Return synchronously\n        if (isGet && args.length >= 1) {\n          return target._cache.get(args[0]) ?? \"\";\n        }\n        if (isErrorString && args.length >= 1) {\n          const code = String(args[0]);\n          return target._cache.get(`error_${code}`) ?? \"\";\n        }\n        if (isDiagnostic && args.length >= 1) {\n          const code = String(args[0]);\n          return target._cache.get(`diag_${code}`) ?? \"\";\n        }\n        if (isInit || isFinish || isCommit || isSet) {\n          // Immediately return “true”\n          const result = \"true\";\n          // Then warm cache:\n          target\n            ._post(\"getFlattenedCMI\", [])\n            .then((all: Record<string, string>) => {\n              Object.entries(all).forEach(([key, val]) => {\n                target._cache.set(key, val);\n              });\n              // reset error\n              target._lastError = \"0\";\n            })\n            .catch((err) => target._capture(\"getFlattenedCMI\", err));\n          return result;\n        }\n        if (methodName === \"GetLastError\" || methodName === \"LMSGetLastError\") {\n          return target._lastError;\n        }\n        return \"\";\n      };\n    },\n  };\n\n  constructor(targetOrigin: string = \"*\", targetWindow: Window = window.parent) {\n    this._origin = targetOrigin;\n    this._targetWindow = targetWindow;\n    window.addEventListener(\"message\", this._onMessage.bind(this));\n    return new Proxy(this, this._handler);\n  }\n\n  /** Send a message to the LMS frame and return a promise for its response */\n  private _post(method: string, params: any[]): Promise<any> {\n    const messageId = `cfapi-${Date.now()}-${this._counter++}`;\n\n    // Deep‐clean params of non-cloneables (e.g. functions)\n    const safeParams = params.map((p) => {\n      if (typeof p === \"function\") {\n        console.warn(\"Dropping function param when posting SCORM call:\", method);\n        return undefined;\n      }\n      return p;\n    });\n\n    return new Promise((resolve, reject) => {\n      const timer = setTimeout(() => {\n        if (this._pending.has(messageId)) {\n          this._pending.delete(messageId);\n          reject(new Error(`Timeout calling ${method}`));\n        }\n      }, 5000);\n\n      this._pending.set(messageId, { resolve, reject, timer });\n      const msg: MessageData = { messageId, method, params: safeParams };\n      this._targetWindow.postMessage(msg, this._origin);\n    });\n  }\n\n  /** Handle incoming postMessage responses from the LMS frame */\n  private _onMessage(ev: MessageEvent) {\n    // Validate the message origin and source unless all origins are allowed\n    if (this._origin !== \"*\" && ev.origin !== this._origin) {\n      return;\n    }\n    if (ev.source && ev.source !== this._targetWindow) {\n      return;\n    }\n    const data = ev.data as MessageResponse;\n    if (!data?.messageId) return;\n    const pending = this._pending.get(data.messageId);\n    if (!pending) return;\n    clearTimeout(pending.timer);\n    this._pending.delete(data.messageId);\n    if (data.error) pending.reject(data.error);\n    else pending.resolve(data.result);\n  }\n\n  /** Capture and cache SCORM errors */\n  private _capture(method: string, err: any) {\n    console.error(`CrossFrameAPI ${method} error:`, err);\n    const match = /\\b(\\d{3})\\b/.exec(err.message);\n    const code = match ? match[1] : String(global_errors.GENERAL);\n    this._lastError = code as string;\n    this._cache.set(`error_${code}`, err.message);\n  }\n}\n","// src/CrossFrameLMS.ts\nimport { MessageData, MessageResponse } from \"./types/CrossFrame\";\nimport { IBaseAPI } from \"./interfaces/IBaseAPI\";\n\n/**\n * Server‐side SCORM adapter running in your LMS frame (lms.example.com).\n * Listens for postMessage from child (content) frames, invokes real API,\n * and posts back { messageId, result, error }.\n */\nexport default class CrossFrameLMS {\n  private readonly _api: IBaseAPI;\n  private readonly _origin: string;\n\n  constructor(api: IBaseAPI, targetOrigin: string = \"*\") {\n    this._api = api;\n    this._origin = targetOrigin;\n    window.addEventListener(\"message\", this._onMessage.bind(this));\n  }\n\n  private _onMessage(ev: MessageEvent) {\n    // Validate the message origin unless all origins are allowed\n    if (this._origin !== \"*\" && ev.origin !== this._origin) {\n      return;\n    }\n\n    const msg = ev.data as MessageData;\n    if (!msg?.messageId || !msg.method || !ev.source) return;\n\n    this._process(msg, ev.source as Window);\n  }\n\n  private _process(msg: MessageData, source: Window) {\n    const sendResponse = (result?: any, error?: { message: string; stack?: string }) => {\n      const resp: MessageResponse = { messageId: msg.messageId };\n      if (result !== undefined) resp.result = result;\n      if (error !== undefined) resp.error = error;\n      source.postMessage(resp, this._origin);\n    };\n\n    try {\n      const fn = (this._api as any)[msg.method];\n      if (typeof fn !== \"function\") {\n        sendResponse(undefined, { message: `Method ${msg.method} not found` });\n        return;\n      }\n\n      const result = fn.apply(this._api, msg.params);\n\n      if (result && typeof (result as Promise<any>).then === \"function\") {\n        (result as Promise<any>)\n          .then((r) => sendResponse(r))\n          .catch((e: any) => sendResponse(undefined, { message: e.message, stack: e.stack }));\n      } else {\n        sendResponse(result);\n      }\n    } catch (e: any) {\n      sendResponse(undefined, { message: e.message, stack: e.stack });\n    }\n  }\n}\n"],"names":["global_constants","scorm12_constants","cmi_children","core_children","score_children","comments_children","objectives_children","correct_responses_children","student_data_children","student_preference_children","interactions_children","error_descriptions","basicMessage","detailMessage","aicc_constants","student_demographics_children","tries_children","attempt_records_children","paths_children","scorm2004_constants","adl_data_children","global_errors","GENERAL","INITIALIZATION_FAILED","INITIALIZED","TERMINATED","TERMINATION_FAILURE","TERMINATION_BEFORE_INIT","MULTIPLE_TERMINATION","RETRIEVE_BEFORE_INIT","RETRIEVE_AFTER_TERM","STORE_BEFORE_INIT","STORE_AFTER_TERM","COMMIT_BEFORE_INIT","COMMIT_AFTER_TERM","ARGUMENT_ERROR","CHILDREN_ERROR","COUNT_ERROR","GENERAL_GET_FAILURE","GENERAL_SET_FAILURE","GENERAL_COMMIT_FAILURE","UNDEFINED_DATA_MODEL","UNIMPLEMENTED_ELEMENT","VALUE_NOT_INITIALIZED","INVALID_SET_VALUE","READ_ONLY_ELEMENT","WRITE_ONLY_ELEMENT","TYPE_MISMATCH","VALUE_OUT_OF_RANGE","DEPENDENCY_NOT_ESTABLISHED","scorm12_errors","scorm2004_errors","MULTIPLE_TERMINATIONS","scorm12_regex","CMIString256","CMIString4096","CMITime","CMITimespan","CMIInteger","CMISInteger","CMIDecimal","CMIIdentifier","CMIFeedback","CMIIndex","CMIStatus","CMIStatus2","CMIExit","CMIType","CMIResult","NAVEvent","score_range","audio_range","speed_range","weighting_range","text_range","aicc_regex","scorm2004_regex","BaseScormValidationError","Error","constructor","CMIElement","errorCode","super","this","_errorCode","Object","setPrototypeOf","prototype","ValidationError","errorMessage","detailedMessage","_detailedMessage","message","_errorMessage","Scorm12ValidationError","hasOwnProperty","call","String","BaseCMI","cmi_element","jsonString","_initialized","_cmi_element","initialized","initialize","BaseRootCMI","start_time","_start_time","setStartTime","Date","getTime","designations","D","H","M","S","getSecondsAsHHMMSS","memoize","totalSeconds","hours","Math","floor","dateObj","minutes","getUTCMinutes","seconds","getSeconds","ms","msStr","countDecimals","toFixed","split","replace","getSecondsAsISODuration","duration","remainder","entries","forEach","designationsKey","current_seconds","value","indexOf","includes","getTimeAsSeconds","timeString","timeRegex","RegExp","match","test","parts","toString","getDurationAsSeconds","durationRegex","years","_","days","exec","result","flatten","data","recurse","cur","prop","Array","isArray","item","i","length","keys","filter","p","isEmpty","num","stringMatches","str","tester","fn","keyFn","cache","Map","args","key","JSON","stringify","has","get","set","checkValidFormat","regexPattern","errorClass","allowEmptyString","formatRegex","matches","_errorClass","checkValidRange","rangePattern","ranges","check12ValidFormat","check12ValidRange","validationService","validateScore","decimalRegex","scoreRange","invalidTypeCode","invalidRangeCode","validateScorm12Audio","validateScorm12Language","validateScorm12Speed","validateScorm12Text","validateReadOnly","CMIScore","params","_raw","_min","__children","__score_range","_max","max","__invalid_error_code","invalidErrorCode","__invalid_type_code","__invalid_range_code","__decimal_regex","__error_class","reset","_children","raw","min","getScoreObject","scoreObject","Number","isNaN","parseFloat","toJSON","CMICore","_student_id","_student_name","_lesson_location","_credit","_lesson_status","_entry","_total_time","_lesson_mode","_exit","_session_time","_suspend_data","score","student_id","student_name","lesson_location","credit","lesson_status","entry","total_time","lesson_mode","exit","session_time","suspend_data","getCurrentTotalTime","sessionTime","Util.getSecondsAsHHMMSS","first","second","CMIArray","children","childArray","wipe","_count","_id","_status","id","status","CMIStudentData","_mastery_score","_max_time_allowed","_time_limit_action","mastery_score","max_time_allowed","time_limit_action","CMIStudentPreference","_audio","_language","_speed","_text","audio","language","speed","text","_time","_type","_weighting","_student_response","_result","_latency","objectives","correct_responses","time","type","weighting","student_response","latency","_pattern","pattern","student_data","__version","_launch_data","_comments","_comments_from_lms","core","CMIObjectives","student_preference","interactions","CMIInteractions","launch_data","comments","comments_from_lms","_version","NAV","_event","event","NAVBoolean","SuccessStatus","CompletionStatus","LogLevelEnum","DEBUG","INFO","WARN","ERROR","NONE","DefaultSettings","autocommit","autocommitSeconds","asyncCommit","sendFullCommit","lmsCommitUrl","dataCommitFormat","commitRequestDataType","autoProgress","logLevel","selfReportSessionTime","alwaysSendTotalTime","renderCommonCommitFields","strict_errors","xhrHeaders","xhrWithCredentials","fetchMode","useBeaconInsteadOfFetch","responseHandler","async","response","httpResult","json","responseText","parse","e","requestHandler","commitObject","onLogMessage","defaultLogHandler","scoItemIds","scoItemIdValidator","globalObjectiveIds","enableOfflineSupport","courseId","syncOnInitialize","syncOnTerminate","maxSyncAttempts","messageLevel","logMessage","console","error","warn","info","debug","log","ScheduledCommit","API","when","callback","_cancelled","_API","_timeout","setTimeout","wrapper","bind","_callback","cancel","clearTimeout","isInitialized","commit","HttpService","settings","error_codes","processHttpRequest","url","immediate","apiLog","processListeners","genericError","_handleImmediateRequest","processedParams","performFetch","transformResponse","stack","enhancedError","errorDetails","errorType","name","originalError","body","contentType","_prepareRequestBody","navigator","sendBeacon","Blob","then","catch","join","performBeacon","init","method","mode","headers","keepalive","credentials","fetch","beaconSuccess","Promise","resolve","ok","parseError","statusText","substring","_isSuccessResponse","updateSettings","EventService","listenerMap","listenerCount","parseListenerName","listenerName","listenerSplit","functionName","on","listenerFunctions","listenerFunction","parsedListener","listeners","push","off","removeIndex","findIndex","obj","splice","delete","clear","newListeners","listener","listenerHasCMIElement","CMIElementsMatch","endsWith","prefix","slice","startsWith","SerializationService","loadFromFlattenedJSON","setCMIValue","isNotInitialized","setStartingData","int_pattern","obj_pattern","others","intMatch","index","field","objMatch","sort","a","b","localeCompare","processItems","items","loadFromJSON","regex","from","m","unflatten","currentCMIElement","tempCMIElement","renderCMIToJSONString","cmi","k","v","renderCMIToJSONObject","getCommitObject","terminateCommit","renderCommitObject","renderCommitCMI","apiLogLevel","includeTotalTime","LoggingService","_logLevel","_logHandler","getInstance","_instance","setLogLevel","level","getLogLevel","setLogHandler","handler","shouldLog","getNumericLevel","getLoggingService","ErrorHandlingService","errorCodes","getLmsErrorMessageDetails","loggingService","_lastErrorCode","_errorCodes","_apiLog","_getLmsErrorMessageDetails","_loggingService","lastErrorCode","throwSCORMError","errorNumber","formattedMessage","clearSCORMError","success","handleValueAccessException","returnValue","validationError","jsonError","OfflineStorageService","storeName","syncQueue","isOnline","onLine","syncInProgress","window","addEventListener","handleOnlineStatusChange","wasOnline","syncOfflineData","storeOffline","commitData","queueItem","now","random","timestamp","syncAttempts","currentQueue","getFromStorage","saveToStorage","getOfflineData","remainingQueue","sendDataToLMS","processedData","isDeviceOnline","storedData","localStorage","getItem","setItem","hasPendingOfflineData","some","BaseAPI","httpService","eventService","serializationService","cmiDataService","errorHandlingService","offlineStorageService","_settings","_courseId","TypeError","currentState","_error_codes","_httpService","_eventService","element","_serializationService","_errorHandlingService","detail","createErrorHandlingService","_offlineStorageService","offlineData","runtimeData","commonReset","clearScheduledCommit","startingData","callbackName","initializeMessage","terminationMessage","isTerminated","hasPendingData","syncSuccess","messageString","padEnd","formatMessage","previousSettings","terminate","checkTerminated","checkState","storeData","getValue","getCMIValue","setValue","commitCallback","scheduleCommit","getLastError","getErrorString","CMIErrorCode","getDiagnostic","beforeInitError","afterTermError","_errorNumber","_detail","_CMIElement","_value","_commonSetCMIValue","methodName","scorm2004","structure","refObject","foundFirstIndex","invalidErrorMessage","idx","attribute","_checkObjectHasProperty","validateCorrectResponse","parseInt","newChild","getChildElement","_commonGetCMIValue","uninitializedErrorMessage","_isTargetValid","getFlattenedCMI","Utilities.flatten","StringKeyMap","getOwnPropertyDescriptor","getPrototypeOf","Scorm12API","mastery_override","statusSetByModule","CMI","nav","LMSInitialize","lmsInitialize","LMSFinish","lmsFinish","LMSGetValue","lmsGetValue","LMSSetValue","lmsSetValue","LMSCommit","lmsCommit","LMSGetLastError","lmsGetLastError","LMSGetErrorString","lmsGetErrorString","LMSGetDiagnostic","lmsGetDiagnostic","internalFinish","CMIObjectivesObject","CMIInteractionsCorrectResponsesObject","CMIInteractionsObjectivesObject","CMIInteractionsObject","replaceWithAnotherScormAPI","newAPI","cmiExport","flattened","totalTimeHHMMSS","totalTimeSeconds","Utilities.getTimeAsSeconds","lessonStatus","completionStatus","successStatus","originalStatus","aicc_errors","AICCValidationError","checkAICCValidFormat","CMIEvaluation","CMIEvaluationComments","CMIEvaluationCommentsObject","_content","_location","content","location","AICCStudentPreferences","_lesson_type","_text_color","_text_location","_text_size","_video","windows","lesson_type","text_color","text_location","text_size","video","CMIStudentDemographics","_city","_class","_company","_country","_experience","_familiar_name","_instructor_name","_title","_native_language","_state","_street_address","_telephone","_years_experience","city","clazz","company","country","experience","familiar_name","instructor_name","title","native_language","state","street_address","telephone","years_experience","class","CMITries","CMITriesObject","CMIAttemptRecords","CMIAttemptRecordsObject","AICCCMIStudentData","_tries_during_lesson","tries","attempt_records","tries_during_lesson","CMIPaths","CMIPathsObject","_location_id","_date","_why_left","_time_in_element","location_id","date","why_left","time_in_element","Scorm12CMI.CMI","student_demographics","evaluation","paths","AICC","Scorm2004ValidationError","check2004ValidFormat","check2004ValidRange","CMILearnerPreference","_audio_level","_delivery_speed","_audio_captioning","audio_level","delivery_speed","audio_captioning","LearnerResponses","format","delimiter","unique","choice","matching","format2","delimiter2","performance","sequencing","likert","numeric","other","CorrectResponses","duplicate","limit","delimiter3","_timestamp","_learner_response","_description","learner_response","nodes","response_type","values","j","description","stripBrackets","delim","escapeRegex","s","splitUnescaped","reDelim","splitRe","unescapeRe","map","part","interactionType","_interactionType","responseDef","trim","subDelim1","rawNodes","delim1","Set","size","fmt1","fmt2","checkSingle","checkPair","delimBracketed","n","node","numDelim","nums","allParts","part1","part2","validatePattern","Scorm2004CMIScore","_scaled","scaled","CMICommentsFromLMS","CMICommentsFromLearner","CMICommentsObject","readOnlyAfterInit","_comment","_readOnlyAfterInit","comment","findObjectiveById","find","objective","findObjectiveByIndex","setObjectiveByIndex","_success_status","_completion_status","_progress_measure","success_status","completion_status","progress_measure","CMIMetadata","CMILearner","_learner_id","_learner_name","learner_id","learner_name","CMISession","Util.getSecondsAsISODuration","Util.addTwoDurations","CMIContent","CMISettings","_mode","CMIThresholds","_scaled_passing_score","_completion_threshold","scaled_passing_score","completion_threshold","metadata","learner","session","thresholds","learner_preference","comments_from_learner","ADL","ADLData","_sequencing","ADLNav","adlNav","_request","request_valid","ADLNavRequestValid","request","processNavigationRequest","ADLDataObject","_store","store","_continue","_previous","_choice","_jump","previous","jump","continue","RuleConditionOperator","RuleActionType","RuleCondition","condition","operator","parameters","_condition","_operator","_parameters","evaluate","activity","objectiveMeasureStatus","greaterThanValue","objectiveNormalizedMeasure","lessThanValue","isCompleted","attemptCount","attemptLimit","evaluateTimeLimitExceeded","evaluateOutsideAvailableTimeRange","timeLimitDuration","durationMs","parseISO8601Duration","attemptExperiencedDuration","beginTime","beginTimeLimit","endTime","endTimeLimit","fromEntries","SequencingRule","action","conditionCombination","_conditions","_action","_conditionCombination","conditions","addCondition","removeCondition","every","SequencingRules","_preConditionRules","_exitConditionRules","_postConditionRules","preConditionRules","addPreConditionRule","rule","exitConditionRules","addExitConditionRule","postConditionRules","addPostConditionRule","evaluatePreConditionRules","evaluateExitConditionRules","evaluatePostConditionRules","RollupCondition","RollupRule","consideration","minimumCount","minimumPercent","_consideration","_minimumCount","_minimumPercent","matchingChildren","child","RollupRules","_rules","rules","addRule","removeRule","processRollup","getAvailableChildren","completionRollup","successRollup","sequencingControls","rollupObjectiveSatisfied","_objectiveRollupUsingMeasure","_defaultCompletionRollup","_defaultSuccessRollup","objectiveMeasureWeight","totalWeight","weightedSum","hasValidMeasures","childWeight","normalizedMeasure","scaledPassingScore","objectiveSatisfiedStatus","ValidLanguages","SelectionTiming","RandomizationTiming","SequencingControls","_enabled","_choiceExit","_flow","_forwardOnly","_useCurrentAttemptObjectiveInfo","_useCurrentAttemptProgressInfo","_preventActivation","_constrainChoice","_rollupObjectiveSatisfied","_rollupProgressCompletion","_objectiveMeasureWeight","_selectionTiming","_selectCount","_selectionCountStatus","_randomizeChildren","_randomizationTiming","_reorderChildren","enabled","choiceExit","flow","forwardOnly","useCurrentAttemptObjectiveInfo","useCurrentAttemptProgressInfo","preventActivation","constrainChoice","rollupProgressCompletion","isChoiceNavigationAllowed","isFlowNavigationAllowed","isForwardNavigationAllowed","isBackwardNavigationAllowed","selectionTiming","selectCount","selectionCountStatus","randomizeChildren","randomizationTiming","reorderChildren","Activity","_parent","_isVisible","_isActive","_isSuspended","_isCompleted","_completionStatus","_successStatus","_attemptCount","_attemptCompletionAmount","_attemptAbsoluteDuration","_attemptExperiencedDuration","_activityAbsoluteDuration","_activityExperiencedDuration","_objectiveSatisfiedStatus","_objectiveMeasureStatus","_objectiveNormalizedMeasure","_scaledPassingScore","_isHiddenFromChoice","_isAvailable","_attemptLimit","_attemptAbsoluteDurationLimit","_activityAbsoluteDurationLimit","_timeLimitAction","_timeLimitDuration","_beginTimeLimit","_endTimeLimit","_processedChildren","_isNewAttempt","_sequencingControls","_sequencingRules","_rollupRules","addChild","removeChild","parent","isVisible","isActive","isSuspended","incrementAttemptCount","controls","isHiddenFromChoice","isAvailable","hasAttemptLimitExceeded","timeLimitAction","attemptAbsoluteDurationLimit","activityAbsoluteDurationLimit","activityExperiencedDuration","sequencingRules","rollupRules","setProcessedChildren","processedChildren","resetProcessedChildren","isNewAttempt","attemptCompletionAmount","attemptAbsoluteDuration","activityAbsoluteDuration","ActivityTree","_root","_currentActivity","_suspendedActivity","_activities","_addActivitiesToMap","root","currentActivity","suspendedActivity","getActivity","getAllActivities","getParent","getChildren","useAvailableChildren","getSiblings","getNextSibling","siblings","getPreviousSibling","getFirstChild","getLastChild","getCommonAncestor","activity1","activity2","path1","current","unshift","SelectionRandomization","selectChildrenProcess","NEVER","ONCE","selectedChildren","availableIndices","randomIndex","childIndex","randomizeChildrenProcess","randomizedChildren","tempI","tempJ","applySelectionAndRandomization","shouldApplySelection","shouldApplyRandomization","ON_EACH_NEW_ATTEMPT","isSelectionNeeded","isRandomizationNeeded","SequencingRequestType","DeliveryRequestType","SequencingResult","deliveryRequest","targetActivity","exception","SequencingProcess","activityTree","sequencingRequestProcess","targetActivityId","startSequencingRequestProcess","resumeAllSequencingRequestProcess","continueSequencingRequestProcess","previousSequencingRequestProcess","choiceSequencingRequestProcess","jumpSequencingRequestProcess","exitSequencingRequestProcess","exitAllSequencingRequestProcess","abandonSequencingRequestProcess","abandonAllSequencingRequestProcess","suspendAllSequencingRequestProcess","retrySequencingRequestProcess","retryAllSequencingRequestProcess","deliverableActivity","findFirstDeliverableActivity","checkActivityProcess","ensureSelectionAndRandomization","deliverable","flowResult","flowSubprocess","isActivityInTree","commonAncestor","findCommonAncestor","terminateDescendentAttemptsProcess","activityPath","pathActivity","flowActivityTraversalSubprocess","_direction","considerChildren","availableChildren","limitConditionsCheckProcess","preConditionResult","sequencingRulesCheckProcess","SKIP","DISABLED","skipExitRules","exitAction","exitActionRulesSubprocess","processDeferredExitAction","EXIT","EXIT_PARENT","EXIT_ALL","postConditionRulesSubprocess","postAction","RETRY","RETRY_ALL","CONTINUE","PREVIOUS","sequencingRulesCheckSubprocess","AND","OR","ancestors1","fromActivity","direction","candidateActivity","firstIteration","nextCandidate","flowTreeTraversalSubprocess","skipChildren","previousSibling","lastDescendant","lastChild","parentPreviousSibling","nextSibling","choiceFlowSubprocess","choiceFlowTreeTraversalSubprocess","choiceActivityTraversalSubprocess","Sequencing","_adlNav","_sequencingProcess","_lastSequencingResult","_activityTree","lastSequencingResult","requestType","START","RESUME_ALL","CHOICE","JUMP","ABANDON","ABANDON_ALL","SUSPEND_ALL","updateNavigationRequestValidity","DELIVER","continueResult","previousResult","_processRollupRecursive","getLastSequencingResult","getCurrentActivity","getRootActivity","Scorm2004API","_globalObjectives","_extractedScoItemIds","adl","configureSequencing","Initialize","Terminate","GetValue","SetValue","Commit","GetLastError","GetErrorString","GetDiagnostic","version","globalObjectives","navActions","exitAll","abandon","abandonAll","choiceJumpRegex","target","groups","choice_target","jump_target","adlNavRequestRegex","element_base","objective_id","global_index","newGlobalObjective","global_element","createCorrectResponsesObject","interaction","checkDuplicateChoiceResponse","checkValidResponseType","interaction_type","checkCorrectResponseValue","interaction_count","pattern_index","checkDuplicatedPattern","errorDescription","correct_response","current_index","found","count","removeCorrectResponsePrefixes","seenOrder","seenCase","seenLang","prefixRegex","langMatches","lang","toLowerCase","totalTimeDuration","Utilities.getDurationAsSeconds","navRequest","Function","sequencingSettings","configureActivityTree","configureSequencingRules","configureSequencingControls","configureRollupRules","activityTreeSettings","rootActivity","createActivity","extractActivityIds","ids","activitySettings","childSettings","childActivity","sequencingRulesSettings","ruleSettings","createSequencingRule","conditionSettings","sequencingControlsSettings","rollupRulesSettings","createRollupRule","CrossFrameAPI","targetOrigin","targetWindow","_cache","_lastError","_pending","_counter","_handler","receiver","Reflect","isGet","isSet","isInit","isFinish","isCommit","isErrorString","isDiagnostic","_post","res","err","_capture","all","val","_origin","_targetWindow","_onMessage","Proxy","messageId","safeParams","reject","timer","postMessage","ev","origin","source","pending","code","CrossFrameLMS","api","_api","msg","_process","sendResponse","resp","apply","r"],"mappings":"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"}