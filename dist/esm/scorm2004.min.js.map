{"version":3,"file":"scorm2004.min.js","mappings":"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","sources":["webpack://scorm-again/./src/constants/enums.ts","webpack://scorm-again/./src/exceptions/scorm12_exceptions.ts","webpack://scorm-again/./src/constants/default_settings.ts","webpack://scorm-again/./src/helpers/scheduled_commit.ts","webpack://scorm-again/./src/services/HttpService.ts","webpack://scorm-again/./src/services/EventService.ts","webpack://scorm-again/./src/services/SerializationService.ts","webpack://scorm-again/./src/utils/type_guards.ts","webpack://scorm-again/./src/services/CMIDataService.ts","webpack://scorm-again/./src/services/ErrorHandlingService.ts","webpack://scorm-again/./src/services/LoggingService.ts","webpack://scorm-again/./src/BaseAPI.ts","webpack://scorm-again/./src/cmi/common/base_cmi.ts","webpack://scorm-again/./src/constants/api_constants.ts","webpack://scorm-again/./src/constants/regex.ts","webpack://scorm-again/./src/cmi/common/score.ts","webpack://scorm-again/./src/cmi/common/validation.ts","webpack://scorm-again/./src/cmi/common/array.ts","webpack://scorm-again/./node_modules/tslib/tslib.es6.mjs","webpack://scorm-again/./src/exceptions.ts","webpack://scorm-again/./src/constants/error_codes.ts","webpack://scorm-again/./src/services/ValidationService.ts","webpack://scorm-again/./src/utilities.ts","webpack://scorm-again/./src/cmi/scorm12/validation.ts","webpack://scorm-again/webpack/bootstrap","webpack://scorm-again/webpack/runtime/define property getters","webpack://scorm-again/webpack/runtime/hasOwnProperty shorthand","webpack://scorm-again/./src/exceptions/scorm2004_exceptions.ts","webpack://scorm-again/./src/cmi/scorm2004/validation.ts","webpack://scorm-again/./src/cmi/scorm2004/learner_preference.ts","webpack://scorm-again/./src/constants/response_constants.ts","webpack://scorm-again/./src/cmi/scorm2004/interactions.ts","webpack://scorm-again/./src/cmi/scorm2004/score.ts","webpack://scorm-again/./src/cmi/scorm2004/comments.ts","webpack://scorm-again/./src/cmi/scorm2004/objectives.ts","webpack://scorm-again/./src/cmi/scorm2004/metadata.ts","webpack://scorm-again/./src/cmi/scorm2004/learner.ts","webpack://scorm-again/./src/cmi/scorm2004/status.ts","webpack://scorm-again/./src/cmi/scorm2004/session.ts","webpack://scorm-again/./src/cmi/scorm2004/content.ts","webpack://scorm-again/./src/cmi/scorm2004/settings.ts","webpack://scorm-again/./src/cmi/scorm2004/thresholds.ts","webpack://scorm-again/./src/cmi/scorm2004/cmi.ts","webpack://scorm-again/./src/cmi/scorm2004/adl.ts","webpack://scorm-again/./src/constants/language_constants.ts","webpack://scorm-again/./src/scorm2004/data_serialization.ts","webpack://scorm-again/./src/Scorm2004API.ts","webpack://scorm-again/./src/scorm2004/cmi_value_handler.ts","webpack://scorm-again/./src/scorm2004/cmi_element_handler.ts","webpack://scorm-again/./src/scorm2004/validation.ts"],"sourcesContent":["// Using plain objects instead of enums for better compatibility with strip-only mode\n// This approach avoids TypeScript enum runtime code while maintaining the same API\n\n// NAVBoolean values\nexport const NAVBoolean = {\n  UNKNOWN: \"unknown\",\n  TRUE: \"true\",\n  FALSE: \"false\",\n};\n\n// Type for NAVBoolean values\nexport type NAVBoolean = typeof NAVBoolean[keyof typeof NAVBoolean];\n\n// SuccessStatus values\nexport const SuccessStatus = {\n  PASSED: \"passed\",\n  FAILED: \"failed\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for SuccessStatus values\nexport type SuccessStatus = typeof SuccessStatus[keyof typeof SuccessStatus];\n\n// CompletionStatus values\nexport const CompletionStatus = {\n  COMPLETED: \"completed\",\n  INCOMPLETE: \"incomplete\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for CompletionStatus values\nexport type CompletionStatus = typeof CompletionStatus[keyof typeof CompletionStatus];\n\n// LogLevelEnum values\nexport const LogLevelEnum = {\n  _: 0,\n  DEBUG: 1,\n  INFO: 2,\n  WARN: 3,\n  ERROR: 4,\n  NONE: 5,\n};\n\n// Type for LogLevelEnum values\nexport type LogLevelEnum = typeof LogLevelEnum[keyof typeof LogLevelEnum];\n","import { ValidationError } from \"../exceptions\";\nimport { scorm12_constants } from \"../constants/api_constants\";\n\nconst scorm12_errors = scorm12_constants.error_descriptions;\n\n/**\n * SCORM 1.2 Validation Error\n */\nexport class Scorm12ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {number} errorCode\n   */\n  constructor(errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm12_errors, String(errorCode))) {\n      super(\n        errorCode,\n        scorm12_errors[String(errorCode)].basicMessage,\n        scorm12_errors[String(errorCode)].detailMessage,\n      );\n    } else {\n      super(\n        101,\n        scorm12_errors[\"101\"].basicMessage,\n        scorm12_errors[\"101\"].detailMessage,\n      );\n    }\n  }\n}\n","import { LogLevel, ResultObject, Settings } from \"../types/api_types\";\nimport { global_constants } from \"./api_constants\";\nimport { LogLevelEnum } from \"./enums\";\n\n/**\n * Default settings for the SCORM API\n */\nexport const DefaultSettings: Settings = {\n  autocommit: false,\n  autocommitSeconds: 10,\n  asyncCommit: false,\n  sendFullCommit: true,\n  lmsCommitUrl: false,\n  dataCommitFormat: \"json\",\n  commitRequestDataType: \"application/json;charset=UTF-8\",\n  autoProgress: false,\n  logLevel: LogLevelEnum.ERROR,\n  selfReportSessionTime: false,\n  alwaysSendTotalTime: false,\n  renderCommonCommitFields: false,\n  strict_errors: true,\n  xhrHeaders: {},\n  xhrWithCredentials: false,\n  fetchMode: \"cors\",\n  responseHandler: async function (response: Response): Promise<ResultObject> {\n    if (typeof response !== \"undefined\") {\n      const responseText = await response.text();\n      let httpResult = null;\n      if (responseText) {\n        httpResult = JSON.parse(responseText);\n      }\n      if (\n        httpResult === null ||\n        !{}.hasOwnProperty.call(httpResult, \"result\")\n      ) {\n        if (response.status === 200) {\n          return {\n            result: global_constants.SCORM_TRUE,\n            errorCode: 0,\n          };\n        } else {\n          return {\n            result: global_constants.SCORM_FALSE,\n            errorCode: 101,\n          };\n        }\n      } else {\n        return {\n          result: httpResult.result,\n          errorCode: httpResult.errorCode\n            ? httpResult.errorCode\n            : httpResult.result === global_constants.SCORM_TRUE\n              ? 0\n              : 101,\n        };\n      }\n    }\n    return {\n      result: global_constants.SCORM_FALSE,\n      errorCode: 101,\n    };\n  },\n  requestHandler: function (commitObject) {\n    return commitObject;\n  },\n  onLogMessage: defaultLogHandler,\n  scoItemIds: [],\n  scoItemIdValidator: false,\n  globalObjectiveIds: [],\n};\n\nexport function defaultLogHandler(\n  messageLevel: LogLevel,\n  logMessage: string,\n): void {\n  switch (messageLevel) {\n    case \"4\":\n    case 4:\n    case \"ERROR\":\n    case LogLevelEnum.ERROR:\n      console.error(logMessage);\n      break;\n    case \"3\":\n    case 3:\n    case \"WARN\":\n    case LogLevelEnum.WARN:\n      console.warn(logMessage);\n      break;\n    case \"2\":\n    case 2:\n    case \"INFO\":\n    case LogLevelEnum.INFO:\n      console.info(logMessage);\n      break;\n    case \"1\":\n    case 1:\n    case \"DEBUG\":\n    case LogLevelEnum.DEBUG:\n      if (console.debug) {\n        console.debug(logMessage);\n      } else {\n        console.log(logMessage);\n      }\n      break;\n  }\n}\n","import BaseAPI from \"../BaseAPI\";\n\n/**\n * Private class that wraps a timeout call to the commit() function\n */\nexport class ScheduledCommit {\n  private _API;\n  private _cancelled = false;\n  private readonly _timeout;\n  private readonly _callback;\n\n  /**\n   * Constructor for ScheduledCommit\n   * @param {BaseAPI} API\n   * @param {number} when\n   * @param {string} callback\n   */\n  constructor(API: BaseAPI, when: number, callback: string) {\n    this._API = API;\n    this._timeout = setTimeout(this.wrapper.bind(this), when);\n    this._callback = callback;\n  }\n\n  /**\n   * Cancel any currently scheduled commit\n   */\n  cancel() {\n    this._cancelled = true;\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n  }\n\n  /**\n   * Wrap the API commit call to check if the call has already been cancelled\n   */\n  wrapper() {\n    if (!this._cancelled) {\n      (async () => await this._API.commit(this._callback))();\n    }\n  }\n}\n","import { CommitObject, ResultObject, Settings } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { IHttpService } from \"../interfaces/services\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { StringKeyMap } from \"../utilities\";\n\n/**\n * Service for handling HTTP communication with the LMS\n */\nexport class HttpService implements IHttpService {\n  private settings: Settings;\n  private error_codes: ErrorCode;\n\n  /**\n   * Constructor for HttpService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   */\n  constructor(settings: Settings, error_codes: ErrorCode) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n  }\n\n  /**\n   * Sends HTTP requests to the LMS with special handling for immediate and standard requests.\n   *\n   * This method handles communication with the LMS server, implementing two distinct\n   * request handling strategies based on the context:\n   *\n   * 1. Immediate Mode (used during termination):\n   *    When immediate=true, the method:\n   *    - Initiates the fetch request but doesn't wait for it to complete\n   *    - Returns a success result immediately\n   *    - Processes the response asynchronously when it arrives\n   *\n   *    This is critical for browser compatibility during page unload/termination,\n   *    as some browsers (especially Chrome) may cancel synchronous or awaited\n   *    requests when a page is closing.\n   *\n   * 2. Standard Mode (normal operation):\n   *    When immediate=false, the method:\n   *    - Processes the request parameters through the configured requestHandler\n   *    - Awaits the fetch response completely\n   *    - Transforms the response using the configured responseHandler\n   *    - Triggers appropriate event listeners based on success/failure\n   *    - Returns the complete result with appropriate error codes\n   *\n   * The method also includes error handling to catch network failures or other\n   * exceptions that might occur during the request process.\n   *\n   * @param {string} url - The URL endpoint to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The data to send to the LMS\n   * @param {boolean} immediate - Whether to send the request immediately without waiting (true) or process normally (false)\n   * @param {Function} apiLog - Function to log API messages with appropriate levels\n   * @param {Function} processListeners - Function to trigger event listeners for commit events\n   * @return {Promise<ResultObject>} - A promise that resolves with the result of the request\n   *\n   * @example\n   * // Standard request (waits for response)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   false,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   *\n   * @example\n   * // Immediate request (for termination)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   true,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   * // result will be success immediately, regardless of actual HTTP result\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n    apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    processListeners: (\n      functionName: string,\n      CMIElement?: string,\n      value?: any,\n    ) => void,\n  ): Promise<ResultObject> {\n    const genericError: ResultObject = {\n      result: global_constants.SCORM_FALSE,\n      errorCode: this.error_codes.GENERAL,\n    };\n\n    // if we are terminating the module or closing the browser window/tab, we need to make this fetch ASAP.\n    // Some browsers, especially Chrome, do not like synchronous requests to be made when the window is closing.\n    if (immediate) {\n      this.performFetch(url, params).then(async (response) => {\n        await this.transformResponse(response, processListeners);\n      });\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    }\n\n    const process = async (\n      url: string,\n      params: CommitObject | StringKeyMap | Array<any>,\n      settings: Settings,\n    ): Promise<ResultObject> => {\n      try {\n        params = settings.requestHandler(params) as\n          | CommitObject\n          | StringKeyMap\n          | Array<any>;\n        const response = await this.performFetch(url, params);\n\n        return this.transformResponse(response, processListeners);\n      } catch (e) {\n        apiLog(\"processHttpRequest\", e, LogLevelEnum.ERROR);\n        processListeners(\"CommitError\");\n        return genericError;\n      }\n    };\n\n    return await process(url, params, this.settings);\n  }\n\n  /**\n   * Perform the fetch request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - The response from the LMS\n   * @private\n   */\n  private async performFetch(\n    url: string,\n    params: StringKeyMap | Array<any>,\n  ): Promise<Response> {\n    return fetch(url, {\n      method: \"POST\",\n      mode: this.settings.fetchMode,\n      body: params instanceof Array ? params.join(\"&\") : JSON.stringify(params),\n      headers: {\n        ...this.settings.xhrHeaders,\n        \"Content-Type\": this.settings.commitRequestDataType,\n      },\n      credentials: this.settings.xhrWithCredentials ? \"include\" : undefined,\n      keepalive: true,\n    });\n  }\n\n  /**\n   * Transforms the response from the LMS to a ResultObject\n   * @param {Response} response - The response from the LMS\n   * @param {Function} processListeners - Function to process event listeners\n   * @return {Promise<ResultObject>} - The transformed response\n   * @private\n   */\n  private async transformResponse(\n    response: Response,\n    processListeners: (\n      functionName: string,\n      CMIElement?: string,\n      value?: any,\n    ) => void,\n  ): Promise<ResultObject> {\n    const result =\n      typeof this.settings.responseHandler === \"function\"\n        ? await this.settings.responseHandler(response)\n        : await response.json();\n\n    if (\n      response.status >= 200 &&\n      response.status <= 299 &&\n      (result.result === true || result.result === global_constants.SCORM_TRUE)\n    ) {\n      processListeners(\"CommitSuccess\");\n      if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n        result.errorCode = 0;\n      }\n    } else {\n      processListeners(\"CommitError\");\n      if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n        result.errorCode = this.error_codes.GENERAL;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Updates the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: Settings): void {\n    this.settings = settings;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { stringMatches } from \"../utilities\";\nimport { IEventService } from \"../interfaces/services\";\n\n/**\n * Interface for a listener object\n */\ninterface Listener {\n  functionName: string;\n  CMIElement: string | null;\n  callback: Function;\n}\n\n/**\n * Type for parsed listener information\n */\ninterface ParsedListener {\n  functionName: string;\n  CMIElement: string | null;\n}\n\n/**\n * Service for handling event listeners and event processing\n */\nexport class EventService implements IEventService {\n  // Map of function names to listeners for faster lookups\n  private listenerMap: Map<string, Listener[]> = new Map();\n  // Total count of listeners for logging\n  private listenerCount = 0;\n\n  /**\n   * Constructor for EventService\n   * @param {Function} apiLog - Function to log API messages\n   */\n  constructor(\n    private apiLog: (\n      functionName: string,\n      message: string,\n      messageLevel: LogLevel,\n      CMIElement?: string,\n    ) => void,\n  ) {}\n\n  /**\n   * Parses a listener name into its components\n   *\n   * @param {string} listenerName - The name of the listener\n   * @returns {ParsedListener|null} - The parsed listener information or null if invalid\n   */\n  private parseListenerName(listenerName: string): ParsedListener | null {\n    const listenerSplit = listenerName.split(\".\");\n    if (listenerSplit.length === 0) return null;\n\n    const functionName = listenerSplit[0];\n    let CMIElement = null;\n\n    if (listenerSplit.length > 1) {\n      CMIElement = listenerName.replace(`${functionName}.`, \"\");\n    }\n\n    return { functionName, CMIElement };\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener\n   * @param {Function} callback - The callback function to execute when the event occurs\n   */\n  on(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get or create the array for this function name\n      const listeners = this.listenerMap.get(functionName) ?? [];\n\n      // Add the new listener\n      listeners.push({\n        functionName,\n        CMIElement,\n        callback,\n      });\n\n      // Update the map and count\n      this.listenerMap.set(functionName, listeners);\n      this.listenerCount++;\n\n      this.apiLog(\n        \"on\",\n        `Added event listener: ${this.listenerCount}`,\n        LogLevelEnum.INFO,\n        functionName,\n      );\n    }\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener\n   *\n   * @param {string} listenerName - The name of the listener to remove\n   * @param {Function} callback - The callback function to remove\n   */\n  off(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get the listeners for this function name\n      const listeners = this.listenerMap.get(functionName);\n      if (!listeners) continue;\n\n      // Find the index of the listener to remove\n      const removeIndex = listeners.findIndex(\n        (obj) => obj.CMIElement === CMIElement && obj.callback === callback,\n      );\n\n      if (removeIndex !== -1) {\n        // Remove the listener\n        listeners.splice(removeIndex, 1);\n        this.listenerCount--;\n\n        // Update the map or remove the entry if empty\n        if (listeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, listeners);\n        }\n\n        this.apiLog(\n          \"off\",\n          `Removed event listener: ${this.listenerCount}`,\n          LogLevelEnum.INFO,\n          functionName,\n        );\n      }\n    }\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener to clear\n   */\n  clear(listenerName: string) {\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // If we have listeners for this function name\n      if (this.listenerMap.has(functionName)) {\n        const listeners = this.listenerMap.get(functionName)!;\n\n        // Filter out listeners that match the criteria\n        const newListeners = listeners.filter(\n          (obj) => obj.CMIElement !== CMIElement,\n        );\n\n        // Update the count and map\n        this.listenerCount -= listeners.length - newListeners.length;\n\n        if (newListeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, newListeners);\n        }\n      }\n    }\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created\n   *\n   * @param {string} functionName - The name of the function that triggered the event\n   * @param {string} CMIElement - The CMI element that was affected\n   * @param {any} value - The value that was set\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this.apiLog(functionName, value, LogLevelEnum.INFO, CMIElement);\n\n    // Get listeners for this function name\n    const listeners = this.listenerMap.get(functionName);\n    if (!listeners) return;\n\n    for (const listener of listeners) {\n      const listenerHasCMIElement = !!listener.CMIElement;\n      let CMIElementsMatch = false;\n\n      // Check if CMI elements match\n      if (\n        CMIElement &&\n        listener.CMIElement &&\n        listener.CMIElement.endsWith(\"*\")\n      ) {\n        const prefix = listener.CMIElement.slice(0, -1);\n        CMIElementsMatch = stringMatches(CMIElement, prefix);\n      } else {\n        CMIElementsMatch = listener.CMIElement === CMIElement;\n      }\n\n      // If the listener matches, call the callback\n      if (!listenerHasCMIElement || CMIElementsMatch) {\n        this.apiLog(\n          \"processListeners\",\n          `Processing listener: ${listener.functionName}`,\n          LogLevelEnum.DEBUG,\n          CMIElement,\n        );\n        listener.callback(CMIElement, value);\n      }\n    }\n  }\n\n  /**\n   * Resets the event service by clearing all listeners\n   */\n  reset() {\n    this.listenerMap.clear();\n    this.listenerCount = 0;\n  }\n}\n","import { CommitObject, LogLevel } from \"../types/api_types\";\nimport { StringKeyMap, unflatten, flatten } from \"../utilities\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { BaseCMI } from \"../cmi/common/base_cmi\";\nimport { ISerializationService } from \"../interfaces/services\";\n\n/**\n * Service for handling data serialization and deserialization in SCORM Again\n */\nexport class SerializationService implements ISerializationService {\n  /**\n   * Loads CMI data from a flattened JSON object with special handling for arrays and ordering.\n   *\n   * This method implements a complex algorithm for loading flattened JSON data into the CMI\n   * object structure. It handles several key challenges:\n   *\n   * 1. Ordering dependencies: Some CMI elements (like interactions and objectives) must be\n   *    loaded in a specific order to ensure proper initialization.\n   *\n   * 2. Array handling: Interactions and objectives are stored as arrays, and their properties\n   *    must be loaded in the correct order (e.g., 'id' and 'type' must be set before other properties).\n   *\n   * 3. Unflattening: The method converts flattened dot notation (e.g., \"cmi.objectives.0.id\")\n   *    back into nested objects before loading.\n   *\n   * The algorithm works by:\n   * - Categorizing keys into interactions, objectives, and other properties\n   * - Sorting interactions to prioritize 'id' and 'type' fields within each index\n   * - Sorting objectives to prioritize 'id' fields within each index\n   * - Processing each category in order: interactions, objectives, then other properties\n   *\n   * @param {StringKeyMap} json - The flattened JSON object with dot notation keys\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} loadFromJSON - Function to load from JSON\n   * @param {Function} setCMIValue - Function to set CMI value\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   *\n   * @example\n   * // Example of flattened JSON input:\n   * // {\n   * //   \"cmi.objectives.0.id\": \"obj1\",\n   * //   \"cmi.objectives.0.score.raw\": \"80\",\n   * //   \"cmi.interactions.0.id\": \"int1\",\n   * //   \"cmi.interactions.0.type\": \"choice\",\n   * //   \"cmi.interactions.0.result\": \"correct\"\n   * // }\n   */\n  loadFromFlattenedJSON(\n    json: StringKeyMap,\n    CMIElement: string = \"\",\n    loadFromJSON: (json: StringKeyMap, CMIElement: string) => void,\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\n        \"loadFromFlattenedJSON can only be called before the call to lmsInitialize.\",\n      );\n      return;\n    }\n\n    const int_pattern = /^(cmi\\.interactions\\.)(\\d+)\\.(.*)$/;\n    const obj_pattern = /^(cmi\\.objectives\\.)(\\d+)\\.(.*)$/;\n\n    // Extract and categorize keys for better sorting\n    const interactions: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const objectives: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const others: { key: string; value: any }[] = [];\n\n    // Categorize keys\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key)) {\n        const intMatch = key.match(int_pattern);\n        if (intMatch) {\n          interactions.push({\n            key,\n            value: json[key],\n            index: Number(intMatch[2]),\n            field: intMatch[3],\n          });\n          continue;\n        }\n\n        const objMatch = key.match(obj_pattern);\n        if (objMatch) {\n          objectives.push({\n            key,\n            value: json[key],\n            index: Number(objMatch[2]),\n            field: objMatch[3],\n          });\n          continue;\n        }\n\n        others.push({ key, value: json[key] });\n      }\n    }\n\n    // Sort interactions: first by index, then prioritize 'id' and 'type' fields\n    interactions.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id and type\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n      if (a.field === \"type\") return -1;\n      if (b.field === \"type\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort objectives: first by index, then prioritize 'id' field\n    objectives.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort other keys alphabetically\n    others.sort((a, b) => a.key.localeCompare(b.key));\n\n    // Process all items in the correct order\n    const processItems = (items: { key: string; value: any }[]) => {\n      items.forEach((item) => {\n        const obj: StringKeyMap = {};\n        obj[item.key] = item.value;\n        loadFromJSON(unflatten(obj) as StringKeyMap, CMIElement);\n      });\n    };\n\n    // Process in order: interactions, objectives, others\n    processItems(interactions);\n    processItems(objectives);\n    processItems(others);\n  }\n\n  /**\n   * Loads CMI data from a nested JSON object with recursive traversal.\n   *\n   * This method implements a recursive algorithm for loading nested JSON data into the CMI\n   * object structure. It handles several key aspects:\n   *\n   * 1. Recursive traversal: The method recursively traverses the nested JSON structure,\n   *    building CMI element paths as it goes (e.g., \"cmi.core.student_id\").\n   *\n   * 2. Type-specific handling: Different data types are handled differently:\n   *    - Arrays: Each array element is processed individually with its index in the path\n   *    - Objects: Recursively processed with updated path\n   *    - Primitives: Set directly using setCMIValue\n   *\n   * 3. Initialization check: Ensures the method is only called before API initialization\n   *\n   * 4. Starting data storage: Stores the original JSON data for potential future use\n   *\n   * The algorithm works by:\n   * - First storing the complete JSON object via setStartingData\n   * - Iterating through each property in the JSON object\n   * - For each property, determining its type and handling it accordingly\n   * - Building the CMI element path as it traverses the structure\n   * - Setting values at the appropriate paths using setCMIValue\n   *\n   * @param {{[key: string]: any}} json - The nested JSON object to load\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value at a specific path\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   * @param {Function} setStartingData - Function to store the original JSON data\n   *\n   * @example\n   * // Example of nested JSON input:\n   * // {\n   * //   \"core\": {\n   * //     \"student_id\": \"12345\",\n   * //     \"student_name\": \"John Doe\"\n   * //   },\n   * //   \"objectives\": [\n   * //     { \"id\": \"obj1\", \"score\": { \"raw\": 80 } },\n   * //     { \"id\": \"obj2\", \"score\": { \"raw\": 90 } }\n   * //   ]\n   * // }\n   */\n  loadFromJSON(\n    json: { [key: string]: any },\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\n        \"loadFromJSON can only be called before the call to lmsInitialize.\",\n      );\n      return;\n    }\n\n    CMIElement = CMIElement !== undefined ? CMIElement : \"cmi\";\n\n    setStartingData(json);\n\n    // could this be refactored down to flatten(json) then setCMIValue on each?\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key) && json[key]) {\n        const currentCMIElement = (CMIElement ? CMIElement + \".\" : \"\") + key;\n        const value = json[key];\n\n        if (value.constructor === Array) {\n          for (let i = 0; i < value.length; i++) {\n            if (value[i]) {\n              const item = value[i];\n              const tempCMIElement = `${currentCMIElement}.${i}`;\n\n              if (item.constructor === Object) {\n                this.loadFromJSON(\n                  item,\n                  tempCMIElement,\n                  setCMIValue,\n                  isNotInitialized,\n                  setStartingData,\n                );\n              } else {\n                setCMIValue(tempCMIElement, item);\n              }\n            }\n          }\n        } else if (value.constructor === Object) {\n          this.loadFromJSON(\n            value,\n            currentCMIElement,\n            setCMIValue,\n            isNotInitialized,\n            setStartingData,\n          );\n        } else {\n          setCMIValue(currentCMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Render the CMI object to JSON for sending to an LMS.\n   *\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {string}\n   */\n  renderCMIToJSONString(\n    cmi: BaseCMI | StringKeyMap,\n    sendFullCommit: boolean,\n  ): string {\n    // Do we want/need to return fields that have no set value?\n    if (sendFullCommit) {\n      return JSON.stringify({ cmi });\n    }\n    return JSON.stringify({ cmi }, (k, v) => (v === undefined ? null : v), 2);\n  }\n\n  /**\n   * Returns a JS object representing the current cmi\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {object}\n   */\n  renderCMIToJSONObject(\n    cmi: BaseCMI | StringKeyMap,\n    sendFullCommit: boolean,\n  ): StringKeyMap {\n    // Revert to the original implementation to maintain compatibility with tests\n    return JSON.parse(this.renderCMIToJSONString(cmi, sendFullCommit));\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} alwaysSendTotalTime - Whether to always send total time\n   * @param {boolean|Function} renderCommonCommitFields - Whether to render common commit fields\n   * @param {Function} renderCommitObject - Function to render commit object\n   * @param {Function} renderCommitCMI - Function to render commit CMI\n   * @param {LogLevel} apiLogLevel - The API log level\n   * @return {CommitObject|StringKeyMap|Array<any>}\n   */\n  getCommitObject(\n    terminateCommit: boolean,\n    alwaysSendTotalTime: boolean,\n    renderCommonCommitFields:\n      | boolean\n      | ((commitObject: CommitObject) => boolean),\n    renderCommitObject: (terminateCommit: boolean) => CommitObject,\n    renderCommitCMI: (terminateCommit: boolean) => StringKeyMap | Array<any>,\n    apiLogLevel: LogLevel,\n  ): CommitObject | StringKeyMap | Array<any> {\n    const shouldTerminateCommit = terminateCommit || alwaysSendTotalTime;\n    const commitObject = renderCommonCommitFields\n      ? renderCommitObject(shouldTerminateCommit)\n      : renderCommitCMI(shouldTerminateCommit);\n\n    if ([LogLevelEnum.DEBUG, \"1\", 1, \"DEBUG\"].includes(apiLogLevel)) {\n      console.debug(\n        \"Commit (terminated: \" + (terminateCommit ? \"yes\" : \"no\") + \"): \",\n      );\n      console.debug(commitObject);\n    }\n    return commitObject;\n  }\n}\n","import { ValidationError } from \"../exceptions\";\nimport { CMIArray } from \"../cmi/common/array\";\n\n/**\n * Type guard for ValidationError\n *\n * @param {unknown} value - The value to check\n * @return {boolean} - Whether the value is a ValidationError\n */\nexport function isValidationError(value: unknown): value is ValidationError {\n  return value instanceof ValidationError;\n}\n\n/**\n * Type guard for Error\n *\n * @param {unknown} value - The value to check\n * @return {boolean} - Whether the value is an Error\n */\nexport function isError(value: unknown): value is Error {\n  return value instanceof Error;\n}\n\n/**\n * Type guard for CMIArray\n *\n * @param {unknown} value - The value to check\n * @return {boolean} - Whether the value is a CMIArray\n */\nexport function isCMIArray(value: unknown): value is CMIArray {\n  return value instanceof CMIArray;\n}\n","import { ErrorCode } from \"../constants/error_codes\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { StringKeyMap, stringMatches } from \"../utilities\";\nimport { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ICMIDataService, IErrorHandlingService } from \"../interfaces/services\";\nimport { isCMIArray } from \"../utils/type_guards\";\n\n/**\n * Service for accessing and manipulating CMI data\n */\nexport class CMIDataService implements ICMIDataService {\n  private _error_codes: ErrorCode;\n  private readonly _apiLog: (\n    functionName: string,\n    message: string,\n    logLevel?: LogLevel,\n    CMIElement?: string,\n  ) => void;\n  private readonly _throwSCORMError: (\n    errorNumber: number,\n    message?: string,\n  ) => void;\n  private readonly _validateCorrectResponse: (\n    CMIElement: string,\n    value: any,\n  ) => void;\n  private readonly _getChildElement: (\n    CMIElement: string,\n    value: any,\n    foundFirstIndex: boolean,\n  ) => any;\n  private readonly _checkObjectHasProperty: (\n    refObject: StringKeyMap,\n    attribute: string,\n  ) => boolean;\n  private readonly _errorHandlingService: IErrorHandlingService;\n\n  /**\n   * Constructor for CMIDataService\n   *\n   * @param {ErrorCode} error_codes - Error codes\n   * @param {Function} apiLog - Function for logging API calls\n   * @param {Function} throwSCORMError - Function for throwing SCORM errors\n   * @param {Function} validateCorrectResponse - Function for validating correct responses\n   * @param {Function} getChildElement - Function for getting child elements\n   * @param {Function} checkObjectHasProperty - Function for checking if an object has a property\n   * @param {IErrorHandlingService} errorHandlingService - The error handling service\n   */\n  constructor(\n    error_codes: ErrorCode,\n    apiLog: (\n      functionName: string,\n      message: string,\n      logLevel?: LogLevel,\n      CMIElement?: string,\n    ) => void,\n    throwSCORMError: (errorNumber: number, message?: string) => void,\n    validateCorrectResponse: (CMIElement: string, value: any) => void,\n    getChildElement: (\n      CMIElement: string,\n      value: any,\n      foundFirstIndex: boolean,\n    ) => any,\n    checkObjectHasProperty: (\n      refObject: StringKeyMap,\n      attribute: string,\n    ) => boolean,\n    errorHandlingService: IErrorHandlingService,\n  ) {\n    this._error_codes = error_codes;\n    this._apiLog = apiLog;\n    this._throwSCORMError = throwSCORMError;\n    this._validateCorrectResponse = validateCorrectResponse;\n    this._getChildElement = getChildElement;\n    this._checkObjectHasProperty = checkObjectHasProperty;\n    this._errorHandlingService = errorHandlingService;\n  }\n\n  /**\n   * Updates the last error code\n   *\n   * @param {string} errorCode - The error code\n   */\n  updateLastErrorCode(errorCode: string): void {\n    this._errorHandlingService.lastErrorCode = errorCode;\n  }\n\n  /**\n   * Throws a SCORM error and updates the last error code\n   *\n   * @param {number} errorNumber - The error number\n   * @param {string} message - The error message\n   */\n  throwSCORMError(errorNumber: number, message?: string): void {\n    this._throwSCORMError(errorNumber, message);\n  }\n\n  /**\n   * Shared API method to set a value for a given CMI element.\n   *\n   * This method implements the core algorithm for navigating the CMI data model\n   * and setting values at the specified path. It handles complex scenarios including:\n   *\n   * 1. Dot notation traversal: Parses the CMIElement string (e.g., \"cmi.core.student_id\")\n   *    and traverses the nested CMI object structure accordingly.\n   *\n   * 2. Array handling: Detects array elements (e.g., \"cmi.objectives.0.id\") and\n   *    either accesses existing array items or creates new ones as needed.\n   *\n   * 3. SCORM 2004 specific features: Handles special syntax like {target=} for\n   *    interaction targets.\n   *\n   * 4. Validation: Performs validation for specific elements like correct_responses\n   *    to ensure data integrity.\n   *\n   * 5. Error handling: Validates that the CMI path exists and is writable,\n   *    throwing appropriate SCORM errors when issues are encountered.\n   *\n   * @param {StringKeyMap} cmi - The CMI object to modify\n   * @param {string} methodName - The method name (for error reporting)\n   * @param {boolean} scorm2004 - Whether this is SCORM 2004 (affects error codes and behavior)\n   * @param {string} CMIElement - The dot-notation path to the CMI element to set\n   * @param {any} value - The value to set at the specified path\n   * @param {boolean} isInitialized - Whether the API is initialized (affects write permissions)\n   * @return {string} \"true\" if successful, \"false\" if an error occurred\n   */\n  setCMIValue(\n    cmi: StringKeyMap,\n    methodName: string,\n    scorm2004: boolean,\n    CMIElement: string,\n    value: any,\n    isInitialized: boolean,\n  ): string {\n    if (!CMIElement || CMIElement === \"\") {\n      return global_constants.SCORM_FALSE;\n    }\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap = cmi;\n    let returnValue = global_constants.SCORM_FALSE;\n    let foundFirstIndex = false;\n\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      const attribute = structure[idx];\n\n      if (idx === structure.length - 1) {\n        if (scorm2004 && attribute.substring(0, 8) === \"{target=\") {\n          if (isInitialized) {\n            this.throwSCORMError(this._error_codes.READ_ONLY_ELEMENT);\n          } else {\n            refObject = {\n              ...refObject,\n              attribute: value,\n            };\n          }\n        } else if (!this._checkObjectHasProperty(refObject, attribute)) {\n          this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n        } else {\n          if (\n            stringMatches(CMIElement, \"\\\\.correct_responses\\\\.\\\\d+\") &&\n            isInitialized\n          ) {\n            this._validateCorrectResponse(CMIElement, value);\n          }\n\n          if (!scorm2004 || this._errorHandlingService.lastErrorCode === \"0\") {\n            refObject[attribute] = value;\n            returnValue = global_constants.SCORM_TRUE;\n          }\n        }\n      } else {\n        refObject = refObject[attribute] as StringKeyMap;\n        if (!refObject) {\n          this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n\n        if (isCMIArray(refObject)) {\n          const index = parseInt(structure[idx + 1], 10);\n\n          // SCO is trying to set an item on an array\n          if (!isNaN(index)) {\n            const item = refObject.childArray[index];\n\n            if (item) {\n              refObject = item;\n              foundFirstIndex = true;\n            } else {\n              const newChild = this._getChildElement(\n                CMIElement,\n                value,\n                foundFirstIndex,\n              );\n              foundFirstIndex = true;\n\n              if (!newChild) {\n                this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n              } else {\n                if (refObject.initialized) newChild.initialize();\n\n                refObject.childArray.push(newChild);\n                refObject = newChild;\n              }\n            }\n\n            // Have to update idx value to skip the array position\n            idx++;\n          }\n        }\n      }\n    }\n\n    if (returnValue === global_constants.SCORM_FALSE) {\n      this._apiLog(\n        methodName,\n        `There was an error setting the value for: ${CMIElement}, value of: ${value}`,\n        LogLevelEnum.WARN,\n      );\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Gets a value from the CMI Object at the specified path.\n   *\n   * This method implements the core algorithm for navigating the CMI data model\n   * and retrieving values from the specified path. It handles complex scenarios including:\n   *\n   * 1. Dot notation traversal: Parses the CMIElement string (e.g., \"cmi.core.student_id\")\n   *    and traverses the nested CMI object structure accordingly.\n   *\n   * 2. Array handling: Detects array elements (e.g., \"cmi.objectives.0.id\") and\n   *    accesses the appropriate array item, throwing errors if the index doesn't exist.\n   *\n   * 3. SCORM version differences: Implements different error handling and validation\n   *    logic for SCORM 1.2 vs SCORM 2004.\n   *\n   * 4. Special attributes: Handles special cases like _children and _count attributes\n   *    in SCORM 1.2, which provide metadata about the CMI structure.\n   *\n   * 5. SCORM 2004 target validation: Processes special {target=} syntax for\n   *    interaction targets and validates them using the _isTargetValid method.\n   *\n   * 6. Error handling: Validates that the CMI path exists and is readable,\n   *    throwing appropriate SCORM errors when issues are encountered.\n   *\n   * @param {StringKeyMap} cmi - The CMI object to read from\n   * @param {string} methodName - The method name (for error reporting)\n   * @param {boolean} scorm2004 - Whether this is SCORM 2004 (affects error codes and behavior)\n   * @param {string} CMIElement - The dot-notation path to the CMI element to retrieve\n   * @return {any} The value at the specified path, or undefined if an error occurred\n   */\n  getCMIValue(\n    cmi: StringKeyMap,\n    methodName: string,\n    scorm2004: boolean,\n    CMIElement: string,\n  ): any {\n    if (!CMIElement || CMIElement === \"\") {\n      return \"\";\n    }\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap = cmi;\n    let attribute = null;\n\n    const uninitializedErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) has not been initialized.`;\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      attribute = structure[idx];\n\n      if (!scorm2004) {\n        if (idx === structure.length - 1) {\n          if (!this._checkObjectHasProperty(refObject, attribute)) {\n            this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n            return;\n          }\n        }\n      } else {\n        if (\n          String(attribute).substring(0, 8) === \"{target=\" &&\n          typeof refObject._isTargetValid == \"function\"\n        ) {\n          const target = String(attribute).substring(\n            8,\n            String(attribute).length - 9,\n          );\n          return refObject._isTargetValid(target);\n        } else if (!this._checkObjectHasProperty(refObject, attribute)) {\n          this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n          return;\n        }\n      }\n\n      refObject = refObject[attribute] as StringKeyMap;\n      if (refObject === undefined) {\n        this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n        break;\n      }\n\n      if (isCMIArray(refObject)) {\n        const index = parseInt(structure[idx + 1], 10);\n\n        // SCO is trying to set an item on an array\n        if (!isNaN(index)) {\n          const item = refObject.childArray[index];\n\n          if (item) {\n            refObject = item;\n          } else {\n            this.throwSCORMError(\n              this._error_codes.VALUE_NOT_INITIALIZED,\n              uninitializedErrorMessage,\n            );\n            break;\n          }\n\n          // Have to update idx value to skip the array position\n          idx++;\n        }\n      }\n    }\n\n    if (refObject === null || refObject === undefined) {\n      if (!scorm2004) {\n        if (attribute === \"_children\") {\n          this.throwSCORMError(this._error_codes.CHILDREN_ERROR);\n        } else if (attribute === \"_count\") {\n          this.throwSCORMError(this._error_codes.COUNT_ERROR);\n        }\n      }\n    } else {\n      return refObject;\n    }\n  }\n}\n","import { LogLevelEnum } from \"../constants/enums\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { ValidationError } from \"../exceptions\";\nimport { IErrorHandlingService } from \"../interfaces/services\";\nimport { isValidationError, isError } from \"../utils/type_guards\";\n\n/**\n * Service for handling SCORM errors\n */\nexport class ErrorHandlingService implements IErrorHandlingService {\n  private _lastErrorCode: string = \"0\";\n  private readonly _errorCodes: ErrorCode;\n  private readonly _apiLog: (\n    functionName: string,\n    message: string,\n    logLevel?: LogLevelEnum,\n  ) => void;\n  private readonly _getLmsErrorMessageDetails: (errorCode: number) => string;\n\n  /**\n   * Constructor for ErrorHandlingService\n   *\n   * @param {ErrorCode} errorCodes - The error codes object\n   * @param {Function} apiLog - Function for logging API calls\n   * @param {Function} getLmsErrorMessageDetails - Function for getting error message details\n   */\n  constructor(\n    errorCodes: ErrorCode,\n    apiLog: (\n      functionName: string,\n      message: string,\n      logLevel?: LogLevelEnum,\n    ) => void,\n    getLmsErrorMessageDetails: (errorCode: number) => string,\n  ) {\n    this._errorCodes = errorCodes;\n    this._apiLog = apiLog;\n    this._getLmsErrorMessageDetails = getLmsErrorMessageDetails;\n  }\n\n  /**\n   * Get the last error code\n   *\n   * @return {string} - The last error code\n   */\n  get lastErrorCode(): string {\n    return this._lastErrorCode;\n  }\n\n  /**\n   * Set the last error code\n   *\n   * @param {string} errorCode - The error code to set\n   */\n  set lastErrorCode(errorCode: string) {\n    this._lastErrorCode = errorCode;\n  }\n\n  /**\n   * Throws a SCORM error\n   *\n   * @param {number} errorNumber - The error number\n   * @param {string} message - The error message\n   */\n  throwSCORMError(errorNumber: number, message?: string): void {\n    if (!message) {\n      message = this._getLmsErrorMessageDetails(errorNumber);\n    }\n\n    this._apiLog(\n      \"throwSCORMError\",\n      errorNumber + \": \" + message,\n      LogLevelEnum.ERROR,\n    );\n\n    this._lastErrorCode = String(errorNumber);\n  }\n\n  /**\n   * Clears the last SCORM error code on success.\n   *\n   * @param {string} success - Whether the operation was successful\n   */\n  clearSCORMError(success: string): void {\n    if (success !== undefined && success !== global_constants.SCORM_FALSE) {\n      this._lastErrorCode = \"0\";\n    }\n  }\n\n  /**\n   * Handles exceptions that occur when accessing or setting CMI values.\n   *\n   * This method provides centralized error handling for exceptions that occur during\n   * CMI data operations. It differentiates between different types of errors and\n   * handles them appropriately:\n   *\n   * 1. ValidationError: These are expected errors from the validation system that\n   *    indicate a specific SCORM error condition (like invalid data format or range).\n   *    For these errors, the method:\n   *    - Sets the lastErrorCode to the error code from the ValidationError\n   *    - Returns SCORM_FALSE to indicate failure to the caller\n   *\n   * 2. Standard JavaScript Error: For general JavaScript errors (like TypeError,\n   *    ReferenceError, etc.), the method:\n   *    - Logs the error message to the console\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * 3. Unknown exceptions: For any other type of exception that doesn't match the\n   *    above categories, the method:\n   *    - Logs the entire exception object to the console\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * This method is critical for maintaining SCORM compliance by ensuring that\n   * all errors are properly translated into the appropriate SCORM error codes.\n   *\n   * @param {ValidationError|Error|unknown} e - The exception that was thrown\n   * @param {string} returnValue - The default return value (typically an empty string)\n   * @return {string} - Either the original returnValue or SCORM_FALSE if an error occurred\n   *\n   * @example\n   * try {\n   *   const value = getCMIValue(\"cmi.core.score.raw\");\n   *   return value;\n   * } catch (e) {\n   *   return handleValueAccessException(e, \"\");\n   * }\n   */\n  handleValueAccessException(\n    e: ValidationError | Error | unknown,\n    returnValue: string,\n  ): string {\n    if (isValidationError(e)) {\n      this._lastErrorCode = String(e.errorCode);\n      returnValue = global_constants.SCORM_FALSE;\n    } else {\n      if (isError(e) && e.message) {\n        console.error(e.message);\n      } else {\n        console.error(e);\n      }\n      this.throwSCORMError(this._errorCodes.GENERAL);\n    }\n    return returnValue;\n  }\n\n  /**\n   * Get the error codes object\n   *\n   * @return {ErrorCode} - The error codes object\n   */\n  get errorCodes(): ErrorCode {\n    return this._errorCodes;\n  }\n}\n\n// Export a factory function to create the service\nexport function createErrorHandlingService(\n  errorCodes: ErrorCode,\n  apiLog: (\n    functionName: string,\n    message: string,\n    logLevel?: LogLevelEnum,\n  ) => void,\n  getLmsErrorMessageDetails: (errorCode: number) => string,\n): ErrorHandlingService {\n  return new ErrorHandlingService(\n    errorCodes,\n    apiLog,\n    getLmsErrorMessageDetails,\n  );\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ILoggingService } from \"../interfaces/services\";\nimport { defaultLogHandler } from \"../constants/default_settings\";\n\n/**\n * Centralized logging service implemented as a singleton\n * Provides methods for logging at different levels and configuring the log level\n */\nexport class LoggingService implements ILoggingService {\n  private static _instance: LoggingService;\n  private _logLevel: LogLevel = LogLevelEnum.ERROR;\n  private _logHandler: (messageLevel: LogLevel, logMessage: string) => void;\n\n  /**\n   * Private constructor to prevent direct instantiation\n   */\n  private constructor() {\n    // Default log handler uses console methods based on log level\n    this._logHandler = defaultLogHandler;\n  }\n\n  /**\n   * Get the singleton instance of LoggingService\n   *\n   * @returns {LoggingService} The singleton instance\n   */\n  public static getInstance(): LoggingService {\n    if (!LoggingService._instance) {\n      LoggingService._instance = new LoggingService();\n    }\n    return LoggingService._instance;\n  }\n\n  /**\n   * Set the log level\n   *\n   * @param {LogLevel} level - The log level to set\n   */\n  public setLogLevel(level: LogLevel): void {\n    this._logLevel = level;\n  }\n\n  /**\n   * Get the current log level\n   *\n   * @returns {LogLevel} The current log level\n   */\n  public getLogLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  /**\n   * Set a custom log handler\n   *\n   * @param {Function} handler - The function to handle log messages\n   */\n  public setLogHandler(\n    handler: (messageLevel: LogLevel, logMessage: string) => void,\n  ): void {\n    this._logHandler = handler;\n  }\n\n  /**\n   * Log a message if the message level is greater than or equal to the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @param {string} logMessage - The message to log\n   */\n  public log(messageLevel: LogLevel, logMessage: string): void {\n    if (this.shouldLog(messageLevel)) {\n      this._logHandler(messageLevel, logMessage);\n    }\n  }\n\n  /**\n   * Log a message at ERROR level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public error(logMessage: string): void {\n    this.log(LogLevelEnum.ERROR, logMessage);\n  }\n\n  /**\n   * Log a message at WARN level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public warn(logMessage: string): void {\n    this.log(LogLevelEnum.WARN, logMessage);\n  }\n\n  /**\n   * Log a message at INFO level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public info(logMessage: string): void {\n    this.log(LogLevelEnum.INFO, logMessage);\n  }\n\n  /**\n   * Log a message at DEBUG level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public debug(logMessage: string): void {\n    this.log(LogLevelEnum.DEBUG, logMessage);\n  }\n\n  /**\n   * Determine if a message should be logged based on its level and the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @returns {boolean} Whether the message should be logged\n   */\n  private shouldLog(messageLevel: LogLevel): boolean {\n    // Convert string levels to numbers for comparison\n    const numericMessageLevel = this.getNumericLevel(messageLevel);\n    const numericLogLevel = this.getNumericLevel(this._logLevel);\n\n    return numericMessageLevel >= numericLogLevel;\n  }\n\n  /**\n   * Convert a log level to its numeric value\n   *\n   * @param {LogLevel} level - The log level to convert\n   * @returns {number} The numeric value of the log level\n   */\n  private getNumericLevel(level: LogLevel): number {\n    if (level === undefined) return LogLevelEnum.NONE;\n\n    if (typeof level === \"number\") return level;\n\n    switch (level) {\n      case \"1\":\n      case \"DEBUG\":\n        return LogLevelEnum.DEBUG;\n      case \"2\":\n      case \"INFO\":\n        return LogLevelEnum.INFO;\n      case \"3\":\n      case \"WARN\":\n        return LogLevelEnum.WARN;\n      case \"4\":\n      case \"ERROR\":\n        return LogLevelEnum.ERROR;\n      case \"5\":\n      case \"NONE\":\n        return LogLevelEnum.NONE;\n      default:\n        return LogLevelEnum.ERROR; // Default to ERROR if unknown\n    }\n  }\n}\n\n// Export a function to get the singleton instance\nexport function getLoggingService(): LoggingService {\n  return LoggingService.getInstance();\n}\n","import { ErrorCode } from \"./constants/error_codes\";\nimport { global_constants } from \"./constants/api_constants\";\nimport { formatMessage, StringKeyMap } from \"./utilities\";\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport {\n  CommitObject,\n  LogLevel,\n  ResultObject,\n  Settings,\n} from \"./types/api_types\";\nimport { DefaultSettings } from \"./constants/default_settings\";\nimport { IBaseAPI } from \"./interfaces/IBaseAPI\";\nimport { ScheduledCommit } from \"./helpers/scheduled_commit\";\nimport { LogLevelEnum } from \"./constants/enums\";\nimport { HttpService } from \"./services/HttpService\";\nimport { EventService } from \"./services/EventService\";\nimport { SerializationService } from \"./services/SerializationService\";\nimport { CMIDataService } from \"./services/CMIDataService\";\nimport { createErrorHandlingService } from \"./services/ErrorHandlingService\";\nimport { getLoggingService } from \"./services/LoggingService\";\nimport {\n  ICMIDataService,\n  IErrorHandlingService,\n  IEventService,\n  IHttpService,\n  ILoggingService,\n  ISerializationService,\n} from \"./interfaces/services\";\n\n/**\n * Base API class for AICC, SCORM 1.2, and SCORM 2004. Should be considered\n * abstract, and never initialized on its own.\n */\nexport default abstract class BaseAPI implements IBaseAPI {\n  [key: string]: unknown;\n  private _timeout?: ScheduledCommit;\n  private readonly _error_codes: ErrorCode;\n  private _settings: Settings = DefaultSettings;\n  private readonly _httpService: IHttpService;\n  private _eventService: IEventService;\n  private _serializationService: ISerializationService;\n  private _cmiDataService: ICMIDataService;\n  private readonly _errorHandlingService: IErrorHandlingService;\n  private readonly _loggingService: ILoggingService;\n\n  /**\n   * Constructor for Base API class. Sets some shared API fields, as well as\n   * sets up options for the API.\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Settings} settings - Optional settings for the API\n   * @param {IHttpService} httpService - Optional HTTP service instance\n   * @param {IEventService} eventService - Optional Event service instance\n   * @param {ISerializationService} serializationService - Optional Serialization service instance\n   * @param {ICMIDataService} cmiDataService - Optional CMI Data service instance\n   * @param {IErrorHandlingService} errorHandlingService - Optional Error Handling service instance\n   * @param {ILoggingService} loggingService - Optional Logging service instance\n   */\n  protected constructor(\n    error_codes: ErrorCode,\n    settings?: Settings,\n    httpService?: IHttpService,\n    eventService?: IEventService,\n    serializationService?: ISerializationService,\n    cmiDataService?: ICMIDataService,\n    errorHandlingService?: IErrorHandlingService,\n    loggingService?: ILoggingService,\n  ) {\n    if (new.target === BaseAPI) {\n      throw new TypeError(\"Cannot construct BaseAPI instances directly\");\n    }\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n\n    this._error_codes = error_codes;\n\n    if (settings) {\n      this.settings = settings;\n    }\n    this.apiLogLevel = this.settings.logLevel;\n    this.selfReportSessionTime = this.settings.selfReportSessionTime;\n\n    if (this.apiLogLevel === undefined) {\n      this.apiLogLevel = LogLevelEnum.NONE;\n    }\n\n    // Initialize and configure LoggingService\n    this._loggingService = loggingService || getLoggingService();\n    this._loggingService.setLogLevel(this.apiLogLevel);\n\n    // If settings include a custom onLogMessage function, use it as the log handler\n    if (this.settings.onLogMessage) {\n      this._loggingService.setLogHandler(this.settings.onLogMessage);\n    }\n\n    // Initialize HTTP service\n    this._httpService =\n      httpService || new HttpService(this.settings, this._error_codes);\n\n    // Initialize Event service\n    this._eventService =\n      eventService || new EventService(this.apiLog.bind(this));\n\n    // Initialize Serialization service\n    this._serializationService =\n      serializationService || new SerializationService();\n\n    // Initialize Error Handling service\n    this._errorHandlingService =\n      errorHandlingService ||\n      createErrorHandlingService(\n        this._error_codes,\n        this.apiLog.bind(this),\n        this.getLmsErrorMessageDetails.bind(this),\n      );\n\n    // Initialize CMI Data service\n    this._cmiDataService =\n      cmiDataService ||\n      new CMIDataService(\n        this._error_codes,\n        this.apiLog.bind(this),\n        this.throwSCORMError.bind(this),\n        this.validateCorrectResponse.bind(this),\n        this.getChildElement.bind(this),\n        this._checkObjectHasProperty.bind(this),\n        this._errorHandlingService,\n      );\n  }\n\n  public abstract cmi: BaseCMI;\n  public startingData?: StringKeyMap;\n\n  public currentState: number;\n  public apiLogLevel: LogLevel;\n  public selfReportSessionTime: boolean;\n\n  /**\n   * Get the last error code\n   * @return {string}\n   */\n  get lastErrorCode(): string {\n    return this._errorHandlingService?.lastErrorCode ?? \"0\";\n  }\n\n  /**\n   * Set the last error code\n   * @param {string} errorCode\n   */\n  set lastErrorCode(errorCode: string) {\n    if (this._errorHandlingService) {\n      this._errorHandlingService.lastErrorCode = errorCode;\n    }\n  }\n\n  /**\n   * Reset the API to its initial state.\n   * This method clears all current data and resets the API to an uninitialized state.\n   * It can optionally accept new settings to configure the API after reset.\n   *\n   * @param {Settings} settings - Optional new settings to apply after reset\n   */\n  abstract reset(settings?: Settings): void;\n\n  /**\n   * Common reset method for all APIs. New settings are merged with the existing settings.\n   * @param {Settings} settings\n   * @protected\n   */\n  commonReset(settings?: Settings): void {\n    this.apiLog(\"reset\", \"Called\", LogLevelEnum.INFO);\n\n    this.settings = { ...this.settings, ...settings };\n\n    this.clearScheduledCommit();\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n    this.lastErrorCode = \"0\";\n    this._eventService.reset();\n    this.startingData = undefined;\n  }\n\n  /**\n   * Initialize the API\n   * @param {string} callbackName\n   * @param {string} initializeMessage\n   * @param {string} terminationMessage\n   * @return {string}\n   */\n  initialize(\n    callbackName: string,\n    initializeMessage?: string,\n    terminationMessage?: string,\n  ): string {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.isInitialized()) {\n      this.throwSCORMError(this._error_codes.INITIALIZED, initializeMessage);\n    } else if (this.isTerminated()) {\n      this.throwSCORMError(this._error_codes.TERMINATED, terminationMessage);\n    } else {\n      if (this.selfReportSessionTime) {\n        this.cmi.setStartTime();\n      }\n\n      this.currentState = global_constants.STATE_INITIALIZED;\n      this.lastErrorCode = \"0\";\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Initialize the LMS API\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsInitialize(): string;\n\n  /**\n   * Finish the current LMS API session\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsFinish(): string;\n\n  /**\n   * Get the value of a CMI element from the LMS\n   * @param {string} CMIElement - The CMI element to get the value of\n   * @return {string} The value of the CMI element\n   */\n  abstract lmsGetValue(CMIElement: string): string;\n\n  /**\n   * Set the value of a CMI element in the LMS\n   * @param {string} CMIElement - The CMI element to set the value of\n   * @param {any} value - The value to set\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsSetValue(CMIElement: string, value: any): string;\n\n  /**\n   * Commit the current data to the LMS\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsCommit(): string;\n\n  /**\n   * Get the last error code from the LMS\n   * @return {string} The last error code\n   */\n  abstract lmsGetLastError(): string;\n\n  /**\n   * Get the error string for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get the string for\n   * @return {string} The error string\n   */\n  abstract lmsGetErrorString(CMIErrorCode: string | number): string;\n\n  /**\n   * Get diagnostic information for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get diagnostic information for\n   * @return {string} The diagnostic information\n   */\n  abstract lmsGetDiagnostic(CMIErrorCode: string | number): string;\n\n  /**\n   * Abstract method for validating that a response is correct.\n   * This method is used to validate the format and content of a response\n   * before it is set in the CMI data model.\n   *\n   * @param {string} _CMIElement - The CMI element path to validate\n   * @param {any} _value - The value to validate\n   * @throws {Error} If the response format is invalid\n   */\n  abstract validateCorrectResponse(_CMIElement: string, _value: any): void;\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   * APIs that inherit BaseAPI should override this method.\n   *\n   * @param {string} _CMIElement - unused\n   * @param {*} _value - unused\n   * @param {boolean} _foundFirstIndex - unused\n   * @return {BaseCMI|null}\n   * @abstract\n   */\n  abstract getChildElement(\n    _CMIElement: string,\n    _value: any,\n    _foundFirstIndex: boolean,\n  ): BaseCMI | null;\n\n  /**\n   * Attempts to store the data to the LMS, logs data if no LMS configured\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _calculateTotalTime\n   * @return {ResultObject}\n   * @abstract\n   */\n  abstract storeData(_calculateTotalTime: boolean): Promise<ResultObject>;\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _terminateCommit\n   * @return {StringKeyMap|Array}\n   * @abstract\n   */\n  abstract renderCommitCMI(\n    _terminateCommit: boolean,\n  ): StringKeyMap | Array<string>;\n\n  /**\n   * Render the commit object to the shortened format for LMS commit.\n   * This method transforms the CMI data into a format suitable for sending to the LMS.\n   * It is called during the commit process to prepare the data for transmission.\n   *\n   * @param {boolean} _terminateCommit - Whether this commit is part of the termination process\n   * @return {CommitObject} A formatted object containing the data to be sent to the LMS\n   * @example\n   * // Example of a commit object structure\n   * {\n   *   method: \"POST\",\n   *   params: {\n   *     cmi: { ... },\n   *     finishState: \"COMPLETED\"\n   *   }\n   * }\n   */\n  abstract renderCommitObject(_terminateCommit: boolean): CommitObject;\n\n  /**\n   * Logging for all SCORM actions\n   *\n   * @param {string} functionName\n   * @param {string} logMessage\n   * @param {number} messageLevel\n   * @param {string} CMIElement\n   */\n  apiLog(\n    functionName: string,\n    logMessage: string,\n    messageLevel: LogLevel,\n    CMIElement?: string,\n  ) {\n    logMessage = formatMessage(functionName, logMessage, CMIElement);\n\n    if (messageLevel >= this.apiLogLevel) {\n      // Use the injected LoggingService\n      this._loggingService.log(messageLevel, logMessage);\n\n      // For backward compatibility, also call the settings.onLogMessage if it exists\n      // and is different from the LoggingService's handler\n      if (\n        this.settings.onLogMessage &&\n        this.settings.onLogMessage !==\n          (this._loggingService as any)[\"_logHandler\"]\n      ) {\n        this.settings.onLogMessage(messageLevel, logMessage);\n      }\n    }\n  }\n\n  /**\n   * Getter for _error_codes\n   * @return {ErrorCode}\n   */\n  get error_codes(): ErrorCode {\n    return this._error_codes;\n  }\n\n  /**\n   * Getter for _settings\n   * @return {Settings}\n   */\n  get settings(): Settings {\n    return this._settings;\n  }\n\n  /**\n   * Setter for _settings\n   * @param {Settings} settings\n   */\n  set settings(settings: Settings) {\n    const previousSettings = this._settings;\n    this._settings = { ...this._settings, ...settings };\n\n    // Update HTTP service settings\n    this._httpService?.updateSettings(this._settings);\n\n    // Update log level if it changed\n    if (\n      settings.logLevel !== undefined &&\n      settings.logLevel !== previousSettings.logLevel\n    ) {\n      this.apiLogLevel = settings.logLevel;\n      this._loggingService?.setLogLevel(settings.logLevel);\n    }\n\n    // Update log handler if onLogMessage changed\n    if (\n      settings.onLogMessage !== undefined &&\n      settings.onLogMessage !== previousSettings.onLogMessage\n    ) {\n      this._loggingService?.setLogHandler(settings.onLogMessage);\n    }\n  }\n\n  /**\n   * Terminates the current run of the API\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async terminate(\n    callbackName: string,\n    checkTerminated: boolean,\n  ): Promise<string> {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.TERMINATION_BEFORE_INIT,\n        this._error_codes.MULTIPLE_TERMINATION,\n      )\n    ) {\n      this.currentState = global_constants.STATE_TERMINATED;\n\n      const result: ResultObject = await this.storeData(true);\n      if ((result.errorCode ?? 0) > 0) {\n        this.throwSCORMError(result.errorCode);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Get the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  getValue(\n    callbackName: string,\n    checkTerminated: boolean,\n    CMIElement: string,\n  ): string {\n    let returnValue: string = \"\";\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.RETRIEVE_BEFORE_INIT,\n        this._error_codes.RETRIEVE_AFTER_TERM,\n      )\n    ) {\n      if (checkTerminated) this.lastErrorCode = \"0\";\n      try {\n        returnValue = this.getCMIValue(CMIElement);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement);\n    }\n\n    this.apiLog(\n      callbackName,\n      \": returned: \" + returnValue,\n      LogLevelEnum.INFO,\n      CMIElement,\n    );\n\n    if (returnValue === undefined) {\n      return \"\";\n    }\n\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Sets the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {string} commitCallback\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  setValue(\n    callbackName: string,\n    commitCallback: string,\n    checkTerminated: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (value !== undefined) {\n      value = String(value);\n    }\n    let returnValue: string = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.STORE_BEFORE_INIT,\n        this._error_codes.STORE_AFTER_TERM,\n      )\n    ) {\n      if (checkTerminated) this.lastErrorCode = \"0\";\n      try {\n        returnValue = this.setCMIValue(CMIElement, value);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement, value);\n    }\n\n    if (returnValue === undefined) {\n      returnValue = global_constants.SCORM_FALSE;\n    }\n\n    // If we didn't have any errors while setting the data, go ahead and\n    // schedule a commit, if autocommit is turned on\n    if (String(this.lastErrorCode) === \"0\") {\n      if (this.settings.autocommit) {\n        this.scheduleCommit(\n          this.settings.autocommitSeconds * 1000,\n          commitCallback,\n        );\n      }\n    }\n\n    this.apiLog(\n      callbackName,\n      \": \" + value + \": result: \" + returnValue,\n      LogLevelEnum.INFO,\n      CMIElement,\n    );\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async commit(\n    callbackName: string,\n    checkTerminated: boolean = false,\n  ): Promise<string> {\n    this.clearScheduledCommit();\n\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.COMMIT_BEFORE_INIT,\n        this._error_codes.COMMIT_AFTER_TERM,\n      )\n    ) {\n      const result = await this.storeData(false);\n      if ((result.errorCode ?? 0) > 0) {\n        this.throwSCORMError(result.errorCode);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      this.apiLog(\n        callbackName,\n        \" Result: \" + returnValue,\n        LogLevelEnum.DEBUG,\n        \"HttpRequest\",\n      );\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns last error code\n   * @param {string} callbackName\n   * @return {string}\n   */\n  getLastError(callbackName: string): string {\n    const returnValue = String(this.lastErrorCode);\n\n    this.processListeners(callbackName);\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getErrorString(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getDiagnostic(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode, true);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Checks the LMS state and ensures it has been initialized.\n   *\n   * @param {boolean} checkTerminated\n   * @param {number} beforeInitError\n   * @param {number} afterTermError\n   * @return {boolean}\n   */\n  checkState(\n    checkTerminated: boolean,\n    beforeInitError: number,\n    afterTermError: number,\n  ): boolean {\n    if (this.isNotInitialized()) {\n      this.throwSCORMError(beforeInitError);\n      return false;\n    } else if (checkTerminated && this.isTerminated()) {\n      this.throwSCORMError(afterTermError);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {(string|number)} _errorNumber\n   * @param {boolean} _detail\n   * @return {string}\n   * @abstract\n   */\n  getLmsErrorMessageDetails(\n    _errorNumber: string | number,\n    _detail: boolean = false,\n  ): string {\n    throw new Error(\n      \"The getLmsErrorMessageDetails method has not been implemented\",\n    );\n  }\n\n  /**\n   * Gets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @return {string}\n   * @abstract\n   */\n  getCMIValue(_CMIElement: string): string {\n    throw new Error(\"The getCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Sets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @param {any} _value\n   * @return {string}\n   * @abstract\n   */\n  setCMIValue(_CMIElement: string, _value: any): string {\n    throw new Error(\"The setCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Shared API method to set a valid for a given element.\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  _commonSetCMIValue(\n    methodName: string,\n    scorm2004: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    return this._cmiDataService.setCMIValue(\n      this,\n      methodName,\n      scorm2004,\n      CMIElement,\n      value,\n      this.isInitialized(),\n    );\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @return {any}\n   */\n  _commonGetCMIValue(\n    methodName: string,\n    scorm2004: boolean,\n    CMIElement: string,\n  ): any {\n    return this._cmiDataService.getCMIValue(\n      this,\n      methodName,\n      scorm2004,\n      CMIElement,\n    );\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isInitialized(): boolean {\n    return this.currentState === global_constants.STATE_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_NOT_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isNotInitialized(): boolean {\n    return this.currentState === global_constants.STATE_NOT_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_TERMINATED\n   *\n   * @return {boolean}\n   */\n  isTerminated(): boolean {\n    return this.currentState === global_constants.STATE_TERMINATED;\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event.\n   * This method allows you to register a callback function that will be executed\n   * when the specified event occurs.\n   *\n   * @param {string} listenerName - The name of the event to listen for (e.g., \"Initialize\", \"Terminate\", \"GetValue\", \"SetValue\", \"Commit\")\n   * @param {function} callback - The function to execute when the event occurs. The callback will receive relevant event data.\n   * @example\n   * // Listen for Initialize events\n   * api.on(\"Initialize\", function() {\n   *   console.log(\"API has been initialized\");\n   * });\n   *\n   * // Listen for SetValue events\n   * api.on(\"SetValue\", function(element, value) {\n   *   console.log(\"Setting \" + element + \" to \" + value);\n   * });\n   */\n  on(listenerName: string, callback: Function) {\n    this._eventService.on(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener.\n   * This method removes a previously registered callback for an event.\n   * Both the event name and the callback reference must match what was used in the 'on' method.\n   *\n   * @param {string} listenerName - The name of the event to stop listening for\n   * @param {function} callback - The callback function to remove\n   * @example\n   * // Remove a specific listener\n   * const myCallback = function() { console.log(\"API initialized\"); };\n   * api.on(\"Initialize\", myCallback);\n   * // Later, when you want to remove it:\n   * api.off(\"Initialize\", myCallback);\n   */\n  off(listenerName: string, callback: Function) {\n    this._eventService.off(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event.\n   * This method removes all callbacks registered for the specified event.\n   *\n   * @param {string} listenerName - The name of the event to clear all listeners for\n   * @example\n   * // Remove all listeners for the Initialize event\n   * api.clear(\"Initialize\");\n   */\n  clear(listenerName: string) {\n    this._eventService.clear(listenerName);\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created for a specific event.\n   * This method is called internally when SCORM events occur to notify all registered listeners.\n   * It triggers all callback functions registered for the specified event.\n   *\n   * @param {string} functionName - The name of the function/event that occurred\n   * @param {string} CMIElement - Optional CMI element involved in the event\n   * @param {any} value - Optional value associated with the event\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this._eventService.processListeners(functionName, CMIElement, value);\n  }\n\n  /**\n   * Throws a SCORM error with the specified error number and optional message.\n   * This method sets the last error code and can be used to indicate that an operation failed.\n   * The error number should correspond to one of the standard SCORM error codes.\n   *\n   * @param {number} errorNumber - The SCORM error code to set\n   * @param {string} message - Optional custom error message to provide additional context\n   * @example\n   * // Throw a \"not initialized\" error\n   * this.throwSCORMError(301, \"The API must be initialized before calling GetValue\");\n   */\n  throwSCORMError(errorNumber: number, message?: string) {\n    this._errorHandlingService.throwSCORMError(errorNumber, message);\n  }\n\n  /**\n   * Clears the last SCORM error code when an operation succeeds.\n   * This method is typically called after successful API operations to reset the error state.\n   * It only clears the error if the success parameter is \"true\".\n   *\n   * @param {string} success - A string indicating whether the operation succeeded (\"true\" or \"false\")\n   * @example\n   * // Clear error after successful operation\n   * this.clearSCORMError(\"true\");\n   */\n  clearSCORMError(success: string) {\n    this._errorHandlingService.clearSCORMError(success);\n  }\n\n  /**\n   * Load the CMI from a flattened JSON object.\n   * This method populates the CMI data model from a flattened JSON structure\n   * where keys represent CMI element paths (e.g., \"cmi.core.student_id\").\n   *\n   * @param {StringKeyMap} json - The flattened JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a flattened JSON structure\n   * api.loadFromFlattenedJSON({\n   *   \"cmi.core.student_id\": \"12345\",\n   *   \"cmi.core.student_name\": \"John Doe\",\n   *   \"cmi.core.lesson_status\": \"incomplete\"\n   * });\n   */\n  loadFromFlattenedJSON(json: StringKeyMap, CMIElement?: string) {\n    if (!CMIElement) {\n      // by default, we start from a blank string because we're expecting each element to start with `cmi`\n      CMIElement = \"\";\n    }\n\n    this._serializationService.loadFromFlattenedJSON(\n      json,\n      CMIElement,\n      this.loadFromJSON.bind(this),\n      this.setCMIValue.bind(this),\n      this.isNotInitialized.bind(this),\n    );\n  }\n\n  /**\n   * Loads CMI data from a hierarchical JSON object.\n   * This method populates the CMI data model from a nested JSON structure\n   * that mirrors the CMI object hierarchy.\n   *\n   * @param {StringKeyMap} json - The hierarchical JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a hierarchical JSON structure\n   * api.loadFromJSON({\n   *   core: {\n   *     student_id: \"12345\",\n   *     student_name: \"John Doe\",\n   *     lesson_status: \"incomplete\"\n   *   },\n   *   objectives: [\n   *     { id: \"obj1\", score: { raw: 85 } }\n   *   ]\n   * });\n   */\n  loadFromJSON(json: StringKeyMap, CMIElement: string = \"\") {\n    this._serializationService.loadFromJSON(\n      json,\n      CMIElement,\n      this.setCMIValue.bind(this),\n      this.isNotInitialized.bind(this),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Render the CMI object to a JSON string for sending to an LMS.\n   * This method serializes the current CMI data model to a JSON string.\n   * The output format is controlled by the sendFullCommit setting.\n   *\n   * @return {string} A JSON string representation of the CMI data\n   * @example\n   * // Get the current CMI data as a JSON string\n   * const jsonString = api.renderCMIToJSONString();\n   * console.log(jsonString); // '{\"core\":{\"student_id\":\"12345\",...}}'\n   */\n  renderCMIToJSONString(): string {\n    return this._serializationService.renderCMIToJSONString(\n      this.cmi,\n      this.settings.sendFullCommit,\n    );\n  }\n\n  /**\n   * Returns a JavaScript object representing the current CMI data.\n   * This method creates a plain JavaScript object that mirrors the\n   * structure of the CMI data model, suitable for further processing.\n   *\n   * @return {StringKeyMap} A JavaScript object representing the CMI data\n   * @example\n   * // Get the current CMI data as a JavaScript object\n   * const cmiObject = api.renderCMIToJSONObject();\n   * console.log(cmiObject.core.student_id); // \"12345\"\n   */\n  renderCMIToJSONObject(): StringKeyMap {\n    return this._serializationService.renderCMIToJSONObject(\n      this.cmi,\n      this.settings.sendFullCommit,\n    );\n  }\n\n  /**\n   * Sends a request to the LMS with the specified parameters.\n   * This method handles communication with the LMS server, including\n   * formatting the request, handling the response, and triggering appropriate events.\n   *\n   * @param {string} url - The URL endpoint to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The data to send to the LMS\n   * @param {boolean} immediate - Whether to send the request immediately (true) or queue it (false)\n   * @return {Promise<ResultObject>} A promise that resolves with the result of the request\n   * @example\n   * // Send data to the LMS immediately\n   * const result = await api.processHttpRequest(\n   *   \"https://lms.example.com/scorm/commit\",\n   *   { method: \"POST\", params: { cmi: { core: { lesson_status: \"completed\" } } } },\n   *   true\n   * );\n   * console.log(result.errorCode === 0 ? \"Success\" : \"Failed\");\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n  ): Promise<ResultObject> {\n    return this._httpService.processHttpRequest(\n      url,\n      params,\n      immediate,\n      this.apiLog.bind(this),\n      this.processListeners.bind(this),\n    );\n  }\n\n  /**\n   * Schedules a commit operation to occur after a specified delay.\n   * This method is used to implement auto-commit functionality, where data\n   * is periodically sent to the LMS without requiring explicit commit calls.\n   *\n   * @param {number} when - The number of milliseconds to wait before committing\n   * @param {string} callback - The name of the commit event callback\n   * @example\n   * // Schedule a commit to happen in 60 seconds\n   * api.scheduleCommit(60000, \"commit\");\n   */\n  scheduleCommit(when: number, callback: string) {\n    if (!this._timeout) {\n      this._timeout = new ScheduledCommit(this, when, callback);\n      this.apiLog(\"scheduleCommit\", \"scheduled\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Clears and cancels any currently scheduled commits.\n   * This method is typically called when an explicit commit is performed\n   * or when the API is terminated, to prevent redundant commits.\n   *\n   * @example\n   * // Cancel any pending scheduled commits\n   * api.clearScheduledCommit();\n   */\n  clearScheduledCommit() {\n    if (this._timeout) {\n      this._timeout.cancel();\n      this._timeout = undefined;\n      this.apiLog(\"clearScheduledCommit\", \"cleared\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Checks if an object has a specific property, using multiple detection methods.\n   * This method performs a thorough check for property existence by:\n   * 1. Checking if it's an own property using Object.hasOwnProperty\n   * 2. Checking if it's defined in the prototype with a property descriptor\n   * 3. Checking if it's accessible via the 'in' operator (includes inherited properties)\n   *\n   * @param {StringKeyMap} StringKeyMap - The object to check for the property\n   * @param {string} attribute - The property name to look for\n   * @return {boolean} True if the property exists on the object or its prototype chain\n   * @private\n   *\n   * @example\n   * // Check for an own property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"name\"); // Returns true\n   *\n   * @example\n   * // Check for an inherited property\n   * class Parent { get type() { return \"parent\"; } }\n   * const child = Object.create(new Parent());\n   * this._checkObjectHasProperty(child, \"type\"); // Returns true\n   *\n   * @example\n   * // Check for a non-existent property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"age\"); // Returns false\n   */\n  private _checkObjectHasProperty(\n    StringKeyMap: StringKeyMap,\n    attribute: string,\n  ): boolean {\n    return (\n      Object.hasOwnProperty.call(StringKeyMap, attribute) ||\n      Object.getOwnPropertyDescriptor(\n        Object.getPrototypeOf(StringKeyMap),\n        attribute,\n      ) != null ||\n      attribute in StringKeyMap\n    );\n  }\n\n  /**\n   * Handles exceptions that occur when accessing CMI values.\n   * This method delegates to the ErrorHandlingService to process exceptions\n   * that occur during CMI data operations, ensuring consistent error handling\n   * throughout the API.\n   *\n   * @param {any} e - The exception that was thrown\n   * @param {string} returnValue - The default return value to use if an error occurs\n   * @return {string} Either the original returnValue or SCORM_FALSE if an error occurred\n   * @private\n   *\n   * @example\n   * // Handle a validation error when getting a CMI value\n   * try {\n   *   return this.getCMIValue(\"cmi.core.score.raw\");\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"\");\n   * }\n   *\n   * @example\n   * // Handle a general error when setting a CMI value\n   * try {\n   *   this.setCMIValue(\"cmi.core.lesson_status\", \"completed\");\n   *   return \"true\";\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"false\");\n   * }\n   */\n  private handleValueAccessException(e: any, returnValue: string): string {\n    return this._errorHandlingService.handleValueAccessException(\n      e,\n      returnValue,\n    );\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS.\n   * This method delegates to the SerializationService to create a properly\n   * formatted object containing the CMI data that needs to be sent to the LMS.\n   * The format and content of the commit object depend on whether this is a\n   * regular commit or a termination commit.\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @return {CommitObject|StringKeyMap|Array} The formatted commit object\n   * @protected\n   *\n   * @example\n   * // Create a regular commit object\n   * const regularCommit = this.getCommitObject(false);\n   * // Result might be: { cmi: { core: { lesson_status: \"incomplete\" } } }\n   *\n   * @example\n   * // Create a termination commit object (includes total_time)\n   * const terminationCommit = this.getCommitObject(true);\n   * // Result might be: { cmi: { core: { lesson_status: \"completed\", total_time: \"PT1H30M\" } } }\n   */\n  protected getCommitObject(\n    terminateCommit: boolean,\n  ): CommitObject | StringKeyMap | Array<any> {\n    return this._serializationService.getCommitObject(\n      terminateCommit,\n      this.settings.alwaysSendTotalTime,\n      this.settings.renderCommonCommitFields,\n      this.renderCommitObject.bind(this),\n      this.renderCommitCMI.bind(this),\n      this.apiLogLevel,\n    );\n  }\n}\n","/**\n * Base class for API cmi objects\n */\nexport abstract class BaseCMI {\n  jsonString? = false;\n  protected _initialized = false;\n  private _start_time: number | undefined;\n\n  /**\n   * Getter for _initialized\n   * @return {boolean}\n   */\n  get initialized(): boolean {\n    return this._initialized;\n  }\n\n  /**\n   * Getter for _start_time\n   * @return {number | undefined}\n   */\n  get start_time(): number | undefined {\n    return this._start_time;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize(): void {\n    this._initialized = true;\n  }\n\n  /**\n   * Called when the player should override the 'session_time' provided by\n   * the module\n   */\n  setStartTime(): void {\n    this._start_time = new Date().getTime();\n  }\n\n  abstract reset(): void;\n}\n\n/**\n * Base class for cmi root objects\n */\nexport abstract class BaseRootCMI extends BaseCMI {\n  abstract getCurrentTotalTime(): string;\n}\n","interface ErrorDescription {\n  basicMessage: string;\n  detailMessage: string;\n}\n\ninterface ErrorDescriptions {\n  [key: string]: ErrorDescription;\n}\n\ninterface ScormConstants {\n  cmi_children: string;\n  core_children: string;\n  score_children: string;\n  comments_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface AiccConstants extends ScormConstants {\n  student_demographics_children: string;\n  tries_children: string;\n  attempt_records_children: string;\n  paths_children: string;\n}\n\ninterface Scorm2004Constants {\n  cmi_children: string;\n  comments_children: string;\n  score_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  adl_data_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface GlobalConstants {\n  SCORM_TRUE: string;\n  SCORM_FALSE: string;\n  STATE_NOT_INITIALIZED: number;\n  STATE_INITIALIZED: number;\n  STATE_TERMINATED: number;\n}\n\nexport const global_constants: GlobalConstants = {\n  SCORM_TRUE: \"true\",\n  SCORM_FALSE: \"false\",\n  STATE_NOT_INITIALIZED: 0,\n  STATE_INITIALIZED: 1,\n  STATE_TERMINATED: 2,\n};\n\nexport const scorm12_constants: ScormConstants = {\n  // Children lists\n  cmi_children:\n    \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions\",\n  core_children:\n    \"student_id,student_name,lesson_location,credit,lesson_status,entry,score,total_time,lesson_mode,exit,session_time\",\n  score_children: \"raw,min,max\",\n  comments_children: \"content,location,time\",\n  objectives_children: \"id,score,status\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio,language,speed,text\",\n  interactions_children:\n    \"id,objectives,time,type,correct_responses,weighting,student_response,result,latency\",\n  error_descriptions: {\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage:\n        \"No specific error code exists to describe the error. Use LMSGetDiagnostic for more information\",\n    },\n    \"201\": {\n      basicMessage: \"Invalid argument error\",\n      detailMessage:\n        \"Indicates that an argument represents an invalid data model element or is otherwise incorrect.\",\n    },\n    \"202\": {\n      basicMessage: \"Element cannot have children\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_children\" for a data model element that does not support the \"_children\" suffix.',\n    },\n    \"203\": {\n      basicMessage: \"Element not an array - cannot have count\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_count\" for a data model element that does not support the \"_count\" suffix.',\n    },\n    \"301\": {\n      basicMessage: \"Not initialized\",\n      detailMessage:\n        \"Indicates that an API call was made before the call to lmsInitialize.\",\n    },\n    \"401\": {\n      basicMessage: \"Not implemented error\",\n      detailMessage:\n        \"The data model element indicated in a call to LMSGetValue or LMSSetValue is valid, but was not implemented by this LMS. SCORM 1.2 defines a set of data model elements as being optional for an LMS to implement.\",\n    },\n    \"402\": {\n      basicMessage: \"Invalid set value, element is a keyword\",\n      detailMessage:\n        'Indicates that LMSSetValue was called on a data model element that represents a keyword (elements that end in \"_children\" and \"_count\").',\n    },\n    \"403\": {\n      basicMessage: \"Element is read only\",\n      detailMessage:\n        \"LMSSetValue was called with a data model element that can only be read.\",\n    },\n    \"404\": {\n      basicMessage: \"Element is write only\",\n      detailMessage:\n        \"LMSGetValue was called on a data model element that can only be written to.\",\n    },\n    \"405\": {\n      basicMessage: \"Incorrect Data Type\",\n      detailMessage:\n        \"LMSSetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a LMSSetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\nexport const aicc_constants: AiccConstants = {\n  ...scorm12_constants,\n  ...{\n    cmi_children:\n      \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions,evaluation\",\n    student_preference_children:\n      \"audio,language,lesson_type,speed,text,text_color,text_location,text_size,video,windows\",\n    student_data_children:\n      \"attempt_number,tries,mastery_score,max_time_allowed,time_limit_action\",\n    student_demographics_children:\n      \"city,class,company,country,experience,familiar_name,instructor_name,title,native_language,state,street_address,telephone,years_experience\",\n    tries_children: \"time,status,score\",\n    attempt_records_children: \"score,lesson_status\",\n    paths_children: \"location_id,date,time,status,why_left,time_in_element\",\n  },\n};\n\nexport const scorm2004_constants: Scorm2004Constants = {\n  // Children lists\n  cmi_children:\n    \"_version,comments_from_learner,comments_from_lms,completion_status,credit,entry,exit,interactions,launch_data,learner_id,learner_name,learner_preference,location,max_time_allowed,mode,objectives,progress_measure,scaled_passing_score,score,session_time,success_status,suspend_data,time_limit_action,total_time\",\n  comments_children: \"comment,timestamp,location\",\n  score_children: \"max,raw,scaled,min\",\n  objectives_children:\n    \"progress_measure,completion_status,success_status,description,score,id\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children:\n    \"audio_level,audio_captioning,delivery_speed,language\",\n  interactions_children:\n    \"id,type,objectives,timestamp,correct_responses,weighting,learner_response,result,latency,description\",\n  adl_data_children: \"id,store\",\n  error_descriptions: {\n    \"0\": {\n      basicMessage: \"No Error\",\n      detailMessage: \"No error occurred, the previous API call was successful.\",\n    },\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage:\n        \"No specific error code exists to describe the error. Use GetDiagnostic for more information.\",\n    },\n    \"102\": {\n      basicMessage: \"General Initialization Failure\",\n      detailMessage: \"Call to Initialize failed for an unknown reason.\",\n    },\n    \"103\": {\n      basicMessage: \"Already Initialized\",\n      detailMessage:\n        \"Call to Initialize failed because Initialize was already called.\",\n    },\n    \"104\": {\n      basicMessage: \"Content Instance Terminated\",\n      detailMessage:\n        \"Call to Initialize failed because Terminate was already called.\",\n    },\n    \"111\": {\n      basicMessage: \"General Termination Failure\",\n      detailMessage: \"Call to Terminate failed for an unknown reason.\",\n    },\n    \"112\": {\n      basicMessage: \"Termination Before Initialization\",\n      detailMessage:\n        \"Call to Terminate failed because it was made before the call to Initialize.\",\n    },\n    \"113\": {\n      basicMessage: \"Termination After Termination\",\n      detailMessage:\n        \"Call to Terminate failed because Terminate was already called.\",\n    },\n    \"122\": {\n      basicMessage: \"Retrieve Data Before Initialization\",\n      detailMessage:\n        \"Call to GetValue failed because it was made before the call to Initialize.\",\n    },\n    \"123\": {\n      basicMessage: \"Retrieve Data After Termination\",\n      detailMessage:\n        \"Call to GetValue failed because it was made after the call to Terminate.\",\n    },\n    \"132\": {\n      basicMessage: \"Store Data Before Initialization\",\n      detailMessage:\n        \"Call to SetValue failed because it was made before the call to Initialize.\",\n    },\n    \"133\": {\n      basicMessage: \"Store Data After Termination\",\n      detailMessage:\n        \"Call to SetValue failed because it was made after the call to Terminate.\",\n    },\n    \"142\": {\n      basicMessage: \"Commit Before Initialization\",\n      detailMessage:\n        \"Call to Commit failed because it was made before the call to Initialize.\",\n    },\n    \"143\": {\n      basicMessage: \"Commit After Termination\",\n      detailMessage:\n        \"Call to Commit failed because it was made after the call to Terminate.\",\n    },\n    \"201\": {\n      basicMessage: \"General Argument Error\",\n      detailMessage:\n        \"An invalid argument was passed to an API method (usually indicates that Initialize, Commit or Terminate did not receive the expected empty string argument.\",\n    },\n    \"301\": {\n      basicMessage: \"General Get Failure\",\n      detailMessage:\n        \"Indicates a failed GetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"351\": {\n      basicMessage: \"General Set Failure\",\n      detailMessage:\n        \"Indicates a failed SetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"391\": {\n      basicMessage: \"General Commit Failure\",\n      detailMessage:\n        \"Indicates a failed Commit call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"401\": {\n      basicMessage: \"Undefined Data Model Element\",\n      detailMessage:\n        \"The data model element name passed to GetValue or SetValue is not a valid SCORM data model element.\",\n    },\n    \"402\": {\n      basicMessage: \"Unimplemented Data Model Element\",\n      detailMessage:\n        \"The data model element indicated in a call to GetValue or SetValue is valid, but was not implemented by this LMS. In SCORM 2004, this error would indicate an LMS that is not fully SCORM conformant.\",\n    },\n    \"403\": {\n      basicMessage: \"Data Model Element Value Not Initialized\",\n      detailMessage:\n        \"Attempt to read a data model element that has not been initialized by the LMS or through a SetValue call. This error condition is often reached during normal execution of a SCO.\",\n    },\n    \"404\": {\n      basicMessage: \"Data Model Element Is Read Only\",\n      detailMessage:\n        \"SetValue was called with a data model element that can only be read.\",\n    },\n    \"405\": {\n      basicMessage: \"Data Model Element Is Write Only\",\n      detailMessage:\n        \"GetValue was called on a data model element that can only be written to.\",\n    },\n    \"406\": {\n      basicMessage: \"Data Model Element Type Mismatch\",\n      detailMessage:\n        \"SetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Data Model Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a SetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\n","export const scorm12_regex = {\n  CMIString256: \"^.{0,255}$\",\n  CMIString4096: \"^.{0,4096}$\",\n  CMITime: \"^(?:[01]\\\\d|2[0123]):(?:[012345]\\\\d):(?:[012345]\\\\d)$\",\n  CMITimespan: \"^([0-9]{2,}):([0-9]{2}):([0-9]{2})(.[0-9]{1,2})?$\",\n\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{0,3})(.[0-9]*)?$\",\n\n  CMIIdentifier: \"^[\\\\u0021-\\\\u007E\\\\s]{0,255}$\",\n  CMIFeedback: \"^.{0,255}$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMIStatus: \"^(passed|completed|failed|incomplete|browsed)$\",\n  CMIStatus2: \"^(passed|completed|failed|incomplete|browsed|not attempted)$\",\n  CMIExit: \"^(time-out|suspend|logout|)$\",\n  CMIType:\n    \"^(true-false|choice|fill-in|matching|performance|sequencing|likert|numeric)$\",\n  CMIResult:\n    \"^(correct|wrong|unanticipated|neutral|([0-9]{0,3})?(\\\\.[0-9]*)?)$\",\n  NAVEvent: \"^(previous|continue)$\",\n  // Data ranges\n  score_range: \"0#100\",\n  audio_range: \"-1#100\",\n  speed_range: \"-100#100\",\n  weighting_range: \"-100#100\",\n  text_range: \"-1#1\",\n};\nexport const aicc_regex = {\n  ...scorm12_regex,\n  ...{\n    CMIIdentifier: \"^\\\\w{1,255}$\",\n  },\n};\nexport const scorm2004_regex = {\n  CMIString200: \"^[\\\\u0000-\\\\uFFFF]{0,200}$\",\n  CMIString250: \"^[\\\\u0000-\\\\uFFFF]{0,250}$\",\n  CMIString1000: \"^[\\\\u0000-\\\\uFFFF]{0,1000}$\",\n  CMIString4000: \"^[\\\\u0000-\\\\uFFFF]{0,4000}$\",\n  CMIString64000: \"^[\\\\u0000-\\\\uFFFF]{0,64000}$\",\n  CMILang: \"^([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?$|^$\",\n\n  CMILangString250:\n    \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,250}$)?$\",\n\n  CMILangcr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?}))(.*?)$\",\n\n  CMILangString250cr:\n    \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?})?(.{0,250})?)?$\",\n\n  CMILangString4000:\n    \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,4000}$)?$\",\n\n  CMITime:\n    \"^(19[7-9]{1}[0-9]{1}|20[0-2]{1}[0-9]{1}|203[0-8]{1})((-(0[1-9]{1}|1[0-2]{1}))((-(0[1-9]{1}|[1-2]{1}[0-9]{1}|3[0-1]{1}))(T([0-1]{1}[0-9]{1}|2[0-3]{1})((:[0-5]{1}[0-9]{1})((:[0-5]{1}[0-9]{1})((\\\\.[0-9]{1,2})((Z|([+|-]([0-1]{1}[0-9]{1}|2[0-3]{1})))(:[0-5]{1}[0-9]{1})?)?)?)?)?)?)?)?$\",\n  CMITimespan:\n    \"^P(?:([.,\\\\d]+)Y)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)W)?(?:([.,\\\\d]+)D)?(?:T?(?:([.,\\\\d]+)H)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)S)?)?$\",\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{1,5})(\\\\.[0-9]{1,18})?$\",\n  CMIIdentifier: \"^\\\\S{1,250}[a-zA-Z0-9]$\",\n  CMIShortIdentifier: \"^[\\\\w\\\\.\\\\-\\\\_]{1,250}$\",\n  CMILongIdentifier:\n    \"^(?:(?!urn:)\\\\S{1,4000}|urn:[A-Za-z0-9-]{1,31}:\\\\S{1,4000}|.{1,4000})$\",\n  // need to re-examine this\n  CMIFeedback: \"^.*$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  CMIIndexStore: \".N(\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMICStatus: \"^(completed|incomplete|not attempted|unknown)$\",\n  CMISStatus: \"^(passed|failed|unknown)$\",\n  CMIExit: \"^(time-out|suspend|logout|normal)$\",\n  CMIType:\n    \"^(true-false|choice|fill-in|long-fill-in|matching|performance|sequencing|likert|numeric|other)$\",\n  CMIResult:\n    \"^(correct|incorrect|unanticipated|neutral|-?([0-9]{1,4})(\\\\.[0-9]{1,18})?)$\",\n  NAVEvent:\n    \"^(previous|continue|exit|exitAll|abandon|abandonAll|suspendAll|_none_|(\\\\{target=(?<choice_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?choice|(\\\\{target=(?<jump_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?jump)$\",\n\n  NAVBoolean: \"^(unknown|true|false$)\",\n  NAVTarget: \"^{target=\\\\S{0,}[a-zA-Z0-9-_]+}$\",\n  // Data ranges\n  scaled_range: \"-1#1\",\n  audio_range: \"0#*\",\n  speed_range: \"0#*\",\n  text_range: \"-1#1\",\n  progress_range: \"0#1\",\n};\n","import { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"./base_cmi\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { validationService } from \"../../services/ValidationService\";\n\n/**\n * Base class for cmi *.score objects\n */\nexport class CMIScore extends BaseCMI {\n  private readonly __children: string;\n  private readonly __score_range: string | false;\n  private readonly __invalid_error_code: number;\n  private readonly __invalid_type_code: number;\n  private readonly __invalid_range_code: number;\n  private readonly __decimal_regex: string;\n  private readonly __error_class: typeof BaseScormValidationError;\n  protected _raw = \"\";\n  protected _min = \"\";\n  protected _max: string;\n\n  /**\n   * Constructor for *.score\n   * @param {\n   *     score_children: string,\n   *     score_range: string,\n   *     max: string,\n   *     invalidErrorCode: number,\n   *     invalidTypeCode: number,\n   *     invalidRangeCode: number,\n   *     decimalRegex: string,\n   *     errorClass: typeof BaseScormValidationError\n   * } params\n   */\n  constructor(params: {\n    score_children?: string;\n    score_range?: string;\n    max?: string;\n    invalidErrorCode?: number;\n    invalidTypeCode?: number;\n    invalidRangeCode?: number;\n    decimalRegex?: string;\n    errorClass: typeof BaseScormValidationError;\n  }) {\n    super();\n\n    this.__children = params.score_children || scorm12_constants.score_children;\n    this.__score_range = !params.score_range\n      ? false\n      : scorm12_regex.score_range;\n    this._max = params.max || params.max === \"\" ? params.max : \"100\";\n    this.__invalid_error_code =\n      params.invalidErrorCode || scorm12_errors.INVALID_SET_VALUE;\n    this.__invalid_type_code =\n      params.invalidTypeCode || scorm12_errors.TYPE_MISMATCH;\n    this.__invalid_range_code =\n      params.invalidRangeCode || scorm12_errors.VALUE_OUT_OF_RANGE;\n    this.__decimal_regex = params.decimalRegex || scorm12_regex.CMIDecimal;\n    this.__error_class = params.errorClass;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this.__error_class(this.__invalid_error_code);\n  }\n\n  /**\n   * Getter for _raw\n   * @return {string}\n   */\n  get raw(): string {\n    return this._raw;\n  }\n\n  /**\n   * Setter for _raw\n   * @param {string} raw\n   */\n  set raw(raw: string) {\n    if (\n      validationService.validateScore(\n        raw,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._raw = raw;\n    }\n  }\n\n  /**\n   * Getter for _min\n   * @return {string}\n   */\n  get min(): string {\n    return this._min;\n  }\n\n  /**\n   * Setter for _min\n   * @param {string} min\n   */\n  set min(min: string) {\n    if (\n      validationService.validateScore(\n        min,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._min = min;\n    }\n  }\n\n  /**\n   * Getter for _max\n   * @return {string}\n   */\n  get max(): string {\n    return this._max;\n  }\n\n  /**\n   * Setter for _max\n   * @param {string} max\n   */\n  set max(max: string) {\n    if (\n      validationService.validateScore(\n        max,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._max = max;\n    }\n  }\n\n  /**\n   * toJSON for *.score\n   * @return {\n   *    {\n   *      min: string,\n   *      max: string,\n   *      raw: string\n   *    }\n   *    }\n   */\n  toJSON(): {\n    min: string;\n    max: string;\n    raw: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseScormValidationError } from \"../../exceptions\";\nimport { memoize } from \"../../utilities\";\n\n/**\n * Check if the value matches the proper format. If not, throw proper error code.\n *\n * @param {string} value\n * @param {string} regexPattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @param {boolean} [allowEmptyString]\n * @return {boolean}\n */\nexport const checkValidFormat = memoize(\n  (\n    value: string,\n    regexPattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n    allowEmptyString?: boolean,\n  ): boolean => {\n    if (typeof value !== \"string\") {\n      return false;\n    }\n    const formatRegex = new RegExp(regexPattern);\n    const matches = value.match(formatRegex);\n    if (allowEmptyString && value === \"\") {\n      return true;\n    }\n    if (value === undefined || !matches || matches[0] === \"\") {\n      throw new errorClass(errorCode);\n    }\n    return true;\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (value, regexPattern, errorCode, _errorClass, allowEmptyString) =>\n    `${value}:${regexPattern}:${errorCode}:${allowEmptyString || false}`\n);\n\n/**\n * Check if the value matches the proper range. If not, throw proper error code.\n *\n * @param {any} value\n * @param {string} rangePattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @return {boolean}\n */\nexport const checkValidRange = memoize(\n  (\n    value: any,\n    rangePattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean => {\n    const ranges = rangePattern.split(\"#\");\n    value = value * 1.0;\n    if (value >= ranges[0]) {\n      if (ranges[1] === \"*\" || value <= ranges[1]) {\n        return true;\n      } else {\n        throw new errorClass(errorCode);\n      }\n    } else {\n      throw new errorClass(errorCode);\n    }\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (value, rangePattern, errorCode, _errorClass) =>\n    `${value}:${rangePattern}:${errorCode}`\n);\n","import { BaseCMI } from \"./base_cmi\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Base class for cmi *.n objects\n */\nexport class CMIArray extends BaseCMI {\n  private readonly _errorCode: number;\n  private readonly _errorClass: typeof BaseScormValidationError;\n  private readonly __children: string;\n  public childArray: any[];\n\n  /**\n   * Constructor cmi *.n arrays\n   * @param {object} params\n   */\n  constructor(params: {\n    children: string;\n    errorCode?: number;\n    errorClass?: typeof BaseScormValidationError;\n  }) {\n    super();\n    this.__children = params.children;\n    this._errorCode = params.errorCode || scorm12_errors.GENERAL;\n    this._errorClass = params.errorClass || BaseScormValidationError;\n    this.childArray = [];\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(wipe: boolean = false): void {\n    this._initialized = false;\n    if (wipe) {\n      this.childArray = [];\n    } else {\n      // Reset all children\n      for (let i = 0; i < this.childArray.length; i++) {\n        this.childArray[i].reset();\n      }\n    }\n  }\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this._errorClass(this._errorCode);\n  }\n\n  /**\n   * Getter for _count\n   * @return {number}\n   */\n  get _count(): number {\n    return this.childArray.length;\n  }\n\n  /**\n   * Setter for _count. Just throws an error.\n   * @param {number} _count\n   */\n  set _count(_count: number) {\n    throw new this._errorClass(this._errorCode);\n  }\n\n  /**\n   * toJSON for *.n arrays\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result: { [key: string]: any } = {};\n    for (let i = 0; i < this.childArray.length; i++) {\n      result[i + \"\"] = this.childArray[i];\n    }\n    delete this.jsonString;\n    return result;\n  }\n}\n","/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n};\n","type APIError = {\n  errorCode: number;\n  errorMessage: string;\n  detailedMessage: string;\n};\n\nexport class BaseScormValidationError extends Error {\n  constructor(errorCode: number) {\n    super(errorCode.toString());\n    this._errorCode = errorCode;\n    this.name = \"ScormValidationError\";\n  }\n\n  private readonly _errorCode: number;\n\n  /**\n   * Getter for _errorCode\n   * @return {number}\n   */\n  get errorCode(): number {\n    return this._errorCode;\n  }\n}\n\n/**\n * Base Validation Exception\n */\nexport class ValidationError\n  extends BaseScormValidationError\n  implements APIError\n{\n  /**\n   * Constructor to take in an error message and code\n   * @param {number} errorCode\n   * @param {string} errorMessage\n   * @param {string} detailedMessage\n   */\n  constructor(\n    errorCode: number,\n    errorMessage: string,\n    detailedMessage?: string,\n  ) {\n    super(errorCode);\n    this.message = errorMessage;\n    this._errorMessage = errorMessage;\n    if (detailedMessage) {\n      this._detailedMessage = detailedMessage;\n    }\n  }\n\n  private readonly _errorMessage: string;\n  private readonly _detailedMessage: string = \"\";\n\n  /**\n   * Getter for _errorMessage\n   * @return {string}\n   */\n  get errorMessage(): string {\n    return this._errorMessage;\n  }\n\n  /**\n   * Getter for _detailedMessage\n   * @return {string}\n   */\n  get detailedMessage(): string {\n    return this._detailedMessage;\n  }\n}\n","export type ErrorCode = {\n  [key: string]: number;\n};\n\nexport const global_errors: ErrorCode = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nexport const scorm12_errors: ErrorCode = {\n  ...global_errors,\n  RETRIEVE_BEFORE_INIT: 301,\n  STORE_BEFORE_INIT: 301,\n  COMMIT_BEFORE_INIT: 301,\n  ARGUMENT_ERROR: 201,\n  CHILDREN_ERROR: 202,\n  COUNT_ERROR: 203,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 401,\n  VALUE_NOT_INITIALIZED: 301,\n  INVALID_SET_VALUE: 402,\n  READ_ONLY_ELEMENT: 403,\n  WRITE_ONLY_ELEMENT: 404,\n  TYPE_MISMATCH: 405,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n\nexport const scorm2004_errors: ErrorCode = {\n  ...global_errors,\n  INITIALIZATION_FAILED: 102,\n  INITIALIZED: 103,\n  TERMINATED: 104,\n  TERMINATION_FAILURE: 111,\n  TERMINATION_BEFORE_INIT: 112,\n  MULTIPLE_TERMINATIONS: 113,\n  RETRIEVE_BEFORE_INIT: 122,\n  RETRIEVE_AFTER_TERM: 123,\n  STORE_BEFORE_INIT: 132,\n  STORE_AFTER_TERM: 133,\n  COMMIT_BEFORE_INIT: 142,\n  COMMIT_AFTER_TERM: 143,\n  ARGUMENT_ERROR: 201,\n  GENERAL_GET_FAILURE: 301,\n  GENERAL_SET_FAILURE: 351,\n  GENERAL_COMMIT_FAILURE: 391,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 402,\n  VALUE_NOT_INITIALIZED: 403,\n  READ_ONLY_ELEMENT: 404,\n  WRITE_ONLY_ELEMENT: 405,\n  TYPE_MISMATCH: 406,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n","import { BaseScormValidationError } from \"../exceptions\";\nimport { checkValidFormat, checkValidRange } from \"../cmi/common/validation\";\nimport {\n  check12ValidFormat,\n  check12ValidRange,\n} from \"../cmi/scorm12/validation\";\nimport { scorm12_regex } from \"../constants/regex\";\nimport { scorm12_errors } from \"../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../exceptions/scorm12_exceptions\";\n\n/**\n * Service for validating CMI data model properties\n */\nexport class ValidationService {\n  /**\n   * Validates a score property (raw, min, max)\n   *\n   * @param {string} value - The value to validate\n   * @param {string} decimalRegex - The regex pattern for decimal validation\n   * @param {string | false} scoreRange - The range pattern for score validation, or false if no range validation is needed\n   * @param {number} invalidTypeCode - The error code for invalid type\n   * @param {number} invalidRangeCode - The error code for invalid range\n   * @param {typeof BaseScormValidationError} errorClass - The error class to use for validation errors\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScore(\n    value: string,\n    decimalRegex: string,\n    scoreRange: string | false,\n    invalidTypeCode: number,\n    invalidRangeCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean {\n    return (\n      checkValidFormat(value, decimalRegex, invalidTypeCode, errorClass) &&\n      (!scoreRange ||\n        checkValidRange(value, scoreRange, invalidRangeCode, errorClass))\n    );\n    // This line should never be reached due to exceptions being thrown\n  }\n\n  /**\n   * Validates a SCORM 1.2 audio property\n   *\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Audio(value: string): boolean {\n    return (\n      check12ValidFormat(value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(value, scorm12_regex.audio_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 language property\n   *\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Language(value: string): boolean {\n    return check12ValidFormat(value, scorm12_regex.CMIString256);\n  }\n\n  /**\n   * Validates a SCORM 1.2 speed property\n   *\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Speed(value: string): boolean {\n    return (\n      check12ValidFormat(value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(value, scorm12_regex.speed_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 text property\n   *\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Text(value: string): boolean {\n    return (\n      check12ValidFormat(value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(value, scorm12_regex.text_range)\n    );\n  }\n\n  /**\n   * Validates if a property is read-only\n   *\n   * @param {boolean} initialized - Whether the object is initialized\n   * @throws {BaseScormValidationError} - Throws an error if the object is initialized\n   */\n  validateReadOnly(initialized: boolean): void {\n    if (initialized) {\n      throw new Scorm12ValidationError(scorm12_errors.READ_ONLY_ELEMENT);\n    }\n  }\n}\n\n// Export a singleton instance of the ValidationService\nexport const validationService = new ValidationService();\n","/**\n * Constants for time conversion calculations.\n * These are used throughout the codebase for converting between different time formats.\n */\nexport const SECONDS_PER_SECOND = 1.0;\nexport const SECONDS_PER_MINUTE = 60;\nexport const SECONDS_PER_HOUR = 60 * SECONDS_PER_MINUTE;\nexport const SECONDS_PER_DAY = 24 * SECONDS_PER_HOUR;\n\ntype Designation = {\n  [key: string]: number;\n};\n\n/**\n * A record with string keys and unknown values.\n * This is a more type-safe alternative to using `any`.\n */\nexport type StringKeyMap = Record<string, unknown>;\n\nconst designations: Designation = {\n  D: SECONDS_PER_DAY,\n  H: SECONDS_PER_HOUR,\n  M: SECONDS_PER_MINUTE,\n  S: SECONDS_PER_SECOND,\n};\n\n/**\n * Converts a number of seconds to a formatted time string in HH:MM:SS format.\n * This function handles decimal seconds and ensures proper formatting with leading zeros.\n *\n * @param {number|null} totalSeconds - The total number of seconds to convert. If null or negative, returns \"00:00:00\".\n * @return {string} A formatted time string in HH:MM:SS format, with up to 2 decimal places for seconds if applicable.\n *\n * @example\n * // Returns \"01:30:45\"\n * getSecondsAsHHMMSS(5445);\n *\n * @example\n * // Returns \"00:00:30.5\"\n * getSecondsAsHHMMSS(30.5);\n *\n * @example\n * // Returns \"00:00:00\"\n * getSecondsAsHHMMSS(null);\n */\nexport const getSecondsAsHHMMSS = memoize(\n  (totalSeconds: number | null): string => {\n    // SCORM spec does not deal with negative durations, give zero back\n    if (!totalSeconds || totalSeconds <= 0) {\n      return \"00:00:00\";\n    }\n\n    const hours = Math.floor(totalSeconds / SECONDS_PER_HOUR);\n    const dateObj = new Date(totalSeconds * 1000);\n    const minutes = dateObj.getUTCMinutes();\n    // make sure we add any possible decimal value\n    const seconds = dateObj.getSeconds();\n    const ms = totalSeconds % 1.0;\n    let msStr = \"\";\n\n    if (countDecimals(ms) > 0) {\n      if (countDecimals(ms) > 2) {\n        msStr = ms.toFixed(2);\n      } else {\n        msStr = String(ms);\n      }\n\n      msStr = \".\" + msStr.split(\".\")[1];\n    }\n\n    return (\n      (hours + \":\" + minutes + \":\" + seconds).replace(/\\b\\d\\b/g, \"0$&\") + msStr\n    );\n  },\n);\n\n/**\n * Converts a number of seconds to an ISO 8601 duration string (e.g., \"PT1H30M45S\").\n * This function handles the complexity of formatting according to the ISO 8601 standard,\n * including the proper placement of the \"T\" separator for time components.\n *\n * @param {number|null} seconds - The number of seconds to convert. If null or negative, returns \"PT0S\".\n * @return {string} An ISO 8601 formatted duration string.\n *\n * @example\n * // Returns \"PT1H30M45S\" (1 hour, 30 minutes, 45 seconds)\n * getSecondsAsISODuration(5445);\n *\n * @example\n * // Returns \"PT30.5S\" (30.5 seconds)\n * getSecondsAsISODuration(30.5);\n *\n * @example\n * // Returns \"P1DT1H\" (1 day, 1 hour)\n * getSecondsAsISODuration(90000);\n *\n * @example\n * // Returns \"PT0S\" (0 seconds)\n * getSecondsAsISODuration(null);\n */\nexport const getSecondsAsISODuration = memoize(\n  (seconds: number | null): string => {\n    // SCORM spec does not deal with negative durations, give zero back\n    if (!seconds || seconds <= 0) {\n      return \"PT0S\";\n    }\n\n    let duration = \"P\";\n    let remainder = seconds;\n\n    // Convert to array of entries and use functional methods\n    const designationEntries = Object.entries(designations);\n\n    // Process each time designation\n    designationEntries.forEach(([designationsKey, current_seconds]) => {\n      let value = Math.floor(remainder / current_seconds);\n      remainder = remainder % current_seconds;\n\n      // Limit decimal places\n      if (countDecimals(remainder) > 2) {\n        remainder = Number(Number(remainder).toFixed(2));\n      }\n\n      // If we have anything left in the remainder, and we're currently adding\n      // seconds to the duration, go ahead and add the decimal to the seconds\n      if (designationsKey === \"S\" && remainder > 0) {\n        value += remainder;\n      }\n\n      if (value) {\n        // Add the 'T' separator for time components if needed\n        const needsTimeSeparator =\n          (duration.indexOf(\"D\") > 0 ||\n            [\"H\", \"M\", \"S\"].includes(designationsKey)) &&\n          duration.indexOf(\"T\") === -1;\n\n        if (needsTimeSeparator) {\n          duration += \"T\";\n        }\n\n        duration += `${value}${designationsKey}`;\n      }\n    });\n\n    return duration;\n  },\n);\n\n/**\n * Converts a time string in HH:MM:SS format to the equivalent number of seconds.\n * This function is flexible and can handle various input types, converting them to strings as needed.\n *\n * @param {string|number|boolean|null} timeString - The time string to convert, typically in HH:MM:SS format.\n *                                                 If not a string, it will be converted to one.\n *                                                 If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} timeRegex - The regular expression used to validate the time string format.\n *                                    If a string is provided, it will be converted to a RegExp.\n * @return {number} The total number of seconds represented by the time string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getTimeAsSeconds(\"01:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getTimeAsSeconds(\"invalid\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 30 (converts number to string \"30\" then parses as 0:0:30)\n * getTimeAsSeconds(30, /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport const getTimeAsSeconds = memoize(\n  (\n    timeString: string | number | boolean | null,\n    timeRegex: RegExp | string,\n  ): number => {\n    if (typeof timeString === \"number\" || typeof timeString === \"boolean\") {\n      timeString = String(timeString);\n    }\n    if (typeof timeRegex === \"string\") {\n      timeRegex = new RegExp(timeRegex);\n    }\n    if (!timeString || !timeString?.match?.(timeRegex)) {\n      return 0;\n    }\n\n    const parts = timeString.split(\":\");\n    const hours = Number(parts[0]);\n    const minutes = Number(parts[1]);\n    const seconds = Number(parts[2]);\n    return hours * 3600 + minutes * 60 + seconds;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (timeString, timeRegex) => {\n    const timeStr =\n      typeof timeString === \"string\" ? timeString : String(timeString ?? \"\");\n    const regexStr =\n      typeof timeRegex === \"string\" ? timeRegex : (timeRegex?.toString() ?? \"\");\n    return `${timeStr}:${regexStr}`;\n  },\n);\n\n/**\n * Converts an ISO 8601 duration string (e.g., \"PT1H30M45S\") to the equivalent number of seconds.\n * This function parses the duration string using a regular expression to extract years, days,\n * hours, minutes, and seconds components.\n *\n * @param {string|null} duration - The ISO 8601 duration string to convert.\n *                                If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n *                                       The regex should have capture groups for years, days, hours, minutes, and seconds.\n * @return {number} The total number of seconds represented by the duration string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getDurationAsSeconds(\"PT1H30M45S\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 90000 (1 day, 1 hour)\n * getDurationAsSeconds(\"P1DT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getDurationAsSeconds(\"invalid\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport const getDurationAsSeconds = memoize(\n  (duration: string | null, durationRegex: RegExp | string): number => {\n    if (typeof durationRegex === \"string\") {\n      durationRegex = new RegExp(durationRegex);\n    }\n\n    if (!duration || !duration?.match?.(durationRegex)) {\n      return 0;\n    }\n\n    const [, years, _, , days, hours, minutes, seconds] =\n      new RegExp(durationRegex).exec?.(duration) ?? [];\n    let result = 0.0;\n    result += Number(seconds) || 0.0;\n    result += Number(minutes) * 60.0 || 0.0;\n    result += Number(hours) * 3600.0 || 0.0;\n    result += Number(days) * (60 * 60 * 24.0) || 0.0;\n    result += Number(years) * (60 * 60 * 24 * 365.0) || 0.0;\n    return result;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (duration, durationRegex) => {\n    const durationStr = duration ?? \"\";\n    const regexStr =\n      typeof durationRegex === \"string\"\n        ? durationRegex\n        : (durationRegex?.toString() ?? \"\");\n    return `${durationStr}:${regexStr}`;\n  },\n);\n\n/**\n * Adds together two ISO 8601 duration strings and returns the result as a new ISO 8601 duration string.\n * This function works by converting both durations to seconds, adding them together, and then\n * converting the result back to an ISO 8601 duration string.\n *\n * @param {string} first - The first ISO 8601 duration string.\n * @param {string} second - The second ISO 8601 duration string.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n * @return {string} A new ISO 8601 duration string representing the sum of the two input durations.\n *\n * @example\n * // Returns \"PT2H\" (1 hour + 1 hour = 2 hours)\n * addTwoDurations(\"PT1H\", \"PT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"PT1H30M\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addTwoDurations(\"PT1H\", \"PT30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"P1DT1H30M\" (1 day + 1 hour and 30 minutes = 1 day, 1 hour, and 30 minutes)\n * addTwoDurations(\"P1D\", \"PT1H30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport function addTwoDurations(\n  first: string,\n  second: string,\n  durationRegex: RegExp | string,\n): string {\n  const regex: RegExp =\n    typeof durationRegex === \"string\"\n      ? new RegExp(durationRegex)\n      : durationRegex;\n  return getSecondsAsISODuration(\n    getDurationAsSeconds(first, regex) + getDurationAsSeconds(second, regex),\n  );\n}\n\n/**\n * Adds together two time strings in HH:MM:SS format and returns the result as a new time string.\n * This function works by converting both time strings to seconds, adding them together, and then\n * converting the result back to an HH:MM:SS format.\n *\n * @param {string} first - The first time string in HH:MM:SS format.\n * @param {string} second - The second time string in HH:MM:SS format.\n * @param {RegExp|string} timeRegex - The regular expression used to validate and parse the time strings.\n *                                   If a string is provided, it will be converted to a RegExp.\n * @return {string} A new time string in HH:MM:SS format representing the sum of the two input times.\n *\n * @example\n * // Returns \"02:00:00\" (1 hour + 1 hour = 2 hours)\n * addHHMMSSTimeStrings(\"01:00:00\", \"01:00:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:00\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:45\" (1 hour + 30 minutes and 45 seconds = 1 hour, 30 minutes, and 45 seconds)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport function addHHMMSSTimeStrings(\n  first: string,\n  second: string,\n  timeRegex: RegExp | string,\n): string {\n  if (typeof timeRegex === \"string\") {\n    timeRegex = new RegExp(timeRegex);\n  }\n  return getSecondsAsHHMMSS(\n    getTimeAsSeconds(first, timeRegex) + getTimeAsSeconds(second, timeRegex),\n  );\n}\n\n/**\n * Flattens a nested JSON object into a flat object with dot notation for nested properties.\n * This function recursively traverses the object and creates new keys using dot notation\n * for nested objects and bracket notation for arrays.\n *\n * @param {StringKeyMap} data - The nested object to flatten.\n * @return {StringKeyMap} A flattened object where nested properties are represented with dot notation.\n *\n * @example\n * // Returns { \"a\": 1, \"b.c\": 2, \"b.d\": 3, \"e[0]\": 4, \"e[1]\": 5 }\n * flatten({\n *   a: 1,\n *   b: { c: 2, d: 3 },\n *   e: [4, 5]\n * });\n *\n * @example\n * // Returns { \"\": [] } for an empty array\n * flatten([]);\n *\n * @example\n * // Returns { \"\": {} } for an empty object\n * flatten({});\n */\nexport function flatten(data: StringKeyMap): StringKeyMap {\n  const result: StringKeyMap = {};\n\n  /**\n   * Recurse through the object\n   * @param {*} cur\n   * @param {*} prop\n   */\n  function recurse(cur: any, prop: any) {\n    if (Object(cur) !== cur) {\n      result[prop] = cur;\n    } else if (Array.isArray(cur)) {\n      // Use forEach instead of for loop\n      cur.forEach((item, i) => {\n        recurse(item, `${prop}[${i}]`);\n      });\n\n      if (cur.length === 0) result[prop] = [];\n    } else {\n      const keys = Object.keys(cur).filter((p) =>\n        Object.prototype.hasOwnProperty.call(cur, p),\n      );\n\n      const isEmpty = keys.length === 0;\n\n      // Use forEach instead of for...in loop\n      keys.forEach((p) => {\n        recurse(cur[p], prop ? `${prop}.${p}` : p);\n      });\n\n      if (isEmpty && prop) result[prop] = {};\n    }\n  }\n\n  recurse(data, \"\");\n  return result;\n}\n\n/**\n * Converts a flattened object back into a nested object structure.\n * This function is the inverse of `flatten()`. It parses dot notation and bracket notation\n * in property names to recreate the original nested structure.\n *\n * @param {StringKeyMap} data - The flattened object to unflatten.\n * @return {object} A nested object recreated from the flattened structure.\n *\n * @example\n * // Returns { a: 1, b: { c: 2, d: 3 }, e: [4, 5] }\n * unflatten({\n *   \"a\": 1,\n *   \"b.c\": 2,\n *   \"b.d\": 3,\n *   \"e[0]\": 4,\n *   \"e[1]\": 5\n * });\n *\n * @example\n * // Handles array indices correctly\n * unflatten({\n *   \"users[0].name\": \"John\",\n *   \"users[0].email\": \"john@example.com\",\n *   \"users[1].name\": \"Jane\",\n *   \"users[1].email\": \"jane@example.com\"\n * });\n * // Returns:\n * // {\n * //   users: [\n * //     { name: \"John\", email: \"john@example.com\" },\n * //     { name: \"Jane\", email: \"jane@example.com\" }\n * //   ]\n * // }\n */\nexport function unflatten(data: StringKeyMap): object {\n  \"use strict\";\n\n  if (Object(data) !== data || Array.isArray(data)) return data;\n  const result: StringKeyMap = {};\n\n  // Regex pattern for parsing property paths\n  const pattern = /\\.?([^.[\\]]+)|\\[(\\d+)]/g;\n\n  // Get all own properties and process them\n  Object.keys(data)\n    .filter((p) => Object.prototype.hasOwnProperty.call(data, p))\n    .forEach((p) => {\n      let cur = result;\n      let prop = \"\";\n\n      // Create a new regex instance for each property to reset lastIndex\n      const regex = new RegExp(pattern);\n\n      // Process all matches in the property path\n      Array.from(\n        { length: p.match(new RegExp(pattern, \"g\"))?.length ?? 0 },\n        () => regex.exec(p),\n      ).forEach((m) => {\n        if (m) {\n          // Create array or object as needed\n          cur = (cur[prop] ??\n            (cur[prop] = m[2] ? [] : ({} as StringKeyMap))) as StringKeyMap;\n          prop = m[2] || m[1];\n        }\n      });\n\n      cur[prop] = data[p];\n    });\n\n  return (result[\"\"] ?? result) as object;\n}\n\n/**\n * Counts the number of decimal places in a number.\n * This function handles both integer and floating-point numbers.\n *\n * @param {number} num - The number to analyze.\n * @return {number} The number of decimal places. Returns 0 for integers or if the number doesn't have a decimal point.\n *\n * @example\n * // Returns 0\n * countDecimals(42);\n *\n * @example\n * // Returns 2\n * countDecimals(3.14);\n *\n * @example\n * // Returns 5\n * countDecimals(1.23456);\n */\nexport function countDecimals(num: number): number {\n  if (Math.floor(num) === num || String(num)?.indexOf?.(\".\") < 0) return 0;\n  const parts = num.toString().split(\".\")?.[1];\n  return parts?.length ?? 0;\n}\n\n/**\n * Formats SCORM messages for consistent and readable logging.\n * This function pads the function name and CMI element to create aligned log messages\n * that are easier to read in log files or console output.\n *\n * @param {string} functionName - The name of the function that generated the message.\n * @param {string} message - The message content to be logged.\n * @param {string} [CMIElement] - Optional. The CMI element related to the message.\n * @return {string} A formatted message string with consistent padding.\n *\n * @example\n * // Returns \"initialize          : Successfully initialized\"\n * formatMessage(\"initialize\", \"Successfully initialized\");\n *\n * @example\n * // Returns \"getValue            : cmi.core.student_id                                             : 12345\"\n * formatMessage(\"getValue\", \"12345\", \"cmi.core.student_id\");\n *\n * @example\n * // Returns \"setValue            : cmi.core.lesson_status                                          : completed\"\n * formatMessage(\"setValue\", \"completed\", \"cmi.core.lesson_status\");\n */\nexport function formatMessage(\n  functionName: string,\n  message: string,\n  CMIElement?: string,\n): string {\n  const baseLength = 20;\n\n  // Use string padding instead of loops\n  const paddedFunction = functionName.padEnd(baseLength);\n  let messageString = `${paddedFunction}: `;\n\n  if (CMIElement) {\n    const CMIElementBaseLength = 70;\n    // Add CMIElement and pad to the required length\n    messageString += CMIElement;\n    messageString = messageString.padEnd(CMIElementBaseLength);\n  }\n\n  // Add the message (or empty string if null/undefined)\n  messageString += message ?? \"\";\n\n  return messageString;\n}\n\n/**\n * Checks if a string contains a specific pattern using regular expression matching.\n * This function is a wrapper around JavaScript's String.match() method that handles\n * null/undefined values gracefully.\n *\n * @param {string} str - The string to search within. If null or undefined, returns false.\n * @param {string} tester - The pattern to search for. Can be a regular expression pattern.\n * @return {boolean} True if the pattern is found in the string, false otherwise.\n *\n * @example\n * // Returns true\n * stringMatches(\"Hello, world!\", \"world\");\n *\n * @example\n * // Returns true\n * stringMatches(\"The quick brown fox\", \"\\\\w+\\\\s+\\\\w+\");\n *\n * @example\n * // Returns false\n * stringMatches(\"Hello, world!\", \"universe\");\n *\n * @example\n * // Returns false (handles null gracefully)\n * stringMatches(null, \"test\");\n */\nexport function stringMatches(str: string, tester: string): boolean {\n  return str?.match(tester) !== null;\n}\n\n/**\n * Creates a memoized (cached) version of a function for performance optimization.\n * This function caches the results of previous calls with the same arguments,\n * avoiding redundant calculations for repeated calls with the same input.\n *\n * @template T - The type of the function to memoize\n * @param {T} fn - The function to memoize\n * @param {Function} [keyFn] - Optional function to generate a custom cache key.\n *                           Useful for functions with complex arguments that can't be serialized.\n * @return {T} A memoized version of the input function with the same signature\n *\n * @example\n * // Basic usage with a simple function\n * const memoizedAdd = memoize((a, b) => {\n *   console.log('Calculating...');\n *   return a + b;\n * });\n *\n * memoizedAdd(1, 2); // Logs \"Calculating...\" and returns 3\n * memoizedAdd(1, 2); // Returns 3 without logging (uses cached result)\n *\n * @example\n * // Using a custom key function for objects that can't be serialized\n * const memoizedProcessUser = memoize(\n *   (user) => {\n *     console.log('Processing user...');\n *     return { ...user, processed: true };\n *   },\n *   (user) => user.id // Use user.id as the cache key\n * );\n *\n * memoizedProcessUser({ id: 123, name: 'John' }); // Logs and processes\n * memoizedProcessUser({ id: 123, name: 'John' }); // Uses cached result\n */\nexport function memoize<T extends (...args: any[]) => any>(\n  fn: T,\n  keyFn?: (...args: Parameters<T>) => string,\n): T {\n  const cache = new Map<string, ReturnType<T>>();\n\n  return ((...args: Parameters<T>): ReturnType<T> => {\n    const key = keyFn ? keyFn(...args) : JSON.stringify(args);\n\n    return cache.has(key)\n      ? (cache.get(key) as ReturnType<T>)\n      : (() => {\n          const result = fn(...args);\n          cache.set(key, result);\n          return result;\n        })();\n  }) as T;\n}\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidFormat(\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    value,\n    regexPattern,\n    scorm12_errors.TYPE_MISMATCH,\n    Scorm12ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} value\n * @param {string} rangePattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidRange(\n  value: any,\n  rangePattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  if (!allowEmptyString && value === \"\") {\n    throw new Scorm12ValidationError(scorm12_errors.VALUE_OUT_OF_RANGE);\n  }\n\n  return checkValidRange(\n    value,\n    rangePattern,\n    scorm12_errors.VALUE_OUT_OF_RANGE,\n    Scorm12ValidationError,\n  );\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","import { ValidationError } from \"../exceptions\";\nimport { scorm2004_constants } from \"../constants/api_constants\";\n\nconst scorm2004_errors = scorm2004_constants.error_descriptions;\n\n/**\n * SCORM 2004 Validation Error\n */\nexport class Scorm2004ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {number} errorCode\n   */\n  constructor(errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm2004_errors, String(errorCode))) {\n      super(\n        errorCode,\n        scorm2004_errors[String(errorCode)].basicMessage,\n        scorm2004_errors[String(errorCode)].detailMessage,\n      );\n    } else {\n      super(\n        101,\n        scorm2004_errors[\"101\"].basicMessage,\n        scorm2004_errors[\"101\"].detailMessage,\n      );\n    }\n  }\n}\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check2004ValidFormat(\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    value,\n    regexPattern,\n    scorm2004_errors.TYPE_MISMATCH,\n    Scorm2004ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} value\n * @param {string} rangePattern\n * @return {boolean}\n */\nexport function check2004ValidRange(\n  value: string,\n  rangePattern: string,\n): boolean {\n  return checkValidRange(\n    value,\n    rangePattern,\n    scorm2004_errors.VALUE_OUT_OF_RANGE,\n    Scorm2004ValidationError,\n  );\n}\n","/**\n * Class for SCORM 2004's cmi.learner_preference object\n */\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\n\nexport class CMILearnerPreference extends BaseCMI {\n  private __children = scorm2004_constants.student_preference_children;\n  private _audio_level = \"1\";\n  private _language = \"\";\n  private _delivery_speed = \"1\";\n  private _audio_captioning = \"0\";\n\n  /**\n   * Constructor for cmi.learner_preference\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm2004ValidationError(scorm2004_errors.READ_ONLY_ELEMENT);\n  }\n\n  /**\n   * Getter for _audio_level\n   * @return {string}\n   */\n  get audio_level(): string {\n    return this._audio_level;\n  }\n\n  /**\n   * Setter for _audio_level\n   * @param {string} audio_level\n   */\n  set audio_level(audio_level: string) {\n    if (\n      check2004ValidFormat(audio_level, scorm2004_regex.CMIDecimal) &&\n      check2004ValidRange(audio_level, scorm2004_regex.audio_range)\n    ) {\n      this._audio_level = audio_level;\n    }\n  }\n\n  /**\n   * Getter for _language\n   * @return {string}\n   */\n  get language(): string {\n    return this._language;\n  }\n\n  /**\n   * Setter for _language\n   * @param {string} language\n   */\n  set language(language: string) {\n    if (check2004ValidFormat(language, scorm2004_regex.CMILang)) {\n      this._language = language;\n    }\n  }\n\n  /**\n   * Getter for _delivery_speed\n   * @return {string}\n   */\n  get delivery_speed(): string {\n    return this._delivery_speed;\n  }\n\n  /**\n   * Setter for _delivery_speed\n   * @param {string} delivery_speed\n   */\n  set delivery_speed(delivery_speed: string) {\n    if (\n      check2004ValidFormat(delivery_speed, scorm2004_regex.CMIDecimal) &&\n      check2004ValidRange(delivery_speed, scorm2004_regex.speed_range)\n    ) {\n      this._delivery_speed = delivery_speed;\n    }\n  }\n\n  /**\n   * Getter for _audio_captioning\n   * @return {string}\n   */\n  get audio_captioning(): string {\n    return this._audio_captioning;\n  }\n\n  /**\n   * Setter for _audio_captioning\n   * @param {string} audio_captioning\n   */\n  set audio_captioning(audio_captioning: string) {\n    if (\n      check2004ValidFormat(audio_captioning, scorm2004_regex.CMISInteger) &&\n      check2004ValidRange(audio_captioning, scorm2004_regex.text_range)\n    ) {\n      this._audio_captioning = audio_captioning;\n    }\n  }\n\n  /**\n   * toJSON for cmi.learner_preference\n   *\n   * @return {\n   *    {\n   *      audio_level: string,\n   *      language: string,\n   *      delivery_speed: string,\n   *      audio_captioning: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    audio_level: string;\n    language: string;\n    delivery_speed: string;\n    audio_captioning: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio_level: this.audio_level,\n      language: this.language,\n      delivery_speed: this.delivery_speed,\n      audio_captioning: this.audio_captioning,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { scorm2004_regex } from \"./regex\";\n\nexport const LearnerResponses: Responses = {\n  \"true-false\": {\n    format: \"^true$|^false$\",\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  choice: {\n    format: scorm2004_regex.CMILongIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    unique: true,\n  },\n  \"fill-in\": {\n    format: scorm2004_regex.CMILangString250,\n    max: 10,\n    delimiter: \"[,]\",\n    unique: false,\n  },\n  \"long-fill-in\": {\n    format: scorm2004_regex.CMILangString4000,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  matching: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n  },\n  performance: {\n    format: \"^$|\" + scorm2004_regex.CMIShortIdentifier,\n    format2:\n      scorm2004_regex.CMIDecimal + \"|^$|\" + scorm2004_regex.CMIShortIdentifier,\n    max: 250,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n  },\n  sequencing: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    unique: false,\n  },\n  likert: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  numeric: {\n    format: scorm2004_regex.CMIDecimal,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  other: {\n    format: scorm2004_regex.CMIString4000,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n};\nexport const CorrectResponses: Responses = {\n  \"true-false\": {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: \"^true$|^false$\",\n    limit: 1,\n  },\n  choice: {\n    max: 36,\n    delimiter: \"[,]\",\n    unique: true,\n    duplicate: false,\n    format: scorm2004_regex.CMILongIdentifier,\n  },\n  \"fill-in\": {\n    max: 10,\n    delimiter: \"[,]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMILangString250cr,\n  },\n  \"long-fill-in\": {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: true,\n    format: scorm2004_regex.CMILangString4000,\n  },\n  matching: {\n    max: 36,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n  },\n  performance: {\n    max: 250,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    delimiter3: \"[:]\",\n    unique: false,\n    duplicate: false,\n    format: \"^$|\" + scorm2004_regex.CMIShortIdentifier,\n    format2:\n      scorm2004_regex.CMIDecimal + \"|^$|\" + scorm2004_regex.CMIShortIdentifier,\n  },\n  sequencing: {\n    max: 36,\n    delimiter: \"[,]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n  },\n  likert: {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    limit: 1,\n  },\n  numeric: {\n    max: 2,\n    delimiter: \"[:]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIDecimal,\n    limit: 1,\n  },\n  other: {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIString4000,\n    limit: 1,\n  },\n};\n\nexport type ResponseType = {\n  format: string;\n  max: number;\n  delimiter: string;\n  unique: boolean;\n  duplicate?: boolean;\n  format2?: string;\n  delimiter2?: string;\n  limit?: number;\n  delimiter3?: string;\n};\n\nexport type Responses = {\n  [key: string]: ResponseType;\n};\n","/**\n * Class representing SCORM 2004's `cmi.interactions` object\n */\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { CMIArray } from \"../common/array\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { LearnerResponses } from \"../../constants/response_constants\";\n\nexport class CMIInteractions extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives` Array\n   */\n  constructor() {\n    super({\n      children: scorm2004_constants.interactions_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.interaction.n object\n */\n\nexport class CMIInteractionsObject extends BaseCMI {\n  private _id = \"\";\n  private _type = \"\";\n  private _timestamp = \"\";\n  private _weighting = \"\";\n  private _learner_response = \"\";\n  private _result = \"\";\n  private _latency = \"\";\n  private _description = \"\";\n\n  /**\n   * Constructor for cmi.interaction.n\n   */\n  constructor() {\n    super();\n    this.objectives = new CMIArray({\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  public objectives: CMIArray;\n  public correct_responses: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._id = \"\";\n    this._type = \"\";\n    this._timestamp = \"\";\n    this._weighting = \"\";\n    this._learner_response = \"\";\n    this._result = \"\";\n    this._latency = \"\";\n    this._description = \"\";\n    this.objectives = new CMIArray({\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _type\n   * @return {string}\n   */\n  get type(): string {\n    return this._type;\n  }\n\n  /**\n   * Setter for _type\n   * @param {string} type\n   */\n  set type(type: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (check2004ValidFormat(type, scorm2004_regex.CMIType)) {\n        this._type = type;\n      }\n    }\n  }\n\n  /**\n   * Getter for _timestamp\n   * @return {string}\n   */\n  get timestamp(): string {\n    return this._timestamp;\n  }\n\n  /**\n   * Setter for _timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (check2004ValidFormat(timestamp, scorm2004_regex.CMITime)) {\n        this._timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * Getter for _weighting\n   * @return {string}\n   */\n  get weighting(): string {\n    return this._weighting;\n  }\n\n  /**\n   * Setter for _weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (check2004ValidFormat(weighting, scorm2004_regex.CMIDecimal)) {\n        this._weighting = weighting;\n      }\n    }\n  }\n\n  /**\n   * Getter for _learner_response\n   * @return {string}\n   */\n  get learner_response(): string {\n    return this._learner_response;\n  }\n\n  /**\n   * Setter for _learner_response. Does type validation to make sure response\n   * matches SCORM 2004's spec\n   * @param {string} learner_response\n   */\n  set learner_response(learner_response: string) {\n    if (this.initialized && (this._type === \"\" || this._id === \"\")) {\n      throw new Scorm2004ValidationError(\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      let nodes = [];\n      const response_type = LearnerResponses[this.type];\n\n      if (response_type) {\n        if (response_type?.delimiter) {\n          nodes = learner_response.split(response_type.delimiter);\n        } else {\n          nodes[0] = learner_response;\n        }\n\n        if (nodes.length > 0 && nodes.length <= response_type.max) {\n          const formatRegex = new RegExp(response_type.format);\n\n          for (let i = 0; i < nodes.length; i++) {\n            if (response_type?.delimiter2) {\n              const values = nodes[i].split(response_type.delimiter2);\n\n              if (values.length === 2) {\n                if (!values[0].match(formatRegex)) {\n                  throw new Scorm2004ValidationError(\n                    scorm2004_errors.TYPE_MISMATCH,\n                  );\n                } else {\n                  if (\n                    !response_type.format2 ||\n                    !values[1].match(new RegExp(response_type.format2))\n                  ) {\n                    throw new Scorm2004ValidationError(\n                      scorm2004_errors.TYPE_MISMATCH,\n                    );\n                  }\n                }\n              } else {\n                throw new Scorm2004ValidationError(\n                  scorm2004_errors.TYPE_MISMATCH,\n                );\n              }\n            } else {\n              if (!nodes[i].match(formatRegex)) {\n                throw new Scorm2004ValidationError(\n                  scorm2004_errors.TYPE_MISMATCH,\n                );\n              } else {\n                if (nodes[i] !== \"\" && response_type.unique) {\n                  for (let j = 0; j < i; j++) {\n                    if (nodes[i] === nodes[j]) {\n                      throw new Scorm2004ValidationError(\n                        scorm2004_errors.TYPE_MISMATCH,\n                      );\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          throw new Scorm2004ValidationError(\n            scorm2004_errors.GENERAL_SET_FAILURE,\n          );\n        }\n\n        this._learner_response = learner_response;\n      } else {\n        throw new Scorm2004ValidationError(scorm2004_errors.TYPE_MISMATCH);\n      }\n    }\n  }\n\n  /**\n   * Getter for _result\n   * @return {string}\n   */\n  get result(): string {\n    return this._result;\n  }\n\n  /**\n   * Setter for _result\n   * @param {string} result\n   */\n  set result(result: string) {\n    if (check2004ValidFormat(result, scorm2004_regex.CMIResult)) {\n      this._result = result;\n    }\n  }\n\n  /**\n   * Getter for _latency\n   * @return {string}\n   */\n  get latency(): string {\n    return this._latency;\n  }\n\n  /**\n   * Setter for _latency\n   * @param {string} latency\n   */\n  set latency(latency: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (check2004ValidFormat(latency, scorm2004_regex.CMITimespan)) {\n        this._latency = latency;\n      }\n    }\n  }\n\n  /**\n   * Getter for _description\n   * @return {string}\n   */\n  get description(): string {\n    return this._description;\n  }\n\n  /**\n   * Setter for _description\n   * @param {string} description\n   */\n  set description(description: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          description,\n          scorm2004_regex.CMILangString250,\n          true,\n        )\n      ) {\n        this._description = description;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      type: string,\n   *      objectives: CMIArray,\n   *      timestamp: string,\n   *      correct_responses: CMIArray,\n   *      weighting: string,\n   *      learner_response: string,\n   *      result: string,\n   *      latency: string,\n   *      description: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    type: string;\n    objectives: CMIArray;\n    timestamp: string;\n    correct_responses: CMIArray;\n    weighting: string;\n    learner_response: string;\n    result: string;\n    latency: string;\n    description: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      type: this.type,\n      objectives: this.objectives,\n      timestamp: this.timestamp,\n      weighting: this.weighting,\n      learner_response: this.learner_response,\n      result: this.result,\n      latency: this.latency,\n      description: this.description,\n      correct_responses: this.correct_responses,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.objectives.n object\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  private _id = \"\";\n\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._id = \"\";\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.correct_responses.n object\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  private _pattern = \"\";\n\n  /**\n   * Constructor for cmi.interactions.n.correct_responses.n\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._pattern = \"\";\n  }\n\n  /**\n   * Getter for _pattern\n   * @return {string}\n   */\n  get pattern(): string {\n    return this._pattern;\n  }\n\n  /**\n   * Setter for _pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern: string) {\n    if (check2004ValidFormat(pattern, scorm2004_regex.CMIFeedback)) {\n      this._pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON cmi.interactions.n.correct_responses.n object\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    pattern: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      pattern: this.pattern,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","/**\n * Class for SCORM 2004's cmi *.score object\n */\nimport { CMIScore } from \"../common/score\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\n\nexport class Scorm2004CMIScore extends CMIScore {\n  private _scaled = \"\";\n\n  /**\n   * Constructor for cmi *.score\n   */\n  constructor() {\n    super({\n      score_children: scorm2004_constants.score_children,\n      max: \"\",\n      invalidErrorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      invalidTypeCode: scorm2004_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm2004_errors.VALUE_OUT_OF_RANGE,\n      decimalRegex: scorm2004_regex.CMIDecimal,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n    this._scaled = \"\";\n    this._raw = \"\";\n    this._min = \"\";\n    this._max = \"\";\n  }\n\n  /**\n   * Getter for _scaled\n   * @return {string}\n   */\n  get scaled(): string {\n    return this._scaled;\n  }\n\n  /**\n   * Setter for _scaled\n   * @param {string} scaled\n   */\n  set scaled(scaled: string) {\n    if (\n      check2004ValidFormat(scaled, scorm2004_regex.CMIDecimal) &&\n      check2004ValidRange(scaled, scorm2004_regex.scaled_range)\n    ) {\n      this._scaled = scaled;\n    }\n  }\n\n  /**\n   * toJSON for cmi *.score\n   *\n   * @return {\n   *    {\n   *      scaled: string,\n   *      raw: string,\n   *      min: string,\n   *      max: string\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    scaled: string;\n    raw: string;\n    min: string;\n    max: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      scaled: this.scaled,\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_lms object\n * @extends CMIArray\n */\nexport class CMICommentsFromLMS extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_lms Array\n   */\n  constructor() {\n    super({\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner object\n */\n\nexport class CMICommentsFromLearner extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_learner Array\n   */\n  constructor() {\n    super({\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner.n and cmi.comments_from_lms.n object\n */\n\nexport class CMICommentsObject extends BaseCMI {\n  private _comment = \"\";\n  private _location = \"\";\n  private _timestamp = \"\";\n  private readonly _readOnlyAfterInit: boolean;\n\n  /**\n   * Constructor for cmi.comments_from_learner.n and cmi.comments_from_lms.n\n   * @param {boolean} readOnlyAfterInit\n   */\n  constructor(readOnlyAfterInit: boolean = false) {\n    super();\n    this._comment = \"\";\n    this._location = \"\";\n    this._timestamp = \"\";\n    this._readOnlyAfterInit = readOnlyAfterInit;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _comment\n   * @return {string}\n   */\n  get comment(): string {\n    return this._comment;\n  }\n\n  /**\n   * Setter for _comment\n   * @param {string} comment\n   */\n  set comment(comment: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(scorm2004_errors.READ_ONLY_ELEMENT);\n    } else {\n      if (\n        check2004ValidFormat(comment, scorm2004_regex.CMILangString4000, true)\n      ) {\n        this._comment = comment;\n      }\n    }\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(scorm2004_errors.READ_ONLY_ELEMENT);\n    } else {\n      if (check2004ValidFormat(location, scorm2004_regex.CMIString250)) {\n        this._location = location;\n      }\n    }\n  }\n\n  /**\n   * Getter for _timestamp\n   * @return {string}\n   */\n  get timestamp(): string {\n    return this._timestamp;\n  }\n\n  /**\n   * Setter for _timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(scorm2004_errors.READ_ONLY_ELEMENT);\n    } else {\n      if (check2004ValidFormat(timestamp, scorm2004_regex.CMITime)) {\n        this._timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.comments_from_learner.n object\n   * @return {\n   *    {\n   *      comment: string,\n   *      location: string,\n   *      timestamp: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    comment: string;\n    location: string;\n    timestamp: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      comment: this.comment,\n      location: this.location,\n      timestamp: this.timestamp,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { Scorm2004CMIScore } from \"./score\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\n\n/**\n * Class representing SCORM 2004's `cmi.objectives` object\n * @extends CMIArray\n */\nexport class CMIObjectives extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives` Array\n   */\n  constructor() {\n    super({\n      children: scorm2004_constants.objectives_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n\n  /**\n   * Find an objective by its ID\n   */\n  public findObjectiveById(id: string): CMIObjectivesObject | undefined {\n    return this.childArray.find((objective) => objective.id === id);\n  }\n\n  /**\n   * Find objective by its index\n   */\n  public findObjectiveByIndex(index: number): CMIObjectivesObject {\n    return this.childArray[index];\n  }\n\n  /**\n   * Set an objective at the given index\n   */\n  public setObjectiveByIndex(index: number, objective: CMIObjectivesObject) {\n    this.childArray[index] = objective;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.objectives.n object\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  private _id = \"\";\n  private _success_status = \"unknown\";\n  private _completion_status = \"unknown\";\n  private _progress_measure = \"\";\n  private _description = \"\";\n\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super();\n    this.score = new Scorm2004CMIScore();\n  }\n\n  override reset() {\n    this._initialized = false;\n  }\n\n  public score: Scorm2004CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this._success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (check2004ValidFormat(success_status, scorm2004_regex.CMISStatus)) {\n        this._success_status = success_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this._completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (check2004ValidFormat(completion_status, scorm2004_regex.CMICStatus)) {\n        this._completion_status = completion_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this._progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(progress_measure, scorm2004_regex.CMIDecimal) &&\n        check2004ValidRange(progress_measure, scorm2004_regex.progress_range)\n      ) {\n        this._progress_measure = progress_measure;\n      }\n    }\n  }\n\n  /**\n   * Getter for _description\n   * @return {string}\n   */\n  get description(): string {\n    return this._description;\n  }\n\n  /**\n   * Setter for _description\n   * @param {string} description\n   */\n  set description(description: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          description,\n          scorm2004_regex.CMILangString250,\n          true,\n        )\n      ) {\n        this._description = description;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      success_status: string,\n   *      completion_status: string,\n   *      progress_measure: string,\n   *      description: string,\n   *      score: Scorm2004CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    success_status: string;\n    completion_status: string;\n    progress_measure: string;\n    description: string;\n    score: Scorm2004CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      success_status: this.success_status,\n      completion_status: this.completion_status,\n      progress_measure: this.progress_measure,\n      description: this.description,\n      score: this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","/**\n * Class representing metadata properties for SCORM 2004's cmi object\n */\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing metadata properties for SCORM 2004's cmi object\n */\nexport class CMIMetadata extends BaseCMI {\n  private __version = \"1.0\";\n  private __children = scorm2004_constants.cmi_children;\n\n  /**\n   * Constructor for CMIMetadata\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   */\n  get _version(): string {\n    return this.__version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version: string) {\n    throw new Scorm2004ValidationError(scorm2004_errors.READ_ONLY_ELEMENT);\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {number} _children\n   */\n  set _children(_children: number) {\n    throw new Scorm2004ValidationError(scorm2004_errors.READ_ONLY_ELEMENT);\n  }\n\n  /**\n   * Reset the metadata properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // No need to reset __version and __children as they are constants\n  }\n}","/**\n * Class representing learner properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing learner properties for SCORM 2004's cmi object\n */\nexport class CMILearner extends BaseCMI {\n  private _learner_id = \"\";\n  private _learner_name = \"\";\n\n  /**\n   * Constructor for CMILearner\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for _learner_id\n   * @return {string}\n   */\n  get learner_id(): string {\n    return this._learner_id;\n  }\n\n  /**\n   * Setter for _learner_id. Can only be called before initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(scorm2004_errors.READ_ONLY_ELEMENT);\n    } else {\n      this._learner_id = learner_id;\n    }\n  }\n\n  /**\n   * Getter for _learner_name\n   * @return {string}\n   */\n  get learner_name(): string {\n    return this._learner_name;\n  }\n\n  /**\n   * Setter for _learner_name. Can only be called before initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(scorm2004_errors.READ_ONLY_ELEMENT);\n    } else {\n      this._learner_name = learner_name;\n    }\n  }\n\n  /**\n   * Reset the learner properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset learner_id and learner_name as they are read-only after initialization\n  }\n}","/**\n * Class representing status properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\n\n/**\n * Class representing status properties for SCORM 2004's cmi object\n */\nexport class CMIStatus extends BaseCMI {\n  private _completion_status = \"unknown\";\n  private _success_status = \"unknown\";\n  private _progress_measure = \"\";\n\n  /**\n   * Constructor for CMIStatus\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this._completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    if (check2004ValidFormat(completion_status, scorm2004_regex.CMICStatus)) {\n      this._completion_status = completion_status;\n    }\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this._success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    if (check2004ValidFormat(success_status, scorm2004_regex.CMISStatus)) {\n      this._success_status = success_status;\n    }\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this._progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    if (\n      check2004ValidFormat(progress_measure, scorm2004_regex.CMIDecimal) &&\n      check2004ValidRange(progress_measure, scorm2004_regex.progress_range)\n    ) {\n      this._progress_measure = progress_measure;\n    }\n  }\n\n  /**\n   * Reset the status properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._completion_status = \"incomplete\";\n    this._success_status = \"unknown\";\n    this._progress_measure = \"\";\n  }\n}","/**\n * Class representing session properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\nimport * as Util from \"../../utilities\";\n\n/**\n * Class representing session properties for SCORM 2004's cmi object\n */\nexport class CMISession extends BaseCMI {\n  private _entry = \"\";\n  private _exit = \"\";\n  private _session_time = \"PT0H0M0S\";\n  private _total_time = \"\";\n\n  /**\n   * Constructor for CMISession\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this._entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(scorm2004_errors.READ_ONLY_ELEMENT);\n    } else {\n      this._entry = entry;\n    }\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    if (!this.jsonString) {\n      throw new Scorm2004ValidationError(scorm2004_errors.WRITE_ONLY_ELEMENT);\n    }\n    return this._exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    if (check2004ValidFormat(exit, scorm2004_regex.CMIExit, true)) {\n      this._exit = exit;\n    }\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    if (!this.jsonString) {\n      throw new Scorm2004ValidationError(scorm2004_errors.WRITE_ONLY_ELEMENT);\n    }\n    return this._session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    if (check2004ValidFormat(session_time, scorm2004_regex.CMITimespan)) {\n      this._session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this._total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(scorm2004_errors.READ_ONLY_ELEMENT);\n    } else {\n      this._total_time = total_time;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime(): string {\n    let sessionTime = this._session_time;\n    const startTime = this.start_time;\n\n    if (typeof startTime !== \"undefined\" && startTime !== null) {\n      const seconds = new Date().getTime() - startTime;\n      sessionTime = Util.getSecondsAsISODuration(seconds / 1000);\n    }\n\n    return Util.addTwoDurations(\n      this._total_time,\n      sessionTime,\n      scorm2004_regex.CMITimespan,\n    );\n  }\n\n  /**\n   * Reset the session properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._entry = \"\";\n    this._exit = \"\";\n    this._session_time = \"PT0H0M0S\";\n    // Don't reset total_time as it's read-only after initialization\n  }\n}","/**\n * Class representing content properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\n\n/**\n * Class representing content properties for SCORM 2004's cmi object\n */\nexport class CMIContent extends BaseCMI {\n  private _location = \"\";\n  private _launch_data = \"\";\n  private _suspend_data = \"\";\n\n  /**\n   * Constructor for CMIContent\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (check2004ValidFormat(location, scorm2004_regex.CMIString1000)) {\n      this._location = location;\n    }\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this._launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(scorm2004_errors.READ_ONLY_ELEMENT);\n    } else {\n      this._launch_data = launch_data;\n    }\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this._suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (\n      check2004ValidFormat(suspend_data, scorm2004_regex.CMIString64000, true)\n    ) {\n      this._suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Reset the content properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._location = \"\";\n    // Don't reset launch_data as it's read-only after initialization\n    this._suspend_data = \"\";\n  }\n}","/**\n * Class representing settings properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing settings properties for SCORM 2004's cmi object\n */\nexport class CMISettings extends BaseCMI {\n  private _credit = \"credit\";\n  private _mode = \"normal\";\n  private _time_limit_action = \"continue,no message\";\n  private _max_time_allowed = \"\";\n\n  /**\n   * Constructor for CMISettings\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this._credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(scorm2004_errors.READ_ONLY_ELEMENT);\n    } else {\n      this._credit = credit;\n    }\n  }\n\n  /**\n   * Getter for _mode\n   * @return {string}\n   */\n  get mode(): string {\n    return this._mode;\n  }\n\n  /**\n   * Setter for _mode. Can only be called before initialization.\n   * @param {string} mode\n   */\n  set mode(mode: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(scorm2004_errors.READ_ONLY_ELEMENT);\n    } else {\n      this._mode = mode;\n    }\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this._time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(scorm2004_errors.READ_ONLY_ELEMENT);\n    } else {\n      this._time_limit_action = time_limit_action;\n    }\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this._max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(scorm2004_errors.READ_ONLY_ELEMENT);\n    } else {\n      this._max_time_allowed = max_time_allowed;\n    }\n  }\n\n  /**\n   * Reset the settings properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset these properties as they are read-only after initialization\n  }\n}","/**\n * Class representing threshold properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing threshold properties for SCORM 2004's cmi object\n */\nexport class CMIThresholds extends BaseCMI {\n  private _scaled_passing_score = \"\";\n  private _completion_threshold = \"\";\n\n  /**\n   * Constructor for CMIThresholds\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for _scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score(): string {\n    return this._scaled_passing_score;\n  }\n\n  /**\n   * Setter for _scaled_passing_score. Can only be called before initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(scorm2004_errors.READ_ONLY_ELEMENT);\n    } else {\n      this._scaled_passing_score = scaled_passing_score;\n    }\n  }\n\n  /**\n   * Getter for _completion_threshold\n   * @return {string}\n   */\n  get completion_threshold(): string {\n    return this._completion_threshold;\n  }\n\n  /**\n   * Setter for _completion_threshold. Can only be called before initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(scorm2004_errors.READ_ONLY_ELEMENT);\n    } else {\n      this._completion_threshold = completion_threshold;\n    }\n  }\n\n  /**\n   * Reset the threshold properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset these properties as they are read-only after initialization\n  }\n}","import { BaseRootCMI } from \"../common/base_cmi\";\nimport { CMILearnerPreference } from \"./learner_preference\";\nimport { CMIInteractions } from \"./interactions\";\nimport { Scorm2004CMIScore } from \"./score\";\nimport { CMICommentsFromLearner, CMICommentsFromLMS } from \"./comments\";\nimport { CMIObjectives } from \"./objectives\";\nimport { CMIMetadata } from \"./metadata\";\nimport { CMILearner } from \"./learner\";\nimport { CMIStatus } from \"./status\";\nimport { CMISession } from \"./session\";\nimport { CMIContent } from \"./content\";\nimport { CMISettings } from \"./settings\";\nimport { CMIThresholds } from \"./thresholds\";\n\n/**\n * Class representing cmi object for SCORM 2004\n */\nexport class CMI extends BaseRootCMI {\n  /**\n   * Constructor for the SCORM 2004 cmi object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean = false) {\n    super();\n    this.metadata = new CMIMetadata();\n    this.learner = new CMILearner();\n    this.status = new CMIStatus();\n    this.session = new CMISession();\n    this.content = new CMIContent();\n    this.settings = new CMISettings();\n    this.thresholds = new CMIThresholds();\n    this.learner_preference = new CMILearnerPreference();\n    this.score = new Scorm2004CMIScore();\n    this.comments_from_learner = new CMICommentsFromLearner();\n    this.comments_from_lms = new CMICommentsFromLMS();\n    this.interactions = new CMIInteractions();\n    this.objectives = new CMIObjectives();\n    if (initialized) this.initialize();\n  }\n\n  // New component classes\n  private metadata: CMIMetadata;\n  private learner: CMILearner;\n  private status: CMIStatus;\n  private session: CMISession;\n  private content: CMIContent;\n  private settings: CMISettings;\n  private thresholds: CMIThresholds;\n\n  // Original complex objects\n  public learner_preference: CMILearnerPreference;\n  public score: Scorm2004CMIScore;\n  public comments_from_learner: CMICommentsFromLearner;\n  public comments_from_lms: CMICommentsFromLMS;\n  public interactions: CMIInteractions;\n  public objectives: CMIObjectives;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    // Initialize new component classes\n    this.metadata?.initialize();\n    this.learner?.initialize();\n    this.status?.initialize();\n    this.session?.initialize();\n    this.content?.initialize();\n    this.settings?.initialize();\n    this.thresholds?.initialize();\n\n    // Initialize original complex objects\n    this.learner_preference?.initialize();\n    this.score?.initialize();\n    this.comments_from_learner?.initialize();\n    this.comments_from_lms?.initialize();\n    this.interactions?.initialize();\n    this.objectives?.initialize();\n  }\n\n  /**\n   * Called when API is moving to another SCO\n   */\n  reset() {\n    this._initialized = false;\n\n    // Reset new component classes\n    this.metadata?.reset();\n    this.learner?.reset();\n    this.status?.reset();\n    this.session?.reset();\n    this.content?.reset();\n    this.settings?.reset();\n    this.thresholds?.reset();\n\n    // Reset original complex objects\n    this.objectives?.reset(false);\n    this.interactions?.reset(true);\n    this.score?.reset();\n    this.comments_from_learner?.reset();\n    this.comments_from_lms?.reset();\n    this.learner_preference?.reset();\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   * @private\n   */\n  get _version(): string {\n    return this.metadata._version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   * @private\n   */\n  set _version(_version: string) {\n    this.metadata._version = _version;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.metadata._children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {number} _children\n   * @private\n   */\n  set _children(_children: number) {\n    this.metadata._children = _children;\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this.status.completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    this.status.completion_status = completion_status;\n  }\n\n  /**\n   * Getter for _completion_threshold\n   * @return {string}\n   */\n  get completion_threshold(): string {\n    return this.thresholds.completion_threshold;\n  }\n\n  /**\n   * Setter for _completion_threshold. Can only be called before initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold: string) {\n    this.thresholds.completion_threshold = completion_threshold;\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this.settings.credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    this.settings.credit = credit;\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this.session.entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    this.session.entry = entry;\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    this.session.jsonString = this.jsonString;\n    return this.session.exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    this.session.exit = exit;\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this.content.launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    this.content.launch_data = launch_data;\n  }\n\n  /**\n   * Getter for _learner_id\n   * @return {string}\n   */\n  get learner_id(): string {\n    return this.learner.learner_id;\n  }\n\n  /**\n   * Setter for _learner_id. Can only be called before initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id: string) {\n    this.learner.learner_id = learner_id;\n  }\n\n  /**\n   * Getter for _learner_name\n   * @return {string}\n   */\n  get learner_name(): string {\n    return this.learner.learner_name;\n  }\n\n  /**\n   * Setter for _learner_name. Can only be called before initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name: string) {\n    this.learner.learner_name = learner_name;\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this.content.location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    this.content.location = location;\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this.settings.max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    this.settings.max_time_allowed = max_time_allowed;\n  }\n\n  /**\n   * Getter for _mode\n   * @return {string}\n   */\n  get mode(): string {\n    return this.settings.mode;\n  }\n\n  /**\n   * Setter for _mode. Can only be called before initialization.\n   * @param {string} mode\n   */\n  set mode(mode: string) {\n    this.settings.mode = mode;\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this.status.progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    this.status.progress_measure = progress_measure;\n  }\n\n  /**\n   * Getter for _scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score(): string {\n    return this.thresholds.scaled_passing_score;\n  }\n\n  /**\n   * Setter for _scaled_passing_score. Can only be called before initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score: string) {\n    this.thresholds.scaled_passing_score = scaled_passing_score;\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    this.session.jsonString = this.jsonString;\n    return this.session.session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    this.session.session_time = session_time;\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this.status.success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    this.status.success_status = success_status;\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this.content.suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    this.content.suspend_data = suspend_data;\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this.settings.time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    this.settings.time_limit_action = time_limit_action;\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this.session.total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    this.session.total_time = total_time;\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime(): string {\n    return this.session.getCurrentTotalTime();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      comments_from_learner: CMICommentsFromLearner,\n   *      comments_from_lms: CMICommentsFromLMS,\n   *      completion_status: string,\n   *      completion_threshold: string,\n   *      credit: string,\n   *      entry: string,\n   *      exit: string,\n   *      interactions: CMIInteractions,\n   *      launch_data: string,\n   *      learner_id: string,\n   *      learner_name: string,\n   *      learner_preference: CMILearnerPreference,\n   *      location: string,\n   *      max_time_allowed: string,\n   *      mode: string,\n   *      objectives: CMIObjectives,\n   *      progress_measure: string,\n   *      scaled_passing_score: string,\n   *      score: Scorm2004CMIScore,\n   *      session_time: string,\n   *      success_status: string,\n   *      suspend_data: string,\n   *      time_limit_action: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    comments_from_learner: CMICommentsFromLearner;\n    comments_from_lms: CMICommentsFromLMS;\n    completion_status: string;\n    completion_threshold: string;\n    credit: string;\n    entry: string;\n    exit: string;\n    interactions: CMIInteractions;\n    launch_data: string;\n    learner_id: string;\n    learner_name: string;\n    learner_preference: CMILearnerPreference;\n    location: string;\n    max_time_allowed: string;\n    mode: string;\n    objectives: CMIObjectives;\n    progress_measure: string;\n    scaled_passing_score: string;\n    score: Scorm2004CMIScore;\n    session_time: string;\n    success_status: string;\n    suspend_data: string;\n    time_limit_action: string;\n  } {\n    this.jsonString = true;\n\n    // Set jsonString flag on component classes that need it\n    this.session.jsonString = true;\n\n    const result = {\n      comments_from_learner: this.comments_from_learner,\n      comments_from_lms: this.comments_from_lms,\n      completion_status: this.completion_status,\n      completion_threshold: this.completion_threshold,\n      credit: this.credit,\n      entry: this.entry,\n      exit: this.exit,\n      interactions: this.interactions,\n      launch_data: this.launch_data,\n      learner_id: this.learner_id,\n      learner_name: this.learner_name,\n      learner_preference: this.learner_preference,\n      location: this.location,\n      max_time_allowed: this.max_time_allowed,\n      mode: this.mode,\n      objectives: this.objectives,\n      progress_measure: this.progress_measure,\n      scaled_passing_score: this.scaled_passing_score,\n      score: this.score,\n      session_time: this.session_time,\n      success_status: this.success_status,\n      suspend_data: this.suspend_data,\n      time_limit_action: this.time_limit_action,\n    };\n\n    // Clean up jsonString flags\n    delete this.jsonString;\n    delete this.session.jsonString;\n\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { NAVBoolean } from \"../../constants/enums\";\nimport { CMIArray } from \"../common/array\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\n\n/**\n * Class representing SCORM 2004's adl object\n */\nexport class ADL extends BaseCMI {\n  /**\n   * Constructor for adl\n   */\n  constructor() {\n    super();\n    this.nav = new ADLNav();\n    this.data = new ADLData();\n  }\n\n  public nav: ADLNav;\n  public data = new ADLData();\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.nav?.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this.nav?.reset();\n  }\n\n  /**\n   * toJSON for adl\n   * @return {\n   *    {\n   *      nav: ADLNav,\n   *      data: ADLData\n   *    }\n   *  }\n   */\n  toJSON(): {\n    nav: ADLNav;\n    data: ADLData;\n  } {\n    this.jsonString = true;\n    const result = {\n      nav: this.nav,\n      data: this.data,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's `adl.nav` object\n */\n\nexport class ADLNav extends BaseCMI {\n  private _request = \"_none_\";\n\n  /**\n   * Constructor for `adl.nav`\n   */\n  constructor() {\n    super();\n    this.request_valid = new ADLNavRequestValid();\n  }\n\n  public request_valid: ADLNavRequestValid;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.request_valid?.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._request = \"_none_\";\n    this.request_valid?.reset();\n  }\n\n  /**\n   * Getter for _request\n   * @return {string}\n   */\n  get request(): string {\n    return this._request;\n  }\n\n  /**\n   * Setter for _request\n   * @param {string} request\n   */\n  set request(request: string) {\n    if (check2004ValidFormat(request, scorm2004_regex.NAVEvent)) {\n      this._request = request;\n    }\n  }\n\n  /**\n   * toJSON for adl.nav\n   *\n   * @return {\n   *    {\n   *      request: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    request: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      request: this.request,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's `adl.data` object\n */\nexport class ADLData extends CMIArray {\n  constructor() {\n    super({\n      children: scorm2004_constants.adl_data_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's adl.data.n object\n */\nexport class ADLDataObject extends BaseCMI {\n  private _id = \"\";\n  private _store = \"\";\n\n  constructor() {\n    super();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _store\n   * @return {string}\n   */\n  get store(): string {\n    return this._store;\n  }\n\n  /**\n   * Setter for _store\n   * @param {string} store\n   */\n  set store(store: string) {\n    if (check2004ValidFormat(store, scorm2004_regex.CMILangString4000)) {\n      this._store = store;\n    }\n  }\n\n  /**\n   * toJSON for adl.data.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      store: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    store: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this._id,\n      store: this._store,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl.nav.request_valid object\n */\n\nexport class ADLNavRequestValid extends BaseCMI {\n  private _continue = \"unknown\";\n  private _previous = \"unknown\";\n  private _choice: {\n    [key: string]: NAVBoolean;\n  } = {};\n  private _jump: {\n    [key: string]: NAVBoolean;\n  } = {};\n\n  /**\n   * Constructor for adl.nav.request_valid\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._continue = \"unknown\";\n    this._previous = \"unknown\";\n  }\n\n  /**\n   * Getter for _continue\n   * @return {string}\n   */\n  get continue(): string {\n    return this._continue;\n  }\n\n  /**\n   * Setter for _continue. Just throws an error.\n   * @param {string} _continue\n   */\n  set continue(_continue: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(scorm2004_errors.READ_ONLY_ELEMENT);\n    }\n    if (check2004ValidFormat(_continue, scorm2004_regex.NAVBoolean)) {\n      this._continue = _continue;\n    }\n  }\n\n  /**\n   * Getter for _previous\n   * @return {string}\n   */\n  get previous(): string {\n    return this._previous;\n  }\n\n  /**\n   * Setter for _previous. Just throws an error.\n   * @param {string} _previous\n   */\n  set previous(_previous: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(scorm2004_errors.READ_ONLY_ELEMENT);\n    }\n    if (check2004ValidFormat(_previous, scorm2004_regex.NAVBoolean)) {\n      this._previous = _previous;\n    }\n  }\n\n  /**\n   * Getter for _choice\n   * @return {{ [key: string]: NAVBoolean }}\n   */\n  get choice(): { [key: string]: NAVBoolean } {\n    return this._choice;\n  }\n\n  /**\n   * Setter for _choice\n   * @param {{ [key: string]: string }} choice\n   */\n  set choice(choice: { [key: string]: string }) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(scorm2004_errors.READ_ONLY_ELEMENT);\n    }\n    if (typeof choice !== \"object\") {\n      throw new Scorm2004ValidationError(scorm2004_errors.TYPE_MISMATCH);\n    }\n    for (const key in choice) {\n      if ({}.hasOwnProperty.call(choice, key)) {\n        if (\n          check2004ValidFormat(choice[key], scorm2004_regex.NAVBoolean) &&\n          check2004ValidFormat(key, scorm2004_regex.NAVTarget)\n        ) {\n          this._choice[key] =\n            NAVBoolean[choice[key] as keyof typeof NAVBoolean];\n        }\n      }\n    }\n  }\n\n  /**\n   * Getter for _jump\n   * @return {{ [key: string]: NAVBoolean }}\n   */\n  get jump(): { [key: string]: NAVBoolean } {\n    return this._jump;\n  }\n\n  /**\n   * Setter for _jump\n   * @param {{ [key: string]: string }} jump\n   */\n  set jump(jump: { [key: string]: string }) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(scorm2004_errors.READ_ONLY_ELEMENT);\n    }\n    if (typeof jump !== \"object\") {\n      throw new Scorm2004ValidationError(scorm2004_errors.TYPE_MISMATCH);\n    }\n    for (const key in jump) {\n      if ({}.hasOwnProperty.call(jump, key)) {\n        if (\n          check2004ValidFormat(jump[key], scorm2004_regex.NAVBoolean) &&\n          check2004ValidFormat(key, scorm2004_regex.NAVTarget)\n        ) {\n          this._jump[key] = NAVBoolean[jump[key] as keyof typeof NAVBoolean];\n        }\n      }\n    }\n  }\n\n  /**\n   * toJSON for adl.nav.request_valid\n   *\n   * @return {\n   *    {\n   *      previous: string,\n   *      continue: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    previous: string;\n    continue: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      previous: this._previous,\n      continue: this._continue,\n      choice: this._choice,\n      jump: this._jump,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","const ValidLanguages: string[] = [\n  \"aa\",\n  \"ab\",\n  \"ae\",\n  \"af\",\n  \"ak\",\n  \"am\",\n  \"an\",\n  \"ar\",\n  \"as\",\n  \"av\",\n  \"ay\",\n  \"az\",\n  \"ba\",\n  \"be\",\n  \"bg\",\n  \"bh\",\n  \"bi\",\n  \"bm\",\n  \"bn\",\n  \"bo\",\n  \"br\",\n  \"bs\",\n  \"ca\",\n  \"ce\",\n  \"ch\",\n  \"co\",\n  \"cr\",\n  \"cs\",\n  \"cu\",\n  \"cv\",\n  \"cy\",\n  \"da\",\n  \"de\",\n  \"dv\",\n  \"dz\",\n  \"ee\",\n  \"el\",\n  \"en\",\n  \"eo\",\n  \"es\",\n  \"et\",\n  \"eu\",\n  \"fa\",\n  \"ff\",\n  \"fi\",\n  \"fj\",\n  \"fo\",\n  \"fr\",\n  \"fy\",\n  \"ga\",\n  \"gd\",\n  \"gl\",\n  \"gn\",\n  \"gu\",\n  \"gv\",\n  \"ha\",\n  \"he\",\n  \"hi\",\n  \"ho\",\n  \"hr\",\n  \"ht\",\n  \"hu\",\n  \"hy\",\n  \"hz\",\n  \"ia\",\n  \"id\",\n  \"ie\",\n  \"ig\",\n  \"ii\",\n  \"ik\",\n  \"io\",\n  \"is\",\n  \"it\",\n  \"iu\",\n  \"ja\",\n  \"jv\",\n  \"ka\",\n  \"kg\",\n  \"ki\",\n  \"kj\",\n  \"kk\",\n  \"kl\",\n  \"km\",\n  \"kn\",\n  \"ko\",\n  \"kr\",\n  \"ks\",\n  \"ku\",\n  \"kv\",\n  \"kw\",\n  \"ky\",\n  \"la\",\n  \"lb\",\n  \"lg\",\n  \"li\",\n  \"ln\",\n  \"lo\",\n  \"lt\",\n  \"lu\",\n  \"lv\",\n  \"mg\",\n  \"mh\",\n  \"mi\",\n  \"mk\",\n  \"ml\",\n  \"mn\",\n  \"mo\",\n  \"mr\",\n  \"ms\",\n  \"mt\",\n  \"my\",\n  \"na\",\n  \"nb\",\n  \"nd\",\n  \"ne\",\n  \"ng\",\n  \"nl\",\n  \"nn\",\n  \"no\",\n  \"nr\",\n  \"nv\",\n  \"ny\",\n  \"oc\",\n  \"oj\",\n  \"om\",\n  \"or\",\n  \"os\",\n  \"pa\",\n  \"pi\",\n  \"pl\",\n  \"ps\",\n  \"pt\",\n  \"qu\",\n  \"rm\",\n  \"rn\",\n  \"ro\",\n  \"ru\",\n  \"rw\",\n  \"sa\",\n  \"sc\",\n  \"sd\",\n  \"se\",\n  \"sg\",\n  \"sh\",\n  \"si\",\n  \"sk\",\n  \"sl\",\n  \"sm\",\n  \"sn\",\n  \"so\",\n  \"sq\",\n  \"sr\",\n  \"ss\",\n  \"st\",\n  \"su\",\n  \"sv\",\n  \"sw\",\n  \"ta\",\n  \"te\",\n  \"tg\",\n  \"th\",\n  \"ti\",\n  \"tk\",\n  \"tl\",\n  \"tn\",\n  \"to\",\n  \"tr\",\n  \"ts\",\n  \"tt\",\n  \"tw\",\n  \"ty\",\n  \"ug\",\n  \"uk\",\n  \"ur\",\n  \"uz\",\n  \"ve\",\n  \"vi\",\n  \"vo\",\n  \"wa\",\n  \"wo\",\n  \"xh\",\n  \"yi\",\n  \"yo\",\n  \"za\",\n  \"zh\",\n  \"zu\",\n  \"aar\",\n  \"abk\",\n  \"ave\",\n  \"afr\",\n  \"aka\",\n  \"amh\",\n  \"arg\",\n  \"ara\",\n  \"asm\",\n  \"ava\",\n  \"aym\",\n  \"aze\",\n  \"bak\",\n  \"bel\",\n  \"bul\",\n  \"bih\",\n  \"bis\",\n  \"bam\",\n  \"ben\",\n  \"tib\",\n  \"bod\",\n  \"bre\",\n  \"bos\",\n  \"cat\",\n  \"che\",\n  \"cha\",\n  \"cos\",\n  \"cre\",\n  \"cze\",\n  \"ces\",\n  \"chu\",\n  \"chv\",\n  \"wel\",\n  \"cym\",\n  \"dan\",\n  \"ger\",\n  \"deu\",\n  \"div\",\n  \"dzo\",\n  \"ewe\",\n  \"gre\",\n  \"ell\",\n  \"eng\",\n  \"epo\",\n  \"spa\",\n  \"est\",\n  \"baq\",\n  \"eus\",\n  \"per\",\n  \"fas\",\n  \"ful\",\n  \"fin\",\n  \"fij\",\n  \"fao\",\n  \"fre\",\n  \"fra\",\n  \"fry\",\n  \"gle\",\n  \"gla\",\n  \"glg\",\n  \"grn\",\n  \"guj\",\n  \"glv\",\n  \"hau\",\n  \"heb\",\n  \"hin\",\n  \"hmo\",\n  \"hrv\",\n  \"hat\",\n  \"hun\",\n  \"arm\",\n  \"hye\",\n  \"her\",\n  \"ina\",\n  \"ind\",\n  \"ile\",\n  \"ibo\",\n  \"iii\",\n  \"ipk\",\n  \"ido\",\n  \"ice\",\n  \"isl\",\n  \"ita\",\n  \"iku\",\n  \"jpn\",\n  \"jav\",\n  \"geo\",\n  \"kat\",\n  \"kon\",\n  \"kik\",\n  \"kua\",\n  \"kaz\",\n  \"kal\",\n  \"khm\",\n  \"kan\",\n  \"kor\",\n  \"kau\",\n  \"kas\",\n  \"kur\",\n  \"kom\",\n  \"cor\",\n  \"kir\",\n  \"lat\",\n  \"ltz\",\n  \"lug\",\n  \"lim\",\n  \"lin\",\n  \"lao\",\n  \"lit\",\n  \"lub\",\n  \"lav\",\n  \"mlg\",\n  \"mah\",\n  \"mao\",\n  \"mri\",\n  \"mac\",\n  \"mkd\",\n  \"mal\",\n  \"mon\",\n  \"mol\",\n  \"mar\",\n  \"may\",\n  \"msa\",\n  \"mlt\",\n  \"bur\",\n  \"mya\",\n  \"nau\",\n  \"nob\",\n  \"nde\",\n  \"nep\",\n  \"ndo\",\n  \"dut\",\n  \"nld\",\n  \"nno\",\n  \"nor\",\n  \"nbl\",\n  \"nav\",\n  \"nya\",\n  \"oci\",\n  \"oji\",\n  \"orm\",\n  \"ori\",\n  \"oss\",\n  \"pan\",\n  \"pli\",\n  \"pol\",\n  \"pus\",\n  \"por\",\n  \"que\",\n  \"roh\",\n  \"run\",\n  \"rum\",\n  \"ron\",\n  \"rus\",\n  \"kin\",\n  \"san\",\n  \"srd\",\n  \"snd\",\n  \"sme\",\n  \"sag\",\n  \"slo\",\n  \"sin\",\n  \"slk\",\n  \"slv\",\n  \"smo\",\n  \"sna\",\n  \"som\",\n  \"alb\",\n  \"sqi\",\n  \"srp\",\n  \"ssw\",\n  \"sot\",\n  \"sun\",\n  \"swe\",\n  \"swa\",\n  \"tam\",\n  \"tel\",\n  \"tgk\",\n  \"tha\",\n  \"tir\",\n  \"tuk\",\n  \"tgl\",\n  \"tsn\",\n  \"ton\",\n  \"tur\",\n  \"tso\",\n  \"tat\",\n  \"twi\",\n  \"tah\",\n  \"uig\",\n  \"ukr\",\n  \"urd\",\n  \"uzb\",\n  \"ven\",\n  \"vie\",\n  \"vol\",\n  \"wln\",\n  \"wol\",\n  \"xho\",\n  \"yid\",\n  \"yor\",\n  \"zha\",\n  \"chi\",\n  \"zho\",\n  \"zul\",\n];\nexport default ValidLanguages;\n","/**\n * Data serialization functions for SCORM 2004\n */\nimport * as Utilities from \"../utilities\";\nimport { CompletionStatus, SuccessStatus } from \"../constants/enums\";\nimport {\n  CommitObject,\n  ResultObject,\n  ScoreObject,\n  Settings,\n} from \"../types/api_types\";\nimport { scorm2004_regex } from \"../constants/regex\";\nimport { StringKeyMap } from \"../utilities\";\n\n/**\n * Render the cmi object to the proper format for LMS commit\n *\n * @param {boolean} terminateCommit\n * @param {any} cmi - The CMI object\n * @param {Settings} settings - The settings object\n * @param {Function} renderCMIToJSONObject - Function to render CMI to JSON object\n * @return {object|Array}\n */\nexport function renderCommitCMI(\n  terminateCommit: boolean,\n  cmi: StringKeyMap,\n  settings: Settings,\n  renderCMIToJSONObject: () => StringKeyMap,\n): StringKeyMap | Array<any> {\n  const cmiExport: StringKeyMap = renderCMIToJSONObject();\n\n  if (terminateCommit) {\n    (cmiExport.cmi as any).total_time = (cmi as any).getCurrentTotalTime();\n  }\n\n  const result = [];\n  const flattened: StringKeyMap = Utilities.flatten(cmiExport);\n  switch (settings.dataCommitFormat) {\n    case \"flattened\":\n      return Utilities.flatten(cmiExport);\n    case \"params\":\n      for (const item in flattened) {\n        if ({}.hasOwnProperty.call(flattened, item)) {\n          result.push(`${item}=${flattened[item]}`);\n        }\n      }\n      return result;\n    case \"json\":\n    default:\n      return cmiExport;\n  }\n}\n\n/**\n * Render the cmi object to the proper format for LMS commit\n * @param {boolean} terminateCommit\n * @param {any} cmi - The CMI object\n * @param {Function} renderCommitCMIFn - Function to render CMI for commit\n * @return {CommitObject}\n */\nexport function renderCommitObject(\n  terminateCommit: boolean,\n  cmi: any,\n  renderCommitCMIFn: (terminateCommit: boolean) => StringKeyMap | Array<any>,\n): CommitObject {\n  const cmiExport = renderCommitCMIFn(terminateCommit);\n  const totalTimeDuration = cmi.getCurrentTotalTime();\n  const totalTimeSeconds = Utilities.getDurationAsSeconds(\n    totalTimeDuration,\n    scorm2004_regex.CMITimespan,\n  );\n\n  let completionStatus = CompletionStatus.UNKNOWN;\n  let successStatus = SuccessStatus.UNKNOWN;\n  if (cmi.completion_status) {\n    if (cmi.completion_status === \"completed\") {\n      completionStatus = CompletionStatus.COMPLETED;\n    } else if (cmi.completion_status === \"incomplete\") {\n      completionStatus = CompletionStatus.INCOMPLETE;\n    }\n  }\n  if (cmi.success_status) {\n    if (cmi.success_status === \"passed\") {\n      successStatus = SuccessStatus.PASSED;\n    } else if (cmi.success_status === \"failed\") {\n      successStatus = SuccessStatus.FAILED;\n    }\n  }\n\n  const score = cmi.score;\n  let scoreObject: ScoreObject = null;\n  if (score) {\n    scoreObject = {};\n\n    if (!Number.isNaN(Number.parseFloat(score.raw))) {\n      scoreObject.raw = Number.parseFloat(score.raw);\n    }\n    if (!Number.isNaN(Number.parseFloat(score.min))) {\n      scoreObject.min = Number.parseFloat(score.min);\n    }\n    if (!Number.isNaN(Number.parseFloat(score.max))) {\n      scoreObject.max = Number.parseFloat(score.max);\n    }\n    if (!Number.isNaN(Number.parseFloat(score.scaled))) {\n      scoreObject.scaled = Number.parseFloat(score.scaled);\n    }\n  }\n\n  const commitObject: CommitObject = {\n    completionStatus: completionStatus,\n    successStatus: successStatus,\n    totalTimeSeconds: totalTimeSeconds,\n    runtimeData: cmiExport as StringKeyMap,\n  };\n  if (scoreObject) {\n    commitObject.score = scoreObject;\n  }\n  return commitObject;\n}\n\n/**\n * Attempts to store the data to the LMS\n *\n * @param {boolean} terminateCommit\n * @param {any} cmi - The CMI object\n * @param {any} adl - The ADL object\n * @param {any} startingData - The starting data\n * @param {Settings} settings - The settings object\n * @param {Function} getCommitObject - Function to get the commit object\n * @param {Function} processHttpRequest - Function to process HTTP request\n * @param {Function} processListeners - Function to process listeners\n * @return {ResultObject}\n */\nexport async function storeData(\n  terminateCommit: boolean,\n  cmi: any,\n  adl: any,\n  startingData: any,\n  settings: Settings,\n  getCommitObject: (terminateCommit: boolean) => CommitObject,\n  processHttpRequest: (\n    url: string,\n    params: any,\n    immediate: boolean,\n  ) => Promise<any>,\n  processListeners: (\n    eventName: string,\n    data?: string,\n    specificTarget?: string,\n  ) => void,\n): Promise<ResultObject> {\n  if (terminateCommit) {\n    if (cmi.mode === \"normal\") {\n      if (cmi.credit === \"credit\") {\n        if (cmi.completion_threshold && cmi.progress_measure) {\n          if (cmi.progress_measure >= cmi.completion_threshold) {\n            cmi.completion_status = \"completed\";\n          } else {\n            cmi.completion_status = \"incomplete\";\n          }\n        }\n        if (cmi.scaled_passing_score && cmi.score.scaled) {\n          if (cmi.score.scaled >= cmi.scaled_passing_score) {\n            cmi.success_status = \"passed\";\n          } else {\n            cmi.success_status = \"failed\";\n          }\n        }\n      }\n    }\n  }\n\n  let navRequest = false;\n  if (\n    adl.nav.request !== startingData?.adl?.nav?.request &&\n    adl.nav.request !== \"_none_\"\n  ) {\n    navRequest = true;\n  }\n\n  const commitObject = getCommitObject(terminateCommit);\n  if (typeof settings.lmsCommitUrl === \"string\") {\n    const result = await processHttpRequest(\n      settings.lmsCommitUrl,\n      {\n        commitObject: commitObject,\n      },\n      terminateCommit,\n    );\n\n    // Check if this is a sequencing call, and then call the necessary JS\n    if (\n      navRequest &&\n      result.navRequest !== undefined &&\n      result.navRequest !== \"\"\n    ) {\n      Function(`\"use strict\";(() => { ${result.navRequest} })()`)();\n    } else if (result?.navRequest && !navRequest) {\n      if (result.navRequest.name) {\n        processListeners(result.navRequest.name, result.navRequest.data);\n      }\n    }\n\n    return result;\n  }\n\n  return {\n    result: \"true\",\n    errorCode: 0,\n  };\n}\n","import BaseAPI from \"./BaseAPI\";\nimport { CMI } from \"./cmi/scorm2004/cmi\";\nimport { StringKeyMap, stringMatches } from \"./utilities\";\nimport {\n  global_constants,\n  scorm2004_constants,\n} from \"./constants/api_constants\";\nimport { scorm2004_errors } from \"./constants/error_codes\";\nimport { CMIObjectivesObject } from \"./cmi/scorm2004/objectives\";\nimport { ADL } from \"./cmi/scorm2004/adl\";\nimport { CommitObject, ResultObject, Settings } from \"./types/api_types\";\nimport { scorm2004_regex } from \"./constants/regex\";\n\n// Import functions from extracted modules\nimport * as ValidationModule from \"./scorm2004/validation\";\nimport * as CMIElementHandlerModule from \"./scorm2004/cmi_element_handler\";\nimport * as CMIValueHandlerModule from \"./scorm2004/cmi_value_handler\";\nimport * as DataSerializationModule from \"./scorm2004/data_serialization\";\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport { CMIInteractionsObject } from \"./cmi/scorm2004/interactions\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { ResponseType } from \"./constants/response_constants\";\n\n/**\n * API class for SCORM 2004\n */\nclass Scorm2004Impl extends BaseAPI {\n  private _version: string = \"1.0\";\n  private _globalObjectives: CMIObjectivesObject[] = [];\n\n  /**\n   * Constructor for SCORM 2004 API\n   * @param {Settings} settings\n   */\n  constructor(settings?: Settings) {\n    if (settings) {\n      if (settings.mastery_override === undefined) {\n        settings.mastery_override = false;\n      }\n    }\n\n    super(scorm2004_errors, settings);\n\n    this.cmi = new CMI();\n    this.adl = new ADL();\n\n    // Rename functions to match 2004 Spec and expose to modules\n    this.Initialize = this.lmsInitialize;\n    this.Terminate = this.lmsFinish;\n    this.GetValue = this.lmsGetValue;\n    this.SetValue = this.lmsSetValue;\n    this.Commit = this.lmsCommit;\n    this.GetLastError = this.lmsGetLastError;\n    this.GetErrorString = this.lmsGetErrorString;\n    this.GetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  public cmi: CMI;\n  public adl: ADL;\n\n  public Initialize: () => string;\n  public Terminate: () => string;\n  public GetValue: (CMIElement: string) => string;\n  public SetValue: (CMIElement: string, value: any) => string;\n  public Commit: () => string;\n  public GetLastError: () => string;\n  public GetErrorString: (CMIErrorCode: string | number) => string;\n  public GetDiagnostic: (CMIErrorCode: string | number) => string;\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset(settings?: Settings) {\n    this.commonReset(settings);\n\n    this.cmi?.reset();\n    this.adl?.reset();\n  }\n\n  /**\n   * Getter for _version\n   * @return {string}\n   */\n  get version(): string {\n    return this._version;\n  }\n\n  /**\n   * Getter for _globalObjectives\n   */\n  get globalObjectives(): CMIObjectivesObject[] {\n    return this._globalObjectives;\n  }\n\n  /**\n   * Initialize function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize(): string {\n    this.cmi.initialize();\n    return this.initialize(\n      \"Initialize\",\n      \"LMS was already initialized!\",\n      \"LMS is already finished!\",\n    );\n  }\n\n  /**\n   * Terminate function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish(): string {\n    (async () => {\n      await this.internalFinish();\n    })();\n    return global_constants.SCORM_TRUE;\n  }\n\n  async internalFinish(): Promise<string> {\n    const result = await this.terminate(\"Terminate\", true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      if (this.adl.nav.request !== \"_none_\") {\n        const navActions: { [key: string]: string } = {\n          continue: \"SequenceNext\",\n          previous: \"SequencePrevious\",\n          choice: \"SequenceChoice\",\n          jump: \"SequenceJump\",\n          exit: \"SequenceExit\",\n          exitAll: \"SequenceExitAll\",\n          abandon: \"SequenceAbandon\",\n          abandonAll: \"SequenceAbandonAll\",\n        };\n\n        let request = this.adl.nav.request;\n        const choiceJumpRegex = new RegExp(scorm2004_regex.NAVEvent);\n        const matches = request.match(choiceJumpRegex);\n        let target = \"\";\n        if (matches) {\n          if (matches.groups?.choice_target) {\n            target = matches.groups?.choice_target;\n            request = \"choice\";\n          } else if (matches.groups?.jump_target) {\n            target = matches.groups?.jump_target;\n            request = \"jump\";\n          }\n        }\n        const action = navActions[request];\n        if (action) {\n          this.processListeners(action, \"adl.nav.request\", target);\n        }\n      } else if (this.settings.autoProgress) {\n        this.processListeners(\"SequenceNext\");\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * GetValue function from SCORM 2004 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement: string): string {\n    const adlNavRequestRegex =\n      \"^adl\\\\.nav\\\\.request_valid\\\\.(choice|jump)\\\\.{target=\\\\S{0,}([a-zA-Z0-9-_]+)}$\";\n    if (stringMatches(CMIElement, adlNavRequestRegex)) {\n      const matches = CMIElement.match(adlNavRequestRegex);\n      const request = matches[1];\n      const target = matches[2].replace(\"{target=\", \"\").replace(\"}\", \"\");\n      if (request === \"choice\" || request === \"jump\") {\n        if (this.settings.scoItemIdValidator) {\n          return String(this.settings.scoItemIdValidator(target));\n        }\n        return String(this.settings.scoItemIds.includes(target));\n      }\n    }\n    return this.getValue(\"GetValue\", true, CMIElement);\n  }\n\n  /**\n   * SetValue function from SCORM 2004 Spec\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement: string, value: any): string {\n    // Proceed with regular setting for non-objective elements or fallback behavior\n    return this.setValue(\"SetValue\", \"Commit\", true, CMIElement, value);\n  }\n\n  /**\n   * Commit function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit(): string {\n    if (this.settings.asyncCommit) {\n      this.scheduleCommit(500, \"Commit\");\n    } else {\n      (async () => {\n        await this.commit(\"Commit\", false);\n      })();\n    }\n    return global_constants.SCORM_TRUE;\n  }\n\n  /**\n   * GetLastError function from SCORM 2004 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError(): string {\n    return this.getLastError(\"GetLastError\");\n  }\n\n  /**\n   * GetErrorString function from SCORM 2004 Spec\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode: string | number): string {\n    return this.getErrorString(\"GetErrorString\", CMIErrorCode);\n  }\n\n  /**\n   * GetDiagnostic function from SCORM 2004 Spec\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode: string | number): string {\n    return this.getDiagnostic(\"GetDiagnostic\", CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object - delegates to CMIValueHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  override setCMIValue(CMIElement: string, value: any): string {\n    return CMIValueHandlerModule.setCMIValue(\n      CMIElement,\n      value,\n      this._commonSetCMIValue.bind(this),\n      this._globalObjectives,\n      this.settings.globalObjectiveIds,\n      this.cmi.objectives,\n    );\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array - delegates to CMIElementHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI|null}\n   */\n  getChildElement(\n    CMIElement: string,\n    value: any,\n    foundFirstIndex: boolean,\n  ): BaseCMI | null {\n    return CMIElementHandlerModule.getChildElement(\n      CMIElement,\n      value,\n      foundFirstIndex,\n      this.createCorrectResponsesObject.bind(this),\n    );\n  }\n\n  /**\n   * Creates a correct responses object for an interaction - delegates to CMIElementHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {BaseCMI|null}\n   */\n  private createCorrectResponsesObject(\n    CMIElement: string,\n    value: any,\n  ): BaseCMI | null {\n    return CMIElementHandlerModule.createCorrectResponsesObject(\n      CMIElement,\n      value,\n      this.cmi.interactions.childArray,\n      this.throwSCORMError.bind(this),\n      this.checkDuplicateChoiceResponse.bind(this),\n      this.checkValidResponseType.bind(this),\n      this.lastErrorCode,\n      this.isInitialized(),\n      this.checkCorrectResponseValue.bind(this),\n    );\n  }\n\n  /**\n   * Checks for valid response types - delegates to ValidationModule\n   * @param {ResponseType} response_type\n   * @param {any} value\n   * @param {string} interaction_type\n   */\n  checkValidResponseType(\n    response_type: ResponseType,\n    value: any,\n    interaction_type: string,\n  ) {\n    ValidationModule.checkValidResponseType(\n      response_type,\n      value,\n      interaction_type,\n      this.throwSCORMError.bind(this),\n      this.checkCorrectResponseValue.bind(this),\n    );\n  }\n\n  /**\n   * Checks for duplicate 'choice' responses - delegates to ValidationModule\n   * @param {CMIInteractionsObject} interaction\n   * @param {any} value\n   */\n  checkDuplicateChoiceResponse(interaction: CMIInteractionsObject, value: any) {\n    ValidationModule.checkDuplicateChoiceResponse(\n      interaction,\n      value,\n      this.throwSCORMError.bind(this),\n      this.lastErrorCode,\n    );\n  }\n\n  /**\n   * Validate correct response - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {*} value\n   */\n  validateCorrectResponse(CMIElement: string, value: any) {\n    const parts = CMIElement.split(\".\");\n    const index = Number(parts[2]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    ValidationModule.validateCorrectResponse(\n      CMIElement,\n      value,\n      interaction,\n      this.throwSCORMError.bind(this),\n      this.lastErrorCode,\n      this.checkDuplicateChoiceResponse.bind(this),\n      this.checkValidResponseType.bind(this),\n      this.checkDuplicatedPattern.bind(this),\n      this.checkCorrectResponseValue.bind(this),\n    );\n  }\n\n  /**\n   * Gets a value from the CMI Object - delegates to CMIValueHandlerModule\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  override getCMIValue(CMIElement: string): any {\n    return CMIValueHandlerModule.getCMIValue(\n      CMIElement,\n      this._commonGetCMIValue.bind(this),\n    );\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {(string|number)} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  override getLmsErrorMessageDetails(\n    errorNumber: string | number,\n    detail: boolean,\n  ): string {\n    let basicMessage = \"\";\n    let detailMessage = \"\";\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (scorm2004_constants.error_descriptions[errorNumber]) {\n      basicMessage =\n        scorm2004_constants.error_descriptions[errorNumber].basicMessage;\n      detailMessage =\n        scorm2004_constants.error_descriptions[errorNumber].detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Check to see if a correct_response value has been duplicated - delegates to ValidationModule\n   * @param {CMIArray} correct_response\n   * @param {number} current_index\n   * @param {*} value\n   * @return {boolean}\n   */\n  checkDuplicatedPattern(\n    correct_response: CMIArray,\n    current_index: number,\n    value: any,\n  ): boolean {\n    return ValidationModule.checkDuplicatedPattern(\n      correct_response,\n      current_index,\n      value,\n    );\n  }\n\n  /**\n   * Checks for a valid correct_response value - delegates to ValidationModule\n   * @param {string} interaction_type\n   * @param {Array} nodes\n   * @param {*} value\n   */\n  checkCorrectResponseValue(\n    interaction_type: string,\n    nodes: Array<any>,\n    value: any,\n  ) {\n    ValidationModule.checkCorrectResponseValue(\n      interaction_type,\n      nodes,\n      value,\n      this.throwSCORMError.bind(this),\n      this.removeCorrectResponsePrefixes.bind(this),\n      this.lastErrorCode,\n    );\n  }\n\n  /**\n   * Remove prefixes from correct_response - delegates to ValidationModule\n   * @param {string} node\n   * @return {*}\n   */\n  removeCorrectResponsePrefixes(node: string): any {\n    return ValidationModule.removeCorrectResponsePrefixes(\n      node,\n      this.throwSCORMError.bind(this),\n    );\n  }\n\n  /**\n   * Replace the whole API with another\n   * @param {Scorm2004Impl} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI: Scorm2004Impl) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.adl = newAPI.adl;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit - delegates to DataSerializationModule\n   *\n   * @param {boolean} terminateCommit\n   * @return {object|Array}\n   */\n  renderCommitCMI(terminateCommit: boolean): StringKeyMap | Array<any> {\n    return DataSerializationModule.renderCommitCMI(\n      terminateCommit,\n      this.cmi as unknown as StringKeyMap,\n      this.settings,\n      this.renderCMIToJSONObject.bind(this),\n    );\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit - delegates to DataSerializationModule\n   * @param {boolean} terminateCommit\n   * @return {CommitObject}\n   */\n  renderCommitObject(terminateCommit: boolean): CommitObject {\n    return DataSerializationModule.renderCommitObject(\n      terminateCommit,\n      this.cmi,\n      this.renderCommitCMI.bind(this),\n    );\n  }\n\n  /**\n   * Attempts to store the data to the LMS - delegates to DataSerializationModule\n   *\n   * @param {boolean} terminateCommit\n   * @return {ResultObject}\n   */\n  async storeData(terminateCommit: boolean): Promise<ResultObject> {\n    return DataSerializationModule.storeData(\n      terminateCommit,\n      this.cmi,\n      this.adl,\n      this.startingData,\n      this.settings,\n      this.getCommitObject.bind(this),\n      this.processHttpRequest.bind(this),\n      this.processListeners.bind(this),\n    );\n  }\n}\n\nexport { Scorm2004Impl as Scorm2004API };\n","/**\n * CMI value handling functions for SCORM 2004\n */\nimport { stringMatches } from \"../utilities\";\nimport { CMIObjectivesObject } from \"../cmi/scorm2004/objectives\";\n\n/**\n * Sets a value on the CMI Object\n *\n * @param {string} CMIElement\n * @param {any} value\n * @param {Function} commonSetCMIValue - Function to set a CMI value\n * @param {CMIObjectivesObject[]} globalObjectives - The global objectives array\n * @param {string[]} globalObjectiveIds - The global objective IDs\n * @param {any} cmiObjectives - The CMI objectives\n * @return {string}\n */\nexport function setCMIValue(\n  CMIElement: string,\n  value: any,\n  commonSetCMIValue: (\n    method: string,\n    scorm: boolean,\n    CMIElement: string,\n    value: any,\n  ) => string,\n  globalObjectives: CMIObjectivesObject[],\n  globalObjectiveIds: string[],\n  cmiObjectives: any,\n): string {\n  // Check if we're updating a global or local objective\n  if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n    const parts = CMIElement.split(\".\");\n    const index = Number(parts[2]);\n    const element_base = `cmi.objectives.${index}`;\n\n    let objective_id;\n    const setting_id = stringMatches(\n      CMIElement,\n      \"cmi\\\\.objectives\\\\.\\\\d+\\\\.id\",\n    );\n\n    if (setting_id) {\n      // If we're setting the objective ID, capture it directly\n      objective_id = value;\n    } else {\n      // Find existing objective ID if available\n      const objective = cmiObjectives.findObjectiveByIndex(index);\n      objective_id = objective ? objective.id : undefined;\n    }\n\n    // Check if the objective ID matches a global objective\n    const is_global = objective_id && globalObjectiveIds.includes(objective_id);\n\n    if (is_global) {\n      // Locate or create an entry in _globalObjectives for the global objective\n      let global_index = globalObjectives.findIndex(\n        (obj) => obj.id === objective_id,\n      );\n\n      if (global_index === -1) {\n        global_index = globalObjectives.length;\n        const newGlobalObjective = new CMIObjectivesObject();\n        newGlobalObjective.id = objective_id;\n        globalObjectives.push(newGlobalObjective);\n      }\n\n      // Update the global objective\n      const global_element = CMIElement.replace(\n        element_base,\n        `_globalObjectives.${global_index}`,\n      );\n      commonSetCMIValue(\"SetGlobalObjectiveValue\", true, global_element, value);\n    }\n  }\n  return commonSetCMIValue(\"SetValue\", true, CMIElement, value);\n}\n\n/**\n * Gets a value from the CMI Object\n *\n * @param {string} CMIElement\n * @param {Function} commonGetCMIValue - Function to get a CMI value\n * @return {any}\n */\nexport function getCMIValue(\n  CMIElement: string,\n  commonGetCMIValue: (\n    method: string,\n    scorm: boolean,\n    CMIElement: string,\n  ) => any,\n): any {\n  return commonGetCMIValue(\"GetValue\", true, CMIElement);\n}\n","/**\n * CMI element handling functions for SCORM 2004\n */\nimport { stringMatches } from \"../utilities\";\nimport { scorm2004_errors } from \"../constants/error_codes\";\nimport { CorrectResponses } from \"../constants/response_constants\";\nimport { BaseCMI } from \"../cmi/common/base_cmi\";\nimport {\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n} from \"../cmi/scorm2004/interactions\";\nimport { CMICommentsObject } from \"../cmi/scorm2004/comments\";\nimport { CMIObjectivesObject } from \"../cmi/scorm2004/objectives\";\nimport { ADLDataObject } from \"../cmi/scorm2004/adl\";\n\n/**\n * Gets or builds a new child element to add to the array.\n *\n * @param {string} CMIElement\n * @param {any} value\n * @param {boolean} foundFirstIndex\n * @param {Function} createCorrectResponsesObject - Function to create correct responses object\n * @return {BaseCMI|null}\n */\nexport function getChildElement(\n  CMIElement: string,\n  value: any,\n  foundFirstIndex: boolean,\n  createCorrectResponsesObject: (\n    CMIElement: string,\n    value: any,\n  ) => BaseCMI | null,\n): BaseCMI | null {\n  if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n    return new CMIObjectivesObject();\n  }\n\n  if (foundFirstIndex) {\n    if (\n      stringMatches(\n        CMIElement,\n        \"cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+\",\n      )\n    ) {\n      return createCorrectResponsesObject(CMIElement, value);\n    } else if (\n      stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+\")\n    ) {\n      return new CMIInteractionsObjectivesObject();\n    }\n  } else if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\")) {\n    return new CMIInteractionsObject();\n  }\n\n  if (stringMatches(CMIElement, \"cmi\\\\.comments_from_learner\\\\.\\\\d+\")) {\n    return new CMICommentsObject();\n  } else if (stringMatches(CMIElement, \"cmi\\\\.comments_from_lms\\\\.\\\\d+\")) {\n    return new CMICommentsObject(true);\n  }\n\n  if (stringMatches(CMIElement, \"adl\\\\.data\\\\.\\\\d+\")) {\n    return new ADLDataObject();\n  }\n\n  return null;\n}\n\n/**\n * Creates a correct responses object for an interaction\n *\n * @param {string} CMIElement\n * @param {any} value\n * @param {CMIInteractionsObject[]} interactions - The interactions array\n * @param {Function} throwSCORMError - Function to throw a SCORM error\n * @param {Function} checkDuplicateChoiceResponse - Function to check for duplicate choice responses\n * @param {Function} checkValidResponseType - Function to check for valid response types\n * @param {string} lastErrorCode - The last error code\n * @param {boolean} isInitialized - Whether the API is initialized\n * @param {Function} checkCorrectResponseValue - Function to check correct response value\n * @return {BaseCMI|null}\n */\nexport function createCorrectResponsesObject(\n  CMIElement: string,\n  value: any,\n  interactions: CMIInteractionsObject[],\n  throwSCORMError: (errorCode: string | number, message?: string) => void,\n  checkDuplicateChoiceResponse: (\n    interaction: CMIInteractionsObject,\n    value: any,\n    throwSCORMError: (errorCode: string, message?: string) => void,\n    lastErrorCode: string,\n  ) => void,\n  checkValidResponseType: (\n    response_type: any,\n    value: any,\n    interaction_type: string,\n    throwSCORMError: (errorCode: string, message?: string) => void,\n    checkCorrectResponseValue: (\n      interaction_type: string,\n      nodes: Array<any>,\n      value: any,\n    ) => void,\n  ) => void,\n  lastErrorCode: string,\n  isInitialized: boolean,\n  checkCorrectResponseValue: (\n    interaction_type: string,\n    nodes: Array<any>,\n    value: any,\n  ) => void,\n): BaseCMI | null {\n  const parts = CMIElement.split(\".\");\n  const index = Number(parts[2]);\n  const interaction = interactions[index];\n\n  if (isInitialized) {\n    if (typeof interaction === \"undefined\" || !interaction.type) {\n      throwSCORMError(scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED);\n      return null;\n    } else {\n      checkDuplicateChoiceResponse(\n        interaction,\n        value,\n        throwSCORMError,\n        lastErrorCode,\n      );\n      const response_type = CorrectResponses[interaction.type];\n      if (response_type) {\n        checkValidResponseType(\n          response_type,\n          value,\n          interaction.type,\n          throwSCORMError,\n          checkCorrectResponseValue,\n        );\n      } else {\n        throwSCORMError(\n          scorm2004_errors.GENERAL_SET_FAILURE,\n          \"Incorrect Response Type: \" + interaction.type,\n        );\n        return null;\n      }\n    }\n  }\n\n  if (lastErrorCode === \"0\") {\n    return new CMIInteractionsCorrectResponsesObject();\n  }\n\n  return null;\n}\n","/**\n * Validation functions for SCORM 2004\n */\nimport { scorm2004_errors } from \"../constants/error_codes\";\nimport {\n  CorrectResponses,\n  ResponseType,\n} from \"../constants/response_constants\";\nimport ValidLanguages from \"../constants/language_constants\";\nimport { scorm2004_regex } from \"../constants/regex\";\nimport { CMIArray } from \"../cmi/common/array\";\nimport { CMIInteractionsObject } from \"../cmi/scorm2004/interactions\";\n\n/**\n * Checks for valid response types\n * @param {object} response_type\n * @param {any} value\n * @param {string} interaction_type\n * @param {Function} throwSCORMError - Function to throw a SCORM error\n * @param {Function} checkCorrectResponseValue - Function to check correct response value\n */\nexport function checkValidResponseType(\n  response_type: ResponseType,\n  value: any,\n  interaction_type: string,\n  throwSCORMError: (errorCode: string | number, message?: string) => void,\n  checkCorrectResponseValue: (\n    interaction_type: string,\n    nodes: Array<any>,\n    value: any,\n  ) => void,\n) {\n  let nodes = [];\n  if (response_type?.delimiter) {\n    nodes = String(value).split(response_type.delimiter);\n  } else {\n    nodes[0] = value;\n  }\n\n  if (nodes.length > 0 && nodes.length <= response_type.max) {\n    checkCorrectResponseValue(interaction_type, nodes, value);\n  } else if (nodes.length > response_type.max) {\n    throwSCORMError(\n      scorm2004_errors.GENERAL_SET_FAILURE,\n      \"Data Model Element Pattern Too Long\",\n    );\n  }\n}\n\n/**\n * Checks for duplicate 'choice' responses.\n * @param {CMIInteractionsObject} interaction\n * @param {any} value\n * @param {Function} throwSCORMError - Function to throw a SCORM error\n * @param {string} lastErrorCode - The last error code\n */\nexport function checkDuplicateChoiceResponse(\n  interaction: CMIInteractionsObject,\n  value: any,\n  throwSCORMError: (errorCode: string | number, message?: string) => void,\n  lastErrorCode: string,\n) {\n  const interaction_count = interaction.correct_responses._count;\n  if (interaction.type === \"choice\") {\n    for (let i = 0; i < interaction_count && lastErrorCode === \"0\"; i++) {\n      const response = interaction.correct_responses.childArray[i];\n      if (response.pattern === value) {\n        throwSCORMError(scorm2004_errors.GENERAL_SET_FAILURE);\n      }\n    }\n  }\n}\n\n/**\n * Validate correct response.\n * @param {string} CMIElement\n * @param {*} value\n * @param {CMIInteractionsObject} interaction\n * @param {Function} throwSCORMError - Function to throw a SCORM error\n * @param {string} lastErrorCode - The last error code\n * @param {Function} checkDuplicateChoiceResponseFn - Function to check for duplicate choice responses\n * @param {Function} checkValidResponseTypeFn - Function to check for valid response types\n * @param {Function} checkDuplicatedPatternFn - Function to check for duplicated patterns\n * @param {Function} checkCorrectResponseValueFn - Function to check correct response value\n */\nexport function validateCorrectResponse(\n  CMIElement: string,\n  value: any,\n  interaction: CMIInteractionsObject,\n  throwSCORMError: (errorCode: string | number, message?: string) => void,\n  lastErrorCode: string,\n  checkDuplicateChoiceResponseFn: (\n    interaction: CMIInteractionsObject,\n    value: any,\n    throwSCORMError: (errorCode: string, message?: string) => void,\n    lastErrorCode: string,\n  ) => void,\n  checkValidResponseTypeFn: (\n    response_type: ResponseType,\n    value: any,\n    interaction_type: string,\n    throwSCORMError: (errorCode: string, message?: string) => void,\n    checkCorrectResponseValue: (\n      interaction_type: string,\n      nodes: Array<any>,\n      value: any,\n    ) => void,\n  ) => void,\n  checkDuplicatedPatternFn: (\n    correct_response: CMIArray,\n    current_index: number,\n    value: any,\n  ) => boolean,\n  checkCorrectResponseValueFn: (\n    interaction_type: string,\n    nodes: Array<any>,\n    value: any,\n  ) => void,\n) {\n  const parts = CMIElement.split(\".\");\n  const pattern_index = Number(parts[4]);\n\n  const interaction_count = interaction.correct_responses._count;\n  checkDuplicateChoiceResponseFn(\n    interaction,\n    value,\n    throwSCORMError,\n    lastErrorCode,\n  );\n\n  const response_type = CorrectResponses[interaction.type];\n  if (\n    typeof response_type.limit === \"undefined\" ||\n    interaction_count <= response_type.limit\n  ) {\n    checkValidResponseTypeFn(\n      response_type,\n      value,\n      interaction.type,\n      throwSCORMError,\n      checkCorrectResponseValueFn,\n    );\n\n    if (\n      (lastErrorCode === \"0\" &&\n        (!response_type.duplicate ||\n          !checkDuplicatedPatternFn(\n            interaction.correct_responses,\n            pattern_index,\n            value,\n          ))) ||\n      (lastErrorCode === \"0\" && value === \"\")\n    ) {\n      // do nothing, we want the inverse\n    } else {\n      if (lastErrorCode === \"0\") {\n        throwSCORMError(\n          scorm2004_errors.GENERAL_SET_FAILURE,\n          \"Data Model Element Pattern Already Exists\",\n        );\n      }\n    }\n  } else {\n    throwSCORMError(\n      scorm2004_errors.GENERAL_SET_FAILURE,\n      \"Data Model Element Collection Limit Reached\",\n    );\n  }\n}\n\n/**\n * Check to see if a correct_response value has been duplicated\n * @param {CMIArray} correct_response\n * @param {number} current_index\n * @param {*} value\n * @return {boolean}\n */\nexport function checkDuplicatedPattern(\n  correct_response: CMIArray,\n  current_index: number,\n  value: any,\n): boolean {\n  let found = false;\n  const count = correct_response._count;\n  for (let i = 0; i < count && !found; i++) {\n    if (i !== current_index && correct_response.childArray[i] === value) {\n      found = true;\n    }\n  }\n  return found;\n}\n\n/**\n * Checks for a valid correct_response value\n * @param {string} interaction_type\n * @param {Array} nodes\n * @param {*} value\n * @param {Function} throwSCORMError - Function to throw a SCORM error\n * @param {Function} removeCorrectResponsePrefixes - Function to remove correct response prefixes\n * @param {string} lastErrorCode - The last error code\n */\nexport function checkCorrectResponseValue(\n  interaction_type: string,\n  nodes: Array<any>,\n  value: any,\n  throwSCORMError: (errorCode: string | number, message?: string) => void,\n  removeCorrectResponsePrefixes: (node: string) => any,\n  lastErrorCode: string,\n) {\n  const response = CorrectResponses[interaction_type];\n  const formatRegex = new RegExp(response.format);\n  for (let i = 0; i < nodes.length && lastErrorCode === \"0\"; i++) {\n    if (\n      interaction_type.match(\n        \"^(fill-in|long-fill-in|matching|performance|sequencing)$\",\n      )\n    ) {\n      nodes[i] = removeCorrectResponsePrefixes(nodes[i]);\n    }\n\n    if (response?.delimiter2) {\n      const values = nodes[i].split(response.delimiter2);\n      if (values.length === 2) {\n        const matches = values[0].match(formatRegex);\n        if (!matches) {\n          throwSCORMError(scorm2004_errors.TYPE_MISMATCH);\n        } else {\n          if (\n            !response.format2 ||\n            !values[1].match(new RegExp(response.format2))\n          ) {\n            throwSCORMError(scorm2004_errors.TYPE_MISMATCH);\n          }\n        }\n      } else {\n        throwSCORMError(scorm2004_errors.TYPE_MISMATCH);\n      }\n    } else {\n      const matches = nodes[i].match(formatRegex);\n      if (\n        (!matches && value !== \"\") ||\n        (!matches && interaction_type === \"true-false\")\n      ) {\n        throwSCORMError(scorm2004_errors.TYPE_MISMATCH);\n      } else {\n        if (interaction_type === \"numeric\" && nodes.length > 1) {\n          if (Number(nodes[0]) > Number(nodes[1])) {\n            throwSCORMError(scorm2004_errors.TYPE_MISMATCH);\n          }\n        } else {\n          if (nodes[i] !== \"\" && response.unique) {\n            for (let j = 0; j < i && lastErrorCode === \"0\"; j++) {\n              if (nodes[i] === nodes[j]) {\n                throwSCORMError(scorm2004_errors.TYPE_MISMATCH);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * Remove prefixes from correct_response\n * @param {string} node\n * @param {Function} throwSCORMError - Function to throw a SCORM error\n * @return {*}\n */\nexport function removeCorrectResponsePrefixes(\n  node: string,\n  throwSCORMError: (errorCode: string | number, message?: string) => void,\n): any {\n  let seenOrder = false;\n  let seenCase = false;\n  let seenLang = false;\n\n  const prefixRegex = new RegExp(\n    \"^({(lang|case_matters|order_matters)=([^}]+)})\",\n  );\n  let matches = node.match(prefixRegex);\n  let langMatches = null;\n  while (matches) {\n    switch (matches[2]) {\n      case \"lang\":\n        langMatches = node.match(scorm2004_regex.CMILangcr);\n        if (langMatches) {\n          const lang = langMatches[3];\n          if (lang !== undefined && lang.length > 0) {\n            if (!ValidLanguages.includes(lang.toLowerCase())) {\n              throwSCORMError(scorm2004_errors.TYPE_MISMATCH);\n            }\n          }\n        }\n        seenLang = true;\n        break;\n      case \"case_matters\":\n        if (!seenLang && !seenOrder && !seenCase) {\n          if (matches[3] !== \"true\" && matches[3] !== \"false\") {\n            throwSCORMError(scorm2004_errors.TYPE_MISMATCH);\n          }\n        }\n\n        seenCase = true;\n        break;\n      case \"order_matters\":\n        if (!seenCase && !seenLang && !seenOrder) {\n          if (matches[3] !== \"true\" && matches[3] !== \"false\") {\n            throwSCORMError(scorm2004_errors.TYPE_MISMATCH);\n          }\n        }\n\n        seenOrder = true;\n        break;\n    }\n    node = node.substring(matches[1].length);\n    matches = node.match(prefixRegex);\n  }\n\n  return node;\n}\n"],"names":["NAVBoolean","UNKNOWN","TRUE","FALSE","SuccessStatus","PASSED","FAILED","CompletionStatus","COMPLETED","INCOMPLETE","LogLevelEnum","_","DEBUG","INFO","WARN","ERROR","NONE","scorm12_errors","error_descriptions","errorCode","hasOwnProperty","call","String","basicMessage","detailMessage","DefaultSettings","autocommit","autocommitSeconds","asyncCommit","sendFullCommit","lmsCommitUrl","dataCommitFormat","commitRequestDataType","autoProgress","logLevel","selfReportSessionTime","alwaysSendTotalTime","renderCommonCommitFields","strict_errors","xhrHeaders","xhrWithCredentials","fetchMode","responseHandler","response","text","responseText","httpResult","JSON","parse","result","SCORM_TRUE","status","SCORM_FALSE","requestHandler","commitObject","onLogMessage","defaultLogHandler","scoItemIds","scoItemIdValidator","globalObjectiveIds","messageLevel","logMessage","console","error","warn","info","debug","log","API","when","callback","_cancelled","this","_API","_timeout","setTimeout","wrapper","bind","_callback","cancel","clearTimeout","commit","settings","error_codes","processHttpRequest","url","params","immediate","apiLog","processListeners","genericError","GENERAL","performFetch","then","transformResponse","process","fetch","method","mode","body","Array","join","stringify","headers","credentials","undefined","keepalive","json","Object","updateSettings","listenerMap","Map","listenerCount","parseListenerName","listenerName","listenerSplit","split","length","functionName","CMIElement","replace","on","parsedListener","listeners","get","push","set","off","listenerFunctions","listenerFunction","removeIndex","findIndex","obj","splice","delete","clear","has","newListeners","filter","value","listener","listenerHasCMIElement","CMIElementsMatch","endsWith","prefix","slice","reset","loadFromFlattenedJSON","loadFromJSON","setCMIValue","isNotInitialized","int_pattern","obj_pattern","interactions","objectives","others","key","prototype","intMatch","match","index","field","objMatch","sort","a","b","localeCompare","processItems","items","forEach","item","setStartingData","currentCMIElement","constructor","i","tempCMIElement","renderCMIToJSONString","cmi","k","v","renderCMIToJSONObject","getCommitObject","terminateCommit","renderCommitObject","renderCommitCMI","apiLogLevel","shouldTerminateCommit","includes","isCMIArray","throwSCORMError","validateCorrectResponse","getChildElement","checkObjectHasProperty","errorHandlingService","_error_codes","_apiLog","_throwSCORMError","_validateCorrectResponse","_getChildElement","_checkObjectHasProperty","_errorHandlingService","updateLastErrorCode","lastErrorCode","errorNumber","message","methodName","scorm2004","isInitialized","structure","refObject","returnValue","foundFirstIndex","invalidErrorMessage","invalidErrorCode","UNDEFINED_DATA_MODEL","idx","attribute","substring","READ_ONLY_ELEMENT","parseInt","isNaN","childArray","newChild","initialized","initialize","getCMIValue","uninitializedErrorMessage","_isTargetValid","VALUE_NOT_INITIALIZED","CHILDREN_ERROR","COUNT_ERROR","errorCodes","getLmsErrorMessageDetails","_lastErrorCode","_errorCodes","_getLmsErrorMessageDetails","clearSCORMError","success","handleValueAccessException","e","Error","_logLevel","_logHandler","getInstance","LoggingService","_instance","setLogLevel","level","getLogLevel","setLogHandler","handler","shouldLog","getNumericLevel","httpService","eventService","serializationService","cmiDataService","loggingService","_settings","BaseAPI","TypeError","currentState","STATE_NOT_INITIALIZED","_loggingService","_httpService","HttpService","_eventService","EventService","_serializationService","SerializationService","ErrorHandlingService","_cmiDataService","CMIDataService","commonReset","clearScheduledCommit","startingData","callbackName","initializeMessage","terminationMessage","INITIALIZED","isTerminated","TERMINATED","setStartTime","STATE_INITIALIZED","previousSettings","terminate","checkTerminated","checkState","TERMINATION_BEFORE_INIT","MULTIPLE_TERMINATION","STATE_TERMINATED","storeData","getValue","RETRIEVE_BEFORE_INIT","RETRIEVE_AFTER_TERM","setValue","commitCallback","STORE_BEFORE_INIT","STORE_AFTER_TERM","scheduleCommit","COMMIT_BEFORE_INIT","COMMIT_AFTER_TERM","getLastError","getErrorString","CMIErrorCode","getDiagnostic","beforeInitError","afterTermError","_errorNumber","_detail","_CMIElement","_value","_commonSetCMIValue","_commonGetCMIValue","data","ScheduledCommit","StringKeyMap","getOwnPropertyDescriptor","getPrototypeOf","jsonString","_initialized","_start_time","Date","getTime","BaseCMI","global_constants","scorm12_constants","cmi_children","core_children","score_children","comments_children","objectives_children","correct_responses_children","student_data_children","student_preference_children","interactions_children","scorm2004_constants","student_demographics_children","tries_children","attempt_records_children","paths_children","adl_data_children","scorm12_regex","CMIString256","CMIString4096","CMITime","CMITimespan","CMIInteger","CMISInteger","CMIDecimal","CMIIdentifier","CMIFeedback","CMIIndex","CMIStatus","CMIStatus2","CMIExit","CMIType","CMIResult","NAVEvent","score_range","audio_range","speed_range","weighting_range","text_range","scorm2004_regex","CMIString200","CMIString250","CMIString1000","CMIString4000","CMIString64000","CMILang","CMILangString250","CMILangcr","CMILangString250cr","CMILangString4000","CMIShortIdentifier","CMILongIdentifier","CMIIndexStore","CMICStatus","CMISStatus","NAVTarget","scaled_range","progress_range","_raw","_min","__children","__score_range","_max","max","__invalid_error_code","INVALID_SET_VALUE","__invalid_type_code","invalidTypeCode","TYPE_MISMATCH","__invalid_range_code","invalidRangeCode","VALUE_OUT_OF_RANGE","__decimal_regex","decimalRegex","__error_class","errorClass","_children","raw","validateScore","min","toJSON","checkValidFormat","regexPattern","allowEmptyString","formatRegex","RegExp","matches","_errorClass","checkValidRange","rangePattern","ranges","children","_errorCode","wipe","_count","extendStatics","d","setPrototypeOf","__proto__","p","__extends","__","create","__assign","assign","t","s","n","arguments","apply","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","done","__generator","f","y","label","sent","trys","ops","g","Iterator","verb","Symbol","iterator","op","pop","SuppressedError","name","errorMessage","detailedMessage","_detailedMessage","_errorMessage","BaseScormValidationError","global_errors","INITIALIZATION_FAILED","TERMINATION_FAILURE","ARGUMENT_ERROR","GENERAL_GET_FAILURE","GENERAL_SET_FAILURE","GENERAL_COMMIT_FAILURE","UNIMPLEMENTED_ELEMENT","WRITE_ONLY_ELEMENT","DEPENDENCY_NOT_ESTABLISHED","scorm2004_errors","MULTIPLE_TERMINATIONS","validationService","scoreRange","validateScorm12Audio","validateScorm12Language","validateScorm12Speed","validateScorm12Text","validateReadOnly","designations","D","H","M","S","getSecondsAsISODuration","memoize","totalSeconds","hours","Math","floor","dateObj","minutes","getUTCMinutes","seconds","getSeconds","ms","msStr","countDecimals","toFixed","duration","remainder","entries","designationsKey","current_seconds","indexOf","getDurationAsSeconds","timeString","timeRegex","parts","regexStr","durationRegex","exec","addTwoDurations","first","second","regex","flatten","recurse","cur","prop","isArray","keys","isEmpty","unflatten","pattern","from","m","num","formatMessage","paddedFunction","padEnd","messageString","stringMatches","str","tester","fn","keyFn","cache","args","check12ValidFormat","check12ValidRange","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","definition","o","defineProperty","enumerable","check2004ValidFormat","Scorm2004ValidationError","check2004ValidRange","_audio_level","_language","_delivery_speed","_audio_captioning","audio_level","language","delivery_speed","audio_captioning","LearnerResponses","format","delimiter","unique","choice","matching","format2","delimiter2","performance","sequencing","likert","numeric","other","CorrectResponses","duplicate","limit","delimiter3","_id","_type","_timestamp","_weighting","_learner_response","_result","_latency","_description","correct_responses","id","type","timestamp","weighting","learner_response","nodes","response_type","values","j","latency","description","_pattern","_scaled","scaled","readOnlyAfterInit","_comment","_location","_readOnlyAfterInit","comment","location","findObjectiveById","find","objective","findObjectiveByIndex","setObjectiveByIndex","_success_status","_completion_status","_progress_measure","score","Scorm2004CMIScore","success_status","completion_status","progress_measure","__version","_version","_learner_id","_learner_name","learner_id","learner_name","_entry","_exit","_session_time","_total_time","entry","exit","session_time","total_time","getCurrentTotalTime","sessionTime","startTime","start_time","_launch_data","_suspend_data","launch_data","suspend_data","_credit","_mode","_time_limit_action","_max_time_allowed","credit","time_limit_action","max_time_allowed","_scaled_passing_score","_completion_threshold","scaled_passing_score","completion_threshold","metadata","CMIMetadata","learner","CMILearner","session","CMISession","content","CMIContent","CMISettings","thresholds","CMIThresholds","learner_preference","CMILearnerPreference","comments_from_learner","CMICommentsFromLearner","comments_from_lms","CMICommentsFromLMS","CMIInteractions","CMIObjectives","ADLData","nav","ADLNav","_request","request_valid","ADLNavRequestValid","request","_store","store","_continue","_previous","_choice","_jump","jump","previous","continue","adl","navRequest","Function","mastery_override","_globalObjectives","CMI","ADL","Initialize","lmsInitialize","Terminate","lmsFinish","GetValue","lmsGetValue","SetValue","lmsSetValue","Commit","lmsCommit","GetLastError","lmsGetLastError","GetErrorString","lmsGetErrorString","GetDiagnostic","lmsGetDiagnostic","internalFinish","navActions","exitAll","abandon","abandonAll","choiceJumpRegex","target","groups","choice_target","jump_target","action","adlNavRequestRegex","commonSetCMIValue","globalObjectives","cmiObjectives","element_base","global_index","newGlobalObjective","CMIObjectivesObject","createCorrectResponsesObject","CMIInteractionsObjectivesObject","CMIInteractionsObject","CMICommentsObject","ADLDataObject","checkDuplicateChoiceResponse","checkValidResponseType","checkCorrectResponseValue","interaction","CMIInteractionsCorrectResponsesObject","interaction_type","interaction_count","checkDuplicateChoiceResponseFn","checkValidResponseTypeFn","checkDuplicatedPatternFn","checkCorrectResponseValueFn","pattern_index","checkDuplicatedPattern","commonGetCMIValue","detail","correct_response","current_index","found","count","removeCorrectResponsePrefixes","node","seenOrder","seenCase","seenLang","prefixRegex","langMatches","lang","toLowerCase","replaceWithAnotherScormAPI","newAPI","cmiExport","flattened","renderCommitCMIFn","totalTimeDuration","totalTimeSeconds","completionStatus","successStatus","scoreObject","Number","parseFloat","runtimeData"],"sourceRoot":""}