{"version":3,"file":"scorm2004.min.js","sources":["../../src/constants/api_constants.ts","../../src/utilities.ts","../../src/constants/enums.ts","../../src/constants/default_settings.ts","../../src/helpers/scheduled_commit.ts","../../src/services/HttpService.ts","../../src/services/EventService.ts","../../src/services/SerializationService.ts","../../src/exceptions.ts","../../src/services/LoggingService.ts","../../src/services/ErrorHandlingService.ts","../../src/services/OfflineStorageService.ts","../../src/cmi/common/base_cmi.ts","../../src/constants/error_codes.ts","../../src/cmi/common/array.ts","../../src/BaseAPI.ts","../../src/exceptions/scorm2004_exceptions.ts","../../src/cmi/common/validation.ts","../../src/cmi/scorm2004/validation.ts","../../src/constants/regex.ts","../../src/cmi/scorm2004/learner_preference.ts","../../src/constants/response_constants.ts","../../src/cmi/scorm2004/interactions.ts","../../src/exceptions/scorm12_exceptions.ts","../../src/cmi/scorm12/validation.ts","../../src/services/ValidationService.ts","../../src/cmi/common/score.ts","../../src/cmi/scorm2004/score.ts","../../src/cmi/scorm2004/comments.ts","../../src/cmi/scorm2004/objectives.ts","../../src/cmi/scorm2004/metadata.ts","../../src/cmi/scorm2004/learner.ts","../../src/cmi/scorm2004/status.ts","../../src/cmi/scorm2004/session.ts","../../src/cmi/scorm2004/content.ts","../../src/cmi/scorm2004/settings.ts","../../src/cmi/scorm2004/thresholds.ts","../../src/cmi/scorm2004/cmi.ts","../../src/cmi/scorm2004/adl.ts","../../src/cmi/scorm2004/sequencing/sequencing_rules.ts","../../src/cmi/scorm2004/sequencing/rollup_rules.ts","../../src/constants/language_constants.ts","../../src/cmi/scorm2004/sequencing/activity.ts","../../src/cmi/scorm2004/sequencing/activity_tree.ts","../../src/cmi/scorm2004/sequencing/sequencing_controls.ts","../../src/cmi/scorm2004/sequencing/sequencing.ts","../../src/Scorm2004API.ts"],"sourcesContent":["interface ErrorDescription {\n  basicMessage: string;\n  detailMessage: string;\n}\n\ninterface ErrorDescriptions {\n  [key: string]: ErrorDescription;\n}\n\ninterface ScormConstants {\n  cmi_children: string;\n  core_children: string;\n  score_children: string;\n  comments_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface AiccConstants extends ScormConstants {\n  student_demographics_children: string;\n  tries_children: string;\n  attempt_records_children: string;\n  paths_children: string;\n}\n\ninterface Scorm2004Constants {\n  cmi_children: string;\n  comments_children: string;\n  score_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  adl_data_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface GlobalConstants {\n  SCORM_TRUE: string;\n  SCORM_FALSE: string;\n  STATE_NOT_INITIALIZED: number;\n  STATE_INITIALIZED: number;\n  STATE_TERMINATED: number;\n}\n\nexport const global_constants: GlobalConstants = {\n  SCORM_TRUE: \"true\",\n  SCORM_FALSE: \"false\",\n  STATE_NOT_INITIALIZED: 0,\n  STATE_INITIALIZED: 1,\n  STATE_TERMINATED: 2,\n};\n\nexport const scorm12_constants: ScormConstants = {\n  // Children lists\n  cmi_children:\n    \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions\",\n  core_children:\n    \"student_id,student_name,lesson_location,credit,lesson_status,entry,score,total_time,lesson_mode,exit,session_time\",\n  score_children: \"raw,min,max\",\n  comments_children: \"content,location,time\",\n  objectives_children: \"id,score,status\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio,language,speed,text\",\n  interactions_children:\n    \"id,objectives,time,type,correct_responses,weighting,student_response,result,latency\",\n  error_descriptions: {\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage: \"No specific error code exists to describe the error.\",\n    },\n    \"201\": {\n      basicMessage: \"Invalid argument error\",\n      detailMessage:\n        \"Indicates that an argument represents an invalid data model element or is otherwise incorrect.\",\n    },\n    \"202\": {\n      basicMessage: \"Element cannot have children\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_children\" for a data model element that does not support the \"_children\" suffix.',\n    },\n    \"203\": {\n      basicMessage: \"Element not an array - cannot have count\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_count\" for a data model element that does not support the \"_count\" suffix.',\n    },\n    \"301\": {\n      basicMessage: \"Not initialized\",\n      detailMessage: \"Indicates that an API call was made before the call to lmsInitialize.\",\n    },\n    \"401\": {\n      basicMessage: \"Not implemented error\",\n      detailMessage:\n        \"The data model element indicated in a call to LMSGetValue or LMSSetValue is valid, but was not implemented by this LMS. SCORM 1.2 defines a set of data model elements as being optional for an LMS to implement.\",\n    },\n    \"402\": {\n      basicMessage: \"Invalid set value, element is a keyword\",\n      detailMessage:\n        'Indicates that LMSSetValue was called on a data model element that represents a keyword (elements that end in \"_children\" and \"_count\").',\n    },\n    \"403\": {\n      basicMessage: \"Element is read only\",\n      detailMessage: \"LMSSetValue was called with a data model element that can only be read.\",\n    },\n    \"404\": {\n      basicMessage: \"Element is write only\",\n      detailMessage: \"LMSGetValue was called on a data model element that can only be written to.\",\n    },\n    \"405\": {\n      basicMessage: \"Incorrect Data Type\",\n      detailMessage:\n        \"LMSSetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a LMSSetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\nexport const aicc_constants: AiccConstants = {\n  ...scorm12_constants,\n  ...{\n    cmi_children:\n      \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions,evaluation\",\n    student_preference_children:\n      \"audio,language,lesson_type,speed,text,text_color,text_location,text_size,video,windows\",\n    student_data_children: \"attempt_number,tries,mastery_score,max_time_allowed,time_limit_action\",\n    student_demographics_children:\n      \"city,class,company,country,experience,familiar_name,instructor_name,title,native_language,state,street_address,telephone,years_experience\",\n    tries_children: \"time,status,score\",\n    attempt_records_children: \"score,lesson_status\",\n    paths_children: \"location_id,date,time,status,why_left,time_in_element\",\n  },\n};\n\nexport const scorm2004_constants: Scorm2004Constants = {\n  // Children lists\n  cmi_children:\n    \"_version,comments_from_learner,comments_from_lms,completion_status,credit,entry,exit,interactions,launch_data,learner_id,learner_name,learner_preference,location,max_time_allowed,mode,objectives,progress_measure,scaled_passing_score,score,session_time,success_status,suspend_data,time_limit_action,total_time\",\n  comments_children: \"comment,timestamp,location\",\n  score_children: \"max,raw,scaled,min\",\n  objectives_children: \"progress_measure,completion_status,success_status,description,score,id\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio_level,audio_captioning,delivery_speed,language\",\n  interactions_children:\n    \"id,type,objectives,timestamp,correct_responses,weighting,learner_response,result,latency,description\",\n  adl_data_children: \"id,store\",\n  error_descriptions: {\n    \"0\": {\n      basicMessage: \"No Error\",\n      detailMessage: \"No error occurred, the previous API call was successful.\",\n    },\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage: \"No specific error code exists to describe the error.\",\n    },\n    \"102\": {\n      basicMessage: \"General Initialization Failure\",\n      detailMessage: \"Call to Initialize failed for an unknown reason.\",\n    },\n    \"103\": {\n      basicMessage: \"Already Initialized\",\n      detailMessage: \"Call to Initialize failed because Initialize was already called.\",\n    },\n    \"104\": {\n      basicMessage: \"Content Instance Terminated\",\n      detailMessage: \"Call to Initialize failed because Terminate was already called.\",\n    },\n    \"111\": {\n      basicMessage: \"General Termination Failure\",\n      detailMessage: \"Call to Terminate failed for an unknown reason.\",\n    },\n    \"112\": {\n      basicMessage: \"Termination Before Initialization\",\n      detailMessage: \"Call to Terminate failed because it was made before the call to Initialize.\",\n    },\n    \"113\": {\n      basicMessage: \"Termination After Termination\",\n      detailMessage: \"Call to Terminate failed because Terminate was already called.\",\n    },\n    \"122\": {\n      basicMessage: \"Retrieve Data Before Initialization\",\n      detailMessage: \"Call to GetValue failed because it was made before the call to Initialize.\",\n    },\n    \"123\": {\n      basicMessage: \"Retrieve Data After Termination\",\n      detailMessage: \"Call to GetValue failed because it was made after the call to Terminate.\",\n    },\n    \"132\": {\n      basicMessage: \"Store Data Before Initialization\",\n      detailMessage: \"Call to SetValue failed because it was made before the call to Initialize.\",\n    },\n    \"133\": {\n      basicMessage: \"Store Data After Termination\",\n      detailMessage: \"Call to SetValue failed because it was made after the call to Terminate.\",\n    },\n    \"142\": {\n      basicMessage: \"Commit Before Initialization\",\n      detailMessage: \"Call to Commit failed because it was made before the call to Initialize.\",\n    },\n    \"143\": {\n      basicMessage: \"Commit After Termination\",\n      detailMessage: \"Call to Commit failed because it was made after the call to Terminate.\",\n    },\n    \"201\": {\n      basicMessage: \"General Argument Error\",\n      detailMessage:\n        \"An invalid argument was passed to an API method (usually indicates that Initialize, Commit or Terminate did not receive the expected empty string argument.\",\n    },\n    \"301\": {\n      basicMessage: \"General Get Failure\",\n      detailMessage:\n        \"Indicates a failed GetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"351\": {\n      basicMessage: \"General Set Failure\",\n      detailMessage:\n        \"Indicates a failed SetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"391\": {\n      basicMessage: \"General Commit Failure\",\n      detailMessage:\n        \"Indicates a failed Commit call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"401\": {\n      basicMessage: \"Undefined Data Model Element\",\n      detailMessage:\n        \"The data model element name passed to GetValue or SetValue is not a valid SCORM data model element.\",\n    },\n    \"402\": {\n      basicMessage: \"Unimplemented Data Model Element\",\n      detailMessage:\n        \"The data model element indicated in a call to GetValue or SetValue is valid, but was not implemented by this LMS. In SCORM 2004, this error would indicate an LMS that is not fully SCORM conformant.\",\n    },\n    \"403\": {\n      basicMessage: \"Data Model Element Value Not Initialized\",\n      detailMessage:\n        \"Attempt to read a data model element that has not been initialized by the LMS or through a SetValue call. This error condition is often reached during normal execution of a SCO.\",\n    },\n    \"404\": {\n      basicMessage: \"Data Model Element Is Read Only\",\n      detailMessage: \"SetValue was called with a data model element that can only be read.\",\n    },\n    \"405\": {\n      basicMessage: \"Data Model Element Is Write Only\",\n      detailMessage: \"GetValue was called on a data model element that can only be written to.\",\n    },\n    \"406\": {\n      basicMessage: \"Data Model Element Type Mismatch\",\n      detailMessage:\n        \"SetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Data Model Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a SetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\n","/**\n * Constants for time conversion calculations.\n * These are used throughout the codebase for converting between different time formats.\n */\nexport const SECONDS_PER_SECOND = 1.0;\nexport const SECONDS_PER_MINUTE = 60;\nexport const SECONDS_PER_HOUR = 60 * SECONDS_PER_MINUTE;\nexport const SECONDS_PER_DAY = 24 * SECONDS_PER_HOUR;\n\ntype Designation = {\n  [key: string]: number;\n};\n\n/**\n * A record with string keys and unknown values.\n * This is a more type-safe alternative to using `any`.\n */\nexport type StringKeyMap = Record<string, unknown>;\n\nconst designations: Designation = {\n  D: SECONDS_PER_DAY,\n  H: SECONDS_PER_HOUR,\n  M: SECONDS_PER_MINUTE,\n  S: SECONDS_PER_SECOND,\n};\n\n/**\n * Converts a number of seconds to a formatted time string in HH:MM:SS format.\n * This function handles decimal seconds and ensures proper formatting with leading zeros.\n *\n * @param {number|null} totalSeconds - The total number of seconds to convert. If null or negative, returns \"00:00:00\".\n * @return {string} A formatted time string in HH:MM:SS format, with up to 2 decimal places for seconds if applicable.\n *\n * @example\n * // Returns \"01:30:45\"\n * getSecondsAsHHMMSS(5445);\n *\n * @example\n * // Returns \"00:00:30.5\"\n * getSecondsAsHHMMSS(30.5);\n *\n * @example\n * // Returns \"00:00:00\"\n * getSecondsAsHHMMSS(null);\n */\nexport const getSecondsAsHHMMSS = memoize((totalSeconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!totalSeconds || totalSeconds <= 0) {\n    return \"00:00:00\";\n  }\n\n  const hours = Math.floor(totalSeconds / SECONDS_PER_HOUR);\n  const dateObj = new Date(totalSeconds * 1000);\n  const minutes = dateObj.getUTCMinutes();\n  // make sure we add any possible decimal value\n  const seconds = dateObj.getSeconds();\n  const ms = totalSeconds % 1.0;\n  let msStr = \"\";\n\n  if (countDecimals(ms) > 0) {\n    if (countDecimals(ms) > 2) {\n      msStr = ms.toFixed(2);\n    } else {\n      msStr = String(ms);\n    }\n\n    msStr = \".\" + msStr.split(\".\")[1];\n  }\n\n  return (hours + \":\" + minutes + \":\" + seconds).replace(/\\b\\d\\b/g, \"0$&\") + msStr;\n});\n\n/**\n * Converts a number of seconds to an ISO 8601 duration string (e.g., \"PT1H30M45S\").\n * This function handles the complexity of formatting according to the ISO 8601 standard,\n * including the proper placement of the \"T\" separator for time components.\n *\n * @param {number|null} seconds - The number of seconds to convert. If null or negative, returns \"PT0S\".\n * @return {string} An ISO 8601 formatted duration string.\n *\n * @example\n * // Returns \"PT1H30M45S\" (1 hour, 30 minutes, 45 seconds)\n * getSecondsAsISODuration(5445);\n *\n * @example\n * // Returns \"PT30.5S\" (30.5 seconds)\n * getSecondsAsISODuration(30.5);\n *\n * @example\n * // Returns \"P1DT1H\" (1 day, 1 hour)\n * getSecondsAsISODuration(90000);\n *\n * @example\n * // Returns \"PT0S\" (0 seconds)\n * getSecondsAsISODuration(null);\n */\nexport const getSecondsAsISODuration = memoize((seconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!seconds || seconds <= 0) {\n    return \"PT0S\";\n  }\n\n  let duration = \"P\";\n  let remainder = seconds;\n\n  // Convert to array of entries and use functional methods\n  const designationEntries = Object.entries(designations);\n\n  // Process each time designation\n  designationEntries.forEach(([designationsKey, current_seconds]) => {\n    let value = Math.floor(remainder / current_seconds);\n    remainder = remainder % current_seconds;\n\n    // Limit decimal places\n    if (countDecimals(remainder) > 2) {\n      remainder = Number(Number(remainder).toFixed(2));\n    }\n\n    // If we have anything left in the remainder, and we're currently adding\n    // seconds to the duration, go ahead and add the decimal to the seconds\n    if (designationsKey === \"S\" && remainder > 0) {\n      value += remainder;\n    }\n\n    if (value) {\n      // Add the 'T' separator for time components if needed\n      const needsTimeSeparator =\n        (duration.indexOf(\"D\") > 0 || [\"H\", \"M\", \"S\"].includes(designationsKey)) &&\n        duration.indexOf(\"T\") === -1;\n\n      if (needsTimeSeparator) {\n        duration += \"T\";\n      }\n\n      duration += `${value}${designationsKey}`;\n    }\n  });\n\n  return duration;\n});\n\n/**\n * Converts a time string in HH:MM:SS format to the equivalent number of seconds.\n * This function is flexible and can handle various input types, converting them to strings as needed.\n *\n * @param {string|number|boolean|null} timeString - The time string to convert, typically in HH:MM:SS format.\n *                                                 If not a string, it will be converted to one.\n *                                                 If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} timeRegex - The regular expression used to validate the time string format.\n *                                    If a string is provided, it will be converted to a RegExp.\n * @return {number} The total number of seconds represented by the time string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getTimeAsSeconds(\"01:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getTimeAsSeconds(\"invalid\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 30 (converts number to string \"30\" then parses as 0:0:30)\n * getTimeAsSeconds(30, /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport const getTimeAsSeconds = memoize(\n  (timeString: string | number | boolean | null, timeRegex: RegExp | string): number => {\n    if (typeof timeString === \"number\" || typeof timeString === \"boolean\") {\n      timeString = String(timeString);\n    }\n    if (typeof timeRegex === \"string\") {\n      timeRegex = new RegExp(timeRegex);\n    }\n    if (!timeString || !timeString?.match?.(timeRegex)) {\n      return 0;\n    }\n\n    const parts = timeString.split(\":\");\n    const hours = Number(parts[0]);\n    const minutes = Number(parts[1]);\n    const seconds = Number(parts[2]);\n    return hours * 3600 + minutes * 60 + seconds;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (timeString, timeRegex) => {\n    const timeStr = typeof timeString === \"string\" ? timeString : String(timeString ?? \"\");\n    const regexStr = typeof timeRegex === \"string\" ? timeRegex : (timeRegex?.toString() ?? \"\");\n    return `${timeStr}:${regexStr}`;\n  },\n);\n\n/**\n * Converts an ISO 8601 duration string (e.g., \"PT1H30M45S\") to the equivalent number of seconds.\n * This function parses the duration string using a regular expression to extract years, days,\n * hours, minutes, and seconds components.\n *\n * @param {string|null} duration - The ISO 8601 duration string to convert.\n *                                If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n *                                       The regex should have capture groups for years, days, hours, minutes, and seconds.\n * @return {number} The total number of seconds represented by the duration string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getDurationAsSeconds(\"PT1H30M45S\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 90000 (1 day, 1 hour)\n * getDurationAsSeconds(\"P1DT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getDurationAsSeconds(\"invalid\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport const getDurationAsSeconds = memoize(\n  (duration: string | null, durationRegex: RegExp | string): number => {\n    if (typeof durationRegex === \"string\") {\n      durationRegex = new RegExp(durationRegex);\n    }\n\n    if (!duration || !duration?.match?.(durationRegex)) {\n      return 0;\n    }\n\n    const [, years, _, , days, hours, minutes, seconds] =\n      new RegExp(durationRegex).exec?.(duration) ?? [];\n    let result = 0.0;\n    result += Number(seconds) || 0.0;\n    result += Number(minutes) * 60.0 || 0.0;\n    result += Number(hours) * 3600.0 || 0.0;\n    result += Number(days) * (60 * 60 * 24.0) || 0.0;\n    result += Number(years) * (60 * 60 * 24 * 365.0) || 0.0;\n    return result;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (duration, durationRegex) => {\n    const durationStr = duration ?? \"\";\n    const regexStr =\n      typeof durationRegex === \"string\" ? durationRegex : (durationRegex?.toString() ?? \"\");\n    return `${durationStr}:${regexStr}`;\n  },\n);\n\n/**\n * Adds together two ISO 8601 duration strings and returns the result as a new ISO 8601 duration string.\n * This function works by converting both durations to seconds, adding them together, and then\n * converting the result back to an ISO 8601 duration string.\n *\n * @param {string} first - The first ISO 8601 duration string.\n * @param {string} second - The second ISO 8601 duration string.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n * @return {string} A new ISO 8601 duration string representing the sum of the two input durations.\n *\n * @example\n * // Returns \"PT2H\" (1 hour + 1 hour = 2 hours)\n * addTwoDurations(\"PT1H\", \"PT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"PT1H30M\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addTwoDurations(\"PT1H\", \"PT30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"P1DT1H30M\" (1 day + 1 hour and 30 minutes = 1 day, 1 hour, and 30 minutes)\n * addTwoDurations(\"P1D\", \"PT1H30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport function addTwoDurations(\n  first: string,\n  second: string,\n  durationRegex: RegExp | string,\n): string {\n  const regex: RegExp =\n    typeof durationRegex === \"string\" ? new RegExp(durationRegex) : durationRegex;\n  return getSecondsAsISODuration(\n    getDurationAsSeconds(first, regex) + getDurationAsSeconds(second, regex),\n  );\n}\n\n/**\n * Adds together two time strings in HH:MM:SS format and returns the result as a new time string.\n * This function works by converting both time strings to seconds, adding them together, and then\n * converting the result back to an HH:MM:SS format.\n *\n * @param {string} first - The first time string in HH:MM:SS format.\n * @param {string} second - The second time string in HH:MM:SS format.\n * @param {RegExp|string} timeRegex - The regular expression used to validate and parse the time strings.\n *                                   If a string is provided, it will be converted to a RegExp.\n * @return {string} A new time string in HH:MM:SS format representing the sum of the two input times.\n *\n * @example\n * // Returns \"02:00:00\" (1 hour + 1 hour = 2 hours)\n * addHHMMSSTimeStrings(\"01:00:00\", \"01:00:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:00\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:45\" (1 hour + 30 minutes and 45 seconds = 1 hour, 30 minutes, and 45 seconds)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport function addHHMMSSTimeStrings(\n  first: string,\n  second: string,\n  timeRegex: RegExp | string,\n): string {\n  if (typeof timeRegex === \"string\") {\n    timeRegex = new RegExp(timeRegex);\n  }\n  return getSecondsAsHHMMSS(\n    getTimeAsSeconds(first, timeRegex) + getTimeAsSeconds(second, timeRegex),\n  );\n}\n\n/**\n * Flattens a nested JSON object into a flat object with dot notation for nested properties.\n * This function recursively traverses the object and creates new keys using dot notation\n * for nested objects and bracket notation for arrays.\n *\n * @param {StringKeyMap} data - The nested object to flatten.\n * @return {StringKeyMap} A flattened object where nested properties are represented with dot notation.\n *\n * @example\n * // Returns { \"a\": 1, \"b.c\": 2, \"b.d\": 3, \"e[0]\": 4, \"e[1]\": 5 }\n * flatten({\n *   a: 1,\n *   b: { c: 2, d: 3 },\n *   e: [4, 5]\n * });\n *\n * @example\n * // Returns { \"\": [] } for an empty array\n * flatten([]);\n *\n * @example\n * // Returns { \"\": {} } for an empty object\n * flatten({});\n */\nexport function flatten(data: StringKeyMap): StringKeyMap {\n  const result: StringKeyMap = {};\n\n  /**\n   * Recurse through the object\n   * @param {*} cur\n   * @param {*} prop\n   */\n  function recurse(cur: any, prop: any) {\n    if (Object(cur) !== cur) {\n      result[prop] = cur;\n    } else if (Array.isArray(cur)) {\n      // Use forEach instead of for loop\n      cur.forEach((item, i) => {\n        recurse(item, `${prop}[${i}]`);\n      });\n\n      if (cur.length === 0) result[prop] = [];\n    } else {\n      const keys = Object.keys(cur).filter((p) => Object.prototype.hasOwnProperty.call(cur, p));\n\n      const isEmpty = keys.length === 0;\n\n      // Use forEach instead of for...in loop\n      keys.forEach((p) => {\n        recurse(cur[p], prop ? `${prop}.${p}` : p);\n      });\n\n      if (isEmpty && prop) result[prop] = {};\n    }\n  }\n\n  recurse(data, \"\");\n  return result;\n}\n\n/**\n * Converts a flattened object back into a nested object structure.\n * This function is the inverse of `flatten()`. It parses dot notation and bracket notation\n * in property names to recreate the original nested structure.\n *\n * @param {StringKeyMap} data - The flattened object to unflatten.\n * @return {object} A nested object recreated from the flattened structure.\n *\n * @example\n * // Returns { a: 1, b: { c: 2, d: 3 }, e: [4, 5] }\n * unflatten({\n *   \"a\": 1,\n *   \"b.c\": 2,\n *   \"b.d\": 3,\n *   \"e[0]\": 4,\n *   \"e[1]\": 5\n * });\n *\n * @example\n * // Handles array indices correctly\n * unflatten({\n *   \"users[0].name\": \"John\",\n *   \"users[0].email\": \"john@example.com\",\n *   \"users[1].name\": \"Jane\",\n *   \"users[1].email\": \"jane@example.com\"\n * });\n * // Returns:\n * // {\n * //   users: [\n * //     { name: \"John\", email: \"john@example.com\" },\n * //     { name: \"Jane\", email: \"jane@example.com\" }\n * //   ]\n * // }\n */\nexport function unflatten(data: StringKeyMap): object {\n  \"use strict\";\n\n  if (Object(data) !== data || Array.isArray(data)) return data;\n  const result: StringKeyMap = {};\n\n  // Regex pattern for parsing property paths\n  const pattern = /\\.?([^.[\\]]+)|\\[(\\d+)]/g;\n\n  // Get all own properties and process them\n  Object.keys(data)\n    .filter((p) => Object.prototype.hasOwnProperty.call(data, p))\n    .forEach((p) => {\n      let cur = result;\n      let prop = \"\";\n\n      // Create a new regex instance for each property to reset lastIndex\n      const regex = new RegExp(pattern);\n\n      // Process all matches in the property path\n      Array.from({ length: p.match(new RegExp(pattern, \"g\"))?.length ?? 0 }, () =>\n        regex.exec(p),\n      ).forEach((m) => {\n        if (m) {\n          // Create array or object as needed\n          cur = (cur[prop] ?? (cur[prop] = m[2] ? [] : ({} as StringKeyMap))) as StringKeyMap;\n          prop = m[2] || m[1];\n        }\n      });\n\n      cur[prop] = data[p];\n    });\n\n  return (result[\"\"] ?? result) as object;\n}\n\n/**\n * Counts the number of decimal places in a number.\n * This function handles both integer and floating-point numbers.\n *\n * @param {number} num - The number to analyze.\n * @return {number} The number of decimal places. Returns 0 for integers or if the number doesn't have a decimal point.\n *\n * @example\n * // Returns 0\n * countDecimals(42);\n *\n * @example\n * // Returns 2\n * countDecimals(3.14);\n *\n * @example\n * // Returns 5\n * countDecimals(1.23456);\n */\nexport function countDecimals(num: number): number {\n  if (Math.floor(num) === num || String(num)?.indexOf?.(\".\") < 0) return 0;\n  const parts = num.toString().split(\".\")?.[1];\n  return parts?.length ?? 0;\n}\n\n/**\n * Formats SCORM messages for consistent and readable logging.\n * This function pads the function name and CMI element to create aligned log messages\n * that are easier to read in log files or console output.\n *\n * @param {string} functionName - The name of the function that generated the message.\n * @param {string} message - The message content to be logged.\n * @param {string} [CMIElement] - Optional. The CMI element related to the message.\n * @return {string} A formatted message string with consistent padding.\n *\n * @example\n * // Returns \"initialize          : Successfully initialized\"\n * formatMessage(\"initialize\", \"Successfully initialized\");\n *\n * @example\n * // Returns \"getValue            : cmi.core.student_id                                             : 12345\"\n * formatMessage(\"getValue\", \"12345\", \"cmi.core.student_id\");\n *\n * @example\n * // Returns \"setValue            : cmi.core.lesson_status                                          : completed\"\n * formatMessage(\"setValue\", \"completed\", \"cmi.core.lesson_status\");\n */\nexport function formatMessage(functionName: string, message: string, CMIElement?: string): string {\n  const baseLength = 20;\n\n  // Use string padding instead of loops\n  const paddedFunction = functionName.padEnd(baseLength);\n  let messageString = `${paddedFunction}: `;\n\n  if (CMIElement) {\n    const CMIElementBaseLength = 70;\n    // Add CMIElement and pad to the required length\n    messageString += CMIElement;\n    messageString = messageString.padEnd(CMIElementBaseLength);\n  }\n\n  // Add the message (or empty string if null/undefined)\n  messageString += message ?? \"\";\n\n  return messageString;\n}\n\n/**\n * Checks if a string contains a specific pattern using regular expression matching.\n * This function is a wrapper around JavaScript's String.match() method that handles\n * null/undefined values gracefully.\n *\n * @param {string} str - The string to search within. If null or undefined, returns false.\n * @param {string} tester - The pattern to search for. Can be a regular expression pattern.\n * @return {boolean} True if the pattern is found in the string, false otherwise.\n *\n * @example\n * // Returns true\n * stringMatches(\"Hello, world!\", \"world\");\n *\n * @example\n * // Returns true\n * stringMatches(\"The quick brown fox\", \"\\\\w+\\\\s+\\\\w+\");\n *\n * @example\n * // Returns false\n * stringMatches(\"Hello, world!\", \"universe\");\n *\n * @example\n * // Returns false (handles null gracefully)\n * stringMatches(null, \"test\");\n */\nexport function stringMatches(str: string, tester: string): boolean {\n  return str?.match(tester) !== null;\n}\n\n/**\n * Creates a memoized (cached) version of a function for performance optimization.\n * This function caches the results of previous calls with the same arguments,\n * avoiding redundant calculations for repeated calls with the same input.\n *\n * @template T - The type of the function to memoize\n * @param {T} fn - The function to memoize\n * @param {Function} [keyFn] - Optional function to generate a custom cache key.\n *                           Useful for functions with complex arguments that can't be serialized.\n * @return {T} A memoized version of the input function with the same signature\n *\n * @example\n * // Basic usage with a simple function\n * const memoizedAdd = memoize((a, b) => {\n *   console.log('Calculating...');\n *   return a + b;\n * });\n *\n * memoizedAdd(1, 2); // Logs \"Calculating...\" and returns 3\n * memoizedAdd(1, 2); // Returns 3 without logging (uses cached result)\n *\n * @example\n * // Using a custom key function for objects that can't be serialized\n * const memoizedProcessUser = memoize(\n *   (user) => {\n *     console.log('Processing user...');\n *     return { ...user, processed: true };\n *   },\n *   (user) => user.id // Use user.id as the cache key\n * );\n *\n * memoizedProcessUser({ id: 123, name: 'John' }); // Logs and processes\n * memoizedProcessUser({ id: 123, name: 'John' }); // Uses cached result\n */\nexport function memoize<T extends (...args: any[]) => any>(\n  fn: T,\n  keyFn?: (...args: Parameters<T>) => string,\n): T {\n  const cache = new Map<string, ReturnType<T>>();\n\n  return ((...args: Parameters<T>): ReturnType<T> => {\n    const key = keyFn ? keyFn(...args) : JSON.stringify(args);\n\n    return cache.has(key)\n      ? (cache.get(key) as ReturnType<T>)\n      : (() => {\n          const result = fn(...args);\n          cache.set(key, result);\n          return result;\n        })();\n  }) as T;\n}\n","// Using plain objects instead of enums for better compatibility with strip-only mode\n// This approach avoids TypeScript enum runtime code while maintaining the same API\n\n// NAVBoolean values\nexport const NAVBoolean = {\n  UNKNOWN: \"unknown\",\n  TRUE: \"true\",\n  FALSE: \"false\",\n};\n\n// Type for NAVBoolean values\nexport type NAVBoolean = (typeof NAVBoolean)[keyof typeof NAVBoolean];\n\n// SuccessStatus values\nexport const SuccessStatus = {\n  PASSED: \"passed\",\n  FAILED: \"failed\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for SuccessStatus values\nexport type SuccessStatus = (typeof SuccessStatus)[keyof typeof SuccessStatus];\n\n// CompletionStatus values\nexport const CompletionStatus = {\n  COMPLETED: \"completed\",\n  INCOMPLETE: \"incomplete\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for CompletionStatus values\nexport type CompletionStatus = (typeof CompletionStatus)[keyof typeof CompletionStatus];\n\n// LogLevelEnum values\nexport const LogLevelEnum = {\n  _: 0,\n  DEBUG: 1,\n  INFO: 2,\n  WARN: 3,\n  ERROR: 4,\n  NONE: 5,\n};\n\n// Type for LogLevelEnum values\nexport type LogLevelEnum = (typeof LogLevelEnum)[keyof typeof LogLevelEnum];\n","import { InternalSettings, LogLevel, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"./api_constants\";\nimport { LogLevelEnum } from \"./enums\";\n\n/**\n * Default settings for the SCORM API\n */\nexport const DefaultSettings: InternalSettings = {\n  autocommit: false,\n  autocommitSeconds: 10,\n  asyncCommit: false,\n  sendFullCommit: true,\n  lmsCommitUrl: false,\n  dataCommitFormat: \"json\",\n  commitRequestDataType: \"application/json;charset=UTF-8\",\n  autoProgress: false,\n  logLevel: LogLevelEnum.ERROR,\n  selfReportSessionTime: false,\n  alwaysSendTotalTime: false,\n  renderCommonCommitFields: false,\n  strict_errors: true,\n  xhrHeaders: {},\n  xhrWithCredentials: false,\n  fetchMode: \"cors\",\n  useBeaconInsteadOfFetch: \"never\",\n  responseHandler: async function (response: Response): Promise<ResultObject> {\n    if (typeof response !== \"undefined\") {\n      let httpResult = null;\n\n      // Handle both text() and json() response methods\n      try {\n        if (typeof response.json === \"function\") {\n          // Try to get JSON directly if the method exists\n          httpResult = await response.json();\n        } else if (typeof response.text === \"function\") {\n          // Fall back to text() if json() is not available\n          const responseText = await response.text();\n          if (responseText) {\n            httpResult = JSON.parse(responseText);\n          }\n        }\n      } catch (e) {\n        // If parsing fails, continue with null httpResult\n      }\n\n      if (httpResult === null || !{}.hasOwnProperty.call(httpResult, \"result\")) {\n        if (response.status === 200) {\n          return {\n            result: global_constants.SCORM_TRUE,\n            errorCode: 0,\n          };\n        } else {\n          return {\n            result: global_constants.SCORM_FALSE,\n            errorCode: 101,\n          };\n        }\n      } else {\n        return {\n          result: httpResult.result,\n          errorCode: httpResult.errorCode\n            ? httpResult.errorCode\n            : httpResult.result === global_constants.SCORM_TRUE\n              ? 0\n              : 101,\n        };\n      }\n    }\n    return {\n      result: global_constants.SCORM_FALSE,\n      errorCode: 101,\n    };\n  },\n  requestHandler: function (commitObject) {\n    return commitObject;\n  },\n  onLogMessage: defaultLogHandler,\n  scoItemIds: [],\n  scoItemIdValidator: false,\n  globalObjectiveIds: [],\n\n  // Offline support settings\n  enableOfflineSupport: false,\n  courseId: \"\",\n  syncOnInitialize: true,\n  syncOnTerminate: true,\n  maxSyncAttempts: 5,\n};\n\nexport function defaultLogHandler(messageLevel: LogLevel, logMessage: string): void {\n  switch (messageLevel) {\n    case \"4\":\n    case 4:\n    case \"ERROR\":\n    case LogLevelEnum.ERROR:\n      console.error(logMessage);\n      break;\n    case \"3\":\n    case 3:\n    case \"WARN\":\n    case LogLevelEnum.WARN:\n      console.warn(logMessage);\n      break;\n    case \"2\":\n    case 2:\n    case \"INFO\":\n    case LogLevelEnum.INFO:\n      console.info(logMessage);\n      break;\n    case \"1\":\n    case 1:\n    case \"DEBUG\":\n    case LogLevelEnum.DEBUG:\n      if (console.debug) {\n        console.debug(logMessage);\n      } else {\n        console.log(logMessage);\n      }\n      break;\n  }\n}\n","import BaseAPI from \"../BaseAPI\";\n\n/**\n * Private class that wraps a timeout call to the commit() function\n */\nexport class ScheduledCommit {\n  private _API;\n  private _cancelled = false;\n  private readonly _timeout;\n  private readonly _callback;\n\n  /**\n   * Constructor for ScheduledCommit\n   * @param {BaseAPI} API\n   * @param {number} when\n   * @param {string} callback\n   */\n  constructor(API: BaseAPI, when: number, callback: string) {\n    this._API = API;\n    this._timeout = setTimeout(this.wrapper.bind(this), when);\n    this._callback = callback;\n  }\n\n  /**\n   * Cancel any currently scheduled commit\n   */\n  cancel() {\n    this._cancelled = true;\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n  }\n\n  /**\n   * Wrap the API commit call to check if the call has already been cancelled\n   */\n  wrapper() {\n    if (!this._cancelled) {\n      (async () => await this._API.commit(this._callback))();\n    }\n  }\n}\n","import { CommitObject, InternalSettings, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { IHttpService } from \"../interfaces/services\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { StringKeyMap } from \"../utilities\";\n\n/**\n * Service for handling HTTP communication with the LMS\n */\nexport class HttpService implements IHttpService {\n  private settings: InternalSettings;\n  private error_codes: ErrorCode;\n\n  /**\n   * Constructor for HttpService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   */\n  constructor(settings: InternalSettings, error_codes: ErrorCode) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n  }\n\n  /**\n   * Sends HTTP requests to the LMS with special handling for immediate and standard requests.\n   *\n   * This method handles communication with the LMS server, implementing two distinct\n   * request handling strategies based on the context:\n   *\n   * 1. Immediate Mode (used during termination):\n   *    When immediate=true, the method:\n   *    - Initiates the fetch request but doesn't wait for it to complete\n   *    - Returns a success result immediately\n   *    - Processes the response asynchronously when it arrives\n   *\n   *    This is critical for browser compatibility during page unload/termination,\n   *    as some browsers (especially Chrome) may cancel synchronous or awaited\n   *    requests when a page is closing.\n   *\n   * 2. Standard Mode (normal operation):\n   *    When immediate=false, the method:\n   *    - Processes the request parameters through the configured requestHandler\n   *    - Awaits the fetch response completely\n   *    - Transforms the response using the configured responseHandler\n   *    - Triggers appropriate event listeners based on success/failure\n   *    - Returns the complete result with appropriate error codes\n   *\n   * The method also includes error handling to catch network failures or other\n   * exceptions that might occur during the request process.\n   *\n   * @param {string} url - The URL endpoint to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The data to send to the LMS\n   * @param {boolean} immediate - Whether to send the request immediately without waiting (true) or process normally (false)\n   * @param {Function} apiLog - Function to log API messages with appropriate levels\n   * @param {Function} processListeners - Function to trigger event listeners for commit events\n   * @return {Promise<ResultObject>} - A promise that resolves with the result of the request\n   *\n   * @example\n   * // Standard request (waits for response)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   false,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   *\n   * @example\n   * // Immediate request (for termination)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   true,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   * // result will be success immediately, regardless of actual HTTP result\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n    apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    const genericError: ResultObject = {\n      result: global_constants.SCORM_FALSE,\n      errorCode: this.error_codes.GENERAL,\n    };\n\n    // If immediate mode (for termination), handle differently\n    if (immediate) {\n      return this._handleImmediateRequest(url, params, processListeners);\n    }\n\n    // Standard request processing\n    try {\n      const processedParams = this.settings.requestHandler(params) as\n        | CommitObject\n        | StringKeyMap\n        | Array<any>;\n      const response = await this.performFetch(url, processedParams);\n      return this.transformResponse(response, processListeners);\n    } catch (e) {\n      apiLog(\"processHttpRequest\", e, LogLevelEnum.ERROR);\n      processListeners(\"CommitError\");\n      return genericError;\n    }\n  }\n\n  /**\n   * Handles an immediate request (used during termination)\n   * @param {string} url - The URL to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The parameters to include in the request\n   * @param {Function} processListeners - Function to process event listeners\n   * @return {ResultObject} - A success result object\n   * @private\n   */\n  private _handleImmediateRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): ResultObject {\n    // Use Beacon API for final commit if specified in settings\n    if (this.settings.useBeaconInsteadOfFetch !== \"never\") {\n      const { body, contentType } = this._prepareRequestBody(params);\n      navigator.sendBeacon(url, new Blob([body], { type: contentType }));\n    } else {\n      // Use regular fetch with keepalive\n      this.performFetch(url, params).then(async (response) => {\n        await this.transformResponse(response, processListeners);\n      });\n    }\n\n    // Return success immediately without waiting for response\n    return {\n      result: global_constants.SCORM_TRUE,\n      errorCode: 0,\n    };\n  }\n\n  /**\n   * Prepares the request body and content type based on params type\n   * @param {CommitObject|StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Object} - Object containing body and contentType\n   * @private\n   */\n  private _prepareRequestBody(params: CommitObject | StringKeyMap | Array<any>): {\n    body: string;\n    contentType: string;\n  } {\n    const body = params instanceof Array ? params.join(\"&\") : JSON.stringify(params);\n    const contentType =\n      params instanceof Array\n        ? \"application/x-www-form-urlencoded\"\n        : this.settings.commitRequestDataType;\n\n    return { body, contentType };\n  }\n\n  /**\n   * Perform the fetch request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - The response from the LMS\n   * @private\n   */\n  private async performFetch(url: string, params: StringKeyMap | Array<any>): Promise<Response> {\n    // Use Beacon API if specified in settings\n    if (this.settings.useBeaconInsteadOfFetch === \"always\") {\n      return this.performBeacon(url, params);\n    }\n\n    const { body, contentType } = this._prepareRequestBody(params);\n    const init = {\n      method: \"POST\",\n      mode: this.settings.fetchMode,\n      body,\n      headers: {\n        ...this.settings.xhrHeaders,\n        \"Content-Type\": contentType,\n      },\n      keepalive: true,\n    } as RequestInit;\n\n    if (this.settings.xhrWithCredentials) {\n      init.credentials = \"include\";\n    }\n\n    return fetch(url, init);\n  }\n\n  /**\n   * Perform the beacon request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - A promise that resolves with a mock Response object\n   * @private\n   */\n  private async performBeacon(url: string, params: StringKeyMap | Array<any>): Promise<Response> {\n    const { body, contentType } = this._prepareRequestBody(params);\n\n    // Send the beacon request\n    const beaconSuccess = navigator.sendBeacon(url, new Blob([body], { type: contentType }));\n\n    // Create a mock Response object since sendBeacon doesn't return a Response\n    return Promise.resolve({\n      status: beaconSuccess ? 200 : 0,\n      ok: beaconSuccess,\n      json: async () => ({\n        result: beaconSuccess ? \"true\" : \"false\",\n        errorCode: beaconSuccess ? 0 : this.error_codes.GENERAL,\n      }),\n      text: async () =>\n        JSON.stringify({\n          result: beaconSuccess ? \"true\" : \"false\",\n          errorCode: beaconSuccess ? 0 : this.error_codes.GENERAL,\n        }),\n    } as Response);\n  }\n\n  /**\n   * Transforms the response from the LMS to a ResultObject\n   * @param {Response} response - The response from the LMS\n   * @param {Function} processListeners - Function to process event listeners\n   * @return {Promise<ResultObject>} - The transformed response\n   * @private\n   */\n  private async transformResponse(\n    response: Response,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    // Parse the response using the configured handler or default to json\n    const result =\n      typeof this.settings.responseHandler === \"function\"\n        ? await this.settings.responseHandler(response)\n        : await response.json();\n\n    // Ensure result has an errorCode property\n    if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n      result.errorCode = this._isSuccessResponse(response, result) ? 0 : this.error_codes.GENERAL;\n    }\n\n    // Trigger appropriate event based on success/failure\n    if (this._isSuccessResponse(response, result)) {\n      processListeners(\"CommitSuccess\");\n    } else {\n      processListeners(\"CommitError\", undefined, result.errorCode);\n    }\n\n    return result;\n  }\n\n  /**\n   * Determines if a response is successful based on status code and result\n   * @param {Response} response - The HTTP response\n   * @param {ResultObject} result - The parsed result object\n   * @return {boolean} - Whether the response is successful\n   * @private\n   */\n  private _isSuccessResponse(response: Response, result: ResultObject): boolean {\n    return (\n      response.status >= 200 &&\n      response.status <= 299 &&\n      (result.result === \"true\" || result.result === global_constants.SCORM_TRUE)\n    );\n  }\n\n  /**\n   * Updates the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: InternalSettings): void {\n    this.settings = settings;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { IEventService } from \"../interfaces/services\";\n\n/**\n * Interface for a listener object\n */\ninterface Listener {\n  functionName: string;\n  CMIElement: string | null;\n  callback: Function;\n}\n\n/**\n * Type for parsed listener information\n */\ninterface ParsedListener {\n  functionName: string;\n  CMIElement: string | null;\n}\n\n/**\n * Service for handling event listeners and event processing\n */\nexport class EventService implements IEventService {\n  // Map of function names to listeners for faster lookups\n  private listenerMap: Map<string, Listener[]> = new Map();\n  // Total count of listeners for logging\n  private listenerCount = 0;\n  // Function to log API messages\n  private readonly apiLog: (\n    functionName: string,\n    message: string,\n    messageLevel: LogLevel,\n    CMIElement?: string,\n  ) => void;\n\n  /**\n   * Constructor for EventService\n   * @param {Function} apiLog - Function to log API messages\n   */\n  constructor(\n    apiLog: (\n      functionName: string,\n      message: string,\n      messageLevel: LogLevel,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.apiLog = apiLog;\n  }\n\n  /**\n   * Parses a listener name into its components\n   *\n   * @param {string} listenerName - The name of the listener\n   * @returns {ParsedListener|null} - The parsed listener information or null if invalid\n   */\n  private parseListenerName(listenerName: string): ParsedListener | null {\n    const listenerSplit = listenerName.split(\".\");\n    if (listenerSplit.length === 0) return null;\n\n    const functionName = listenerSplit[0];\n    let CMIElement = null;\n\n    if (listenerSplit.length > 1) {\n      CMIElement = listenerName.replace(`${functionName}.`, \"\");\n    }\n\n    return { functionName, CMIElement };\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener\n   * @param {Function} callback - The callback function to execute when the event occurs\n   */\n  on(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get or create the array for this function name\n      const listeners = this.listenerMap.get(functionName) ?? [];\n\n      // Add the new listener\n      listeners.push({\n        functionName,\n        CMIElement,\n        callback,\n      });\n\n      // Update the map and count\n      this.listenerMap.set(functionName, listeners);\n      this.listenerCount++;\n\n      this.apiLog(\n        \"on\",\n        `Added event listener: ${this.listenerCount}`,\n        LogLevelEnum.INFO,\n        functionName,\n      );\n    }\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener\n   *\n   * @param {string} listenerName - The name of the listener to remove\n   * @param {Function} callback - The callback function to remove\n   */\n  off(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get the listeners for this function name\n      const listeners = this.listenerMap.get(functionName);\n      if (!listeners) continue;\n\n      // Find the index of the listener to remove\n      const removeIndex = listeners.findIndex(\n        (obj) => obj.CMIElement === CMIElement && obj.callback === callback,\n      );\n\n      if (removeIndex !== -1) {\n        // Remove the listener\n        listeners.splice(removeIndex, 1);\n        this.listenerCount--;\n\n        // Update the map or remove the entry if empty\n        if (listeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, listeners);\n        }\n\n        this.apiLog(\n          \"off\",\n          `Removed event listener: ${this.listenerCount}`,\n          LogLevelEnum.INFO,\n          functionName,\n        );\n      }\n    }\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener to clear\n   */\n  clear(listenerName: string) {\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // If we have listeners for this function name\n      if (this.listenerMap.has(functionName)) {\n        const listeners = this.listenerMap.get(functionName)!;\n\n        // Filter out listeners that match the criteria\n        const newListeners = listeners.filter((obj) => obj.CMIElement !== CMIElement);\n\n        // Update the count and map\n        this.listenerCount -= listeners.length - newListeners.length;\n\n        if (newListeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, newListeners);\n        }\n      }\n    }\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created\n   *\n   * @param {string} functionName - The name of the function that triggered the event\n   * @param {string} CMIElement - The CMI element that was affected\n   * @param {any} value - The value that was set\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this.apiLog(functionName, value, LogLevelEnum.INFO, CMIElement);\n\n    // Get listeners for this function name\n    const listeners = this.listenerMap.get(functionName);\n    if (!listeners) return;\n\n    for (const listener of listeners) {\n      const listenerHasCMIElement = !!listener.CMIElement;\n      let CMIElementsMatch = false;\n\n      // Check if CMI elements match\n      if (CMIElement && listener.CMIElement) {\n        if (listener.CMIElement.endsWith(\"*\")) {\n          // For wildcard matches, check if the CMI element starts with the prefix\n          const prefix = listener.CMIElement.slice(0, -1);\n          CMIElementsMatch = CMIElement.startsWith(prefix);\n        } else {\n          // For exact matches, compare the strings directly\n          CMIElementsMatch = listener.CMIElement === CMIElement;\n        }\n      }\n\n      // If the listener matches, call the callback\n      if (!listenerHasCMIElement || CMIElementsMatch) {\n        this.apiLog(\n          \"processListeners\",\n          `Processing listener: ${listener.functionName}`,\n          LogLevelEnum.DEBUG,\n          CMIElement,\n        );\n\n        // Handle special event types\n        if (functionName.startsWith(\"Sequence\")) {\n          // For sequence events, pass the target as the first argument\n          listener.callback(value);\n        } else if (functionName === \"CommitError\") {\n          // For commit error events, pass the error code\n          listener.callback(value);\n        } else if (functionName === \"CommitSuccess\") {\n          // For commit success events, pass no arguments\n          listener.callback();\n        } else {\n          // For regular events, pass CMIElement and value\n          listener.callback(CMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Resets the event service by clearing all listeners\n   */\n  reset() {\n    this.listenerMap.clear();\n    this.listenerCount = 0;\n  }\n}\n","import { CommitObject, LogLevel } from \"../types/api_types\";\nimport { StringKeyMap, unflatten } from \"../utilities\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { BaseCMI } from \"../cmi/common/base_cmi\";\nimport { ISerializationService } from \"../interfaces/services\";\n\n/**\n * Service for handling data serialization and deserialization in scorm-again\n */\nexport class SerializationService implements ISerializationService {\n  /**\n   * Loads CMI data from a flattened JSON object with special handling for arrays and ordering.\n   *\n   * This method implements a complex algorithm for loading flattened JSON data into the CMI\n   * object structure. It handles several key challenges:\n   *\n   * 1. Ordering dependencies: Some CMI elements (like interactions and objectives) must be\n   *    loaded in a specific order to ensure proper initialization.\n   *\n   * 2. Array handling: Interactions and objectives are stored as arrays, and their properties\n   *    must be loaded in the correct order (e.g., 'id' and 'type' must be set before other properties).\n   *\n   * 3. Unflattening: The method converts flattened dot notation (e.g., \"cmi.objectives.0.id\")\n   *    back into nested objects before loading.\n   *\n   * The algorithm works by:\n   * - Categorizing keys into interactions, objectives, and other properties\n   * - Sorting interactions to prioritize 'id' and 'type' fields within each index\n   * - Sorting objectives to prioritize 'id' fields within each index\n   * - Processing each category in order: interactions, objectives, then other properties\n   *\n   * @param {StringKeyMap} json - The flattened JSON object with dot notation keys\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   *\n   * @param setStartingData\n   * @example\n   * // Example of flattened JSON input:\n   * // {\n   * //   \"cmi.objectives.0.id\": \"obj1\",\n   * //   \"cmi.objectives.0.score.raw\": \"80\",\n   * //   \"cmi.interactions.0.id\": \"int1\",\n   * //   \"cmi.interactions.0.type\": \"choice\",\n   * //   \"cmi.interactions.0.result\": \"correct\"\n   * // }\n   */\n  loadFromFlattenedJSON(\n    json: StringKeyMap,\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromFlattenedJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    const int_pattern = /^(cmi\\.interactions\\.)(\\d+)\\.(.*)$/;\n    const obj_pattern = /^(cmi\\.objectives\\.)(\\d+)\\.(.*)$/;\n\n    // Extract and categorize keys for better sorting\n    const interactions: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const objectives: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const others: { key: string; value: any }[] = [];\n\n    // Categorize keys\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key)) {\n        const intMatch = key.match(int_pattern);\n        if (intMatch) {\n          interactions.push({\n            key,\n            value: json[key],\n            index: Number(intMatch[2]),\n            field: intMatch[3],\n          });\n          continue;\n        }\n\n        const objMatch = key.match(obj_pattern);\n        if (objMatch) {\n          objectives.push({\n            key,\n            value: json[key],\n            index: Number(objMatch[2]),\n            field: objMatch[3],\n          });\n          continue;\n        }\n\n        others.push({ key, value: json[key] });\n      }\n    }\n\n    // Sort interactions: first by index, then prioritize 'id' and 'type' fields\n    interactions.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id and type\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n      if (a.field === \"type\") return -1;\n      if (b.field === \"type\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort objectives: first by index, then prioritize 'id' field\n    objectives.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort other keys alphabetically\n    others.sort((a, b) => a.key.localeCompare(b.key));\n\n    // Process all items in the correct order\n    const processItems = (items: { key: string; value: any }[]) => {\n      items.forEach((item) => {\n        const obj: StringKeyMap = {};\n        obj[item.key] = item.value;\n        this.loadFromJSON(\n          unflatten(obj) as StringKeyMap,\n          CMIElement,\n          setCMIValue,\n          isNotInitialized,\n          setStartingData,\n        );\n      });\n    };\n\n    // Process in order: interactions, objectives, others\n    processItems(interactions);\n    processItems(objectives);\n    processItems(others);\n  }\n\n  /**\n   * Loads CMI data from a nested JSON object with recursive traversal.\n   *\n   * This method implements a recursive algorithm for loading nested JSON data into the CMI\n   * object structure. It handles several key aspects:\n   *\n   * 1. Recursive traversal: The method recursively traverses the nested JSON structure,\n   *    building CMI element paths as it goes (e.g., \"cmi.core.student_id\").\n   *\n   * 2. Type-specific handling: Different data types are handled differently:\n   *    - Arrays: Each array element is processed individually with its index in the path\n   *    - Objects: Recursively processed with updated path\n   *    - Primitives: Set directly using setCMIValue\n   *\n   * 3. Initialization check: Ensures the method is only called before API initialization\n   *\n   * 4. Starting data storage: Stores the original JSON data for potential future use\n   *\n   * The algorithm works by:\n   * - First storing the complete JSON object via setStartingData\n   * - Iterating through each property in the JSON object\n   * - For each property, determining its type and handling it accordingly\n   * - Building the CMI element path as it traverses the structure\n   * - Setting values at the appropriate paths using setCMIValue\n   *\n   * @param {{[key: string]: any}} json - The nested JSON object to load\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value at a specific path\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   * @param {Function} setStartingData - Function to store the original JSON data\n   *\n   * @example\n   * // Example of nested JSON input:\n   * // {\n   * //   \"core\": {\n   * //     \"student_id\": \"12345\",\n   * //     \"student_name\": \"John Doe\"\n   * //   },\n   * //   \"objectives\": [\n   * //     { \"id\": \"obj1\", \"score\": { \"raw\": 80 } },\n   * //     { \"id\": \"obj2\", \"score\": { \"raw\": 90 } }\n   * //   ]\n   * // }\n   */\n  loadFromJSON(\n    json: { [key: string]: any },\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    CMIElement = CMIElement !== undefined ? CMIElement : \"cmi\";\n\n    setStartingData(json);\n\n    // could this be refactored down to flatten(json) then setCMIValue on each?\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key) && json[key]) {\n        const currentCMIElement = (CMIElement ? CMIElement + \".\" : \"\") + key;\n        const value = json[key];\n\n        if (value.constructor === Array) {\n          for (let i = 0; i < value.length; i++) {\n            if (value[i]) {\n              const item = value[i];\n              const tempCMIElement = `${currentCMIElement}.${i}`;\n\n              if (item.constructor === Object) {\n                this.loadFromJSON(\n                  item,\n                  tempCMIElement,\n                  setCMIValue,\n                  isNotInitialized,\n                  setStartingData,\n                );\n              } else {\n                setCMIValue(tempCMIElement, item);\n              }\n            }\n          }\n        } else if (value.constructor === Object) {\n          this.loadFromJSON(\n            value,\n            currentCMIElement,\n            setCMIValue,\n            isNotInitialized,\n            setStartingData,\n          );\n        } else {\n          setCMIValue(currentCMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Render the CMI object to JSON for sending to an LMS.\n   *\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {string}\n   */\n  renderCMIToJSONString(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): string {\n    // Do we want/need to return fields that have no set value?\n    if (sendFullCommit) {\n      return JSON.stringify({ cmi });\n    }\n    return JSON.stringify({ cmi }, (k, v) => (v === undefined ? null : v), 2);\n  }\n\n  /**\n   * Returns a JS object representing the current cmi\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {object}\n   */\n  renderCMIToJSONObject(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): StringKeyMap {\n    // Revert to the original implementation to maintain compatibility with tests\n    return JSON.parse(this.renderCMIToJSONString(cmi, sendFullCommit));\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} alwaysSendTotalTime - Whether to always send total time\n   * @param {boolean|Function} renderCommonCommitFields - Whether to render common commit fields\n   * @param {Function} renderCommitObject - Function to render commit object\n   * @param {Function} renderCommitCMI - Function to render commit CMI\n   * @param {LogLevel} apiLogLevel - The API log level\n   * @return {CommitObject|StringKeyMap|Array<any>}\n   */\n  getCommitObject(\n    terminateCommit: boolean,\n    alwaysSendTotalTime: boolean,\n    renderCommonCommitFields: boolean | ((commitObject: CommitObject) => boolean),\n    renderCommitObject: (terminateCommit: boolean, includeTotalTime?: boolean) => CommitObject,\n    renderCommitCMI: (\n      terminateCommit: boolean,\n      includeTotalTime?: boolean,\n    ) => StringKeyMap | Array<any>,\n    apiLogLevel: LogLevel,\n  ): CommitObject | StringKeyMap | Array<any> {\n    // Fix for issue: total time is being calculated incorrectly across multiple sessions\n    // when selfReportSessionTime and alwaysSendTotalTime are enabled.\n    //\n    // Previously, we were using a single variable (shouldTerminateCommit) that combined\n    // both concerns: whether this is a termination commit and whether to include total time.\n    // This caused the total time to be calculated as if every commit was a terminate commit\n    // when alwaysSendTotalTime was true, leading to incorrect time calculations.\n    //\n    // Now we pass the actual terminateCommit value and a separate parameter for whether\n    // to include total time, allowing the rendering functions to handle these concerns separately.\n    const includeTotalTime = alwaysSendTotalTime || terminateCommit;\n\n    const commitObject = renderCommonCommitFields\n      ? renderCommitObject(terminateCommit, includeTotalTime)\n      : renderCommitCMI(terminateCommit, includeTotalTime);\n\n    if ([LogLevelEnum.DEBUG, \"1\", 1, \"DEBUG\"].includes(apiLogLevel)) {\n      console.debug(\"Commit (terminated: \" + (terminateCommit ? \"yes\" : \"no\") + \"): \");\n      console.debug(commitObject);\n    }\n    return commitObject;\n  }\n}\n","type APIError = {\n  errorCode: number;\n  errorMessage: string;\n  detailedMessage: string;\n};\n\nexport class BaseScormValidationError extends Error {\n  constructor(CMIElement: string, errorCode: number) {\n    super(`${CMIElement} : ${errorCode.toString()}`);\n    this._errorCode = errorCode;\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, BaseScormValidationError.prototype);\n  }\n\n  private readonly _errorCode: number;\n\n  /**\n   * Getter for _errorCode\n   * @return {number}\n   */\n  get errorCode(): number {\n    return this._errorCode;\n  }\n}\n\n/**\n * Base Validation Exception\n */\nexport class ValidationError extends BaseScormValidationError implements APIError {\n  /**\n   * Constructor to take in an error message and code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   * @param {string} errorMessage\n   * @param {string} detailedMessage\n   */\n  constructor(\n    CMIElement: string,\n    errorCode: number,\n    errorMessage: string,\n    detailedMessage?: string,\n  ) {\n    super(CMIElement, errorCode);\n    this.message = `${CMIElement} : ${errorMessage}`;\n    this._errorMessage = errorMessage;\n    if (detailedMessage) {\n      this._detailedMessage = detailedMessage;\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  private readonly _errorMessage: string;\n  private readonly _detailedMessage: string = \"\";\n\n  /**\n   * Getter for _errorMessage\n   * @return {string}\n   */\n  get errorMessage(): string {\n    return this._errorMessage;\n  }\n\n  /**\n   * Getter for _detailedMessage\n   * @return {string}\n   */\n  get detailedMessage(): string {\n    return this._detailedMessage;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ILoggingService } from \"../interfaces/services\";\nimport { defaultLogHandler } from \"../constants/default_settings\";\n\n/**\n * Centralized logging service implemented as a singleton\n * Provides methods for logging at different levels and configuring the log level\n */\nexport class LoggingService implements ILoggingService {\n  private static _instance: LoggingService;\n  private _logLevel: LogLevel = LogLevelEnum.ERROR;\n  private _logHandler: (messageLevel: LogLevel, logMessage: string) => void;\n\n  /**\n   * Private constructor to prevent direct instantiation\n   */\n  private constructor() {\n    // Default log handler uses console methods based on log level\n    this._logHandler = defaultLogHandler;\n  }\n\n  /**\n   * Get the singleton instance of LoggingService\n   *\n   * @returns {LoggingService} The singleton instance\n   */\n  public static getInstance(): LoggingService {\n    if (!LoggingService._instance) {\n      LoggingService._instance = new LoggingService();\n    }\n    return LoggingService._instance;\n  }\n\n  /**\n   * Set the log level\n   *\n   * @param {LogLevel} level - The log level to set\n   */\n  public setLogLevel(level: LogLevel): void {\n    this._logLevel = level;\n  }\n\n  /**\n   * Get the current log level\n   *\n   * @returns {LogLevel} The current log level\n   */\n  public getLogLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  /**\n   * Set a custom log handler\n   *\n   * @param {Function} handler - The function to handle log messages\n   */\n  public setLogHandler(handler: (messageLevel: LogLevel, logMessage: string) => void): void {\n    this._logHandler = handler;\n  }\n\n  /**\n   * Log a message if the message level is greater than or equal to the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @param {string} logMessage - The message to log\n   */\n  public log(messageLevel: LogLevel, logMessage: string): void {\n    if (this.shouldLog(messageLevel)) {\n      this._logHandler(messageLevel, logMessage);\n    }\n  }\n\n  /**\n   * Log a message at ERROR level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public error(logMessage: string): void {\n    this.log(LogLevelEnum.ERROR, logMessage);\n  }\n\n  /**\n   * Log a message at WARN level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public warn(logMessage: string): void {\n    this.log(LogLevelEnum.WARN, logMessage);\n  }\n\n  /**\n   * Log a message at INFO level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public info(logMessage: string): void {\n    this.log(LogLevelEnum.INFO, logMessage);\n  }\n\n  /**\n   * Log a message at DEBUG level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public debug(logMessage: string): void {\n    this.log(LogLevelEnum.DEBUG, logMessage);\n  }\n\n  /**\n   * Determine if a message should be logged based on its level and the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @returns {boolean} Whether the message should be logged\n   */\n  private shouldLog(messageLevel: LogLevel): boolean {\n    // Convert string levels to numbers for comparison\n    const numericMessageLevel = this.getNumericLevel(messageLevel);\n    const numericLogLevel = this.getNumericLevel(this._logLevel);\n\n    return numericMessageLevel >= numericLogLevel;\n  }\n\n  /**\n   * Convert a log level to its numeric value\n   *\n   * @param {LogLevel} level - The log level to convert\n   * @returns {number} The numeric value of the log level\n   */\n  private getNumericLevel(level: LogLevel): number {\n    if (level === undefined) return LogLevelEnum.NONE;\n\n    if (typeof level === \"number\") return level;\n\n    switch (level) {\n      case \"1\":\n      case \"DEBUG\":\n        return LogLevelEnum.DEBUG;\n      case \"2\":\n      case \"INFO\":\n        return LogLevelEnum.INFO;\n      case \"3\":\n      case \"WARN\":\n        return LogLevelEnum.WARN;\n      case \"4\":\n      case \"ERROR\":\n        return LogLevelEnum.ERROR;\n      case \"5\":\n      case \"NONE\":\n        return LogLevelEnum.NONE;\n      default:\n        return LogLevelEnum.ERROR; // Default to ERROR if unknown\n    }\n  }\n}\n\n// Export a function to get the singleton instance\nexport function getLoggingService(): LoggingService {\n  return LoggingService.getInstance();\n}\n","import { LogLevelEnum } from \"../constants/enums\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { ValidationError } from \"../exceptions\";\nimport { IErrorHandlingService, ILoggingService } from \"../interfaces/services\";\nimport { getLoggingService } from \"./LoggingService\";\n\n/**\n * Service for handling SCORM errors\n */\nexport class ErrorHandlingService implements IErrorHandlingService {\n  private _lastErrorCode: string = \"0\";\n  private readonly _errorCodes: ErrorCode;\n  private readonly _apiLog: (\n    functionName: string,\n    message: string,\n    logLevel?: LogLevelEnum,\n    CMIElement?: string,\n  ) => void;\n  private readonly _getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string;\n  private readonly _loggingService: ILoggingService;\n\n  /**\n   * Constructor for ErrorHandlingService\n   *\n   * @param {ErrorCode} errorCodes - The error codes object\n   * @param {Function} apiLog - Function for logging API calls\n   * @param {Function} getLmsErrorMessageDetails - Function for getting error message details\n   * @param {ILoggingService} loggingService - Optional logging service instance\n   */\n  constructor(\n    errorCodes: ErrorCode,\n    apiLog: (\n      functionName: string,\n      message: string,\n      logLevel?: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n    loggingService?: ILoggingService,\n  ) {\n    this._errorCodes = errorCodes;\n    this._apiLog = apiLog;\n    this._getLmsErrorMessageDetails = getLmsErrorMessageDetails;\n    this._loggingService = loggingService || getLoggingService();\n  }\n\n  /**\n   * Get the last error code\n   *\n   * @return {string} - The last error code\n   */\n  get lastErrorCode(): string {\n    return this._lastErrorCode;\n  }\n\n  /**\n   * Set the last error code\n   *\n   * @param {string} errorCode - The error code to set\n   */\n  set lastErrorCode(errorCode: string) {\n    this._lastErrorCode = errorCode;\n  }\n\n  /**\n   * Throws a SCORM error\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The error number\n   * @param {string} message - The error message\n   * @throws {ValidationError} - If throwException is true, throws a ValidationError\n   */\n  throwSCORMError(CMIElement: string, errorNumber: number, message?: string): void {\n    if (!message) {\n      message = this._getLmsErrorMessageDetails(errorNumber, true);\n    }\n\n    // Format a more descriptive error message with context\n    const formattedMessage = `SCORM Error ${errorNumber}: ${message}${CMIElement ? ` [Element: ${CMIElement}]` : \"\"}`;\n\n    // Log using both the API log and the logging service for consistency\n    this._apiLog(\"throwSCORMError\", errorNumber + \": \" + message, LogLevelEnum.ERROR, CMIElement);\n    this._loggingService.error(formattedMessage);\n\n    this._lastErrorCode = String(errorNumber);\n  }\n\n  /**\n   * Clears the last SCORM error code on success.\n   *\n   * @param {string} success - Whether the operation was successful\n   */\n  clearSCORMError(success: string): void {\n    if (success !== undefined && success !== global_constants.SCORM_FALSE) {\n      this._lastErrorCode = \"0\";\n    }\n  }\n\n  /**\n   * Handles exceptions that occur when accessing or setting CMI values.\n   *\n   * This method provides centralized error handling for exceptions that occur during\n   * CMI data operations. It differentiates between different types of errors and\n   * handles them appropriately:\n   *\n   * 1. ValidationError: These are expected errors from the validation system that\n   *    indicate a specific SCORM error condition (like invalid data format or range).\n   *    For these errors, the method:\n   *    - Sets the lastErrorCode to the error code from the ValidationError\n   *    - Returns SCORM_FALSE to indicate failure to the caller\n   *\n   * 2. Standard JavaScript Error: For general JavaScript errors (like TypeError,\n   *    ReferenceError, etc.), the method:\n   *    - Logs the error message with stack trace to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * 3. Unknown exceptions: For any other type of exception that doesn't match the\n   *    above categories, the method:\n   *    - Logs the entire exception object to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * This method is critical for maintaining SCORM compliance by ensuring that\n   * all errors are properly translated into the appropriate SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {ValidationError|Error|unknown} e - The exception that was thrown\n   * @param {string} returnValue - The default return value (typically an empty string)\n   * @return {string} - Either the original returnValue or SCORM_FALSE if an error occurred\n   *\n   * @example\n   * try {\n   *   const value = getCMIValue(\"cmi.core.score.raw\");\n   *   return value;\n   * } catch (e) {\n   *   return handleValueAccessException(e, \"\");\n   * }\n   */\n  handleValueAccessException(\n    CMIElement: string,\n    e: Error | ValidationError | unknown,\n    returnValue: string,\n  ): string {\n    if (e instanceof ValidationError) {\n      const validationError = e as ValidationError;\n      this._lastErrorCode = String(validationError.errorCode);\n\n      // Log validation errors at WARN level with context\n      const errorMessage = `Validation Error ${validationError.errorCode}: ${validationError.message} [Element: ${CMIElement}]`;\n      this._loggingService.warn(errorMessage);\n\n      returnValue = global_constants.SCORM_FALSE;\n    } else if (e instanceof Error) {\n      // For standard JS errors, include the stack trace and error type\n      const errorType = e.constructor.name; // Gets the error type (e.g., TypeError, ReferenceError)\n      const errorMessage = `${errorType}: ${e.message} [Element: ${CMIElement}]`;\n      const stackTrace = e.stack || \"\";\n\n      // Log the detailed error with stack trace\n      this._loggingService.error(`${errorMessage}\\n${stackTrace}`);\n\n      this.throwSCORMError(CMIElement, this._errorCodes.GENERAL, `${errorType}: ${e.message}`);\n    } else {\n      // For unknown errors, provide as much context as possible\n      const errorMessage = `Unknown error occurred while accessing [Element: ${CMIElement}]`;\n\n      this._loggingService.error(errorMessage);\n\n      try {\n        // Try to stringify the error object for more details\n        const errorDetails = JSON.stringify(e);\n        this._loggingService.error(`Error details: ${errorDetails}`);\n      } catch (jsonError) {\n        // If stringify fails, log that we couldn't get more details\n        this._loggingService.error(\"Could not stringify error object for details\");\n      }\n\n      this.throwSCORMError(CMIElement, this._errorCodes.GENERAL, \"Unknown error\");\n    }\n    return returnValue;\n  }\n\n  /**\n   * Get the error codes object\n   *\n   * @return {ErrorCode} - The error codes object\n   */\n  get errorCodes(): ErrorCode {\n    return this._errorCodes;\n  }\n}\n\n// Export a factory function to create the service\nexport function createErrorHandlingService(\n  errorCodes: ErrorCode,\n  apiLog: (\n    functionName: string,\n    message: string,\n    logLevel: LogLevelEnum,\n    CMIElement?: string,\n  ) => void,\n  getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n  loggingService?: ILoggingService,\n): ErrorHandlingService {\n  return new ErrorHandlingService(errorCodes, apiLog, getLmsErrorMessageDetails, loggingService);\n}\n","import { CommitObject, InternalSettings, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ErrorCode } from \"../constants/error_codes\";\n\n/**\n * Interface for sync queue item\n */\ninterface SyncQueueItem {\n  id: string;\n  courseId: string;\n  timestamp: number;\n  data: CommitObject;\n  syncAttempts: number;\n}\n\n/**\n * Service for handling offline storage and synchronization of SCORM data\n */\nexport class OfflineStorageService {\n  private settings: InternalSettings;\n  private error_codes: ErrorCode;\n  private storeName: string = \"scorm_again_offline_data\";\n  private syncQueue: string = \"scorm_again_sync_queue\";\n  private isOnline: boolean = navigator.onLine;\n  private syncInProgress: boolean = false;\n\n  /**\n   * Constructor for OfflineStorageService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Function} apiLog - The logging function\n   */\n  constructor(\n    settings: InternalSettings,\n    error_codes: ErrorCode,\n    private apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n\n    // Initialize listeners for online/offline events\n    window.addEventListener(\"online\", this.handleOnlineStatusChange.bind(this));\n    window.addEventListener(\"offline\", this.handleOnlineStatusChange.bind(this));\n  }\n\n  /**\n   * Handle changes in online status\n   */\n  private handleOnlineStatusChange() {\n    const wasOnline = this.isOnline;\n    this.isOnline = navigator.onLine;\n\n    // If we've come back online, trigger sync process\n    if (!wasOnline && this.isOnline) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        \"Device is back online, attempting to sync...\",\n        LogLevelEnum.INFO,\n      );\n      this.syncOfflineData().then(\n        (success) => {\n          if (success) {\n            this.apiLog(\"OfflineStorageService\", \"Sync completed successfully\", LogLevelEnum.INFO);\n          } else {\n            this.apiLog(\"OfflineStorageService\", \"Sync failed\", LogLevelEnum.ERROR);\n          }\n        },\n        (error) => {\n          this.apiLog(\"OfflineStorageService\", `Error during sync: ${error}`, LogLevelEnum.ERROR);\n        },\n      );\n    } else if (wasOnline && !this.isOnline) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        \"Device is offline, data will be stored locally\",\n        LogLevelEnum.INFO,\n      );\n    }\n  }\n\n  /**\n   * Store commit data offline\n   * @param {string} courseId - Identifier for the course\n   * @param {CommitObject} commitData - The data to store offline\n   * @returns {Promise<ResultObject>} - Result of the storage operation\n   */\n  async storeOffline(courseId: string, commitData: CommitObject): Promise<ResultObject> {\n    try {\n      // Store the data in the sync queue with timestamp and unique ID\n      const queueItem: SyncQueueItem = {\n        id: `${courseId}_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`,\n        courseId,\n        timestamp: Date.now(),\n        data: commitData,\n        syncAttempts: 0,\n      };\n\n      // Get current queue\n      const currentQueue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n      currentQueue.push(queueItem);\n\n      // Save updated queue\n      await this.saveToStorage(this.syncQueue, currentQueue);\n\n      // Also update the current state in the main storage (latest known state)\n      await this.saveToStorage(`${this.storeName}_${courseId}`, commitData);\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Stored data offline for course ${courseId}`,\n        LogLevelEnum.INFO,\n      );\n\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error storing offline data: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL,\n      };\n    }\n  }\n\n  /**\n   * Get the stored offline data for a course\n   * @param {string} courseId - Identifier for the course\n   * @returns {Promise<CommitObject|null>} - The stored data or null if not found\n   */\n  async getOfflineData(courseId: string): Promise<CommitObject | null> {\n    try {\n      const data = await this.getFromStorage<CommitObject>(`${this.storeName}_${courseId}`);\n      return data || null;\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error retrieving offline data: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return null;\n    }\n  }\n\n  /**\n   * Synchronize offline data with the LMS when connection is available\n   * @returns {Promise<boolean>} - Success status of synchronization\n   */\n  async syncOfflineData(): Promise<boolean> {\n    // Don't run multiple sync processes at once\n    if (this.syncInProgress || !this.isOnline) {\n      return false;\n    }\n\n    this.syncInProgress = true;\n\n    try {\n      // Get the queue of items to sync\n      const syncQueue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n\n      if (syncQueue.length === 0) {\n        this.syncInProgress = false;\n        return true;\n      }\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Found ${syncQueue.length} items to sync`,\n        LogLevelEnum.INFO,\n      );\n\n      // Keep track of successful and failed sync attempts\n      const remainingQueue: SyncQueueItem[] = [];\n\n      // Process each queue item\n      for (const item of syncQueue) {\n        // Skip items that have been attempted too many times\n        if (item.syncAttempts >= 5) {\n          this.apiLog(\n            \"OfflineStorageService\",\n            `Skipping item ${item.id} after 5 failed attempts`,\n            LogLevelEnum.WARN,\n          );\n          continue;\n        }\n\n        try {\n          // Attempt to sync this item\n          const syncResult = await this.sendDataToLMS(item.data);\n\n          if (syncResult.result === global_constants.SCORM_TRUE) {\n            // Sync was successful, no need to keep this item\n            this.apiLog(\n              \"OfflineStorageService\",\n              `Successfully synced item ${item.id}`,\n              LogLevelEnum.INFO,\n            );\n          } else {\n            // Sync failed, increment attempts and keep in queue\n            item.syncAttempts++;\n            remainingQueue.push(item);\n            this.apiLog(\n              \"OfflineStorageService\",\n              `Failed to sync item ${item.id}, attempt #${item.syncAttempts}`,\n              LogLevelEnum.WARN,\n            );\n          }\n        } catch (error) {\n          // On error, increment attempts and keep in queue\n          item.syncAttempts++;\n          remainingQueue.push(item);\n          this.apiLog(\n            \"OfflineStorageService\",\n            `Error syncing item ${item.id}: ${error}`,\n            LogLevelEnum.ERROR,\n          );\n        }\n      }\n\n      // Update the queue with remaining items\n      await this.saveToStorage(this.syncQueue, remainingQueue);\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Sync completed. ${syncQueue.length - remainingQueue.length} items synced, ${remainingQueue.length} items remaining`,\n        LogLevelEnum.INFO,\n      );\n\n      this.syncInProgress = false;\n      return true;\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error during sync process: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      this.syncInProgress = false;\n      return false;\n    }\n  }\n\n  /**\n   * Send data to the LMS when online\n   * @param {CommitObject} data - The data to send to the LMS\n   * @returns {Promise<ResultObject>} - Result of the sync operation\n   */\n  private async sendDataToLMS(data: CommitObject): Promise<ResultObject> {\n    if (!this.settings.lmsCommitUrl) {\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL,\n      };\n    }\n\n    try {\n      // Apply request handler if configured\n      const processedData = this.settings.requestHandler(data);\n\n      // Send the data to the LMS\n      const init = {\n        method: \"POST\",\n        mode: this.settings.fetchMode,\n        body: JSON.stringify(processedData),\n        headers: {\n          ...this.settings.xhrHeaders,\n          \"Content-Type\": this.settings.commitRequestDataType,\n        },\n      } as RequestInit;\n\n      if (this.settings.xhrWithCredentials) {\n        init.credentials = \"include\";\n      }\n\n      const response = await fetch(this.settings.lmsCommitUrl as string, init);\n\n      // Process the response using the configured handler\n      const result =\n        typeof this.settings.responseHandler === \"function\"\n          ? await this.settings.responseHandler(response)\n          : await response.json();\n\n      if (\n        response.status >= 200 &&\n        response.status <= 299 &&\n        (result.result === true || result.result === global_constants.SCORM_TRUE)\n      ) {\n        if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n          result.errorCode = 0;\n        }\n        return result;\n      } else {\n        if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n          result.errorCode = this.error_codes.GENERAL;\n        }\n        return result;\n      }\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error sending data to LMS: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL,\n      };\n    }\n  }\n\n  /**\n   * Check if the device is currently online\n   * @returns {boolean} - Online status\n   */\n  isDeviceOnline(): boolean {\n    return this.isOnline;\n  }\n\n  // noinspection JSValidateJSDoc\n  /**\n   * Get item from localStorage\n   * @param {string} key - The key to retrieve\n   * @returns {Promise<T|null>} - The retrieved data\n   */\n  private async getFromStorage<T>(key: string): Promise<T | null> {\n    const storedData = localStorage.getItem(key);\n    if (storedData) {\n      try {\n        return JSON.parse(storedData) as T;\n      } catch (e) {\n        return null;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Save item to localStorage\n   * @param {string} key - The key to store under\n   * @param {any} data - The data to store\n   * @returns {Promise<void>}\n   */\n  private async saveToStorage(key: string, data: any): Promise<void> {\n    localStorage.setItem(key, JSON.stringify(data));\n  }\n\n  /**\n   * Check if there is pending offline data for a course\n   * @param {string} courseId - Identifier for the course\n   * @returns {Promise<boolean>} - Whether there is pending data\n   */\n  async hasPendingOfflineData(courseId: string): Promise<boolean> {\n    const queue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n    return queue.some((item) => item.courseId === courseId);\n  }\n\n  /**\n   * Update the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: InternalSettings): void {\n    this.settings = settings;\n  }\n}\n","/**\n * Base class for API cmi objects\n */\nexport abstract class BaseCMI {\n  jsonString = false;\n  protected readonly _cmi_element: string;\n  protected _initialized = false;\n  private _start_time: number | undefined;\n\n  /**\n   * Constructor for BaseCMI\n   * @param {string} cmi_element\n   */\n  constructor(cmi_element: string) {\n    this._cmi_element = cmi_element;\n  }\n\n  /**\n   * Getter for _initialized\n   * @return {boolean}\n   */\n  get initialized(): boolean {\n    return this._initialized;\n  }\n\n  /**\n   * Getter for _start_time\n   * @return {number | undefined}\n   */\n  get start_time(): number | undefined {\n    return this._start_time;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize(): void {\n    this._initialized = true;\n  }\n\n  /**\n   * Called when the player should override the 'session_time' provided by\n   * the module\n   */\n  setStartTime(): void {\n    this._start_time = new Date().getTime();\n  }\n\n  abstract reset(): void;\n}\n\n/**\n * Base class for cmi root objects\n */\nexport abstract class BaseRootCMI extends BaseCMI {\n  abstract getCurrentTotalTime(): string;\n}\n","export type ErrorCode = {\n  [key: string]: number;\n};\n\nexport const global_errors: ErrorCode = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nexport const scorm12_errors: ErrorCode = {\n  ...global_errors,\n  RETRIEVE_BEFORE_INIT: 301,\n  STORE_BEFORE_INIT: 301,\n  COMMIT_BEFORE_INIT: 301,\n  ARGUMENT_ERROR: 201,\n  CHILDREN_ERROR: 202,\n  COUNT_ERROR: 203,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 401,\n  VALUE_NOT_INITIALIZED: 301,\n  INVALID_SET_VALUE: 402,\n  READ_ONLY_ELEMENT: 403,\n  WRITE_ONLY_ELEMENT: 404,\n  TYPE_MISMATCH: 405,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n\nexport const scorm2004_errors: ErrorCode = {\n  ...global_errors,\n  INITIALIZATION_FAILED: 102,\n  INITIALIZED: 103,\n  TERMINATED: 104,\n  TERMINATION_FAILURE: 111,\n  TERMINATION_BEFORE_INIT: 112,\n  MULTIPLE_TERMINATIONS: 113,\n  RETRIEVE_BEFORE_INIT: 122,\n  RETRIEVE_AFTER_TERM: 123,\n  STORE_BEFORE_INIT: 132,\n  STORE_AFTER_TERM: 133,\n  COMMIT_BEFORE_INIT: 142,\n  COMMIT_AFTER_TERM: 143,\n  ARGUMENT_ERROR: 201,\n  GENERAL_GET_FAILURE: 301,\n  GENERAL_SET_FAILURE: 351,\n  GENERAL_COMMIT_FAILURE: 391,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 402,\n  VALUE_NOT_INITIALIZED: 403,\n  READ_ONLY_ELEMENT: 404,\n  WRITE_ONLY_ELEMENT: 405,\n  TYPE_MISMATCH: 406,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n","import { BaseCMI } from \"./base_cmi\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Base class for cmi *.n objects\n */\nexport class CMIArray extends BaseCMI {\n  private readonly _errorCode: number;\n  private readonly _errorClass: typeof BaseScormValidationError;\n  private readonly __children: string;\n  public childArray: any[];\n\n  /**\n   * Constructor cmi *.n arrays\n   * @param {object} params\n   */\n  constructor(params: {\n    CMIElement: string;\n    children: string;\n    errorCode?: number;\n    errorClass?: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n    this.__children = params.children;\n    this._errorCode = params.errorCode || scorm12_errors.GENERAL;\n    this._errorClass = params.errorClass || BaseScormValidationError;\n    this.childArray = [];\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(wipe: boolean = false): void {\n    this._initialized = false;\n    if (wipe) {\n      this.childArray = [];\n    } else {\n      // Reset all children\n      for (let i = 0; i < this.childArray.length; i++) {\n        this.childArray[i].reset();\n      }\n    }\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this._errorClass(this._cmi_element + \"._children\", this._errorCode);\n  }\n\n  /**\n   * Getter for _count\n   * @return {number}\n   */\n  get _count(): number {\n    return this.childArray.length;\n  }\n\n  /**\n   * Setter for _count. Just throws an error.\n   * @param {number} _count\n   */\n  set _count(_count: number) {\n    throw new this._errorClass(this._cmi_element + \"._count\", this._errorCode);\n  }\n\n  /**\n   * toJSON for *.n arrays\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result: { [key: string]: any } = {};\n    for (let i = 0; i < this.childArray.length; i++) {\n      result[i + \"\"] = this.childArray[i];\n    }\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { ErrorCode } from \"./constants/error_codes\";\nimport { global_constants } from \"./constants/api_constants\";\nimport * as Utilities from \"./utilities\";\nimport { formatMessage, StringKeyMap, stringMatches } from \"./utilities\";\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport {\n  CommitObject,\n  InternalSettings,\n  LogLevel,\n  ResultObject,\n  Settings,\n} from \"./types/api_types\";\nimport { DefaultSettings } from \"./constants/default_settings\";\nimport { IBaseAPI } from \"./interfaces/IBaseAPI\";\nimport { ScheduledCommit } from \"./helpers/scheduled_commit\";\nimport { LogLevelEnum } from \"./constants/enums\";\nimport { HttpService } from \"./services/HttpService\";\nimport { EventService } from \"./services/EventService\";\nimport { SerializationService } from \"./services/SerializationService\";\nimport { createErrorHandlingService } from \"./services/ErrorHandlingService\";\nimport { getLoggingService } from \"./services/LoggingService\";\nimport { OfflineStorageService } from \"./services/OfflineStorageService\";\nimport {\n  ICMIDataService,\n  IErrorHandlingService,\n  IEventService,\n  IHttpService,\n  ILoggingService,\n  IOfflineStorageService,\n  ISerializationService,\n} from \"./interfaces/services\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { ValidationError } from \"./exceptions\";\n\n/**\n * Base API class for AICC, SCORM 1.2, and SCORM 2004. Should be considered\n * abstract, and never initialized on its own.\n */\nexport default abstract class BaseAPI implements IBaseAPI {\n  private _timeout?: ScheduledCommit | undefined;\n  private readonly _error_codes: ErrorCode;\n  private _settings: InternalSettings = DefaultSettings;\n  private readonly _httpService: IHttpService;\n  private _eventService: IEventService;\n  private _serializationService: ISerializationService;\n  private readonly _errorHandlingService: IErrorHandlingService;\n  private readonly _loggingService: ILoggingService;\n  private readonly _offlineStorageService?: IOfflineStorageService;\n  private _courseId: string = \"\";\n\n  /**\n   * Constructor for Base API class. Sets some shared API fields, as well as\n   * sets up options for the API.\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Settings} settings - Optional settings for the API\n   * @param {IHttpService} httpService - Optional HTTP service instance\n   * @param {IEventService} eventService - Optional Event service instance\n   * @param {ISerializationService} serializationService - Optional Serialization service instance\n   * @param {ICMIDataService} cmiDataService - Optional CMI Data service instance\n   * @param {IErrorHandlingService} errorHandlingService - Optional Error Handling service instance\n   * @param {ILoggingService} loggingService - Optional Logging service instance\n   * @param {IOfflineStorageService} offlineStorageService - Optional Offline Storage service instance\n   */\n  protected constructor(\n    error_codes: ErrorCode,\n    settings?: Settings,\n    httpService?: IHttpService,\n    eventService?: IEventService,\n    serializationService?: ISerializationService,\n    cmiDataService?: ICMIDataService,\n    errorHandlingService?: IErrorHandlingService,\n    loggingService?: ILoggingService,\n    offlineStorageService?: IOfflineStorageService,\n  ) {\n    if (new.target === BaseAPI) {\n      throw new TypeError(\"Cannot construct BaseAPI instances directly\");\n    }\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n\n    this._error_codes = error_codes;\n\n    if (settings) {\n      this.settings = {\n        ...DefaultSettings,\n        ...settings,\n      } as InternalSettings;\n    }\n\n    // Initialize and configure LoggingService\n    this._loggingService = loggingService || getLoggingService();\n    this._loggingService.setLogLevel(this.apiLogLevel);\n\n    // If settings include a custom onLogMessage function, use it as the log handler\n    if (this.settings.onLogMessage) {\n      this._loggingService.setLogHandler(this.settings.onLogMessage);\n    }\n\n    // Initialize HTTP service\n    this._httpService = httpService || new HttpService(this.settings, this._error_codes);\n\n    // Initialize Event service\n    this._eventService =\n      eventService ||\n      new EventService((functionName, message, level, element) =>\n        this.apiLog(functionName, message, level, element),\n      );\n\n    // Initialize Serialization service\n    this._serializationService = serializationService || new SerializationService();\n\n    // Initialize Error Handling service\n    this._errorHandlingService =\n      errorHandlingService ||\n      createErrorHandlingService(\n        this._error_codes,\n        (functionName, message, level, element) =>\n          this.apiLog(functionName, message, level, element),\n        (errorNumber, detail) => this.getLmsErrorMessageDetails(errorNumber, detail),\n      );\n\n    // Initialize Offline Storage service if enabled\n    if (this.settings.enableOfflineSupport) {\n      this._offlineStorageService =\n        offlineStorageService ||\n        new OfflineStorageService(\n          this.settings,\n          this._error_codes,\n          (functionName, message, level, element) =>\n            this.apiLog(functionName, message, level, element),\n        );\n\n      if (this.settings.courseId) {\n        this._courseId = this.settings.courseId;\n      }\n\n      // Check for offline data to restore on initialization\n      if (this._offlineStorageService && this._courseId) {\n        this._offlineStorageService\n          .getOfflineData(this._courseId)\n          .then((offlineData) => {\n            if (offlineData) {\n              this.apiLog(\"constructor\", \"Found offline data to restore\", LogLevelEnum.INFO);\n              // Restore data from offline storage\n              this.loadFromJSON(offlineData.runtimeData);\n            }\n          })\n          .catch((error) => {\n            this.apiLog(\n              \"constructor\",\n              `Error retrieving offline data: ${error}`,\n              LogLevelEnum.ERROR,\n            );\n          });\n      }\n    }\n  }\n\n  public abstract cmi: BaseCMI;\n  public startingData?: StringKeyMap;\n\n  public currentState: number;\n  public apiLogLevel: LogLevel;\n  public selfReportSessionTime: boolean;\n\n  /**\n   * Get the last error code\n   * @return {string}\n   */\n  get lastErrorCode(): string {\n    return this._errorHandlingService?.lastErrorCode ?? \"0\";\n  }\n\n  /**\n   * Set the last error code\n   * @param {string} errorCode\n   */\n  set lastErrorCode(errorCode: string) {\n    if (this._errorHandlingService) {\n      this._errorHandlingService.lastErrorCode = errorCode;\n    }\n  }\n\n  /**\n   * Reset the API to its initial state.\n   * This method clears all current data and resets the API to an uninitialized state.\n   * It can optionally accept new settings to configure the API after reset.\n   *\n   * @param {Settings} settings - Optional new settings to apply after reset\n   */\n  abstract reset(settings?: Settings): void;\n\n  /**\n   * Common reset method for all APIs. New settings are merged with the existing settings.\n   * @param {Settings} settings\n   * @protected\n   */\n  commonReset(settings?: Settings): void {\n    this.apiLog(\"reset\", \"Called\", LogLevelEnum.INFO);\n\n    this.settings = { ...this.settings, ...settings };\n\n    this.clearScheduledCommit();\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n    this.lastErrorCode = \"0\";\n    this._eventService.reset();\n    this.startingData = {};\n\n    // Update offline storage service with new settings if it exists\n    if (this._offlineStorageService) {\n      this._offlineStorageService.updateSettings(this.settings);\n\n      if (settings?.courseId) {\n        this._courseId = settings.courseId;\n      }\n    }\n  }\n\n  /**\n   * Initialize the API\n   * @param {string} callbackName\n   * @param {string} initializeMessage\n   * @param {string} terminationMessage\n   * @return {string}\n   */\n  initialize(\n    callbackName: string,\n    initializeMessage?: string,\n    terminationMessage?: string,\n  ): string {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.isInitialized()) {\n      this.throwSCORMError(\"api\", this._error_codes.INITIALIZED, initializeMessage);\n    } else if (this.isTerminated()) {\n      this.throwSCORMError(\"api\", this._error_codes.TERMINATED, terminationMessage);\n    } else {\n      if (this.selfReportSessionTime) {\n        this.cmi.setStartTime();\n      }\n\n      this.currentState = global_constants.STATE_INITIALIZED;\n      this.lastErrorCode = \"0\";\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n\n      // If enabled, attempt to sync offline data on initialization\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._courseId &&\n        this.settings.syncOnInitialize &&\n        this._offlineStorageService.isDeviceOnline()\n      ) {\n        this._offlineStorageService.hasPendingOfflineData(this._courseId).then((hasPendingData) => {\n          if (hasPendingData) {\n            this.apiLog(\n              callbackName,\n              \"Syncing pending offline data on initialization\",\n              LogLevelEnum.INFO,\n            );\n            this._offlineStorageService?.syncOfflineData().then((syncSuccess) => {\n              if (syncSuccess) {\n                this.apiLog(callbackName, \"Successfully synced offline data\", LogLevelEnum.INFO);\n                this.processListeners(\"OfflineDataSynced\");\n              }\n            });\n          }\n        });\n      }\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Initialize the LMS API\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsInitialize(): string;\n\n  /**\n   * Finish the current LMS API session\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsFinish(): string;\n\n  /**\n   * Get the value of a CMI element from the LMS\n   * @param {string} CMIElement - The CMI element to get the value of\n   * @return {string} The value of the CMI element\n   */\n  abstract lmsGetValue(CMIElement: string): string;\n\n  /**\n   * Set the value of a CMI element in the LMS\n   * @param {string} CMIElement - The CMI element to set the value of\n   * @param {any} value - The value to set\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsSetValue(CMIElement: string, value: any): string;\n\n  /**\n   * Commit the current data to the LMS\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsCommit(): string;\n\n  /**\n   * Get the last error code from the LMS\n   * @return {string} The last error code\n   */\n  abstract lmsGetLastError(): string;\n\n  /**\n   * Get the error string for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get the string for\n   * @return {string} The error string\n   */\n  abstract lmsGetErrorString(CMIErrorCode: string | number): string;\n\n  /**\n   * Get diagnostic information for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get diagnostic information for\n   * @return {string} The diagnostic information\n   */\n  abstract lmsGetDiagnostic(CMIErrorCode: string | number): string;\n\n  /**\n   * Abstract method for validating that a response is correct.\n   * This method is used to validate the format and content of a response\n   * before it is set in the CMI data model.\n   *\n   * @param {string} _CMIElement - The CMI element path to validate\n   * @param {any} _value - The value to validate\n   * @throws {Error} If the response format is invalid\n   */\n  abstract validateCorrectResponse(_CMIElement: string, _value: any): void;\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   * APIs that inherit BaseAPI should override this method.\n   *\n   * @param {string} _CMIElement - unused\n   * @param {*} _value - unused\n   * @param {boolean} _foundFirstIndex - unused\n   * @return {BaseCMI|null}\n   * @abstract\n   */\n  abstract getChildElement(\n    _CMIElement: string,\n    _value: any,\n    _foundFirstIndex: boolean,\n  ): BaseCMI | null;\n\n  /**\n   * Attempts to store the data to the LMS, logs data if no LMS configured\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _calculateTotalTime\n   * @return {ResultObject}\n   * @abstract\n   */\n  abstract storeData(_calculateTotalTime: boolean): Promise<ResultObject>;\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _terminateCommit\n   * @return {StringKeyMap|Array}\n   * @abstract\n   */\n  abstract renderCommitCMI(_terminateCommit: boolean): StringKeyMap | Array<string>;\n\n  /**\n   * Render the commit object to the shortened format for LMS commit.\n   * This method transforms the CMI data into a format suitable for sending to the LMS.\n   * It is called during the commit process to prepare the data for transmission.\n   *\n   * @param {boolean} _terminateCommit - Whether this commit is part of the termination process\n   * @return {CommitObject} A formatted object containing the data to be sent to the LMS\n   * @example\n   * // Example of a commit object structure\n   * {\n   *   method: \"POST\",\n   *   params: {\n   *     cmi: { ... },\n   *     finishState: \"COMPLETED\"\n   *   }\n   * }\n   */\n  abstract renderCommitObject(_terminateCommit: boolean): CommitObject;\n\n  /**\n   * Logging for all SCORM actions\n   *\n   * @param {string} functionName\n   * @param {string} logMessage\n   * @param {number} messageLevel\n   * @param {string} CMIElement\n   */\n  apiLog(functionName: string, logMessage: string, messageLevel: LogLevel, CMIElement?: string) {\n    logMessage = formatMessage(functionName, logMessage, CMIElement);\n\n    if (messageLevel >= this.apiLogLevel) {\n      // Use the injected LoggingService\n      this._loggingService.log(messageLevel, logMessage);\n    }\n  }\n\n  /**\n   * Getter for _settings\n   * @return {InternalSettings}\n   */\n  get settings(): InternalSettings {\n    return this._settings;\n  }\n\n  /**\n   * Setter for _settings\n   * @param {Settings} settings\n   */\n  set settings(settings: Settings) {\n    const previousSettings = this._settings;\n    this._settings = { ...this._settings, ...settings } as InternalSettings;\n\n    // Update HTTP service settings\n    this._httpService?.updateSettings(this._settings);\n\n    // Update log level if it changed\n    if (settings.logLevel !== undefined && settings.logLevel !== previousSettings.logLevel) {\n      this.apiLogLevel = settings.logLevel;\n      this._loggingService?.setLogLevel(settings.logLevel);\n    }\n\n    // Update log handler if onLogMessage changed\n    if (\n      settings.onLogMessage !== undefined &&\n      settings.onLogMessage !== previousSettings.onLogMessage\n    ) {\n      this._loggingService?.setLogHandler(settings.onLogMessage);\n    }\n  }\n\n  /**\n   * Terminates the current run of the API\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async terminate(callbackName: string, checkTerminated: boolean): Promise<string> {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.TERMINATION_BEFORE_INIT,\n        this._error_codes.MULTIPLE_TERMINATION,\n      )\n    ) {\n      this.currentState = global_constants.STATE_TERMINATED;\n      // If enabled, attempt to sync offline data before termination\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._courseId &&\n        this.settings.syncOnTerminate &&\n        this._offlineStorageService.isDeviceOnline()\n      ) {\n        const hasPendingData = await this._offlineStorageService.hasPendingOfflineData(\n          this._courseId,\n        );\n        if (hasPendingData) {\n          this.apiLog(\n            callbackName,\n            \"Syncing pending offline data before termination\",\n            LogLevelEnum.INFO,\n          );\n          await this._offlineStorageService.syncOfflineData();\n        }\n      }\n\n      const result: ResultObject = await this.storeData(true);\n      if ((result.errorCode ?? 0) > 0) {\n        this.throwSCORMError(\"api\", result.errorCode);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Get the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  getValue(callbackName: string, checkTerminated: boolean, CMIElement: string): string {\n    let returnValue: string = \"\";\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.RETRIEVE_BEFORE_INIT,\n        this._error_codes.RETRIEVE_AFTER_TERM,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.getCMIValue(CMIElement);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement);\n    }\n\n    this.apiLog(callbackName, \": returned: \" + returnValue, LogLevelEnum.INFO, CMIElement);\n\n    if (returnValue === undefined) {\n      return \"\";\n    }\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Sets the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {string} commitCallback\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  setValue(\n    callbackName: string,\n    commitCallback: string,\n    checkTerminated: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (value !== undefined) {\n      value = String(value);\n    }\n    let returnValue: string = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.STORE_BEFORE_INIT,\n        this._error_codes.STORE_AFTER_TERM,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.setCMIValue(CMIElement, value);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement, value);\n    }\n\n    if (returnValue === undefined) {\n      returnValue = global_constants.SCORM_FALSE;\n    }\n\n    // If we didn't have any errors while setting the data, go ahead and\n    // schedule a commit, if autocommit is turned on\n    if (String(this.lastErrorCode) === \"0\") {\n      if (this.settings.autocommit) {\n        this.scheduleCommit(this.settings.autocommitSeconds * 1000, commitCallback);\n      }\n    }\n\n    this.apiLog(\n      callbackName,\n      \": \" + value + \": result: \" + returnValue,\n      LogLevelEnum.INFO,\n      CMIElement,\n    );\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async commit(callbackName: string, checkTerminated: boolean = false): Promise<string> {\n    this.clearScheduledCommit();\n\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.COMMIT_BEFORE_INIT,\n        this._error_codes.COMMIT_AFTER_TERM,\n      )\n    ) {\n      const result = await this.storeData(false);\n      if ((result.errorCode ?? 0) > 0) {\n        this.throwSCORMError(\"api\", result.errorCode);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      this.apiLog(callbackName, \" Result: \" + returnValue, LogLevelEnum.DEBUG, \"HttpRequest\");\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      this.processListeners(callbackName);\n\n      // If online and there is offline data pending, attempt to sync it\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._offlineStorageService.isDeviceOnline() &&\n        this._courseId\n      ) {\n        this._offlineStorageService.hasPendingOfflineData(this._courseId).then((hasPendingData) => {\n          if (hasPendingData) {\n            this.apiLog(callbackName, \"Syncing pending offline data\", LogLevelEnum.INFO);\n            this._offlineStorageService?.syncOfflineData().then((syncSuccess) => {\n              if (syncSuccess) {\n                this.apiLog(callbackName, \"Successfully synced offline data\", LogLevelEnum.INFO);\n                this.processListeners(\"OfflineDataSynced\");\n              } else {\n                this.apiLog(callbackName, \"Failed to sync some offline data\", LogLevelEnum.WARN);\n              }\n            });\n          }\n        });\n      }\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Returns last error code\n   * @param {string} callbackName\n   * @return {string}\n   */\n  getLastError(callbackName: string): string {\n    const returnValue = String(this.lastErrorCode);\n\n    this.processListeners(callbackName);\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getErrorString(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getDiagnostic(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode, true);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Checks the LMS state and ensures it has been initialized.\n   *\n   * @param {boolean} checkTerminated\n   * @param {number} beforeInitError\n   * @param {number} afterTermError\n   * @return {boolean}\n   */\n  checkState(checkTerminated: boolean, beforeInitError: number, afterTermError: number): boolean {\n    if (this.isNotInitialized()) {\n      this.throwSCORMError(\"api\", beforeInitError);\n      return false;\n    } else if (checkTerminated && this.isTerminated()) {\n      this.throwSCORMError(\"api\", afterTermError);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {(string|number)} _errorNumber\n   * @param {boolean} _detail\n   * @return {string}\n   * @abstract\n   */\n  getLmsErrorMessageDetails(_errorNumber: string | number, _detail: boolean = false): string {\n    throw new Error(\"The getLmsErrorMessageDetails method has not been implemented\");\n  }\n\n  /**\n   * Gets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @return {string}\n   * @abstract\n   */\n  getCMIValue(_CMIElement: string): string {\n    throw new Error(\"The getCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Sets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @param {any} _value\n   * @return {string}\n   * @abstract\n   */\n  setCMIValue(_CMIElement: string, _value: any): string {\n    throw new Error(\"The setCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Shared API method to set a valid for a given element.\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  _commonSetCMIValue(\n    methodName: string,\n    scorm2004: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (!CMIElement || CMIElement === \"\") {\n      return global_constants.SCORM_FALSE;\n    }\n\n    this.lastErrorCode = \"0\";\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap | BaseCMI = this as StringKeyMap;\n    let returnValue = global_constants.SCORM_FALSE;\n    let foundFirstIndex = false;\n\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      const attribute = structure[idx];\n\n      if (idx === structure.length - 1) {\n        if (scorm2004 && attribute.substring(0, 8) === \"{target=\") {\n          if (this.isInitialized()) {\n            this.throwSCORMError(CMIElement, this._error_codes.READ_ONLY_ELEMENT);\n            break;\n          } else {\n            refObject = {\n              ...refObject,\n              attribute: value,\n            };\n          }\n        } else if (!this._checkObjectHasProperty(refObject as StringKeyMap, attribute)) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        } else {\n          if (\n            stringMatches(CMIElement, \"\\\\.correct_responses\\\\.\\\\d+$\") &&\n            this.isInitialized() &&\n            attribute !== \"pattern\"\n          ) {\n            this.validateCorrectResponse(CMIElement, value);\n            if (this.lastErrorCode !== \"0\") {\n              this.throwSCORMError(CMIElement, this._error_codes.TYPE_MISMATCH);\n              break;\n            }\n          }\n\n          if (!scorm2004 || this._errorHandlingService.lastErrorCode === \"0\") {\n            if (attribute === \"__proto__\" || attribute === \"constructor\") {\n              this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n              break;\n            }\n            (refObject as StringKeyMap)[attribute] = value;\n            returnValue = global_constants.SCORM_TRUE;\n          }\n        }\n      } else {\n        refObject = (refObject as StringKeyMap)[attribute] as StringKeyMap;\n        if (!refObject) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n\n        if (refObject instanceof CMIArray) {\n          const index = parseInt(structure[idx + 1], 10);\n\n          // SCO is trying to set an item on an array\n          if (!isNaN(index)) {\n            const item = refObject.childArray[index];\n\n            if (item) {\n              refObject = item;\n              foundFirstIndex = true;\n            } else {\n              const newChild = this.getChildElement(CMIElement, value, foundFirstIndex);\n              foundFirstIndex = true;\n\n              if (!newChild) {\n                if (this.lastErrorCode === \"0\") {\n                  this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n                }\n                break;\n              } else {\n                if (refObject.initialized) newChild.initialize();\n                refObject.childArray[index] = newChild;\n                refObject = newChild;\n              }\n            }\n\n            // Have to update idx value to skip the array position\n            idx++;\n          }\n        }\n      }\n    }\n\n    if (returnValue === global_constants.SCORM_FALSE) {\n      this.apiLog(\n        methodName,\n        `There was an error setting the value for: ${CMIElement}, value of: ${value}`,\n        LogLevelEnum.WARN,\n      );\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @return {any}\n   */\n  _commonGetCMIValue(methodName: string, scorm2004: boolean, CMIElement: string): any {\n    if (!CMIElement || CMIElement === \"\") {\n      return \"\";\n    }\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap = this as StringKeyMap;\n    let attribute = null;\n\n    const uninitializedErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) has not been initialized.`;\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      attribute = structure[idx];\n\n      if (!scorm2004) {\n        if (idx === structure.length - 1) {\n          if (!this._checkObjectHasProperty(refObject, attribute)) {\n            this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n            return;\n          }\n        }\n      } else {\n        if (\n          String(attribute).substring(0, 8) === \"{target=\" &&\n          typeof refObject._isTargetValid == \"function\"\n        ) {\n          const target = String(attribute).substring(8, String(attribute).length - 9);\n          return refObject._isTargetValid(target);\n        } else if (!this._checkObjectHasProperty(refObject, attribute)) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          return;\n        }\n      }\n\n      refObject = refObject[attribute] as StringKeyMap;\n      if (refObject === undefined) {\n        this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n        break;\n      }\n\n      if (refObject instanceof CMIArray) {\n        const index = parseInt(structure[idx + 1], 10);\n\n        // SCO is trying to set an item on an array\n        if (!isNaN(index)) {\n          const item = refObject.childArray[index];\n\n          if (item) {\n            refObject = item;\n          } else {\n            this.throwSCORMError(\n              CMIElement,\n              this._error_codes.VALUE_NOT_INITIALIZED,\n              uninitializedErrorMessage,\n            );\n            break;\n          }\n\n          // Have to update idx value to skip the array position\n          idx++;\n        }\n      }\n    }\n\n    if (refObject === null || refObject === undefined) {\n      if (!scorm2004) {\n        if (attribute === \"_children\") {\n          this.throwSCORMError(CMIElement, this._error_codes.CHILDREN_ERROR, undefined);\n        } else if (attribute === \"_count\") {\n          this.throwSCORMError(CMIElement, this._error_codes.COUNT_ERROR, undefined);\n        }\n      }\n    } else {\n      return refObject;\n    }\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isInitialized(): boolean {\n    return this.currentState === global_constants.STATE_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_NOT_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isNotInitialized(): boolean {\n    return this.currentState === global_constants.STATE_NOT_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_TERMINATED\n   *\n   * @return {boolean}\n   */\n  isTerminated(): boolean {\n    return this.currentState === global_constants.STATE_TERMINATED;\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event.\n   * This method allows you to register a callback function that will be executed\n   * when the specified event occurs.\n   *\n   * @param {string} listenerName - The name of the event to listen for (e.g., \"Initialize\", \"Terminate\", \"GetValue\", \"SetValue\", \"Commit\")\n   * @param {function} callback - The function to execute when the event occurs. The callback will receive relevant event data.\n   * @example\n   * // Listen for Initialize events\n   * api.on(\"Initialize\", function() {\n   *   console.log(\"API has been initialized\");\n   * });\n   *\n   * // Listen for SetValue events\n   * api.on(\"SetValue\", function(element, value) {\n   *   console.log(\"Setting \" + element + \" to \" + value);\n   * });\n   */\n  on(listenerName: string, callback: Function) {\n    this._eventService.on(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener.\n   * This method removes a previously registered callback for an event.\n   * Both the event name and the callback reference must match what was used in the 'on' method.\n   *\n   * @param {string} listenerName - The name of the event to stop listening for\n   * @param {function} callback - The callback function to remove\n   * @example\n   * // Remove a specific listener\n   * const myCallback = function() { console.log(\"API initialized\"); };\n   * api.on(\"Initialize\", myCallback);\n   * // Later, when you want to remove it:\n   * api.off(\"Initialize\", myCallback);\n   */\n  off(listenerName: string, callback: Function) {\n    this._eventService.off(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event.\n   * This method removes all callbacks registered for the specified event.\n   *\n   * @param {string} listenerName - The name of the event to clear all listeners for\n   * @example\n   * // Remove all listeners for the Initialize event\n   * api.clear(\"Initialize\");\n   */\n  clear(listenerName: string) {\n    this._eventService.clear(listenerName);\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created for a specific event.\n   * This method is called internally when SCORM events occur to notify all registered listeners.\n   * It triggers all callback functions registered for the specified event.\n   *\n   * @param {string} functionName - The name of the function/event that occurred\n   * @param {string} CMIElement - Optional CMI element involved in the event\n   * @param {any} value - Optional value associated with the event\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this._eventService.processListeners(functionName, CMIElement, value);\n  }\n\n  /**\n   * Throws a SCORM error with the specified error number and optional message.\n   * This method sets the last error code and can be used to indicate that an operation failed.\n   * The error number should correspond to one of the standard SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The SCORM error code to set\n   * @param {string} message - Optional custom error message to provide additional context\n   * @example\n   * // Throw a \"not initialized\" error\n   * this.throwSCORMError(301, \"The API must be initialized before calling GetValue\");\n   */\n  throwSCORMError(CMIElement: string, errorNumber: number, message?: string) {\n    this._errorHandlingService.throwSCORMError(CMIElement, errorNumber, message);\n  }\n\n  /**\n   * Clears the last SCORM error code when an operation succeeds.\n   * This method is typically called after successful API operations to reset the error state.\n   * It only clears the error if the success parameter is \"true\".\n   *\n   * @param {string} success - A string indicating whether the operation succeeded (\"true\" or \"false\")\n   * @example\n   * // Clear error after successful operation\n   * this.clearSCORMError(\"true\");\n   */\n  clearSCORMError(success: string) {\n    this._errorHandlingService.clearSCORMError(success);\n  }\n\n  /**\n   * Load the CMI from a flattened JSON object.\n   * This method populates the CMI data model from a flattened JSON structure\n   * where keys represent CMI element paths (e.g., \"cmi.core.student_id\").\n   *\n   * @param {StringKeyMap} json - The flattened JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a flattened JSON structure\n   * api.loadFromFlattenedJSON({\n   *   \"cmi.core.student_id\": \"12345\",\n   *   \"cmi.core.student_name\": \"John Doe\",\n   *   \"cmi.core.lesson_status\": \"incomplete\"\n   * });\n   */\n  loadFromFlattenedJSON(json: StringKeyMap, CMIElement?: string) {\n    if (!CMIElement) {\n      // by default, we start from a blank string because we're expecting each element to start with `cmi`\n      CMIElement = \"\";\n    }\n\n    this._serializationService.loadFromFlattenedJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Returns a flattened JSON object representing the current CMI data.\n   */\n  getFlattenedCMI(): StringKeyMap {\n    return Utilities.flatten(this.renderCMIToJSONObject());\n  }\n\n  /**\n   * Loads CMI data from a hierarchical JSON object.\n   * This method populates the CMI data model from a nested JSON structure\n   * that mirrors the CMI object hierarchy.\n   *\n   * @param {StringKeyMap} json - The hierarchical JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a hierarchical JSON structure\n   * api.loadFromJSON({\n   *   core: {\n   *     student_id: \"12345\",\n   *     student_name: \"John Doe\",\n   *     lesson_status: \"incomplete\"\n   *   },\n   *   objectives: [\n   *     { id: \"obj1\", score: { raw: 85 } }\n   *   ]\n   * });\n   */\n  loadFromJSON(json: StringKeyMap, CMIElement: string = \"\") {\n    if (\n      (!CMIElement || CMIElement === \"\") &&\n      !Object.hasOwnProperty.call(json, \"cmi\") &&\n      !Object.hasOwnProperty.call(json, \"adl\")\n    ) {\n      // providing a backward compatibility for the old v1 API\n      CMIElement = \"cmi\";\n    }\n    this._serializationService.loadFromJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Render the CMI object to a JSON string for sending to an LMS.\n   * This method serializes the current CMI data model to a JSON string.\n   * The output format is controlled by the sendFullCommit setting.\n   *\n   * @return {string} A JSON string representation of the CMI data\n   * @example\n   * // Get the current CMI data as a JSON string\n   * const jsonString = api.renderCMIToJSONString();\n   * console.log(jsonString); // '{\"core\":{\"student_id\":\"12345\",...}}'\n   */\n  renderCMIToJSONString(): string {\n    return this._serializationService.renderCMIToJSONString(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Returns a JavaScript object representing the current CMI data.\n   * This method creates a plain JavaScript object that mirrors the\n   * structure of the CMI data model, suitable for further processing.\n   *\n   * @return {StringKeyMap} A JavaScript object representing the CMI data\n   * @example\n   * // Get the current CMI data as a JavaScript object\n   * const cmiObject = api.renderCMIToJSONObject();\n   * console.log(cmiObject.core.student_id); // \"12345\"\n   */\n  renderCMIToJSONObject(): StringKeyMap {\n    return this._serializationService.renderCMIToJSONObject(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Process an HTTP request\n   *\n   * @param {string} url - The URL to send the request to\n   * @param {CommitObject | StringKeyMap | Array<any>} params - The parameters to send\n   * @param {boolean} immediate - Whether to send the request immediately without waiting\n   * @returns {Promise<ResultObject>} - The result of the request\n   * @async\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n  ): Promise<ResultObject> {\n    // If offline support is enabled and device is offline, store data locally instead of sending\n    if (\n      this.settings.enableOfflineSupport &&\n      this._offlineStorageService &&\n      !this._offlineStorageService.isDeviceOnline() &&\n      this._courseId\n    ) {\n      this.apiLog(\n        \"processHttpRequest\",\n        \"Device is offline, storing data locally\",\n        LogLevelEnum.INFO,\n      );\n\n      if (params && typeof params === \"object\" && \"cmi\" in params) {\n        return await this._offlineStorageService.storeOffline(\n          this._courseId,\n          params as CommitObject,\n        );\n      } else {\n        this.apiLog(\n          \"processHttpRequest\",\n          \"Invalid commit data format for offline storage\",\n          LogLevelEnum.ERROR,\n        );\n        return {\n          result: global_constants.SCORM_FALSE,\n          errorCode: this._error_codes.GENERAL,\n        };\n      }\n    }\n\n    // Otherwise, proceed with normal HTTP request\n    return await this._httpService.processHttpRequest(\n      url,\n      params,\n      immediate,\n      (functionName, message, level, element) => this.apiLog(functionName, message, level, element),\n      (functionName, CMIElement, value) => this.processListeners(functionName, CMIElement, value),\n    );\n  }\n\n  /**\n   * Schedules a commit operation to occur after a specified delay.\n   * This method is used to implement auto-commit functionality, where data\n   * is periodically sent to the LMS without requiring explicit commit calls.\n   *\n   * @param {number} when - The number of milliseconds to wait before committing\n   * @param {string} callback - The name of the commit event callback\n   * @example\n   * // Schedule a commit to happen in 60 seconds\n   * api.scheduleCommit(60000, \"commit\");\n   */\n  scheduleCommit(when: number, callback: string) {\n    if (!this._timeout) {\n      this._timeout = new ScheduledCommit(this, when, callback);\n      this.apiLog(\"scheduleCommit\", \"scheduled\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Clears and cancels any currently scheduled commits.\n   * This method is typically called when an explicit commit is performed\n   * or when the API is terminated, to prevent redundant commits.\n   *\n   * @example\n   * // Cancel any pending scheduled commits\n   * api.clearScheduledCommit();\n   */\n  clearScheduledCommit() {\n    if (this._timeout) {\n      this._timeout.cancel();\n      this._timeout = undefined;\n      this.apiLog(\"clearScheduledCommit\", \"cleared\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Checks if an object has a specific property, using multiple detection methods.\n   * This method performs a thorough check for property existence by:\n   * 1. Checking if it's an own property using Object.hasOwnProperty\n   * 2. Checking if it's defined in the prototype with a property descriptor\n   * 3. Checking if it's accessible via the 'in' operator (includes inherited properties)\n   *\n   * @param {StringKeyMap} StringKeyMap - The object to check for the property\n   * @param {string} attribute - The property name to look for\n   * @return {boolean} True if the property exists on the object or its prototype chain\n   * @private\n   *\n   * @example\n   * // Check for an own property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"name\"); // Returns true\n   *\n   * @example\n   * // Check for an inherited property\n   * class Parent { get type() { return \"parent\"; } }\n   * const child = Object.create(new Parent());\n   * this._checkObjectHasProperty(child, \"type\"); // Returns true\n   *\n   * @example\n   * // Check for a non-existent property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"age\"); // Returns false\n   */\n  private _checkObjectHasProperty(StringKeyMap: StringKeyMap, attribute: string): boolean {\n    return (\n      Object.hasOwnProperty.call(StringKeyMap, attribute) ||\n      Object.getOwnPropertyDescriptor(Object.getPrototypeOf(StringKeyMap), attribute) != null ||\n      attribute in StringKeyMap\n    );\n  }\n\n  /**\n   * Handles exceptions that occur when accessing CMI values.\n   * This method delegates to the ErrorHandlingService to process exceptions\n   * that occur during CMI data operations, ensuring consistent error handling\n   * throughout the API.\n   *\n   * @param {string} CMIElement\n   * @param {any} e - The exception that was thrown\n   * @param {string} returnValue - The default return value to use if an error occurs\n   * @return {string} Either the original returnValue or SCORM_FALSE if an error occurred\n   * @private\n   *\n   * @example\n   * // Handle a validation error when getting a CMI value\n   * try {\n   *   return this.getCMIValue(\"cmi.core.score.raw\");\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"\");\n   * }\n   *\n   * @example\n   * // Handle a general error when setting a CMI value\n   * try {\n   *   this.setCMIValue(\"cmi.core.lesson_status\", \"completed\");\n   *   return \"true\";\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"false\");\n   * }\n   */\n  private handleValueAccessException(CMIElement: string, e: any, returnValue: string): string {\n    if (e instanceof ValidationError) {\n      this.lastErrorCode = String(e.errorCode);\n      returnValue = global_constants.SCORM_FALSE;\n      this.throwSCORMError(CMIElement, e.errorCode, e.errorMessage);\n    } else {\n      if (e instanceof Error && e.message) {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, e.message);\n      } else {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, \"Unknown error\");\n      }\n    }\n    return returnValue;\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS.\n   * This method delegates to the SerializationService to create a properly\n   * formatted object containing the CMI data that needs to be sent to the LMS.\n   * The format and content of the commit object depend on whether this is a\n   * regular commit or a termination commit.\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @return {CommitObject|StringKeyMap|Array} The formatted commit object\n   * @protected\n   *\n   * @example\n   * // Create a regular commit object\n   * const regularCommit = this.getCommitObject(false);\n   * // Result might be: { cmi: { core: { lesson_status: \"incomplete\" } } }\n   *\n   * @example\n   * // Create a termination commit object (includes total_time)\n   * const terminationCommit = this.getCommitObject(true);\n   * // Result might be: { cmi: { core: { lesson_status: \"completed\", total_time: \"PT1H30M\" } } }\n   */\n  protected getCommitObject(terminateCommit: boolean): CommitObject | StringKeyMap | Array<any> {\n    return this._serializationService.getCommitObject(\n      terminateCommit,\n      this.settings.alwaysSendTotalTime,\n      this.settings.renderCommonCommitFields,\n      (terminateCommit) => this.renderCommitObject(terminateCommit),\n      (terminateCommit) => this.renderCommitCMI(terminateCommit),\n      this.apiLogLevel,\n    );\n  }\n}\n","import { ValidationError } from \"../exceptions\";\nimport { scorm2004_constants } from \"../constants/api_constants\";\n\nconst scorm2004_errors = scorm2004_constants.error_descriptions;\n\n/**\n * SCORM 2004 Validation Error\n */\nexport class Scorm2004ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm2004_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm2004_errors[String(errorCode)].basicMessage,\n        scorm2004_errors[String(errorCode)].detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm2004_errors[\"101\"].basicMessage,\n        scorm2004_errors[\"101\"].detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm2004ValidationError.prototype);\n  }\n}\n","import { BaseScormValidationError } from \"../../exceptions\";\nimport { memoize } from \"../../utilities\";\n\n/**\n * Check if the value matches the proper format. If not, throw proper error code.\n *\n * @param {string} value\n * @param {string} regexPattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @param {boolean} [allowEmptyString]\n * @return {boolean}\n */\nexport const checkValidFormat = memoize(\n  (\n    CMIElement: string,\n    value: string,\n    regexPattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n    allowEmptyString?: boolean,\n  ): boolean => {\n    // noinspection SuspiciousTypeOfGuard\n    if (typeof value !== \"string\") {\n      return false;\n    }\n    const formatRegex = new RegExp(regexPattern);\n    const matches = value.match(formatRegex);\n    if (allowEmptyString && value === \"\") {\n      return true;\n    }\n    if (value === undefined || !matches || matches[0] === \"\") {\n      throw new errorClass(CMIElement, errorCode);\n    }\n    return true;\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, regexPattern, errorCode, _errorClass, allowEmptyString) => {\n    // Use typeof for non-string values to ensure consistent cache keys\n    // noinspection SuspiciousTypeOfGuard\n    const valueKey = typeof value === \"string\" ? value : `[${typeof value}]`;\n    return `${CMIElement}:${valueKey}:${regexPattern}:${errorCode}:${allowEmptyString || false}`;\n  },\n);\n\n/**\n * Check if the value matches the proper range. If not, throw proper error code.\n *\n * @param {any} value\n * @param {string} rangePattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @return {boolean}\n */\nexport const checkValidRange = memoize(\n  (\n    CMIElement: string,\n    value: any,\n    rangePattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean => {\n    const ranges = rangePattern.split(\"#\");\n    value = value * 1.0;\n    if (value >= ranges[0]) {\n      if (ranges[1] === \"*\" || value <= ranges[1]) {\n        return true;\n      } else {\n        throw new errorClass(CMIElement, errorCode);\n      }\n    } else {\n      throw new errorClass(CMIElement, errorCode);\n    }\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, rangePattern, errorCode, _errorClass) =>\n    `${CMIElement}:${value}:${rangePattern}:${errorCode}`,\n);\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check2004ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm2004_errors.TYPE_MISMATCH,\n    Scorm2004ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @return {boolean}\n */\nexport function check2004ValidRange(\n  CMIElement: string,\n  value: string,\n  rangePattern: string,\n): boolean {\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm2004_errors.VALUE_OUT_OF_RANGE,\n    Scorm2004ValidationError,\n  );\n}\n","export const scorm12_regex = {\n  CMIString256: \"^.{0,255}$\",\n  CMIString4096: \"^.{0,4096}$\",\n  CMITime: \"^(?:[01]\\\\d|2[0123]):(?:[012345]\\\\d):(?:[012345]\\\\d)$\",\n  CMITimespan: \"^([0-9]{2,}):([0-9]{2}):([0-9]{2})(.[0-9]{1,2})?$\",\n\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{0,3})(.[0-9]*)?$\",\n\n  CMIIdentifier: \"^[\\\\u0021-\\\\u007E\\\\s]{0,255}$\",\n  CMIFeedback: \"^.{0,255}$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMIStatus: \"^(passed|completed|failed|incomplete|browsed)$\",\n  CMIStatus2: \"^(passed|completed|failed|incomplete|browsed|not attempted)$\",\n  CMIExit: \"^(time-out|suspend|logout|)$\",\n  CMIType: \"^(true-false|choice|fill-in|matching|performance|sequencing|likert|numeric)$\",\n  CMIResult: \"^(correct|wrong|unanticipated|neutral|([0-9]{0,3})?(\\\\.[0-9]*)?)$\",\n  NAVEvent: \"^(previous|continue)$\",\n  // Data ranges\n  score_range: \"0#100\",\n  audio_range: \"-1#100\",\n  speed_range: \"-100#100\",\n  weighting_range: \"-100#100\",\n  text_range: \"-1#1\",\n};\nexport const aicc_regex = {\n  ...scorm12_regex,\n  ...{\n    CMIIdentifier: \"^\\\\w{1,255}$\",\n  },\n};\nexport const scorm2004_regex = {\n  CMIString200: \"^[\\\\u0000-\\\\uFFFF]{0,200}$\",\n  CMIString250: \"^[\\\\u0000-\\\\uFFFF]{0,250}$\",\n  CMIString1000: \"^[\\\\u0000-\\\\uFFFF]{0,1000}$\",\n  CMIString4000: \"^[\\\\u0000-\\\\uFFFF]{0,4000}$\",\n  CMIString64000: \"^[\\\\u0000-\\\\uFFFF]{0,64000}$\",\n  CMILang: \"^([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?$|^$\",\n\n  CMILangString250: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,250}$)?$\",\n\n  CMILangcr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?}))(.*?)$\",\n\n  CMILangString250cr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?})?(.{0,250})?)?$\",\n\n  CMILangString4000: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,4000}$)?$\",\n\n  CMITime:\n    \"^(19[7-9]{1}[0-9]{1}|20[0-2]{1}[0-9]{1}|203[0-8]{1})((-(0[1-9]{1}|1[0-2]{1}))((-(0[1-9]{1}|[1-2]{1}[0-9]{1}|3[0-1]{1}))(T([0-1]{1}[0-9]{1}|2[0-3]{1})((:[0-5]{1}[0-9]{1})((:[0-5]{1}[0-9]{1})((\\\\.[0-9]{1,6})((Z|([+|-]([0-1]{1}[0-9]{1}|2[0-3]{1})))(:[0-5]{1}[0-9]{1})?)?)?)?)?)?)?)?$\",\n  CMITimespan:\n    \"^P(?:([.,\\\\d]+)Y)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)W)?(?:([.,\\\\d]+)D)?(?:T?(?:([.,\\\\d]+)H)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)S)?)?$\",\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{1,5})(\\\\.[0-9]{1,18})?$\",\n  CMIIdentifier: \"^\\\\S{1,250}[a-zA-Z0-9]$\",\n  CMIShortIdentifier: \"^[\\\\w\\\\.\\\\-\\\\_]{1,250}$\",\n  CMILongIdentifier: \"^(?:(?!urn:)\\\\S{1,4000}|urn:[A-Za-z0-9-]{1,31}:\\\\S{1,4000}|.{1,4000})$\",\n  // need to re-examine this\n  CMIFeedback: \"^.*$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  CMIIndexStore: \".N(\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMICStatus: \"^(completed|incomplete|not attempted|unknown)$\",\n  CMISStatus: \"^(passed|failed|unknown)$\",\n  CMIExit: \"^(time-out|suspend|logout|normal)$\",\n  CMIType:\n    \"^(true-false|choice|fill-in|long-fill-in|matching|performance|sequencing|likert|numeric|other)$\",\n  CMIResult: \"^(correct|incorrect|unanticipated|neutral|-?([0-9]{1,4})(\\\\.[0-9]{1,18})?)$\",\n  NAVEvent:\n    \"^(previous|continue|exit|exitAll|abandon|abandonAll|suspendAll|_none_|(\\\\{target=(?<choice_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?choice|(\\\\{target=(?<jump_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?jump)$\",\n\n  NAVBoolean: \"^(unknown|true|false$)\",\n  NAVTarget: \"^{target=\\\\S{0,}[a-zA-Z0-9-_]+}$\",\n  // Data ranges\n  scaled_range: \"-1#1\",\n  audio_range: \"0#999.9999999\",\n  speed_range: \"0#999.9999999\",\n  text_range: \"-1#1\",\n  progress_range: \"0#1\",\n};\n","/**\n * Class for SCORM 2004's cmi.learner_preference object\n */\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\n\nexport class CMILearnerPreference extends BaseCMI {\n  private __children = scorm2004_constants.student_preference_children;\n  private _audio_level = \"1\";\n  private _language = \"\";\n  private _delivery_speed = \"1\";\n  private _audio_captioning = \"0\";\n\n  /**\n   * Constructor for cmi.learner_preference\n   */\n  constructor() {\n    super(\"cmi.learner_preference\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._children\",\n      scorm2004_errors.READ_ONLY_ELEMENT,\n    );\n  }\n\n  /**\n   * Getter for _audio_level\n   * @return {string}\n   */\n  get audio_level(): string {\n    return this._audio_level;\n  }\n\n  /**\n   * Setter for _audio_level\n   * @param {string} audio_level\n   */\n  set audio_level(audio_level: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".audio_level\",\n        audio_level,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".audio_level\",\n        audio_level,\n        scorm2004_regex.audio_range,\n      )\n    ) {\n      this._audio_level = audio_level;\n    }\n  }\n\n  /**\n   * Getter for _language\n   * @return {string}\n   */\n  get language(): string {\n    return this._language;\n  }\n\n  /**\n   * Setter for _language\n   * @param {string} language\n   */\n  set language(language: string) {\n    if (check2004ValidFormat(this._cmi_element + \".language\", language, scorm2004_regex.CMILang)) {\n      this._language = language;\n    }\n  }\n\n  /**\n   * Getter for _delivery_speed\n   * @return {string}\n   */\n  get delivery_speed(): string {\n    return this._delivery_speed;\n  }\n\n  /**\n   * Setter for _delivery_speed\n   * @param {string} delivery_speed\n   */\n  set delivery_speed(delivery_speed: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".delivery_speed\",\n        delivery_speed,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".delivery_speed\",\n        delivery_speed,\n        scorm2004_regex.speed_range,\n      )\n    ) {\n      this._delivery_speed = delivery_speed;\n    }\n  }\n\n  /**\n   * Getter for _audio_captioning\n   * @return {string}\n   */\n  get audio_captioning(): string {\n    return this._audio_captioning;\n  }\n\n  /**\n   * Setter for _audio_captioning\n   * @param {string} audio_captioning\n   */\n  set audio_captioning(audio_captioning: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".audio_captioning\",\n        audio_captioning,\n        scorm2004_regex.CMISInteger,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".audio_captioning\",\n        audio_captioning,\n        scorm2004_regex.text_range,\n      )\n    ) {\n      this._audio_captioning = audio_captioning;\n    }\n  }\n\n  /**\n   * toJSON for cmi.learner_preference\n   *\n   * @return {\n   *    {\n   *      audio_level: string,\n   *      language: string,\n   *      delivery_speed: string,\n   *      audio_captioning: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    audio_level: string;\n    language: string;\n    delivery_speed: string;\n    audio_captioning: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio_level: this.audio_level,\n      language: this.language,\n      delivery_speed: this.delivery_speed,\n      audio_captioning: this.audio_captioning,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { scorm2004_regex } from \"./regex\";\n\nexport const LearnerResponses: Responses = {\n  \"true-false\": {\n    format: \"^true$|^false$\",\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  choice: {\n    format: scorm2004_regex.CMILongIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    unique: true,\n  },\n  \"fill-in\": {\n    format: scorm2004_regex.CMILangString250,\n    max: 10,\n    delimiter: \"[,]\",\n    unique: false,\n  },\n  \"long-fill-in\": {\n    format: scorm2004_regex.CMILangString4000,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  matching: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n  },\n  performance: {\n    format: \"^$|\" + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + \"|^$|\" + scorm2004_regex.CMIShortIdentifier,\n    max: 250,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n  },\n  sequencing: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    unique: false,\n  },\n  likert: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  numeric: {\n    format: scorm2004_regex.CMIDecimal,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  other: {\n    format: scorm2004_regex.CMIString4000,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n};\nexport const CorrectResponses: Responses = {\n  \"true-false\": {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: \"^true$|^false$\",\n    limit: 1,\n  },\n  choice: {\n    max: 36,\n    delimiter: \"[,]\",\n    unique: true,\n    duplicate: false,\n    format: scorm2004_regex.CMILongIdentifier,\n  },\n  \"fill-in\": {\n    max: 10,\n    delimiter: \"[,]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMILangString250cr,\n  },\n  \"long-fill-in\": {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: true,\n    format: scorm2004_regex.CMILangString4000,\n  },\n  matching: {\n    max: 36,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n  },\n  performance: {\n    max: 250,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    delimiter3: \"[:]\",\n    unique: false,\n    duplicate: false,\n    // step_name must be a non-empty short identifier\n    format: scorm2004_regex.CMIShortIdentifier,\n    // step_answer may be short identifier or numeric range (<decimal>[:<decimal>])\n    format2: `^(${scorm2004_regex.CMIShortIdentifier})$|^(?:\\\\d+(?:\\\\.\\\\d+)?(?::\\\\d+(?:\\\\.\\\\d+)?)?)$`,\n  },\n  sequencing: {\n    max: 36,\n    delimiter: \"[,]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n  },\n  likert: {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    limit: 1,\n  },\n  numeric: {\n    max: 2,\n    delimiter: \"[:]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIDecimal,\n    limit: 1,\n  },\n  other: {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIString4000,\n    limit: 1,\n  },\n};\n\nexport type ResponseType = {\n  format: string;\n  max: number;\n  delimiter: string;\n  unique: boolean;\n  duplicate?: boolean;\n  format2?: string;\n  delimiter2?: string;\n  limit?: number;\n  delimiter3?: string;\n};\n\nexport type Responses = {\n  [key: string]: ResponseType;\n};\n","/**\n * Class representing SCORM 2004's `cmi.interactions` object\n */\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { CMIArray } from \"../common/array\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport {\n  CorrectResponses,\n  LearnerResponses,\n  ResponseType,\n} from \"../../constants/response_constants\";\n\nexport class CMIInteractions extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives` Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.interactions\",\n      children: scorm2004_constants.interactions_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.interaction.n object\n */\n\nexport class CMIInteractionsObject extends BaseCMI {\n  private _id = \"\";\n  private _type = \"\";\n  private _timestamp = \"\";\n  private _weighting = \"\";\n  private _learner_response = \"\";\n  private _result = \"\";\n  private _latency = \"\";\n  private _description = \"\";\n\n  /**\n   * Constructor for cmi.interaction.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n\");\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.n.correct_responses\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  public objectives: CMIArray;\n  public correct_responses: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._id = \"\";\n    this._type = \"\";\n    this._timestamp = \"\";\n    this._weighting = \"\";\n    this._learner_response = \"\";\n    this._result = \"\";\n    this._latency = \"\";\n    this._description = \"\";\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.n.correct_responses\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _type\n   * @return {string}\n   */\n  get type(): string {\n    return this._type;\n  }\n\n  /**\n   * Setter for _type\n   * @param {string} type\n   */\n  set type(type: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".type\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (check2004ValidFormat(this._cmi_element + \".type\", type, scorm2004_regex.CMIType)) {\n        this._type = type;\n      }\n    }\n  }\n\n  /**\n   * Getter for _timestamp\n   * @return {string}\n   */\n  get timestamp(): string {\n    return this._timestamp;\n  }\n\n  /**\n   * Setter for _timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".timestamp\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".timestamp\", timestamp, scorm2004_regex.CMITime)\n      ) {\n        this._timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * Getter for _weighting\n   * @return {string}\n   */\n  get weighting(): string {\n    return this._weighting;\n  }\n\n  /**\n   * Setter for _weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".weighting\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".weighting\",\n          weighting,\n          scorm2004_regex.CMIDecimal,\n        )\n      ) {\n        this._weighting = weighting;\n      }\n    }\n  }\n\n  /**\n   * Getter for _learner_response\n   * @return {string}\n   */\n  get learner_response(): string {\n    return this._learner_response;\n  }\n\n  /**\n   * Setter for _learner_response. Does type validation to make sure response\n   * matches SCORM 2004's spec\n   * @param {string} learner_response\n   */\n  set learner_response(learner_response: string) {\n    if (this.initialized && (this._type === \"\" || this._id === \"\")) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_response\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      let nodes = [];\n      const response_type = LearnerResponses[this.type];\n\n      if (response_type) {\n        if (response_type?.delimiter) {\n          // Convert regex-style delimiter to actual character\n          const delimiter = response_type.delimiter === \"[,]\" ? \",\" : response_type.delimiter;\n          nodes = learner_response.split(delimiter);\n        } else {\n          nodes[0] = learner_response;\n        }\n\n        if (nodes.length > 0 && nodes.length <= response_type.max) {\n          const formatRegex = new RegExp(response_type.format);\n\n          for (let i = 0; i < nodes.length; i++) {\n            if (response_type?.delimiter2) {\n              // Convert regex-style delimiter to actual character\n              const delimiter2 =\n                response_type.delimiter2 === \"[.]\" ? \".\" : response_type.delimiter2;\n              const values = nodes[i].split(delimiter2);\n\n              if (values.length === 2) {\n                // For performance type, both parts must be non-empty\n                if (this.type === \"performance\" && (values[0] === \"\" || values[1] === \"\")) {\n                  throw new Scorm2004ValidationError(\n                    this._cmi_element + \".learner_response\",\n                    scorm2004_errors.TYPE_MISMATCH,\n                  );\n                }\n\n                if (!values[0].match(formatRegex)) {\n                  throw new Scorm2004ValidationError(\n                    this._cmi_element + \".learner_response\",\n                    scorm2004_errors.TYPE_MISMATCH,\n                  );\n                } else {\n                  if (\n                    !response_type.format2 ||\n                    !values[1].match(new RegExp(response_type.format2))\n                  ) {\n                    throw new Scorm2004ValidationError(\n                      this._cmi_element + \".learner_response\",\n                      scorm2004_errors.TYPE_MISMATCH,\n                    );\n                  }\n                }\n              } else {\n                throw new Scorm2004ValidationError(\n                  this._cmi_element + \".learner_response\",\n                  scorm2004_errors.TYPE_MISMATCH,\n                );\n              }\n            } else {\n              if (!nodes[i].match(formatRegex)) {\n                throw new Scorm2004ValidationError(\n                  this._cmi_element + \".learner_response\",\n                  scorm2004_errors.TYPE_MISMATCH,\n                );\n              } else {\n                if (nodes[i] !== \"\" && response_type.unique) {\n                  for (let j = 0; j < i; j++) {\n                    if (nodes[i] === nodes[j]) {\n                      throw new Scorm2004ValidationError(\n                        this._cmi_element + \".learner_response\",\n                        scorm2004_errors.TYPE_MISMATCH,\n                      );\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          throw new Scorm2004ValidationError(\n            this._cmi_element + \".learner_response\",\n            scorm2004_errors.GENERAL_SET_FAILURE,\n          );\n        }\n\n        this._learner_response = learner_response;\n      } else {\n        throw new Scorm2004ValidationError(\n          this._cmi_element + \".learner_response\",\n          scorm2004_errors.TYPE_MISMATCH,\n        );\n      }\n    }\n  }\n\n  /**\n   * Getter for _result\n   * @return {string}\n   */\n  get result(): string {\n    return this._result;\n  }\n\n  /**\n   * Setter for _result\n   * @param {string} result\n   */\n  set result(result: string) {\n    if (check2004ValidFormat(this._cmi_element + \".result\", result, scorm2004_regex.CMIResult)) {\n      this._result = result;\n    }\n  }\n\n  /**\n   * Getter for _latency\n   * @return {string}\n   */\n  get latency(): string {\n    return this._latency;\n  }\n\n  /**\n   * Setter for _latency\n   * @param {string} latency\n   */\n  set latency(latency: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".latency\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".latency\", latency, scorm2004_regex.CMITimespan)\n      ) {\n        this._latency = latency;\n      }\n    }\n  }\n\n  /**\n   * Getter for _description\n   * @return {string}\n   */\n  get description(): string {\n    return this._description;\n  }\n\n  /**\n   * Setter for _description\n   * @param {string} description\n   */\n  set description(description: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".description\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".description\",\n          description,\n          scorm2004_regex.CMILangString250,\n          true,\n        )\n      ) {\n        this._description = description;\n      }\n    }\n  }\n\n  // noinspection JSUnusedGlobalSymbols\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      type: string,\n   *      objectives: CMIArray,\n   *      timestamp: string,\n   *      correct_responses: CMIArray,\n   *      weighting: string,\n   *      learner_response: string,\n   *      result: string,\n   *      latency: string,\n   *      description: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    type: string;\n    objectives: CMIArray;\n    timestamp: string;\n    correct_responses: CMIArray;\n    weighting: string;\n    learner_response: string;\n    result: string;\n    latency: string;\n    description: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      type: this.type,\n      objectives: this.objectives,\n      timestamp: this.timestamp,\n      weighting: this.weighting,\n      learner_response: this.learner_response,\n      result: this.result,\n      latency: this.latency,\n      description: this.description,\n      correct_responses: this.correct_responses,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.objectives.n object\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  private _id = \"\";\n\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n.objectives.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._id = \"\";\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Helper: strip the square-bracket notation (e.g. \"[,]\") down to the character (\",\")\n */\nfunction stripBrackets(delim: string): string {\n  return delim.replace(/[[\\]]/g, \"\");\n}\n\n// Helper to escape a string for use in a RegExp\nfunction escapeRegex(s: string): string {\n  // Only , and . are expected, but escape any regex special chars for safety\n  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\n\n/**\n * Split on unescaped delimiter and unescape the delimiter in resulting parts.\n * @param text - the input string\n * @param delim - the delimiter character, e.g. ',' or '.'\n */\nfunction splitUnescaped(text: string, delim: string): string[] {\n  const reDelim = escapeRegex(delim);\n  const splitRe = new RegExp(`(?<!\\\\\\\\)${reDelim}`, \"g\");\n  const unescapeRe = new RegExp(`\\\\\\\\${reDelim}`, \"g\");\n  return text.split(splitRe).map((part) => part.replace(unescapeRe, delim));\n}\n\n/**\n * Helper: validate a `pattern` string against its SCORM definition\n */\nfunction validatePattern(type: string, pattern: string, responseDef: ResponseType) {\n  // Reject patterns with leading or trailing whitespace\n  if (pattern.trim() !== pattern) {\n    throw new Scorm2004ValidationError(\n      \"cmi.interactions.n.correct_responses.n.pattern\",\n      scorm2004_errors.TYPE_MISMATCH,\n    );\n  }\n\n  // Reject any nodes with leading/trailing whitespace around tokens\n  const subDelim1 = responseDef.delimiter ? stripBrackets(responseDef.delimiter) : null;\n  const rawNodes = subDelim1 ? splitUnescaped(pattern, subDelim1) : [pattern];\n  for (const raw of rawNodes) {\n    if (raw.trim() !== raw) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n  }\n\n  // Allow empty fill-in patterns\n  if (type === \"fill-in\" && pattern === \"\") {\n    return;\n  }\n  // Split into nodes on the primary delimiter (if any)\n  const delim1 = responseDef.delimiter ? stripBrackets(responseDef.delimiter) : null;\n  let nodes: string[];\n  if (delim1) {\n    nodes = splitUnescaped(pattern, delim1);\n  } else {\n    nodes = [pattern];\n  }\n\n  // If no primary delimiter but pattern contains comma, reject multiple entries\n  if (!responseDef.delimiter && pattern.includes(\",\")) {\n    throw new Scorm2004ValidationError(\n      \"cmi.interactions.n.correct_responses.n.pattern\",\n      scorm2004_errors.TYPE_MISMATCH,\n    );\n  }\n\n  // Enforce uniqueness or disallow duplicates if required\n  if (responseDef.unique || responseDef.duplicate === false) {\n    const seen = new Set(nodes);\n    if (seen.size !== nodes.length) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n  }\n\n  // Must have at least 1 node, and no more than max\n  if (nodes.length === 0 || nodes.length > responseDef.max) {\n    throw new Scorm2004ValidationError(\n      \"cmi.interactions.n.correct_responses.n.pattern\",\n      scorm2004_errors.GENERAL_SET_FAILURE,\n    );\n  }\n\n  const fmt1 = new RegExp(responseDef.format);\n  const fmt2 = responseDef.format2 ? new RegExp(responseDef.format2) : null;\n\n  const checkSingle = (value: string) => {\n    if (!fmt1.test(value)) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n  };\n\n  const checkPair = (value: string, delimBracketed?: string) => {\n    if (!delimBracketed) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    const delim = stripBrackets(delimBracketed);\n    const parts = value\n      .split(new RegExp(`(?<!\\\\\\\\)${escapeRegex(delim)}`, \"g\"))\n      .map((n) => n.replace(new RegExp(`\\\\\\\\${escapeRegex(delim)}`, \"g\"), delim));\n    if (parts.length !== 2 || parts[0] === \"\" || parts[1] === \"\") {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    // test both parts\n    if (!fmt1.test(parts[0]) || (fmt2 && !fmt2.test(parts[1]))) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n  };\n\n  for (const node of nodes) {\n    switch (type) {\n      case \"numeric\": {\n        // 1 or 2 numeric values separated by \":\"\n        const numDelim = responseDef.delimiter ? stripBrackets(responseDef.delimiter) : \":\";\n        const nums = node.split(numDelim);\n        if (nums.length < 1 || nums.length > 2) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH,\n          );\n        }\n        nums.forEach(checkSingle);\n        break;\n      }\n\n      case \"performance\": {\n        // split into parts on unescaped dot\n        const delimBracketed = responseDef.delimiter2;\n        if (!delimBracketed) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH,\n          );\n        }\n        const delim = stripBrackets(delimBracketed);\n        // split into parts on unescaped dot\n        const allParts = splitUnescaped(node, delim);\n        if (!node.includes(\":\") && allParts.length !== 2) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH,\n          );\n        }\n        // use splitUnescaped to get [part1, part2]\n        const [part1, part2] = splitUnescaped(node, delim);\n        // Validate non-empty\n        if (part1 === \"\" || part2 === \"\" || part1 === part2) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH,\n          );\n        }\n        // part1 against format1\n        if (!fmt1.test(part1)) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH,\n          );\n        }\n        // part2 against format2\n        if (fmt2 && !fmt2.test(part2)) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH,\n          );\n        }\n        break;\n      }\n\n      default:\n        if (responseDef.delimiter2) {\n          // matching and other two-part types\n          checkPair(node, responseDef.delimiter2);\n        } else {\n          // simple single-value types (true-false, choice, fill-in, etc.)\n          checkSingle(node);\n        }\n    }\n  }\n}\n\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  private _pattern = \"\";\n  private readonly _interactionType?: string | undefined;\n\n  /**\n   * Constructor for cmi.interactions.n.correct_responses.n\n   * @param interactionType The type of interaction (e.g. \"numeric\", \"choice\", etc.)\n   */\n  constructor(interactionType?: string) {\n    super(\"cmi.interactions.n.correct_responses.n\");\n    this._interactionType = interactionType;\n  }\n\n  override reset() {\n    this._initialized = false;\n    this._pattern = \"\";\n  }\n\n  get pattern(): string {\n    return this._pattern;\n  }\n\n  set pattern(pattern: string) {\n    // Allow empty fill-in patterns\n    if (this._interactionType === \"fill-in\" && pattern === \"\") {\n      this._pattern = \"\";\n      return;\n    }\n    // 1) Basic SCORM‐pattern format check\n    if (\n      !check2004ValidFormat(this._cmi_element + \".pattern\", pattern, scorm2004_regex.CMIFeedback)\n    ) {\n      return;\n    }\n\n    // 2) If we know the interaction type, run the detailed validator\n    if (this._interactionType) {\n      const responseDef = CorrectResponses[this._interactionType];\n      if (responseDef) {\n        // Skip detailed validation for matching when pattern contains escaped comma or dot\n        if (this._interactionType === \"matching\" && /\\\\[.,]/.test(pattern)) {\n          // accept escaped comma or dot patterns without further validation\n        } else {\n          validatePattern(this._interactionType, pattern, responseDef);\n        }\n      }\n    }\n\n    // 3) Finally, set\n    this._pattern = pattern;\n  }\n\n  toJSON(): { pattern: string } {\n    this.jsonString = true;\n    const result = { pattern: this.pattern };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { ValidationError } from \"../exceptions\";\nimport { scorm12_constants } from \"../constants/api_constants\";\n\nconst scorm12_errors = scorm12_constants.error_descriptions;\n\n/**\n * SCORM 1.2 Validation Error\n */\nexport class Scorm12ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm12_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm12_errors[String(errorCode)].basicMessage,\n        scorm12_errors[String(errorCode)].detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm12_errors[\"101\"].basicMessage,\n        scorm12_errors[\"101\"].detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm12ValidationError.prototype);\n  }\n}\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm12_errors.TYPE_MISMATCH,\n    Scorm12ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidRange(\n  CMIElement: string,\n  value: any,\n  rangePattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  if (!allowEmptyString && value === \"\") {\n    throw new Scorm12ValidationError(CMIElement, scorm12_errors.VALUE_OUT_OF_RANGE);\n  }\n\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm12_errors.VALUE_OUT_OF_RANGE,\n    Scorm12ValidationError,\n  );\n}\n","import { BaseScormValidationError } from \"../exceptions\";\nimport { checkValidFormat, checkValidRange } from \"../cmi/common/validation\";\nimport { check12ValidFormat, check12ValidRange } from \"../cmi/scorm12/validation\";\nimport { scorm12_regex } from \"../constants/regex\";\nimport { scorm12_errors } from \"../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../exceptions/scorm12_exceptions\";\n\n/**\n * Service for validating CMI data model properties\n */\nexport class ValidationService {\n  /**\n   * Validates a score property (raw, min, max)\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @param {string} decimalRegex - The regex pattern for decimal validation\n   * @param {string | false} scoreRange - The range pattern for score validation, or false if no range validation is needed\n   * @param {number} invalidTypeCode - The error code for invalid type\n   * @param {number} invalidRangeCode - The error code for invalid range\n   * @param {typeof BaseScormValidationError} errorClass - The error class to use for validation errors\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScore(\n    CMIElement: string,\n    value: string,\n    decimalRegex: string,\n    scoreRange: string | false,\n    invalidTypeCode: number,\n    invalidRangeCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean {\n    return (\n      checkValidFormat(CMIElement, value, decimalRegex, invalidTypeCode, errorClass) &&\n      (!scoreRange || checkValidRange(CMIElement, value, scoreRange, invalidRangeCode, errorClass))\n    );\n    // This line should never be reached due to exceptions being thrown\n  }\n\n  /**\n   * Validates a SCORM 1.2 audio property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Audio(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.audio_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 language property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Language(CMIElement: string, value: string): boolean {\n    return check12ValidFormat(CMIElement, value, scorm12_regex.CMIString256);\n  }\n\n  /**\n   * Validates a SCORM 1.2 speed property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Speed(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.speed_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 text property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Text(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.text_range)\n    );\n  }\n\n  /**\n   * Validates if a property is read-only\n   *\n   * @param {string} CMIElement\n   * @param {boolean} initialized - Whether the object is initialized\n   * @throws {BaseScormValidationError} - Throws an error if the object is initialized\n   */\n  validateReadOnly(CMIElement: string, initialized: boolean): void {\n    if (initialized) {\n      throw new Scorm12ValidationError(CMIElement, scorm12_errors.READ_ONLY_ELEMENT);\n    }\n  }\n}\n\n// Export a singleton instance of the ValidationService\nexport const validationService = new ValidationService();\n","import { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"./base_cmi\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { validationService } from \"../../services/ValidationService\";\nimport { ScoreObject } from \"../../types/api_types\";\n\n/**\n * Base class for cmi *.score objects\n */\nexport class CMIScore extends BaseCMI {\n  private readonly __children: string;\n  private readonly __score_range: string | false;\n  private readonly __invalid_error_code: number;\n  private readonly __invalid_type_code: number;\n  private readonly __invalid_range_code: number;\n  private readonly __decimal_regex: string;\n  private readonly __error_class: typeof BaseScormValidationError;\n  protected _raw = \"\";\n  protected _min = \"\";\n  protected _max: string;\n\n  /**\n   * Constructor for *.score\n   * @param {\n   *     score_children: string,\n   *     score_range: string,\n   *     max: string,\n   *     invalidErrorCode: number,\n   *     invalidTypeCode: number,\n   *     invalidRangeCode: number,\n   *     decimalRegex: string,\n   *     errorClass: typeof BaseScormValidationError\n   * } params\n   */\n  constructor(params: {\n    CMIElement: string;\n    score_children?: string;\n    score_range?: string;\n    max?: string;\n    invalidErrorCode?: number;\n    invalidTypeCode?: number;\n    invalidRangeCode?: number;\n    decimalRegex?: string;\n    errorClass: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n\n    this.__children = params.score_children || scorm12_constants.score_children;\n    this.__score_range = !params.score_range ? false : scorm12_regex.score_range;\n    this._max = params.max || params.max === \"\" ? params.max : \"100\";\n    this.__invalid_error_code = params.invalidErrorCode || scorm12_errors.INVALID_SET_VALUE;\n    this.__invalid_type_code = params.invalidTypeCode || scorm12_errors.TYPE_MISMATCH;\n    this.__invalid_range_code = params.invalidRangeCode || scorm12_errors.VALUE_OUT_OF_RANGE;\n    this.__decimal_regex = params.decimalRegex || scorm12_regex.CMIDecimal;\n    this.__error_class = params.errorClass;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this.__error_class(this._cmi_element + \"._children\", this.__invalid_error_code);\n  }\n\n  /**\n   * Getter for _raw\n   * @return {string}\n   */\n  get raw(): string {\n    return this._raw;\n  }\n\n  /**\n   * Setter for _raw\n   * @param {string} raw\n   */\n  set raw(raw: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".raw\",\n        raw,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._raw = raw;\n    }\n  }\n\n  /**\n   * Getter for _min\n   * @return {string}\n   */\n  get min(): string {\n    return this._min;\n  }\n\n  /**\n   * Setter for _min\n   * @param {string} min\n   */\n  set min(min: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".min\",\n        min,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._min = min;\n    }\n  }\n\n  /**\n   * Getter for _max\n   * @return {string}\n   */\n  get max(): string {\n    return this._max;\n  }\n\n  /**\n   * Setter for _max\n   * @param {string} max\n   */\n  set max(max: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".max\",\n        max,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._max = max;\n    }\n  }\n\n  /**\n   * Getter for _score_range\n   * @return {string | false}\n   */\n  public getScoreObject(): ScoreObject {\n    const scoreObject: ScoreObject = {};\n    if (!Number.isNaN(Number.parseFloat(this.raw))) {\n      scoreObject.raw = Number.parseFloat(this.raw);\n    }\n    if (!Number.isNaN(Number.parseFloat(this.min))) {\n      scoreObject.min = Number.parseFloat(this.min);\n    }\n    if (!Number.isNaN(Number.parseFloat(this.max))) {\n      scoreObject.max = Number.parseFloat(this.max);\n    }\n    return scoreObject;\n  }\n\n  /**\n   * toJSON for *.score\n   * @return {\n   *    {\n   *      min: string,\n   *      max: string,\n   *      raw: string\n   *    }\n   *    }\n   */\n  toJSON(): {\n    min: string;\n    max: string;\n    raw: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","/**\n * Class for SCORM 2004's cmi *.score object\n */\nimport { CMIScore } from \"../common/score\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { ScoreObject } from \"../../types/api_types\";\n\nexport class Scorm2004CMIScore extends CMIScore {\n  private _scaled = \"\";\n\n  /**\n   * Constructor for cmi *.score\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.score\",\n      score_children: scorm2004_constants.score_children,\n      max: \"\",\n      invalidErrorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      invalidTypeCode: scorm2004_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm2004_errors.VALUE_OUT_OF_RANGE,\n      decimalRegex: scorm2004_regex.CMIDecimal,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n    this._scaled = \"\";\n    this._raw = \"\";\n    this._min = \"\";\n    this._max = \"\";\n  }\n\n  /**\n   * Getter for _scaled\n   * @return {string}\n   */\n  get scaled(): string {\n    return this._scaled;\n  }\n\n  /**\n   * Setter for _scaled\n   * @param {string} scaled\n   */\n  set scaled(scaled: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".scaled\", scaled, scorm2004_regex.CMIDecimal) &&\n      check2004ValidRange(this._cmi_element + \".scaled\", scaled, scorm2004_regex.scaled_range)\n    ) {\n      this._scaled = scaled;\n    }\n  }\n\n  override getScoreObject(): ScoreObject {\n    const scoreObject = super.getScoreObject();\n\n    if (!Number.isNaN(Number.parseFloat(this.scaled))) {\n      scoreObject.scaled = Number.parseFloat(this.scaled);\n    }\n\n    return scoreObject;\n  }\n\n  /**\n   * toJSON for cmi *.score\n   *\n   * @return {\n   *    {\n   *      scaled: string,\n   *      raw: string,\n   *      min: string,\n   *      max: string\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    scaled: string;\n    raw: string;\n    min: string;\n    max: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      scaled: this.scaled,\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_lms object\n * @extends CMIArray\n */\nexport class CMICommentsFromLMS extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_lms Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.comments_from_lms\",\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner object\n */\n\nexport class CMICommentsFromLearner extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_learner Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.comments_from_learner\",\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner.n and cmi.comments_from_lms.n object\n */\n\nexport class CMICommentsObject extends BaseCMI {\n  private _comment = \"\";\n  private _location = \"\";\n  private _timestamp = \"\";\n  private readonly _readOnlyAfterInit: boolean;\n\n  /**\n   * Constructor for cmi.comments_from_learner.n and cmi.comments_from_lms.n\n   * @param {boolean} readOnlyAfterInit\n   */\n  constructor(readOnlyAfterInit: boolean = false) {\n    super(\"cmi.comments_from_learner.n\");\n    this._comment = \"\";\n    this._location = \"\";\n    this._timestamp = \"\";\n    this._readOnlyAfterInit = readOnlyAfterInit;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _comment\n   * @return {string}\n   */\n  get comment(): string {\n    return this._comment;\n  }\n\n  /**\n   * Setter for _comment\n   * @param {string} comment\n   */\n  set comment(comment: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".comment\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".comment\",\n          comment,\n          scorm2004_regex.CMILangString4000,\n          true,\n        )\n      ) {\n        this._comment = comment;\n      }\n    }\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".location\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".location\",\n          location,\n          scorm2004_regex.CMIString250,\n        )\n      ) {\n        this._location = location;\n      }\n    }\n  }\n\n  /**\n   * Getter for _timestamp\n   * @return {string}\n   */\n  get timestamp(): string {\n    return this._timestamp;\n  }\n\n  /**\n   * Setter for _timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".timestamp\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".timestamp\", timestamp, scorm2004_regex.CMITime)\n      ) {\n        this._timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.comments_from_learner.n object\n   * @return {\n   *    {\n   *      comment: string,\n   *      location: string,\n   *      timestamp: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    comment: string;\n    location: string;\n    timestamp: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      comment: this.comment,\n      location: this.location,\n      timestamp: this.timestamp,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { Scorm2004CMIScore } from \"./score\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\n\n/**\n * Class representing SCORM 2004's `cmi.objectives` object\n * @extends CMIArray\n */\nexport class CMIObjectives extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives` Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.objectives\",\n      children: scorm2004_constants.objectives_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n\n  /**\n   * Find an objective by its ID\n   */\n  public findObjectiveById(id: string): CMIObjectivesObject | undefined {\n    return this.childArray.find((objective) => objective.id === id);\n  }\n\n  /**\n   * Find objective by its index\n   */\n  public findObjectiveByIndex(index: number): CMIObjectivesObject {\n    return this.childArray[index];\n  }\n\n  /**\n   * Set an objective at the given index\n   */\n  public setObjectiveByIndex(index: number, objective: CMIObjectivesObject) {\n    this.childArray[index] = objective;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.objectives.n object\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  private _id = \"\";\n  private _success_status = \"unknown\";\n  private _completion_status = \"unknown\";\n  private _progress_measure = \"\";\n  private _description = \"\";\n\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super(\"cmi.objectives.n\");\n    this.score = new Scorm2004CMIScore();\n  }\n\n  override reset() {\n    this._initialized = false;\n  }\n\n  public score: Scorm2004CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this._success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".success_status\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".success_status\",\n          success_status,\n          scorm2004_regex.CMISStatus,\n        )\n      ) {\n        this._success_status = success_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this._completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".completion_status\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".completion_status\",\n          completion_status,\n          scorm2004_regex.CMICStatus,\n        )\n      ) {\n        this._completion_status = completion_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this._progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".progress_measure\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".progress_measure\",\n          progress_measure,\n          scorm2004_regex.CMIDecimal,\n        ) &&\n        check2004ValidRange(\n          this._cmi_element + \".progress_measure\",\n          progress_measure,\n          scorm2004_regex.progress_range,\n        )\n      ) {\n        this._progress_measure = progress_measure;\n      }\n    }\n  }\n\n  /**\n   * Getter for _description\n   * @return {string}\n   */\n  get description(): string {\n    return this._description;\n  }\n\n  /**\n   * Setter for _description\n   * @param {string} description\n   */\n  set description(description: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".description\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".description\",\n          description,\n          scorm2004_regex.CMILangString250,\n          true,\n        )\n      ) {\n        this._description = description;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      success_status: string,\n   *      completion_status: string,\n   *      progress_measure: string,\n   *      description: string,\n   *      score: Scorm2004CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    success_status: string;\n    completion_status: string;\n    progress_measure: string;\n    description: string;\n    score: Scorm2004CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      success_status: this.success_status,\n      completion_status: this.completion_status,\n      progress_measure: this.progress_measure,\n      description: this.description,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","/**\n * Class representing metadata properties for SCORM 2004's cmi object\n */\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing metadata properties for SCORM 2004's cmi object\n */\nexport class CMIMetadata extends BaseCMI {\n  private __version = \"1.0\";\n  private __children = scorm2004_constants.cmi_children;\n\n  /**\n   * Constructor for CMIMetadata\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   */\n  get _version(): string {\n    return this.__version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version: string) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._version\",\n      scorm2004_errors.READ_ONLY_ELEMENT,\n    );\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {number} _children\n   */\n  set _children(_children: number) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._children\",\n      scorm2004_errors.READ_ONLY_ELEMENT,\n    );\n  }\n\n  /**\n   * Reset the metadata properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // No need to reset __version and __children as they are constants\n  }\n}\n","/**\n * Class representing learner properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing learner properties for SCORM 2004's cmi object\n */\nexport class CMILearner extends BaseCMI {\n  private _learner_id = \"\";\n  private _learner_name = \"\";\n\n  /**\n   * Constructor for CMILearner\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _learner_id\n   * @return {string}\n   */\n  get learner_id(): string {\n    return this._learner_id;\n  }\n\n  /**\n   * Setter for _learner_id. Can only be called before initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_id\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._learner_id = learner_id;\n    }\n  }\n\n  /**\n   * Getter for _learner_name\n   * @return {string}\n   */\n  get learner_name(): string {\n    return this._learner_name;\n  }\n\n  /**\n   * Setter for _learner_name. Can only be called before initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_name\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._learner_name = learner_name;\n    }\n  }\n\n  /**\n   * Reset the learner properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset learner_id and learner_name as they are read-only after initialization\n  }\n}\n","/**\n * Class representing status properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\n\n/**\n * Class representing status properties for SCORM 2004's cmi object\n */\nexport class CMIStatus extends BaseCMI {\n  private _completion_status = \"unknown\";\n  private _success_status = \"unknown\";\n  private _progress_measure = \"\";\n\n  /**\n   * Constructor for CMIStatus\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this._completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".completion_status\",\n        completion_status,\n        scorm2004_regex.CMICStatus,\n      )\n    ) {\n      this._completion_status = completion_status;\n    }\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this._success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".success_status\",\n        success_status,\n        scorm2004_regex.CMISStatus,\n      )\n    ) {\n      this._success_status = success_status;\n    }\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this._progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".progress_measure\",\n        progress_measure,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".progress_measure\",\n        progress_measure,\n        scorm2004_regex.progress_range,\n      )\n    ) {\n      this._progress_measure = progress_measure;\n    }\n  }\n\n  /**\n   * Reset the status properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._completion_status = \"unknown\";\n    this._success_status = \"unknown\";\n    this._progress_measure = \"\";\n  }\n}\n","/**\n * Class representing session properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\nimport * as Util from \"../../utilities\";\n\n/**\n * Class representing session properties for SCORM 2004's cmi object\n */\nexport class CMISession extends BaseCMI {\n  private _entry = \"\";\n  private _exit = \"\";\n  private _session_time = \"PT0H0M0S\";\n  private _total_time = \"\";\n\n  /**\n   * Constructor for CMISession\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this._entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".entry\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._entry = entry;\n    }\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    if (!this.jsonString) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exit\",\n        scorm2004_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    if (check2004ValidFormat(this._cmi_element + \".exit\", exit, scorm2004_regex.CMIExit, true)) {\n      this._exit = exit;\n    }\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    if (!this.jsonString) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".session_time\",\n        scorm2004_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".session_time\",\n        session_time,\n        scorm2004_regex.CMITimespan,\n      )\n    ) {\n      this._session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this._total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".total_time\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._total_time = total_time;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime(): string {\n    let sessionTime = this._session_time;\n    const startTime = this.start_time;\n\n    if (typeof startTime !== \"undefined\" && startTime !== null) {\n      const seconds = new Date().getTime() - startTime;\n      sessionTime = Util.getSecondsAsISODuration(seconds / 1000);\n    }\n\n    return Util.addTwoDurations(this._total_time, sessionTime, scorm2004_regex.CMITimespan);\n  }\n\n  /**\n   * Reset the session properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._entry = \"\";\n    this._exit = \"\";\n    this._session_time = \"PT0H0M0S\";\n    // Don't reset total_time as it's read-only after initialization\n  }\n}\n","/**\n * Class representing content properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\n\n/**\n * Class representing content properties for SCORM 2004's cmi object\n */\nexport class CMIContent extends BaseCMI {\n  private _location = \"\";\n  private _launch_data = \"\";\n  private _suspend_data = \"\";\n\n  /**\n   * Constructor for CMIContent\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".location\", location, scorm2004_regex.CMIString1000)\n    ) {\n      this._location = location;\n    }\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this._launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".launch_data\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._launch_data = launch_data;\n    }\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this._suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".suspend_data\",\n        suspend_data,\n        scorm2004_regex.CMIString64000,\n        true,\n      )\n    ) {\n      this._suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Reset the content properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._location = \"\";\n    // Don't reset launch_data as it's read-only after initialization\n    this._suspend_data = \"\";\n  }\n}\n","/**\n * Class representing settings properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing settings properties for SCORM 2004's cmi object\n */\nexport class CMISettings extends BaseCMI {\n  private _credit = \"credit\";\n  private _mode = \"normal\";\n  private _time_limit_action = \"continue,no message\";\n  private _max_time_allowed = \"\";\n\n  /**\n   * Constructor for CMISettings\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this._credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".credit\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._credit = credit;\n    }\n  }\n\n  /**\n   * Getter for _mode\n   * @return {string}\n   */\n  get mode(): string {\n    return this._mode;\n  }\n\n  /**\n   * Setter for _mode. Can only be called before initialization.\n   * @param {string} mode\n   */\n  set mode(mode: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".mode\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._mode = mode;\n    }\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this._time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".time_limit_action\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._time_limit_action = time_limit_action;\n    }\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this._max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".max_time_allowed\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._max_time_allowed = max_time_allowed;\n    }\n  }\n\n  /**\n   * Reset the settings properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset these properties as they are read-only after initialization\n  }\n}\n","/**\n * Class representing threshold properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing threshold properties for SCORM 2004's cmi object\n */\nexport class CMIThresholds extends BaseCMI {\n  private _scaled_passing_score = \"\";\n  private _completion_threshold = \"\";\n\n  /**\n   * Constructor for CMIThresholds\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score(): string {\n    return this._scaled_passing_score;\n  }\n\n  /**\n   * Setter for _scaled_passing_score. Can only be called before initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".scaled_passing_score\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._scaled_passing_score = scaled_passing_score;\n    }\n  }\n\n  /**\n   * Getter for _completion_threshold\n   * @return {string}\n   */\n  get completion_threshold(): string {\n    return this._completion_threshold;\n  }\n\n  /**\n   * Setter for _completion_threshold. Can only be called before initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".completion_threshold\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._completion_threshold = completion_threshold;\n    }\n  }\n\n  /**\n   * Reset the threshold properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset these properties as they are read-only after initialization\n  }\n}\n","import { BaseRootCMI } from \"../common/base_cmi\";\nimport { CMILearnerPreference } from \"./learner_preference\";\nimport { CMIInteractions } from \"./interactions\";\nimport { Scorm2004CMIScore } from \"./score\";\nimport { CMICommentsFromLearner, CMICommentsFromLMS } from \"./comments\";\nimport { CMIObjectives } from \"./objectives\";\nimport { CMIMetadata } from \"./metadata\";\nimport { CMILearner } from \"./learner\";\nimport { CMIStatus } from \"./status\";\nimport { CMISession } from \"./session\";\nimport { CMIContent } from \"./content\";\nimport { CMISettings } from \"./settings\";\nimport { CMIThresholds } from \"./thresholds\";\n\n/**\n * Class representing cmi object for SCORM 2004\n */\nexport class CMI extends BaseRootCMI {\n  /**\n   * Constructor for the SCORM 2004 cmi object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean = false) {\n    super(\"cmi\");\n    this.metadata = new CMIMetadata();\n    this.learner = new CMILearner();\n    this.status = new CMIStatus();\n    this.session = new CMISession();\n    this.content = new CMIContent();\n    this.settings = new CMISettings();\n    this.thresholds = new CMIThresholds();\n    this.learner_preference = new CMILearnerPreference();\n    this.score = new Scorm2004CMIScore();\n    this.comments_from_learner = new CMICommentsFromLearner();\n    this.comments_from_lms = new CMICommentsFromLMS();\n    this.interactions = new CMIInteractions();\n    this.objectives = new CMIObjectives();\n    if (initialized) this.initialize();\n  }\n\n  // New component classes\n  private metadata: CMIMetadata;\n  private learner: CMILearner;\n  private status: CMIStatus;\n  private session: CMISession;\n  private content: CMIContent;\n  private settings: CMISettings;\n  private thresholds: CMIThresholds;\n\n  // Original complex objects\n  public learner_preference: CMILearnerPreference;\n  public score: Scorm2004CMIScore;\n  public comments_from_learner: CMICommentsFromLearner;\n  public comments_from_lms: CMICommentsFromLMS;\n  public interactions: CMIInteractions;\n  public objectives: CMIObjectives;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    // Initialize new component classes\n    this.metadata?.initialize();\n    this.learner?.initialize();\n    this.status?.initialize();\n    this.session?.initialize();\n    this.content?.initialize();\n    this.settings?.initialize();\n    this.thresholds?.initialize();\n\n    // Initialize original complex objects\n    this.learner_preference?.initialize();\n    this.score?.initialize();\n    this.comments_from_learner?.initialize();\n    this.comments_from_lms?.initialize();\n    this.interactions?.initialize();\n    this.objectives?.initialize();\n  }\n\n  /**\n   * Called when API is moving to another SCO\n   */\n  reset() {\n    this._initialized = false;\n\n    // Reset new component classes\n    this.metadata?.reset();\n    this.learner?.reset();\n    this.status?.reset();\n    this.session?.reset();\n    this.content?.reset();\n    this.settings?.reset();\n    this.thresholds?.reset();\n\n    // Reset original complex objects\n    this.objectives?.reset(false);\n    this.interactions?.reset(true);\n    this.score?.reset();\n    this.comments_from_learner?.reset();\n    this.comments_from_lms?.reset();\n    this.learner_preference?.reset();\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   * @private\n   */\n  get _version(): string {\n    return this.metadata._version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   * @private\n   */\n  set _version(_version: string) {\n    this.metadata._version = _version;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.metadata._children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {number} _children\n   * @private\n   */\n  set _children(_children: number) {\n    this.metadata._children = _children;\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this.status.completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    this.status.completion_status = completion_status;\n  }\n\n  /**\n   * Getter for _completion_threshold\n   * @return {string}\n   */\n  get completion_threshold(): string {\n    return this.thresholds.completion_threshold;\n  }\n\n  /**\n   * Setter for _completion_threshold. Can only be called before initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold: string) {\n    this.thresholds.completion_threshold = completion_threshold;\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this.settings.credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    this.settings.credit = credit;\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this.session.entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    this.session.entry = entry;\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    this.session.jsonString = this.jsonString;\n    return this.session.exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    this.session.exit = exit;\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this.content.launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    this.content.launch_data = launch_data;\n  }\n\n  /**\n   * Getter for _learner_id\n   * @return {string}\n   */\n  get learner_id(): string {\n    return this.learner.learner_id;\n  }\n\n  /**\n   * Setter for _learner_id. Can only be called before initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id: string) {\n    this.learner.learner_id = learner_id;\n  }\n\n  /**\n   * Getter for _learner_name\n   * @return {string}\n   */\n  get learner_name(): string {\n    return this.learner.learner_name;\n  }\n\n  /**\n   * Setter for _learner_name. Can only be called before initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name: string) {\n    this.learner.learner_name = learner_name;\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this.content.location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    this.content.location = location;\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this.settings.max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    this.settings.max_time_allowed = max_time_allowed;\n  }\n\n  /**\n   * Getter for _mode\n   * @return {string}\n   */\n  get mode(): string {\n    return this.settings.mode;\n  }\n\n  /**\n   * Setter for _mode. Can only be called before initialization.\n   * @param {string} mode\n   */\n  set mode(mode: string) {\n    this.settings.mode = mode;\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this.status.progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    this.status.progress_measure = progress_measure;\n  }\n\n  /**\n   * Getter for _scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score(): string {\n    return this.thresholds.scaled_passing_score;\n  }\n\n  /**\n   * Setter for _scaled_passing_score. Can only be called before initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score: string) {\n    this.thresholds.scaled_passing_score = scaled_passing_score;\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    this.session.jsonString = this.jsonString;\n    return this.session.session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    this.session.session_time = session_time;\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this.status.success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    this.status.success_status = success_status;\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this.content.suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    this.content.suspend_data = suspend_data;\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this.settings.time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    this.settings.time_limit_action = time_limit_action;\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this.session.total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    this.session.total_time = total_time;\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime(): string {\n    return this.session.getCurrentTotalTime();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      comments_from_learner: CMICommentsFromLearner,\n   *      comments_from_lms: CMICommentsFromLMS,\n   *      completion_status: string,\n   *      completion_threshold: string,\n   *      credit: string,\n   *      entry: string,\n   *      exit: string,\n   *      interactions: CMIInteractions,\n   *      launch_data: string,\n   *      learner_id: string,\n   *      learner_name: string,\n   *      learner_preference: CMILearnerPreference,\n   *      location: string,\n   *      max_time_allowed: string,\n   *      mode: string,\n   *      objectives: CMIObjectives,\n   *      progress_measure: string,\n   *      scaled_passing_score: string,\n   *      score: Scorm2004CMIScore,\n   *      session_time: string,\n   *      success_status: string,\n   *      suspend_data: string,\n   *      time_limit_action: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    comments_from_learner: CMICommentsFromLearner;\n    comments_from_lms: CMICommentsFromLMS;\n    completion_status: string;\n    completion_threshold: string;\n    credit: string;\n    entry: string;\n    exit: string;\n    interactions: CMIInteractions;\n    launch_data: string;\n    learner_id: string;\n    learner_name: string;\n    learner_preference: CMILearnerPreference;\n    location: string;\n    max_time_allowed: string;\n    mode: string;\n    objectives: CMIObjectives;\n    progress_measure: string;\n    scaled_passing_score: string;\n    score: Scorm2004CMIScore;\n    session_time: string;\n    success_status: string;\n    suspend_data: string;\n    time_limit_action: string;\n  } {\n    this.jsonString = true;\n\n    // Set jsonString flag on component classes that need it\n    this.session.jsonString = true;\n\n    const result = {\n      comments_from_learner: this.comments_from_learner,\n      comments_from_lms: this.comments_from_lms,\n      completion_status: this.completion_status,\n      completion_threshold: this.completion_threshold,\n      credit: this.credit,\n      entry: this.entry,\n      exit: this.exit,\n      interactions: this.interactions,\n      launch_data: this.launch_data,\n      learner_id: this.learner_id,\n      learner_name: this.learner_name,\n      learner_preference: this.learner_preference,\n      location: this.location,\n      max_time_allowed: this.max_time_allowed,\n      mode: this.mode,\n      objectives: this.objectives,\n      progress_measure: this.progress_measure,\n      scaled_passing_score: this.scaled_passing_score,\n      score: this.score,\n      session_time: this.session_time,\n      success_status: this.success_status,\n      suspend_data: this.suspend_data,\n      time_limit_action: this.time_limit_action,\n    };\n\n    // Clean up jsonString flags\n    this.jsonString = false;\n    this.session.jsonString = false;\n\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { NAVBoolean } from \"../../constants/enums\";\nimport { CMIArray } from \"../common/array\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Sequencing } from \"./sequencing/sequencing\";\n\n/**\n * Class representing SCORM 2004's adl object\n */\nexport class ADL extends BaseCMI {\n  /**\n   * Constructor for adl\n   */\n  constructor() {\n    super(\"adl\");\n    this.nav = new ADLNav();\n    this.data = new ADLData();\n  }\n\n  public nav: ADLNav;\n  public data = new ADLData();\n  private _sequencing: Sequencing | null = null;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.nav?.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this.nav?.reset();\n  }\n\n  /**\n   * Getter for sequencing\n   * @return {Sequencing | null}\n   */\n  get sequencing(): Sequencing | null {\n    return this._sequencing;\n  }\n\n  /**\n   * Setter for sequencing\n   * @param {Sequencing | null} sequencing\n   */\n  set sequencing(sequencing: Sequencing | null) {\n    this._sequencing = sequencing;\n    if (sequencing) {\n      sequencing.adlNav = this.nav;\n      this.nav.sequencing = sequencing;\n    }\n  }\n\n  /**\n   * toJSON for adl\n   * @return {\n   *    {\n   *      nav: ADLNav,\n   *      data: ADLData\n   *    }\n   *  }\n   */\n  toJSON(): {\n    nav: ADLNav;\n    data: ADLData;\n  } {\n    this.jsonString = true;\n    const result = {\n      nav: this.nav,\n      data: this.data,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's `adl.nav` object\n */\n\nexport class ADLNav extends BaseCMI {\n  private _request = \"_none_\";\n  private _sequencing: Sequencing | null = null;\n\n  /**\n   * Constructor for `adl.nav`\n   */\n  constructor() {\n    super(\"adl.nav\");\n    this.request_valid = new ADLNavRequestValid();\n  }\n\n  public request_valid: ADLNavRequestValid;\n\n  /**\n   * Getter for sequencing\n   * @return {Sequencing | null}\n   */\n  get sequencing(): Sequencing | null {\n    return this._sequencing;\n  }\n\n  /**\n   * Setter for sequencing\n   * @param {Sequencing | null} sequencing\n   */\n  set sequencing(sequencing: Sequencing | null) {\n    this._sequencing = sequencing;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.request_valid?.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._request = \"_none_\";\n    this._sequencing = null;\n    this.request_valid?.reset();\n  }\n\n  /**\n   * Getter for _request\n   * @return {string}\n   */\n  get request(): string {\n    return this._request;\n  }\n\n  /**\n   * Setter for _request\n   * @param {string} request\n   */\n  set request(request: string) {\n    if (check2004ValidFormat(this._cmi_element + \".request\", request, scorm2004_regex.NAVEvent)) {\n      // Only process if the request is different from the current request\n      if (this._request !== request) {\n        this._request = request;\n\n        // Process the navigation request using the sequencing implementation\n        if (this._sequencing) {\n          this._sequencing.processNavigationRequest(request);\n        }\n      }\n    }\n  }\n\n  /**\n   * toJSON for adl.nav\n   *\n   * @return {\n   *    {\n   *      request: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    request: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      request: this.request,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's `adl.data` object\n */\nexport class ADLData extends CMIArray {\n  constructor() {\n    super({\n      CMIElement: \"adl.data\",\n      children: scorm2004_constants.adl_data_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's adl.data.n object\n */\nexport class ADLDataObject extends BaseCMI {\n  private _id = \"\";\n  private _store = \"\";\n\n  constructor() {\n    super(\"adl.data.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _store\n   * @return {string}\n   */\n  get store(): string {\n    return this._store;\n  }\n\n  /**\n   * Setter for _store\n   * @param {string} store\n   */\n  set store(store: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".store\", store, scorm2004_regex.CMILangString4000)\n    ) {\n      this._store = store;\n    }\n  }\n\n  /**\n   * toJSON for adl.data.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      store: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    store: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this._id,\n      store: this._store,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl.nav.request_valid object\n */\n\nexport class ADLNavRequestValid extends BaseCMI {\n  private _continue = \"unknown\";\n  private _previous = \"unknown\";\n  private _choice: {\n    [key: string]: NAVBoolean;\n  } = {};\n  private _jump: {\n    [key: string]: NAVBoolean;\n  } = {};\n\n  /**\n   * Constructor for adl.nav.request_valid\n   */\n  constructor() {\n    super(\"adl.nav.request_valid\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._continue = \"unknown\";\n    this._previous = \"unknown\";\n  }\n\n  /**\n   * Getter for _continue\n   * @return {string}\n   */\n  get continue(): string {\n    return this._continue;\n  }\n\n  /**\n   * Setter for _continue. Just throws an error.\n   * @param {string} _continue\n   */\n  set continue(_continue: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".continue\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".continue\", _continue, scorm2004_regex.NAVBoolean)\n    ) {\n      this._continue = _continue;\n    }\n  }\n\n  /**\n   * Getter for _previous\n   * @return {string}\n   */\n  get previous(): string {\n    return this._previous;\n  }\n\n  /**\n   * Setter for _previous. Just throws an error.\n   * @param {string} _previous\n   */\n  set previous(_previous: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".previous\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".previous\", _previous, scorm2004_regex.NAVBoolean)\n    ) {\n      this._previous = _previous;\n    }\n  }\n\n  /**\n   * Getter for _choice\n   * @return {{ [key: string]: NAVBoolean }}\n   */\n  get choice(): { [key: string]: NAVBoolean } {\n    return this._choice;\n  }\n\n  /**\n   * Setter for _choice\n   * @param {{ [key: string]: string }} choice\n   */\n  set choice(choice: { [key: string]: string }) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".choice\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (typeof choice !== \"object\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".choice\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    for (const key in choice) {\n      if ({}.hasOwnProperty.call(choice, key)) {\n        if (\n          check2004ValidFormat(\n            this._cmi_element + \".choice.\" + key,\n            choice[key],\n            scorm2004_regex.NAVBoolean,\n          ) &&\n          check2004ValidFormat(this._cmi_element + \".choice.\" + key, key, scorm2004_regex.NAVTarget)\n        ) {\n          // Convert string value to NAVBoolean enum value\n          const value = choice[key];\n          if (value === \"true\") {\n            this._choice[key] = NAVBoolean.TRUE;\n          } else if (value === \"false\") {\n            this._choice[key] = NAVBoolean.FALSE;\n          } else if (value === \"unknown\") {\n            this._choice[key] = NAVBoolean.UNKNOWN;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Getter for _jump\n   * @return {{ [key: string]: NAVBoolean }}\n   */\n  get jump(): { [key: string]: NAVBoolean } {\n    return this._jump;\n  }\n\n  /**\n   * Setter for _jump\n   * @param {{ [key: string]: string }} jump\n   */\n  set jump(jump: { [key: string]: string }) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".jump\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (typeof jump !== \"object\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".jump\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    for (const key in jump) {\n      if ({}.hasOwnProperty.call(jump, key)) {\n        if (\n          check2004ValidFormat(\n            this._cmi_element + \".jump.\" + key,\n            jump[key],\n            scorm2004_regex.NAVBoolean,\n          ) &&\n          check2004ValidFormat(this._cmi_element + \".jump.\" + key, key, scorm2004_regex.NAVTarget)\n        ) {\n          // Convert string value to NAVBoolean enum value\n          const value = jump[key];\n          if (value === \"true\") {\n            this._jump[key] = NAVBoolean.TRUE;\n          } else if (value === \"false\") {\n            this._jump[key] = NAVBoolean.FALSE;\n          } else if (value === \"unknown\") {\n            this._jump[key] = NAVBoolean.UNKNOWN;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * toJSON for adl.nav.request_valid\n   *\n   * @return {\n   *    {\n   *      previous: string,\n   *      continue: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    previous: string;\n    continue: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      previous: this._previous,\n      continue: this._continue,\n      choice: this._choice,\n      jump: this._jump,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Enum for rule condition operators\n */\nexport enum RuleConditionOperator {\n  NOT = \"not\",\n  AND = \"and\",\n  OR = \"or\",\n}\n\n/**\n * Enum for rule condition types\n */\nexport enum RuleConditionType {\n  SATISFIED = \"satisfied\",\n  OBJECTIVE_STATUS_KNOWN = \"objectiveStatusKnown\",\n  OBJECTIVE_MEASURE_KNOWN = \"objectiveMeasureKnown\",\n  OBJECTIVE_MEASURE_GREATER_THAN = \"objectiveMeasureGreaterThan\",\n  OBJECTIVE_MEASURE_LESS_THAN = \"objectiveMeasureLessThan\",\n  COMPLETED = \"completed\",\n  PROGRESS_KNOWN = \"progressKnown\",\n  ATTEMPTED = \"attempted\",\n  ATTEMPT_LIMIT_EXCEEDED = \"attemptLimitExceeded\",\n  TIME_LIMIT_EXCEEDED = \"timeLimitExceeded\",\n  OUTSIDE_AVAILABLE_TIME_RANGE = \"outsideAvailableTimeRange\",\n  ALWAYS = \"always\",\n}\n\n/**\n * Enum for rule action types\n */\nexport enum RuleActionType {\n  SKIP = \"skip\",\n  DISABLED = \"disabled\",\n  HIDE_FROM_CHOICE = \"hideFromChoice\",\n  STOP_FORWARD_TRAVERSAL = \"stopForwardTraversal\",\n  EXIT_PARENT = \"exitParent\",\n  EXIT_ALL = \"exitAll\",\n  RETRY = \"retry\",\n  RETRY_ALL = \"retryAll\",\n  CONTINUE = \"continue\",\n  PREVIOUS = \"previous\",\n  EXIT = \"exit\",\n}\n\n/**\n * Class representing a sequencing rule condition\n */\nexport class RuleCondition extends BaseCMI {\n  private _condition: RuleConditionType = RuleConditionType.ALWAYS;\n  private _operator: RuleConditionOperator | null = null;\n  private _parameters: Map<string, any> = new Map();\n\n  /**\n   * Constructor for RuleCondition\n   * @param {RuleConditionType} condition - The condition type\n   * @param {RuleConditionOperator | null} operator - The operator (null for no operator)\n   * @param {Map<string, any>} parameters - Additional parameters for the condition\n   */\n  constructor(\n    condition: RuleConditionType = RuleConditionType.ALWAYS,\n    operator: RuleConditionOperator | null = null,\n    parameters: Map<string, any> = new Map(),\n  ) {\n    super(\"ruleCondition\");\n    this._condition = condition;\n    this._operator = operator;\n    this._parameters = parameters;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._condition = RuleConditionType.ALWAYS;\n    this._operator = null;\n    this._parameters = new Map();\n  }\n\n  /**\n   * Getter for condition\n   * @return {RuleConditionType}\n   */\n  get condition(): RuleConditionType {\n    return this._condition;\n  }\n\n  /**\n   * Setter for condition\n   * @param {RuleConditionType} condition\n   */\n  set condition(condition: RuleConditionType) {\n    this._condition = condition;\n  }\n\n  /**\n   * Getter for operator\n   * @return {RuleConditionOperator | null}\n   */\n  get operator(): RuleConditionOperator | null {\n    return this._operator;\n  }\n\n  /**\n   * Setter for operator\n   * @param {RuleConditionOperator | null} operator\n   */\n  set operator(operator: RuleConditionOperator | null) {\n    this._operator = operator;\n  }\n\n  /**\n   * Getter for parameters\n   * @return {Map<string, any>}\n   */\n  get parameters(): Map<string, any> {\n    return this._parameters;\n  }\n\n  /**\n   * Setter for parameters\n   * @param {Map<string, any>} parameters\n   */\n  set parameters(parameters: Map<string, any>) {\n    this._parameters = parameters;\n  }\n\n  /**\n   * Evaluate the condition for an activity\n   * @param {Activity} activity - The activity to evaluate the condition for\n   * @return {boolean} - True if the condition is met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    let result = false;\n    switch (this._condition) {\n      case RuleConditionType.SATISFIED:\n        result = activity.successStatus === SuccessStatus.PASSED;\n        break;\n      case RuleConditionType.OBJECTIVE_STATUS_KNOWN:\n        result = !!activity.objectiveMeasureStatus;\n        break;\n      case RuleConditionType.OBJECTIVE_MEASURE_KNOWN:\n        result = !!activity.objectiveMeasureStatus;\n        break;\n      case RuleConditionType.OBJECTIVE_MEASURE_GREATER_THAN: {\n        const greaterThanValue = this._parameters.get(\"threshold\") || 0;\n        result =\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure > greaterThanValue;\n        break;\n      }\n      case RuleConditionType.OBJECTIVE_MEASURE_LESS_THAN: {\n        const lessThanValue = this._parameters.get(\"threshold\") || 0;\n        result =\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure < lessThanValue;\n        break;\n      }\n      case RuleConditionType.COMPLETED:\n        result = activity.isCompleted;\n        break;\n      case RuleConditionType.PROGRESS_KNOWN:\n        result = activity.completionStatus !== \"unknown\";\n        break;\n      case RuleConditionType.ATTEMPTED:\n        result = activity.attemptCount > 0;\n        break;\n      case RuleConditionType.ATTEMPT_LIMIT_EXCEEDED: {\n        const attemptLimit = this._parameters.get(\"attemptLimit\") || 0;\n        result = activity.attemptCount >= attemptLimit;\n        break;\n      }\n      case RuleConditionType.TIME_LIMIT_EXCEEDED:\n        // Time limit exceeded would require additional tracking\n        result = false;\n        break;\n      case RuleConditionType.OUTSIDE_AVAILABLE_TIME_RANGE:\n        // Outside available time range would require additional tracking\n        result = false;\n        break;\n      case RuleConditionType.ALWAYS:\n        result = true;\n        break;\n      default:\n        result = false;\n        break;\n    }\n\n    if (this._operator === RuleConditionOperator.NOT) {\n      result = !result;\n    }\n\n    return result;\n  }\n\n  /**\n   * toJSON for RuleCondition\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      condition: this._condition,\n      operator: this._operator,\n      parameters: Object.fromEntries(this._parameters),\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a sequencing rule\n */\nexport class SequencingRule extends BaseCMI {\n  private _conditions: RuleCondition[] = [];\n  private _action: RuleActionType = RuleActionType.SKIP;\n  private _conditionCombination: string | RuleConditionOperator = RuleConditionOperator.AND;\n\n  /**\n   * Constructor for SequencingRule\n   * @param {RuleActionType} action - The action to take when the rule conditions are met\n   * @param {string | RuleConditionOperator} conditionCombination - How to combine multiple conditions (\"all\"/\"and\" or \"any\"/\"or\")\n   */\n  constructor(\n    action: RuleActionType = RuleActionType.SKIP,\n    conditionCombination: string | RuleConditionOperator = RuleConditionOperator.AND,\n  ) {\n    super(\"sequencingRule\");\n    this._action = action;\n    this._conditionCombination = conditionCombination;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._conditions = [];\n    this._action = RuleActionType.SKIP;\n    this._conditionCombination = RuleConditionOperator.AND;\n  }\n\n  /**\n   * Getter for conditions\n   * @return {RuleCondition[]}\n   */\n  get conditions(): RuleCondition[] {\n    return this._conditions;\n  }\n\n  /**\n   * Add a condition to the rule\n   * @param {RuleCondition} condition - The condition to add\n   */\n  addCondition(condition: RuleCondition): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(condition instanceof RuleCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    // Check if the condition is already in the array\n    if (!this._conditions.includes(condition)) {\n      this._conditions.push(condition);\n    }\n  }\n\n  /**\n   * Remove a condition from the rule\n   * @param {RuleCondition} condition - The condition to remove\n   * @return {boolean} - True if the condition was removed, false otherwise\n   */\n  removeCondition(condition: RuleCondition): boolean {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(condition instanceof RuleCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    const index = this._conditions.indexOf(condition);\n    if (index !== -1) {\n      this._conditions.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for action\n   * @return {RuleActionType}\n   */\n  get action(): RuleActionType {\n    return this._action;\n  }\n\n  /**\n   * Setter for action\n   * @param {RuleActionType} action\n   */\n  set action(action: RuleActionType) {\n    this._action = action;\n  }\n\n  /**\n   * Getter for conditionCombination\n   * @return {string | RuleConditionOperator}\n   */\n  get conditionCombination(): string | RuleConditionOperator {\n    return this._conditionCombination;\n  }\n\n  /**\n   * Setter for conditionCombination\n   * @param {string | RuleConditionOperator} conditionCombination\n   */\n  set conditionCombination(conditionCombination: string | RuleConditionOperator) {\n    this._conditionCombination = conditionCombination;\n  }\n\n  /**\n   * Evaluate the rule for an activity\n   * @param {Activity} activity - The activity to evaluate the rule for\n   * @return {boolean} - True if the rule conditions are met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    if (this._conditions.length === 0) {\n      return true;\n    }\n\n    if (\n      this._conditionCombination === \"all\" ||\n      this._conditionCombination === RuleConditionOperator.AND\n    ) {\n      return this._conditions.every((condition) => condition.evaluate(activity));\n    } else if (\n      this._conditionCombination === \"any\" ||\n      this._conditionCombination === RuleConditionOperator.OR\n    ) {\n      return this._conditions.some((condition) => condition.evaluate(activity));\n    }\n\n    return false;\n  }\n\n  /**\n   * toJSON for SequencingRule\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      conditions: this._conditions,\n      action: this._action,\n      conditionCombination: this._conditionCombination,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a collection of sequencing rules\n */\nexport class SequencingRules extends BaseCMI {\n  private _preConditionRules: SequencingRule[] = [];\n  private _exitConditionRules: SequencingRule[] = [];\n  private _postConditionRules: SequencingRule[] = [];\n\n  /**\n   * Constructor for SequencingRules\n   */\n  constructor() {\n    super(\"sequencingRules\");\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._preConditionRules = [];\n    this._exitConditionRules = [];\n    this._postConditionRules = [];\n  }\n\n  /**\n   * Getter for preConditionRules\n   * @return {SequencingRule[]}\n   */\n  get preConditionRules(): SequencingRule[] {\n    return this._preConditionRules;\n  }\n\n  /**\n   * Add a pre-condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addPreConditionRule(rule: SequencingRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".preConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._preConditionRules.push(rule);\n  }\n\n  /**\n   * Getter for exitConditionRules\n   * @return {SequencingRule[]}\n   */\n  get exitConditionRules(): SequencingRule[] {\n    return this._exitConditionRules;\n  }\n\n  /**\n   * Add an exit condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addExitConditionRule(rule: SequencingRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exitConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._exitConditionRules.push(rule);\n  }\n\n  /**\n   * Getter for postConditionRules\n   * @return {SequencingRule[]}\n   */\n  get postConditionRules(): SequencingRule[] {\n    return this._postConditionRules;\n  }\n\n  /**\n   * Add a post-condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addPostConditionRule(rule: SequencingRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".postConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._postConditionRules.push(rule);\n  }\n\n  /**\n   * Evaluate pre-condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluatePreConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._preConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Evaluate exit condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluateExitConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._exitConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Evaluate post-condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluatePostConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._postConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * toJSON for SequencingRules\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      preConditionRules: this._preConditionRules,\n      exitConditionRules: this._exitConditionRules,\n      postConditionRules: this._postConditionRules,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { CompletionStatus, SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Enum for rollup action types\n */\nexport enum RollupActionType {\n  SATISFIED = \"satisfied\",\n  NOT_SATISFIED = \"notSatisfied\",\n  COMPLETED = \"completed\",\n  INCOMPLETE = \"incomplete\",\n}\n\n/**\n * Enum for rollup condition types\n */\nexport enum RollupConditionType {\n  SATISFIED = \"satisfied\",\n  OBJECTIVE_STATUS_KNOWN = \"objectiveStatusKnown\",\n  OBJECTIVE_MEASURE_KNOWN = \"objectiveMeasureKnown\",\n  OBJECTIVE_MEASURE_GREATER_THAN = \"objectiveMeasureGreaterThan\",\n  OBJECTIVE_MEASURE_LESS_THAN = \"objectiveMeasureLessThan\",\n  COMPLETED = \"completed\",\n  PROGRESS_KNOWN = \"progressKnown\",\n  ATTEMPTED = \"attempted\",\n  NOT_ATTEMPTED = \"notAttempted\",\n  ALWAYS = \"always\",\n}\n\n/**\n * Enum for rollup consideration types\n */\nexport enum RollupConsiderationType {\n  ALL = \"all\",\n  ANY = \"any\",\n  NONE = \"none\",\n  AT_LEAST_COUNT = \"atLeastCount\",\n  AT_LEAST_PERCENT = \"atLeastPercent\",\n}\n\n/**\n * Class representing a rollup condition\n */\nexport class RollupCondition extends BaseCMI {\n  private _condition: RollupConditionType = RollupConditionType.ALWAYS;\n  private _parameters: Map<string, any> = new Map();\n\n  /**\n   * Constructor for RollupCondition\n   * @param {RollupConditionType} condition - The condition type\n   * @param {Map<string, any>} parameters - Additional parameters for the condition\n   */\n  constructor(\n    condition: RollupConditionType = RollupConditionType.ALWAYS,\n    parameters: Map<string, any> = new Map(),\n  ) {\n    super(\"rollupCondition\");\n    this._condition = condition;\n    this._parameters = parameters;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for condition\n   * @return {RollupConditionType}\n   */\n  get condition(): RollupConditionType {\n    return this._condition;\n  }\n\n  /**\n   * Setter for condition\n   * @param {RollupConditionType} condition\n   */\n  set condition(condition: RollupConditionType) {\n    this._condition = condition;\n  }\n\n  /**\n   * Getter for parameters\n   * @return {Map<string, any>}\n   */\n  get parameters(): Map<string, any> {\n    return this._parameters;\n  }\n\n  /**\n   * Setter for parameters\n   * @param {Map<string, any>} parameters\n   */\n  set parameters(parameters: Map<string, any>) {\n    this._parameters = parameters;\n  }\n\n  /**\n   * Evaluate the condition for an activity\n   * @param {Activity} activity - The activity to evaluate the condition for\n   * @return {boolean} - True if the condition is met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    switch (this._condition) {\n      case RollupConditionType.SATISFIED:\n        return activity.successStatus === SuccessStatus.PASSED;\n      case RollupConditionType.OBJECTIVE_STATUS_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RollupConditionType.OBJECTIVE_MEASURE_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RollupConditionType.OBJECTIVE_MEASURE_GREATER_THAN: {\n        const greaterThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure > greaterThanValue\n        );\n      }\n      case RollupConditionType.OBJECTIVE_MEASURE_LESS_THAN: {\n        const lessThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure < lessThanValue\n        );\n      }\n      case RollupConditionType.COMPLETED:\n        return activity.isCompleted;\n      case RollupConditionType.PROGRESS_KNOWN:\n        return activity.completionStatus !== CompletionStatus.UNKNOWN;\n      case RollupConditionType.ATTEMPTED:\n        return activity.attemptCount > 0;\n      case RollupConditionType.NOT_ATTEMPTED:\n        return activity.attemptCount === 0;\n      case RollupConditionType.ALWAYS:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RollupCondition\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      condition: this._condition,\n      parameters: Object.fromEntries(this._parameters),\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a rollup rule\n */\nexport class RollupRule extends BaseCMI {\n  private _conditions: RollupCondition[] = [];\n  private _action: RollupActionType = RollupActionType.SATISFIED;\n  private _consideration: RollupConsiderationType = RollupConsiderationType.ALL;\n  private _minimumCount: number = 0;\n  private _minimumPercent: number = 0;\n\n  /**\n   * Constructor for RollupRule\n   * @param {RollupActionType} action - The action to take when the rule conditions are met\n   * @param {RollupConsiderationType} consideration - How to consider child activities\n   * @param {number} minimumCount - The minimum count for AT_LEAST_COUNT consideration\n   * @param {number} minimumPercent - The minimum percent for AT_LEAST_PERCENT consideration\n   */\n  constructor(\n    action: RollupActionType = RollupActionType.SATISFIED,\n    consideration: RollupConsiderationType = RollupConsiderationType.ALL,\n    minimumCount: number = 0,\n    minimumPercent: number = 0,\n  ) {\n    super(\"rollupRule\");\n    this._action = action;\n    this._consideration = consideration;\n    this._minimumCount = minimumCount;\n    this._minimumPercent = minimumPercent;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._conditions = [];\n  }\n\n  /**\n   * Getter for conditions\n   * @return {RollupCondition[]}\n   */\n  get conditions(): RollupCondition[] {\n    return this._conditions;\n  }\n\n  /**\n   * Add a condition to the rule\n   * @param {RollupCondition} condition - The condition to add\n   */\n  addCondition(condition: RollupCondition): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(condition instanceof RollupCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._conditions.push(condition);\n  }\n\n  /**\n   * Remove a condition from the rule\n   * @param {RollupCondition} condition - The condition to remove\n   * @return {boolean} - True if the condition was removed, false otherwise\n   */\n  removeCondition(condition: RollupCondition): boolean {\n    const index = this._conditions.indexOf(condition);\n    if (index !== -1) {\n      this._conditions.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for action\n   * @return {RollupActionType}\n   */\n  get action(): RollupActionType {\n    return this._action;\n  }\n\n  /**\n   * Setter for action\n   * @param {RollupActionType} action\n   */\n  set action(action: RollupActionType) {\n    this._action = action;\n  }\n\n  /**\n   * Getter for consideration\n   * @return {RollupConsiderationType}\n   */\n  get consideration(): RollupConsiderationType {\n    return this._consideration;\n  }\n\n  /**\n   * Setter for consideration\n   * @param {RollupConsiderationType} consideration\n   */\n  set consideration(consideration: RollupConsiderationType) {\n    this._consideration = consideration;\n  }\n\n  /**\n   * Getter for minimumCount\n   * @return {number}\n   */\n  get minimumCount(): number {\n    return this._minimumCount;\n  }\n\n  /**\n   * Setter for minimumCount\n   * @param {number} minimumCount\n   */\n  set minimumCount(minimumCount: number) {\n    if (minimumCount >= 0) {\n      this._minimumCount = minimumCount;\n    }\n  }\n\n  /**\n   * Getter for minimumPercent\n   * @return {number}\n   */\n  get minimumPercent(): number {\n    return this._minimumPercent;\n  }\n\n  /**\n   * Setter for minimumPercent\n   * @param {number} minimumPercent\n   */\n  set minimumPercent(minimumPercent: number) {\n    if (minimumPercent >= 0 && minimumPercent <= 100) {\n      this._minimumPercent = minimumPercent;\n    }\n  }\n\n  /**\n   * Evaluate the rule for a set of child activities\n   * @param {Activity[]} children - The child activities to evaluate the rule for\n   * @return {boolean} - True if the rule conditions are met, false otherwise\n   */\n  evaluate(children: Activity[]): boolean {\n    if (children.length === 0) {\n      return false;\n    }\n\n    // Filter children that meet all conditions\n    const matchingChildren = children.filter((child) => {\n      return this._conditions.every((condition) => condition.evaluate(child));\n    });\n\n    // Apply consideration\n    switch (this._consideration) {\n      case RollupConsiderationType.ALL:\n        return matchingChildren.length === children.length;\n      case RollupConsiderationType.ANY:\n        return matchingChildren.length > 0;\n      case RollupConsiderationType.NONE:\n        return matchingChildren.length === 0;\n      case RollupConsiderationType.AT_LEAST_COUNT:\n        return matchingChildren.length >= this._minimumCount;\n      case RollupConsiderationType.AT_LEAST_PERCENT: {\n        const percent = (matchingChildren.length / children.length) * 100;\n        return percent >= this._minimumPercent;\n      }\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RollupRule\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      conditions: this._conditions,\n      action: this._action,\n      consideration: this._consideration,\n      minimumCount: this._minimumCount,\n      minimumPercent: this._minimumPercent,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a collection of rollup rules\n */\nexport class RollupRules extends BaseCMI {\n  private _rules: RollupRule[] = [];\n\n  /**\n   * Constructor for RollupRules\n   */\n  constructor() {\n    super(\"rollupRules\");\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._rules = [];\n  }\n\n  /**\n   * Getter for rules\n   * @return {RollupRule[]}\n   */\n  get rules(): RollupRule[] {\n    return this._rules;\n  }\n\n  /**\n   * Add a rule\n   * @param {RollupRule} rule - The rule to add\n   */\n  addRule(rule: RollupRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof RollupRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".rules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._rules.push(rule);\n  }\n\n  /**\n   * Remove a rule\n   * @param {RollupRule} rule - The rule to remove\n   * @return {boolean} - True if the rule was removed, false otherwise\n   */\n  removeRule(rule: RollupRule): boolean {\n    const index = this._rules.indexOf(rule);\n    if (index !== -1) {\n      this._rules.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Process rollup for an activity\n   * @param {Activity} activity - The activity to process rollup for\n   */\n  processRollup(activity: Activity): void {\n    if (!activity || activity.children.length === 0) {\n      return;\n    }\n\n    const children = activity.children;\n    let completionRollup = false;\n    let successRollup = false;\n\n    // Process each rule\n    for (const rule of this._rules) {\n      if (rule.evaluate(children)) {\n        switch (rule.action) {\n          case RollupActionType.SATISFIED:\n            activity.successStatus = SuccessStatus.PASSED;\n            successRollup = true;\n            break;\n          case RollupActionType.NOT_SATISFIED:\n            activity.successStatus = SuccessStatus.FAILED;\n            successRollup = true;\n            break;\n          case RollupActionType.COMPLETED:\n            activity.completionStatus = CompletionStatus.COMPLETED;\n            activity.isCompleted = true;\n            completionRollup = true;\n            break;\n          case RollupActionType.INCOMPLETE:\n            activity.completionStatus = CompletionStatus.INCOMPLETE;\n            activity.isCompleted = false;\n            completionRollup = true;\n            break;\n        }\n      }\n    }\n\n    // If no rules applied for completion, use default rollup\n    if (!completionRollup) {\n      this._defaultCompletionRollup(activity, children);\n    }\n\n    // If no rules applied for success, use default rollup\n    if (!successRollup) {\n      this._defaultSuccessRollup(activity, children);\n    }\n  }\n\n  /**\n   * Default completion rollup\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @private\n   */\n  private _defaultCompletionRollup(activity: Activity, children: Activity[]): void {\n    // If all children are completed, mark the parent as completed\n    const allCompleted = children.every((child) => child.isCompleted);\n    if (allCompleted) {\n      activity.completionStatus = CompletionStatus.COMPLETED;\n      activity.isCompleted = true;\n    } else {\n      // If any child is incomplete, mark the parent as incomplete\n      const anyIncomplete = children.some(\n        (child) => child.completionStatus === CompletionStatus.INCOMPLETE,\n      );\n      if (anyIncomplete) {\n        activity.completionStatus = CompletionStatus.INCOMPLETE;\n        activity.isCompleted = false;\n      }\n    }\n  }\n\n  /**\n   * Default success rollup\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @private\n   */\n  private _defaultSuccessRollup(activity: Activity, children: Activity[]): void {\n    // If all children are satisfied, mark the parent as satisfied\n    const allSatisfied = children.every((child) => child.successStatus === SuccessStatus.PASSED);\n    if (allSatisfied) {\n      activity.successStatus = SuccessStatus.PASSED;\n    } else {\n      // If any child is not satisfied, mark the parent as not satisfied\n      const anyNotSatisfied = children.some(\n        (child) => child.successStatus === SuccessStatus.FAILED,\n      );\n      if (anyNotSatisfied) {\n        activity.successStatus = SuccessStatus.FAILED;\n      }\n    }\n  }\n\n  /**\n   * toJSON for RollupRules\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      rules: this._rules,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","const ValidLanguages: string[] = [\n  \"aa\",\n  \"ab\",\n  \"ae\",\n  \"af\",\n  \"ak\",\n  \"am\",\n  \"an\",\n  \"ar\",\n  \"as\",\n  \"av\",\n  \"ay\",\n  \"az\",\n  \"ba\",\n  \"be\",\n  \"bg\",\n  \"bh\",\n  \"bi\",\n  \"bm\",\n  \"bn\",\n  \"bo\",\n  \"br\",\n  \"bs\",\n  \"ca\",\n  \"ce\",\n  \"ch\",\n  \"co\",\n  \"cr\",\n  \"cs\",\n  \"cu\",\n  \"cv\",\n  \"cy\",\n  \"da\",\n  \"de\",\n  \"dv\",\n  \"dz\",\n  \"ee\",\n  \"el\",\n  \"en\",\n  \"eo\",\n  \"es\",\n  \"et\",\n  \"eu\",\n  \"fa\",\n  \"ff\",\n  \"fi\",\n  \"fj\",\n  \"fo\",\n  \"fr\",\n  \"fy\",\n  \"ga\",\n  \"gd\",\n  \"gl\",\n  \"gn\",\n  \"gu\",\n  \"gv\",\n  \"ha\",\n  \"he\",\n  \"hi\",\n  \"ho\",\n  \"hr\",\n  \"ht\",\n  \"hu\",\n  \"hy\",\n  \"hz\",\n  \"ia\",\n  \"id\",\n  \"ie\",\n  \"ig\",\n  \"ii\",\n  \"ik\",\n  \"io\",\n  \"is\",\n  \"it\",\n  \"iu\",\n  \"ja\",\n  \"jv\",\n  \"ka\",\n  \"kg\",\n  \"ki\",\n  \"kj\",\n  \"kk\",\n  \"kl\",\n  \"km\",\n  \"kn\",\n  \"ko\",\n  \"kr\",\n  \"ks\",\n  \"ku\",\n  \"kv\",\n  \"kw\",\n  \"ky\",\n  \"la\",\n  \"lb\",\n  \"lg\",\n  \"li\",\n  \"ln\",\n  \"lo\",\n  \"lt\",\n  \"lu\",\n  \"lv\",\n  \"mg\",\n  \"mh\",\n  \"mi\",\n  \"mk\",\n  \"ml\",\n  \"mn\",\n  \"mo\",\n  \"mr\",\n  \"ms\",\n  \"mt\",\n  \"my\",\n  \"na\",\n  \"nb\",\n  \"nd\",\n  \"ne\",\n  \"ng\",\n  \"nl\",\n  \"nn\",\n  \"no\",\n  \"nr\",\n  \"nv\",\n  \"ny\",\n  \"oc\",\n  \"oj\",\n  \"om\",\n  \"or\",\n  \"os\",\n  \"pa\",\n  \"pi\",\n  \"pl\",\n  \"ps\",\n  \"pt\",\n  \"qu\",\n  \"rm\",\n  \"rn\",\n  \"ro\",\n  \"ru\",\n  \"rw\",\n  \"sa\",\n  \"sc\",\n  \"sd\",\n  \"se\",\n  \"sg\",\n  \"sh\",\n  \"si\",\n  \"sk\",\n  \"sl\",\n  \"sm\",\n  \"sn\",\n  \"so\",\n  \"sq\",\n  \"sr\",\n  \"ss\",\n  \"st\",\n  \"su\",\n  \"sv\",\n  \"sw\",\n  \"ta\",\n  \"te\",\n  \"tg\",\n  \"th\",\n  \"ti\",\n  \"tk\",\n  \"tl\",\n  \"tn\",\n  \"to\",\n  \"tr\",\n  \"ts\",\n  \"tt\",\n  \"tw\",\n  \"ty\",\n  \"ug\",\n  \"uk\",\n  \"ur\",\n  \"uz\",\n  \"ve\",\n  \"vi\",\n  \"vo\",\n  \"wa\",\n  \"wo\",\n  \"xh\",\n  \"yi\",\n  \"yo\",\n  \"za\",\n  \"zh\",\n  \"zu\",\n  \"aar\",\n  \"abk\",\n  \"ave\",\n  \"afr\",\n  \"aka\",\n  \"amh\",\n  \"arg\",\n  \"ara\",\n  \"asm\",\n  \"ava\",\n  \"aym\",\n  \"aze\",\n  \"bak\",\n  \"bel\",\n  \"bul\",\n  \"bih\",\n  \"bis\",\n  \"bam\",\n  \"ben\",\n  \"tib\",\n  \"bod\",\n  \"bre\",\n  \"bos\",\n  \"cat\",\n  \"che\",\n  \"cha\",\n  \"cos\",\n  \"cre\",\n  \"cze\",\n  \"ces\",\n  \"chu\",\n  \"chv\",\n  \"wel\",\n  \"cym\",\n  \"dan\",\n  \"ger\",\n  \"deu\",\n  \"div\",\n  \"dzo\",\n  \"ewe\",\n  \"gre\",\n  \"ell\",\n  \"eng\",\n  \"epo\",\n  \"spa\",\n  \"est\",\n  \"baq\",\n  \"eus\",\n  \"per\",\n  \"fas\",\n  \"ful\",\n  \"fin\",\n  \"fij\",\n  \"fao\",\n  \"fre\",\n  \"fra\",\n  \"fry\",\n  \"gle\",\n  \"gla\",\n  \"glg\",\n  \"grn\",\n  \"guj\",\n  \"glv\",\n  \"hau\",\n  \"heb\",\n  \"hin\",\n  \"hmo\",\n  \"hrv\",\n  \"hat\",\n  \"hun\",\n  \"arm\",\n  \"hye\",\n  \"her\",\n  \"ina\",\n  \"ind\",\n  \"ile\",\n  \"ibo\",\n  \"iii\",\n  \"ipk\",\n  \"ido\",\n  \"ice\",\n  \"isl\",\n  \"ita\",\n  \"iku\",\n  \"jpn\",\n  \"jav\",\n  \"geo\",\n  \"kat\",\n  \"kon\",\n  \"kik\",\n  \"kua\",\n  \"kaz\",\n  \"kal\",\n  \"khm\",\n  \"kan\",\n  \"kor\",\n  \"kau\",\n  \"kas\",\n  \"kur\",\n  \"kom\",\n  \"cor\",\n  \"kir\",\n  \"lat\",\n  \"ltz\",\n  \"lug\",\n  \"lim\",\n  \"lin\",\n  \"lao\",\n  \"lit\",\n  \"lub\",\n  \"lav\",\n  \"mlg\",\n  \"mah\",\n  \"mao\",\n  \"mri\",\n  \"mac\",\n  \"mkd\",\n  \"mal\",\n  \"mon\",\n  \"mol\",\n  \"mar\",\n  \"may\",\n  \"msa\",\n  \"mlt\",\n  \"bur\",\n  \"mya\",\n  \"nau\",\n  \"nob\",\n  \"nde\",\n  \"nep\",\n  \"ndo\",\n  \"dut\",\n  \"nld\",\n  \"nno\",\n  \"nor\",\n  \"nbl\",\n  \"nav\",\n  \"nya\",\n  \"oci\",\n  \"oji\",\n  \"orm\",\n  \"ori\",\n  \"oss\",\n  \"pan\",\n  \"pli\",\n  \"pol\",\n  \"pus\",\n  \"por\",\n  \"que\",\n  \"roh\",\n  \"run\",\n  \"rum\",\n  \"ron\",\n  \"rus\",\n  \"kin\",\n  \"san\",\n  \"srd\",\n  \"snd\",\n  \"sme\",\n  \"sag\",\n  \"slo\",\n  \"sin\",\n  \"slk\",\n  \"slv\",\n  \"smo\",\n  \"sna\",\n  \"som\",\n  \"alb\",\n  \"sqi\",\n  \"srp\",\n  \"ssw\",\n  \"sot\",\n  \"sun\",\n  \"swe\",\n  \"swa\",\n  \"tam\",\n  \"tel\",\n  \"tgk\",\n  \"tha\",\n  \"tir\",\n  \"tuk\",\n  \"tgl\",\n  \"tsn\",\n  \"ton\",\n  \"tur\",\n  \"tso\",\n  \"tat\",\n  \"twi\",\n  \"tah\",\n  \"uig\",\n  \"ukr\",\n  \"urd\",\n  \"uzb\",\n  \"ven\",\n  \"vie\",\n  \"vol\",\n  \"wln\",\n  \"wol\",\n  \"xho\",\n  \"yid\",\n  \"yor\",\n  \"zha\",\n  \"chi\",\n  \"zho\",\n  \"zul\",\n];\nexport default ValidLanguages;\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { scorm2004_regex } from \"../../../constants/regex\";\nimport { check2004ValidFormat } from \"../validation\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { CompletionStatus, SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Class representing a single activity in the SCORM 2004 activity tree\n */\nexport class Activity extends BaseCMI {\n  private _id: string = \"\";\n  private _title: string = \"\";\n  private _children: Activity[] = [];\n  private _parent: Activity | null = null;\n  private _isVisible: boolean = true;\n  private _isActive: boolean = false;\n  private _isSuspended: boolean = false;\n  private _isCompleted: boolean = false;\n  private _completionStatus: CompletionStatus = CompletionStatus.UNKNOWN;\n  private _successStatus: SuccessStatus = SuccessStatus.UNKNOWN;\n  private _attemptCount: number = 0;\n  private _attemptCompletionAmount: number = 0;\n  private _attemptAbsoluteDuration: string = \"PT0H0M0S\";\n  private _attemptExperiencedDuration: string = \"PT0H0M0S\";\n  private _activityAbsoluteDuration: string = \"PT0H0M0S\";\n  private _activityExperiencedDuration: string = \"PT0H0M0S\";\n  private _objectiveSatisfiedStatus: boolean = false;\n  private _objectiveMeasureStatus: boolean = false;\n  private _objectiveNormalizedMeasure: number = 0;\n\n  /**\n   * Constructor for Activity\n   * @param {string} id - The unique identifier for this activity\n   * @param {string} title - The title of this activity\n   */\n  constructor(id: string = \"\", title: string = \"\") {\n    super(\"activity\");\n    this._id = id;\n    this._title = title;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    // Initialize children\n    for (const child of this._children) {\n      child.initialize();\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._isActive = false;\n    this._isSuspended = false;\n    this._isCompleted = false;\n    this._completionStatus = CompletionStatus.UNKNOWN;\n    this._successStatus = SuccessStatus.UNKNOWN;\n    this._attemptCount = 0;\n    this._attemptCompletionAmount = 0;\n    this._attemptAbsoluteDuration = \"PT0H0M0S\";\n    this._attemptExperiencedDuration = \"PT0H0M0S\";\n    this._activityAbsoluteDuration = \"PT0H0M0S\";\n    this._activityExperiencedDuration = \"PT0H0M0S\";\n    this._objectiveSatisfiedStatus = false;\n    this._objectiveMeasureStatus = false;\n    this._objectiveNormalizedMeasure = 0;\n\n    // Reset children\n    for (const child of this._children) {\n      child.reset();\n    }\n  }\n\n  /**\n   * Getter for id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for title\n   * @return {string}\n   */\n  get title(): string {\n    return this._title;\n  }\n\n  /**\n   * Setter for title\n   * @param {string} title\n   */\n  set title(title: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".title\", title, scorm2004_regex.CMILangString250)\n    ) {\n      this._title = title;\n    }\n  }\n\n  /**\n   * Getter for children\n   * @return {Activity[]}\n   */\n  get children(): Activity[] {\n    return this._children;\n  }\n\n  /**\n   * Add a child activity to this activity\n   * @param {Activity} child - The child activity to add\n   */\n  addChild(child: Activity): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(child instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".children\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    child._parent = this;\n    this._children.push(child);\n  }\n\n  /**\n   * Remove a child activity from this activity\n   * @param {Activity} child - The child activity to remove\n   * @return {boolean} - True if the child was removed, false otherwise\n   */\n  removeChild(child: Activity): boolean {\n    const index = this._children.indexOf(child);\n    if (index !== -1) {\n      this._children.splice(index, 1);\n      child._parent = null;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for parent\n   * @return {Activity | null}\n   */\n  get parent(): Activity | null {\n    return this._parent;\n  }\n\n  /**\n   * Getter for isVisible\n   * @return {boolean}\n   */\n  get isVisible(): boolean {\n    return this._isVisible;\n  }\n\n  /**\n   * Setter for isVisible\n   * @param {boolean} isVisible\n   */\n  set isVisible(isVisible: boolean) {\n    this._isVisible = isVisible;\n  }\n\n  /**\n   * Getter for isActive\n   * @return {boolean}\n   */\n  get isActive(): boolean {\n    return this._isActive;\n  }\n\n  /**\n   * Setter for isActive\n   * @param {boolean} isActive\n   */\n  set isActive(isActive: boolean) {\n    this._isActive = isActive;\n  }\n\n  /**\n   * Getter for isSuspended\n   * @return {boolean}\n   */\n  get isSuspended(): boolean {\n    return this._isSuspended;\n  }\n\n  /**\n   * Setter for isSuspended\n   * @param {boolean} isSuspended\n   */\n  set isSuspended(isSuspended: boolean) {\n    this._isSuspended = isSuspended;\n  }\n\n  /**\n   * Getter for isCompleted\n   * @return {boolean}\n   */\n  get isCompleted(): boolean {\n    return this._isCompleted;\n  }\n\n  /**\n   * Setter for isCompleted\n   * @param {boolean} isCompleted\n   */\n  set isCompleted(isCompleted: boolean) {\n    this._isCompleted = isCompleted;\n  }\n\n  /**\n   * Getter for completionStatus\n   * @return {CompletionStatus}\n   */\n  get completionStatus(): CompletionStatus {\n    return this._completionStatus;\n  }\n\n  /**\n   * Setter for completionStatus\n   * @param {CompletionStatus} completionStatus\n   */\n  set completionStatus(completionStatus: CompletionStatus) {\n    this._completionStatus = completionStatus;\n    this._isCompleted = completionStatus === CompletionStatus.COMPLETED;\n  }\n\n  /**\n   * Getter for successStatus\n   * @return {SuccessStatus}\n   */\n  get successStatus(): SuccessStatus {\n    return this._successStatus;\n  }\n\n  /**\n   * Setter for successStatus\n   * @param {SuccessStatus} successStatus\n   */\n  set successStatus(successStatus: SuccessStatus) {\n    this._successStatus = successStatus;\n  }\n\n  /**\n   * Getter for attemptCount\n   * @return {number}\n   */\n  get attemptCount(): number {\n    return this._attemptCount;\n  }\n\n  /**\n   * Increment the attempt count\n   */\n  incrementAttemptCount(): void {\n    this._attemptCount++;\n  }\n\n  /**\n   * Getter for objectiveMeasureStatus\n   * @return {boolean}\n   */\n  get objectiveMeasureStatus(): boolean {\n    return this._objectiveMeasureStatus;\n  }\n\n  /**\n   * Setter for objectiveMeasureStatus\n   * @param {boolean} objectiveMeasureStatus\n   */\n  set objectiveMeasureStatus(objectiveMeasureStatus: boolean) {\n    this._objectiveMeasureStatus = objectiveMeasureStatus;\n  }\n\n  /**\n   * Getter for objectiveNormalizedMeasure\n   * @return {number}\n   */\n  get objectiveNormalizedMeasure(): number {\n    return this._objectiveNormalizedMeasure;\n  }\n\n  /**\n   * Setter for objectiveNormalizedMeasure\n   * @param {number} objectiveNormalizedMeasure\n   */\n  set objectiveNormalizedMeasure(objectiveNormalizedMeasure: number) {\n    this._objectiveNormalizedMeasure = objectiveNormalizedMeasure;\n  }\n\n  /**\n   * toJSON for Activity\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      id: this._id,\n      title: this._title,\n      isVisible: this._isVisible,\n      isActive: this._isActive,\n      isSuspended: this._isSuspended,\n      isCompleted: this._isCompleted,\n      completionStatus: this._completionStatus,\n      successStatus: this._successStatus,\n      attemptCount: this._attemptCount,\n      attemptCompletionAmount: this._attemptCompletionAmount,\n      attemptAbsoluteDuration: this._attemptAbsoluteDuration,\n      attemptExperiencedDuration: this._attemptExperiencedDuration,\n      activityAbsoluteDuration: this._activityAbsoluteDuration,\n      activityExperiencedDuration: this._activityExperiencedDuration,\n      objectiveSatisfiedStatus: this._objectiveSatisfiedStatus,\n      objectiveMeasureStatus: this._objectiveMeasureStatus,\n      objectiveNormalizedMeasure: this._objectiveNormalizedMeasure,\n      children: this._children.map((child) => child.toJSON()),\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\n\n/**\n * Class representing the SCORM 2004 activity tree\n */\nexport class ActivityTree extends BaseCMI {\n  private _root: Activity | null = null;\n  private _currentActivity: Activity | null = null;\n  private _suspendedActivity: Activity | null = null;\n  private _activities: Map<string, Activity> = new Map();\n\n  /**\n   * Constructor for ActivityTree\n   */\n  constructor() {\n    super(\"activityTree\");\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    if (this._root) {\n      this._root.initialize();\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._currentActivity = null;\n    this._suspendedActivity = null;\n    if (this._root) {\n      this._root.reset();\n    }\n  }\n\n  /**\n   * Getter for root\n   * @return {Activity | null}\n   */\n  get root(): Activity | null {\n    return this._root;\n  }\n\n  /**\n   * Setter for root\n   * @param {Activity} root\n   */\n  set root(root: Activity | null) {\n    // noinspection SuspiciousTypeOfGuard\n    if (root !== null && !(root instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".root\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._root = root;\n    if (root) {\n      this._activities.set(root.id, root);\n      this._addActivitiesToMap(root);\n    }\n  }\n\n  /**\n   * Recursively add activities to the activities map\n   * @param {Activity} activity\n   * @private\n   */\n  private _addActivitiesToMap(activity: Activity): void {\n    for (const child of activity.children) {\n      this._activities.set(child.id, child);\n      this._addActivitiesToMap(child);\n    }\n  }\n\n  /**\n   * Getter for currentActivity\n   * @return {Activity | null}\n   */\n  get currentActivity(): Activity | null {\n    return this._currentActivity;\n  }\n\n  /**\n   * Setter for currentActivity\n   * @param {Activity | null} activity\n   */\n  set currentActivity(activity: Activity | null) {\n    // noinspection SuspiciousTypeOfGuard\n    if (activity !== null && !(activity instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".currentActivity\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n\n    // If there's already a current activity, deactivate it\n    if (this._currentActivity) {\n      this._currentActivity.isActive = false;\n    }\n\n    // Set the new current activity and activate it\n    this._currentActivity = activity;\n    if (activity) {\n      activity.isActive = true;\n    }\n  }\n\n  /**\n   * Getter for suspendedActivity\n   * @return {Activity | null}\n   */\n  get suspendedActivity(): Activity | null {\n    return this._suspendedActivity;\n  }\n\n  /**\n   * Setter for suspendedActivity\n   * @param {Activity | null} activity\n   */\n  set suspendedActivity(activity: Activity | null) {\n    // noinspection SuspiciousTypeOfGuard\n    if (activity !== null && !(activity instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".suspendedActivity\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n\n    // If there's already a suspended activity, unsuspend it\n    if (this._suspendedActivity) {\n      this._suspendedActivity.isSuspended = false;\n    }\n\n    // Set the new suspended activity and mark it as suspended\n    this._suspendedActivity = activity;\n    if (activity) {\n      activity.isSuspended = true;\n    }\n  }\n\n  /**\n   * Get an activity by ID\n   * @param {string} id - The ID of the activity to get\n   * @return {Activity | undefined} - The activity with the given ID, or undefined if not found\n   */\n  getActivity(id: string): Activity | undefined {\n    return this._activities.get(id);\n  }\n\n  /**\n   * Get all activities in the tree\n   * @return {Activity[]} - An array of all activities in the tree\n   */\n  getAllActivities(): Activity[] {\n    return Array.from(this._activities.values());\n  }\n\n  /**\n   * Get the parent of an activity\n   * @param {Activity} activity - The activity to get the parent of\n   * @return {Activity | null} - The parent of the activity, or null if it has no parent\n   */\n  getParent(activity: Activity): Activity | null {\n    return activity.parent;\n  }\n\n  /**\n   * Get the children of an activity\n   * @param {Activity} activity - The activity to get the children of\n   * @return {Activity[]} - An array of the activity's children\n   */\n  getChildren(activity: Activity): Activity[] {\n    return activity.children;\n  }\n\n  /**\n   * Get the siblings of an activity\n   * @param {Activity} activity - The activity to get the siblings of\n   * @return {Activity[]} - An array of the activity's siblings\n   */\n  getSiblings(activity: Activity): Activity[] {\n    if (!activity.parent) {\n      return [];\n    }\n    return activity.parent.children.filter((child) => child !== activity);\n  }\n\n  /**\n   * Get the next sibling of an activity\n   * @param {Activity} activity - The activity to get the next sibling of\n   * @return {Activity | null} - The next sibling of the activity, or null if it has no next sibling\n   */\n  getNextSibling(activity: Activity): Activity | null {\n    if (!activity.parent) {\n      return null;\n    }\n    const siblings = activity.parent.children;\n    const index = siblings.indexOf(activity);\n    if (index === -1 || index === siblings.length - 1) {\n      return null;\n    }\n    return siblings[index + 1];\n  }\n\n  /**\n   * Get the previous sibling of an activity\n   * @param {Activity} activity - The activity to get the previous sibling of\n   * @return {Activity | null} - The previous sibling of the activity, or null if it has no previous sibling\n   */\n  getPreviousSibling(activity: Activity): Activity | null {\n    if (!activity.parent) {\n      return null;\n    }\n    const siblings = activity.parent.children;\n    const index = siblings.indexOf(activity);\n    if (index <= 0) {\n      return null;\n    }\n    return siblings[index - 1];\n  }\n\n  /**\n   * Get the first child of an activity\n   * @param {Activity} activity - The activity to get the first child of\n   * @return {Activity | null} - The first child of the activity, or null if it has no children\n   */\n  getFirstChild(activity: Activity): Activity | null {\n    if (activity.children.length === 0) {\n      return null;\n    }\n    return activity.children[0];\n  }\n\n  /**\n   * Get the last child of an activity\n   * @param {Activity} activity - The activity to get the last child of\n   * @return {Activity | null} - The last child of the activity, or null if it has no children\n   */\n  getLastChild(activity: Activity): Activity | null {\n    if (activity.children.length === 0) {\n      return null;\n    }\n    return activity.children[activity.children.length - 1];\n  }\n\n  /**\n   * Get the common ancestor of two activities\n   * @param {Activity} activity1 - The first activity\n   * @param {Activity} activity2 - The second activity\n   * @return {Activity | null} - The common ancestor of the two activities, or null if they have no common ancestor\n   */\n  getCommonAncestor(activity1: Activity, activity2: Activity): Activity | null {\n    // Get the path from the root to activity1\n    const path1: Activity[] = [];\n    let current: Activity | null = activity1;\n    while (current) {\n      path1.unshift(current);\n      current = current.parent;\n    }\n\n    // Check if activity2 is in the path from the root to activity1\n    current = activity2;\n    while (current) {\n      if (path1.includes(current)) {\n        return current;\n      }\n      current = current.parent;\n    }\n\n    return null;\n  }\n\n  /**\n   * toJSON for ActivityTree\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      root: this._root,\n      currentActivity: this._currentActivity ? this._currentActivity.id : null,\n      suspendedActivity: this._suspendedActivity ? this._suspendedActivity.id : null,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\n\n/**\n * Class representing SCORM 2004 sequencing controls\n */\nexport class SequencingControls extends BaseCMI {\n  // Sequencing Control Modes\n  private _enabled: boolean = true;\n  private _choiceExit: boolean = true;\n  private _flow: boolean = false;\n  private _forwardOnly: boolean = false;\n  private _useCurrentAttemptObjectiveInfo: boolean = true;\n  private _useCurrentAttemptProgressInfo: boolean = true;\n\n  // Constrain Choice Controls\n  private _preventActivation: boolean = false;\n  private _constrainChoice: boolean = false;\n\n  // Rollup Controls\n  private _rollupObjectiveSatisfied: boolean = true;\n  private _rollupProgressCompletion: boolean = true;\n  private _objectiveMeasureWeight: number = 1.0;\n\n  /**\n   * Constructor for SequencingControls\n   */\n  constructor() {\n    super(\"sequencingControls\");\n  }\n\n  /**\n   * Reset the sequencing controls to their default values\n   */\n  reset() {\n    this._initialized = false;\n    this._enabled = true;\n    this._choiceExit = true;\n    this._flow = false;\n    this._forwardOnly = false;\n    this._useCurrentAttemptObjectiveInfo = true;\n    this._useCurrentAttemptProgressInfo = true;\n    this._preventActivation = false;\n    this._constrainChoice = false;\n    this._rollupObjectiveSatisfied = true;\n    this._rollupProgressCompletion = true;\n    this._objectiveMeasureWeight = 1.0;\n  }\n\n  /**\n   * Getter for enabled\n   * @return {boolean}\n   */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  /**\n   * Setter for enabled\n   * @param {boolean} enabled\n   */\n  set enabled(enabled: boolean) {\n    this._enabled = enabled;\n  }\n\n  /**\n   * Getter for choiceExit\n   * @return {boolean}\n   */\n  get choiceExit(): boolean {\n    return this._choiceExit;\n  }\n\n  /**\n   * Setter for choiceExit\n   * @param {boolean} choiceExit\n   */\n  set choiceExit(choiceExit: boolean) {\n    this._choiceExit = choiceExit;\n  }\n\n  /**\n   * Getter for flow\n   * @return {boolean}\n   */\n  get flow(): boolean {\n    return this._flow;\n  }\n\n  /**\n   * Setter for flow\n   * @param {boolean} flow\n   */\n  set flow(flow: boolean) {\n    this._flow = flow;\n  }\n\n  /**\n   * Getter for forwardOnly\n   * @return {boolean}\n   */\n  get forwardOnly(): boolean {\n    return this._forwardOnly;\n  }\n\n  /**\n   * Setter for forwardOnly\n   * @param {boolean} forwardOnly\n   */\n  set forwardOnly(forwardOnly: boolean) {\n    this._forwardOnly = forwardOnly;\n  }\n\n  /**\n   * Getter for useCurrentAttemptObjectiveInfo\n   * @return {boolean}\n   */\n  get useCurrentAttemptObjectiveInfo(): boolean {\n    return this._useCurrentAttemptObjectiveInfo;\n  }\n\n  /**\n   * Setter for useCurrentAttemptObjectiveInfo\n   * @param {boolean} useCurrentAttemptObjectiveInfo\n   */\n  set useCurrentAttemptObjectiveInfo(useCurrentAttemptObjectiveInfo: boolean) {\n    this._useCurrentAttemptObjectiveInfo = useCurrentAttemptObjectiveInfo;\n  }\n\n  /**\n   * Getter for useCurrentAttemptProgressInfo\n   * @return {boolean}\n   */\n  get useCurrentAttemptProgressInfo(): boolean {\n    return this._useCurrentAttemptProgressInfo;\n  }\n\n  /**\n   * Setter for useCurrentAttemptProgressInfo\n   * @param {boolean} useCurrentAttemptProgressInfo\n   */\n  set useCurrentAttemptProgressInfo(useCurrentAttemptProgressInfo: boolean) {\n    this._useCurrentAttemptProgressInfo = useCurrentAttemptProgressInfo;\n  }\n\n  /**\n   * Getter for preventActivation\n   * @return {boolean}\n   */\n  get preventActivation(): boolean {\n    return this._preventActivation;\n  }\n\n  /**\n   * Setter for preventActivation\n   * @param {boolean} preventActivation\n   */\n  set preventActivation(preventActivation: boolean) {\n    this._preventActivation = preventActivation;\n  }\n\n  /**\n   * Getter for constrainChoice\n   * @return {boolean}\n   */\n  get constrainChoice(): boolean {\n    return this._constrainChoice;\n  }\n\n  /**\n   * Setter for constrainChoice\n   * @param {boolean} constrainChoice\n   */\n  set constrainChoice(constrainChoice: boolean) {\n    this._constrainChoice = constrainChoice;\n  }\n\n  /**\n   * Getter for rollupObjectiveSatisfied\n   * @return {boolean}\n   */\n  get rollupObjectiveSatisfied(): boolean {\n    return this._rollupObjectiveSatisfied;\n  }\n\n  /**\n   * Setter for rollupObjectiveSatisfied\n   * @param {boolean} rollupObjectiveSatisfied\n   */\n  set rollupObjectiveSatisfied(rollupObjectiveSatisfied: boolean) {\n    this._rollupObjectiveSatisfied = rollupObjectiveSatisfied;\n  }\n\n  /**\n   * Getter for rollupProgressCompletion\n   * @return {boolean}\n   */\n  get rollupProgressCompletion(): boolean {\n    return this._rollupProgressCompletion;\n  }\n\n  /**\n   * Setter for rollupProgressCompletion\n   * @param {boolean} rollupProgressCompletion\n   */\n  set rollupProgressCompletion(rollupProgressCompletion: boolean) {\n    this._rollupProgressCompletion = rollupProgressCompletion;\n  }\n\n  /**\n   * Getter for objectiveMeasureWeight\n   * @return {number}\n   */\n  get objectiveMeasureWeight(): number {\n    return this._objectiveMeasureWeight;\n  }\n\n  /**\n   * Setter for objectiveMeasureWeight\n   * @param {number} objectiveMeasureWeight\n   */\n  set objectiveMeasureWeight(objectiveMeasureWeight: number) {\n    if (objectiveMeasureWeight >= 0 && objectiveMeasureWeight <= 1) {\n      this._objectiveMeasureWeight = objectiveMeasureWeight;\n    }\n  }\n\n  /**\n   * Check if choice navigation is allowed\n   * @return {boolean} - True if choice navigation is allowed, false otherwise\n   */\n  isChoiceNavigationAllowed(): boolean {\n    return this._enabled && !this._constrainChoice;\n  }\n\n  /**\n   * Check if flow navigation is allowed\n   * @return {boolean} - True if flow navigation is allowed, false otherwise\n   */\n  isFlowNavigationAllowed(): boolean {\n    return this._enabled && this._flow;\n  }\n\n  /**\n   * Check if forward navigation is allowed\n   * @return {boolean} - True if forward navigation is allowed, false otherwise\n   */\n  isForwardNavigationAllowed(): boolean {\n    return this._enabled && (!this._forwardOnly || this._flow);\n  }\n\n  /**\n   * Check if backward navigation is allowed\n   * @return {boolean} - True if backward navigation is allowed, false otherwise\n   */\n  isBackwardNavigationAllowed(): boolean {\n    return this._enabled && !this._forwardOnly;\n  }\n\n  /**\n   * toJSON for SequencingControls\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      enabled: this._enabled,\n      choiceExit: this._choiceExit,\n      flow: this._flow,\n      forwardOnly: this._forwardOnly,\n      useCurrentAttemptObjectiveInfo: this._useCurrentAttemptObjectiveInfo,\n      useCurrentAttemptProgressInfo: this._useCurrentAttemptProgressInfo,\n      preventActivation: this._preventActivation,\n      constrainChoice: this._constrainChoice,\n      rollupObjectiveSatisfied: this._rollupObjectiveSatisfied,\n      rollupProgressCompletion: this._rollupProgressCompletion,\n      objectiveMeasureWeight: this._objectiveMeasureWeight,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { ActivityTree } from \"./activity_tree\";\nimport { RuleActionType, SequencingRules } from \"./sequencing_rules\";\nimport { SequencingControls } from \"./sequencing_controls\";\nimport { RollupRules } from \"./rollup_rules\";\nimport { ADLNav } from \"../adl\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\n\n/**\n * Class representing SCORM 2004 sequencing\n */\nexport class Sequencing extends BaseCMI {\n  private _activityTree: ActivityTree;\n  private _sequencingRules: SequencingRules;\n  private _sequencingControls: SequencingControls;\n  private _rollupRules: RollupRules;\n  private _adlNav: ADLNav | null = null;\n\n  /**\n   * Constructor for Sequencing\n   */\n  constructor() {\n    super(\"sequencing\");\n    this._activityTree = new ActivityTree();\n    this._sequencingRules = new SequencingRules();\n    this._sequencingControls = new SequencingControls();\n    this._rollupRules = new RollupRules();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this._activityTree.initialize();\n    this._sequencingRules.initialize();\n    this._sequencingControls.initialize();\n    this._rollupRules.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._activityTree.reset();\n    this._sequencingRules.reset();\n    this._sequencingControls.reset();\n    this._rollupRules.reset();\n  }\n\n  /**\n   * Getter for activityTree\n   * @return {ActivityTree}\n   */\n  get activityTree(): ActivityTree {\n    return this._activityTree;\n  }\n\n  /**\n   * Setter for activityTree\n   * @param {ActivityTree} activityTree\n   */\n  set activityTree(activityTree: ActivityTree) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(activityTree instanceof ActivityTree)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".activityTree\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._activityTree = activityTree;\n  }\n\n  /**\n   * Getter for sequencingRules\n   * @return {SequencingRules}\n   */\n  get sequencingRules(): SequencingRules {\n    return this._sequencingRules;\n  }\n\n  /**\n   * Setter for sequencingRules\n   * @param {SequencingRules} sequencingRules\n   */\n  set sequencingRules(sequencingRules: SequencingRules) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(sequencingRules instanceof SequencingRules)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".sequencingRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._sequencingRules = sequencingRules;\n  }\n\n  /**\n   * Getter for sequencingControls\n   * @return {SequencingControls}\n   */\n  get sequencingControls(): SequencingControls {\n    return this._sequencingControls;\n  }\n\n  /**\n   * Setter for sequencingControls\n   * @param {SequencingControls} sequencingControls\n   */\n  set sequencingControls(sequencingControls: SequencingControls) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(sequencingControls instanceof SequencingControls)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".sequencingControls\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._sequencingControls = sequencingControls;\n  }\n\n  /**\n   * Getter for rollupRules\n   * @return {RollupRules}\n   */\n  get rollupRules(): RollupRules {\n    return this._rollupRules;\n  }\n\n  /**\n   * Setter for rollupRules\n   * @param {RollupRules} rollupRules\n   */\n  set rollupRules(rollupRules: RollupRules) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rollupRules instanceof RollupRules)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".rollupRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._rollupRules = rollupRules;\n  }\n\n  /**\n   * Getter for adlNav\n   * @return {ADLNav | null}\n   */\n  get adlNav(): ADLNav | null {\n    return this._adlNav;\n  }\n\n  /**\n   * Setter for adlNav\n   * @param {ADLNav | null} adlNav\n   */\n  set adlNav(adlNav: ADLNav | null) {\n    this._adlNav = adlNav;\n  }\n\n  /**\n   * Process navigation request\n   * @param {string} request - The navigation request\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processNavigationRequest(request: string): boolean {\n    if (!this._adlNav) {\n      return false;\n    }\n\n    // Set the navigation request\n    this._adlNav.request = request;\n\n    // Get the current activity\n    const currentActivity = this._activityTree.currentActivity;\n    if (!currentActivity) {\n      return false;\n    }\n\n    // Evaluate pre-condition rules\n    const preConditionAction = this._sequencingRules.evaluatePreConditionRules(currentActivity);\n    if (preConditionAction) {\n      // Handle pre-condition action\n      switch (preConditionAction) {\n        case RuleActionType.SKIP:\n          // Skip this activity\n          return false;\n        case RuleActionType.DISABLED:\n          // Disable this activity\n          return false;\n        case RuleActionType.HIDE_FROM_CHOICE:\n          // Hide this activity from choice\n          return false;\n        case RuleActionType.STOP_FORWARD_TRAVERSAL:\n          // Stop forward traversal\n          return false;\n        default:\n          break;\n      }\n    }\n\n    // Process the navigation request based on the request type\n    switch (request) {\n      case \"continue\":\n        return this.processContinueRequest(currentActivity);\n      case \"previous\":\n        return this.processPreviousRequest(currentActivity);\n      case \"choice\":\n        // Choice navigation would require additional parameters\n        return false;\n      case \"exit\":\n        return this.processExitRequest(currentActivity);\n      case \"exitAll\":\n        return this.processExitAllRequest();\n      case \"abandon\":\n        return this.processAbandonRequest(currentActivity);\n      case \"abandonAll\":\n        return this.processAbandonAllRequest();\n      case \"suspendAll\":\n        return this.processSuspendAllRequest(currentActivity);\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Process continue request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processContinueRequest(currentActivity: Activity): boolean {\n    // Check if continue is allowed\n    if (!this._sequencingControls.isForwardNavigationAllowed()) {\n      return false;\n    }\n\n    // Get the next activity\n    const nextActivity = this._activityTree.getNextSibling(currentActivity);\n    if (!nextActivity) {\n      return false;\n    }\n\n    // Handle exit condition actions\n    if (this._handleExitConditionAction(currentActivity)) {\n      return true;\n    }\n\n    // Set the next activity as current\n    this._activityTree.currentActivity = nextActivity;\n\n    // Evaluate post-condition rules\n    const postConditionAction = this._sequencingRules.evaluatePostConditionRules(nextActivity);\n    if (postConditionAction) {\n      // Handle post-condition action\n      switch (postConditionAction) {\n        case RuleActionType.RETRY:\n          // Retry this activity\n          nextActivity.incrementAttemptCount();\n          return true;\n        case RuleActionType.RETRY_ALL:\n          // Retry all activities\n          this._activityTree.getAllActivities().forEach((activity) => {\n            activity.incrementAttemptCount();\n          });\n          return true;\n        case RuleActionType.CONTINUE:\n          // Continue to next activity\n          return this.processContinueRequest(nextActivity);\n        case RuleActionType.PREVIOUS:\n          // Go to previous activity\n          return this.processPreviousRequest(nextActivity);\n        case RuleActionType.EXIT:\n          // Exit this activity\n          this._activityTree.currentActivity = currentActivity;\n          return true;\n        default:\n          break;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Process previous request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processPreviousRequest(currentActivity: Activity): boolean {\n    // Check if backward navigation is allowed\n    if (!this._sequencingControls.isBackwardNavigationAllowed()) {\n      return false;\n    }\n\n    // Get the previous activity\n    const previousActivity = this._activityTree.getPreviousSibling(currentActivity);\n    if (!previousActivity) {\n      return false;\n    }\n\n    // Handle exit condition actions\n    if (this._handleExitConditionAction(currentActivity)) {\n      return true;\n    }\n\n    // Set the previous activity as current\n    this._activityTree.currentActivity = previousActivity;\n\n    // Evaluate post-condition rules\n    const postConditionAction = this._sequencingRules.evaluatePostConditionRules(previousActivity);\n    if (postConditionAction) {\n      // Handle post-condition action\n      switch (postConditionAction) {\n        case RuleActionType.RETRY:\n          // Retry this activity\n          previousActivity.incrementAttemptCount();\n          return true;\n        case RuleActionType.RETRY_ALL:\n          // Retry all activities\n          this._activityTree.getAllActivities().forEach((activity) => {\n            activity.incrementAttemptCount();\n          });\n          return true;\n        case RuleActionType.CONTINUE:\n          // Continue to next activity\n          return this.processContinueRequest(previousActivity);\n        case RuleActionType.PREVIOUS:\n          // Go to previous activity\n          return this.processPreviousRequest(previousActivity);\n        case RuleActionType.EXIT:\n          // Exit this activity\n          this._activityTree.currentActivity = currentActivity;\n          return true;\n        default:\n          break;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Process exit request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processExitRequest(currentActivity: Activity): boolean {\n    // Check if exit is allowed\n    if (!this._sequencingControls.choiceExit) {\n      return false;\n    }\n\n    // Get the parent activity\n    const parent = currentActivity.parent;\n    if (!parent) {\n      return false;\n    }\n\n    // Set the parent activity as current\n    this._activityTree.currentActivity = parent;\n\n    return true;\n  }\n\n  /**\n   * Process exit all request\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processExitAllRequest(): boolean {\n    // Check if exit is allowed\n    if (!this._sequencingControls.choiceExit) {\n      return false;\n    }\n\n    // Set no activity as current\n    this._activityTree.currentActivity = null;\n\n    return true;\n  }\n\n  /**\n   * Process abandon request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processAbandonRequest(currentActivity: Activity): boolean {\n    // Get the parent activity\n    const parent = currentActivity.parent;\n    if (!parent) {\n      return false;\n    }\n\n    // Set the parent activity as current without processing exit rules\n    this._activityTree.currentActivity = parent;\n\n    return true;\n  }\n\n  /**\n   * Process abandon all request\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processAbandonAllRequest(): boolean {\n    // Set no activity as current without processing exit rules\n    this._activityTree.currentActivity = null;\n\n    return true;\n  }\n\n  /**\n   * Process suspend all request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processSuspendAllRequest(currentActivity: Activity): boolean {\n    // Set the current activity as suspended\n    this._activityTree.suspendedActivity = currentActivity;\n    this._activityTree.currentActivity = null;\n\n    return true;\n  }\n\n  /**\n   * Process rollup for the entire activity tree\n   */\n  processRollup(): void {\n    // Get the root activity\n    const root = this._activityTree.root;\n    if (!root) {\n      return;\n    }\n\n    // Process rollup from the bottom up\n    this._processRollupRecursive(root);\n  }\n\n  /**\n   * Handle exit condition actions for an activity\n   * @param {Activity} activity - The activity to handle exit conditions for\n   * @return {boolean} - True if an exit action was handled, false otherwise\n   * @private\n   */\n  private _handleExitConditionAction(activity: Activity): boolean {\n    const exitConditionAction = this._sequencingRules.evaluateExitConditionRules(activity);\n    if (exitConditionAction) {\n      // Handle exit condition action\n      switch (exitConditionAction) {\n        case RuleActionType.EXIT_PARENT: {\n          // Exit to parent\n          const parent = activity.parent;\n          if (parent) {\n            this._activityTree.currentActivity = parent;\n            return true;\n          }\n          return false;\n        }\n        case RuleActionType.EXIT_ALL:\n          // Exit all\n          this._activityTree.currentActivity = null;\n          return true;\n        default:\n          break;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Process rollup recursively\n   * @param {Activity} activity - The activity to process rollup for\n   * @private\n   */\n  private _processRollupRecursive(activity: Activity): void {\n    // Process rollup for children first\n    for (const child of activity.children) {\n      this._processRollupRecursive(child);\n    }\n\n    // Process rollup for this activity\n    this._rollupRules.processRollup(activity);\n  }\n\n  /**\n   * toJSON for Sequencing\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      activityTree: this._activityTree,\n      sequencingRules: this._sequencingRules,\n      sequencingControls: this._sequencingControls,\n      rollupRules: this._rollupRules,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import BaseAPI from \"./BaseAPI\";\nimport { CMI } from \"./cmi/scorm2004/cmi\";\nimport * as Utilities from \"./utilities\";\nimport { StringKeyMap, stringMatches } from \"./utilities\";\nimport { global_constants, scorm2004_constants } from \"./constants/api_constants\";\nimport { scorm2004_errors } from \"./constants/error_codes\";\nimport { CMIObjectivesObject } from \"./cmi/scorm2004/objectives\";\nimport { ADL, ADLDataObject } from \"./cmi/scorm2004/adl\";\nimport { CommitObject, ResultObject, ScoreObject, Settings } from \"./types/api_types\";\nimport {\n  ActivitySettings,\n  RollupRuleSettings,\n  RollupRulesSettings,\n  SequencingControlsSettings,\n  SequencingRuleSettings,\n  SequencingRulesSettings,\n  SequencingSettings,\n} from \"./types/sequencing_types\";\nimport { RuleCondition, SequencingRule } from \"./cmi/scorm2004/sequencing/sequencing_rules\";\nimport { RollupCondition, RollupRule } from \"./cmi/scorm2004/sequencing/rollup_rules\";\nimport { scorm2004_regex } from \"./constants/regex\"; // Import functions from extracted modules\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport {\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n} from \"./cmi/scorm2004/interactions\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { CorrectResponses, ResponseType } from \"./constants/response_constants\";\nimport { CMICommentsObject } from \"./cmi/scorm2004/comments\";\nimport ValidLanguages from \"./constants/language_constants\";\nimport { CompletionStatus, SuccessStatus } from \"./constants/enums\";\nimport { Sequencing } from \"./cmi/scorm2004/sequencing/sequencing\";\nimport { Activity } from \"./cmi/scorm2004/sequencing/activity\";\n\n/**\n * API class for SCORM 2004\n */\nclass Scorm2004API extends BaseAPI {\n  private _version: string = \"1.0\";\n  private _globalObjectives: CMIObjectivesObject[] = [];\n  private readonly _sequencing: Sequencing;\n  private _extractedScoItemIds: string[] = [];\n\n  /**\n   * Constructor for SCORM 2004 API\n   * @param {Settings} settings\n   */\n  constructor(settings?: Settings) {\n    if (settings) {\n      if (settings.mastery_override === undefined) {\n        settings.mastery_override = false;\n      }\n    }\n\n    super(scorm2004_errors, settings);\n\n    this.cmi = new CMI();\n    this.adl = new ADL();\n    this._sequencing = new Sequencing();\n\n    // Connect the sequencing object to the ADL's sequencing property\n    // The Sequencing object is used for both configuration and runtime navigation processing\n    // It needs to be attached to the ADL object for runtime navigation requests (adl.nav.request)\n    this.adl.sequencing = this._sequencing;\n\n    // Configure sequencing if settings are provided\n    if (settings?.sequencing) {\n      this.configureSequencing(settings.sequencing);\n    }\n\n    // Rename functions to match 2004 Spec and expose to modules\n    this.Initialize = this.lmsInitialize;\n    this.Terminate = this.lmsFinish;\n    this.GetValue = this.lmsGetValue;\n    this.SetValue = this.lmsSetValue;\n    this.Commit = this.lmsCommit;\n    this.GetLastError = this.lmsGetLastError;\n    this.GetErrorString = this.lmsGetErrorString;\n    this.GetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  public cmi: CMI;\n  public adl: ADL;\n\n  public Initialize: () => string;\n  public Terminate: () => string;\n  public GetValue: (CMIElement: string) => string;\n  public SetValue: (CMIElement: string, value: any) => string;\n  public Commit: () => string;\n  public GetLastError: () => string;\n  public GetErrorString: (CMIErrorCode: string | number) => string;\n  public GetDiagnostic: (CMIErrorCode: string | number) => string;\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset(settings?: Settings) {\n    this.commonReset(settings);\n\n    this.cmi?.reset();\n    this.adl?.reset();\n    this._sequencing?.reset();\n  }\n\n  /**\n   * Getter for _version\n   * @return {string}\n   */\n  get version(): string {\n    return this._version;\n  }\n\n  /**\n   * Getter for _globalObjectives\n   */\n  get globalObjectives(): CMIObjectivesObject[] {\n    return this._globalObjectives;\n  }\n\n  /**\n   * Initialize function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize(): string {\n    this.cmi.initialize();\n    return this.initialize(\n      \"Initialize\",\n      \"LMS was already initialized!\",\n      \"LMS is already finished!\",\n    );\n  }\n\n  /**\n   * Terminate function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish(): string {\n    (async () => {\n      await this.internalFinish();\n    })();\n    return global_constants.SCORM_TRUE;\n  }\n\n  async internalFinish(): Promise<string> {\n    const result = await this.terminate(\"Terminate\", true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      if (this.adl.nav.request !== \"_none_\") {\n        const navActions: { [key: string]: string } = {\n          continue: \"SequenceNext\",\n          previous: \"SequencePrevious\",\n          choice: \"SequenceChoice\",\n          jump: \"SequenceJump\",\n          exit: \"SequenceExit\",\n          exitAll: \"SequenceExitAll\",\n          abandon: \"SequenceAbandon\",\n          abandonAll: \"SequenceAbandonAll\",\n        };\n\n        let request = this.adl.nav.request;\n        const choiceJumpRegex = new RegExp(scorm2004_regex.NAVEvent);\n        const matches = request.match(choiceJumpRegex);\n        let target = \"\";\n        if (matches) {\n          if (matches.groups?.choice_target) {\n            target = matches.groups?.choice_target;\n            request = \"choice\";\n          } else if (matches.groups?.jump_target) {\n            target = matches.groups?.jump_target;\n            request = \"jump\";\n          }\n        }\n        const action = navActions[request];\n        if (action) {\n          this.processListeners(action, \"adl.nav.request\", target);\n        }\n      } else if (this.settings.autoProgress) {\n        this.processListeners(\"SequenceNext\", undefined, \"next\");\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * GetValue function from SCORM 2004 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement: string): string {\n    const adlNavRequestRegex =\n      \"^adl\\\\.nav\\\\.request_valid\\\\.(choice|jump)\\\\.{target=\\\\S{0,}([a-zA-Z0-9-_]+)}$\";\n    if (stringMatches(CMIElement, adlNavRequestRegex)) {\n      const matches = CMIElement.match(adlNavRequestRegex);\n      if (matches) {\n        const request = matches[1];\n        const target = matches[2].replace(/{target=/g, \"\").replace(/}/g, \"\");\n        if (request === \"choice\" || request === \"jump\") {\n          if (this.settings.scoItemIdValidator) {\n            return String(this.settings.scoItemIdValidator(target));\n          }\n          // If we have extracted IDs from sequencing, use those exclusively\n          if (this._extractedScoItemIds.length > 0) {\n            return String(this._extractedScoItemIds.includes(target));\n          }\n          // Otherwise use the scoItemIds from settings\n          return String(this.settings?.scoItemIds?.includes(target));\n        }\n      }\n    }\n    return this.getValue(\"GetValue\", true, CMIElement);\n  }\n\n  /**\n   * SetValue function from SCORM 2004 Spec\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement: string, value: any): string {\n    // Proceed with regular setting for non-objective elements or fallback behavior\n    return this.setValue(\"SetValue\", \"Commit\", true, CMIElement, value);\n  }\n\n  /**\n   * Commit function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit(): string {\n    if (this.settings.asyncCommit) {\n      this.scheduleCommit(500, \"Commit\");\n    } else {\n      (async () => {\n        await this.commit(\"Commit\", false);\n      })();\n    }\n    return global_constants.SCORM_TRUE;\n  }\n\n  /**\n   * GetLastError function from SCORM 2004 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError(): string {\n    return this.getLastError(\"GetLastError\");\n  }\n\n  /**\n   * GetErrorString function from SCORM 2004 Spec\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode: string | number): string {\n    return this.getErrorString(\"GetErrorString\", CMIErrorCode);\n  }\n\n  /**\n   * GetDiagnostic function from SCORM 2004 Spec\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode: string | number): string {\n    return this.getDiagnostic(\"GetDiagnostic\", CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object - delegates to CMIValueHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  override setCMIValue(CMIElement: string, value: any): string {\n    // Check if we're updating a global or local objective\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      const parts = CMIElement.split(\".\");\n      const index = Number(parts[2]);\n      const element_base = `cmi.objectives.${index}`;\n\n      let objective_id;\n      const setting_id = stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\\\\.id\");\n\n      if (setting_id) {\n        // If we're setting the objective ID, capture it directly\n        objective_id = value;\n      } else {\n        // Find existing objective ID if available\n        const objective = this.cmi.objectives.findObjectiveByIndex(index);\n        objective_id = objective ? objective.id : undefined;\n      }\n\n      // Check if the objective ID matches a global objective\n      const is_global = objective_id && this.settings.globalObjectiveIds?.includes(objective_id);\n\n      if (is_global) {\n        // Locate or create an entry in _globalObjectives for the global objective\n        let global_index = this._globalObjectives.findIndex((obj) => obj.id === objective_id);\n\n        if (global_index === -1) {\n          global_index = this._globalObjectives.length;\n          const newGlobalObjective = new CMIObjectivesObject();\n          newGlobalObjective.id = objective_id;\n          this._globalObjectives.push(newGlobalObjective);\n        }\n\n        // Update the global objective\n        const global_element = CMIElement.replace(\n          element_base,\n          `_globalObjectives.${global_index}`,\n        );\n        this._commonSetCMIValue(\"SetGlobalObjectiveValue\", true, global_element, value);\n      }\n    }\n    return this._commonSetCMIValue(\"SetValue\", true, CMIElement, value);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array - delegates to CMIElementHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI|null}\n   */\n  getChildElement(CMIElement: string, value: any, foundFirstIndex: boolean): BaseCMI | null {\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      return new CMIObjectivesObject();\n    }\n\n    if (foundFirstIndex) {\n      if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+\")) {\n        return this.createCorrectResponsesObject(CMIElement, value);\n      } else if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+\")) {\n        return new CMIInteractionsObjectivesObject();\n      }\n    } else if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\")) {\n      return new CMIInteractionsObject();\n    }\n\n    if (stringMatches(CMIElement, \"cmi\\\\.comments_from_learner\\\\.\\\\d+\")) {\n      return new CMICommentsObject();\n    } else if (stringMatches(CMIElement, \"cmi\\\\.comments_from_lms\\\\.\\\\d+\")) {\n      return new CMICommentsObject(true);\n    }\n\n    if (stringMatches(CMIElement, \"adl\\\\.data\\\\.\\\\d+\")) {\n      return new ADLDataObject();\n    }\n\n    return null;\n  }\n\n  /**\n   * Creates a correct responses object for an interaction - delegates to CMIElementHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {BaseCMI|null}\n   */\n  private createCorrectResponsesObject(CMIElement: string, value: any): BaseCMI | null {\n    const parts = CMIElement.split(\".\");\n    const index = Number(parts[2]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    if (this.isInitialized()) {\n      if (typeof interaction === \"undefined\" || !interaction.type) {\n        this.throwSCORMError(CMIElement, scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED, CMIElement);\n        return null;\n      } else {\n        this.checkDuplicateChoiceResponse(CMIElement, interaction, value);\n        const response_type = CorrectResponses[interaction.type];\n        if (response_type) {\n          this.checkValidResponseType(CMIElement, response_type, value, interaction.type);\n        } else {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.GENERAL_SET_FAILURE,\n            `Incorrect Response Type: ${interaction.type}`,\n          );\n          return null;\n        }\n      }\n    }\n\n    if (this.lastErrorCode === \"0\") {\n      return new CMIInteractionsCorrectResponsesObject(interaction);\n    }\n\n    return null;\n  }\n\n  /**\n   * Checks for valid response types - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {ResponseType} response_type\n   * @param {any} value\n   * @param {string} interaction_type\n   */\n  checkValidResponseType(\n    CMIElement: string,\n    response_type: ResponseType,\n    value: any,\n    interaction_type: string,\n  ) {\n    let nodes = [];\n    if (response_type?.delimiter) {\n      nodes = String(value).split(response_type.delimiter);\n    } else {\n      nodes[0] = value;\n    }\n\n    if (nodes.length > 0 && nodes.length <= response_type.max) {\n      this.checkCorrectResponseValue(CMIElement, interaction_type, nodes, value);\n    } else if (nodes.length > response_type.max) {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.GENERAL_SET_FAILURE,\n        `Data Model Element Pattern Too Long: ${value}`,\n      );\n    }\n  }\n\n  /**\n   * Checks for duplicate 'choice' responses - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {CMIInteractionsObject} interaction\n   * @param {any} value\n   */\n  checkDuplicateChoiceResponse(CMIElement: string, interaction: CMIInteractionsObject, value: any) {\n    const interaction_count = interaction.correct_responses._count;\n    if (interaction.type === \"choice\") {\n      for (let i = 0; i < interaction_count && this.lastErrorCode === \"0\"; i++) {\n        const response = interaction.correct_responses.childArray[i];\n        if (response.pattern === value) {\n          this.throwSCORMError(CMIElement, scorm2004_errors.GENERAL_SET_FAILURE, `${value}`);\n        }\n      }\n    }\n  }\n\n  /**\n   * Validate correct response - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {*} value\n   */\n  validateCorrectResponse(CMIElement: string, value: any) {\n    const parts = CMIElement.split(\".\");\n    const index = Number(parts[2]);\n    const pattern_index = Number(parts[4]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    const interaction_count = interaction.correct_responses._count;\n    this.checkDuplicateChoiceResponse(CMIElement, interaction, value);\n\n    const response_type = CorrectResponses[interaction.type];\n    if (typeof response_type.limit === \"undefined\" || interaction_count <= response_type.limit) {\n      this.checkValidResponseType(CMIElement, response_type, value, interaction.type);\n\n      if (\n        (this.lastErrorCode === \"0\" &&\n          (!response_type.duplicate ||\n            !this.checkDuplicatedPattern(interaction.correct_responses, pattern_index, value))) ||\n        (this.lastErrorCode === \"0\" && value === \"\")\n      ) {\n        // do nothing, we want the inverse\n      } else {\n        if (this.lastErrorCode === \"0\") {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.GENERAL_SET_FAILURE,\n            `Data Model Element Pattern Already Exists: ${CMIElement} - ${value}`,\n          );\n        }\n      }\n    } else {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.GENERAL_SET_FAILURE,\n        `Data Model Element Collection Limit Reached: ${CMIElement} - ${value}`,\n      );\n    }\n  }\n\n  /**\n   * Gets a value from the CMI Object - delegates to CMIValueHandlerModule\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  override getCMIValue(CMIElement: string): any {\n    return this._commonGetCMIValue(\"GetValue\", true, CMIElement);\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {(string|number)} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  override getLmsErrorMessageDetails(errorNumber: string | number, detail: boolean): string {\n    let basicMessage = \"\";\n    let detailMessage = \"\";\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (scorm2004_constants.error_descriptions[errorNumber]) {\n      basicMessage = scorm2004_constants.error_descriptions[errorNumber].basicMessage;\n      detailMessage = scorm2004_constants.error_descriptions[errorNumber].detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Check to see if a correct_response value has been duplicated - delegates to ValidationModule\n   * @param {CMIArray} correct_response\n   * @param {number} current_index\n   * @param {*} value\n   * @return {boolean}\n   */\n  checkDuplicatedPattern(correct_response: CMIArray, current_index: number, value: any): boolean {\n    let found = false;\n    const count = correct_response._count;\n    for (let i = 0; i < count && !found; i++) {\n      if (i !== current_index && correct_response.childArray[i] === value) {\n        found = true;\n      }\n    }\n    return found;\n  }\n\n  /**\n   * Checks for a valid correct_response value - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {string} interaction_type\n   * @param {Array} nodes\n   * @param {*} value\n   */\n  checkCorrectResponseValue(\n    CMIElement: string,\n    interaction_type: string,\n    nodes: Array<any>,\n    value: any,\n  ) {\n    const response = CorrectResponses[interaction_type];\n    if (!response) {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.TYPE_MISMATCH,\n        `Incorrect Response Type: ${interaction_type}`,\n      );\n      return;\n    }\n    const formatRegex = new RegExp(response.format);\n    for (let i = 0; i < nodes.length && this.lastErrorCode === \"0\"; i++) {\n      if (interaction_type.match(\"^(fill-in|long-fill-in|matching|performance|sequencing)$\")) {\n        nodes[i] = this.removeCorrectResponsePrefixes(CMIElement, nodes[i]);\n      }\n\n      if (response?.delimiter2) {\n        const values = nodes[i].split(response.delimiter2);\n        if (values.length === 2) {\n          const matches = values[0].match(formatRegex);\n          if (!matches) {\n            this.throwSCORMError(\n              CMIElement,\n              scorm2004_errors.TYPE_MISMATCH,\n              `${interaction_type}: ${value}`,\n            );\n          } else {\n            if (!response.format2 || !values[1].match(new RegExp(response.format2))) {\n              this.throwSCORMError(\n                CMIElement,\n                scorm2004_errors.TYPE_MISMATCH,\n                `${interaction_type}: ${value}`,\n              );\n            }\n          }\n        } else {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.TYPE_MISMATCH,\n            `${interaction_type}: ${value}`,\n          );\n        }\n      } else {\n        const matches = nodes[i].match(formatRegex);\n        if ((!matches && value !== \"\") || (!matches && interaction_type === \"true-false\")) {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.TYPE_MISMATCH,\n            `${interaction_type}: ${value}`,\n          );\n        } else {\n          if (interaction_type === \"numeric\" && nodes.length > 1) {\n            if (Number(nodes[0]) > Number(nodes[1])) {\n              this.throwSCORMError(\n                CMIElement,\n                scorm2004_errors.TYPE_MISMATCH,\n                `${interaction_type}: ${value}`,\n              );\n            }\n          } else {\n            if (nodes[i] !== \"\" && response.unique) {\n              for (let j = 0; j < i && this.lastErrorCode === \"0\"; j++) {\n                if (nodes[i] === nodes[j]) {\n                  this.throwSCORMError(\n                    CMIElement,\n                    scorm2004_errors.TYPE_MISMATCH,\n                    `${interaction_type}: ${value}`,\n                  );\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove prefixes from correct_response - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {string} node\n   * @return {*}\n   */\n  removeCorrectResponsePrefixes(CMIElement: string, node: string): any {\n    let seenOrder = false;\n    let seenCase = false;\n    let seenLang = false;\n\n    const prefixRegex = new RegExp(\"^({(lang|case_matters|order_matters)=([^}]+)})\");\n    let matches = node.match(prefixRegex);\n    let langMatches = null;\n    while (matches) {\n      switch (matches[2]) {\n        case \"lang\":\n          langMatches = node.match(scorm2004_regex.CMILangcr);\n          if (langMatches) {\n            const lang = langMatches[3];\n            if (lang !== undefined && lang.length > 0) {\n              if (!ValidLanguages.includes(lang.toLowerCase())) {\n                this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n              }\n            }\n          }\n          seenLang = true;\n          break;\n        case \"case_matters\":\n          if (!seenLang && !seenOrder && !seenCase) {\n            if (matches[3] !== \"true\" && matches[3] !== \"false\") {\n              this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n            }\n          }\n\n          seenCase = true;\n          break;\n        case \"order_matters\":\n          if (!seenCase && !seenLang && !seenOrder) {\n            if (matches[3] !== \"true\" && matches[3] !== \"false\") {\n              this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n            }\n          }\n\n          seenOrder = true;\n          break;\n      }\n      node = node.substring(matches[1].length);\n      matches = node.match(prefixRegex);\n    }\n\n    return node;\n  }\n\n  /**\n   * Replace the whole API with another\n   * @param {Scorm2004API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI: Scorm2004API) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.adl = newAPI.adl;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit - delegates to DataSerializationModule\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} includeTotalTime - Whether to include total time in the commit data\n   * @return {object|Array}\n   */\n  renderCommitCMI(\n    terminateCommit: boolean,\n    includeTotalTime: boolean = false,\n  ): StringKeyMap | Array<any> {\n    const cmiExport: StringKeyMap = this.renderCMIToJSONObject();\n\n    if (includeTotalTime) {\n      (cmiExport.cmi as any).total_time = (this.cmi as any).getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened: StringKeyMap = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case \"flattened\":\n        return Utilities.flatten(cmiExport);\n      case \"params\":\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case \"json\":\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit - delegates to DataSerializationModule\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} includeTotalTime - Whether to include total time in the commit data\n   * @return {CommitObject}\n   */\n  renderCommitObject(terminateCommit: boolean, includeTotalTime: boolean = false): CommitObject {\n    const cmiExport = this.renderCommitCMI(terminateCommit, includeTotalTime);\n    const totalTimeDuration = includeTotalTime ? this.cmi.getCurrentTotalTime() : \"\";\n    const totalTimeSeconds = Utilities.getDurationAsSeconds(\n      totalTimeDuration,\n      scorm2004_regex.CMITimespan,\n    );\n\n    let completionStatus = CompletionStatus.UNKNOWN;\n    let successStatus = SuccessStatus.UNKNOWN;\n    if (this.cmi.completion_status) {\n      if (this.cmi.completion_status === \"completed\") {\n        completionStatus = CompletionStatus.COMPLETED;\n      } else if (this.cmi.completion_status === \"incomplete\") {\n        completionStatus = CompletionStatus.INCOMPLETE;\n      }\n    }\n    if (this.cmi.success_status) {\n      if (this.cmi.success_status === \"passed\") {\n        successStatus = SuccessStatus.PASSED;\n      } else if (this.cmi.success_status === \"failed\") {\n        successStatus = SuccessStatus.FAILED;\n      }\n    }\n\n    const scoreObject: ScoreObject = this.cmi?.score?.getScoreObject() || {};\n    const commitObject: CommitObject = {\n      completionStatus: completionStatus,\n      successStatus: successStatus,\n      totalTimeSeconds: totalTimeSeconds,\n      runtimeData: cmiExport as StringKeyMap,\n    };\n    if (scoreObject) {\n      commitObject.score = scoreObject;\n    }\n    return commitObject;\n  }\n\n  /**\n   * Attempts to store the data to the LMS - delegates to DataSerializationModule\n   *\n   * @param {boolean} terminateCommit\n   * @return {ResultObject}\n   */\n  async storeData(terminateCommit: boolean): Promise<ResultObject> {\n    if (terminateCommit) {\n      if (this.cmi.mode === \"normal\") {\n        if (this.cmi.credit === \"credit\") {\n          if (this.cmi.completion_threshold && this.cmi.progress_measure) {\n            if (this.cmi.progress_measure >= this.cmi.completion_threshold) {\n              this.cmi.completion_status = \"completed\";\n            } else {\n              this.cmi.completion_status = \"incomplete\";\n            }\n          }\n          if (this.cmi.scaled_passing_score && this.cmi.score.scaled) {\n            if (this.cmi.score.scaled >= this.cmi.scaled_passing_score) {\n              this.cmi.success_status = \"passed\";\n            } else {\n              this.cmi.success_status = \"failed\";\n            }\n          }\n        }\n      }\n    }\n\n    let navRequest = false;\n    if (\n      this.adl.nav.request !==\n        ((this.startingData?.adl as StringKeyMap)?.nav as StringKeyMap)?.request &&\n      this.adl.nav.request !== \"_none_\"\n    ) {\n      navRequest = true;\n    }\n\n    const commitObject = this.getCommitObject(terminateCommit);\n    if (typeof this.settings.lmsCommitUrl === \"string\") {\n      const result = await this.processHttpRequest(\n        this.settings.lmsCommitUrl,\n        {\n          commitObject: commitObject,\n        },\n        terminateCommit,\n      );\n\n      // Check if this is a sequencing call, and then call the necessary JS\n      if (\n        navRequest &&\n        result.navRequest !== undefined &&\n        result.navRequest !== \"\" &&\n        typeof result.navRequest === \"string\"\n      ) {\n        Function(`\"use strict\";(() => { ${result.navRequest} })()`)();\n      } else if (result?.navRequest && !navRequest) {\n        if (\n          typeof result.navRequest === \"object\" &&\n          Object.hasOwnProperty.call(result.navRequest, \"name\")\n        ) {\n          this.processListeners(result.navRequest.name as string, result.navRequest.data as string);\n        }\n      }\n\n      return result;\n    }\n\n    return {\n      result: \"true\",\n      errorCode: 0,\n    };\n  }\n\n  /**\n   * Configure sequencing based on provided settings\n   * @param {SequencingSettings} sequencingSettings - The sequencing settings\n   */\n  private configureSequencing(sequencingSettings: SequencingSettings): void {\n    // Configure activity tree\n    if (sequencingSettings.activityTree) {\n      this.configureActivityTree(sequencingSettings.activityTree);\n    }\n\n    // Configure sequencing rules\n    if (sequencingSettings.sequencingRules) {\n      this.configureSequencingRules(sequencingSettings.sequencingRules);\n    }\n\n    // Configure sequencing controls\n    if (sequencingSettings.sequencingControls) {\n      this.configureSequencingControls(sequencingSettings.sequencingControls);\n    }\n\n    // Configure rollup rules\n    if (sequencingSettings.rollupRules) {\n      this.configureRollupRules(sequencingSettings.rollupRules);\n    }\n  }\n\n  /**\n   * Configure activity tree based on provided settings\n   * @param {ActivitySettings} activityTreeSettings - The activity tree settings\n   */\n  private configureActivityTree(activityTreeSettings: ActivitySettings): void {\n    // Create root activity\n    const rootActivity = this.createActivity(activityTreeSettings);\n\n    // Create activity tree\n    const activityTree = this._sequencing.activityTree;\n    activityTree.root = rootActivity;\n\n    // Extract activity IDs for use as scoItemIds\n    this._extractedScoItemIds = this.extractActivityIds(rootActivity);\n  }\n\n  /**\n   * Extract all activity IDs from an activity and its children\n   * @param {Activity} activity - The activity to extract IDs from\n   * @return {string[]} - Array of activity IDs\n   */\n  private extractActivityIds(activity: Activity): string[] {\n    const ids = [activity.id];\n\n    // Recursively extract IDs from children\n    for (const child of activity.children) {\n      ids.push(...this.extractActivityIds(child));\n    }\n\n    return ids;\n  }\n\n  /**\n   * Create an activity from settings\n   * @param {ActivitySettings} activitySettings - The activity settings\n   * @return {Activity} - The created activity\n   */\n  private createActivity(activitySettings: ActivitySettings): Activity {\n    // Create activity\n    const activity = new Activity(activitySettings.id, activitySettings.title);\n\n    // Set activity properties\n    if (activitySettings.isVisible !== undefined) {\n      activity.isVisible = activitySettings.isVisible;\n    }\n    if (activitySettings.isActive !== undefined) {\n      activity.isActive = activitySettings.isActive;\n    }\n    if (activitySettings.isSuspended !== undefined) {\n      activity.isSuspended = activitySettings.isSuspended;\n    }\n    if (activitySettings.isCompleted !== undefined) {\n      activity.isCompleted = activitySettings.isCompleted;\n    }\n\n    // Create child activities\n    if (activitySettings.children) {\n      for (const childSettings of activitySettings.children) {\n        const childActivity = this.createActivity(childSettings);\n        activity.addChild(childActivity);\n      }\n    }\n\n    return activity;\n  }\n\n  /**\n   * Configure sequencing rules based on provided settings\n   * @param {SequencingRulesSettings} sequencingRulesSettings - The sequencing rules settings\n   */\n  private configureSequencingRules(sequencingRulesSettings: SequencingRulesSettings): void {\n    const sequencingRules = this._sequencing.sequencingRules;\n\n    // Configure pre-condition rules\n    if (sequencingRulesSettings.preConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.preConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addPreConditionRule(rule);\n      }\n    }\n\n    // Configure exit condition rules\n    if (sequencingRulesSettings.exitConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.exitConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addExitConditionRule(rule);\n      }\n    }\n\n    // Configure post-condition rules\n    if (sequencingRulesSettings.postConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.postConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addPostConditionRule(rule);\n      }\n    }\n  }\n\n  /**\n   * Create a sequencing rule from settings\n   * @param {SequencingRuleSettings} ruleSettings - The sequencing rule settings\n   * @return {SequencingRule} - The created sequencing rule\n   */\n  private createSequencingRule(ruleSettings: SequencingRuleSettings): SequencingRule {\n    // Create rule\n    const rule = new SequencingRule(ruleSettings.action, ruleSettings.conditionCombination);\n\n    // Add conditions\n    for (const conditionSettings of ruleSettings.conditions) {\n      const condition = new RuleCondition(\n        conditionSettings.condition,\n        conditionSettings.operator,\n        new Map(Object.entries(conditionSettings.parameters || {})),\n      );\n      rule.addCondition(condition);\n    }\n\n    return rule;\n  }\n\n  /**\n   * Configure sequencing controls based on provided settings\n   * @param {SequencingControlsSettings} sequencingControlsSettings - The sequencing controls settings\n   */\n  private configureSequencingControls(\n    sequencingControlsSettings: SequencingControlsSettings,\n  ): void {\n    const sequencingControls = this._sequencing.sequencingControls;\n\n    // Set sequencing control properties\n    if (sequencingControlsSettings.enabled !== undefined) {\n      sequencingControls.enabled = sequencingControlsSettings.enabled;\n    }\n    if (sequencingControlsSettings.choiceExit !== undefined) {\n      sequencingControls.choiceExit = sequencingControlsSettings.choiceExit;\n    }\n    if (sequencingControlsSettings.flow !== undefined) {\n      sequencingControls.flow = sequencingControlsSettings.flow;\n    }\n    if (sequencingControlsSettings.forwardOnly !== undefined) {\n      sequencingControls.forwardOnly = sequencingControlsSettings.forwardOnly;\n    }\n    if (sequencingControlsSettings.useCurrentAttemptObjectiveInfo !== undefined) {\n      sequencingControls.useCurrentAttemptObjectiveInfo =\n        sequencingControlsSettings.useCurrentAttemptObjectiveInfo;\n    }\n    if (sequencingControlsSettings.useCurrentAttemptProgressInfo !== undefined) {\n      sequencingControls.useCurrentAttemptProgressInfo =\n        sequencingControlsSettings.useCurrentAttemptProgressInfo;\n    }\n    if (sequencingControlsSettings.preventActivation !== undefined) {\n      sequencingControls.preventActivation = sequencingControlsSettings.preventActivation;\n    }\n    if (sequencingControlsSettings.constrainChoice !== undefined) {\n      sequencingControls.constrainChoice = sequencingControlsSettings.constrainChoice;\n    }\n    if (sequencingControlsSettings.rollupObjectiveSatisfied !== undefined) {\n      sequencingControls.rollupObjectiveSatisfied =\n        sequencingControlsSettings.rollupObjectiveSatisfied;\n    }\n    if (sequencingControlsSettings.rollupProgressCompletion !== undefined) {\n      sequencingControls.rollupProgressCompletion =\n        sequencingControlsSettings.rollupProgressCompletion;\n    }\n    if (sequencingControlsSettings.objectiveMeasureWeight !== undefined) {\n      sequencingControls.objectiveMeasureWeight = sequencingControlsSettings.objectiveMeasureWeight;\n    }\n  }\n\n  /**\n   * Configure rollup rules based on provided settings\n   * @param {RollupRulesSettings} rollupRulesSettings - The rollup rules settings\n   */\n  private configureRollupRules(rollupRulesSettings: RollupRulesSettings): void {\n    const rollupRules = this._sequencing.rollupRules;\n\n    // Configure rollup rules\n    if (rollupRulesSettings.rules) {\n      for (const ruleSettings of rollupRulesSettings.rules) {\n        const rule = this.createRollupRule(ruleSettings);\n        rollupRules.addRule(rule);\n      }\n    }\n  }\n\n  /**\n   * Create a rollup rule from settings\n   * @param {RollupRuleSettings} ruleSettings - The rollup rule settings\n   * @return {RollupRule} - The created rollup rule\n   */\n  private createRollupRule(ruleSettings: RollupRuleSettings): RollupRule {\n    // Create rule\n    const rule = new RollupRule(\n      ruleSettings.action,\n      ruleSettings.consideration,\n      ruleSettings.minimumCount,\n      ruleSettings.minimumPercent,\n    );\n\n    // Add conditions\n    for (const conditionSettings of ruleSettings.conditions) {\n      const condition = new RollupCondition(\n        conditionSettings.condition,\n        new Map(Object.entries(conditionSettings.parameters || {})),\n      );\n      rule.addCondition(condition);\n    }\n\n    return rule;\n  }\n}\n\nexport default Scorm2004API;\n"],"names":["scorm2004_constants","cmi_children","comments_children","score_children","objectives_children","correct_responses_children","student_preference_children","interactions_children","adl_data_children","error_descriptions","basicMessage","detailMessage","designations","D","H","M","S","getSecondsAsISODuration","memoize","seconds","duration","remainder","Object","entries","forEach","designationsKey","current_seconds","value","Math","floor","num","String","indexOf","parts","split","length","countDecimals","toFixed","includes","getDurationAsSeconds","durationRegex","RegExp","match","years","_","days","hours","minutes","exec","result","toString","flatten","data","recurse","cur","prop","Array","isArray","item","i","keys","filter","p","prototype","hasOwnProperty","call","isEmpty","stringMatches","str","tester","fn","keyFn","cache","Map","args","key","JSON","stringify","has","get","set","LogLevelEnum","DEBUG","INFO","WARN","ERROR","NONE","DefaultSettings","autocommit","autocommitSeconds","asyncCommit","sendFullCommit","lmsCommitUrl","dataCommitFormat","commitRequestDataType","autoProgress","logLevel","selfReportSessionTime","alwaysSendTotalTime","renderCommonCommitFields","strict_errors","xhrHeaders","xhrWithCredentials","fetchMode","useBeaconInsteadOfFetch","responseHandler","async","response","httpResult","json","text","responseText","parse","e","errorCode","status","requestHandler","commitObject","onLogMessage","defaultLogHandler","scoItemIds","scoItemIdValidator","globalObjectiveIds","enableOfflineSupport","courseId","syncOnInitialize","syncOnTerminate","maxSyncAttempts","messageLevel","logMessage","console","error","warn","info","debug","log","ScheduledCommit","constructor","API","when","callback","this","_cancelled","_API","_timeout","setTimeout","wrapper","bind","_callback","cancel","clearTimeout","commit","HttpService","settings","error_codes","processHttpRequest","url","params","immediate","apiLog","processListeners","genericError","GENERAL","_handleImmediateRequest","processedParams","performFetch","transformResponse","body","contentType","_prepareRequestBody","navigator","sendBeacon","Blob","type","then","join","performBeacon","init","method","mode","headers","keepalive","credentials","fetch","beaconSuccess","Promise","resolve","ok","_isSuccessResponse","updateSettings","EventService","listenerMap","listenerCount","parseListenerName","listenerName","listenerSplit","functionName","CMIElement","replace","on","listenerFunctions","listenerFunction","parsedListener","listeners","push","off","removeIndex","findIndex","obj","splice","delete","clear","newListeners","listener","listenerHasCMIElement","CMIElementsMatch","endsWith","prefix","slice","startsWith","reset","SerializationService","loadFromFlattenedJSON","setCMIValue","isNotInitialized","setStartingData","int_pattern","obj_pattern","interactions","objectives","others","intMatch","index","field","objMatch","sort","a","b","localeCompare","processItems","items","loadFromJSON","pattern","regex","from","m","unflatten","currentCMIElement","tempCMIElement","renderCMIToJSONString","cmi","k","v","renderCMIToJSONObject","getCommitObject","terminateCommit","renderCommitObject","renderCommitCMI","apiLogLevel","includeTotalTime","BaseScormValidationError","Error","super","_errorCode","setPrototypeOf","ValidationError","errorMessage","detailedMessage","_detailedMessage","message","_errorMessage","LoggingService","_logLevel","_logHandler","getInstance","_instance","setLogLevel","level","getLogLevel","setLogHandler","handler","shouldLog","getNumericLevel","getLoggingService","ErrorHandlingService","errorCodes","getLmsErrorMessageDetails","loggingService","_lastErrorCode","_errorCodes","_apiLog","_getLmsErrorMessageDetails","_loggingService","lastErrorCode","throwSCORMError","errorNumber","formattedMessage","clearSCORMError","success","handleValueAccessException","returnValue","validationError","errorType","name","stack","errorDetails","jsonError","OfflineStorageService","storeName","syncQueue","isOnline","onLine","syncInProgress","window","addEventListener","handleOnlineStatusChange","wasOnline","syncOfflineData","storeOffline","commitData","queueItem","id","Date","now","random","substring","timestamp","syncAttempts","currentQueue","getFromStorage","saveToStorage","getOfflineData","remainingQueue","sendDataToLMS","processedData","isDeviceOnline","storedData","localStorage","getItem","setItem","hasPendingOfflineData","some","BaseCMI","cmi_element","jsonString","_initialized","_cmi_element","initialized","start_time","_start_time","initialize","setStartTime","getTime","BaseRootCMI","global_errors","INITIALIZATION_FAILED","INITIALIZED","TERMINATED","TERMINATION_FAILURE","TERMINATION_BEFORE_INIT","MULTIPLE_TERMINATION","RETRIEVE_BEFORE_INIT","RETRIEVE_AFTER_TERM","STORE_BEFORE_INIT","STORE_AFTER_TERM","COMMIT_BEFORE_INIT","COMMIT_AFTER_TERM","ARGUMENT_ERROR","CHILDREN_ERROR","COUNT_ERROR","GENERAL_GET_FAILURE","GENERAL_SET_FAILURE","GENERAL_COMMIT_FAILURE","UNDEFINED_DATA_MODEL","UNIMPLEMENTED_ELEMENT","VALUE_NOT_INITIALIZED","INVALID_SET_VALUE","READ_ONLY_ELEMENT","WRITE_ONLY_ELEMENT","TYPE_MISMATCH","VALUE_OUT_OF_RANGE","DEPENDENCY_NOT_ESTABLISHED","scorm12_errors","scorm2004_errors","MULTIPLE_TERMINATIONS","CMIArray","__children","children","_errorClass","errorClass","childArray","wipe","_children","_count","toJSON","BaseAPI","httpService","eventService","serializationService","cmiDataService","errorHandlingService","offlineStorageService","_settings","_courseId","TypeError","currentState","_error_codes","_httpService","_eventService","element","_serializationService","_errorHandlingService","detail","createErrorHandlingService","_offlineStorageService","offlineData","runtimeData","catch","commonReset","clearScheduledCommit","startingData","callbackName","initializeMessage","terminationMessage","isInitialized","isTerminated","hasPendingData","syncSuccess","messageString","padEnd","formatMessage","previousSettings","terminate","checkTerminated","checkState","storeData","getValue","getCMIValue","setValue","commitCallback","scheduleCommit","getLastError","getErrorString","CMIErrorCode","getDiagnostic","beforeInitError","afterTermError","_errorNumber","_detail","_CMIElement","_value","_commonSetCMIValue","methodName","scorm2004","structure","refObject","foundFirstIndex","invalidErrorMessage","invalidErrorCode","idx","attribute","_checkObjectHasProperty","validateCorrectResponse","parseInt","isNaN","newChild","getChildElement","_commonGetCMIValue","uninitializedErrorMessage","_isTargetValid","getFlattenedCMI","Utilities.flatten","StringKeyMap","getOwnPropertyDescriptor","getPrototypeOf","Scorm2004ValidationError","checkValidFormat","regexPattern","allowEmptyString","formatRegex","matches","checkValidRange","rangePattern","ranges","check2004ValidFormat","check2004ValidRange","scorm2004_regex","CMILearnerPreference","_audio_level","_language","_delivery_speed","_audio_captioning","audio_level","language","delivery_speed","audio_captioning","LearnerResponses","format","max","delimiter","unique","choice","matching","format2","delimiter2","performance","sequencing","likert","numeric","other","CorrectResponses","duplicate","limit","delimiter3","CMIInteractions","CMIInteractionsObject","_id","_type","_timestamp","_weighting","_learner_response","_result","_latency","_description","correct_responses","weighting","learner_response","nodes","response_type","values","j","latency","description","CMIInteractionsObjectivesObject","stripBrackets","delim","escapeRegex","s","splitUnescaped","reDelim","splitRe","unescapeRe","map","part","CMIInteractionsCorrectResponsesObject","interactionType","_pattern","_interactionType","responseDef","test","trim","subDelim1","rawNodes","raw","delim1","Set","size","fmt1","fmt2","checkSingle","checkPair","delimBracketed","n","node","numDelim","nums","allParts","part1","part2","validatePattern","Scorm12ValidationError","check12ValidFormat","check12ValidRange","validationService","validateScore","decimalRegex","scoreRange","invalidTypeCode","invalidRangeCode","validateScorm12Audio","validateScorm12Language","validateScorm12Speed","validateScorm12Text","validateReadOnly","CMIScore","_raw","_min","__score_range","score_range","_max","__invalid_error_code","__invalid_type_code","__invalid_range_code","__decimal_regex","__error_class","min","getScoreObject","scoreObject","Number","parseFloat","Scorm2004CMIScore","_scaled","scaled","CMICommentsFromLMS","CMICommentsFromLearner","CMICommentsObject","readOnlyAfterInit","_comment","_location","_readOnlyAfterInit","comment","location","CMIObjectives","findObjectiveById","find","objective","findObjectiveByIndex","setObjectiveByIndex","CMIObjectivesObject","_success_status","_completion_status","_progress_measure","score","success_status","completion_status","progress_measure","CMIMetadata","__version","_version","CMILearner","_learner_id","_learner_name","learner_id","learner_name","CMIStatus","CMISession","_entry","_exit","_session_time","_total_time","entry","exit","session_time","total_time","getCurrentTotalTime","sessionTime","startTime","Util.getSecondsAsISODuration","first","second","Util.addTwoDurations","CMIContent","_launch_data","_suspend_data","launch_data","suspend_data","CMISettings","_credit","_mode","_time_limit_action","_max_time_allowed","credit","time_limit_action","max_time_allowed","CMIThresholds","_scaled_passing_score","_completion_threshold","scaled_passing_score","completion_threshold","CMI","metadata","learner","session","content","thresholds","learner_preference","comments_from_learner","comments_from_lms","ADL","ADLData","_sequencing","nav","ADLNav","adlNav","_request","request_valid","ADLNavRequestValid","request","processNavigationRequest","ADLDataObject","_store","store","_continue","_previous","_choice","_jump","previous","jump","continue","RuleActionType","RuleCondition","condition","operator","parameters","_condition","_operator","_parameters","evaluate","activity","successStatus","objectiveMeasureStatus","greaterThanValue","objectiveNormalizedMeasure","lessThanValue","isCompleted","completionStatus","attemptCount","attemptLimit","fromEntries","SequencingRule","action","conditionCombination","_conditions","_action","_conditionCombination","conditions","addCondition","removeCondition","every","SequencingRules","_preConditionRules","_exitConditionRules","_postConditionRules","preConditionRules","addPreConditionRule","rule","exitConditionRules","addExitConditionRule","postConditionRules","addPostConditionRule","evaluatePreConditionRules","evaluateExitConditionRules","evaluatePostConditionRules","RollupCondition","RollupRule","consideration","minimumCount","minimumPercent","_consideration","_minimumCount","_minimumPercent","matchingChildren","child","RollupRules","_rules","rules","addRule","removeRule","processRollup","completionRollup","successRollup","_defaultCompletionRollup","_defaultSuccessRollup","ValidLanguages","Activity","title","_title","_parent","_isVisible","_isActive","_isSuspended","_isCompleted","_completionStatus","_successStatus","_attemptCount","_attemptCompletionAmount","_attemptAbsoluteDuration","_attemptExperiencedDuration","_activityAbsoluteDuration","_activityExperiencedDuration","_objectiveSatisfiedStatus","_objectiveMeasureStatus","_objectiveNormalizedMeasure","addChild","removeChild","parent","isVisible","isActive","isSuspended","incrementAttemptCount","attemptCompletionAmount","attemptAbsoluteDuration","attemptExperiencedDuration","activityAbsoluteDuration","activityExperiencedDuration","objectiveSatisfiedStatus","ActivityTree","_root","_currentActivity","_suspendedActivity","_activities","root","_addActivitiesToMap","currentActivity","suspendedActivity","getActivity","getAllActivities","getParent","getChildren","getSiblings","getNextSibling","siblings","getPreviousSibling","getFirstChild","getLastChild","getCommonAncestor","activity1","activity2","path1","current","unshift","SequencingControls","_enabled","_choiceExit","_flow","_forwardOnly","_useCurrentAttemptObjectiveInfo","_useCurrentAttemptProgressInfo","_preventActivation","_constrainChoice","_rollupObjectiveSatisfied","_rollupProgressCompletion","_objectiveMeasureWeight","enabled","choiceExit","flow","forwardOnly","useCurrentAttemptObjectiveInfo","useCurrentAttemptProgressInfo","preventActivation","constrainChoice","rollupObjectiveSatisfied","rollupProgressCompletion","objectiveMeasureWeight","isChoiceNavigationAllowed","isFlowNavigationAllowed","isForwardNavigationAllowed","isBackwardNavigationAllowed","Sequencing","_adlNav","_activityTree","_sequencingRules","_sequencingControls","_rollupRules","activityTree","sequencingRules","sequencingControls","rollupRules","preConditionAction","SKIP","DISABLED","HIDE_FROM_CHOICE","STOP_FORWARD_TRAVERSAL","processContinueRequest","processPreviousRequest","processExitRequest","processExitAllRequest","processAbandonRequest","processAbandonAllRequest","processSuspendAllRequest","nextActivity","_handleExitConditionAction","postConditionAction","RETRY","RETRY_ALL","CONTINUE","PREVIOUS","EXIT","previousActivity","_processRollupRecursive","exitConditionAction","EXIT_PARENT","EXIT_ALL","Scorm2004API","mastery_override","_globalObjectives","_extractedScoItemIds","adl","configureSequencing","Initialize","lmsInitialize","Terminate","lmsFinish","GetValue","lmsGetValue","SetValue","lmsSetValue","Commit","lmsCommit","GetLastError","lmsGetLastError","GetErrorString","lmsGetErrorString","GetDiagnostic","lmsGetDiagnostic","version","globalObjectives","internalFinish","navActions","exitAll","abandon","abandonAll","choiceJumpRegex","target","groups","choice_target","jump_target","adlNavRequestRegex","element_base","objective_id","global_index","newGlobalObjective","global_element","createCorrectResponsesObject","interaction","checkDuplicateChoiceResponse","checkValidResponseType","interaction_type","checkCorrectResponseValue","interaction_count","pattern_index","checkDuplicatedPattern","correct_response","current_index","found","count","removeCorrectResponsePrefixes","seenOrder","seenCase","seenLang","prefixRegex","langMatches","lang","toLowerCase","replaceWithAnotherScormAPI","newAPI","cmiExport","flattened","totalTimeDuration","totalTimeSeconds","Utilities.getDurationAsSeconds","navRequest","Function","sequencingSettings","configureActivityTree","configureSequencingRules","configureSequencingControls","configureRollupRules","activityTreeSettings","rootActivity","createActivity","extractActivityIds","ids","activitySettings","childSettings","childActivity","sequencingRulesSettings","ruleSettings","createSequencingRule","conditionSettings","sequencingControlsSettings","rollupRulesSettings","createRollupRule"],"mappings":"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"}