{"version":3,"file":"cross-frame-api.min.js","sources":["../../src/CrossFrameAPI.ts","../../src/constants/error_codes.ts"],"sourcesContent":["// src/CrossFrameAPI.ts\nimport { MessageData, MessageResponse } from \"./types/CrossFrame\";\nimport { global_errors } from \"./constants/error_codes\";\n\n/**\n * Client-side SCORM façade running in your content frame.\n * Returns cached/default values synchronously, then fires off an async\n * postMessage to the LMS frame to refresh cache and error state.\n */\nexport default class CrossFrameAPI {\n  private _cache = new Map<string, string>();\n  private _lastError = \"0\";\n  private _pending = new Map<string, { resolve: (v: any) => void; reject: (e: any) => void }>();\n  private _counter = 0;\n  private readonly _origin: string;\n\n  private _handler: ProxyHandler<CrossFrameAPI> = {\n    get: (target, prop, receiver) => {\n      // If it's an existing property/method, return it\n      if (typeof prop !== \"string\" || prop in target) {\n        const v = Reflect.get(target, prop, receiver);\n        return typeof v === \"function\" ? v.bind(target) : v;\n      }\n\n      // Otherwise treat prop as a SCORM call\n      const methodName = prop;\n      const isGet = methodName.endsWith(\"GetValue\");\n      const isSet = methodName.startsWith(\"LMSSet\") || methodName.endsWith(\"SetValue\");\n      const isInit = methodName === \"Initialize\" || methodName === \"LMSInitialize\";\n      const isFinish = methodName === \"Terminate\" || methodName === \"LMSFinish\";\n      const isCommit = methodName === \"Commit\" || methodName === \"LMSCommit\";\n\n      return (...args: any[]): string => {\n        // Synchronous cache update for setter calls\n        if (isSet && args.length >= 2) {\n          target._cache.set(args[0], String(args[1]));\n          target._lastError = \"0\";\n        }\n\n        // Fire off async postMessage to refresh cache & error\n        target\n          ._post(methodName, args)\n          .then((res) => {\n            if (isGet && args.length >= 1) {\n              target._cache.set(args[0], String(res));\n              target._lastError = \"0\";\n            }\n            if (methodName === \"GetLastError\" || methodName === \"LMSGetLastError\") {\n              target._lastError = String(res);\n            }\n          })\n          .catch((err) => target._capture(methodName, err));\n\n        // Return synchronously\n        if (isGet && args.length >= 1) {\n          return target._cache.get(args[0]) ?? \"\";\n        }\n        if (isInit || isFinish || isCommit || isSet) {\n          // Immediately return “true”\n          const result = \"true\";\n          // Then warm cache:\n          target\n            ._post(\"getFlattenedCMI\", [])\n            .then((all: Record<string, string>) => {\n              Object.entries(all).forEach(([key, val]) => {\n                target._cache.set(key, val);\n              });\n              // reset error\n              target._lastError = \"0\";\n            })\n            .catch((err) => target._capture(\"getFlattenedCMI\", err));\n          return result;\n        }\n        if (methodName === \"GetLastError\" || methodName === \"LMSGetLastError\") {\n          return target._lastError;\n        }\n        return \"\";\n      };\n    },\n  };\n\n  constructor(targetOrigin: string = \"*\") {\n    this._origin = targetOrigin;\n    window.addEventListener(\"message\", this._onMessage.bind(this));\n    return new Proxy(this, this._handler);\n  }\n\n  /** Send a message to the LMS frame and return a promise for its response */\n  private _post(method: string, params: any[]): Promise<any> {\n    const messageId = `cfapi-${Date.now()}-${this._counter++}`;\n\n    // Deep‐clean params of non-cloneables (e.g. functions)\n    const safeParams = params.map((p) => {\n      if (typeof p === \"function\") {\n        console.warn(\"Dropping function param when posting SCORM call:\", method);\n        return undefined;\n      }\n      return p;\n    });\n\n    return new Promise((resolve, reject) => {\n      this._pending.set(messageId, { resolve, reject });\n      const msg: MessageData = { messageId, method, params: safeParams };\n      window.parent.postMessage(msg, this._origin);\n      // Optional timeout\n      setTimeout(() => {\n        if (this._pending.has(messageId)) {\n          this._pending.delete(messageId);\n          reject(new Error(`Timeout calling ${method}`));\n        }\n      }, 5000);\n    });\n  }\n\n  /** Handle incoming postMessage responses from the LMS frame */\n  private _onMessage(ev: MessageEvent) {\n    const data = ev.data as MessageResponse;\n    if (!data?.messageId) return;\n    const pending = this._pending.get(data.messageId);\n    if (!pending) return;\n    this._pending.delete(data.messageId);\n    if (data.error) pending.reject(data.error);\n    else pending.resolve(data.result);\n  }\n\n  /** Capture and cache SCORM errors */\n  private _capture(method: string, err: any) {\n    console.error(`CrossFrameAPI ${method} error:`, err);\n    const code = (/(\\d{3})/.exec(err.message) || [])[1] || global_errors.GENERAL;\n    this._lastError = String(code);\n    this._cache.set(`error_${code}`, err.message);\n  }\n}\n","export type ErrorCode = {\n  [key: string]: number;\n};\n\nexport const global_errors: ErrorCode = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nexport const scorm12_errors: ErrorCode = {\n  ...global_errors,\n  RETRIEVE_BEFORE_INIT: 301,\n  STORE_BEFORE_INIT: 301,\n  COMMIT_BEFORE_INIT: 301,\n  ARGUMENT_ERROR: 201,\n  CHILDREN_ERROR: 202,\n  COUNT_ERROR: 203,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 401,\n  VALUE_NOT_INITIALIZED: 301,\n  INVALID_SET_VALUE: 402,\n  READ_ONLY_ELEMENT: 403,\n  WRITE_ONLY_ELEMENT: 404,\n  TYPE_MISMATCH: 405,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n\nexport const scorm2004_errors: ErrorCode = {\n  ...global_errors,\n  INITIALIZATION_FAILED: 102,\n  INITIALIZED: 103,\n  TERMINATED: 104,\n  TERMINATION_FAILURE: 111,\n  TERMINATION_BEFORE_INIT: 112,\n  MULTIPLE_TERMINATIONS: 113,\n  RETRIEVE_BEFORE_INIT: 122,\n  RETRIEVE_AFTER_TERM: 123,\n  STORE_BEFORE_INIT: 132,\n  STORE_AFTER_TERM: 133,\n  COMMIT_BEFORE_INIT: 142,\n  COMMIT_AFTER_TERM: 143,\n  ARGUMENT_ERROR: 201,\n  GENERAL_GET_FAILURE: 301,\n  GENERAL_SET_FAILURE: 351,\n  GENERAL_COMMIT_FAILURE: 391,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 402,\n  VALUE_NOT_INITIALIZED: 403,\n  READ_ONLY_ELEMENT: 404,\n  WRITE_ONLY_ELEMENT: 405,\n  TYPE_MISMATCH: 406,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n"],"names":["CrossFrameAPI","constructor","targetOrigin","this","_cache","Map","_lastError","_pending","_counter","_handler","get","target","prop","receiver","v","Reflect","bind","methodName","isGet","endsWith","isSet","startsWith","isInit","isFinish","isCommit","args","length","set","String","_post","then","res","catch","err","_capture","result","all","Object","entries","forEach","key","val","_origin","window","addEventListener","_onMessage","Proxy","method","params","messageId","Date","now","safeParams","map","p","console","warn","Promise","resolve","reject","parent","postMessage","setTimeout","has","delete","Error","ev","data","pending","error","code","exec","message"],"mappings":"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"}