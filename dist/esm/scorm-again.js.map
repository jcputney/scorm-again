{"version":3,"file":"scorm-again.js","sources":["../../src/constants/api_constants.ts","../../src/constants/error_codes.ts","../../src/constants/regex.ts","../../src/exceptions.ts","../../src/exceptions/scorm12_exceptions.ts","../../src/cmi/common/base_cmi.ts","../../src/utilities.ts","../../src/cmi/common/validation.ts","../../src/cmi/scorm12/validation.ts","../../src/services/ValidationService.ts","../../src/cmi/common/score.ts","../../src/cmi/aicc/core.ts","../../src/cmi/common/array.ts","../../src/cmi/scorm12/objectives.ts","../../src/cmi/scorm12/student_data.ts","../../src/cmi/scorm12/student_preference.ts","../../src/cmi/scorm12/interactions.ts","../../src/cmi/scorm12/cmi.ts","../../src/cmi/scorm12/nav.ts","../../src/constants/enums.ts","../../src/constants/default_settings.ts","../../src/helpers/scheduled_commit.ts","../../src/services/HttpService.ts","../../src/services/EventService.ts","../../src/services/SerializationService.ts","../../src/services/LoggingService.ts","../../src/services/ErrorHandlingService.ts","../../src/services/OfflineStorageService.ts","../../src/BaseAPI.ts","../../src/Scorm12API.ts","../../src/exceptions/aicc_exceptions.ts","../../src/cmi/aicc/validation.ts","../../src/cmi/aicc/evaluation.ts","../../src/cmi/aicc/student_preferences.ts","../../src/cmi/aicc/student_demographics.ts","../../src/cmi/aicc/tries.ts","../../src/cmi/aicc/attempts.ts","../../src/cmi/aicc/student_data.ts","../../src/cmi/aicc/paths.ts","../../src/cmi/aicc/cmi.ts","../../src/AICC.ts","../../src/exceptions/scorm2004_exceptions.ts","../../src/cmi/scorm2004/validation.ts","../../src/cmi/scorm2004/learner_preference.ts","../../src/constants/response_constants.ts","../../src/cmi/scorm2004/interactions.ts","../../src/cmi/scorm2004/score.ts","../../src/cmi/scorm2004/comments.ts","../../src/cmi/scorm2004/objectives.ts","../../src/cmi/scorm2004/metadata.ts","../../src/cmi/scorm2004/learner.ts","../../src/cmi/scorm2004/status.ts","../../src/cmi/scorm2004/session.ts","../../src/cmi/scorm2004/content.ts","../../src/cmi/scorm2004/settings.ts","../../src/cmi/scorm2004/thresholds.ts","../../src/cmi/scorm2004/cmi.ts","../../src/cmi/scorm2004/adl.ts","../../src/cmi/scorm2004/sequencing/sequencing_rules.ts","../../src/cmi/scorm2004/sequencing/rollup_rules.ts","../../src/constants/language_constants.ts","../../src/cmi/scorm2004/sequencing/activity.ts","../../src/cmi/scorm2004/sequencing/activity_tree.ts","../../src/cmi/scorm2004/sequencing/sequencing_controls.ts","../../src/cmi/scorm2004/sequencing/sequencing.ts","../../src/Scorm2004API.ts","../../src/CrossFrameAPI.ts","../../src/CrossFrameLMS.ts"],"sourcesContent":["interface ErrorDescription {\n  basicMessage: string;\n  detailMessage: string;\n}\n\ninterface ErrorDescriptions {\n  [key: string]: ErrorDescription;\n}\n\ninterface ScormConstants {\n  cmi_children: string;\n  core_children: string;\n  score_children: string;\n  comments_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface AiccConstants extends ScormConstants {\n  student_demographics_children: string;\n  tries_children: string;\n  attempt_records_children: string;\n  paths_children: string;\n}\n\ninterface Scorm2004Constants {\n  cmi_children: string;\n  comments_children: string;\n  score_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  adl_data_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface GlobalConstants {\n  SCORM_TRUE: string;\n  SCORM_FALSE: string;\n  STATE_NOT_INITIALIZED: number;\n  STATE_INITIALIZED: number;\n  STATE_TERMINATED: number;\n}\n\nexport const global_constants: GlobalConstants = {\n  SCORM_TRUE: \"true\",\n  SCORM_FALSE: \"false\",\n  STATE_NOT_INITIALIZED: 0,\n  STATE_INITIALIZED: 1,\n  STATE_TERMINATED: 2,\n};\n\nexport const scorm12_constants: ScormConstants = {\n  // Children lists\n  cmi_children:\n    \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions\",\n  core_children:\n    \"student_id,student_name,lesson_location,credit,lesson_status,entry,score,total_time,lesson_mode,exit,session_time\",\n  score_children: \"raw,min,max\",\n  comments_children: \"content,location,time\",\n  objectives_children: \"id,score,status\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio,language,speed,text\",\n  interactions_children:\n    \"id,objectives,time,type,correct_responses,weighting,student_response,result,latency\",\n  error_descriptions: {\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage: \"No specific error code exists to describe the error.\",\n    },\n    \"201\": {\n      basicMessage: \"Invalid argument error\",\n      detailMessage:\n        \"Indicates that an argument represents an invalid data model element or is otherwise incorrect.\",\n    },\n    \"202\": {\n      basicMessage: \"Element cannot have children\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_children\" for a data model element that does not support the \"_children\" suffix.',\n    },\n    \"203\": {\n      basicMessage: \"Element not an array - cannot have count\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_count\" for a data model element that does not support the \"_count\" suffix.',\n    },\n    \"301\": {\n      basicMessage: \"Not initialized\",\n      detailMessage: \"Indicates that an API call was made before the call to lmsInitialize.\",\n    },\n    \"401\": {\n      basicMessage: \"Not implemented error\",\n      detailMessage:\n        \"The data model element indicated in a call to LMSGetValue or LMSSetValue is valid, but was not implemented by this LMS. SCORM 1.2 defines a set of data model elements as being optional for an LMS to implement.\",\n    },\n    \"402\": {\n      basicMessage: \"Invalid set value, element is a keyword\",\n      detailMessage:\n        'Indicates that LMSSetValue was called on a data model element that represents a keyword (elements that end in \"_children\" and \"_count\").',\n    },\n    \"403\": {\n      basicMessage: \"Element is read only\",\n      detailMessage: \"LMSSetValue was called with a data model element that can only be read.\",\n    },\n    \"404\": {\n      basicMessage: \"Element is write only\",\n      detailMessage: \"LMSGetValue was called on a data model element that can only be written to.\",\n    },\n    \"405\": {\n      basicMessage: \"Incorrect Data Type\",\n      detailMessage:\n        \"LMSSetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a LMSSetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\nexport const aicc_constants: AiccConstants = {\n  ...scorm12_constants,\n  ...{\n    cmi_children:\n      \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions,evaluation\",\n    student_preference_children:\n      \"audio,language,lesson_type,speed,text,text_color,text_location,text_size,video,windows\",\n    student_data_children: \"attempt_number,tries,mastery_score,max_time_allowed,time_limit_action\",\n    student_demographics_children:\n      \"city,class,company,country,experience,familiar_name,instructor_name,title,native_language,state,street_address,telephone,years_experience\",\n    tries_children: \"time,status,score\",\n    attempt_records_children: \"score,lesson_status\",\n    paths_children: \"location_id,date,time,status,why_left,time_in_element\",\n  },\n};\n\nexport const scorm2004_constants: Scorm2004Constants = {\n  // Children lists\n  cmi_children:\n    \"_version,comments_from_learner,comments_from_lms,completion_status,credit,entry,exit,interactions,launch_data,learner_id,learner_name,learner_preference,location,max_time_allowed,mode,objectives,progress_measure,scaled_passing_score,score,session_time,success_status,suspend_data,time_limit_action,total_time\",\n  comments_children: \"comment,timestamp,location\",\n  score_children: \"max,raw,scaled,min\",\n  objectives_children: \"progress_measure,completion_status,success_status,description,score,id\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio_level,audio_captioning,delivery_speed,language\",\n  interactions_children:\n    \"id,type,objectives,timestamp,correct_responses,weighting,learner_response,result,latency,description\",\n  adl_data_children: \"id,store\",\n  error_descriptions: {\n    \"0\": {\n      basicMessage: \"No Error\",\n      detailMessage: \"No error occurred, the previous API call was successful.\",\n    },\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage: \"No specific error code exists to describe the error.\",\n    },\n    \"102\": {\n      basicMessage: \"General Initialization Failure\",\n      detailMessage: \"Call to Initialize failed for an unknown reason.\",\n    },\n    \"103\": {\n      basicMessage: \"Already Initialized\",\n      detailMessage: \"Call to Initialize failed because Initialize was already called.\",\n    },\n    \"104\": {\n      basicMessage: \"Content Instance Terminated\",\n      detailMessage: \"Call to Initialize failed because Terminate was already called.\",\n    },\n    \"111\": {\n      basicMessage: \"General Termination Failure\",\n      detailMessage: \"Call to Terminate failed for an unknown reason.\",\n    },\n    \"112\": {\n      basicMessage: \"Termination Before Initialization\",\n      detailMessage: \"Call to Terminate failed because it was made before the call to Initialize.\",\n    },\n    \"113\": {\n      basicMessage: \"Termination After Termination\",\n      detailMessage: \"Call to Terminate failed because Terminate was already called.\",\n    },\n    \"122\": {\n      basicMessage: \"Retrieve Data Before Initialization\",\n      detailMessage: \"Call to GetValue failed because it was made before the call to Initialize.\",\n    },\n    \"123\": {\n      basicMessage: \"Retrieve Data After Termination\",\n      detailMessage: \"Call to GetValue failed because it was made after the call to Terminate.\",\n    },\n    \"132\": {\n      basicMessage: \"Store Data Before Initialization\",\n      detailMessage: \"Call to SetValue failed because it was made before the call to Initialize.\",\n    },\n    \"133\": {\n      basicMessage: \"Store Data After Termination\",\n      detailMessage: \"Call to SetValue failed because it was made after the call to Terminate.\",\n    },\n    \"142\": {\n      basicMessage: \"Commit Before Initialization\",\n      detailMessage: \"Call to Commit failed because it was made before the call to Initialize.\",\n    },\n    \"143\": {\n      basicMessage: \"Commit After Termination\",\n      detailMessage: \"Call to Commit failed because it was made after the call to Terminate.\",\n    },\n    \"201\": {\n      basicMessage: \"General Argument Error\",\n      detailMessage:\n        \"An invalid argument was passed to an API method (usually indicates that Initialize, Commit or Terminate did not receive the expected empty string argument.\",\n    },\n    \"301\": {\n      basicMessage: \"General Get Failure\",\n      detailMessage:\n        \"Indicates a failed GetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"351\": {\n      basicMessage: \"General Set Failure\",\n      detailMessage:\n        \"Indicates a failed SetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"391\": {\n      basicMessage: \"General Commit Failure\",\n      detailMessage:\n        \"Indicates a failed Commit call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"401\": {\n      basicMessage: \"Undefined Data Model Element\",\n      detailMessage:\n        \"The data model element name passed to GetValue or SetValue is not a valid SCORM data model element.\",\n    },\n    \"402\": {\n      basicMessage: \"Unimplemented Data Model Element\",\n      detailMessage:\n        \"The data model element indicated in a call to GetValue or SetValue is valid, but was not implemented by this LMS. In SCORM 2004, this error would indicate an LMS that is not fully SCORM conformant.\",\n    },\n    \"403\": {\n      basicMessage: \"Data Model Element Value Not Initialized\",\n      detailMessage:\n        \"Attempt to read a data model element that has not been initialized by the LMS or through a SetValue call. This error condition is often reached during normal execution of a SCO.\",\n    },\n    \"404\": {\n      basicMessage: \"Data Model Element Is Read Only\",\n      detailMessage: \"SetValue was called with a data model element that can only be read.\",\n    },\n    \"405\": {\n      basicMessage: \"Data Model Element Is Write Only\",\n      detailMessage: \"GetValue was called on a data model element that can only be written to.\",\n    },\n    \"406\": {\n      basicMessage: \"Data Model Element Type Mismatch\",\n      detailMessage:\n        \"SetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Data Model Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a SetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\n","export type ErrorCode = {\n  [key: string]: number;\n};\n\nexport const global_errors: ErrorCode = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nexport const scorm12_errors: ErrorCode = {\n  ...global_errors,\n  RETRIEVE_BEFORE_INIT: 301,\n  STORE_BEFORE_INIT: 301,\n  COMMIT_BEFORE_INIT: 301,\n  ARGUMENT_ERROR: 201,\n  CHILDREN_ERROR: 202,\n  COUNT_ERROR: 203,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 401,\n  VALUE_NOT_INITIALIZED: 301,\n  INVALID_SET_VALUE: 402,\n  READ_ONLY_ELEMENT: 403,\n  WRITE_ONLY_ELEMENT: 404,\n  TYPE_MISMATCH: 405,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n\nexport const scorm2004_errors: ErrorCode = {\n  ...global_errors,\n  INITIALIZATION_FAILED: 102,\n  INITIALIZED: 103,\n  TERMINATED: 104,\n  TERMINATION_FAILURE: 111,\n  TERMINATION_BEFORE_INIT: 112,\n  MULTIPLE_TERMINATIONS: 113,\n  RETRIEVE_BEFORE_INIT: 122,\n  RETRIEVE_AFTER_TERM: 123,\n  STORE_BEFORE_INIT: 132,\n  STORE_AFTER_TERM: 133,\n  COMMIT_BEFORE_INIT: 142,\n  COMMIT_AFTER_TERM: 143,\n  ARGUMENT_ERROR: 201,\n  GENERAL_GET_FAILURE: 301,\n  GENERAL_SET_FAILURE: 351,\n  GENERAL_COMMIT_FAILURE: 391,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 402,\n  VALUE_NOT_INITIALIZED: 403,\n  READ_ONLY_ELEMENT: 404,\n  WRITE_ONLY_ELEMENT: 405,\n  TYPE_MISMATCH: 406,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n","export const scorm12_regex = {\n  CMIString256: \"^.{0,255}$\",\n  CMIString4096: \"^.{0,4096}$\",\n  CMITime: \"^(?:[01]\\\\d|2[0123]):(?:[012345]\\\\d):(?:[012345]\\\\d)$\",\n  CMITimespan: \"^([0-9]{2,}):([0-9]{2}):([0-9]{2})(.[0-9]{1,2})?$\",\n\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{0,3})(.[0-9]*)?$\",\n\n  CMIIdentifier: \"^[\\\\u0021-\\\\u007E\\\\s]{0,255}$\",\n  CMIFeedback: \"^.{0,255}$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMIStatus: \"^(passed|completed|failed|incomplete|browsed)$\",\n  CMIStatus2: \"^(passed|completed|failed|incomplete|browsed|not attempted)$\",\n  CMIExit: \"^(time-out|suspend|logout|)$\",\n  CMIType: \"^(true-false|choice|fill-in|matching|performance|sequencing|likert|numeric)$\",\n  CMIResult: \"^(correct|wrong|unanticipated|neutral|([0-9]{0,3})?(\\\\.[0-9]*)?)$\",\n  NAVEvent: \"^(previous|continue)$\",\n  // Data ranges\n  score_range: \"0#100\",\n  audio_range: \"-1#100\",\n  speed_range: \"-100#100\",\n  weighting_range: \"-100#100\",\n  text_range: \"-1#1\",\n};\nexport const aicc_regex = {\n  ...scorm12_regex,\n  ...{\n    CMIIdentifier: \"^\\\\w{1,255}$\",\n  },\n};\nexport const scorm2004_regex = {\n  CMIString200: \"^[\\\\u0000-\\\\uFFFF]{0,200}$\",\n  CMIString250: \"^[\\\\u0000-\\\\uFFFF]{0,250}$\",\n  CMIString1000: \"^[\\\\u0000-\\\\uFFFF]{0,1000}$\",\n  CMIString4000: \"^[\\\\u0000-\\\\uFFFF]{0,4000}$\",\n  CMIString64000: \"^[\\\\u0000-\\\\uFFFF]{0,64000}$\",\n  CMILang: \"^([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?$|^$\",\n\n  CMILangString250: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,250}$)?$\",\n\n  CMILangcr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?}))(.*?)$\",\n\n  CMILangString250cr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?})?(.{0,250})?)?$\",\n\n  CMILangString4000: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,4000}$)?$\",\n\n  CMITime:\n    \"^(19[7-9]{1}[0-9]{1}|20[0-2]{1}[0-9]{1}|203[0-8]{1})((-(0[1-9]{1}|1[0-2]{1}))((-(0[1-9]{1}|[1-2]{1}[0-9]{1}|3[0-1]{1}))(T([0-1]{1}[0-9]{1}|2[0-3]{1})((:[0-5]{1}[0-9]{1})((:[0-5]{1}[0-9]{1})((\\\\.[0-9]{1,6})((Z|([+|-]([0-1]{1}[0-9]{1}|2[0-3]{1})))(:[0-5]{1}[0-9]{1})?)?)?)?)?)?)?)?$\",\n  CMITimespan:\n    \"^P(?:([.,\\\\d]+)Y)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)W)?(?:([.,\\\\d]+)D)?(?:T?(?:([.,\\\\d]+)H)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)S)?)?$\",\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{1,5})(\\\\.[0-9]{1,18})?$\",\n  CMIIdentifier: \"^\\\\S{1,250}[a-zA-Z0-9]$\",\n  CMIShortIdentifier: \"^[\\\\w\\\\.\\\\-\\\\_]{1,250}$\",\n  CMILongIdentifier: \"^(?:(?!urn:)\\\\S{1,4000}|urn:[A-Za-z0-9-]{1,31}:\\\\S{1,4000}|.{1,4000})$\",\n  // need to re-examine this\n  CMIFeedback: \"^.*$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  CMIIndexStore: \".N(\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMICStatus: \"^(completed|incomplete|not attempted|unknown)$\",\n  CMISStatus: \"^(passed|failed|unknown)$\",\n  CMIExit: \"^(time-out|suspend|logout|normal)$\",\n  CMIType:\n    \"^(true-false|choice|fill-in|long-fill-in|matching|performance|sequencing|likert|numeric|other)$\",\n  CMIResult: \"^(correct|incorrect|unanticipated|neutral|-?([0-9]{1,4})(\\\\.[0-9]{1,18})?)$\",\n  NAVEvent:\n    \"^(previous|continue|exit|exitAll|abandon|abandonAll|suspendAll|_none_|(\\\\{target=(?<choice_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?choice|(\\\\{target=(?<jump_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?jump)$\",\n\n  NAVBoolean: \"^(unknown|true|false$)\",\n  NAVTarget: \"^{target=\\\\S{0,}[a-zA-Z0-9-_]+}$\",\n  // Data ranges\n  scaled_range: \"-1#1\",\n  audio_range: \"0#999.9999999\",\n  speed_range: \"0#999.9999999\",\n  text_range: \"-1#1\",\n  progress_range: \"0#1\",\n};\n","type APIError = {\n  errorCode: number;\n  errorMessage: string;\n  detailedMessage: string;\n};\n\nexport class BaseScormValidationError extends Error {\n  constructor(CMIElement: string, errorCode: number) {\n    super(`${CMIElement} : ${errorCode.toString()}`);\n    this._errorCode = errorCode;\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, BaseScormValidationError.prototype);\n  }\n\n  private readonly _errorCode: number;\n\n  /**\n   * Getter for _errorCode\n   * @return {number}\n   */\n  get errorCode(): number {\n    return this._errorCode;\n  }\n}\n\n/**\n * Base Validation Exception\n */\nexport class ValidationError extends BaseScormValidationError implements APIError {\n  /**\n   * Constructor to take in an error message and code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   * @param {string} errorMessage\n   * @param {string} detailedMessage\n   */\n  constructor(\n    CMIElement: string,\n    errorCode: number,\n    errorMessage: string,\n    detailedMessage?: string,\n  ) {\n    super(CMIElement, errorCode);\n    this.message = `${CMIElement} : ${errorMessage}`;\n    this._errorMessage = errorMessage;\n    if (detailedMessage) {\n      this._detailedMessage = detailedMessage;\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  private readonly _errorMessage: string;\n  private readonly _detailedMessage: string = \"\";\n\n  /**\n   * Getter for _errorMessage\n   * @return {string}\n   */\n  get errorMessage(): string {\n    return this._errorMessage;\n  }\n\n  /**\n   * Getter for _detailedMessage\n   * @return {string}\n   */\n  get detailedMessage(): string {\n    return this._detailedMessage;\n  }\n}\n","import { ValidationError } from \"../exceptions\";\nimport { scorm12_constants } from \"../constants/api_constants\";\n\nconst scorm12_errors = scorm12_constants.error_descriptions;\n\n/**\n * SCORM 1.2 Validation Error\n */\nexport class Scorm12ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm12_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm12_errors[String(errorCode)].basicMessage,\n        scorm12_errors[String(errorCode)].detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm12_errors[\"101\"].basicMessage,\n        scorm12_errors[\"101\"].detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm12ValidationError.prototype);\n  }\n}\n","/**\n * Base class for API cmi objects\n */\nexport abstract class BaseCMI {\n  jsonString = false;\n  protected readonly _cmi_element: string;\n  protected _initialized = false;\n  private _start_time: number | undefined;\n\n  /**\n   * Constructor for BaseCMI\n   * @param {string} cmi_element\n   */\n  constructor(cmi_element: string) {\n    this._cmi_element = cmi_element;\n  }\n\n  /**\n   * Getter for _initialized\n   * @return {boolean}\n   */\n  get initialized(): boolean {\n    return this._initialized;\n  }\n\n  /**\n   * Getter for _start_time\n   * @return {number | undefined}\n   */\n  get start_time(): number | undefined {\n    return this._start_time;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize(): void {\n    this._initialized = true;\n  }\n\n  /**\n   * Called when the player should override the 'session_time' provided by\n   * the module\n   */\n  setStartTime(): void {\n    this._start_time = new Date().getTime();\n  }\n\n  abstract reset(): void;\n}\n\n/**\n * Base class for cmi root objects\n */\nexport abstract class BaseRootCMI extends BaseCMI {\n  abstract getCurrentTotalTime(): string;\n}\n","/**\n * Constants for time conversion calculations.\n * These are used throughout the codebase for converting between different time formats.\n */\nexport const SECONDS_PER_SECOND = 1.0;\nexport const SECONDS_PER_MINUTE = 60;\nexport const SECONDS_PER_HOUR = 60 * SECONDS_PER_MINUTE;\nexport const SECONDS_PER_DAY = 24 * SECONDS_PER_HOUR;\n\ntype Designation = {\n  [key: string]: number;\n};\n\n/**\n * A record with string keys and unknown values.\n * This is a more type-safe alternative to using `any`.\n */\nexport type StringKeyMap = Record<string, unknown>;\n\nconst designations: Designation = {\n  D: SECONDS_PER_DAY,\n  H: SECONDS_PER_HOUR,\n  M: SECONDS_PER_MINUTE,\n  S: SECONDS_PER_SECOND,\n};\n\n/**\n * Converts a number of seconds to a formatted time string in HH:MM:SS format.\n * This function handles decimal seconds and ensures proper formatting with leading zeros.\n *\n * @param {number|null} totalSeconds - The total number of seconds to convert. If null or negative, returns \"00:00:00\".\n * @return {string} A formatted time string in HH:MM:SS format, with up to 2 decimal places for seconds if applicable.\n *\n * @example\n * // Returns \"01:30:45\"\n * getSecondsAsHHMMSS(5445);\n *\n * @example\n * // Returns \"00:00:30.5\"\n * getSecondsAsHHMMSS(30.5);\n *\n * @example\n * // Returns \"00:00:00\"\n * getSecondsAsHHMMSS(null);\n */\nexport const getSecondsAsHHMMSS = memoize((totalSeconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!totalSeconds || totalSeconds <= 0) {\n    return \"00:00:00\";\n  }\n\n  const hours = Math.floor(totalSeconds / SECONDS_PER_HOUR);\n  const dateObj = new Date(totalSeconds * 1000);\n  const minutes = dateObj.getUTCMinutes();\n  // make sure we add any possible decimal value\n  const seconds = dateObj.getSeconds();\n  const ms = totalSeconds % 1.0;\n  let msStr = \"\";\n\n  if (countDecimals(ms) > 0) {\n    if (countDecimals(ms) > 2) {\n      msStr = ms.toFixed(2);\n    } else {\n      msStr = String(ms);\n    }\n\n    msStr = \".\" + msStr.split(\".\")[1];\n  }\n\n  return (hours + \":\" + minutes + \":\" + seconds).replace(/\\b\\d\\b/g, \"0$&\") + msStr;\n});\n\n/**\n * Converts a number of seconds to an ISO 8601 duration string (e.g., \"PT1H30M45S\").\n * This function handles the complexity of formatting according to the ISO 8601 standard,\n * including the proper placement of the \"T\" separator for time components.\n *\n * @param {number|null} seconds - The number of seconds to convert. If null or negative, returns \"PT0S\".\n * @return {string} An ISO 8601 formatted duration string.\n *\n * @example\n * // Returns \"PT1H30M45S\" (1 hour, 30 minutes, 45 seconds)\n * getSecondsAsISODuration(5445);\n *\n * @example\n * // Returns \"PT30.5S\" (30.5 seconds)\n * getSecondsAsISODuration(30.5);\n *\n * @example\n * // Returns \"P1DT1H\" (1 day, 1 hour)\n * getSecondsAsISODuration(90000);\n *\n * @example\n * // Returns \"PT0S\" (0 seconds)\n * getSecondsAsISODuration(null);\n */\nexport const getSecondsAsISODuration = memoize((seconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!seconds || seconds <= 0) {\n    return \"PT0S\";\n  }\n\n  let duration = \"P\";\n  let remainder = seconds;\n\n  // Convert to array of entries and use functional methods\n  const designationEntries = Object.entries(designations);\n\n  // Process each time designation\n  designationEntries.forEach(([designationsKey, current_seconds]) => {\n    let value = Math.floor(remainder / current_seconds);\n    remainder = remainder % current_seconds;\n\n    // Limit decimal places\n    if (countDecimals(remainder) > 2) {\n      remainder = Number(Number(remainder).toFixed(2));\n    }\n\n    // If we have anything left in the remainder, and we're currently adding\n    // seconds to the duration, go ahead and add the decimal to the seconds\n    if (designationsKey === \"S\" && remainder > 0) {\n      value += remainder;\n    }\n\n    if (value) {\n      // Add the 'T' separator for time components if needed\n      const needsTimeSeparator =\n        (duration.indexOf(\"D\") > 0 || [\"H\", \"M\", \"S\"].includes(designationsKey)) &&\n        duration.indexOf(\"T\") === -1;\n\n      if (needsTimeSeparator) {\n        duration += \"T\";\n      }\n\n      duration += `${value}${designationsKey}`;\n    }\n  });\n\n  return duration;\n});\n\n/**\n * Converts a time string in HH:MM:SS format to the equivalent number of seconds.\n * This function is flexible and can handle various input types, converting them to strings as needed.\n *\n * @param {string|number|boolean|null} timeString - The time string to convert, typically in HH:MM:SS format.\n *                                                 If not a string, it will be converted to one.\n *                                                 If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} timeRegex - The regular expression used to validate the time string format.\n *                                    If a string is provided, it will be converted to a RegExp.\n * @return {number} The total number of seconds represented by the time string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getTimeAsSeconds(\"01:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getTimeAsSeconds(\"invalid\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 30 (converts number to string \"30\" then parses as 0:0:30)\n * getTimeAsSeconds(30, /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport const getTimeAsSeconds = memoize(\n  (timeString: string | number | boolean | null, timeRegex: RegExp | string): number => {\n    if (typeof timeString === \"number\" || typeof timeString === \"boolean\") {\n      timeString = String(timeString);\n    }\n    if (typeof timeRegex === \"string\") {\n      timeRegex = new RegExp(timeRegex);\n    }\n    if (!timeString || !timeString?.match?.(timeRegex)) {\n      return 0;\n    }\n\n    const parts = timeString.split(\":\");\n    const hours = Number(parts[0]);\n    const minutes = Number(parts[1]);\n    const seconds = Number(parts[2]);\n    return hours * 3600 + minutes * 60 + seconds;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (timeString, timeRegex) => {\n    const timeStr = typeof timeString === \"string\" ? timeString : String(timeString ?? \"\");\n    const regexStr = typeof timeRegex === \"string\" ? timeRegex : (timeRegex?.toString() ?? \"\");\n    return `${timeStr}:${regexStr}`;\n  },\n);\n\n/**\n * Converts an ISO 8601 duration string (e.g., \"PT1H30M45S\") to the equivalent number of seconds.\n * This function parses the duration string using a regular expression to extract years, days,\n * hours, minutes, and seconds components.\n *\n * @param {string|null} duration - The ISO 8601 duration string to convert.\n *                                If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n *                                       The regex should have capture groups for years, days, hours, minutes, and seconds.\n * @return {number} The total number of seconds represented by the duration string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getDurationAsSeconds(\"PT1H30M45S\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 90000 (1 day, 1 hour)\n * getDurationAsSeconds(\"P1DT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getDurationAsSeconds(\"invalid\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport const getDurationAsSeconds = memoize(\n  (duration: string | null, durationRegex: RegExp | string): number => {\n    if (typeof durationRegex === \"string\") {\n      durationRegex = new RegExp(durationRegex);\n    }\n\n    if (!duration || !duration?.match?.(durationRegex)) {\n      return 0;\n    }\n\n    const [, years, _, , days, hours, minutes, seconds] =\n      new RegExp(durationRegex).exec?.(duration) ?? [];\n    let result = 0.0;\n    result += Number(seconds) || 0.0;\n    result += Number(minutes) * 60.0 || 0.0;\n    result += Number(hours) * 3600.0 || 0.0;\n    result += Number(days) * (60 * 60 * 24.0) || 0.0;\n    result += Number(years) * (60 * 60 * 24 * 365.0) || 0.0;\n    return result;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (duration, durationRegex) => {\n    const durationStr = duration ?? \"\";\n    const regexStr =\n      typeof durationRegex === \"string\" ? durationRegex : (durationRegex?.toString() ?? \"\");\n    return `${durationStr}:${regexStr}`;\n  },\n);\n\n/**\n * Adds together two ISO 8601 duration strings and returns the result as a new ISO 8601 duration string.\n * This function works by converting both durations to seconds, adding them together, and then\n * converting the result back to an ISO 8601 duration string.\n *\n * @param {string} first - The first ISO 8601 duration string.\n * @param {string} second - The second ISO 8601 duration string.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n * @return {string} A new ISO 8601 duration string representing the sum of the two input durations.\n *\n * @example\n * // Returns \"PT2H\" (1 hour + 1 hour = 2 hours)\n * addTwoDurations(\"PT1H\", \"PT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"PT1H30M\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addTwoDurations(\"PT1H\", \"PT30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"P1DT1H30M\" (1 day + 1 hour and 30 minutes = 1 day, 1 hour, and 30 minutes)\n * addTwoDurations(\"P1D\", \"PT1H30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport function addTwoDurations(\n  first: string,\n  second: string,\n  durationRegex: RegExp | string,\n): string {\n  const regex: RegExp =\n    typeof durationRegex === \"string\" ? new RegExp(durationRegex) : durationRegex;\n  return getSecondsAsISODuration(\n    getDurationAsSeconds(first, regex) + getDurationAsSeconds(second, regex),\n  );\n}\n\n/**\n * Adds together two time strings in HH:MM:SS format and returns the result as a new time string.\n * This function works by converting both time strings to seconds, adding them together, and then\n * converting the result back to an HH:MM:SS format.\n *\n * @param {string} first - The first time string in HH:MM:SS format.\n * @param {string} second - The second time string in HH:MM:SS format.\n * @param {RegExp|string} timeRegex - The regular expression used to validate and parse the time strings.\n *                                   If a string is provided, it will be converted to a RegExp.\n * @return {string} A new time string in HH:MM:SS format representing the sum of the two input times.\n *\n * @example\n * // Returns \"02:00:00\" (1 hour + 1 hour = 2 hours)\n * addHHMMSSTimeStrings(\"01:00:00\", \"01:00:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:00\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:45\" (1 hour + 30 minutes and 45 seconds = 1 hour, 30 minutes, and 45 seconds)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport function addHHMMSSTimeStrings(\n  first: string,\n  second: string,\n  timeRegex: RegExp | string,\n): string {\n  if (typeof timeRegex === \"string\") {\n    timeRegex = new RegExp(timeRegex);\n  }\n  return getSecondsAsHHMMSS(\n    getTimeAsSeconds(first, timeRegex) + getTimeAsSeconds(second, timeRegex),\n  );\n}\n\n/**\n * Flattens a nested JSON object into a flat object with dot notation for nested properties.\n * This function recursively traverses the object and creates new keys using dot notation\n * for nested objects and bracket notation for arrays.\n *\n * @param {StringKeyMap} data - The nested object to flatten.\n * @return {StringKeyMap} A flattened object where nested properties are represented with dot notation.\n *\n * @example\n * // Returns { \"a\": 1, \"b.c\": 2, \"b.d\": 3, \"e[0]\": 4, \"e[1]\": 5 }\n * flatten({\n *   a: 1,\n *   b: { c: 2, d: 3 },\n *   e: [4, 5]\n * });\n *\n * @example\n * // Returns { \"\": [] } for an empty array\n * flatten([]);\n *\n * @example\n * // Returns { \"\": {} } for an empty object\n * flatten({});\n */\nexport function flatten(data: StringKeyMap): StringKeyMap {\n  const result: StringKeyMap = {};\n\n  /**\n   * Recurse through the object\n   * @param {*} cur\n   * @param {*} prop\n   */\n  function recurse(cur: any, prop: any) {\n    if (Object(cur) !== cur) {\n      result[prop] = cur;\n    } else if (Array.isArray(cur)) {\n      // Use forEach instead of for loop\n      cur.forEach((item, i) => {\n        recurse(item, `${prop}[${i}]`);\n      });\n\n      if (cur.length === 0) result[prop] = [];\n    } else {\n      const keys = Object.keys(cur).filter((p) => Object.prototype.hasOwnProperty.call(cur, p));\n\n      const isEmpty = keys.length === 0;\n\n      // Use forEach instead of for...in loop\n      keys.forEach((p) => {\n        recurse(cur[p], prop ? `${prop}.${p}` : p);\n      });\n\n      if (isEmpty && prop) result[prop] = {};\n    }\n  }\n\n  recurse(data, \"\");\n  return result;\n}\n\n/**\n * Converts a flattened object back into a nested object structure.\n * This function is the inverse of `flatten()`. It parses dot notation and bracket notation\n * in property names to recreate the original nested structure.\n *\n * @param {StringKeyMap} data - The flattened object to unflatten.\n * @return {object} A nested object recreated from the flattened structure.\n *\n * @example\n * // Returns { a: 1, b: { c: 2, d: 3 }, e: [4, 5] }\n * unflatten({\n *   \"a\": 1,\n *   \"b.c\": 2,\n *   \"b.d\": 3,\n *   \"e[0]\": 4,\n *   \"e[1]\": 5\n * });\n *\n * @example\n * // Handles array indices correctly\n * unflatten({\n *   \"users[0].name\": \"John\",\n *   \"users[0].email\": \"john@example.com\",\n *   \"users[1].name\": \"Jane\",\n *   \"users[1].email\": \"jane@example.com\"\n * });\n * // Returns:\n * // {\n * //   users: [\n * //     { name: \"John\", email: \"john@example.com\" },\n * //     { name: \"Jane\", email: \"jane@example.com\" }\n * //   ]\n * // }\n */\nexport function unflatten(data: StringKeyMap): object {\n  \"use strict\";\n\n  if (Object(data) !== data || Array.isArray(data)) return data;\n  const result: StringKeyMap = {};\n\n  // Regex pattern for parsing property paths\n  const pattern = /\\.?([^.[\\]]+)|\\[(\\d+)]/g;\n\n  // Get all own properties and process them\n  Object.keys(data)\n    .filter((p) => Object.prototype.hasOwnProperty.call(data, p))\n    .forEach((p) => {\n      let cur = result;\n      let prop = \"\";\n\n      // Create a new regex instance for each property to reset lastIndex\n      const regex = new RegExp(pattern);\n\n      // Process all matches in the property path\n      Array.from({ length: p.match(new RegExp(pattern, \"g\"))?.length ?? 0 }, () =>\n        regex.exec(p),\n      ).forEach((m) => {\n        if (m) {\n          // Create array or object as needed\n          cur = (cur[prop] ?? (cur[prop] = m[2] ? [] : ({} as StringKeyMap))) as StringKeyMap;\n          prop = m[2] || m[1];\n        }\n      });\n\n      cur[prop] = data[p];\n    });\n\n  return (result[\"\"] ?? result) as object;\n}\n\n/**\n * Counts the number of decimal places in a number.\n * This function handles both integer and floating-point numbers.\n *\n * @param {number} num - The number to analyze.\n * @return {number} The number of decimal places. Returns 0 for integers or if the number doesn't have a decimal point.\n *\n * @example\n * // Returns 0\n * countDecimals(42);\n *\n * @example\n * // Returns 2\n * countDecimals(3.14);\n *\n * @example\n * // Returns 5\n * countDecimals(1.23456);\n */\nexport function countDecimals(num: number): number {\n  if (Math.floor(num) === num || String(num)?.indexOf?.(\".\") < 0) return 0;\n  const parts = num.toString().split(\".\")?.[1];\n  return parts?.length ?? 0;\n}\n\n/**\n * Formats SCORM messages for consistent and readable logging.\n * This function pads the function name and CMI element to create aligned log messages\n * that are easier to read in log files or console output.\n *\n * @param {string} functionName - The name of the function that generated the message.\n * @param {string} message - The message content to be logged.\n * @param {string} [CMIElement] - Optional. The CMI element related to the message.\n * @return {string} A formatted message string with consistent padding.\n *\n * @example\n * // Returns \"initialize          : Successfully initialized\"\n * formatMessage(\"initialize\", \"Successfully initialized\");\n *\n * @example\n * // Returns \"getValue            : cmi.core.student_id                                             : 12345\"\n * formatMessage(\"getValue\", \"12345\", \"cmi.core.student_id\");\n *\n * @example\n * // Returns \"setValue            : cmi.core.lesson_status                                          : completed\"\n * formatMessage(\"setValue\", \"completed\", \"cmi.core.lesson_status\");\n */\nexport function formatMessage(functionName: string, message: string, CMIElement?: string): string {\n  const baseLength = 20;\n\n  // Use string padding instead of loops\n  const paddedFunction = functionName.padEnd(baseLength);\n  let messageString = `${paddedFunction}: `;\n\n  if (CMIElement) {\n    const CMIElementBaseLength = 70;\n    // Add CMIElement and pad to the required length\n    messageString += CMIElement;\n    messageString = messageString.padEnd(CMIElementBaseLength);\n  }\n\n  // Add the message (or empty string if null/undefined)\n  messageString += message ?? \"\";\n\n  return messageString;\n}\n\n/**\n * Checks if a string contains a specific pattern using regular expression matching.\n * This function is a wrapper around JavaScript's String.match() method that handles\n * null/undefined values gracefully.\n *\n * @param {string} str - The string to search within. If null or undefined, returns false.\n * @param {string} tester - The pattern to search for. Can be a regular expression pattern.\n * @return {boolean} True if the pattern is found in the string, false otherwise.\n *\n * @example\n * // Returns true\n * stringMatches(\"Hello, world!\", \"world\");\n *\n * @example\n * // Returns true\n * stringMatches(\"The quick brown fox\", \"\\\\w+\\\\s+\\\\w+\");\n *\n * @example\n * // Returns false\n * stringMatches(\"Hello, world!\", \"universe\");\n *\n * @example\n * // Returns false (handles null gracefully)\n * stringMatches(null, \"test\");\n */\nexport function stringMatches(str: string, tester: string): boolean {\n  return str?.match(tester) !== null;\n}\n\n/**\n * Creates a memoized (cached) version of a function for performance optimization.\n * This function caches the results of previous calls with the same arguments,\n * avoiding redundant calculations for repeated calls with the same input.\n *\n * @template T - The type of the function to memoize\n * @param {T} fn - The function to memoize\n * @param {Function} [keyFn] - Optional function to generate a custom cache key.\n *                           Useful for functions with complex arguments that can't be serialized.\n * @return {T} A memoized version of the input function with the same signature\n *\n * @example\n * // Basic usage with a simple function\n * const memoizedAdd = memoize((a, b) => {\n *   console.log('Calculating...');\n *   return a + b;\n * });\n *\n * memoizedAdd(1, 2); // Logs \"Calculating...\" and returns 3\n * memoizedAdd(1, 2); // Returns 3 without logging (uses cached result)\n *\n * @example\n * // Using a custom key function for objects that can't be serialized\n * const memoizedProcessUser = memoize(\n *   (user) => {\n *     console.log('Processing user...');\n *     return { ...user, processed: true };\n *   },\n *   (user) => user.id // Use user.id as the cache key\n * );\n *\n * memoizedProcessUser({ id: 123, name: 'John' }); // Logs and processes\n * memoizedProcessUser({ id: 123, name: 'John' }); // Uses cached result\n */\nexport function memoize<T extends (...args: any[]) => any>(\n  fn: T,\n  keyFn?: (...args: Parameters<T>) => string,\n): T {\n  const cache = new Map<string, ReturnType<T>>();\n\n  return ((...args: Parameters<T>): ReturnType<T> => {\n    const key = keyFn ? keyFn(...args) : JSON.stringify(args);\n\n    return cache.has(key)\n      ? (cache.get(key) as ReturnType<T>)\n      : (() => {\n          const result = fn(...args);\n          cache.set(key, result);\n          return result;\n        })();\n  }) as T;\n}\n","import { BaseScormValidationError } from \"../../exceptions\";\nimport { memoize } from \"../../utilities\";\n\n/**\n * Check if the value matches the proper format. If not, throw proper error code.\n *\n * @param {string} value\n * @param {string} regexPattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @param {boolean} [allowEmptyString]\n * @return {boolean}\n */\nexport const checkValidFormat = memoize(\n  (\n    CMIElement: string,\n    value: string,\n    regexPattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n    allowEmptyString?: boolean,\n  ): boolean => {\n    // noinspection SuspiciousTypeOfGuard\n    if (typeof value !== \"string\") {\n      return false;\n    }\n    const formatRegex = new RegExp(regexPattern);\n    const matches = value.match(formatRegex);\n    if (allowEmptyString && value === \"\") {\n      return true;\n    }\n    if (value === undefined || !matches || matches[0] === \"\") {\n      throw new errorClass(CMIElement, errorCode);\n    }\n    return true;\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, regexPattern, errorCode, _errorClass, allowEmptyString) => {\n    // Use typeof for non-string values to ensure consistent cache keys\n    // noinspection SuspiciousTypeOfGuard\n    const valueKey = typeof value === \"string\" ? value : `[${typeof value}]`;\n    return `${CMIElement}:${valueKey}:${regexPattern}:${errorCode}:${allowEmptyString || false}`;\n  },\n);\n\n/**\n * Check if the value matches the proper range. If not, throw proper error code.\n *\n * @param {any} value\n * @param {string} rangePattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @return {boolean}\n */\nexport const checkValidRange = memoize(\n  (\n    CMIElement: string,\n    value: any,\n    rangePattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean => {\n    const ranges = rangePattern.split(\"#\");\n    value = value * 1.0;\n    if (value >= ranges[0]) {\n      if (ranges[1] === \"*\" || value <= ranges[1]) {\n        return true;\n      } else {\n        throw new errorClass(CMIElement, errorCode);\n      }\n    } else {\n      throw new errorClass(CMIElement, errorCode);\n    }\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, rangePattern, errorCode, _errorClass) =>\n    `${CMIElement}:${value}:${rangePattern}:${errorCode}`,\n);\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm12_errors.TYPE_MISMATCH,\n    Scorm12ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidRange(\n  CMIElement: string,\n  value: any,\n  rangePattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  if (!allowEmptyString && value === \"\") {\n    throw new Scorm12ValidationError(CMIElement, scorm12_errors.VALUE_OUT_OF_RANGE);\n  }\n\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm12_errors.VALUE_OUT_OF_RANGE,\n    Scorm12ValidationError,\n  );\n}\n","import { BaseScormValidationError } from \"../exceptions\";\nimport { checkValidFormat, checkValidRange } from \"../cmi/common/validation\";\nimport { check12ValidFormat, check12ValidRange } from \"../cmi/scorm12/validation\";\nimport { scorm12_regex } from \"../constants/regex\";\nimport { scorm12_errors } from \"../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../exceptions/scorm12_exceptions\";\n\n/**\n * Service for validating CMI data model properties\n */\nexport class ValidationService {\n  /**\n   * Validates a score property (raw, min, max)\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @param {string} decimalRegex - The regex pattern for decimal validation\n   * @param {string | false} scoreRange - The range pattern for score validation, or false if no range validation is needed\n   * @param {number} invalidTypeCode - The error code for invalid type\n   * @param {number} invalidRangeCode - The error code for invalid range\n   * @param {typeof BaseScormValidationError} errorClass - The error class to use for validation errors\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScore(\n    CMIElement: string,\n    value: string,\n    decimalRegex: string,\n    scoreRange: string | false,\n    invalidTypeCode: number,\n    invalidRangeCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean {\n    return (\n      checkValidFormat(CMIElement, value, decimalRegex, invalidTypeCode, errorClass) &&\n      (!scoreRange || checkValidRange(CMIElement, value, scoreRange, invalidRangeCode, errorClass))\n    );\n    // This line should never be reached due to exceptions being thrown\n  }\n\n  /**\n   * Validates a SCORM 1.2 audio property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Audio(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.audio_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 language property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Language(CMIElement: string, value: string): boolean {\n    return check12ValidFormat(CMIElement, value, scorm12_regex.CMIString256);\n  }\n\n  /**\n   * Validates a SCORM 1.2 speed property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Speed(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.speed_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 text property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Text(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.text_range)\n    );\n  }\n\n  /**\n   * Validates if a property is read-only\n   *\n   * @param {string} CMIElement\n   * @param {boolean} initialized - Whether the object is initialized\n   * @throws {BaseScormValidationError} - Throws an error if the object is initialized\n   */\n  validateReadOnly(CMIElement: string, initialized: boolean): void {\n    if (initialized) {\n      throw new Scorm12ValidationError(CMIElement, scorm12_errors.READ_ONLY_ELEMENT);\n    }\n  }\n}\n\n// Export a singleton instance of the ValidationService\nexport const validationService = new ValidationService();\n","import { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"./base_cmi\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { validationService } from \"../../services/ValidationService\";\nimport { ScoreObject } from \"../../types/api_types\";\n\n/**\n * Base class for cmi *.score objects\n */\nexport class CMIScore extends BaseCMI {\n  private readonly __children: string;\n  private readonly __score_range: string | false;\n  private readonly __invalid_error_code: number;\n  private readonly __invalid_type_code: number;\n  private readonly __invalid_range_code: number;\n  private readonly __decimal_regex: string;\n  private readonly __error_class: typeof BaseScormValidationError;\n  protected _raw = \"\";\n  protected _min = \"\";\n  protected _max: string;\n\n  /**\n   * Constructor for *.score\n   * @param {\n   *     score_children: string,\n   *     score_range: string,\n   *     max: string,\n   *     invalidErrorCode: number,\n   *     invalidTypeCode: number,\n   *     invalidRangeCode: number,\n   *     decimalRegex: string,\n   *     errorClass: typeof BaseScormValidationError\n   * } params\n   */\n  constructor(params: {\n    CMIElement: string;\n    score_children?: string;\n    score_range?: string;\n    max?: string;\n    invalidErrorCode?: number;\n    invalidTypeCode?: number;\n    invalidRangeCode?: number;\n    decimalRegex?: string;\n    errorClass: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n\n    this.__children = params.score_children || scorm12_constants.score_children;\n    this.__score_range = !params.score_range ? false : scorm12_regex.score_range;\n    this._max = params.max || params.max === \"\" ? params.max : \"100\";\n    this.__invalid_error_code = params.invalidErrorCode || scorm12_errors.INVALID_SET_VALUE;\n    this.__invalid_type_code = params.invalidTypeCode || scorm12_errors.TYPE_MISMATCH;\n    this.__invalid_range_code = params.invalidRangeCode || scorm12_errors.VALUE_OUT_OF_RANGE;\n    this.__decimal_regex = params.decimalRegex || scorm12_regex.CMIDecimal;\n    this.__error_class = params.errorClass;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this.__error_class(this._cmi_element + \"._children\", this.__invalid_error_code);\n  }\n\n  /**\n   * Getter for _raw\n   * @return {string}\n   */\n  get raw(): string {\n    return this._raw;\n  }\n\n  /**\n   * Setter for _raw\n   * @param {string} raw\n   */\n  set raw(raw: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".raw\",\n        raw,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._raw = raw;\n    }\n  }\n\n  /**\n   * Getter for _min\n   * @return {string}\n   */\n  get min(): string {\n    return this._min;\n  }\n\n  /**\n   * Setter for _min\n   * @param {string} min\n   */\n  set min(min: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".min\",\n        min,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._min = min;\n    }\n  }\n\n  /**\n   * Getter for _max\n   * @return {string}\n   */\n  get max(): string {\n    return this._max;\n  }\n\n  /**\n   * Setter for _max\n   * @param {string} max\n   */\n  set max(max: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".max\",\n        max,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._max = max;\n    }\n  }\n\n  /**\n   * Getter for _score_range\n   * @return {string | false}\n   */\n  public getScoreObject(): ScoreObject {\n    const scoreObject: ScoreObject = {};\n    if (!Number.isNaN(Number.parseFloat(this.raw))) {\n      scoreObject.raw = Number.parseFloat(this.raw);\n    }\n    if (!Number.isNaN(Number.parseFloat(this.min))) {\n      scoreObject.min = Number.parseFloat(this.min);\n    }\n    if (!Number.isNaN(Number.parseFloat(this.max))) {\n      scoreObject.max = Number.parseFloat(this.max);\n    }\n    return scoreObject;\n  }\n\n  /**\n   * toJSON for *.score\n   * @return {\n   *    {\n   *      min: string,\n   *      max: string,\n   *      raw: string\n   *    }\n   *    }\n   */\n  toJSON(): {\n    min: string;\n    max: string;\n    raw: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { check12ValidFormat } from \"../scorm12/validation\";\nimport * as Util from \"../../utilities\";\n\n/**\n * Class representing the `cmi.core` object\n * @extends BaseCMI\n */\nexport class CMICore extends BaseCMI {\n  /**\n   * Constructor for `cmi.core`\n   */\n  constructor() {\n    super(\"cmi.core\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.core.score\",\n      score_children: scorm12_constants.score_children,\n      score_range: scorm12_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n\n  public readonly score: CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  private __children = scorm12_constants.core_children;\n  private _student_id = \"\";\n  private _student_name = \"\";\n  private _lesson_location = \"\";\n  private _credit = \"\";\n  private _lesson_status = \"not attempted\";\n  private _entry = \"\";\n  private _total_time = \"\";\n  private _lesson_mode = \"normal\";\n  private _exit = \"\";\n  private _session_time = \"00:00:00\";\n  private _suspend_data = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._exit = \"\";\n    this._entry = \"\";\n\n    /**\n     * Resetting ensures we accurately track the time spent on each individual SCO session independently. Each new\n     * session should start from zero, so we can reset cmi.core.session_time at the beginning of each session.\n     */\n    this._session_time = \"00:00:00\";\n\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for _student_id\n   * @return {string}\n   */\n  get student_id(): string {\n    return this._student_id;\n  }\n\n  /**\n   * Setter for _student_id. Can only be called before  initialization.\n   * @param {string} student_id\n   */\n  set student_id(student_id: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".student_id\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._student_id = student_id;\n    }\n  }\n\n  /**\n   * Getter for _student_name\n   * @return {string}\n   */\n  get student_name(): string {\n    return this._student_name;\n  }\n\n  /**\n   * Setter for _student_name. Can only be called before  initialization.\n   * @param {string} student_name\n   */\n  set student_name(student_name: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".student_name\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._student_name = student_name;\n    }\n  }\n\n  /**\n   * Getter for _lesson_location\n   * @return {string}\n   */\n  get lesson_location(): string {\n    return this._lesson_location;\n  }\n\n  /**\n   * Setter for _lesson_location\n   * @param {string} lesson_location\n   */\n  set lesson_location(lesson_location: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".lesson_location\",\n        lesson_location,\n        scorm12_regex.CMIString256,\n        true,\n      )\n    ) {\n      this._lesson_location = lesson_location;\n    }\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this._credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before  initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".credit\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._credit = credit;\n    }\n  }\n\n  /**\n   * Getter for _lesson_status\n   * @return {string}\n   */\n  get lesson_status(): string {\n    return this._lesson_status;\n  }\n\n  /**\n   * Setter for _lesson_status\n   * @param {string} lesson_status\n   */\n  set lesson_status(lesson_status: string) {\n    if (this.initialized) {\n      if (\n        check12ValidFormat(\n          this._cmi_element + \".lesson_status\",\n          lesson_status,\n          scorm12_regex.CMIStatus,\n        )\n      ) {\n        this._lesson_status = lesson_status;\n      }\n    } else {\n      if (\n        check12ValidFormat(\n          this._cmi_element + \".lesson_status\",\n          lesson_status,\n          scorm12_regex.CMIStatus2,\n        )\n      ) {\n        this._lesson_status = lesson_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this._entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before  initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".entry\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._entry = entry;\n    }\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this._total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before  initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".total_time\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._total_time = total_time;\n    }\n  }\n\n  /**\n   * Getter for _lesson_mode\n   * @return {string}\n   */\n  get lesson_mode(): string {\n    return this._lesson_mode;\n  }\n\n  /**\n   * Setter for _lesson_mode. Can only be called before  initialization.\n   * @param {string} lesson_mode\n   */\n  set lesson_mode(lesson_mode: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".lesson_mode\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._lesson_mode = lesson_mode;\n    }\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".exit\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    if (check12ValidFormat(this._cmi_element + \".exit\", exit, scorm12_regex.CMIExit, true)) {\n      this._exit = exit;\n    }\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".session_time\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".session_time\",\n        session_time,\n        scorm12_regex.CMITimespan,\n      )\n    ) {\n      this._session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this._suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".suspend_data\",\n        suspend_data,\n        scorm12_regex.CMIString4096,\n        true,\n      )\n    ) {\n      this._suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   * @param {number} start_time\n   * @return {string}\n   */\n  getCurrentTotalTime(start_time: number | undefined): string {\n    let sessionTime = this._session_time;\n    const startTime = start_time;\n\n    if (typeof startTime !== \"undefined\" && startTime !== null) {\n      const seconds = new Date().getTime() - startTime;\n      sessionTime = Util.getSecondsAsHHMMSS(seconds / 1000);\n    }\n\n    return Util.addHHMMSSTimeStrings(\n      this._total_time,\n      sessionTime,\n      new RegExp(scorm12_regex.CMITimespan),\n    );\n  }\n\n  /**\n   * toJSON for cmi.core\n   *\n   * @return {\n   *    {\n   *      student_name: string,\n   *      entry: string,\n   *      exit: string,\n   *      score: CMIScore,\n   *      student_id: string,\n   *      lesson_mode: string,\n   *      lesson_location: string,\n   *      lesson_status: string,\n   *      credit: string,\n   *      session_time: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    student_name: string;\n    entry: string;\n    exit: string;\n    score: CMIScore;\n    student_id: string;\n    lesson_mode: string;\n    lesson_location: string;\n    lesson_status: string;\n    credit: string;\n    session_time: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      student_id: this.student_id,\n      student_name: this.student_name,\n      lesson_location: this.lesson_location,\n      credit: this.credit,\n      lesson_status: this.lesson_status,\n      entry: this.entry,\n      lesson_mode: this.lesson_mode,\n      exit: this.exit,\n      session_time: this.session_time,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"./base_cmi\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Base class for cmi *.n objects\n */\nexport class CMIArray extends BaseCMI {\n  private readonly _errorCode: number;\n  private readonly _errorClass: typeof BaseScormValidationError;\n  private readonly __children: string;\n  public childArray: any[];\n\n  /**\n   * Constructor cmi *.n arrays\n   * @param {object} params\n   */\n  constructor(params: {\n    CMIElement: string;\n    children: string;\n    errorCode?: number;\n    errorClass?: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n    this.__children = params.children;\n    this._errorCode = params.errorCode || scorm12_errors.GENERAL;\n    this._errorClass = params.errorClass || BaseScormValidationError;\n    this.childArray = [];\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(wipe: boolean = false): void {\n    this._initialized = false;\n    if (wipe) {\n      this.childArray = [];\n    } else {\n      // Reset all children\n      for (let i = 0; i < this.childArray.length; i++) {\n        this.childArray[i].reset();\n      }\n    }\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this._errorClass(this._cmi_element + \"._children\", this._errorCode);\n  }\n\n  /**\n   * Getter for _count\n   * @return {number}\n   */\n  get _count(): number {\n    return this.childArray.length;\n  }\n\n  /**\n   * Setter for _count. Just throws an error.\n   * @param {number} _count\n   */\n  set _count(_count: number) {\n    throw new this._errorClass(this._cmi_element + \"._count\", this._errorCode);\n  }\n\n  /**\n   * toJSON for *.n arrays\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result: { [key: string]: any } = {};\n    for (let i = 0; i < this.childArray.length; i++) {\n      result[i + \"\"] = this.childArray[i];\n    }\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { check12ValidFormat } from \"./validation\";\nimport { CMIArray } from \"../common/array\";\n\n/**\n * Class representing SCORM 1.2's `cmi.objectives` object\n * @extends CMIArray\n */\nexport class CMIObjectives extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives`\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.objectives\",\n      children: scorm12_constants.objectives_children,\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super(\"cmi.objectives.n\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.objectives.n.score\",\n      score_children: scorm12_constants.score_children,\n      score_range: scorm12_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n\n  public readonly score: CMIScore;\n\n  private _id = \"\";\n  private _status = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._id = \"\";\n    this._status = \"\";\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check12ValidFormat(this._cmi_element + \".id\", id, scorm12_regex.CMIIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _status\n   * @return {string}\n   */\n  get status(): string {\n    return this._status;\n  }\n\n  /**\n   * Setter for _status\n   * @param {string} status\n   */\n  set status(status: string) {\n    if (check12ValidFormat(this._cmi_element + \".status\", status, scorm12_regex.CMIStatus2)) {\n      this._status = status;\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   * @return {\n   *    {\n   *      id: string,\n   *      status: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    status: string;\n    score: CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      status: this.status,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { validationService } from \"../../services/ValidationService\";\n\n/**\n * Class representing the SCORM 1.2 cmi.student_data object\n * @extends BaseCMI\n */\nexport class CMIStudentData extends BaseCMI {\n  private readonly __children;\n  private _mastery_score = \"\";\n  private _max_time_allowed = \"\";\n  private _time_limit_action = \"\";\n\n  /**\n   * Constructor for cmi.student_data\n   * @param {string} student_data_children\n   */\n  constructor(student_data_children?: string) {\n    super(\"cmi.student_data\");\n    this.__children = student_data_children\n      ? student_data_children\n      : scorm12_constants.student_data_children;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for _master_score\n   * @return {string}\n   */\n  get mastery_score(): string {\n    return this._mastery_score;\n  }\n\n  /**\n   * Setter for _master_score. Can only be called before  initialization.\n   * @param {string} mastery_score\n   */\n  set mastery_score(mastery_score: string) {\n    validationService.validateReadOnly(this._cmi_element + \".mastery_score\", this.initialized);\n    this._mastery_score = mastery_score;\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this._max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before  initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    validationService.validateReadOnly(this._cmi_element + \".max_time_allowed\", this.initialized);\n    this._max_time_allowed = max_time_allowed;\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this._time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before  initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    validationService.validateReadOnly(this._cmi_element + \".time_limit_action\", this.initialized);\n    this._time_limit_action = time_limit_action;\n  }\n\n  /**\n   * toJSON for cmi.student_data\n   *\n   * @return {\n   *    {\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      mastery_score: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    mastery_score: string;\n    max_time_allowed: string;\n    time_limit_action: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      mastery_score: this.mastery_score,\n      max_time_allowed: this.max_time_allowed,\n      time_limit_action: this.time_limit_action,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { validationService } from \"../../services/ValidationService\";\n\n/**\n * Class representing the SCORM 1.2 cmi.student_preference object\n * @extends BaseCMI\n */\nexport class CMIStudentPreference extends BaseCMI {\n  private readonly __children;\n\n  /**\n   * Constructor for cmi.student_preference\n   * @param {string} student_preference_children\n   */\n  constructor(student_preference_children?: string) {\n    super(\"cmi.student_preference\");\n    this.__children = student_preference_children\n      ? student_preference_children\n      : scorm12_constants.student_preference_children;\n  }\n\n  private _audio = \"\";\n  private _language = \"\";\n  private _speed = \"\";\n  private _text = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for _audio\n   * @return {string}\n   */\n  get audio(): string {\n    return this._audio;\n  }\n\n  /**\n   * Setter for _audio\n   * @param {string} audio\n   */\n  set audio(audio: string) {\n    if (validationService.validateScorm12Audio(this._cmi_element + \".audio\", audio)) {\n      this._audio = audio;\n    }\n  }\n\n  /**\n   * Getter for _language\n   * @return {string}\n   */\n  get language(): string {\n    return this._language;\n  }\n\n  /**\n   * Setter for _language\n   * @param {string} language\n   */\n  set language(language: string) {\n    if (validationService.validateScorm12Language(this._cmi_element + \".language\", language)) {\n      this._language = language;\n    }\n  }\n\n  /**\n   * Getter for _speed\n   * @return {string}\n   */\n  get speed(): string {\n    return this._speed;\n  }\n\n  /**\n   * Setter for _speed\n   * @param {string} speed\n   */\n  set speed(speed: string) {\n    if (validationService.validateScorm12Speed(this._cmi_element + \".speed\", speed)) {\n      this._speed = speed;\n    }\n  }\n\n  /**\n   * Getter for _text\n   * @return {string}\n   */\n  get text(): string {\n    return this._text;\n  }\n\n  /**\n   * Setter for _text\n   * @param {string} text\n   */\n  set text(text: string) {\n    if (validationService.validateScorm12Text(this._cmi_element + \".text\", text)) {\n      this._text = text;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_preference\n   *\n   * @return {\n   *    {\n   *      audio: string,\n   *      language: string,\n   *      speed: string,\n   *      text: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    audio: string;\n    language: string;\n    speed: string;\n    text: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio: this.audio,\n      language: this.language,\n      speed: this.speed,\n      text: this.text,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check12ValidFormat, check12ValidRange } from \"./validation\";\nimport { scorm12_regex } from \"../../constants/regex\";\n\n/**\n * Class representing the SCORM 1.2 `cmi.interactions`\n * @extends CMIArray\n */\nexport class CMIInteractions extends CMIArray {\n  /**\n   * Constructor for `cmi.interactions`\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.interactions\",\n      children: scorm12_constants.interactions_children,\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n object\n   */\n  constructor() {\n    super(\"cmi.interactions.n\");\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: Scorm12ValidationError,\n      children: scorm12_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.correct_responses\",\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: Scorm12ValidationError,\n      children: scorm12_constants.correct_responses_children,\n    });\n  }\n\n  public readonly objectives: CMIArray;\n  public readonly correct_responses: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  private _id = \"\";\n  private _time = \"\";\n  private _type = \"\";\n  private _weighting = \"\";\n  private _student_response = \"\";\n  private _result = \"\";\n  private _latency = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n\n    this._id = \"\";\n    this._time = \"\";\n    this._type = \"\";\n    this._weighting = \"\";\n    this._student_response = \"\";\n    this._result = \"\";\n    this._latency = \"\";\n\n    this.objectives?.reset();\n    this.correct_responses?.reset();\n  }\n\n  /**\n   * Getter for _id. Should only be called during JSON export.\n   * @return {string}\n   */\n  get id(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".id\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check12ValidFormat(this._cmi_element + \".id\", id, scorm12_regex.CMIIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get time(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".time\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._time;\n  }\n\n  /**\n   * Setter for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (check12ValidFormat(this._cmi_element + \".time\", time, scorm12_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * Getter for _type. Should only be called during JSON export.\n   * @return {string}\n   */\n  get type(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".type\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._type;\n  }\n\n  /**\n   * Setter for _type\n   * @param {string} type\n   */\n  set type(type: string) {\n    if (check12ValidFormat(this._cmi_element + \".type\", type, scorm12_regex.CMIType)) {\n      this._type = type;\n    }\n  }\n\n  /**\n   * Getter for _weighting. Should only be called during JSON export.\n   * @return {string}\n   */\n  get weighting(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".weighting\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._weighting;\n  }\n\n  /**\n   * Setter for _weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting: string) {\n    if (\n      check12ValidFormat(this._cmi_element + \".weighting\", weighting, scorm12_regex.CMIDecimal) &&\n      check12ValidRange(this._cmi_element + \".weighting\", weighting, scorm12_regex.weighting_range)\n    ) {\n      this._weighting = weighting;\n    }\n  }\n\n  /**\n   * Getter for _student_response. Should only be called during JSON export.\n   * @return {string}\n   */\n  get student_response(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".student_response\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._student_response;\n  }\n\n  /**\n   * Setter for _student_response\n   * @param {string} student_response\n   */\n  set student_response(student_response: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".student_response\",\n        student_response,\n        scorm12_regex.CMIFeedback,\n        true,\n      )\n    ) {\n      this._student_response = student_response;\n    }\n  }\n\n  /**\n   * Getter for _result. Should only be called during JSON export.\n   * @return {string}\n   */\n  get result(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".result\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._result;\n  }\n\n  /**\n   * Setter for _result\n   * @param {string} result\n   */\n  set result(result: string) {\n    if (check12ValidFormat(this._cmi_element + \".result\", result, scorm12_regex.CMIResult)) {\n      this._result = result;\n    }\n  }\n\n  /**\n   * Getter for _latency. Should only be called during JSON export.\n   * @return {string}\n   */\n  get latency(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".latency\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._latency;\n  }\n\n  /**\n   * Setter for _latency\n   * @param {string} latency\n   */\n  set latency(latency: string) {\n    if (check12ValidFormat(this._cmi_element + \".latency\", latency, scorm12_regex.CMITimespan)) {\n      this._latency = latency;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      time: string,\n   *      type: string,\n   *      weighting: string,\n   *      student_response: string,\n   *      result: string,\n   *      latency: string,\n   *      objectives: CMIArray,\n   *      correct_responses: CMIArray\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    time: string;\n    type: string;\n    weighting: string;\n    student_response: string;\n    result: string;\n    latency: string;\n    objectives: CMIArray;\n    correct_responses: CMIArray;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      time: this.time,\n      type: this.type,\n      weighting: this.weighting,\n      student_response: this.student_response,\n      result: this.result,\n      latency: this.latency,\n      objectives: this.objectives,\n      correct_responses: this.correct_responses,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n.objectives.n\");\n  }\n\n  private _id = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._id = \"\";\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check12ValidFormat(this._cmi_element + \".id\", id, scorm12_regex.CMIIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.correct_responses.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.correct_responses.n\n   */\n  constructor() {\n    super(\"cmi.interactions.correct_responses.n\");\n  }\n\n  private _pattern = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._pattern = \"\";\n  }\n\n  /**\n   * Getter for _pattern\n   * @return {string}\n   */\n  get pattern(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".pattern\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._pattern;\n  }\n\n  /**\n   * Setter for _pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern: string) {\n    if (\n      check12ValidFormat(this._cmi_element + \".pattern\", pattern, scorm12_regex.CMIFeedback, true)\n    ) {\n      this._pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.correct_responses.n\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    pattern: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      pattern: this._pattern,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { BaseRootCMI } from \"../common/base_cmi\";\nimport { check12ValidFormat } from \"./validation\";\nimport { CMICore } from \"../aicc/core\";\nimport { CMIObjectives } from \"./objectives\";\nimport { CMIStudentData } from \"./student_data\";\nimport { CMIStudentPreference } from \"./student_preference\";\nimport { CMIInteractions } from \"./interactions\";\n\n/**\n * Class representing the cmi object for SCORM 1.2\n */\nexport class CMI extends BaseRootCMI {\n  private readonly __children: string = \"\";\n  private __version: string = \"3.4\";\n  private _launch_data: string = \"\";\n  private _comments: string = \"\";\n  private _comments_from_lms: string = \"\";\n\n  /**\n   * Constructor for the SCORM 1.2 cmi object\n   * @param {string} cmi_children\n   * @param {(CMIStudentData|AICCCMIStudentData)} student_data\n   * @param {boolean} initialized\n   */\n  constructor(cmi_children?: string, student_data?: CMIStudentData, initialized?: boolean) {\n    super(\"cmi\");\n    if (initialized) this.initialize();\n    this.__children = cmi_children ? cmi_children : scorm12_constants.cmi_children;\n    this.core = new CMICore();\n    this.objectives = new CMIObjectives();\n    this.student_data = student_data ? student_data : new CMIStudentData();\n    this.student_preference = new CMIStudentPreference();\n    this.interactions = new CMIInteractions();\n  }\n\n  public core: CMICore;\n  public objectives: CMIObjectives;\n  public student_data: CMIStudentData;\n  public student_preference: CMIStudentPreference;\n  public interactions: CMIInteractions;\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._launch_data = \"\";\n    this._comments = \"\";\n    this.core?.reset();\n    this.objectives = new CMIObjectives();\n    this.interactions = new CMIInteractions();\n    this.student_data?.reset();\n    this.student_preference?.reset();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.core?.initialize();\n    this.objectives?.initialize();\n    this.student_data?.initialize();\n    this.student_preference?.initialize();\n    this.interactions?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions\n   *    }\n   *  }\n   */\n  toJSON(): {\n    suspend_data: string;\n    launch_data: string;\n    comments: string;\n    comments_from_lms: string;\n    core: CMICore;\n    objectives: CMIObjectives;\n    student_data: CMIStudentData;\n    student_preference: CMIStudentPreference;\n    interactions: CMIInteractions;\n  } {\n    this.jsonString = true;\n    const result = {\n      suspend_data: this.suspend_data,\n      launch_data: this.launch_data,\n      comments: this.comments,\n      comments_from_lms: this.comments_from_lms,\n      core: this.core,\n      objectives: this.objectives,\n      student_data: this.student_data,\n      student_preference: this.student_preference,\n      interactions: this.interactions,\n    };\n    this.jsonString = false;\n    return result;\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   */\n  get _version(): string {\n    return this.__version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._version\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this.core?.suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (this.core) {\n      this.core.suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this._launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before  initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".launch_data\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._launch_data = launch_data;\n    }\n  }\n\n  /**\n   * Getter for _comments\n   * @return {string}\n   */\n  get comments(): string {\n    return this._comments;\n  }\n\n  /**\n   * Setter for _comments\n   * @param {string} comments\n   */\n  set comments(comments: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".comments\",\n        comments,\n        scorm12_regex.CMIString4096,\n        true,\n      )\n    ) {\n      this._comments = comments;\n    }\n  }\n\n  /**\n   * Getter for _comments_from_lms\n   * @return {string}\n   */\n  get comments_from_lms(): string {\n    return this._comments_from_lms;\n  }\n\n  /**\n   * Setter for _comments_from_lms. Can only be called before  initialization.\n   * @param {string} comments_from_lms\n   */\n  set comments_from_lms(comments_from_lms: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".comments_from_lms\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._comments_from_lms = comments_from_lms;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string}\n   */\n  getCurrentTotalTime(): string {\n    return this.core.getCurrentTotalTime(this.start_time);\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { check12ValidFormat } from \"./validation\";\nimport { scorm12_regex } from \"../../constants/regex\";\n\n/**\n * Class for AICC Navigation object\n */\nexport class NAV extends BaseCMI {\n  /**\n   * Constructor for NAV object\n   */\n  constructor() {\n    super(\"cmi.nav\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._event = \"\";\n    this._initialized = false;\n  }\n\n  private _event = \"\";\n\n  /**\n   * Getter for _event\n   * @return {string}\n   */\n  get event(): string {\n    return this._event;\n  }\n\n  /**\n   * Setter for _event\n   * @param {string} event\n   */\n  set event(event: string) {\n    if (\n      event === \"\" ||\n      check12ValidFormat(this._cmi_element + \".event\", event, scorm12_regex.NAVEvent)\n    ) {\n      this._event = event;\n    }\n  }\n\n  /**\n   * toJSON for nav object\n   * @return {\n   *    {\n   *      event: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    event: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      event: this.event,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","// Using plain objects instead of enums for better compatibility with strip-only mode\n// This approach avoids TypeScript enum runtime code while maintaining the same API\n\n// NAVBoolean values\nexport const NAVBoolean = {\n  UNKNOWN: \"unknown\",\n  TRUE: \"true\",\n  FALSE: \"false\",\n};\n\n// Type for NAVBoolean values\nexport type NAVBoolean = (typeof NAVBoolean)[keyof typeof NAVBoolean];\n\n// SuccessStatus values\nexport const SuccessStatus = {\n  PASSED: \"passed\",\n  FAILED: \"failed\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for SuccessStatus values\nexport type SuccessStatus = (typeof SuccessStatus)[keyof typeof SuccessStatus];\n\n// CompletionStatus values\nexport const CompletionStatus = {\n  COMPLETED: \"completed\",\n  INCOMPLETE: \"incomplete\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for CompletionStatus values\nexport type CompletionStatus = (typeof CompletionStatus)[keyof typeof CompletionStatus];\n\n// LogLevelEnum values\nexport const LogLevelEnum = {\n  _: 0,\n  DEBUG: 1,\n  INFO: 2,\n  WARN: 3,\n  ERROR: 4,\n  NONE: 5,\n};\n\n// Type for LogLevelEnum values\nexport type LogLevelEnum = (typeof LogLevelEnum)[keyof typeof LogLevelEnum];\n","import { InternalSettings, LogLevel, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"./api_constants\";\nimport { LogLevelEnum } from \"./enums\";\n\n/**\n * Default settings for the SCORM API\n */\nexport const DefaultSettings: InternalSettings = {\n  autocommit: false,\n  autocommitSeconds: 10,\n  asyncCommit: false,\n  sendFullCommit: true,\n  lmsCommitUrl: false,\n  dataCommitFormat: \"json\",\n  commitRequestDataType: \"application/json;charset=UTF-8\",\n  autoProgress: false,\n  logLevel: LogLevelEnum.ERROR,\n  selfReportSessionTime: false,\n  alwaysSendTotalTime: false,\n  renderCommonCommitFields: false,\n  strict_errors: true,\n  xhrHeaders: {},\n  xhrWithCredentials: false,\n  fetchMode: \"cors\",\n  useBeaconInsteadOfFetch: \"never\",\n  responseHandler: async function (response: Response): Promise<ResultObject> {\n    if (typeof response !== \"undefined\") {\n      let httpResult = null;\n\n      // Handle both text() and json() response methods\n      try {\n        if (typeof response.json === \"function\") {\n          // Try to get JSON directly if the method exists\n          httpResult = await response.json();\n        } else if (typeof response.text === \"function\") {\n          // Fall back to text() if json() is not available\n          const responseText = await response.text();\n          if (responseText) {\n            httpResult = JSON.parse(responseText);\n          }\n        }\n      } catch (e) {\n        // If parsing fails, continue with null httpResult\n      }\n\n      if (httpResult === null || !{}.hasOwnProperty.call(httpResult, \"result\")) {\n        if (response.status === 200) {\n          return {\n            result: global_constants.SCORM_TRUE,\n            errorCode: 0,\n          };\n        } else {\n          return {\n            result: global_constants.SCORM_FALSE,\n            errorCode: 101,\n          };\n        }\n      } else {\n        return {\n          result: httpResult.result,\n          errorCode: httpResult.errorCode\n            ? httpResult.errorCode\n            : httpResult.result === global_constants.SCORM_TRUE\n              ? 0\n              : 101,\n        };\n      }\n    }\n    return {\n      result: global_constants.SCORM_FALSE,\n      errorCode: 101,\n    };\n  },\n  requestHandler: function (commitObject) {\n    return commitObject;\n  },\n  onLogMessage: defaultLogHandler,\n  scoItemIds: [],\n  scoItemIdValidator: false,\n  globalObjectiveIds: [],\n\n  // Offline support settings\n  enableOfflineSupport: false,\n  courseId: \"\",\n  syncOnInitialize: true,\n  syncOnTerminate: true,\n  maxSyncAttempts: 5,\n};\n\nexport function defaultLogHandler(messageLevel: LogLevel, logMessage: string): void {\n  switch (messageLevel) {\n    case \"4\":\n    case 4:\n    case \"ERROR\":\n    case LogLevelEnum.ERROR:\n      console.error(logMessage);\n      break;\n    case \"3\":\n    case 3:\n    case \"WARN\":\n    case LogLevelEnum.WARN:\n      console.warn(logMessage);\n      break;\n    case \"2\":\n    case 2:\n    case \"INFO\":\n    case LogLevelEnum.INFO:\n      console.info(logMessage);\n      break;\n    case \"1\":\n    case 1:\n    case \"DEBUG\":\n    case LogLevelEnum.DEBUG:\n      if (console.debug) {\n        console.debug(logMessage);\n      } else {\n        console.log(logMessage);\n      }\n      break;\n  }\n}\n","import BaseAPI from \"../BaseAPI\";\n\n/**\n * Private class that wraps a timeout call to the commit() function\n */\nexport class ScheduledCommit {\n  private _API;\n  private _cancelled = false;\n  private readonly _timeout;\n  private readonly _callback;\n\n  /**\n   * Constructor for ScheduledCommit\n   * @param {BaseAPI} API\n   * @param {number} when\n   * @param {string} callback\n   */\n  constructor(API: BaseAPI, when: number, callback: string) {\n    this._API = API;\n    this._timeout = setTimeout(this.wrapper.bind(this), when);\n    this._callback = callback;\n  }\n\n  /**\n   * Cancel any currently scheduled commit\n   */\n  cancel() {\n    this._cancelled = true;\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n  }\n\n  /**\n   * Wrap the API commit call to check if the call has already been cancelled\n   */\n  wrapper() {\n    if (!this._cancelled) {\n      (async () => await this._API.commit(this._callback))();\n    }\n  }\n}\n","import { CommitObject, InternalSettings, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { IHttpService } from \"../interfaces/services\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { StringKeyMap } from \"../utilities\";\n\n/**\n * Service for handling HTTP communication with the LMS\n */\nexport class HttpService implements IHttpService {\n  private settings: InternalSettings;\n  private error_codes: ErrorCode;\n\n  /**\n   * Constructor for HttpService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   */\n  constructor(settings: InternalSettings, error_codes: ErrorCode) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n  }\n\n  /**\n   * Sends HTTP requests to the LMS with special handling for immediate and standard requests.\n   *\n   * This method handles communication with the LMS server, implementing two distinct\n   * request handling strategies based on the context:\n   *\n   * 1. Immediate Mode (used during termination):\n   *    When immediate=true, the method:\n   *    - Initiates the fetch request but doesn't wait for it to complete\n   *    - Returns a success result immediately\n   *    - Processes the response asynchronously when it arrives\n   *\n   *    This is critical for browser compatibility during page unload/termination,\n   *    as some browsers (especially Chrome) may cancel synchronous or awaited\n   *    requests when a page is closing.\n   *\n   * 2. Standard Mode (normal operation):\n   *    When immediate=false, the method:\n   *    - Processes the request parameters through the configured requestHandler\n   *    - Awaits the fetch response completely\n   *    - Transforms the response using the configured responseHandler\n   *    - Triggers appropriate event listeners based on success/failure\n   *    - Returns the complete result with appropriate error codes\n   *\n   * The method also includes error handling to catch network failures or other\n   * exceptions that might occur during the request process.\n   *\n   * @param {string} url - The URL endpoint to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The data to send to the LMS\n   * @param {boolean} immediate - Whether to send the request immediately without waiting (true) or process normally (false)\n   * @param {Function} apiLog - Function to log API messages with appropriate levels\n   * @param {Function} processListeners - Function to trigger event listeners for commit events\n   * @return {Promise<ResultObject>} - A promise that resolves with the result of the request\n   *\n   * @example\n   * // Standard request (waits for response)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   false,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   *\n   * @example\n   * // Immediate request (for termination)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   true,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   * // result will be success immediately, regardless of actual HTTP result\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n    apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    const genericError: ResultObject = {\n      result: global_constants.SCORM_FALSE,\n      errorCode: this.error_codes.GENERAL,\n    };\n\n    // If immediate mode (for termination), handle differently\n    if (immediate) {\n      return this._handleImmediateRequest(url, params, processListeners);\n    }\n\n    // Standard request processing\n    try {\n      const processedParams = this.settings.requestHandler(params) as\n        | CommitObject\n        | StringKeyMap\n        | Array<any>;\n      const response = await this.performFetch(url, processedParams);\n      return this.transformResponse(response, processListeners);\n    } catch (e) {\n      apiLog(\"processHttpRequest\", e, LogLevelEnum.ERROR);\n      processListeners(\"CommitError\");\n      return genericError;\n    }\n  }\n\n  /**\n   * Handles an immediate request (used during termination)\n   * @param {string} url - The URL to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The parameters to include in the request\n   * @param {Function} processListeners - Function to process event listeners\n   * @return {ResultObject} - A success result object\n   * @private\n   */\n  private _handleImmediateRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): ResultObject {\n    // Use Beacon API for final commit if specified in settings\n    if (this.settings.useBeaconInsteadOfFetch !== \"never\") {\n      const { body, contentType } = this._prepareRequestBody(params);\n      navigator.sendBeacon(url, new Blob([body], { type: contentType }));\n    } else {\n      // Use regular fetch with keepalive\n      this.performFetch(url, params).then(async (response) => {\n        await this.transformResponse(response, processListeners);\n      });\n    }\n\n    // Return success immediately without waiting for response\n    return {\n      result: global_constants.SCORM_TRUE,\n      errorCode: 0,\n    };\n  }\n\n  /**\n   * Prepares the request body and content type based on params type\n   * @param {CommitObject|StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Object} - Object containing body and contentType\n   * @private\n   */\n  private _prepareRequestBody(params: CommitObject | StringKeyMap | Array<any>): {\n    body: string;\n    contentType: string;\n  } {\n    const body = params instanceof Array ? params.join(\"&\") : JSON.stringify(params);\n    const contentType =\n      params instanceof Array\n        ? \"application/x-www-form-urlencoded\"\n        : this.settings.commitRequestDataType;\n\n    return { body, contentType };\n  }\n\n  /**\n   * Perform the fetch request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - The response from the LMS\n   * @private\n   */\n  private async performFetch(url: string, params: StringKeyMap | Array<any>): Promise<Response> {\n    // Use Beacon API if specified in settings\n    if (this.settings.useBeaconInsteadOfFetch === \"always\") {\n      return this.performBeacon(url, params);\n    }\n\n    const { body, contentType } = this._prepareRequestBody(params);\n    const init = {\n      method: \"POST\",\n      mode: this.settings.fetchMode,\n      body,\n      headers: {\n        ...this.settings.xhrHeaders,\n        \"Content-Type\": contentType,\n      },\n      keepalive: true,\n    } as RequestInit;\n\n    if (this.settings.xhrWithCredentials) {\n      init.credentials = \"include\";\n    }\n\n    return fetch(url, init);\n  }\n\n  /**\n   * Perform the beacon request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - A promise that resolves with a mock Response object\n   * @private\n   */\n  private async performBeacon(url: string, params: StringKeyMap | Array<any>): Promise<Response> {\n    const { body, contentType } = this._prepareRequestBody(params);\n\n    // Send the beacon request\n    const beaconSuccess = navigator.sendBeacon(url, new Blob([body], { type: contentType }));\n\n    // Create a mock Response object since sendBeacon doesn't return a Response\n    return Promise.resolve({\n      status: beaconSuccess ? 200 : 0,\n      ok: beaconSuccess,\n      json: async () => ({\n        result: beaconSuccess ? \"true\" : \"false\",\n        errorCode: beaconSuccess ? 0 : this.error_codes.GENERAL,\n      }),\n      text: async () =>\n        JSON.stringify({\n          result: beaconSuccess ? \"true\" : \"false\",\n          errorCode: beaconSuccess ? 0 : this.error_codes.GENERAL,\n        }),\n    } as Response);\n  }\n\n  /**\n   * Transforms the response from the LMS to a ResultObject\n   * @param {Response} response - The response from the LMS\n   * @param {Function} processListeners - Function to process event listeners\n   * @return {Promise<ResultObject>} - The transformed response\n   * @private\n   */\n  private async transformResponse(\n    response: Response,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    // Parse the response using the configured handler or default to json\n    const result =\n      typeof this.settings.responseHandler === \"function\"\n        ? await this.settings.responseHandler(response)\n        : await response.json();\n\n    // Ensure result has an errorCode property\n    if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n      result.errorCode = this._isSuccessResponse(response, result) ? 0 : this.error_codes.GENERAL;\n    }\n\n    // Trigger appropriate event based on success/failure\n    if (this._isSuccessResponse(response, result)) {\n      processListeners(\"CommitSuccess\");\n    } else {\n      processListeners(\"CommitError\", undefined, result.errorCode);\n    }\n\n    return result;\n  }\n\n  /**\n   * Determines if a response is successful based on status code and result\n   * @param {Response} response - The HTTP response\n   * @param {ResultObject} result - The parsed result object\n   * @return {boolean} - Whether the response is successful\n   * @private\n   */\n  private _isSuccessResponse(response: Response, result: ResultObject): boolean {\n    return (\n      response.status >= 200 &&\n      response.status <= 299 &&\n      (result.result === \"true\" || result.result === global_constants.SCORM_TRUE)\n    );\n  }\n\n  /**\n   * Updates the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: InternalSettings): void {\n    this.settings = settings;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { IEventService } from \"../interfaces/services\";\n\n/**\n * Interface for a listener object\n */\ninterface Listener {\n  functionName: string;\n  CMIElement: string | null;\n  callback: Function;\n}\n\n/**\n * Type for parsed listener information\n */\ninterface ParsedListener {\n  functionName: string;\n  CMIElement: string | null;\n}\n\n/**\n * Service for handling event listeners and event processing\n */\nexport class EventService implements IEventService {\n  // Map of function names to listeners for faster lookups\n  private listenerMap: Map<string, Listener[]> = new Map();\n  // Total count of listeners for logging\n  private listenerCount = 0;\n  // Function to log API messages\n  private readonly apiLog: (\n    functionName: string,\n    message: string,\n    messageLevel: LogLevel,\n    CMIElement?: string,\n  ) => void;\n\n  /**\n   * Constructor for EventService\n   * @param {Function} apiLog - Function to log API messages\n   */\n  constructor(\n    apiLog: (\n      functionName: string,\n      message: string,\n      messageLevel: LogLevel,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.apiLog = apiLog;\n  }\n\n  /**\n   * Parses a listener name into its components\n   *\n   * @param {string} listenerName - The name of the listener\n   * @returns {ParsedListener|null} - The parsed listener information or null if invalid\n   */\n  private parseListenerName(listenerName: string): ParsedListener | null {\n    const listenerSplit = listenerName.split(\".\");\n    if (listenerSplit.length === 0) return null;\n\n    const functionName = listenerSplit[0];\n    let CMIElement = null;\n\n    if (listenerSplit.length > 1) {\n      CMIElement = listenerName.replace(`${functionName}.`, \"\");\n    }\n\n    return { functionName, CMIElement };\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener\n   * @param {Function} callback - The callback function to execute when the event occurs\n   */\n  on(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get or create the array for this function name\n      const listeners = this.listenerMap.get(functionName) ?? [];\n\n      // Add the new listener\n      listeners.push({\n        functionName,\n        CMIElement,\n        callback,\n      });\n\n      // Update the map and count\n      this.listenerMap.set(functionName, listeners);\n      this.listenerCount++;\n\n      this.apiLog(\n        \"on\",\n        `Added event listener: ${this.listenerCount}`,\n        LogLevelEnum.INFO,\n        functionName,\n      );\n    }\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener\n   *\n   * @param {string} listenerName - The name of the listener to remove\n   * @param {Function} callback - The callback function to remove\n   */\n  off(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get the listeners for this function name\n      const listeners = this.listenerMap.get(functionName);\n      if (!listeners) continue;\n\n      // Find the index of the listener to remove\n      const removeIndex = listeners.findIndex(\n        (obj) => obj.CMIElement === CMIElement && obj.callback === callback,\n      );\n\n      if (removeIndex !== -1) {\n        // Remove the listener\n        listeners.splice(removeIndex, 1);\n        this.listenerCount--;\n\n        // Update the map or remove the entry if empty\n        if (listeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, listeners);\n        }\n\n        this.apiLog(\n          \"off\",\n          `Removed event listener: ${this.listenerCount}`,\n          LogLevelEnum.INFO,\n          functionName,\n        );\n      }\n    }\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener to clear\n   */\n  clear(listenerName: string) {\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // If we have listeners for this function name\n      if (this.listenerMap.has(functionName)) {\n        const listeners = this.listenerMap.get(functionName)!;\n\n        // Filter out listeners that match the criteria\n        const newListeners = listeners.filter((obj) => obj.CMIElement !== CMIElement);\n\n        // Update the count and map\n        this.listenerCount -= listeners.length - newListeners.length;\n\n        if (newListeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, newListeners);\n        }\n      }\n    }\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created\n   *\n   * @param {string} functionName - The name of the function that triggered the event\n   * @param {string} CMIElement - The CMI element that was affected\n   * @param {any} value - The value that was set\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this.apiLog(functionName, value, LogLevelEnum.INFO, CMIElement);\n\n    // Get listeners for this function name\n    const listeners = this.listenerMap.get(functionName);\n    if (!listeners) return;\n\n    for (const listener of listeners) {\n      const listenerHasCMIElement = !!listener.CMIElement;\n      let CMIElementsMatch = false;\n\n      // Check if CMI elements match\n      if (CMIElement && listener.CMIElement) {\n        if (listener.CMIElement.endsWith(\"*\")) {\n          // For wildcard matches, check if the CMI element starts with the prefix\n          const prefix = listener.CMIElement.slice(0, -1);\n          CMIElementsMatch = CMIElement.startsWith(prefix);\n        } else {\n          // For exact matches, compare the strings directly\n          CMIElementsMatch = listener.CMIElement === CMIElement;\n        }\n      }\n\n      // If the listener matches, call the callback\n      if (!listenerHasCMIElement || CMIElementsMatch) {\n        this.apiLog(\n          \"processListeners\",\n          `Processing listener: ${listener.functionName}`,\n          LogLevelEnum.DEBUG,\n          CMIElement,\n        );\n\n        // Handle special event types\n        if (functionName.startsWith(\"Sequence\")) {\n          // For sequence events, pass the target as the first argument\n          listener.callback(value);\n        } else if (functionName === \"CommitError\") {\n          // For commit error events, pass the error code\n          listener.callback(value);\n        } else if (functionName === \"CommitSuccess\") {\n          // For commit success events, pass no arguments\n          listener.callback();\n        } else {\n          // For regular events, pass CMIElement and value\n          listener.callback(CMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Resets the event service by clearing all listeners\n   */\n  reset() {\n    this.listenerMap.clear();\n    this.listenerCount = 0;\n  }\n}\n","import { CommitObject, LogLevel } from \"../types/api_types\";\nimport { StringKeyMap, unflatten } from \"../utilities\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { BaseCMI } from \"../cmi/common/base_cmi\";\nimport { ISerializationService } from \"../interfaces/services\";\n\n/**\n * Service for handling data serialization and deserialization in scorm-again\n */\nexport class SerializationService implements ISerializationService {\n  /**\n   * Loads CMI data from a flattened JSON object with special handling for arrays and ordering.\n   *\n   * This method implements a complex algorithm for loading flattened JSON data into the CMI\n   * object structure. It handles several key challenges:\n   *\n   * 1. Ordering dependencies: Some CMI elements (like interactions and objectives) must be\n   *    loaded in a specific order to ensure proper initialization.\n   *\n   * 2. Array handling: Interactions and objectives are stored as arrays, and their properties\n   *    must be loaded in the correct order (e.g., 'id' and 'type' must be set before other properties).\n   *\n   * 3. Unflattening: The method converts flattened dot notation (e.g., \"cmi.objectives.0.id\")\n   *    back into nested objects before loading.\n   *\n   * The algorithm works by:\n   * - Categorizing keys into interactions, objectives, and other properties\n   * - Sorting interactions to prioritize 'id' and 'type' fields within each index\n   * - Sorting objectives to prioritize 'id' fields within each index\n   * - Processing each category in order: interactions, objectives, then other properties\n   *\n   * @param {StringKeyMap} json - The flattened JSON object with dot notation keys\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   *\n   * @param setStartingData\n   * @example\n   * // Example of flattened JSON input:\n   * // {\n   * //   \"cmi.objectives.0.id\": \"obj1\",\n   * //   \"cmi.objectives.0.score.raw\": \"80\",\n   * //   \"cmi.interactions.0.id\": \"int1\",\n   * //   \"cmi.interactions.0.type\": \"choice\",\n   * //   \"cmi.interactions.0.result\": \"correct\"\n   * // }\n   */\n  loadFromFlattenedJSON(\n    json: StringKeyMap,\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromFlattenedJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    const int_pattern = /^(cmi\\.interactions\\.)(\\d+)\\.(.*)$/;\n    const obj_pattern = /^(cmi\\.objectives\\.)(\\d+)\\.(.*)$/;\n\n    // Extract and categorize keys for better sorting\n    const interactions: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const objectives: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const others: { key: string; value: any }[] = [];\n\n    // Categorize keys\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key)) {\n        const intMatch = key.match(int_pattern);\n        if (intMatch) {\n          interactions.push({\n            key,\n            value: json[key],\n            index: Number(intMatch[2]),\n            field: intMatch[3],\n          });\n          continue;\n        }\n\n        const objMatch = key.match(obj_pattern);\n        if (objMatch) {\n          objectives.push({\n            key,\n            value: json[key],\n            index: Number(objMatch[2]),\n            field: objMatch[3],\n          });\n          continue;\n        }\n\n        others.push({ key, value: json[key] });\n      }\n    }\n\n    // Sort interactions: first by index, then prioritize 'id' and 'type' fields\n    interactions.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id and type\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n      if (a.field === \"type\") return -1;\n      if (b.field === \"type\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort objectives: first by index, then prioritize 'id' field\n    objectives.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort other keys alphabetically\n    others.sort((a, b) => a.key.localeCompare(b.key));\n\n    // Process all items in the correct order\n    const processItems = (items: { key: string; value: any }[]) => {\n      items.forEach((item) => {\n        const obj: StringKeyMap = {};\n        obj[item.key] = item.value;\n        this.loadFromJSON(\n          unflatten(obj) as StringKeyMap,\n          CMIElement,\n          setCMIValue,\n          isNotInitialized,\n          setStartingData,\n        );\n      });\n    };\n\n    // Process in order: interactions, objectives, others\n    processItems(interactions);\n    processItems(objectives);\n    processItems(others);\n  }\n\n  /**\n   * Loads CMI data from a nested JSON object with recursive traversal.\n   *\n   * This method implements a recursive algorithm for loading nested JSON data into the CMI\n   * object structure. It handles several key aspects:\n   *\n   * 1. Recursive traversal: The method recursively traverses the nested JSON structure,\n   *    building CMI element paths as it goes (e.g., \"cmi.core.student_id\").\n   *\n   * 2. Type-specific handling: Different data types are handled differently:\n   *    - Arrays: Each array element is processed individually with its index in the path\n   *    - Objects: Recursively processed with updated path\n   *    - Primitives: Set directly using setCMIValue\n   *\n   * 3. Initialization check: Ensures the method is only called before API initialization\n   *\n   * 4. Starting data storage: Stores the original JSON data for potential future use\n   *\n   * The algorithm works by:\n   * - First storing the complete JSON object via setStartingData\n   * - Iterating through each property in the JSON object\n   * - For each property, determining its type and handling it accordingly\n   * - Building the CMI element path as it traverses the structure\n   * - Setting values at the appropriate paths using setCMIValue\n   *\n   * @param {{[key: string]: any}} json - The nested JSON object to load\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value at a specific path\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   * @param {Function} setStartingData - Function to store the original JSON data\n   *\n   * @example\n   * // Example of nested JSON input:\n   * // {\n   * //   \"core\": {\n   * //     \"student_id\": \"12345\",\n   * //     \"student_name\": \"John Doe\"\n   * //   },\n   * //   \"objectives\": [\n   * //     { \"id\": \"obj1\", \"score\": { \"raw\": 80 } },\n   * //     { \"id\": \"obj2\", \"score\": { \"raw\": 90 } }\n   * //   ]\n   * // }\n   */\n  loadFromJSON(\n    json: { [key: string]: any },\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    CMIElement = CMIElement !== undefined ? CMIElement : \"cmi\";\n\n    setStartingData(json);\n\n    // could this be refactored down to flatten(json) then setCMIValue on each?\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key) && json[key]) {\n        const currentCMIElement = (CMIElement ? CMIElement + \".\" : \"\") + key;\n        const value = json[key];\n\n        if (value.constructor === Array) {\n          for (let i = 0; i < value.length; i++) {\n            if (value[i]) {\n              const item = value[i];\n              const tempCMIElement = `${currentCMIElement}.${i}`;\n\n              if (item.constructor === Object) {\n                this.loadFromJSON(\n                  item,\n                  tempCMIElement,\n                  setCMIValue,\n                  isNotInitialized,\n                  setStartingData,\n                );\n              } else {\n                setCMIValue(tempCMIElement, item);\n              }\n            }\n          }\n        } else if (value.constructor === Object) {\n          this.loadFromJSON(\n            value,\n            currentCMIElement,\n            setCMIValue,\n            isNotInitialized,\n            setStartingData,\n          );\n        } else {\n          setCMIValue(currentCMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Render the CMI object to JSON for sending to an LMS.\n   *\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {string}\n   */\n  renderCMIToJSONString(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): string {\n    // Do we want/need to return fields that have no set value?\n    if (sendFullCommit) {\n      return JSON.stringify({ cmi });\n    }\n    return JSON.stringify({ cmi }, (k, v) => (v === undefined ? null : v), 2);\n  }\n\n  /**\n   * Returns a JS object representing the current cmi\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {object}\n   */\n  renderCMIToJSONObject(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): StringKeyMap {\n    // Revert to the original implementation to maintain compatibility with tests\n    return JSON.parse(this.renderCMIToJSONString(cmi, sendFullCommit));\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} alwaysSendTotalTime - Whether to always send total time\n   * @param {boolean|Function} renderCommonCommitFields - Whether to render common commit fields\n   * @param {Function} renderCommitObject - Function to render commit object\n   * @param {Function} renderCommitCMI - Function to render commit CMI\n   * @param {LogLevel} apiLogLevel - The API log level\n   * @return {CommitObject|StringKeyMap|Array<any>}\n   */\n  getCommitObject(\n    terminateCommit: boolean,\n    alwaysSendTotalTime: boolean,\n    renderCommonCommitFields: boolean | ((commitObject: CommitObject) => boolean),\n    renderCommitObject: (terminateCommit: boolean, includeTotalTime?: boolean) => CommitObject,\n    renderCommitCMI: (terminateCommit: boolean, includeTotalTime?: boolean) => StringKeyMap | Array<any>,\n    apiLogLevel: LogLevel,\n  ): CommitObject | StringKeyMap | Array<any> {\n    // Fix for issue: total time is being calculated incorrectly across multiple sessions\n    // when selfReportSessionTime and alwaysSendTotalTime are enabled.\n    //\n    // Previously, we were using a single variable (shouldTerminateCommit) that combined\n    // both concerns: whether this is a termination commit and whether to include total time.\n    // This caused the total time to be calculated as if every commit was a terminate commit\n    // when alwaysSendTotalTime was true, leading to incorrect time calculations.\n    //\n    // Now we pass the actual terminateCommit value and a separate parameter for whether\n    // to include total time, allowing the rendering functions to handle these concerns separately.\n    const includeTotalTime = alwaysSendTotalTime || terminateCommit;\n\n    const commitObject = renderCommonCommitFields\n      ? renderCommitObject(terminateCommit, includeTotalTime)\n      : renderCommitCMI(terminateCommit, includeTotalTime);\n\n    if ([LogLevelEnum.DEBUG, \"1\", 1, \"DEBUG\"].includes(apiLogLevel)) {\n      console.debug(\"Commit (terminated: \" + (terminateCommit ? \"yes\" : \"no\") + \"): \");\n      console.debug(commitObject);\n    }\n    return commitObject;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ILoggingService } from \"../interfaces/services\";\nimport { defaultLogHandler } from \"../constants/default_settings\";\n\n/**\n * Centralized logging service implemented as a singleton\n * Provides methods for logging at different levels and configuring the log level\n */\nexport class LoggingService implements ILoggingService {\n  private static _instance: LoggingService;\n  private _logLevel: LogLevel = LogLevelEnum.ERROR;\n  private _logHandler: (messageLevel: LogLevel, logMessage: string) => void;\n\n  /**\n   * Private constructor to prevent direct instantiation\n   */\n  private constructor() {\n    // Default log handler uses console methods based on log level\n    this._logHandler = defaultLogHandler;\n  }\n\n  /**\n   * Get the singleton instance of LoggingService\n   *\n   * @returns {LoggingService} The singleton instance\n   */\n  public static getInstance(): LoggingService {\n    if (!LoggingService._instance) {\n      LoggingService._instance = new LoggingService();\n    }\n    return LoggingService._instance;\n  }\n\n  /**\n   * Set the log level\n   *\n   * @param {LogLevel} level - The log level to set\n   */\n  public setLogLevel(level: LogLevel): void {\n    this._logLevel = level;\n  }\n\n  /**\n   * Get the current log level\n   *\n   * @returns {LogLevel} The current log level\n   */\n  public getLogLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  /**\n   * Set a custom log handler\n   *\n   * @param {Function} handler - The function to handle log messages\n   */\n  public setLogHandler(handler: (messageLevel: LogLevel, logMessage: string) => void): void {\n    this._logHandler = handler;\n  }\n\n  /**\n   * Log a message if the message level is greater than or equal to the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @param {string} logMessage - The message to log\n   */\n  public log(messageLevel: LogLevel, logMessage: string): void {\n    if (this.shouldLog(messageLevel)) {\n      this._logHandler(messageLevel, logMessage);\n    }\n  }\n\n  /**\n   * Log a message at ERROR level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public error(logMessage: string): void {\n    this.log(LogLevelEnum.ERROR, logMessage);\n  }\n\n  /**\n   * Log a message at WARN level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public warn(logMessage: string): void {\n    this.log(LogLevelEnum.WARN, logMessage);\n  }\n\n  /**\n   * Log a message at INFO level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public info(logMessage: string): void {\n    this.log(LogLevelEnum.INFO, logMessage);\n  }\n\n  /**\n   * Log a message at DEBUG level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public debug(logMessage: string): void {\n    this.log(LogLevelEnum.DEBUG, logMessage);\n  }\n\n  /**\n   * Determine if a message should be logged based on its level and the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @returns {boolean} Whether the message should be logged\n   */\n  private shouldLog(messageLevel: LogLevel): boolean {\n    // Convert string levels to numbers for comparison\n    const numericMessageLevel = this.getNumericLevel(messageLevel);\n    const numericLogLevel = this.getNumericLevel(this._logLevel);\n\n    return numericMessageLevel >= numericLogLevel;\n  }\n\n  /**\n   * Convert a log level to its numeric value\n   *\n   * @param {LogLevel} level - The log level to convert\n   * @returns {number} The numeric value of the log level\n   */\n  private getNumericLevel(level: LogLevel): number {\n    if (level === undefined) return LogLevelEnum.NONE;\n\n    if (typeof level === \"number\") return level;\n\n    switch (level) {\n      case \"1\":\n      case \"DEBUG\":\n        return LogLevelEnum.DEBUG;\n      case \"2\":\n      case \"INFO\":\n        return LogLevelEnum.INFO;\n      case \"3\":\n      case \"WARN\":\n        return LogLevelEnum.WARN;\n      case \"4\":\n      case \"ERROR\":\n        return LogLevelEnum.ERROR;\n      case \"5\":\n      case \"NONE\":\n        return LogLevelEnum.NONE;\n      default:\n        return LogLevelEnum.ERROR; // Default to ERROR if unknown\n    }\n  }\n}\n\n// Export a function to get the singleton instance\nexport function getLoggingService(): LoggingService {\n  return LoggingService.getInstance();\n}\n","import { LogLevelEnum } from \"../constants/enums\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { ValidationError } from \"../exceptions\";\nimport { IErrorHandlingService, ILoggingService } from \"../interfaces/services\";\nimport { getLoggingService } from \"./LoggingService\";\n\n/**\n * Service for handling SCORM errors\n */\nexport class ErrorHandlingService implements IErrorHandlingService {\n  private _lastErrorCode: string = \"0\";\n  private readonly _errorCodes: ErrorCode;\n  private readonly _apiLog: (\n    functionName: string,\n    message: string,\n    logLevel?: LogLevelEnum,\n    CMIElement?: string,\n  ) => void;\n  private readonly _getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string;\n  private readonly _loggingService: ILoggingService;\n\n  /**\n   * Constructor for ErrorHandlingService\n   *\n   * @param {ErrorCode} errorCodes - The error codes object\n   * @param {Function} apiLog - Function for logging API calls\n   * @param {Function} getLmsErrorMessageDetails - Function for getting error message details\n   * @param {ILoggingService} loggingService - Optional logging service instance\n   */\n  constructor(\n    errorCodes: ErrorCode,\n    apiLog: (\n      functionName: string,\n      message: string,\n      logLevel?: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n    loggingService?: ILoggingService,\n  ) {\n    this._errorCodes = errorCodes;\n    this._apiLog = apiLog;\n    this._getLmsErrorMessageDetails = getLmsErrorMessageDetails;\n    this._loggingService = loggingService || getLoggingService();\n  }\n\n  /**\n   * Get the last error code\n   *\n   * @return {string} - The last error code\n   */\n  get lastErrorCode(): string {\n    return this._lastErrorCode;\n  }\n\n  /**\n   * Set the last error code\n   *\n   * @param {string} errorCode - The error code to set\n   */\n  set lastErrorCode(errorCode: string) {\n    this._lastErrorCode = errorCode;\n  }\n\n  /**\n   * Throws a SCORM error\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The error number\n   * @param {string} message - The error message\n   * @throws {ValidationError} - If throwException is true, throws a ValidationError\n   */\n  throwSCORMError(CMIElement: string, errorNumber: number, message?: string): void {\n    if (!message) {\n      message = this._getLmsErrorMessageDetails(errorNumber, true);\n    }\n\n    // Format a more descriptive error message with context\n    const formattedMessage = `SCORM Error ${errorNumber}: ${message}${CMIElement ? ` [Element: ${CMIElement}]` : \"\"}`;\n\n    // Log using both the API log and the logging service for consistency\n    this._apiLog(\"throwSCORMError\", errorNumber + \": \" + message, LogLevelEnum.ERROR, CMIElement);\n    this._loggingService.error(formattedMessage);\n\n    this._lastErrorCode = String(errorNumber);\n  }\n\n  /**\n   * Clears the last SCORM error code on success.\n   *\n   * @param {string} success - Whether the operation was successful\n   */\n  clearSCORMError(success: string): void {\n    if (success !== undefined && success !== global_constants.SCORM_FALSE) {\n      this._lastErrorCode = \"0\";\n    }\n  }\n\n  /**\n   * Handles exceptions that occur when accessing or setting CMI values.\n   *\n   * This method provides centralized error handling for exceptions that occur during\n   * CMI data operations. It differentiates between different types of errors and\n   * handles them appropriately:\n   *\n   * 1. ValidationError: These are expected errors from the validation system that\n   *    indicate a specific SCORM error condition (like invalid data format or range).\n   *    For these errors, the method:\n   *    - Sets the lastErrorCode to the error code from the ValidationError\n   *    - Returns SCORM_FALSE to indicate failure to the caller\n   *\n   * 2. Standard JavaScript Error: For general JavaScript errors (like TypeError,\n   *    ReferenceError, etc.), the method:\n   *    - Logs the error message with stack trace to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * 3. Unknown exceptions: For any other type of exception that doesn't match the\n   *    above categories, the method:\n   *    - Logs the entire exception object to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * This method is critical for maintaining SCORM compliance by ensuring that\n   * all errors are properly translated into the appropriate SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {ValidationError|Error|unknown} e - The exception that was thrown\n   * @param {string} returnValue - The default return value (typically an empty string)\n   * @return {string} - Either the original returnValue or SCORM_FALSE if an error occurred\n   *\n   * @example\n   * try {\n   *   const value = getCMIValue(\"cmi.core.score.raw\");\n   *   return value;\n   * } catch (e) {\n   *   return handleValueAccessException(e, \"\");\n   * }\n   */\n  handleValueAccessException(\n    CMIElement: string,\n    e: Error | ValidationError | unknown,\n    returnValue: string,\n  ): string {\n    if (e instanceof ValidationError) {\n      const validationError = e as ValidationError;\n      this._lastErrorCode = String(validationError.errorCode);\n\n      // Log validation errors at WARN level with context\n      const errorMessage = `Validation Error ${validationError.errorCode}: ${validationError.message} [Element: ${CMIElement}]`;\n      this._loggingService.warn(errorMessage);\n\n      returnValue = global_constants.SCORM_FALSE;\n    } else if (e instanceof Error) {\n      // For standard JS errors, include the stack trace and error type\n      const errorType = e.constructor.name; // Gets the error type (e.g., TypeError, ReferenceError)\n      const errorMessage = `${errorType}: ${e.message} [Element: ${CMIElement}]`;\n      const stackTrace = e.stack || \"\";\n\n      // Log the detailed error with stack trace\n      this._loggingService.error(`${errorMessage}\\n${stackTrace}`);\n\n      this.throwSCORMError(CMIElement, this._errorCodes.GENERAL, `${errorType}: ${e.message}`);\n    } else {\n      // For unknown errors, provide as much context as possible\n      const errorMessage = `Unknown error occurred while accessing [Element: ${CMIElement}]`;\n\n      this._loggingService.error(errorMessage);\n\n      try {\n        // Try to stringify the error object for more details\n        const errorDetails = JSON.stringify(e);\n        this._loggingService.error(`Error details: ${errorDetails}`);\n      } catch (jsonError) {\n        // If stringify fails, log that we couldn't get more details\n        this._loggingService.error(\"Could not stringify error object for details\");\n      }\n\n      this.throwSCORMError(CMIElement, this._errorCodes.GENERAL, \"Unknown error\");\n    }\n    return returnValue;\n  }\n\n  /**\n   * Get the error codes object\n   *\n   * @return {ErrorCode} - The error codes object\n   */\n  get errorCodes(): ErrorCode {\n    return this._errorCodes;\n  }\n}\n\n// Export a factory function to create the service\nexport function createErrorHandlingService(\n  errorCodes: ErrorCode,\n  apiLog: (\n    functionName: string,\n    message: string,\n    logLevel: LogLevelEnum,\n    CMIElement?: string,\n  ) => void,\n  getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n  loggingService?: ILoggingService,\n): ErrorHandlingService {\n  return new ErrorHandlingService(errorCodes, apiLog, getLmsErrorMessageDetails, loggingService);\n}\n","import { CommitObject, InternalSettings, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ErrorCode } from \"../constants/error_codes\";\n\n/**\n * Interface for sync queue item\n */\ninterface SyncQueueItem {\n  id: string;\n  courseId: string;\n  timestamp: number;\n  data: CommitObject;\n  syncAttempts: number;\n}\n\n/**\n * Service for handling offline storage and synchronization of SCORM data\n */\nexport class OfflineStorageService {\n  private settings: InternalSettings;\n  private error_codes: ErrorCode;\n  private storeName: string = \"scorm_again_offline_data\";\n  private syncQueue: string = \"scorm_again_sync_queue\";\n  private isOnline: boolean = navigator.onLine;\n  private syncInProgress: boolean = false;\n\n  /**\n   * Constructor for OfflineStorageService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Function} apiLog - The logging function\n   */\n  constructor(\n    settings: InternalSettings,\n    error_codes: ErrorCode,\n    private apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n\n    // Initialize listeners for online/offline events\n    window.addEventListener(\"online\", this.handleOnlineStatusChange.bind(this));\n    window.addEventListener(\"offline\", this.handleOnlineStatusChange.bind(this));\n  }\n\n  /**\n   * Handle changes in online status\n   */\n  private handleOnlineStatusChange() {\n    const wasOnline = this.isOnline;\n    this.isOnline = navigator.onLine;\n\n    // If we've come back online, trigger sync process\n    if (!wasOnline && this.isOnline) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        \"Device is back online, attempting to sync...\",\n        LogLevelEnum.INFO,\n      );\n      this.syncOfflineData().then(\n        (success) => {\n          if (success) {\n            this.apiLog(\"OfflineStorageService\", \"Sync completed successfully\", LogLevelEnum.INFO);\n          } else {\n            this.apiLog(\"OfflineStorageService\", \"Sync failed\", LogLevelEnum.ERROR);\n          }\n        },\n        (error) => {\n          this.apiLog(\"OfflineStorageService\", `Error during sync: ${error}`, LogLevelEnum.ERROR);\n        },\n      );\n    } else if (wasOnline && !this.isOnline) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        \"Device is offline, data will be stored locally\",\n        LogLevelEnum.INFO,\n      );\n    }\n  }\n\n  /**\n   * Store commit data offline\n   * @param {string} courseId - Identifier for the course\n   * @param {CommitObject} commitData - The data to store offline\n   * @returns {Promise<ResultObject>} - Result of the storage operation\n   */\n  async storeOffline(courseId: string, commitData: CommitObject): Promise<ResultObject> {\n    try {\n      // Store the data in the sync queue with timestamp and unique ID\n      const queueItem: SyncQueueItem = {\n        id: `${courseId}_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`,\n        courseId,\n        timestamp: Date.now(),\n        data: commitData,\n        syncAttempts: 0,\n      };\n\n      // Get current queue\n      const currentQueue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n      currentQueue.push(queueItem);\n\n      // Save updated queue\n      await this.saveToStorage(this.syncQueue, currentQueue);\n\n      // Also update the current state in the main storage (latest known state)\n      await this.saveToStorage(`${this.storeName}_${courseId}`, commitData);\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Stored data offline for course ${courseId}`,\n        LogLevelEnum.INFO,\n      );\n\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error storing offline data: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL,\n      };\n    }\n  }\n\n  /**\n   * Get the stored offline data for a course\n   * @param {string} courseId - Identifier for the course\n   * @returns {Promise<CommitObject|null>} - The stored data or null if not found\n   */\n  async getOfflineData(courseId: string): Promise<CommitObject | null> {\n    try {\n      const data = await this.getFromStorage<CommitObject>(`${this.storeName}_${courseId}`);\n      return data || null;\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error retrieving offline data: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return null;\n    }\n  }\n\n  /**\n   * Synchronize offline data with the LMS when connection is available\n   * @returns {Promise<boolean>} - Success status of synchronization\n   */\n  async syncOfflineData(): Promise<boolean> {\n    // Don't run multiple sync processes at once\n    if (this.syncInProgress || !this.isOnline) {\n      return false;\n    }\n\n    this.syncInProgress = true;\n\n    try {\n      // Get the queue of items to sync\n      const syncQueue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n\n      if (syncQueue.length === 0) {\n        this.syncInProgress = false;\n        return true;\n      }\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Found ${syncQueue.length} items to sync`,\n        LogLevelEnum.INFO,\n      );\n\n      // Keep track of successful and failed sync attempts\n      const remainingQueue: SyncQueueItem[] = [];\n\n      // Process each queue item\n      for (const item of syncQueue) {\n        // Skip items that have been attempted too many times\n        if (item.syncAttempts >= 5) {\n          this.apiLog(\n            \"OfflineStorageService\",\n            `Skipping item ${item.id} after 5 failed attempts`,\n            LogLevelEnum.WARN,\n          );\n          continue;\n        }\n\n        try {\n          // Attempt to sync this item\n          const syncResult = await this.sendDataToLMS(item.data);\n\n          if (syncResult.result === global_constants.SCORM_TRUE) {\n            // Sync was successful, no need to keep this item\n            this.apiLog(\n              \"OfflineStorageService\",\n              `Successfully synced item ${item.id}`,\n              LogLevelEnum.INFO,\n            );\n          } else {\n            // Sync failed, increment attempts and keep in queue\n            item.syncAttempts++;\n            remainingQueue.push(item);\n            this.apiLog(\n              \"OfflineStorageService\",\n              `Failed to sync item ${item.id}, attempt #${item.syncAttempts}`,\n              LogLevelEnum.WARN,\n            );\n          }\n        } catch (error) {\n          // On error, increment attempts and keep in queue\n          item.syncAttempts++;\n          remainingQueue.push(item);\n          this.apiLog(\n            \"OfflineStorageService\",\n            `Error syncing item ${item.id}: ${error}`,\n            LogLevelEnum.ERROR,\n          );\n        }\n      }\n\n      // Update the queue with remaining items\n      await this.saveToStorage(this.syncQueue, remainingQueue);\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Sync completed. ${syncQueue.length - remainingQueue.length} items synced, ${remainingQueue.length} items remaining`,\n        LogLevelEnum.INFO,\n      );\n\n      this.syncInProgress = false;\n      return true;\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error during sync process: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      this.syncInProgress = false;\n      return false;\n    }\n  }\n\n  /**\n   * Send data to the LMS when online\n   * @param {CommitObject} data - The data to send to the LMS\n   * @returns {Promise<ResultObject>} - Result of the sync operation\n   */\n  private async sendDataToLMS(data: CommitObject): Promise<ResultObject> {\n    if (!this.settings.lmsCommitUrl) {\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL,\n      };\n    }\n\n    try {\n      // Apply request handler if configured\n      const processedData = this.settings.requestHandler(data);\n\n      // Send the data to the LMS\n      const init = {\n        method: \"POST\",\n        mode: this.settings.fetchMode,\n        body: JSON.stringify(processedData),\n        headers: {\n          ...this.settings.xhrHeaders,\n          \"Content-Type\": this.settings.commitRequestDataType,\n        },\n      } as RequestInit;\n\n      if (this.settings.xhrWithCredentials) {\n        init.credentials = \"include\";\n      }\n\n      const response = await fetch(this.settings.lmsCommitUrl as string, init);\n\n      // Process the response using the configured handler\n      const result =\n        typeof this.settings.responseHandler === \"function\"\n          ? await this.settings.responseHandler(response)\n          : await response.json();\n\n      if (\n        response.status >= 200 &&\n        response.status <= 299 &&\n        (result.result === true || result.result === global_constants.SCORM_TRUE)\n      ) {\n        if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n          result.errorCode = 0;\n        }\n        return result;\n      } else {\n        if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n          result.errorCode = this.error_codes.GENERAL;\n        }\n        return result;\n      }\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error sending data to LMS: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL,\n      };\n    }\n  }\n\n  /**\n   * Check if the device is currently online\n   * @returns {boolean} - Online status\n   */\n  isDeviceOnline(): boolean {\n    return this.isOnline;\n  }\n\n  // noinspection JSValidateJSDoc\n  /**\n   * Get item from localStorage\n   * @param {string} key - The key to retrieve\n   * @returns {Promise<T|null>} - The retrieved data\n   */\n  private async getFromStorage<T>(key: string): Promise<T | null> {\n    const storedData = localStorage.getItem(key);\n    if (storedData) {\n      try {\n        return JSON.parse(storedData) as T;\n      } catch (e) {\n        return null;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Save item to localStorage\n   * @param {string} key - The key to store under\n   * @param {any} data - The data to store\n   * @returns {Promise<void>}\n   */\n  private async saveToStorage(key: string, data: any): Promise<void> {\n    localStorage.setItem(key, JSON.stringify(data));\n  }\n\n  /**\n   * Check if there is pending offline data for a course\n   * @param {string} courseId - Identifier for the course\n   * @returns {Promise<boolean>} - Whether there is pending data\n   */\n  async hasPendingOfflineData(courseId: string): Promise<boolean> {\n    const queue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n    return queue.some((item) => item.courseId === courseId);\n  }\n\n  /**\n   * Update the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: InternalSettings): void {\n    this.settings = settings;\n  }\n}\n","import { ErrorCode } from \"./constants/error_codes\";\nimport { global_constants } from \"./constants/api_constants\";\nimport * as Utilities from \"./utilities\";\nimport { formatMessage, StringKeyMap, stringMatches } from \"./utilities\";\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport { CommitObject, InternalSettings, LogLevel, ResultObject, Settings } from \"./types/api_types\";\nimport { DefaultSettings } from \"./constants/default_settings\";\nimport { IBaseAPI } from \"./interfaces/IBaseAPI\";\nimport { ScheduledCommit } from \"./helpers/scheduled_commit\";\nimport { LogLevelEnum } from \"./constants/enums\";\nimport { HttpService } from \"./services/HttpService\";\nimport { EventService } from \"./services/EventService\";\nimport { SerializationService } from \"./services/SerializationService\";\nimport { createErrorHandlingService } from \"./services/ErrorHandlingService\";\nimport { getLoggingService } from \"./services/LoggingService\";\nimport { OfflineStorageService } from \"./services/OfflineStorageService\";\nimport {\n  ICMIDataService,\n  IErrorHandlingService,\n  IEventService,\n  IHttpService,\n  ILoggingService,\n  IOfflineStorageService,\n  ISerializationService\n} from \"./interfaces/services\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { ValidationError } from \"./exceptions\";\n\n/**\n * Base API class for AICC, SCORM 1.2, and SCORM 2004. Should be considered\n * abstract, and never initialized on its own.\n */\nexport default abstract class BaseAPI implements IBaseAPI {\n  private _timeout?: ScheduledCommit | undefined;\n  private readonly _error_codes: ErrorCode;\n  private _settings: InternalSettings = DefaultSettings;\n  private readonly _httpService: IHttpService;\n  private _eventService: IEventService;\n  private _serializationService: ISerializationService;\n  private readonly _errorHandlingService: IErrorHandlingService;\n  private readonly _loggingService: ILoggingService;\n  private readonly _offlineStorageService?: IOfflineStorageService;\n  private _courseId: string = \"\";\n\n  /**\n   * Constructor for Base API class. Sets some shared API fields, as well as\n   * sets up options for the API.\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Settings} settings - Optional settings for the API\n   * @param {IHttpService} httpService - Optional HTTP service instance\n   * @param {IEventService} eventService - Optional Event service instance\n   * @param {ISerializationService} serializationService - Optional Serialization service instance\n   * @param {ICMIDataService} cmiDataService - Optional CMI Data service instance\n   * @param {IErrorHandlingService} errorHandlingService - Optional Error Handling service instance\n   * @param {ILoggingService} loggingService - Optional Logging service instance\n   * @param {IOfflineStorageService} offlineStorageService - Optional Offline Storage service instance\n   */\n  protected constructor(\n    error_codes: ErrorCode,\n    settings?: Settings,\n    httpService?: IHttpService,\n    eventService?: IEventService,\n    serializationService?: ISerializationService,\n    cmiDataService?: ICMIDataService,\n    errorHandlingService?: IErrorHandlingService,\n    loggingService?: ILoggingService,\n    offlineStorageService?: IOfflineStorageService,\n  ) {\n    if (new.target === BaseAPI) {\n      throw new TypeError(\"Cannot construct BaseAPI instances directly\");\n    }\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n\n    this._error_codes = error_codes;\n\n    if (settings) {\n      this.settings = {\n        ...DefaultSettings,\n        ...settings,\n      } as InternalSettings;\n    }\n\n    // Initialize and configure LoggingService\n    this._loggingService = loggingService || getLoggingService();\n    this._loggingService.setLogLevel(this.apiLogLevel);\n\n    // If settings include a custom onLogMessage function, use it as the log handler\n    if (this.settings.onLogMessage) {\n      this._loggingService.setLogHandler(this.settings.onLogMessage);\n    }\n\n    // Initialize HTTP service\n    this._httpService = httpService || new HttpService(this.settings, this._error_codes);\n\n    // Initialize Event service\n    this._eventService =\n      eventService ||\n      new EventService((functionName, message, level, element) =>\n        this.apiLog(functionName, message, level, element),\n      );\n\n    // Initialize Serialization service\n    this._serializationService = serializationService || new SerializationService();\n\n    // Initialize Error Handling service\n    this._errorHandlingService =\n      errorHandlingService ||\n      createErrorHandlingService(\n        this._error_codes,\n        (functionName, message, level, element) =>\n          this.apiLog(functionName, message, level, element),\n        (errorNumber, detail) => this.getLmsErrorMessageDetails(errorNumber, detail),\n      );\n\n    // Initialize Offline Storage service if enabled\n    if (this.settings.enableOfflineSupport) {\n      this._offlineStorageService =\n        offlineStorageService ||\n        new OfflineStorageService(\n          this.settings,\n          this._error_codes,\n          (functionName, message, level, element) =>\n            this.apiLog(functionName, message, level, element),\n        );\n\n      if (this.settings.courseId) {\n        this._courseId = this.settings.courseId;\n      }\n\n      // Check for offline data to restore on initialization\n      if (this._offlineStorageService && this._courseId) {\n        this._offlineStorageService\n          .getOfflineData(this._courseId)\n          .then((offlineData) => {\n            if (offlineData) {\n              this.apiLog(\"constructor\", \"Found offline data to restore\", LogLevelEnum.INFO);\n              // Restore data from offline storage\n              this.loadFromJSON(offlineData.runtimeData);\n            }\n          })\n          .catch((error) => {\n            this.apiLog(\n              \"constructor\",\n              `Error retrieving offline data: ${error}`,\n              LogLevelEnum.ERROR,\n            );\n          });\n      }\n    }\n  }\n\n  public abstract cmi: BaseCMI;\n  public startingData?: StringKeyMap;\n\n  public currentState: number;\n  public apiLogLevel: LogLevel;\n  public selfReportSessionTime: boolean;\n\n  /**\n   * Get the last error code\n   * @return {string}\n   */\n  get lastErrorCode(): string {\n    return this._errorHandlingService?.lastErrorCode ?? \"0\";\n  }\n\n  /**\n   * Set the last error code\n   * @param {string} errorCode\n   */\n  set lastErrorCode(errorCode: string) {\n    if (this._errorHandlingService) {\n      this._errorHandlingService.lastErrorCode = errorCode;\n    }\n  }\n\n  /**\n   * Reset the API to its initial state.\n   * This method clears all current data and resets the API to an uninitialized state.\n   * It can optionally accept new settings to configure the API after reset.\n   *\n   * @param {Settings} settings - Optional new settings to apply after reset\n   */\n  abstract reset(settings?: Settings): void;\n\n  /**\n   * Common reset method for all APIs. New settings are merged with the existing settings.\n   * @param {Settings} settings\n   * @protected\n   */\n  commonReset(settings?: Settings): void {\n    this.apiLog(\"reset\", \"Called\", LogLevelEnum.INFO);\n\n    this.settings = { ...this.settings, ...settings };\n\n    this.clearScheduledCommit();\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n    this.lastErrorCode = \"0\";\n    this._eventService.reset();\n    this.startingData = {};\n\n    // Update offline storage service with new settings if it exists\n    if (this._offlineStorageService) {\n      this._offlineStorageService.updateSettings(this.settings);\n\n      if (settings?.courseId) {\n        this._courseId = settings.courseId;\n      }\n    }\n  }\n\n  /**\n   * Initialize the API\n   * @param {string} callbackName\n   * @param {string} initializeMessage\n   * @param {string} terminationMessage\n   * @return {string}\n   */\n  initialize(\n    callbackName: string,\n    initializeMessage?: string,\n    terminationMessage?: string,\n  ): string {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.isInitialized()) {\n      this.throwSCORMError(\"api\", this._error_codes.INITIALIZED, initializeMessage);\n    } else if (this.isTerminated()) {\n      this.throwSCORMError(\"api\", this._error_codes.TERMINATED, terminationMessage);\n    } else {\n      if (this.selfReportSessionTime) {\n        this.cmi.setStartTime();\n      }\n\n      this.currentState = global_constants.STATE_INITIALIZED;\n      this.lastErrorCode = \"0\";\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n\n      // If enabled, attempt to sync offline data on initialization\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._courseId &&\n        this.settings.syncOnInitialize &&\n        this._offlineStorageService.isDeviceOnline()\n      ) {\n        this._offlineStorageService.hasPendingOfflineData(this._courseId).then((hasPendingData) => {\n          if (hasPendingData) {\n            this.apiLog(\n              callbackName,\n              \"Syncing pending offline data on initialization\",\n              LogLevelEnum.INFO,\n            );\n            this._offlineStorageService?.syncOfflineData().then((syncSuccess) => {\n              if (syncSuccess) {\n                this.apiLog(callbackName, \"Successfully synced offline data\", LogLevelEnum.INFO);\n                this.processListeners(\"OfflineDataSynced\");\n              }\n            });\n          }\n        });\n      }\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Initialize the LMS API\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsInitialize(): string;\n\n  /**\n   * Finish the current LMS API session\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsFinish(): string;\n\n  /**\n   * Get the value of a CMI element from the LMS\n   * @param {string} CMIElement - The CMI element to get the value of\n   * @return {string} The value of the CMI element\n   */\n  abstract lmsGetValue(CMIElement: string): string;\n\n  /**\n   * Set the value of a CMI element in the LMS\n   * @param {string} CMIElement - The CMI element to set the value of\n   * @param {any} value - The value to set\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsSetValue(CMIElement: string, value: any): string;\n\n  /**\n   * Commit the current data to the LMS\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsCommit(): string;\n\n  /**\n   * Get the last error code from the LMS\n   * @return {string} The last error code\n   */\n  abstract lmsGetLastError(): string;\n\n  /**\n   * Get the error string for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get the string for\n   * @return {string} The error string\n   */\n  abstract lmsGetErrorString(CMIErrorCode: string | number): string;\n\n  /**\n   * Get diagnostic information for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get diagnostic information for\n   * @return {string} The diagnostic information\n   */\n  abstract lmsGetDiagnostic(CMIErrorCode: string | number): string;\n\n  /**\n   * Abstract method for validating that a response is correct.\n   * This method is used to validate the format and content of a response\n   * before it is set in the CMI data model.\n   *\n   * @param {string} _CMIElement - The CMI element path to validate\n   * @param {any} _value - The value to validate\n   * @throws {Error} If the response format is invalid\n   */\n  abstract validateCorrectResponse(_CMIElement: string, _value: any): void;\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   * APIs that inherit BaseAPI should override this method.\n   *\n   * @param {string} _CMIElement - unused\n   * @param {*} _value - unused\n   * @param {boolean} _foundFirstIndex - unused\n   * @return {BaseCMI|null}\n   * @abstract\n   */\n  abstract getChildElement(\n    _CMIElement: string,\n    _value: any,\n    _foundFirstIndex: boolean,\n  ): BaseCMI | null;\n\n  /**\n   * Attempts to store the data to the LMS, logs data if no LMS configured\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _calculateTotalTime\n   * @return {ResultObject}\n   * @abstract\n   */\n  abstract storeData(_calculateTotalTime: boolean): Promise<ResultObject>;\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _terminateCommit\n   * @return {StringKeyMap|Array}\n   * @abstract\n   */\n  abstract renderCommitCMI(_terminateCommit: boolean): StringKeyMap | Array<string>;\n\n  /**\n   * Render the commit object to the shortened format for LMS commit.\n   * This method transforms the CMI data into a format suitable for sending to the LMS.\n   * It is called during the commit process to prepare the data for transmission.\n   *\n   * @param {boolean} _terminateCommit - Whether this commit is part of the termination process\n   * @return {CommitObject} A formatted object containing the data to be sent to the LMS\n   * @example\n   * // Example of a commit object structure\n   * {\n   *   method: \"POST\",\n   *   params: {\n   *     cmi: { ... },\n   *     finishState: \"COMPLETED\"\n   *   }\n   * }\n   */\n  abstract renderCommitObject(_terminateCommit: boolean): CommitObject;\n\n  /**\n   * Logging for all SCORM actions\n   *\n   * @param {string} functionName\n   * @param {string} logMessage\n   * @param {number} messageLevel\n   * @param {string} CMIElement\n   */\n  apiLog(functionName: string, logMessage: string, messageLevel: LogLevel, CMIElement?: string) {\n    logMessage = formatMessage(functionName, logMessage, CMIElement);\n\n    if (messageLevel >= this.apiLogLevel) {\n      // Use the injected LoggingService\n      this._loggingService.log(messageLevel, logMessage);\n    }\n  }\n\n  /**\n   * Getter for _settings\n   * @return {InternalSettings}\n   */\n  get settings(): InternalSettings {\n    return this._settings;\n  }\n\n  /**\n   * Setter for _settings\n   * @param {Settings} settings\n   */\n  set settings(settings: Settings) {\n    const previousSettings = this._settings;\n    this._settings = { ...this._settings, ...settings } as InternalSettings;\n\n    // Update HTTP service settings\n    this._httpService?.updateSettings(this._settings);\n\n    // Update log level if it changed\n    if (settings.logLevel !== undefined && settings.logLevel !== previousSettings.logLevel) {\n      this.apiLogLevel = settings.logLevel;\n      this._loggingService?.setLogLevel(settings.logLevel);\n    }\n\n    // Update log handler if onLogMessage changed\n    if (\n      settings.onLogMessage !== undefined &&\n      settings.onLogMessage !== previousSettings.onLogMessage\n    ) {\n      this._loggingService?.setLogHandler(settings.onLogMessage);\n    }\n  }\n\n  /**\n   * Terminates the current run of the API\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async terminate(callbackName: string, checkTerminated: boolean): Promise<string> {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.TERMINATION_BEFORE_INIT,\n        this._error_codes.MULTIPLE_TERMINATION,\n      )\n    ) {\n      this.currentState = global_constants.STATE_TERMINATED;\n      // If enabled, attempt to sync offline data before termination\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._courseId &&\n        this.settings.syncOnTerminate &&\n        this._offlineStorageService.isDeviceOnline()\n      ) {\n        const hasPendingData = await this._offlineStorageService.hasPendingOfflineData(\n          this._courseId,\n        );\n        if (hasPendingData) {\n          this.apiLog(\n            callbackName,\n            \"Syncing pending offline data before termination\",\n            LogLevelEnum.INFO,\n          );\n          await this._offlineStorageService.syncOfflineData();\n        }\n      }\n\n      const result: ResultObject = await this.storeData(true);\n      if ((result.errorCode ?? 0) > 0) {\n        this.throwSCORMError(\"api\", result.errorCode);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Get the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  getValue(callbackName: string, checkTerminated: boolean, CMIElement: string): string {\n    let returnValue: string = \"\";\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.RETRIEVE_BEFORE_INIT,\n        this._error_codes.RETRIEVE_AFTER_TERM,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.getCMIValue(CMIElement);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement);\n    }\n\n    this.apiLog(callbackName, \": returned: \" + returnValue, LogLevelEnum.INFO, CMIElement);\n\n    if (returnValue === undefined) {\n      return \"\";\n    }\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Sets the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {string} commitCallback\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  setValue(\n    callbackName: string,\n    commitCallback: string,\n    checkTerminated: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (value !== undefined) {\n      value = String(value);\n    }\n    let returnValue: string = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.STORE_BEFORE_INIT,\n        this._error_codes.STORE_AFTER_TERM,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.setCMIValue(CMIElement, value);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement, value);\n    }\n\n    if (returnValue === undefined) {\n      returnValue = global_constants.SCORM_FALSE;\n    }\n\n    // If we didn't have any errors while setting the data, go ahead and\n    // schedule a commit, if autocommit is turned on\n    if (String(this.lastErrorCode) === \"0\") {\n      if (this.settings.autocommit) {\n        this.scheduleCommit(this.settings.autocommitSeconds * 1000, commitCallback);\n      }\n    }\n\n    this.apiLog(\n      callbackName,\n      \": \" + value + \": result: \" + returnValue,\n      LogLevelEnum.INFO,\n      CMIElement,\n    );\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async commit(callbackName: string, checkTerminated: boolean = false): Promise<string> {\n    this.clearScheduledCommit();\n\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.COMMIT_BEFORE_INIT,\n        this._error_codes.COMMIT_AFTER_TERM,\n      )\n    ) {\n      const result = await this.storeData(false);\n      if ((result.errorCode ?? 0) > 0) {\n        this.throwSCORMError(\"api\", result.errorCode);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      this.apiLog(callbackName, \" Result: \" + returnValue, LogLevelEnum.DEBUG, \"HttpRequest\");\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      this.processListeners(callbackName);\n\n      // If online and there is offline data pending, attempt to sync it\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._offlineStorageService.isDeviceOnline() &&\n        this._courseId\n      ) {\n        this._offlineStorageService.hasPendingOfflineData(this._courseId).then((hasPendingData) => {\n          if (hasPendingData) {\n            this.apiLog(callbackName, \"Syncing pending offline data\", LogLevelEnum.INFO);\n            this._offlineStorageService?.syncOfflineData().then((syncSuccess) => {\n              if (syncSuccess) {\n                this.apiLog(callbackName, \"Successfully synced offline data\", LogLevelEnum.INFO);\n                this.processListeners(\"OfflineDataSynced\");\n              } else {\n                this.apiLog(callbackName, \"Failed to sync some offline data\", LogLevelEnum.WARN);\n              }\n            });\n          }\n        });\n      }\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Returns last error code\n   * @param {string} callbackName\n   * @return {string}\n   */\n  getLastError(callbackName: string): string {\n    const returnValue = String(this.lastErrorCode);\n\n    this.processListeners(callbackName);\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getErrorString(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getDiagnostic(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode, true);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Checks the LMS state and ensures it has been initialized.\n   *\n   * @param {boolean} checkTerminated\n   * @param {number} beforeInitError\n   * @param {number} afterTermError\n   * @return {boolean}\n   */\n  checkState(checkTerminated: boolean, beforeInitError: number, afterTermError: number): boolean {\n    if (this.isNotInitialized()) {\n      this.throwSCORMError(\"api\", beforeInitError);\n      return false;\n    } else if (checkTerminated && this.isTerminated()) {\n      this.throwSCORMError(\"api\", afterTermError);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {(string|number)} _errorNumber\n   * @param {boolean} _detail\n   * @return {string}\n   * @abstract\n   */\n  getLmsErrorMessageDetails(_errorNumber: string | number, _detail: boolean = false): string {\n    throw new Error(\"The getLmsErrorMessageDetails method has not been implemented\");\n  }\n\n  /**\n   * Gets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @return {string}\n   * @abstract\n   */\n  getCMIValue(_CMIElement: string): string {\n    throw new Error(\"The getCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Sets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @param {any} _value\n   * @return {string}\n   * @abstract\n   */\n  setCMIValue(_CMIElement: string, _value: any): string {\n    throw new Error(\"The setCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Shared API method to set a valid for a given element.\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  _commonSetCMIValue(\n    methodName: string,\n    scorm2004: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (!CMIElement || CMIElement === \"\") {\n      return global_constants.SCORM_FALSE;\n    }\n\n    this.lastErrorCode = \"0\";\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap | BaseCMI = this as StringKeyMap;\n    let returnValue = global_constants.SCORM_FALSE;\n    let foundFirstIndex = false;\n\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      const attribute = structure[idx];\n\n      if (idx === structure.length - 1) {\n        if (scorm2004 && attribute.substring(0, 8) === \"{target=\") {\n          if (this.isInitialized()) {\n            this.throwSCORMError(CMIElement, this._error_codes.READ_ONLY_ELEMENT);\n            break;\n          } else {\n            refObject = {\n              ...refObject,\n              attribute: value,\n            };\n          }\n        } else if (!this._checkObjectHasProperty(refObject as StringKeyMap, attribute)) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        } else {\n          if (\n            stringMatches(CMIElement, \"\\\\.correct_responses\\\\.\\\\d+$\") &&\n            this.isInitialized() &&\n            attribute !== \"pattern\"\n          ) {\n            this.validateCorrectResponse(CMIElement, value);\n            if (this.lastErrorCode !== \"0\") {\n              this.throwSCORMError(CMIElement, this._error_codes.TYPE_MISMATCH);\n              break;\n            }\n          }\n\n          if (!scorm2004 || this._errorHandlingService.lastErrorCode === \"0\") {\n            if (attribute === \"__proto__\" || attribute === \"constructor\") {\n              this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n              break;\n            }\n            (refObject as StringKeyMap)[attribute] = value;\n            returnValue = global_constants.SCORM_TRUE;\n          }\n        }\n      } else {\n        refObject = (refObject as StringKeyMap)[attribute] as StringKeyMap;\n        if (!refObject) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n\n        if (refObject instanceof CMIArray) {\n          const index = parseInt(structure[idx + 1], 10);\n\n          // SCO is trying to set an item on an array\n          if (!isNaN(index)) {\n            const item = refObject.childArray[index];\n\n            if (item) {\n              refObject = item;\n              foundFirstIndex = true;\n            } else {\n              const newChild = this.getChildElement(CMIElement, value, foundFirstIndex);\n              foundFirstIndex = true;\n\n              if (!newChild) {\n                if (this.lastErrorCode === \"0\") {\n                  this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n                }\n                break;\n              } else {\n                if (refObject.initialized) newChild.initialize();\n                refObject.childArray[index] = newChild;\n                refObject = newChild;\n              }\n            }\n\n            // Have to update idx value to skip the array position\n            idx++;\n          }\n        }\n      }\n    }\n\n    if (returnValue === global_constants.SCORM_FALSE) {\n      this.apiLog(\n        methodName,\n        `There was an error setting the value for: ${CMIElement}, value of: ${value}`,\n        LogLevelEnum.WARN,\n      );\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @return {any}\n   */\n  _commonGetCMIValue(methodName: string, scorm2004: boolean, CMIElement: string): any {\n    if (!CMIElement || CMIElement === \"\") {\n      return \"\";\n    }\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap = this as StringKeyMap;\n    let attribute = null;\n\n    const uninitializedErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) has not been initialized.`;\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      attribute = structure[idx];\n\n      if (!scorm2004) {\n        if (idx === structure.length - 1) {\n          if (!this._checkObjectHasProperty(refObject, attribute)) {\n            this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n            return;\n          }\n        }\n      } else {\n        if (\n          String(attribute).substring(0, 8) === \"{target=\" &&\n          typeof refObject._isTargetValid == \"function\"\n        ) {\n          const target = String(attribute).substring(8, String(attribute).length - 9);\n          return refObject._isTargetValid(target);\n        } else if (!this._checkObjectHasProperty(refObject, attribute)) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          return;\n        }\n      }\n\n      refObject = refObject[attribute] as StringKeyMap;\n      if (refObject === undefined) {\n        this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n        break;\n      }\n\n      if (refObject instanceof CMIArray) {\n        const index = parseInt(structure[idx + 1], 10);\n\n        // SCO is trying to set an item on an array\n        if (!isNaN(index)) {\n          const item = refObject.childArray[index];\n\n          if (item) {\n            refObject = item;\n          } else {\n            this.throwSCORMError(\n              CMIElement,\n              this._error_codes.VALUE_NOT_INITIALIZED,\n              uninitializedErrorMessage,\n            );\n            break;\n          }\n\n          // Have to update idx value to skip the array position\n          idx++;\n        }\n      }\n    }\n\n    if (refObject === null || refObject === undefined) {\n      if (!scorm2004) {\n        if (attribute === \"_children\") {\n          this.throwSCORMError(CMIElement, this._error_codes.CHILDREN_ERROR, undefined);\n        } else if (attribute === \"_count\") {\n          this.throwSCORMError(CMIElement, this._error_codes.COUNT_ERROR, undefined);\n        }\n      }\n    } else {\n      return refObject;\n    }\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isInitialized(): boolean {\n    return this.currentState === global_constants.STATE_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_NOT_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isNotInitialized(): boolean {\n    return this.currentState === global_constants.STATE_NOT_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_TERMINATED\n   *\n   * @return {boolean}\n   */\n  isTerminated(): boolean {\n    return this.currentState === global_constants.STATE_TERMINATED;\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event.\n   * This method allows you to register a callback function that will be executed\n   * when the specified event occurs.\n   *\n   * @param {string} listenerName - The name of the event to listen for (e.g., \"Initialize\", \"Terminate\", \"GetValue\", \"SetValue\", \"Commit\")\n   * @param {function} callback - The function to execute when the event occurs. The callback will receive relevant event data.\n   * @example\n   * // Listen for Initialize events\n   * api.on(\"Initialize\", function() {\n   *   console.log(\"API has been initialized\");\n   * });\n   *\n   * // Listen for SetValue events\n   * api.on(\"SetValue\", function(element, value) {\n   *   console.log(\"Setting \" + element + \" to \" + value);\n   * });\n   */\n  on(listenerName: string, callback: Function) {\n    this._eventService.on(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener.\n   * This method removes a previously registered callback for an event.\n   * Both the event name and the callback reference must match what was used in the 'on' method.\n   *\n   * @param {string} listenerName - The name of the event to stop listening for\n   * @param {function} callback - The callback function to remove\n   * @example\n   * // Remove a specific listener\n   * const myCallback = function() { console.log(\"API initialized\"); };\n   * api.on(\"Initialize\", myCallback);\n   * // Later, when you want to remove it:\n   * api.off(\"Initialize\", myCallback);\n   */\n  off(listenerName: string, callback: Function) {\n    this._eventService.off(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event.\n   * This method removes all callbacks registered for the specified event.\n   *\n   * @param {string} listenerName - The name of the event to clear all listeners for\n   * @example\n   * // Remove all listeners for the Initialize event\n   * api.clear(\"Initialize\");\n   */\n  clear(listenerName: string) {\n    this._eventService.clear(listenerName);\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created for a specific event.\n   * This method is called internally when SCORM events occur to notify all registered listeners.\n   * It triggers all callback functions registered for the specified event.\n   *\n   * @param {string} functionName - The name of the function/event that occurred\n   * @param {string} CMIElement - Optional CMI element involved in the event\n   * @param {any} value - Optional value associated with the event\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this._eventService.processListeners(functionName, CMIElement, value);\n  }\n\n  /**\n   * Throws a SCORM error with the specified error number and optional message.\n   * This method sets the last error code and can be used to indicate that an operation failed.\n   * The error number should correspond to one of the standard SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The SCORM error code to set\n   * @param {string} message - Optional custom error message to provide additional context\n   * @example\n   * // Throw a \"not initialized\" error\n   * this.throwSCORMError(301, \"The API must be initialized before calling GetValue\");\n   */\n  throwSCORMError(CMIElement: string, errorNumber: number, message?: string) {\n    this._errorHandlingService.throwSCORMError(CMIElement, errorNumber, message);\n  }\n\n  /**\n   * Clears the last SCORM error code when an operation succeeds.\n   * This method is typically called after successful API operations to reset the error state.\n   * It only clears the error if the success parameter is \"true\".\n   *\n   * @param {string} success - A string indicating whether the operation succeeded (\"true\" or \"false\")\n   * @example\n   * // Clear error after successful operation\n   * this.clearSCORMError(\"true\");\n   */\n  clearSCORMError(success: string) {\n    this._errorHandlingService.clearSCORMError(success);\n  }\n\n  /**\n   * Load the CMI from a flattened JSON object.\n   * This method populates the CMI data model from a flattened JSON structure\n   * where keys represent CMI element paths (e.g., \"cmi.core.student_id\").\n   *\n   * @param {StringKeyMap} json - The flattened JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a flattened JSON structure\n   * api.loadFromFlattenedJSON({\n   *   \"cmi.core.student_id\": \"12345\",\n   *   \"cmi.core.student_name\": \"John Doe\",\n   *   \"cmi.core.lesson_status\": \"incomplete\"\n   * });\n   */\n  loadFromFlattenedJSON(json: StringKeyMap, CMIElement?: string) {\n    if (!CMIElement) {\n      // by default, we start from a blank string because we're expecting each element to start with `cmi`\n      CMIElement = \"\";\n    }\n\n    this._serializationService.loadFromFlattenedJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Returns a flattened JSON object representing the current CMI data.\n   */\n  getFlattenedCMI(): StringKeyMap {\n    return Utilities.flatten(this.renderCMIToJSONObject());\n  }\n\n  /**\n   * Loads CMI data from a hierarchical JSON object.\n   * This method populates the CMI data model from a nested JSON structure\n   * that mirrors the CMI object hierarchy.\n   *\n   * @param {StringKeyMap} json - The hierarchical JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a hierarchical JSON structure\n   * api.loadFromJSON({\n   *   core: {\n   *     student_id: \"12345\",\n   *     student_name: \"John Doe\",\n   *     lesson_status: \"incomplete\"\n   *   },\n   *   objectives: [\n   *     { id: \"obj1\", score: { raw: 85 } }\n   *   ]\n   * });\n   */\n  loadFromJSON(json: StringKeyMap, CMIElement: string = \"\") {\n    if (\n      (!CMIElement || CMIElement === \"\") &&\n      !Object.hasOwnProperty.call(json, \"cmi\") &&\n      !Object.hasOwnProperty.call(json, \"adl\")\n    ) {\n      // providing a backward compatibility for the old v1 API\n      CMIElement = \"cmi\";\n    }\n    this._serializationService.loadFromJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Render the CMI object to a JSON string for sending to an LMS.\n   * This method serializes the current CMI data model to a JSON string.\n   * The output format is controlled by the sendFullCommit setting.\n   *\n   * @return {string} A JSON string representation of the CMI data\n   * @example\n   * // Get the current CMI data as a JSON string\n   * const jsonString = api.renderCMIToJSONString();\n   * console.log(jsonString); // '{\"core\":{\"student_id\":\"12345\",...}}'\n   */\n  renderCMIToJSONString(): string {\n    return this._serializationService.renderCMIToJSONString(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Returns a JavaScript object representing the current CMI data.\n   * This method creates a plain JavaScript object that mirrors the\n   * structure of the CMI data model, suitable for further processing.\n   *\n   * @return {StringKeyMap} A JavaScript object representing the CMI data\n   * @example\n   * // Get the current CMI data as a JavaScript object\n   * const cmiObject = api.renderCMIToJSONObject();\n   * console.log(cmiObject.core.student_id); // \"12345\"\n   */\n  renderCMIToJSONObject(): StringKeyMap {\n    return this._serializationService.renderCMIToJSONObject(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Process an HTTP request\n   *\n   * @param {string} url - The URL to send the request to\n   * @param {CommitObject | StringKeyMap | Array<any>} params - The parameters to send\n   * @param {boolean} immediate - Whether to send the request immediately without waiting\n   * @returns {Promise<ResultObject>} - The result of the request\n   * @async\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n  ): Promise<ResultObject> {\n    // If offline support is enabled and device is offline, store data locally instead of sending\n    if (\n      this.settings.enableOfflineSupport &&\n      this._offlineStorageService &&\n      !this._offlineStorageService.isDeviceOnline() &&\n      this._courseId\n    ) {\n      this.apiLog(\n        \"processHttpRequest\",\n        \"Device is offline, storing data locally\",\n        LogLevelEnum.INFO,\n      );\n\n      if (params && typeof params === \"object\" && \"cmi\" in params) {\n        return await this._offlineStorageService.storeOffline(\n          this._courseId,\n          params as CommitObject,\n        );\n      } else {\n        this.apiLog(\n          \"processHttpRequest\",\n          \"Invalid commit data format for offline storage\",\n          LogLevelEnum.ERROR,\n        );\n        return {\n          result: global_constants.SCORM_FALSE,\n          errorCode: this._error_codes.GENERAL,\n        };\n      }\n    }\n\n    // Otherwise, proceed with normal HTTP request\n    return await this._httpService.processHttpRequest(\n      url,\n      params,\n      immediate,\n      (functionName, message, level, element) => this.apiLog(functionName, message, level, element),\n      (functionName, CMIElement, value) => this.processListeners(functionName, CMIElement, value),\n    );\n  }\n\n  /**\n   * Schedules a commit operation to occur after a specified delay.\n   * This method is used to implement auto-commit functionality, where data\n   * is periodically sent to the LMS without requiring explicit commit calls.\n   *\n   * @param {number} when - The number of milliseconds to wait before committing\n   * @param {string} callback - The name of the commit event callback\n   * @example\n   * // Schedule a commit to happen in 60 seconds\n   * api.scheduleCommit(60000, \"commit\");\n   */\n  scheduleCommit(when: number, callback: string) {\n    if (!this._timeout) {\n      this._timeout = new ScheduledCommit(this, when, callback);\n      this.apiLog(\"scheduleCommit\", \"scheduled\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Clears and cancels any currently scheduled commits.\n   * This method is typically called when an explicit commit is performed\n   * or when the API is terminated, to prevent redundant commits.\n   *\n   * @example\n   * // Cancel any pending scheduled commits\n   * api.clearScheduledCommit();\n   */\n  clearScheduledCommit() {\n    if (this._timeout) {\n      this._timeout.cancel();\n      this._timeout = undefined;\n      this.apiLog(\"clearScheduledCommit\", \"cleared\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Checks if an object has a specific property, using multiple detection methods.\n   * This method performs a thorough check for property existence by:\n   * 1. Checking if it's an own property using Object.hasOwnProperty\n   * 2. Checking if it's defined in the prototype with a property descriptor\n   * 3. Checking if it's accessible via the 'in' operator (includes inherited properties)\n   *\n   * @param {StringKeyMap} StringKeyMap - The object to check for the property\n   * @param {string} attribute - The property name to look for\n   * @return {boolean} True if the property exists on the object or its prototype chain\n   * @private\n   *\n   * @example\n   * // Check for an own property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"name\"); // Returns true\n   *\n   * @example\n   * // Check for an inherited property\n   * class Parent { get type() { return \"parent\"; } }\n   * const child = Object.create(new Parent());\n   * this._checkObjectHasProperty(child, \"type\"); // Returns true\n   *\n   * @example\n   * // Check for a non-existent property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"age\"); // Returns false\n   */\n  private _checkObjectHasProperty(StringKeyMap: StringKeyMap, attribute: string): boolean {\n    return (\n      Object.hasOwnProperty.call(StringKeyMap, attribute) ||\n      Object.getOwnPropertyDescriptor(Object.getPrototypeOf(StringKeyMap), attribute) != null ||\n      attribute in StringKeyMap\n    );\n  }\n\n  /**\n   * Handles exceptions that occur when accessing CMI values.\n   * This method delegates to the ErrorHandlingService to process exceptions\n   * that occur during CMI data operations, ensuring consistent error handling\n   * throughout the API.\n   *\n   * @param {string} CMIElement\n   * @param {any} e - The exception that was thrown\n   * @param {string} returnValue - The default return value to use if an error occurs\n   * @return {string} Either the original returnValue or SCORM_FALSE if an error occurred\n   * @private\n   *\n   * @example\n   * // Handle a validation error when getting a CMI value\n   * try {\n   *   return this.getCMIValue(\"cmi.core.score.raw\");\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"\");\n   * }\n   *\n   * @example\n   * // Handle a general error when setting a CMI value\n   * try {\n   *   this.setCMIValue(\"cmi.core.lesson_status\", \"completed\");\n   *   return \"true\";\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"false\");\n   * }\n   */\n  private handleValueAccessException(CMIElement: string, e: any, returnValue: string): string {\n    if (e instanceof ValidationError) {\n      this.lastErrorCode = String(e.errorCode);\n      returnValue = global_constants.SCORM_FALSE;\n      this.throwSCORMError(CMIElement, e.errorCode, e.errorMessage);\n    } else {\n      if (e instanceof Error && e.message) {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, e.message);\n      } else {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, \"Unknown error\");\n      }\n    }\n    return returnValue;\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS.\n   * This method delegates to the SerializationService to create a properly\n   * formatted object containing the CMI data that needs to be sent to the LMS.\n   * The format and content of the commit object depend on whether this is a\n   * regular commit or a termination commit.\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @return {CommitObject|StringKeyMap|Array} The formatted commit object\n   * @protected\n   *\n   * @example\n   * // Create a regular commit object\n   * const regularCommit = this.getCommitObject(false);\n   * // Result might be: { cmi: { core: { lesson_status: \"incomplete\" } } }\n   *\n   * @example\n   * // Create a termination commit object (includes total_time)\n   * const terminationCommit = this.getCommitObject(true);\n   * // Result might be: { cmi: { core: { lesson_status: \"completed\", total_time: \"PT1H30M\" } } }\n   */\n  protected getCommitObject(terminateCommit: boolean): CommitObject | StringKeyMap | Array<any> {\n    return this._serializationService.getCommitObject(\n      terminateCommit,\n      this.settings.alwaysSendTotalTime,\n      this.settings.renderCommonCommitFields,\n      (terminateCommit) => this.renderCommitObject(terminateCommit),\n      (terminateCommit) => this.renderCommitCMI(terminateCommit),\n      this.apiLogLevel,\n    );\n  }\n}\n","import { CMI } from \"./cmi/scorm12/cmi\";\nimport * as Utilities from \"./utilities\";\nimport { StringKeyMap, stringMatches } from \"./utilities\";\nimport { global_constants, scorm12_constants } from \"./constants/api_constants\";\nimport { scorm12_errors } from \"./constants/error_codes\";\n\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport { CMIObjectivesObject } from \"./cmi/scorm12/objectives\";\nimport {\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject\n} from \"./cmi/scorm12/interactions\";\nimport { NAV } from \"./cmi/scorm12/nav\";\nimport { CommitObject, ResultObject, ScoreObject, Settings } from \"./types/api_types\";\nimport { CompletionStatus, SuccessStatus } from \"./constants/enums\";\nimport BaseAPI from \"./BaseAPI\";\nimport { scorm12_regex } from \"./constants/regex\";\n\n/**\n * API class for SCORM 1.2\n */\nclass Scorm12API extends BaseAPI {\n  /**\n   * Constructor for SCORM 1.2 API\n   * @param {object} settings\n   */\n  constructor(settings?: Settings) {\n    if (settings) {\n      if (settings.mastery_override === undefined) {\n        settings.mastery_override = false;\n      }\n    }\n\n    super(scorm12_errors, settings);\n\n    this.cmi = new CMI();\n    this.nav = new NAV();\n\n    // Rename functions to match 1.2 Spec and expose to modules\n    this.LMSInitialize = this.lmsInitialize;\n    this.LMSFinish = this.lmsFinish;\n    this.LMSGetValue = this.lmsGetValue;\n    this.LMSSetValue = this.lmsSetValue;\n    this.LMSCommit = this.lmsCommit;\n    this.LMSGetLastError = this.lmsGetLastError;\n    this.LMSGetErrorString = this.lmsGetErrorString;\n    this.LMSGetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  public statusSetByModule = false;\n\n  cmi: CMI;\n  nav: NAV;\n\n  LMSInitialize: () => string;\n  LMSFinish: () => string;\n  LMSGetValue: (CMIElement: string) => string;\n  LMSSetValue: (CMIElement: string, value: any) => string;\n  LMSCommit: () => string;\n  LMSGetLastError: () => string;\n  LMSGetErrorString: (CMIErrorCode: string) => string;\n  LMSGetDiagnostic: (CMIErrorCode: string) => string;\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset(settings?: Settings) {\n    this.commonReset(settings);\n\n    this.cmi?.reset();\n    this.nav?.reset();\n  }\n\n  /**\n   * lmsInitialize function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize(): string {\n    this.cmi.initialize();\n    if (this.cmi.core.lesson_status) {\n      this.statusSetByModule = true;\n    } else {\n      this.cmi.core.lesson_status = \"not attempted\";\n    }\n    return this.initialize(\n      \"LMSInitialize\",\n      \"LMS was already initialized!\",\n      \"LMS is already finished!\",\n    );\n  }\n\n  /**\n   * LMSFinish function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish(): string {\n    (async () => {\n      await this.internalFinish();\n    })();\n    return global_constants.SCORM_TRUE;\n  }\n\n  async internalFinish(): Promise<string> {\n    const result = await this.terminate(\"LMSFinish\", true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      if (this.nav.event !== \"\") {\n        if (this.nav.event === \"continue\") {\n          this.processListeners(\"SequenceNext\");\n        } else {\n          this.processListeners(\"SequencePrevious\");\n        }\n      } else if (this.settings.autoProgress) {\n        this.processListeners(\"SequenceNext\");\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * LMSGetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement: string): string {\n    return this.getValue(\"LMSGetValue\", false, CMIElement);\n  }\n\n  /**\n   * LMSSetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement: string, value: any): string {\n    if (CMIElement === \"cmi.core.lesson_status\") {\n      this.statusSetByModule = true;\n    }\n    return this.setValue(\"LMSSetValue\", \"LMSCommit\", false, CMIElement, value);\n  }\n\n  /**\n   * LMSCommit function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit(): string {\n    if (this.settings.asyncCommit) {\n      this.scheduleCommit(500, \"LMSCommit\");\n    } else {\n      (async () => {\n        await this.commit(\"LMSCommit\", false);\n      })();\n    }\n    return global_constants.SCORM_TRUE;\n  }\n\n  /**\n   * LMSGetLastError function from SCORM 1.2 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError(): string {\n    return this.getLastError(\"LMSGetLastError\");\n  }\n\n  /**\n   * LMSGetErrorString function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode: string): string {\n    return this.getErrorString(\"LMSGetErrorString\", CMIErrorCode);\n  }\n\n  /**\n   * LMSGetDiagnostic function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode: string): string {\n    return this.getDiagnostic(\"LMSGetDiagnostic\", CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  override setCMIValue(CMIElement: string, value: any): string {\n    return this._commonSetCMIValue(\"LMSSetValue\", false, CMIElement, value);\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  override getCMIValue(CMIElement: string): any {\n    return this._commonGetCMIValue(\"getCMIValue\", false, CMIElement);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {*} _value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI|null}\n   */\n  getChildElement(CMIElement: string, _value: any, foundFirstIndex: boolean): BaseCMI | null {\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      return new CMIObjectivesObject();\n    } else if (\n      foundFirstIndex &&\n      stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+\")\n    ) {\n      return new CMIInteractionsCorrectResponsesObject();\n    } else if (\n      foundFirstIndex &&\n      stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+\")\n    ) {\n      return new CMIInteractionsObjectivesObject();\n    } else if (!foundFirstIndex && stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\")) {\n      return new CMIInteractionsObject();\n    }\n\n    return null;\n  }\n\n  /**\n   * Validates Correct Response values\n   *\n   * @param {string} _CMIElement\n   * @param {*} _value\n   */\n  validateCorrectResponse(_CMIElement: string, _value: any) {\n    // do nothing\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {number|string} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  override getLmsErrorMessageDetails(errorNumber: number | string, detail: boolean): string {\n    let basicMessage = \"No Error\";\n    let detailMessage = \"No Error\";\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (scorm12_constants.error_descriptions[errorNumber]) {\n      basicMessage = scorm12_constants.error_descriptions[errorNumber].basicMessage;\n      detailMessage = scorm12_constants.error_descriptions[errorNumber].detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {Scorm12API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI: Scorm12API) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} includeTotalTime - Whether to include total time in the commit data\n   * @return {object|Array}\n   */\n  renderCommitCMI(\n    terminateCommit: boolean,\n    includeTotalTime: boolean = false,\n  ): StringKeyMap | Array<string> {\n    const cmiExport: StringKeyMap = this.renderCMIToJSONObject();\n\n    if (includeTotalTime) {\n      (cmiExport.cmi as any).core.total_time = this.cmi.getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened: StringKeyMap = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case \"flattened\":\n        return Utilities.flatten(cmiExport);\n      case \"params\":\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case \"json\":\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} includeTotalTime - Whether to include total time in the commit data\n   * @return {CommitObject}\n   */\n  renderCommitObject(terminateCommit: boolean, includeTotalTime: boolean = false): CommitObject {\n    const cmiExport = this.renderCommitCMI(terminateCommit, includeTotalTime);\n    const totalTimeHHMMSS = includeTotalTime ? this.cmi.getCurrentTotalTime() : \"\";\n    const totalTimeSeconds = Utilities.getTimeAsSeconds(totalTimeHHMMSS, scorm12_regex.CMITimespan);\n    const lessonStatus = this.cmi.core.lesson_status;\n    let completionStatus = CompletionStatus.UNKNOWN;\n    let successStatus = SuccessStatus.UNKNOWN;\n    if (lessonStatus) {\n      completionStatus =\n        lessonStatus === \"completed\" || lessonStatus === \"passed\"\n          ? CompletionStatus.COMPLETED\n          : CompletionStatus.INCOMPLETE;\n      if (lessonStatus === \"passed\") {\n        successStatus = SuccessStatus.PASSED;\n      } else if (lessonStatus === \"failed\") {\n        successStatus = SuccessStatus.FAILED;\n      }\n    }\n\n    const scoreObject: ScoreObject = this.cmi?.core?.score?.getScoreObject() || {};\n    const commitObject: CommitObject = {\n      successStatus: successStatus,\n      completionStatus: completionStatus,\n      runtimeData: cmiExport as StringKeyMap,\n      totalTimeSeconds: totalTimeSeconds,\n    };\n    if (scoreObject) {\n      commitObject.score = scoreObject;\n    }\n    return commitObject;\n  }\n\n  /**\n   * Attempts to store the data to the LMS\n   *\n   * @param {boolean} terminateCommit\n   * @return {ResultObject}\n   */\n  async storeData(terminateCommit: boolean): Promise<ResultObject> {\n    if (terminateCommit) {\n      const originalStatus = this.cmi.core.lesson_status;\n      if (\n        !this.cmi.core.lesson_status ||\n        (!this.statusSetByModule && this.cmi.core.lesson_status === \"not attempted\")\n      ) {\n        this.cmi.core.lesson_status = \"completed\";\n      }\n\n      if (this.cmi.core.lesson_mode === \"normal\") {\n        if (this.cmi.core.credit === \"credit\") {\n          if (\n            this.settings.mastery_override &&\n            this.cmi.student_data.mastery_score !== \"\" &&\n            this.cmi.core.score.raw !== \"\"\n          ) {\n            this.cmi.core.lesson_status =\n              parseFloat(this.cmi.core.score.raw) >= parseFloat(this.cmi.student_data.mastery_score)\n                ? \"passed\"\n                : \"failed\";\n          }\n        }\n      } else if (this.cmi.core.lesson_mode === \"browse\") {\n        if (\n          ((this.startingData?.cmi as any)?.core?.lesson_status || \"\") === \"\" &&\n          originalStatus === \"not attempted\"\n        ) {\n          this.cmi.core.lesson_status = \"browsed\";\n        }\n      }\n    }\n\n    const commitObject = this.getCommitObject(terminateCommit);\n    if (typeof this.settings.lmsCommitUrl === \"string\") {\n      return await this.processHttpRequest(\n        this.settings.lmsCommitUrl,\n        commitObject,\n        terminateCommit,\n      );\n    } else {\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    }\n  }\n}\n\nexport default Scorm12API;\n","import { ValidationError } from \"../exceptions\";\nimport { aicc_constants } from \"../constants/api_constants\";\n\nconst aicc_errors = aicc_constants.error_descriptions;\n\n/**\n * AICC Validation Error\n */\nexport class AICCValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(aicc_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        aicc_errors[String(errorCode)].basicMessage,\n        aicc_errors[String(errorCode)].detailMessage,\n      );\n    } else {\n      super(CMIElement, 101, aicc_errors[\"101\"].basicMessage, aicc_errors[\"101\"].detailMessage);\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, AICCValidationError.prototype);\n  }\n}\n","import { checkValidFormat } from \"../common/validation\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function checkAICCValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm12_errors.TYPE_MISMATCH,\n    AICCValidationError,\n    allowEmptyString,\n  );\n}\n","import { CMIArray } from \"../common/array\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { aicc_regex } from \"../../constants/regex\";\n\n/**\n * AICC Evaluation object\n */\nexport class CMIEvaluation extends BaseCMI {\n  /**\n   * Constructor for AICC Evaluation object\n   */\n  constructor() {\n    super(\"cmi.evaluation\");\n    this.comments = new CMIEvaluationComments();\n  }\n\n  public comments: CMIEvaluationComments;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.comments?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this.comments?.reset();\n  }\n\n  /**\n   * toJSON for cmi.evaluation object\n   * @return {{comments: CMIEvaluationComments}}\n   */\n  toJSON(): {\n    comments: CMIEvaluationComments;\n  } {\n    this.jsonString = true;\n    const result = {\n      comments: this.comments,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing AICC's cmi.evaluation.comments object\n */\n\nclass CMIEvaluationComments extends CMIArray {\n  /**\n   * Constructor for AICC Evaluation Comments object\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.evaluation.comments\",\n      children: aicc_constants.comments_children,\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: AICCValidationError,\n    });\n  }\n}\n\n/**\n * Class for AICC Evaluation Comments\n */\nexport class CMIEvaluationCommentsObject extends BaseCMI {\n  private _content = \"\";\n  private _location = \"\";\n  private _time = \"\";\n\n  /**\n   * Constructor for Evaluation Comments\n   */\n  constructor() {\n    super(\"cmi.evaluation.comments.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._content = \"\";\n    this._location = \"\";\n    this._time = \"\";\n  }\n\n  /**\n   * Getter for _content\n   * @return {string}\n   */\n  get content(): string {\n    return this._content;\n  }\n\n  /**\n   * Setter for _content\n   * @param {string} content\n   */\n  set content(content: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".content\", content, aicc_regex.CMIString256)) {\n      this._content = content;\n    }\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".location\", location, aicc_regex.CMIString256)) {\n      this._location = location;\n    }\n  }\n\n  /**\n   * Getter for _time\n   * @return {string}\n   */\n  get time(): string {\n    return this._time;\n  }\n\n  /**\n   * Setting for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".time\", time, aicc_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.evaluation.comments.n object\n   * @return {\n   *    {\n   *      content: string,\n   *      location: string,\n   *      time: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    content: string;\n    location: string;\n    time: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      content: this.content,\n      location: this.location,\n      time: this.time,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { CMIStudentPreference } from \"../scorm12/student_preference\";\n\n/**\n * StudentPreferences class for AICC\n */\nexport class AICCStudentPreferences extends CMIStudentPreference {\n  /**\n   * Constructor for AICC Student Preferences object\n   */\n  constructor() {\n    super(aicc_constants.student_preference_children);\n    this.windows = new CMIArray({\n      CMIElement: \"cmi.student_preference.windows\",\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: AICCValidationError,\n      children: \"\",\n    });\n  }\n\n  public windows: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.windows?.initialize();\n  }\n\n  private _lesson_type = \"\";\n  private _text_color = \"\";\n  private _text_location = \"\";\n  private _text_size = \"\";\n  private _video = \"\";\n\n  /**\n   * Getter for _lesson_type\n   * @return {string}\n   */\n  get lesson_type(): string {\n    return this._lesson_type;\n  }\n\n  /**\n   * Setter for _lesson_type\n   * @param {string} lesson_type\n   */\n  set lesson_type(lesson_type: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".lesson_type\", lesson_type, aicc_regex.CMIString256)\n    ) {\n      this._lesson_type = lesson_type;\n    }\n  }\n\n  /**\n   * Getter for _text_color\n   * @return {string}\n   */\n  get text_color(): string {\n    return this._text_color;\n  }\n\n  /**\n   * Setter for _text_color\n   * @param {string} text_color\n   */\n  set text_color(text_color: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".text_color\", text_color, aicc_regex.CMIString256)\n    ) {\n      this._text_color = text_color;\n    }\n  }\n\n  /**\n   * Getter for _text_location\n   * @return {string}\n   */\n  get text_location(): string {\n    return this._text_location;\n  }\n\n  /**\n   * Setter for _text_location\n   * @param {string} text_location\n   */\n  set text_location(text_location: string) {\n    if (\n      checkAICCValidFormat(\n        this._cmi_element + \".text_location\",\n        text_location,\n        aicc_regex.CMIString256,\n      )\n    ) {\n      this._text_location = text_location;\n    }\n  }\n\n  /**\n   * Getter for _text_size\n   * @return {string}\n   */\n  get text_size(): string {\n    return this._text_size;\n  }\n\n  /**\n   * Setter for _text_size\n   * @param {string} text_size\n   */\n  set text_size(text_size: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".text_size\", text_size, aicc_regex.CMIString256)\n    ) {\n      this._text_size = text_size;\n    }\n  }\n\n  /**\n   * Getter for _video\n   * @return {string}\n   */\n  get video(): string {\n    return this._video;\n  }\n\n  /**\n   * Setter for _video\n   * @param {string} video\n   */\n  set video(video: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".video\", video, aicc_regex.CMIString256)) {\n      this._video = video;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_preference\n   *\n   * @return {\n   *    {\n   *      audio: string,\n   *      language: string,\n   *      speed: string,\n   *      text: string,\n   *      text_color: string,\n   *      text_location: string,\n   *      text_size: string,\n   *      video: string,\n   *      windows: CMIArray\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    audio: string;\n    language: string;\n    lesson_type: string;\n    speed: string;\n    text: string;\n    text_color: string;\n    text_location: string;\n    text_size: string;\n    video: string;\n    windows: CMIArray;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio: this.audio,\n      language: this.language,\n      lesson_type: this.lesson_type,\n      speed: this.speed,\n      text: this.text,\n      text_color: this.text_color,\n      text_location: this.text_location,\n      text_size: this.text_size,\n      video: this.video,\n      windows: this.windows,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Class representing the AICC cmi.student_demographics object\n */\nexport class CMIStudentDemographics extends BaseCMI {\n  private __children = aicc_constants.student_demographics_children;\n  private _city = \"\";\n  private _class = \"\";\n  private _company = \"\";\n  private _country = \"\";\n  private _experience = \"\";\n  private _familiar_name = \"\";\n  private _instructor_name = \"\";\n  private _title = \"\";\n  private _native_language = \"\";\n  private _state = \"\";\n  private _street_address = \"\";\n  private _telephone = \"\";\n  private _years_experience = \"\";\n\n  /**\n   * Constructor for AICC StudentDemographics object\n   */\n  constructor() {\n    super(\"cmi.student_demographics\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Getter for city\n   * @return {string}\n   */\n  get city(): string {\n    return this._city;\n  }\n\n  /**\n   * Setter for _city. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} city\n   */\n  set city(city: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.city\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._city = city;\n    }\n  }\n\n  /**\n   * Getter for class\n   * @return {string}\n   */\n  get class(): string {\n    return this._class;\n  }\n\n  /**\n   * Setter for _class. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} clazz\n   */\n  set class(clazz: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.class\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._class = clazz;\n    }\n  }\n\n  /**\n   * Getter for company\n   * @return {string}\n   */\n  get company(): string {\n    return this._company;\n  }\n\n  /**\n   * Setter for _company. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} company\n   */\n  set company(company: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.company\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._company = company;\n    }\n  }\n\n  /**\n   * Getter for country\n   * @return {string}\n   */\n  get country(): string {\n    return this._country;\n  }\n\n  /**\n   * Setter for _country. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} country\n   */\n  set country(country: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.country\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._country = country;\n    }\n  }\n\n  /**\n   * Getter for experience\n   * @return {string}\n   */\n  get experience(): string {\n    return this._experience;\n  }\n\n  /**\n   * Setter for _experience. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} experience\n   */\n  set experience(experience: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.experience\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._experience = experience;\n    }\n  }\n\n  /**\n   * Getter for familiar_name\n   * @return {string}\n   */\n  get familiar_name(): string {\n    return this._familiar_name;\n  }\n\n  /**\n   * Setter for _familiar_name. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} familiar_name\n   */\n  set familiar_name(familiar_name: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.familiar_name\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._familiar_name = familiar_name;\n    }\n  }\n\n  /**\n   * Getter for instructor_name\n   * @return {string}\n   */\n  get instructor_name(): string {\n    return this._instructor_name;\n  }\n\n  /**\n   * Setter for _instructor_name. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} instructor_name\n   */\n  set instructor_name(instructor_name: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.instructor_name\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._instructor_name = instructor_name;\n    }\n  }\n\n  /**\n   * Getter for title\n   * @return {string}\n   */\n  get title(): string {\n    return this._title;\n  }\n\n  /**\n   * Setter for _title. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} title\n   */\n  set title(title: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.title\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._title = title;\n    }\n  }\n\n  /**\n   * Getter for native_language\n   * @return {string}\n   */\n  get native_language(): string {\n    return this._native_language;\n  }\n\n  /**\n   * Setter for _native_language. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} native_language\n   */\n  set native_language(native_language: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.native_language\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._native_language = native_language;\n    }\n  }\n\n  /**\n   * Getter for state\n   * @return {string}\n   */\n  get state(): string {\n    return this._state;\n  }\n\n  /**\n   * Setter for _state. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} state\n   */\n  set state(state: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.state\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._state = state;\n    }\n  }\n\n  /**\n   * Getter for street_address\n   * @return {string}\n   */\n  get street_address(): string {\n    return this._street_address;\n  }\n\n  /**\n   * Setter for _street_address. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} street_address\n   */\n  set street_address(street_address: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.street_address\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._street_address = street_address;\n    }\n  }\n\n  /**\n   * Getter for telephone\n   * @return {string}\n   */\n  get telephone(): string {\n    return this._telephone;\n  }\n\n  /**\n   * Setter for _telephone. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} telephone\n   */\n  set telephone(telephone: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.telephone\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._telephone = telephone;\n    }\n  }\n\n  /**\n   * Getter for years_experience\n   * @return {string}\n   */\n  get years_experience(): string {\n    return this._years_experience;\n  }\n\n  /**\n   * Setter for _years_experience. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} years_experience\n   */\n  set years_experience(years_experience: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.years_experience\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._years_experience = years_experience;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_demographics object\n   * @return {\n   *      {\n   *        city: string,\n   *        class: string,\n   *        company: string,\n   *        country: string,\n   *        experience: string,\n   *        familiar_name: string,\n   *        instructor_name: string,\n   *        title: string,\n   *        native_language: string,\n   *        state: string,\n   *        street_address: string,\n   *        telephone: string,\n   *        years_experience: string\n   *      }\n   *    }\n   */\n  toJSON(): {\n    city: string;\n    class: string;\n    company: string;\n    country: string;\n    experience: string;\n    familiar_name: string;\n    instructor_name: string;\n    title: string;\n    native_language: string;\n    state: string;\n    street_address: string;\n    telephone: string;\n    years_experience: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      city: this.city,\n      class: this.class,\n      company: this.company,\n      country: this.country,\n      experience: this.experience,\n      familiar_name: this.familiar_name,\n      instructor_name: this.instructor_name,\n      title: this.title,\n      native_language: this.native_language,\n      state: this.state,\n      street_address: this.street_address,\n      telephone: this.telephone,\n      years_experience: this.years_experience,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { checkAICCValidFormat } from \"./validation\";\n\n/**\n * Class representing the AICC cmi.student_data.tries object\n */\nexport class CMITries extends CMIArray {\n  /**\n   * Constructor for inline Tries Array class\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.student_data.tries\",\n      children: aicc_constants.tries_children,\n    });\n  }\n}\n\n/**\n * Class for AICC Tries\n */\nexport class CMITriesObject extends BaseCMI {\n  private _status = \"\";\n  private _time = \"\";\n\n  /**\n   * Constructor for AICC Tries object\n   */\n  constructor() {\n    super(\"cmi.student_data.tries.n\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.student_data.tries.n.score\",\n      score_children: aicc_constants.score_children,\n      score_range: aicc_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE,\n      errorClass: AICCValidationError,\n    });\n  }\n\n  public score: CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._status = \"\";\n    this._time = \"\";\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for _status\n   * @return {string}\n   */\n  get status(): string {\n    return this._status;\n  }\n\n  /**\n   * Setter for _status\n   * @param {string} status\n   */\n  set status(status: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".status\", status, aicc_regex.CMIStatus2)) {\n      this._status = status;\n    }\n  }\n\n  /**\n   * Getter for _time\n   * @return {string}\n   */\n  get time(): string {\n    return this._time;\n  }\n\n  /**\n   * Setter for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".time\", time, aicc_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data.tries.n object\n   * @return {\n   *    {\n   *      status: string,\n   *      time: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    status: string;\n    time: string;\n    score: CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      status: this.status,\n      time: this.time,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { CMIArray } from \"../common/array\";\n\n/**\n * Class for cmi.student_data.attempt_records array\n */\nexport class CMIAttemptRecords extends CMIArray {\n  /**\n   * Constructor for inline Tries Array class\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.student_data.attempt_records\",\n      children: aicc_constants.attempt_records_children,\n    });\n  }\n}\n\n/**\n * Class for AICC Attempt Records\n */\nexport class CMIAttemptRecordsObject extends BaseCMI {\n  private _lesson_status = \"\";\n\n  /**\n   * Constructor for AICC Attempt Records object\n   */\n  constructor() {\n    super(\"cmi.student_data.attempt_records.n\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.student_data.attempt_records.n.score\",\n      score_children: aicc_constants.score_children,\n      score_range: aicc_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE,\n      errorClass: AICCValidationError,\n    });\n  }\n\n  public score: CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n\n    this._lesson_status = \"\";\n    this.score?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for _lesson_status\n   * @return {string}\n   */\n  get lesson_status(): string {\n    return this._lesson_status;\n  }\n\n  /**\n   * Setter for _lesson_status\n   * @param {string} lesson_status\n   */\n  set lesson_status(lesson_status: string) {\n    if (\n      checkAICCValidFormat(\n        this._cmi_element + \".lesson_status\",\n        lesson_status,\n        aicc_regex.CMIStatus2,\n      )\n    ) {\n      this._lesson_status = lesson_status;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data.attempt_records.n object\n   * @return {\n   *    {\n   *         lesson_status: string,\n   *         score: CMIScore\n   *     }\n   *  }\n   */\n  toJSON(): {\n    lesson_status: string;\n    score: CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      lesson_status: this.lesson_status,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { CMITries } from \"./tries\";\nimport { CMIStudentData } from \"../scorm12/student_data\";\nimport { CMIAttemptRecords } from \"./attempts\";\n\n/**\n * StudentData class for AICC\n */\nexport class AICCCMIStudentData extends CMIStudentData {\n  /**\n   * Constructor for AICC StudentData object\n   */\n  constructor() {\n    super(aicc_constants.student_data_children);\n    this.tries = new CMITries();\n    this.attempt_records = new CMIAttemptRecords();\n  }\n\n  public tries: CMITries;\n  public attempt_records: CMIAttemptRecords;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.tries?.initialize();\n    this.attempt_records?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n    this.tries?.reset(true);\n    this.attempt_records?.reset(true);\n  }\n\n  private _tries_during_lesson = \"\";\n\n  /**\n   * Getter for tries_during_lesson\n   * @return {string}\n   */\n  get tries_during_lesson(): string {\n    return this._tries_during_lesson;\n  }\n\n  /**\n   * Setter for _tries_during_lesson. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} tries_during_lesson\n   */\n  set tries_during_lesson(tries_during_lesson: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_data.tries_during_lesson\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._tries_during_lesson = tries_during_lesson;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data object\n   * @return {\n   *    {\n   *      mastery_score: string,\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      tries: CMITries,\n   *      attempt_records: CMIAttemptRecords\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    mastery_score: string;\n    max_time_allowed: string;\n    time_limit_action: string;\n    tries: CMITries;\n    attempt_records: CMIAttemptRecords;\n  } {\n    this.jsonString = true;\n    const result = {\n      mastery_score: this.mastery_score,\n      max_time_allowed: this.max_time_allowed,\n      time_limit_action: this.time_limit_action,\n      tries: this.tries,\n      attempt_records: this.attempt_records,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { CMIArray } from \"../common/array\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { aicc_constants } from \"../../constants/api_constants\";\n\n/**\n * Class representing the AICC `cmi.paths` object\n */\nexport class CMIPaths extends CMIArray {\n  /**\n   * Constructor for inline Paths Array class\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.paths\",\n      children: aicc_constants.paths_children,\n    });\n  }\n}\n\n/**\n * Class for AICC Paths\n */\nexport class CMIPathsObject extends BaseCMI {\n  private _location_id = \"\";\n  private _date = \"\";\n  private _time = \"\";\n  private _status = \"\";\n  private _why_left = \"\";\n  private _time_in_element = \"\";\n\n  /**\n   * Constructor for AICC Paths objects\n   */\n  constructor() {\n    super(\"cmi.paths.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._location_id = \"\";\n    this._date = \"\";\n    this._time = \"\";\n    this._status = \"\";\n    this._why_left = \"\";\n    this._time_in_element = \"\";\n  }\n\n  /**\n   * Getter for _location_id\n   * @return {string}\n   */\n  get location_id(): string {\n    return this._location_id;\n  }\n\n  /**\n   * Setter for _location_id\n   * @param {string} location_id\n   */\n  set location_id(location_id: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".location_id\", location_id, aicc_regex.CMIString256)\n    ) {\n      this._location_id = location_id;\n    }\n  }\n\n  /**\n   * Getter for _date\n   * @return {string}\n   */\n  get date(): string {\n    return this._date;\n  }\n\n  /**\n   * Setter for _date\n   * @param {string} date\n   */\n  set date(date: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".date\", date, aicc_regex.CMIString256)) {\n      this._date = date;\n    }\n  }\n\n  /**\n   * Getter for _time\n   * @return {string}\n   */\n  get time(): string {\n    return this._time;\n  }\n\n  /**\n   * Setter for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".time\", time, aicc_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * Getter for _status\n   * @return {string}\n   */\n  get status(): string {\n    return this._status;\n  }\n\n  /**\n   * Setter for _status\n   * @param {string} status\n   */\n  set status(status: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".status\", status, aicc_regex.CMIStatus2)) {\n      this._status = status;\n    }\n  }\n\n  /**\n   * Getter for _why_left\n   * @return {string}\n   */\n  get why_left(): string {\n    return this._why_left;\n  }\n\n  /**\n   * Setter for _why_left\n   * @param {string} why_left\n   */\n  set why_left(why_left: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".why_left\", why_left, aicc_regex.CMIString256)) {\n      this._why_left = why_left;\n    }\n  }\n\n  /**\n   * Getter for _time_in_element\n   * @return {string}\n   */\n  get time_in_element(): string {\n    return this._time_in_element;\n  }\n\n  /**\n   * Setter for _time_in_element\n   * @param {string} time_in_element\n   */\n  set time_in_element(time_in_element: string) {\n    if (\n      checkAICCValidFormat(\n        this._cmi_element + \".time_in_element\",\n        time_in_element,\n        aicc_regex.CMITime,\n      )\n    ) {\n      this._time_in_element = time_in_element;\n    }\n  }\n\n  /**\n   * toJSON for cmi.paths.n object\n   * @return {\n   *    {\n   *      location_id: string,\n   *      date: string,\n   *      time: string,\n   *      status: string,\n   *      why_left: string,\n   *      time_in_element: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    location_id: string;\n    date: string;\n    time: string;\n    status: string;\n    why_left: string;\n    time_in_element: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      location_id: this.location_id,\n      date: this.date,\n      time: this.time,\n      status: this.status,\n      why_left: this.why_left,\n      time_in_element: this.time_in_element,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import * as Scorm12CMI from \"../scorm12/cmi\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { CMIEvaluation } from \"./evaluation\";\nimport { AICCStudentPreferences } from \"./student_preferences\";\nimport { CMIStudentDemographics } from \"./student_demographics\";\nimport { AICCCMIStudentData } from \"./student_data\";\nimport { CMIPaths } from \"./paths\";\nimport { CMICore } from \"./core\";\nimport { CMIObjectives } from \"../scorm12/objectives\";\nimport { CMIStudentData } from \"../scorm12/student_data\";\nimport { CMIStudentPreference } from \"../scorm12/student_preference\";\nimport { CMIInteractions } from \"../scorm12/interactions\";\n\n/**\n * CMI Class for AICC\n */\nexport class CMI extends Scorm12CMI.CMI {\n  /**\n   * Constructor for AICC CMI object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean = false) {\n    super(aicc_constants.cmi_children);\n    if (initialized) this.initialize();\n    this.student_preference = new AICCStudentPreferences();\n    this.student_data = new AICCCMIStudentData();\n    this.student_demographics = new CMIStudentDemographics();\n    this.evaluation = new CMIEvaluation();\n    this.paths = new CMIPaths();\n  }\n\n  public override student_data: AICCCMIStudentData;\n  public override student_preference: AICCStudentPreferences;\n  public student_demographics: CMIStudentDemographics;\n  public evaluation: CMIEvaluation;\n  public paths: CMIPaths;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.student_preference?.initialize();\n    this.student_data?.initialize();\n    this.student_demographics?.initialize();\n    this.evaluation?.initialize();\n    this.paths?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions,\n   *      paths: CMIPaths\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    suspend_data: string;\n    launch_data: string;\n    comments: string;\n    comments_from_lms: string;\n    core: CMICore;\n    objectives: CMIObjectives;\n    student_data: CMIStudentData;\n    student_preference: CMIStudentPreference;\n    student_demographics: CMIStudentDemographics;\n    interactions: CMIInteractions;\n    evaluation: CMIEvaluation;\n    paths: CMIPaths;\n  } {\n    this.jsonString = true;\n    const result = {\n      suspend_data: this.suspend_data,\n      launch_data: this.launch_data,\n      comments: this.comments,\n      comments_from_lms: this.comments_from_lms,\n      core: this.core,\n      objectives: this.objectives,\n      student_data: this.student_data,\n      student_preference: this.student_preference,\n      student_demographics: this.student_demographics,\n      interactions: this.interactions,\n      evaluation: this.evaluation,\n      paths: this.paths,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import Scorm12API from \"./Scorm12API\";\nimport { CMI } from \"./cmi/aicc/cmi\";\n\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport { CMITriesObject } from \"./cmi/aicc/tries\";\nimport { CMIAttemptRecordsObject } from \"./cmi/aicc/attempts\";\nimport { CMIEvaluationCommentsObject } from \"./cmi/aicc/evaluation\";\nimport { NAV } from \"./cmi/scorm12/nav\";\nimport { CMIPathsObject } from \"./cmi/aicc/paths\";\nimport { Settings } from \"./types/api_types\";\nimport { stringMatches } from \"./utilities\";\n\n/**\n * The AICC API class\n */\nclass AICC extends Scorm12API {\n  /**\n   * Constructor to create AICC API object\n   * @param {Settings} settings\n   */\n  constructor(settings?: Settings) {\n    super(settings);\n\n    this.cmi = new CMI();\n    this.nav = new NAV();\n  }\n\n  override cmi: CMI;\n  override nav: NAV;\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI | null}\n   */\n  override getChildElement(\n    CMIElement: string,\n    value: any,\n    foundFirstIndex: boolean,\n  ): BaseCMI | null {\n    let newChild = super.getChildElement(CMIElement, value, foundFirstIndex);\n\n    if (!newChild) {\n      if (stringMatches(CMIElement, \"cmi\\\\.evaluation\\\\.comments\\\\.\\\\d+\")) {\n        newChild = new CMIEvaluationCommentsObject();\n      } else if (stringMatches(CMIElement, \"cmi\\\\.student_data\\\\.tries\\\\.\\\\d+\")) {\n        newChild = new CMITriesObject();\n      } else if (stringMatches(CMIElement, \"cmi\\\\.student_data\\\\.attempt_records\\\\.\\\\d+\")) {\n        newChild = new CMIAttemptRecordsObject();\n      } else if (stringMatches(CMIElement, \"cmi\\\\.paths\\\\.\\\\d+\")) {\n        newChild = new CMIPathsObject();\n      }\n    }\n\n    return newChild;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {AICC} newAPI\n   */\n  override replaceWithAnotherScormAPI(newAPI: AICC) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.nav = newAPI.nav;\n  }\n}\n\nexport default AICC;\n","import { ValidationError } from \"../exceptions\";\nimport { scorm2004_constants } from \"../constants/api_constants\";\n\nconst scorm2004_errors = scorm2004_constants.error_descriptions;\n\n/**\n * SCORM 2004 Validation Error\n */\nexport class Scorm2004ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm2004_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm2004_errors[String(errorCode)].basicMessage,\n        scorm2004_errors[String(errorCode)].detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm2004_errors[\"101\"].basicMessage,\n        scorm2004_errors[\"101\"].detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm2004ValidationError.prototype);\n  }\n}\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check2004ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm2004_errors.TYPE_MISMATCH,\n    Scorm2004ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @return {boolean}\n */\nexport function check2004ValidRange(\n  CMIElement: string,\n  value: string,\n  rangePattern: string,\n): boolean {\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm2004_errors.VALUE_OUT_OF_RANGE,\n    Scorm2004ValidationError,\n  );\n}\n","/**\n * Class for SCORM 2004's cmi.learner_preference object\n */\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\n\nexport class CMILearnerPreference extends BaseCMI {\n  private __children = scorm2004_constants.student_preference_children;\n  private _audio_level = \"1\";\n  private _language = \"\";\n  private _delivery_speed = \"1\";\n  private _audio_captioning = \"0\";\n\n  /**\n   * Constructor for cmi.learner_preference\n   */\n  constructor() {\n    super(\"cmi.learner_preference\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._children\",\n      scorm2004_errors.READ_ONLY_ELEMENT,\n    );\n  }\n\n  /**\n   * Getter for _audio_level\n   * @return {string}\n   */\n  get audio_level(): string {\n    return this._audio_level;\n  }\n\n  /**\n   * Setter for _audio_level\n   * @param {string} audio_level\n   */\n  set audio_level(audio_level: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".audio_level\",\n        audio_level,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".audio_level\",\n        audio_level,\n        scorm2004_regex.audio_range,\n      )\n    ) {\n      this._audio_level = audio_level;\n    }\n  }\n\n  /**\n   * Getter for _language\n   * @return {string}\n   */\n  get language(): string {\n    return this._language;\n  }\n\n  /**\n   * Setter for _language\n   * @param {string} language\n   */\n  set language(language: string) {\n    if (check2004ValidFormat(this._cmi_element + \".language\", language, scorm2004_regex.CMILang)) {\n      this._language = language;\n    }\n  }\n\n  /**\n   * Getter for _delivery_speed\n   * @return {string}\n   */\n  get delivery_speed(): string {\n    return this._delivery_speed;\n  }\n\n  /**\n   * Setter for _delivery_speed\n   * @param {string} delivery_speed\n   */\n  set delivery_speed(delivery_speed: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".delivery_speed\",\n        delivery_speed,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".delivery_speed\",\n        delivery_speed,\n        scorm2004_regex.speed_range,\n      )\n    ) {\n      this._delivery_speed = delivery_speed;\n    }\n  }\n\n  /**\n   * Getter for _audio_captioning\n   * @return {string}\n   */\n  get audio_captioning(): string {\n    return this._audio_captioning;\n  }\n\n  /**\n   * Setter for _audio_captioning\n   * @param {string} audio_captioning\n   */\n  set audio_captioning(audio_captioning: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".audio_captioning\",\n        audio_captioning,\n        scorm2004_regex.CMISInteger,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".audio_captioning\",\n        audio_captioning,\n        scorm2004_regex.text_range,\n      )\n    ) {\n      this._audio_captioning = audio_captioning;\n    }\n  }\n\n  /**\n   * toJSON for cmi.learner_preference\n   *\n   * @return {\n   *    {\n   *      audio_level: string,\n   *      language: string,\n   *      delivery_speed: string,\n   *      audio_captioning: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    audio_level: string;\n    language: string;\n    delivery_speed: string;\n    audio_captioning: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio_level: this.audio_level,\n      language: this.language,\n      delivery_speed: this.delivery_speed,\n      audio_captioning: this.audio_captioning,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { scorm2004_regex } from \"./regex\";\n\nexport const LearnerResponses: Responses = {\n  \"true-false\": {\n    format: \"^true$|^false$\",\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  choice: {\n    format: scorm2004_regex.CMILongIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    unique: true,\n  },\n  \"fill-in\": {\n    format: scorm2004_regex.CMILangString250,\n    max: 10,\n    delimiter: \"[,]\",\n    unique: false,\n  },\n  \"long-fill-in\": {\n    format: scorm2004_regex.CMILangString4000,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  matching: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n  },\n  performance: {\n    format: \"^$|\" + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + \"|^$|\" + scorm2004_regex.CMIShortIdentifier,\n    max: 250,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n  },\n  sequencing: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    unique: false,\n  },\n  likert: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  numeric: {\n    format: scorm2004_regex.CMIDecimal,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  other: {\n    format: scorm2004_regex.CMIString4000,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n};\nexport const CorrectResponses: Responses = {\n  \"true-false\": {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: \"^true$|^false$\",\n    limit: 1,\n  },\n  choice: {\n    max: 36,\n    delimiter: \"[,]\",\n    unique: true,\n    duplicate: false,\n    format: scorm2004_regex.CMILongIdentifier,\n  },\n  \"fill-in\": {\n    max: 10,\n    delimiter: \"[,]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMILangString250cr,\n  },\n  \"long-fill-in\": {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: true,\n    format: scorm2004_regex.CMILangString4000,\n  },\n  matching: {\n    max: 36,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n  },\n  performance: {\n    max: 250,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    delimiter3: \"[:]\",\n    unique: false,\n    duplicate: false,\n    format: \"^$|\" + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + \"|^$|\" + scorm2004_regex.CMIShortIdentifier,\n  },\n  sequencing: {\n    max: 36,\n    delimiter: \"[,]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n  },\n  likert: {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    limit: 1,\n  },\n  numeric: {\n    max: 2,\n    delimiter: \"[:]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIDecimal,\n    limit: 1,\n  },\n  other: {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIString4000,\n    limit: 1,\n  },\n};\n\nexport type ResponseType = {\n  format: string;\n  max: number;\n  delimiter: string;\n  unique: boolean;\n  duplicate?: boolean;\n  format2?: string;\n  delimiter2?: string;\n  limit?: number;\n  delimiter3?: string;\n};\n\nexport type Responses = {\n  [key: string]: ResponseType;\n};\n","/**\n * Class representing SCORM 2004's `cmi.interactions` object\n */\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { CMIArray } from \"../common/array\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { CorrectResponses, LearnerResponses } from \"../../constants/response_constants\";\n\nexport class CMIInteractions extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives` Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.interactions\",\n      children: scorm2004_constants.interactions_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.interaction.n object\n */\n\nexport class CMIInteractionsObject extends BaseCMI {\n  private _id = \"\";\n  private _type = \"\";\n  private _timestamp = \"\";\n  private _weighting = \"\";\n  private _learner_response = \"\";\n  private _result = \"\";\n  private _latency = \"\";\n  private _description = \"\";\n\n  /**\n   * Constructor for cmi.interaction.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n\");\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.n.correct_responses\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  public objectives: CMIArray;\n  public correct_responses: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._id = \"\";\n    this._type = \"\";\n    this._timestamp = \"\";\n    this._weighting = \"\";\n    this._learner_response = \"\";\n    this._result = \"\";\n    this._latency = \"\";\n    this._description = \"\";\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.n.correct_responses\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _type\n   * @return {string}\n   */\n  get type(): string {\n    return this._type;\n  }\n\n  /**\n   * Setter for _type\n   * @param {string} type\n   */\n  set type(type: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".type\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (check2004ValidFormat(this._cmi_element + \".type\", type, scorm2004_regex.CMIType)) {\n        this._type = type;\n      }\n    }\n  }\n\n  /**\n   * Getter for _timestamp\n   * @return {string}\n   */\n  get timestamp(): string {\n    return this._timestamp;\n  }\n\n  /**\n   * Setter for _timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".timestamp\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".timestamp\", timestamp, scorm2004_regex.CMITime)\n      ) {\n        this._timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * Getter for _weighting\n   * @return {string}\n   */\n  get weighting(): string {\n    return this._weighting;\n  }\n\n  /**\n   * Setter for _weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".weighting\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".weighting\",\n          weighting,\n          scorm2004_regex.CMIDecimal,\n        )\n      ) {\n        this._weighting = weighting;\n      }\n    }\n  }\n\n  /**\n   * Getter for _learner_response\n   * @return {string}\n   */\n  get learner_response(): string {\n    return this._learner_response;\n  }\n\n  /**\n   * Setter for _learner_response. Does type validation to make sure response\n   * matches SCORM 2004's spec\n   * @param {string} learner_response\n   */\n  set learner_response(learner_response: string) {\n    if (this.initialized && (this._type === \"\" || this._id === \"\")) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_response\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      let nodes = [];\n      const response_type = LearnerResponses[this.type];\n\n      if (response_type) {\n        if (response_type?.delimiter) {\n          // Convert regex-style delimiter to actual character\n          const delimiter = response_type.delimiter === \"[,]\" ? \",\" : response_type.delimiter;\n          nodes = learner_response.split(delimiter);\n        } else {\n          nodes[0] = learner_response;\n        }\n\n        if (nodes.length > 0 && nodes.length <= response_type.max) {\n          const formatRegex = new RegExp(response_type.format);\n\n          for (let i = 0; i < nodes.length; i++) {\n            if (response_type?.delimiter2) {\n              // Convert regex-style delimiter to actual character\n              const delimiter2 =\n                response_type.delimiter2 === \"[.]\" ? \".\" : response_type.delimiter2;\n              const values = nodes[i].split(delimiter2);\n\n              if (values.length === 2) {\n                if (!values[0].match(formatRegex)) {\n                  throw new Scorm2004ValidationError(\n                    this._cmi_element + \".learner_response\",\n                    scorm2004_errors.TYPE_MISMATCH,\n                  );\n                } else {\n                  if (\n                    !response_type.format2 ||\n                    !values[1].match(new RegExp(response_type.format2))\n                  ) {\n                    throw new Scorm2004ValidationError(\n                      this._cmi_element + \".learner_response\",\n                      scorm2004_errors.TYPE_MISMATCH,\n                    );\n                  }\n                }\n              } else {\n                throw new Scorm2004ValidationError(\n                  this._cmi_element + \".learner_response\",\n                  scorm2004_errors.TYPE_MISMATCH,\n                );\n              }\n            } else {\n              if (!nodes[i].match(formatRegex)) {\n                throw new Scorm2004ValidationError(\n                  this._cmi_element + \".learner_response\",\n                  scorm2004_errors.TYPE_MISMATCH,\n                );\n              } else {\n                if (nodes[i] !== \"\" && response_type.unique) {\n                  for (let j = 0; j < i; j++) {\n                    if (nodes[i] === nodes[j]) {\n                      throw new Scorm2004ValidationError(\n                        this._cmi_element + \".learner_response\",\n                        scorm2004_errors.TYPE_MISMATCH,\n                      );\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          throw new Scorm2004ValidationError(\n            this._cmi_element + \".learner_response\",\n            scorm2004_errors.GENERAL_SET_FAILURE,\n          );\n        }\n\n        this._learner_response = learner_response;\n      } else {\n        throw new Scorm2004ValidationError(\n          this._cmi_element + \".learner_response\",\n          scorm2004_errors.TYPE_MISMATCH,\n        );\n      }\n    }\n  }\n\n  /**\n   * Getter for _result\n   * @return {string}\n   */\n  get result(): string {\n    return this._result;\n  }\n\n  /**\n   * Setter for _result\n   * @param {string} result\n   */\n  set result(result: string) {\n    if (check2004ValidFormat(this._cmi_element + \".result\", result, scorm2004_regex.CMIResult)) {\n      this._result = result;\n    }\n  }\n\n  /**\n   * Getter for _latency\n   * @return {string}\n   */\n  get latency(): string {\n    return this._latency;\n  }\n\n  /**\n   * Setter for _latency\n   * @param {string} latency\n   */\n  set latency(latency: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".latency\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".latency\", latency, scorm2004_regex.CMITimespan)\n      ) {\n        this._latency = latency;\n      }\n    }\n  }\n\n  /**\n   * Getter for _description\n   * @return {string}\n   */\n  get description(): string {\n    return this._description;\n  }\n\n  /**\n   * Setter for _description\n   * @param {string} description\n   */\n  set description(description: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".description\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".description\",\n          description,\n          scorm2004_regex.CMILangString250,\n          true,\n        )\n      ) {\n        this._description = description;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      type: string,\n   *      objectives: CMIArray,\n   *      timestamp: string,\n   *      correct_responses: CMIArray,\n   *      weighting: string,\n   *      learner_response: string,\n   *      result: string,\n   *      latency: string,\n   *      description: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    type: string;\n    objectives: CMIArray;\n    timestamp: string;\n    correct_responses: CMIArray;\n    weighting: string;\n    learner_response: string;\n    result: string;\n    latency: string;\n    description: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      type: this.type,\n      objectives: this.objectives,\n      timestamp: this.timestamp,\n      weighting: this.weighting,\n      learner_response: this.learner_response,\n      result: this.result,\n      latency: this.latency,\n      description: this.description,\n      correct_responses: this.correct_responses,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.objectives.n object\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  private _id = \"\";\n\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n.objectives.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._id = \"\";\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.correct_responses.n object\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  private _pattern = \"\";\n  private readonly _parent?: CMIInteractionsObject | undefined;\n\n  /**\n   * Constructor for cmi.interactions.n.correct_responses.n\n   * @param {CMIInteractionsObject} parent - The parent interaction object\n   */\n  constructor(parent?: CMIInteractionsObject) {\n    super(\"cmi.interactions.n.correct_responses.n\");\n    this._parent = parent;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._pattern = \"\";\n  }\n\n  /**\n   * Getter for _pattern\n   * @return {string}\n   */\n  get pattern(): string {\n    return this._pattern;\n  }\n\n  /**\n   * Setter for _pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern: string) {\n    // First do basic format validation\n    if (\n      check2004ValidFormat(this._cmi_element + \".pattern\", pattern, scorm2004_regex.CMIFeedback)\n    ) {\n      // If we have a parent interaction, validate the pattern against the interaction type\n      if (this._parent && this._parent.type) {\n        const interactionType = this._parent.type;\n        const response = CorrectResponses[interactionType];\n\n        if (response) {\n          // Validate the pattern against the interaction type\n          let isValid = true;\n          let nodes = [];\n\n          if (response?.delimiter) {\n            nodes = String(pattern).split(response.delimiter);\n          } else {\n            nodes[0] = pattern;\n          }\n\n          if (nodes.length > 0 && nodes.length <= response.max) {\n            const formatRegex = new RegExp(response.format);\n\n            for (let i = 0; i < nodes.length && isValid; i++) {\n              if (response?.delimiter2) {\n                const values = nodes[i].split(response.delimiter2);\n                if (values.length === 2) {\n                  const matches = values[0].match(formatRegex);\n                  if (!matches) {\n                    isValid = false;\n                  } else if (!response.format2 || !values[1].match(new RegExp(response.format2))) {\n                    isValid = false;\n                  }\n                } else {\n                  isValid = false;\n                }\n              } else {\n                const matches = nodes[i].match(formatRegex);\n                if (\n                  (!matches && pattern !== \"\") ||\n                  (!matches && interactionType === \"true-false\")\n                ) {\n                  isValid = false;\n                }\n              }\n            }\n          } else if (nodes.length > response.max) {\n            isValid = false;\n          }\n\n          if (!isValid) {\n            throw new Scorm2004ValidationError(\n              this._cmi_element + \".pattern\",\n              scorm2004_errors.TYPE_MISMATCH,\n            );\n          }\n        }\n      }\n\n      this._pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON cmi.interactions.n.correct_responses.n object\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    pattern: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      pattern: this.pattern,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","/**\n * Class for SCORM 2004's cmi *.score object\n */\nimport { CMIScore } from \"../common/score\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { ScoreObject } from \"../../types/api_types\";\n\nexport class Scorm2004CMIScore extends CMIScore {\n  private _scaled = \"\";\n\n  /**\n   * Constructor for cmi *.score\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.score\",\n      score_children: scorm2004_constants.score_children,\n      max: \"\",\n      invalidErrorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      invalidTypeCode: scorm2004_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm2004_errors.VALUE_OUT_OF_RANGE,\n      decimalRegex: scorm2004_regex.CMIDecimal,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n    this._scaled = \"\";\n    this._raw = \"\";\n    this._min = \"\";\n    this._max = \"\";\n  }\n\n  /**\n   * Getter for _scaled\n   * @return {string}\n   */\n  get scaled(): string {\n    return this._scaled;\n  }\n\n  /**\n   * Setter for _scaled\n   * @param {string} scaled\n   */\n  set scaled(scaled: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".scaled\", scaled, scorm2004_regex.CMIDecimal) &&\n      check2004ValidRange(this._cmi_element + \".scaled\", scaled, scorm2004_regex.scaled_range)\n    ) {\n      this._scaled = scaled;\n    }\n  }\n\n  override getScoreObject(): ScoreObject {\n    const scoreObject = super.getScoreObject();\n\n    if (!Number.isNaN(Number.parseFloat(this.scaled))) {\n      scoreObject.scaled = Number.parseFloat(this.scaled);\n    }\n\n    return scoreObject;\n  }\n\n  /**\n   * toJSON for cmi *.score\n   *\n   * @return {\n   *    {\n   *      scaled: string,\n   *      raw: string,\n   *      min: string,\n   *      max: string\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    scaled: string;\n    raw: string;\n    min: string;\n    max: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      scaled: this.scaled,\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_lms object\n * @extends CMIArray\n */\nexport class CMICommentsFromLMS extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_lms Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.comments_from_lms\",\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner object\n */\n\nexport class CMICommentsFromLearner extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_learner Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.comments_from_learner\",\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner.n and cmi.comments_from_lms.n object\n */\n\nexport class CMICommentsObject extends BaseCMI {\n  private _comment = \"\";\n  private _location = \"\";\n  private _timestamp = \"\";\n  private readonly _readOnlyAfterInit: boolean;\n\n  /**\n   * Constructor for cmi.comments_from_learner.n and cmi.comments_from_lms.n\n   * @param {boolean} readOnlyAfterInit\n   */\n  constructor(readOnlyAfterInit: boolean = false) {\n    super(\"cmi.comments_from_learner.n\");\n    this._comment = \"\";\n    this._location = \"\";\n    this._timestamp = \"\";\n    this._readOnlyAfterInit = readOnlyAfterInit;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _comment\n   * @return {string}\n   */\n  get comment(): string {\n    return this._comment;\n  }\n\n  /**\n   * Setter for _comment\n   * @param {string} comment\n   */\n  set comment(comment: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".comment\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".comment\",\n          comment,\n          scorm2004_regex.CMILangString4000,\n          true,\n        )\n      ) {\n        this._comment = comment;\n      }\n    }\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".location\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".location\",\n          location,\n          scorm2004_regex.CMIString250,\n        )\n      ) {\n        this._location = location;\n      }\n    }\n  }\n\n  /**\n   * Getter for _timestamp\n   * @return {string}\n   */\n  get timestamp(): string {\n    return this._timestamp;\n  }\n\n  /**\n   * Setter for _timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".timestamp\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".timestamp\", timestamp, scorm2004_regex.CMITime)\n      ) {\n        this._timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.comments_from_learner.n object\n   * @return {\n   *    {\n   *      comment: string,\n   *      location: string,\n   *      timestamp: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    comment: string;\n    location: string;\n    timestamp: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      comment: this.comment,\n      location: this.location,\n      timestamp: this.timestamp,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { Scorm2004CMIScore } from \"./score\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\n\n/**\n * Class representing SCORM 2004's `cmi.objectives` object\n * @extends CMIArray\n */\nexport class CMIObjectives extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives` Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.objectives\",\n      children: scorm2004_constants.objectives_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n\n  /**\n   * Find an objective by its ID\n   */\n  public findObjectiveById(id: string): CMIObjectivesObject | undefined {\n    return this.childArray.find((objective) => objective.id === id);\n  }\n\n  /**\n   * Find objective by its index\n   */\n  public findObjectiveByIndex(index: number): CMIObjectivesObject {\n    return this.childArray[index];\n  }\n\n  /**\n   * Set an objective at the given index\n   */\n  public setObjectiveByIndex(index: number, objective: CMIObjectivesObject) {\n    this.childArray[index] = objective;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.objectives.n object\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  private _id = \"\";\n  private _success_status = \"unknown\";\n  private _completion_status = \"unknown\";\n  private _progress_measure = \"\";\n  private _description = \"\";\n\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super(\"cmi.objectives.n\");\n    this.score = new Scorm2004CMIScore();\n  }\n\n  override reset() {\n    this._initialized = false;\n  }\n\n  public score: Scorm2004CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this._success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".success_status\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".success_status\",\n          success_status,\n          scorm2004_regex.CMISStatus,\n        )\n      ) {\n        this._success_status = success_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this._completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".completion_status\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".completion_status\",\n          completion_status,\n          scorm2004_regex.CMICStatus,\n        )\n      ) {\n        this._completion_status = completion_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this._progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".progress_measure\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".progress_measure\",\n          progress_measure,\n          scorm2004_regex.CMIDecimal,\n        ) &&\n        check2004ValidRange(\n          this._cmi_element + \".progress_measure\",\n          progress_measure,\n          scorm2004_regex.progress_range,\n        )\n      ) {\n        this._progress_measure = progress_measure;\n      }\n    }\n  }\n\n  /**\n   * Getter for _description\n   * @return {string}\n   */\n  get description(): string {\n    return this._description;\n  }\n\n  /**\n   * Setter for _description\n   * @param {string} description\n   */\n  set description(description: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".description\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".description\",\n          description,\n          scorm2004_regex.CMILangString250,\n          true,\n        )\n      ) {\n        this._description = description;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      success_status: string,\n   *      completion_status: string,\n   *      progress_measure: string,\n   *      description: string,\n   *      score: Scorm2004CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    success_status: string;\n    completion_status: string;\n    progress_measure: string;\n    description: string;\n    score: Scorm2004CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      success_status: this.success_status,\n      completion_status: this.completion_status,\n      progress_measure: this.progress_measure,\n      description: this.description,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","/**\n * Class representing metadata properties for SCORM 2004's cmi object\n */\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing metadata properties for SCORM 2004's cmi object\n */\nexport class CMIMetadata extends BaseCMI {\n  private __version = \"1.0\";\n  private __children = scorm2004_constants.cmi_children;\n\n  /**\n   * Constructor for CMIMetadata\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   */\n  get _version(): string {\n    return this.__version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version: string) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._version\",\n      scorm2004_errors.READ_ONLY_ELEMENT,\n    );\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {number} _children\n   */\n  set _children(_children: number) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._children\",\n      scorm2004_errors.READ_ONLY_ELEMENT,\n    );\n  }\n\n  /**\n   * Reset the metadata properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // No need to reset __version and __children as they are constants\n  }\n}\n","/**\n * Class representing learner properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing learner properties for SCORM 2004's cmi object\n */\nexport class CMILearner extends BaseCMI {\n  private _learner_id = \"\";\n  private _learner_name = \"\";\n\n  /**\n   * Constructor for CMILearner\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _learner_id\n   * @return {string}\n   */\n  get learner_id(): string {\n    return this._learner_id;\n  }\n\n  /**\n   * Setter for _learner_id. Can only be called before initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_id\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._learner_id = learner_id;\n    }\n  }\n\n  /**\n   * Getter for _learner_name\n   * @return {string}\n   */\n  get learner_name(): string {\n    return this._learner_name;\n  }\n\n  /**\n   * Setter for _learner_name. Can only be called before initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_name\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._learner_name = learner_name;\n    }\n  }\n\n  /**\n   * Reset the learner properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset learner_id and learner_name as they are read-only after initialization\n  }\n}\n","/**\n * Class representing status properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\n\n/**\n * Class representing status properties for SCORM 2004's cmi object\n */\nexport class CMIStatus extends BaseCMI {\n  private _completion_status = \"unknown\";\n  private _success_status = \"unknown\";\n  private _progress_measure = \"\";\n\n  /**\n   * Constructor for CMIStatus\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this._completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".completion_status\",\n        completion_status,\n        scorm2004_regex.CMICStatus,\n      )\n    ) {\n      this._completion_status = completion_status;\n    }\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this._success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".success_status\",\n        success_status,\n        scorm2004_regex.CMISStatus,\n      )\n    ) {\n      this._success_status = success_status;\n    }\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this._progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".progress_measure\",\n        progress_measure,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".progress_measure\",\n        progress_measure,\n        scorm2004_regex.progress_range,\n      )\n    ) {\n      this._progress_measure = progress_measure;\n    }\n  }\n\n  /**\n   * Reset the status properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._completion_status = \"unknown\";\n    this._success_status = \"unknown\";\n    this._progress_measure = \"\";\n  }\n}\n","/**\n * Class representing session properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\nimport * as Util from \"../../utilities\";\n\n/**\n * Class representing session properties for SCORM 2004's cmi object\n */\nexport class CMISession extends BaseCMI {\n  private _entry = \"\";\n  private _exit = \"\";\n  private _session_time = \"PT0H0M0S\";\n  private _total_time = \"\";\n\n  /**\n   * Constructor for CMISession\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this._entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".entry\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._entry = entry;\n    }\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    if (!this.jsonString) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exit\",\n        scorm2004_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    if (check2004ValidFormat(this._cmi_element + \".exit\", exit, scorm2004_regex.CMIExit, true)) {\n      this._exit = exit;\n    }\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    if (!this.jsonString) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".session_time\",\n        scorm2004_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".session_time\",\n        session_time,\n        scorm2004_regex.CMITimespan,\n      )\n    ) {\n      this._session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this._total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".total_time\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._total_time = total_time;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime(): string {\n    let sessionTime = this._session_time;\n    const startTime = this.start_time;\n\n    if (typeof startTime !== \"undefined\" && startTime !== null) {\n      const seconds = new Date().getTime() - startTime;\n      sessionTime = Util.getSecondsAsISODuration(seconds / 1000);\n    }\n\n    return Util.addTwoDurations(this._total_time, sessionTime, scorm2004_regex.CMITimespan);\n  }\n\n  /**\n   * Reset the session properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._entry = \"\";\n    this._exit = \"\";\n    this._session_time = \"PT0H0M0S\";\n    // Don't reset total_time as it's read-only after initialization\n  }\n}\n","/**\n * Class representing content properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\n\n/**\n * Class representing content properties for SCORM 2004's cmi object\n */\nexport class CMIContent extends BaseCMI {\n  private _location = \"\";\n  private _launch_data = \"\";\n  private _suspend_data = \"\";\n\n  /**\n   * Constructor for CMIContent\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".location\", location, scorm2004_regex.CMIString1000)\n    ) {\n      this._location = location;\n    }\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this._launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".launch_data\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._launch_data = launch_data;\n    }\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this._suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".suspend_data\",\n        suspend_data,\n        scorm2004_regex.CMIString64000,\n        true,\n      )\n    ) {\n      this._suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Reset the content properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._location = \"\";\n    // Don't reset launch_data as it's read-only after initialization\n    this._suspend_data = \"\";\n  }\n}\n","/**\n * Class representing settings properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing settings properties for SCORM 2004's cmi object\n */\nexport class CMISettings extends BaseCMI {\n  private _credit = \"credit\";\n  private _mode = \"normal\";\n  private _time_limit_action = \"continue,no message\";\n  private _max_time_allowed = \"\";\n\n  /**\n   * Constructor for CMISettings\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this._credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".credit\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._credit = credit;\n    }\n  }\n\n  /**\n   * Getter for _mode\n   * @return {string}\n   */\n  get mode(): string {\n    return this._mode;\n  }\n\n  /**\n   * Setter for _mode. Can only be called before initialization.\n   * @param {string} mode\n   */\n  set mode(mode: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".mode\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._mode = mode;\n    }\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this._time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".time_limit_action\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._time_limit_action = time_limit_action;\n    }\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this._max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".max_time_allowed\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._max_time_allowed = max_time_allowed;\n    }\n  }\n\n  /**\n   * Reset the settings properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset these properties as they are read-only after initialization\n  }\n}\n","/**\n * Class representing threshold properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing threshold properties for SCORM 2004's cmi object\n */\nexport class CMIThresholds extends BaseCMI {\n  private _scaled_passing_score = \"\";\n  private _completion_threshold = \"\";\n\n  /**\n   * Constructor for CMIThresholds\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score(): string {\n    return this._scaled_passing_score;\n  }\n\n  /**\n   * Setter for _scaled_passing_score. Can only be called before initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".scaled_passing_score\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._scaled_passing_score = scaled_passing_score;\n    }\n  }\n\n  /**\n   * Getter for _completion_threshold\n   * @return {string}\n   */\n  get completion_threshold(): string {\n    return this._completion_threshold;\n  }\n\n  /**\n   * Setter for _completion_threshold. Can only be called before initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".completion_threshold\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._completion_threshold = completion_threshold;\n    }\n  }\n\n  /**\n   * Reset the threshold properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset these properties as they are read-only after initialization\n  }\n}\n","import { BaseRootCMI } from \"../common/base_cmi\";\nimport { CMILearnerPreference } from \"./learner_preference\";\nimport { CMIInteractions } from \"./interactions\";\nimport { Scorm2004CMIScore } from \"./score\";\nimport { CMICommentsFromLearner, CMICommentsFromLMS } from \"./comments\";\nimport { CMIObjectives } from \"./objectives\";\nimport { CMIMetadata } from \"./metadata\";\nimport { CMILearner } from \"./learner\";\nimport { CMIStatus } from \"./status\";\nimport { CMISession } from \"./session\";\nimport { CMIContent } from \"./content\";\nimport { CMISettings } from \"./settings\";\nimport { CMIThresholds } from \"./thresholds\";\n\n/**\n * Class representing cmi object for SCORM 2004\n */\nexport class CMI extends BaseRootCMI {\n  /**\n   * Constructor for the SCORM 2004 cmi object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean = false) {\n    super(\"cmi\");\n    this.metadata = new CMIMetadata();\n    this.learner = new CMILearner();\n    this.status = new CMIStatus();\n    this.session = new CMISession();\n    this.content = new CMIContent();\n    this.settings = new CMISettings();\n    this.thresholds = new CMIThresholds();\n    this.learner_preference = new CMILearnerPreference();\n    this.score = new Scorm2004CMIScore();\n    this.comments_from_learner = new CMICommentsFromLearner();\n    this.comments_from_lms = new CMICommentsFromLMS();\n    this.interactions = new CMIInteractions();\n    this.objectives = new CMIObjectives();\n    if (initialized) this.initialize();\n  }\n\n  // New component classes\n  private metadata: CMIMetadata;\n  private learner: CMILearner;\n  private status: CMIStatus;\n  private session: CMISession;\n  private content: CMIContent;\n  private settings: CMISettings;\n  private thresholds: CMIThresholds;\n\n  // Original complex objects\n  public learner_preference: CMILearnerPreference;\n  public score: Scorm2004CMIScore;\n  public comments_from_learner: CMICommentsFromLearner;\n  public comments_from_lms: CMICommentsFromLMS;\n  public interactions: CMIInteractions;\n  public objectives: CMIObjectives;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    // Initialize new component classes\n    this.metadata?.initialize();\n    this.learner?.initialize();\n    this.status?.initialize();\n    this.session?.initialize();\n    this.content?.initialize();\n    this.settings?.initialize();\n    this.thresholds?.initialize();\n\n    // Initialize original complex objects\n    this.learner_preference?.initialize();\n    this.score?.initialize();\n    this.comments_from_learner?.initialize();\n    this.comments_from_lms?.initialize();\n    this.interactions?.initialize();\n    this.objectives?.initialize();\n  }\n\n  /**\n   * Called when API is moving to another SCO\n   */\n  reset() {\n    this._initialized = false;\n\n    // Reset new component classes\n    this.metadata?.reset();\n    this.learner?.reset();\n    this.status?.reset();\n    this.session?.reset();\n    this.content?.reset();\n    this.settings?.reset();\n    this.thresholds?.reset();\n\n    // Reset original complex objects\n    this.objectives?.reset(false);\n    this.interactions?.reset(true);\n    this.score?.reset();\n    this.comments_from_learner?.reset();\n    this.comments_from_lms?.reset();\n    this.learner_preference?.reset();\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   * @private\n   */\n  get _version(): string {\n    return this.metadata._version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   * @private\n   */\n  set _version(_version: string) {\n    this.metadata._version = _version;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.metadata._children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {number} _children\n   * @private\n   */\n  set _children(_children: number) {\n    this.metadata._children = _children;\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this.status.completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    this.status.completion_status = completion_status;\n  }\n\n  /**\n   * Getter for _completion_threshold\n   * @return {string}\n   */\n  get completion_threshold(): string {\n    return this.thresholds.completion_threshold;\n  }\n\n  /**\n   * Setter for _completion_threshold. Can only be called before initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold: string) {\n    this.thresholds.completion_threshold = completion_threshold;\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this.settings.credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    this.settings.credit = credit;\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this.session.entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    this.session.entry = entry;\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    this.session.jsonString = this.jsonString;\n    return this.session.exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    this.session.exit = exit;\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this.content.launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    this.content.launch_data = launch_data;\n  }\n\n  /**\n   * Getter for _learner_id\n   * @return {string}\n   */\n  get learner_id(): string {\n    return this.learner.learner_id;\n  }\n\n  /**\n   * Setter for _learner_id. Can only be called before initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id: string) {\n    this.learner.learner_id = learner_id;\n  }\n\n  /**\n   * Getter for _learner_name\n   * @return {string}\n   */\n  get learner_name(): string {\n    return this.learner.learner_name;\n  }\n\n  /**\n   * Setter for _learner_name. Can only be called before initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name: string) {\n    this.learner.learner_name = learner_name;\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this.content.location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    this.content.location = location;\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this.settings.max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    this.settings.max_time_allowed = max_time_allowed;\n  }\n\n  /**\n   * Getter for _mode\n   * @return {string}\n   */\n  get mode(): string {\n    return this.settings.mode;\n  }\n\n  /**\n   * Setter for _mode. Can only be called before initialization.\n   * @param {string} mode\n   */\n  set mode(mode: string) {\n    this.settings.mode = mode;\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this.status.progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    this.status.progress_measure = progress_measure;\n  }\n\n  /**\n   * Getter for _scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score(): string {\n    return this.thresholds.scaled_passing_score;\n  }\n\n  /**\n   * Setter for _scaled_passing_score. Can only be called before initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score: string) {\n    this.thresholds.scaled_passing_score = scaled_passing_score;\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    this.session.jsonString = this.jsonString;\n    return this.session.session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    this.session.session_time = session_time;\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this.status.success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    this.status.success_status = success_status;\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this.content.suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    this.content.suspend_data = suspend_data;\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this.settings.time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    this.settings.time_limit_action = time_limit_action;\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this.session.total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    this.session.total_time = total_time;\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime(): string {\n    return this.session.getCurrentTotalTime();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      comments_from_learner: CMICommentsFromLearner,\n   *      comments_from_lms: CMICommentsFromLMS,\n   *      completion_status: string,\n   *      completion_threshold: string,\n   *      credit: string,\n   *      entry: string,\n   *      exit: string,\n   *      interactions: CMIInteractions,\n   *      launch_data: string,\n   *      learner_id: string,\n   *      learner_name: string,\n   *      learner_preference: CMILearnerPreference,\n   *      location: string,\n   *      max_time_allowed: string,\n   *      mode: string,\n   *      objectives: CMIObjectives,\n   *      progress_measure: string,\n   *      scaled_passing_score: string,\n   *      score: Scorm2004CMIScore,\n   *      session_time: string,\n   *      success_status: string,\n   *      suspend_data: string,\n   *      time_limit_action: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    comments_from_learner: CMICommentsFromLearner;\n    comments_from_lms: CMICommentsFromLMS;\n    completion_status: string;\n    completion_threshold: string;\n    credit: string;\n    entry: string;\n    exit: string;\n    interactions: CMIInteractions;\n    launch_data: string;\n    learner_id: string;\n    learner_name: string;\n    learner_preference: CMILearnerPreference;\n    location: string;\n    max_time_allowed: string;\n    mode: string;\n    objectives: CMIObjectives;\n    progress_measure: string;\n    scaled_passing_score: string;\n    score: Scorm2004CMIScore;\n    session_time: string;\n    success_status: string;\n    suspend_data: string;\n    time_limit_action: string;\n  } {\n    this.jsonString = true;\n\n    // Set jsonString flag on component classes that need it\n    this.session.jsonString = true;\n\n    const result = {\n      comments_from_learner: this.comments_from_learner,\n      comments_from_lms: this.comments_from_lms,\n      completion_status: this.completion_status,\n      completion_threshold: this.completion_threshold,\n      credit: this.credit,\n      entry: this.entry,\n      exit: this.exit,\n      interactions: this.interactions,\n      launch_data: this.launch_data,\n      learner_id: this.learner_id,\n      learner_name: this.learner_name,\n      learner_preference: this.learner_preference,\n      location: this.location,\n      max_time_allowed: this.max_time_allowed,\n      mode: this.mode,\n      objectives: this.objectives,\n      progress_measure: this.progress_measure,\n      scaled_passing_score: this.scaled_passing_score,\n      score: this.score,\n      session_time: this.session_time,\n      success_status: this.success_status,\n      suspend_data: this.suspend_data,\n      time_limit_action: this.time_limit_action,\n    };\n\n    // Clean up jsonString flags\n    this.jsonString = false;\n    this.session.jsonString = false;\n\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { NAVBoolean } from \"../../constants/enums\";\nimport { CMIArray } from \"../common/array\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Sequencing } from \"./sequencing/sequencing\";\n\n/**\n * Class representing SCORM 2004's adl object\n */\nexport class ADL extends BaseCMI {\n  /**\n   * Constructor for adl\n   */\n  constructor() {\n    super(\"adl\");\n    this.nav = new ADLNav();\n    this.data = new ADLData();\n  }\n\n  public nav: ADLNav;\n  public data = new ADLData();\n  private _sequencing: Sequencing | null = null;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.nav?.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this.nav?.reset();\n  }\n\n  /**\n   * Getter for sequencing\n   * @return {Sequencing | null}\n   */\n  get sequencing(): Sequencing | null {\n    return this._sequencing;\n  }\n\n  /**\n   * Setter for sequencing\n   * @param {Sequencing | null} sequencing\n   */\n  set sequencing(sequencing: Sequencing | null) {\n    this._sequencing = sequencing;\n    if (sequencing) {\n      sequencing.adlNav = this.nav;\n      this.nav.sequencing = sequencing;\n    }\n  }\n\n  /**\n   * toJSON for adl\n   * @return {\n   *    {\n   *      nav: ADLNav,\n   *      data: ADLData\n   *    }\n   *  }\n   */\n  toJSON(): {\n    nav: ADLNav;\n    data: ADLData;\n  } {\n    this.jsonString = true;\n    const result = {\n      nav: this.nav,\n      data: this.data,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's `adl.nav` object\n */\n\nexport class ADLNav extends BaseCMI {\n  private _request = \"_none_\";\n  private _sequencing: Sequencing | null = null;\n\n  /**\n   * Constructor for `adl.nav`\n   */\n  constructor() {\n    super(\"adl.nav\");\n    this.request_valid = new ADLNavRequestValid();\n  }\n\n  public request_valid: ADLNavRequestValid;\n\n  /**\n   * Getter for sequencing\n   * @return {Sequencing | null}\n   */\n  get sequencing(): Sequencing | null {\n    return this._sequencing;\n  }\n\n  /**\n   * Setter for sequencing\n   * @param {Sequencing | null} sequencing\n   */\n  set sequencing(sequencing: Sequencing | null) {\n    this._sequencing = sequencing;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.request_valid?.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._request = \"_none_\";\n    this._sequencing = null;\n    this.request_valid?.reset();\n  }\n\n  /**\n   * Getter for _request\n   * @return {string}\n   */\n  get request(): string {\n    return this._request;\n  }\n\n  /**\n   * Setter for _request\n   * @param {string} request\n   */\n  set request(request: string) {\n    if (check2004ValidFormat(this._cmi_element + \".request\", request, scorm2004_regex.NAVEvent)) {\n      // Only process if the request is different from the current request\n      if (this._request !== request) {\n        this._request = request;\n\n        // Process the navigation request using the sequencing implementation\n        if (this._sequencing) {\n          this._sequencing.processNavigationRequest(request);\n        }\n      }\n    }\n  }\n\n  /**\n   * toJSON for adl.nav\n   *\n   * @return {\n   *    {\n   *      request: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    request: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      request: this.request,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's `adl.data` object\n */\nexport class ADLData extends CMIArray {\n  constructor() {\n    super({\n      CMIElement: \"adl.data\",\n      children: scorm2004_constants.adl_data_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's adl.data.n object\n */\nexport class ADLDataObject extends BaseCMI {\n  private _id = \"\";\n  private _store = \"\";\n\n  constructor() {\n    super(\"adl.data.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _store\n   * @return {string}\n   */\n  get store(): string {\n    return this._store;\n  }\n\n  /**\n   * Setter for _store\n   * @param {string} store\n   */\n  set store(store: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".store\", store, scorm2004_regex.CMILangString4000)\n    ) {\n      this._store = store;\n    }\n  }\n\n  /**\n   * toJSON for adl.data.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      store: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    store: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this._id,\n      store: this._store,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl.nav.request_valid object\n */\n\nexport class ADLNavRequestValid extends BaseCMI {\n  private _continue = \"unknown\";\n  private _previous = \"unknown\";\n  private _choice: {\n    [key: string]: NAVBoolean;\n  } = {};\n  private _jump: {\n    [key: string]: NAVBoolean;\n  } = {};\n\n  /**\n   * Constructor for adl.nav.request_valid\n   */\n  constructor() {\n    super(\"adl.nav.request_valid\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._continue = \"unknown\";\n    this._previous = \"unknown\";\n  }\n\n  /**\n   * Getter for _continue\n   * @return {string}\n   */\n  get continue(): string {\n    return this._continue;\n  }\n\n  /**\n   * Setter for _continue. Just throws an error.\n   * @param {string} _continue\n   */\n  set continue(_continue: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".continue\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".continue\", _continue, scorm2004_regex.NAVBoolean)\n    ) {\n      this._continue = _continue;\n    }\n  }\n\n  /**\n   * Getter for _previous\n   * @return {string}\n   */\n  get previous(): string {\n    return this._previous;\n  }\n\n  /**\n   * Setter for _previous. Just throws an error.\n   * @param {string} _previous\n   */\n  set previous(_previous: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".previous\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".previous\", _previous, scorm2004_regex.NAVBoolean)\n    ) {\n      this._previous = _previous;\n    }\n  }\n\n  /**\n   * Getter for _choice\n   * @return {{ [key: string]: NAVBoolean }}\n   */\n  get choice(): { [key: string]: NAVBoolean } {\n    return this._choice;\n  }\n\n  /**\n   * Setter for _choice\n   * @param {{ [key: string]: string }} choice\n   */\n  set choice(choice: { [key: string]: string }) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".choice\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (typeof choice !== \"object\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".choice\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    for (const key in choice) {\n      if ({}.hasOwnProperty.call(choice, key)) {\n        if (\n          check2004ValidFormat(\n            this._cmi_element + \".choice.\" + key,\n            choice[key],\n            scorm2004_regex.NAVBoolean,\n          ) &&\n          check2004ValidFormat(this._cmi_element + \".choice.\" + key, key, scorm2004_regex.NAVTarget)\n        ) {\n          // Convert string value to NAVBoolean enum value\n          const value = choice[key];\n          if (value === \"true\") {\n            this._choice[key] = NAVBoolean.TRUE;\n          } else if (value === \"false\") {\n            this._choice[key] = NAVBoolean.FALSE;\n          } else if (value === \"unknown\") {\n            this._choice[key] = NAVBoolean.UNKNOWN;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Getter for _jump\n   * @return {{ [key: string]: NAVBoolean }}\n   */\n  get jump(): { [key: string]: NAVBoolean } {\n    return this._jump;\n  }\n\n  /**\n   * Setter for _jump\n   * @param {{ [key: string]: string }} jump\n   */\n  set jump(jump: { [key: string]: string }) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".jump\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (typeof jump !== \"object\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".jump\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    for (const key in jump) {\n      if ({}.hasOwnProperty.call(jump, key)) {\n        if (\n          check2004ValidFormat(\n            this._cmi_element + \".jump.\" + key,\n            jump[key],\n            scorm2004_regex.NAVBoolean,\n          ) &&\n          check2004ValidFormat(this._cmi_element + \".jump.\" + key, key, scorm2004_regex.NAVTarget)\n        ) {\n          // Convert string value to NAVBoolean enum value\n          const value = jump[key];\n          if (value === \"true\") {\n            this._jump[key] = NAVBoolean.TRUE;\n          } else if (value === \"false\") {\n            this._jump[key] = NAVBoolean.FALSE;\n          } else if (value === \"unknown\") {\n            this._jump[key] = NAVBoolean.UNKNOWN;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * toJSON for adl.nav.request_valid\n   *\n   * @return {\n   *    {\n   *      previous: string,\n   *      continue: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    previous: string;\n    continue: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      previous: this._previous,\n      continue: this._continue,\n      choice: this._choice,\n      jump: this._jump,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Enum for rule condition operators\n */\nexport enum RuleConditionOperator {\n  NOT = \"not\",\n  AND = \"and\",\n  OR = \"or\",\n}\n\n/**\n * Enum for rule condition types\n */\nexport enum RuleConditionType {\n  SATISFIED = \"satisfied\",\n  OBJECTIVE_STATUS_KNOWN = \"objectiveStatusKnown\",\n  OBJECTIVE_MEASURE_KNOWN = \"objectiveMeasureKnown\",\n  OBJECTIVE_MEASURE_GREATER_THAN = \"objectiveMeasureGreaterThan\",\n  OBJECTIVE_MEASURE_LESS_THAN = \"objectiveMeasureLessThan\",\n  COMPLETED = \"completed\",\n  PROGRESS_KNOWN = \"progressKnown\",\n  ATTEMPTED = \"attempted\",\n  ATTEMPT_LIMIT_EXCEEDED = \"attemptLimitExceeded\",\n  TIME_LIMIT_EXCEEDED = \"timeLimitExceeded\",\n  OUTSIDE_AVAILABLE_TIME_RANGE = \"outsideAvailableTimeRange\",\n  ALWAYS = \"always\",\n}\n\n/**\n * Enum for rule action types\n */\nexport enum RuleActionType {\n  SKIP = \"skip\",\n  DISABLED = \"disabled\",\n  HIDE_FROM_CHOICE = \"hideFromChoice\",\n  STOP_FORWARD_TRAVERSAL = \"stopForwardTraversal\",\n  EXIT_PARENT = \"exitParent\",\n  EXIT_ALL = \"exitAll\",\n  RETRY = \"retry\",\n  RETRY_ALL = \"retryAll\",\n  CONTINUE = \"continue\",\n  PREVIOUS = \"previous\",\n  EXIT = \"exit\",\n}\n\n/**\n * Class representing a sequencing rule condition\n */\nexport class RuleCondition extends BaseCMI {\n  private _condition: RuleConditionType = RuleConditionType.ALWAYS;\n  private _operator: RuleConditionOperator | null = null;\n  private _parameters: Map<string, any> = new Map();\n\n  /**\n   * Constructor for RuleCondition\n   * @param {RuleConditionType} condition - The condition type\n   * @param {RuleConditionOperator | null} operator - The operator (null for no operator)\n   * @param {Map<string, any>} parameters - Additional parameters for the condition\n   */\n  constructor(\n    condition: RuleConditionType = RuleConditionType.ALWAYS,\n    operator: RuleConditionOperator | null = null,\n    parameters: Map<string, any> = new Map(),\n  ) {\n    super(\"ruleCondition\");\n    this._condition = condition;\n    this._operator = operator;\n    this._parameters = parameters;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for condition\n   * @return {RuleConditionType}\n   */\n  get condition(): RuleConditionType {\n    return this._condition;\n  }\n\n  /**\n   * Setter for condition\n   * @param {RuleConditionType} condition\n   */\n  set condition(condition: RuleConditionType) {\n    this._condition = condition;\n  }\n\n  /**\n   * Getter for operator\n   * @return {RuleConditionOperator | null}\n   */\n  get operator(): RuleConditionOperator | null {\n    return this._operator;\n  }\n\n  /**\n   * Setter for operator\n   * @param {RuleConditionOperator | null} operator\n   */\n  set operator(operator: RuleConditionOperator | null) {\n    this._operator = operator;\n  }\n\n  /**\n   * Getter for parameters\n   * @return {Map<string, any>}\n   */\n  get parameters(): Map<string, any> {\n    return this._parameters;\n  }\n\n  /**\n   * Setter for parameters\n   * @param {Map<string, any>} parameters\n   */\n  set parameters(parameters: Map<string, any>) {\n    this._parameters = parameters;\n  }\n\n  /**\n   * Evaluate the condition for an activity\n   * @param {Activity} activity - The activity to evaluate the condition for\n   * @return {boolean} - True if the condition is met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    switch (this._condition) {\n      case RuleConditionType.SATISFIED:\n        return activity.successStatus === SuccessStatus.PASSED;\n      case RuleConditionType.OBJECTIVE_STATUS_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RuleConditionType.OBJECTIVE_MEASURE_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RuleConditionType.OBJECTIVE_MEASURE_GREATER_THAN: {\n        const greaterThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure > greaterThanValue\n        );\n      }\n      case RuleConditionType.OBJECTIVE_MEASURE_LESS_THAN: {\n        const lessThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure < lessThanValue\n        );\n      }\n      case RuleConditionType.COMPLETED:\n        return activity.isCompleted;\n      case RuleConditionType.PROGRESS_KNOWN:\n        return activity.completionStatus !== \"unknown\";\n      case RuleConditionType.ATTEMPTED:\n        return activity.attemptCount > 0;\n      case RuleConditionType.ATTEMPT_LIMIT_EXCEEDED: {\n        const attemptLimit = this._parameters.get(\"attemptLimit\") || 0;\n        return attemptLimit > 0 && activity.attemptCount >= attemptLimit;\n      }\n      case RuleConditionType.TIME_LIMIT_EXCEEDED:\n        // Time limit exceeded would require additional tracking\n        return false;\n      case RuleConditionType.OUTSIDE_AVAILABLE_TIME_RANGE:\n        // Outside available time range would require additional tracking\n        return false;\n      case RuleConditionType.ALWAYS:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RuleCondition\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      condition: this._condition,\n      operator: this._operator,\n      parameters: Object.fromEntries(this._parameters),\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a sequencing rule\n */\nexport class SequencingRule extends BaseCMI {\n  private _conditions: RuleCondition[] = [];\n  private _action: RuleActionType = RuleActionType.SKIP;\n  private _conditionCombination: RuleConditionOperator = RuleConditionOperator.AND;\n\n  /**\n   * Constructor for SequencingRule\n   * @param {RuleActionType} action - The action to take when the rule conditions are met\n   * @param {RuleConditionOperator} conditionCombination - How to combine multiple conditions\n   */\n  constructor(\n    action: RuleActionType = RuleActionType.SKIP,\n    conditionCombination: RuleConditionOperator = RuleConditionOperator.AND,\n  ) {\n    super(\"sequencingRule\");\n    this._action = action;\n    this._conditionCombination = conditionCombination;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._conditions = [];\n  }\n\n  /**\n   * Getter for conditions\n   * @return {RuleCondition[]}\n   */\n  get conditions(): RuleCondition[] {\n    return this._conditions;\n  }\n\n  /**\n   * Add a condition to the rule\n   * @param {RuleCondition} condition - The condition to add\n   */\n  addCondition(condition: RuleCondition): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(condition instanceof RuleCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._conditions.push(condition);\n  }\n\n  /**\n   * Remove a condition from the rule\n   * @param {RuleCondition} condition - The condition to remove\n   * @return {boolean} - True if the condition was removed, false otherwise\n   */\n  removeCondition(condition: RuleCondition): boolean {\n    const index = this._conditions.indexOf(condition);\n    if (index !== -1) {\n      this._conditions.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for action\n   * @return {RuleActionType}\n   */\n  get action(): RuleActionType {\n    return this._action;\n  }\n\n  /**\n   * Setter for action\n   * @param {RuleActionType} action\n   */\n  set action(action: RuleActionType) {\n    this._action = action;\n  }\n\n  /**\n   * Getter for conditionCombination\n   * @return {RuleConditionOperator}\n   */\n  get conditionCombination(): RuleConditionOperator {\n    return this._conditionCombination;\n  }\n\n  /**\n   * Setter for conditionCombination\n   * @param {RuleConditionOperator} conditionCombination\n   */\n  set conditionCombination(conditionCombination: RuleConditionOperator) {\n    this._conditionCombination = conditionCombination;\n  }\n\n  /**\n   * Evaluate the rule for an activity\n   * @param {Activity} activity - The activity to evaluate the rule for\n   * @return {boolean} - True if the rule conditions are met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    if (this._conditions.length === 0) {\n      return true;\n    }\n\n    if (this._conditionCombination === RuleConditionOperator.AND) {\n      return this._conditions.every((condition) => condition.evaluate(activity));\n    } else if (this._conditionCombination === RuleConditionOperator.OR) {\n      return this._conditions.some((condition) => condition.evaluate(activity));\n    }\n\n    return false;\n  }\n\n  /**\n   * toJSON for SequencingRule\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      conditions: this._conditions,\n      action: this._action,\n      conditionCombination: this._conditionCombination,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a collection of sequencing rules\n */\nexport class SequencingRules extends BaseCMI {\n  private _preConditionRules: SequencingRule[] = [];\n  private _exitConditionRules: SequencingRule[] = [];\n  private _postConditionRules: SequencingRule[] = [];\n\n  /**\n   * Constructor for SequencingRules\n   */\n  constructor() {\n    super(\"sequencingRules\");\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._preConditionRules = [];\n    this._exitConditionRules = [];\n    this._postConditionRules = [];\n  }\n\n  /**\n   * Getter for preConditionRules\n   * @return {SequencingRule[]}\n   */\n  get preConditionRules(): SequencingRule[] {\n    return this._preConditionRules;\n  }\n\n  /**\n   * Add a pre-condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addPreConditionRule(rule: SequencingRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".preConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._preConditionRules.push(rule);\n  }\n\n  /**\n   * Getter for exitConditionRules\n   * @return {SequencingRule[]}\n   */\n  get exitConditionRules(): SequencingRule[] {\n    return this._exitConditionRules;\n  }\n\n  /**\n   * Add an exit condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addExitConditionRule(rule: SequencingRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exitConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._exitConditionRules.push(rule);\n  }\n\n  /**\n   * Getter for postConditionRules\n   * @return {SequencingRule[]}\n   */\n  get postConditionRules(): SequencingRule[] {\n    return this._postConditionRules;\n  }\n\n  /**\n   * Add a post-condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addPostConditionRule(rule: SequencingRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".postConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._postConditionRules.push(rule);\n  }\n\n  /**\n   * Evaluate pre-condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluatePreConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._preConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Evaluate exit condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluateExitConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._exitConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Evaluate post-condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluatePostConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._postConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * toJSON for SequencingRules\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      preConditionRules: this._preConditionRules,\n      exitConditionRules: this._exitConditionRules,\n      postConditionRules: this._postConditionRules,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { CompletionStatus, SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Enum for rollup action types\n */\nexport enum RollupActionType {\n  SATISFIED = \"satisfied\",\n  NOT_SATISFIED = \"notSatisfied\",\n  COMPLETED = \"completed\",\n  INCOMPLETE = \"incomplete\",\n}\n\n/**\n * Enum for rollup condition types\n */\nexport enum RollupConditionType {\n  SATISFIED = \"satisfied\",\n  OBJECTIVE_STATUS_KNOWN = \"objectiveStatusKnown\",\n  OBJECTIVE_MEASURE_KNOWN = \"objectiveMeasureKnown\",\n  OBJECTIVE_MEASURE_GREATER_THAN = \"objectiveMeasureGreaterThan\",\n  OBJECTIVE_MEASURE_LESS_THAN = \"objectiveMeasureLessThan\",\n  COMPLETED = \"completed\",\n  PROGRESS_KNOWN = \"progressKnown\",\n  ATTEMPTED = \"attempted\",\n  NOT_ATTEMPTED = \"notAttempted\",\n  ALWAYS = \"always\",\n}\n\n/**\n * Enum for rollup consideration types\n */\nexport enum RollupConsiderationType {\n  ALL = \"all\",\n  ANY = \"any\",\n  NONE = \"none\",\n  AT_LEAST_COUNT = \"atLeastCount\",\n  AT_LEAST_PERCENT = \"atLeastPercent\",\n}\n\n/**\n * Class representing a rollup condition\n */\nexport class RollupCondition extends BaseCMI {\n  private _condition: RollupConditionType = RollupConditionType.ALWAYS;\n  private _parameters: Map<string, any> = new Map();\n\n  /**\n   * Constructor for RollupCondition\n   * @param {RollupConditionType} condition - The condition type\n   * @param {Map<string, any>} parameters - Additional parameters for the condition\n   */\n  constructor(\n    condition: RollupConditionType = RollupConditionType.ALWAYS,\n    parameters: Map<string, any> = new Map(),\n  ) {\n    super(\"rollupCondition\");\n    this._condition = condition;\n    this._parameters = parameters;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for condition\n   * @return {RollupConditionType}\n   */\n  get condition(): RollupConditionType {\n    return this._condition;\n  }\n\n  /**\n   * Setter for condition\n   * @param {RollupConditionType} condition\n   */\n  set condition(condition: RollupConditionType) {\n    this._condition = condition;\n  }\n\n  /**\n   * Getter for parameters\n   * @return {Map<string, any>}\n   */\n  get parameters(): Map<string, any> {\n    return this._parameters;\n  }\n\n  /**\n   * Setter for parameters\n   * @param {Map<string, any>} parameters\n   */\n  set parameters(parameters: Map<string, any>) {\n    this._parameters = parameters;\n  }\n\n  /**\n   * Evaluate the condition for an activity\n   * @param {Activity} activity - The activity to evaluate the condition for\n   * @return {boolean} - True if the condition is met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    switch (this._condition) {\n      case RollupConditionType.SATISFIED:\n        return activity.successStatus === SuccessStatus.PASSED;\n      case RollupConditionType.OBJECTIVE_STATUS_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RollupConditionType.OBJECTIVE_MEASURE_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RollupConditionType.OBJECTIVE_MEASURE_GREATER_THAN: {\n        const greaterThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure > greaterThanValue\n        );\n      }\n      case RollupConditionType.OBJECTIVE_MEASURE_LESS_THAN: {\n        const lessThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure < lessThanValue\n        );\n      }\n      case RollupConditionType.COMPLETED:\n        return activity.isCompleted;\n      case RollupConditionType.PROGRESS_KNOWN:\n        return activity.completionStatus !== CompletionStatus.UNKNOWN;\n      case RollupConditionType.ATTEMPTED:\n        return activity.attemptCount > 0;\n      case RollupConditionType.NOT_ATTEMPTED:\n        return activity.attemptCount === 0;\n      case RollupConditionType.ALWAYS:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RollupCondition\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      condition: this._condition,\n      parameters: Object.fromEntries(this._parameters),\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a rollup rule\n */\nexport class RollupRule extends BaseCMI {\n  private _conditions: RollupCondition[] = [];\n  private _action: RollupActionType = RollupActionType.SATISFIED;\n  private _consideration: RollupConsiderationType = RollupConsiderationType.ALL;\n  private _minimumCount: number = 0;\n  private _minimumPercent: number = 0;\n\n  /**\n   * Constructor for RollupRule\n   * @param {RollupActionType} action - The action to take when the rule conditions are met\n   * @param {RollupConsiderationType} consideration - How to consider child activities\n   * @param {number} minimumCount - The minimum count for AT_LEAST_COUNT consideration\n   * @param {number} minimumPercent - The minimum percent for AT_LEAST_PERCENT consideration\n   */\n  constructor(\n    action: RollupActionType = RollupActionType.SATISFIED,\n    consideration: RollupConsiderationType = RollupConsiderationType.ALL,\n    minimumCount: number = 0,\n    minimumPercent: number = 0,\n  ) {\n    super(\"rollupRule\");\n    this._action = action;\n    this._consideration = consideration;\n    this._minimumCount = minimumCount;\n    this._minimumPercent = minimumPercent;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._conditions = [];\n  }\n\n  /**\n   * Getter for conditions\n   * @return {RollupCondition[]}\n   */\n  get conditions(): RollupCondition[] {\n    return this._conditions;\n  }\n\n  /**\n   * Add a condition to the rule\n   * @param {RollupCondition} condition - The condition to add\n   */\n  addCondition(condition: RollupCondition): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(condition instanceof RollupCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._conditions.push(condition);\n  }\n\n  /**\n   * Remove a condition from the rule\n   * @param {RollupCondition} condition - The condition to remove\n   * @return {boolean} - True if the condition was removed, false otherwise\n   */\n  removeCondition(condition: RollupCondition): boolean {\n    const index = this._conditions.indexOf(condition);\n    if (index !== -1) {\n      this._conditions.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for action\n   * @return {RollupActionType}\n   */\n  get action(): RollupActionType {\n    return this._action;\n  }\n\n  /**\n   * Setter for action\n   * @param {RollupActionType} action\n   */\n  set action(action: RollupActionType) {\n    this._action = action;\n  }\n\n  /**\n   * Getter for consideration\n   * @return {RollupConsiderationType}\n   */\n  get consideration(): RollupConsiderationType {\n    return this._consideration;\n  }\n\n  /**\n   * Setter for consideration\n   * @param {RollupConsiderationType} consideration\n   */\n  set consideration(consideration: RollupConsiderationType) {\n    this._consideration = consideration;\n  }\n\n  /**\n   * Getter for minimumCount\n   * @return {number}\n   */\n  get minimumCount(): number {\n    return this._minimumCount;\n  }\n\n  /**\n   * Setter for minimumCount\n   * @param {number} minimumCount\n   */\n  set minimumCount(minimumCount: number) {\n    if (minimumCount >= 0) {\n      this._minimumCount = minimumCount;\n    }\n  }\n\n  /**\n   * Getter for minimumPercent\n   * @return {number}\n   */\n  get minimumPercent(): number {\n    return this._minimumPercent;\n  }\n\n  /**\n   * Setter for minimumPercent\n   * @param {number} minimumPercent\n   */\n  set minimumPercent(minimumPercent: number) {\n    if (minimumPercent >= 0 && minimumPercent <= 100) {\n      this._minimumPercent = minimumPercent;\n    }\n  }\n\n  /**\n   * Evaluate the rule for a set of child activities\n   * @param {Activity[]} children - The child activities to evaluate the rule for\n   * @return {boolean} - True if the rule conditions are met, false otherwise\n   */\n  evaluate(children: Activity[]): boolean {\n    if (children.length === 0) {\n      return false;\n    }\n\n    // Filter children that meet all conditions\n    const matchingChildren = children.filter((child) => {\n      return this._conditions.every((condition) => condition.evaluate(child));\n    });\n\n    // Apply consideration\n    switch (this._consideration) {\n      case RollupConsiderationType.ALL:\n        return matchingChildren.length === children.length;\n      case RollupConsiderationType.ANY:\n        return matchingChildren.length > 0;\n      case RollupConsiderationType.NONE:\n        return matchingChildren.length === 0;\n      case RollupConsiderationType.AT_LEAST_COUNT:\n        return matchingChildren.length >= this._minimumCount;\n      case RollupConsiderationType.AT_LEAST_PERCENT: {\n        const percent = (matchingChildren.length / children.length) * 100;\n        return percent >= this._minimumPercent;\n      }\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RollupRule\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      conditions: this._conditions,\n      action: this._action,\n      consideration: this._consideration,\n      minimumCount: this._minimumCount,\n      minimumPercent: this._minimumPercent,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a collection of rollup rules\n */\nexport class RollupRules extends BaseCMI {\n  private _rules: RollupRule[] = [];\n\n  /**\n   * Constructor for RollupRules\n   */\n  constructor() {\n    super(\"rollupRules\");\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._rules = [];\n  }\n\n  /**\n   * Getter for rules\n   * @return {RollupRule[]}\n   */\n  get rules(): RollupRule[] {\n    return this._rules;\n  }\n\n  /**\n   * Add a rule\n   * @param {RollupRule} rule - The rule to add\n   */\n  addRule(rule: RollupRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof RollupRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".rules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._rules.push(rule);\n  }\n\n  /**\n   * Remove a rule\n   * @param {RollupRule} rule - The rule to remove\n   * @return {boolean} - True if the rule was removed, false otherwise\n   */\n  removeRule(rule: RollupRule): boolean {\n    const index = this._rules.indexOf(rule);\n    if (index !== -1) {\n      this._rules.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Process rollup for an activity\n   * @param {Activity} activity - The activity to process rollup for\n   */\n  processRollup(activity: Activity): void {\n    if (!activity || activity.children.length === 0) {\n      return;\n    }\n\n    const children = activity.children;\n    let completionRollup = false;\n    let successRollup = false;\n\n    // Process each rule\n    for (const rule of this._rules) {\n      if (rule.evaluate(children)) {\n        switch (rule.action) {\n          case RollupActionType.SATISFIED:\n            activity.successStatus = SuccessStatus.PASSED;\n            successRollup = true;\n            break;\n          case RollupActionType.NOT_SATISFIED:\n            activity.successStatus = SuccessStatus.FAILED;\n            successRollup = true;\n            break;\n          case RollupActionType.COMPLETED:\n            activity.completionStatus = CompletionStatus.COMPLETED;\n            activity.isCompleted = true;\n            completionRollup = true;\n            break;\n          case RollupActionType.INCOMPLETE:\n            activity.completionStatus = CompletionStatus.INCOMPLETE;\n            activity.isCompleted = false;\n            completionRollup = true;\n            break;\n        }\n      }\n    }\n\n    // If no rules applied for completion, use default rollup\n    if (!completionRollup) {\n      this._defaultCompletionRollup(activity, children);\n    }\n\n    // If no rules applied for success, use default rollup\n    if (!successRollup) {\n      this._defaultSuccessRollup(activity, children);\n    }\n  }\n\n  /**\n   * Default completion rollup\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @private\n   */\n  private _defaultCompletionRollup(activity: Activity, children: Activity[]): void {\n    // If all children are completed, mark the parent as completed\n    const allCompleted = children.every((child) => child.isCompleted);\n    if (allCompleted) {\n      activity.completionStatus = CompletionStatus.COMPLETED;\n      activity.isCompleted = true;\n    } else {\n      // If any child is incomplete, mark the parent as incomplete\n      const anyIncomplete = children.some(\n        (child) => child.completionStatus === CompletionStatus.INCOMPLETE,\n      );\n      if (anyIncomplete) {\n        activity.completionStatus = CompletionStatus.INCOMPLETE;\n        activity.isCompleted = false;\n      }\n    }\n  }\n\n  /**\n   * Default success rollup\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @private\n   */\n  private _defaultSuccessRollup(activity: Activity, children: Activity[]): void {\n    // If all children are satisfied, mark the parent as satisfied\n    const allSatisfied = children.every((child) => child.successStatus === SuccessStatus.PASSED);\n    if (allSatisfied) {\n      activity.successStatus = SuccessStatus.PASSED;\n    } else {\n      // If any child is not satisfied, mark the parent as not satisfied\n      const anyNotSatisfied = children.some(\n        (child) => child.successStatus === SuccessStatus.FAILED,\n      );\n      if (anyNotSatisfied) {\n        activity.successStatus = SuccessStatus.FAILED;\n      }\n    }\n  }\n\n  /**\n   * toJSON for RollupRules\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      rules: this._rules,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","const ValidLanguages: string[] = [\n  \"aa\",\n  \"ab\",\n  \"ae\",\n  \"af\",\n  \"ak\",\n  \"am\",\n  \"an\",\n  \"ar\",\n  \"as\",\n  \"av\",\n  \"ay\",\n  \"az\",\n  \"ba\",\n  \"be\",\n  \"bg\",\n  \"bh\",\n  \"bi\",\n  \"bm\",\n  \"bn\",\n  \"bo\",\n  \"br\",\n  \"bs\",\n  \"ca\",\n  \"ce\",\n  \"ch\",\n  \"co\",\n  \"cr\",\n  \"cs\",\n  \"cu\",\n  \"cv\",\n  \"cy\",\n  \"da\",\n  \"de\",\n  \"dv\",\n  \"dz\",\n  \"ee\",\n  \"el\",\n  \"en\",\n  \"eo\",\n  \"es\",\n  \"et\",\n  \"eu\",\n  \"fa\",\n  \"ff\",\n  \"fi\",\n  \"fj\",\n  \"fo\",\n  \"fr\",\n  \"fy\",\n  \"ga\",\n  \"gd\",\n  \"gl\",\n  \"gn\",\n  \"gu\",\n  \"gv\",\n  \"ha\",\n  \"he\",\n  \"hi\",\n  \"ho\",\n  \"hr\",\n  \"ht\",\n  \"hu\",\n  \"hy\",\n  \"hz\",\n  \"ia\",\n  \"id\",\n  \"ie\",\n  \"ig\",\n  \"ii\",\n  \"ik\",\n  \"io\",\n  \"is\",\n  \"it\",\n  \"iu\",\n  \"ja\",\n  \"jv\",\n  \"ka\",\n  \"kg\",\n  \"ki\",\n  \"kj\",\n  \"kk\",\n  \"kl\",\n  \"km\",\n  \"kn\",\n  \"ko\",\n  \"kr\",\n  \"ks\",\n  \"ku\",\n  \"kv\",\n  \"kw\",\n  \"ky\",\n  \"la\",\n  \"lb\",\n  \"lg\",\n  \"li\",\n  \"ln\",\n  \"lo\",\n  \"lt\",\n  \"lu\",\n  \"lv\",\n  \"mg\",\n  \"mh\",\n  \"mi\",\n  \"mk\",\n  \"ml\",\n  \"mn\",\n  \"mo\",\n  \"mr\",\n  \"ms\",\n  \"mt\",\n  \"my\",\n  \"na\",\n  \"nb\",\n  \"nd\",\n  \"ne\",\n  \"ng\",\n  \"nl\",\n  \"nn\",\n  \"no\",\n  \"nr\",\n  \"nv\",\n  \"ny\",\n  \"oc\",\n  \"oj\",\n  \"om\",\n  \"or\",\n  \"os\",\n  \"pa\",\n  \"pi\",\n  \"pl\",\n  \"ps\",\n  \"pt\",\n  \"qu\",\n  \"rm\",\n  \"rn\",\n  \"ro\",\n  \"ru\",\n  \"rw\",\n  \"sa\",\n  \"sc\",\n  \"sd\",\n  \"se\",\n  \"sg\",\n  \"sh\",\n  \"si\",\n  \"sk\",\n  \"sl\",\n  \"sm\",\n  \"sn\",\n  \"so\",\n  \"sq\",\n  \"sr\",\n  \"ss\",\n  \"st\",\n  \"su\",\n  \"sv\",\n  \"sw\",\n  \"ta\",\n  \"te\",\n  \"tg\",\n  \"th\",\n  \"ti\",\n  \"tk\",\n  \"tl\",\n  \"tn\",\n  \"to\",\n  \"tr\",\n  \"ts\",\n  \"tt\",\n  \"tw\",\n  \"ty\",\n  \"ug\",\n  \"uk\",\n  \"ur\",\n  \"uz\",\n  \"ve\",\n  \"vi\",\n  \"vo\",\n  \"wa\",\n  \"wo\",\n  \"xh\",\n  \"yi\",\n  \"yo\",\n  \"za\",\n  \"zh\",\n  \"zu\",\n  \"aar\",\n  \"abk\",\n  \"ave\",\n  \"afr\",\n  \"aka\",\n  \"amh\",\n  \"arg\",\n  \"ara\",\n  \"asm\",\n  \"ava\",\n  \"aym\",\n  \"aze\",\n  \"bak\",\n  \"bel\",\n  \"bul\",\n  \"bih\",\n  \"bis\",\n  \"bam\",\n  \"ben\",\n  \"tib\",\n  \"bod\",\n  \"bre\",\n  \"bos\",\n  \"cat\",\n  \"che\",\n  \"cha\",\n  \"cos\",\n  \"cre\",\n  \"cze\",\n  \"ces\",\n  \"chu\",\n  \"chv\",\n  \"wel\",\n  \"cym\",\n  \"dan\",\n  \"ger\",\n  \"deu\",\n  \"div\",\n  \"dzo\",\n  \"ewe\",\n  \"gre\",\n  \"ell\",\n  \"eng\",\n  \"epo\",\n  \"spa\",\n  \"est\",\n  \"baq\",\n  \"eus\",\n  \"per\",\n  \"fas\",\n  \"ful\",\n  \"fin\",\n  \"fij\",\n  \"fao\",\n  \"fre\",\n  \"fra\",\n  \"fry\",\n  \"gle\",\n  \"gla\",\n  \"glg\",\n  \"grn\",\n  \"guj\",\n  \"glv\",\n  \"hau\",\n  \"heb\",\n  \"hin\",\n  \"hmo\",\n  \"hrv\",\n  \"hat\",\n  \"hun\",\n  \"arm\",\n  \"hye\",\n  \"her\",\n  \"ina\",\n  \"ind\",\n  \"ile\",\n  \"ibo\",\n  \"iii\",\n  \"ipk\",\n  \"ido\",\n  \"ice\",\n  \"isl\",\n  \"ita\",\n  \"iku\",\n  \"jpn\",\n  \"jav\",\n  \"geo\",\n  \"kat\",\n  \"kon\",\n  \"kik\",\n  \"kua\",\n  \"kaz\",\n  \"kal\",\n  \"khm\",\n  \"kan\",\n  \"kor\",\n  \"kau\",\n  \"kas\",\n  \"kur\",\n  \"kom\",\n  \"cor\",\n  \"kir\",\n  \"lat\",\n  \"ltz\",\n  \"lug\",\n  \"lim\",\n  \"lin\",\n  \"lao\",\n  \"lit\",\n  \"lub\",\n  \"lav\",\n  \"mlg\",\n  \"mah\",\n  \"mao\",\n  \"mri\",\n  \"mac\",\n  \"mkd\",\n  \"mal\",\n  \"mon\",\n  \"mol\",\n  \"mar\",\n  \"may\",\n  \"msa\",\n  \"mlt\",\n  \"bur\",\n  \"mya\",\n  \"nau\",\n  \"nob\",\n  \"nde\",\n  \"nep\",\n  \"ndo\",\n  \"dut\",\n  \"nld\",\n  \"nno\",\n  \"nor\",\n  \"nbl\",\n  \"nav\",\n  \"nya\",\n  \"oci\",\n  \"oji\",\n  \"orm\",\n  \"ori\",\n  \"oss\",\n  \"pan\",\n  \"pli\",\n  \"pol\",\n  \"pus\",\n  \"por\",\n  \"que\",\n  \"roh\",\n  \"run\",\n  \"rum\",\n  \"ron\",\n  \"rus\",\n  \"kin\",\n  \"san\",\n  \"srd\",\n  \"snd\",\n  \"sme\",\n  \"sag\",\n  \"slo\",\n  \"sin\",\n  \"slk\",\n  \"slv\",\n  \"smo\",\n  \"sna\",\n  \"som\",\n  \"alb\",\n  \"sqi\",\n  \"srp\",\n  \"ssw\",\n  \"sot\",\n  \"sun\",\n  \"swe\",\n  \"swa\",\n  \"tam\",\n  \"tel\",\n  \"tgk\",\n  \"tha\",\n  \"tir\",\n  \"tuk\",\n  \"tgl\",\n  \"tsn\",\n  \"ton\",\n  \"tur\",\n  \"tso\",\n  \"tat\",\n  \"twi\",\n  \"tah\",\n  \"uig\",\n  \"ukr\",\n  \"urd\",\n  \"uzb\",\n  \"ven\",\n  \"vie\",\n  \"vol\",\n  \"wln\",\n  \"wol\",\n  \"xho\",\n  \"yid\",\n  \"yor\",\n  \"zha\",\n  \"chi\",\n  \"zho\",\n  \"zul\",\n];\nexport default ValidLanguages;\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { scorm2004_regex } from \"../../../constants/regex\";\nimport { check2004ValidFormat } from \"../validation\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { CompletionStatus, SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Class representing a single activity in the SCORM 2004 activity tree\n */\nexport class Activity extends BaseCMI {\n  private _id: string = \"\";\n  private _title: string = \"\";\n  private _children: Activity[] = [];\n  private _parent: Activity | null = null;\n  private _isVisible: boolean = true;\n  private _isActive: boolean = false;\n  private _isSuspended: boolean = false;\n  private _isCompleted: boolean = false;\n  private _completionStatus: CompletionStatus = CompletionStatus.UNKNOWN;\n  private _successStatus: SuccessStatus = SuccessStatus.UNKNOWN;\n  private _attemptCount: number = 0;\n  private _attemptCompletionAmount: number = 0;\n  private _attemptAbsoluteDuration: string = \"PT0H0M0S\";\n  private _attemptExperiencedDuration: string = \"PT0H0M0S\";\n  private _activityAbsoluteDuration: string = \"PT0H0M0S\";\n  private _activityExperiencedDuration: string = \"PT0H0M0S\";\n  private _objectiveSatisfiedStatus: boolean = false;\n  private _objectiveMeasureStatus: boolean = false;\n  private _objectiveNormalizedMeasure: number = 0;\n\n  /**\n   * Constructor for Activity\n   * @param {string} id - The unique identifier for this activity\n   * @param {string} title - The title of this activity\n   */\n  constructor(id: string = \"\", title: string = \"\") {\n    super(\"activity\");\n    this._id = id;\n    this._title = title;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    // Initialize children\n    for (const child of this._children) {\n      child.initialize();\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._isActive = false;\n    this._isSuspended = false;\n    this._isCompleted = false;\n    this._completionStatus = CompletionStatus.UNKNOWN;\n    this._successStatus = SuccessStatus.UNKNOWN;\n    this._attemptCount = 0;\n    this._attemptCompletionAmount = 0;\n    this._attemptAbsoluteDuration = \"PT0H0M0S\";\n    this._attemptExperiencedDuration = \"PT0H0M0S\";\n    this._activityAbsoluteDuration = \"PT0H0M0S\";\n    this._activityExperiencedDuration = \"PT0H0M0S\";\n    this._objectiveSatisfiedStatus = false;\n    this._objectiveMeasureStatus = false;\n    this._objectiveNormalizedMeasure = 0;\n\n    // Reset children\n    for (const child of this._children) {\n      child.reset();\n    }\n  }\n\n  /**\n   * Getter for id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for title\n   * @return {string}\n   */\n  get title(): string {\n    return this._title;\n  }\n\n  /**\n   * Setter for title\n   * @param {string} title\n   */\n  set title(title: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".title\", title, scorm2004_regex.CMILangString250)\n    ) {\n      this._title = title;\n    }\n  }\n\n  /**\n   * Getter for children\n   * @return {Activity[]}\n   */\n  get children(): Activity[] {\n    return this._children;\n  }\n\n  /**\n   * Add a child activity to this activity\n   * @param {Activity} child - The child activity to add\n   */\n  addChild(child: Activity): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(child instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".children\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    child._parent = this;\n    this._children.push(child);\n  }\n\n  /**\n   * Remove a child activity from this activity\n   * @param {Activity} child - The child activity to remove\n   * @return {boolean} - True if the child was removed, false otherwise\n   */\n  removeChild(child: Activity): boolean {\n    const index = this._children.indexOf(child);\n    if (index !== -1) {\n      this._children.splice(index, 1);\n      child._parent = null;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for parent\n   * @return {Activity | null}\n   */\n  get parent(): Activity | null {\n    return this._parent;\n  }\n\n  /**\n   * Getter for isVisible\n   * @return {boolean}\n   */\n  get isVisible(): boolean {\n    return this._isVisible;\n  }\n\n  /**\n   * Setter for isVisible\n   * @param {boolean} isVisible\n   */\n  set isVisible(isVisible: boolean) {\n    this._isVisible = isVisible;\n  }\n\n  /**\n   * Getter for isActive\n   * @return {boolean}\n   */\n  get isActive(): boolean {\n    return this._isActive;\n  }\n\n  /**\n   * Setter for isActive\n   * @param {boolean} isActive\n   */\n  set isActive(isActive: boolean) {\n    this._isActive = isActive;\n  }\n\n  /**\n   * Getter for isSuspended\n   * @return {boolean}\n   */\n  get isSuspended(): boolean {\n    return this._isSuspended;\n  }\n\n  /**\n   * Setter for isSuspended\n   * @param {boolean} isSuspended\n   */\n  set isSuspended(isSuspended: boolean) {\n    this._isSuspended = isSuspended;\n  }\n\n  /**\n   * Getter for isCompleted\n   * @return {boolean}\n   */\n  get isCompleted(): boolean {\n    return this._isCompleted;\n  }\n\n  /**\n   * Setter for isCompleted\n   * @param {boolean} isCompleted\n   */\n  set isCompleted(isCompleted: boolean) {\n    this._isCompleted = isCompleted;\n  }\n\n  /**\n   * Getter for completionStatus\n   * @return {CompletionStatus}\n   */\n  get completionStatus(): CompletionStatus {\n    return this._completionStatus;\n  }\n\n  /**\n   * Setter for completionStatus\n   * @param {CompletionStatus} completionStatus\n   */\n  set completionStatus(completionStatus: CompletionStatus) {\n    this._completionStatus = completionStatus;\n    this._isCompleted = completionStatus === CompletionStatus.COMPLETED;\n  }\n\n  /**\n   * Getter for successStatus\n   * @return {SuccessStatus}\n   */\n  get successStatus(): SuccessStatus {\n    return this._successStatus;\n  }\n\n  /**\n   * Setter for successStatus\n   * @param {SuccessStatus} successStatus\n   */\n  set successStatus(successStatus: SuccessStatus) {\n    this._successStatus = successStatus;\n  }\n\n  /**\n   * Getter for attemptCount\n   * @return {number}\n   */\n  get attemptCount(): number {\n    return this._attemptCount;\n  }\n\n  /**\n   * Increment the attempt count\n   */\n  incrementAttemptCount(): void {\n    this._attemptCount++;\n  }\n\n  /**\n   * Getter for objectiveMeasureStatus\n   * @return {boolean}\n   */\n  get objectiveMeasureStatus(): boolean {\n    return this._objectiveMeasureStatus;\n  }\n\n  /**\n   * Setter for objectiveMeasureStatus\n   * @param {boolean} objectiveMeasureStatus\n   */\n  set objectiveMeasureStatus(objectiveMeasureStatus: boolean) {\n    this._objectiveMeasureStatus = objectiveMeasureStatus;\n  }\n\n  /**\n   * Getter for objectiveNormalizedMeasure\n   * @return {number}\n   */\n  get objectiveNormalizedMeasure(): number {\n    return this._objectiveNormalizedMeasure;\n  }\n\n  /**\n   * Setter for objectiveNormalizedMeasure\n   * @param {number} objectiveNormalizedMeasure\n   */\n  set objectiveNormalizedMeasure(objectiveNormalizedMeasure: number) {\n    this._objectiveNormalizedMeasure = objectiveNormalizedMeasure;\n  }\n\n  /**\n   * toJSON for Activity\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      id: this._id,\n      title: this._title,\n      isVisible: this._isVisible,\n      isActive: this._isActive,\n      isSuspended: this._isSuspended,\n      isCompleted: this._isCompleted,\n      completionStatus: this._completionStatus,\n      successStatus: this._successStatus,\n      attemptCount: this._attemptCount,\n      attemptCompletionAmount: this._attemptCompletionAmount,\n      attemptAbsoluteDuration: this._attemptAbsoluteDuration,\n      attemptExperiencedDuration: this._attemptExperiencedDuration,\n      activityAbsoluteDuration: this._activityAbsoluteDuration,\n      activityExperiencedDuration: this._activityExperiencedDuration,\n      objectiveSatisfiedStatus: this._objectiveSatisfiedStatus,\n      objectiveMeasureStatus: this._objectiveMeasureStatus,\n      objectiveNormalizedMeasure: this._objectiveNormalizedMeasure,\n      children: this._children.map((child) => child.toJSON()),\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\n\n/**\n * Class representing the SCORM 2004 activity tree\n */\nexport class ActivityTree extends BaseCMI {\n  private _root: Activity | null = null;\n  private _currentActivity: Activity | null = null;\n  private _suspendedActivity: Activity | null = null;\n  private _activities: Map<string, Activity> = new Map();\n\n  /**\n   * Constructor for ActivityTree\n   */\n  constructor() {\n    super(\"activityTree\");\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    if (this._root) {\n      this._root.initialize();\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._currentActivity = null;\n    this._suspendedActivity = null;\n    if (this._root) {\n      this._root.reset();\n    }\n  }\n\n  /**\n   * Getter for root\n   * @return {Activity | null}\n   */\n  get root(): Activity | null {\n    return this._root;\n  }\n\n  /**\n   * Setter for root\n   * @param {Activity} root\n   */\n  set root(root: Activity | null) {\n    // noinspection SuspiciousTypeOfGuard\n    if (root !== null && !(root instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".root\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._root = root;\n    if (root) {\n      this._activities.set(root.id, root);\n      this._addActivitiesToMap(root);\n    }\n  }\n\n  /**\n   * Recursively add activities to the activities map\n   * @param {Activity} activity\n   * @private\n   */\n  private _addActivitiesToMap(activity: Activity): void {\n    for (const child of activity.children) {\n      this._activities.set(child.id, child);\n      this._addActivitiesToMap(child);\n    }\n  }\n\n  /**\n   * Getter for currentActivity\n   * @return {Activity | null}\n   */\n  get currentActivity(): Activity | null {\n    return this._currentActivity;\n  }\n\n  /**\n   * Setter for currentActivity\n   * @param {Activity | null} activity\n   */\n  set currentActivity(activity: Activity | null) {\n    // noinspection SuspiciousTypeOfGuard\n    if (activity !== null && !(activity instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".currentActivity\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n\n    // If there's already a current activity, deactivate it\n    if (this._currentActivity) {\n      this._currentActivity.isActive = false;\n    }\n\n    // Set the new current activity and activate it\n    this._currentActivity = activity;\n    if (activity) {\n      activity.isActive = true;\n    }\n  }\n\n  /**\n   * Getter for suspendedActivity\n   * @return {Activity | null}\n   */\n  get suspendedActivity(): Activity | null {\n    return this._suspendedActivity;\n  }\n\n  /**\n   * Setter for suspendedActivity\n   * @param {Activity | null} activity\n   */\n  set suspendedActivity(activity: Activity | null) {\n    // noinspection SuspiciousTypeOfGuard\n    if (activity !== null && !(activity instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".suspendedActivity\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n\n    // If there's already a suspended activity, unsuspend it\n    if (this._suspendedActivity) {\n      this._suspendedActivity.isSuspended = false;\n    }\n\n    // Set the new suspended activity and mark it as suspended\n    this._suspendedActivity = activity;\n    if (activity) {\n      activity.isSuspended = true;\n    }\n  }\n\n  /**\n   * Get an activity by ID\n   * @param {string} id - The ID of the activity to get\n   * @return {Activity | undefined} - The activity with the given ID, or undefined if not found\n   */\n  getActivity(id: string): Activity | undefined {\n    return this._activities.get(id);\n  }\n\n  /**\n   * Get all activities in the tree\n   * @return {Activity[]} - An array of all activities in the tree\n   */\n  getAllActivities(): Activity[] {\n    return Array.from(this._activities.values());\n  }\n\n  /**\n   * Get the parent of an activity\n   * @param {Activity} activity - The activity to get the parent of\n   * @return {Activity | null} - The parent of the activity, or null if it has no parent\n   */\n  getParent(activity: Activity): Activity | null {\n    return activity.parent;\n  }\n\n  /**\n   * Get the children of an activity\n   * @param {Activity} activity - The activity to get the children of\n   * @return {Activity[]} - An array of the activity's children\n   */\n  getChildren(activity: Activity): Activity[] {\n    return activity.children;\n  }\n\n  /**\n   * Get the siblings of an activity\n   * @param {Activity} activity - The activity to get the siblings of\n   * @return {Activity[]} - An array of the activity's siblings\n   */\n  getSiblings(activity: Activity): Activity[] {\n    if (!activity.parent) {\n      return [];\n    }\n    return activity.parent.children.filter((child) => child !== activity);\n  }\n\n  /**\n   * Get the next sibling of an activity\n   * @param {Activity} activity - The activity to get the next sibling of\n   * @return {Activity | null} - The next sibling of the activity, or null if it has no next sibling\n   */\n  getNextSibling(activity: Activity): Activity | null {\n    if (!activity.parent) {\n      return null;\n    }\n    const siblings = activity.parent.children;\n    const index = siblings.indexOf(activity);\n    if (index === -1 || index === siblings.length - 1) {\n      return null;\n    }\n    return siblings[index + 1];\n  }\n\n  /**\n   * Get the previous sibling of an activity\n   * @param {Activity} activity - The activity to get the previous sibling of\n   * @return {Activity | null} - The previous sibling of the activity, or null if it has no previous sibling\n   */\n  getPreviousSibling(activity: Activity): Activity | null {\n    if (!activity.parent) {\n      return null;\n    }\n    const siblings = activity.parent.children;\n    const index = siblings.indexOf(activity);\n    if (index <= 0) {\n      return null;\n    }\n    return siblings[index - 1];\n  }\n\n  /**\n   * Get the first child of an activity\n   * @param {Activity} activity - The activity to get the first child of\n   * @return {Activity | null} - The first child of the activity, or null if it has no children\n   */\n  getFirstChild(activity: Activity): Activity | null {\n    if (activity.children.length === 0) {\n      return null;\n    }\n    return activity.children[0];\n  }\n\n  /**\n   * Get the last child of an activity\n   * @param {Activity} activity - The activity to get the last child of\n   * @return {Activity | null} - The last child of the activity, or null if it has no children\n   */\n  getLastChild(activity: Activity): Activity | null {\n    if (activity.children.length === 0) {\n      return null;\n    }\n    return activity.children[activity.children.length - 1];\n  }\n\n  /**\n   * Get the common ancestor of two activities\n   * @param {Activity} activity1 - The first activity\n   * @param {Activity} activity2 - The second activity\n   * @return {Activity | null} - The common ancestor of the two activities, or null if they have no common ancestor\n   */\n  getCommonAncestor(activity1: Activity, activity2: Activity): Activity | null {\n    // Get the path from the root to activity1\n    const path1: Activity[] = [];\n    let current: Activity | null = activity1;\n    while (current) {\n      path1.unshift(current);\n      current = current.parent;\n    }\n\n    // Check if activity2 is in the path from the root to activity1\n    current = activity2;\n    while (current) {\n      if (path1.includes(current)) {\n        return current;\n      }\n      current = current.parent;\n    }\n\n    return null;\n  }\n\n  /**\n   * toJSON for ActivityTree\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      root: this._root,\n      currentActivity: this._currentActivity ? this._currentActivity.id : null,\n      suspendedActivity: this._suspendedActivity ? this._suspendedActivity.id : null,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\n\n/**\n * Class representing SCORM 2004 sequencing controls\n */\nexport class SequencingControls extends BaseCMI {\n  // Sequencing Control Modes\n  private _enabled: boolean = true;\n  private _choiceExit: boolean = true;\n  private _flow: boolean = false;\n  private _forwardOnly: boolean = false;\n  private _useCurrentAttemptObjectiveInfo: boolean = true;\n  private _useCurrentAttemptProgressInfo: boolean = true;\n\n  // Constrain Choice Controls\n  private _preventActivation: boolean = false;\n  private _constrainChoice: boolean = false;\n\n  // Rollup Controls\n  private _rollupObjectiveSatisfied: boolean = true;\n  private _rollupProgressCompletion: boolean = true;\n  private _objectiveMeasureWeight: number = 1.0;\n\n  /**\n   * Constructor for SequencingControls\n   */\n  constructor() {\n    super(\"sequencingControls\");\n  }\n\n  /**\n   * Reset the sequencing controls to their default values\n   */\n  reset() {\n    this._initialized = false;\n    this._enabled = true;\n    this._choiceExit = true;\n    this._flow = false;\n    this._forwardOnly = false;\n    this._useCurrentAttemptObjectiveInfo = true;\n    this._useCurrentAttemptProgressInfo = true;\n    this._preventActivation = false;\n    this._constrainChoice = false;\n    this._rollupObjectiveSatisfied = true;\n    this._rollupProgressCompletion = true;\n    this._objectiveMeasureWeight = 1.0;\n  }\n\n  /**\n   * Getter for enabled\n   * @return {boolean}\n   */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  /**\n   * Setter for enabled\n   * @param {boolean} enabled\n   */\n  set enabled(enabled: boolean) {\n    this._enabled = enabled;\n  }\n\n  /**\n   * Getter for choiceExit\n   * @return {boolean}\n   */\n  get choiceExit(): boolean {\n    return this._choiceExit;\n  }\n\n  /**\n   * Setter for choiceExit\n   * @param {boolean} choiceExit\n   */\n  set choiceExit(choiceExit: boolean) {\n    this._choiceExit = choiceExit;\n  }\n\n  /**\n   * Getter for flow\n   * @return {boolean}\n   */\n  get flow(): boolean {\n    return this._flow;\n  }\n\n  /**\n   * Setter for flow\n   * @param {boolean} flow\n   */\n  set flow(flow: boolean) {\n    this._flow = flow;\n  }\n\n  /**\n   * Getter for forwardOnly\n   * @return {boolean}\n   */\n  get forwardOnly(): boolean {\n    return this._forwardOnly;\n  }\n\n  /**\n   * Setter for forwardOnly\n   * @param {boolean} forwardOnly\n   */\n  set forwardOnly(forwardOnly: boolean) {\n    this._forwardOnly = forwardOnly;\n  }\n\n  /**\n   * Getter for useCurrentAttemptObjectiveInfo\n   * @return {boolean}\n   */\n  get useCurrentAttemptObjectiveInfo(): boolean {\n    return this._useCurrentAttemptObjectiveInfo;\n  }\n\n  /**\n   * Setter for useCurrentAttemptObjectiveInfo\n   * @param {boolean} useCurrentAttemptObjectiveInfo\n   */\n  set useCurrentAttemptObjectiveInfo(useCurrentAttemptObjectiveInfo: boolean) {\n    this._useCurrentAttemptObjectiveInfo = useCurrentAttemptObjectiveInfo;\n  }\n\n  /**\n   * Getter for useCurrentAttemptProgressInfo\n   * @return {boolean}\n   */\n  get useCurrentAttemptProgressInfo(): boolean {\n    return this._useCurrentAttemptProgressInfo;\n  }\n\n  /**\n   * Setter for useCurrentAttemptProgressInfo\n   * @param {boolean} useCurrentAttemptProgressInfo\n   */\n  set useCurrentAttemptProgressInfo(useCurrentAttemptProgressInfo: boolean) {\n    this._useCurrentAttemptProgressInfo = useCurrentAttemptProgressInfo;\n  }\n\n  /**\n   * Getter for preventActivation\n   * @return {boolean}\n   */\n  get preventActivation(): boolean {\n    return this._preventActivation;\n  }\n\n  /**\n   * Setter for preventActivation\n   * @param {boolean} preventActivation\n   */\n  set preventActivation(preventActivation: boolean) {\n    this._preventActivation = preventActivation;\n  }\n\n  /**\n   * Getter for constrainChoice\n   * @return {boolean}\n   */\n  get constrainChoice(): boolean {\n    return this._constrainChoice;\n  }\n\n  /**\n   * Setter for constrainChoice\n   * @param {boolean} constrainChoice\n   */\n  set constrainChoice(constrainChoice: boolean) {\n    this._constrainChoice = constrainChoice;\n  }\n\n  /**\n   * Getter for rollupObjectiveSatisfied\n   * @return {boolean}\n   */\n  get rollupObjectiveSatisfied(): boolean {\n    return this._rollupObjectiveSatisfied;\n  }\n\n  /**\n   * Setter for rollupObjectiveSatisfied\n   * @param {boolean} rollupObjectiveSatisfied\n   */\n  set rollupObjectiveSatisfied(rollupObjectiveSatisfied: boolean) {\n    this._rollupObjectiveSatisfied = rollupObjectiveSatisfied;\n  }\n\n  /**\n   * Getter for rollupProgressCompletion\n   * @return {boolean}\n   */\n  get rollupProgressCompletion(): boolean {\n    return this._rollupProgressCompletion;\n  }\n\n  /**\n   * Setter for rollupProgressCompletion\n   * @param {boolean} rollupProgressCompletion\n   */\n  set rollupProgressCompletion(rollupProgressCompletion: boolean) {\n    this._rollupProgressCompletion = rollupProgressCompletion;\n  }\n\n  /**\n   * Getter for objectiveMeasureWeight\n   * @return {number}\n   */\n  get objectiveMeasureWeight(): number {\n    return this._objectiveMeasureWeight;\n  }\n\n  /**\n   * Setter for objectiveMeasureWeight\n   * @param {number} objectiveMeasureWeight\n   */\n  set objectiveMeasureWeight(objectiveMeasureWeight: number) {\n    if (objectiveMeasureWeight >= 0 && objectiveMeasureWeight <= 1) {\n      this._objectiveMeasureWeight = objectiveMeasureWeight;\n    }\n  }\n\n  /**\n   * Check if choice navigation is allowed\n   * @return {boolean} - True if choice navigation is allowed, false otherwise\n   */\n  isChoiceNavigationAllowed(): boolean {\n    return this._enabled && !this._constrainChoice;\n  }\n\n  /**\n   * Check if flow navigation is allowed\n   * @return {boolean} - True if flow navigation is allowed, false otherwise\n   */\n  isFlowNavigationAllowed(): boolean {\n    return this._enabled && this._flow;\n  }\n\n  /**\n   * Check if forward navigation is allowed\n   * @return {boolean} - True if forward navigation is allowed, false otherwise\n   */\n  isForwardNavigationAllowed(): boolean {\n    return this._enabled && (!this._forwardOnly || this._flow);\n  }\n\n  /**\n   * Check if backward navigation is allowed\n   * @return {boolean} - True if backward navigation is allowed, false otherwise\n   */\n  isBackwardNavigationAllowed(): boolean {\n    return this._enabled && !this._forwardOnly;\n  }\n\n  /**\n   * toJSON for SequencingControls\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      enabled: this._enabled,\n      choiceExit: this._choiceExit,\n      flow: this._flow,\n      forwardOnly: this._forwardOnly,\n      useCurrentAttemptObjectiveInfo: this._useCurrentAttemptObjectiveInfo,\n      useCurrentAttemptProgressInfo: this._useCurrentAttemptProgressInfo,\n      preventActivation: this._preventActivation,\n      constrainChoice: this._constrainChoice,\n      rollupObjectiveSatisfied: this._rollupObjectiveSatisfied,\n      rollupProgressCompletion: this._rollupProgressCompletion,\n      objectiveMeasureWeight: this._objectiveMeasureWeight,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { ActivityTree } from \"./activity_tree\";\nimport { RuleActionType, SequencingRules } from \"./sequencing_rules\";\nimport { SequencingControls } from \"./sequencing_controls\";\nimport { RollupRules } from \"./rollup_rules\";\nimport { ADLNav } from \"../adl\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\n\n/**\n * Class representing SCORM 2004 sequencing\n */\nexport class Sequencing extends BaseCMI {\n  private _activityTree: ActivityTree;\n  private _sequencingRules: SequencingRules;\n  private _sequencingControls: SequencingControls;\n  private _rollupRules: RollupRules;\n  private _adlNav: ADLNav | null = null;\n\n  /**\n   * Constructor for Sequencing\n   */\n  constructor() {\n    super(\"sequencing\");\n    this._activityTree = new ActivityTree();\n    this._sequencingRules = new SequencingRules();\n    this._sequencingControls = new SequencingControls();\n    this._rollupRules = new RollupRules();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this._activityTree.initialize();\n    this._sequencingRules.initialize();\n    this._sequencingControls.initialize();\n    this._rollupRules.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._activityTree.reset();\n    this._sequencingRules.reset();\n    this._sequencingControls.reset();\n    this._rollupRules.reset();\n  }\n\n  /**\n   * Getter for activityTree\n   * @return {ActivityTree}\n   */\n  get activityTree(): ActivityTree {\n    return this._activityTree;\n  }\n\n  /**\n   * Setter for activityTree\n   * @param {ActivityTree} activityTree\n   */\n  set activityTree(activityTree: ActivityTree) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(activityTree instanceof ActivityTree)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".activityTree\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._activityTree = activityTree;\n  }\n\n  /**\n   * Getter for sequencingRules\n   * @return {SequencingRules}\n   */\n  get sequencingRules(): SequencingRules {\n    return this._sequencingRules;\n  }\n\n  /**\n   * Setter for sequencingRules\n   * @param {SequencingRules} sequencingRules\n   */\n  set sequencingRules(sequencingRules: SequencingRules) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(sequencingRules instanceof SequencingRules)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".sequencingRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._sequencingRules = sequencingRules;\n  }\n\n  /**\n   * Getter for sequencingControls\n   * @return {SequencingControls}\n   */\n  get sequencingControls(): SequencingControls {\n    return this._sequencingControls;\n  }\n\n  /**\n   * Setter for sequencingControls\n   * @param {SequencingControls} sequencingControls\n   */\n  set sequencingControls(sequencingControls: SequencingControls) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(sequencingControls instanceof SequencingControls)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".sequencingControls\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._sequencingControls = sequencingControls;\n  }\n\n  /**\n   * Getter for rollupRules\n   * @return {RollupRules}\n   */\n  get rollupRules(): RollupRules {\n    return this._rollupRules;\n  }\n\n  /**\n   * Setter for rollupRules\n   * @param {RollupRules} rollupRules\n   */\n  set rollupRules(rollupRules: RollupRules) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rollupRules instanceof RollupRules)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".rollupRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._rollupRules = rollupRules;\n  }\n\n  /**\n   * Getter for adlNav\n   * @return {ADLNav | null}\n   */\n  get adlNav(): ADLNav | null {\n    return this._adlNav;\n  }\n\n  /**\n   * Setter for adlNav\n   * @param {ADLNav | null} adlNav\n   */\n  set adlNav(adlNav: ADLNav | null) {\n    this._adlNav = adlNav;\n  }\n\n  /**\n   * Process navigation request\n   * @param {string} request - The navigation request\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processNavigationRequest(request: string): boolean {\n    if (!this._adlNav) {\n      return false;\n    }\n\n    // Set the navigation request\n    this._adlNav.request = request;\n\n    // Get the current activity\n    const currentActivity = this._activityTree.currentActivity;\n    if (!currentActivity) {\n      return false;\n    }\n\n    // Evaluate pre-condition rules\n    const preConditionAction = this._sequencingRules.evaluatePreConditionRules(currentActivity);\n    if (preConditionAction) {\n      // Handle pre-condition action\n      switch (preConditionAction) {\n        case RuleActionType.SKIP:\n          // Skip this activity\n          return false;\n        case RuleActionType.DISABLED:\n          // Disable this activity\n          return false;\n        case RuleActionType.HIDE_FROM_CHOICE:\n          // Hide this activity from choice\n          return false;\n        case RuleActionType.STOP_FORWARD_TRAVERSAL:\n          // Stop forward traversal\n          return false;\n        default:\n          break;\n      }\n    }\n\n    // Process the navigation request based on the request type\n    switch (request) {\n      case \"continue\":\n        return this.processContinueRequest(currentActivity);\n      case \"previous\":\n        return this.processPreviousRequest(currentActivity);\n      case \"choice\":\n        // Choice navigation would require additional parameters\n        return false;\n      case \"exit\":\n        return this.processExitRequest(currentActivity);\n      case \"exitAll\":\n        return this.processExitAllRequest();\n      case \"abandon\":\n        return this.processAbandonRequest(currentActivity);\n      case \"abandonAll\":\n        return this.processAbandonAllRequest();\n      case \"suspendAll\":\n        return this.processSuspendAllRequest(currentActivity);\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Process continue request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processContinueRequest(currentActivity: Activity): boolean {\n    // Check if continue is allowed\n    if (!this._sequencingControls.isForwardNavigationAllowed()) {\n      return false;\n    }\n\n    // Get the next activity\n    const nextActivity = this._activityTree.getNextSibling(currentActivity);\n    if (!nextActivity) {\n      return false;\n    }\n\n    // Handle exit condition actions\n    if (this._handleExitConditionAction(currentActivity)) {\n      return true;\n    }\n\n    // Set the next activity as current\n    this._activityTree.currentActivity = nextActivity;\n\n    // Evaluate post-condition rules\n    const postConditionAction = this._sequencingRules.evaluatePostConditionRules(nextActivity);\n    if (postConditionAction) {\n      // Handle post-condition action\n      switch (postConditionAction) {\n        case RuleActionType.RETRY:\n          // Retry this activity\n          nextActivity.incrementAttemptCount();\n          return true;\n        case RuleActionType.RETRY_ALL:\n          // Retry all activities\n          this._activityTree.getAllActivities().forEach((activity) => {\n            activity.incrementAttemptCount();\n          });\n          return true;\n        case RuleActionType.CONTINUE:\n          // Continue to next activity\n          return this.processContinueRequest(nextActivity);\n        case RuleActionType.PREVIOUS:\n          // Go to previous activity\n          return this.processPreviousRequest(nextActivity);\n        case RuleActionType.EXIT:\n          // Exit this activity\n          this._activityTree.currentActivity = currentActivity;\n          return true;\n        default:\n          break;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Process previous request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processPreviousRequest(currentActivity: Activity): boolean {\n    // Check if backward navigation is allowed\n    if (!this._sequencingControls.isBackwardNavigationAllowed()) {\n      return false;\n    }\n\n    // Get the previous activity\n    const previousActivity = this._activityTree.getPreviousSibling(currentActivity);\n    if (!previousActivity) {\n      return false;\n    }\n\n    // Handle exit condition actions\n    if (this._handleExitConditionAction(currentActivity)) {\n      return true;\n    }\n\n    // Set the previous activity as current\n    this._activityTree.currentActivity = previousActivity;\n\n    // Evaluate post-condition rules\n    const postConditionAction = this._sequencingRules.evaluatePostConditionRules(previousActivity);\n    if (postConditionAction) {\n      // Handle post-condition action\n      switch (postConditionAction) {\n        case RuleActionType.RETRY:\n          // Retry this activity\n          previousActivity.incrementAttemptCount();\n          return true;\n        case RuleActionType.RETRY_ALL:\n          // Retry all activities\n          this._activityTree.getAllActivities().forEach((activity) => {\n            activity.incrementAttemptCount();\n          });\n          return true;\n        case RuleActionType.CONTINUE:\n          // Continue to next activity\n          return this.processContinueRequest(previousActivity);\n        case RuleActionType.PREVIOUS:\n          // Go to previous activity\n          return this.processPreviousRequest(previousActivity);\n        case RuleActionType.EXIT:\n          // Exit this activity\n          this._activityTree.currentActivity = currentActivity;\n          return true;\n        default:\n          break;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Process exit request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processExitRequest(currentActivity: Activity): boolean {\n    // Check if exit is allowed\n    if (!this._sequencingControls.choiceExit) {\n      return false;\n    }\n\n    // Get the parent activity\n    const parent = currentActivity.parent;\n    if (!parent) {\n      return false;\n    }\n\n    // Set the parent activity as current\n    this._activityTree.currentActivity = parent;\n\n    return true;\n  }\n\n  /**\n   * Process exit all request\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processExitAllRequest(): boolean {\n    // Check if exit is allowed\n    if (!this._sequencingControls.choiceExit) {\n      return false;\n    }\n\n    // Set no activity as current\n    this._activityTree.currentActivity = null;\n\n    return true;\n  }\n\n  /**\n   * Process abandon request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processAbandonRequest(currentActivity: Activity): boolean {\n    // Get the parent activity\n    const parent = currentActivity.parent;\n    if (!parent) {\n      return false;\n    }\n\n    // Set the parent activity as current without processing exit rules\n    this._activityTree.currentActivity = parent;\n\n    return true;\n  }\n\n  /**\n   * Process abandon all request\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processAbandonAllRequest(): boolean {\n    // Set no activity as current without processing exit rules\n    this._activityTree.currentActivity = null;\n\n    return true;\n  }\n\n  /**\n   * Process suspend all request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processSuspendAllRequest(currentActivity: Activity): boolean {\n    // Set the current activity as suspended\n    this._activityTree.suspendedActivity = currentActivity;\n    this._activityTree.currentActivity = null;\n\n    return true;\n  }\n\n  /**\n   * Process rollup for the entire activity tree\n   */\n  processRollup(): void {\n    // Get the root activity\n    const root = this._activityTree.root;\n    if (!root) {\n      return;\n    }\n\n    // Process rollup from the bottom up\n    this._processRollupRecursive(root);\n  }\n\n  /**\n   * Handle exit condition actions for an activity\n   * @param {Activity} activity - The activity to handle exit conditions for\n   * @return {boolean} - True if an exit action was handled, false otherwise\n   * @private\n   */\n  private _handleExitConditionAction(activity: Activity): boolean {\n    const exitConditionAction = this._sequencingRules.evaluateExitConditionRules(activity);\n    if (exitConditionAction) {\n      // Handle exit condition action\n      switch (exitConditionAction) {\n        case RuleActionType.EXIT_PARENT: {\n          // Exit to parent\n          const parent = activity.parent;\n          if (parent) {\n            this._activityTree.currentActivity = parent;\n            return true;\n          }\n          return false;\n        }\n        case RuleActionType.EXIT_ALL:\n          // Exit all\n          this._activityTree.currentActivity = null;\n          return true;\n        default:\n          break;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Process rollup recursively\n   * @param {Activity} activity - The activity to process rollup for\n   * @private\n   */\n  private _processRollupRecursive(activity: Activity): void {\n    // Process rollup for children first\n    for (const child of activity.children) {\n      this._processRollupRecursive(child);\n    }\n\n    // Process rollup for this activity\n    this._rollupRules.processRollup(activity);\n  }\n\n  /**\n   * toJSON for Sequencing\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      activityTree: this._activityTree,\n      sequencingRules: this._sequencingRules,\n      sequencingControls: this._sequencingControls,\n      rollupRules: this._rollupRules,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import BaseAPI from \"./BaseAPI\";\nimport { CMI } from \"./cmi/scorm2004/cmi\";\nimport * as Utilities from \"./utilities\";\nimport { StringKeyMap, stringMatches } from \"./utilities\";\nimport { global_constants, scorm2004_constants } from \"./constants/api_constants\";\nimport { scorm2004_errors } from \"./constants/error_codes\";\nimport { CMIObjectivesObject } from \"./cmi/scorm2004/objectives\";\nimport { ADL, ADLDataObject } from \"./cmi/scorm2004/adl\";\nimport { CommitObject, ResultObject, ScoreObject, Settings } from \"./types/api_types\";\nimport {\n  ActivitySettings,\n  RollupRuleSettings,\n  RollupRulesSettings,\n  SequencingControlsSettings,\n  SequencingRuleSettings,\n  SequencingRulesSettings,\n  SequencingSettings\n} from \"./types/sequencing_types\";\nimport { RuleCondition, SequencingRule } from \"./cmi/scorm2004/sequencing/sequencing_rules\";\nimport { RollupCondition, RollupRule } from \"./cmi/scorm2004/sequencing/rollup_rules\";\nimport { scorm2004_regex } from \"./constants/regex\"; // Import functions from extracted modules\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport {\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject\n} from \"./cmi/scorm2004/interactions\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { CorrectResponses, ResponseType } from \"./constants/response_constants\";\nimport { CMICommentsObject } from \"./cmi/scorm2004/comments\";\nimport ValidLanguages from \"./constants/language_constants\";\nimport { CompletionStatus, SuccessStatus } from \"./constants/enums\";\nimport { Sequencing } from \"./cmi/scorm2004/sequencing/sequencing\";\nimport { Activity } from \"./cmi/scorm2004/sequencing/activity\";\n\n/**\n * API class for SCORM 2004\n */\nclass Scorm2004API extends BaseAPI {\n  private _version: string = \"1.0\";\n  private _globalObjectives: CMIObjectivesObject[] = [];\n  private readonly _sequencing: Sequencing;\n  private _extractedScoItemIds: string[] = [];\n\n  /**\n   * Constructor for SCORM 2004 API\n   * @param {Settings} settings\n   */\n  constructor(settings?: Settings) {\n    if (settings) {\n      if (settings.mastery_override === undefined) {\n        settings.mastery_override = false;\n      }\n    }\n\n    super(scorm2004_errors, settings);\n\n    this.cmi = new CMI();\n    this.adl = new ADL();\n    this._sequencing = new Sequencing();\n\n    // Connect the sequencing object to the ADL's sequencing property\n    // The Sequencing object is used for both configuration and runtime navigation processing\n    // It needs to be attached to the ADL object for runtime navigation requests (adl.nav.request)\n    this.adl.sequencing = this._sequencing;\n\n    // Configure sequencing if settings are provided\n    if (settings?.sequencing) {\n      this.configureSequencing(settings.sequencing);\n    }\n\n    // Rename functions to match 2004 Spec and expose to modules\n    this.Initialize = this.lmsInitialize;\n    this.Terminate = this.lmsFinish;\n    this.GetValue = this.lmsGetValue;\n    this.SetValue = this.lmsSetValue;\n    this.Commit = this.lmsCommit;\n    this.GetLastError = this.lmsGetLastError;\n    this.GetErrorString = this.lmsGetErrorString;\n    this.GetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  public cmi: CMI;\n  public adl: ADL;\n\n  public Initialize: () => string;\n  public Terminate: () => string;\n  public GetValue: (CMIElement: string) => string;\n  public SetValue: (CMIElement: string, value: any) => string;\n  public Commit: () => string;\n  public GetLastError: () => string;\n  public GetErrorString: (CMIErrorCode: string | number) => string;\n  public GetDiagnostic: (CMIErrorCode: string | number) => string;\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset(settings?: Settings) {\n    this.commonReset(settings);\n\n    this.cmi?.reset();\n    this.adl?.reset();\n    this._sequencing?.reset();\n  }\n\n  /**\n   * Getter for _version\n   * @return {string}\n   */\n  get version(): string {\n    return this._version;\n  }\n\n  /**\n   * Getter for _globalObjectives\n   */\n  get globalObjectives(): CMIObjectivesObject[] {\n    return this._globalObjectives;\n  }\n\n  /**\n   * Initialize function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize(): string {\n    this.cmi.initialize();\n    return this.initialize(\n      \"Initialize\",\n      \"LMS was already initialized!\",\n      \"LMS is already finished!\",\n    );\n  }\n\n  /**\n   * Terminate function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish(): string {\n    (async () => {\n      await this.internalFinish();\n    })();\n    return global_constants.SCORM_TRUE;\n  }\n\n  async internalFinish(): Promise<string> {\n    const result = await this.terminate(\"Terminate\", true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      if (this.adl.nav.request !== \"_none_\") {\n        const navActions: { [key: string]: string } = {\n          continue: \"SequenceNext\",\n          previous: \"SequencePrevious\",\n          choice: \"SequenceChoice\",\n          jump: \"SequenceJump\",\n          exit: \"SequenceExit\",\n          exitAll: \"SequenceExitAll\",\n          abandon: \"SequenceAbandon\",\n          abandonAll: \"SequenceAbandonAll\",\n        };\n\n        let request = this.adl.nav.request;\n        const choiceJumpRegex = new RegExp(scorm2004_regex.NAVEvent);\n        const matches = request.match(choiceJumpRegex);\n        let target = \"\";\n        if (matches) {\n          if (matches.groups?.choice_target) {\n            target = matches.groups?.choice_target;\n            request = \"choice\";\n          } else if (matches.groups?.jump_target) {\n            target = matches.groups?.jump_target;\n            request = \"jump\";\n          }\n        }\n        const action = navActions[request];\n        if (action) {\n          this.processListeners(action, \"adl.nav.request\", target);\n        }\n      } else if (this.settings.autoProgress) {\n        this.processListeners(\"SequenceNext\", undefined, \"next\");\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * GetValue function from SCORM 2004 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement: string): string {\n    const adlNavRequestRegex =\n      \"^adl\\\\.nav\\\\.request_valid\\\\.(choice|jump)\\\\.{target=\\\\S{0,}([a-zA-Z0-9-_]+)}$\";\n    if (stringMatches(CMIElement, adlNavRequestRegex)) {\n      const matches = CMIElement.match(adlNavRequestRegex);\n      if (matches) {\n        const request = matches[1];\n        const target = matches[2].replace(/{target=/g, \"\").replace(/}/g, \"\");\n        if (request === \"choice\" || request === \"jump\") {\n          if (this.settings.scoItemIdValidator) {\n            return String(this.settings.scoItemIdValidator(target));\n          }\n          // If we have extracted IDs from sequencing, use those exclusively\n          if (this._extractedScoItemIds.length > 0) {\n            return String(this._extractedScoItemIds.includes(target));\n          }\n          // Otherwise use the scoItemIds from settings\n          return String(this.settings?.scoItemIds?.includes(target));\n        }\n      }\n    }\n    return this.getValue(\"GetValue\", true, CMIElement);\n  }\n\n  /**\n   * SetValue function from SCORM 2004 Spec\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement: string, value: any): string {\n    // Proceed with regular setting for non-objective elements or fallback behavior\n    return this.setValue(\"SetValue\", \"Commit\", true, CMIElement, value);\n  }\n\n  /**\n   * Commit function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit(): string {\n    if (this.settings.asyncCommit) {\n      this.scheduleCommit(500, \"Commit\");\n    } else {\n      (async () => {\n        await this.commit(\"Commit\", false);\n      })();\n    }\n    return global_constants.SCORM_TRUE;\n  }\n\n  /**\n   * GetLastError function from SCORM 2004 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError(): string {\n    return this.getLastError(\"GetLastError\");\n  }\n\n  /**\n   * GetErrorString function from SCORM 2004 Spec\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode: string | number): string {\n    return this.getErrorString(\"GetErrorString\", CMIErrorCode);\n  }\n\n  /**\n   * GetDiagnostic function from SCORM 2004 Spec\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode: string | number): string {\n    return this.getDiagnostic(\"GetDiagnostic\", CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object - delegates to CMIValueHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  override setCMIValue(CMIElement: string, value: any): string {\n    // Check if we're updating a global or local objective\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      const parts = CMIElement.split(\".\");\n      const index = Number(parts[2]);\n      const element_base = `cmi.objectives.${index}`;\n\n      let objective_id;\n      const setting_id = stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\\\\.id\");\n\n      if (setting_id) {\n        // If we're setting the objective ID, capture it directly\n        objective_id = value;\n      } else {\n        // Find existing objective ID if available\n        const objective = this.cmi.objectives.findObjectiveByIndex(index);\n        objective_id = objective ? objective.id : undefined;\n      }\n\n      // Check if the objective ID matches a global objective\n      const is_global = objective_id && this.settings.globalObjectiveIds?.includes(objective_id);\n\n      if (is_global) {\n        // Locate or create an entry in _globalObjectives for the global objective\n        let global_index = this._globalObjectives.findIndex((obj) => obj.id === objective_id);\n\n        if (global_index === -1) {\n          global_index = this._globalObjectives.length;\n          const newGlobalObjective = new CMIObjectivesObject();\n          newGlobalObjective.id = objective_id;\n          this._globalObjectives.push(newGlobalObjective);\n        }\n\n        // Update the global objective\n        const global_element = CMIElement.replace(\n          element_base,\n          `_globalObjectives.${global_index}`,\n        );\n        this._commonSetCMIValue(\"SetGlobalObjectiveValue\", true, global_element, value);\n      }\n    }\n    return this._commonSetCMIValue(\"SetValue\", true, CMIElement, value);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array - delegates to CMIElementHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI|null}\n   */\n  getChildElement(CMIElement: string, value: any, foundFirstIndex: boolean): BaseCMI | null {\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      return new CMIObjectivesObject();\n    }\n\n    if (foundFirstIndex) {\n      if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+\")) {\n        return this.createCorrectResponsesObject(CMIElement, value);\n      } else if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+\")) {\n        return new CMIInteractionsObjectivesObject();\n      }\n    } else if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\")) {\n      return new CMIInteractionsObject();\n    }\n\n    if (stringMatches(CMIElement, \"cmi\\\\.comments_from_learner\\\\.\\\\d+\")) {\n      return new CMICommentsObject();\n    } else if (stringMatches(CMIElement, \"cmi\\\\.comments_from_lms\\\\.\\\\d+\")) {\n      return new CMICommentsObject(true);\n    }\n\n    if (stringMatches(CMIElement, \"adl\\\\.data\\\\.\\\\d+\")) {\n      return new ADLDataObject();\n    }\n\n    return null;\n  }\n\n  /**\n   * Creates a correct responses object for an interaction - delegates to CMIElementHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {BaseCMI|null}\n   */\n  private createCorrectResponsesObject(CMIElement: string, value: any): BaseCMI | null {\n    const parts = CMIElement.split(\".\");\n    const index = Number(parts[2]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    if (this.isInitialized()) {\n      if (typeof interaction === \"undefined\" || !interaction.type) {\n        this.throwSCORMError(CMIElement, scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED, CMIElement);\n        return null;\n      } else {\n        this.checkDuplicateChoiceResponse(CMIElement, interaction, value);\n        const response_type = CorrectResponses[interaction.type];\n        if (response_type) {\n          this.checkValidResponseType(CMIElement, response_type, value, interaction.type);\n        } else {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.GENERAL_SET_FAILURE,\n            `Incorrect Response Type: ${interaction.type}`,\n          );\n          return null;\n        }\n      }\n    }\n\n    if (this.lastErrorCode === \"0\") {\n      return new CMIInteractionsCorrectResponsesObject(interaction);\n    }\n\n    return null;\n  }\n\n  /**\n   * Checks for valid response types - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {ResponseType} response_type\n   * @param {any} value\n   * @param {string} interaction_type\n   */\n  checkValidResponseType(\n    CMIElement: string,\n    response_type: ResponseType,\n    value: any,\n    interaction_type: string,\n  ) {\n    let nodes = [];\n    if (response_type?.delimiter) {\n      nodes = String(value).split(response_type.delimiter);\n    } else {\n      nodes[0] = value;\n    }\n\n    if (nodes.length > 0 && nodes.length <= response_type.max) {\n      this.checkCorrectResponseValue(CMIElement, interaction_type, nodes, value);\n    } else if (nodes.length > response_type.max) {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.GENERAL_SET_FAILURE,\n        `Data Model Element Pattern Too Long: ${value}`,\n      );\n    }\n  }\n\n  /**\n   * Checks for duplicate 'choice' responses - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {CMIInteractionsObject} interaction\n   * @param {any} value\n   */\n  checkDuplicateChoiceResponse(CMIElement: string, interaction: CMIInteractionsObject, value: any) {\n    const interaction_count = interaction.correct_responses._count;\n    if (interaction.type === \"choice\") {\n      for (let i = 0; i < interaction_count && this.lastErrorCode === \"0\"; i++) {\n        const response = interaction.correct_responses.childArray[i];\n        if (response.pattern === value) {\n          this.throwSCORMError(CMIElement, scorm2004_errors.GENERAL_SET_FAILURE, `${value}`);\n        }\n      }\n    }\n  }\n\n  /**\n   * Validate correct response - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {*} value\n   */\n  validateCorrectResponse(CMIElement: string, value: any) {\n    const parts = CMIElement.split(\".\");\n    const index = Number(parts[2]);\n    const pattern_index = Number(parts[4]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    const interaction_count = interaction.correct_responses._count;\n    this.checkDuplicateChoiceResponse(CMIElement, interaction, value);\n\n    const response_type = CorrectResponses[interaction.type];\n    if (typeof response_type.limit === \"undefined\" || interaction_count <= response_type.limit) {\n      this.checkValidResponseType(CMIElement, response_type, value, interaction.type);\n\n      if (\n        (this.lastErrorCode === \"0\" &&\n          (!response_type.duplicate ||\n            !this.checkDuplicatedPattern(interaction.correct_responses, pattern_index, value))) ||\n        (this.lastErrorCode === \"0\" && value === \"\")\n      ) {\n        // do nothing, we want the inverse\n      } else {\n        if (this.lastErrorCode === \"0\") {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.GENERAL_SET_FAILURE,\n            `Data Model Element Pattern Already Exists: ${CMIElement} - ${value}`,\n          );\n        }\n      }\n    } else {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.GENERAL_SET_FAILURE,\n        `Data Model Element Collection Limit Reached: ${CMIElement} - ${value}`,\n      );\n    }\n  }\n\n  /**\n   * Gets a value from the CMI Object - delegates to CMIValueHandlerModule\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  override getCMIValue(CMIElement: string): any {\n    return this._commonGetCMIValue(\"GetValue\", true, CMIElement);\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {(string|number)} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  override getLmsErrorMessageDetails(errorNumber: string | number, detail: boolean): string {\n    let basicMessage = \"\";\n    let detailMessage = \"\";\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (scorm2004_constants.error_descriptions[errorNumber]) {\n      basicMessage = scorm2004_constants.error_descriptions[errorNumber].basicMessage;\n      detailMessage = scorm2004_constants.error_descriptions[errorNumber].detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Check to see if a correct_response value has been duplicated - delegates to ValidationModule\n   * @param {CMIArray} correct_response\n   * @param {number} current_index\n   * @param {*} value\n   * @return {boolean}\n   */\n  checkDuplicatedPattern(correct_response: CMIArray, current_index: number, value: any): boolean {\n    let found = false;\n    const count = correct_response._count;\n    for (let i = 0; i < count && !found; i++) {\n      if (i !== current_index && correct_response.childArray[i] === value) {\n        found = true;\n      }\n    }\n    return found;\n  }\n\n  /**\n   * Checks for a valid correct_response value - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {string} interaction_type\n   * @param {Array} nodes\n   * @param {*} value\n   */\n  checkCorrectResponseValue(\n    CMIElement: string,\n    interaction_type: string,\n    nodes: Array<any>,\n    value: any,\n  ) {\n    const response = CorrectResponses[interaction_type];\n    if (!response) {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.TYPE_MISMATCH,\n        `Incorrect Response Type: ${interaction_type}`,\n      );\n      return;\n    }\n    const formatRegex = new RegExp(response.format);\n    for (let i = 0; i < nodes.length && this.lastErrorCode === \"0\"; i++) {\n      if (interaction_type.match(\"^(fill-in|long-fill-in|matching|performance|sequencing)$\")) {\n        nodes[i] = this.removeCorrectResponsePrefixes(CMIElement, nodes[i]);\n      }\n\n      if (response?.delimiter2) {\n        const values = nodes[i].split(response.delimiter2);\n        if (values.length === 2) {\n          const matches = values[0].match(formatRegex);\n          if (!matches) {\n            this.throwSCORMError(\n              CMIElement,\n              scorm2004_errors.TYPE_MISMATCH,\n              `${interaction_type}: ${value}`,\n            );\n          } else {\n            if (!response.format2 || !values[1].match(new RegExp(response.format2))) {\n              this.throwSCORMError(\n                CMIElement,\n                scorm2004_errors.TYPE_MISMATCH,\n                `${interaction_type}: ${value}`,\n              );\n            }\n          }\n        } else {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.TYPE_MISMATCH,\n            `${interaction_type}: ${value}`,\n          );\n        }\n      } else {\n        const matches = nodes[i].match(formatRegex);\n        if ((!matches && value !== \"\") || (!matches && interaction_type === \"true-false\")) {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.TYPE_MISMATCH,\n            `${interaction_type}: ${value}`,\n          );\n        } else {\n          if (interaction_type === \"numeric\" && nodes.length > 1) {\n            if (Number(nodes[0]) > Number(nodes[1])) {\n              this.throwSCORMError(\n                CMIElement,\n                scorm2004_errors.TYPE_MISMATCH,\n                `${interaction_type}: ${value}`,\n              );\n            }\n          } else {\n            if (nodes[i] !== \"\" && response.unique) {\n              for (let j = 0; j < i && this.lastErrorCode === \"0\"; j++) {\n                if (nodes[i] === nodes[j]) {\n                  this.throwSCORMError(\n                    CMIElement,\n                    scorm2004_errors.TYPE_MISMATCH,\n                    `${interaction_type}: ${value}`,\n                  );\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove prefixes from correct_response - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {string} node\n   * @return {*}\n   */\n  removeCorrectResponsePrefixes(CMIElement: string, node: string): any {\n    let seenOrder = false;\n    let seenCase = false;\n    let seenLang = false;\n\n    const prefixRegex = new RegExp(\"^({(lang|case_matters|order_matters)=([^}]+)})\");\n    let matches = node.match(prefixRegex);\n    let langMatches = null;\n    while (matches) {\n      switch (matches[2]) {\n        case \"lang\":\n          langMatches = node.match(scorm2004_regex.CMILangcr);\n          if (langMatches) {\n            const lang = langMatches[3];\n            if (lang !== undefined && lang.length > 0) {\n              if (!ValidLanguages.includes(lang.toLowerCase())) {\n                this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n              }\n            }\n          }\n          seenLang = true;\n          break;\n        case \"case_matters\":\n          if (!seenLang && !seenOrder && !seenCase) {\n            if (matches[3] !== \"true\" && matches[3] !== \"false\") {\n              this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n            }\n          }\n\n          seenCase = true;\n          break;\n        case \"order_matters\":\n          if (!seenCase && !seenLang && !seenOrder) {\n            if (matches[3] !== \"true\" && matches[3] !== \"false\") {\n              this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n            }\n          }\n\n          seenOrder = true;\n          break;\n      }\n      node = node.substring(matches[1].length);\n      matches = node.match(prefixRegex);\n    }\n\n    return node;\n  }\n\n  /**\n   * Replace the whole API with another\n   * @param {Scorm2004API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI: Scorm2004API) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.adl = newAPI.adl;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit - delegates to DataSerializationModule\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} includeTotalTime - Whether to include total time in the commit data\n   * @return {object|Array}\n   */\n  renderCommitCMI(\n    terminateCommit: boolean,\n    includeTotalTime: boolean = false,\n  ): StringKeyMap | Array<any> {\n    const cmiExport: StringKeyMap = this.renderCMIToJSONObject();\n\n    if (includeTotalTime) {\n      (cmiExport.cmi as any).total_time = (this.cmi as any).getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened: StringKeyMap = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case \"flattened\":\n        return Utilities.flatten(cmiExport);\n      case \"params\":\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case \"json\":\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit - delegates to DataSerializationModule\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} includeTotalTime - Whether to include total time in the commit data\n   * @return {CommitObject}\n   */\n  renderCommitObject(terminateCommit: boolean, includeTotalTime: boolean = false): CommitObject {\n    const cmiExport = this.renderCommitCMI(terminateCommit, includeTotalTime);\n    const totalTimeDuration = includeTotalTime ? this.cmi.getCurrentTotalTime() : \"\";\n    const totalTimeSeconds = Utilities.getDurationAsSeconds(\n      totalTimeDuration,\n      scorm2004_regex.CMITimespan,\n    );\n\n    let completionStatus = CompletionStatus.UNKNOWN;\n    let successStatus = SuccessStatus.UNKNOWN;\n    if (this.cmi.completion_status) {\n      if (this.cmi.completion_status === \"completed\") {\n        completionStatus = CompletionStatus.COMPLETED;\n      } else if (this.cmi.completion_status === \"incomplete\") {\n        completionStatus = CompletionStatus.INCOMPLETE;\n      }\n    }\n    if (this.cmi.success_status) {\n      if (this.cmi.success_status === \"passed\") {\n        successStatus = SuccessStatus.PASSED;\n      } else if (this.cmi.success_status === \"failed\") {\n        successStatus = SuccessStatus.FAILED;\n      }\n    }\n\n    const scoreObject: ScoreObject = this.cmi?.score?.getScoreObject() || {};\n    const commitObject: CommitObject = {\n      completionStatus: completionStatus,\n      successStatus: successStatus,\n      totalTimeSeconds: totalTimeSeconds,\n      runtimeData: cmiExport as StringKeyMap,\n    };\n    if (scoreObject) {\n      commitObject.score = scoreObject;\n    }\n    return commitObject;\n  }\n\n  /**\n   * Attempts to store the data to the LMS - delegates to DataSerializationModule\n   *\n   * @param {boolean} terminateCommit\n   * @return {ResultObject}\n   */\n  async storeData(terminateCommit: boolean): Promise<ResultObject> {\n    if (terminateCommit) {\n      if (this.cmi.mode === \"normal\") {\n        if (this.cmi.credit === \"credit\") {\n          if (this.cmi.completion_threshold && this.cmi.progress_measure) {\n            if (this.cmi.progress_measure >= this.cmi.completion_threshold) {\n              this.cmi.completion_status = \"completed\";\n            } else {\n              this.cmi.completion_status = \"incomplete\";\n            }\n          }\n          if (this.cmi.scaled_passing_score && this.cmi.score.scaled) {\n            if (this.cmi.score.scaled >= this.cmi.scaled_passing_score) {\n              this.cmi.success_status = \"passed\";\n            } else {\n              this.cmi.success_status = \"failed\";\n            }\n          }\n        }\n      }\n    }\n\n    let navRequest = false;\n    if (\n      this.adl.nav.request !==\n        ((this.startingData?.adl as StringKeyMap)?.nav as StringKeyMap)?.request &&\n      this.adl.nav.request !== \"_none_\"\n    ) {\n      navRequest = true;\n    }\n\n    const commitObject = this.getCommitObject(terminateCommit);\n    if (typeof this.settings.lmsCommitUrl === \"string\") {\n      const result = await this.processHttpRequest(\n        this.settings.lmsCommitUrl,\n        {\n          commitObject: commitObject,\n        },\n        terminateCommit,\n      );\n\n      // Check if this is a sequencing call, and then call the necessary JS\n      if (\n        navRequest &&\n        result.navRequest !== undefined &&\n        result.navRequest !== \"\" &&\n        typeof result.navRequest === \"string\"\n      ) {\n        Function(`\"use strict\";(() => { ${result.navRequest} })()`)();\n      } else if (result?.navRequest && !navRequest) {\n        if (\n          typeof result.navRequest === \"object\" &&\n          Object.hasOwnProperty.call(result.navRequest, \"name\")\n        ) {\n          this.processListeners(result.navRequest.name as string, result.navRequest.data as string);\n        }\n      }\n\n      return result;\n    }\n\n    return {\n      result: \"true\",\n      errorCode: 0,\n    };\n  }\n\n  /**\n   * Configure sequencing based on provided settings\n   * @param {SequencingSettings} sequencingSettings - The sequencing settings\n   */\n  private configureSequencing(sequencingSettings: SequencingSettings): void {\n    // Configure activity tree\n    if (sequencingSettings.activityTree) {\n      this.configureActivityTree(sequencingSettings.activityTree);\n    }\n\n    // Configure sequencing rules\n    if (sequencingSettings.sequencingRules) {\n      this.configureSequencingRules(sequencingSettings.sequencingRules);\n    }\n\n    // Configure sequencing controls\n    if (sequencingSettings.sequencingControls) {\n      this.configureSequencingControls(sequencingSettings.sequencingControls);\n    }\n\n    // Configure rollup rules\n    if (sequencingSettings.rollupRules) {\n      this.configureRollupRules(sequencingSettings.rollupRules);\n    }\n  }\n\n  /**\n   * Configure activity tree based on provided settings\n   * @param {ActivitySettings} activityTreeSettings - The activity tree settings\n   */\n  private configureActivityTree(activityTreeSettings: ActivitySettings): void {\n    // Create root activity\n    const rootActivity = this.createActivity(activityTreeSettings);\n\n    // Create activity tree\n    const activityTree = this._sequencing.activityTree;\n    activityTree.root = rootActivity;\n\n    // Extract activity IDs for use as scoItemIds\n    this._extractedScoItemIds = this.extractActivityIds(rootActivity);\n  }\n\n  /**\n   * Extract all activity IDs from an activity and its children\n   * @param {Activity} activity - The activity to extract IDs from\n   * @return {string[]} - Array of activity IDs\n   */\n  private extractActivityIds(activity: Activity): string[] {\n    const ids = [activity.id];\n\n    // Recursively extract IDs from children\n    for (const child of activity.children) {\n      ids.push(...this.extractActivityIds(child));\n    }\n\n    return ids;\n  }\n\n  /**\n   * Create an activity from settings\n   * @param {ActivitySettings} activitySettings - The activity settings\n   * @return {Activity} - The created activity\n   */\n  private createActivity(activitySettings: ActivitySettings): Activity {\n    // Create activity\n    const activity = new Activity(activitySettings.id, activitySettings.title);\n\n    // Set activity properties\n    if (activitySettings.isVisible !== undefined) {\n      activity.isVisible = activitySettings.isVisible;\n    }\n    if (activitySettings.isActive !== undefined) {\n      activity.isActive = activitySettings.isActive;\n    }\n    if (activitySettings.isSuspended !== undefined) {\n      activity.isSuspended = activitySettings.isSuspended;\n    }\n    if (activitySettings.isCompleted !== undefined) {\n      activity.isCompleted = activitySettings.isCompleted;\n    }\n\n    // Create child activities\n    if (activitySettings.children) {\n      for (const childSettings of activitySettings.children) {\n        const childActivity = this.createActivity(childSettings);\n        activity.addChild(childActivity);\n      }\n    }\n\n    return activity;\n  }\n\n  /**\n   * Configure sequencing rules based on provided settings\n   * @param {SequencingRulesSettings} sequencingRulesSettings - The sequencing rules settings\n   */\n  private configureSequencingRules(sequencingRulesSettings: SequencingRulesSettings): void {\n    const sequencingRules = this._sequencing.sequencingRules;\n\n    // Configure pre-condition rules\n    if (sequencingRulesSettings.preConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.preConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addPreConditionRule(rule);\n      }\n    }\n\n    // Configure exit condition rules\n    if (sequencingRulesSettings.exitConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.exitConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addExitConditionRule(rule);\n      }\n    }\n\n    // Configure post-condition rules\n    if (sequencingRulesSettings.postConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.postConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addPostConditionRule(rule);\n      }\n    }\n  }\n\n  /**\n   * Create a sequencing rule from settings\n   * @param {SequencingRuleSettings} ruleSettings - The sequencing rule settings\n   * @return {SequencingRule} - The created sequencing rule\n   */\n  private createSequencingRule(ruleSettings: SequencingRuleSettings): SequencingRule {\n    // Create rule\n    const rule = new SequencingRule(ruleSettings.action, ruleSettings.conditionCombination);\n\n    // Add conditions\n    for (const conditionSettings of ruleSettings.conditions) {\n      const condition = new RuleCondition(\n        conditionSettings.condition,\n        conditionSettings.operator,\n        new Map(Object.entries(conditionSettings.parameters || {})),\n      );\n      rule.addCondition(condition);\n    }\n\n    return rule;\n  }\n\n  /**\n   * Configure sequencing controls based on provided settings\n   * @param {SequencingControlsSettings} sequencingControlsSettings - The sequencing controls settings\n   */\n  private configureSequencingControls(\n    sequencingControlsSettings: SequencingControlsSettings,\n  ): void {\n    const sequencingControls = this._sequencing.sequencingControls;\n\n    // Set sequencing control properties\n    if (sequencingControlsSettings.enabled !== undefined) {\n      sequencingControls.enabled = sequencingControlsSettings.enabled;\n    }\n    if (sequencingControlsSettings.choiceExit !== undefined) {\n      sequencingControls.choiceExit = sequencingControlsSettings.choiceExit;\n    }\n    if (sequencingControlsSettings.flow !== undefined) {\n      sequencingControls.flow = sequencingControlsSettings.flow;\n    }\n    if (sequencingControlsSettings.forwardOnly !== undefined) {\n      sequencingControls.forwardOnly = sequencingControlsSettings.forwardOnly;\n    }\n    if (sequencingControlsSettings.useCurrentAttemptObjectiveInfo !== undefined) {\n      sequencingControls.useCurrentAttemptObjectiveInfo =\n        sequencingControlsSettings.useCurrentAttemptObjectiveInfo;\n    }\n    if (sequencingControlsSettings.useCurrentAttemptProgressInfo !== undefined) {\n      sequencingControls.useCurrentAttemptProgressInfo =\n        sequencingControlsSettings.useCurrentAttemptProgressInfo;\n    }\n    if (sequencingControlsSettings.preventActivation !== undefined) {\n      sequencingControls.preventActivation = sequencingControlsSettings.preventActivation;\n    }\n    if (sequencingControlsSettings.constrainChoice !== undefined) {\n      sequencingControls.constrainChoice = sequencingControlsSettings.constrainChoice;\n    }\n    if (sequencingControlsSettings.rollupObjectiveSatisfied !== undefined) {\n      sequencingControls.rollupObjectiveSatisfied =\n        sequencingControlsSettings.rollupObjectiveSatisfied;\n    }\n    if (sequencingControlsSettings.rollupProgressCompletion !== undefined) {\n      sequencingControls.rollupProgressCompletion =\n        sequencingControlsSettings.rollupProgressCompletion;\n    }\n    if (sequencingControlsSettings.objectiveMeasureWeight !== undefined) {\n      sequencingControls.objectiveMeasureWeight = sequencingControlsSettings.objectiveMeasureWeight;\n    }\n  }\n\n  /**\n   * Configure rollup rules based on provided settings\n   * @param {RollupRulesSettings} rollupRulesSettings - The rollup rules settings\n   */\n  private configureRollupRules(rollupRulesSettings: RollupRulesSettings): void {\n    const rollupRules = this._sequencing.rollupRules;\n\n    // Configure rollup rules\n    if (rollupRulesSettings.rules) {\n      for (const ruleSettings of rollupRulesSettings.rules) {\n        const rule = this.createRollupRule(ruleSettings);\n        rollupRules.addRule(rule);\n      }\n    }\n  }\n\n  /**\n   * Create a rollup rule from settings\n   * @param {RollupRuleSettings} ruleSettings - The rollup rule settings\n   * @return {RollupRule} - The created rollup rule\n   */\n  private createRollupRule(ruleSettings: RollupRuleSettings): RollupRule {\n    // Create rule\n    const rule = new RollupRule(\n      ruleSettings.action,\n      ruleSettings.consideration,\n      ruleSettings.minimumCount,\n      ruleSettings.minimumPercent,\n    );\n\n    // Add conditions\n    for (const conditionSettings of ruleSettings.conditions) {\n      const condition = new RollupCondition(\n        conditionSettings.condition,\n        new Map(Object.entries(conditionSettings.parameters || {})),\n      );\n      rule.addCondition(condition);\n    }\n\n    return rule;\n  }\n}\n\nexport default Scorm2004API;\n","// src/CrossFrameAPI.ts\nimport { MessageData, MessageResponse } from \"./types/CrossFrame\";\nimport { global_errors } from \"./constants/error_codes\";\n\n/**\n * Client-side SCORM façade running in your content frame.\n * Returns cached/default values synchronously, then fires off an async\n * postMessage to the LMS frame to refresh cache and error state.\n */\nexport default class CrossFrameAPI {\n  private _cache = new Map<string, string>();\n  private _lastError = \"0\";\n  private _pending = new Map<string, { resolve: (v: any) => void; reject: (e: any) => void }>();\n  private _counter = 0;\n  private readonly _origin: string;\n\n  private _handler: ProxyHandler<CrossFrameAPI> = {\n    get: (target, prop, receiver) => {\n      // If it's an existing property/method, return it\n      if (typeof prop !== \"string\" || prop in target) {\n        const v = Reflect.get(target, prop, receiver);\n        return typeof v === \"function\" ? v.bind(target) : v;\n      }\n\n      // Otherwise treat prop as a SCORM call\n      const methodName = prop;\n      const isGet = methodName.endsWith(\"GetValue\");\n      const isSet = methodName.startsWith(\"LMSSet\") || methodName.endsWith(\"SetValue\");\n      const isInit = methodName === \"Initialize\" || methodName === \"LMSInitialize\";\n      const isFinish = methodName === \"Terminate\" || methodName === \"LMSFinish\";\n      const isCommit = methodName === \"Commit\" || methodName === \"LMSCommit\";\n\n      return (...args: any[]): string => {\n        // Synchronous cache update for setter calls\n        if (isSet && args.length >= 2) {\n          target._cache.set(args[0], String(args[1]));\n          target._lastError = \"0\";\n        }\n\n        // Fire off async postMessage to refresh cache & error\n        target\n          ._post(methodName, args)\n          .then((res) => {\n            if (isGet && args.length >= 1) {\n              target._cache.set(args[0], String(res));\n              target._lastError = \"0\";\n            }\n            if (methodName === \"GetLastError\" || methodName === \"LMSGetLastError\") {\n              target._lastError = String(res);\n            }\n          })\n          .catch((err) => target._capture(methodName, err));\n\n        // Return synchronously\n        if (isGet && args.length >= 1) {\n          return target._cache.get(args[0]) ?? \"\";\n        }\n        if (isInit || isFinish || isCommit || isSet) {\n          // Immediately return “true”\n          const result = \"true\";\n          // Then warm cache:\n          target\n            ._post(\"getFlattenedCMI\", [])\n            .then((all: Record<string, string>) => {\n              Object.entries(all).forEach(([key, val]) => {\n                target._cache.set(key, val);\n              });\n              // reset error\n              target._lastError = \"0\";\n            })\n            .catch((err) => target._capture(\"getFlattenedCMI\", err));\n          return result;\n        }\n        if (methodName === \"GetLastError\" || methodName === \"LMSGetLastError\") {\n          return target._lastError;\n        }\n        return \"\";\n      };\n    },\n  };\n\n  constructor(targetOrigin: string = \"*\") {\n    this._origin = targetOrigin;\n    window.addEventListener(\"message\", this._onMessage.bind(this));\n    return new Proxy(this, this._handler);\n  }\n\n  /** Send a message to the LMS frame and return a promise for its response */\n  private _post(method: string, params: any[]): Promise<any> {\n    const messageId = `cfapi-${Date.now()}-${this._counter++}`;\n\n    // Deep‐clean params of non-cloneables (e.g. functions)\n    const safeParams = params.map((p) => {\n      if (typeof p === \"function\") {\n        console.warn(\"Dropping function param when posting SCORM call:\", method);\n        return undefined;\n      }\n      return p;\n    });\n\n    return new Promise((resolve, reject) => {\n      this._pending.set(messageId, { resolve, reject });\n      const msg: MessageData = { messageId, method, params: safeParams };\n      window.parent.postMessage(msg, this._origin);\n      // Optional timeout\n      setTimeout(() => {\n        if (this._pending.has(messageId)) {\n          this._pending.delete(messageId);\n          reject(new Error(`Timeout calling ${method}`));\n        }\n      }, 5000);\n    });\n  }\n\n  /** Handle incoming postMessage responses from the LMS frame */\n  private _onMessage(ev: MessageEvent) {\n    const data = ev.data as MessageResponse;\n    if (!data?.messageId) return;\n    const pending = this._pending.get(data.messageId);\n    if (!pending) return;\n    this._pending.delete(data.messageId);\n    if (data.error) pending.reject(data.error);\n    else pending.resolve(data.result);\n  }\n\n  /** Capture and cache SCORM errors */\n  private _capture(method: string, err: any) {\n    console.error(`CrossFrameAPI ${method} error:`, err);\n    const code = (/(\\d{3})/.exec(err.message) || [])[1] || global_errors.GENERAL;\n    this._lastError = String(code);\n    this._cache.set(`error_${code}`, err.message);\n  }\n}\n","// src/CrossFrameLMS.ts\nimport { MessageData, MessageResponse } from \"./types/CrossFrame\";\nimport { IBaseAPI } from \"./interfaces/IBaseAPI\";\n\n/**\n * Server‐side SCORM adapter running in your LMS frame (lms.example.com).\n * Listens for postMessage from child (content) frames, invokes real API,\n * and posts back { messageId, result, error }.\n */\nexport default class CrossFrameLMS {\n  private readonly _api: IBaseAPI;\n  private readonly _origin: string;\n\n  constructor(api: IBaseAPI, targetOrigin: string = \"*\") {\n    this._api = api;\n    this._origin = targetOrigin;\n    window.addEventListener(\"message\", this._onMessage.bind(this));\n  }\n\n  private _onMessage(ev: MessageEvent) {\n    const msg = ev.data as MessageData;\n    if (!msg?.messageId || !msg.method) return;\n    this._process(msg, ev.source as Window);\n  }\n\n  private _process(msg: MessageData, source: Window) {\n    let result: any, error: any;\n    try {\n      const fn = (this._api as any)[msg.method];\n      if (typeof fn !== \"function\") {\n        error = {\n          message: `Method ${msg.method} not found`,\n        };\n      } else {\n        result = fn.apply(this._api, msg.params);\n      }\n    } catch (e: any) {\n      error = { message: e.message, stack: e.stack };\n    }\n    const resp: MessageResponse = {\n      messageId: msg.messageId,\n      result,\n      error,\n    };\n    source.postMessage(resp, this._origin);\n  }\n}\n"],"names":["scorm12_errors","scorm2004_errors","Util.getSecondsAsHHMMSS","Util.addHHMMSSTimeStrings","CMIObjectives","CMIInteractions","CMIElement","Utilities.flatten","StringKeyMap","terminateCommit","CMI","CMIObjectivesObject","CMIInteractionsCorrectResponsesObject","CMIInteractionsObjectivesObject","CMIInteractionsObject","Utilities.getTimeAsSeconds","Scorm12CMI.CMI","Util.getSecondsAsISODuration","Util.addTwoDurations","RuleActionType","Utilities.getDurationAsSeconds"],"mappings":"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"}