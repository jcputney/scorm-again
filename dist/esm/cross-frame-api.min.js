class e{constructor(e="*",t=window.parent){return this._cache=new Map,this._lastError="0",this._pending=new Map,this._counter=0,this._handler={get:(e,t,r)=>{if("string"!=typeof t||t in e){const s=Reflect.get(e,t,r);return"function"==typeof s?s.bind(e):s}const s=t,n=s.endsWith("GetValue"),i=s.startsWith("LMSSet")||s.endsWith("SetValue"),o="Initialize"===s||"LMSInitialize"===s,a="Terminate"===s||"LMSFinish"===s,c="Commit"===s||"LMSCommit"===s,h="GetErrorString"===s||"LMSGetErrorString"===s,g="GetDiagnostic"===s||"LMSGetDiagnostic"===s;return(...t)=>{if(i&&t.length>=2&&(e._cache.set(t[0],t[1]+""),e._lastError="0"),e._post(s,t).then((r=>{n&&t.length>=1&&(e._cache.set(t[0],r+""),e._lastError="0"),h&&t.length>=1&&e._cache.set("error_"+t[0],r+""),g&&t.length>=1&&e._cache.set("diag_"+t[0],r+""),"GetLastError"!==s&&"LMSGetLastError"!==s||(e._lastError=r+"")})).catch((t=>e._capture(s,t))),n&&t.length>=1)return e._cache.get(t[0])??"";if(h&&t.length>=1)return e._cache.get("error_"+t[0])??"";if(g&&t.length>=1)return e._cache.get("diag_"+t[0])??"";if(o||a||c||i){const result="true";return e._post("getFlattenedCMI",[]).then((t=>{Object.entries(t).forEach((([t,r])=>{e._cache.set(t,r)})),e._lastError="0"})).catch((t=>e._capture("getFlattenedCMI",t))),result}return"GetLastError"===s||"LMSGetLastError"===s?e._lastError:""}}},this._origin=e,this._targetWindow=t,window.addEventListener("message",this._onMessage.bind(this)),new Proxy(this,this._handler)}_post(e,t){const r=`cfapi-${Date.now()}-${this._counter++}`,s=t.map((t=>{if("function"!=typeof t)return t;console.warn("Dropping function param when posting SCORM call:",e)}));return new Promise(((t,n)=>{const i=setTimeout((()=>{this._pending.has(r)&&(this._pending.delete(r),n(Error("Timeout calling "+e)))}),5e3);this._pending.set(r,{resolve:t,reject:n,timer:i}),this._targetWindow.postMessage({messageId:r,method:e,params:s},this._origin)}))}_onMessage(e){if("*"!==this._origin&&e.origin!==this._origin)return;if(e.source&&e.source!==this._targetWindow)return;const t=e.data;if(!t?.messageId)return;const r=this._pending.get(t.messageId);r&&(clearTimeout(r.timer),this._pending.delete(t.messageId),t.error?r.reject(t.error):r.resolve(t.result))}_capture(e,t){console.error(`CrossFrameAPI ${e} error:`,t);const r=/\b(\d{3})\b/.exec(t.message),s=r?r[1]:"101";this._lastError=s,this._cache.set("error_"+s,t.message)}}export{e as CrossFrameAPI};
