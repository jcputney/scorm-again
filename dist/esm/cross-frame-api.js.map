{"version":3,"file":"cross-frame-api.js","sources":["../../src/constants/error_codes.ts","../../src/CrossFrameAPI.ts"],"sourcesContent":["export type ErrorCode = {\n  [key: string]: number;\n};\n\nexport const global_errors: ErrorCode = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nexport const scorm12_errors: ErrorCode = {\n  ...global_errors,\n  RETRIEVE_BEFORE_INIT: 301,\n  STORE_BEFORE_INIT: 301,\n  COMMIT_BEFORE_INIT: 301,\n  ARGUMENT_ERROR: 201,\n  CHILDREN_ERROR: 202,\n  COUNT_ERROR: 203,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 401,\n  VALUE_NOT_INITIALIZED: 301,\n  INVALID_SET_VALUE: 402,\n  READ_ONLY_ELEMENT: 403,\n  WRITE_ONLY_ELEMENT: 404,\n  TYPE_MISMATCH: 405,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n\nexport const scorm2004_errors: ErrorCode = {\n  ...global_errors,\n  INITIALIZATION_FAILED: 102,\n  INITIALIZED: 103,\n  TERMINATED: 104,\n  TERMINATION_FAILURE: 111,\n  TERMINATION_BEFORE_INIT: 112,\n  MULTIPLE_TERMINATIONS: 113,\n  RETRIEVE_BEFORE_INIT: 122,\n  RETRIEVE_AFTER_TERM: 123,\n  STORE_BEFORE_INIT: 132,\n  STORE_AFTER_TERM: 133,\n  COMMIT_BEFORE_INIT: 142,\n  COMMIT_AFTER_TERM: 143,\n  ARGUMENT_ERROR: 201,\n  GENERAL_GET_FAILURE: 301,\n  GENERAL_SET_FAILURE: 351,\n  GENERAL_COMMIT_FAILURE: 391,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 402,\n  VALUE_NOT_INITIALIZED: 403,\n  READ_ONLY_ELEMENT: 404,\n  WRITE_ONLY_ELEMENT: 405,\n  TYPE_MISMATCH: 406,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n","// src/CrossFrameAPI.ts\nimport { MessageData, MessageResponse } from \"./types/CrossFrame\";\nimport { global_errors } from \"./constants/error_codes\";\n\n/**\n * Client-side SCORM façade running in your content frame.\n * Returns cached/default values synchronously, then fires off an async\n * postMessage to the LMS frame to refresh cache and error state.\n */\nexport default class CrossFrameAPI {\n  private _cache = new Map<string, string>();\n  private _lastError = \"0\";\n  private _pending = new Map<\n    string,\n    {\n      resolve: (v: any) => void;\n      reject: (e: any) => void;\n      timer: ReturnType<typeof setTimeout>;\n    }\n  >();\n  private _counter = 0;\n  private readonly _origin: string;\n  private readonly _targetWindow: Window;\n\n  private _handler: ProxyHandler<CrossFrameAPI> = {\n    get: (target, prop, receiver) => {\n      // If it's an existing property/method, return it\n      if (typeof prop !== \"string\" || prop in target) {\n        const v = Reflect.get(target, prop, receiver);\n        return typeof v === \"function\" ? v.bind(target) : v;\n      }\n\n      // Otherwise treat prop as a SCORM call\n      const methodName = prop;\n      const isGet = methodName.endsWith(\"GetValue\");\n      const isSet = methodName.startsWith(\"LMSSet\") || methodName.endsWith(\"SetValue\");\n      const isInit = methodName === \"Initialize\" || methodName === \"LMSInitialize\";\n      const isFinish = methodName === \"Terminate\" || methodName === \"LMSFinish\";\n      const isCommit = methodName === \"Commit\" || methodName === \"LMSCommit\";\n      const isErrorString = methodName === \"GetErrorString\" || methodName === \"LMSGetErrorString\";\n      const isDiagnostic = methodName === \"GetDiagnostic\" || methodName === \"LMSGetDiagnostic\";\n\n      return (...args: any[]): string => {\n        // Synchronous cache update for setter calls\n        if (isSet && args.length >= 2) {\n          target._cache.set(args[0], String(args[1]));\n          target._lastError = \"0\";\n        }\n\n        // Fire off async postMessage to refresh cache and error\n        target\n          ._post(methodName, args)\n          .then((res) => {\n            if (isGet && args.length >= 1) {\n              target._cache.set(args[0], String(res));\n              target._lastError = \"0\";\n            }\n            if (isErrorString && args.length >= 1) {\n              const code = String(args[0]);\n              target._cache.set(`error_${code}`, String(res));\n            }\n            if (isDiagnostic && args.length >= 1) {\n              const code = String(args[0]);\n              target._cache.set(`diag_${code}`, String(res));\n            }\n            if (methodName === \"GetLastError\" || methodName === \"LMSGetLastError\") {\n              target._lastError = String(res);\n            }\n          })\n          .catch((err) => target._capture(methodName, err));\n\n        // Return synchronously\n        if (isGet && args.length >= 1) {\n          return target._cache.get(args[0]) ?? \"\";\n        }\n        if (isErrorString && args.length >= 1) {\n          const code = String(args[0]);\n          return target._cache.get(`error_${code}`) ?? \"\";\n        }\n        if (isDiagnostic && args.length >= 1) {\n          const code = String(args[0]);\n          return target._cache.get(`diag_${code}`) ?? \"\";\n        }\n        if (isInit || isFinish || isCommit || isSet) {\n          // Immediately return “true”\n          const result = \"true\";\n          // Then warm cache:\n          target\n            ._post(\"getFlattenedCMI\", [])\n            .then((all: Record<string, string>) => {\n              Object.entries(all).forEach(([key, val]) => {\n                target._cache.set(key, val);\n              });\n              // reset error\n              target._lastError = \"0\";\n            })\n            .catch((err) => target._capture(\"getFlattenedCMI\", err));\n          return result;\n        }\n        if (methodName === \"GetLastError\" || methodName === \"LMSGetLastError\") {\n          return target._lastError;\n        }\n        return \"\";\n      };\n    },\n  };\n\n  constructor(targetOrigin: string = \"*\", targetWindow: Window = window.parent) {\n    this._origin = targetOrigin;\n    this._targetWindow = targetWindow;\n    window.addEventListener(\"message\", this._onMessage.bind(this));\n    return new Proxy(this, this._handler);\n  }\n\n  /** Send a message to the LMS frame and return a promise for its response */\n  private _post(method: string, params: any[]): Promise<any> {\n    const messageId = `cfapi-${Date.now()}-${this._counter++}`;\n\n    // Deep‐clean params of non-cloneables (e.g. functions)\n    const safeParams = params.map((p) => {\n      if (typeof p === \"function\") {\n        console.warn(\"Dropping function param when posting SCORM call:\", method);\n        return undefined;\n      }\n      return p;\n    });\n\n    return new Promise((resolve, reject) => {\n      const timer = setTimeout(() => {\n        if (this._pending.has(messageId)) {\n          this._pending.delete(messageId);\n          reject(new Error(`Timeout calling ${method}`));\n        }\n      }, 5000);\n\n      this._pending.set(messageId, { resolve, reject, timer });\n      const msg: MessageData = { messageId, method, params: safeParams };\n      this._targetWindow.postMessage(msg, this._origin);\n    });\n  }\n\n  /** Handle incoming postMessage responses from the LMS frame */\n  private _onMessage(ev: MessageEvent) {\n    // Validate the message origin and source unless all origins are allowed\n    if (this._origin !== \"*\" && ev.origin !== this._origin) {\n      return;\n    }\n    if (ev.source && ev.source !== this._targetWindow) {\n      return;\n    }\n    const data = ev.data as MessageResponse;\n    if (!data?.messageId) return;\n    const pending = this._pending.get(data.messageId);\n    if (!pending) return;\n    clearTimeout(pending.timer);\n    this._pending.delete(data.messageId);\n    if (data.error) pending.reject(data.error);\n    else pending.resolve(data.result);\n  }\n\n  /** Capture and cache SCORM errors */\n  private _capture(method: string, err: any) {\n    console.error(`CrossFrameAPI ${method} error:`, err);\n    const match = /\\b(\\d{3})\\b/.exec(err.message);\n    const code = match ? match[1] : String(global_errors.GENERAL);\n    this._lastError = code;\n    this._cache.set(`error_${code}`, err.message);\n  }\n}\n"],"names":[],"mappings":"AAIO,MAAM,aAA2B,GAAA;AAAA,EACtC,OAAS,EAAA,GA4BX,CAAA;;ACxBA,MAAqB,aAAc,CAAA;AAAA,EAkGjC,WAAY,CAAA,YAAA,GAAuB,GAAK,EAAA,YAAA,GAAuB,OAAO,MAAQ,EAAA;AAjG9E,IAAQ,IAAA,CAAA,MAAA,uBAAa,GAAoB,EAAA;AACzC,IAAA,IAAA,CAAQ,UAAa,GAAA,GAAA;AACrB,IAAQ,IAAA,CAAA,QAAA,uBAAe,GAOrB,EAAA;AACF,IAAA,IAAA,CAAQ,QAAW,GAAA,CAAA;AAInB,IAAA,IAAA,CAAQ,QAAwC,GAAA;AAAA,MAC9C,GAAK,EAAA,CAAC,MAAQ,EAAA,IAAA,EAAM,QAAa,KAAA;AAE/B,QAAA,IAAI,OAAO,IAAA,KAAS,QAAY,IAAA,IAAA,IAAQ,MAAQ,EAAA;AAC9C,UAAA,MAAM,CAAI,GAAA,OAAA,CAAQ,GAAI,CAAA,MAAA,EAAQ,MAAM,QAAQ,CAAA;AAC5C,UAAA,OAAO,OAAO,CAAM,KAAA,UAAA,GAAa,CAAE,CAAA,IAAA,CAAK,MAAM,CAAI,GAAA,CAAA;AAAA;AAIpD,QAAA,MAAM,UAAa,GAAA,IAAA;AACnB,QAAM,MAAA,KAAA,GAAQ,UAAW,CAAA,QAAA,CAAS,UAAU,CAAA;AAC5C,QAAA,MAAM,QAAQ,UAAW,CAAA,UAAA,CAAW,QAAQ,CAAK,IAAA,UAAA,CAAW,SAAS,UAAU,CAAA;AAC/E,QAAM,MAAA,MAAA,GAAS,UAAe,KAAA,YAAA,IAAgB,UAAe,KAAA,eAAA;AAC7D,QAAM,MAAA,QAAA,GAAW,UAAe,KAAA,WAAA,IAAe,UAAe,KAAA,WAAA;AAC9D,QAAM,MAAA,QAAA,GAAW,UAAe,KAAA,QAAA,IAAY,UAAe,KAAA,WAAA;AAC3D,QAAM,MAAA,aAAA,GAAgB,UAAe,KAAA,gBAAA,IAAoB,UAAe,KAAA,mBAAA;AACxE,QAAM,MAAA,YAAA,GAAe,UAAe,KAAA,eAAA,IAAmB,UAAe,KAAA,kBAAA;AAEtE,QAAA,OAAO,IAAI,IAAwB,KAAA;AAEjC,UAAI,IAAA,KAAA,IAAS,IAAK,CAAA,MAAA,IAAU,CAAG,EAAA;AAC7B,YAAO,MAAA,CAAA,MAAA,CAAO,IAAI,IAAK,CAAA,CAAC,GAAG,MAAO,CAAA,IAAA,CAAK,CAAC,CAAC,CAAC,CAAA;AAC1C,YAAA,MAAA,CAAO,UAAa,GAAA,GAAA;AAAA;AAItB,UAAA,MAAA,CACG,MAAM,UAAY,EAAA,IAAI,CACtB,CAAA,IAAA,CAAK,CAAC,GAAQ,KAAA;AACb,YAAI,IAAA,KAAA,IAAS,IAAK,CAAA,MAAA,IAAU,CAAG,EAAA;AAC7B,cAAA,MAAA,CAAO,OAAO,GAAI,CAAA,IAAA,CAAK,CAAC,CAAG,EAAA,MAAA,CAAO,GAAG,CAAC,CAAA;AACtC,cAAA,MAAA,CAAO,UAAa,GAAA,GAAA;AAAA;AAEtB,YAAI,IAAA,aAAA,IAAiB,IAAK,CAAA,MAAA,IAAU,CAAG,EAAA;AACrC,cAAA,MAAM,IAAO,GAAA,MAAA,CAAO,IAAK,CAAA,CAAC,CAAC,CAAA;AAC3B,cAAA,MAAA,CAAO,OAAO,GAAI,CAAA,CAAA,MAAA,EAAS,IAAI,CAAI,CAAA,EAAA,MAAA,CAAO,GAAG,CAAC,CAAA;AAAA;AAEhD,YAAI,IAAA,YAAA,IAAgB,IAAK,CAAA,MAAA,IAAU,CAAG,EAAA;AACpC,cAAA,MAAM,IAAO,GAAA,MAAA,CAAO,IAAK,CAAA,CAAC,CAAC,CAAA;AAC3B,cAAA,MAAA,CAAO,OAAO,GAAI,CAAA,CAAA,KAAA,EAAQ,IAAI,CAAI,CAAA,EAAA,MAAA,CAAO,GAAG,CAAC,CAAA;AAAA;AAE/C,YAAI,IAAA,UAAA,KAAe,cAAkB,IAAA,UAAA,KAAe,iBAAmB,EAAA;AACrE,cAAO,MAAA,CAAA,UAAA,GAAa,OAAO,GAAG,CAAA;AAAA;AAChC,WACD,EACA,KAAM,CAAA,CAAC,QAAQ,MAAO,CAAA,QAAA,CAAS,UAAY,EAAA,GAAG,CAAC,CAAA;AAGlD,UAAI,IAAA,KAAA,IAAS,IAAK,CAAA,MAAA,IAAU,CAAG,EAAA;AAC7B,YAAA,OAAO,OAAO,MAAO,CAAA,GAAA,CAAI,IAAK,CAAA,CAAC,CAAC,CAAK,IAAA,EAAA;AAAA;AAEvC,UAAI,IAAA,aAAA,IAAiB,IAAK,CAAA,MAAA,IAAU,CAAG,EAAA;AACrC,YAAA,MAAM,IAAO,GAAA,MAAA,CAAO,IAAK,CAAA,CAAC,CAAC,CAAA;AAC3B,YAAA,OAAO,OAAO,MAAO,CAAA,GAAA,CAAI,CAAS,MAAA,EAAA,IAAI,EAAE,CAAK,IAAA,EAAA;AAAA;AAE/C,UAAI,IAAA,YAAA,IAAgB,IAAK,CAAA,MAAA,IAAU,CAAG,EAAA;AACpC,YAAA,MAAM,IAAO,GAAA,MAAA,CAAO,IAAK,CAAA,CAAC,CAAC,CAAA;AAC3B,YAAA,OAAO,OAAO,MAAO,CAAA,GAAA,CAAI,CAAQ,KAAA,EAAA,IAAI,EAAE,CAAK,IAAA,EAAA;AAAA;AAE9C,UAAI,IAAA,MAAA,IAAU,QAAY,IAAA,QAAA,IAAY,KAAO,EAAA;AAE3C,YAAA,MAAM,MAAS,GAAA,MAAA;AAEf,YAAA,MAAA,CACG,MAAM,iBAAmB,EAAA,EAAE,CAC3B,CAAA,IAAA,CAAK,CAAC,GAAgC,KAAA;AACrC,cAAO,MAAA,CAAA,OAAA,CAAQ,GAAG,CAAE,CAAA,OAAA,CAAQ,CAAC,CAAC,GAAA,EAAK,GAAG,CAAM,KAAA;AAC1C,gBAAO,MAAA,CAAA,MAAA,CAAO,GAAI,CAAA,GAAA,EAAK,GAAG,CAAA;AAAA,eAC3B,CAAA;AAED,cAAA,MAAA,CAAO,UAAa,GAAA,GAAA;AAAA,aACrB,EACA,KAAM,CAAA,CAAC,QAAQ,MAAO,CAAA,QAAA,CAAS,iBAAmB,EAAA,GAAG,CAAC,CAAA;AACzD,YAAO,OAAA,MAAA;AAAA;AAET,UAAI,IAAA,UAAA,KAAe,cAAkB,IAAA,UAAA,KAAe,iBAAmB,EAAA;AACrE,YAAA,OAAO,MAAO,CAAA,UAAA;AAAA;AAEhB,UAAO,OAAA,EAAA;AAAA,SACT;AAAA;AACF,KACF;AAGE,IAAA,IAAA,CAAK,OAAU,GAAA,YAAA;AACf,IAAA,IAAA,CAAK,aAAgB,GAAA,YAAA;AACrB,IAAA,MAAA,CAAO,iBAAiB,SAAW,EAAA,IAAA,CAAK,UAAW,CAAA,IAAA,CAAK,IAAI,CAAC,CAAA;AAC7D,IAAA,OAAO,IAAI,KAAA,CAAM,IAAM,EAAA,IAAA,CAAK,QAAQ,CAAA;AAAA;AACtC;AAAA,EAGQ,KAAA,CAAM,QAAgB,MAA6B,EAAA;AACzD,IAAA,MAAM,YAAY,CAAS,MAAA,EAAA,IAAA,CAAK,KAAK,CAAA,CAAA,EAAI,KAAK,QAAU,EAAA,CAAA,CAAA;AAGxD,IAAA,MAAM,UAAa,GAAA,MAAA,CAAO,GAAI,CAAA,CAAC,CAAM,KAAA;AACnC,MAAI,IAAA,OAAO,MAAM,UAAY,EAAA;AAC3B,QAAQ,OAAA,CAAA,IAAA,CAAK,oDAAoD,MAAM,CAAA;AACvE,QAAO,OAAA,MAAA;AAAA;AAET,MAAO,OAAA,CAAA;AAAA,KACR,CAAA;AAED,IAAA,OAAO,IAAI,OAAA,CAAQ,CAAC,OAAA,EAAS,MAAW,KAAA;AACtC,MAAM,MAAA,KAAA,GAAQ,WAAW,MAAM;AAC7B,QAAA,IAAI,IAAK,CAAA,QAAA,CAAS,GAAI,CAAA,SAAS,CAAG,EAAA;AAChC,UAAK,IAAA,CAAA,QAAA,CAAS,OAAO,SAAS,CAAA;AAC9B,UAAA,MAAA,CAAO,IAAI,KAAA,CAAM,CAAmB,gBAAA,EAAA,MAAM,EAAE,CAAC,CAAA;AAAA;AAC/C,SACC,GAAI,CAAA;AAEP,MAAA,IAAA,CAAK,SAAS,GAAI,CAAA,SAAA,EAAW,EAAE,OAAS,EAAA,MAAA,EAAQ,OAAO,CAAA;AACvD,MAAA,MAAM,GAAmB,GAAA,EAAE,SAAW,EAAA,MAAA,EAAQ,QAAQ,UAAW,EAAA;AACjE,MAAA,IAAA,CAAK,aAAc,CAAA,WAAA,CAAY,GAAK,EAAA,IAAA,CAAK,OAAO,CAAA;AAAA,KACjD,CAAA;AAAA;AACH;AAAA,EAGQ,WAAW,EAAkB,EAAA;AAEnC,IAAA,IAAI,KAAK,OAAY,KAAA,GAAA,IAAO,EAAG,CAAA,MAAA,KAAW,KAAK,OAAS,EAAA;AACtD,MAAA;AAAA;AAEF,IAAA,IAAI,EAAG,CAAA,MAAA,IAAU,EAAG,CAAA,MAAA,KAAW,KAAK,aAAe,EAAA;AACjD,MAAA;AAAA;AAEF,IAAA,MAAM,OAAO,EAAG,CAAA,IAAA;AAChB,IAAI,IAAA,CAAC,MAAM,SAAW,EAAA;AACtB,IAAA,MAAM,OAAU,GAAA,IAAA,CAAK,QAAS,CAAA,GAAA,CAAI,KAAK,SAAS,CAAA;AAChD,IAAA,IAAI,CAAC,OAAS,EAAA;AACd,IAAA,YAAA,CAAa,QAAQ,KAAK,CAAA;AAC1B,IAAK,IAAA,CAAA,QAAA,CAAS,MAAO,CAAA,IAAA,CAAK,SAAS,CAAA;AACnC,IAAA,IAAI,IAAK,CAAA,KAAA,EAAe,OAAA,CAAA,MAAA,CAAO,KAAK,KAAK,CAAA;AAAA,SACpC,OAAA,CAAQ,OAAQ,CAAA,IAAA,CAAK,MAAM,CAAA;AAAA;AAClC;AAAA,EAGQ,QAAA,CAAS,QAAgB,GAAU,EAAA;AACzC,IAAA,OAAA,CAAQ,KAAM,CAAA,CAAA,cAAA,EAAiB,MAAM,CAAA,OAAA,CAAA,EAAW,GAAG,CAAA;AACnD,IAAA,MAAM,KAAQ,GAAA,aAAA,CAAc,IAAK,CAAA,GAAA,CAAI,OAAO,CAAA;AAC5C,IAAA,MAAM,OAAO,KAAQ,GAAA,KAAA,CAAM,CAAC,CAAI,GAAA,MAAA,CAAO,cAAc,OAAO,CAAA;AAC5D,IAAA,IAAA,CAAK,UAAa,GAAA,IAAA;AAClB,IAAA,IAAA,CAAK,OAAO,GAAI,CAAA,CAAA,MAAA,EAAS,IAAI,CAAA,CAAA,EAAI,IAAI,OAAO,CAAA;AAAA;AAEhD;;;;"}