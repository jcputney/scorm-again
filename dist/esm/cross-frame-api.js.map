{"version":3,"file":"cross-frame-api.js","sources":["../../src/constants/error_codes.ts","../../src/CrossFrameAPI.ts"],"sourcesContent":["export type ErrorCode = {\n  [key: string]: number;\n};\n\nexport const global_errors: ErrorCode = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nexport const scorm12_errors: ErrorCode = {\n  ...global_errors,\n  RETRIEVE_BEFORE_INIT: 301,\n  STORE_BEFORE_INIT: 301,\n  COMMIT_BEFORE_INIT: 301,\n  ARGUMENT_ERROR: 201,\n  CHILDREN_ERROR: 202,\n  COUNT_ERROR: 203,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 401,\n  VALUE_NOT_INITIALIZED: 301,\n  INVALID_SET_VALUE: 402,\n  READ_ONLY_ELEMENT: 403,\n  WRITE_ONLY_ELEMENT: 404,\n  TYPE_MISMATCH: 405,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n\nexport const scorm2004_errors: ErrorCode = {\n  ...global_errors,\n  INITIALIZATION_FAILED: 102,\n  INITIALIZED: 103,\n  TERMINATED: 104,\n  TERMINATION_FAILURE: 111,\n  TERMINATION_BEFORE_INIT: 112,\n  MULTIPLE_TERMINATION: 113,\n  MULTIPLE_TERMINATIONS: 113,\n  RETRIEVE_BEFORE_INIT: 122,\n  RETRIEVE_AFTER_TERM: 123,\n  STORE_BEFORE_INIT: 132,\n  STORE_AFTER_TERM: 133,\n  COMMIT_BEFORE_INIT: 142,\n  COMMIT_AFTER_TERM: 143,\n  ARGUMENT_ERROR: 201,\n  GENERAL_GET_FAILURE: 301,\n  GENERAL_SET_FAILURE: 351,\n  GENERAL_COMMIT_FAILURE: 391,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 402,\n  VALUE_NOT_INITIALIZED: 403,\n  READ_ONLY_ELEMENT: 404,\n  WRITE_ONLY_ELEMENT: 405,\n  TYPE_MISMATCH: 406,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n","// src/CrossFrameAPI.ts\nimport { MessageData, MessageResponse } from \"./types/CrossFrame\";\nimport { global_errors } from \"./constants/error_codes\";\n\n/**\n * Client-side SCORM façade running in your content frame.\n * Returns cached/default values synchronously, then fires off an async\n * postMessage to the LMS frame to refresh cache and error state.\n */\nexport default class CrossFrameAPI {\n  private _cache = new Map<string, string>();\n  private _lastError = \"0\";\n  private _pending = new Map<\n    string,\n    {\n      resolve: (v: any) => void;\n      reject: (e: any) => void;\n      timer: ReturnType<typeof setTimeout>;\n    }\n  >();\n  private _counter = 0;\n  private readonly _origin: string;\n  private readonly _targetWindow: Window;\n\n  private _handler: ProxyHandler<CrossFrameAPI> = {\n    get: (target, prop, receiver) => {\n      // If it's an existing property/method, return it\n      if (typeof prop !== \"string\" || prop in target) {\n        const v = Reflect.get(target, prop, receiver);\n        return typeof v === \"function\" ? v.bind(target) : v;\n      }\n\n      // Otherwise treat prop as a SCORM call\n      const methodName = prop;\n      const isGet = methodName.endsWith(\"GetValue\");\n      const isSet = methodName.startsWith(\"LMSSet\") || methodName.endsWith(\"SetValue\");\n      const isInit = methodName === \"Initialize\" || methodName === \"LMSInitialize\";\n      const isFinish = methodName === \"Terminate\" || methodName === \"LMSFinish\";\n      const isCommit = methodName === \"Commit\" || methodName === \"LMSCommit\";\n      const isErrorString = methodName === \"GetErrorString\" || methodName === \"LMSGetErrorString\";\n      const isDiagnostic = methodName === \"GetDiagnostic\" || methodName === \"LMSGetDiagnostic\";\n\n      return (...args: any[]): string => {\n        // Synchronous cache update for setter calls\n        if (isSet && args.length >= 2) {\n          target._cache.set(args[0], String(args[1]));\n          target._lastError = \"0\";\n        }\n\n        // Fire off async postMessage to refresh cache and error\n        target\n          ._post(methodName, args)\n          .then((res) => {\n            if (isGet && args.length >= 1) {\n              target._cache.set(args[0], String(res));\n              target._lastError = \"0\";\n            }\n            if (isErrorString && args.length >= 1) {\n              const code = String(args[0]);\n              target._cache.set(`error_${code}`, String(res));\n            }\n            if (isDiagnostic && args.length >= 1) {\n              const code = String(args[0]);\n              target._cache.set(`diag_${code}`, String(res));\n            }\n            if (methodName === \"GetLastError\" || methodName === \"LMSGetLastError\") {\n              target._lastError = String(res);\n            }\n          })\n          .catch((err) => target._capture(methodName, err));\n\n        // Return synchronously\n        if (isGet && args.length >= 1) {\n          return target._cache.get(args[0]) ?? \"\";\n        }\n        if (isErrorString && args.length >= 1) {\n          const code = String(args[0]);\n          return target._cache.get(`error_${code}`) ?? \"\";\n        }\n        if (isDiagnostic && args.length >= 1) {\n          const code = String(args[0]);\n          return target._cache.get(`diag_${code}`) ?? \"\";\n        }\n        if (isInit || isFinish || isCommit || isSet) {\n          // Immediately return “true”\n          const result = \"true\";\n          // Then warm cache:\n          target\n            ._post(\"getFlattenedCMI\", [])\n            .then((all: Record<string, string>) => {\n              Object.entries(all).forEach(([key, val]) => {\n                target._cache.set(key, val);\n              });\n              // reset error\n              target._lastError = \"0\";\n            })\n            .catch((err) => target._capture(\"getFlattenedCMI\", err));\n          return result;\n        }\n        if (methodName === \"GetLastError\" || methodName === \"LMSGetLastError\") {\n          return target._lastError;\n        }\n        return \"\";\n      };\n    },\n  };\n\n  constructor(targetOrigin: string = \"*\", targetWindow: Window = window.parent) {\n    this._origin = targetOrigin;\n    this._targetWindow = targetWindow;\n    window.addEventListener(\"message\", this._onMessage.bind(this));\n    return new Proxy(this, this._handler);\n  }\n\n  /** Send a message to the LMS frame and return a promise for its response */\n  private _post(method: string, params: any[]): Promise<any> {\n    const messageId = `cfapi-${Date.now()}-${this._counter++}`;\n\n    // Deep‐clean params of non-cloneables (e.g. functions)\n    const safeParams = params.map((p) => {\n      if (typeof p === \"function\") {\n        console.warn(\"Dropping function param when posting SCORM call:\", method);\n        return undefined;\n      }\n      return p;\n    });\n\n    return new Promise((resolve, reject) => {\n      const timer = setTimeout(() => {\n        if (this._pending.has(messageId)) {\n          this._pending.delete(messageId);\n          reject(new Error(`Timeout calling ${method}`));\n        }\n      }, 5000);\n\n      this._pending.set(messageId, { resolve, reject, timer });\n      const msg: MessageData = { messageId, method, params: safeParams };\n      this._targetWindow.postMessage(msg, this._origin);\n    });\n  }\n\n  /** Handle incoming postMessage responses from the LMS frame */\n  private _onMessage(ev: MessageEvent) {\n    // Validate the message origin and source unless all origins are allowed\n    if (this._origin !== \"*\" && ev.origin !== this._origin) {\n      return;\n    }\n    if (ev.source && ev.source !== this._targetWindow) {\n      return;\n    }\n    const data = ev.data as MessageResponse;\n    if (!data?.messageId) return;\n    const pending = this._pending.get(data.messageId);\n    if (!pending) return;\n    clearTimeout(pending.timer);\n    this._pending.delete(data.messageId);\n    if (data.error) pending.reject(data.error);\n    else pending.resolve(data.result);\n  }\n\n  /** Capture and cache SCORM errors */\n  private _capture(method: string, err: any) {\n    console.error(`CrossFrameAPI ${method} error:`, err);\n    const match = /\\b(\\d{3})\\b/.exec(err.message);\n    const code = match ? match[1] : String(global_errors.GENERAL);\n    this._lastError = code as string;\n    this._cache.set(`error_${code}`, err.message);\n  }\n}\n"],"names":[],"mappings":"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"}