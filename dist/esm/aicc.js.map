{"version":3,"file":"aicc.js","sources":["../../src/constants/api_constants.ts","../../src/constants/error_codes.ts","../../src/constants/regex.ts","../../src/exceptions.ts","../../src/exceptions/scorm12_exceptions.ts","../../src/cmi/common/base_cmi.ts","../../src/utilities.ts","../../src/cmi/common/validation.ts","../../src/cmi/scorm12/validation.ts","../../src/services/ValidationService.ts","../../src/cmi/common/score.ts","../../src/cmi/aicc/core.ts","../../src/cmi/common/array.ts","../../src/cmi/scorm12/objectives.ts","../../src/cmi/scorm12/student_data.ts","../../src/cmi/scorm12/student_preference.ts","../../src/cmi/scorm12/interactions.ts","../../src/cmi/scorm12/cmi.ts","../../src/cmi/scorm12/nav.ts","../../src/constants/enums.ts","../../src/constants/default_settings.ts","../../src/helpers/scheduled_commit.ts","../../src/services/HttpService.ts","../../src/services/EventService.ts","../../src/services/SerializationService.ts","../../src/services/LoggingService.ts","../../src/services/ErrorHandlingService.ts","../../src/BaseAPI.ts","../../src/Scorm12API.ts","../../src/exceptions/aicc_exceptions.ts","../../src/cmi/aicc/validation.ts","../../src/cmi/aicc/evaluation.ts","../../src/cmi/aicc/student_preferences.ts","../../src/cmi/aicc/student_demographics.ts","../../src/cmi/aicc/tries.ts","../../src/cmi/aicc/attempts.ts","../../src/cmi/aicc/student_data.ts","../../src/cmi/aicc/paths.ts","../../src/cmi/aicc/cmi.ts","../../src/AICC.ts"],"sourcesContent":["interface ErrorDescription {\n  basicMessage: string;\n  detailMessage: string;\n}\n\ninterface ErrorDescriptions {\n  [key: string]: ErrorDescription;\n}\n\ninterface ScormConstants {\n  cmi_children: string;\n  core_children: string;\n  score_children: string;\n  comments_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface AiccConstants extends ScormConstants {\n  student_demographics_children: string;\n  tries_children: string;\n  attempt_records_children: string;\n  paths_children: string;\n}\n\ninterface Scorm2004Constants {\n  cmi_children: string;\n  comments_children: string;\n  score_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  adl_data_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface GlobalConstants {\n  SCORM_TRUE: string;\n  SCORM_FALSE: string;\n  STATE_NOT_INITIALIZED: number;\n  STATE_INITIALIZED: number;\n  STATE_TERMINATED: number;\n}\n\nexport const global_constants: GlobalConstants = {\n  SCORM_TRUE: \"true\",\n  SCORM_FALSE: \"false\",\n  STATE_NOT_INITIALIZED: 0,\n  STATE_INITIALIZED: 1,\n  STATE_TERMINATED: 2,\n};\n\nexport const scorm12_constants: ScormConstants = {\n  // Children lists\n  cmi_children:\n    \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions\",\n  core_children:\n    \"student_id,student_name,lesson_location,credit,lesson_status,entry,score,total_time,lesson_mode,exit,session_time\",\n  score_children: \"raw,min,max\",\n  comments_children: \"content,location,time\",\n  objectives_children: \"id,score,status\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio,language,speed,text\",\n  interactions_children:\n    \"id,objectives,time,type,correct_responses,weighting,student_response,result,latency\",\n  error_descriptions: {\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage:\n        \"No specific error code exists to describe the error. Use LMSGetDiagnostic for more information\",\n    },\n    \"201\": {\n      basicMessage: \"Invalid argument error\",\n      detailMessage:\n        \"Indicates that an argument represents an invalid data model element or is otherwise incorrect.\",\n    },\n    \"202\": {\n      basicMessage: \"Element cannot have children\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_children\" for a data model element that does not support the \"_children\" suffix.',\n    },\n    \"203\": {\n      basicMessage: \"Element not an array - cannot have count\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_count\" for a data model element that does not support the \"_count\" suffix.',\n    },\n    \"301\": {\n      basicMessage: \"Not initialized\",\n      detailMessage: \"Indicates that an API call was made before the call to lmsInitialize.\",\n    },\n    \"401\": {\n      basicMessage: \"Not implemented error\",\n      detailMessage:\n        \"The data model element indicated in a call to LMSGetValue or LMSSetValue is valid, but was not implemented by this LMS. SCORM 1.2 defines a set of data model elements as being optional for an LMS to implement.\",\n    },\n    \"402\": {\n      basicMessage: \"Invalid set value, element is a keyword\",\n      detailMessage:\n        'Indicates that LMSSetValue was called on a data model element that represents a keyword (elements that end in \"_children\" and \"_count\").',\n    },\n    \"403\": {\n      basicMessage: \"Element is read only\",\n      detailMessage: \"LMSSetValue was called with a data model element that can only be read.\",\n    },\n    \"404\": {\n      basicMessage: \"Element is write only\",\n      detailMessage: \"LMSGetValue was called on a data model element that can only be written to.\",\n    },\n    \"405\": {\n      basicMessage: \"Incorrect Data Type\",\n      detailMessage:\n        \"LMSSetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a LMSSetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\nexport const aicc_constants: AiccConstants = {\n  ...scorm12_constants,\n  ...{\n    cmi_children:\n      \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions,evaluation\",\n    student_preference_children:\n      \"audio,language,lesson_type,speed,text,text_color,text_location,text_size,video,windows\",\n    student_data_children: \"attempt_number,tries,mastery_score,max_time_allowed,time_limit_action\",\n    student_demographics_children:\n      \"city,class,company,country,experience,familiar_name,instructor_name,title,native_language,state,street_address,telephone,years_experience\",\n    tries_children: \"time,status,score\",\n    attempt_records_children: \"score,lesson_status\",\n    paths_children: \"location_id,date,time,status,why_left,time_in_element\",\n  },\n};\n\nexport const scorm2004_constants: Scorm2004Constants = {\n  // Children lists\n  cmi_children:\n    \"_version,comments_from_learner,comments_from_lms,completion_status,credit,entry,exit,interactions,launch_data,learner_id,learner_name,learner_preference,location,max_time_allowed,mode,objectives,progress_measure,scaled_passing_score,score,session_time,success_status,suspend_data,time_limit_action,total_time\",\n  comments_children: \"comment,timestamp,location\",\n  score_children: \"max,raw,scaled,min\",\n  objectives_children: \"progress_measure,completion_status,success_status,description,score,id\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio_level,audio_captioning,delivery_speed,language\",\n  interactions_children:\n    \"id,type,objectives,timestamp,correct_responses,weighting,learner_response,result,latency,description\",\n  adl_data_children: \"id,store\",\n  error_descriptions: {\n    \"0\": {\n      basicMessage: \"No Error\",\n      detailMessage: \"No error occurred, the previous API call was successful.\",\n    },\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage:\n        \"No specific error code exists to describe the error. Use GetDiagnostic for more information.\",\n    },\n    \"102\": {\n      basicMessage: \"General Initialization Failure\",\n      detailMessage: \"Call to Initialize failed for an unknown reason.\",\n    },\n    \"103\": {\n      basicMessage: \"Already Initialized\",\n      detailMessage: \"Call to Initialize failed because Initialize was already called.\",\n    },\n    \"104\": {\n      basicMessage: \"Content Instance Terminated\",\n      detailMessage: \"Call to Initialize failed because Terminate was already called.\",\n    },\n    \"111\": {\n      basicMessage: \"General Termination Failure\",\n      detailMessage: \"Call to Terminate failed for an unknown reason.\",\n    },\n    \"112\": {\n      basicMessage: \"Termination Before Initialization\",\n      detailMessage: \"Call to Terminate failed because it was made before the call to Initialize.\",\n    },\n    \"113\": {\n      basicMessage: \"Termination After Termination\",\n      detailMessage: \"Call to Terminate failed because Terminate was already called.\",\n    },\n    \"122\": {\n      basicMessage: \"Retrieve Data Before Initialization\",\n      detailMessage: \"Call to GetValue failed because it was made before the call to Initialize.\",\n    },\n    \"123\": {\n      basicMessage: \"Retrieve Data After Termination\",\n      detailMessage: \"Call to GetValue failed because it was made after the call to Terminate.\",\n    },\n    \"132\": {\n      basicMessage: \"Store Data Before Initialization\",\n      detailMessage: \"Call to SetValue failed because it was made before the call to Initialize.\",\n    },\n    \"133\": {\n      basicMessage: \"Store Data After Termination\",\n      detailMessage: \"Call to SetValue failed because it was made after the call to Terminate.\",\n    },\n    \"142\": {\n      basicMessage: \"Commit Before Initialization\",\n      detailMessage: \"Call to Commit failed because it was made before the call to Initialize.\",\n    },\n    \"143\": {\n      basicMessage: \"Commit After Termination\",\n      detailMessage: \"Call to Commit failed because it was made after the call to Terminate.\",\n    },\n    \"201\": {\n      basicMessage: \"General Argument Error\",\n      detailMessage:\n        \"An invalid argument was passed to an API method (usually indicates that Initialize, Commit or Terminate did not receive the expected empty string argument.\",\n    },\n    \"301\": {\n      basicMessage: \"General Get Failure\",\n      detailMessage:\n        \"Indicates a failed GetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"351\": {\n      basicMessage: \"General Set Failure\",\n      detailMessage:\n        \"Indicates a failed SetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"391\": {\n      basicMessage: \"General Commit Failure\",\n      detailMessage:\n        \"Indicates a failed Commit call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"401\": {\n      basicMessage: \"Undefined Data Model Element\",\n      detailMessage:\n        \"The data model element name passed to GetValue or SetValue is not a valid SCORM data model element.\",\n    },\n    \"402\": {\n      basicMessage: \"Unimplemented Data Model Element\",\n      detailMessage:\n        \"The data model element indicated in a call to GetValue or SetValue is valid, but was not implemented by this LMS. In SCORM 2004, this error would indicate an LMS that is not fully SCORM conformant.\",\n    },\n    \"403\": {\n      basicMessage: \"Data Model Element Value Not Initialized\",\n      detailMessage:\n        \"Attempt to read a data model element that has not been initialized by the LMS or through a SetValue call. This error condition is often reached during normal execution of a SCO.\",\n    },\n    \"404\": {\n      basicMessage: \"Data Model Element Is Read Only\",\n      detailMessage: \"SetValue was called with a data model element that can only be read.\",\n    },\n    \"405\": {\n      basicMessage: \"Data Model Element Is Write Only\",\n      detailMessage: \"GetValue was called on a data model element that can only be written to.\",\n    },\n    \"406\": {\n      basicMessage: \"Data Model Element Type Mismatch\",\n      detailMessage:\n        \"SetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Data Model Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a SetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\n","export type ErrorCode = {\n  [key: string]: number;\n};\n\nexport const global_errors: ErrorCode = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nexport const scorm12_errors: ErrorCode = {\n  ...global_errors,\n  RETRIEVE_BEFORE_INIT: 301,\n  STORE_BEFORE_INIT: 301,\n  COMMIT_BEFORE_INIT: 301,\n  ARGUMENT_ERROR: 201,\n  CHILDREN_ERROR: 202,\n  COUNT_ERROR: 203,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 401,\n  VALUE_NOT_INITIALIZED: 301,\n  INVALID_SET_VALUE: 402,\n  READ_ONLY_ELEMENT: 403,\n  WRITE_ONLY_ELEMENT: 404,\n  TYPE_MISMATCH: 405,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n\nexport const scorm2004_errors: ErrorCode = {\n  ...global_errors,\n  INITIALIZATION_FAILED: 102,\n  INITIALIZED: 103,\n  TERMINATED: 104,\n  TERMINATION_FAILURE: 111,\n  TERMINATION_BEFORE_INIT: 112,\n  MULTIPLE_TERMINATIONS: 113,\n  RETRIEVE_BEFORE_INIT: 122,\n  RETRIEVE_AFTER_TERM: 123,\n  STORE_BEFORE_INIT: 132,\n  STORE_AFTER_TERM: 133,\n  COMMIT_BEFORE_INIT: 142,\n  COMMIT_AFTER_TERM: 143,\n  ARGUMENT_ERROR: 201,\n  GENERAL_GET_FAILURE: 301,\n  GENERAL_SET_FAILURE: 351,\n  GENERAL_COMMIT_FAILURE: 391,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 402,\n  VALUE_NOT_INITIALIZED: 403,\n  READ_ONLY_ELEMENT: 404,\n  WRITE_ONLY_ELEMENT: 405,\n  TYPE_MISMATCH: 406,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n","export const scorm12_regex = {\n  CMIString256: \"^.{0,255}$\",\n  CMIString4096: \"^.{0,4096}$\",\n  CMITime: \"^(?:[01]\\\\d|2[0123]):(?:[012345]\\\\d):(?:[012345]\\\\d)$\",\n  CMITimespan: \"^([0-9]{2,}):([0-9]{2}):([0-9]{2})(.[0-9]{1,2})?$\",\n\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{0,3})(.[0-9]*)?$\",\n\n  CMIIdentifier: \"^[\\\\u0021-\\\\u007E\\\\s]{0,255}$\",\n  CMIFeedback: \"^.{0,255}$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMIStatus: \"^(passed|completed|failed|incomplete|browsed)$\",\n  CMIStatus2: \"^(passed|completed|failed|incomplete|browsed|not attempted)$\",\n  CMIExit: \"^(time-out|suspend|logout|)$\",\n  CMIType: \"^(true-false|choice|fill-in|matching|performance|sequencing|likert|numeric)$\",\n  CMIResult: \"^(correct|wrong|unanticipated|neutral|([0-9]{0,3})?(\\\\.[0-9]*)?)$\",\n  NAVEvent: \"^(previous|continue)$\",\n  // Data ranges\n  score_range: \"0#100\",\n  audio_range: \"-1#100\",\n  speed_range: \"-100#100\",\n  weighting_range: \"-100#100\",\n  text_range: \"-1#1\",\n};\nexport const aicc_regex = {\n  ...scorm12_regex,\n  ...{\n    CMIIdentifier: \"^\\\\w{1,255}$\",\n  },\n};\nexport const scorm2004_regex = {\n  CMIString200: \"^[\\\\u0000-\\\\uFFFF]{0,200}$\",\n  CMIString250: \"^[\\\\u0000-\\\\uFFFF]{0,250}$\",\n  CMIString1000: \"^[\\\\u0000-\\\\uFFFF]{0,1000}$\",\n  CMIString4000: \"^[\\\\u0000-\\\\uFFFF]{0,4000}$\",\n  CMIString64000: \"^[\\\\u0000-\\\\uFFFF]{0,64000}$\",\n  CMILang: \"^([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?$|^$\",\n\n  CMILangString250: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,250}$)?$\",\n\n  CMILangcr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?}))(.*?)$\",\n\n  CMILangString250cr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?})?(.{0,250})?)?$\",\n\n  CMILangString4000: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,4000}$)?$\",\n\n  CMITime:\n    \"^(19[7-9]{1}[0-9]{1}|20[0-2]{1}[0-9]{1}|203[0-8]{1})((-(0[1-9]{1}|1[0-2]{1}))((-(0[1-9]{1}|[1-2]{1}[0-9]{1}|3[0-1]{1}))(T([0-1]{1}[0-9]{1}|2[0-3]{1})((:[0-5]{1}[0-9]{1})((:[0-5]{1}[0-9]{1})((\\\\.[0-9]{1,6})((Z|([+|-]([0-1]{1}[0-9]{1}|2[0-3]{1})))(:[0-5]{1}[0-9]{1})?)?)?)?)?)?)?)?$\",\n  CMITimespan:\n    \"^P(?:([.,\\\\d]+)Y)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)W)?(?:([.,\\\\d]+)D)?(?:T?(?:([.,\\\\d]+)H)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)S)?)?$\",\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{1,5})(\\\\.[0-9]{1,18})?$\",\n  CMIIdentifier: \"^\\\\S{1,250}[a-zA-Z0-9]$\",\n  CMIShortIdentifier: \"^[\\\\w\\\\.\\\\-\\\\_]{1,250}$\",\n  CMILongIdentifier: \"^(?:(?!urn:)\\\\S{1,4000}|urn:[A-Za-z0-9-]{1,31}:\\\\S{1,4000}|.{1,4000})$\",\n  // need to re-examine this\n  CMIFeedback: \"^.*$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  CMIIndexStore: \".N(\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMICStatus: \"^(completed|incomplete|not attempted|unknown)$\",\n  CMISStatus: \"^(passed|failed|unknown)$\",\n  CMIExit: \"^(time-out|suspend|logout|normal)$\",\n  CMIType:\n    \"^(true-false|choice|fill-in|long-fill-in|matching|performance|sequencing|likert|numeric|other)$\",\n  CMIResult: \"^(correct|incorrect|unanticipated|neutral|-?([0-9]{1,4})(\\\\.[0-9]{1,18})?)$\",\n  NAVEvent:\n    \"^(previous|continue|exit|exitAll|abandon|abandonAll|suspendAll|_none_|(\\\\{target=(?<choice_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?choice|(\\\\{target=(?<jump_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?jump)$\",\n\n  NAVBoolean: \"^(unknown|true|false$)\",\n  NAVTarget: \"^{target=\\\\S{0,}[a-zA-Z0-9-_]+}$\",\n  // Data ranges\n  scaled_range: \"-1#1\",\n  audio_range: \"0#999.9999999\",\n  speed_range: \"0#999.9999999\",\n  text_range: \"-1#1\",\n  progress_range: \"0#1\",\n};\n","type APIError = {\n  errorCode: number;\n  errorMessage: string;\n  detailedMessage: string;\n};\n\nexport class BaseScormValidationError extends Error {\n  constructor(CMIElement: string, errorCode: number) {\n    super(`${CMIElement} : ${errorCode.toString()}`);\n    this._errorCode = errorCode;\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, BaseScormValidationError.prototype);\n  }\n\n  private readonly _errorCode: number;\n\n  /**\n   * Getter for _errorCode\n   * @return {number}\n   */\n  get errorCode(): number {\n    return this._errorCode;\n  }\n}\n\n/**\n * Base Validation Exception\n */\nexport class ValidationError extends BaseScormValidationError implements APIError {\n  /**\n   * Constructor to take in an error message and code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   * @param {string} errorMessage\n   * @param {string} detailedMessage\n   */\n  constructor(\n    CMIElement: string,\n    errorCode: number,\n    errorMessage: string,\n    detailedMessage?: string,\n  ) {\n    super(CMIElement, errorCode);\n    this.message = `${CMIElement} : ${errorMessage}`;\n    this._errorMessage = errorMessage;\n    if (detailedMessage) {\n      this._detailedMessage = detailedMessage;\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  private readonly _errorMessage: string;\n  private readonly _detailedMessage: string = \"\";\n\n  /**\n   * Getter for _errorMessage\n   * @return {string}\n   */\n  get errorMessage(): string {\n    return this._errorMessage;\n  }\n\n  /**\n   * Getter for _detailedMessage\n   * @return {string}\n   */\n  get detailedMessage(): string {\n    return this._detailedMessage;\n  }\n}\n","import { ValidationError } from \"../exceptions\";\nimport { scorm12_constants } from \"../constants/api_constants\";\n\nconst scorm12_errors = scorm12_constants.error_descriptions;\n\n/**\n * SCORM 1.2 Validation Error\n */\nexport class Scorm12ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm12_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm12_errors[String(errorCode)].basicMessage,\n        scorm12_errors[String(errorCode)].detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm12_errors[\"101\"].basicMessage,\n        scorm12_errors[\"101\"].detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm12ValidationError.prototype);\n  }\n}\n","/**\n * Base class for API cmi objects\n */\nexport abstract class BaseCMI {\n  jsonString? = false;\n  protected readonly _cmi_element: string;\n  protected _initialized = false;\n  private _start_time: number | undefined;\n\n  /**\n   * Constructor for BaseCMI\n   * @param {string} cmi_element\n   */\n  constructor(cmi_element: string) {\n    this._cmi_element = cmi_element;\n  }\n\n  /**\n   * Getter for _initialized\n   * @return {boolean}\n   */\n  get initialized(): boolean {\n    return this._initialized;\n  }\n\n  /**\n   * Getter for _start_time\n   * @return {number | undefined}\n   */\n  get start_time(): number | undefined {\n    return this._start_time;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize(): void {\n    this._initialized = true;\n  }\n\n  /**\n   * Called when the player should override the 'session_time' provided by\n   * the module\n   */\n  setStartTime(): void {\n    this._start_time = new Date().getTime();\n  }\n\n  abstract reset(): void;\n}\n\n/**\n * Base class for cmi root objects\n */\nexport abstract class BaseRootCMI extends BaseCMI {\n  abstract getCurrentTotalTime(): string;\n}\n","/**\n * Constants for time conversion calculations.\n * These are used throughout the codebase for converting between different time formats.\n */\nexport const SECONDS_PER_SECOND = 1.0;\nexport const SECONDS_PER_MINUTE = 60;\nexport const SECONDS_PER_HOUR = 60 * SECONDS_PER_MINUTE;\nexport const SECONDS_PER_DAY = 24 * SECONDS_PER_HOUR;\n\ntype Designation = {\n  [key: string]: number;\n};\n\n/**\n * A record with string keys and unknown values.\n * This is a more type-safe alternative to using `any`.\n */\nexport type StringKeyMap = Record<string, unknown>;\n\nconst designations: Designation = {\n  D: SECONDS_PER_DAY,\n  H: SECONDS_PER_HOUR,\n  M: SECONDS_PER_MINUTE,\n  S: SECONDS_PER_SECOND,\n};\n\n/**\n * Converts a number of seconds to a formatted time string in HH:MM:SS format.\n * This function handles decimal seconds and ensures proper formatting with leading zeros.\n *\n * @param {number|null} totalSeconds - The total number of seconds to convert. If null or negative, returns \"00:00:00\".\n * @return {string} A formatted time string in HH:MM:SS format, with up to 2 decimal places for seconds if applicable.\n *\n * @example\n * // Returns \"01:30:45\"\n * getSecondsAsHHMMSS(5445);\n *\n * @example\n * // Returns \"00:00:30.5\"\n * getSecondsAsHHMMSS(30.5);\n *\n * @example\n * // Returns \"00:00:00\"\n * getSecondsAsHHMMSS(null);\n */\nexport const getSecondsAsHHMMSS = memoize((totalSeconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!totalSeconds || totalSeconds <= 0) {\n    return \"00:00:00\";\n  }\n\n  const hours = Math.floor(totalSeconds / SECONDS_PER_HOUR);\n  const dateObj = new Date(totalSeconds * 1000);\n  const minutes = dateObj.getUTCMinutes();\n  // make sure we add any possible decimal value\n  const seconds = dateObj.getSeconds();\n  const ms = totalSeconds % 1.0;\n  let msStr = \"\";\n\n  if (countDecimals(ms) > 0) {\n    if (countDecimals(ms) > 2) {\n      msStr = ms.toFixed(2);\n    } else {\n      msStr = String(ms);\n    }\n\n    msStr = \".\" + msStr.split(\".\")[1];\n  }\n\n  return (hours + \":\" + minutes + \":\" + seconds).replace(/\\b\\d\\b/g, \"0$&\") + msStr;\n});\n\n/**\n * Converts a number of seconds to an ISO 8601 duration string (e.g., \"PT1H30M45S\").\n * This function handles the complexity of formatting according to the ISO 8601 standard,\n * including the proper placement of the \"T\" separator for time components.\n *\n * @param {number|null} seconds - The number of seconds to convert. If null or negative, returns \"PT0S\".\n * @return {string} An ISO 8601 formatted duration string.\n *\n * @example\n * // Returns \"PT1H30M45S\" (1 hour, 30 minutes, 45 seconds)\n * getSecondsAsISODuration(5445);\n *\n * @example\n * // Returns \"PT30.5S\" (30.5 seconds)\n * getSecondsAsISODuration(30.5);\n *\n * @example\n * // Returns \"P1DT1H\" (1 day, 1 hour)\n * getSecondsAsISODuration(90000);\n *\n * @example\n * // Returns \"PT0S\" (0 seconds)\n * getSecondsAsISODuration(null);\n */\nexport const getSecondsAsISODuration = memoize((seconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!seconds || seconds <= 0) {\n    return \"PT0S\";\n  }\n\n  let duration = \"P\";\n  let remainder = seconds;\n\n  // Convert to array of entries and use functional methods\n  const designationEntries = Object.entries(designations);\n\n  // Process each time designation\n  designationEntries.forEach(([designationsKey, current_seconds]) => {\n    let value = Math.floor(remainder / current_seconds);\n    remainder = remainder % current_seconds;\n\n    // Limit decimal places\n    if (countDecimals(remainder) > 2) {\n      remainder = Number(Number(remainder).toFixed(2));\n    }\n\n    // If we have anything left in the remainder, and we're currently adding\n    // seconds to the duration, go ahead and add the decimal to the seconds\n    if (designationsKey === \"S\" && remainder > 0) {\n      value += remainder;\n    }\n\n    if (value) {\n      // Add the 'T' separator for time components if needed\n      const needsTimeSeparator =\n        (duration.indexOf(\"D\") > 0 || [\"H\", \"M\", \"S\"].includes(designationsKey)) &&\n        duration.indexOf(\"T\") === -1;\n\n      if (needsTimeSeparator) {\n        duration += \"T\";\n      }\n\n      duration += `${value}${designationsKey}`;\n    }\n  });\n\n  return duration;\n});\n\n/**\n * Converts a time string in HH:MM:SS format to the equivalent number of seconds.\n * This function is flexible and can handle various input types, converting them to strings as needed.\n *\n * @param {string|number|boolean|null} timeString - The time string to convert, typically in HH:MM:SS format.\n *                                                 If not a string, it will be converted to one.\n *                                                 If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} timeRegex - The regular expression used to validate the time string format.\n *                                    If a string is provided, it will be converted to a RegExp.\n * @return {number} The total number of seconds represented by the time string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getTimeAsSeconds(\"01:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getTimeAsSeconds(\"invalid\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 30 (converts number to string \"30\" then parses as 0:0:30)\n * getTimeAsSeconds(30, /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport const getTimeAsSeconds = memoize(\n  (timeString: string | number | boolean | null, timeRegex: RegExp | string): number => {\n    if (typeof timeString === \"number\" || typeof timeString === \"boolean\") {\n      timeString = String(timeString);\n    }\n    if (typeof timeRegex === \"string\") {\n      timeRegex = new RegExp(timeRegex);\n    }\n    if (!timeString || !timeString?.match?.(timeRegex)) {\n      return 0;\n    }\n\n    const parts = timeString.split(\":\");\n    const hours = Number(parts[0]);\n    const minutes = Number(parts[1]);\n    const seconds = Number(parts[2]);\n    return hours * 3600 + minutes * 60 + seconds;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (timeString, timeRegex) => {\n    const timeStr = typeof timeString === \"string\" ? timeString : String(timeString ?? \"\");\n    const regexStr = typeof timeRegex === \"string\" ? timeRegex : (timeRegex?.toString() ?? \"\");\n    return `${timeStr}:${regexStr}`;\n  },\n);\n\n/**\n * Converts an ISO 8601 duration string (e.g., \"PT1H30M45S\") to the equivalent number of seconds.\n * This function parses the duration string using a regular expression to extract years, days,\n * hours, minutes, and seconds components.\n *\n * @param {string|null} duration - The ISO 8601 duration string to convert.\n *                                If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n *                                       The regex should have capture groups for years, days, hours, minutes, and seconds.\n * @return {number} The total number of seconds represented by the duration string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getDurationAsSeconds(\"PT1H30M45S\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 90000 (1 day, 1 hour)\n * getDurationAsSeconds(\"P1DT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getDurationAsSeconds(\"invalid\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport const getDurationAsSeconds = memoize(\n  (duration: string | null, durationRegex: RegExp | string): number => {\n    if (typeof durationRegex === \"string\") {\n      durationRegex = new RegExp(durationRegex);\n    }\n\n    if (!duration || !duration?.match?.(durationRegex)) {\n      return 0;\n    }\n\n    const [, years, _, , days, hours, minutes, seconds] =\n      new RegExp(durationRegex).exec?.(duration) ?? [];\n    let result = 0.0;\n    result += Number(seconds) || 0.0;\n    result += Number(minutes) * 60.0 || 0.0;\n    result += Number(hours) * 3600.0 || 0.0;\n    result += Number(days) * (60 * 60 * 24.0) || 0.0;\n    result += Number(years) * (60 * 60 * 24 * 365.0) || 0.0;\n    return result;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (duration, durationRegex) => {\n    const durationStr = duration ?? \"\";\n    const regexStr =\n      typeof durationRegex === \"string\" ? durationRegex : (durationRegex?.toString() ?? \"\");\n    return `${durationStr}:${regexStr}`;\n  },\n);\n\n/**\n * Adds together two ISO 8601 duration strings and returns the result as a new ISO 8601 duration string.\n * This function works by converting both durations to seconds, adding them together, and then\n * converting the result back to an ISO 8601 duration string.\n *\n * @param {string} first - The first ISO 8601 duration string.\n * @param {string} second - The second ISO 8601 duration string.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n * @return {string} A new ISO 8601 duration string representing the sum of the two input durations.\n *\n * @example\n * // Returns \"PT2H\" (1 hour + 1 hour = 2 hours)\n * addTwoDurations(\"PT1H\", \"PT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"PT1H30M\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addTwoDurations(\"PT1H\", \"PT30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"P1DT1H30M\" (1 day + 1 hour and 30 minutes = 1 day, 1 hour, and 30 minutes)\n * addTwoDurations(\"P1D\", \"PT1H30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport function addTwoDurations(\n  first: string,\n  second: string,\n  durationRegex: RegExp | string,\n): string {\n  const regex: RegExp =\n    typeof durationRegex === \"string\" ? new RegExp(durationRegex) : durationRegex;\n  return getSecondsAsISODuration(\n    getDurationAsSeconds(first, regex) + getDurationAsSeconds(second, regex),\n  );\n}\n\n/**\n * Adds together two time strings in HH:MM:SS format and returns the result as a new time string.\n * This function works by converting both time strings to seconds, adding them together, and then\n * converting the result back to an HH:MM:SS format.\n *\n * @param {string} first - The first time string in HH:MM:SS format.\n * @param {string} second - The second time string in HH:MM:SS format.\n * @param {RegExp|string} timeRegex - The regular expression used to validate and parse the time strings.\n *                                   If a string is provided, it will be converted to a RegExp.\n * @return {string} A new time string in HH:MM:SS format representing the sum of the two input times.\n *\n * @example\n * // Returns \"02:00:00\" (1 hour + 1 hour = 2 hours)\n * addHHMMSSTimeStrings(\"01:00:00\", \"01:00:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:00\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:45\" (1 hour + 30 minutes and 45 seconds = 1 hour, 30 minutes, and 45 seconds)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport function addHHMMSSTimeStrings(\n  first: string,\n  second: string,\n  timeRegex: RegExp | string,\n): string {\n  if (typeof timeRegex === \"string\") {\n    timeRegex = new RegExp(timeRegex);\n  }\n  return getSecondsAsHHMMSS(\n    getTimeAsSeconds(first, timeRegex) + getTimeAsSeconds(second, timeRegex),\n  );\n}\n\n/**\n * Flattens a nested JSON object into a flat object with dot notation for nested properties.\n * This function recursively traverses the object and creates new keys using dot notation\n * for nested objects and bracket notation for arrays.\n *\n * @param {StringKeyMap} data - The nested object to flatten.\n * @return {StringKeyMap} A flattened object where nested properties are represented with dot notation.\n *\n * @example\n * // Returns { \"a\": 1, \"b.c\": 2, \"b.d\": 3, \"e[0]\": 4, \"e[1]\": 5 }\n * flatten({\n *   a: 1,\n *   b: { c: 2, d: 3 },\n *   e: [4, 5]\n * });\n *\n * @example\n * // Returns { \"\": [] } for an empty array\n * flatten([]);\n *\n * @example\n * // Returns { \"\": {} } for an empty object\n * flatten({});\n */\nexport function flatten(data: StringKeyMap): StringKeyMap {\n  const result: StringKeyMap = {};\n\n  /**\n   * Recurse through the object\n   * @param {*} cur\n   * @param {*} prop\n   */\n  function recurse(cur: any, prop: any) {\n    if (Object(cur) !== cur) {\n      result[prop] = cur;\n    } else if (Array.isArray(cur)) {\n      // Use forEach instead of for loop\n      cur.forEach((item, i) => {\n        recurse(item, `${prop}[${i}]`);\n      });\n\n      if (cur.length === 0) result[prop] = [];\n    } else {\n      const keys = Object.keys(cur).filter((p) => Object.prototype.hasOwnProperty.call(cur, p));\n\n      const isEmpty = keys.length === 0;\n\n      // Use forEach instead of for...in loop\n      keys.forEach((p) => {\n        recurse(cur[p], prop ? `${prop}.${p}` : p);\n      });\n\n      if (isEmpty && prop) result[prop] = {};\n    }\n  }\n\n  recurse(data, \"\");\n  return result;\n}\n\n/**\n * Converts a flattened object back into a nested object structure.\n * This function is the inverse of `flatten()`. It parses dot notation and bracket notation\n * in property names to recreate the original nested structure.\n *\n * @param {StringKeyMap} data - The flattened object to unflatten.\n * @return {object} A nested object recreated from the flattened structure.\n *\n * @example\n * // Returns { a: 1, b: { c: 2, d: 3 }, e: [4, 5] }\n * unflatten({\n *   \"a\": 1,\n *   \"b.c\": 2,\n *   \"b.d\": 3,\n *   \"e[0]\": 4,\n *   \"e[1]\": 5\n * });\n *\n * @example\n * // Handles array indices correctly\n * unflatten({\n *   \"users[0].name\": \"John\",\n *   \"users[0].email\": \"john@example.com\",\n *   \"users[1].name\": \"Jane\",\n *   \"users[1].email\": \"jane@example.com\"\n * });\n * // Returns:\n * // {\n * //   users: [\n * //     { name: \"John\", email: \"john@example.com\" },\n * //     { name: \"Jane\", email: \"jane@example.com\" }\n * //   ]\n * // }\n */\nexport function unflatten(data: StringKeyMap): object {\n  \"use strict\";\n\n  if (Object(data) !== data || Array.isArray(data)) return data;\n  const result: StringKeyMap = {};\n\n  // Regex pattern for parsing property paths\n  const pattern = /\\.?([^.[\\]]+)|\\[(\\d+)]/g;\n\n  // Get all own properties and process them\n  Object.keys(data)\n    .filter((p) => Object.prototype.hasOwnProperty.call(data, p))\n    .forEach((p) => {\n      let cur = result;\n      let prop = \"\";\n\n      // Create a new regex instance for each property to reset lastIndex\n      const regex = new RegExp(pattern);\n\n      // Process all matches in the property path\n      Array.from({ length: p.match(new RegExp(pattern, \"g\"))?.length ?? 0 }, () =>\n        regex.exec(p),\n      ).forEach((m) => {\n        if (m) {\n          // Create array or object as needed\n          cur = (cur[prop] ?? (cur[prop] = m[2] ? [] : ({} as StringKeyMap))) as StringKeyMap;\n          prop = m[2] || m[1];\n        }\n      });\n\n      cur[prop] = data[p];\n    });\n\n  return (result[\"\"] ?? result) as object;\n}\n\n/**\n * Counts the number of decimal places in a number.\n * This function handles both integer and floating-point numbers.\n *\n * @param {number} num - The number to analyze.\n * @return {number} The number of decimal places. Returns 0 for integers or if the number doesn't have a decimal point.\n *\n * @example\n * // Returns 0\n * countDecimals(42);\n *\n * @example\n * // Returns 2\n * countDecimals(3.14);\n *\n * @example\n * // Returns 5\n * countDecimals(1.23456);\n */\nexport function countDecimals(num: number): number {\n  if (Math.floor(num) === num || String(num)?.indexOf?.(\".\") < 0) return 0;\n  const parts = num.toString().split(\".\")?.[1];\n  return parts?.length ?? 0;\n}\n\n/**\n * Formats SCORM messages for consistent and readable logging.\n * This function pads the function name and CMI element to create aligned log messages\n * that are easier to read in log files or console output.\n *\n * @param {string} functionName - The name of the function that generated the message.\n * @param {string} message - The message content to be logged.\n * @param {string} [CMIElement] - Optional. The CMI element related to the message.\n * @return {string} A formatted message string with consistent padding.\n *\n * @example\n * // Returns \"initialize          : Successfully initialized\"\n * formatMessage(\"initialize\", \"Successfully initialized\");\n *\n * @example\n * // Returns \"getValue            : cmi.core.student_id                                             : 12345\"\n * formatMessage(\"getValue\", \"12345\", \"cmi.core.student_id\");\n *\n * @example\n * // Returns \"setValue            : cmi.core.lesson_status                                          : completed\"\n * formatMessage(\"setValue\", \"completed\", \"cmi.core.lesson_status\");\n */\nexport function formatMessage(functionName: string, message: string, CMIElement?: string): string {\n  const baseLength = 20;\n\n  // Use string padding instead of loops\n  const paddedFunction = functionName.padEnd(baseLength);\n  let messageString = `${paddedFunction}: `;\n\n  if (CMIElement) {\n    const CMIElementBaseLength = 70;\n    // Add CMIElement and pad to the required length\n    messageString += CMIElement;\n    messageString = messageString.padEnd(CMIElementBaseLength);\n  }\n\n  // Add the message (or empty string if null/undefined)\n  messageString += message ?? \"\";\n\n  return messageString;\n}\n\n/**\n * Checks if a string contains a specific pattern using regular expression matching.\n * This function is a wrapper around JavaScript's String.match() method that handles\n * null/undefined values gracefully.\n *\n * @param {string} str - The string to search within. If null or undefined, returns false.\n * @param {string} tester - The pattern to search for. Can be a regular expression pattern.\n * @return {boolean} True if the pattern is found in the string, false otherwise.\n *\n * @example\n * // Returns true\n * stringMatches(\"Hello, world!\", \"world\");\n *\n * @example\n * // Returns true\n * stringMatches(\"The quick brown fox\", \"\\\\w+\\\\s+\\\\w+\");\n *\n * @example\n * // Returns false\n * stringMatches(\"Hello, world!\", \"universe\");\n *\n * @example\n * // Returns false (handles null gracefully)\n * stringMatches(null, \"test\");\n */\nexport function stringMatches(str: string, tester: string): boolean {\n  return str?.match(tester) !== null;\n}\n\n/**\n * Creates a memoized (cached) version of a function for performance optimization.\n * This function caches the results of previous calls with the same arguments,\n * avoiding redundant calculations for repeated calls with the same input.\n *\n * @template T - The type of the function to memoize\n * @param {T} fn - The function to memoize\n * @param {Function} [keyFn] - Optional function to generate a custom cache key.\n *                           Useful for functions with complex arguments that can't be serialized.\n * @return {T} A memoized version of the input function with the same signature\n *\n * @example\n * // Basic usage with a simple function\n * const memoizedAdd = memoize((a, b) => {\n *   console.log('Calculating...');\n *   return a + b;\n * });\n *\n * memoizedAdd(1, 2); // Logs \"Calculating...\" and returns 3\n * memoizedAdd(1, 2); // Returns 3 without logging (uses cached result)\n *\n * @example\n * // Using a custom key function for objects that can't be serialized\n * const memoizedProcessUser = memoize(\n *   (user) => {\n *     console.log('Processing user...');\n *     return { ...user, processed: true };\n *   },\n *   (user) => user.id // Use user.id as the cache key\n * );\n *\n * memoizedProcessUser({ id: 123, name: 'John' }); // Logs and processes\n * memoizedProcessUser({ id: 123, name: 'John' }); // Uses cached result\n */\nexport function memoize<T extends (...args: any[]) => any>(\n  fn: T,\n  keyFn?: (...args: Parameters<T>) => string,\n): T {\n  const cache = new Map<string, ReturnType<T>>();\n\n  return ((...args: Parameters<T>): ReturnType<T> => {\n    const key = keyFn ? keyFn(...args) : JSON.stringify(args);\n\n    return cache.has(key)\n      ? (cache.get(key) as ReturnType<T>)\n      : (() => {\n          const result = fn(...args);\n          cache.set(key, result);\n          return result;\n        })();\n  }) as T;\n}\n","import { BaseScormValidationError } from \"../../exceptions\";\nimport { memoize } from \"../../utilities\";\n\n/**\n * Check if the value matches the proper format. If not, throw proper error code.\n *\n * @param {string} value\n * @param {string} regexPattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @param {boolean} [allowEmptyString]\n * @return {boolean}\n */\nexport const checkValidFormat = memoize(\n  (\n    CMIElement: string,\n    value: string,\n    regexPattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n    allowEmptyString?: boolean,\n  ): boolean => {\n    if (typeof value !== \"string\") {\n      return false;\n    }\n    const formatRegex = new RegExp(regexPattern);\n    const matches = value.match(formatRegex);\n    if (allowEmptyString && value === \"\") {\n      return true;\n    }\n    if (value === undefined || !matches || matches[0] === \"\") {\n      throw new errorClass(CMIElement, errorCode);\n    }\n    return true;\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, regexPattern, errorCode, _errorClass, allowEmptyString) => {\n    // Use typeof for non-string values to ensure consistent cache keys\n    const valueKey = typeof value === \"string\" ? value : `[${typeof value}]`;\n    return `${CMIElement}:${valueKey}:${regexPattern}:${errorCode}:${allowEmptyString || false}`;\n  },\n);\n\n/**\n * Check if the value matches the proper range. If not, throw proper error code.\n *\n * @param {any} value\n * @param {string} rangePattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @return {boolean}\n */\nexport const checkValidRange = memoize(\n  (\n    CMIElement: string,\n    value: any,\n    rangePattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean => {\n    const ranges = rangePattern.split(\"#\");\n    value = value * 1.0;\n    if (value >= ranges[0]) {\n      if (ranges[1] === \"*\" || value <= ranges[1]) {\n        return true;\n      } else {\n        throw new errorClass(CMIElement, errorCode);\n      }\n    } else {\n      throw new errorClass(CMIElement, errorCode);\n    }\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, rangePattern, errorCode, _errorClass) =>\n    `${CMIElement}:${value}:${rangePattern}:${errorCode}`,\n);\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm12_errors.TYPE_MISMATCH,\n    Scorm12ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidRange(\n  CMIElement: string,\n  value: any,\n  rangePattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  if (!allowEmptyString && value === \"\") {\n    throw new Scorm12ValidationError(CMIElement, scorm12_errors.VALUE_OUT_OF_RANGE);\n  }\n\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm12_errors.VALUE_OUT_OF_RANGE,\n    Scorm12ValidationError,\n  );\n}\n","import { BaseScormValidationError } from \"../exceptions\";\nimport { checkValidFormat, checkValidRange } from \"../cmi/common/validation\";\nimport { check12ValidFormat, check12ValidRange } from \"../cmi/scorm12/validation\";\nimport { scorm12_regex } from \"../constants/regex\";\nimport { scorm12_errors } from \"../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../exceptions/scorm12_exceptions\";\n\n/**\n * Service for validating CMI data model properties\n */\nexport class ValidationService {\n  /**\n   * Validates a score property (raw, min, max)\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @param {string} decimalRegex - The regex pattern for decimal validation\n   * @param {string | false} scoreRange - The range pattern for score validation, or false if no range validation is needed\n   * @param {number} invalidTypeCode - The error code for invalid type\n   * @param {number} invalidRangeCode - The error code for invalid range\n   * @param {typeof BaseScormValidationError} errorClass - The error class to use for validation errors\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScore(\n    CMIElement: string,\n    value: string,\n    decimalRegex: string,\n    scoreRange: string | false,\n    invalidTypeCode: number,\n    invalidRangeCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean {\n    return (\n      checkValidFormat(CMIElement, value, decimalRegex, invalidTypeCode, errorClass) &&\n      (!scoreRange || checkValidRange(CMIElement, value, scoreRange, invalidRangeCode, errorClass))\n    );\n    // This line should never be reached due to exceptions being thrown\n  }\n\n  /**\n   * Validates a SCORM 1.2 audio property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Audio(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.audio_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 language property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Language(CMIElement: string, value: string): boolean {\n    return check12ValidFormat(CMIElement, value, scorm12_regex.CMIString256);\n  }\n\n  /**\n   * Validates a SCORM 1.2 speed property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Speed(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.speed_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 text property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Text(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.text_range)\n    );\n  }\n\n  /**\n   * Validates if a property is read-only\n   *\n   * @param {string} CMIElement\n   * @param {boolean} initialized - Whether the object is initialized\n   * @throws {BaseScormValidationError} - Throws an error if the object is initialized\n   */\n  validateReadOnly(CMIElement: string, initialized: boolean): void {\n    if (initialized) {\n      throw new Scorm12ValidationError(CMIElement, scorm12_errors.READ_ONLY_ELEMENT);\n    }\n  }\n}\n\n// Export a singleton instance of the ValidationService\nexport const validationService = new ValidationService();\n","import { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"./base_cmi\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { validationService } from \"../../services/ValidationService\";\n\n/**\n * Base class for cmi *.score objects\n */\nexport class CMIScore extends BaseCMI {\n  private readonly __children: string;\n  private readonly __score_range: string | false;\n  private readonly __invalid_error_code: number;\n  private readonly __invalid_type_code: number;\n  private readonly __invalid_range_code: number;\n  private readonly __decimal_regex: string;\n  private readonly __error_class: typeof BaseScormValidationError;\n  protected _raw = \"\";\n  protected _min = \"\";\n  protected _max: string;\n\n  /**\n   * Constructor for *.score\n   * @param {\n   *     score_children: string,\n   *     score_range: string,\n   *     max: string,\n   *     invalidErrorCode: number,\n   *     invalidTypeCode: number,\n   *     invalidRangeCode: number,\n   *     decimalRegex: string,\n   *     errorClass: typeof BaseScormValidationError\n   * } params\n   */\n  constructor(params: {\n    CMIElement: string;\n    score_children?: string;\n    score_range?: string;\n    max?: string;\n    invalidErrorCode?: number;\n    invalidTypeCode?: number;\n    invalidRangeCode?: number;\n    decimalRegex?: string;\n    errorClass: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n\n    this.__children = params.score_children || scorm12_constants.score_children;\n    this.__score_range = !params.score_range ? false : scorm12_regex.score_range;\n    this._max = params.max || params.max === \"\" ? params.max : \"100\";\n    this.__invalid_error_code = params.invalidErrorCode || scorm12_errors.INVALID_SET_VALUE;\n    this.__invalid_type_code = params.invalidTypeCode || scorm12_errors.TYPE_MISMATCH;\n    this.__invalid_range_code = params.invalidRangeCode || scorm12_errors.VALUE_OUT_OF_RANGE;\n    this.__decimal_regex = params.decimalRegex || scorm12_regex.CMIDecimal;\n    this.__error_class = params.errorClass;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this.__error_class(this._cmi_element + \"._children\", this.__invalid_error_code);\n  }\n\n  /**\n   * Getter for _raw\n   * @return {string}\n   */\n  get raw(): string {\n    return this._raw;\n  }\n\n  /**\n   * Setter for _raw\n   * @param {string} raw\n   */\n  set raw(raw: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".raw\",\n        raw,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._raw = raw;\n    }\n  }\n\n  /**\n   * Getter for _min\n   * @return {string}\n   */\n  get min(): string {\n    return this._min;\n  }\n\n  /**\n   * Setter for _min\n   * @param {string} min\n   */\n  set min(min: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".min\",\n        min,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._min = min;\n    }\n  }\n\n  /**\n   * Getter for _max\n   * @return {string}\n   */\n  get max(): string {\n    return this._max;\n  }\n\n  /**\n   * Setter for _max\n   * @param {string} max\n   */\n  set max(max: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".max\",\n        max,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._max = max;\n    }\n  }\n\n  /**\n   * toJSON for *.score\n   * @return {\n   *    {\n   *      min: string,\n   *      max: string,\n   *      raw: string\n   *    }\n   *    }\n   */\n  toJSON(): {\n    min: string;\n    max: string;\n    raw: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { check12ValidFormat } from \"../scorm12/validation\";\nimport * as Util from \"../../utilities\";\n\n/**\n * Class representing the `cmi.core` object\n * @extends BaseCMI\n */\nexport class CMICore extends BaseCMI {\n  /**\n   * Constructor for `cmi.core`\n   */\n  constructor() {\n    super(\"cmi.core\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.core.score\",\n      score_children: scorm12_constants.score_children,\n      score_range: scorm12_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n\n  public readonly score: CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  private __children = scorm12_constants.core_children;\n  private _student_id = \"\";\n  private _student_name = \"\";\n  private _lesson_location = \"\";\n  private _credit = \"\";\n  private _lesson_status = \"not attempted\";\n  private _entry = \"\";\n  private _total_time = \"\";\n  private _lesson_mode = \"normal\";\n  private _exit = \"\";\n  private _session_time = \"00:00:00\";\n  private _suspend_data = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._exit = \"\";\n    this._entry = \"\";\n\n    /**\n     * Resetting ensures we accurately track the time spent on each individual SCO session independently. Each new\n     * session should start from zero, so we can reset cmi.core.session_time at the beginning of each session.\n     */\n    this._session_time = \"00:00:00\";\n\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for _student_id\n   * @return {string}\n   */\n  get student_id(): string {\n    return this._student_id;\n  }\n\n  /**\n   * Setter for _student_id. Can only be called before  initialization.\n   * @param {string} student_id\n   */\n  set student_id(student_id: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".student_id\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._student_id = student_id;\n    }\n  }\n\n  /**\n   * Getter for _student_name\n   * @return {string}\n   */\n  get student_name(): string {\n    return this._student_name;\n  }\n\n  /**\n   * Setter for _student_name. Can only be called before  initialization.\n   * @param {string} student_name\n   */\n  set student_name(student_name: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".student_name\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._student_name = student_name;\n    }\n  }\n\n  /**\n   * Getter for _lesson_location\n   * @return {string}\n   */\n  get lesson_location(): string {\n    return this._lesson_location;\n  }\n\n  /**\n   * Setter for _lesson_location\n   * @param {string} lesson_location\n   */\n  set lesson_location(lesson_location: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".lesson_location\",\n        lesson_location,\n        scorm12_regex.CMIString256,\n        true,\n      )\n    ) {\n      this._lesson_location = lesson_location;\n    }\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this._credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before  initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".credit\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._credit = credit;\n    }\n  }\n\n  /**\n   * Getter for _lesson_status\n   * @return {string}\n   */\n  get lesson_status(): string {\n    return this._lesson_status;\n  }\n\n  /**\n   * Setter for _lesson_status\n   * @param {string} lesson_status\n   */\n  set lesson_status(lesson_status: string) {\n    if (this.initialized) {\n      if (\n        check12ValidFormat(\n          this._cmi_element + \".lesson_status\",\n          lesson_status,\n          scorm12_regex.CMIStatus,\n        )\n      ) {\n        this._lesson_status = lesson_status;\n      }\n    } else {\n      if (\n        check12ValidFormat(\n          this._cmi_element + \".lesson_status\",\n          lesson_status,\n          scorm12_regex.CMIStatus2,\n        )\n      ) {\n        this._lesson_status = lesson_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this._entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before  initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".entry\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._entry = entry;\n    }\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this._total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before  initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".total_time\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._total_time = total_time;\n    }\n  }\n\n  /**\n   * Getter for _lesson_mode\n   * @return {string}\n   */\n  get lesson_mode(): string {\n    return this._lesson_mode;\n  }\n\n  /**\n   * Setter for _lesson_mode. Can only be called before  initialization.\n   * @param {string} lesson_mode\n   */\n  set lesson_mode(lesson_mode: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".lesson_mode\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._lesson_mode = lesson_mode;\n    }\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".exit\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    if (check12ValidFormat(this._cmi_element + \".exit\", exit, scorm12_regex.CMIExit, true)) {\n      this._exit = exit;\n    }\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".session_time\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".session_time\",\n        session_time,\n        scorm12_regex.CMITimespan,\n      )\n    ) {\n      this._session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this._suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".suspend_data\",\n        suspend_data,\n        scorm12_regex.CMIString4096,\n        true,\n      )\n    ) {\n      this._suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   * @param {number} start_time\n   * @return {string}\n   */\n  getCurrentTotalTime(start_time: number | undefined): string {\n    let sessionTime = this._session_time;\n    const startTime = start_time;\n\n    if (typeof startTime !== \"undefined\" && startTime !== null) {\n      const seconds = new Date().getTime() - startTime;\n      sessionTime = Util.getSecondsAsHHMMSS(seconds / 1000);\n    }\n\n    return Util.addHHMMSSTimeStrings(\n      this._total_time,\n      sessionTime,\n      new RegExp(scorm12_regex.CMITimespan),\n    );\n  }\n\n  /**\n   * toJSON for cmi.core\n   *\n   * @return {\n   *    {\n   *      student_name: string,\n   *      entry: string,\n   *      exit: string,\n   *      score: CMIScore,\n   *      student_id: string,\n   *      lesson_mode: string,\n   *      lesson_location: string,\n   *      lesson_status: string,\n   *      credit: string,\n   *      session_time: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    student_name: string;\n    entry: string;\n    exit: string;\n    score: CMIScore;\n    student_id: string;\n    lesson_mode: string;\n    lesson_location: string;\n    lesson_status: string;\n    credit: string;\n    session_time: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      student_id: this.student_id,\n      student_name: this.student_name,\n      lesson_location: this.lesson_location,\n      credit: this.credit,\n      lesson_status: this.lesson_status,\n      entry: this.entry,\n      lesson_mode: this.lesson_mode,\n      exit: this.exit,\n      session_time: this.session_time,\n      score: this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseCMI } from \"./base_cmi\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Base class for cmi *.n objects\n */\nexport class CMIArray extends BaseCMI {\n  private readonly _errorCode: number;\n  private readonly _errorClass: typeof BaseScormValidationError;\n  private readonly __children: string;\n  public childArray: any[];\n\n  /**\n   * Constructor cmi *.n arrays\n   * @param {object} params\n   */\n  constructor(params: {\n    CMIElement: string;\n    children: string;\n    errorCode?: number;\n    errorClass?: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n    this.__children = params.children;\n    this._errorCode = params.errorCode || scorm12_errors.GENERAL;\n    this._errorClass = params.errorClass || BaseScormValidationError;\n    this.childArray = [];\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(wipe: boolean = false): void {\n    this._initialized = false;\n    if (wipe) {\n      this.childArray = [];\n    } else {\n      // Reset all children\n      for (let i = 0; i < this.childArray.length; i++) {\n        this.childArray[i].reset();\n      }\n    }\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this._errorClass(this._cmi_element + \"._children\", this._errorCode);\n  }\n\n  /**\n   * Getter for _count\n   * @return {number}\n   */\n  get _count(): number {\n    return this.childArray.length;\n  }\n\n  /**\n   * Setter for _count. Just throws an error.\n   * @param {number} _count\n   */\n  set _count(_count: number) {\n    throw new this._errorClass(this._cmi_element + \"._count\", this._errorCode);\n  }\n\n  /**\n   * toJSON for *.n arrays\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result: { [key: string]: any } = {};\n    for (let i = 0; i < this.childArray.length; i++) {\n      result[i + \"\"] = this.childArray[i];\n    }\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { check12ValidFormat } from \"./validation\";\nimport { CMIArray } from \"../common/array\";\n\n/**\n * Class representing SCORM 1.2's `cmi.objectives` object\n * @extends CMIArray\n */\nexport class CMIObjectives extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives`\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.objectives\",\n      children: scorm12_constants.objectives_children,\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super(\"cmi.objectives.n\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.objectives.n.score\",\n      score_children: scorm12_constants.score_children,\n      score_range: scorm12_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n\n  public readonly score: CMIScore;\n\n  private _id = \"\";\n  private _status = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._id = \"\";\n    this._status = \"\";\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check12ValidFormat(this._cmi_element + \".id\", id, scorm12_regex.CMIIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _status\n   * @return {string}\n   */\n  get status(): string {\n    return this._status;\n  }\n\n  /**\n   * Setter for _status\n   * @param {string} status\n   */\n  set status(status: string) {\n    if (check12ValidFormat(this._cmi_element + \".status\", status, scorm12_regex.CMIStatus2)) {\n      this._status = status;\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   * @return {\n   *    {\n   *      id: string,\n   *      status: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    status: string;\n    score: CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      status: this.status,\n      score: this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { validationService } from \"../../services/ValidationService\";\n\n/**\n * Class representing the SCORM 1.2 cmi.student_data object\n * @extends BaseCMI\n */\nexport class CMIStudentData extends BaseCMI {\n  private readonly __children;\n  private _mastery_score = \"\";\n  private _max_time_allowed = \"\";\n  private _time_limit_action = \"\";\n\n  /**\n   * Constructor for cmi.student_data\n   * @param {string} student_data_children\n   */\n  constructor(student_data_children?: string) {\n    super(\"cmi.student_data\");\n    this.__children = student_data_children\n      ? student_data_children\n      : scorm12_constants.student_data_children;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for _master_score\n   * @return {string}\n   */\n  get mastery_score(): string {\n    return this._mastery_score;\n  }\n\n  /**\n   * Setter for _master_score. Can only be called before  initialization.\n   * @param {string} mastery_score\n   */\n  set mastery_score(mastery_score: string) {\n    validationService.validateReadOnly(this._cmi_element + \".mastery_score\", this.initialized);\n    this._mastery_score = mastery_score;\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this._max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before  initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    validationService.validateReadOnly(this._cmi_element + \".max_time_allowed\", this.initialized);\n    this._max_time_allowed = max_time_allowed;\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this._time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before  initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    validationService.validateReadOnly(this._cmi_element + \".time_limit_action\", this.initialized);\n    this._time_limit_action = time_limit_action;\n  }\n\n  /**\n   * toJSON for cmi.student_data\n   *\n   * @return {\n   *    {\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      mastery_score: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    mastery_score: string;\n    max_time_allowed: string;\n    time_limit_action: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      mastery_score: this.mastery_score,\n      max_time_allowed: this.max_time_allowed,\n      time_limit_action: this.time_limit_action,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { validationService } from \"../../services/ValidationService\";\n\n/**\n * Class representing the SCORM 1.2 cmi.student_preference object\n * @extends BaseCMI\n */\nexport class CMIStudentPreference extends BaseCMI {\n  private readonly __children;\n\n  /**\n   * Constructor for cmi.student_preference\n   * @param {string} student_preference_children\n   */\n  constructor(student_preference_children?: string) {\n    super(\"cmi.student_preference\");\n    this.__children = student_preference_children\n      ? student_preference_children\n      : scorm12_constants.student_preference_children;\n  }\n\n  private _audio = \"\";\n  private _language = \"\";\n  private _speed = \"\";\n  private _text = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for _audio\n   * @return {string}\n   */\n  get audio(): string {\n    return this._audio;\n  }\n\n  /**\n   * Setter for _audio\n   * @param {string} audio\n   */\n  set audio(audio: string) {\n    if (validationService.validateScorm12Audio(this._cmi_element + \".audio\", audio)) {\n      this._audio = audio;\n    }\n  }\n\n  /**\n   * Getter for _language\n   * @return {string}\n   */\n  get language(): string {\n    return this._language;\n  }\n\n  /**\n   * Setter for _language\n   * @param {string} language\n   */\n  set language(language: string) {\n    if (validationService.validateScorm12Language(this._cmi_element + \".language\", language)) {\n      this._language = language;\n    }\n  }\n\n  /**\n   * Getter for _speed\n   * @return {string}\n   */\n  get speed(): string {\n    return this._speed;\n  }\n\n  /**\n   * Setter for _speed\n   * @param {string} speed\n   */\n  set speed(speed: string) {\n    if (validationService.validateScorm12Speed(this._cmi_element + \".speed\", speed)) {\n      this._speed = speed;\n    }\n  }\n\n  /**\n   * Getter for _text\n   * @return {string}\n   */\n  get text(): string {\n    return this._text;\n  }\n\n  /**\n   * Setter for _text\n   * @param {string} text\n   */\n  set text(text: string) {\n    if (validationService.validateScorm12Text(this._cmi_element + \".text\", text)) {\n      this._text = text;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_preference\n   *\n   * @return {\n   *    {\n   *      audio: string,\n   *      language: string,\n   *      speed: string,\n   *      text: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    audio: string;\n    language: string;\n    speed: string;\n    text: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio: this.audio,\n      language: this.language,\n      speed: this.speed,\n      text: this.text,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check12ValidFormat, check12ValidRange } from \"./validation\";\nimport { scorm12_regex } from \"../../constants/regex\";\n\n/**\n * Class representing the SCORM 1.2 `cmi.interactions`\n * @extends CMIArray\n */\nexport class CMIInteractions extends CMIArray {\n  /**\n   * Constructor for `cmi.interactions`\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.interactions\",\n      children: scorm12_constants.interactions_children,\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n object\n   */\n  constructor() {\n    super(\"cmi.interactions.n\");\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: Scorm12ValidationError,\n      children: scorm12_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.correct_responses\",\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: Scorm12ValidationError,\n      children: scorm12_constants.correct_responses_children,\n    });\n  }\n\n  public readonly objectives: CMIArray;\n  public readonly correct_responses: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  private _id = \"\";\n  private _time = \"\";\n  private _type = \"\";\n  private _weighting = \"\";\n  private _student_response = \"\";\n  private _result = \"\";\n  private _latency = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n\n    this._id = \"\";\n    this._time = \"\";\n    this._type = \"\";\n    this._weighting = \"\";\n    this._student_response = \"\";\n    this._result = \"\";\n    this._latency = \"\";\n\n    this.objectives?.reset();\n    this.correct_responses?.reset();\n  }\n\n  /**\n   * Getter for _id. Should only be called during JSON export.\n   * @return {string}\n   */\n  get id(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".id\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check12ValidFormat(this._cmi_element + \".id\", id, scorm12_regex.CMIIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get time(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".time\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._time;\n  }\n\n  /**\n   * Setter for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (check12ValidFormat(this._cmi_element + \".time\", time, scorm12_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * Getter for _type. Should only be called during JSON export.\n   * @return {string}\n   */\n  get type(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".type\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._type;\n  }\n\n  /**\n   * Setter for _type\n   * @param {string} type\n   */\n  set type(type: string) {\n    if (check12ValidFormat(this._cmi_element + \".type\", type, scorm12_regex.CMIType)) {\n      this._type = type;\n    }\n  }\n\n  /**\n   * Getter for _weighting. Should only be called during JSON export.\n   * @return {string}\n   */\n  get weighting(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".weighting\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._weighting;\n  }\n\n  /**\n   * Setter for _weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting: string) {\n    if (\n      check12ValidFormat(this._cmi_element + \".weighting\", weighting, scorm12_regex.CMIDecimal) &&\n      check12ValidRange(this._cmi_element + \".weighting\", weighting, scorm12_regex.weighting_range)\n    ) {\n      this._weighting = weighting;\n    }\n  }\n\n  /**\n   * Getter for _student_response. Should only be called during JSON export.\n   * @return {string}\n   */\n  get student_response(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".student_response\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._student_response;\n  }\n\n  /**\n   * Setter for _student_response\n   * @param {string} student_response\n   */\n  set student_response(student_response: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".student_response\",\n        student_response,\n        scorm12_regex.CMIFeedback,\n        true,\n      )\n    ) {\n      this._student_response = student_response;\n    }\n  }\n\n  /**\n   * Getter for _result. Should only be called during JSON export.\n   * @return {string}\n   */\n  get result(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".result\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._result;\n  }\n\n  /**\n   * Setter for _result\n   * @param {string} result\n   */\n  set result(result: string) {\n    if (check12ValidFormat(this._cmi_element + \".result\", result, scorm12_regex.CMIResult)) {\n      this._result = result;\n    }\n  }\n\n  /**\n   * Getter for _latency. Should only be called during JSON export.\n   * @return {string}\n   */\n  get latency(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".latency\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._latency;\n  }\n\n  /**\n   * Setter for _latency\n   * @param {string} latency\n   */\n  set latency(latency: string) {\n    if (check12ValidFormat(this._cmi_element + \".latency\", latency, scorm12_regex.CMITimespan)) {\n      this._latency = latency;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      time: string,\n   *      type: string,\n   *      weighting: string,\n   *      student_response: string,\n   *      result: string,\n   *      latency: string,\n   *      objectives: CMIArray,\n   *      correct_responses: CMIArray\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    time: string;\n    type: string;\n    weighting: string;\n    student_response: string;\n    result: string;\n    latency: string;\n    objectives: CMIArray;\n    correct_responses: CMIArray;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      time: this.time,\n      type: this.type,\n      weighting: this.weighting,\n      student_response: this.student_response,\n      result: this.result,\n      latency: this.latency,\n      objectives: this.objectives,\n      correct_responses: this.correct_responses,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n.objectives.n\");\n  }\n\n  private _id = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._id = \"\";\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check12ValidFormat(this._cmi_element + \".id\", id, scorm12_regex.CMIIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.correct_responses.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.correct_responses.n\n   */\n  constructor() {\n    super(\"cmi.interactions.correct_responses.n\");\n  }\n\n  private _pattern = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._pattern = \"\";\n  }\n\n  /**\n   * Getter for _pattern\n   * @return {string}\n   */\n  get pattern(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".pattern\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._pattern;\n  }\n\n  /**\n   * Setter for _pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern: string) {\n    if (\n      check12ValidFormat(this._cmi_element + \".pattern\", pattern, scorm12_regex.CMIFeedback, true)\n    ) {\n      this._pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.correct_responses.n\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    pattern: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      pattern: this._pattern,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { BaseRootCMI } from \"../common/base_cmi\";\nimport { check12ValidFormat } from \"./validation\";\nimport { CMICore } from \"../aicc/core\";\nimport { CMIObjectives } from \"./objectives\";\nimport { CMIStudentData } from \"./student_data\";\nimport { CMIStudentPreference } from \"./student_preference\";\nimport { CMIInteractions } from \"./interactions\";\n\n/**\n * Class representing the cmi object for SCORM 1.2\n */\nexport class CMI extends BaseRootCMI {\n  private readonly __children: string = \"\";\n  private __version: string = \"3.4\";\n  private _launch_data: string = \"\";\n  private _comments: string = \"\";\n  private _comments_from_lms: string = \"\";\n\n  /**\n   * Constructor for the SCORM 1.2 cmi object\n   * @param {string} cmi_children\n   * @param {(CMIStudentData|AICCCMIStudentData)} student_data\n   * @param {boolean} initialized\n   */\n  constructor(cmi_children?: string, student_data?: CMIStudentData, initialized?: boolean) {\n    super(\"cmi\");\n    if (initialized) this.initialize();\n    this.__children = cmi_children ? cmi_children : scorm12_constants.cmi_children;\n    this.core = new CMICore();\n    this.objectives = new CMIObjectives();\n    this.student_data = student_data ? student_data : new CMIStudentData();\n    this.student_preference = new CMIStudentPreference();\n    this.interactions = new CMIInteractions();\n  }\n\n  public core: CMICore;\n  public objectives: CMIObjectives;\n  public student_data: CMIStudentData;\n  public student_preference: CMIStudentPreference;\n  public interactions: CMIInteractions;\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._launch_data = \"\";\n    this._comments = \"\";\n    this.core?.reset();\n    this.objectives = new CMIObjectives();\n    this.interactions = new CMIInteractions();\n    this.student_data?.reset();\n    this.student_preference?.reset();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.core?.initialize();\n    this.objectives?.initialize();\n    this.student_data?.initialize();\n    this.student_preference?.initialize();\n    this.interactions?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions\n   *    }\n   *  }\n   */\n  toJSON(): {\n    suspend_data: string;\n    launch_data: string;\n    comments: string;\n    comments_from_lms: string;\n    core: CMICore;\n    objectives: CMIObjectives;\n    student_data: CMIStudentData;\n    student_preference: CMIStudentPreference;\n    interactions: CMIInteractions;\n  } {\n    this.jsonString = true;\n    const result = {\n      suspend_data: this.suspend_data,\n      launch_data: this.launch_data,\n      comments: this.comments,\n      comments_from_lms: this.comments_from_lms,\n      core: this.core,\n      objectives: this.objectives,\n      student_data: this.student_data,\n      student_preference: this.student_preference,\n      interactions: this.interactions,\n    };\n    delete this.jsonString;\n    return result;\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   */\n  get _version(): string {\n    return this.__version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._version\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this.core?.suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (this.core) {\n      this.core.suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this._launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before  initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".launch_data\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._launch_data = launch_data;\n    }\n  }\n\n  /**\n   * Getter for _comments\n   * @return {string}\n   */\n  get comments(): string {\n    return this._comments;\n  }\n\n  /**\n   * Setter for _comments\n   * @param {string} comments\n   */\n  set comments(comments: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".comments\",\n        comments,\n        scorm12_regex.CMIString4096,\n        true,\n      )\n    ) {\n      this._comments = comments;\n    }\n  }\n\n  /**\n   * Getter for _comments_from_lms\n   * @return {string}\n   */\n  get comments_from_lms(): string {\n    return this._comments_from_lms;\n  }\n\n  /**\n   * Setter for _comments_from_lms. Can only be called before  initialization.\n   * @param {string} comments_from_lms\n   */\n  set comments_from_lms(comments_from_lms: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".comments_from_lms\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._comments_from_lms = comments_from_lms;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string}\n   */\n  getCurrentTotalTime(): string {\n    return this.core.getCurrentTotalTime(this.start_time);\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { check12ValidFormat } from \"./validation\";\nimport { scorm12_regex } from \"../../constants/regex\";\n\n/**\n * Class for AICC Navigation object\n */\nexport class NAV extends BaseCMI {\n  /**\n   * Constructor for NAV object\n   */\n  constructor() {\n    super(\"cmi.nav\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._event = \"\";\n    this._initialized = false;\n  }\n\n  private _event = \"\";\n\n  /**\n   * Getter for _event\n   * @return {string}\n   */\n  get event(): string {\n    return this._event;\n  }\n\n  /**\n   * Setter for _event\n   * @param {string} event\n   */\n  set event(event: string) {\n    if (\n      event === \"\" ||\n      check12ValidFormat(this._cmi_element + \".event\", event, scorm12_regex.NAVEvent)\n    ) {\n      this._event = event;\n    }\n  }\n\n  /**\n   * toJSON for nav object\n   * @return {\n   *    {\n   *      event: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    event: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      event: this.event,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","// Using plain objects instead of enums for better compatibility with strip-only mode\n// This approach avoids TypeScript enum runtime code while maintaining the same API\n\n// NAVBoolean values\nexport const NAVBoolean = {\n  UNKNOWN: \"unknown\",\n  TRUE: \"true\",\n  FALSE: \"false\",\n};\n\n// Type for NAVBoolean values\nexport type NAVBoolean = (typeof NAVBoolean)[keyof typeof NAVBoolean];\n\n// SuccessStatus values\nexport const SuccessStatus = {\n  PASSED: \"passed\",\n  FAILED: \"failed\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for SuccessStatus values\nexport type SuccessStatus = (typeof SuccessStatus)[keyof typeof SuccessStatus];\n\n// CompletionStatus values\nexport const CompletionStatus = {\n  COMPLETED: \"completed\",\n  INCOMPLETE: \"incomplete\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for CompletionStatus values\nexport type CompletionStatus = (typeof CompletionStatus)[keyof typeof CompletionStatus];\n\n// LogLevelEnum values\nexport const LogLevelEnum = {\n  _: 0,\n  DEBUG: 1,\n  INFO: 2,\n  WARN: 3,\n  ERROR: 4,\n  NONE: 5,\n};\n\n// Type for LogLevelEnum values\nexport type LogLevelEnum = (typeof LogLevelEnum)[keyof typeof LogLevelEnum];\n","import { LogLevel, ResultObject, Settings } from \"../types/api_types\";\nimport { global_constants } from \"./api_constants\";\nimport { LogLevelEnum } from \"./enums\";\n\n/**\n * Default settings for the SCORM API\n */\nexport const DefaultSettings: Settings = {\n  autocommit: false,\n  autocommitSeconds: 10,\n  asyncCommit: false,\n  sendFullCommit: true,\n  lmsCommitUrl: false,\n  dataCommitFormat: \"json\",\n  commitRequestDataType: \"application/json;charset=UTF-8\",\n  autoProgress: false,\n  logLevel: LogLevelEnum.ERROR,\n  selfReportSessionTime: false,\n  alwaysSendTotalTime: false,\n  renderCommonCommitFields: false,\n  strict_errors: true,\n  xhrHeaders: {},\n  xhrWithCredentials: false,\n  fetchMode: \"cors\",\n  responseHandler: async function (response: Response): Promise<ResultObject> {\n    if (typeof response !== \"undefined\") {\n      let httpResult = null;\n\n      // Handle both text() and json() response methods\n      try {\n        if (typeof response.json === 'function') {\n          // Try to get JSON directly if the method exists\n          httpResult = await response.json();\n        } else if (typeof response.text === 'function') {\n          // Fall back to text() if json() is not available\n          const responseText = await response.text();\n          if (responseText) {\n            httpResult = JSON.parse(responseText);\n          }\n        }\n      } catch (e) {\n        // If parsing fails, continue with null httpResult\n      }\n\n      if (httpResult === null || !{}.hasOwnProperty.call(httpResult, \"result\")) {\n        if (response.status === 200) {\n          return {\n            result: global_constants.SCORM_TRUE,\n            errorCode: 0,\n          };\n        } else {\n          return {\n            result: global_constants.SCORM_FALSE,\n            errorCode: 101,\n          };\n        }\n      } else {\n        return {\n          result: httpResult.result,\n          errorCode: httpResult.errorCode\n            ? httpResult.errorCode\n            : httpResult.result === global_constants.SCORM_TRUE\n              ? 0\n              : 101,\n        };\n      }\n    }\n    return {\n      result: global_constants.SCORM_FALSE,\n      errorCode: 101,\n    };\n  },\n  requestHandler: function (commitObject) {\n    return commitObject;\n  },\n  onLogMessage: defaultLogHandler,\n  scoItemIds: [],\n  scoItemIdValidator: false,\n  globalObjectiveIds: [],\n};\n\nexport function defaultLogHandler(messageLevel: LogLevel, logMessage: string): void {\n  switch (messageLevel) {\n    case \"4\":\n    case 4:\n    case \"ERROR\":\n    case LogLevelEnum.ERROR:\n      console.error(logMessage);\n      break;\n    case \"3\":\n    case 3:\n    case \"WARN\":\n    case LogLevelEnum.WARN:\n      console.warn(logMessage);\n      break;\n    case \"2\":\n    case 2:\n    case \"INFO\":\n    case LogLevelEnum.INFO:\n      console.info(logMessage);\n      break;\n    case \"1\":\n    case 1:\n    case \"DEBUG\":\n    case LogLevelEnum.DEBUG:\n      if (console.debug) {\n        console.debug(logMessage);\n      } else {\n        console.log(logMessage);\n      }\n      break;\n  }\n}\n","import BaseAPI from \"../BaseAPI\";\n\n/**\n * Private class that wraps a timeout call to the commit() function\n */\nexport class ScheduledCommit {\n  private _API;\n  private _cancelled = false;\n  private readonly _timeout;\n  private readonly _callback;\n\n  /**\n   * Constructor for ScheduledCommit\n   * @param {BaseAPI} API\n   * @param {number} when\n   * @param {string} callback\n   */\n  constructor(API: BaseAPI, when: number, callback: string) {\n    this._API = API;\n    this._timeout = setTimeout(this.wrapper.bind(this), when);\n    this._callback = callback;\n  }\n\n  /**\n   * Cancel any currently scheduled commit\n   */\n  cancel() {\n    this._cancelled = true;\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n  }\n\n  /**\n   * Wrap the API commit call to check if the call has already been cancelled\n   */\n  wrapper() {\n    if (!this._cancelled) {\n      (async () => await this._API.commit(this._callback))();\n    }\n  }\n}\n","import { CommitObject, ResultObject, Settings } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { IHttpService } from \"../interfaces/services\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { StringKeyMap } from \"../utilities\";\n\n/**\n * Service for handling HTTP communication with the LMS\n */\nexport class HttpService implements IHttpService {\n  private settings: Settings;\n  private error_codes: ErrorCode;\n\n  /**\n   * Constructor for HttpService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   */\n  constructor(settings: Settings, error_codes: ErrorCode) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n  }\n\n  /**\n   * Sends HTTP requests to the LMS with special handling for immediate and standard requests.\n   *\n   * This method handles communication with the LMS server, implementing two distinct\n   * request handling strategies based on the context:\n   *\n   * 1. Immediate Mode (used during termination):\n   *    When immediate=true, the method:\n   *    - Initiates the fetch request but doesn't wait for it to complete\n   *    - Returns a success result immediately\n   *    - Processes the response asynchronously when it arrives\n   *\n   *    This is critical for browser compatibility during page unload/termination,\n   *    as some browsers (especially Chrome) may cancel synchronous or awaited\n   *    requests when a page is closing.\n   *\n   * 2. Standard Mode (normal operation):\n   *    When immediate=false, the method:\n   *    - Processes the request parameters through the configured requestHandler\n   *    - Awaits the fetch response completely\n   *    - Transforms the response using the configured responseHandler\n   *    - Triggers appropriate event listeners based on success/failure\n   *    - Returns the complete result with appropriate error codes\n   *\n   * The method also includes error handling to catch network failures or other\n   * exceptions that might occur during the request process.\n   *\n   * @param {string} url - The URL endpoint to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The data to send to the LMS\n   * @param {boolean} immediate - Whether to send the request immediately without waiting (true) or process normally (false)\n   * @param {Function} apiLog - Function to log API messages with appropriate levels\n   * @param {Function} processListeners - Function to trigger event listeners for commit events\n   * @return {Promise<ResultObject>} - A promise that resolves with the result of the request\n   *\n   * @example\n   * // Standard request (waits for response)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   false,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   *\n   * @example\n   * // Immediate request (for termination)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   true,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   * // result will be success immediately, regardless of actual HTTP result\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n    apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    const genericError: ResultObject = {\n      result: global_constants.SCORM_FALSE,\n      errorCode: this.error_codes.GENERAL,\n    };\n\n    // if we are terminating the module or closing the browser window/tab, we need to make this fetch ASAP.\n    // Some browsers, especially Chrome, do not like synchronous requests to be made when the window is closing.\n    if (immediate) {\n      this.performFetch(url, params).then(async (response) => {\n        await this.transformResponse(response, processListeners);\n      });\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    }\n\n    const process = async (\n      url: string,\n      params: CommitObject | StringKeyMap | Array<any>,\n      settings: Settings,\n    ): Promise<ResultObject> => {\n      try {\n        params = settings.requestHandler(params) as CommitObject | StringKeyMap | Array<any>;\n        const response = await this.performFetch(url, params);\n\n        return this.transformResponse(response, processListeners);\n      } catch (e) {\n        apiLog(\"processHttpRequest\", e, LogLevelEnum.ERROR);\n        processListeners(\"CommitError\");\n        return genericError;\n      }\n    };\n\n    return await process(url, params, this.settings);\n  }\n\n  /**\n   * Perform the fetch request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - The response from the LMS\n   * @private\n   */\n  private async performFetch(url: string, params: StringKeyMap | Array<any>): Promise<Response> {\n    return fetch(url, {\n      method: \"POST\",\n      mode: this.settings.fetchMode,\n      body: params instanceof Array ? params.join(\"&\") : JSON.stringify(params),\n      headers: {\n        ...this.settings.xhrHeaders,\n        \"Content-Type\": this.settings.commitRequestDataType,\n      },\n      credentials: this.settings.xhrWithCredentials ? \"include\" : undefined,\n      keepalive: true,\n    });\n  }\n\n  /**\n   * Transforms the response from the LMS to a ResultObject\n   * @param {Response} response - The response from the LMS\n   * @param {Function} processListeners - Function to process event listeners\n   * @return {Promise<ResultObject>} - The transformed response\n   * @private\n   */\n  private async transformResponse(\n    response: Response,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    const result =\n      typeof this.settings.responseHandler === \"function\"\n        ? await this.settings.responseHandler(response)\n        : await response.json();\n\n    if (\n      response.status >= 200 &&\n      response.status <= 299 &&\n      (result.result === true || result.result === global_constants.SCORM_TRUE)\n    ) {\n      processListeners(\"CommitSuccess\");\n      if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n        result.errorCode = 0;\n      }\n    } else {\n      if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n        result.errorCode = this.error_codes.GENERAL;\n      }\n      processListeners(\"CommitError\", null, result.errorCode);\n    }\n    return result;\n  }\n\n  /**\n   * Updates the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: Settings): void {\n    this.settings = settings;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { stringMatches } from \"../utilities\";\nimport { IEventService } from \"../interfaces/services\";\n\n/**\n * Interface for a listener object\n */\ninterface Listener {\n  functionName: string;\n  CMIElement: string | null;\n  callback: Function;\n}\n\n/**\n * Type for parsed listener information\n */\ninterface ParsedListener {\n  functionName: string;\n  CMIElement: string | null;\n}\n\n/**\n * Service for handling event listeners and event processing\n */\nexport class EventService implements IEventService {\n  // Map of function names to listeners for faster lookups\n  private listenerMap: Map<string, Listener[]> = new Map();\n  // Total count of listeners for logging\n  private listenerCount = 0;\n  // Function to log API messages\n  private readonly apiLog: (\n    functionName: string,\n    message: string,\n    messageLevel: LogLevel,\n    CMIElement?: string,\n  ) => void;\n\n  /**\n   * Constructor for EventService\n   * @param {Function} apiLog - Function to log API messages\n   */\n  constructor(\n    apiLog: (\n      functionName: string,\n      message: string,\n      messageLevel: LogLevel,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.apiLog = apiLog;\n  }\n\n  /**\n   * Parses a listener name into its components\n   *\n   * @param {string} listenerName - The name of the listener\n   * @returns {ParsedListener|null} - The parsed listener information or null if invalid\n   */\n  private parseListenerName(listenerName: string): ParsedListener | null {\n    const listenerSplit = listenerName.split(\".\");\n    if (listenerSplit.length === 0) return null;\n\n    const functionName = listenerSplit[0];\n    let CMIElement = null;\n\n    if (listenerSplit.length > 1) {\n      CMIElement = listenerName.replace(`${functionName}.`, \"\");\n    }\n\n    return { functionName, CMIElement };\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener\n   * @param {Function} callback - The callback function to execute when the event occurs\n   */\n  on(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get or create the array for this function name\n      const listeners = this.listenerMap.get(functionName) ?? [];\n\n      // Add the new listener\n      listeners.push({\n        functionName,\n        CMIElement,\n        callback,\n      });\n\n      // Update the map and count\n      this.listenerMap.set(functionName, listeners);\n      this.listenerCount++;\n\n      this.apiLog(\n        \"on\",\n        `Added event listener: ${this.listenerCount}`,\n        LogLevelEnum.INFO,\n        functionName,\n      );\n    }\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener\n   *\n   * @param {string} listenerName - The name of the listener to remove\n   * @param {Function} callback - The callback function to remove\n   */\n  off(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get the listeners for this function name\n      const listeners = this.listenerMap.get(functionName);\n      if (!listeners) continue;\n\n      // Find the index of the listener to remove\n      const removeIndex = listeners.findIndex(\n        (obj) => obj.CMIElement === CMIElement && obj.callback === callback,\n      );\n\n      if (removeIndex !== -1) {\n        // Remove the listener\n        listeners.splice(removeIndex, 1);\n        this.listenerCount--;\n\n        // Update the map or remove the entry if empty\n        if (listeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, listeners);\n        }\n\n        this.apiLog(\n          \"off\",\n          `Removed event listener: ${this.listenerCount}`,\n          LogLevelEnum.INFO,\n          functionName,\n        );\n      }\n    }\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener to clear\n   */\n  clear(listenerName: string) {\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // If we have listeners for this function name\n      if (this.listenerMap.has(functionName)) {\n        const listeners = this.listenerMap.get(functionName)!;\n\n        // Filter out listeners that match the criteria\n        const newListeners = listeners.filter((obj) => obj.CMIElement !== CMIElement);\n\n        // Update the count and map\n        this.listenerCount -= listeners.length - newListeners.length;\n\n        if (newListeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, newListeners);\n        }\n      }\n    }\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created\n   *\n   * @param {string} functionName - The name of the function that triggered the event\n   * @param {string} CMIElement - The CMI element that was affected\n   * @param {any} value - The value that was set\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this.apiLog(functionName, value, LogLevelEnum.INFO, CMIElement);\n\n    // Get listeners for this function name\n    const listeners = this.listenerMap.get(functionName);\n    if (!listeners) return;\n\n    for (const listener of listeners) {\n      const listenerHasCMIElement = !!listener.CMIElement;\n      let CMIElementsMatch = false;\n\n      // Check if CMI elements match\n      if (CMIElement && listener.CMIElement) {\n        if (listener.CMIElement.endsWith(\"*\")) {\n          // For wildcard matches, check if the CMI element starts with the prefix\n          const prefix = listener.CMIElement.slice(0, -1);\n          CMIElementsMatch = CMIElement.startsWith(prefix);\n        } else {\n          // For exact matches, compare the strings directly\n          CMIElementsMatch = listener.CMIElement === CMIElement;\n        }\n      }\n\n      // If the listener matches, call the callback\n      if (!listenerHasCMIElement || CMIElementsMatch) {\n        this.apiLog(\n          \"processListeners\",\n          `Processing listener: ${listener.functionName}`,\n          LogLevelEnum.DEBUG,\n          CMIElement,\n        );\n\n        // Handle special event types\n        if (functionName.startsWith(\"Sequence\")) {\n          // For sequence events, pass the target as the first argument\n          listener.callback(value);\n        } else if (functionName === \"CommitError\") {\n          // For commit error events, pass the error code\n          listener.callback(value);\n        } else if (functionName === \"CommitSuccess\") {\n          // For commit success events, pass no arguments\n          listener.callback();\n        } else {\n          // For regular events, pass CMIElement and value\n          listener.callback(CMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Resets the event service by clearing all listeners\n   */\n  reset() {\n    this.listenerMap.clear();\n    this.listenerCount = 0;\n  }\n}\n","import { CommitObject, LogLevel } from \"../types/api_types\";\nimport { StringKeyMap, unflatten } from \"../utilities\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { BaseCMI } from \"../cmi/common/base_cmi\";\nimport { ISerializationService } from \"../interfaces/services\";\n\n/**\n * Service for handling data serialization and deserialization in scorm-again\n */\nexport class SerializationService implements ISerializationService {\n  /**\n   * Loads CMI data from a flattened JSON object with special handling for arrays and ordering.\n   *\n   * This method implements a complex algorithm for loading flattened JSON data into the CMI\n   * object structure. It handles several key challenges:\n   *\n   * 1. Ordering dependencies: Some CMI elements (like interactions and objectives) must be\n   *    loaded in a specific order to ensure proper initialization.\n   *\n   * 2. Array handling: Interactions and objectives are stored as arrays, and their properties\n   *    must be loaded in the correct order (e.g., 'id' and 'type' must be set before other properties).\n   *\n   * 3. Unflattening: The method converts flattened dot notation (e.g., \"cmi.objectives.0.id\")\n   *    back into nested objects before loading.\n   *\n   * The algorithm works by:\n   * - Categorizing keys into interactions, objectives, and other properties\n   * - Sorting interactions to prioritize 'id' and 'type' fields within each index\n   * - Sorting objectives to prioritize 'id' fields within each index\n   * - Processing each category in order: interactions, objectives, then other properties\n   *\n   * @param {StringKeyMap} json - The flattened JSON object with dot notation keys\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   *\n   * @param setStartingData\n   * @example\n   * // Example of flattened JSON input:\n   * // {\n   * //   \"cmi.objectives.0.id\": \"obj1\",\n   * //   \"cmi.objectives.0.score.raw\": \"80\",\n   * //   \"cmi.interactions.0.id\": \"int1\",\n   * //   \"cmi.interactions.0.type\": \"choice\",\n   * //   \"cmi.interactions.0.result\": \"correct\"\n   * // }\n   */\n  loadFromFlattenedJSON(\n    json: StringKeyMap,\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromFlattenedJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    const int_pattern = /^(cmi\\.interactions\\.)(\\d+)\\.(.*)$/;\n    const obj_pattern = /^(cmi\\.objectives\\.)(\\d+)\\.(.*)$/;\n\n    // Extract and categorize keys for better sorting\n    const interactions: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const objectives: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const others: { key: string; value: any }[] = [];\n\n    // Categorize keys\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key)) {\n        const intMatch = key.match(int_pattern);\n        if (intMatch) {\n          interactions.push({\n            key,\n            value: json[key],\n            index: Number(intMatch[2]),\n            field: intMatch[3],\n          });\n          continue;\n        }\n\n        const objMatch = key.match(obj_pattern);\n        if (objMatch) {\n          objectives.push({\n            key,\n            value: json[key],\n            index: Number(objMatch[2]),\n            field: objMatch[3],\n          });\n          continue;\n        }\n\n        others.push({ key, value: json[key] });\n      }\n    }\n\n    // Sort interactions: first by index, then prioritize 'id' and 'type' fields\n    interactions.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id and type\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n      if (a.field === \"type\") return -1;\n      if (b.field === \"type\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort objectives: first by index, then prioritize 'id' field\n    objectives.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort other keys alphabetically\n    others.sort((a, b) => a.key.localeCompare(b.key));\n\n    // Process all items in the correct order\n    const processItems = (items: { key: string; value: any }[]) => {\n      items.forEach((item) => {\n        const obj: StringKeyMap = {};\n        obj[item.key] = item.value;\n        this.loadFromJSON(\n          unflatten(obj) as StringKeyMap,\n          CMIElement,\n          setCMIValue,\n          isNotInitialized,\n          setStartingData,\n        );\n      });\n    };\n\n    // Process in order: interactions, objectives, others\n    processItems(interactions);\n    processItems(objectives);\n    processItems(others);\n  }\n\n  /**\n   * Loads CMI data from a nested JSON object with recursive traversal.\n   *\n   * This method implements a recursive algorithm for loading nested JSON data into the CMI\n   * object structure. It handles several key aspects:\n   *\n   * 1. Recursive traversal: The method recursively traverses the nested JSON structure,\n   *    building CMI element paths as it goes (e.g., \"cmi.core.student_id\").\n   *\n   * 2. Type-specific handling: Different data types are handled differently:\n   *    - Arrays: Each array element is processed individually with its index in the path\n   *    - Objects: Recursively processed with updated path\n   *    - Primitives: Set directly using setCMIValue\n   *\n   * 3. Initialization check: Ensures the method is only called before API initialization\n   *\n   * 4. Starting data storage: Stores the original JSON data for potential future use\n   *\n   * The algorithm works by:\n   * - First storing the complete JSON object via setStartingData\n   * - Iterating through each property in the JSON object\n   * - For each property, determining its type and handling it accordingly\n   * - Building the CMI element path as it traverses the structure\n   * - Setting values at the appropriate paths using setCMIValue\n   *\n   * @param {{[key: string]: any}} json - The nested JSON object to load\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value at a specific path\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   * @param {Function} setStartingData - Function to store the original JSON data\n   *\n   * @example\n   * // Example of nested JSON input:\n   * // {\n   * //   \"core\": {\n   * //     \"student_id\": \"12345\",\n   * //     \"student_name\": \"John Doe\"\n   * //   },\n   * //   \"objectives\": [\n   * //     { \"id\": \"obj1\", \"score\": { \"raw\": 80 } },\n   * //     { \"id\": \"obj2\", \"score\": { \"raw\": 90 } }\n   * //   ]\n   * // }\n   */\n  loadFromJSON(\n    json: { [key: string]: any },\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    CMIElement = CMIElement !== undefined ? CMIElement : \"cmi\";\n\n    setStartingData(json);\n\n    // could this be refactored down to flatten(json) then setCMIValue on each?\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key) && json[key]) {\n        const currentCMIElement = (CMIElement ? CMIElement + \".\" : \"\") + key;\n        const value = json[key];\n\n        if (value.constructor === Array) {\n          for (let i = 0; i < value.length; i++) {\n            if (value[i]) {\n              const item = value[i];\n              const tempCMIElement = `${currentCMIElement}.${i}`;\n\n              if (item.constructor === Object) {\n                this.loadFromJSON(\n                  item,\n                  tempCMIElement,\n                  setCMIValue,\n                  isNotInitialized,\n                  setStartingData,\n                );\n              } else {\n                setCMIValue(tempCMIElement, item);\n              }\n            }\n          }\n        } else if (value.constructor === Object) {\n          this.loadFromJSON(\n            value,\n            currentCMIElement,\n            setCMIValue,\n            isNotInitialized,\n            setStartingData,\n          );\n        } else {\n          setCMIValue(currentCMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Render the CMI object to JSON for sending to an LMS.\n   *\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {string}\n   */\n  renderCMIToJSONString(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): string {\n    // Do we want/need to return fields that have no set value?\n    if (sendFullCommit) {\n      return JSON.stringify({ cmi });\n    }\n    return JSON.stringify({ cmi }, (k, v) => (v === undefined ? null : v), 2);\n  }\n\n  /**\n   * Returns a JS object representing the current cmi\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {object}\n   */\n  renderCMIToJSONObject(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): StringKeyMap {\n    // Revert to the original implementation to maintain compatibility with tests\n    return JSON.parse(this.renderCMIToJSONString(cmi, sendFullCommit));\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} alwaysSendTotalTime - Whether to always send total time\n   * @param {boolean|Function} renderCommonCommitFields - Whether to render common commit fields\n   * @param {Function} renderCommitObject - Function to render commit object\n   * @param {Function} renderCommitCMI - Function to render commit CMI\n   * @param {LogLevel} apiLogLevel - The API log level\n   * @return {CommitObject|StringKeyMap|Array<any>}\n   */\n  getCommitObject(\n    terminateCommit: boolean,\n    alwaysSendTotalTime: boolean,\n    renderCommonCommitFields: boolean | ((commitObject: CommitObject) => boolean),\n    renderCommitObject: (terminateCommit: boolean) => CommitObject,\n    renderCommitCMI: (terminateCommit: boolean) => StringKeyMap | Array<any>,\n    apiLogLevel: LogLevel,\n  ): CommitObject | StringKeyMap | Array<any> {\n    const shouldTerminateCommit = terminateCommit || alwaysSendTotalTime;\n    const commitObject = renderCommonCommitFields\n      ? renderCommitObject(shouldTerminateCommit)\n      : renderCommitCMI(shouldTerminateCommit);\n\n    if ([LogLevelEnum.DEBUG, \"1\", 1, \"DEBUG\"].includes(apiLogLevel)) {\n      console.debug(\"Commit (terminated: \" + (terminateCommit ? \"yes\" : \"no\") + \"): \");\n      console.debug(commitObject);\n    }\n    return commitObject;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ILoggingService } from \"../interfaces/services\";\nimport { defaultLogHandler } from \"../constants/default_settings\";\n\n/**\n * Centralized logging service implemented as a singleton\n * Provides methods for logging at different levels and configuring the log level\n */\nexport class LoggingService implements ILoggingService {\n  private static _instance: LoggingService;\n  private _logLevel: LogLevel = LogLevelEnum.ERROR;\n  private _logHandler: (messageLevel: LogLevel, logMessage: string) => void;\n\n  /**\n   * Private constructor to prevent direct instantiation\n   */\n  private constructor() {\n    // Default log handler uses console methods based on log level\n    this._logHandler = defaultLogHandler;\n  }\n\n  /**\n   * Get the singleton instance of LoggingService\n   *\n   * @returns {LoggingService} The singleton instance\n   */\n  public static getInstance(): LoggingService {\n    if (!LoggingService._instance) {\n      LoggingService._instance = new LoggingService();\n    }\n    return LoggingService._instance;\n  }\n\n  /**\n   * Set the log level\n   *\n   * @param {LogLevel} level - The log level to set\n   */\n  public setLogLevel(level: LogLevel): void {\n    this._logLevel = level;\n  }\n\n  /**\n   * Get the current log level\n   *\n   * @returns {LogLevel} The current log level\n   */\n  public getLogLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  /**\n   * Set a custom log handler\n   *\n   * @param {Function} handler - The function to handle log messages\n   */\n  public setLogHandler(handler: (messageLevel: LogLevel, logMessage: string) => void): void {\n    this._logHandler = handler;\n  }\n\n  /**\n   * Log a message if the message level is greater than or equal to the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @param {string} logMessage - The message to log\n   */\n  public log(messageLevel: LogLevel, logMessage: string): void {\n    if (this.shouldLog(messageLevel)) {\n      this._logHandler(messageLevel, logMessage);\n    }\n  }\n\n  /**\n   * Log a message at ERROR level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public error(logMessage: string): void {\n    this.log(LogLevelEnum.ERROR, logMessage);\n  }\n\n  /**\n   * Log a message at WARN level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public warn(logMessage: string): void {\n    this.log(LogLevelEnum.WARN, logMessage);\n  }\n\n  /**\n   * Log a message at INFO level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public info(logMessage: string): void {\n    this.log(LogLevelEnum.INFO, logMessage);\n  }\n\n  /**\n   * Log a message at DEBUG level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public debug(logMessage: string): void {\n    this.log(LogLevelEnum.DEBUG, logMessage);\n  }\n\n  /**\n   * Determine if a message should be logged based on its level and the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @returns {boolean} Whether the message should be logged\n   */\n  private shouldLog(messageLevel: LogLevel): boolean {\n    // Convert string levels to numbers for comparison\n    const numericMessageLevel = this.getNumericLevel(messageLevel);\n    const numericLogLevel = this.getNumericLevel(this._logLevel);\n\n    return numericMessageLevel >= numericLogLevel;\n  }\n\n  /**\n   * Convert a log level to its numeric value\n   *\n   * @param {LogLevel} level - The log level to convert\n   * @returns {number} The numeric value of the log level\n   */\n  private getNumericLevel(level: LogLevel): number {\n    if (level === undefined) return LogLevelEnum.NONE;\n\n    if (typeof level === \"number\") return level;\n\n    switch (level) {\n      case \"1\":\n      case \"DEBUG\":\n        return LogLevelEnum.DEBUG;\n      case \"2\":\n      case \"INFO\":\n        return LogLevelEnum.INFO;\n      case \"3\":\n      case \"WARN\":\n        return LogLevelEnum.WARN;\n      case \"4\":\n      case \"ERROR\":\n        return LogLevelEnum.ERROR;\n      case \"5\":\n      case \"NONE\":\n        return LogLevelEnum.NONE;\n      default:\n        return LogLevelEnum.ERROR; // Default to ERROR if unknown\n    }\n  }\n}\n\n// Export a function to get the singleton instance\nexport function getLoggingService(): LoggingService {\n  return LoggingService.getInstance();\n}\n","import { LogLevelEnum } from \"../constants/enums\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { ValidationError } from \"../exceptions\";\nimport { IErrorHandlingService, ILoggingService } from \"../interfaces/services\";\nimport { getLoggingService } from \"./LoggingService\";\n\n/**\n * Service for handling SCORM errors\n */\nexport class ErrorHandlingService implements IErrorHandlingService {\n  private _lastErrorCode: string = \"0\";\n  private readonly _errorCodes: ErrorCode;\n  private readonly _apiLog: (\n    functionName: string,\n    message: string,\n    logLevel?: LogLevelEnum,\n    CMIElement?: string,\n  ) => void;\n  private readonly _getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string;\n  private readonly _loggingService: ILoggingService;\n\n  /**\n   * Constructor for ErrorHandlingService\n   *\n   * @param {ErrorCode} errorCodes - The error codes object\n   * @param {Function} apiLog - Function for logging API calls\n   * @param {Function} getLmsErrorMessageDetails - Function for getting error message details\n   * @param {ILoggingService} loggingService - Optional logging service instance\n   */\n  constructor(\n    errorCodes: ErrorCode,\n    apiLog: (\n      functionName: string,\n      message: string,\n      logLevel?: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n    loggingService?: ILoggingService,\n  ) {\n    this._errorCodes = errorCodes;\n    this._apiLog = apiLog;\n    this._getLmsErrorMessageDetails = getLmsErrorMessageDetails;\n    this._loggingService = loggingService || getLoggingService();\n  }\n\n  /**\n   * Get the last error code\n   *\n   * @return {string} - The last error code\n   */\n  get lastErrorCode(): string {\n    return this._lastErrorCode;\n  }\n\n  /**\n   * Set the last error code\n   *\n   * @param {string} errorCode - The error code to set\n   */\n  set lastErrorCode(errorCode: string) {\n    this._lastErrorCode = errorCode;\n  }\n\n  /**\n   * Throws a SCORM error\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The error number\n   * @param {string} message - The error message\n   * @throws {ValidationError} - If throwException is true, throws a ValidationError\n   */\n  throwSCORMError(CMIElement: string, errorNumber: number, message?: string): void {\n    if (!message) {\n      message = this._getLmsErrorMessageDetails(errorNumber, true);\n    }\n\n    // Format a more descriptive error message with context\n    const formattedMessage = `SCORM Error ${errorNumber}: ${message}${CMIElement ? ` [Element: ${CMIElement}]` : \"\"}`;\n\n    // Log using both the API log and the logging service for consistency\n    this._apiLog(\"throwSCORMError\", errorNumber + \": \" + message, LogLevelEnum.ERROR, CMIElement);\n    this._loggingService.error(formattedMessage);\n\n    this._lastErrorCode = String(errorNumber);\n  }\n\n  /**\n   * Clears the last SCORM error code on success.\n   *\n   * @param {string} success - Whether the operation was successful\n   */\n  clearSCORMError(success: string): void {\n    if (success !== undefined && success !== global_constants.SCORM_FALSE) {\n      this._lastErrorCode = \"0\";\n    }\n  }\n\n  /**\n   * Handles exceptions that occur when accessing or setting CMI values.\n   *\n   * This method provides centralized error handling for exceptions that occur during\n   * CMI data operations. It differentiates between different types of errors and\n   * handles them appropriately:\n   *\n   * 1. ValidationError: These are expected errors from the validation system that\n   *    indicate a specific SCORM error condition (like invalid data format or range).\n   *    For these errors, the method:\n   *    - Sets the lastErrorCode to the error code from the ValidationError\n   *    - Returns SCORM_FALSE to indicate failure to the caller\n   *\n   * 2. Standard JavaScript Error: For general JavaScript errors (like TypeError,\n   *    ReferenceError, etc.), the method:\n   *    - Logs the error message with stack trace to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * 3. Unknown exceptions: For any other type of exception that doesn't match the\n   *    above categories, the method:\n   *    - Logs the entire exception object to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * This method is critical for maintaining SCORM compliance by ensuring that\n   * all errors are properly translated into the appropriate SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {ValidationError|Error|unknown} e - The exception that was thrown\n   * @param {string} returnValue - The default return value (typically an empty string)\n   * @return {string} - Either the original returnValue or SCORM_FALSE if an error occurred\n   *\n   * @example\n   * try {\n   *   const value = getCMIValue(\"cmi.core.score.raw\");\n   *   return value;\n   * } catch (e) {\n   *   return handleValueAccessException(e, \"\");\n   * }\n   */\n  handleValueAccessException(\n    CMIElement: string,\n    e: Error | ValidationError | unknown,\n    returnValue: string,\n  ): string {\n    if (e instanceof ValidationError) {\n      const validationError = e as ValidationError;\n      this._lastErrorCode = String(validationError.errorCode);\n\n      // Log validation errors at WARN level with context\n      const errorMessage = `Validation Error ${validationError.errorCode}: ${validationError.message} [Element: ${CMIElement}]`;\n      this._loggingService.warn(errorMessage);\n\n      returnValue = global_constants.SCORM_FALSE;\n    } else if (e instanceof Error) {\n      // For standard JS errors, include the stack trace and error type\n      const errorType = e.constructor.name; // Gets the error type (e.g., TypeError, ReferenceError)\n      const errorMessage = `${errorType}: ${e.message} [Element: ${CMIElement}]`;\n      const stackTrace = e.stack || \"\";\n\n      // Log the detailed error with stack trace\n      this._loggingService.error(`${errorMessage}\\n${stackTrace}`);\n\n      this.throwSCORMError(CMIElement, this._errorCodes.GENERAL, `${errorType}: ${e.message}`);\n    } else {\n      // For unknown errors, provide as much context as possible\n      const errorMessage = `Unknown error occurred while accessing [Element: ${CMIElement}]`;\n\n      this._loggingService.error(errorMessage);\n\n      try {\n        // Try to stringify the error object for more details\n        const errorDetails = JSON.stringify(e);\n        this._loggingService.error(`Error details: ${errorDetails}`);\n      } catch (jsonError) {\n        // If stringify fails, log that we couldn't get more details\n        this._loggingService.error(\"Could not stringify error object for details\");\n      }\n\n      this.throwSCORMError(CMIElement, this._errorCodes.GENERAL, \"Unknown error\");\n    }\n    return returnValue;\n  }\n\n  /**\n   * Get the error codes object\n   *\n   * @return {ErrorCode} - The error codes object\n   */\n  get errorCodes(): ErrorCode {\n    return this._errorCodes;\n  }\n}\n\n// Export a factory function to create the service\nexport function createErrorHandlingService(\n  errorCodes: ErrorCode,\n  apiLog: (\n    functionName: string,\n    message: string,\n    logLevel?: LogLevelEnum,\n    CMIElement?: string,\n  ) => void,\n  getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n  loggingService?: ILoggingService,\n): ErrorHandlingService {\n  return new ErrorHandlingService(errorCodes, apiLog, getLmsErrorMessageDetails, loggingService);\n}\n","import { ErrorCode } from \"./constants/error_codes\";\nimport { global_constants } from \"./constants/api_constants\";\nimport { formatMessage, StringKeyMap, stringMatches } from \"./utilities\";\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport { CommitObject, LogLevel, ResultObject, Settings } from \"./types/api_types\";\nimport { DefaultSettings } from \"./constants/default_settings\";\nimport { IBaseAPI } from \"./interfaces/IBaseAPI\";\nimport { ScheduledCommit } from \"./helpers/scheduled_commit\";\nimport { LogLevelEnum } from \"./constants/enums\";\nimport { HttpService } from \"./services/HttpService\";\nimport { EventService } from \"./services/EventService\";\nimport { SerializationService } from \"./services/SerializationService\";\nimport { createErrorHandlingService } from \"./services/ErrorHandlingService\";\nimport { getLoggingService } from \"./services/LoggingService\";\nimport {\n  ICMIDataService,\n  IErrorHandlingService,\n  IEventService,\n  IHttpService,\n  ILoggingService,\n  ISerializationService\n} from \"./interfaces/services\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { ValidationError } from \"./exceptions\";\n\n/**\n * Base API class for AICC, SCORM 1.2, and SCORM 2004. Should be considered\n * abstract, and never initialized on its own.\n */\nexport default abstract class BaseAPI implements IBaseAPI {\n  private _timeout?: ScheduledCommit;\n  private readonly _error_codes: ErrorCode;\n  private _settings: Settings = DefaultSettings;\n  private readonly _httpService: IHttpService;\n  private _eventService: IEventService;\n  private _serializationService: ISerializationService;\n  private readonly _errorHandlingService: IErrorHandlingService;\n  private readonly _loggingService: ILoggingService;\n\n  /**\n   * Constructor for Base API class. Sets some shared API fields, as well as\n   * sets up options for the API.\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Settings} settings - Optional settings for the API\n   * @param {IHttpService} httpService - Optional HTTP service instance\n   * @param {IEventService} eventService - Optional Event service instance\n   * @param {ISerializationService} serializationService - Optional Serialization service instance\n   * @param {ICMIDataService} cmiDataService - Optional CMI Data service instance\n   * @param {IErrorHandlingService} errorHandlingService - Optional Error Handling service instance\n   * @param {ILoggingService} loggingService - Optional Logging service instance\n   */\n  protected constructor(\n    error_codes: ErrorCode,\n    settings?: Settings,\n    httpService?: IHttpService,\n    eventService?: IEventService,\n    serializationService?: ISerializationService,\n    cmiDataService?: ICMIDataService,\n    errorHandlingService?: IErrorHandlingService,\n    loggingService?: ILoggingService,\n  ) {\n    if (new.target === BaseAPI) {\n      throw new TypeError(\"Cannot construct BaseAPI instances directly\");\n    }\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n\n    this._error_codes = error_codes;\n\n    if (settings) {\n      this.settings = settings;\n    }\n    this.apiLogLevel = this.settings.logLevel;\n    this.selfReportSessionTime = this.settings.selfReportSessionTime;\n\n    if (this.apiLogLevel === undefined) {\n      this.apiLogLevel = LogLevelEnum.NONE;\n    }\n\n    // Initialize and configure LoggingService\n    this._loggingService = loggingService || getLoggingService();\n    this._loggingService.setLogLevel(this.apiLogLevel);\n\n    // If settings include a custom onLogMessage function, use it as the log handler\n    if (this.settings.onLogMessage) {\n      this._loggingService.setLogHandler(this.settings.onLogMessage);\n    }\n\n    // Initialize HTTP service\n    this._httpService = httpService || new HttpService(this.settings, this._error_codes);\n\n    // Initialize Event service\n    this._eventService =\n      eventService ||\n      new EventService((functionName, message, level, element) =>\n        this.apiLog(functionName, message, level, element),\n      );\n\n    // Initialize Serialization service\n    this._serializationService = serializationService || new SerializationService();\n\n    // Initialize Error Handling service\n    this._errorHandlingService =\n      errorHandlingService ||\n      createErrorHandlingService(\n        this._error_codes,\n        (functionName, message, level, element) =>\n          this.apiLog(functionName, message, level, element),\n        (errorNumber, detail) => this.getLmsErrorMessageDetails(errorNumber, detail),\n      );\n  }\n\n  public abstract cmi: BaseCMI;\n  public startingData?: StringKeyMap;\n\n  public currentState: number;\n  public apiLogLevel: LogLevel;\n  public selfReportSessionTime: boolean;\n\n  /**\n   * Get the last error code\n   * @return {string}\n   */\n  get lastErrorCode(): string {\n    return this._errorHandlingService?.lastErrorCode ?? \"0\";\n  }\n\n  /**\n   * Set the last error code\n   * @param {string} errorCode\n   */\n  set lastErrorCode(errorCode: string) {\n    if (this._errorHandlingService) {\n      this._errorHandlingService.lastErrorCode = errorCode;\n    }\n  }\n\n  /**\n   * Reset the API to its initial state.\n   * This method clears all current data and resets the API to an uninitialized state.\n   * It can optionally accept new settings to configure the API after reset.\n   *\n   * @param {Settings} settings - Optional new settings to apply after reset\n   */\n  abstract reset(settings?: Settings): void;\n\n  /**\n   * Common reset method for all APIs. New settings are merged with the existing settings.\n   * @param {Settings} settings\n   * @protected\n   */\n  commonReset(settings?: Settings): void {\n    this.apiLog(\"reset\", \"Called\", LogLevelEnum.INFO);\n\n    this.settings = { ...this.settings, ...settings };\n\n    this.clearScheduledCommit();\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n    this.lastErrorCode = \"0\";\n    this._eventService.reset();\n    this.startingData = undefined;\n  }\n\n  /**\n   * Initialize the API\n   * @param {string} callbackName\n   * @param {string} initializeMessage\n   * @param {string} terminationMessage\n   * @return {string}\n   */\n  initialize(\n    callbackName: string,\n    initializeMessage?: string,\n    terminationMessage?: string,\n  ): string {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.isInitialized()) {\n      this.throwSCORMError(\"api\", this._error_codes.INITIALIZED, initializeMessage);\n    } else if (this.isTerminated()) {\n      this.throwSCORMError(\"api\", this._error_codes.TERMINATED, terminationMessage);\n    } else {\n      if (this.selfReportSessionTime) {\n        this.cmi.setStartTime();\n      }\n\n      this.currentState = global_constants.STATE_INITIALIZED;\n      this.lastErrorCode = \"0\";\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Initialize the LMS API\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsInitialize(): string;\n\n  /**\n   * Finish the current LMS API session\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsFinish(): string;\n\n  /**\n   * Get the value of a CMI element from the LMS\n   * @param {string} CMIElement - The CMI element to get the value of\n   * @return {string} The value of the CMI element\n   */\n  abstract lmsGetValue(CMIElement: string): string;\n\n  /**\n   * Set the value of a CMI element in the LMS\n   * @param {string} CMIElement - The CMI element to set the value of\n   * @param {any} value - The value to set\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsSetValue(CMIElement: string, value: any): string;\n\n  /**\n   * Commit the current data to the LMS\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsCommit(): string;\n\n  /**\n   * Get the last error code from the LMS\n   * @return {string} The last error code\n   */\n  abstract lmsGetLastError(): string;\n\n  /**\n   * Get the error string for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get the string for\n   * @return {string} The error string\n   */\n  abstract lmsGetErrorString(CMIErrorCode: string | number): string;\n\n  /**\n   * Get diagnostic information for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get diagnostic information for\n   * @return {string} The diagnostic information\n   */\n  abstract lmsGetDiagnostic(CMIErrorCode: string | number): string;\n\n  /**\n   * Abstract method for validating that a response is correct.\n   * This method is used to validate the format and content of a response\n   * before it is set in the CMI data model.\n   *\n   * @param {string} _CMIElement - The CMI element path to validate\n   * @param {any} _value - The value to validate\n   * @throws {Error} If the response format is invalid\n   */\n  abstract validateCorrectResponse(_CMIElement: string, _value: any): void;\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   * APIs that inherit BaseAPI should override this method.\n   *\n   * @param {string} _CMIElement - unused\n   * @param {*} _value - unused\n   * @param {boolean} _foundFirstIndex - unused\n   * @return {BaseCMI|null}\n   * @abstract\n   */\n  abstract getChildElement(\n    _CMIElement: string,\n    _value: any,\n    _foundFirstIndex: boolean,\n  ): BaseCMI | null;\n\n  /**\n   * Attempts to store the data to the LMS, logs data if no LMS configured\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _calculateTotalTime\n   * @return {ResultObject}\n   * @abstract\n   */\n  abstract storeData(_calculateTotalTime: boolean): Promise<ResultObject>;\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _terminateCommit\n   * @return {StringKeyMap|Array}\n   * @abstract\n   */\n  abstract renderCommitCMI(_terminateCommit: boolean): StringKeyMap | Array<string>;\n\n  /**\n   * Render the commit object to the shortened format for LMS commit.\n   * This method transforms the CMI data into a format suitable for sending to the LMS.\n   * It is called during the commit process to prepare the data for transmission.\n   *\n   * @param {boolean} _terminateCommit - Whether this commit is part of the termination process\n   * @return {CommitObject} A formatted object containing the data to be sent to the LMS\n   * @example\n   * // Example of a commit object structure\n   * {\n   *   method: \"POST\",\n   *   params: {\n   *     cmi: { ... },\n   *     finishState: \"COMPLETED\"\n   *   }\n   * }\n   */\n  abstract renderCommitObject(_terminateCommit: boolean): CommitObject;\n\n  /**\n   * Logging for all SCORM actions\n   *\n   * @param {string} functionName\n   * @param {string} logMessage\n   * @param {number} messageLevel\n   * @param {string} CMIElement\n   */\n  apiLog(functionName: string, logMessage: string, messageLevel: LogLevel, CMIElement?: string) {\n    logMessage = formatMessage(functionName, logMessage, CMIElement);\n\n    if (messageLevel >= this.apiLogLevel) {\n      // Use the injected LoggingService\n      this._loggingService.log(messageLevel, logMessage);\n    }\n  }\n\n  /**\n   * Getter for _error_codes\n   * @return {ErrorCode}\n   */\n  get error_codes(): ErrorCode {\n    return this._error_codes;\n  }\n\n  /**\n   * Getter for _settings\n   * @return {Settings}\n   */\n  get settings(): Settings {\n    return this._settings;\n  }\n\n  /**\n   * Setter for _settings\n   * @param {Settings} settings\n   */\n  set settings(settings: Settings) {\n    const previousSettings = this._settings;\n    this._settings = { ...this._settings, ...settings };\n\n    // Update HTTP service settings\n    this._httpService?.updateSettings(this._settings);\n\n    // Update log level if it changed\n    if (settings.logLevel !== undefined && settings.logLevel !== previousSettings.logLevel) {\n      this.apiLogLevel = settings.logLevel;\n      this._loggingService?.setLogLevel(settings.logLevel);\n    }\n\n    // Update log handler if onLogMessage changed\n    if (\n      settings.onLogMessage !== undefined &&\n      settings.onLogMessage !== previousSettings.onLogMessage\n    ) {\n      this._loggingService?.setLogHandler(settings.onLogMessage);\n    }\n  }\n\n  /**\n   * Terminates the current run of the API\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async terminate(callbackName: string, checkTerminated: boolean): Promise<string> {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.TERMINATION_BEFORE_INIT,\n        this._error_codes.MULTIPLE_TERMINATION,\n      )\n    ) {\n      this.currentState = global_constants.STATE_TERMINATED;\n\n      const result: ResultObject = await this.storeData(true);\n      if ((result.errorCode ?? 0) > 0) {\n        this.throwSCORMError(\"api\", result.errorCode);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Get the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  getValue(callbackName: string, checkTerminated: boolean, CMIElement: string): string {\n    let returnValue: string = \"\";\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.RETRIEVE_BEFORE_INIT,\n        this._error_codes.RETRIEVE_AFTER_TERM,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.getCMIValue(CMIElement);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement);\n    }\n\n    this.apiLog(callbackName, \": returned: \" + returnValue, LogLevelEnum.INFO, CMIElement);\n\n    if (returnValue === undefined) {\n      return \"\";\n    }\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Sets the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {string} commitCallback\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  setValue(\n    callbackName: string,\n    commitCallback: string,\n    checkTerminated: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (value !== undefined) {\n      value = String(value);\n    }\n    let returnValue: string = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.STORE_BEFORE_INIT,\n        this._error_codes.STORE_AFTER_TERM,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.setCMIValue(CMIElement, value);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement, value);\n    }\n\n    if (returnValue === undefined) {\n      returnValue = global_constants.SCORM_FALSE;\n    }\n\n    // If we didn't have any errors while setting the data, go ahead and\n    // schedule a commit, if autocommit is turned on\n    if (String(this.lastErrorCode) === \"0\") {\n      if (this.settings.autocommit) {\n        this.scheduleCommit(this.settings.autocommitSeconds * 1000, commitCallback);\n      }\n    }\n\n    this.apiLog(\n      callbackName,\n      \": \" + value + \": result: \" + returnValue,\n      LogLevelEnum.INFO,\n      CMIElement,\n    );\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async commit(callbackName: string, checkTerminated: boolean = false): Promise<string> {\n    this.clearScheduledCommit();\n\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.COMMIT_BEFORE_INIT,\n        this._error_codes.COMMIT_AFTER_TERM,\n      )\n    ) {\n      const result = await this.storeData(false);\n      if ((result.errorCode ?? 0) > 0) {\n        this.throwSCORMError(\"api\", result.errorCode);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      this.apiLog(callbackName, \" Result: \" + returnValue, LogLevelEnum.DEBUG, \"HttpRequest\");\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Returns last error code\n   * @param {string} callbackName\n   * @return {string}\n   */\n  getLastError(callbackName: string): string {\n    const returnValue = String(this.lastErrorCode);\n\n    this.processListeners(callbackName);\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getErrorString(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getDiagnostic(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode, true);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Checks the LMS state and ensures it has been initialized.\n   *\n   * @param {boolean} checkTerminated\n   * @param {number} beforeInitError\n   * @param {number} afterTermError\n   * @return {boolean}\n   */\n  checkState(checkTerminated: boolean, beforeInitError: number, afterTermError: number): boolean {\n    if (this.isNotInitialized()) {\n      this.throwSCORMError(\"api\", beforeInitError);\n      return false;\n    } else if (checkTerminated && this.isTerminated()) {\n      this.throwSCORMError(\"api\", afterTermError);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {(string|number)} _errorNumber\n   * @param {boolean} _detail\n   * @return {string}\n   * @abstract\n   */\n  getLmsErrorMessageDetails(_errorNumber: string | number, _detail: boolean = false): string {\n    throw new Error(\"The getLmsErrorMessageDetails method has not been implemented\");\n  }\n\n  /**\n   * Gets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @return {string}\n   * @abstract\n   */\n  getCMIValue(_CMIElement: string): string {\n    throw new Error(\"The getCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Sets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @param {any} _value\n   * @return {string}\n   * @abstract\n   */\n  setCMIValue(_CMIElement: string, _value: any): string {\n    throw new Error(\"The setCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Shared API method to set a valid for a given element.\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  _commonSetCMIValue(\n    methodName: string,\n    scorm2004: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (!CMIElement || CMIElement === \"\") {\n      return global_constants.SCORM_FALSE;\n    }\n\n    this.lastErrorCode = \"0\";\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap | BaseCMI = this as StringKeyMap;\n    let returnValue = global_constants.SCORM_FALSE;\n    let foundFirstIndex = false;\n\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      const attribute = structure[idx];\n\n      if (idx === structure.length - 1) {\n        if (scorm2004 && attribute.substring(0, 8) === \"{target=\") {\n          if (this.isInitialized()) {\n            this.throwSCORMError(CMIElement, this._error_codes.READ_ONLY_ELEMENT);\n            break;\n          } else {\n            refObject = {\n              ...refObject,\n              attribute: value,\n            };\n          }\n        } else if (!this._checkObjectHasProperty(refObject as StringKeyMap, attribute)) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        } else {\n          if (\n            stringMatches(CMIElement, \"\\\\.correct_responses\\\\.\\\\d+$\") &&\n            this.isInitialized() &&\n            attribute !== \"pattern\"\n          ) {\n            this.validateCorrectResponse(CMIElement, value);\n            if (this.lastErrorCode !== \"0\") {\n              this.throwSCORMError(CMIElement, this._error_codes.TYPE_MISMATCH);\n              break;\n            }\n          }\n\n          if (!scorm2004 || this._errorHandlingService.lastErrorCode === \"0\") {\n            (refObject as StringKeyMap)[attribute] = value;\n            returnValue = global_constants.SCORM_TRUE;\n          }\n        }\n      } else {\n        refObject = (refObject as StringKeyMap)[attribute] as StringKeyMap;\n        if (!refObject) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n\n        if (refObject instanceof CMIArray) {\n          const index = parseInt(structure[idx + 1], 10);\n\n          // SCO is trying to set an item on an array\n          if (!isNaN(index)) {\n            const item = refObject.childArray[index];\n\n            if (item) {\n              refObject = item;\n              foundFirstIndex = true;\n            } else {\n              const newChild = this.getChildElement(CMIElement, value, foundFirstIndex);\n              foundFirstIndex = true;\n\n              if (!newChild) {\n                if (this.lastErrorCode === \"0\") {\n                  this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n                }\n                break;\n              } else {\n                if (refObject.initialized) newChild.initialize();\n                refObject.childArray[index] = newChild;\n                refObject = newChild;\n              }\n            }\n\n            // Have to update idx value to skip the array position\n            idx++;\n          }\n        }\n      }\n    }\n\n    if (returnValue === global_constants.SCORM_FALSE) {\n      this.apiLog(\n        methodName,\n        `There was an error setting the value for: ${CMIElement}, value of: ${value}`,\n        LogLevelEnum.WARN,\n      );\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @return {any}\n   */\n  _commonGetCMIValue(methodName: string, scorm2004: boolean, CMIElement: string): any {\n    if (!CMIElement || CMIElement === \"\") {\n      return \"\";\n    }\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap = this as StringKeyMap;\n    let attribute = null;\n\n    const uninitializedErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) has not been initialized.`;\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      attribute = structure[idx];\n\n      if (!scorm2004) {\n        if (idx === structure.length - 1) {\n          if (!this._checkObjectHasProperty(refObject, attribute)) {\n            this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n            return;\n          }\n        }\n      } else {\n        if (\n          String(attribute).substring(0, 8) === \"{target=\" &&\n          typeof refObject._isTargetValid == \"function\"\n        ) {\n          const target = String(attribute).substring(8, String(attribute).length - 9);\n          return refObject._isTargetValid(target);\n        } else if (!this._checkObjectHasProperty(refObject, attribute)) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          return;\n        }\n      }\n\n      refObject = refObject[attribute] as StringKeyMap;\n      if (refObject === undefined) {\n        this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n        break;\n      }\n\n      if (refObject instanceof CMIArray) {\n        const index = parseInt(structure[idx + 1], 10);\n\n        // SCO is trying to set an item on an array\n        if (!isNaN(index)) {\n          const item = refObject.childArray[index];\n\n          if (item) {\n            refObject = item;\n          } else {\n            this.throwSCORMError(\n              CMIElement,\n              this._error_codes.VALUE_NOT_INITIALIZED,\n              uninitializedErrorMessage,\n            );\n            break;\n          }\n\n          // Have to update idx value to skip the array position\n          idx++;\n        }\n      }\n    }\n\n    if (refObject === null || refObject === undefined) {\n      if (!scorm2004) {\n        if (attribute === \"_children\") {\n          this.throwSCORMError(CMIElement, this._error_codes.CHILDREN_ERROR, undefined);\n        } else if (attribute === \"_count\") {\n          this.throwSCORMError(CMIElement, this._error_codes.COUNT_ERROR, undefined);\n        }\n      }\n    } else {\n      return refObject;\n    }\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isInitialized(): boolean {\n    return this.currentState === global_constants.STATE_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_NOT_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isNotInitialized(): boolean {\n    return this.currentState === global_constants.STATE_NOT_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_TERMINATED\n   *\n   * @return {boolean}\n   */\n  isTerminated(): boolean {\n    return this.currentState === global_constants.STATE_TERMINATED;\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event.\n   * This method allows you to register a callback function that will be executed\n   * when the specified event occurs.\n   *\n   * @param {string} listenerName - The name of the event to listen for (e.g., \"Initialize\", \"Terminate\", \"GetValue\", \"SetValue\", \"Commit\")\n   * @param {function} callback - The function to execute when the event occurs. The callback will receive relevant event data.\n   * @example\n   * // Listen for Initialize events\n   * api.on(\"Initialize\", function() {\n   *   console.log(\"API has been initialized\");\n   * });\n   *\n   * // Listen for SetValue events\n   * api.on(\"SetValue\", function(element, value) {\n   *   console.log(\"Setting \" + element + \" to \" + value);\n   * });\n   */\n  on(listenerName: string, callback: Function) {\n    this._eventService.on(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener.\n   * This method removes a previously registered callback for an event.\n   * Both the event name and the callback reference must match what was used in the 'on' method.\n   *\n   * @param {string} listenerName - The name of the event to stop listening for\n   * @param {function} callback - The callback function to remove\n   * @example\n   * // Remove a specific listener\n   * const myCallback = function() { console.log(\"API initialized\"); };\n   * api.on(\"Initialize\", myCallback);\n   * // Later, when you want to remove it:\n   * api.off(\"Initialize\", myCallback);\n   */\n  off(listenerName: string, callback: Function) {\n    this._eventService.off(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event.\n   * This method removes all callbacks registered for the specified event.\n   *\n   * @param {string} listenerName - The name of the event to clear all listeners for\n   * @example\n   * // Remove all listeners for the Initialize event\n   * api.clear(\"Initialize\");\n   */\n  clear(listenerName: string) {\n    this._eventService.clear(listenerName);\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created for a specific event.\n   * This method is called internally when SCORM events occur to notify all registered listeners.\n   * It triggers all callback functions registered for the specified event.\n   *\n   * @param {string} functionName - The name of the function/event that occurred\n   * @param {string} CMIElement - Optional CMI element involved in the event\n   * @param {any} value - Optional value associated with the event\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this._eventService.processListeners(functionName, CMIElement, value);\n  }\n\n  /**\n   * Throws a SCORM error with the specified error number and optional message.\n   * This method sets the last error code and can be used to indicate that an operation failed.\n   * The error number should correspond to one of the standard SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The SCORM error code to set\n   * @param {string} message - Optional custom error message to provide additional context\n   * @example\n   * // Throw a \"not initialized\" error\n   * this.throwSCORMError(301, \"The API must be initialized before calling GetValue\");\n   */\n  throwSCORMError(CMIElement: string, errorNumber: number, message?: string) {\n    this._errorHandlingService.throwSCORMError(CMIElement, errorNumber, message);\n  }\n\n  /**\n   * Clears the last SCORM error code when an operation succeeds.\n   * This method is typically called after successful API operations to reset the error state.\n   * It only clears the error if the success parameter is \"true\".\n   *\n   * @param {string} success - A string indicating whether the operation succeeded (\"true\" or \"false\")\n   * @example\n   * // Clear error after successful operation\n   * this.clearSCORMError(\"true\");\n   */\n  clearSCORMError(success: string) {\n    this._errorHandlingService.clearSCORMError(success);\n  }\n\n  /**\n   * Load the CMI from a flattened JSON object.\n   * This method populates the CMI data model from a flattened JSON structure\n   * where keys represent CMI element paths (e.g., \"cmi.core.student_id\").\n   *\n   * @param {StringKeyMap} json - The flattened JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a flattened JSON structure\n   * api.loadFromFlattenedJSON({\n   *   \"cmi.core.student_id\": \"12345\",\n   *   \"cmi.core.student_name\": \"John Doe\",\n   *   \"cmi.core.lesson_status\": \"incomplete\"\n   * });\n   */\n  loadFromFlattenedJSON(json: StringKeyMap, CMIElement?: string) {\n    if (!CMIElement) {\n      // by default, we start from a blank string because we're expecting each element to start with `cmi`\n      CMIElement = \"\";\n    }\n\n    this._serializationService.loadFromFlattenedJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Loads CMI data from a hierarchical JSON object.\n   * This method populates the CMI data model from a nested JSON structure\n   * that mirrors the CMI object hierarchy.\n   *\n   * @param {StringKeyMap} json - The hierarchical JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a hierarchical JSON structure\n   * api.loadFromJSON({\n   *   core: {\n   *     student_id: \"12345\",\n   *     student_name: \"John Doe\",\n   *     lesson_status: \"incomplete\"\n   *   },\n   *   objectives: [\n   *     { id: \"obj1\", score: { raw: 85 } }\n   *   ]\n   * });\n   */\n  loadFromJSON(json: StringKeyMap, CMIElement: string = \"\") {\n    this._serializationService.loadFromJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Render the CMI object to a JSON string for sending to an LMS.\n   * This method serializes the current CMI data model to a JSON string.\n   * The output format is controlled by the sendFullCommit setting.\n   *\n   * @return {string} A JSON string representation of the CMI data\n   * @example\n   * // Get the current CMI data as a JSON string\n   * const jsonString = api.renderCMIToJSONString();\n   * console.log(jsonString); // '{\"core\":{\"student_id\":\"12345\",...}}'\n   */\n  renderCMIToJSONString(): string {\n    return this._serializationService.renderCMIToJSONString(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Returns a JavaScript object representing the current CMI data.\n   * This method creates a plain JavaScript object that mirrors the\n   * structure of the CMI data model, suitable for further processing.\n   *\n   * @return {StringKeyMap} A JavaScript object representing the CMI data\n   * @example\n   * // Get the current CMI data as a JavaScript object\n   * const cmiObject = api.renderCMIToJSONObject();\n   * console.log(cmiObject.core.student_id); // \"12345\"\n   */\n  renderCMIToJSONObject(): StringKeyMap {\n    return this._serializationService.renderCMIToJSONObject(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Sends a request to the LMS with the specified parameters.\n   * This method handles communication with the LMS server, including\n   * formatting the request, handling the response, and triggering appropriate events.\n   *\n   * @param {string} url - The URL endpoint to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The data to send to the LMS\n   * @param {boolean} immediate - Whether to send the request immediately (true) or queue it (false)\n   * @return {Promise<ResultObject>} A promise that resolves with the result of the request\n   * @example\n   * // Send data to the LMS immediately\n   * const result = await api.processHttpRequest(\n   *   \"https://lms.example.com/scorm/commit\",\n   *   { method: \"POST\", params: { cmi: { core: { lesson_status: \"completed\" } } } },\n   *   true\n   * );\n   * console.log(result.errorCode === 0 ? \"Success\" : \"Failed\");\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n  ): Promise<ResultObject> {\n    return this._httpService.processHttpRequest(\n      url,\n      params,\n      immediate,\n      (functionName, message, level, element) => this.apiLog(functionName, message, level, element),\n      (functionName, CMIElement, value) => this.processListeners(functionName, CMIElement, value),\n    );\n  }\n\n  /**\n   * Schedules a commit operation to occur after a specified delay.\n   * This method is used to implement auto-commit functionality, where data\n   * is periodically sent to the LMS without requiring explicit commit calls.\n   *\n   * @param {number} when - The number of milliseconds to wait before committing\n   * @param {string} callback - The name of the commit event callback\n   * @example\n   * // Schedule a commit to happen in 60 seconds\n   * api.scheduleCommit(60000, \"commit\");\n   */\n  scheduleCommit(when: number, callback: string) {\n    if (!this._timeout) {\n      this._timeout = new ScheduledCommit(this, when, callback);\n      this.apiLog(\"scheduleCommit\", \"scheduled\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Clears and cancels any currently scheduled commits.\n   * This method is typically called when an explicit commit is performed\n   * or when the API is terminated, to prevent redundant commits.\n   *\n   * @example\n   * // Cancel any pending scheduled commits\n   * api.clearScheduledCommit();\n   */\n  clearScheduledCommit() {\n    if (this._timeout) {\n      this._timeout.cancel();\n      this._timeout = undefined;\n      this.apiLog(\"clearScheduledCommit\", \"cleared\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Checks if an object has a specific property, using multiple detection methods.\n   * This method performs a thorough check for property existence by:\n   * 1. Checking if it's an own property using Object.hasOwnProperty\n   * 2. Checking if it's defined in the prototype with a property descriptor\n   * 3. Checking if it's accessible via the 'in' operator (includes inherited properties)\n   *\n   * @param {StringKeyMap} StringKeyMap - The object to check for the property\n   * @param {string} attribute - The property name to look for\n   * @return {boolean} True if the property exists on the object or its prototype chain\n   * @private\n   *\n   * @example\n   * // Check for an own property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"name\"); // Returns true\n   *\n   * @example\n   * // Check for an inherited property\n   * class Parent { get type() { return \"parent\"; } }\n   * const child = Object.create(new Parent());\n   * this._checkObjectHasProperty(child, \"type\"); // Returns true\n   *\n   * @example\n   * // Check for a non-existent property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"age\"); // Returns false\n   */\n  private _checkObjectHasProperty(StringKeyMap: StringKeyMap, attribute: string): boolean {\n    return (\n      Object.hasOwnProperty.call(StringKeyMap, attribute) ||\n      Object.getOwnPropertyDescriptor(Object.getPrototypeOf(StringKeyMap), attribute) != null ||\n      attribute in StringKeyMap\n    );\n  }\n\n  /**\n   * Handles exceptions that occur when accessing CMI values.\n   * This method delegates to the ErrorHandlingService to process exceptions\n   * that occur during CMI data operations, ensuring consistent error handling\n   * throughout the API.\n   *\n   * @param {string} CMIElement\n   * @param {any} e - The exception that was thrown\n   * @param {string} returnValue - The default return value to use if an error occurs\n   * @return {string} Either the original returnValue or SCORM_FALSE if an error occurred\n   * @private\n   *\n   * @example\n   * // Handle a validation error when getting a CMI value\n   * try {\n   *   return this.getCMIValue(\"cmi.core.score.raw\");\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"\");\n   * }\n   *\n   * @example\n   * // Handle a general error when setting a CMI value\n   * try {\n   *   this.setCMIValue(\"cmi.core.lesson_status\", \"completed\");\n   *   return \"true\";\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"false\");\n   * }\n   */\n  private handleValueAccessException(CMIElement: string, e: any, returnValue: string): string {\n    if (e instanceof ValidationError) {\n      this.lastErrorCode = String(e.errorCode);\n      returnValue = global_constants.SCORM_FALSE;\n      this.throwSCORMError(CMIElement, e.errorCode, e.errorMessage);\n    } else {\n      if (e instanceof Error && e.message) {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, e.message);\n      } else {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, \"Unknown error\");\n      }\n    }\n    return returnValue;\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS.\n   * This method delegates to the SerializationService to create a properly\n   * formatted object containing the CMI data that needs to be sent to the LMS.\n   * The format and content of the commit object depend on whether this is a\n   * regular commit or a termination commit.\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @return {CommitObject|StringKeyMap|Array} The formatted commit object\n   * @protected\n   *\n   * @example\n   * // Create a regular commit object\n   * const regularCommit = this.getCommitObject(false);\n   * // Result might be: { cmi: { core: { lesson_status: \"incomplete\" } } }\n   *\n   * @example\n   * // Create a termination commit object (includes total_time)\n   * const terminationCommit = this.getCommitObject(true);\n   * // Result might be: { cmi: { core: { lesson_status: \"completed\", total_time: \"PT1H30M\" } } }\n   */\n  protected getCommitObject(terminateCommit: boolean): CommitObject | StringKeyMap | Array<any> {\n    return this._serializationService.getCommitObject(\n      terminateCommit,\n      this.settings.alwaysSendTotalTime,\n      this.settings.renderCommonCommitFields,\n      (terminateCommit) => this.renderCommitObject(terminateCommit),\n      (terminateCommit) => this.renderCommitCMI(terminateCommit),\n      this.apiLogLevel,\n    );\n  }\n}\n","import { CMI } from \"./cmi/scorm12/cmi\";\nimport * as Utilities from \"./utilities\";\nimport { StringKeyMap, stringMatches } from \"./utilities\";\nimport { global_constants, scorm12_constants } from \"./constants/api_constants\";\nimport { scorm12_errors } from \"./constants/error_codes\";\n\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport { CMIObjectivesObject } from \"./cmi/scorm12/objectives\";\nimport {\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject\n} from \"./cmi/scorm12/interactions\";\nimport { NAV } from \"./cmi/scorm12/nav\";\nimport { CommitObject, ResultObject, ScoreObject, Settings } from \"./types/api_types\";\nimport { CompletionStatus, SuccessStatus } from \"./constants/enums\";\nimport BaseAPI from \"./BaseAPI\";\nimport { scorm12_regex } from \"./constants/regex\";\n\n/**\n * API class for SCORM 1.2\n */\nclass Scorm12API extends BaseAPI {\n  /**\n   * Constructor for SCORM 1.2 API\n   * @param {object} settings\n   */\n  constructor(settings?: Settings) {\n    if (settings) {\n      if (settings.mastery_override === undefined) {\n        settings.mastery_override = false;\n      }\n    }\n\n    super(scorm12_errors, settings);\n\n    this.cmi = new CMI();\n    this.nav = new NAV();\n\n    // Rename functions to match 1.2 Spec and expose to modules\n    this.LMSInitialize = this.lmsInitialize;\n    this.LMSFinish = this.lmsFinish;\n    this.LMSGetValue = this.lmsGetValue;\n    this.LMSSetValue = this.lmsSetValue;\n    this.LMSCommit = this.lmsCommit;\n    this.LMSGetLastError = this.lmsGetLastError;\n    this.LMSGetErrorString = this.lmsGetErrorString;\n    this.LMSGetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  public statusSetByModule = false;\n\n  cmi: CMI;\n  nav: NAV;\n\n  LMSInitialize: () => string;\n  LMSFinish: () => string;\n  LMSGetValue: (CMIElement: string) => string;\n  LMSSetValue: (CMIElement: string, value: any) => string;\n  LMSCommit: () => string;\n  LMSGetLastError: () => string;\n  LMSGetErrorString: (CMIErrorCode: string) => string;\n  LMSGetDiagnostic: (CMIErrorCode: string) => string;\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset(settings?: Settings) {\n    this.commonReset(settings);\n\n    this.cmi?.reset();\n    this.nav?.reset();\n  }\n\n  /**\n   * lmsInitialize function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize(): string {\n    this.cmi.initialize();\n    if (this.cmi.core.lesson_status) {\n      this.statusSetByModule = true;\n    } else {\n      this.cmi.core.lesson_status = \"not attempted\";\n    }\n    return this.initialize(\n      \"LMSInitialize\",\n      \"LMS was already initialized!\",\n      \"LMS is already finished!\",\n    );\n  }\n\n  /**\n   * LMSFinish function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish(): string {\n    (async () => {\n      await this.internalFinish();\n    })();\n    return global_constants.SCORM_TRUE;\n  }\n\n  async internalFinish(): Promise<string> {\n    const result = await this.terminate(\"LMSFinish\", true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      if (this.nav.event !== \"\") {\n        if (this.nav.event === \"continue\") {\n          this.processListeners(\"SequenceNext\");\n        } else {\n          this.processListeners(\"SequencePrevious\");\n        }\n      } else if (this.settings.autoProgress) {\n        this.processListeners(\"SequenceNext\");\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * LMSGetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement: string): string {\n    return this.getValue(\"LMSGetValue\", false, CMIElement);\n  }\n\n  /**\n   * LMSSetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement: string, value: any): string {\n    if (CMIElement === \"cmi.core.lesson_status\") {\n      this.statusSetByModule = true;\n    }\n    return this.setValue(\"LMSSetValue\", \"LMSCommit\", false, CMIElement, value);\n  }\n\n  /**\n   * LMSCommit function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit(): string {\n    if (this.settings.asyncCommit) {\n      this.scheduleCommit(500, \"LMSCommit\");\n    } else {\n      (async () => {\n        await this.commit(\"LMSCommit\", false);\n      })();\n    }\n    return global_constants.SCORM_TRUE;\n  }\n\n  /**\n   * LMSGetLastError function from SCORM 1.2 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError(): string {\n    return this.getLastError(\"LMSGetLastError\");\n  }\n\n  /**\n   * LMSGetErrorString function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode: string): string {\n    return this.getErrorString(\"LMSGetErrorString\", CMIErrorCode);\n  }\n\n  /**\n   * LMSGetDiagnostic function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode: string): string {\n    return this.getDiagnostic(\"LMSGetDiagnostic\", CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  override setCMIValue(CMIElement: string, value: any): string {\n    return this._commonSetCMIValue(\"LMSSetValue\", false, CMIElement, value);\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  override getCMIValue(CMIElement: string): any {\n    return this._commonGetCMIValue(\"getCMIValue\", false, CMIElement);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {*} _value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI|null}\n   */\n  getChildElement(CMIElement: string, _value: any, foundFirstIndex: boolean): BaseCMI | null {\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      return new CMIObjectivesObject();\n    } else if (\n      foundFirstIndex &&\n      stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+\")\n    ) {\n      return new CMIInteractionsCorrectResponsesObject();\n    } else if (\n      foundFirstIndex &&\n      stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+\")\n    ) {\n      return new CMIInteractionsObjectivesObject();\n    } else if (!foundFirstIndex && stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\")) {\n      return new CMIInteractionsObject();\n    }\n\n    return null;\n  }\n\n  /**\n   * Validates Correct Response values\n   *\n   * @param {string} _CMIElement\n   * @param {*} _value\n   */\n  validateCorrectResponse(_CMIElement: string, _value: any) {\n    // do nothing\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {number|string} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  override getLmsErrorMessageDetails(errorNumber: number | string, detail: boolean): string {\n    let basicMessage = \"No Error\";\n    let detailMessage = \"No Error\";\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (scorm12_constants.error_descriptions[errorNumber]) {\n      basicMessage = scorm12_constants.error_descriptions[errorNumber].basicMessage;\n      detailMessage = scorm12_constants.error_descriptions[errorNumber].detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {Scorm12API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI: Scorm12API) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   *\n   * @param {boolean} terminateCommit\n   * @return {object|Array}\n   */\n  renderCommitCMI(terminateCommit: boolean): StringKeyMap | Array<string> {\n    const cmiExport: StringKeyMap = this.renderCMIToJSONObject();\n\n    if (terminateCommit) {\n      (cmiExport.cmi as any).core.total_time = this.cmi.getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened: StringKeyMap = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case \"flattened\":\n        return Utilities.flatten(cmiExport);\n      case \"params\":\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case \"json\":\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   * @param {boolean} terminateCommit\n   * @return {CommitObject}\n   */\n  renderCommitObject(terminateCommit: boolean): CommitObject {\n    const cmiExport = this.renderCommitCMI(terminateCommit);\n    const totalTimeHHMMSS = this.cmi.getCurrentTotalTime();\n    const totalTimeSeconds = Utilities.getTimeAsSeconds(totalTimeHHMMSS, scorm12_regex.CMITimespan);\n    const lessonStatus = this.cmi.core.lesson_status;\n    let completionStatus = CompletionStatus.UNKNOWN;\n    let successStatus = SuccessStatus.UNKNOWN;\n    if (lessonStatus) {\n      completionStatus =\n        lessonStatus === \"completed\" || lessonStatus === \"passed\"\n          ? CompletionStatus.COMPLETED\n          : CompletionStatus.INCOMPLETE;\n      if (lessonStatus === \"passed\") {\n        successStatus = SuccessStatus.PASSED;\n      } else if (lessonStatus === \"failed\") {\n        successStatus = SuccessStatus.FAILED;\n      }\n    }\n\n    const score = this.cmi.core.score;\n    let scoreObject: ScoreObject = null;\n    if (score) {\n      scoreObject = {};\n\n      if (!Number.isNaN(Number.parseFloat(score.raw))) {\n        scoreObject.raw = Number.parseFloat(score.raw);\n      }\n      if (!Number.isNaN(Number.parseFloat(score.min))) {\n        scoreObject.min = Number.parseFloat(score.min);\n      }\n      if (!Number.isNaN(Number.parseFloat(score.max))) {\n        scoreObject.max = Number.parseFloat(score.max);\n      }\n    }\n\n    const commitObject: CommitObject = {\n      successStatus: successStatus,\n      completionStatus: completionStatus,\n      runtimeData: cmiExport as StringKeyMap,\n      totalTimeSeconds: totalTimeSeconds,\n    };\n    if (scoreObject) {\n      commitObject.score = scoreObject;\n    }\n    return commitObject;\n  }\n\n  /**\n   * Attempts to store the data to the LMS\n   *\n   * @param {boolean} terminateCommit\n   * @return {ResultObject}\n   */\n  async storeData(terminateCommit: boolean): Promise<ResultObject> {\n    if (terminateCommit) {\n      const originalStatus = this.cmi.core.lesson_status;\n      if (\n        !this.cmi.core.lesson_status ||\n        (!this.statusSetByModule && this.cmi.core.lesson_status === \"not attempted\")\n      ) {\n        this.cmi.core.lesson_status = \"completed\";\n      }\n\n      if (this.cmi.core.lesson_mode === \"normal\") {\n        if (this.cmi.core.credit === \"credit\") {\n          if (\n            this.settings.mastery_override &&\n            this.cmi.student_data.mastery_score !== \"\" &&\n            this.cmi.core.score.raw !== \"\"\n          ) {\n            this.cmi.core.lesson_status =\n              parseFloat(this.cmi.core.score.raw) >= parseFloat(this.cmi.student_data.mastery_score)\n                ? \"passed\"\n                : \"failed\";\n          }\n        }\n      } else if (this.cmi.core.lesson_mode === \"browse\") {\n        if (\n          ((this.startingData?.cmi as any)?.core?.lesson_status || \"\") === \"\" &&\n          originalStatus === \"not attempted\"\n        ) {\n          this.cmi.core.lesson_status = \"browsed\";\n        }\n      }\n    }\n\n    const commitObject = this.getCommitObject(terminateCommit);\n    if (typeof this.settings.lmsCommitUrl === \"string\") {\n      return await this.processHttpRequest(\n        this.settings.lmsCommitUrl,\n        commitObject,\n        terminateCommit,\n      );\n    } else {\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    }\n  }\n}\n\nexport default Scorm12API;\n","import { ValidationError } from \"../exceptions\";\nimport { aicc_constants } from \"../constants/api_constants\";\n\nconst aicc_errors = aicc_constants.error_descriptions;\n\n/**\n * AICC Validation Error\n */\nexport class AICCValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(aicc_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        aicc_errors[String(errorCode)].basicMessage,\n        aicc_errors[String(errorCode)].detailMessage,\n      );\n    } else {\n      super(CMIElement, 101, aicc_errors[\"101\"].basicMessage, aicc_errors[\"101\"].detailMessage);\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, AICCValidationError.prototype);\n  }\n}\n","import { checkValidFormat } from \"../common/validation\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function checkAICCValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm12_errors.TYPE_MISMATCH,\n    AICCValidationError,\n    allowEmptyString,\n  );\n}\n","import { CMIArray } from \"../common/array\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { aicc_regex } from \"../../constants/regex\";\n\n/**\n * AICC Evaluation object\n */\nexport class CMIEvaluation extends BaseCMI {\n  /**\n   * Constructor for AICC Evaluation object\n   */\n  constructor() {\n    super(\"cmi.evaluation\");\n    this.comments = new CMIEvaluationComments();\n  }\n\n  public comments: CMIEvaluationComments;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.comments?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this.comments?.reset();\n  }\n\n  /**\n   * toJSON for cmi.evaluation object\n   * @return {{comments: CMIEvaluationComments}}\n   */\n  toJSON(): {\n    comments: CMIEvaluationComments;\n  } {\n    this.jsonString = true;\n    const result = {\n      comments: this.comments,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing AICC's cmi.evaluation.comments object\n */\n\nclass CMIEvaluationComments extends CMIArray {\n  /**\n   * Constructor for AICC Evaluation Comments object\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.evaluation.comments\",\n      children: aicc_constants.comments_children,\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: AICCValidationError,\n    });\n  }\n}\n\n/**\n * Class for AICC Evaluation Comments\n */\nexport class CMIEvaluationCommentsObject extends BaseCMI {\n  private _content = \"\";\n  private _location = \"\";\n  private _time = \"\";\n\n  /**\n   * Constructor for Evaluation Comments\n   */\n  constructor() {\n    super(\"cmi.evaluation.comments.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._content = \"\";\n    this._location = \"\";\n    this._time = \"\";\n  }\n\n  /**\n   * Getter for _content\n   * @return {string}\n   */\n  get content(): string {\n    return this._content;\n  }\n\n  /**\n   * Setter for _content\n   * @param {string} content\n   */\n  set content(content: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".content\", content, aicc_regex.CMIString256)) {\n      this._content = content;\n    }\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".location\", location, aicc_regex.CMIString256)) {\n      this._location = location;\n    }\n  }\n\n  /**\n   * Getter for _time\n   * @return {string}\n   */\n  get time(): string {\n    return this._time;\n  }\n\n  /**\n   * Setting for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".time\", time, aicc_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.evaluation.comments.n object\n   * @return {\n   *    {\n   *      content: string,\n   *      location: string,\n   *      time: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    content: string;\n    location: string;\n    time: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      content: this.content,\n      location: this.location,\n      time: this.time,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { CMIStudentPreference } from \"../scorm12/student_preference\";\n\n/**\n * StudentPreferences class for AICC\n */\nexport class AICCStudentPreferences extends CMIStudentPreference {\n  /**\n   * Constructor for AICC Student Preferences object\n   */\n  constructor() {\n    super(aicc_constants.student_preference_children);\n    this.windows = new CMIArray({\n      CMIElement: \"cmi.student_preference.windows\",\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: AICCValidationError,\n      children: \"\",\n    });\n  }\n\n  public windows: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.windows?.initialize();\n  }\n\n  private _lesson_type = \"\";\n  private _text_color = \"\";\n  private _text_location = \"\";\n  private _text_size = \"\";\n  private _video = \"\";\n\n  /**\n   * Getter for _lesson_type\n   * @return {string}\n   */\n  get lesson_type(): string {\n    return this._lesson_type;\n  }\n\n  /**\n   * Setter for _lesson_type\n   * @param {string} lesson_type\n   */\n  set lesson_type(lesson_type: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".lesson_type\", lesson_type, aicc_regex.CMIString256)\n    ) {\n      this._lesson_type = lesson_type;\n    }\n  }\n\n  /**\n   * Getter for _text_color\n   * @return {string}\n   */\n  get text_color(): string {\n    return this._text_color;\n  }\n\n  /**\n   * Setter for _text_color\n   * @param {string} text_color\n   */\n  set text_color(text_color: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".text_color\", text_color, aicc_regex.CMIString256)\n    ) {\n      this._text_color = text_color;\n    }\n  }\n\n  /**\n   * Getter for _text_location\n   * @return {string}\n   */\n  get text_location(): string {\n    return this._text_location;\n  }\n\n  /**\n   * Setter for _text_location\n   * @param {string} text_location\n   */\n  set text_location(text_location: string) {\n    if (\n      checkAICCValidFormat(\n        this._cmi_element + \".text_location\",\n        text_location,\n        aicc_regex.CMIString256,\n      )\n    ) {\n      this._text_location = text_location;\n    }\n  }\n\n  /**\n   * Getter for _text_size\n   * @return {string}\n   */\n  get text_size(): string {\n    return this._text_size;\n  }\n\n  /**\n   * Setter for _text_size\n   * @param {string} text_size\n   */\n  set text_size(text_size: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".text_size\", text_size, aicc_regex.CMIString256)\n    ) {\n      this._text_size = text_size;\n    }\n  }\n\n  /**\n   * Getter for _video\n   * @return {string}\n   */\n  get video(): string {\n    return this._video;\n  }\n\n  /**\n   * Setter for _video\n   * @param {string} video\n   */\n  set video(video: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".video\", video, aicc_regex.CMIString256)) {\n      this._video = video;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_preference\n   *\n   * @return {\n   *    {\n   *      audio: string,\n   *      language: string,\n   *      speed: string,\n   *      text: string,\n   *      text_color: string,\n   *      text_location: string,\n   *      text_size: string,\n   *      video: string,\n   *      windows: CMIArray\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    audio: string;\n    language: string;\n    lesson_type: string;\n    speed: string;\n    text: string;\n    text_color: string;\n    text_location: string;\n    text_size: string;\n    video: string;\n    windows: CMIArray;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio: this.audio,\n      language: this.language,\n      lesson_type: this.lesson_type,\n      speed: this.speed,\n      text: this.text,\n      text_color: this.text_color,\n      text_location: this.text_location,\n      text_size: this.text_size,\n      video: this.video,\n      windows: this.windows,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Class representing the AICC cmi.student_demographics object\n */\nexport class CMIStudentDemographics extends BaseCMI {\n  private __children = aicc_constants.student_demographics_children;\n  private _city = \"\";\n  private _class = \"\";\n  private _company = \"\";\n  private _country = \"\";\n  private _experience = \"\";\n  private _familiar_name = \"\";\n  private _instructor_name = \"\";\n  private _title = \"\";\n  private _native_language = \"\";\n  private _state = \"\";\n  private _street_address = \"\";\n  private _telephone = \"\";\n  private _years_experience = \"\";\n\n  /**\n   * Constructor for AICC StudentDemographics object\n   */\n  constructor() {\n    super(\"cmi.student_demographics\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Getter for city\n   * @return {string}\n   */\n  get city(): string {\n    return this._city;\n  }\n\n  /**\n   * Setter for _city. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} city\n   */\n  set city(city: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.city\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._city = city;\n    }\n  }\n\n  /**\n   * Getter for class\n   * @return {string}\n   */\n  get class(): string {\n    return this._class;\n  }\n\n  /**\n   * Setter for _class. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} clazz\n   */\n  set class(clazz: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.class\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._class = clazz;\n    }\n  }\n\n  /**\n   * Getter for company\n   * @return {string}\n   */\n  get company(): string {\n    return this._company;\n  }\n\n  /**\n   * Setter for _company. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} company\n   */\n  set company(company: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.company\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._company = company;\n    }\n  }\n\n  /**\n   * Getter for country\n   * @return {string}\n   */\n  get country(): string {\n    return this._country;\n  }\n\n  /**\n   * Setter for _country. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} country\n   */\n  set country(country: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.country\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._country = country;\n    }\n  }\n\n  /**\n   * Getter for experience\n   * @return {string}\n   */\n  get experience(): string {\n    return this._experience;\n  }\n\n  /**\n   * Setter for _experience. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} experience\n   */\n  set experience(experience: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.experience\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._experience = experience;\n    }\n  }\n\n  /**\n   * Getter for familiar_name\n   * @return {string}\n   */\n  get familiar_name(): string {\n    return this._familiar_name;\n  }\n\n  /**\n   * Setter for _familiar_name. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} familiar_name\n   */\n  set familiar_name(familiar_name: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.familiar_name\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._familiar_name = familiar_name;\n    }\n  }\n\n  /**\n   * Getter for instructor_name\n   * @return {string}\n   */\n  get instructor_name(): string {\n    return this._instructor_name;\n  }\n\n  /**\n   * Setter for _instructor_name. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} instructor_name\n   */\n  set instructor_name(instructor_name: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.instructor_name\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._instructor_name = instructor_name;\n    }\n  }\n\n  /**\n   * Getter for title\n   * @return {string}\n   */\n  get title(): string {\n    return this._title;\n  }\n\n  /**\n   * Setter for _title. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} title\n   */\n  set title(title: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.title\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._title = title;\n    }\n  }\n\n  /**\n   * Getter for native_language\n   * @return {string}\n   */\n  get native_language(): string {\n    return this._native_language;\n  }\n\n  /**\n   * Setter for _native_language. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} native_language\n   */\n  set native_language(native_language: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.native_language\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._native_language = native_language;\n    }\n  }\n\n  /**\n   * Getter for state\n   * @return {string}\n   */\n  get state(): string {\n    return this._state;\n  }\n\n  /**\n   * Setter for _state. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} state\n   */\n  set state(state: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.state\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._state = state;\n    }\n  }\n\n  /**\n   * Getter for street_address\n   * @return {string}\n   */\n  get street_address(): string {\n    return this._street_address;\n  }\n\n  /**\n   * Setter for _street_address. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} street_address\n   */\n  set street_address(street_address: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.street_address\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._street_address = street_address;\n    }\n  }\n\n  /**\n   * Getter for telephone\n   * @return {string}\n   */\n  get telephone(): string {\n    return this._telephone;\n  }\n\n  /**\n   * Setter for _telephone. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} telephone\n   */\n  set telephone(telephone: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.telephone\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._telephone = telephone;\n    }\n  }\n\n  /**\n   * Getter for years_experience\n   * @return {string}\n   */\n  get years_experience(): string {\n    return this._years_experience;\n  }\n\n  /**\n   * Setter for _years_experience. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} years_experience\n   */\n  set years_experience(years_experience: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.years_experience\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._years_experience = years_experience;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_demographics object\n   * @return {\n   *      {\n   *        city: string,\n   *        class: string,\n   *        company: string,\n   *        country: string,\n   *        experience: string,\n   *        familiar_name: string,\n   *        instructor_name: string,\n   *        title: string,\n   *        native_language: string,\n   *        state: string,\n   *        street_address: string,\n   *        telephone: string,\n   *        years_experience: string\n   *      }\n   *    }\n   */\n  toJSON(): {\n    city: string;\n    class: string;\n    company: string;\n    country: string;\n    experience: string;\n    familiar_name: string;\n    instructor_name: string;\n    title: string;\n    native_language: string;\n    state: string;\n    street_address: string;\n    telephone: string;\n    years_experience: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      city: this.city,\n      class: this.class,\n      company: this.company,\n      country: this.country,\n      experience: this.experience,\n      familiar_name: this.familiar_name,\n      instructor_name: this.instructor_name,\n      title: this.title,\n      native_language: this.native_language,\n      state: this.state,\n      street_address: this.street_address,\n      telephone: this.telephone,\n      years_experience: this.years_experience,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { checkAICCValidFormat } from \"./validation\";\n\n/**\n * Class representing the AICC cmi.student_data.tries object\n */\nexport class CMITries extends CMIArray {\n  /**\n   * Constructor for inline Tries Array class\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.student_data.tries\",\n      children: aicc_constants.tries_children,\n    });\n  }\n}\n\n/**\n * Class for AICC Tries\n */\nexport class CMITriesObject extends BaseCMI {\n  private _status = \"\";\n  private _time = \"\";\n\n  /**\n   * Constructor for AICC Tries object\n   */\n  constructor() {\n    super(\"cmi.student_data.tries.n\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.student_data.tries.n.score\",\n      score_children: aicc_constants.score_children,\n      score_range: aicc_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE,\n      errorClass: AICCValidationError,\n    });\n  }\n\n  public score: CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._status = \"\";\n    this._time = \"\";\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for _status\n   * @return {string}\n   */\n  get status(): string {\n    return this._status;\n  }\n\n  /**\n   * Setter for _status\n   * @param {string} status\n   */\n  set status(status: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".status\", status, aicc_regex.CMIStatus2)) {\n      this._status = status;\n    }\n  }\n\n  /**\n   * Getter for _time\n   * @return {string}\n   */\n  get time(): string {\n    return this._time;\n  }\n\n  /**\n   * Setter for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".time\", time, aicc_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data.tries.n object\n   * @return {\n   *    {\n   *      status: string,\n   *      time: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    status: string;\n    time: string;\n    score: CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      status: this.status,\n      time: this.time,\n      score: this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { CMIArray } from \"../common/array\";\n\n/**\n * Class for cmi.student_data.attempt_records array\n */\nexport class CMIAttemptRecords extends CMIArray {\n  /**\n   * Constructor for inline Tries Array class\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.student_data.attempt_records\",\n      children: aicc_constants.attempt_records_children,\n    });\n  }\n}\n\n/**\n * Class for AICC Attempt Records\n */\nexport class CMIAttemptRecordsObject extends BaseCMI {\n  private _lesson_status = \"\";\n\n  /**\n   * Constructor for AICC Attempt Records object\n   */\n  constructor() {\n    super(\"cmi.student_data.attempt_records.n\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.student_data.attempt_records.n.score\",\n      score_children: aicc_constants.score_children,\n      score_range: aicc_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE,\n      errorClass: AICCValidationError,\n    });\n  }\n\n  public score: CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n\n    this._lesson_status = \"\";\n    this.score?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for _lesson_status\n   * @return {string}\n   */\n  get lesson_status(): string {\n    return this._lesson_status;\n  }\n\n  /**\n   * Setter for _lesson_status\n   * @param {string} lesson_status\n   */\n  set lesson_status(lesson_status: string) {\n    if (\n      checkAICCValidFormat(\n        this._cmi_element + \".lesson_status\",\n        lesson_status,\n        aicc_regex.CMIStatus2,\n      )\n    ) {\n      this._lesson_status = lesson_status;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data.attempt_records.n object\n   * @return {\n   *    {\n   *         lesson_status: string,\n   *         score: CMIScore\n   *     }\n   *  }\n   */\n  toJSON(): {\n    lesson_status: string;\n    score: CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      lesson_status: this.lesson_status,\n      score: this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { CMITries } from \"./tries\";\nimport { CMIStudentData } from \"../scorm12/student_data\";\nimport { CMIAttemptRecords } from \"./attempts\";\n\n/**\n * StudentData class for AICC\n */\nexport class AICCCMIStudentData extends CMIStudentData {\n  /**\n   * Constructor for AICC StudentData object\n   */\n  constructor() {\n    super(aicc_constants.student_data_children);\n    this.tries = new CMITries();\n    this.attempt_records = new CMIAttemptRecords();\n  }\n\n  public tries: CMITries;\n  public attempt_records: CMIAttemptRecords;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.tries?.initialize();\n    this.attempt_records?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n    this.tries?.reset(true);\n    this.attempt_records?.reset(true);\n  }\n\n  private _tries_during_lesson = \"\";\n\n  /**\n   * Getter for tries_during_lesson\n   * @return {string}\n   */\n  get tries_during_lesson(): string {\n    return this._tries_during_lesson;\n  }\n\n  /**\n   * Setter for _tries_during_lesson. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} tries_during_lesson\n   */\n  set tries_during_lesson(tries_during_lesson: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_data.tries_during_lesson\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._tries_during_lesson = tries_during_lesson;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data object\n   * @return {\n   *    {\n   *      mastery_score: string,\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      tries: CMITries,\n   *      attempt_records: CMIAttemptRecords\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    mastery_score: string;\n    max_time_allowed: string;\n    time_limit_action: string;\n    tries: CMITries;\n    attempt_records: CMIAttemptRecords;\n  } {\n    this.jsonString = true;\n    const result = {\n      mastery_score: this.mastery_score,\n      max_time_allowed: this.max_time_allowed,\n      time_limit_action: this.time_limit_action,\n      tries: this.tries,\n      attempt_records: this.attempt_records,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { CMIArray } from \"../common/array\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { aicc_constants } from \"../../constants/api_constants\";\n\n/**\n * Class representing the AICC `cmi.paths` object\n */\nexport class CMIPaths extends CMIArray {\n  /**\n   * Constructor for inline Paths Array class\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.paths\",\n      children: aicc_constants.paths_children,\n    });\n  }\n}\n\n/**\n * Class for AICC Paths\n */\nexport class CMIPathsObject extends BaseCMI {\n  private _location_id = \"\";\n  private _date = \"\";\n  private _time = \"\";\n  private _status = \"\";\n  private _why_left = \"\";\n  private _time_in_element = \"\";\n\n  /**\n   * Constructor for AICC Paths objects\n   */\n  constructor() {\n    super(\"cmi.paths.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._location_id = \"\";\n    this._date = \"\";\n    this._time = \"\";\n    this._status = \"\";\n    this._why_left = \"\";\n    this._time_in_element = \"\";\n  }\n\n  /**\n   * Getter for _location_id\n   * @return {string}\n   */\n  get location_id(): string {\n    return this._location_id;\n  }\n\n  /**\n   * Setter for _location_id\n   * @param {string} location_id\n   */\n  set location_id(location_id: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".location_id\", location_id, aicc_regex.CMIString256)\n    ) {\n      this._location_id = location_id;\n    }\n  }\n\n  /**\n   * Getter for _date\n   * @return {string}\n   */\n  get date(): string {\n    return this._date;\n  }\n\n  /**\n   * Setter for _date\n   * @param {string} date\n   */\n  set date(date: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".date\", date, aicc_regex.CMIString256)) {\n      this._date = date;\n    }\n  }\n\n  /**\n   * Getter for _time\n   * @return {string}\n   */\n  get time(): string {\n    return this._time;\n  }\n\n  /**\n   * Setter for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".time\", time, aicc_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * Getter for _status\n   * @return {string}\n   */\n  get status(): string {\n    return this._status;\n  }\n\n  /**\n   * Setter for _status\n   * @param {string} status\n   */\n  set status(status: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".status\", status, aicc_regex.CMIStatus2)) {\n      this._status = status;\n    }\n  }\n\n  /**\n   * Getter for _why_left\n   * @return {string}\n   */\n  get why_left(): string {\n    return this._why_left;\n  }\n\n  /**\n   * Setter for _why_left\n   * @param {string} why_left\n   */\n  set why_left(why_left: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".why_left\", why_left, aicc_regex.CMIString256)) {\n      this._why_left = why_left;\n    }\n  }\n\n  /**\n   * Getter for _time_in_element\n   * @return {string}\n   */\n  get time_in_element(): string {\n    return this._time_in_element;\n  }\n\n  /**\n   * Setter for _time_in_element\n   * @param {string} time_in_element\n   */\n  set time_in_element(time_in_element: string) {\n    if (\n      checkAICCValidFormat(\n        this._cmi_element + \".time_in_element\",\n        time_in_element,\n        aicc_regex.CMITime,\n      )\n    ) {\n      this._time_in_element = time_in_element;\n    }\n  }\n\n  /**\n   * toJSON for cmi.paths.n object\n   * @return {\n   *    {\n   *      location_id: string,\n   *      date: string,\n   *      time: string,\n   *      status: string,\n   *      why_left: string,\n   *      time_in_element: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    location_id: string;\n    date: string;\n    time: string;\n    status: string;\n    why_left: string;\n    time_in_element: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      location_id: this.location_id,\n      date: this.date,\n      time: this.time,\n      status: this.status,\n      why_left: this.why_left,\n      time_in_element: this.time_in_element,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import * as Scorm12CMI from \"../scorm12/cmi\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { CMIEvaluation } from \"./evaluation\";\nimport { AICCStudentPreferences } from \"./student_preferences\";\nimport { CMIStudentDemographics } from \"./student_demographics\";\nimport { AICCCMIStudentData } from \"./student_data\";\nimport { CMIPaths } from \"./paths\";\nimport { CMICore } from \"./core\";\nimport { CMIObjectives } from \"../scorm12/objectives\";\nimport { CMIStudentData } from \"../scorm12/student_data\";\nimport { CMIStudentPreference } from \"../scorm12/student_preference\";\nimport { CMIInteractions } from \"../scorm12/interactions\";\n\n/**\n * CMI Class for AICC\n */\nexport class CMI extends Scorm12CMI.CMI {\n  /**\n   * Constructor for AICC CMI object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean = false) {\n    super(aicc_constants.cmi_children);\n    if (initialized) this.initialize();\n    this.student_preference = new AICCStudentPreferences();\n    this.student_data = new AICCCMIStudentData();\n    this.student_demographics = new CMIStudentDemographics();\n    this.evaluation = new CMIEvaluation();\n    this.paths = new CMIPaths();\n  }\n\n  public override student_data: AICCCMIStudentData;\n  public override student_preference: AICCStudentPreferences;\n  public student_demographics: CMIStudentDemographics;\n  public evaluation: CMIEvaluation;\n  public paths: CMIPaths;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.student_preference?.initialize();\n    this.student_data?.initialize();\n    this.student_demographics?.initialize();\n    this.evaluation?.initialize();\n    this.paths?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions,\n   *      paths: CMIPaths\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    suspend_data: string;\n    launch_data: string;\n    comments: string;\n    comments_from_lms: string;\n    core: CMICore;\n    objectives: CMIObjectives;\n    student_data: CMIStudentData;\n    student_preference: CMIStudentPreference;\n    student_demographics: CMIStudentDemographics;\n    interactions: CMIInteractions;\n    evaluation: CMIEvaluation;\n    paths: CMIPaths;\n  } {\n    this.jsonString = true;\n    const result = {\n      suspend_data: this.suspend_data,\n      launch_data: this.launch_data,\n      comments: this.comments,\n      comments_from_lms: this.comments_from_lms,\n      core: this.core,\n      objectives: this.objectives,\n      student_data: this.student_data,\n      student_preference: this.student_preference,\n      student_demographics: this.student_demographics,\n      interactions: this.interactions,\n      evaluation: this.evaluation,\n      paths: this.paths,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import Scorm12API from \"./Scorm12API\";\nimport { CMI } from \"./cmi/aicc/cmi\";\n\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport { CMITriesObject } from \"./cmi/aicc/tries\";\nimport { CMIAttemptRecordsObject } from \"./cmi/aicc/attempts\";\nimport { CMIEvaluationCommentsObject } from \"./cmi/aicc/evaluation\";\nimport { NAV } from \"./cmi/scorm12/nav\";\nimport { CMIPathsObject } from \"./cmi/aicc/paths\";\nimport { Settings } from \"./types/api_types\";\nimport { stringMatches } from \"./utilities\";\n\n/**\n * The AICC API class\n */\nclass AICC extends Scorm12API {\n  /**\n   * Constructor to create AICC API object\n   * @param {Settings} settings\n   */\n  constructor(settings?: Settings) {\n    super(settings);\n\n    this.cmi = new CMI();\n    this.nav = new NAV();\n  }\n\n  override cmi: CMI;\n  override nav: NAV;\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI | null}\n   */\n  override getChildElement(\n    CMIElement: string,\n    value: any,\n    foundFirstIndex: boolean,\n  ): BaseCMI | null {\n    let newChild = super.getChildElement(CMIElement, value, foundFirstIndex);\n\n    if (!newChild) {\n      if (stringMatches(CMIElement, \"cmi\\\\.evaluation\\\\.comments\\\\.\\\\d+\")) {\n        newChild = new CMIEvaluationCommentsObject();\n      } else if (stringMatches(CMIElement, \"cmi\\\\.student_data\\\\.tries\\\\.\\\\d+\")) {\n        newChild = new CMITriesObject();\n      } else if (stringMatches(CMIElement, \"cmi\\\\.student_data\\\\.attempt_records\\\\.\\\\d+\")) {\n        newChild = new CMIAttemptRecordsObject();\n      } else if (stringMatches(CMIElement, \"cmi\\\\.paths\\\\.\\\\d+\")) {\n        newChild = new CMIPathsObject();\n      }\n    }\n\n    return newChild;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {AICC} newAPI\n   */\n  override replaceWithAnotherScormAPI(newAPI: AICC) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.nav = newAPI.nav;\n  }\n}\n\nexport default AICC;\n"],"names":["global_constants","SCORM_TRUE","SCORM_FALSE","STATE_NOT_INITIALIZED","STATE_INITIALIZED","STATE_TERMINATED","scorm12_constants","cmi_children","core_children","score_children","comments_children","objectives_children","correct_responses_children","student_data_children","student_preference_children","interactions_children","error_descriptions","basicMessage","detailMessage","aicc_constants","student_demographics_children","tries_children","attempt_records_children","paths_children","global_errors","GENERAL","INITIALIZATION_FAILED","INITIALIZED","TERMINATED","TERMINATION_FAILURE","TERMINATION_BEFORE_INIT","MULTIPLE_TERMINATION","RETRIEVE_BEFORE_INIT","RETRIEVE_AFTER_TERM","STORE_BEFORE_INIT","STORE_AFTER_TERM","COMMIT_BEFORE_INIT","COMMIT_AFTER_TERM","ARGUMENT_ERROR","CHILDREN_ERROR","COUNT_ERROR","GENERAL_GET_FAILURE","GENERAL_SET_FAILURE","GENERAL_COMMIT_FAILURE","UNDEFINED_DATA_MODEL","UNIMPLEMENTED_ELEMENT","VALUE_NOT_INITIALIZED","INVALID_SET_VALUE","READ_ONLY_ELEMENT","WRITE_ONLY_ELEMENT","TYPE_MISMATCH","VALUE_OUT_OF_RANGE","DEPENDENCY_NOT_ESTABLISHED","scorm12_errors","scorm12_regex","CMIString256","CMIString4096","CMITime","CMITimespan","CMIInteger","CMISInteger","CMIDecimal","CMIIdentifier","CMIFeedback","CMIIndex","CMIStatus","CMIStatus2","CMIExit","CMIType","CMIResult","NAVEvent","score_range","audio_range","speed_range","weighting_range","text_range","aicc_regex","BaseScormValidationError","Error","constructor","CMIElement","errorCode","super","toString","this","_errorCode","Object","setPrototypeOf","prototype","ValidationError","errorMessage","detailedMessage","_detailedMessage","message","_errorMessage","Scorm12ValidationError","hasOwnProperty","call","String","BaseCMI","cmi_element","jsonString","_initialized","_cmi_element","initialized","start_time","_start_time","initialize","setStartTime","Date","getTime","BaseRootCMI","SECONDS_PER_MINUTE","SECONDS_PER_HOUR","getSecondsAsHHMMSS","memoize","totalSeconds","hours","Math","floor","dateObj","minutes","getUTCMinutes","seconds","getSeconds","ms","msStr","countDecimals","toFixed","split","replace","getTimeAsSeconds","timeString","timeRegex","RegExp","match","parts","Number","timeStr","regexStr","addHHMMSSTimeStrings","first","second","flatten","data","result","recurse","cur","prop","Array","isArray","forEach","item","i","length","keys","filter","p","isEmpty","unflatten","pattern","regex","from","exec","m","num","indexOf","formatMessage","functionName","baseLength","paddedFunction","padEnd","messageString","CMIElementBaseLength","stringMatches","str","tester","fn","keyFn","cache","Map","_len","arguments","args","_key","key","JSON","stringify","has","get","set","checkValidFormat","value","regexPattern","errorClass","allowEmptyString","formatRegex","matches","_errorClass","valueKey","checkValidRange","rangePattern","ranges","check12ValidFormat","check12ValidRange","ValidationService","validateScore","decimalRegex","scoreRange","invalidTypeCode","invalidRangeCode","validateScorm12Audio","validateScorm12Language","validateScorm12Speed","validateScorm12Text","validateReadOnly","validationService","CMIScore","params","_raw","_min","__children","__score_range","_max","max","__invalid_error_code","invalidErrorCode","__invalid_type_code","__invalid_range_code","__decimal_regex","__error_class","reset","_children","raw","min","toJSON","CMICore","_student_id","_student_name","_lesson_location","_credit","_lesson_status","_entry","_total_time","_lesson_mode","_exit","_session_time","_suspend_data","score","student_id","student_name","lesson_location","credit","lesson_status","entry","total_time","lesson_mode","exit","session_time","suspend_data","getCurrentTotalTime","sessionTime","startTime","Util","CMIArray","children","childArray","wipe","_count","CMIObjectives","CMIObjectivesObject","_id","_status","id","status","CMIStudentData","_mastery_score","_max_time_allowed","_time_limit_action","mastery_score","max_time_allowed","time_limit_action","CMIStudentPreference","_audio","_language","_speed","_text","audio","language","speed","text","CMIInteractions","CMIInteractionsObject","_time","_type","_weighting","_student_response","_result","_latency","objectives","correct_responses","time","type","weighting","student_response","latency","CMIInteractionsObjectivesObject","CMIInteractionsCorrectResponsesObject","_pattern","CMI","student_data","__version","_launch_data","_comments","_comments_from_lms","core","student_preference","interactions","launch_data","comments","comments_from_lms","_version","NAV","_event","event","SuccessStatus","PASSED","FAILED","UNKNOWN","CompletionStatus","COMPLETED","INCOMPLETE","LogLevelEnum","DEBUG","INFO","WARN","ERROR","NONE","DefaultSettings","autocommit","autocommitSeconds","asyncCommit","sendFullCommit","lmsCommitUrl","dataCommitFormat","commitRequestDataType","autoProgress","logLevel","selfReportSessionTime","alwaysSendTotalTime","renderCommonCommitFields","strict_errors","xhrHeaders","xhrWithCredentials","fetchMode","responseHandler","async","response","httpResult","json","responseText","parse","e","requestHandler","commitObject","onLogMessage","defaultLogHandler","scoItemIds","scoItemIdValidator","globalObjectiveIds","messageLevel","logMessage","console","error","warn","info","debug","log","ScheduledCommit","API","when","callback","_cancelled","_API","_timeout","setTimeout","wrapper","bind","_callback","cancel","clearTimeout","commit","HttpService","settings","error_codes","processHttpRequest","url","immediate","undefined","apiLog","processListeners","genericError","performFetch","then","transformResponse","process","fetch","method","mode","body","join","headers","credentials","keepalive","updateSettings","EventService","listenerMap","listenerCount","parseListenerName","listenerName","listenerSplit","on","listenerFunctions","listenerFunction","parsedListener","listeners","push","off","removeIndex","findIndex","obj","splice","delete","clear","newListeners","listener","listenerHasCMIElement","CMIElementsMatch","endsWith","prefix","slice","startsWith","SerializationService","loadFromFlattenedJSON","setCMIValue","isNotInitialized","setStartingData","int_pattern","obj_pattern","others","intMatch","index","field","objMatch","sort","a","b","localeCompare","processItems","items","loadFromJSON","currentCMIElement","tempCMIElement","renderCMIToJSONString","cmi","k","v","renderCMIToJSONObject","getCommitObject","terminateCommit","renderCommitObject","renderCommitCMI","apiLogLevel","shouldTerminateCommit","includes","LoggingService","_logLevel","_logHandler","getInstance","_instance","setLogLevel","level","getLogLevel","setLogHandler","handler","shouldLog","numericMessageLevel","getNumericLevel","numericLogLevel","getLoggingService","ErrorHandlingService","errorCodes","getLmsErrorMessageDetails","loggingService","_lastErrorCode","_errorCodes","_apiLog","_getLmsErrorMessageDetails","_loggingService","lastErrorCode","throwSCORMError","errorNumber","formattedMessage","clearSCORMError","success","handleValueAccessException","returnValue","validationError","errorType","name","stackTrace","stack","errorDetails","jsonError","createErrorHandlingService","BaseAPI","httpService","eventService","serializationService","cmiDataService","errorHandlingService","_settings","TypeError","currentState","_error_codes","_httpService","_eventService","element","_serializationService","_errorHandlingService","detail","commonReset","clearScheduledCommit","startingData","callbackName","initializeMessage","terminationMessage","isInitialized","isTerminated","previousSettings","terminate","checkTerminated","checkState","storeData","getValue","getCMIValue","setValue","commitCallback","scheduleCommit","getLastError","getErrorString","CMIErrorCode","getDiagnostic","beforeInitError","afterTermError","_errorNumber","_CMIElement","_value","_commonSetCMIValue","methodName","scorm2004","structure","refObject","foundFirstIndex","invalidErrorMessage","idx","attribute","substring","_checkObjectHasProperty","validateCorrectResponse","parseInt","isNaN","newChild","getChildElement","_commonGetCMIValue","uninitializedErrorMessage","_isTargetValid","target","StringKeyMap","getOwnPropertyDescriptor","getPrototypeOf","Scorm12API","mastery_override","statusSetByModule","nav","LMSInitialize","lmsInitialize","LMSFinish","lmsFinish","LMSGetValue","lmsGetValue","LMSSetValue","lmsSetValue","LMSCommit","lmsCommit","LMSGetLastError","lmsGetLastError","LMSGetErrorString","lmsGetErrorString","LMSGetDiagnostic","lmsGetDiagnostic","internalFinish","replaceWithAnotherScormAPI","newAPI","cmiExport","flattened","Utilities","totalTimeHHMMSS","totalTimeSeconds","lessonStatus","completionStatus","successStatus","scoreObject","parseFloat","runtimeData","originalStatus","aicc_errors","AICCValidationError","checkAICCValidFormat","CMIEvaluation","CMIEvaluationComments","CMIEvaluationCommentsObject","_content","_location","content","location","AICCStudentPreferences","_lesson_type","_text_color","_text_location","_text_size","_video","windows","lesson_type","text_color","text_location","text_size","video","CMIStudentDemographics","_city","_class","_company","_country","_experience","_familiar_name","_instructor_name","_title","_native_language","_state","_street_address","_telephone","_years_experience","city","class","clazz","company","country","experience","familiar_name","instructor_name","title","native_language","state","street_address","telephone","years_experience","CMITries","CMITriesObject","CMIAttemptRecords","CMIAttemptRecordsObject","AICCCMIStudentData","_tries_during_lesson","tries","attempt_records","tries_during_lesson","CMIPaths","CMIPathsObject","_location_id","_date","_why_left","_time_in_element","location_id","date","why_left","time_in_element","Scorm12CMI","student_demographics","evaluation","paths","AICC"],"mappings":"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"}