{"version":3,"file":"cross-frame-lms.js","sources":["../../src/CrossFrameLMS.ts"],"sourcesContent":["// src/CrossFrameLMS.ts\nimport { MessageData, MessageResponse } from \"./types/CrossFrame\";\nimport { IBaseAPI } from \"./interfaces/IBaseAPI\";\n\n/**\n * Server‐side SCORM adapter running in your LMS frame (lms.example.com).\n * Listens for postMessage from child (content) frames, invokes real API,\n * and posts back { messageId, result, error }.\n */\nexport default class CrossFrameLMS {\n  private readonly _api: IBaseAPI;\n  private readonly _origin: string;\n\n  constructor(api: IBaseAPI, targetOrigin: string = \"*\") {\n    this._api = api;\n    this._origin = targetOrigin;\n    window.addEventListener(\"message\", this._onMessage.bind(this));\n  }\n\n  private _onMessage(ev: MessageEvent) {\n    // Validate the message origin unless all origins are allowed\n    if (this._origin !== \"*\" && ev.origin !== this._origin) {\n      return;\n    }\n\n    const msg = ev.data as MessageData;\n    if (!msg?.messageId || !msg.method || !ev.source) return;\n\n    this._process(msg, ev.source as Window);\n  }\n\n  private _process(msg: MessageData, source: Window) {\n    const sendResponse = (result?: any, error?: { message: string; stack?: string }) => {\n      const resp: MessageResponse = { messageId: msg.messageId };\n      if (result !== undefined) resp.result = result;\n      if (error !== undefined) resp.error = error;\n      source.postMessage(resp, this._origin);\n    };\n\n    try {\n      const fn = (this._api as any)[msg.method];\n      if (typeof fn !== \"function\") {\n        sendResponse(undefined, { message: `Method ${msg.method} not found` });\n        return;\n      }\n\n      const result = fn.apply(this._api, msg.params);\n\n      if (result && typeof (result as Promise<any>).then === \"function\") {\n        (result as Promise<any>)\n          .then((r) => sendResponse(r))\n          .catch((e: any) => sendResponse(undefined, { message: e.message, stack: e.stack }));\n      } else {\n        sendResponse(result);\n      }\n    } catch (e: any) {\n      sendResponse(undefined, { message: e.message, stack: e.stack });\n    }\n  }\n}\n"],"names":[],"mappings":"AASA,MAAqB,aAAc,CAAA;AAAA,EAIjC,WAAA,CAAY,GAAe,EAAA,YAAA,GAAuB,GAAK,EAAA;AACrD,IAAA,IAAA,CAAK,IAAO,GAAA,GAAA;AACZ,IAAA,IAAA,CAAK,OAAU,GAAA,YAAA;AACf,IAAA,MAAA,CAAO,iBAAiB,SAAW,EAAA,IAAA,CAAK,UAAW,CAAA,IAAA,CAAK,IAAI,CAAC,CAAA;AAAA;AAC/D,EAEQ,WAAW,EAAkB,EAAA;AAEnC,IAAA,IAAI,KAAK,OAAY,KAAA,GAAA,IAAO,EAAG,CAAA,MAAA,KAAW,KAAK,OAAS,EAAA;AACtD,MAAA;AAAA;AAGF,IAAA,MAAM,MAAM,EAAG,CAAA,IAAA;AACf,IAAI,IAAA,CAAC,KAAK,SAAa,IAAA,CAAC,IAAI,MAAU,IAAA,CAAC,GAAG,MAAQ,EAAA;AAElD,IAAK,IAAA,CAAA,QAAA,CAAS,GAAK,EAAA,EAAA,CAAG,MAAgB,CAAA;AAAA;AACxC,EAEQ,QAAA,CAAS,KAAkB,MAAgB,EAAA;AACjD,IAAM,MAAA,YAAA,GAAe,CAAC,MAAA,EAAc,KAAgD,KAAA;AAClF,MAAA,MAAM,IAAwB,GAAA,EAAE,SAAW,EAAA,GAAA,CAAI,SAAU,EAAA;AACzD,MAAI,IAAA,MAAA,KAAW,MAAW,EAAA,IAAA,CAAK,MAAS,GAAA,MAAA;AACxC,MAAI,IAAA,KAAA,KAAU,MAAW,EAAA,IAAA,CAAK,KAAQ,GAAA,KAAA;AACtC,MAAO,MAAA,CAAA,WAAA,CAAY,IAAM,EAAA,IAAA,CAAK,OAAO,CAAA;AAAA,KACvC;AAEA,IAAI,IAAA;AACF,MAAA,MAAM,EAAM,GAAA,IAAA,CAAK,IAAa,CAAA,GAAA,CAAI,MAAM,CAAA;AACxC,MAAI,IAAA,OAAO,OAAO,UAAY,EAAA;AAC5B,QAAA,YAAA,CAAa,QAAW,EAAE,OAAA,EAAS,UAAU,GAAI,CAAA,MAAM,cAAc,CAAA;AACrE,QAAA;AAAA;AAGF,MAAA,MAAM,SAAS,EAAG,CAAA,KAAA,CAAM,IAAK,CAAA,IAAA,EAAM,IAAI,MAAM,CAAA;AAE7C,MAAA,IAAI,MAAU,IAAA,OAAQ,MAAwB,CAAA,IAAA,KAAS,UAAY,EAAA;AACjE,QAAC,MAAA,CACE,KAAK,CAAC,CAAA,KAAM,aAAa,CAAC,CAAC,EAC3B,KAAM,CAAA,CAAC,MAAW,YAAa,CAAA,KAAA,CAAA,EAAW,EAAE,OAAS,EAAA,CAAA,CAAE,SAAS,KAAO,EAAA,CAAA,CAAE,KAAM,EAAC,CAAC,CAAA;AAAA,OAC/E,MAAA;AACL,QAAA,YAAA,CAAa,MAAM,CAAA;AAAA;AACrB,aACO,CAAQ,EAAA;AACf,MAAa,YAAA,CAAA,MAAA,EAAW,EAAE,OAAS,EAAA,CAAA,CAAE,SAAS,KAAO,EAAA,CAAA,CAAE,OAAO,CAAA;AAAA;AAChE;AAEJ;;;;"}