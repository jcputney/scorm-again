{"version":3,"file":"cross-frame-lms.js","sources":["../../src/CrossFrameLMS.ts"],"sourcesContent":["// src/CrossFrameLMS.ts\nimport { MessageData, MessageResponse } from \"./types/CrossFrame\";\nimport { IBaseAPI } from \"./interfaces/IBaseAPI\";\n\n/**\n * Server‐side SCORM adapter running in your LMS frame (lms.example.com).\n * Listens for postMessage from child (content) frames, invokes real API,\n * and posts back { messageId, result, error }.\n */\nexport default class CrossFrameLMS {\n  private readonly _api: IBaseAPI;\n  private readonly _origin: string;\n\n  constructor(api: IBaseAPI, targetOrigin: string = \"*\") {\n    this._api = api;\n    this._origin = targetOrigin;\n    window.addEventListener(\"message\", this._onMessage.bind(this));\n  }\n\n  private _onMessage(ev: MessageEvent) {\n    // Validate the message origin unless all origins are allowed\n    if (this._origin !== \"*\" && ev.origin !== this._origin) {\n      return;\n    }\n\n    const msg = ev.data as MessageData;\n    if (!msg?.messageId || !msg.method || !ev.source) return;\n\n    this._process(msg, ev.source as Window);\n  }\n\n  private _process(msg: MessageData, source: Window) {\n    const sendResponse = (result?: any, error?: { message: string; stack?: string }) => {\n      const resp: MessageResponse = { messageId: msg.messageId };\n      if (result !== undefined) resp.result = result;\n      if (error !== undefined) resp.error = error;\n      source.postMessage(resp, this._origin);\n    };\n\n    try {\n      const fn = (this._api as any)[msg.method];\n      if (typeof fn !== \"function\") {\n        sendResponse(undefined, { message: `Method ${msg.method} not found` });\n        return;\n      }\n\n      const result = fn.apply(this._api, msg.params);\n\n      if (result && typeof (result as Promise<any>).then === \"function\") {\n        (result as Promise<any>)\n          .then((r) => sendResponse(r))\n          .catch((e: any) => sendResponse(undefined, { message: e.message, stack: e.stack }));\n      } else {\n        sendResponse(result);\n      }\n    } catch (e: any) {\n      sendResponse(undefined, { message: e.message, stack: e.stack });\n    }\n  }\n}\n"],"names":[],"mappings":"AASA,MAAqB,aAAA,CAAc;AAAA,EAIjC,WAAA,CAAY,GAAA,EAAe,YAAA,GAAuB,GAAA,EAAK;AACrD,IAAA,IAAA,CAAK,IAAA,GAAO,GAAA;AACZ,IAAA,IAAA,CAAK,OAAA,GAAU,YAAA;AACf,IAAA,MAAA,CAAO,iBAAiB,SAAA,EAAW,IAAA,CAAK,UAAA,CAAW,IAAA,CAAK,IAAI,CAAC,CAAA;AAAA;AAC/D,EAEQ,WAAW,EAAA,EAAkB;AAEnC,IAAA,IAAI,KAAK,OAAA,KAAY,GAAA,IAAO,EAAA,CAAG,MAAA,KAAW,KAAK,OAAA,EAAS;AACtD,MAAA;AAAA;AAGF,IAAA,MAAM,MAAM,EAAA,CAAG,IAAA;AACf,IAAA,IAAI,CAAC,KAAK,SAAA,IAAa,CAAC,IAAI,MAAA,IAAU,CAAC,GAAG,MAAA,EAAQ;AAElD,IAAA,IAAA,CAAK,QAAA,CAAS,GAAA,EAAK,EAAA,CAAG,MAAgB,CAAA;AAAA;AACxC,EAEQ,QAAA,CAAS,KAAkB,MAAA,EAAgB;AACjD,IAAA,MAAM,YAAA,GAAe,CAAC,MAAA,EAAc,KAAA,KAAgD;AAClF,MAAA,MAAM,IAAA,GAAwB,EAAE,SAAA,EAAW,GAAA,CAAI,SAAA,EAAU;AACzD,MAAA,IAAI,MAAA,KAAW,MAAA,EAAW,IAAA,CAAK,MAAA,GAAS,MAAA;AACxC,MAAA,IAAI,KAAA,KAAU,MAAA,EAAW,IAAA,CAAK,KAAA,GAAQ,KAAA;AACtC,MAAA,MAAA,CAAO,WAAA,CAAY,IAAA,EAAM,IAAA,CAAK,OAAO,CAAA;AAAA,KACvC;AAEA,IAAA,IAAI;AACF,MAAA,MAAM,EAAA,GAAM,IAAA,CAAK,IAAA,CAAa,GAAA,CAAI,MAAM,CAAA;AACxC,MAAA,IAAI,OAAO,OAAO,UAAA,EAAY;AAC5B,QAAA,YAAA,CAAa,QAAW,EAAE,OAAA,EAAS,UAAU,GAAA,CAAI,MAAM,cAAc,CAAA;AACrE,QAAA;AAAA;AAGF,MAAA,MAAM,SAAS,EAAA,CAAG,KAAA,CAAM,IAAA,CAAK,IAAA,EAAM,IAAI,MAAM,CAAA;AAE7C,MAAA,IAAI,MAAA,IAAU,OAAQ,MAAA,CAAwB,IAAA,KAAS,UAAA,EAAY;AACjE,QAAC,MAAA,CACE,KAAK,CAAC,CAAA,KAAM,aAAa,CAAC,CAAC,EAC3B,KAAA,CAAM,CAAC,MAAW,YAAA,CAAa,KAAA,CAAA,EAAW,EAAE,OAAA,EAAS,CAAA,CAAE,SAAS,KAAA,EAAO,CAAA,CAAE,KAAA,EAAO,CAAC,CAAA;AAAA,OACtF,MAAO;AACL,QAAA,YAAA,CAAa,MAAM,CAAA;AAAA;AACrB,aACO,CAAA,EAAQ;AACf,MAAA,YAAA,CAAa,MAAA,EAAW,EAAE,OAAA,EAAS,CAAA,CAAE,SAAS,KAAA,EAAO,CAAA,CAAE,OAAO,CAAA;AAAA;AAChE;AAEJ;;;;"}