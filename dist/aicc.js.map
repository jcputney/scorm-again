{"version":3,"file":"aicc.js","sources":["../src/constants/api_constants.ts","../src/constants/error_codes.ts","../src/constants/regex.ts","../src/exceptions.ts","../src/exceptions/scorm12_exceptions.ts","../src/cmi/common/base_cmi.ts","../src/utilities.ts","../src/cmi/common/validation.ts","../src/cmi/scorm12/validation.ts","../src/services/ValidationService.ts","../src/cmi/common/score.ts","../src/cmi/aicc/core.ts","../src/cmi/common/array.ts","../src/cmi/scorm12/objectives.ts","../src/cmi/scorm12/student_data.ts","../src/cmi/scorm12/student_preference.ts","../src/cmi/scorm12/interactions.ts","../src/cmi/scorm12/cmi.ts","../src/cmi/scorm12/nav.ts","../src/constants/enums.ts","../src/constants/default_settings.ts","../src/helpers/scheduled_commit.ts","../src/services/HttpService.ts","../src/services/EventService.ts","../src/services/SerializationService.ts","../src/services/LoggingService.ts","../src/services/ErrorHandlingService.ts","../src/services/OfflineStorageService.ts","../src/BaseAPI.ts","../src/Scorm12API.ts","../src/exceptions/aicc_exceptions.ts","../src/cmi/aicc/validation.ts","../src/cmi/aicc/evaluation.ts","../src/cmi/aicc/student_preferences.ts","../src/cmi/aicc/student_demographics.ts","../src/cmi/aicc/tries.ts","../src/cmi/aicc/attempts.ts","../src/cmi/aicc/student_data.ts","../src/cmi/aicc/paths.ts","../src/cmi/aicc/cmi.ts","../src/AICC.ts"],"sourcesContent":["interface ErrorDescription {\n  basicMessage: string;\n  detailMessage: string;\n}\n\ninterface ErrorDescriptions {\n  [key: string]: ErrorDescription;\n}\n\ninterface ScormConstants {\n  cmi_children: string;\n  core_children: string;\n  score_children: string;\n  comments_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface AiccConstants extends ScormConstants {\n  student_demographics_children: string;\n  tries_children: string;\n  attempt_records_children: string;\n  paths_children: string;\n}\n\ninterface Scorm2004Constants {\n  cmi_children: string;\n  comments_children: string;\n  score_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  adl_data_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface GlobalConstants {\n  SCORM_TRUE: string;\n  SCORM_FALSE: string;\n  STATE_NOT_INITIALIZED: number;\n  STATE_INITIALIZED: number;\n  STATE_TERMINATED: number;\n}\n\nexport const global_constants: GlobalConstants = {\n  SCORM_TRUE: \"true\",\n  SCORM_FALSE: \"false\",\n  STATE_NOT_INITIALIZED: 0,\n  STATE_INITIALIZED: 1,\n  STATE_TERMINATED: 2,\n};\n\nexport const scorm12_constants: ScormConstants = {\n  // Children lists\n  cmi_children:\n    \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions\",\n  core_children:\n    \"student_id,student_name,lesson_location,credit,lesson_status,entry,score,total_time,lesson_mode,exit,session_time\",\n  score_children: \"raw,min,max\",\n  comments_children: \"content,location,time\",\n  objectives_children: \"id,score,status\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio,language,speed,text\",\n  interactions_children:\n    \"id,objectives,time,type,correct_responses,weighting,student_response,result,latency\",\n  error_descriptions: {\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage: \"No specific error code exists to describe the error.\",\n    },\n    \"201\": {\n      basicMessage: \"Invalid argument error\",\n      detailMessage:\n        \"Indicates that an argument represents an invalid data model element or is otherwise incorrect.\",\n    },\n    \"202\": {\n      basicMessage: \"Element cannot have children\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_children\" for a data model element that does not support the \"_children\" suffix.',\n    },\n    \"203\": {\n      basicMessage: \"Element not an array - cannot have count\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_count\" for a data model element that does not support the \"_count\" suffix.',\n    },\n    \"301\": {\n      basicMessage: \"Not initialized\",\n      detailMessage: \"Indicates that an API call was made before the call to lmsInitialize.\",\n    },\n    \"401\": {\n      basicMessage: \"Not implemented error\",\n      detailMessage:\n        \"The data model element indicated in a call to LMSGetValue or LMSSetValue is valid, but was not implemented by this LMS. SCORM 1.2 defines a set of data model elements as being optional for an LMS to implement.\",\n    },\n    \"402\": {\n      basicMessage: \"Invalid set value, element is a keyword\",\n      detailMessage:\n        'Indicates that LMSSetValue was called on a data model element that represents a keyword (elements that end in \"_children\" and \"_count\").',\n    },\n    \"403\": {\n      basicMessage: \"Element is read only\",\n      detailMessage: \"LMSSetValue was called with a data model element that can only be read.\",\n    },\n    \"404\": {\n      basicMessage: \"Element is write only\",\n      detailMessage: \"LMSGetValue was called on a data model element that can only be written to.\",\n    },\n    \"405\": {\n      basicMessage: \"Incorrect Data Type\",\n      detailMessage:\n        \"LMSSetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a LMSSetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\nexport const aicc_constants: AiccConstants = {\n  ...scorm12_constants,\n  ...{\n    cmi_children:\n      \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions,evaluation\",\n    student_preference_children:\n      \"audio,language,lesson_type,speed,text,text_color,text_location,text_size,video,windows\",\n    student_data_children: \"attempt_number,tries,mastery_score,max_time_allowed,time_limit_action\",\n    student_demographics_children:\n      \"city,class,company,country,experience,familiar_name,instructor_name,title,native_language,state,street_address,telephone,years_experience\",\n    tries_children: \"time,status,score\",\n    attempt_records_children: \"score,lesson_status\",\n    paths_children: \"location_id,date,time,status,why_left,time_in_element\",\n  },\n};\n\nexport const scorm2004_constants: Scorm2004Constants = {\n  // Children lists\n  cmi_children:\n    \"_version,comments_from_learner,comments_from_lms,completion_status,credit,entry,exit,interactions,launch_data,learner_id,learner_name,learner_preference,location,max_time_allowed,mode,objectives,progress_measure,scaled_passing_score,score,session_time,success_status,suspend_data,time_limit_action,total_time\",\n  comments_children: \"comment,timestamp,location\",\n  score_children: \"max,raw,scaled,min\",\n  objectives_children: \"progress_measure,completion_status,success_status,description,score,id\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio_level,audio_captioning,delivery_speed,language\",\n  interactions_children:\n    \"id,type,objectives,timestamp,correct_responses,weighting,learner_response,result,latency,description\",\n  adl_data_children: \"id,store\",\n  error_descriptions: {\n    \"0\": {\n      basicMessage: \"No Error\",\n      detailMessage: \"No error occurred, the previous API call was successful.\",\n    },\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage: \"No specific error code exists to describe the error.\",\n    },\n    \"102\": {\n      basicMessage: \"General Initialization Failure\",\n      detailMessage: \"Call to Initialize failed for an unknown reason.\",\n    },\n    \"103\": {\n      basicMessage: \"Already Initialized\",\n      detailMessage: \"Call to Initialize failed because Initialize was already called.\",\n    },\n    \"104\": {\n      basicMessage: \"Content Instance Terminated\",\n      detailMessage: \"Call to Initialize failed because Terminate was already called.\",\n    },\n    \"111\": {\n      basicMessage: \"General Termination Failure\",\n      detailMessage: \"Call to Terminate failed for an unknown reason.\",\n    },\n    \"112\": {\n      basicMessage: \"Termination Before Initialization\",\n      detailMessage: \"Call to Terminate failed because it was made before the call to Initialize.\",\n    },\n    \"113\": {\n      basicMessage: \"Termination After Termination\",\n      detailMessage: \"Call to Terminate failed because Terminate was already called.\",\n    },\n    \"122\": {\n      basicMessage: \"Retrieve Data Before Initialization\",\n      detailMessage: \"Call to GetValue failed because it was made before the call to Initialize.\",\n    },\n    \"123\": {\n      basicMessage: \"Retrieve Data After Termination\",\n      detailMessage: \"Call to GetValue failed because it was made after the call to Terminate.\",\n    },\n    \"132\": {\n      basicMessage: \"Store Data Before Initialization\",\n      detailMessage: \"Call to SetValue failed because it was made before the call to Initialize.\",\n    },\n    \"133\": {\n      basicMessage: \"Store Data After Termination\",\n      detailMessage: \"Call to SetValue failed because it was made after the call to Terminate.\",\n    },\n    \"142\": {\n      basicMessage: \"Commit Before Initialization\",\n      detailMessage: \"Call to Commit failed because it was made before the call to Initialize.\",\n    },\n    \"143\": {\n      basicMessage: \"Commit After Termination\",\n      detailMessage: \"Call to Commit failed because it was made after the call to Terminate.\",\n    },\n    \"201\": {\n      basicMessage: \"General Argument Error\",\n      detailMessage:\n        \"An invalid argument was passed to an API method (usually indicates that Initialize, Commit or Terminate did not receive the expected empty string argument.\",\n    },\n    \"301\": {\n      basicMessage: \"General Get Failure\",\n      detailMessage:\n        \"Indicates a failed GetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"351\": {\n      basicMessage: \"General Set Failure\",\n      detailMessage:\n        \"Indicates a failed SetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"391\": {\n      basicMessage: \"General Commit Failure\",\n      detailMessage:\n        \"Indicates a failed Commit call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"401\": {\n      basicMessage: \"Undefined Data Model Element\",\n      detailMessage:\n        \"The data model element name passed to GetValue or SetValue is not a valid SCORM data model element.\",\n    },\n    \"402\": {\n      basicMessage: \"Unimplemented Data Model Element\",\n      detailMessage:\n        \"The data model element indicated in a call to GetValue or SetValue is valid, but was not implemented by this LMS. In SCORM 2004, this error would indicate an LMS that is not fully SCORM conformant.\",\n    },\n    \"403\": {\n      basicMessage: \"Data Model Element Value Not Initialized\",\n      detailMessage:\n        \"Attempt to read a data model element that has not been initialized by the LMS or through a SetValue call. This error condition is often reached during normal execution of a SCO.\",\n    },\n    \"404\": {\n      basicMessage: \"Data Model Element Is Read Only\",\n      detailMessage: \"SetValue was called with a data model element that can only be read.\",\n    },\n    \"405\": {\n      basicMessage: \"Data Model Element Is Write Only\",\n      detailMessage: \"GetValue was called on a data model element that can only be written to.\",\n    },\n    \"406\": {\n      basicMessage: \"Data Model Element Type Mismatch\",\n      detailMessage:\n        \"SetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Data Model Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a SetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\n","export type ErrorCode = {\n  [key: string]: number;\n};\n\nexport const global_errors: ErrorCode = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nexport const scorm12_errors: ErrorCode = {\n  ...global_errors,\n  RETRIEVE_BEFORE_INIT: 301,\n  STORE_BEFORE_INIT: 301,\n  COMMIT_BEFORE_INIT: 301,\n  ARGUMENT_ERROR: 201,\n  CHILDREN_ERROR: 202,\n  COUNT_ERROR: 203,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 401,\n  VALUE_NOT_INITIALIZED: 301,\n  INVALID_SET_VALUE: 402,\n  READ_ONLY_ELEMENT: 403,\n  WRITE_ONLY_ELEMENT: 404,\n  TYPE_MISMATCH: 405,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n\nexport const scorm2004_errors: ErrorCode = {\n  ...global_errors,\n  INITIALIZATION_FAILED: 102,\n  INITIALIZED: 103,\n  TERMINATED: 104,\n  TERMINATION_FAILURE: 111,\n  TERMINATION_BEFORE_INIT: 112,\n  MULTIPLE_TERMINATIONS: 113,\n  RETRIEVE_BEFORE_INIT: 122,\n  RETRIEVE_AFTER_TERM: 123,\n  STORE_BEFORE_INIT: 132,\n  STORE_AFTER_TERM: 133,\n  COMMIT_BEFORE_INIT: 142,\n  COMMIT_AFTER_TERM: 143,\n  ARGUMENT_ERROR: 201,\n  GENERAL_GET_FAILURE: 301,\n  GENERAL_SET_FAILURE: 351,\n  GENERAL_COMMIT_FAILURE: 391,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 402,\n  VALUE_NOT_INITIALIZED: 403,\n  READ_ONLY_ELEMENT: 404,\n  WRITE_ONLY_ELEMENT: 405,\n  TYPE_MISMATCH: 406,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n","export const scorm12_regex = {\n  CMIString256: \"^.{0,255}$\",\n  CMIString4096: \"^.{0,4096}$\",\n  CMITime: \"^(?:[01]\\\\d|2[0123]):(?:[012345]\\\\d):(?:[012345]\\\\d)$\",\n  CMITimespan: \"^([0-9]{2,}):([0-9]{2}):([0-9]{2})(.[0-9]{1,2})?$\",\n\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{0,3})(.[0-9]*)?$\",\n\n  CMIIdentifier: \"^[\\\\u0021-\\\\u007E\\\\s]{0,255}$\",\n  CMIFeedback: \"^.{0,255}$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMIStatus: \"^(passed|completed|failed|incomplete|browsed)$\",\n  CMIStatus2: \"^(passed|completed|failed|incomplete|browsed|not attempted)$\",\n  CMIExit: \"^(time-out|suspend|logout|)$\",\n  CMIType: \"^(true-false|choice|fill-in|matching|performance|sequencing|likert|numeric)$\",\n  CMIResult: \"^(correct|wrong|unanticipated|neutral|([0-9]{0,3})?(\\\\.[0-9]*)?)$\",\n  NAVEvent: \"^(previous|continue)$\",\n  // Data ranges\n  score_range: \"0#100\",\n  audio_range: \"-1#100\",\n  speed_range: \"-100#100\",\n  weighting_range: \"-100#100\",\n  text_range: \"-1#1\",\n};\nexport const aicc_regex = {\n  ...scorm12_regex,\n  ...{\n    CMIIdentifier: \"^\\\\w{1,255}$\",\n  },\n};\nexport const scorm2004_regex = {\n  CMIString200: \"^[\\\\u0000-\\\\uFFFF]{0,200}$\",\n  CMIString250: \"^[\\\\u0000-\\\\uFFFF]{0,250}$\",\n  CMIString1000: \"^[\\\\u0000-\\\\uFFFF]{0,1000}$\",\n  CMIString4000: \"^[\\\\u0000-\\\\uFFFF]{0,4000}$\",\n  CMIString64000: \"^[\\\\u0000-\\\\uFFFF]{0,64000}$\",\n  CMILang: \"^([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?$|^$\",\n\n  CMILangString250: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,250}$)?$\",\n\n  CMILangcr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?}))(.*?)$\",\n\n  CMILangString250cr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?})?(.{0,250})?)?$\",\n\n  CMILangString4000: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,4000}$)?$\",\n\n  CMITime:\n    \"^(19[7-9]{1}[0-9]{1}|20[0-2]{1}[0-9]{1}|203[0-8]{1})((-(0[1-9]{1}|1[0-2]{1}))((-(0[1-9]{1}|[1-2]{1}[0-9]{1}|3[0-1]{1}))(T([0-1]{1}[0-9]{1}|2[0-3]{1})((:[0-5]{1}[0-9]{1})((:[0-5]{1}[0-9]{1})((\\\\.[0-9]{1,6})((Z|([+|-]([0-1]{1}[0-9]{1}|2[0-3]{1})))(:[0-5]{1}[0-9]{1})?)?)?)?)?)?)?)?$\",\n  CMITimespan:\n    \"^P(?:([.,\\\\d]+)Y)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)W)?(?:([.,\\\\d]+)D)?(?:T?(?:([.,\\\\d]+)H)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)S)?)?$\",\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{1,5})(\\\\.[0-9]{1,18})?$\",\n  CMIIdentifier: \"^\\\\S{1,250}[a-zA-Z0-9]$\",\n  CMIShortIdentifier: \"^[\\\\w\\\\.\\\\-\\\\_]{1,250}$\",\n  CMILongIdentifier: \"^(?:(?!urn:)\\\\S{1,4000}|urn:[A-Za-z0-9-]{1,31}:\\\\S{1,4000}|.{1,4000})$\",\n  // need to re-examine this\n  CMIFeedback: \"^.*$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  CMIIndexStore: \".N(\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMICStatus: \"^(completed|incomplete|not attempted|unknown)$\",\n  CMISStatus: \"^(passed|failed|unknown)$\",\n  CMIExit: \"^(time-out|suspend|logout|normal)$\",\n  CMIType:\n    \"^(true-false|choice|fill-in|long-fill-in|matching|performance|sequencing|likert|numeric|other)$\",\n  CMIResult: \"^(correct|incorrect|unanticipated|neutral|-?([0-9]{1,4})(\\\\.[0-9]{1,18})?)$\",\n  NAVEvent:\n    \"^(previous|continue|exit|exitAll|abandon|abandonAll|suspendAll|_none_|(\\\\{target=(?<choice_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?choice|(\\\\{target=(?<jump_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?jump)$\",\n\n  NAVBoolean: \"^(unknown|true|false$)\",\n  NAVTarget: \"^{target=\\\\S{0,}[a-zA-Z0-9-_]+}$\",\n  // Data ranges\n  scaled_range: \"-1#1\",\n  audio_range: \"0#999.9999999\",\n  speed_range: \"0#999.9999999\",\n  text_range: \"-1#1\",\n  progress_range: \"0#1\",\n};\n","type APIError = {\n  errorCode: number;\n  errorMessage: string;\n  detailedMessage: string;\n};\n\nexport class BaseScormValidationError extends Error {\n  constructor(CMIElement: string, errorCode: number) {\n    super(`${CMIElement} : ${errorCode.toString()}`);\n    this._errorCode = errorCode;\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, BaseScormValidationError.prototype);\n  }\n\n  private readonly _errorCode: number;\n\n  /**\n   * Getter for _errorCode\n   * @return {number}\n   */\n  get errorCode(): number {\n    return this._errorCode;\n  }\n}\n\n/**\n * Base Validation Exception\n */\nexport class ValidationError extends BaseScormValidationError implements APIError {\n  /**\n   * Constructor to take in an error message and code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   * @param {string} errorMessage\n   * @param {string} detailedMessage\n   */\n  constructor(\n    CMIElement: string,\n    errorCode: number,\n    errorMessage: string,\n    detailedMessage?: string,\n  ) {\n    super(CMIElement, errorCode);\n    this.message = `${CMIElement} : ${errorMessage}`;\n    this._errorMessage = errorMessage;\n    if (detailedMessage) {\n      this._detailedMessage = detailedMessage;\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  private readonly _errorMessage: string;\n  private readonly _detailedMessage: string = \"\";\n\n  /**\n   * Getter for _errorMessage\n   * @return {string}\n   */\n  get errorMessage(): string {\n    return this._errorMessage;\n  }\n\n  /**\n   * Getter for _detailedMessage\n   * @return {string}\n   */\n  get detailedMessage(): string {\n    return this._detailedMessage;\n  }\n}\n","import { ValidationError } from \"../exceptions\";\nimport { scorm12_constants } from \"../constants/api_constants\";\n\nconst scorm12_errors = scorm12_constants.error_descriptions;\n\n/**\n * SCORM 1.2 Validation Error\n */\nexport class Scorm12ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm12_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm12_errors[String(errorCode)].basicMessage,\n        scorm12_errors[String(errorCode)].detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm12_errors[\"101\"].basicMessage,\n        scorm12_errors[\"101\"].detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm12ValidationError.prototype);\n  }\n}\n","/**\n * Base class for API cmi objects\n */\nexport abstract class BaseCMI {\n  jsonString = false;\n  protected readonly _cmi_element: string;\n  protected _initialized = false;\n  private _start_time: number | undefined;\n\n  /**\n   * Constructor for BaseCMI\n   * @param {string} cmi_element\n   */\n  constructor(cmi_element: string) {\n    this._cmi_element = cmi_element;\n  }\n\n  /**\n   * Getter for _initialized\n   * @return {boolean}\n   */\n  get initialized(): boolean {\n    return this._initialized;\n  }\n\n  /**\n   * Getter for _start_time\n   * @return {number | undefined}\n   */\n  get start_time(): number | undefined {\n    return this._start_time;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize(): void {\n    this._initialized = true;\n  }\n\n  /**\n   * Called when the player should override the 'session_time' provided by\n   * the module\n   */\n  setStartTime(): void {\n    this._start_time = new Date().getTime();\n  }\n\n  abstract reset(): void;\n}\n\n/**\n * Base class for cmi root objects\n */\nexport abstract class BaseRootCMI extends BaseCMI {\n  abstract getCurrentTotalTime(): string;\n}\n","/**\n * Constants for time conversion calculations.\n * These are used throughout the codebase for converting between different time formats.\n */\nexport const SECONDS_PER_SECOND = 1.0;\nexport const SECONDS_PER_MINUTE = 60;\nexport const SECONDS_PER_HOUR = 60 * SECONDS_PER_MINUTE;\nexport const SECONDS_PER_DAY = 24 * SECONDS_PER_HOUR;\n\ntype Designation = {\n  [key: string]: number;\n};\n\n/**\n * A record with string keys and unknown values.\n * This is a more type-safe alternative to using `any`.\n */\nexport type StringKeyMap = Record<string, unknown>;\n\nconst designations: Designation = {\n  D: SECONDS_PER_DAY,\n  H: SECONDS_PER_HOUR,\n  M: SECONDS_PER_MINUTE,\n  S: SECONDS_PER_SECOND,\n};\n\n/**\n * Converts a number of seconds to a formatted time string in HH:MM:SS format.\n * This function handles decimal seconds and ensures proper formatting with leading zeros.\n *\n * @param {number|null} totalSeconds - The total number of seconds to convert. If null or negative, returns \"00:00:00\".\n * @return {string} A formatted time string in HH:MM:SS format, with up to 2 decimal places for seconds if applicable.\n *\n * @example\n * // Returns \"01:30:45\"\n * getSecondsAsHHMMSS(5445);\n *\n * @example\n * // Returns \"00:00:30.5\"\n * getSecondsAsHHMMSS(30.5);\n *\n * @example\n * // Returns \"00:00:00\"\n * getSecondsAsHHMMSS(null);\n */\nexport const getSecondsAsHHMMSS = memoize((totalSeconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!totalSeconds || totalSeconds <= 0) {\n    return \"00:00:00\";\n  }\n\n  const hours = Math.floor(totalSeconds / SECONDS_PER_HOUR);\n  const dateObj = new Date(totalSeconds * 1000);\n  const minutes = dateObj.getUTCMinutes();\n  // make sure we add any possible decimal value\n  const seconds = dateObj.getSeconds();\n  const ms = totalSeconds % 1.0;\n  let msStr = \"\";\n\n  if (countDecimals(ms) > 0) {\n    if (countDecimals(ms) > 2) {\n      msStr = ms.toFixed(2);\n    } else {\n      msStr = String(ms);\n    }\n\n    msStr = \".\" + msStr.split(\".\")[1];\n  }\n\n  return (hours + \":\" + minutes + \":\" + seconds).replace(/\\b\\d\\b/g, \"0$&\") + msStr;\n});\n\n/**\n * Converts a number of seconds to an ISO 8601 duration string (e.g., \"PT1H30M45S\").\n * This function handles the complexity of formatting according to the ISO 8601 standard,\n * including the proper placement of the \"T\" separator for time components.\n *\n * @param {number|null} seconds - The number of seconds to convert. If null or negative, returns \"PT0S\".\n * @return {string} An ISO 8601 formatted duration string.\n *\n * @example\n * // Returns \"PT1H30M45S\" (1 hour, 30 minutes, 45 seconds)\n * getSecondsAsISODuration(5445);\n *\n * @example\n * // Returns \"PT30.5S\" (30.5 seconds)\n * getSecondsAsISODuration(30.5);\n *\n * @example\n * // Returns \"P1DT1H\" (1 day, 1 hour)\n * getSecondsAsISODuration(90000);\n *\n * @example\n * // Returns \"PT0S\" (0 seconds)\n * getSecondsAsISODuration(null);\n */\nexport const getSecondsAsISODuration = memoize((seconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!seconds || seconds <= 0) {\n    return \"PT0S\";\n  }\n\n  let duration = \"P\";\n  let remainder = seconds;\n\n  // Convert to array of entries and use functional methods\n  const designationEntries = Object.entries(designations);\n\n  // Process each time designation\n  designationEntries.forEach(([designationsKey, current_seconds]) => {\n    let value = Math.floor(remainder / current_seconds);\n    remainder = remainder % current_seconds;\n\n    // Limit decimal places\n    if (countDecimals(remainder) > 2) {\n      remainder = Number(Number(remainder).toFixed(2));\n    }\n\n    // If we have anything left in the remainder, and we're currently adding\n    // seconds to the duration, go ahead and add the decimal to the seconds\n    if (designationsKey === \"S\" && remainder > 0) {\n      value += remainder;\n    }\n\n    if (value) {\n      // Add the 'T' separator for time components if needed\n      const needsTimeSeparator =\n        (duration.indexOf(\"D\") > 0 || [\"H\", \"M\", \"S\"].includes(designationsKey)) &&\n        duration.indexOf(\"T\") === -1;\n\n      if (needsTimeSeparator) {\n        duration += \"T\";\n      }\n\n      duration += `${value}${designationsKey}`;\n    }\n  });\n\n  return duration;\n});\n\n/**\n * Converts a time string in HH:MM:SS format to the equivalent number of seconds.\n * This function is flexible and can handle various input types, converting them to strings as needed.\n *\n * @param {string|number|boolean|null} timeString - The time string to convert, typically in HH:MM:SS format.\n *                                                 If not a string, it will be converted to one.\n *                                                 If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} timeRegex - The regular expression used to validate the time string format.\n *                                    If a string is provided, it will be converted to a RegExp.\n * @return {number} The total number of seconds represented by the time string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getTimeAsSeconds(\"01:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getTimeAsSeconds(\"invalid\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 30 (converts number to string \"30\" then parses as 0:0:30)\n * getTimeAsSeconds(30, /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport const getTimeAsSeconds = memoize(\n  (timeString: string | number | boolean | null, timeRegex: RegExp | string): number => {\n    if (typeof timeString === \"number\" || typeof timeString === \"boolean\") {\n      timeString = String(timeString);\n    }\n    if (typeof timeRegex === \"string\") {\n      timeRegex = new RegExp(timeRegex);\n    }\n    if (!timeString || !timeString?.match?.(timeRegex)) {\n      return 0;\n    }\n\n    const parts = timeString.split(\":\");\n    const hours = Number(parts[0]);\n    const minutes = Number(parts[1]);\n    const seconds = Number(parts[2]);\n    return hours * 3600 + minutes * 60 + seconds;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (timeString, timeRegex) => {\n    const timeStr = typeof timeString === \"string\" ? timeString : String(timeString ?? \"\");\n    const regexStr = typeof timeRegex === \"string\" ? timeRegex : (timeRegex?.toString() ?? \"\");\n    return `${timeStr}:${regexStr}`;\n  },\n);\n\n/**\n * Converts an ISO 8601 duration string (e.g., \"PT1H30M45S\") to the equivalent number of seconds.\n * This function parses the duration string using a regular expression to extract years, days,\n * hours, minutes, and seconds components.\n *\n * @param {string|null} duration - The ISO 8601 duration string to convert.\n *                                If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n *                                       The regex should have capture groups for years, days, hours, minutes, and seconds.\n * @return {number} The total number of seconds represented by the duration string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getDurationAsSeconds(\"PT1H30M45S\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 90000 (1 day, 1 hour)\n * getDurationAsSeconds(\"P1DT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getDurationAsSeconds(\"invalid\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport const getDurationAsSeconds = memoize(\n  (duration: string | null, durationRegex: RegExp | string): number => {\n    if (typeof durationRegex === \"string\") {\n      durationRegex = new RegExp(durationRegex);\n    }\n\n    if (!duration || !duration?.match?.(durationRegex)) {\n      return 0;\n    }\n\n    const [, years, _, , days, hours, minutes, seconds] =\n      new RegExp(durationRegex).exec?.(duration) ?? [];\n    let result = 0.0;\n    result += Number(seconds) || 0.0;\n    result += Number(minutes) * 60.0 || 0.0;\n    result += Number(hours) * 3600.0 || 0.0;\n    result += Number(days) * (60 * 60 * 24.0) || 0.0;\n    result += Number(years) * (60 * 60 * 24 * 365.0) || 0.0;\n    return result;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (duration, durationRegex) => {\n    const durationStr = duration ?? \"\";\n    const regexStr =\n      typeof durationRegex === \"string\" ? durationRegex : (durationRegex?.toString() ?? \"\");\n    return `${durationStr}:${regexStr}`;\n  },\n);\n\n/**\n * Adds together two ISO 8601 duration strings and returns the result as a new ISO 8601 duration string.\n * This function works by converting both durations to seconds, adding them together, and then\n * converting the result back to an ISO 8601 duration string.\n *\n * @param {string} first - The first ISO 8601 duration string.\n * @param {string} second - The second ISO 8601 duration string.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n * @return {string} A new ISO 8601 duration string representing the sum of the two input durations.\n *\n * @example\n * // Returns \"PT2H\" (1 hour + 1 hour = 2 hours)\n * addTwoDurations(\"PT1H\", \"PT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"PT1H30M\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addTwoDurations(\"PT1H\", \"PT30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"P1DT1H30M\" (1 day + 1 hour and 30 minutes = 1 day, 1 hour, and 30 minutes)\n * addTwoDurations(\"P1D\", \"PT1H30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport function addTwoDurations(\n  first: string,\n  second: string,\n  durationRegex: RegExp | string,\n): string {\n  const regex: RegExp =\n    typeof durationRegex === \"string\" ? new RegExp(durationRegex) : durationRegex;\n  return getSecondsAsISODuration(\n    getDurationAsSeconds(first, regex) + getDurationAsSeconds(second, regex),\n  );\n}\n\n/**\n * Adds together two time strings in HH:MM:SS format and returns the result as a new time string.\n * This function works by converting both time strings to seconds, adding them together, and then\n * converting the result back to an HH:MM:SS format.\n *\n * @param {string} first - The first time string in HH:MM:SS format.\n * @param {string} second - The second time string in HH:MM:SS format.\n * @param {RegExp|string} timeRegex - The regular expression used to validate and parse the time strings.\n *                                   If a string is provided, it will be converted to a RegExp.\n * @return {string} A new time string in HH:MM:SS format representing the sum of the two input times.\n *\n * @example\n * // Returns \"02:00:00\" (1 hour + 1 hour = 2 hours)\n * addHHMMSSTimeStrings(\"01:00:00\", \"01:00:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:00\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:45\" (1 hour + 30 minutes and 45 seconds = 1 hour, 30 minutes, and 45 seconds)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport function addHHMMSSTimeStrings(\n  first: string,\n  second: string,\n  timeRegex: RegExp | string,\n): string {\n  if (typeof timeRegex === \"string\") {\n    timeRegex = new RegExp(timeRegex);\n  }\n  return getSecondsAsHHMMSS(\n    getTimeAsSeconds(first, timeRegex) + getTimeAsSeconds(second, timeRegex),\n  );\n}\n\n/**\n * Flattens a nested JSON object into a flat object with dot notation for nested properties.\n * This function recursively traverses the object and creates new keys using dot notation\n * for nested objects and bracket notation for arrays.\n *\n * @param {StringKeyMap} data - The nested object to flatten.\n * @return {StringKeyMap} A flattened object where nested properties are represented with dot notation.\n *\n * @example\n * // Returns { \"a\": 1, \"b.c\": 2, \"b.d\": 3, \"e[0]\": 4, \"e[1]\": 5 }\n * flatten({\n *   a: 1,\n *   b: { c: 2, d: 3 },\n *   e: [4, 5]\n * });\n *\n * @example\n * // Returns { \"\": [] } for an empty array\n * flatten([]);\n *\n * @example\n * // Returns { \"\": {} } for an empty object\n * flatten({});\n */\nexport function flatten(data: StringKeyMap): StringKeyMap {\n  const result: StringKeyMap = {};\n\n  /**\n   * Recurse through the object\n   * @param {*} cur\n   * @param {*} prop\n   */\n  function recurse(cur: any, prop: any) {\n    if (Object(cur) !== cur) {\n      result[prop] = cur;\n    } else if (Array.isArray(cur)) {\n      // Use forEach instead of for loop\n      cur.forEach((item, i) => {\n        recurse(item, `${prop}[${i}]`);\n      });\n\n      if (cur.length === 0) result[prop] = [];\n    } else {\n      const keys = Object.keys(cur).filter((p) => Object.prototype.hasOwnProperty.call(cur, p));\n\n      const isEmpty = keys.length === 0;\n\n      // Use forEach instead of for...in loop\n      keys.forEach((p) => {\n        recurse(cur[p], prop ? `${prop}.${p}` : p);\n      });\n\n      if (isEmpty && prop) result[prop] = {};\n    }\n  }\n\n  recurse(data, \"\");\n  return result;\n}\n\n/**\n * Converts a flattened object back into a nested object structure.\n * This function is the inverse of `flatten()`. It parses dot notation and bracket notation\n * in property names to recreate the original nested structure.\n *\n * @param {StringKeyMap} data - The flattened object to unflatten.\n * @return {object} A nested object recreated from the flattened structure.\n *\n * @example\n * // Returns { a: 1, b: { c: 2, d: 3 }, e: [4, 5] }\n * unflatten({\n *   \"a\": 1,\n *   \"b.c\": 2,\n *   \"b.d\": 3,\n *   \"e[0]\": 4,\n *   \"e[1]\": 5\n * });\n *\n * @example\n * // Handles array indices correctly\n * unflatten({\n *   \"users[0].name\": \"John\",\n *   \"users[0].email\": \"john@example.com\",\n *   \"users[1].name\": \"Jane\",\n *   \"users[1].email\": \"jane@example.com\"\n * });\n * // Returns:\n * // {\n * //   users: [\n * //     { name: \"John\", email: \"john@example.com\" },\n * //     { name: \"Jane\", email: \"jane@example.com\" }\n * //   ]\n * // }\n */\nexport function unflatten(data: StringKeyMap): object {\n  \"use strict\";\n\n  if (Object(data) !== data || Array.isArray(data)) return data;\n  const result: StringKeyMap = {};\n\n  // Regex pattern for parsing property paths\n  const pattern = /\\.?([^.[\\]]+)|\\[(\\d+)]/g;\n\n  // Get all own properties and process them\n  Object.keys(data)\n    .filter((p) => Object.prototype.hasOwnProperty.call(data, p))\n    .forEach((p) => {\n      let cur = result;\n      let prop = \"\";\n\n      // Create a new regex instance for each property to reset lastIndex\n      const regex = new RegExp(pattern);\n\n      // Process all matches in the property path\n      Array.from({ length: p.match(new RegExp(pattern, \"g\"))?.length ?? 0 }, () =>\n        regex.exec(p),\n      ).forEach((m) => {\n        if (m) {\n          // Create array or object as needed\n          cur = (cur[prop] ?? (cur[prop] = m[2] ? [] : ({} as StringKeyMap))) as StringKeyMap;\n          prop = m[2] || m[1];\n        }\n      });\n\n      cur[prop] = data[p];\n    });\n\n  return (result[\"\"] ?? result) as object;\n}\n\n/**\n * Counts the number of decimal places in a number.\n * This function handles both integer and floating-point numbers.\n *\n * @param {number} num - The number to analyze.\n * @return {number} The number of decimal places. Returns 0 for integers or if the number doesn't have a decimal point.\n *\n * @example\n * // Returns 0\n * countDecimals(42);\n *\n * @example\n * // Returns 2\n * countDecimals(3.14);\n *\n * @example\n * // Returns 5\n * countDecimals(1.23456);\n */\nexport function countDecimals(num: number): number {\n  if (Math.floor(num) === num || String(num)?.indexOf?.(\".\") < 0) return 0;\n  const parts = num.toString().split(\".\")?.[1];\n  return parts?.length ?? 0;\n}\n\n/**\n * Formats SCORM messages for consistent and readable logging.\n * This function pads the function name and CMI element to create aligned log messages\n * that are easier to read in log files or console output.\n *\n * @param {string} functionName - The name of the function that generated the message.\n * @param {string} message - The message content to be logged.\n * @param {string} [CMIElement] - Optional. The CMI element related to the message.\n * @return {string} A formatted message string with consistent padding.\n *\n * @example\n * // Returns \"initialize          : Successfully initialized\"\n * formatMessage(\"initialize\", \"Successfully initialized\");\n *\n * @example\n * // Returns \"getValue            : cmi.core.student_id                                             : 12345\"\n * formatMessage(\"getValue\", \"12345\", \"cmi.core.student_id\");\n *\n * @example\n * // Returns \"setValue            : cmi.core.lesson_status                                          : completed\"\n * formatMessage(\"setValue\", \"completed\", \"cmi.core.lesson_status\");\n */\nexport function formatMessage(functionName: string, message: string, CMIElement?: string): string {\n  const baseLength = 20;\n\n  // Use string padding instead of loops\n  const paddedFunction = functionName.padEnd(baseLength);\n  let messageString = `${paddedFunction}: `;\n\n  if (CMIElement) {\n    const CMIElementBaseLength = 70;\n    // Add CMIElement and pad to the required length\n    messageString += CMIElement;\n    messageString = messageString.padEnd(CMIElementBaseLength);\n  }\n\n  // Add the message (or empty string if null/undefined)\n  messageString += message ?? \"\";\n\n  return messageString;\n}\n\n/**\n * Checks if a string contains a specific pattern using regular expression matching.\n * This function is a wrapper around JavaScript's String.match() method that handles\n * null/undefined values gracefully.\n *\n * @param {string} str - The string to search within. If null or undefined, returns false.\n * @param {string} tester - The pattern to search for. Can be a regular expression pattern.\n * @return {boolean} True if the pattern is found in the string, false otherwise.\n *\n * @example\n * // Returns true\n * stringMatches(\"Hello, world!\", \"world\");\n *\n * @example\n * // Returns true\n * stringMatches(\"The quick brown fox\", \"\\\\w+\\\\s+\\\\w+\");\n *\n * @example\n * // Returns false\n * stringMatches(\"Hello, world!\", \"universe\");\n *\n * @example\n * // Returns false (handles null gracefully)\n * stringMatches(null, \"test\");\n */\nexport function stringMatches(str: string, tester: string): boolean {\n  return str?.match(tester) !== null;\n}\n\n/**\n * Creates a memoized (cached) version of a function for performance optimization.\n * This function caches the results of previous calls with the same arguments,\n * avoiding redundant calculations for repeated calls with the same input.\n *\n * @template T - The type of the function to memoize\n * @param {T} fn - The function to memoize\n * @param {Function} [keyFn] - Optional function to generate a custom cache key.\n *                           Useful for functions with complex arguments that can't be serialized.\n * @return {T} A memoized version of the input function with the same signature\n *\n * @example\n * // Basic usage with a simple function\n * const memoizedAdd = memoize((a, b) => {\n *   console.log('Calculating...');\n *   return a + b;\n * });\n *\n * memoizedAdd(1, 2); // Logs \"Calculating...\" and returns 3\n * memoizedAdd(1, 2); // Returns 3 without logging (uses cached result)\n *\n * @example\n * // Using a custom key function for objects that can't be serialized\n * const memoizedProcessUser = memoize(\n *   (user) => {\n *     console.log('Processing user...');\n *     return { ...user, processed: true };\n *   },\n *   (user) => user.id // Use user.id as the cache key\n * );\n *\n * memoizedProcessUser({ id: 123, name: 'John' }); // Logs and processes\n * memoizedProcessUser({ id: 123, name: 'John' }); // Uses cached result\n */\nexport function memoize<T extends (...args: any[]) => any>(\n  fn: T,\n  keyFn?: (...args: Parameters<T>) => string,\n): T {\n  const cache = new Map<string, ReturnType<T>>();\n\n  return ((...args: Parameters<T>): ReturnType<T> => {\n    const key = keyFn ? keyFn(...args) : JSON.stringify(args);\n\n    return cache.has(key)\n      ? (cache.get(key) as ReturnType<T>)\n      : (() => {\n          const result = fn(...args);\n          cache.set(key, result);\n          return result;\n        })();\n  }) as T;\n}\n","import { BaseScormValidationError } from \"../../exceptions\";\nimport { memoize } from \"../../utilities\";\n\n/**\n * Check if the value matches the proper format. If not, throw proper error code.\n *\n * @param {string} value\n * @param {string} regexPattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @param {boolean} [allowEmptyString]\n * @return {boolean}\n */\nexport const checkValidFormat = memoize(\n  (\n    CMIElement: string,\n    value: string,\n    regexPattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n    allowEmptyString?: boolean,\n  ): boolean => {\n    // noinspection SuspiciousTypeOfGuard\n    if (typeof value !== \"string\") {\n      return false;\n    }\n    const formatRegex = new RegExp(regexPattern);\n    const matches = value.match(formatRegex);\n    if (allowEmptyString && value === \"\") {\n      return true;\n    }\n    if (value === undefined || !matches || matches[0] === \"\") {\n      throw new errorClass(CMIElement, errorCode);\n    }\n    return true;\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, regexPattern, errorCode, _errorClass, allowEmptyString) => {\n    // Use typeof for non-string values to ensure consistent cache keys\n    // noinspection SuspiciousTypeOfGuard\n    const valueKey = typeof value === \"string\" ? value : `[${typeof value}]`;\n    return `${CMIElement}:${valueKey}:${regexPattern}:${errorCode}:${allowEmptyString || false}`;\n  },\n);\n\n/**\n * Check if the value matches the proper range. If not, throw proper error code.\n *\n * @param {any} value\n * @param {string} rangePattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @return {boolean}\n */\nexport const checkValidRange = memoize(\n  (\n    CMIElement: string,\n    value: any,\n    rangePattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean => {\n    const ranges = rangePattern.split(\"#\");\n    value = value * 1.0;\n    if (value >= ranges[0]) {\n      if (ranges[1] === \"*\" || value <= ranges[1]) {\n        return true;\n      } else {\n        throw new errorClass(CMIElement, errorCode);\n      }\n    } else {\n      throw new errorClass(CMIElement, errorCode);\n    }\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, rangePattern, errorCode, _errorClass) =>\n    `${CMIElement}:${value}:${rangePattern}:${errorCode}`,\n);\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm12_errors.TYPE_MISMATCH,\n    Scorm12ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidRange(\n  CMIElement: string,\n  value: any,\n  rangePattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  if (!allowEmptyString && value === \"\") {\n    throw new Scorm12ValidationError(CMIElement, scorm12_errors.VALUE_OUT_OF_RANGE);\n  }\n\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm12_errors.VALUE_OUT_OF_RANGE,\n    Scorm12ValidationError,\n  );\n}\n","import { BaseScormValidationError } from \"../exceptions\";\nimport { checkValidFormat, checkValidRange } from \"../cmi/common/validation\";\nimport { check12ValidFormat, check12ValidRange } from \"../cmi/scorm12/validation\";\nimport { scorm12_regex } from \"../constants/regex\";\nimport { scorm12_errors } from \"../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../exceptions/scorm12_exceptions\";\n\n/**\n * Service for validating CMI data model properties\n */\nexport class ValidationService {\n  /**\n   * Validates a score property (raw, min, max)\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @param {string} decimalRegex - The regex pattern for decimal validation\n   * @param {string | false} scoreRange - The range pattern for score validation, or false if no range validation is needed\n   * @param {number} invalidTypeCode - The error code for invalid type\n   * @param {number} invalidRangeCode - The error code for invalid range\n   * @param {typeof BaseScormValidationError} errorClass - The error class to use for validation errors\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScore(\n    CMIElement: string,\n    value: string,\n    decimalRegex: string,\n    scoreRange: string | false,\n    invalidTypeCode: number,\n    invalidRangeCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean {\n    return (\n      checkValidFormat(CMIElement, value, decimalRegex, invalidTypeCode, errorClass) &&\n      (!scoreRange || checkValidRange(CMIElement, value, scoreRange, invalidRangeCode, errorClass))\n    );\n    // This line should never be reached due to exceptions being thrown\n  }\n\n  /**\n   * Validates a SCORM 1.2 audio property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Audio(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.audio_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 language property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Language(CMIElement: string, value: string): boolean {\n    return check12ValidFormat(CMIElement, value, scorm12_regex.CMIString256);\n  }\n\n  /**\n   * Validates a SCORM 1.2 speed property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Speed(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.speed_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 text property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Text(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.text_range)\n    );\n  }\n\n  /**\n   * Validates if a property is read-only\n   *\n   * @param {string} CMIElement\n   * @param {boolean} initialized - Whether the object is initialized\n   * @throws {BaseScormValidationError} - Throws an error if the object is initialized\n   */\n  validateReadOnly(CMIElement: string, initialized: boolean): void {\n    if (initialized) {\n      throw new Scorm12ValidationError(CMIElement, scorm12_errors.READ_ONLY_ELEMENT);\n    }\n  }\n}\n\n// Export a singleton instance of the ValidationService\nexport const validationService = new ValidationService();\n","import { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"./base_cmi\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { validationService } from \"../../services/ValidationService\";\nimport { ScoreObject } from \"../../types/api_types\";\n\n/**\n * Base class for cmi *.score objects\n */\nexport class CMIScore extends BaseCMI {\n  private readonly __children: string;\n  private readonly __score_range: string | false;\n  private readonly __invalid_error_code: number;\n  private readonly __invalid_type_code: number;\n  private readonly __invalid_range_code: number;\n  private readonly __decimal_regex: string;\n  private readonly __error_class: typeof BaseScormValidationError;\n  protected _raw = \"\";\n  protected _min = \"\";\n  protected _max: string;\n\n  /**\n   * Constructor for *.score\n   * @param {\n   *     score_children: string,\n   *     score_range: string,\n   *     max: string,\n   *     invalidErrorCode: number,\n   *     invalidTypeCode: number,\n   *     invalidRangeCode: number,\n   *     decimalRegex: string,\n   *     errorClass: typeof BaseScormValidationError\n   * } params\n   */\n  constructor(params: {\n    CMIElement: string;\n    score_children?: string;\n    score_range?: string;\n    max?: string;\n    invalidErrorCode?: number;\n    invalidTypeCode?: number;\n    invalidRangeCode?: number;\n    decimalRegex?: string;\n    errorClass: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n\n    this.__children = params.score_children || scorm12_constants.score_children;\n    this.__score_range = !params.score_range ? false : scorm12_regex.score_range;\n    this._max = params.max || params.max === \"\" ? params.max : \"100\";\n    this.__invalid_error_code = params.invalidErrorCode || scorm12_errors.INVALID_SET_VALUE;\n    this.__invalid_type_code = params.invalidTypeCode || scorm12_errors.TYPE_MISMATCH;\n    this.__invalid_range_code = params.invalidRangeCode || scorm12_errors.VALUE_OUT_OF_RANGE;\n    this.__decimal_regex = params.decimalRegex || scorm12_regex.CMIDecimal;\n    this.__error_class = params.errorClass;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this.__error_class(this._cmi_element + \"._children\", this.__invalid_error_code);\n  }\n\n  /**\n   * Getter for _raw\n   * @return {string}\n   */\n  get raw(): string {\n    return this._raw;\n  }\n\n  /**\n   * Setter for _raw\n   * @param {string} raw\n   */\n  set raw(raw: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".raw\",\n        raw,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._raw = raw;\n    }\n  }\n\n  /**\n   * Getter for _min\n   * @return {string}\n   */\n  get min(): string {\n    return this._min;\n  }\n\n  /**\n   * Setter for _min\n   * @param {string} min\n   */\n  set min(min: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".min\",\n        min,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._min = min;\n    }\n  }\n\n  /**\n   * Getter for _max\n   * @return {string}\n   */\n  get max(): string {\n    return this._max;\n  }\n\n  /**\n   * Setter for _max\n   * @param {string} max\n   */\n  set max(max: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".max\",\n        max,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._max = max;\n    }\n  }\n\n  /**\n   * Getter for _score_range\n   * @return {string | false}\n   */\n  public getScoreObject(): ScoreObject {\n    const scoreObject: ScoreObject = {};\n    if (!Number.isNaN(Number.parseFloat(this.raw))) {\n      scoreObject.raw = Number.parseFloat(this.raw);\n    }\n    if (!Number.isNaN(Number.parseFloat(this.min))) {\n      scoreObject.min = Number.parseFloat(this.min);\n    }\n    if (!Number.isNaN(Number.parseFloat(this.max))) {\n      scoreObject.max = Number.parseFloat(this.max);\n    }\n    return scoreObject;\n  }\n\n  /**\n   * toJSON for *.score\n   * @return {\n   *    {\n   *      min: string,\n   *      max: string,\n   *      raw: string\n   *    }\n   *    }\n   */\n  toJSON(): {\n    min: string;\n    max: string;\n    raw: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { check12ValidFormat } from \"../scorm12/validation\";\nimport * as Util from \"../../utilities\";\n\n/**\n * Class representing the `cmi.core` object\n * @extends BaseCMI\n */\nexport class CMICore extends BaseCMI {\n  /**\n   * Constructor for `cmi.core`\n   */\n  constructor() {\n    super(\"cmi.core\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.core.score\",\n      score_children: scorm12_constants.score_children,\n      score_range: scorm12_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n\n  public readonly score: CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  private __children = scorm12_constants.core_children;\n  private _student_id = \"\";\n  private _student_name = \"\";\n  private _lesson_location = \"\";\n  private _credit = \"\";\n  private _lesson_status = \"not attempted\";\n  private _entry = \"\";\n  private _total_time = \"\";\n  private _lesson_mode = \"normal\";\n  private _exit = \"\";\n  private _session_time = \"00:00:00\";\n  private _suspend_data = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._exit = \"\";\n    this._entry = \"\";\n\n    /**\n     * Resetting ensures we accurately track the time spent on each individual SCO session independently. Each new\n     * session should start from zero, so we can reset cmi.core.session_time at the beginning of each session.\n     */\n    this._session_time = \"00:00:00\";\n\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for _student_id\n   * @return {string}\n   */\n  get student_id(): string {\n    return this._student_id;\n  }\n\n  /**\n   * Setter for _student_id. Can only be called before  initialization.\n   * @param {string} student_id\n   */\n  set student_id(student_id: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".student_id\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._student_id = student_id;\n    }\n  }\n\n  /**\n   * Getter for _student_name\n   * @return {string}\n   */\n  get student_name(): string {\n    return this._student_name;\n  }\n\n  /**\n   * Setter for _student_name. Can only be called before  initialization.\n   * @param {string} student_name\n   */\n  set student_name(student_name: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".student_name\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._student_name = student_name;\n    }\n  }\n\n  /**\n   * Getter for _lesson_location\n   * @return {string}\n   */\n  get lesson_location(): string {\n    return this._lesson_location;\n  }\n\n  /**\n   * Setter for _lesson_location\n   * @param {string} lesson_location\n   */\n  set lesson_location(lesson_location: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".lesson_location\",\n        lesson_location,\n        scorm12_regex.CMIString256,\n        true,\n      )\n    ) {\n      this._lesson_location = lesson_location;\n    }\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this._credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before  initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".credit\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._credit = credit;\n    }\n  }\n\n  /**\n   * Getter for _lesson_status\n   * @return {string}\n   */\n  get lesson_status(): string {\n    return this._lesson_status;\n  }\n\n  /**\n   * Setter for _lesson_status\n   * @param {string} lesson_status\n   */\n  set lesson_status(lesson_status: string) {\n    if (this.initialized) {\n      if (\n        check12ValidFormat(\n          this._cmi_element + \".lesson_status\",\n          lesson_status,\n          scorm12_regex.CMIStatus,\n        )\n      ) {\n        this._lesson_status = lesson_status;\n      }\n    } else {\n      if (\n        check12ValidFormat(\n          this._cmi_element + \".lesson_status\",\n          lesson_status,\n          scorm12_regex.CMIStatus2,\n        )\n      ) {\n        this._lesson_status = lesson_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this._entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before  initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".entry\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._entry = entry;\n    }\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this._total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before  initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".total_time\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._total_time = total_time;\n    }\n  }\n\n  /**\n   * Getter for _lesson_mode\n   * @return {string}\n   */\n  get lesson_mode(): string {\n    return this._lesson_mode;\n  }\n\n  /**\n   * Setter for _lesson_mode. Can only be called before  initialization.\n   * @param {string} lesson_mode\n   */\n  set lesson_mode(lesson_mode: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".lesson_mode\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._lesson_mode = lesson_mode;\n    }\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".exit\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    if (check12ValidFormat(this._cmi_element + \".exit\", exit, scorm12_regex.CMIExit, true)) {\n      this._exit = exit;\n    }\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".session_time\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".session_time\",\n        session_time,\n        scorm12_regex.CMITimespan,\n      )\n    ) {\n      this._session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this._suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".suspend_data\",\n        suspend_data,\n        scorm12_regex.CMIString4096,\n        true,\n      )\n    ) {\n      this._suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   * @param {number} start_time\n   * @return {string}\n   */\n  getCurrentTotalTime(start_time: number | undefined): string {\n    let sessionTime = this._session_time;\n    const startTime = start_time;\n\n    if (typeof startTime !== \"undefined\" && startTime !== null) {\n      const seconds = new Date().getTime() - startTime;\n      sessionTime = Util.getSecondsAsHHMMSS(seconds / 1000);\n    }\n\n    return Util.addHHMMSSTimeStrings(\n      this._total_time,\n      sessionTime,\n      new RegExp(scorm12_regex.CMITimespan),\n    );\n  }\n\n  /**\n   * toJSON for cmi.core\n   *\n   * @return {\n   *    {\n   *      student_name: string,\n   *      entry: string,\n   *      exit: string,\n   *      score: CMIScore,\n   *      student_id: string,\n   *      lesson_mode: string,\n   *      lesson_location: string,\n   *      lesson_status: string,\n   *      credit: string,\n   *      session_time: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    student_name: string;\n    entry: string;\n    exit: string;\n    score: CMIScore;\n    student_id: string;\n    lesson_mode: string;\n    lesson_location: string;\n    lesson_status: string;\n    credit: string;\n    session_time: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      student_id: this.student_id,\n      student_name: this.student_name,\n      lesson_location: this.lesson_location,\n      credit: this.credit,\n      lesson_status: this.lesson_status,\n      entry: this.entry,\n      lesson_mode: this.lesson_mode,\n      exit: this.exit,\n      session_time: this.session_time,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"./base_cmi\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Base class for cmi *.n objects\n */\nexport class CMIArray extends BaseCMI {\n  private readonly _errorCode: number;\n  private readonly _errorClass: typeof BaseScormValidationError;\n  private readonly __children: string;\n  public childArray: any[];\n\n  /**\n   * Constructor cmi *.n arrays\n   * @param {object} params\n   */\n  constructor(params: {\n    CMIElement: string;\n    children: string;\n    errorCode?: number;\n    errorClass?: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n    this.__children = params.children;\n    this._errorCode = params.errorCode || scorm12_errors.GENERAL;\n    this._errorClass = params.errorClass || BaseScormValidationError;\n    this.childArray = [];\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(wipe: boolean = false): void {\n    this._initialized = false;\n    if (wipe) {\n      this.childArray = [];\n    } else {\n      // Reset all children\n      for (let i = 0; i < this.childArray.length; i++) {\n        this.childArray[i].reset();\n      }\n    }\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this._errorClass(this._cmi_element + \"._children\", this._errorCode);\n  }\n\n  /**\n   * Getter for _count\n   * @return {number}\n   */\n  get _count(): number {\n    return this.childArray.length;\n  }\n\n  /**\n   * Setter for _count. Just throws an error.\n   * @param {number} _count\n   */\n  set _count(_count: number) {\n    throw new this._errorClass(this._cmi_element + \"._count\", this._errorCode);\n  }\n\n  /**\n   * toJSON for *.n arrays\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result: { [key: string]: any } = {};\n    for (let i = 0; i < this.childArray.length; i++) {\n      result[i + \"\"] = this.childArray[i];\n    }\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { check12ValidFormat } from \"./validation\";\nimport { CMIArray } from \"../common/array\";\n\n/**\n * Class representing SCORM 1.2's `cmi.objectives` object\n * @extends CMIArray\n */\nexport class CMIObjectives extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives`\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.objectives\",\n      children: scorm12_constants.objectives_children,\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super(\"cmi.objectives.n\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.objectives.n.score\",\n      score_children: scorm12_constants.score_children,\n      score_range: scorm12_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n\n  public readonly score: CMIScore;\n\n  private _id = \"\";\n  private _status = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._id = \"\";\n    this._status = \"\";\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check12ValidFormat(this._cmi_element + \".id\", id, scorm12_regex.CMIIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _status\n   * @return {string}\n   */\n  get status(): string {\n    return this._status;\n  }\n\n  /**\n   * Setter for _status\n   * @param {string} status\n   */\n  set status(status: string) {\n    if (check12ValidFormat(this._cmi_element + \".status\", status, scorm12_regex.CMIStatus2)) {\n      this._status = status;\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   * @return {\n   *    {\n   *      id: string,\n   *      status: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    status: string;\n    score: CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      status: this.status,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { validationService } from \"../../services/ValidationService\";\n\n/**\n * Class representing the SCORM 1.2 cmi.student_data object\n * @extends BaseCMI\n */\nexport class CMIStudentData extends BaseCMI {\n  private readonly __children;\n  private _mastery_score = \"\";\n  private _max_time_allowed = \"\";\n  private _time_limit_action = \"\";\n\n  /**\n   * Constructor for cmi.student_data\n   * @param {string} student_data_children\n   */\n  constructor(student_data_children?: string) {\n    super(\"cmi.student_data\");\n    this.__children = student_data_children\n      ? student_data_children\n      : scorm12_constants.student_data_children;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for _master_score\n   * @return {string}\n   */\n  get mastery_score(): string {\n    return this._mastery_score;\n  }\n\n  /**\n   * Setter for _master_score. Can only be called before  initialization.\n   * @param {string} mastery_score\n   */\n  set mastery_score(mastery_score: string) {\n    validationService.validateReadOnly(this._cmi_element + \".mastery_score\", this.initialized);\n    this._mastery_score = mastery_score;\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this._max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before  initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    validationService.validateReadOnly(this._cmi_element + \".max_time_allowed\", this.initialized);\n    this._max_time_allowed = max_time_allowed;\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this._time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before  initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    validationService.validateReadOnly(this._cmi_element + \".time_limit_action\", this.initialized);\n    this._time_limit_action = time_limit_action;\n  }\n\n  /**\n   * toJSON for cmi.student_data\n   *\n   * @return {\n   *    {\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      mastery_score: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    mastery_score: string;\n    max_time_allowed: string;\n    time_limit_action: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      mastery_score: this.mastery_score,\n      max_time_allowed: this.max_time_allowed,\n      time_limit_action: this.time_limit_action,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { validationService } from \"../../services/ValidationService\";\n\n/**\n * Class representing the SCORM 1.2 cmi.student_preference object\n * @extends BaseCMI\n */\nexport class CMIStudentPreference extends BaseCMI {\n  private readonly __children;\n\n  /**\n   * Constructor for cmi.student_preference\n   * @param {string} student_preference_children\n   */\n  constructor(student_preference_children?: string) {\n    super(\"cmi.student_preference\");\n    this.__children = student_preference_children\n      ? student_preference_children\n      : scorm12_constants.student_preference_children;\n  }\n\n  private _audio = \"\";\n  private _language = \"\";\n  private _speed = \"\";\n  private _text = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for _audio\n   * @return {string}\n   */\n  get audio(): string {\n    return this._audio;\n  }\n\n  /**\n   * Setter for _audio\n   * @param {string} audio\n   */\n  set audio(audio: string) {\n    if (validationService.validateScorm12Audio(this._cmi_element + \".audio\", audio)) {\n      this._audio = audio;\n    }\n  }\n\n  /**\n   * Getter for _language\n   * @return {string}\n   */\n  get language(): string {\n    return this._language;\n  }\n\n  /**\n   * Setter for _language\n   * @param {string} language\n   */\n  set language(language: string) {\n    if (validationService.validateScorm12Language(this._cmi_element + \".language\", language)) {\n      this._language = language;\n    }\n  }\n\n  /**\n   * Getter for _speed\n   * @return {string}\n   */\n  get speed(): string {\n    return this._speed;\n  }\n\n  /**\n   * Setter for _speed\n   * @param {string} speed\n   */\n  set speed(speed: string) {\n    if (validationService.validateScorm12Speed(this._cmi_element + \".speed\", speed)) {\n      this._speed = speed;\n    }\n  }\n\n  /**\n   * Getter for _text\n   * @return {string}\n   */\n  get text(): string {\n    return this._text;\n  }\n\n  /**\n   * Setter for _text\n   * @param {string} text\n   */\n  set text(text: string) {\n    if (validationService.validateScorm12Text(this._cmi_element + \".text\", text)) {\n      this._text = text;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_preference\n   *\n   * @return {\n   *    {\n   *      audio: string,\n   *      language: string,\n   *      speed: string,\n   *      text: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    audio: string;\n    language: string;\n    speed: string;\n    text: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio: this.audio,\n      language: this.language,\n      speed: this.speed,\n      text: this.text,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check12ValidFormat, check12ValidRange } from \"./validation\";\nimport { scorm12_regex } from \"../../constants/regex\";\n\n/**\n * Class representing the SCORM 1.2 `cmi.interactions`\n * @extends CMIArray\n */\nexport class CMIInteractions extends CMIArray {\n  /**\n   * Constructor for `cmi.interactions`\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.interactions\",\n      children: scorm12_constants.interactions_children,\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n object\n   */\n  constructor() {\n    super(\"cmi.interactions.n\");\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: Scorm12ValidationError,\n      children: scorm12_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.correct_responses\",\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: Scorm12ValidationError,\n      children: scorm12_constants.correct_responses_children,\n    });\n  }\n\n  public readonly objectives: CMIArray;\n  public readonly correct_responses: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  private _id = \"\";\n  private _time = \"\";\n  private _type = \"\";\n  private _weighting = \"\";\n  private _student_response = \"\";\n  private _result = \"\";\n  private _latency = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n\n    this._id = \"\";\n    this._time = \"\";\n    this._type = \"\";\n    this._weighting = \"\";\n    this._student_response = \"\";\n    this._result = \"\";\n    this._latency = \"\";\n\n    this.objectives?.reset();\n    this.correct_responses?.reset();\n  }\n\n  /**\n   * Getter for _id. Should only be called during JSON export.\n   * @return {string}\n   */\n  get id(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".id\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check12ValidFormat(this._cmi_element + \".id\", id, scorm12_regex.CMIIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get time(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".time\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._time;\n  }\n\n  /**\n   * Setter for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (check12ValidFormat(this._cmi_element + \".time\", time, scorm12_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * Getter for _type. Should only be called during JSON export.\n   * @return {string}\n   */\n  get type(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".type\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._type;\n  }\n\n  /**\n   * Setter for _type\n   * @param {string} type\n   */\n  set type(type: string) {\n    if (check12ValidFormat(this._cmi_element + \".type\", type, scorm12_regex.CMIType)) {\n      this._type = type;\n    }\n  }\n\n  /**\n   * Getter for _weighting. Should only be called during JSON export.\n   * @return {string}\n   */\n  get weighting(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".weighting\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._weighting;\n  }\n\n  /**\n   * Setter for _weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting: string) {\n    if (\n      check12ValidFormat(this._cmi_element + \".weighting\", weighting, scorm12_regex.CMIDecimal) &&\n      check12ValidRange(this._cmi_element + \".weighting\", weighting, scorm12_regex.weighting_range)\n    ) {\n      this._weighting = weighting;\n    }\n  }\n\n  /**\n   * Getter for _student_response. Should only be called during JSON export.\n   * @return {string}\n   */\n  get student_response(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".student_response\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._student_response;\n  }\n\n  /**\n   * Setter for _student_response\n   * @param {string} student_response\n   */\n  set student_response(student_response: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".student_response\",\n        student_response,\n        scorm12_regex.CMIFeedback,\n        true,\n      )\n    ) {\n      this._student_response = student_response;\n    }\n  }\n\n  /**\n   * Getter for _result. Should only be called during JSON export.\n   * @return {string}\n   */\n  get result(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".result\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._result;\n  }\n\n  /**\n   * Setter for _result\n   * @param {string} result\n   */\n  set result(result: string) {\n    if (check12ValidFormat(this._cmi_element + \".result\", result, scorm12_regex.CMIResult)) {\n      this._result = result;\n    }\n  }\n\n  /**\n   * Getter for _latency. Should only be called during JSON export.\n   * @return {string}\n   */\n  get latency(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".latency\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._latency;\n  }\n\n  /**\n   * Setter for _latency\n   * @param {string} latency\n   */\n  set latency(latency: string) {\n    if (check12ValidFormat(this._cmi_element + \".latency\", latency, scorm12_regex.CMITimespan)) {\n      this._latency = latency;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      time: string,\n   *      type: string,\n   *      weighting: string,\n   *      student_response: string,\n   *      result: string,\n   *      latency: string,\n   *      objectives: CMIArray,\n   *      correct_responses: CMIArray\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    time: string;\n    type: string;\n    weighting: string;\n    student_response: string;\n    result: string;\n    latency: string;\n    objectives: CMIArray;\n    correct_responses: CMIArray;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      time: this.time,\n      type: this.type,\n      weighting: this.weighting,\n      student_response: this.student_response,\n      result: this.result,\n      latency: this.latency,\n      objectives: this.objectives,\n      correct_responses: this.correct_responses,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n.objectives.n\");\n  }\n\n  private _id = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._id = \"\";\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check12ValidFormat(this._cmi_element + \".id\", id, scorm12_regex.CMIIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.correct_responses.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.correct_responses.n\n   */\n  constructor() {\n    super(\"cmi.interactions.correct_responses.n\");\n  }\n\n  private _pattern = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._pattern = \"\";\n  }\n\n  /**\n   * Getter for _pattern\n   * @return {string}\n   */\n  get pattern(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".pattern\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._pattern;\n  }\n\n  /**\n   * Setter for _pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern: string) {\n    if (\n      check12ValidFormat(this._cmi_element + \".pattern\", pattern, scorm12_regex.CMIFeedback, true)\n    ) {\n      this._pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.correct_responses.n\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    pattern: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      pattern: this._pattern,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { BaseRootCMI } from \"../common/base_cmi\";\nimport { check12ValidFormat } from \"./validation\";\nimport { CMICore } from \"../aicc/core\";\nimport { CMIObjectives } from \"./objectives\";\nimport { CMIStudentData } from \"./student_data\";\nimport { CMIStudentPreference } from \"./student_preference\";\nimport { CMIInteractions } from \"./interactions\";\n\n/**\n * Class representing the cmi object for SCORM 1.2\n */\nexport class CMI extends BaseRootCMI {\n  private readonly __children: string = \"\";\n  private __version: string = \"3.4\";\n  private _launch_data: string = \"\";\n  private _comments: string = \"\";\n  private _comments_from_lms: string = \"\";\n\n  /**\n   * Constructor for the SCORM 1.2 cmi object\n   * @param {string} cmi_children\n   * @param {(CMIStudentData|AICCCMIStudentData)} student_data\n   * @param {boolean} initialized\n   */\n  constructor(cmi_children?: string, student_data?: CMIStudentData, initialized?: boolean) {\n    super(\"cmi\");\n    if (initialized) this.initialize();\n    this.__children = cmi_children ? cmi_children : scorm12_constants.cmi_children;\n    this.core = new CMICore();\n    this.objectives = new CMIObjectives();\n    this.student_data = student_data ? student_data : new CMIStudentData();\n    this.student_preference = new CMIStudentPreference();\n    this.interactions = new CMIInteractions();\n  }\n\n  public core: CMICore;\n  public objectives: CMIObjectives;\n  public student_data: CMIStudentData;\n  public student_preference: CMIStudentPreference;\n  public interactions: CMIInteractions;\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._launch_data = \"\";\n    this._comments = \"\";\n    this.core?.reset();\n    this.objectives = new CMIObjectives();\n    this.interactions = new CMIInteractions();\n    this.student_data?.reset();\n    this.student_preference?.reset();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.core?.initialize();\n    this.objectives?.initialize();\n    this.student_data?.initialize();\n    this.student_preference?.initialize();\n    this.interactions?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions\n   *    }\n   *  }\n   */\n  toJSON(): {\n    suspend_data: string;\n    launch_data: string;\n    comments: string;\n    comments_from_lms: string;\n    core: CMICore;\n    objectives: CMIObjectives;\n    student_data: CMIStudentData;\n    student_preference: CMIStudentPreference;\n    interactions: CMIInteractions;\n  } {\n    this.jsonString = true;\n    const result = {\n      suspend_data: this.suspend_data,\n      launch_data: this.launch_data,\n      comments: this.comments,\n      comments_from_lms: this.comments_from_lms,\n      core: this.core,\n      objectives: this.objectives,\n      student_data: this.student_data,\n      student_preference: this.student_preference,\n      interactions: this.interactions,\n    };\n    this.jsonString = false;\n    return result;\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   */\n  get _version(): string {\n    return this.__version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._version\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this.core?.suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (this.core) {\n      this.core.suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this._launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before  initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".launch_data\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._launch_data = launch_data;\n    }\n  }\n\n  /**\n   * Getter for _comments\n   * @return {string}\n   */\n  get comments(): string {\n    return this._comments;\n  }\n\n  /**\n   * Setter for _comments\n   * @param {string} comments\n   */\n  set comments(comments: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".comments\",\n        comments,\n        scorm12_regex.CMIString4096,\n        true,\n      )\n    ) {\n      this._comments = comments;\n    }\n  }\n\n  /**\n   * Getter for _comments_from_lms\n   * @return {string}\n   */\n  get comments_from_lms(): string {\n    return this._comments_from_lms;\n  }\n\n  /**\n   * Setter for _comments_from_lms. Can only be called before  initialization.\n   * @param {string} comments_from_lms\n   */\n  set comments_from_lms(comments_from_lms: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".comments_from_lms\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._comments_from_lms = comments_from_lms;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string}\n   */\n  getCurrentTotalTime(): string {\n    return this.core.getCurrentTotalTime(this.start_time);\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { check12ValidFormat } from \"./validation\";\nimport { scorm12_regex } from \"../../constants/regex\";\n\n/**\n * Class for AICC Navigation object\n */\nexport class NAV extends BaseCMI {\n  /**\n   * Constructor for NAV object\n   */\n  constructor() {\n    super(\"cmi.nav\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._event = \"\";\n    this._initialized = false;\n  }\n\n  private _event = \"\";\n\n  /**\n   * Getter for _event\n   * @return {string}\n   */\n  get event(): string {\n    return this._event;\n  }\n\n  /**\n   * Setter for _event\n   * @param {string} event\n   */\n  set event(event: string) {\n    if (\n      event === \"\" ||\n      check12ValidFormat(this._cmi_element + \".event\", event, scorm12_regex.NAVEvent)\n    ) {\n      this._event = event;\n    }\n  }\n\n  /**\n   * toJSON for nav object\n   * @return {\n   *    {\n   *      event: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    event: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      event: this.event,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","// Using plain objects instead of enums for better compatibility with strip-only mode\n// This approach avoids TypeScript enum runtime code while maintaining the same API\n\n// NAVBoolean values\nexport const NAVBoolean = {\n  UNKNOWN: \"unknown\",\n  TRUE: \"true\",\n  FALSE: \"false\",\n};\n\n// Type for NAVBoolean values\nexport type NAVBoolean = (typeof NAVBoolean)[keyof typeof NAVBoolean];\n\n// SuccessStatus values\nexport const SuccessStatus = {\n  PASSED: \"passed\",\n  FAILED: \"failed\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for SuccessStatus values\nexport type SuccessStatus = (typeof SuccessStatus)[keyof typeof SuccessStatus];\n\n// CompletionStatus values\nexport const CompletionStatus = {\n  COMPLETED: \"completed\",\n  INCOMPLETE: \"incomplete\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for CompletionStatus values\nexport type CompletionStatus = (typeof CompletionStatus)[keyof typeof CompletionStatus];\n\n// LogLevelEnum values\nexport const LogLevelEnum = {\n  _: 0,\n  DEBUG: 1,\n  INFO: 2,\n  WARN: 3,\n  ERROR: 4,\n  NONE: 5,\n};\n\n// Type for LogLevelEnum values\nexport type LogLevelEnum = (typeof LogLevelEnum)[keyof typeof LogLevelEnum];\n","import { InternalSettings, LogLevel, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"./api_constants\";\nimport { LogLevelEnum } from \"./enums\";\n\n/**\n * Default settings for the SCORM API\n */\nexport const DefaultSettings: InternalSettings = {\n  autocommit: false,\n  autocommitSeconds: 10,\n  asyncCommit: false,\n  sendFullCommit: true,\n  lmsCommitUrl: false,\n  dataCommitFormat: \"json\",\n  commitRequestDataType: \"application/json;charset=UTF-8\",\n  autoProgress: false,\n  logLevel: LogLevelEnum.ERROR,\n  selfReportSessionTime: false,\n  alwaysSendTotalTime: false,\n  renderCommonCommitFields: false,\n  strict_errors: true,\n  xhrHeaders: {},\n  xhrWithCredentials: false,\n  fetchMode: \"cors\",\n  useBeaconInsteadOfFetch: \"never\",\n  responseHandler: async function (response: Response): Promise<ResultObject> {\n    if (typeof response !== \"undefined\") {\n      let httpResult = null;\n\n      // Handle both text() and json() response methods\n      try {\n        if (typeof response.json === \"function\") {\n          // Try to get JSON directly if the method exists\n          httpResult = await response.json();\n        } else if (typeof response.text === \"function\") {\n          // Fall back to text() if json() is not available\n          const responseText = await response.text();\n          if (responseText) {\n            httpResult = JSON.parse(responseText);\n          }\n        }\n      } catch (e) {\n        // If parsing fails, continue with null httpResult\n      }\n\n      if (httpResult === null || !{}.hasOwnProperty.call(httpResult, \"result\")) {\n        if (response.status === 200) {\n          return {\n            result: global_constants.SCORM_TRUE,\n            errorCode: 0,\n          };\n        } else {\n          return {\n            result: global_constants.SCORM_FALSE,\n            errorCode: 101,\n          };\n        }\n      } else {\n        return {\n          result: httpResult.result,\n          errorCode: httpResult.errorCode\n            ? httpResult.errorCode\n            : httpResult.result === global_constants.SCORM_TRUE\n              ? 0\n              : 101,\n        };\n      }\n    }\n    return {\n      result: global_constants.SCORM_FALSE,\n      errorCode: 101,\n    };\n  },\n  requestHandler: function (commitObject) {\n    return commitObject;\n  },\n  onLogMessage: defaultLogHandler,\n  scoItemIds: [],\n  scoItemIdValidator: false,\n  globalObjectiveIds: [],\n\n  // Offline support settings\n  enableOfflineSupport: false,\n  courseId: \"\",\n  syncOnInitialize: true,\n  syncOnTerminate: true,\n  maxSyncAttempts: 5,\n};\n\nexport function defaultLogHandler(messageLevel: LogLevel, logMessage: string): void {\n  switch (messageLevel) {\n    case \"4\":\n    case 4:\n    case \"ERROR\":\n    case LogLevelEnum.ERROR:\n      console.error(logMessage);\n      break;\n    case \"3\":\n    case 3:\n    case \"WARN\":\n    case LogLevelEnum.WARN:\n      console.warn(logMessage);\n      break;\n    case \"2\":\n    case 2:\n    case \"INFO\":\n    case LogLevelEnum.INFO:\n      console.info(logMessage);\n      break;\n    case \"1\":\n    case 1:\n    case \"DEBUG\":\n    case LogLevelEnum.DEBUG:\n      if (console.debug) {\n        console.debug(logMessage);\n      } else {\n        console.log(logMessage);\n      }\n      break;\n  }\n}\n","import BaseAPI from \"../BaseAPI\";\n\n/**\n * Private class that wraps a timeout call to the commit() function\n */\nexport class ScheduledCommit {\n  private _API;\n  private _cancelled = false;\n  private readonly _timeout;\n  private readonly _callback;\n\n  /**\n   * Constructor for ScheduledCommit\n   * @param {BaseAPI} API\n   * @param {number} when\n   * @param {string} callback\n   */\n  constructor(API: BaseAPI, when: number, callback: string) {\n    this._API = API;\n    this._timeout = setTimeout(this.wrapper.bind(this), when);\n    this._callback = callback;\n  }\n\n  /**\n   * Cancel any currently scheduled commit\n   */\n  cancel() {\n    this._cancelled = true;\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n  }\n\n  /**\n   * Wrap the API commit call to check if the call has already been cancelled\n   */\n  wrapper() {\n    if (!this._cancelled) {\n      (async () => await this._API.commit(this._callback))();\n    }\n  }\n}\n","import { CommitObject, InternalSettings, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { IHttpService } from \"../interfaces/services\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { StringKeyMap } from \"../utilities\";\n\n/**\n * Service for handling HTTP communication with the LMS\n */\nexport class HttpService implements IHttpService {\n  private settings: InternalSettings;\n  private error_codes: ErrorCode;\n\n  /**\n   * Constructor for HttpService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   */\n  constructor(settings: InternalSettings, error_codes: ErrorCode) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n  }\n\n  /**\n   * Sends HTTP requests to the LMS with special handling for immediate and standard requests.\n   *\n   * This method handles communication with the LMS server, implementing two distinct\n   * request handling strategies based on the context:\n   *\n   * 1. Immediate Mode (used during termination):\n   *    When immediate=true, the method:\n   *    - Initiates the fetch request but doesn't wait for it to complete\n   *    - Returns a success result immediately\n   *    - Processes the response asynchronously when it arrives\n   *\n   *    This is critical for browser compatibility during page unload/termination,\n   *    as some browsers (especially Chrome) may cancel synchronous or awaited\n   *    requests when a page is closing.\n   *\n   * 2. Standard Mode (normal operation):\n   *    When immediate=false, the method:\n   *    - Processes the request parameters through the configured requestHandler\n   *    - Awaits the fetch response completely\n   *    - Transforms the response using the configured responseHandler\n   *    - Triggers appropriate event listeners based on success/failure\n   *    - Returns the complete result with appropriate error codes\n   *\n   * The method also includes error handling to catch network failures or other\n   * exceptions that might occur during the request process.\n   *\n   * @param {string} url - The URL endpoint to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The data to send to the LMS\n   * @param {boolean} immediate - Whether to send the request immediately without waiting (true) or process normally (false)\n   * @param {Function} apiLog - Function to log API messages with appropriate levels\n   * @param {Function} processListeners - Function to trigger event listeners for commit events\n   * @return {Promise<ResultObject>} - A promise that resolves with the result of the request\n   *\n   * @example\n   * // Standard request (waits for response)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   false,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   *\n   * @example\n   * // Immediate request (for termination)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   true,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   * // result will be success immediately, regardless of actual HTTP result\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n    apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    const genericError: ResultObject = {\n      result: global_constants.SCORM_FALSE,\n      errorCode: this.error_codes.GENERAL,\n    };\n\n    // If immediate mode (for termination), handle differently\n    if (immediate) {\n      return this._handleImmediateRequest(url, params, processListeners);\n    }\n\n    // Standard request processing\n    try {\n      const processedParams = this.settings.requestHandler(params) as\n        | CommitObject\n        | StringKeyMap\n        | Array<any>;\n      const response = await this.performFetch(url, processedParams);\n      return this.transformResponse(response, processListeners);\n    } catch (e) {\n      apiLog(\"processHttpRequest\", e, LogLevelEnum.ERROR);\n      processListeners(\"CommitError\");\n      return genericError;\n    }\n  }\n\n  /**\n   * Handles an immediate request (used during termination)\n   * @param {string} url - The URL to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The parameters to include in the request\n   * @param {Function} processListeners - Function to process event listeners\n   * @return {ResultObject} - A success result object\n   * @private\n   */\n  private _handleImmediateRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): ResultObject {\n    // Use Beacon API for final commit if specified in settings\n    if (this.settings.useBeaconInsteadOfFetch !== \"never\") {\n      const { body, contentType } = this._prepareRequestBody(params);\n      navigator.sendBeacon(url, new Blob([body], { type: contentType }));\n    } else {\n      // Use regular fetch with keepalive\n      this.performFetch(url, params).then(async (response) => {\n        await this.transformResponse(response, processListeners);\n      });\n    }\n\n    // Return success immediately without waiting for response\n    return {\n      result: global_constants.SCORM_TRUE,\n      errorCode: 0,\n    };\n  }\n\n  /**\n   * Prepares the request body and content type based on params type\n   * @param {CommitObject|StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Object} - Object containing body and contentType\n   * @private\n   */\n  private _prepareRequestBody(params: CommitObject | StringKeyMap | Array<any>): {\n    body: string;\n    contentType: string;\n  } {\n    const body = params instanceof Array ? params.join(\"&\") : JSON.stringify(params);\n    const contentType =\n      params instanceof Array\n        ? \"application/x-www-form-urlencoded\"\n        : this.settings.commitRequestDataType;\n\n    return { body, contentType };\n  }\n\n  /**\n   * Perform the fetch request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - The response from the LMS\n   * @private\n   */\n  private async performFetch(url: string, params: StringKeyMap | Array<any>): Promise<Response> {\n    // Use Beacon API if specified in settings\n    if (this.settings.useBeaconInsteadOfFetch === \"always\") {\n      return this.performBeacon(url, params);\n    }\n\n    const { body, contentType } = this._prepareRequestBody(params);\n    const init = {\n      method: \"POST\",\n      mode: this.settings.fetchMode,\n      body,\n      headers: {\n        ...this.settings.xhrHeaders,\n        \"Content-Type\": contentType,\n      },\n      keepalive: true,\n    } as RequestInit;\n\n    if (this.settings.xhrWithCredentials) {\n      init.credentials = \"include\";\n    }\n\n    return fetch(url, init);\n  }\n\n  /**\n   * Perform the beacon request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - A promise that resolves with a mock Response object\n   * @private\n   */\n  private async performBeacon(url: string, params: StringKeyMap | Array<any>): Promise<Response> {\n    const { body, contentType } = this._prepareRequestBody(params);\n\n    // Send the beacon request\n    const beaconSuccess = navigator.sendBeacon(url, new Blob([body], { type: contentType }));\n\n    // Create a mock Response object since sendBeacon doesn't return a Response\n    return Promise.resolve({\n      status: beaconSuccess ? 200 : 0,\n      ok: beaconSuccess,\n      json: async () => ({\n        result: beaconSuccess ? \"true\" : \"false\",\n        errorCode: beaconSuccess ? 0 : this.error_codes.GENERAL,\n      }),\n      text: async () =>\n        JSON.stringify({\n          result: beaconSuccess ? \"true\" : \"false\",\n          errorCode: beaconSuccess ? 0 : this.error_codes.GENERAL,\n        }),\n    } as Response);\n  }\n\n  /**\n   * Transforms the response from the LMS to a ResultObject\n   * @param {Response} response - The response from the LMS\n   * @param {Function} processListeners - Function to process event listeners\n   * @return {Promise<ResultObject>} - The transformed response\n   * @private\n   */\n  private async transformResponse(\n    response: Response,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    // Parse the response using the configured handler or default to json\n    const result =\n      typeof this.settings.responseHandler === \"function\"\n        ? await this.settings.responseHandler(response)\n        : await response.json();\n\n    // Ensure result has an errorCode property\n    if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n      result.errorCode = this._isSuccessResponse(response, result) ? 0 : this.error_codes.GENERAL;\n    }\n\n    // Trigger appropriate event based on success/failure\n    if (this._isSuccessResponse(response, result)) {\n      processListeners(\"CommitSuccess\");\n    } else {\n      processListeners(\"CommitError\", undefined, result.errorCode);\n    }\n\n    return result;\n  }\n\n  /**\n   * Determines if a response is successful based on status code and result\n   * @param {Response} response - The HTTP response\n   * @param {ResultObject} result - The parsed result object\n   * @return {boolean} - Whether the response is successful\n   * @private\n   */\n  private _isSuccessResponse(response: Response, result: ResultObject): boolean {\n    return (\n      response.status >= 200 &&\n      response.status <= 299 &&\n      (result.result === \"true\" || result.result === global_constants.SCORM_TRUE)\n    );\n  }\n\n  /**\n   * Updates the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: InternalSettings): void {\n    this.settings = settings;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { IEventService } from \"../interfaces/services\";\n\n/**\n * Interface for a listener object\n */\ninterface Listener {\n  functionName: string;\n  CMIElement: string | null;\n  callback: Function;\n}\n\n/**\n * Type for parsed listener information\n */\ninterface ParsedListener {\n  functionName: string;\n  CMIElement: string | null;\n}\n\n/**\n * Service for handling event listeners and event processing\n */\nexport class EventService implements IEventService {\n  // Map of function names to listeners for faster lookups\n  private listenerMap: Map<string, Listener[]> = new Map();\n  // Total count of listeners for logging\n  private listenerCount = 0;\n  // Function to log API messages\n  private readonly apiLog: (\n    functionName: string,\n    message: string,\n    messageLevel: LogLevel,\n    CMIElement?: string,\n  ) => void;\n\n  /**\n   * Constructor for EventService\n   * @param {Function} apiLog - Function to log API messages\n   */\n  constructor(\n    apiLog: (\n      functionName: string,\n      message: string,\n      messageLevel: LogLevel,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.apiLog = apiLog;\n  }\n\n  /**\n   * Parses a listener name into its components\n   *\n   * @param {string} listenerName - The name of the listener\n   * @returns {ParsedListener|null} - The parsed listener information or null if invalid\n   */\n  private parseListenerName(listenerName: string): ParsedListener | null {\n    const listenerSplit = listenerName.split(\".\");\n    if (listenerSplit.length === 0) return null;\n\n    const functionName = listenerSplit[0];\n    let CMIElement = null;\n\n    if (listenerSplit.length > 1) {\n      CMIElement = listenerName.replace(`${functionName}.`, \"\");\n    }\n\n    return { functionName, CMIElement };\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener\n   * @param {Function} callback - The callback function to execute when the event occurs\n   */\n  on(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get or create the array for this function name\n      const listeners = this.listenerMap.get(functionName) ?? [];\n\n      // Add the new listener\n      listeners.push({\n        functionName,\n        CMIElement,\n        callback,\n      });\n\n      // Update the map and count\n      this.listenerMap.set(functionName, listeners);\n      this.listenerCount++;\n\n      this.apiLog(\n        \"on\",\n        `Added event listener: ${this.listenerCount}`,\n        LogLevelEnum.INFO,\n        functionName,\n      );\n    }\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener\n   *\n   * @param {string} listenerName - The name of the listener to remove\n   * @param {Function} callback - The callback function to remove\n   */\n  off(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get the listeners for this function name\n      const listeners = this.listenerMap.get(functionName);\n      if (!listeners) continue;\n\n      // Find the index of the listener to remove\n      const removeIndex = listeners.findIndex(\n        (obj) => obj.CMIElement === CMIElement && obj.callback === callback,\n      );\n\n      if (removeIndex !== -1) {\n        // Remove the listener\n        listeners.splice(removeIndex, 1);\n        this.listenerCount--;\n\n        // Update the map or remove the entry if empty\n        if (listeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, listeners);\n        }\n\n        this.apiLog(\n          \"off\",\n          `Removed event listener: ${this.listenerCount}`,\n          LogLevelEnum.INFO,\n          functionName,\n        );\n      }\n    }\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener to clear\n   */\n  clear(listenerName: string) {\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // If we have listeners for this function name\n      if (this.listenerMap.has(functionName)) {\n        const listeners = this.listenerMap.get(functionName)!;\n\n        // Filter out listeners that match the criteria\n        const newListeners = listeners.filter((obj) => obj.CMIElement !== CMIElement);\n\n        // Update the count and map\n        this.listenerCount -= listeners.length - newListeners.length;\n\n        if (newListeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, newListeners);\n        }\n      }\n    }\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created\n   *\n   * @param {string} functionName - The name of the function that triggered the event\n   * @param {string} CMIElement - The CMI element that was affected\n   * @param {any} value - The value that was set\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this.apiLog(functionName, value, LogLevelEnum.INFO, CMIElement);\n\n    // Get listeners for this function name\n    const listeners = this.listenerMap.get(functionName);\n    if (!listeners) return;\n\n    for (const listener of listeners) {\n      const listenerHasCMIElement = !!listener.CMIElement;\n      let CMIElementsMatch = false;\n\n      // Check if CMI elements match\n      if (CMIElement && listener.CMIElement) {\n        if (listener.CMIElement.endsWith(\"*\")) {\n          // For wildcard matches, check if the CMI element starts with the prefix\n          const prefix = listener.CMIElement.slice(0, -1);\n          CMIElementsMatch = CMIElement.startsWith(prefix);\n        } else {\n          // For exact matches, compare the strings directly\n          CMIElementsMatch = listener.CMIElement === CMIElement;\n        }\n      }\n\n      // If the listener matches, call the callback\n      if (!listenerHasCMIElement || CMIElementsMatch) {\n        this.apiLog(\n          \"processListeners\",\n          `Processing listener: ${listener.functionName}`,\n          LogLevelEnum.DEBUG,\n          CMIElement,\n        );\n\n        // Handle special event types\n        if (functionName.startsWith(\"Sequence\")) {\n          // For sequence events, pass the target as the first argument\n          listener.callback(value);\n        } else if (functionName === \"CommitError\") {\n          // For commit error events, pass the error code\n          listener.callback(value);\n        } else if (functionName === \"CommitSuccess\") {\n          // For commit success events, pass no arguments\n          listener.callback();\n        } else {\n          // For regular events, pass CMIElement and value\n          listener.callback(CMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Resets the event service by clearing all listeners\n   */\n  reset() {\n    this.listenerMap.clear();\n    this.listenerCount = 0;\n  }\n}\n","import { CommitObject, LogLevel } from \"../types/api_types\";\nimport { StringKeyMap, unflatten } from \"../utilities\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { BaseCMI } from \"../cmi/common/base_cmi\";\nimport { ISerializationService } from \"../interfaces/services\";\n\n/**\n * Service for handling data serialization and deserialization in scorm-again\n */\nexport class SerializationService implements ISerializationService {\n  /**\n   * Loads CMI data from a flattened JSON object with special handling for arrays and ordering.\n   *\n   * This method implements a complex algorithm for loading flattened JSON data into the CMI\n   * object structure. It handles several key challenges:\n   *\n   * 1. Ordering dependencies: Some CMI elements (like interactions and objectives) must be\n   *    loaded in a specific order to ensure proper initialization.\n   *\n   * 2. Array handling: Interactions and objectives are stored as arrays, and their properties\n   *    must be loaded in the correct order (e.g., 'id' and 'type' must be set before other properties).\n   *\n   * 3. Unflattening: The method converts flattened dot notation (e.g., \"cmi.objectives.0.id\")\n   *    back into nested objects before loading.\n   *\n   * The algorithm works by:\n   * - Categorizing keys into interactions, objectives, and other properties\n   * - Sorting interactions to prioritize 'id' and 'type' fields within each index\n   * - Sorting objectives to prioritize 'id' fields within each index\n   * - Processing each category in order: interactions, objectives, then other properties\n   *\n   * @param {StringKeyMap} json - The flattened JSON object with dot notation keys\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   *\n   * @param setStartingData\n   * @example\n   * // Example of flattened JSON input:\n   * // {\n   * //   \"cmi.objectives.0.id\": \"obj1\",\n   * //   \"cmi.objectives.0.score.raw\": \"80\",\n   * //   \"cmi.interactions.0.id\": \"int1\",\n   * //   \"cmi.interactions.0.type\": \"choice\",\n   * //   \"cmi.interactions.0.result\": \"correct\"\n   * // }\n   */\n  loadFromFlattenedJSON(\n    json: StringKeyMap,\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromFlattenedJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    const int_pattern = /^(cmi\\.interactions\\.)(\\d+)\\.(.*)$/;\n    const obj_pattern = /^(cmi\\.objectives\\.)(\\d+)\\.(.*)$/;\n\n    // Extract and categorize keys for better sorting\n    const interactions: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const objectives: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const others: { key: string; value: any }[] = [];\n\n    // Categorize keys\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key)) {\n        const intMatch = key.match(int_pattern);\n        if (intMatch) {\n          interactions.push({\n            key,\n            value: json[key],\n            index: Number(intMatch[2]),\n            field: intMatch[3],\n          });\n          continue;\n        }\n\n        const objMatch = key.match(obj_pattern);\n        if (objMatch) {\n          objectives.push({\n            key,\n            value: json[key],\n            index: Number(objMatch[2]),\n            field: objMatch[3],\n          });\n          continue;\n        }\n\n        others.push({ key, value: json[key] });\n      }\n    }\n\n    // Sort interactions: first by index, then prioritize 'id' and 'type' fields\n    interactions.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id and type\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n      if (a.field === \"type\") return -1;\n      if (b.field === \"type\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort objectives: first by index, then prioritize 'id' field\n    objectives.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort other keys alphabetically\n    others.sort((a, b) => a.key.localeCompare(b.key));\n\n    // Process all items in the correct order\n    const processItems = (items: { key: string; value: any }[]) => {\n      items.forEach((item) => {\n        const obj: StringKeyMap = {};\n        obj[item.key] = item.value;\n        this.loadFromJSON(\n          unflatten(obj) as StringKeyMap,\n          CMIElement,\n          setCMIValue,\n          isNotInitialized,\n          setStartingData,\n        );\n      });\n    };\n\n    // Process in order: interactions, objectives, others\n    processItems(interactions);\n    processItems(objectives);\n    processItems(others);\n  }\n\n  /**\n   * Loads CMI data from a nested JSON object with recursive traversal.\n   *\n   * This method implements a recursive algorithm for loading nested JSON data into the CMI\n   * object structure. It handles several key aspects:\n   *\n   * 1. Recursive traversal: The method recursively traverses the nested JSON structure,\n   *    building CMI element paths as it goes (e.g., \"cmi.core.student_id\").\n   *\n   * 2. Type-specific handling: Different data types are handled differently:\n   *    - Arrays: Each array element is processed individually with its index in the path\n   *    - Objects: Recursively processed with updated path\n   *    - Primitives: Set directly using setCMIValue\n   *\n   * 3. Initialization check: Ensures the method is only called before API initialization\n   *\n   * 4. Starting data storage: Stores the original JSON data for potential future use\n   *\n   * The algorithm works by:\n   * - First storing the complete JSON object via setStartingData\n   * - Iterating through each property in the JSON object\n   * - For each property, determining its type and handling it accordingly\n   * - Building the CMI element path as it traverses the structure\n   * - Setting values at the appropriate paths using setCMIValue\n   *\n   * @param {{[key: string]: any}} json - The nested JSON object to load\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value at a specific path\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   * @param {Function} setStartingData - Function to store the original JSON data\n   *\n   * @example\n   * // Example of nested JSON input:\n   * // {\n   * //   \"core\": {\n   * //     \"student_id\": \"12345\",\n   * //     \"student_name\": \"John Doe\"\n   * //   },\n   * //   \"objectives\": [\n   * //     { \"id\": \"obj1\", \"score\": { \"raw\": 80 } },\n   * //     { \"id\": \"obj2\", \"score\": { \"raw\": 90 } }\n   * //   ]\n   * // }\n   */\n  loadFromJSON(\n    json: { [key: string]: any },\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    CMIElement = CMIElement !== undefined ? CMIElement : \"cmi\";\n\n    setStartingData(json);\n\n    // could this be refactored down to flatten(json) then setCMIValue on each?\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key) && json[key]) {\n        const currentCMIElement = (CMIElement ? CMIElement + \".\" : \"\") + key;\n        const value = json[key];\n\n        if (value.constructor === Array) {\n          for (let i = 0; i < value.length; i++) {\n            if (value[i]) {\n              const item = value[i];\n              const tempCMIElement = `${currentCMIElement}.${i}`;\n\n              if (item.constructor === Object) {\n                this.loadFromJSON(\n                  item,\n                  tempCMIElement,\n                  setCMIValue,\n                  isNotInitialized,\n                  setStartingData,\n                );\n              } else {\n                setCMIValue(tempCMIElement, item);\n              }\n            }\n          }\n        } else if (value.constructor === Object) {\n          this.loadFromJSON(\n            value,\n            currentCMIElement,\n            setCMIValue,\n            isNotInitialized,\n            setStartingData,\n          );\n        } else {\n          setCMIValue(currentCMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Render the CMI object to JSON for sending to an LMS.\n   *\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {string}\n   */\n  renderCMIToJSONString(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): string {\n    // Do we want/need to return fields that have no set value?\n    if (sendFullCommit) {\n      return JSON.stringify({ cmi });\n    }\n    return JSON.stringify({ cmi }, (k, v) => (v === undefined ? null : v), 2);\n  }\n\n  /**\n   * Returns a JS object representing the current cmi\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {object}\n   */\n  renderCMIToJSONObject(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): StringKeyMap {\n    // Revert to the original implementation to maintain compatibility with tests\n    return JSON.parse(this.renderCMIToJSONString(cmi, sendFullCommit));\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} alwaysSendTotalTime - Whether to always send total time\n   * @param {boolean|Function} renderCommonCommitFields - Whether to render common commit fields\n   * @param {Function} renderCommitObject - Function to render commit object\n   * @param {Function} renderCommitCMI - Function to render commit CMI\n   * @param {LogLevel} apiLogLevel - The API log level\n   * @return {CommitObject|StringKeyMap|Array<any>}\n   */\n  getCommitObject(\n    terminateCommit: boolean,\n    alwaysSendTotalTime: boolean,\n    renderCommonCommitFields: boolean | ((commitObject: CommitObject) => boolean),\n    renderCommitObject: (terminateCommit: boolean, includeTotalTime?: boolean) => CommitObject,\n    renderCommitCMI: (\n      terminateCommit: boolean,\n      includeTotalTime?: boolean,\n    ) => StringKeyMap | Array<any>,\n    apiLogLevel: LogLevel,\n  ): CommitObject | StringKeyMap | Array<any> {\n    // Fix for issue: total time is being calculated incorrectly across multiple sessions\n    // when selfReportSessionTime and alwaysSendTotalTime are enabled.\n    //\n    // Previously, we were using a single variable (shouldTerminateCommit) that combined\n    // both concerns: whether this is a termination commit and whether to include total time.\n    // This caused the total time to be calculated as if every commit was a terminate commit\n    // when alwaysSendTotalTime was true, leading to incorrect time calculations.\n    //\n    // Now we pass the actual terminateCommit value and a separate parameter for whether\n    // to include total time, allowing the rendering functions to handle these concerns separately.\n    const includeTotalTime = alwaysSendTotalTime || terminateCommit;\n\n    const commitObject = renderCommonCommitFields\n      ? renderCommitObject(terminateCommit, includeTotalTime)\n      : renderCommitCMI(terminateCommit, includeTotalTime);\n\n    if ([LogLevelEnum.DEBUG, \"1\", 1, \"DEBUG\"].includes(apiLogLevel)) {\n      console.debug(\"Commit (terminated: \" + (terminateCommit ? \"yes\" : \"no\") + \"): \");\n      console.debug(commitObject);\n    }\n    return commitObject;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ILoggingService } from \"../interfaces/services\";\nimport { defaultLogHandler } from \"../constants/default_settings\";\n\n/**\n * Centralized logging service implemented as a singleton\n * Provides methods for logging at different levels and configuring the log level\n */\nexport class LoggingService implements ILoggingService {\n  private static _instance: LoggingService;\n  private _logLevel: LogLevel = LogLevelEnum.ERROR;\n  private _logHandler: (messageLevel: LogLevel, logMessage: string) => void;\n\n  /**\n   * Private constructor to prevent direct instantiation\n   */\n  private constructor() {\n    // Default log handler uses console methods based on log level\n    this._logHandler = defaultLogHandler;\n  }\n\n  /**\n   * Get the singleton instance of LoggingService\n   *\n   * @returns {LoggingService} The singleton instance\n   */\n  public static getInstance(): LoggingService {\n    if (!LoggingService._instance) {\n      LoggingService._instance = new LoggingService();\n    }\n    return LoggingService._instance;\n  }\n\n  /**\n   * Set the log level\n   *\n   * @param {LogLevel} level - The log level to set\n   */\n  public setLogLevel(level: LogLevel): void {\n    this._logLevel = level;\n  }\n\n  /**\n   * Get the current log level\n   *\n   * @returns {LogLevel} The current log level\n   */\n  public getLogLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  /**\n   * Set a custom log handler\n   *\n   * @param {Function} handler - The function to handle log messages\n   */\n  public setLogHandler(handler: (messageLevel: LogLevel, logMessage: string) => void): void {\n    this._logHandler = handler;\n  }\n\n  /**\n   * Log a message if the message level is greater than or equal to the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @param {string} logMessage - The message to log\n   */\n  public log(messageLevel: LogLevel, logMessage: string): void {\n    if (this.shouldLog(messageLevel)) {\n      this._logHandler(messageLevel, logMessage);\n    }\n  }\n\n  /**\n   * Log a message at ERROR level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public error(logMessage: string): void {\n    this.log(LogLevelEnum.ERROR, logMessage);\n  }\n\n  /**\n   * Log a message at WARN level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public warn(logMessage: string): void {\n    this.log(LogLevelEnum.WARN, logMessage);\n  }\n\n  /**\n   * Log a message at INFO level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public info(logMessage: string): void {\n    this.log(LogLevelEnum.INFO, logMessage);\n  }\n\n  /**\n   * Log a message at DEBUG level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public debug(logMessage: string): void {\n    this.log(LogLevelEnum.DEBUG, logMessage);\n  }\n\n  /**\n   * Determine if a message should be logged based on its level and the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @returns {boolean} Whether the message should be logged\n   */\n  private shouldLog(messageLevel: LogLevel): boolean {\n    // Convert string levels to numbers for comparison\n    const numericMessageLevel = this.getNumericLevel(messageLevel);\n    const numericLogLevel = this.getNumericLevel(this._logLevel);\n\n    return numericMessageLevel >= numericLogLevel;\n  }\n\n  /**\n   * Convert a log level to its numeric value\n   *\n   * @param {LogLevel} level - The log level to convert\n   * @returns {number} The numeric value of the log level\n   */\n  private getNumericLevel(level: LogLevel): number {\n    if (level === undefined) return LogLevelEnum.NONE;\n\n    if (typeof level === \"number\") return level;\n\n    switch (level) {\n      case \"1\":\n      case \"DEBUG\":\n        return LogLevelEnum.DEBUG;\n      case \"2\":\n      case \"INFO\":\n        return LogLevelEnum.INFO;\n      case \"3\":\n      case \"WARN\":\n        return LogLevelEnum.WARN;\n      case \"4\":\n      case \"ERROR\":\n        return LogLevelEnum.ERROR;\n      case \"5\":\n      case \"NONE\":\n        return LogLevelEnum.NONE;\n      default:\n        return LogLevelEnum.ERROR; // Default to ERROR if unknown\n    }\n  }\n}\n\n// Export a function to get the singleton instance\nexport function getLoggingService(): LoggingService {\n  return LoggingService.getInstance();\n}\n","import { LogLevelEnum } from \"../constants/enums\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { ValidationError } from \"../exceptions\";\nimport { IErrorHandlingService, ILoggingService } from \"../interfaces/services\";\nimport { getLoggingService } from \"./LoggingService\";\n\n/**\n * Service for handling SCORM errors\n */\nexport class ErrorHandlingService implements IErrorHandlingService {\n  private _lastErrorCode: string = \"0\";\n  private readonly _errorCodes: ErrorCode;\n  private readonly _apiLog: (\n    functionName: string,\n    message: string,\n    logLevel?: LogLevelEnum,\n    CMIElement?: string,\n  ) => void;\n  private readonly _getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string;\n  private readonly _loggingService: ILoggingService;\n\n  /**\n   * Constructor for ErrorHandlingService\n   *\n   * @param {ErrorCode} errorCodes - The error codes object\n   * @param {Function} apiLog - Function for logging API calls\n   * @param {Function} getLmsErrorMessageDetails - Function for getting error message details\n   * @param {ILoggingService} loggingService - Optional logging service instance\n   */\n  constructor(\n    errorCodes: ErrorCode,\n    apiLog: (\n      functionName: string,\n      message: string,\n      logLevel?: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n    loggingService?: ILoggingService,\n  ) {\n    this._errorCodes = errorCodes;\n    this._apiLog = apiLog;\n    this._getLmsErrorMessageDetails = getLmsErrorMessageDetails;\n    this._loggingService = loggingService || getLoggingService();\n  }\n\n  /**\n   * Get the last error code\n   *\n   * @return {string} - The last error code\n   */\n  get lastErrorCode(): string {\n    return this._lastErrorCode;\n  }\n\n  /**\n   * Set the last error code\n   *\n   * @param {string} errorCode - The error code to set\n   */\n  set lastErrorCode(errorCode: string) {\n    this._lastErrorCode = errorCode;\n  }\n\n  /**\n   * Throws a SCORM error\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The error number\n   * @param {string} message - The error message\n   * @throws {ValidationError} - If throwException is true, throws a ValidationError\n   */\n  throwSCORMError(CMIElement: string, errorNumber: number, message?: string): void {\n    if (!message) {\n      message = this._getLmsErrorMessageDetails(errorNumber, true);\n    }\n\n    // Format a more descriptive error message with context\n    const formattedMessage = `SCORM Error ${errorNumber}: ${message}${CMIElement ? ` [Element: ${CMIElement}]` : \"\"}`;\n\n    // Log using both the API log and the logging service for consistency\n    this._apiLog(\"throwSCORMError\", errorNumber + \": \" + message, LogLevelEnum.ERROR, CMIElement);\n    this._loggingService.error(formattedMessage);\n\n    this._lastErrorCode = String(errorNumber);\n  }\n\n  /**\n   * Clears the last SCORM error code on success.\n   *\n   * @param {string} success - Whether the operation was successful\n   */\n  clearSCORMError(success: string): void {\n    if (success !== undefined && success !== global_constants.SCORM_FALSE) {\n      this._lastErrorCode = \"0\";\n    }\n  }\n\n  /**\n   * Handles exceptions that occur when accessing or setting CMI values.\n   *\n   * This method provides centralized error handling for exceptions that occur during\n   * CMI data operations. It differentiates between different types of errors and\n   * handles them appropriately:\n   *\n   * 1. ValidationError: These are expected errors from the validation system that\n   *    indicate a specific SCORM error condition (like invalid data format or range).\n   *    For these errors, the method:\n   *    - Sets the lastErrorCode to the error code from the ValidationError\n   *    - Returns SCORM_FALSE to indicate failure to the caller\n   *\n   * 2. Standard JavaScript Error: For general JavaScript errors (like TypeError,\n   *    ReferenceError, etc.), the method:\n   *    - Logs the error message with stack trace to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * 3. Unknown exceptions: For any other type of exception that doesn't match the\n   *    above categories, the method:\n   *    - Logs the entire exception object to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * This method is critical for maintaining SCORM compliance by ensuring that\n   * all errors are properly translated into the appropriate SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {ValidationError|Error|unknown} e - The exception that was thrown\n   * @param {string} returnValue - The default return value (typically an empty string)\n   * @return {string} - Either the original returnValue or SCORM_FALSE if an error occurred\n   *\n   * @example\n   * try {\n   *   const value = getCMIValue(\"cmi.core.score.raw\");\n   *   return value;\n   * } catch (e) {\n   *   return handleValueAccessException(e, \"\");\n   * }\n   */\n  handleValueAccessException(\n    CMIElement: string,\n    e: Error | ValidationError | unknown,\n    returnValue: string,\n  ): string {\n    if (e instanceof ValidationError) {\n      const validationError = e as ValidationError;\n      this._lastErrorCode = String(validationError.errorCode);\n\n      // Log validation errors at WARN level with context\n      const errorMessage = `Validation Error ${validationError.errorCode}: ${validationError.message} [Element: ${CMIElement}]`;\n      this._loggingService.warn(errorMessage);\n\n      returnValue = global_constants.SCORM_FALSE;\n    } else if (e instanceof Error) {\n      // For standard JS errors, include the stack trace and error type\n      const errorType = e.constructor.name; // Gets the error type (e.g., TypeError, ReferenceError)\n      const errorMessage = `${errorType}: ${e.message} [Element: ${CMIElement}]`;\n      const stackTrace = e.stack || \"\";\n\n      // Log the detailed error with stack trace\n      this._loggingService.error(`${errorMessage}\\n${stackTrace}`);\n\n      this.throwSCORMError(CMIElement, this._errorCodes.GENERAL, `${errorType}: ${e.message}`);\n    } else {\n      // For unknown errors, provide as much context as possible\n      const errorMessage = `Unknown error occurred while accessing [Element: ${CMIElement}]`;\n\n      this._loggingService.error(errorMessage);\n\n      try {\n        // Try to stringify the error object for more details\n        const errorDetails = JSON.stringify(e);\n        this._loggingService.error(`Error details: ${errorDetails}`);\n      } catch (jsonError) {\n        // If stringify fails, log that we couldn't get more details\n        this._loggingService.error(\"Could not stringify error object for details\");\n      }\n\n      this.throwSCORMError(CMIElement, this._errorCodes.GENERAL, \"Unknown error\");\n    }\n    return returnValue;\n  }\n\n  /**\n   * Get the error codes object\n   *\n   * @return {ErrorCode} - The error codes object\n   */\n  get errorCodes(): ErrorCode {\n    return this._errorCodes;\n  }\n}\n\n// Export a factory function to create the service\nexport function createErrorHandlingService(\n  errorCodes: ErrorCode,\n  apiLog: (\n    functionName: string,\n    message: string,\n    logLevel: LogLevelEnum,\n    CMIElement?: string,\n  ) => void,\n  getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n  loggingService?: ILoggingService,\n): ErrorHandlingService {\n  return new ErrorHandlingService(errorCodes, apiLog, getLmsErrorMessageDetails, loggingService);\n}\n","import { CommitObject, InternalSettings, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ErrorCode } from \"../constants/error_codes\";\n\n/**\n * Interface for sync queue item\n */\ninterface SyncQueueItem {\n  id: string;\n  courseId: string;\n  timestamp: number;\n  data: CommitObject;\n  syncAttempts: number;\n}\n\n/**\n * Service for handling offline storage and synchronization of SCORM data\n */\nexport class OfflineStorageService {\n  private settings: InternalSettings;\n  private error_codes: ErrorCode;\n  private storeName: string = \"scorm_again_offline_data\";\n  private syncQueue: string = \"scorm_again_sync_queue\";\n  private isOnline: boolean = navigator.onLine;\n  private syncInProgress: boolean = false;\n\n  /**\n   * Constructor for OfflineStorageService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Function} apiLog - The logging function\n   */\n  constructor(\n    settings: InternalSettings,\n    error_codes: ErrorCode,\n    private apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n\n    // Initialize listeners for online/offline events\n    window.addEventListener(\"online\", this.handleOnlineStatusChange.bind(this));\n    window.addEventListener(\"offline\", this.handleOnlineStatusChange.bind(this));\n  }\n\n  /**\n   * Handle changes in online status\n   */\n  private handleOnlineStatusChange() {\n    const wasOnline = this.isOnline;\n    this.isOnline = navigator.onLine;\n\n    // If we've come back online, trigger sync process\n    if (!wasOnline && this.isOnline) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        \"Device is back online, attempting to sync...\",\n        LogLevelEnum.INFO,\n      );\n      this.syncOfflineData().then(\n        (success) => {\n          if (success) {\n            this.apiLog(\"OfflineStorageService\", \"Sync completed successfully\", LogLevelEnum.INFO);\n          } else {\n            this.apiLog(\"OfflineStorageService\", \"Sync failed\", LogLevelEnum.ERROR);\n          }\n        },\n        (error) => {\n          this.apiLog(\"OfflineStorageService\", `Error during sync: ${error}`, LogLevelEnum.ERROR);\n        },\n      );\n    } else if (wasOnline && !this.isOnline) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        \"Device is offline, data will be stored locally\",\n        LogLevelEnum.INFO,\n      );\n    }\n  }\n\n  /**\n   * Store commit data offline\n   * @param {string} courseId - Identifier for the course\n   * @param {CommitObject} commitData - The data to store offline\n   * @returns {Promise<ResultObject>} - Result of the storage operation\n   */\n  async storeOffline(courseId: string, commitData: CommitObject): Promise<ResultObject> {\n    try {\n      // Store the data in the sync queue with timestamp and unique ID\n      const queueItem: SyncQueueItem = {\n        id: `${courseId}_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`,\n        courseId,\n        timestamp: Date.now(),\n        data: commitData,\n        syncAttempts: 0,\n      };\n\n      // Get current queue\n      const currentQueue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n      currentQueue.push(queueItem);\n\n      // Save updated queue\n      await this.saveToStorage(this.syncQueue, currentQueue);\n\n      // Also update the current state in the main storage (latest known state)\n      await this.saveToStorage(`${this.storeName}_${courseId}`, commitData);\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Stored data offline for course ${courseId}`,\n        LogLevelEnum.INFO,\n      );\n\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error storing offline data: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL,\n      };\n    }\n  }\n\n  /**\n   * Get the stored offline data for a course\n   * @param {string} courseId - Identifier for the course\n   * @returns {Promise<CommitObject|null>} - The stored data or null if not found\n   */\n  async getOfflineData(courseId: string): Promise<CommitObject | null> {\n    try {\n      const data = await this.getFromStorage<CommitObject>(`${this.storeName}_${courseId}`);\n      return data || null;\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error retrieving offline data: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return null;\n    }\n  }\n\n  /**\n   * Synchronize offline data with the LMS when connection is available\n   * @returns {Promise<boolean>} - Success status of synchronization\n   */\n  async syncOfflineData(): Promise<boolean> {\n    // Don't run multiple sync processes at once\n    if (this.syncInProgress || !this.isOnline) {\n      return false;\n    }\n\n    this.syncInProgress = true;\n\n    try {\n      // Get the queue of items to sync\n      const syncQueue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n\n      if (syncQueue.length === 0) {\n        this.syncInProgress = false;\n        return true;\n      }\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Found ${syncQueue.length} items to sync`,\n        LogLevelEnum.INFO,\n      );\n\n      // Keep track of successful and failed sync attempts\n      const remainingQueue: SyncQueueItem[] = [];\n\n      // Process each queue item\n      for (const item of syncQueue) {\n        // Skip items that have been attempted too many times\n        if (item.syncAttempts >= 5) {\n          this.apiLog(\n            \"OfflineStorageService\",\n            `Skipping item ${item.id} after 5 failed attempts`,\n            LogLevelEnum.WARN,\n          );\n          continue;\n        }\n\n        try {\n          // Attempt to sync this item\n          const syncResult = await this.sendDataToLMS(item.data);\n\n          if (syncResult.result === global_constants.SCORM_TRUE) {\n            // Sync was successful, no need to keep this item\n            this.apiLog(\n              \"OfflineStorageService\",\n              `Successfully synced item ${item.id}`,\n              LogLevelEnum.INFO,\n            );\n          } else {\n            // Sync failed, increment attempts and keep in queue\n            item.syncAttempts++;\n            remainingQueue.push(item);\n            this.apiLog(\n              \"OfflineStorageService\",\n              `Failed to sync item ${item.id}, attempt #${item.syncAttempts}`,\n              LogLevelEnum.WARN,\n            );\n          }\n        } catch (error) {\n          // On error, increment attempts and keep in queue\n          item.syncAttempts++;\n          remainingQueue.push(item);\n          this.apiLog(\n            \"OfflineStorageService\",\n            `Error syncing item ${item.id}: ${error}`,\n            LogLevelEnum.ERROR,\n          );\n        }\n      }\n\n      // Update the queue with remaining items\n      await this.saveToStorage(this.syncQueue, remainingQueue);\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Sync completed. ${syncQueue.length - remainingQueue.length} items synced, ${remainingQueue.length} items remaining`,\n        LogLevelEnum.INFO,\n      );\n\n      this.syncInProgress = false;\n      return true;\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error during sync process: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      this.syncInProgress = false;\n      return false;\n    }\n  }\n\n  /**\n   * Send data to the LMS when online\n   * @param {CommitObject} data - The data to send to the LMS\n   * @returns {Promise<ResultObject>} - Result of the sync operation\n   */\n  private async sendDataToLMS(data: CommitObject): Promise<ResultObject> {\n    if (!this.settings.lmsCommitUrl) {\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL,\n      };\n    }\n\n    try {\n      // Apply request handler if configured\n      const processedData = this.settings.requestHandler(data);\n\n      // Send the data to the LMS\n      const init = {\n        method: \"POST\",\n        mode: this.settings.fetchMode,\n        body: JSON.stringify(processedData),\n        headers: {\n          ...this.settings.xhrHeaders,\n          \"Content-Type\": this.settings.commitRequestDataType,\n        },\n      } as RequestInit;\n\n      if (this.settings.xhrWithCredentials) {\n        init.credentials = \"include\";\n      }\n\n      const response = await fetch(this.settings.lmsCommitUrl as string, init);\n\n      // Process the response using the configured handler\n      const result =\n        typeof this.settings.responseHandler === \"function\"\n          ? await this.settings.responseHandler(response)\n          : await response.json();\n\n      if (\n        response.status >= 200 &&\n        response.status <= 299 &&\n        (result.result === true || result.result === global_constants.SCORM_TRUE)\n      ) {\n        if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n          result.errorCode = 0;\n        }\n        return result;\n      } else {\n        if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n          result.errorCode = this.error_codes.GENERAL;\n        }\n        return result;\n      }\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error sending data to LMS: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL,\n      };\n    }\n  }\n\n  /**\n   * Check if the device is currently online\n   * @returns {boolean} - Online status\n   */\n  isDeviceOnline(): boolean {\n    return this.isOnline;\n  }\n\n  // noinspection JSValidateJSDoc\n  /**\n   * Get item from localStorage\n   * @param {string} key - The key to retrieve\n   * @returns {Promise<T|null>} - The retrieved data\n   */\n  private async getFromStorage<T>(key: string): Promise<T | null> {\n    const storedData = localStorage.getItem(key);\n    if (storedData) {\n      try {\n        return JSON.parse(storedData) as T;\n      } catch (e) {\n        return null;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Save item to localStorage\n   * @param {string} key - The key to store under\n   * @param {any} data - The data to store\n   * @returns {Promise<void>}\n   */\n  private async saveToStorage(key: string, data: any): Promise<void> {\n    localStorage.setItem(key, JSON.stringify(data));\n  }\n\n  /**\n   * Check if there is pending offline data for a course\n   * @param {string} courseId - Identifier for the course\n   * @returns {Promise<boolean>} - Whether there is pending data\n   */\n  async hasPendingOfflineData(courseId: string): Promise<boolean> {\n    const queue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n    return queue.some((item) => item.courseId === courseId);\n  }\n\n  /**\n   * Update the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: InternalSettings): void {\n    this.settings = settings;\n  }\n}\n","import { ErrorCode } from \"./constants/error_codes\";\nimport { global_constants } from \"./constants/api_constants\";\nimport * as Utilities from \"./utilities\";\nimport { formatMessage, StringKeyMap, stringMatches } from \"./utilities\";\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport {\n  CommitObject,\n  InternalSettings,\n  LogLevel,\n  ResultObject,\n  Settings,\n} from \"./types/api_types\";\nimport { DefaultSettings } from \"./constants/default_settings\";\nimport { IBaseAPI } from \"./interfaces/IBaseAPI\";\nimport { ScheduledCommit } from \"./helpers/scheduled_commit\";\nimport { LogLevelEnum } from \"./constants/enums\";\nimport { HttpService } from \"./services/HttpService\";\nimport { EventService } from \"./services/EventService\";\nimport { SerializationService } from \"./services/SerializationService\";\nimport { createErrorHandlingService } from \"./services/ErrorHandlingService\";\nimport { getLoggingService } from \"./services/LoggingService\";\nimport { OfflineStorageService } from \"./services/OfflineStorageService\";\nimport {\n  ICMIDataService,\n  IErrorHandlingService,\n  IEventService,\n  IHttpService,\n  ILoggingService,\n  IOfflineStorageService,\n  ISerializationService,\n} from \"./interfaces/services\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { ValidationError } from \"./exceptions\";\n\n/**\n * Base API class for AICC, SCORM 1.2, and SCORM 2004. Should be considered\n * abstract, and never initialized on its own.\n */\nexport default abstract class BaseAPI implements IBaseAPI {\n  private _timeout?: ScheduledCommit | undefined;\n  private readonly _error_codes: ErrorCode;\n  private _settings: InternalSettings = DefaultSettings;\n  private readonly _httpService: IHttpService;\n  private _eventService: IEventService;\n  private _serializationService: ISerializationService;\n  private readonly _errorHandlingService: IErrorHandlingService;\n  private readonly _loggingService: ILoggingService;\n  private readonly _offlineStorageService?: IOfflineStorageService;\n  private _courseId: string = \"\";\n\n  /**\n   * Constructor for Base API class. Sets some shared API fields, as well as\n   * sets up options for the API.\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Settings} settings - Optional settings for the API\n   * @param {IHttpService} httpService - Optional HTTP service instance\n   * @param {IEventService} eventService - Optional Event service instance\n   * @param {ISerializationService} serializationService - Optional Serialization service instance\n   * @param {ICMIDataService} cmiDataService - Optional CMI Data service instance\n   * @param {IErrorHandlingService} errorHandlingService - Optional Error Handling service instance\n   * @param {ILoggingService} loggingService - Optional Logging service instance\n   * @param {IOfflineStorageService} offlineStorageService - Optional Offline Storage service instance\n   */\n  protected constructor(\n    error_codes: ErrorCode,\n    settings?: Settings,\n    httpService?: IHttpService,\n    eventService?: IEventService,\n    serializationService?: ISerializationService,\n    cmiDataService?: ICMIDataService,\n    errorHandlingService?: IErrorHandlingService,\n    loggingService?: ILoggingService,\n    offlineStorageService?: IOfflineStorageService,\n  ) {\n    if (new.target === BaseAPI) {\n      throw new TypeError(\"Cannot construct BaseAPI instances directly\");\n    }\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n\n    this._error_codes = error_codes;\n\n    if (settings) {\n      this.settings = {\n        ...DefaultSettings,\n        ...settings,\n      } as InternalSettings;\n    }\n\n    // Initialize and configure LoggingService\n    this._loggingService = loggingService || getLoggingService();\n    this._loggingService.setLogLevel(this.apiLogLevel);\n\n    // If settings include a custom onLogMessage function, use it as the log handler\n    if (this.settings.onLogMessage) {\n      this._loggingService.setLogHandler(this.settings.onLogMessage);\n    }\n\n    // Initialize HTTP service\n    this._httpService = httpService || new HttpService(this.settings, this._error_codes);\n\n    // Initialize Event service\n    this._eventService =\n      eventService ||\n      new EventService((functionName, message, level, element) =>\n        this.apiLog(functionName, message, level, element),\n      );\n\n    // Initialize Serialization service\n    this._serializationService = serializationService || new SerializationService();\n\n    // Initialize Error Handling service\n    this._errorHandlingService =\n      errorHandlingService ||\n      createErrorHandlingService(\n        this._error_codes,\n        (functionName, message, level, element) =>\n          this.apiLog(functionName, message, level, element),\n        (errorNumber, detail) => this.getLmsErrorMessageDetails(errorNumber, detail),\n      );\n\n    // Initialize Offline Storage service if enabled\n    if (this.settings.enableOfflineSupport) {\n      this._offlineStorageService =\n        offlineStorageService ||\n        new OfflineStorageService(\n          this.settings,\n          this._error_codes,\n          (functionName, message, level, element) =>\n            this.apiLog(functionName, message, level, element),\n        );\n\n      if (this.settings.courseId) {\n        this._courseId = this.settings.courseId;\n      }\n\n      // Check for offline data to restore on initialization\n      if (this._offlineStorageService && this._courseId) {\n        this._offlineStorageService\n          .getOfflineData(this._courseId)\n          .then((offlineData) => {\n            if (offlineData) {\n              this.apiLog(\"constructor\", \"Found offline data to restore\", LogLevelEnum.INFO);\n              // Restore data from offline storage\n              this.loadFromJSON(offlineData.runtimeData);\n            }\n          })\n          .catch((error) => {\n            this.apiLog(\n              \"constructor\",\n              `Error retrieving offline data: ${error}`,\n              LogLevelEnum.ERROR,\n            );\n          });\n      }\n    }\n  }\n\n  public abstract cmi: BaseCMI;\n  public startingData?: StringKeyMap;\n\n  public currentState: number;\n  public apiLogLevel: LogLevel;\n  public selfReportSessionTime: boolean;\n\n  /**\n   * Get the last error code\n   * @return {string}\n   */\n  get lastErrorCode(): string {\n    return this._errorHandlingService?.lastErrorCode ?? \"0\";\n  }\n\n  /**\n   * Set the last error code\n   * @param {string} errorCode\n   */\n  set lastErrorCode(errorCode: string) {\n    if (this._errorHandlingService) {\n      this._errorHandlingService.lastErrorCode = errorCode;\n    }\n  }\n\n  /**\n   * Reset the API to its initial state.\n   * This method clears all current data and resets the API to an uninitialized state.\n   * It can optionally accept new settings to configure the API after reset.\n   *\n   * @param {Settings} settings - Optional new settings to apply after reset\n   */\n  abstract reset(settings?: Settings): void;\n\n  /**\n   * Common reset method for all APIs. New settings are merged with the existing settings.\n   * @param {Settings} settings\n   * @protected\n   */\n  commonReset(settings?: Settings): void {\n    this.apiLog(\"reset\", \"Called\", LogLevelEnum.INFO);\n\n    this.settings = { ...this.settings, ...settings };\n\n    this.clearScheduledCommit();\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n    this.lastErrorCode = \"0\";\n    this._eventService.reset();\n    this.startingData = {};\n\n    // Update offline storage service with new settings if it exists\n    if (this._offlineStorageService) {\n      this._offlineStorageService.updateSettings(this.settings);\n\n      if (settings?.courseId) {\n        this._courseId = settings.courseId;\n      }\n    }\n  }\n\n  /**\n   * Initialize the API\n   * @param {string} callbackName\n   * @param {string} initializeMessage\n   * @param {string} terminationMessage\n   * @return {string}\n   */\n  initialize(\n    callbackName: string,\n    initializeMessage?: string,\n    terminationMessage?: string,\n  ): string {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.isInitialized()) {\n      this.throwSCORMError(\"api\", this._error_codes.INITIALIZED, initializeMessage);\n    } else if (this.isTerminated()) {\n      this.throwSCORMError(\"api\", this._error_codes.TERMINATED, terminationMessage);\n    } else {\n      if (this.selfReportSessionTime) {\n        this.cmi.setStartTime();\n      }\n\n      this.currentState = global_constants.STATE_INITIALIZED;\n      this.lastErrorCode = \"0\";\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n\n      // If enabled, attempt to sync offline data on initialization\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._courseId &&\n        this.settings.syncOnInitialize &&\n        this._offlineStorageService.isDeviceOnline()\n      ) {\n        this._offlineStorageService.hasPendingOfflineData(this._courseId).then((hasPendingData) => {\n          if (hasPendingData) {\n            this.apiLog(\n              callbackName,\n              \"Syncing pending offline data on initialization\",\n              LogLevelEnum.INFO,\n            );\n            this._offlineStorageService?.syncOfflineData().then((syncSuccess) => {\n              if (syncSuccess) {\n                this.apiLog(callbackName, \"Successfully synced offline data\", LogLevelEnum.INFO);\n                this.processListeners(\"OfflineDataSynced\");\n              }\n            });\n          }\n        });\n      }\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Initialize the LMS API\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsInitialize(): string;\n\n  /**\n   * Finish the current LMS API session\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsFinish(): string;\n\n  /**\n   * Get the value of a CMI element from the LMS\n   * @param {string} CMIElement - The CMI element to get the value of\n   * @return {string} The value of the CMI element\n   */\n  abstract lmsGetValue(CMIElement: string): string;\n\n  /**\n   * Set the value of a CMI element in the LMS\n   * @param {string} CMIElement - The CMI element to set the value of\n   * @param {any} value - The value to set\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsSetValue(CMIElement: string, value: any): string;\n\n  /**\n   * Commit the current data to the LMS\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsCommit(): string;\n\n  /**\n   * Get the last error code from the LMS\n   * @return {string} The last error code\n   */\n  abstract lmsGetLastError(): string;\n\n  /**\n   * Get the error string for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get the string for\n   * @return {string} The error string\n   */\n  abstract lmsGetErrorString(CMIErrorCode: string | number): string;\n\n  /**\n   * Get diagnostic information for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get diagnostic information for\n   * @return {string} The diagnostic information\n   */\n  abstract lmsGetDiagnostic(CMIErrorCode: string | number): string;\n\n  /**\n   * Abstract method for validating that a response is correct.\n   * This method is used to validate the format and content of a response\n   * before it is set in the CMI data model.\n   *\n   * @param {string} _CMIElement - The CMI element path to validate\n   * @param {any} _value - The value to validate\n   * @throws {Error} If the response format is invalid\n   */\n  abstract validateCorrectResponse(_CMIElement: string, _value: any): void;\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   * APIs that inherit BaseAPI should override this method.\n   *\n   * @param {string} _CMIElement - unused\n   * @param {*} _value - unused\n   * @param {boolean} _foundFirstIndex - unused\n   * @return {BaseCMI|null}\n   * @abstract\n   */\n  abstract getChildElement(\n    _CMIElement: string,\n    _value: any,\n    _foundFirstIndex: boolean,\n  ): BaseCMI | null;\n\n  /**\n   * Attempts to store the data to the LMS, logs data if no LMS configured\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _calculateTotalTime\n   * @return {ResultObject}\n   * @abstract\n   */\n  abstract storeData(_calculateTotalTime: boolean): Promise<ResultObject>;\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _terminateCommit\n   * @return {StringKeyMap|Array}\n   * @abstract\n   */\n  abstract renderCommitCMI(_terminateCommit: boolean): StringKeyMap | Array<string>;\n\n  /**\n   * Render the commit object to the shortened format for LMS commit.\n   * This method transforms the CMI data into a format suitable for sending to the LMS.\n   * It is called during the commit process to prepare the data for transmission.\n   *\n   * @param {boolean} _terminateCommit - Whether this commit is part of the termination process\n   * @return {CommitObject} A formatted object containing the data to be sent to the LMS\n   * @example\n   * // Example of a commit object structure\n   * {\n   *   method: \"POST\",\n   *   params: {\n   *     cmi: { ... },\n   *     finishState: \"COMPLETED\"\n   *   }\n   * }\n   */\n  abstract renderCommitObject(_terminateCommit: boolean): CommitObject;\n\n  /**\n   * Logging for all SCORM actions\n   *\n   * @param {string} functionName\n   * @param {string} logMessage\n   * @param {number} messageLevel\n   * @param {string} CMIElement\n   */\n  apiLog(functionName: string, logMessage: string, messageLevel: LogLevel, CMIElement?: string) {\n    logMessage = formatMessage(functionName, logMessage, CMIElement);\n\n    if (messageLevel >= this.apiLogLevel) {\n      // Use the injected LoggingService\n      this._loggingService.log(messageLevel, logMessage);\n    }\n  }\n\n  /**\n   * Getter for _settings\n   * @return {InternalSettings}\n   */\n  get settings(): InternalSettings {\n    return this._settings;\n  }\n\n  /**\n   * Setter for _settings\n   * @param {Settings} settings\n   */\n  set settings(settings: Settings) {\n    const previousSettings = this._settings;\n    this._settings = { ...this._settings, ...settings } as InternalSettings;\n\n    // Update HTTP service settings\n    this._httpService?.updateSettings(this._settings);\n\n    // Update log level if it changed\n    if (settings.logLevel !== undefined && settings.logLevel !== previousSettings.logLevel) {\n      this.apiLogLevel = settings.logLevel;\n      this._loggingService?.setLogLevel(settings.logLevel);\n    }\n\n    // Update log handler if onLogMessage changed\n    if (\n      settings.onLogMessage !== undefined &&\n      settings.onLogMessage !== previousSettings.onLogMessage\n    ) {\n      this._loggingService?.setLogHandler(settings.onLogMessage);\n    }\n  }\n\n  /**\n   * Terminates the current run of the API\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async terminate(callbackName: string, checkTerminated: boolean): Promise<string> {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.TERMINATION_BEFORE_INIT,\n        this._error_codes.MULTIPLE_TERMINATION,\n      )\n    ) {\n      this.currentState = global_constants.STATE_TERMINATED;\n      // If enabled, attempt to sync offline data before termination\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._courseId &&\n        this.settings.syncOnTerminate &&\n        this._offlineStorageService.isDeviceOnline()\n      ) {\n        const hasPendingData = await this._offlineStorageService.hasPendingOfflineData(\n          this._courseId,\n        );\n        if (hasPendingData) {\n          this.apiLog(\n            callbackName,\n            \"Syncing pending offline data before termination\",\n            LogLevelEnum.INFO,\n          );\n          await this._offlineStorageService.syncOfflineData();\n        }\n      }\n\n      const result: ResultObject = await this.storeData(true);\n      if ((result.errorCode ?? 0) > 0) {\n        this.throwSCORMError(\"api\", result.errorCode);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Get the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  getValue(callbackName: string, checkTerminated: boolean, CMIElement: string): string {\n    let returnValue: string = \"\";\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.RETRIEVE_BEFORE_INIT,\n        this._error_codes.RETRIEVE_AFTER_TERM,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.getCMIValue(CMIElement);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement);\n    }\n\n    this.apiLog(callbackName, \": returned: \" + returnValue, LogLevelEnum.INFO, CMIElement);\n\n    if (returnValue === undefined) {\n      return \"\";\n    }\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Sets the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {string} commitCallback\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  setValue(\n    callbackName: string,\n    commitCallback: string,\n    checkTerminated: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (value !== undefined) {\n      value = String(value);\n    }\n    let returnValue: string = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.STORE_BEFORE_INIT,\n        this._error_codes.STORE_AFTER_TERM,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.setCMIValue(CMIElement, value);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement, value);\n    }\n\n    if (returnValue === undefined) {\n      returnValue = global_constants.SCORM_FALSE;\n    }\n\n    // If we didn't have any errors while setting the data, go ahead and\n    // schedule a commit, if autocommit is turned on\n    if (String(this.lastErrorCode) === \"0\") {\n      if (this.settings.autocommit) {\n        this.scheduleCommit(this.settings.autocommitSeconds * 1000, commitCallback);\n      }\n    }\n\n    this.apiLog(\n      callbackName,\n      \": \" + value + \": result: \" + returnValue,\n      LogLevelEnum.INFO,\n      CMIElement,\n    );\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async commit(callbackName: string, checkTerminated: boolean = false): Promise<string> {\n    this.clearScheduledCommit();\n\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.COMMIT_BEFORE_INIT,\n        this._error_codes.COMMIT_AFTER_TERM,\n      )\n    ) {\n      const result = await this.storeData(false);\n      if ((result.errorCode ?? 0) > 0) {\n        this.throwSCORMError(\"api\", result.errorCode);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      this.apiLog(callbackName, \" Result: \" + returnValue, LogLevelEnum.DEBUG, \"HttpRequest\");\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      this.processListeners(callbackName);\n\n      // If online and there is offline data pending, attempt to sync it\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._offlineStorageService.isDeviceOnline() &&\n        this._courseId\n      ) {\n        this._offlineStorageService.hasPendingOfflineData(this._courseId).then((hasPendingData) => {\n          if (hasPendingData) {\n            this.apiLog(callbackName, \"Syncing pending offline data\", LogLevelEnum.INFO);\n            this._offlineStorageService?.syncOfflineData().then((syncSuccess) => {\n              if (syncSuccess) {\n                this.apiLog(callbackName, \"Successfully synced offline data\", LogLevelEnum.INFO);\n                this.processListeners(\"OfflineDataSynced\");\n              } else {\n                this.apiLog(callbackName, \"Failed to sync some offline data\", LogLevelEnum.WARN);\n              }\n            });\n          }\n        });\n      }\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Returns last error code\n   * @param {string} callbackName\n   * @return {string}\n   */\n  getLastError(callbackName: string): string {\n    const returnValue = String(this.lastErrorCode);\n\n    this.processListeners(callbackName);\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getErrorString(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getDiagnostic(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode, true);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Checks the LMS state and ensures it has been initialized.\n   *\n   * @param {boolean} checkTerminated\n   * @param {number} beforeInitError\n   * @param {number} afterTermError\n   * @return {boolean}\n   */\n  checkState(checkTerminated: boolean, beforeInitError: number, afterTermError: number): boolean {\n    if (this.isNotInitialized()) {\n      this.throwSCORMError(\"api\", beforeInitError);\n      return false;\n    } else if (checkTerminated && this.isTerminated()) {\n      this.throwSCORMError(\"api\", afterTermError);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {(string|number)} _errorNumber\n   * @param {boolean} _detail\n   * @return {string}\n   * @abstract\n   */\n  getLmsErrorMessageDetails(_errorNumber: string | number, _detail: boolean = false): string {\n    throw new Error(\"The getLmsErrorMessageDetails method has not been implemented\");\n  }\n\n  /**\n   * Gets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @return {string}\n   * @abstract\n   */\n  getCMIValue(_CMIElement: string): string {\n    throw new Error(\"The getCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Sets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @param {any} _value\n   * @return {string}\n   * @abstract\n   */\n  setCMIValue(_CMIElement: string, _value: any): string {\n    throw new Error(\"The setCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Shared API method to set a valid for a given element.\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  _commonSetCMIValue(\n    methodName: string,\n    scorm2004: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (!CMIElement || CMIElement === \"\") {\n      return global_constants.SCORM_FALSE;\n    }\n\n    this.lastErrorCode = \"0\";\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap | BaseCMI = this as StringKeyMap;\n    let returnValue = global_constants.SCORM_FALSE;\n    let foundFirstIndex = false;\n\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      const attribute = structure[idx];\n\n      if (idx === structure.length - 1) {\n        if (scorm2004 && attribute.substring(0, 8) === \"{target=\") {\n          if (this.isInitialized()) {\n            this.throwSCORMError(CMIElement, this._error_codes.READ_ONLY_ELEMENT);\n            break;\n          } else {\n            refObject = {\n              ...refObject,\n              attribute: value,\n            };\n          }\n        } else if (!this._checkObjectHasProperty(refObject as StringKeyMap, attribute)) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        } else {\n          if (\n            stringMatches(CMIElement, \"\\\\.correct_responses\\\\.\\\\d+$\") &&\n            this.isInitialized() &&\n            attribute !== \"pattern\"\n          ) {\n            this.validateCorrectResponse(CMIElement, value);\n            if (this.lastErrorCode !== \"0\") {\n              this.throwSCORMError(CMIElement, this._error_codes.TYPE_MISMATCH);\n              break;\n            }\n          }\n\n          if (!scorm2004 || this._errorHandlingService.lastErrorCode === \"0\") {\n            if (attribute === \"__proto__\" || attribute === \"constructor\") {\n              this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n              break;\n            }\n            (refObject as StringKeyMap)[attribute] = value;\n            returnValue = global_constants.SCORM_TRUE;\n          }\n        }\n      } else {\n        refObject = (refObject as StringKeyMap)[attribute] as StringKeyMap;\n        if (!refObject) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n\n        if (refObject instanceof CMIArray) {\n          const index = parseInt(structure[idx + 1], 10);\n\n          // SCO is trying to set an item on an array\n          if (!isNaN(index)) {\n            const item = refObject.childArray[index];\n\n            if (item) {\n              refObject = item;\n              foundFirstIndex = true;\n            } else {\n              const newChild = this.getChildElement(CMIElement, value, foundFirstIndex);\n              foundFirstIndex = true;\n\n              if (!newChild) {\n                if (this.lastErrorCode === \"0\") {\n                  this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n                }\n                break;\n              } else {\n                if (refObject.initialized) newChild.initialize();\n                refObject.childArray[index] = newChild;\n                refObject = newChild;\n              }\n            }\n\n            // Have to update idx value to skip the array position\n            idx++;\n          }\n        }\n      }\n    }\n\n    if (returnValue === global_constants.SCORM_FALSE) {\n      this.apiLog(\n        methodName,\n        `There was an error setting the value for: ${CMIElement}, value of: ${value}`,\n        LogLevelEnum.WARN,\n      );\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @return {any}\n   */\n  _commonGetCMIValue(methodName: string, scorm2004: boolean, CMIElement: string): any {\n    if (!CMIElement || CMIElement === \"\") {\n      return \"\";\n    }\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap = this as StringKeyMap;\n    let attribute = null;\n\n    const uninitializedErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) has not been initialized.`;\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      attribute = structure[idx];\n\n      if (!scorm2004) {\n        if (idx === structure.length - 1) {\n          if (!this._checkObjectHasProperty(refObject, attribute)) {\n            this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n            return;\n          }\n        }\n      } else {\n        if (\n          String(attribute).substring(0, 8) === \"{target=\" &&\n          typeof refObject._isTargetValid == \"function\"\n        ) {\n          const target = String(attribute).substring(8, String(attribute).length - 9);\n          return refObject._isTargetValid(target);\n        } else if (!this._checkObjectHasProperty(refObject, attribute)) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          return;\n        }\n      }\n\n      refObject = refObject[attribute] as StringKeyMap;\n      if (refObject === undefined) {\n        this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n        break;\n      }\n\n      if (refObject instanceof CMIArray) {\n        const index = parseInt(structure[idx + 1], 10);\n\n        // SCO is trying to set an item on an array\n        if (!isNaN(index)) {\n          const item = refObject.childArray[index];\n\n          if (item) {\n            refObject = item;\n          } else {\n            this.throwSCORMError(\n              CMIElement,\n              this._error_codes.VALUE_NOT_INITIALIZED,\n              uninitializedErrorMessage,\n            );\n            break;\n          }\n\n          // Have to update idx value to skip the array position\n          idx++;\n        }\n      }\n    }\n\n    if (refObject === null || refObject === undefined) {\n      if (!scorm2004) {\n        if (attribute === \"_children\") {\n          this.throwSCORMError(CMIElement, this._error_codes.CHILDREN_ERROR, undefined);\n        } else if (attribute === \"_count\") {\n          this.throwSCORMError(CMIElement, this._error_codes.COUNT_ERROR, undefined);\n        }\n      }\n    } else {\n      return refObject;\n    }\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isInitialized(): boolean {\n    return this.currentState === global_constants.STATE_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_NOT_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isNotInitialized(): boolean {\n    return this.currentState === global_constants.STATE_NOT_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_TERMINATED\n   *\n   * @return {boolean}\n   */\n  isTerminated(): boolean {\n    return this.currentState === global_constants.STATE_TERMINATED;\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event.\n   * This method allows you to register a callback function that will be executed\n   * when the specified event occurs.\n   *\n   * @param {string} listenerName - The name of the event to listen for (e.g., \"Initialize\", \"Terminate\", \"GetValue\", \"SetValue\", \"Commit\")\n   * @param {function} callback - The function to execute when the event occurs. The callback will receive relevant event data.\n   * @example\n   * // Listen for Initialize events\n   * api.on(\"Initialize\", function() {\n   *   console.log(\"API has been initialized\");\n   * });\n   *\n   * // Listen for SetValue events\n   * api.on(\"SetValue\", function(element, value) {\n   *   console.log(\"Setting \" + element + \" to \" + value);\n   * });\n   */\n  on(listenerName: string, callback: Function) {\n    this._eventService.on(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener.\n   * This method removes a previously registered callback for an event.\n   * Both the event name and the callback reference must match what was used in the 'on' method.\n   *\n   * @param {string} listenerName - The name of the event to stop listening for\n   * @param {function} callback - The callback function to remove\n   * @example\n   * // Remove a specific listener\n   * const myCallback = function() { console.log(\"API initialized\"); };\n   * api.on(\"Initialize\", myCallback);\n   * // Later, when you want to remove it:\n   * api.off(\"Initialize\", myCallback);\n   */\n  off(listenerName: string, callback: Function) {\n    this._eventService.off(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event.\n   * This method removes all callbacks registered for the specified event.\n   *\n   * @param {string} listenerName - The name of the event to clear all listeners for\n   * @example\n   * // Remove all listeners for the Initialize event\n   * api.clear(\"Initialize\");\n   */\n  clear(listenerName: string) {\n    this._eventService.clear(listenerName);\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created for a specific event.\n   * This method is called internally when SCORM events occur to notify all registered listeners.\n   * It triggers all callback functions registered for the specified event.\n   *\n   * @param {string} functionName - The name of the function/event that occurred\n   * @param {string} CMIElement - Optional CMI element involved in the event\n   * @param {any} value - Optional value associated with the event\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this._eventService.processListeners(functionName, CMIElement, value);\n  }\n\n  /**\n   * Throws a SCORM error with the specified error number and optional message.\n   * This method sets the last error code and can be used to indicate that an operation failed.\n   * The error number should correspond to one of the standard SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The SCORM error code to set\n   * @param {string} message - Optional custom error message to provide additional context\n   * @example\n   * // Throw a \"not initialized\" error\n   * this.throwSCORMError(301, \"The API must be initialized before calling GetValue\");\n   */\n  throwSCORMError(CMIElement: string, errorNumber: number, message?: string) {\n    this._errorHandlingService.throwSCORMError(CMIElement, errorNumber, message);\n  }\n\n  /**\n   * Clears the last SCORM error code when an operation succeeds.\n   * This method is typically called after successful API operations to reset the error state.\n   * It only clears the error if the success parameter is \"true\".\n   *\n   * @param {string} success - A string indicating whether the operation succeeded (\"true\" or \"false\")\n   * @example\n   * // Clear error after successful operation\n   * this.clearSCORMError(\"true\");\n   */\n  clearSCORMError(success: string) {\n    this._errorHandlingService.clearSCORMError(success);\n  }\n\n  /**\n   * Load the CMI from a flattened JSON object.\n   * This method populates the CMI data model from a flattened JSON structure\n   * where keys represent CMI element paths (e.g., \"cmi.core.student_id\").\n   *\n   * @param {StringKeyMap} json - The flattened JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a flattened JSON structure\n   * api.loadFromFlattenedJSON({\n   *   \"cmi.core.student_id\": \"12345\",\n   *   \"cmi.core.student_name\": \"John Doe\",\n   *   \"cmi.core.lesson_status\": \"incomplete\"\n   * });\n   */\n  loadFromFlattenedJSON(json: StringKeyMap, CMIElement?: string) {\n    if (!CMIElement) {\n      // by default, we start from a blank string because we're expecting each element to start with `cmi`\n      CMIElement = \"\";\n    }\n\n    this._serializationService.loadFromFlattenedJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Returns a flattened JSON object representing the current CMI data.\n   */\n  getFlattenedCMI(): StringKeyMap {\n    return Utilities.flatten(this.renderCMIToJSONObject());\n  }\n\n  /**\n   * Loads CMI data from a hierarchical JSON object.\n   * This method populates the CMI data model from a nested JSON structure\n   * that mirrors the CMI object hierarchy.\n   *\n   * @param {StringKeyMap} json - The hierarchical JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a hierarchical JSON structure\n   * api.loadFromJSON({\n   *   core: {\n   *     student_id: \"12345\",\n   *     student_name: \"John Doe\",\n   *     lesson_status: \"incomplete\"\n   *   },\n   *   objectives: [\n   *     { id: \"obj1\", score: { raw: 85 } }\n   *   ]\n   * });\n   */\n  loadFromJSON(json: StringKeyMap, CMIElement: string = \"\") {\n    if (\n      (!CMIElement || CMIElement === \"\") &&\n      !Object.hasOwnProperty.call(json, \"cmi\") &&\n      !Object.hasOwnProperty.call(json, \"adl\")\n    ) {\n      // providing a backward compatibility for the old v1 API\n      CMIElement = \"cmi\";\n    }\n    this._serializationService.loadFromJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Render the CMI object to a JSON string for sending to an LMS.\n   * This method serializes the current CMI data model to a JSON string.\n   * The output format is controlled by the sendFullCommit setting.\n   *\n   * @return {string} A JSON string representation of the CMI data\n   * @example\n   * // Get the current CMI data as a JSON string\n   * const jsonString = api.renderCMIToJSONString();\n   * console.log(jsonString); // '{\"core\":{\"student_id\":\"12345\",...}}'\n   */\n  renderCMIToJSONString(): string {\n    return this._serializationService.renderCMIToJSONString(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Returns a JavaScript object representing the current CMI data.\n   * This method creates a plain JavaScript object that mirrors the\n   * structure of the CMI data model, suitable for further processing.\n   *\n   * @return {StringKeyMap} A JavaScript object representing the CMI data\n   * @example\n   * // Get the current CMI data as a JavaScript object\n   * const cmiObject = api.renderCMIToJSONObject();\n   * console.log(cmiObject.core.student_id); // \"12345\"\n   */\n  renderCMIToJSONObject(): StringKeyMap {\n    return this._serializationService.renderCMIToJSONObject(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Process an HTTP request\n   *\n   * @param {string} url - The URL to send the request to\n   * @param {CommitObject | StringKeyMap | Array<any>} params - The parameters to send\n   * @param {boolean} immediate - Whether to send the request immediately without waiting\n   * @returns {Promise<ResultObject>} - The result of the request\n   * @async\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n  ): Promise<ResultObject> {\n    // If offline support is enabled and device is offline, store data locally instead of sending\n    if (\n      this.settings.enableOfflineSupport &&\n      this._offlineStorageService &&\n      !this._offlineStorageService.isDeviceOnline() &&\n      this._courseId\n    ) {\n      this.apiLog(\n        \"processHttpRequest\",\n        \"Device is offline, storing data locally\",\n        LogLevelEnum.INFO,\n      );\n\n      if (params && typeof params === \"object\" && \"cmi\" in params) {\n        return await this._offlineStorageService.storeOffline(\n          this._courseId,\n          params as CommitObject,\n        );\n      } else {\n        this.apiLog(\n          \"processHttpRequest\",\n          \"Invalid commit data format for offline storage\",\n          LogLevelEnum.ERROR,\n        );\n        return {\n          result: global_constants.SCORM_FALSE,\n          errorCode: this._error_codes.GENERAL,\n        };\n      }\n    }\n\n    // Otherwise, proceed with normal HTTP request\n    return await this._httpService.processHttpRequest(\n      url,\n      params,\n      immediate,\n      (functionName, message, level, element) => this.apiLog(functionName, message, level, element),\n      (functionName, CMIElement, value) => this.processListeners(functionName, CMIElement, value),\n    );\n  }\n\n  /**\n   * Schedules a commit operation to occur after a specified delay.\n   * This method is used to implement auto-commit functionality, where data\n   * is periodically sent to the LMS without requiring explicit commit calls.\n   *\n   * @param {number} when - The number of milliseconds to wait before committing\n   * @param {string} callback - The name of the commit event callback\n   * @example\n   * // Schedule a commit to happen in 60 seconds\n   * api.scheduleCommit(60000, \"commit\");\n   */\n  scheduleCommit(when: number, callback: string) {\n    if (!this._timeout) {\n      this._timeout = new ScheduledCommit(this, when, callback);\n      this.apiLog(\"scheduleCommit\", \"scheduled\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Clears and cancels any currently scheduled commits.\n   * This method is typically called when an explicit commit is performed\n   * or when the API is terminated, to prevent redundant commits.\n   *\n   * @example\n   * // Cancel any pending scheduled commits\n   * api.clearScheduledCommit();\n   */\n  clearScheduledCommit() {\n    if (this._timeout) {\n      this._timeout.cancel();\n      this._timeout = undefined;\n      this.apiLog(\"clearScheduledCommit\", \"cleared\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Checks if an object has a specific property, using multiple detection methods.\n   * This method performs a thorough check for property existence by:\n   * 1. Checking if it's an own property using Object.hasOwnProperty\n   * 2. Checking if it's defined in the prototype with a property descriptor\n   * 3. Checking if it's accessible via the 'in' operator (includes inherited properties)\n   *\n   * @param {StringKeyMap} StringKeyMap - The object to check for the property\n   * @param {string} attribute - The property name to look for\n   * @return {boolean} True if the property exists on the object or its prototype chain\n   * @private\n   *\n   * @example\n   * // Check for an own property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"name\"); // Returns true\n   *\n   * @example\n   * // Check for an inherited property\n   * class Parent { get type() { return \"parent\"; } }\n   * const child = Object.create(new Parent());\n   * this._checkObjectHasProperty(child, \"type\"); // Returns true\n   *\n   * @example\n   * // Check for a non-existent property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"age\"); // Returns false\n   */\n  private _checkObjectHasProperty(StringKeyMap: StringKeyMap, attribute: string): boolean {\n    return (\n      Object.hasOwnProperty.call(StringKeyMap, attribute) ||\n      Object.getOwnPropertyDescriptor(Object.getPrototypeOf(StringKeyMap), attribute) != null ||\n      attribute in StringKeyMap\n    );\n  }\n\n  /**\n   * Handles exceptions that occur when accessing CMI values.\n   * This method delegates to the ErrorHandlingService to process exceptions\n   * that occur during CMI data operations, ensuring consistent error handling\n   * throughout the API.\n   *\n   * @param {string} CMIElement\n   * @param {any} e - The exception that was thrown\n   * @param {string} returnValue - The default return value to use if an error occurs\n   * @return {string} Either the original returnValue or SCORM_FALSE if an error occurred\n   * @private\n   *\n   * @example\n   * // Handle a validation error when getting a CMI value\n   * try {\n   *   return this.getCMIValue(\"cmi.core.score.raw\");\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"\");\n   * }\n   *\n   * @example\n   * // Handle a general error when setting a CMI value\n   * try {\n   *   this.setCMIValue(\"cmi.core.lesson_status\", \"completed\");\n   *   return \"true\";\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"false\");\n   * }\n   */\n  private handleValueAccessException(CMIElement: string, e: any, returnValue: string): string {\n    if (e instanceof ValidationError) {\n      this.lastErrorCode = String(e.errorCode);\n      returnValue = global_constants.SCORM_FALSE;\n      this.throwSCORMError(CMIElement, e.errorCode, e.errorMessage);\n    } else {\n      if (e instanceof Error && e.message) {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, e.message);\n      } else {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, \"Unknown error\");\n      }\n    }\n    return returnValue;\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS.\n   * This method delegates to the SerializationService to create a properly\n   * formatted object containing the CMI data that needs to be sent to the LMS.\n   * The format and content of the commit object depend on whether this is a\n   * regular commit or a termination commit.\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @return {CommitObject|StringKeyMap|Array} The formatted commit object\n   * @protected\n   *\n   * @example\n   * // Create a regular commit object\n   * const regularCommit = this.getCommitObject(false);\n   * // Result might be: { cmi: { core: { lesson_status: \"incomplete\" } } }\n   *\n   * @example\n   * // Create a termination commit object (includes total_time)\n   * const terminationCommit = this.getCommitObject(true);\n   * // Result might be: { cmi: { core: { lesson_status: \"completed\", total_time: \"PT1H30M\" } } }\n   */\n  protected getCommitObject(terminateCommit: boolean): CommitObject | StringKeyMap | Array<any> {\n    return this._serializationService.getCommitObject(\n      terminateCommit,\n      this.settings.alwaysSendTotalTime,\n      this.settings.renderCommonCommitFields,\n      (terminateCommit) => this.renderCommitObject(terminateCommit),\n      (terminateCommit) => this.renderCommitCMI(terminateCommit),\n      this.apiLogLevel,\n    );\n  }\n}\n","import { CMI } from \"./cmi/scorm12/cmi\";\nimport * as Utilities from \"./utilities\";\nimport { StringKeyMap, stringMatches } from \"./utilities\";\nimport { global_constants, scorm12_constants } from \"./constants/api_constants\";\nimport { scorm12_errors } from \"./constants/error_codes\";\n\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport { CMIObjectivesObject } from \"./cmi/scorm12/objectives\";\nimport {\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n} from \"./cmi/scorm12/interactions\";\nimport { NAV } from \"./cmi/scorm12/nav\";\nimport { CommitObject, ResultObject, ScoreObject, Settings } from \"./types/api_types\";\nimport { CompletionStatus, SuccessStatus } from \"./constants/enums\";\nimport BaseAPI from \"./BaseAPI\";\nimport { scorm12_regex } from \"./constants/regex\";\n\n/**\n * API class for SCORM 1.2\n */\nclass Scorm12API extends BaseAPI {\n  /**\n   * Constructor for SCORM 1.2 API\n   * @param {object} settings\n   */\n  constructor(settings?: Settings) {\n    if (settings) {\n      if (settings.mastery_override === undefined) {\n        settings.mastery_override = false;\n      }\n    }\n\n    super(scorm12_errors, settings);\n\n    this.cmi = new CMI();\n    this.nav = new NAV();\n\n    // Rename functions to match 1.2 Spec and expose to modules\n    this.LMSInitialize = this.lmsInitialize;\n    this.LMSFinish = this.lmsFinish;\n    this.LMSGetValue = this.lmsGetValue;\n    this.LMSSetValue = this.lmsSetValue;\n    this.LMSCommit = this.lmsCommit;\n    this.LMSGetLastError = this.lmsGetLastError;\n    this.LMSGetErrorString = this.lmsGetErrorString;\n    this.LMSGetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  public statusSetByModule = false;\n\n  cmi: CMI;\n  nav: NAV;\n\n  LMSInitialize: () => string;\n  LMSFinish: () => string;\n  LMSGetValue: (CMIElement: string) => string;\n  LMSSetValue: (CMIElement: string, value: any) => string;\n  LMSCommit: () => string;\n  LMSGetLastError: () => string;\n  LMSGetErrorString: (CMIErrorCode: string) => string;\n  LMSGetDiagnostic: (CMIErrorCode: string) => string;\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset(settings?: Settings) {\n    this.commonReset(settings);\n\n    this.cmi?.reset();\n    this.nav?.reset();\n  }\n\n  /**\n   * lmsInitialize function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize(): string {\n    this.cmi.initialize();\n    if (this.cmi.core.lesson_status) {\n      this.statusSetByModule = true;\n    } else {\n      this.cmi.core.lesson_status = \"not attempted\";\n    }\n    return this.initialize(\n      \"LMSInitialize\",\n      \"LMS was already initialized!\",\n      \"LMS is already finished!\",\n    );\n  }\n\n  /**\n   * LMSFinish function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish(): string {\n    (async () => {\n      await this.internalFinish();\n    })();\n    return global_constants.SCORM_TRUE;\n  }\n\n  async internalFinish(): Promise<string> {\n    const result = await this.terminate(\"LMSFinish\", true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      if (this.nav.event !== \"\") {\n        if (this.nav.event === \"continue\") {\n          this.processListeners(\"SequenceNext\");\n        } else {\n          this.processListeners(\"SequencePrevious\");\n        }\n      } else if (this.settings.autoProgress) {\n        this.processListeners(\"SequenceNext\");\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * LMSGetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement: string): string {\n    return this.getValue(\"LMSGetValue\", false, CMIElement);\n  }\n\n  /**\n   * LMSSetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement: string, value: any): string {\n    if (CMIElement === \"cmi.core.lesson_status\") {\n      this.statusSetByModule = true;\n    }\n    return this.setValue(\"LMSSetValue\", \"LMSCommit\", false, CMIElement, value);\n  }\n\n  /**\n   * LMSCommit function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit(): string {\n    if (this.settings.asyncCommit) {\n      this.scheduleCommit(500, \"LMSCommit\");\n    } else {\n      (async () => {\n        await this.commit(\"LMSCommit\", false);\n      })();\n    }\n    return global_constants.SCORM_TRUE;\n  }\n\n  /**\n   * LMSGetLastError function from SCORM 1.2 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError(): string {\n    return this.getLastError(\"LMSGetLastError\");\n  }\n\n  /**\n   * LMSGetErrorString function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode: string): string {\n    return this.getErrorString(\"LMSGetErrorString\", CMIErrorCode);\n  }\n\n  /**\n   * LMSGetDiagnostic function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode: string): string {\n    return this.getDiagnostic(\"LMSGetDiagnostic\", CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  override setCMIValue(CMIElement: string, value: any): string {\n    return this._commonSetCMIValue(\"LMSSetValue\", false, CMIElement, value);\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  override getCMIValue(CMIElement: string): any {\n    return this._commonGetCMIValue(\"getCMIValue\", false, CMIElement);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {*} _value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI|null}\n   */\n  getChildElement(CMIElement: string, _value: any, foundFirstIndex: boolean): BaseCMI | null {\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      return new CMIObjectivesObject();\n    } else if (\n      foundFirstIndex &&\n      stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+\")\n    ) {\n      return new CMIInteractionsCorrectResponsesObject();\n    } else if (\n      foundFirstIndex &&\n      stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+\")\n    ) {\n      return new CMIInteractionsObjectivesObject();\n    } else if (!foundFirstIndex && stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\")) {\n      return new CMIInteractionsObject();\n    }\n\n    return null;\n  }\n\n  /**\n   * Validates Correct Response values\n   *\n   * @param {string} _CMIElement\n   * @param {*} _value\n   */\n  validateCorrectResponse(_CMIElement: string, _value: any) {\n    // do nothing\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {number|string} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  override getLmsErrorMessageDetails(errorNumber: number | string, detail: boolean): string {\n    let basicMessage = \"No Error\";\n    let detailMessage = \"No Error\";\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (scorm12_constants.error_descriptions[errorNumber]) {\n      basicMessage = scorm12_constants.error_descriptions[errorNumber].basicMessage;\n      detailMessage = scorm12_constants.error_descriptions[errorNumber].detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {Scorm12API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI: Scorm12API) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} includeTotalTime - Whether to include total time in the commit data\n   * @return {object|Array}\n   */\n  renderCommitCMI(\n    terminateCommit: boolean,\n    includeTotalTime: boolean = false,\n  ): StringKeyMap | Array<string> {\n    const cmiExport: StringKeyMap = this.renderCMIToJSONObject();\n\n    if (includeTotalTime) {\n      (cmiExport.cmi as any).core.total_time = this.cmi.getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened: StringKeyMap = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case \"flattened\":\n        return Utilities.flatten(cmiExport);\n      case \"params\":\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case \"json\":\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} includeTotalTime - Whether to include total time in the commit data\n   * @return {CommitObject}\n   */\n  renderCommitObject(terminateCommit: boolean, includeTotalTime: boolean = false): CommitObject {\n    const cmiExport = this.renderCommitCMI(terminateCommit, includeTotalTime);\n    const totalTimeHHMMSS = includeTotalTime ? this.cmi.getCurrentTotalTime() : \"\";\n    const totalTimeSeconds = Utilities.getTimeAsSeconds(totalTimeHHMMSS, scorm12_regex.CMITimespan);\n    const lessonStatus = this.cmi.core.lesson_status;\n    let completionStatus = CompletionStatus.UNKNOWN;\n    let successStatus = SuccessStatus.UNKNOWN;\n    if (lessonStatus) {\n      completionStatus =\n        lessonStatus === \"completed\" || lessonStatus === \"passed\"\n          ? CompletionStatus.COMPLETED\n          : CompletionStatus.INCOMPLETE;\n      if (lessonStatus === \"passed\") {\n        successStatus = SuccessStatus.PASSED;\n      } else if (lessonStatus === \"failed\") {\n        successStatus = SuccessStatus.FAILED;\n      }\n    }\n\n    const scoreObject: ScoreObject = this.cmi?.core?.score?.getScoreObject() || {};\n    const commitObject: CommitObject = {\n      successStatus: successStatus,\n      completionStatus: completionStatus,\n      runtimeData: cmiExport as StringKeyMap,\n      totalTimeSeconds: totalTimeSeconds,\n    };\n    if (scoreObject) {\n      commitObject.score = scoreObject;\n    }\n    return commitObject;\n  }\n\n  /**\n   * Attempts to store the data to the LMS\n   *\n   * @param {boolean} terminateCommit\n   * @return {ResultObject}\n   */\n  async storeData(terminateCommit: boolean): Promise<ResultObject> {\n    if (terminateCommit) {\n      const originalStatus = this.cmi.core.lesson_status;\n      if (\n        !this.cmi.core.lesson_status ||\n        (!this.statusSetByModule && this.cmi.core.lesson_status === \"not attempted\")\n      ) {\n        this.cmi.core.lesson_status = \"completed\";\n      }\n\n      if (this.cmi.core.lesson_mode === \"normal\") {\n        if (this.cmi.core.credit === \"credit\") {\n          if (\n            this.settings.mastery_override &&\n            this.cmi.student_data.mastery_score !== \"\" &&\n            this.cmi.core.score.raw !== \"\"\n          ) {\n            this.cmi.core.lesson_status =\n              parseFloat(this.cmi.core.score.raw) >= parseFloat(this.cmi.student_data.mastery_score)\n                ? \"passed\"\n                : \"failed\";\n          }\n        }\n      } else if (this.cmi.core.lesson_mode === \"browse\") {\n        if (\n          ((this.startingData?.cmi as any)?.core?.lesson_status || \"\") === \"\" &&\n          originalStatus === \"not attempted\"\n        ) {\n          this.cmi.core.lesson_status = \"browsed\";\n        }\n      }\n    }\n\n    const commitObject = this.getCommitObject(terminateCommit);\n    if (typeof this.settings.lmsCommitUrl === \"string\") {\n      return await this.processHttpRequest(\n        this.settings.lmsCommitUrl,\n        commitObject,\n        terminateCommit,\n      );\n    } else {\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    }\n  }\n}\n\nexport default Scorm12API;\n","import { ValidationError } from \"../exceptions\";\nimport { aicc_constants } from \"../constants/api_constants\";\n\nconst aicc_errors = aicc_constants.error_descriptions;\n\n/**\n * AICC Validation Error\n */\nexport class AICCValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(aicc_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        aicc_errors[String(errorCode)].basicMessage,\n        aicc_errors[String(errorCode)].detailMessage,\n      );\n    } else {\n      super(CMIElement, 101, aicc_errors[\"101\"].basicMessage, aicc_errors[\"101\"].detailMessage);\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, AICCValidationError.prototype);\n  }\n}\n","import { checkValidFormat } from \"../common/validation\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function checkAICCValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm12_errors.TYPE_MISMATCH,\n    AICCValidationError,\n    allowEmptyString,\n  );\n}\n","import { CMIArray } from \"../common/array\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { aicc_regex } from \"../../constants/regex\";\n\n/**\n * AICC Evaluation object\n */\nexport class CMIEvaluation extends BaseCMI {\n  /**\n   * Constructor for AICC Evaluation object\n   */\n  constructor() {\n    super(\"cmi.evaluation\");\n    this.comments = new CMIEvaluationComments();\n  }\n\n  public comments: CMIEvaluationComments;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.comments?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this.comments?.reset();\n  }\n\n  /**\n   * toJSON for cmi.evaluation object\n   * @return {{comments: CMIEvaluationComments}}\n   */\n  toJSON(): {\n    comments: CMIEvaluationComments;\n  } {\n    this.jsonString = true;\n    const result = {\n      comments: this.comments,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing AICC's cmi.evaluation.comments object\n */\n\nclass CMIEvaluationComments extends CMIArray {\n  /**\n   * Constructor for AICC Evaluation Comments object\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.evaluation.comments\",\n      children: aicc_constants.comments_children,\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: AICCValidationError,\n    });\n  }\n}\n\n/**\n * Class for AICC Evaluation Comments\n */\nexport class CMIEvaluationCommentsObject extends BaseCMI {\n  private _content = \"\";\n  private _location = \"\";\n  private _time = \"\";\n\n  /**\n   * Constructor for Evaluation Comments\n   */\n  constructor() {\n    super(\"cmi.evaluation.comments.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._content = \"\";\n    this._location = \"\";\n    this._time = \"\";\n  }\n\n  /**\n   * Getter for _content\n   * @return {string}\n   */\n  get content(): string {\n    return this._content;\n  }\n\n  /**\n   * Setter for _content\n   * @param {string} content\n   */\n  set content(content: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".content\", content, aicc_regex.CMIString256)) {\n      this._content = content;\n    }\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".location\", location, aicc_regex.CMIString256)) {\n      this._location = location;\n    }\n  }\n\n  /**\n   * Getter for _time\n   * @return {string}\n   */\n  get time(): string {\n    return this._time;\n  }\n\n  /**\n   * Setting for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".time\", time, aicc_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.evaluation.comments.n object\n   * @return {\n   *    {\n   *      content: string,\n   *      location: string,\n   *      time: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    content: string;\n    location: string;\n    time: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      content: this.content,\n      location: this.location,\n      time: this.time,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { CMIStudentPreference } from \"../scorm12/student_preference\";\n\n/**\n * StudentPreferences class for AICC\n */\nexport class AICCStudentPreferences extends CMIStudentPreference {\n  /**\n   * Constructor for AICC Student Preferences object\n   */\n  constructor() {\n    super(aicc_constants.student_preference_children);\n    this.windows = new CMIArray({\n      CMIElement: \"cmi.student_preference.windows\",\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: AICCValidationError,\n      children: \"\",\n    });\n  }\n\n  public windows: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.windows?.initialize();\n  }\n\n  private _lesson_type = \"\";\n  private _text_color = \"\";\n  private _text_location = \"\";\n  private _text_size = \"\";\n  private _video = \"\";\n\n  /**\n   * Getter for _lesson_type\n   * @return {string}\n   */\n  get lesson_type(): string {\n    return this._lesson_type;\n  }\n\n  /**\n   * Setter for _lesson_type\n   * @param {string} lesson_type\n   */\n  set lesson_type(lesson_type: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".lesson_type\", lesson_type, aicc_regex.CMIString256)\n    ) {\n      this._lesson_type = lesson_type;\n    }\n  }\n\n  /**\n   * Getter for _text_color\n   * @return {string}\n   */\n  get text_color(): string {\n    return this._text_color;\n  }\n\n  /**\n   * Setter for _text_color\n   * @param {string} text_color\n   */\n  set text_color(text_color: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".text_color\", text_color, aicc_regex.CMIString256)\n    ) {\n      this._text_color = text_color;\n    }\n  }\n\n  /**\n   * Getter for _text_location\n   * @return {string}\n   */\n  get text_location(): string {\n    return this._text_location;\n  }\n\n  /**\n   * Setter for _text_location\n   * @param {string} text_location\n   */\n  set text_location(text_location: string) {\n    if (\n      checkAICCValidFormat(\n        this._cmi_element + \".text_location\",\n        text_location,\n        aicc_regex.CMIString256,\n      )\n    ) {\n      this._text_location = text_location;\n    }\n  }\n\n  /**\n   * Getter for _text_size\n   * @return {string}\n   */\n  get text_size(): string {\n    return this._text_size;\n  }\n\n  /**\n   * Setter for _text_size\n   * @param {string} text_size\n   */\n  set text_size(text_size: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".text_size\", text_size, aicc_regex.CMIString256)\n    ) {\n      this._text_size = text_size;\n    }\n  }\n\n  /**\n   * Getter for _video\n   * @return {string}\n   */\n  get video(): string {\n    return this._video;\n  }\n\n  /**\n   * Setter for _video\n   * @param {string} video\n   */\n  set video(video: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".video\", video, aicc_regex.CMIString256)) {\n      this._video = video;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_preference\n   *\n   * @return {\n   *    {\n   *      audio: string,\n   *      language: string,\n   *      speed: string,\n   *      text: string,\n   *      text_color: string,\n   *      text_location: string,\n   *      text_size: string,\n   *      video: string,\n   *      windows: CMIArray\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    audio: string;\n    language: string;\n    lesson_type: string;\n    speed: string;\n    text: string;\n    text_color: string;\n    text_location: string;\n    text_size: string;\n    video: string;\n    windows: CMIArray;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio: this.audio,\n      language: this.language,\n      lesson_type: this.lesson_type,\n      speed: this.speed,\n      text: this.text,\n      text_color: this.text_color,\n      text_location: this.text_location,\n      text_size: this.text_size,\n      video: this.video,\n      windows: this.windows,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Class representing the AICC cmi.student_demographics object\n */\nexport class CMIStudentDemographics extends BaseCMI {\n  private __children = aicc_constants.student_demographics_children;\n  private _city = \"\";\n  private _class = \"\";\n  private _company = \"\";\n  private _country = \"\";\n  private _experience = \"\";\n  private _familiar_name = \"\";\n  private _instructor_name = \"\";\n  private _title = \"\";\n  private _native_language = \"\";\n  private _state = \"\";\n  private _street_address = \"\";\n  private _telephone = \"\";\n  private _years_experience = \"\";\n\n  /**\n   * Constructor for AICC StudentDemographics object\n   */\n  constructor() {\n    super(\"cmi.student_demographics\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Getter for city\n   * @return {string}\n   */\n  get city(): string {\n    return this._city;\n  }\n\n  /**\n   * Setter for _city. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} city\n   */\n  set city(city: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.city\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._city = city;\n    }\n  }\n\n  /**\n   * Getter for class\n   * @return {string}\n   */\n  get class(): string {\n    return this._class;\n  }\n\n  /**\n   * Setter for _class. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} clazz\n   */\n  set class(clazz: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.class\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._class = clazz;\n    }\n  }\n\n  /**\n   * Getter for company\n   * @return {string}\n   */\n  get company(): string {\n    return this._company;\n  }\n\n  /**\n   * Setter for _company. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} company\n   */\n  set company(company: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.company\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._company = company;\n    }\n  }\n\n  /**\n   * Getter for country\n   * @return {string}\n   */\n  get country(): string {\n    return this._country;\n  }\n\n  /**\n   * Setter for _country. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} country\n   */\n  set country(country: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.country\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._country = country;\n    }\n  }\n\n  /**\n   * Getter for experience\n   * @return {string}\n   */\n  get experience(): string {\n    return this._experience;\n  }\n\n  /**\n   * Setter for _experience. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} experience\n   */\n  set experience(experience: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.experience\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._experience = experience;\n    }\n  }\n\n  /**\n   * Getter for familiar_name\n   * @return {string}\n   */\n  get familiar_name(): string {\n    return this._familiar_name;\n  }\n\n  /**\n   * Setter for _familiar_name. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} familiar_name\n   */\n  set familiar_name(familiar_name: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.familiar_name\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._familiar_name = familiar_name;\n    }\n  }\n\n  /**\n   * Getter for instructor_name\n   * @return {string}\n   */\n  get instructor_name(): string {\n    return this._instructor_name;\n  }\n\n  /**\n   * Setter for _instructor_name. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} instructor_name\n   */\n  set instructor_name(instructor_name: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.instructor_name\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._instructor_name = instructor_name;\n    }\n  }\n\n  /**\n   * Getter for title\n   * @return {string}\n   */\n  get title(): string {\n    return this._title;\n  }\n\n  /**\n   * Setter for _title. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} title\n   */\n  set title(title: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.title\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._title = title;\n    }\n  }\n\n  /**\n   * Getter for native_language\n   * @return {string}\n   */\n  get native_language(): string {\n    return this._native_language;\n  }\n\n  /**\n   * Setter for _native_language. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} native_language\n   */\n  set native_language(native_language: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.native_language\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._native_language = native_language;\n    }\n  }\n\n  /**\n   * Getter for state\n   * @return {string}\n   */\n  get state(): string {\n    return this._state;\n  }\n\n  /**\n   * Setter for _state. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} state\n   */\n  set state(state: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.state\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._state = state;\n    }\n  }\n\n  /**\n   * Getter for street_address\n   * @return {string}\n   */\n  get street_address(): string {\n    return this._street_address;\n  }\n\n  /**\n   * Setter for _street_address. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} street_address\n   */\n  set street_address(street_address: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.street_address\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._street_address = street_address;\n    }\n  }\n\n  /**\n   * Getter for telephone\n   * @return {string}\n   */\n  get telephone(): string {\n    return this._telephone;\n  }\n\n  /**\n   * Setter for _telephone. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} telephone\n   */\n  set telephone(telephone: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.telephone\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._telephone = telephone;\n    }\n  }\n\n  /**\n   * Getter for years_experience\n   * @return {string}\n   */\n  get years_experience(): string {\n    return this._years_experience;\n  }\n\n  /**\n   * Setter for _years_experience. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} years_experience\n   */\n  set years_experience(years_experience: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.years_experience\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._years_experience = years_experience;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_demographics object\n   * @return {\n   *      {\n   *        city: string,\n   *        class: string,\n   *        company: string,\n   *        country: string,\n   *        experience: string,\n   *        familiar_name: string,\n   *        instructor_name: string,\n   *        title: string,\n   *        native_language: string,\n   *        state: string,\n   *        street_address: string,\n   *        telephone: string,\n   *        years_experience: string\n   *      }\n   *    }\n   */\n  toJSON(): {\n    city: string;\n    class: string;\n    company: string;\n    country: string;\n    experience: string;\n    familiar_name: string;\n    instructor_name: string;\n    title: string;\n    native_language: string;\n    state: string;\n    street_address: string;\n    telephone: string;\n    years_experience: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      city: this.city,\n      class: this.class,\n      company: this.company,\n      country: this.country,\n      experience: this.experience,\n      familiar_name: this.familiar_name,\n      instructor_name: this.instructor_name,\n      title: this.title,\n      native_language: this.native_language,\n      state: this.state,\n      street_address: this.street_address,\n      telephone: this.telephone,\n      years_experience: this.years_experience,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { checkAICCValidFormat } from \"./validation\";\n\n/**\n * Class representing the AICC cmi.student_data.tries object\n */\nexport class CMITries extends CMIArray {\n  /**\n   * Constructor for inline Tries Array class\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.student_data.tries\",\n      children: aicc_constants.tries_children,\n    });\n  }\n}\n\n/**\n * Class for AICC Tries\n */\nexport class CMITriesObject extends BaseCMI {\n  private _status = \"\";\n  private _time = \"\";\n\n  /**\n   * Constructor for AICC Tries object\n   */\n  constructor() {\n    super(\"cmi.student_data.tries.n\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.student_data.tries.n.score\",\n      score_children: aicc_constants.score_children,\n      score_range: aicc_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE,\n      errorClass: AICCValidationError,\n    });\n  }\n\n  public score: CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._status = \"\";\n    this._time = \"\";\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for _status\n   * @return {string}\n   */\n  get status(): string {\n    return this._status;\n  }\n\n  /**\n   * Setter for _status\n   * @param {string} status\n   */\n  set status(status: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".status\", status, aicc_regex.CMIStatus2)) {\n      this._status = status;\n    }\n  }\n\n  /**\n   * Getter for _time\n   * @return {string}\n   */\n  get time(): string {\n    return this._time;\n  }\n\n  /**\n   * Setter for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".time\", time, aicc_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data.tries.n object\n   * @return {\n   *    {\n   *      status: string,\n   *      time: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    status: string;\n    time: string;\n    score: CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      status: this.status,\n      time: this.time,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { CMIArray } from \"../common/array\";\n\n/**\n * Class for cmi.student_data.attempt_records array\n */\nexport class CMIAttemptRecords extends CMIArray {\n  /**\n   * Constructor for inline Tries Array class\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.student_data.attempt_records\",\n      children: aicc_constants.attempt_records_children,\n    });\n  }\n}\n\n/**\n * Class for AICC Attempt Records\n */\nexport class CMIAttemptRecordsObject extends BaseCMI {\n  private _lesson_status = \"\";\n\n  /**\n   * Constructor for AICC Attempt Records object\n   */\n  constructor() {\n    super(\"cmi.student_data.attempt_records.n\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.student_data.attempt_records.n.score\",\n      score_children: aicc_constants.score_children,\n      score_range: aicc_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE,\n      errorClass: AICCValidationError,\n    });\n  }\n\n  public score: CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n\n    this._lesson_status = \"\";\n    this.score?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for _lesson_status\n   * @return {string}\n   */\n  get lesson_status(): string {\n    return this._lesson_status;\n  }\n\n  /**\n   * Setter for _lesson_status\n   * @param {string} lesson_status\n   */\n  set lesson_status(lesson_status: string) {\n    if (\n      checkAICCValidFormat(\n        this._cmi_element + \".lesson_status\",\n        lesson_status,\n        aicc_regex.CMIStatus2,\n      )\n    ) {\n      this._lesson_status = lesson_status;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data.attempt_records.n object\n   * @return {\n   *    {\n   *         lesson_status: string,\n   *         score: CMIScore\n   *     }\n   *  }\n   */\n  toJSON(): {\n    lesson_status: string;\n    score: CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      lesson_status: this.lesson_status,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { CMITries } from \"./tries\";\nimport { CMIStudentData } from \"../scorm12/student_data\";\nimport { CMIAttemptRecords } from \"./attempts\";\n\n/**\n * StudentData class for AICC\n */\nexport class AICCCMIStudentData extends CMIStudentData {\n  /**\n   * Constructor for AICC StudentData object\n   */\n  constructor() {\n    super(aicc_constants.student_data_children);\n    this.tries = new CMITries();\n    this.attempt_records = new CMIAttemptRecords();\n  }\n\n  public tries: CMITries;\n  public attempt_records: CMIAttemptRecords;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.tries?.initialize();\n    this.attempt_records?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n    this.tries?.reset(true);\n    this.attempt_records?.reset(true);\n  }\n\n  private _tries_during_lesson = \"\";\n\n  /**\n   * Getter for tries_during_lesson\n   * @return {string}\n   */\n  get tries_during_lesson(): string {\n    return this._tries_during_lesson;\n  }\n\n  /**\n   * Setter for _tries_during_lesson. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} tries_during_lesson\n   */\n  set tries_during_lesson(tries_during_lesson: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_data.tries_during_lesson\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._tries_during_lesson = tries_during_lesson;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data object\n   * @return {\n   *    {\n   *      mastery_score: string,\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      tries: CMITries,\n   *      attempt_records: CMIAttemptRecords\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    mastery_score: string;\n    max_time_allowed: string;\n    time_limit_action: string;\n    tries: CMITries;\n    attempt_records: CMIAttemptRecords;\n  } {\n    this.jsonString = true;\n    const result = {\n      mastery_score: this.mastery_score,\n      max_time_allowed: this.max_time_allowed,\n      time_limit_action: this.time_limit_action,\n      tries: this.tries,\n      attempt_records: this.attempt_records,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { CMIArray } from \"../common/array\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { aicc_constants } from \"../../constants/api_constants\";\n\n/**\n * Class representing the AICC `cmi.paths` object\n */\nexport class CMIPaths extends CMIArray {\n  /**\n   * Constructor for inline Paths Array class\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.paths\",\n      children: aicc_constants.paths_children,\n    });\n  }\n}\n\n/**\n * Class for AICC Paths\n */\nexport class CMIPathsObject extends BaseCMI {\n  private _location_id = \"\";\n  private _date = \"\";\n  private _time = \"\";\n  private _status = \"\";\n  private _why_left = \"\";\n  private _time_in_element = \"\";\n\n  /**\n   * Constructor for AICC Paths objects\n   */\n  constructor() {\n    super(\"cmi.paths.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._location_id = \"\";\n    this._date = \"\";\n    this._time = \"\";\n    this._status = \"\";\n    this._why_left = \"\";\n    this._time_in_element = \"\";\n  }\n\n  /**\n   * Getter for _location_id\n   * @return {string}\n   */\n  get location_id(): string {\n    return this._location_id;\n  }\n\n  /**\n   * Setter for _location_id\n   * @param {string} location_id\n   */\n  set location_id(location_id: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".location_id\", location_id, aicc_regex.CMIString256)\n    ) {\n      this._location_id = location_id;\n    }\n  }\n\n  /**\n   * Getter for _date\n   * @return {string}\n   */\n  get date(): string {\n    return this._date;\n  }\n\n  /**\n   * Setter for _date\n   * @param {string} date\n   */\n  set date(date: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".date\", date, aicc_regex.CMIString256)) {\n      this._date = date;\n    }\n  }\n\n  /**\n   * Getter for _time\n   * @return {string}\n   */\n  get time(): string {\n    return this._time;\n  }\n\n  /**\n   * Setter for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".time\", time, aicc_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * Getter for _status\n   * @return {string}\n   */\n  get status(): string {\n    return this._status;\n  }\n\n  /**\n   * Setter for _status\n   * @param {string} status\n   */\n  set status(status: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".status\", status, aicc_regex.CMIStatus2)) {\n      this._status = status;\n    }\n  }\n\n  /**\n   * Getter for _why_left\n   * @return {string}\n   */\n  get why_left(): string {\n    return this._why_left;\n  }\n\n  /**\n   * Setter for _why_left\n   * @param {string} why_left\n   */\n  set why_left(why_left: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".why_left\", why_left, aicc_regex.CMIString256)) {\n      this._why_left = why_left;\n    }\n  }\n\n  /**\n   * Getter for _time_in_element\n   * @return {string}\n   */\n  get time_in_element(): string {\n    return this._time_in_element;\n  }\n\n  /**\n   * Setter for _time_in_element\n   * @param {string} time_in_element\n   */\n  set time_in_element(time_in_element: string) {\n    if (\n      checkAICCValidFormat(\n        this._cmi_element + \".time_in_element\",\n        time_in_element,\n        aicc_regex.CMITime,\n      )\n    ) {\n      this._time_in_element = time_in_element;\n    }\n  }\n\n  /**\n   * toJSON for cmi.paths.n object\n   * @return {\n   *    {\n   *      location_id: string,\n   *      date: string,\n   *      time: string,\n   *      status: string,\n   *      why_left: string,\n   *      time_in_element: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    location_id: string;\n    date: string;\n    time: string;\n    status: string;\n    why_left: string;\n    time_in_element: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      location_id: this.location_id,\n      date: this.date,\n      time: this.time,\n      status: this.status,\n      why_left: this.why_left,\n      time_in_element: this.time_in_element,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import * as Scorm12CMI from \"../scorm12/cmi\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { CMIEvaluation } from \"./evaluation\";\nimport { AICCStudentPreferences } from \"./student_preferences\";\nimport { CMIStudentDemographics } from \"./student_demographics\";\nimport { AICCCMIStudentData } from \"./student_data\";\nimport { CMIPaths } from \"./paths\";\nimport { CMICore } from \"./core\";\nimport { CMIObjectives } from \"../scorm12/objectives\";\nimport { CMIStudentData } from \"../scorm12/student_data\";\nimport { CMIStudentPreference } from \"../scorm12/student_preference\";\nimport { CMIInteractions } from \"../scorm12/interactions\";\n\n/**\n * CMI Class for AICC\n */\nexport class CMI extends Scorm12CMI.CMI {\n  /**\n   * Constructor for AICC CMI object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean = false) {\n    super(aicc_constants.cmi_children);\n    if (initialized) this.initialize();\n    this.student_preference = new AICCStudentPreferences();\n    this.student_data = new AICCCMIStudentData();\n    this.student_demographics = new CMIStudentDemographics();\n    this.evaluation = new CMIEvaluation();\n    this.paths = new CMIPaths();\n  }\n\n  public override student_data: AICCCMIStudentData;\n  public override student_preference: AICCStudentPreferences;\n  public student_demographics: CMIStudentDemographics;\n  public evaluation: CMIEvaluation;\n  public paths: CMIPaths;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.student_preference?.initialize();\n    this.student_data?.initialize();\n    this.student_demographics?.initialize();\n    this.evaluation?.initialize();\n    this.paths?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions,\n   *      paths: CMIPaths\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    suspend_data: string;\n    launch_data: string;\n    comments: string;\n    comments_from_lms: string;\n    core: CMICore;\n    objectives: CMIObjectives;\n    student_data: CMIStudentData;\n    student_preference: CMIStudentPreference;\n    student_demographics: CMIStudentDemographics;\n    interactions: CMIInteractions;\n    evaluation: CMIEvaluation;\n    paths: CMIPaths;\n  } {\n    this.jsonString = true;\n    const result = {\n      suspend_data: this.suspend_data,\n      launch_data: this.launch_data,\n      comments: this.comments,\n      comments_from_lms: this.comments_from_lms,\n      core: this.core,\n      objectives: this.objectives,\n      student_data: this.student_data,\n      student_preference: this.student_preference,\n      student_demographics: this.student_demographics,\n      interactions: this.interactions,\n      evaluation: this.evaluation,\n      paths: this.paths,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import Scorm12API from \"./Scorm12API\";\nimport { CMI } from \"./cmi/aicc/cmi\";\n\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport { CMITriesObject } from \"./cmi/aicc/tries\";\nimport { CMIAttemptRecordsObject } from \"./cmi/aicc/attempts\";\nimport { CMIEvaluationCommentsObject } from \"./cmi/aicc/evaluation\";\nimport { NAV } from \"./cmi/scorm12/nav\";\nimport { CMIPathsObject } from \"./cmi/aicc/paths\";\nimport { Settings } from \"./types/api_types\";\nimport { stringMatches } from \"./utilities\";\n\n/**\n * The AICC API class\n */\nclass AICC extends Scorm12API {\n  /**\n   * Constructor to create AICC API object\n   * @param {Settings} settings\n   */\n  constructor(settings?: Settings) {\n    super(settings);\n\n    this.cmi = new CMI();\n    this.nav = new NAV();\n  }\n\n  override cmi: CMI;\n  override nav: NAV;\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI | null}\n   */\n  override getChildElement(\n    CMIElement: string,\n    value: any,\n    foundFirstIndex: boolean,\n  ): BaseCMI | null {\n    let newChild = super.getChildElement(CMIElement, value, foundFirstIndex);\n\n    if (!newChild) {\n      if (stringMatches(CMIElement, \"cmi\\\\.evaluation\\\\.comments\\\\.\\\\d+\")) {\n        newChild = new CMIEvaluationCommentsObject();\n      } else if (stringMatches(CMIElement, \"cmi\\\\.student_data\\\\.tries\\\\.\\\\d+\")) {\n        newChild = new CMITriesObject();\n      } else if (stringMatches(CMIElement, \"cmi\\\\.student_data\\\\.attempt_records\\\\.\\\\d+\")) {\n        newChild = new CMIAttemptRecordsObject();\n      } else if (stringMatches(CMIElement, \"cmi\\\\.paths\\\\.\\\\d+\")) {\n        newChild = new CMIPathsObject();\n      }\n    }\n\n    return newChild;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {AICC} newAPI\n   */\n  override replaceWithAnotherScormAPI(newAPI: AICC) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.nav = newAPI.nav;\n  }\n}\n\nexport default AICC;\n"],"names":["global_constants","SCORM_TRUE","SCORM_FALSE","STATE_NOT_INITIALIZED","STATE_INITIALIZED","STATE_TERMINATED","scorm12_constants","cmi_children","core_children","score_children","comments_children","objectives_children","correct_responses_children","student_data_children","student_preference_children","interactions_children","error_descriptions","basicMessage","detailMessage","aicc_constants","student_demographics_children","tries_children","attempt_records_children","paths_children","global_errors","GENERAL","INITIALIZATION_FAILED","INITIALIZED","TERMINATED","TERMINATION_FAILURE","TERMINATION_BEFORE_INIT","MULTIPLE_TERMINATION","RETRIEVE_BEFORE_INIT","RETRIEVE_AFTER_TERM","STORE_BEFORE_INIT","STORE_AFTER_TERM","COMMIT_BEFORE_INIT","COMMIT_AFTER_TERM","ARGUMENT_ERROR","CHILDREN_ERROR","COUNT_ERROR","GENERAL_GET_FAILURE","GENERAL_SET_FAILURE","GENERAL_COMMIT_FAILURE","UNDEFINED_DATA_MODEL","UNIMPLEMENTED_ELEMENT","VALUE_NOT_INITIALIZED","INVALID_SET_VALUE","READ_ONLY_ELEMENT","WRITE_ONLY_ELEMENT","TYPE_MISMATCH","VALUE_OUT_OF_RANGE","DEPENDENCY_NOT_ESTABLISHED","scorm12_errors","scorm12_regex","CMIString256","CMIString4096","CMITime","CMITimespan","CMIInteger","CMISInteger","CMIDecimal","CMIIdentifier","CMIFeedback","CMIIndex","CMIStatus","CMIStatus2","CMIExit","CMIType","CMIResult","NAVEvent","score_range","audio_range","speed_range","weighting_range","text_range","aicc_regex","BaseScormValidationError","Error","constructor","CMIElement","errorCode","toString","_errorCode","Object","setPrototypeOf","prototype","ValidationError","errorMessage","detailedMessage","_detailedMessage","message","_errorMessage","Scorm12ValidationError","hasOwnProperty","call","String","BaseCMI","cmi_element","jsonString","_initialized","_cmi_element","initialized","start_time","_start_time","initialize","setStartTime","Date","getTime","BaseRootCMI","SECONDS_PER_MINUTE","SECONDS_PER_HOUR","getSecondsAsHHMMSS","memoize","totalSeconds","hours","Math","floor","dateObj","minutes","getUTCMinutes","seconds","getSeconds","ms","msStr","countDecimals","toFixed","split","replace","getTimeAsSeconds","timeString","timeRegex","RegExp","match","parts","Number","timeStr","regexStr","addHHMMSSTimeStrings","first","second","flatten","data","result","recurse","cur","prop","Array","isArray","forEach","item","i","length","keys","filter","p","isEmpty","unflatten","pattern","regex","from","exec","m","num","indexOf","formatMessage","functionName","baseLength","paddedFunction","padEnd","messageString","CMIElementBaseLength","stringMatches","str","tester","fn","keyFn","cache","Map","_len","arguments","args","_key","key","JSON","stringify","has","get","set","checkValidFormat","value","regexPattern","errorClass","allowEmptyString","formatRegex","matches","_errorClass","valueKey","checkValidRange","rangePattern","ranges","check12ValidFormat","check12ValidRange","ValidationService","validateScore","decimalRegex","scoreRange","invalidTypeCode","invalidRangeCode","validateScorm12Audio","validateScorm12Language","validateScorm12Speed","validateScorm12Text","validateReadOnly","validationService","CMIScore","params","_raw","_min","__children","__score_range","_max","max","__invalid_error_code","invalidErrorCode","__invalid_type_code","__invalid_range_code","__decimal_regex","__error_class","reset","_children","raw","min","getScoreObject","scoreObject","isNaN","parseFloat","toJSON","CMICore","_student_id","_student_name","_lesson_location","_credit","_lesson_status","_entry","_total_time","_lesson_mode","_exit","_session_time","_suspend_data","score","student_id","student_name","lesson_location","credit","lesson_status","entry","total_time","lesson_mode","exit","session_time","suspend_data","getCurrentTotalTime","sessionTime","startTime","Util","CMIArray","children","childArray","wipe","_count","CMIObjectives","CMIObjectivesObject","_id","_status","id","status","CMIStudentData","_mastery_score","_max_time_allowed","_time_limit_action","mastery_score","max_time_allowed","time_limit_action","CMIStudentPreference","_audio","_language","_speed","_text","audio","language","speed","text","CMIInteractions","CMIInteractionsObject","_time","_type","_weighting","_student_response","_result","_latency","objectives","correct_responses","time","type","weighting","student_response","latency","CMIInteractionsObjectivesObject","CMIInteractionsCorrectResponsesObject","_pattern","CMI","student_data","__version","_launch_data","_comments","_comments_from_lms","core","student_preference","interactions","launch_data","comments","comments_from_lms","_version","NAV","_event","event","SuccessStatus","PASSED","FAILED","UNKNOWN","CompletionStatus","COMPLETED","INCOMPLETE","LogLevelEnum","_","DEBUG","INFO","WARN","ERROR","NONE","DefaultSettings","autocommit","autocommitSeconds","asyncCommit","sendFullCommit","lmsCommitUrl","dataCommitFormat","commitRequestDataType","autoProgress","logLevel","selfReportSessionTime","alwaysSendTotalTime","renderCommonCommitFields","strict_errors","xhrHeaders","xhrWithCredentials","fetchMode","useBeaconInsteadOfFetch","responseHandler","response","httpResult","json","responseText","parse","e","requestHandler","commitObject","onLogMessage","defaultLogHandler","scoItemIds","scoItemIdValidator","globalObjectiveIds","enableOfflineSupport","courseId","syncOnInitialize","syncOnTerminate","maxSyncAttempts","messageLevel","logMessage","console","error","warn","info","debug","log","ScheduledCommit","API","when","callback","_cancelled","_API","_timeout","setTimeout","wrapper","bind","_callback","cancel","clearTimeout","commit","HttpService","settings","error_codes","processHttpRequest","url","immediate","undefined","apiLog","processListeners","genericError","_handleImmediateRequest","processedParams","performFetch","transformResponse","body","contentType","_prepareRequestBody","navigator","sendBeacon","Blob","then","join","performBeacon","init","method","mode","headers","keepalive","credentials","fetch","beaconSuccess","Promise","resolve","ok","_isSuccessResponse","updateSettings","EventService","listenerMap","listenerCount","parseListenerName","listenerName","listenerSplit","on","listenerFunctions","listenerFunction","parsedListener","listeners","push","off","removeIndex","findIndex","obj","splice","delete","clear","newListeners","listener","listenerHasCMIElement","CMIElementsMatch","endsWith","prefix","slice","startsWith","SerializationService","loadFromFlattenedJSON","setCMIValue","isNotInitialized","setStartingData","int_pattern","obj_pattern","others","intMatch","index","field","objMatch","sort","a","b","localeCompare","processItems","items","loadFromJSON","currentCMIElement","tempCMIElement","renderCMIToJSONString","cmi","k","v","renderCMIToJSONObject","getCommitObject","terminateCommit","renderCommitObject","renderCommitCMI","apiLogLevel","includeTotalTime","includes","LoggingService","_logLevel","_logHandler","getInstance","_instance","setLogLevel","level","getLogLevel","setLogHandler","handler","shouldLog","numericMessageLevel","getNumericLevel","numericLogLevel","getLoggingService","ErrorHandlingService","errorCodes","getLmsErrorMessageDetails","loggingService","_lastErrorCode","_errorCodes","_apiLog","_getLmsErrorMessageDetails","_loggingService","lastErrorCode","throwSCORMError","errorNumber","formattedMessage","clearSCORMError","success","handleValueAccessException","returnValue","validationError","errorType","name","stackTrace","stack","errorDetails","jsonError","createErrorHandlingService","OfflineStorageService","storeName","syncQueue","isOnline","onLine","syncInProgress","window","addEventListener","handleOnlineStatusChange","wasOnline","syncOfflineData","storeOffline","commitData","queueItem","now","random","substring","timestamp","syncAttempts","currentQueue","getFromStorage","saveToStorage","getOfflineData","remainingQueue","syncResult","sendDataToLMS","processedData","isDeviceOnline","storedData","localStorage","getItem","setItem","hasPendingOfflineData","queue","some","BaseAPI","httpService","eventService","serializationService","cmiDataService","errorHandlingService","offlineStorageService","_settings","_courseId","new","TypeError","currentState","_error_codes","_httpService","_eventService","element","_serializationService","_errorHandlingService","detail","_offlineStorageService","offlineData","runtimeData","catch","commonReset","clearScheduledCommit","startingData","callbackName","initializeMessage","terminationMessage","isInitialized","isTerminated","hasPendingData","syncSuccess","previousSettings","terminate","checkTerminated","checkState","storeData","getValue","getCMIValue","setValue","commitCallback","scheduleCommit","getLastError","getErrorString","CMIErrorCode","getDiagnostic","beforeInitError","afterTermError","_errorNumber","_CMIElement","_value","_commonSetCMIValue","methodName","scorm2004","structure","refObject","foundFirstIndex","invalidErrorMessage","idx","attribute","_checkObjectHasProperty","validateCorrectResponse","parseInt","newChild","getChildElement","_commonGetCMIValue","uninitializedErrorMessage","_isTargetValid","target","getFlattenedCMI","Utilities","StringKeyMap","getOwnPropertyDescriptor","getPrototypeOf","Scorm12API","mastery_override","statusSetByModule","nav","LMSInitialize","lmsInitialize","LMSFinish","lmsFinish","LMSGetValue","lmsGetValue","LMSSetValue","lmsSetValue","LMSCommit","lmsCommit","LMSGetLastError","lmsGetLastError","LMSGetErrorString","lmsGetErrorString","LMSGetDiagnostic","lmsGetDiagnostic","internalFinish","replaceWithAnotherScormAPI","newAPI","cmiExport","flattened","totalTimeHHMMSS","totalTimeSeconds","lessonStatus","completionStatus","successStatus","originalStatus","aicc_errors","AICCValidationError","checkAICCValidFormat","CMIEvaluation","CMIEvaluationComments","CMIEvaluationCommentsObject","_content","_location","content","location","AICCStudentPreferences","_lesson_type","_text_color","_text_location","_text_size","_video","windows","lesson_type","text_color","text_location","text_size","video","CMIStudentDemographics","_city","_class","_company","_country","_experience","_familiar_name","_instructor_name","_title","_native_language","_state","_street_address","_telephone","_years_experience","city","class","clazz","company","country","experience","familiar_name","instructor_name","title","native_language","state","street_address","telephone","years_experience","CMITries","CMITriesObject","CMIAttemptRecords","CMIAttemptRecordsObject","AICCCMIStudentData","_tries_during_lesson","tries","attempt_records","tries_during_lesson","CMIPaths","CMIPathsObject","_location_id","_date","_why_left","_time_in_element","location_id","date","why_left","time_in_element","Scorm12CMI","student_demographics","evaluation","paths","AICC"],"mappings":"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"}