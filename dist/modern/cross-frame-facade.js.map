{"version":3,"file":"cross-frame-facade.js","sources":["../../src/facades/CrossFrameFacade.ts"],"sourcesContent":["/**\n * CrossFrameFacade.ts\n *\n * This file implements a cross-frame facade for the scorm-again API.\n * It allows communication between frames from different domains using the postMessage API.\n */\n\nimport BaseAPI from \"../BaseAPI\";\n\n/**\n * Type for the message data\n */\nexport type MessageData = {\n  messageId: string;\n  method: string;\n  params: unknown[];\n  sab?: SharedArrayBuffer;\n};\n\n/**\n * Type for the message response\n */\nexport type MessageResponse = {\n  messageId: string;\n  result?: unknown;\n  error?: {\n    message: string;\n    stack?: string;\n  };\n  sab?: SharedArrayBuffer;\n};\n\n/**\n * Interface for the CrossFrameFacade\n */\nexport interface ICrossFrameFacade {\n  /**\n   * Initialize the SCORM API (SCORM 1.2 style) - Asynchronous version\n   * @returns Promise that resolves to true if initialization was successful\n   */\n  initialize(): Promise<boolean>;\n\n  /**\n   * Initialize the SCORM API (SCORM 1.2 style) - Synchronous version\n   * @returns \"true\" if initialization was successful, \"false\" otherwise\n   */\n  lmsInitialize(): string;\n\n  /**\n   * Initialize the SCORM API (SCORM 2004 style) - Asynchronous version\n   * @returns Promise that resolves to true if initialization was successful\n   */\n  Initialize(): Promise<boolean>;\n\n  /**\n   * Initialize the SCORM API (SCORM 2004 style) - Synchronous version\n   * @returns \"true\" if initialization was successful, \"false\" otherwise\n   */\n  LMSInitialize(): string;\n\n  /**\n   * Terminate the SCORM API (SCORM 1.2 style) - Asynchronous version\n   * @returns Promise that resolves to true if termination was successful\n   */\n  terminate(): Promise<boolean>;\n\n  /**\n   * Terminate the SCORM API (SCORM 1.2 style) - Synchronous version\n   * @returns \"true\" if termination was successful, \"false\" otherwise\n   */\n  lmsFinish(): string;\n\n  /**\n   * Terminate the SCORM API (SCORM 2004 style) - Asynchronous version\n   * @returns Promise that resolves to true if termination was successful\n   */\n  Terminate(): Promise<boolean>;\n\n  /**\n   * Terminate the SCORM API (SCORM 2004 style) - Synchronous version\n   * @returns \"true\" if termination was successful, \"false\" otherwise\n   */\n  LMSFinish(): string;\n\n  /**\n   * Get a value from the SCORM API (SCORM 1.2 style) - Asynchronous version\n   * @param element The CMI element to get\n   * @returns Promise that resolves to the value of the CMI element\n   */\n  getValue(element: string): Promise<string>;\n\n  /**\n   * Get a value from the SCORM API (SCORM 1.2 style) - Synchronous version\n   * @param element The CMI element to get\n   * @returns The value of the CMI element\n   */\n  lmsGetValue(element: string): string;\n\n  /**\n   * Get a value from the SCORM API (SCORM 2004 style) - Asynchronous version\n   * @param element The CMI element to get\n   * @returns Promise that resolves to the value of the CMI element\n   */\n  GetValue(element: string): Promise<string>;\n\n  /**\n   * Get a value from the SCORM API (SCORM 2004 style) - Synchronous version\n   * @param element The CMI element to get\n   * @returns The value of the CMI element\n   */\n  LMSGetValue(element: string): string;\n\n  /**\n   * Set a value in the SCORM API (SCORM 1.2 style) - Asynchronous version\n   * @param element The CMI element to set\n   * @param value The value to set\n   * @returns Promise that resolves to true if the value was set successfully\n   */\n  setValue(element: string, value: string | number | boolean): Promise<boolean>;\n\n  /**\n   * Set a value in the SCORM API (SCORM 1.2 style) - Synchronous version\n   * @param element The CMI element to set\n   * @param value The value to set\n   * @returns \"true\" if the value was set successfully, \"false\" otherwise\n   */\n  lmsSetValue(element: string, value: string | number | boolean): string;\n\n  /**\n   * Set a value in the SCORM API (SCORM 2004 style) - Asynchronous version\n   * @param element The CMI element to set\n   * @param value The value to set\n   * @returns Promise that resolves to true if the value was set successfully\n   */\n  SetValue(element: string, value: string | number | boolean): Promise<boolean>;\n\n  /**\n   * Set a value in the SCORM API (SCORM 2004 style) - Synchronous version\n   * @param element The CMI element to set\n   * @param value The value to set\n   * @returns \"true\" if the value was set successfully, \"false\" otherwise\n   */\n  LMSSetValue(element: string, value: string | number | boolean): string;\n\n  /**\n   * Commit changes to the LMS (SCORM 1.2 style) - Asynchronous version\n   * @returns Promise that resolves to true if the commit was successful\n   */\n  commit(): Promise<boolean>;\n\n  /**\n   * Commit changes to the LMS (SCORM 1.2 style) - Synchronous version\n   * @returns \"true\" if the commit was successful, \"false\" otherwise\n   */\n  lmsCommit(): string;\n\n  /**\n   * Commit changes to the LMS (SCORM 2004 style) - Asynchronous version\n   * @returns Promise that resolves to true if the commit was successful\n   */\n  Commit(): Promise<boolean>;\n\n  /**\n   * Commit changes to the LMS (SCORM 2004 style) - Synchronous version\n   * @returns \"true\" if the commit was successful, \"false\" otherwise\n   */\n  LMSCommit(): string;\n\n  /**\n   * Get the last error code (SCORM 1.2 style) - Asynchronous version\n   * @returns Promise that resolves to the last error code as a string\n   */\n  getLastError(): Promise<string>;\n\n  /**\n   * Get the last error code (SCORM 1.2 style) - Synchronous version\n   * @returns The last error code as a string\n   */\n  lmsGetLastError(): string;\n\n  /**\n   * Get the last error code (SCORM 2004 style) - Asynchronous version\n   * @returns Promise that resolves to the last error code as a string\n   */\n  GetLastError(): Promise<string>;\n\n  /**\n   * Get the last error code (SCORM 2004 style) - Synchronous version\n   * @returns The last error code as a string\n   */\n  LMSGetLastError(): string;\n\n  /**\n   * Get the error string for an error code (SCORM 1.2 style) - Asynchronous version\n   * @param errorCode The error code\n   * @returns Promise that resolves to the error string\n   */\n  getErrorString(errorCode: string | number): Promise<string>;\n\n  /**\n   * Get the error string for an error code (SCORM 1.2 style) - Synchronous version\n   * @param errorCode The error code\n   * @returns The error string\n   */\n  lmsGetErrorString(errorCode: string | number): string;\n\n  /**\n   * Get the error string for an error code (SCORM 2004 style) - Asynchronous version\n   * @param errorCode The error code\n   * @returns Promise that resolves to the error string\n   */\n  GetErrorString(errorCode: string | number): Promise<string>;\n\n  /**\n   * Get the error string for an error code (SCORM 2004 style) - Synchronous version\n   * @param errorCode The error code\n   * @returns The error string\n   */\n  LMSGetErrorString(errorCode: string | number): string;\n\n  /**\n   * Get diagnostic information for an error code (SCORM 1.2 style) - Asynchronous version\n   * @param errorCode The error code\n   * @returns Promise that resolves to the diagnostic information\n   */\n  getDiagnostic(errorCode: string | number): Promise<string>;\n\n  /**\n   * Get diagnostic information for an error code (SCORM 1.2 style) - Synchronous version\n   * @param errorCode The error code\n   * @returns The diagnostic information\n   */\n  lmsGetDiagnostic(errorCode: string | number): string;\n\n  /**\n   * Get diagnostic information for an error code (SCORM 2004 style) - Asynchronous version\n   * @param errorCode The error code\n   * @returns Promise that resolves to the diagnostic information\n   */\n  GetDiagnostic(errorCode: string | number): Promise<string>;\n\n  /**\n   * Get diagnostic information for an error code (SCORM 2004 style) - Synchronous version\n   * @param errorCode The error code\n   * @returns The diagnostic information\n   */\n  LMSGetDiagnostic(errorCode: string | number): string;\n\n  /**\n   * Check if the API is currently initialized - Asynchronous version\n   * @returns Promise that resolves to true if the API is initialized\n   */\n  isInitialized(): Promise<boolean>;\n\n  /**\n   * Check if the API is currently initialized - Synchronous version\n   * @returns True if the API is initialized, false otherwise\n   */\n  getIsInitialized(): boolean;\n\n  /**\n   * Register an event listener\n   * @param event The event name\n   * @param callback The callback function\n   */\n  on(event: string, callback: (...args: unknown[]) => void): void;\n\n  /**\n   * Remove an event listener\n   * @param event The event name\n   * @param callback The callback function\n   */\n  off(event: string, callback: (...args: unknown[]) => void): void;\n}\n\n/**\n * Server-side facade that runs in the parent frame where the API is initialized.\n * This facade listens for messages from the client-side facade and proxies them to the actual API.\n */\nexport class CrossFrameLMS {\n  private readonly _api: BaseAPI;\n  private readonly _targetOrigin: string = \"*\";\n\n  /**\n   * Constructor\n   * @param {BaseAPI} api The API instance to use\n   * @param targetOrigin The target origin for postMessage (default: \"*\")\n   */\n  constructor(api: BaseAPI, targetOrigin?: string) {\n    this._api = api;\n\n    // Set target origin if provided\n    if (targetOrigin) {\n      this._targetOrigin = targetOrigin;\n    }\n\n    // Listen for messages from the client-side facade\n    window.addEventListener(\"message\", this._handleMessage.bind(this));\n\n    // Set up event forwarding\n    this._setupEventForwarding();\n  }\n\n  /**\n   * Handle messages from the client-side facade\n   * @param event The message event\n   */\n  private _handleMessage(event: MessageEvent) {\n    const data = event.data as MessageData;\n\n    // Ignore messages that don't have the expected format\n    if (!data || !data.messageId || !data.method) {\n      return;\n    }\n\n    // Process the message\n    this._processMessage(data, event.source as Window, event.origin);\n  }\n\n  /**\n   * Process a message from the client-side facade\n   * @param data The message data\n   * @param source The source window\n   * @param origin The origin of the message\n   */\n  private _processMessage(data: MessageData, source: Window, origin: string) {\n    const { messageId, method, params, sab } = data;\n    let result: any;\n    let error: any;\n\n    try {\n      // Call the appropriate method on the API\n      if (typeof (this._api as unknown as Record<string, Function>)[method] === \"function\") {\n        result = (this._api as unknown as Record<string, Function>)[method](...params);\n      } else {\n        throw new Error(`Method ${method} not found on API`);\n      }\n    } catch (e: unknown) {\n      if (e instanceof Error) {\n        error = {\n          message: e.message,\n          stack: e.stack,\n        };\n      } else {\n        error = {\n          message: String(e),\n        };\n      }\n    }\n\n    // Send the response back to the client-side facade\n    const response: MessageResponse = {\n      messageId,\n      result,\n      error,\n      sab,\n    };\n\n    source.postMessage(response, this._targetOrigin, sab ? [sab] : undefined);\n  }\n\n  /**\n   * Set up event forwarding from the API to the client-side facade\n   */\n  private _setupEventForwarding() {\n    // Forward all events from the API to the client-side facades\n    this._api.on(\"*\", (event: string, ...args: any[]) => {\n      // Get all frames that might contain client-side facades\n      // We get the frames each time an event is triggered to ensure we have the latest frames\n      const frames = Array.from(document.querySelectorAll(\"iframe\"));\n\n      // Send the event to all frames\n      frames.forEach((frame) => {\n        if (frame.contentWindow) {\n          frame.contentWindow.postMessage(\n            {\n              event,\n              args,\n            },\n            this._targetOrigin,\n          );\n        }\n      });\n    });\n  }\n}\n\n/**\n * Client-side facade that runs in the child frame where the module is loaded.\n * This facade sends messages to the server-side facade and provides the same interface as the actual API.\n */\nexport class CrossFrameAPI implements ICrossFrameFacade {\n  private _targetOrigin: string = \"*\";\n  private _pendingRequests: Map<\n    string,\n    {\n      resolve: (value: unknown) => void;\n      reject: (reason?: unknown) => void;\n      source?: Window; // Source window for forwarding responses\n    }\n  > = new Map();\n  private _eventListeners: Map<string, Set<(...args: unknown[]) => void>> = new Map();\n  private _messageIdCounter: number = 0;\n  private _childFrames: Set<Window> = new Set(); // Track child frames that have sent messages\n  private _isInitialized: boolean = false;\n  private _lastError: string = \"0\";\n  private _cache: Map<string, string> = new Map(); // Cache for synchronous operations\n  private _sabBuffers: Map<string, SharedArrayBuffer> = new Map();\n\n  private _syncCall(method: string, params: any[], timeoutMs = 5000): any {\n    // In a test environment, this method might be mocked\n    // so we need to ensure it's testable\n    try {\n      const sab = new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT);\n      const int32 = new Int32Array(sab);\n      const messageId = `${Date.now()}-sync-${this._messageIdCounter++}`;\n      // store sab for matching responses\n      this._sabBuffers.set(messageId, sab);\n      // send the call, transferring sab\n      window.parent.postMessage({ messageId, method, params, sab }, this._targetOrigin, [sab]);\n      // block until notified\n      const status = Atomics.wait(int32, 0, 0, timeoutMs);\n      // cleanup\n      this._sabBuffers.delete(messageId);\n      const pending = this._pendingRequests.get(messageId) || {};\n      this._pendingRequests.delete(messageId);\n      if (status === \"timed-out\") {\n        throw new Error(`SCORM ${method} timeout after ${timeoutMs}ms`);\n      }\n      if ((pending as any).error) throw (pending as any).error;\n      return (pending as any).result;\n    } catch (e) {\n      // If SharedArrayBuffer or Atomics are not available (e.g., in test environment)\n      // or if there's any other error, rethrow it to be handled by the caller\n      throw e;\n    }\n  }\n\n  /**\n   * Constructor\n   * @param targetOrigin The target origin for postMessage (default: \"*\")\n   */\n  constructor(targetOrigin?: string) {\n    // Set target origin if provided\n    if (targetOrigin) {\n      this._targetOrigin = targetOrigin;\n    }\n\n    // Listen for messages from the server-side facade and child frames\n    window.addEventListener(\"message\", this._handleMessage.bind(this));\n  }\n\n  /**\n   * Handle messages from the server-side facade and child frames\n   * @param event The message event\n   */\n  private _handleMessage(event: MessageEvent) {\n    const data = event.data;\n    const source = event.source as Window;\n\n    // Check if the message is from a child frame\n    const isFromChildFrame = source !== window.parent && source !== window;\n\n    // Handle method responses from parent frame\n    if (\n      data.messageId &&\n      (data.result !== undefined || data.error !== undefined) &&\n      !isFromChildFrame\n    ) {\n      this._handleMethodResponse(data);\n    }\n\n    // Handle method requests from child frames\n    if (data.messageId && data.method && isFromChildFrame) {\n      // Add the child frame to our set of known frames\n      this._childFrames.add(source);\n\n      // Forward the message to the parent frame, but keep track of the source\n      const { messageId, method, params } = data;\n      const forwardedMessageId = `forwarded-${messageId}`;\n\n      // Store the promise callbacks with the source window\n      this._pendingRequests.set(forwardedMessageId, {\n        resolve: (result) => {\n          // Forward the result back to the child frame\n          source.postMessage(\n            {\n              messageId,\n              result,\n            },\n            this._targetOrigin,\n          );\n        },\n        reject: (error) => {\n          // Forward the error back to the child frame\n          source.postMessage(\n            {\n              messageId,\n              error,\n            },\n            this._targetOrigin,\n          );\n        },\n        source,\n      });\n\n      // Forward the message to the parent frame\n      window.parent.postMessage(\n        {\n          messageId: forwardedMessageId,\n          method,\n          params,\n        },\n        this._targetOrigin,\n      );\n\n      // Set a timeout to clean up if no response is received\n      setTimeout(() => {\n        if (this._pendingRequests.has(forwardedMessageId)) {\n          const request = this._pendingRequests.get(forwardedMessageId);\n          this._pendingRequests.delete(forwardedMessageId);\n          if (request?.source) {\n            request.source.postMessage(\n              {\n                messageId,\n                error: {\n                  message: `Timeout waiting for response to method ${method}`,\n                },\n              },\n              this._targetOrigin,\n            );\n          }\n        }\n      }, 5000);\n    }\n\n    // Handle events from parent frame\n    if (data.event && !isFromChildFrame) {\n      this._handleEvent(data.event, ...(data.args || []));\n\n      // Forward events to child frames\n      this._forwardEventToChildFrames(data.event, data.args || []);\n    }\n  }\n\n  /**\n   * Handle a method response from the server-side facade\n   * @param data The response data\n   */\n  private _handleMethodResponse(data: MessageResponse) {\n    const { messageId, result, error } = data;\n    if (data.sab) {\n      const int32 = new Int32Array(data.sab);\n      Atomics.store(int32, 0, 1);\n      Atomics.notify(int32, 0);\n    }\n    const pendingRequest = this._pendingRequests.get(messageId);\n    if (pendingRequest) {\n      const { resolve, reject } = pendingRequest;\n      if (error) {\n        reject(error);\n      } else {\n        resolve(result);\n      }\n      this._pendingRequests.delete(messageId);\n    }\n  }\n\n  /**\n   * Handle an event from the server-side facade\n   * @param event The event name\n   * @param args The event arguments\n   */\n  private _handleEvent(event: string, ...args: any[]) {\n    const listeners = this._eventListeners.get(event);\n\n    if (listeners) {\n      listeners.forEach((listener) => {\n        try {\n          listener(...args);\n        } catch (e: unknown) {\n          console.error(`Error in event listener for ${event}:`, e);\n        }\n      });\n    }\n\n    // Also trigger listeners for the \"*\" event\n    const allListeners = this._eventListeners.get(\"*\");\n\n    if (allListeners) {\n      allListeners.forEach((listener) => {\n        try {\n          listener(event, ...args);\n        } catch (e: unknown) {\n          console.error(`Error in \"*\" event listener for ${event}:`, e);\n        }\n      });\n    }\n  }\n\n  /**\n   * Forward an event to all child frames\n   * @param event The event name\n   * @param args The event arguments\n   */\n  private _forwardEventToChildFrames(event: string, args: unknown[]) {\n    // Send the event to all child frames\n    this._childFrames.forEach((frame) => {\n      try {\n        frame.postMessage(\n          {\n            event,\n            args,\n          },\n          this._targetOrigin,\n        );\n      } catch (e: unknown) {\n        console.error(`Error forwarding event to child frame:`, e);\n      }\n    });\n  }\n\n  /**\n   * Send a message to the server-side facade\n   * @param method The method to call\n   * @param params The parameters to pass to the method\n   * @returns A promise that resolves with the result of the method call\n   */\n  private _sendMessage(\n    method: string,\n    params: (string | number | boolean)[] = [],\n  ): Promise<unknown> {\n    // In test environments, we need to handle the case where window.parent.postMessage\n    // might not be properly mocked, which can lead to unhandled promise rejections\n    if (\n      typeof window === \"undefined\" ||\n      typeof window.parent === \"undefined\" ||\n      typeof window.parent.postMessage !== \"function\"\n    ) {\n      // Return a resolved promise with an empty string in test environments\n      return Promise.resolve(\"\");\n    }\n\n    return new Promise((resolve, reject) => {\n      const messageId = `${Date.now()}-${this._messageIdCounter++}`;\n\n      // Store the promise callbacks\n      this._pendingRequests.set(messageId, { resolve, reject });\n\n      try {\n        // Send the message to the parent frame\n        window.parent.postMessage(\n          {\n            messageId,\n            method,\n            params,\n          },\n          this._targetOrigin,\n        );\n\n        // Set a timeout to reject the promise if no response is received\n        setTimeout(() => {\n          if (this._pendingRequests.has(messageId)) {\n            this._pendingRequests.delete(messageId);\n            reject(new Error(`Timeout waiting for response to method ${method}`));\n          }\n        }, 5000);\n      } catch (e) {\n        // If there's an error sending the message, clean up and reject the promise\n        this._pendingRequests.delete(messageId);\n        reject(e);\n      }\n    });\n  }\n\n  /**\n   * Initialize the SCORM API (SCORM 1.2 style) - Asynchronous version\n   * @returns Promise that resolves to true if initialization was successful\n   */\n  async initialize(): Promise<boolean> {\n    const result = await this._sendMessage(\"lmsInitialize\");\n    this._isInitialized = result === \"true\";\n    return this._isInitialized;\n  }\n\n  /**\n   * Initialize the SCORM API (SCORM 1.2 style) - Synchronous version\n   * @returns \"true\" if initialization was successful, \"false\" otherwise\n   */\n  lmsInitialize(): string {\n    try {\n      return String(this._syncCall(\"lmsInitialize\", []));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"false\";\n    }\n  }\n\n  /**\n   * Initialize the SCORM API (SCORM 2004 style) - Asynchronous version\n   * @returns Promise that resolves to true if initialization was successful\n   */\n  async Initialize(): Promise<boolean> {\n    return this.initialize();\n  }\n\n  /**\n   * Initialize the SCORM API (SCORM 2004 style) - Synchronous version\n   * @returns \"true\" if initialization was successful, \"false\" otherwise\n   */\n  LMSInitialize(): string {\n    try {\n      return String(this._syncCall(\"LMSInitialize\", []));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"false\";\n    }\n  }\n\n  /**\n   * Terminate the SCORM API (SCORM 1.2 style) - Asynchronous version\n   * @returns Promise that resolves to true if termination was successful\n   */\n  async terminate(): Promise<boolean> {\n    const result = await this._sendMessage(\"lmsFinish\");\n    const success = result === \"true\";\n    if (success) {\n      this._isInitialized = false;\n    }\n    return success;\n  }\n\n  /**\n   * Terminate the SCORM API (SCORM 1.2 style) - Synchronous version\n   * @returns \"true\" if termination was successful, \"false\" otherwise\n   */\n  lmsFinish(): string {\n    try {\n      return String(this._syncCall(\"lmsFinish\", []));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"false\";\n    }\n  }\n\n  /**\n   * Terminate the SCORM API (SCORM 2004 style) - Asynchronous version\n   * @returns Promise that resolves to true if termination was successful\n   */\n  async Terminate(): Promise<boolean> {\n    return this.terminate();\n  }\n\n  /**\n   * Terminate the SCORM API (SCORM 2004 style) - Synchronous version\n   * @returns \"true\" if termination was successful, \"false\" otherwise\n   */\n  LMSFinish(): string {\n    try {\n      return String(this._syncCall(\"LMSFinish\", []));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"false\";\n    }\n  }\n\n  /**\n   * Get a value from the SCORM API (SCORM 1.2 style) - Asynchronous version\n   * @param element The CMI element to get\n   * @returns Promise that resolves to the value of the CMI element\n   */\n  async getValue(element: string): Promise<string> {\n    try {\n      const result = await this._sendMessage(\"lmsGetValue\", [element]);\n      const value = String(result);\n      // Cache the result for synchronous operations\n      this._cache.set(element, value);\n      return value;\n    } catch (e) {\n      this._lastError = \"101\"; // General exception\n      console.error(`Error in getValue(${element}):`, e);\n      return \"\";\n    }\n  }\n\n  /**\n   * Get a value from the SCORM API (SCORM 1.2 style) - Synchronous version\n   * @param element The CMI element to get\n   * @returns The value of the CMI element\n   */\n  lmsGetValue(element: string): string {\n    try {\n      return String(this._syncCall(\"lmsGetValue\", [element]));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"\";\n    }\n  }\n\n  /**\n   * Get a value from the SCORM API (SCORM 2004 style) - Asynchronous version\n   * @param element The CMI element to get\n   * @returns Promise that resolves to the value of the CMI element\n   */\n  async GetValue(element: string): Promise<string> {\n    return this.getValue(element);\n  }\n\n  /**\n   * Get a value from the SCORM API (SCORM 2004 style) - Synchronous version\n   * @param element The CMI element to get\n   * @returns The value of the CMI element\n   */\n  LMSGetValue(element: string): string {\n    try {\n      return String(this._syncCall(\"LMSGetValue\", [element]));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"\";\n    }\n  }\n\n  /**\n   * Set a value in the SCORM API (SCORM 1.2 style) - Asynchronous version\n   * @param element The CMI element to set\n   * @param value The value to set\n   * @returns Promise that resolves to true if the value was set successfully\n   */\n  async setValue(element: string, value: string | number | boolean): Promise<boolean> {\n    try {\n      const result = await this._sendMessage(\"lmsSetValue\", [element, value]);\n      const success = result === \"true\";\n      if (success) {\n        // Update the cache with the new value\n        this._cache.set(element, String(value));\n      }\n      return success;\n    } catch (e) {\n      this._lastError = \"101\"; // General exception\n      console.error(`Error in setValue(${element}, ${value}):`, e);\n      return false;\n    }\n  }\n\n  /**\n   * Set a value in the SCORM API (SCORM 1.2 style) - Synchronous version\n   * @param element The CMI element to set\n   * @param value The value to set\n   * @returns \"true\" if the value was set successfully, \"false\" otherwise\n   */\n  lmsSetValue(element: string, value: string | number | boolean): string {\n    try {\n      return String(this._syncCall(\"lmsSetValue\", [element, value]));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"false\";\n    }\n  }\n\n  /**\n   * Set a value in the SCORM API (SCORM 2004 style) - Asynchronous version\n   * @param element The CMI element to set\n   * @param value The value to set\n   * @returns Promise that resolves to true if the value was set successfully\n   */\n  async SetValue(element: string, value: string | number | boolean): Promise<boolean> {\n    return this.setValue(element, value);\n  }\n\n  /**\n   * Set a value in the SCORM API (SCORM 2004 style) - Synchronous version\n   * @param element The CMI element to set\n   * @param value The value to set\n   * @returns \"true\" if the value was set successfully, \"false\" otherwise\n   */\n  LMSSetValue(element: string, value: string | number | boolean): string {\n    try {\n      return String(this._syncCall(\"LMSSetValue\", [element, value]));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"false\";\n    }\n  }\n\n  /**\n   * Commit changes to the LMS (SCORM 1.2 style) - Asynchronous version\n   * @returns Promise that resolves to true if the commit was successful\n   */\n  async commit(): Promise<boolean> {\n    try {\n      const result = await this._sendMessage(\"lmsCommit\");\n      return result === \"true\";\n    } catch (e) {\n      this._lastError = \"101\"; // General exception\n      console.error(\"Error in commit:\", e);\n      return false;\n    }\n  }\n\n  /**\n   * Commit changes to the LMS (SCORM 1.2 style) - Synchronous version\n   * @returns \"true\" if the commit was successful, \"false\" otherwise\n   */\n  lmsCommit(): string {\n    try {\n      return String(this._syncCall(\"lmsCommit\", []));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"false\";\n    }\n  }\n\n  /**\n   * Commit changes to the LMS (SCORM 2004 style) - Asynchronous version\n   * @returns Promise that resolves to true if the commit was successful\n   */\n  async Commit(): Promise<boolean> {\n    return this.commit();\n  }\n\n  /**\n   * Commit changes to the LMS (SCORM 2004 style) - Synchronous version\n   * @returns \"true\" if the commit was successful, \"false\" otherwise\n   */\n  LMSCommit(): string {\n    try {\n      return String(this._syncCall(\"LMSCommit\", []));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"false\";\n    }\n  }\n\n  /**\n   * Get the last error code (SCORM 1.2 style) - Asynchronous version\n   * @returns Promise that resolves to the last error code as a string\n   */\n  async getLastError(): Promise<string> {\n    try {\n      const result = await this._sendMessage(\"lmsGetLastError\");\n      this._lastError = String(result);\n      return this._lastError;\n    } catch (e) {\n      console.error(\"Error in getLastError:\", e);\n      return \"101\"; // General exception\n    }\n  }\n\n  /**\n   * Get the last error code (SCORM 1.2 style) - Synchronous version\n   * @returns The last error code as a string\n   */\n  lmsGetLastError(): string {\n    try {\n      return String(this._syncCall(\"lmsGetLastError\", []));\n    } catch (e) {\n      return \"101\";\n    }\n  }\n\n  /**\n   * Get the last error code (SCORM 2004 style) - Asynchronous version\n   * @returns Promise that resolves to the last error code as a string\n   */\n  async GetLastError(): Promise<string> {\n    return this.getLastError();\n  }\n\n  /**\n   * Get the last error code (SCORM 2004 style) - Synchronous version\n   * @returns The last error code as a string\n   */\n  LMSGetLastError(): string {\n    try {\n      return String(this._syncCall(\"LMSGetLastError\", []));\n    } catch (e) {\n      return \"101\";\n    }\n  }\n\n  /**\n   * Get the error string for an error code (SCORM 1.2 style) - Asynchronous version\n   * @param errorCode The error code\n   * @returns Promise that resolves to the error string\n   */\n  async getErrorString(errorCode: string | number): Promise<string> {\n    try {\n      const result = await this._sendMessage(\"lmsGetErrorString\", [errorCode]);\n      const errorString = String(result);\n      // Cache the result for synchronous operations\n      this._cache.set(`error_${errorCode}`, errorString);\n      return errorString;\n    } catch (e) {\n      console.error(`Error in getErrorString(${errorCode}):`, e);\n      return \"\";\n    }\n  }\n\n  /**\n   * Get the error string for an error code (SCORM 1.2 style) - Synchronous version\n   * @param errorCode The error code\n   * @returns The error string\n   */\n  lmsGetErrorString(errorCode: string | number): string {\n    try {\n      return String(this._syncCall(\"lmsGetErrorString\", [errorCode]));\n    } catch (e) {\n      return \"No error\";\n    }\n  }\n\n  /**\n   * Get the error string for an error code (SCORM 2004 style) - Asynchronous version\n   * @param errorCode The error code\n   * @returns Promise that resolves to the error string\n   */\n  async GetErrorString(errorCode: string | number): Promise<string> {\n    return this.getErrorString(errorCode);\n  }\n\n  /**\n   * Get the error string for an error code (SCORM 2004 style) - Synchronous version\n   * @param errorCode The error code\n   * @returns The error string\n   */\n  LMSGetErrorString(errorCode: string | number): string {\n    try {\n      return String(this._syncCall(\"LMSGetErrorString\", [errorCode]));\n    } catch (e) {\n      return \"No error\";\n    }\n  }\n\n  /**\n   * Get diagnostic information for an error code (SCORM 1.2 style) - Asynchronous version\n   * @param errorCode The error code\n   * @returns Promise that resolves to the diagnostic information\n   */\n  async getDiagnostic(errorCode: string | number): Promise<string> {\n    try {\n      const result = await this._sendMessage(\"lmsGetDiagnostic\", [errorCode]);\n      const diagnostic = String(result);\n      // Cache the result for synchronous operations\n      this._cache.set(`diagnostic_${errorCode}`, diagnostic);\n      return diagnostic;\n    } catch (e) {\n      console.error(`Error in getDiagnostic(${errorCode}):`, e);\n      return \"\";\n    }\n  }\n\n  /**\n   * Get diagnostic information for an error code (SCORM 1.2 style) - Synchronous version\n   * @param errorCode The error code\n   * @returns The diagnostic information\n   */\n  lmsGetDiagnostic(errorCode: string | number): string {\n    try {\n      return String(this._syncCall(\"lmsGetDiagnostic\", [errorCode]));\n    } catch (e) {\n      return \"No diagnostic information available\";\n    }\n  }\n\n  /**\n   * Get diagnostic information for an error code (SCORM 2004 style) - Asynchronous version\n   * @param errorCode The error code\n   * @returns Promise that resolves to the diagnostic information\n   */\n  async GetDiagnostic(errorCode: string | number): Promise<string> {\n    return this.getDiagnostic(errorCode);\n  }\n\n  /**\n   * Get diagnostic information for an error code (SCORM 2004 style) - Synchronous version\n   * @param errorCode The error code\n   * @returns The diagnostic information\n   */\n  LMSGetDiagnostic(errorCode: string | number): string {\n    try {\n      return String(this._syncCall(\"LMSGetDiagnostic\", [errorCode]));\n    } catch (e) {\n      return \"No diagnostic information available\";\n    }\n  }\n\n  /**\n   * Check if the API is currently initialized - Asynchronous version\n   * @returns Promise that resolves to true if the API is initialized\n   */\n  async isInitialized(): Promise<boolean> {\n    try {\n      const result = await this._sendMessage(\"isInitialized\");\n      this._isInitialized = Boolean(result);\n      return this._isInitialized;\n    } catch (e) {\n      console.error(\"Error in isInitialized:\", e);\n      return this._isInitialized;\n    }\n  }\n\n  /**\n   * Check if the API is currently initialized - Synchronous version\n   * @returns True if the API is initialized, false otherwise\n   */\n  getIsInitialized(): boolean {\n    // In test environments, starting an async operation can cause issues\n    // with unhandled promise rejections, so we'll just return the current value\n    return this._isInitialized;\n  }\n\n  /**\n   * Register an event listener\n   * @param event The event name\n   * @param callback The callback function\n   */\n  on(event: string, callback: (...args: unknown[]) => void): void {\n    if (!this._eventListeners.has(event)) {\n      this._eventListeners.set(event, new Set());\n    }\n\n    const listeners = this._eventListeners.get(event);\n    if (listeners) {\n      listeners.add(callback);\n    }\n  }\n\n  /**\n   * Remove an event listener\n   * @param event The event name\n   * @param callback The callback function\n   */\n  off(event: string, callback: (...args: unknown[]) => void): void {\n    const listeners = this._eventListeners.get(event);\n\n    if (listeners) {\n      listeners.delete(callback);\n\n      if (listeners.size === 0) {\n        this._eventListeners.delete(event);\n      }\n    }\n  }\n}\n\n/**\n * Factory function to create a CrossFrameServer instance\n * @param {BaseAPI} api The API instance to use\n * @param targetOrigin The target origin for postMessage\n * @returns A CrossFrameServer instance\n */\nexport function createCrossFrameServer(api: BaseAPI, targetOrigin?: string): CrossFrameLMS {\n  return new CrossFrameLMS(api, targetOrigin);\n}\n\n/**\n * Factory function to create a CrossFrameClient instance\n * @param targetOrigin The target origin for postMessage\n * @returns A CrossFrameClient instance\n */\nexport function createCrossFrameClient(targetOrigin?: string): CrossFrameAPI {\n  return new CrossFrameAPI(targetOrigin);\n}\n"],"names":[],"mappings":"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"}