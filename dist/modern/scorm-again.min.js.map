{"version":3,"file":"scorm-again.min.js","sources":["../../src/constants/api_constants.ts","../../src/constants/error_codes.ts","../../src/constants/regex.ts","../../src/exceptions.ts","../../src/exceptions/scorm12_exceptions.ts","../../src/cmi/common/base_cmi.ts","../../src/utilities.ts","../../src/cmi/common/validation.ts","../../src/cmi/scorm12/validation.ts","../../src/services/ValidationService.ts","../../src/cmi/common/score.ts","../../src/cmi/aicc/core.ts","../../src/cmi/common/array.ts","../../src/cmi/scorm12/objectives.ts","../../src/cmi/scorm12/student_data.ts","../../src/cmi/scorm12/student_preference.ts","../../src/cmi/scorm12/interactions.ts","../../src/cmi/scorm12/cmi.ts","../../src/cmi/scorm12/nav.ts","../../src/constants/enums.ts","../../src/constants/default_settings.ts","../../src/helpers/scheduled_commit.ts","../../src/services/HttpService.ts","../../src/services/EventService.ts","../../src/services/SerializationService.ts","../../src/services/LoggingService.ts","../../src/services/ErrorHandlingService.ts","../../src/services/OfflineStorageService.ts","../../src/BaseAPI.ts","../../src/Scorm12API.ts","../../src/exceptions/aicc_exceptions.ts","../../src/cmi/aicc/validation.ts","../../src/cmi/aicc/evaluation.ts","../../src/cmi/aicc/student_preferences.ts","../../src/cmi/aicc/student_demographics.ts","../../src/cmi/aicc/tries.ts","../../src/cmi/aicc/attempts.ts","../../src/cmi/aicc/student_data.ts","../../src/cmi/aicc/paths.ts","../../src/cmi/aicc/cmi.ts","../../src/exceptions/scorm2004_exceptions.ts","../../src/cmi/scorm2004/validation.ts","../../src/cmi/scorm2004/learner_preference.ts","../../src/constants/response_constants.ts","../../src/cmi/scorm2004/interactions.ts","../../src/cmi/scorm2004/score.ts","../../src/cmi/scorm2004/comments.ts","../../src/cmi/scorm2004/objectives.ts","../../src/cmi/scorm2004/metadata.ts","../../src/cmi/scorm2004/learner.ts","../../src/cmi/scorm2004/status.ts","../../src/cmi/scorm2004/session.ts","../../src/cmi/scorm2004/content.ts","../../src/cmi/scorm2004/settings.ts","../../src/cmi/scorm2004/thresholds.ts","../../src/cmi/scorm2004/cmi.ts","../../src/cmi/scorm2004/adl.ts","../../src/cmi/scorm2004/sequencing/sequencing_rules.ts","../../src/cmi/scorm2004/sequencing/rollup_rules.ts","../../src/constants/language_constants.ts","../../src/cmi/scorm2004/sequencing/activity.ts","../../src/cmi/scorm2004/sequencing/activity_tree.ts","../../src/cmi/scorm2004/sequencing/sequencing_controls.ts","../../src/cmi/scorm2004/sequencing/sequencing.ts","../../src/ScormAgain.ts","../../src/AICC.ts","../../src/Scorm2004API.ts"],"sourcesContent":["interface ErrorDescription {\n  basicMessage: string;\n  detailMessage: string;\n}\n\ninterface ErrorDescriptions {\n  [key: string]: ErrorDescription;\n}\n\ninterface ScormConstants {\n  cmi_children: string;\n  core_children: string;\n  score_children: string;\n  comments_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface AiccConstants extends ScormConstants {\n  student_demographics_children: string;\n  tries_children: string;\n  attempt_records_children: string;\n  paths_children: string;\n}\n\ninterface Scorm2004Constants {\n  cmi_children: string;\n  comments_children: string;\n  score_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  adl_data_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface GlobalConstants {\n  SCORM_TRUE: string;\n  SCORM_FALSE: string;\n  STATE_NOT_INITIALIZED: number;\n  STATE_INITIALIZED: number;\n  STATE_TERMINATED: number;\n}\n\nexport const global_constants: GlobalConstants = {\n  SCORM_TRUE: \"true\",\n  SCORM_FALSE: \"false\",\n  STATE_NOT_INITIALIZED: 0,\n  STATE_INITIALIZED: 1,\n  STATE_TERMINATED: 2,\n};\n\nexport const scorm12_constants: ScormConstants = {\n  // Children lists\n  cmi_children:\n    \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions\",\n  core_children:\n    \"student_id,student_name,lesson_location,credit,lesson_status,entry,score,total_time,lesson_mode,exit,session_time\",\n  score_children: \"raw,min,max\",\n  comments_children: \"content,location,time\",\n  objectives_children: \"id,score,status\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio,language,speed,text\",\n  interactions_children:\n    \"id,objectives,time,type,correct_responses,weighting,student_response,result,latency\",\n  error_descriptions: {\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage: \"No specific error code exists to describe the error.\",\n    },\n    \"201\": {\n      basicMessage: \"Invalid argument error\",\n      detailMessage:\n        \"Indicates that an argument represents an invalid data model element or is otherwise incorrect.\",\n    },\n    \"202\": {\n      basicMessage: \"Element cannot have children\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_children\" for a data model element that does not support the \"_children\" suffix.',\n    },\n    \"203\": {\n      basicMessage: \"Element not an array - cannot have count\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_count\" for a data model element that does not support the \"_count\" suffix.',\n    },\n    \"301\": {\n      basicMessage: \"Not initialized\",\n      detailMessage: \"Indicates that an API call was made before the call to lmsInitialize.\",\n    },\n    \"401\": {\n      basicMessage: \"Not implemented error\",\n      detailMessage:\n        \"The data model element indicated in a call to LMSGetValue or LMSSetValue is valid, but was not implemented by this LMS. SCORM 1.2 defines a set of data model elements as being optional for an LMS to implement.\",\n    },\n    \"402\": {\n      basicMessage: \"Invalid set value, element is a keyword\",\n      detailMessage:\n        'Indicates that LMSSetValue was called on a data model element that represents a keyword (elements that end in \"_children\" and \"_count\").',\n    },\n    \"403\": {\n      basicMessage: \"Element is read only\",\n      detailMessage: \"LMSSetValue was called with a data model element that can only be read.\",\n    },\n    \"404\": {\n      basicMessage: \"Element is write only\",\n      detailMessage: \"LMSGetValue was called on a data model element that can only be written to.\",\n    },\n    \"405\": {\n      basicMessage: \"Incorrect Data Type\",\n      detailMessage:\n        \"LMSSetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a LMSSetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\nexport const aicc_constants: AiccConstants = {\n  ...scorm12_constants,\n  ...{\n    cmi_children:\n      \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions,evaluation\",\n    student_preference_children:\n      \"audio,language,lesson_type,speed,text,text_color,text_location,text_size,video,windows\",\n    student_data_children: \"attempt_number,tries,mastery_score,max_time_allowed,time_limit_action\",\n    student_demographics_children:\n      \"city,class,company,country,experience,familiar_name,instructor_name,title,native_language,state,street_address,telephone,years_experience\",\n    tries_children: \"time,status,score\",\n    attempt_records_children: \"score,lesson_status\",\n    paths_children: \"location_id,date,time,status,why_left,time_in_element\",\n  },\n};\n\nexport const scorm2004_constants: Scorm2004Constants = {\n  // Children lists\n  cmi_children:\n    \"_version,comments_from_learner,comments_from_lms,completion_status,credit,entry,exit,interactions,launch_data,learner_id,learner_name,learner_preference,location,max_time_allowed,mode,objectives,progress_measure,scaled_passing_score,score,session_time,success_status,suspend_data,time_limit_action,total_time\",\n  comments_children: \"comment,timestamp,location\",\n  score_children: \"max,raw,scaled,min\",\n  objectives_children: \"progress_measure,completion_status,success_status,description,score,id\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio_level,audio_captioning,delivery_speed,language\",\n  interactions_children:\n    \"id,type,objectives,timestamp,correct_responses,weighting,learner_response,result,latency,description\",\n  adl_data_children: \"id,store\",\n  error_descriptions: {\n    \"0\": {\n      basicMessage: \"No Error\",\n      detailMessage: \"No error occurred, the previous API call was successful.\",\n    },\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage: \"No specific error code exists to describe the error.\",\n    },\n    \"102\": {\n      basicMessage: \"General Initialization Failure\",\n      detailMessage: \"Call to Initialize failed for an unknown reason.\",\n    },\n    \"103\": {\n      basicMessage: \"Already Initialized\",\n      detailMessage: \"Call to Initialize failed because Initialize was already called.\",\n    },\n    \"104\": {\n      basicMessage: \"Content Instance Terminated\",\n      detailMessage: \"Call to Initialize failed because Terminate was already called.\",\n    },\n    \"111\": {\n      basicMessage: \"General Termination Failure\",\n      detailMessage: \"Call to Terminate failed for an unknown reason.\",\n    },\n    \"112\": {\n      basicMessage: \"Termination Before Initialization\",\n      detailMessage: \"Call to Terminate failed because it was made before the call to Initialize.\",\n    },\n    \"113\": {\n      basicMessage: \"Termination After Termination\",\n      detailMessage: \"Call to Terminate failed because Terminate was already called.\",\n    },\n    \"122\": {\n      basicMessage: \"Retrieve Data Before Initialization\",\n      detailMessage: \"Call to GetValue failed because it was made before the call to Initialize.\",\n    },\n    \"123\": {\n      basicMessage: \"Retrieve Data After Termination\",\n      detailMessage: \"Call to GetValue failed because it was made after the call to Terminate.\",\n    },\n    \"132\": {\n      basicMessage: \"Store Data Before Initialization\",\n      detailMessage: \"Call to SetValue failed because it was made before the call to Initialize.\",\n    },\n    \"133\": {\n      basicMessage: \"Store Data After Termination\",\n      detailMessage: \"Call to SetValue failed because it was made after the call to Terminate.\",\n    },\n    \"142\": {\n      basicMessage: \"Commit Before Initialization\",\n      detailMessage: \"Call to Commit failed because it was made before the call to Initialize.\",\n    },\n    \"143\": {\n      basicMessage: \"Commit After Termination\",\n      detailMessage: \"Call to Commit failed because it was made after the call to Terminate.\",\n    },\n    \"201\": {\n      basicMessage: \"General Argument Error\",\n      detailMessage:\n        \"An invalid argument was passed to an API method (usually indicates that Initialize, Commit or Terminate did not receive the expected empty string argument.\",\n    },\n    \"301\": {\n      basicMessage: \"General Get Failure\",\n      detailMessage:\n        \"Indicates a failed GetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"351\": {\n      basicMessage: \"General Set Failure\",\n      detailMessage:\n        \"Indicates a failed SetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"391\": {\n      basicMessage: \"General Commit Failure\",\n      detailMessage:\n        \"Indicates a failed Commit call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"401\": {\n      basicMessage: \"Undefined Data Model Element\",\n      detailMessage:\n        \"The data model element name passed to GetValue or SetValue is not a valid SCORM data model element.\",\n    },\n    \"402\": {\n      basicMessage: \"Unimplemented Data Model Element\",\n      detailMessage:\n        \"The data model element indicated in a call to GetValue or SetValue is valid, but was not implemented by this LMS. In SCORM 2004, this error would indicate an LMS that is not fully SCORM conformant.\",\n    },\n    \"403\": {\n      basicMessage: \"Data Model Element Value Not Initialized\",\n      detailMessage:\n        \"Attempt to read a data model element that has not been initialized by the LMS or through a SetValue call. This error condition is often reached during normal execution of a SCO.\",\n    },\n    \"404\": {\n      basicMessage: \"Data Model Element Is Read Only\",\n      detailMessage: \"SetValue was called with a data model element that can only be read.\",\n    },\n    \"405\": {\n      basicMessage: \"Data Model Element Is Write Only\",\n      detailMessage: \"GetValue was called on a data model element that can only be written to.\",\n    },\n    \"406\": {\n      basicMessage: \"Data Model Element Type Mismatch\",\n      detailMessage:\n        \"SetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Data Model Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a SetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\n","export type ErrorCode = {\n  [key: string]: number;\n};\n\nexport const global_errors: ErrorCode = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nexport const scorm12_errors: ErrorCode = {\n  ...global_errors,\n  RETRIEVE_BEFORE_INIT: 301,\n  STORE_BEFORE_INIT: 301,\n  COMMIT_BEFORE_INIT: 301,\n  ARGUMENT_ERROR: 201,\n  CHILDREN_ERROR: 202,\n  COUNT_ERROR: 203,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 401,\n  VALUE_NOT_INITIALIZED: 301,\n  INVALID_SET_VALUE: 402,\n  READ_ONLY_ELEMENT: 403,\n  WRITE_ONLY_ELEMENT: 404,\n  TYPE_MISMATCH: 405,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n\nexport const scorm2004_errors: ErrorCode = {\n  ...global_errors,\n  INITIALIZATION_FAILED: 102,\n  INITIALIZED: 103,\n  TERMINATED: 104,\n  TERMINATION_FAILURE: 111,\n  TERMINATION_BEFORE_INIT: 112,\n  MULTIPLE_TERMINATIONS: 113,\n  RETRIEVE_BEFORE_INIT: 122,\n  RETRIEVE_AFTER_TERM: 123,\n  STORE_BEFORE_INIT: 132,\n  STORE_AFTER_TERM: 133,\n  COMMIT_BEFORE_INIT: 142,\n  COMMIT_AFTER_TERM: 143,\n  ARGUMENT_ERROR: 201,\n  GENERAL_GET_FAILURE: 301,\n  GENERAL_SET_FAILURE: 351,\n  GENERAL_COMMIT_FAILURE: 391,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 402,\n  VALUE_NOT_INITIALIZED: 403,\n  READ_ONLY_ELEMENT: 404,\n  WRITE_ONLY_ELEMENT: 405,\n  TYPE_MISMATCH: 406,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n","export const scorm12_regex = {\n  CMIString256: \"^.{0,255}$\",\n  CMIString4096: \"^.{0,4096}$\",\n  CMITime: \"^(?:[01]\\\\d|2[0123]):(?:[012345]\\\\d):(?:[012345]\\\\d)$\",\n  CMITimespan: \"^([0-9]{2,}):([0-9]{2}):([0-9]{2})(.[0-9]{1,2})?$\",\n\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{0,3})(.[0-9]*)?$\",\n\n  CMIIdentifier: \"^[\\\\u0021-\\\\u007E\\\\s]{0,255}$\",\n  CMIFeedback: \"^.{0,255}$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMIStatus: \"^(passed|completed|failed|incomplete|browsed)$\",\n  CMIStatus2: \"^(passed|completed|failed|incomplete|browsed|not attempted)$\",\n  CMIExit: \"^(time-out|suspend|logout|)$\",\n  CMIType: \"^(true-false|choice|fill-in|matching|performance|sequencing|likert|numeric)$\",\n  CMIResult: \"^(correct|wrong|unanticipated|neutral|([0-9]{0,3})?(\\\\.[0-9]*)?)$\",\n  NAVEvent: \"^(previous|continue)$\",\n  // Data ranges\n  score_range: \"0#100\",\n  audio_range: \"-1#100\",\n  speed_range: \"-100#100\",\n  weighting_range: \"-100#100\",\n  text_range: \"-1#1\",\n};\nexport const aicc_regex = {\n  ...scorm12_regex,\n  ...{\n    CMIIdentifier: \"^\\\\w{1,255}$\",\n  },\n};\nexport const scorm2004_regex = {\n  CMIString200: \"^[\\\\u0000-\\\\uFFFF]{0,200}$\",\n  CMIString250: \"^[\\\\u0000-\\\\uFFFF]{0,250}$\",\n  CMIString1000: \"^[\\\\u0000-\\\\uFFFF]{0,1000}$\",\n  CMIString4000: \"^[\\\\u0000-\\\\uFFFF]{0,4000}$\",\n  CMIString64000: \"^[\\\\u0000-\\\\uFFFF]{0,64000}$\",\n  CMILang: \"^([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?$|^$\",\n\n  CMILangString250: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,250}$)?$\",\n\n  CMILangcr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?}))(.*?)$\",\n\n  CMILangString250cr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?})?(.{0,250})?)?$\",\n\n  CMILangString4000: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,4000}$)?$\",\n\n  CMITime:\n    \"^(19[7-9]{1}[0-9]{1}|20[0-2]{1}[0-9]{1}|203[0-8]{1})((-(0[1-9]{1}|1[0-2]{1}))((-(0[1-9]{1}|[1-2]{1}[0-9]{1}|3[0-1]{1}))(T([0-1]{1}[0-9]{1}|2[0-3]{1})((:[0-5]{1}[0-9]{1})((:[0-5]{1}[0-9]{1})((\\\\.[0-9]{1,6})((Z|([+|-]([0-1]{1}[0-9]{1}|2[0-3]{1})))(:[0-5]{1}[0-9]{1})?)?)?)?)?)?)?)?$\",\n  CMITimespan:\n    \"^P(?:([.,\\\\d]+)Y)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)W)?(?:([.,\\\\d]+)D)?(?:T?(?:([.,\\\\d]+)H)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)S)?)?$\",\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{1,5})(\\\\.[0-9]{1,18})?$\",\n  CMIIdentifier: \"^\\\\S{1,250}[a-zA-Z0-9]$\",\n  CMIShortIdentifier: \"^[\\\\w\\\\.\\\\-\\\\_]{1,250}$\",\n  CMILongIdentifier: \"^(?:(?!urn:)\\\\S{1,4000}|urn:[A-Za-z0-9-]{1,31}:\\\\S{1,4000}|.{1,4000})$\",\n  // need to re-examine this\n  CMIFeedback: \"^.*$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  CMIIndexStore: \".N(\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMICStatus: \"^(completed|incomplete|not attempted|unknown)$\",\n  CMISStatus: \"^(passed|failed|unknown)$\",\n  CMIExit: \"^(time-out|suspend|logout|normal)$\",\n  CMIType:\n    \"^(true-false|choice|fill-in|long-fill-in|matching|performance|sequencing|likert|numeric|other)$\",\n  CMIResult: \"^(correct|incorrect|unanticipated|neutral|-?([0-9]{1,4})(\\\\.[0-9]{1,18})?)$\",\n  NAVEvent:\n    \"^(previous|continue|exit|exitAll|abandon|abandonAll|suspendAll|_none_|(\\\\{target=(?<choice_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?choice|(\\\\{target=(?<jump_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?jump)$\",\n\n  NAVBoolean: \"^(unknown|true|false$)\",\n  NAVTarget: \"^{target=\\\\S{0,}[a-zA-Z0-9-_]+}$\",\n  // Data ranges\n  scaled_range: \"-1#1\",\n  audio_range: \"0#999.9999999\",\n  speed_range: \"0#999.9999999\",\n  text_range: \"-1#1\",\n  progress_range: \"0#1\",\n};\n","type APIError = {\n  errorCode: number;\n  errorMessage: string;\n  detailedMessage: string;\n};\n\nexport class BaseScormValidationError extends Error {\n  constructor(CMIElement: string, errorCode: number) {\n    super(`${CMIElement} : ${errorCode.toString()}`);\n    this._errorCode = errorCode;\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, BaseScormValidationError.prototype);\n  }\n\n  private readonly _errorCode: number;\n\n  /**\n   * Getter for _errorCode\n   * @return {number}\n   */\n  get errorCode(): number {\n    return this._errorCode;\n  }\n}\n\n/**\n * Base Validation Exception\n */\nexport class ValidationError extends BaseScormValidationError implements APIError {\n  /**\n   * Constructor to take in an error message and code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   * @param {string} errorMessage\n   * @param {string} detailedMessage\n   */\n  constructor(\n    CMIElement: string,\n    errorCode: number,\n    errorMessage: string,\n    detailedMessage?: string,\n  ) {\n    super(CMIElement, errorCode);\n    this.message = `${CMIElement} : ${errorMessage}`;\n    this._errorMessage = errorMessage;\n    if (detailedMessage) {\n      this._detailedMessage = detailedMessage;\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  private readonly _errorMessage: string;\n  private readonly _detailedMessage: string = \"\";\n\n  /**\n   * Getter for _errorMessage\n   * @return {string}\n   */\n  get errorMessage(): string {\n    return this._errorMessage;\n  }\n\n  /**\n   * Getter for _detailedMessage\n   * @return {string}\n   */\n  get detailedMessage(): string {\n    return this._detailedMessage;\n  }\n}\n","import { ValidationError } from \"../exceptions\";\nimport { scorm12_constants } from \"../constants/api_constants\";\n\nconst scorm12_errors = scorm12_constants.error_descriptions;\n\n/**\n * SCORM 1.2 Validation Error\n */\nexport class Scorm12ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm12_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm12_errors[String(errorCode)].basicMessage,\n        scorm12_errors[String(errorCode)].detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm12_errors[\"101\"].basicMessage,\n        scorm12_errors[\"101\"].detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm12ValidationError.prototype);\n  }\n}\n","/**\n * Base class for API cmi objects\n */\nexport abstract class BaseCMI {\n  jsonString = false;\n  protected readonly _cmi_element: string;\n  protected _initialized = false;\n  private _start_time: number | undefined;\n\n  /**\n   * Constructor for BaseCMI\n   * @param {string} cmi_element\n   */\n  constructor(cmi_element: string) {\n    this._cmi_element = cmi_element;\n  }\n\n  /**\n   * Getter for _initialized\n   * @return {boolean}\n   */\n  get initialized(): boolean {\n    return this._initialized;\n  }\n\n  /**\n   * Getter for _start_time\n   * @return {number | undefined}\n   */\n  get start_time(): number | undefined {\n    return this._start_time;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize(): void {\n    this._initialized = true;\n  }\n\n  /**\n   * Called when the player should override the 'session_time' provided by\n   * the module\n   */\n  setStartTime(): void {\n    this._start_time = new Date().getTime();\n  }\n\n  abstract reset(): void;\n}\n\n/**\n * Base class for cmi root objects\n */\nexport abstract class BaseRootCMI extends BaseCMI {\n  abstract getCurrentTotalTime(): string;\n}\n","/**\n * Constants for time conversion calculations.\n * These are used throughout the codebase for converting between different time formats.\n */\nexport const SECONDS_PER_SECOND = 1.0;\nexport const SECONDS_PER_MINUTE = 60;\nexport const SECONDS_PER_HOUR = 60 * SECONDS_PER_MINUTE;\nexport const SECONDS_PER_DAY = 24 * SECONDS_PER_HOUR;\n\ntype Designation = {\n  [key: string]: number;\n};\n\n/**\n * A record with string keys and unknown values.\n * This is a more type-safe alternative to using `any`.\n */\nexport type StringKeyMap = Record<string, unknown>;\n\nconst designations: Designation = {\n  D: SECONDS_PER_DAY,\n  H: SECONDS_PER_HOUR,\n  M: SECONDS_PER_MINUTE,\n  S: SECONDS_PER_SECOND,\n};\n\n/**\n * Converts a number of seconds to a formatted time string in HH:MM:SS format.\n * This function handles decimal seconds and ensures proper formatting with leading zeros.\n *\n * @param {number|null} totalSeconds - The total number of seconds to convert. If null or negative, returns \"00:00:00\".\n * @return {string} A formatted time string in HH:MM:SS format, with up to 2 decimal places for seconds if applicable.\n *\n * @example\n * // Returns \"01:30:45\"\n * getSecondsAsHHMMSS(5445);\n *\n * @example\n * // Returns \"00:00:30.5\"\n * getSecondsAsHHMMSS(30.5);\n *\n * @example\n * // Returns \"00:00:00\"\n * getSecondsAsHHMMSS(null);\n */\nexport const getSecondsAsHHMMSS = memoize((totalSeconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!totalSeconds || totalSeconds <= 0) {\n    return \"00:00:00\";\n  }\n\n  const hours = Math.floor(totalSeconds / SECONDS_PER_HOUR);\n  const dateObj = new Date(totalSeconds * 1000);\n  const minutes = dateObj.getUTCMinutes();\n  // make sure we add any possible decimal value\n  const seconds = dateObj.getSeconds();\n  const ms = totalSeconds % 1.0;\n  let msStr = \"\";\n\n  if (countDecimals(ms) > 0) {\n    if (countDecimals(ms) > 2) {\n      msStr = ms.toFixed(2);\n    } else {\n      msStr = String(ms);\n    }\n\n    msStr = \".\" + msStr.split(\".\")[1];\n  }\n\n  return (hours + \":\" + minutes + \":\" + seconds).replace(/\\b\\d\\b/g, \"0$&\") + msStr;\n});\n\n/**\n * Converts a number of seconds to an ISO 8601 duration string (e.g., \"PT1H30M45S\").\n * This function handles the complexity of formatting according to the ISO 8601 standard,\n * including the proper placement of the \"T\" separator for time components.\n *\n * @param {number|null} seconds - The number of seconds to convert. If null or negative, returns \"PT0S\".\n * @return {string} An ISO 8601 formatted duration string.\n *\n * @example\n * // Returns \"PT1H30M45S\" (1 hour, 30 minutes, 45 seconds)\n * getSecondsAsISODuration(5445);\n *\n * @example\n * // Returns \"PT30.5S\" (30.5 seconds)\n * getSecondsAsISODuration(30.5);\n *\n * @example\n * // Returns \"P1DT1H\" (1 day, 1 hour)\n * getSecondsAsISODuration(90000);\n *\n * @example\n * // Returns \"PT0S\" (0 seconds)\n * getSecondsAsISODuration(null);\n */\nexport const getSecondsAsISODuration = memoize((seconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!seconds || seconds <= 0) {\n    return \"PT0S\";\n  }\n\n  let duration = \"P\";\n  let remainder = seconds;\n\n  // Convert to array of entries and use functional methods\n  const designationEntries = Object.entries(designations);\n\n  // Process each time designation\n  designationEntries.forEach(([designationsKey, current_seconds]) => {\n    let value = Math.floor(remainder / current_seconds);\n    remainder = remainder % current_seconds;\n\n    // Limit decimal places\n    if (countDecimals(remainder) > 2) {\n      remainder = Number(Number(remainder).toFixed(2));\n    }\n\n    // If we have anything left in the remainder, and we're currently adding\n    // seconds to the duration, go ahead and add the decimal to the seconds\n    if (designationsKey === \"S\" && remainder > 0) {\n      value += remainder;\n    }\n\n    if (value) {\n      // Add the 'T' separator for time components if needed\n      const needsTimeSeparator =\n        (duration.indexOf(\"D\") > 0 || [\"H\", \"M\", \"S\"].includes(designationsKey)) &&\n        duration.indexOf(\"T\") === -1;\n\n      if (needsTimeSeparator) {\n        duration += \"T\";\n      }\n\n      duration += `${value}${designationsKey}`;\n    }\n  });\n\n  return duration;\n});\n\n/**\n * Converts a time string in HH:MM:SS format to the equivalent number of seconds.\n * This function is flexible and can handle various input types, converting them to strings as needed.\n *\n * @param {string|number|boolean|null} timeString - The time string to convert, typically in HH:MM:SS format.\n *                                                 If not a string, it will be converted to one.\n *                                                 If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} timeRegex - The regular expression used to validate the time string format.\n *                                    If a string is provided, it will be converted to a RegExp.\n * @return {number} The total number of seconds represented by the time string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getTimeAsSeconds(\"01:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getTimeAsSeconds(\"invalid\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 30 (converts number to string \"30\" then parses as 0:0:30)\n * getTimeAsSeconds(30, /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport const getTimeAsSeconds = memoize(\n  (timeString: string | number | boolean | null, timeRegex: RegExp | string): number => {\n    if (typeof timeString === \"number\" || typeof timeString === \"boolean\") {\n      timeString = String(timeString);\n    }\n    if (typeof timeRegex === \"string\") {\n      timeRegex = new RegExp(timeRegex);\n    }\n    if (!timeString || !timeString?.match?.(timeRegex)) {\n      return 0;\n    }\n\n    const parts = timeString.split(\":\");\n    const hours = Number(parts[0]);\n    const minutes = Number(parts[1]);\n    const seconds = Number(parts[2]);\n    return hours * 3600 + minutes * 60 + seconds;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (timeString, timeRegex) => {\n    const timeStr = typeof timeString === \"string\" ? timeString : String(timeString ?? \"\");\n    const regexStr = typeof timeRegex === \"string\" ? timeRegex : (timeRegex?.toString() ?? \"\");\n    return `${timeStr}:${regexStr}`;\n  },\n);\n\n/**\n * Converts an ISO 8601 duration string (e.g., \"PT1H30M45S\") to the equivalent number of seconds.\n * This function parses the duration string using a regular expression to extract years, days,\n * hours, minutes, and seconds components.\n *\n * @param {string|null} duration - The ISO 8601 duration string to convert.\n *                                If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n *                                       The regex should have capture groups for years, days, hours, minutes, and seconds.\n * @return {number} The total number of seconds represented by the duration string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getDurationAsSeconds(\"PT1H30M45S\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 90000 (1 day, 1 hour)\n * getDurationAsSeconds(\"P1DT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getDurationAsSeconds(\"invalid\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport const getDurationAsSeconds = memoize(\n  (duration: string | null, durationRegex: RegExp | string): number => {\n    if (typeof durationRegex === \"string\") {\n      durationRegex = new RegExp(durationRegex);\n    }\n\n    if (!duration || !duration?.match?.(durationRegex)) {\n      return 0;\n    }\n\n    const [, years, _, , days, hours, minutes, seconds] =\n      new RegExp(durationRegex).exec?.(duration) ?? [];\n    let result = 0.0;\n    result += Number(seconds) || 0.0;\n    result += Number(minutes) * 60.0 || 0.0;\n    result += Number(hours) * 3600.0 || 0.0;\n    result += Number(days) * (60 * 60 * 24.0) || 0.0;\n    result += Number(years) * (60 * 60 * 24 * 365.0) || 0.0;\n    return result;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (duration, durationRegex) => {\n    const durationStr = duration ?? \"\";\n    const regexStr =\n      typeof durationRegex === \"string\" ? durationRegex : (durationRegex?.toString() ?? \"\");\n    return `${durationStr}:${regexStr}`;\n  },\n);\n\n/**\n * Adds together two ISO 8601 duration strings and returns the result as a new ISO 8601 duration string.\n * This function works by converting both durations to seconds, adding them together, and then\n * converting the result back to an ISO 8601 duration string.\n *\n * @param {string} first - The first ISO 8601 duration string.\n * @param {string} second - The second ISO 8601 duration string.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n * @return {string} A new ISO 8601 duration string representing the sum of the two input durations.\n *\n * @example\n * // Returns \"PT2H\" (1 hour + 1 hour = 2 hours)\n * addTwoDurations(\"PT1H\", \"PT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"PT1H30M\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addTwoDurations(\"PT1H\", \"PT30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"P1DT1H30M\" (1 day + 1 hour and 30 minutes = 1 day, 1 hour, and 30 minutes)\n * addTwoDurations(\"P1D\", \"PT1H30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport function addTwoDurations(\n  first: string,\n  second: string,\n  durationRegex: RegExp | string,\n): string {\n  const regex: RegExp =\n    typeof durationRegex === \"string\" ? new RegExp(durationRegex) : durationRegex;\n  return getSecondsAsISODuration(\n    getDurationAsSeconds(first, regex) + getDurationAsSeconds(second, regex),\n  );\n}\n\n/**\n * Adds together two time strings in HH:MM:SS format and returns the result as a new time string.\n * This function works by converting both time strings to seconds, adding them together, and then\n * converting the result back to an HH:MM:SS format.\n *\n * @param {string} first - The first time string in HH:MM:SS format.\n * @param {string} second - The second time string in HH:MM:SS format.\n * @param {RegExp|string} timeRegex - The regular expression used to validate and parse the time strings.\n *                                   If a string is provided, it will be converted to a RegExp.\n * @return {string} A new time string in HH:MM:SS format representing the sum of the two input times.\n *\n * @example\n * // Returns \"02:00:00\" (1 hour + 1 hour = 2 hours)\n * addHHMMSSTimeStrings(\"01:00:00\", \"01:00:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:00\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:45\" (1 hour + 30 minutes and 45 seconds = 1 hour, 30 minutes, and 45 seconds)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport function addHHMMSSTimeStrings(\n  first: string,\n  second: string,\n  timeRegex: RegExp | string,\n): string {\n  if (typeof timeRegex === \"string\") {\n    timeRegex = new RegExp(timeRegex);\n  }\n  return getSecondsAsHHMMSS(\n    getTimeAsSeconds(first, timeRegex) + getTimeAsSeconds(second, timeRegex),\n  );\n}\n\n/**\n * Flattens a nested JSON object into a flat object with dot notation for nested properties.\n * This function recursively traverses the object and creates new keys using dot notation\n * for nested objects and bracket notation for arrays.\n *\n * @param {StringKeyMap} data - The nested object to flatten.\n * @return {StringKeyMap} A flattened object where nested properties are represented with dot notation.\n *\n * @example\n * // Returns { \"a\": 1, \"b.c\": 2, \"b.d\": 3, \"e[0]\": 4, \"e[1]\": 5 }\n * flatten({\n *   a: 1,\n *   b: { c: 2, d: 3 },\n *   e: [4, 5]\n * });\n *\n * @example\n * // Returns { \"\": [] } for an empty array\n * flatten([]);\n *\n * @example\n * // Returns { \"\": {} } for an empty object\n * flatten({});\n */\nexport function flatten(data: StringKeyMap): StringKeyMap {\n  const result: StringKeyMap = {};\n\n  /**\n   * Recurse through the object\n   * @param {*} cur\n   * @param {*} prop\n   */\n  function recurse(cur: any, prop: any) {\n    if (Object(cur) !== cur) {\n      result[prop] = cur;\n    } else if (Array.isArray(cur)) {\n      // Use forEach instead of for loop\n      cur.forEach((item, i) => {\n        recurse(item, `${prop}[${i}]`);\n      });\n\n      if (cur.length === 0) result[prop] = [];\n    } else {\n      const keys = Object.keys(cur).filter((p) => Object.prototype.hasOwnProperty.call(cur, p));\n\n      const isEmpty = keys.length === 0;\n\n      // Use forEach instead of for...in loop\n      keys.forEach((p) => {\n        recurse(cur[p], prop ? `${prop}.${p}` : p);\n      });\n\n      if (isEmpty && prop) result[prop] = {};\n    }\n  }\n\n  recurse(data, \"\");\n  return result;\n}\n\n/**\n * Converts a flattened object back into a nested object structure.\n * This function is the inverse of `flatten()`. It parses dot notation and bracket notation\n * in property names to recreate the original nested structure.\n *\n * @param {StringKeyMap} data - The flattened object to unflatten.\n * @return {object} A nested object recreated from the flattened structure.\n *\n * @example\n * // Returns { a: 1, b: { c: 2, d: 3 }, e: [4, 5] }\n * unflatten({\n *   \"a\": 1,\n *   \"b.c\": 2,\n *   \"b.d\": 3,\n *   \"e[0]\": 4,\n *   \"e[1]\": 5\n * });\n *\n * @example\n * // Handles array indices correctly\n * unflatten({\n *   \"users[0].name\": \"John\",\n *   \"users[0].email\": \"john@example.com\",\n *   \"users[1].name\": \"Jane\",\n *   \"users[1].email\": \"jane@example.com\"\n * });\n * // Returns:\n * // {\n * //   users: [\n * //     { name: \"John\", email: \"john@example.com\" },\n * //     { name: \"Jane\", email: \"jane@example.com\" }\n * //   ]\n * // }\n */\nexport function unflatten(data: StringKeyMap): object {\n  \"use strict\";\n\n  if (Object(data) !== data || Array.isArray(data)) return data;\n  const result: StringKeyMap = {};\n\n  // Regex pattern for parsing property paths\n  const pattern = /\\.?([^.[\\]]+)|\\[(\\d+)]/g;\n\n  // Get all own properties and process them\n  Object.keys(data)\n    .filter((p) => Object.prototype.hasOwnProperty.call(data, p))\n    .forEach((p) => {\n      let cur = result;\n      let prop = \"\";\n\n      // Create a new regex instance for each property to reset lastIndex\n      const regex = new RegExp(pattern);\n\n      // Process all matches in the property path\n      Array.from({ length: p.match(new RegExp(pattern, \"g\"))?.length ?? 0 }, () =>\n        regex.exec(p),\n      ).forEach((m) => {\n        if (m) {\n          // Create array or object as needed\n          cur = (cur[prop] ?? (cur[prop] = m[2] ? [] : ({} as StringKeyMap))) as StringKeyMap;\n          prop = m[2] || m[1];\n        }\n      });\n\n      cur[prop] = data[p];\n    });\n\n  return (result[\"\"] ?? result) as object;\n}\n\n/**\n * Counts the number of decimal places in a number.\n * This function handles both integer and floating-point numbers.\n *\n * @param {number} num - The number to analyze.\n * @return {number} The number of decimal places. Returns 0 for integers or if the number doesn't have a decimal point.\n *\n * @example\n * // Returns 0\n * countDecimals(42);\n *\n * @example\n * // Returns 2\n * countDecimals(3.14);\n *\n * @example\n * // Returns 5\n * countDecimals(1.23456);\n */\nexport function countDecimals(num: number): number {\n  if (Math.floor(num) === num || String(num)?.indexOf?.(\".\") < 0) return 0;\n  const parts = num.toString().split(\".\")?.[1];\n  return parts?.length ?? 0;\n}\n\n/**\n * Formats SCORM messages for consistent and readable logging.\n * This function pads the function name and CMI element to create aligned log messages\n * that are easier to read in log files or console output.\n *\n * @param {string} functionName - The name of the function that generated the message.\n * @param {string} message - The message content to be logged.\n * @param {string} [CMIElement] - Optional. The CMI element related to the message.\n * @return {string} A formatted message string with consistent padding.\n *\n * @example\n * // Returns \"initialize          : Successfully initialized\"\n * formatMessage(\"initialize\", \"Successfully initialized\");\n *\n * @example\n * // Returns \"getValue            : cmi.core.student_id                                             : 12345\"\n * formatMessage(\"getValue\", \"12345\", \"cmi.core.student_id\");\n *\n * @example\n * // Returns \"setValue            : cmi.core.lesson_status                                          : completed\"\n * formatMessage(\"setValue\", \"completed\", \"cmi.core.lesson_status\");\n */\nexport function formatMessage(functionName: string, message: string, CMIElement?: string): string {\n  const baseLength = 20;\n\n  // Use string padding instead of loops\n  const paddedFunction = functionName.padEnd(baseLength);\n  let messageString = `${paddedFunction}: `;\n\n  if (CMIElement) {\n    const CMIElementBaseLength = 70;\n    // Add CMIElement and pad to the required length\n    messageString += CMIElement;\n    messageString = messageString.padEnd(CMIElementBaseLength);\n  }\n\n  // Add the message (or empty string if null/undefined)\n  messageString += message ?? \"\";\n\n  return messageString;\n}\n\n/**\n * Checks if a string contains a specific pattern using regular expression matching.\n * This function is a wrapper around JavaScript's String.match() method that handles\n * null/undefined values gracefully.\n *\n * @param {string} str - The string to search within. If null or undefined, returns false.\n * @param {string} tester - The pattern to search for. Can be a regular expression pattern.\n * @return {boolean} True if the pattern is found in the string, false otherwise.\n *\n * @example\n * // Returns true\n * stringMatches(\"Hello, world!\", \"world\");\n *\n * @example\n * // Returns true\n * stringMatches(\"The quick brown fox\", \"\\\\w+\\\\s+\\\\w+\");\n *\n * @example\n * // Returns false\n * stringMatches(\"Hello, world!\", \"universe\");\n *\n * @example\n * // Returns false (handles null gracefully)\n * stringMatches(null, \"test\");\n */\nexport function stringMatches(str: string, tester: string): boolean {\n  return str?.match(tester) !== null;\n}\n\n/**\n * Creates a memoized (cached) version of a function for performance optimization.\n * This function caches the results of previous calls with the same arguments,\n * avoiding redundant calculations for repeated calls with the same input.\n *\n * @template T - The type of the function to memoize\n * @param {T} fn - The function to memoize\n * @param {Function} [keyFn] - Optional function to generate a custom cache key.\n *                           Useful for functions with complex arguments that can't be serialized.\n * @return {T} A memoized version of the input function with the same signature\n *\n * @example\n * // Basic usage with a simple function\n * const memoizedAdd = memoize((a, b) => {\n *   console.log('Calculating...');\n *   return a + b;\n * });\n *\n * memoizedAdd(1, 2); // Logs \"Calculating...\" and returns 3\n * memoizedAdd(1, 2); // Returns 3 without logging (uses cached result)\n *\n * @example\n * // Using a custom key function for objects that can't be serialized\n * const memoizedProcessUser = memoize(\n *   (user) => {\n *     console.log('Processing user...');\n *     return { ...user, processed: true };\n *   },\n *   (user) => user.id // Use user.id as the cache key\n * );\n *\n * memoizedProcessUser({ id: 123, name: 'John' }); // Logs and processes\n * memoizedProcessUser({ id: 123, name: 'John' }); // Uses cached result\n */\nexport function memoize<T extends (...args: any[]) => any>(\n  fn: T,\n  keyFn?: (...args: Parameters<T>) => string,\n): T {\n  const cache = new Map<string, ReturnType<T>>();\n\n  return ((...args: Parameters<T>): ReturnType<T> => {\n    const key = keyFn ? keyFn(...args) : JSON.stringify(args);\n\n    return cache.has(key)\n      ? (cache.get(key) as ReturnType<T>)\n      : (() => {\n          const result = fn(...args);\n          cache.set(key, result);\n          return result;\n        })();\n  }) as T;\n}\n","import { BaseScormValidationError } from \"../../exceptions\";\nimport { memoize } from \"../../utilities\";\n\n/**\n * Check if the value matches the proper format. If not, throw proper error code.\n *\n * @param {string} value\n * @param {string} regexPattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @param {boolean} [allowEmptyString]\n * @return {boolean}\n */\nexport const checkValidFormat = memoize(\n  (\n    CMIElement: string,\n    value: string,\n    regexPattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n    allowEmptyString?: boolean,\n  ): boolean => {\n    if (typeof value !== \"string\") {\n      return false;\n    }\n    const formatRegex = new RegExp(regexPattern);\n    const matches = value.match(formatRegex);\n    if (allowEmptyString && value === \"\") {\n      return true;\n    }\n    if (value === undefined || !matches || matches[0] === \"\") {\n      throw new errorClass(CMIElement, errorCode);\n    }\n    return true;\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, regexPattern, errorCode, _errorClass, allowEmptyString) => {\n    // Use typeof for non-string values to ensure consistent cache keys\n    const valueKey = typeof value === \"string\" ? value : `[${typeof value}]`;\n    return `${CMIElement}:${valueKey}:${regexPattern}:${errorCode}:${allowEmptyString || false}`;\n  },\n);\n\n/**\n * Check if the value matches the proper range. If not, throw proper error code.\n *\n * @param {any} value\n * @param {string} rangePattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @return {boolean}\n */\nexport const checkValidRange = memoize(\n  (\n    CMIElement: string,\n    value: any,\n    rangePattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean => {\n    const ranges = rangePattern.split(\"#\");\n    value = value * 1.0;\n    if (value >= ranges[0]) {\n      if (ranges[1] === \"*\" || value <= ranges[1]) {\n        return true;\n      } else {\n        throw new errorClass(CMIElement, errorCode);\n      }\n    } else {\n      throw new errorClass(CMIElement, errorCode);\n    }\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, rangePattern, errorCode, _errorClass) =>\n    `${CMIElement}:${value}:${rangePattern}:${errorCode}`,\n);\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm12_errors.TYPE_MISMATCH,\n    Scorm12ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidRange(\n  CMIElement: string,\n  value: any,\n  rangePattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  if (!allowEmptyString && value === \"\") {\n    throw new Scorm12ValidationError(CMIElement, scorm12_errors.VALUE_OUT_OF_RANGE);\n  }\n\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm12_errors.VALUE_OUT_OF_RANGE,\n    Scorm12ValidationError,\n  );\n}\n","import { BaseScormValidationError } from \"../exceptions\";\nimport { checkValidFormat, checkValidRange } from \"../cmi/common/validation\";\nimport { check12ValidFormat, check12ValidRange } from \"../cmi/scorm12/validation\";\nimport { scorm12_regex } from \"../constants/regex\";\nimport { scorm12_errors } from \"../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../exceptions/scorm12_exceptions\";\n\n/**\n * Service for validating CMI data model properties\n */\nexport class ValidationService {\n  /**\n   * Validates a score property (raw, min, max)\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @param {string} decimalRegex - The regex pattern for decimal validation\n   * @param {string | false} scoreRange - The range pattern for score validation, or false if no range validation is needed\n   * @param {number} invalidTypeCode - The error code for invalid type\n   * @param {number} invalidRangeCode - The error code for invalid range\n   * @param {typeof BaseScormValidationError} errorClass - The error class to use for validation errors\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScore(\n    CMIElement: string,\n    value: string,\n    decimalRegex: string,\n    scoreRange: string | false,\n    invalidTypeCode: number,\n    invalidRangeCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean {\n    return (\n      checkValidFormat(CMIElement, value, decimalRegex, invalidTypeCode, errorClass) &&\n      (!scoreRange || checkValidRange(CMIElement, value, scoreRange, invalidRangeCode, errorClass))\n    );\n    // This line should never be reached due to exceptions being thrown\n  }\n\n  /**\n   * Validates a SCORM 1.2 audio property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Audio(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.audio_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 language property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Language(CMIElement: string, value: string): boolean {\n    return check12ValidFormat(CMIElement, value, scorm12_regex.CMIString256);\n  }\n\n  /**\n   * Validates a SCORM 1.2 speed property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Speed(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.speed_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 text property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Text(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.text_range)\n    );\n  }\n\n  /**\n   * Validates if a property is read-only\n   *\n   * @param {string} CMIElement\n   * @param {boolean} initialized - Whether the object is initialized\n   * @throws {BaseScormValidationError} - Throws an error if the object is initialized\n   */\n  validateReadOnly(CMIElement: string, initialized: boolean): void {\n    if (initialized) {\n      throw new Scorm12ValidationError(CMIElement, scorm12_errors.READ_ONLY_ELEMENT);\n    }\n  }\n}\n\n// Export a singleton instance of the ValidationService\nexport const validationService = new ValidationService();\n","import { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"./base_cmi\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { validationService } from \"../../services/ValidationService\";\n\n/**\n * Base class for cmi *.score objects\n */\nexport class CMIScore extends BaseCMI {\n  private readonly __children: string;\n  private readonly __score_range: string | false;\n  private readonly __invalid_error_code: number;\n  private readonly __invalid_type_code: number;\n  private readonly __invalid_range_code: number;\n  private readonly __decimal_regex: string;\n  private readonly __error_class: typeof BaseScormValidationError;\n  protected _raw = \"\";\n  protected _min = \"\";\n  protected _max: string;\n\n  /**\n   * Constructor for *.score\n   * @param {\n   *     score_children: string,\n   *     score_range: string,\n   *     max: string,\n   *     invalidErrorCode: number,\n   *     invalidTypeCode: number,\n   *     invalidRangeCode: number,\n   *     decimalRegex: string,\n   *     errorClass: typeof BaseScormValidationError\n   * } params\n   */\n  constructor(params: {\n    CMIElement: string;\n    score_children?: string;\n    score_range?: string;\n    max?: string;\n    invalidErrorCode?: number;\n    invalidTypeCode?: number;\n    invalidRangeCode?: number;\n    decimalRegex?: string;\n    errorClass: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n\n    this.__children = params.score_children || scorm12_constants.score_children;\n    this.__score_range = !params.score_range ? false : scorm12_regex.score_range;\n    this._max = params.max || params.max === \"\" ? params.max : \"100\";\n    this.__invalid_error_code = params.invalidErrorCode || scorm12_errors.INVALID_SET_VALUE;\n    this.__invalid_type_code = params.invalidTypeCode || scorm12_errors.TYPE_MISMATCH;\n    this.__invalid_range_code = params.invalidRangeCode || scorm12_errors.VALUE_OUT_OF_RANGE;\n    this.__decimal_regex = params.decimalRegex || scorm12_regex.CMIDecimal;\n    this.__error_class = params.errorClass;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this.__error_class(this._cmi_element + \"._children\", this.__invalid_error_code);\n  }\n\n  /**\n   * Getter for _raw\n   * @return {string}\n   */\n  get raw(): string {\n    return this._raw;\n  }\n\n  /**\n   * Setter for _raw\n   * @param {string} raw\n   */\n  set raw(raw: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".raw\",\n        raw,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._raw = raw;\n    }\n  }\n\n  /**\n   * Getter for _min\n   * @return {string}\n   */\n  get min(): string {\n    return this._min;\n  }\n\n  /**\n   * Setter for _min\n   * @param {string} min\n   */\n  set min(min: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".min\",\n        min,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._min = min;\n    }\n  }\n\n  /**\n   * Getter for _max\n   * @return {string}\n   */\n  get max(): string {\n    return this._max;\n  }\n\n  /**\n   * Setter for _max\n   * @param {string} max\n   */\n  set max(max: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".max\",\n        max,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._max = max;\n    }\n  }\n\n  /**\n   * toJSON for *.score\n   * @return {\n   *    {\n   *      min: string,\n   *      max: string,\n   *      raw: string\n   *    }\n   *    }\n   */\n  toJSON(): {\n    min: string;\n    max: string;\n    raw: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { check12ValidFormat } from \"../scorm12/validation\";\nimport * as Util from \"../../utilities\";\n\n/**\n * Class representing the `cmi.core` object\n * @extends BaseCMI\n */\nexport class CMICore extends BaseCMI {\n  /**\n   * Constructor for `cmi.core`\n   */\n  constructor() {\n    super(\"cmi.core\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.core.score\",\n      score_children: scorm12_constants.score_children,\n      score_range: scorm12_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n\n  public readonly score: CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  private __children = scorm12_constants.core_children;\n  private _student_id = \"\";\n  private _student_name = \"\";\n  private _lesson_location = \"\";\n  private _credit = \"\";\n  private _lesson_status = \"not attempted\";\n  private _entry = \"\";\n  private _total_time = \"\";\n  private _lesson_mode = \"normal\";\n  private _exit = \"\";\n  private _session_time = \"00:00:00\";\n  private _suspend_data = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._exit = \"\";\n    this._entry = \"\";\n\n    /**\n     * Resetting ensures we accurately track the time spent on each individual SCO session independently. Each new\n     * session should start from zero, so we can reset cmi.core.session_time at the beginning of each session.\n     */\n    this._session_time = \"00:00:00\";\n\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for _student_id\n   * @return {string}\n   */\n  get student_id(): string {\n    return this._student_id;\n  }\n\n  /**\n   * Setter for _student_id. Can only be called before  initialization.\n   * @param {string} student_id\n   */\n  set student_id(student_id: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".student_id\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._student_id = student_id;\n    }\n  }\n\n  /**\n   * Getter for _student_name\n   * @return {string}\n   */\n  get student_name(): string {\n    return this._student_name;\n  }\n\n  /**\n   * Setter for _student_name. Can only be called before  initialization.\n   * @param {string} student_name\n   */\n  set student_name(student_name: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".student_name\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._student_name = student_name;\n    }\n  }\n\n  /**\n   * Getter for _lesson_location\n   * @return {string}\n   */\n  get lesson_location(): string {\n    return this._lesson_location;\n  }\n\n  /**\n   * Setter for _lesson_location\n   * @param {string} lesson_location\n   */\n  set lesson_location(lesson_location: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".lesson_location\",\n        lesson_location,\n        scorm12_regex.CMIString256,\n        true,\n      )\n    ) {\n      this._lesson_location = lesson_location;\n    }\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this._credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before  initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".credit\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._credit = credit;\n    }\n  }\n\n  /**\n   * Getter for _lesson_status\n   * @return {string}\n   */\n  get lesson_status(): string {\n    return this._lesson_status;\n  }\n\n  /**\n   * Setter for _lesson_status\n   * @param {string} lesson_status\n   */\n  set lesson_status(lesson_status: string) {\n    if (this.initialized) {\n      if (\n        check12ValidFormat(\n          this._cmi_element + \".lesson_status\",\n          lesson_status,\n          scorm12_regex.CMIStatus,\n        )\n      ) {\n        this._lesson_status = lesson_status;\n      }\n    } else {\n      if (\n        check12ValidFormat(\n          this._cmi_element + \".lesson_status\",\n          lesson_status,\n          scorm12_regex.CMIStatus2,\n        )\n      ) {\n        this._lesson_status = lesson_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this._entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before  initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".entry\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._entry = entry;\n    }\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this._total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before  initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".total_time\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._total_time = total_time;\n    }\n  }\n\n  /**\n   * Getter for _lesson_mode\n   * @return {string}\n   */\n  get lesson_mode(): string {\n    return this._lesson_mode;\n  }\n\n  /**\n   * Setter for _lesson_mode. Can only be called before  initialization.\n   * @param {string} lesson_mode\n   */\n  set lesson_mode(lesson_mode: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".lesson_mode\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._lesson_mode = lesson_mode;\n    }\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".exit\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    if (check12ValidFormat(this._cmi_element + \".exit\", exit, scorm12_regex.CMIExit, true)) {\n      this._exit = exit;\n    }\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".session_time\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".session_time\",\n        session_time,\n        scorm12_regex.CMITimespan,\n      )\n    ) {\n      this._session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this._suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".suspend_data\",\n        suspend_data,\n        scorm12_regex.CMIString4096,\n        true,\n      )\n    ) {\n      this._suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   * @param {number} start_time\n   * @return {string}\n   */\n  getCurrentTotalTime(start_time: number | undefined): string {\n    let sessionTime = this._session_time;\n    const startTime = start_time;\n\n    if (typeof startTime !== \"undefined\" && startTime !== null) {\n      const seconds = new Date().getTime() - startTime;\n      sessionTime = Util.getSecondsAsHHMMSS(seconds / 1000);\n    }\n\n    return Util.addHHMMSSTimeStrings(\n      this._total_time,\n      sessionTime,\n      new RegExp(scorm12_regex.CMITimespan),\n    );\n  }\n\n  /**\n   * toJSON for cmi.core\n   *\n   * @return {\n   *    {\n   *      student_name: string,\n   *      entry: string,\n   *      exit: string,\n   *      score: CMIScore,\n   *      student_id: string,\n   *      lesson_mode: string,\n   *      lesson_location: string,\n   *      lesson_status: string,\n   *      credit: string,\n   *      session_time: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    student_name: string;\n    entry: string;\n    exit: string;\n    score: CMIScore;\n    student_id: string;\n    lesson_mode: string;\n    lesson_location: string;\n    lesson_status: string;\n    credit: string;\n    session_time: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      student_id: this.student_id,\n      student_name: this.student_name,\n      lesson_location: this.lesson_location,\n      credit: this.credit,\n      lesson_status: this.lesson_status,\n      entry: this.entry,\n      lesson_mode: this.lesson_mode,\n      exit: this.exit,\n      session_time: this.session_time,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"./base_cmi\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Base class for cmi *.n objects\n */\nexport class CMIArray extends BaseCMI {\n  private readonly _errorCode: number;\n  private readonly _errorClass: typeof BaseScormValidationError;\n  private readonly __children: string;\n  public childArray: any[];\n\n  /**\n   * Constructor cmi *.n arrays\n   * @param {object} params\n   */\n  constructor(params: {\n    CMIElement: string;\n    children: string;\n    errorCode?: number;\n    errorClass?: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n    this.__children = params.children;\n    this._errorCode = params.errorCode || scorm12_errors.GENERAL;\n    this._errorClass = params.errorClass || BaseScormValidationError;\n    this.childArray = [];\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(wipe: boolean = false): void {\n    this._initialized = false;\n    if (wipe) {\n      this.childArray = [];\n    } else {\n      // Reset all children\n      for (let i = 0; i < this.childArray.length; i++) {\n        this.childArray[i].reset();\n      }\n    }\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this._errorClass(this._cmi_element + \"._children\", this._errorCode);\n  }\n\n  /**\n   * Getter for _count\n   * @return {number}\n   */\n  get _count(): number {\n    return this.childArray.length;\n  }\n\n  /**\n   * Setter for _count. Just throws an error.\n   * @param {number} _count\n   */\n  set _count(_count: number) {\n    throw new this._errorClass(this._cmi_element + \"._count\", this._errorCode);\n  }\n\n  /**\n   * toJSON for *.n arrays\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result: { [key: string]: any } = {};\n    for (let i = 0; i < this.childArray.length; i++) {\n      result[i + \"\"] = this.childArray[i];\n    }\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { check12ValidFormat } from \"./validation\";\nimport { CMIArray } from \"../common/array\";\n\n/**\n * Class representing SCORM 1.2's `cmi.objectives` object\n * @extends CMIArray\n */\nexport class CMIObjectives extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives`\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.objectives\",\n      children: scorm12_constants.objectives_children,\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super(\"cmi.objectives.n\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.objectives.n.score\",\n      score_children: scorm12_constants.score_children,\n      score_range: scorm12_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n\n  public readonly score: CMIScore;\n\n  private _id = \"\";\n  private _status = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._id = \"\";\n    this._status = \"\";\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check12ValidFormat(this._cmi_element + \".id\", id, scorm12_regex.CMIIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _status\n   * @return {string}\n   */\n  get status(): string {\n    return this._status;\n  }\n\n  /**\n   * Setter for _status\n   * @param {string} status\n   */\n  set status(status: string) {\n    if (check12ValidFormat(this._cmi_element + \".status\", status, scorm12_regex.CMIStatus2)) {\n      this._status = status;\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   * @return {\n   *    {\n   *      id: string,\n   *      status: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    status: string;\n    score: CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      status: this.status,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { validationService } from \"../../services/ValidationService\";\n\n/**\n * Class representing the SCORM 1.2 cmi.student_data object\n * @extends BaseCMI\n */\nexport class CMIStudentData extends BaseCMI {\n  private readonly __children;\n  private _mastery_score = \"\";\n  private _max_time_allowed = \"\";\n  private _time_limit_action = \"\";\n\n  /**\n   * Constructor for cmi.student_data\n   * @param {string} student_data_children\n   */\n  constructor(student_data_children?: string) {\n    super(\"cmi.student_data\");\n    this.__children = student_data_children\n      ? student_data_children\n      : scorm12_constants.student_data_children;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for _master_score\n   * @return {string}\n   */\n  get mastery_score(): string {\n    return this._mastery_score;\n  }\n\n  /**\n   * Setter for _master_score. Can only be called before  initialization.\n   * @param {string} mastery_score\n   */\n  set mastery_score(mastery_score: string) {\n    validationService.validateReadOnly(this._cmi_element + \".mastery_score\", this.initialized);\n    this._mastery_score = mastery_score;\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this._max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before  initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    validationService.validateReadOnly(this._cmi_element + \".max_time_allowed\", this.initialized);\n    this._max_time_allowed = max_time_allowed;\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this._time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before  initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    validationService.validateReadOnly(this._cmi_element + \".time_limit_action\", this.initialized);\n    this._time_limit_action = time_limit_action;\n  }\n\n  /**\n   * toJSON for cmi.student_data\n   *\n   * @return {\n   *    {\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      mastery_score: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    mastery_score: string;\n    max_time_allowed: string;\n    time_limit_action: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      mastery_score: this.mastery_score,\n      max_time_allowed: this.max_time_allowed,\n      time_limit_action: this.time_limit_action,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { validationService } from \"../../services/ValidationService\";\n\n/**\n * Class representing the SCORM 1.2 cmi.student_preference object\n * @extends BaseCMI\n */\nexport class CMIStudentPreference extends BaseCMI {\n  private readonly __children;\n\n  /**\n   * Constructor for cmi.student_preference\n   * @param {string} student_preference_children\n   */\n  constructor(student_preference_children?: string) {\n    super(\"cmi.student_preference\");\n    this.__children = student_preference_children\n      ? student_preference_children\n      : scorm12_constants.student_preference_children;\n  }\n\n  private _audio = \"\";\n  private _language = \"\";\n  private _speed = \"\";\n  private _text = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for _audio\n   * @return {string}\n   */\n  get audio(): string {\n    return this._audio;\n  }\n\n  /**\n   * Setter for _audio\n   * @param {string} audio\n   */\n  set audio(audio: string) {\n    if (validationService.validateScorm12Audio(this._cmi_element + \".audio\", audio)) {\n      this._audio = audio;\n    }\n  }\n\n  /**\n   * Getter for _language\n   * @return {string}\n   */\n  get language(): string {\n    return this._language;\n  }\n\n  /**\n   * Setter for _language\n   * @param {string} language\n   */\n  set language(language: string) {\n    if (validationService.validateScorm12Language(this._cmi_element + \".language\", language)) {\n      this._language = language;\n    }\n  }\n\n  /**\n   * Getter for _speed\n   * @return {string}\n   */\n  get speed(): string {\n    return this._speed;\n  }\n\n  /**\n   * Setter for _speed\n   * @param {string} speed\n   */\n  set speed(speed: string) {\n    if (validationService.validateScorm12Speed(this._cmi_element + \".speed\", speed)) {\n      this._speed = speed;\n    }\n  }\n\n  /**\n   * Getter for _text\n   * @return {string}\n   */\n  get text(): string {\n    return this._text;\n  }\n\n  /**\n   * Setter for _text\n   * @param {string} text\n   */\n  set text(text: string) {\n    if (validationService.validateScorm12Text(this._cmi_element + \".text\", text)) {\n      this._text = text;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_preference\n   *\n   * @return {\n   *    {\n   *      audio: string,\n   *      language: string,\n   *      speed: string,\n   *      text: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    audio: string;\n    language: string;\n    speed: string;\n    text: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio: this.audio,\n      language: this.language,\n      speed: this.speed,\n      text: this.text,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check12ValidFormat, check12ValidRange } from \"./validation\";\nimport { scorm12_regex } from \"../../constants/regex\";\n\n/**\n * Class representing the SCORM 1.2 `cmi.interactions`\n * @extends CMIArray\n */\nexport class CMIInteractions extends CMIArray {\n  /**\n   * Constructor for `cmi.interactions`\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.interactions\",\n      children: scorm12_constants.interactions_children,\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n object\n   */\n  constructor() {\n    super(\"cmi.interactions.n\");\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: Scorm12ValidationError,\n      children: scorm12_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.correct_responses\",\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: Scorm12ValidationError,\n      children: scorm12_constants.correct_responses_children,\n    });\n  }\n\n  public readonly objectives: CMIArray;\n  public readonly correct_responses: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  private _id = \"\";\n  private _time = \"\";\n  private _type = \"\";\n  private _weighting = \"\";\n  private _student_response = \"\";\n  private _result = \"\";\n  private _latency = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n\n    this._id = \"\";\n    this._time = \"\";\n    this._type = \"\";\n    this._weighting = \"\";\n    this._student_response = \"\";\n    this._result = \"\";\n    this._latency = \"\";\n\n    this.objectives?.reset();\n    this.correct_responses?.reset();\n  }\n\n  /**\n   * Getter for _id. Should only be called during JSON export.\n   * @return {string}\n   */\n  get id(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".id\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check12ValidFormat(this._cmi_element + \".id\", id, scorm12_regex.CMIIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get time(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".time\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._time;\n  }\n\n  /**\n   * Setter for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (check12ValidFormat(this._cmi_element + \".time\", time, scorm12_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * Getter for _type. Should only be called during JSON export.\n   * @return {string}\n   */\n  get type(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".type\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._type;\n  }\n\n  /**\n   * Setter for _type\n   * @param {string} type\n   */\n  set type(type: string) {\n    if (check12ValidFormat(this._cmi_element + \".type\", type, scorm12_regex.CMIType)) {\n      this._type = type;\n    }\n  }\n\n  /**\n   * Getter for _weighting. Should only be called during JSON export.\n   * @return {string}\n   */\n  get weighting(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".weighting\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._weighting;\n  }\n\n  /**\n   * Setter for _weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting: string) {\n    if (\n      check12ValidFormat(this._cmi_element + \".weighting\", weighting, scorm12_regex.CMIDecimal) &&\n      check12ValidRange(this._cmi_element + \".weighting\", weighting, scorm12_regex.weighting_range)\n    ) {\n      this._weighting = weighting;\n    }\n  }\n\n  /**\n   * Getter for _student_response. Should only be called during JSON export.\n   * @return {string}\n   */\n  get student_response(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".student_response\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._student_response;\n  }\n\n  /**\n   * Setter for _student_response\n   * @param {string} student_response\n   */\n  set student_response(student_response: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".student_response\",\n        student_response,\n        scorm12_regex.CMIFeedback,\n        true,\n      )\n    ) {\n      this._student_response = student_response;\n    }\n  }\n\n  /**\n   * Getter for _result. Should only be called during JSON export.\n   * @return {string}\n   */\n  get result(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".result\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._result;\n  }\n\n  /**\n   * Setter for _result\n   * @param {string} result\n   */\n  set result(result: string) {\n    if (check12ValidFormat(this._cmi_element + \".result\", result, scorm12_regex.CMIResult)) {\n      this._result = result;\n    }\n  }\n\n  /**\n   * Getter for _latency. Should only be called during JSON export.\n   * @return {string}\n   */\n  get latency(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".latency\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._latency;\n  }\n\n  /**\n   * Setter for _latency\n   * @param {string} latency\n   */\n  set latency(latency: string) {\n    if (check12ValidFormat(this._cmi_element + \".latency\", latency, scorm12_regex.CMITimespan)) {\n      this._latency = latency;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      time: string,\n   *      type: string,\n   *      weighting: string,\n   *      student_response: string,\n   *      result: string,\n   *      latency: string,\n   *      objectives: CMIArray,\n   *      correct_responses: CMIArray\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    time: string;\n    type: string;\n    weighting: string;\n    student_response: string;\n    result: string;\n    latency: string;\n    objectives: CMIArray;\n    correct_responses: CMIArray;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      time: this.time,\n      type: this.type,\n      weighting: this.weighting,\n      student_response: this.student_response,\n      result: this.result,\n      latency: this.latency,\n      objectives: this.objectives,\n      correct_responses: this.correct_responses,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n.objectives.n\");\n  }\n\n  private _id = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._id = \"\";\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check12ValidFormat(this._cmi_element + \".id\", id, scorm12_regex.CMIIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.correct_responses.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.correct_responses.n\n   */\n  constructor() {\n    super(\"cmi.interactions.correct_responses.n\");\n  }\n\n  private _pattern = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._pattern = \"\";\n  }\n\n  /**\n   * Getter for _pattern\n   * @return {string}\n   */\n  get pattern(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".pattern\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._pattern;\n  }\n\n  /**\n   * Setter for _pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern: string) {\n    if (\n      check12ValidFormat(this._cmi_element + \".pattern\", pattern, scorm12_regex.CMIFeedback, true)\n    ) {\n      this._pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.correct_responses.n\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    pattern: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      pattern: this._pattern,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { BaseRootCMI } from \"../common/base_cmi\";\nimport { check12ValidFormat } from \"./validation\";\nimport { CMICore } from \"../aicc/core\";\nimport { CMIObjectives } from \"./objectives\";\nimport { CMIStudentData } from \"./student_data\";\nimport { CMIStudentPreference } from \"./student_preference\";\nimport { CMIInteractions } from \"./interactions\";\n\n/**\n * Class representing the cmi object for SCORM 1.2\n */\nexport class CMI extends BaseRootCMI {\n  private readonly __children: string = \"\";\n  private __version: string = \"3.4\";\n  private _launch_data: string = \"\";\n  private _comments: string = \"\";\n  private _comments_from_lms: string = \"\";\n\n  /**\n   * Constructor for the SCORM 1.2 cmi object\n   * @param {string} cmi_children\n   * @param {(CMIStudentData|AICCCMIStudentData)} student_data\n   * @param {boolean} initialized\n   */\n  constructor(cmi_children?: string, student_data?: CMIStudentData, initialized?: boolean) {\n    super(\"cmi\");\n    if (initialized) this.initialize();\n    this.__children = cmi_children ? cmi_children : scorm12_constants.cmi_children;\n    this.core = new CMICore();\n    this.objectives = new CMIObjectives();\n    this.student_data = student_data ? student_data : new CMIStudentData();\n    this.student_preference = new CMIStudentPreference();\n    this.interactions = new CMIInteractions();\n  }\n\n  public core: CMICore;\n  public objectives: CMIObjectives;\n  public student_data: CMIStudentData;\n  public student_preference: CMIStudentPreference;\n  public interactions: CMIInteractions;\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._launch_data = \"\";\n    this._comments = \"\";\n    this.core?.reset();\n    this.objectives = new CMIObjectives();\n    this.interactions = new CMIInteractions();\n    this.student_data?.reset();\n    this.student_preference?.reset();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.core?.initialize();\n    this.objectives?.initialize();\n    this.student_data?.initialize();\n    this.student_preference?.initialize();\n    this.interactions?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions\n   *    }\n   *  }\n   */\n  toJSON(): {\n    suspend_data: string;\n    launch_data: string;\n    comments: string;\n    comments_from_lms: string;\n    core: CMICore;\n    objectives: CMIObjectives;\n    student_data: CMIStudentData;\n    student_preference: CMIStudentPreference;\n    interactions: CMIInteractions;\n  } {\n    this.jsonString = true;\n    const result = {\n      suspend_data: this.suspend_data,\n      launch_data: this.launch_data,\n      comments: this.comments,\n      comments_from_lms: this.comments_from_lms,\n      core: this.core,\n      objectives: this.objectives,\n      student_data: this.student_data,\n      student_preference: this.student_preference,\n      interactions: this.interactions,\n    };\n    this.jsonString = false;\n    return result;\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   */\n  get _version(): string {\n    return this.__version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._version\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this.core?.suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (this.core) {\n      this.core.suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this._launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before  initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".launch_data\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._launch_data = launch_data;\n    }\n  }\n\n  /**\n   * Getter for _comments\n   * @return {string}\n   */\n  get comments(): string {\n    return this._comments;\n  }\n\n  /**\n   * Setter for _comments\n   * @param {string} comments\n   */\n  set comments(comments: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".comments\",\n        comments,\n        scorm12_regex.CMIString4096,\n        true,\n      )\n    ) {\n      this._comments = comments;\n    }\n  }\n\n  /**\n   * Getter for _comments_from_lms\n   * @return {string}\n   */\n  get comments_from_lms(): string {\n    return this._comments_from_lms;\n  }\n\n  /**\n   * Setter for _comments_from_lms. Can only be called before  initialization.\n   * @param {string} comments_from_lms\n   */\n  set comments_from_lms(comments_from_lms: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".comments_from_lms\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._comments_from_lms = comments_from_lms;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string}\n   */\n  getCurrentTotalTime(): string {\n    return this.core.getCurrentTotalTime(this.start_time);\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { check12ValidFormat } from \"./validation\";\nimport { scorm12_regex } from \"../../constants/regex\";\n\n/**\n * Class for AICC Navigation object\n */\nexport class NAV extends BaseCMI {\n  /**\n   * Constructor for NAV object\n   */\n  constructor() {\n    super(\"cmi.nav\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._event = \"\";\n    this._initialized = false;\n  }\n\n  private _event = \"\";\n\n  /**\n   * Getter for _event\n   * @return {string}\n   */\n  get event(): string {\n    return this._event;\n  }\n\n  /**\n   * Setter for _event\n   * @param {string} event\n   */\n  set event(event: string) {\n    if (\n      event === \"\" ||\n      check12ValidFormat(this._cmi_element + \".event\", event, scorm12_regex.NAVEvent)\n    ) {\n      this._event = event;\n    }\n  }\n\n  /**\n   * toJSON for nav object\n   * @return {\n   *    {\n   *      event: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    event: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      event: this.event,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","// Using plain objects instead of enums for better compatibility with strip-only mode\n// This approach avoids TypeScript enum runtime code while maintaining the same API\n\n// NAVBoolean values\nexport const NAVBoolean = {\n  UNKNOWN: \"unknown\",\n  TRUE: \"true\",\n  FALSE: \"false\",\n};\n\n// Type for NAVBoolean values\nexport type NAVBoolean = (typeof NAVBoolean)[keyof typeof NAVBoolean];\n\n// SuccessStatus values\nexport const SuccessStatus = {\n  PASSED: \"passed\",\n  FAILED: \"failed\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for SuccessStatus values\nexport type SuccessStatus = (typeof SuccessStatus)[keyof typeof SuccessStatus];\n\n// CompletionStatus values\nexport const CompletionStatus = {\n  COMPLETED: \"completed\",\n  INCOMPLETE: \"incomplete\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for CompletionStatus values\nexport type CompletionStatus = (typeof CompletionStatus)[keyof typeof CompletionStatus];\n\n// LogLevelEnum values\nexport const LogLevelEnum = {\n  _: 0,\n  DEBUG: 1,\n  INFO: 2,\n  WARN: 3,\n  ERROR: 4,\n  NONE: 5,\n};\n\n// Type for LogLevelEnum values\nexport type LogLevelEnum = (typeof LogLevelEnum)[keyof typeof LogLevelEnum];\n","import { InternalSettings, LogLevel, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"./api_constants\";\nimport { LogLevelEnum } from \"./enums\";\n\n/**\n * Default settings for the SCORM API\n */\nexport const DefaultSettings: InternalSettings = {\n  autocommit: false,\n  autocommitSeconds: 10,\n  asyncCommit: false,\n  sendFullCommit: true,\n  lmsCommitUrl: false,\n  dataCommitFormat: \"json\",\n  commitRequestDataType: \"application/json;charset=UTF-8\",\n  autoProgress: false,\n  logLevel: LogLevelEnum.ERROR,\n  selfReportSessionTime: false,\n  alwaysSendTotalTime: false,\n  renderCommonCommitFields: false,\n  strict_errors: true,\n  xhrHeaders: {},\n  xhrWithCredentials: false,\n  fetchMode: \"cors\",\n  useBeaconInsteadOfFetch: \"never\",\n  responseHandler: async function (response: Response): Promise<ResultObject> {\n    if (typeof response !== \"undefined\") {\n      let httpResult = null;\n\n      // Handle both text() and json() response methods\n      try {\n        if (typeof response.json === \"function\") {\n          // Try to get JSON directly if the method exists\n          httpResult = await response.json();\n        } else if (typeof response.text === \"function\") {\n          // Fall back to text() if json() is not available\n          const responseText = await response.text();\n          if (responseText) {\n            httpResult = JSON.parse(responseText);\n          }\n        }\n      } catch (e) {\n        // If parsing fails, continue with null httpResult\n      }\n\n      if (httpResult === null || !{}.hasOwnProperty.call(httpResult, \"result\")) {\n        if (response.status === 200) {\n          return {\n            result: global_constants.SCORM_TRUE,\n            errorCode: 0,\n          };\n        } else {\n          return {\n            result: global_constants.SCORM_FALSE,\n            errorCode: 101,\n          };\n        }\n      } else {\n        return {\n          result: httpResult.result,\n          errorCode: httpResult.errorCode\n            ? httpResult.errorCode\n            : httpResult.result === global_constants.SCORM_TRUE\n              ? 0\n              : 101,\n        };\n      }\n    }\n    return {\n      result: global_constants.SCORM_FALSE,\n      errorCode: 101,\n    };\n  },\n  requestHandler: function (commitObject) {\n    return commitObject;\n  },\n  onLogMessage: defaultLogHandler,\n  scoItemIds: [],\n  scoItemIdValidator: false,\n  globalObjectiveIds: [],\n\n  // Offline support settings\n  enableOfflineSupport: false,\n  courseId: \"\",\n  syncOnInitialize: true,\n  syncOnTerminate: true,\n  maxSyncAttempts: 5,\n};\n\nexport function defaultLogHandler(messageLevel: LogLevel, logMessage: string): void {\n  switch (messageLevel) {\n    case \"4\":\n    case 4:\n    case \"ERROR\":\n    case LogLevelEnum.ERROR:\n      console.error(logMessage);\n      break;\n    case \"3\":\n    case 3:\n    case \"WARN\":\n    case LogLevelEnum.WARN:\n      console.warn(logMessage);\n      break;\n    case \"2\":\n    case 2:\n    case \"INFO\":\n    case LogLevelEnum.INFO:\n      console.info(logMessage);\n      break;\n    case \"1\":\n    case 1:\n    case \"DEBUG\":\n    case LogLevelEnum.DEBUG:\n      if (console.debug) {\n        console.debug(logMessage);\n      } else {\n        console.log(logMessage);\n      }\n      break;\n  }\n}\n","import BaseAPI from \"../BaseAPI\";\n\n/**\n * Private class that wraps a timeout call to the commit() function\n */\nexport class ScheduledCommit {\n  private _API;\n  private _cancelled = false;\n  private readonly _timeout;\n  private readonly _callback;\n\n  /**\n   * Constructor for ScheduledCommit\n   * @param {BaseAPI} API\n   * @param {number} when\n   * @param {string} callback\n   */\n  constructor(API: BaseAPI, when: number, callback: string) {\n    this._API = API;\n    this._timeout = setTimeout(this.wrapper.bind(this), when);\n    this._callback = callback;\n  }\n\n  /**\n   * Cancel any currently scheduled commit\n   */\n  cancel() {\n    this._cancelled = true;\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n  }\n\n  /**\n   * Wrap the API commit call to check if the call has already been cancelled\n   */\n  wrapper() {\n    if (!this._cancelled) {\n      (async () => await this._API.commit(this._callback))();\n    }\n  }\n}\n","import { CommitObject, InternalSettings, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { IHttpService } from \"../interfaces/services\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { StringKeyMap } from \"../utilities\";\n\n/**\n * Service for handling HTTP communication with the LMS\n */\nexport class HttpService implements IHttpService {\n  private settings: InternalSettings;\n  private error_codes: ErrorCode;\n\n  /**\n   * Constructor for HttpService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   */\n  constructor(settings: InternalSettings, error_codes: ErrorCode) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n  }\n\n  /**\n   * Sends HTTP requests to the LMS with special handling for immediate and standard requests.\n   *\n   * This method handles communication with the LMS server, implementing two distinct\n   * request handling strategies based on the context:\n   *\n   * 1. Immediate Mode (used during termination):\n   *    When immediate=true, the method:\n   *    - Initiates the fetch request but doesn't wait for it to complete\n   *    - Returns a success result immediately\n   *    - Processes the response asynchronously when it arrives\n   *\n   *    This is critical for browser compatibility during page unload/termination,\n   *    as some browsers (especially Chrome) may cancel synchronous or awaited\n   *    requests when a page is closing.\n   *\n   * 2. Standard Mode (normal operation):\n   *    When immediate=false, the method:\n   *    - Processes the request parameters through the configured requestHandler\n   *    - Awaits the fetch response completely\n   *    - Transforms the response using the configured responseHandler\n   *    - Triggers appropriate event listeners based on success/failure\n   *    - Returns the complete result with appropriate error codes\n   *\n   * The method also includes error handling to catch network failures or other\n   * exceptions that might occur during the request process.\n   *\n   * @param {string} url - The URL endpoint to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The data to send to the LMS\n   * @param {boolean} immediate - Whether to send the request immediately without waiting (true) or process normally (false)\n   * @param {Function} apiLog - Function to log API messages with appropriate levels\n   * @param {Function} processListeners - Function to trigger event listeners for commit events\n   * @return {Promise<ResultObject>} - A promise that resolves with the result of the request\n   *\n   * @example\n   * // Standard request (waits for response)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   false,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   *\n   * @example\n   * // Immediate request (for termination)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   true,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   * // result will be success immediately, regardless of actual HTTP result\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n    apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    const genericError: ResultObject = {\n      result: global_constants.SCORM_FALSE,\n      errorCode: this.error_codes.GENERAL,\n    };\n\n    // if we are terminating the module or closing the browser window/tab, we need to make this fetch ASAP.\n    // Some browsers, especially Chrome, do not like synchronous requests to be made when the window is closing.\n    if (immediate) {\n      // Use Beacon API for final commit if specified in settings\n      if (this.settings.useBeaconInsteadOfFetch !== \"never\") {\n        const body = params instanceof Array ? params.join(\"&\") : JSON.stringify(params);\n        const contentType =\n          params instanceof Array\n            ? \"application/x-www-form-urlencoded\"\n            : this.settings.commitRequestDataType;\n\n        // Send the beacon request directly without waiting for response\n        navigator.sendBeacon(url, new Blob([body], { type: contentType }));\n      } else {\n        // Use regular fetch with keepalive\n        this.performFetch(url, params).then(async (response) => {\n          await this.transformResponse(response, processListeners);\n        });\n      }\n\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    }\n\n    const process = async (\n      url: string,\n      params: CommitObject | StringKeyMap | Array<any>,\n      settings: InternalSettings,\n    ): Promise<ResultObject> => {\n      try {\n        params = settings.requestHandler(params) as CommitObject | StringKeyMap | Array<any>;\n        const response = await this.performFetch(url, params);\n\n        return this.transformResponse(response, processListeners);\n      } catch (e) {\n        apiLog(\"processHttpRequest\", e, LogLevelEnum.ERROR);\n        processListeners(\"CommitError\");\n        return genericError;\n      }\n    };\n\n    return await process(url, params, this.settings);\n  }\n\n  /**\n   * Perform the fetch request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - The response from the LMS\n   * @private\n   */\n  private async performFetch(url: string, params: StringKeyMap | Array<any>): Promise<Response> {\n    // Use Beacon API if specified in settings\n    if (this.settings.useBeaconInsteadOfFetch === \"always\") {\n      return this.performBeacon(url, params);\n    }\n\n    const init = {\n      method: \"POST\",\n      mode: this.settings.fetchMode,\n      body: params instanceof Array ? params.join(\"&\") : JSON.stringify(params),\n      headers: {\n        ...this.settings.xhrHeaders,\n        \"Content-Type\": this.settings.commitRequestDataType,\n      },\n      keepalive: true,\n    } as RequestInit;\n\n    if (this.settings.xhrWithCredentials) {\n      init.credentials = \"include\";\n    }\n\n    return fetch(url, init);\n  }\n\n  /**\n   * Perform the beacon request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - A promise that resolves with a mock Response object\n   * @private\n   */\n  private async performBeacon(url: string, params: StringKeyMap | Array<any>): Promise<Response> {\n    const body = params instanceof Array ? params.join(\"&\") : JSON.stringify(params);\n    const contentType =\n      params instanceof Array\n        ? \"application/x-www-form-urlencoded\"\n        : this.settings.commitRequestDataType;\n\n    // Send the beacon request\n    const beaconSuccess = navigator.sendBeacon(url, new Blob([body], { type: contentType }));\n\n    // Create a mock Response object since sendBeacon doesn't return a Response\n    return Promise.resolve({\n      status: beaconSuccess ? 200 : 0,\n      ok: beaconSuccess,\n      json: async () => ({\n        result: beaconSuccess ? \"true\" : \"false\",\n        errorCode: beaconSuccess ? 0 : this.error_codes.GENERAL,\n      }),\n      text: async () =>\n        JSON.stringify({\n          result: beaconSuccess ? \"true\" : \"false\",\n          errorCode: beaconSuccess ? 0 : this.error_codes.GENERAL,\n        }),\n    } as Response);\n  }\n\n  /**\n   * Transforms the response from the LMS to a ResultObject\n   * @param {Response} response - The response from the LMS\n   * @param {Function} processListeners - Function to process event listeners\n   * @return {Promise<ResultObject>} - The transformed response\n   * @private\n   */\n  private async transformResponse(\n    response: Response,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    const result =\n      typeof this.settings.responseHandler === \"function\"\n        ? await this.settings.responseHandler(response)\n        : await response.json();\n\n    if (\n      response.status >= 200 &&\n      response.status <= 299 &&\n      (result.result === true || result.result === global_constants.SCORM_TRUE)\n    ) {\n      processListeners(\"CommitSuccess\");\n      if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n        result.errorCode = 0;\n      }\n    } else {\n      if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n        result.errorCode = this.error_codes.GENERAL;\n      }\n      processListeners(\"CommitError\", undefined, result.errorCode);\n    }\n    return result;\n  }\n\n  /**\n   * Updates the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: InternalSettings): void {\n    this.settings = settings;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { stringMatches } from \"../utilities\";\nimport { IEventService } from \"../interfaces/services\";\n\n/**\n * Interface for a listener object\n */\ninterface Listener {\n  functionName: string;\n  CMIElement: string | null;\n  callback: Function;\n}\n\n/**\n * Type for parsed listener information\n */\ninterface ParsedListener {\n  functionName: string;\n  CMIElement: string | null;\n}\n\n/**\n * Service for handling event listeners and event processing\n */\nexport class EventService implements IEventService {\n  // Map of function names to listeners for faster lookups\n  private listenerMap: Map<string, Listener[]> = new Map();\n  // Total count of listeners for logging\n  private listenerCount = 0;\n  // Function to log API messages\n  private readonly apiLog: (\n    functionName: string,\n    message: string,\n    messageLevel: LogLevel,\n    CMIElement?: string,\n  ) => void;\n\n  /**\n   * Constructor for EventService\n   * @param {Function} apiLog - Function to log API messages\n   */\n  constructor(\n    apiLog: (\n      functionName: string,\n      message: string,\n      messageLevel: LogLevel,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.apiLog = apiLog;\n  }\n\n  /**\n   * Parses a listener name into its components\n   *\n   * @param {string} listenerName - The name of the listener\n   * @returns {ParsedListener|null} - The parsed listener information or null if invalid\n   */\n  private parseListenerName(listenerName: string): ParsedListener | null {\n    const listenerSplit = listenerName.split(\".\");\n    if (listenerSplit.length === 0) return null;\n\n    const functionName = listenerSplit[0];\n    let CMIElement = null;\n\n    if (listenerSplit.length > 1) {\n      CMIElement = listenerName.replace(`${functionName}.`, \"\");\n    }\n\n    return { functionName, CMIElement };\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener\n   * @param {Function} callback - The callback function to execute when the event occurs\n   */\n  on(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get or create the array for this function name\n      const listeners = this.listenerMap.get(functionName) ?? [];\n\n      // Add the new listener\n      listeners.push({\n        functionName,\n        CMIElement,\n        callback,\n      });\n\n      // Update the map and count\n      this.listenerMap.set(functionName, listeners);\n      this.listenerCount++;\n\n      this.apiLog(\n        \"on\",\n        `Added event listener: ${this.listenerCount}`,\n        LogLevelEnum.INFO,\n        functionName,\n      );\n    }\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener\n   *\n   * @param {string} listenerName - The name of the listener to remove\n   * @param {Function} callback - The callback function to remove\n   */\n  off(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get the listeners for this function name\n      const listeners = this.listenerMap.get(functionName);\n      if (!listeners) continue;\n\n      // Find the index of the listener to remove\n      const removeIndex = listeners.findIndex(\n        (obj) => obj.CMIElement === CMIElement && obj.callback === callback,\n      );\n\n      if (removeIndex !== -1) {\n        // Remove the listener\n        listeners.splice(removeIndex, 1);\n        this.listenerCount--;\n\n        // Update the map or remove the entry if empty\n        if (listeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, listeners);\n        }\n\n        this.apiLog(\n          \"off\",\n          `Removed event listener: ${this.listenerCount}`,\n          LogLevelEnum.INFO,\n          functionName,\n        );\n      }\n    }\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener to clear\n   */\n  clear(listenerName: string) {\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // If we have listeners for this function name\n      if (this.listenerMap.has(functionName)) {\n        const listeners = this.listenerMap.get(functionName)!;\n\n        // Filter out listeners that match the criteria\n        const newListeners = listeners.filter((obj) => obj.CMIElement !== CMIElement);\n\n        // Update the count and map\n        this.listenerCount -= listeners.length - newListeners.length;\n\n        if (newListeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, newListeners);\n        }\n      }\n    }\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created\n   *\n   * @param {string} functionName - The name of the function that triggered the event\n   * @param {string} CMIElement - The CMI element that was affected\n   * @param {any} value - The value that was set\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this.apiLog(functionName, value, LogLevelEnum.INFO, CMIElement);\n\n    // Get listeners for this function name\n    const listeners = this.listenerMap.get(functionName);\n    if (!listeners) return;\n\n    for (const listener of listeners) {\n      const listenerHasCMIElement = !!listener.CMIElement;\n      let CMIElementsMatch = false;\n\n      // Check if CMI elements match\n      if (CMIElement && listener.CMIElement) {\n        if (listener.CMIElement.endsWith(\"*\")) {\n          // For wildcard matches, check if the CMI element starts with the prefix\n          const prefix = listener.CMIElement.slice(0, -1);\n          CMIElementsMatch = CMIElement.startsWith(prefix);\n        } else {\n          // For exact matches, compare the strings directly\n          CMIElementsMatch = listener.CMIElement === CMIElement;\n        }\n      }\n\n      // If the listener matches, call the callback\n      if (!listenerHasCMIElement || CMIElementsMatch) {\n        this.apiLog(\n          \"processListeners\",\n          `Processing listener: ${listener.functionName}`,\n          LogLevelEnum.DEBUG,\n          CMIElement,\n        );\n\n        // Handle special event types\n        if (functionName.startsWith(\"Sequence\")) {\n          // For sequence events, pass the target as the first argument\n          listener.callback(value);\n        } else if (functionName === \"CommitError\") {\n          // For commit error events, pass the error code\n          listener.callback(value);\n        } else if (functionName === \"CommitSuccess\") {\n          // For commit success events, pass no arguments\n          listener.callback();\n        } else {\n          // For regular events, pass CMIElement and value\n          listener.callback(CMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Resets the event service by clearing all listeners\n   */\n  reset() {\n    this.listenerMap.clear();\n    this.listenerCount = 0;\n  }\n}\n","import { CommitObject, LogLevel } from \"../types/api_types\";\nimport { StringKeyMap, unflatten } from \"../utilities\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { BaseCMI } from \"../cmi/common/base_cmi\";\nimport { ISerializationService } from \"../interfaces/services\";\n\n/**\n * Service for handling data serialization and deserialization in scorm-again\n */\nexport class SerializationService implements ISerializationService {\n  /**\n   * Loads CMI data from a flattened JSON object with special handling for arrays and ordering.\n   *\n   * This method implements a complex algorithm for loading flattened JSON data into the CMI\n   * object structure. It handles several key challenges:\n   *\n   * 1. Ordering dependencies: Some CMI elements (like interactions and objectives) must be\n   *    loaded in a specific order to ensure proper initialization.\n   *\n   * 2. Array handling: Interactions and objectives are stored as arrays, and their properties\n   *    must be loaded in the correct order (e.g., 'id' and 'type' must be set before other properties).\n   *\n   * 3. Unflattening: The method converts flattened dot notation (e.g., \"cmi.objectives.0.id\")\n   *    back into nested objects before loading.\n   *\n   * The algorithm works by:\n   * - Categorizing keys into interactions, objectives, and other properties\n   * - Sorting interactions to prioritize 'id' and 'type' fields within each index\n   * - Sorting objectives to prioritize 'id' fields within each index\n   * - Processing each category in order: interactions, objectives, then other properties\n   *\n   * @param {StringKeyMap} json - The flattened JSON object with dot notation keys\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   *\n   * @param setStartingData\n   * @example\n   * // Example of flattened JSON input:\n   * // {\n   * //   \"cmi.objectives.0.id\": \"obj1\",\n   * //   \"cmi.objectives.0.score.raw\": \"80\",\n   * //   \"cmi.interactions.0.id\": \"int1\",\n   * //   \"cmi.interactions.0.type\": \"choice\",\n   * //   \"cmi.interactions.0.result\": \"correct\"\n   * // }\n   */\n  loadFromFlattenedJSON(\n    json: StringKeyMap,\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromFlattenedJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    const int_pattern = /^(cmi\\.interactions\\.)(\\d+)\\.(.*)$/;\n    const obj_pattern = /^(cmi\\.objectives\\.)(\\d+)\\.(.*)$/;\n\n    // Extract and categorize keys for better sorting\n    const interactions: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const objectives: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const others: { key: string; value: any }[] = [];\n\n    // Categorize keys\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key)) {\n        const intMatch = key.match(int_pattern);\n        if (intMatch) {\n          interactions.push({\n            key,\n            value: json[key],\n            index: Number(intMatch[2]),\n            field: intMatch[3],\n          });\n          continue;\n        }\n\n        const objMatch = key.match(obj_pattern);\n        if (objMatch) {\n          objectives.push({\n            key,\n            value: json[key],\n            index: Number(objMatch[2]),\n            field: objMatch[3],\n          });\n          continue;\n        }\n\n        others.push({ key, value: json[key] });\n      }\n    }\n\n    // Sort interactions: first by index, then prioritize 'id' and 'type' fields\n    interactions.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id and type\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n      if (a.field === \"type\") return -1;\n      if (b.field === \"type\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort objectives: first by index, then prioritize 'id' field\n    objectives.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort other keys alphabetically\n    others.sort((a, b) => a.key.localeCompare(b.key));\n\n    // Process all items in the correct order\n    const processItems = (items: { key: string; value: any }[]) => {\n      items.forEach((item) => {\n        const obj: StringKeyMap = {};\n        obj[item.key] = item.value;\n        this.loadFromJSON(\n          unflatten(obj) as StringKeyMap,\n          CMIElement,\n          setCMIValue,\n          isNotInitialized,\n          setStartingData,\n        );\n      });\n    };\n\n    // Process in order: interactions, objectives, others\n    processItems(interactions);\n    processItems(objectives);\n    processItems(others);\n  }\n\n  /**\n   * Loads CMI data from a nested JSON object with recursive traversal.\n   *\n   * This method implements a recursive algorithm for loading nested JSON data into the CMI\n   * object structure. It handles several key aspects:\n   *\n   * 1. Recursive traversal: The method recursively traverses the nested JSON structure,\n   *    building CMI element paths as it goes (e.g., \"cmi.core.student_id\").\n   *\n   * 2. Type-specific handling: Different data types are handled differently:\n   *    - Arrays: Each array element is processed individually with its index in the path\n   *    - Objects: Recursively processed with updated path\n   *    - Primitives: Set directly using setCMIValue\n   *\n   * 3. Initialization check: Ensures the method is only called before API initialization\n   *\n   * 4. Starting data storage: Stores the original JSON data for potential future use\n   *\n   * The algorithm works by:\n   * - First storing the complete JSON object via setStartingData\n   * - Iterating through each property in the JSON object\n   * - For each property, determining its type and handling it accordingly\n   * - Building the CMI element path as it traverses the structure\n   * - Setting values at the appropriate paths using setCMIValue\n   *\n   * @param {{[key: string]: any}} json - The nested JSON object to load\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value at a specific path\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   * @param {Function} setStartingData - Function to store the original JSON data\n   *\n   * @example\n   * // Example of nested JSON input:\n   * // {\n   * //   \"core\": {\n   * //     \"student_id\": \"12345\",\n   * //     \"student_name\": \"John Doe\"\n   * //   },\n   * //   \"objectives\": [\n   * //     { \"id\": \"obj1\", \"score\": { \"raw\": 80 } },\n   * //     { \"id\": \"obj2\", \"score\": { \"raw\": 90 } }\n   * //   ]\n   * // }\n   */\n  loadFromJSON(\n    json: { [key: string]: any },\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    CMIElement = CMIElement !== undefined ? CMIElement : \"cmi\";\n\n    setStartingData(json);\n\n    // could this be refactored down to flatten(json) then setCMIValue on each?\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key) && json[key]) {\n        const currentCMIElement = (CMIElement ? CMIElement + \".\" : \"\") + key;\n        const value = json[key];\n\n        if (value.constructor === Array) {\n          for (let i = 0; i < value.length; i++) {\n            if (value[i]) {\n              const item = value[i];\n              const tempCMIElement = `${currentCMIElement}.${i}`;\n\n              if (item.constructor === Object) {\n                this.loadFromJSON(\n                  item,\n                  tempCMIElement,\n                  setCMIValue,\n                  isNotInitialized,\n                  setStartingData,\n                );\n              } else {\n                setCMIValue(tempCMIElement, item);\n              }\n            }\n          }\n        } else if (value.constructor === Object) {\n          this.loadFromJSON(\n            value,\n            currentCMIElement,\n            setCMIValue,\n            isNotInitialized,\n            setStartingData,\n          );\n        } else {\n          setCMIValue(currentCMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Render the CMI object to JSON for sending to an LMS.\n   *\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {string}\n   */\n  renderCMIToJSONString(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): string {\n    // Do we want/need to return fields that have no set value?\n    if (sendFullCommit) {\n      return JSON.stringify({ cmi });\n    }\n    return JSON.stringify({ cmi }, (k, v) => (v === undefined ? null : v), 2);\n  }\n\n  /**\n   * Returns a JS object representing the current cmi\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {object}\n   */\n  renderCMIToJSONObject(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): StringKeyMap {\n    // Revert to the original implementation to maintain compatibility with tests\n    return JSON.parse(this.renderCMIToJSONString(cmi, sendFullCommit));\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} alwaysSendTotalTime - Whether to always send total time\n   * @param {boolean|Function} renderCommonCommitFields - Whether to render common commit fields\n   * @param {Function} renderCommitObject - Function to render commit object\n   * @param {Function} renderCommitCMI - Function to render commit CMI\n   * @param {LogLevel} apiLogLevel - The API log level\n   * @return {CommitObject|StringKeyMap|Array<any>}\n   */\n  getCommitObject(\n    terminateCommit: boolean,\n    alwaysSendTotalTime: boolean,\n    renderCommonCommitFields: boolean | ((commitObject: CommitObject) => boolean),\n    renderCommitObject: (terminateCommit: boolean) => CommitObject,\n    renderCommitCMI: (terminateCommit: boolean) => StringKeyMap | Array<any>,\n    apiLogLevel: LogLevel,\n  ): CommitObject | StringKeyMap | Array<any> {\n    const shouldTerminateCommit = terminateCommit || alwaysSendTotalTime;\n    const commitObject = renderCommonCommitFields\n      ? renderCommitObject(shouldTerminateCommit)\n      : renderCommitCMI(shouldTerminateCommit);\n\n    if ([LogLevelEnum.DEBUG, \"1\", 1, \"DEBUG\"].includes(apiLogLevel)) {\n      console.debug(\"Commit (terminated: \" + (terminateCommit ? \"yes\" : \"no\") + \"): \");\n      console.debug(commitObject);\n    }\n    return commitObject;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ILoggingService } from \"../interfaces/services\";\nimport { defaultLogHandler } from \"../constants/default_settings\";\n\n/**\n * Centralized logging service implemented as a singleton\n * Provides methods for logging at different levels and configuring the log level\n */\nexport class LoggingService implements ILoggingService {\n  private static _instance: LoggingService;\n  private _logLevel: LogLevel = LogLevelEnum.ERROR;\n  private _logHandler: (messageLevel: LogLevel, logMessage: string) => void;\n\n  /**\n   * Private constructor to prevent direct instantiation\n   */\n  private constructor() {\n    // Default log handler uses console methods based on log level\n    this._logHandler = defaultLogHandler;\n  }\n\n  /**\n   * Get the singleton instance of LoggingService\n   *\n   * @returns {LoggingService} The singleton instance\n   */\n  public static getInstance(): LoggingService {\n    if (!LoggingService._instance) {\n      LoggingService._instance = new LoggingService();\n    }\n    return LoggingService._instance;\n  }\n\n  /**\n   * Set the log level\n   *\n   * @param {LogLevel} level - The log level to set\n   */\n  public setLogLevel(level: LogLevel): void {\n    this._logLevel = level;\n  }\n\n  /**\n   * Get the current log level\n   *\n   * @returns {LogLevel} The current log level\n   */\n  public getLogLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  /**\n   * Set a custom log handler\n   *\n   * @param {Function} handler - The function to handle log messages\n   */\n  public setLogHandler(handler: (messageLevel: LogLevel, logMessage: string) => void): void {\n    this._logHandler = handler;\n  }\n\n  /**\n   * Log a message if the message level is greater than or equal to the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @param {string} logMessage - The message to log\n   */\n  public log(messageLevel: LogLevel, logMessage: string): void {\n    if (this.shouldLog(messageLevel)) {\n      this._logHandler(messageLevel, logMessage);\n    }\n  }\n\n  /**\n   * Log a message at ERROR level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public error(logMessage: string): void {\n    this.log(LogLevelEnum.ERROR, logMessage);\n  }\n\n  /**\n   * Log a message at WARN level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public warn(logMessage: string): void {\n    this.log(LogLevelEnum.WARN, logMessage);\n  }\n\n  /**\n   * Log a message at INFO level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public info(logMessage: string): void {\n    this.log(LogLevelEnum.INFO, logMessage);\n  }\n\n  /**\n   * Log a message at DEBUG level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public debug(logMessage: string): void {\n    this.log(LogLevelEnum.DEBUG, logMessage);\n  }\n\n  /**\n   * Determine if a message should be logged based on its level and the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @returns {boolean} Whether the message should be logged\n   */\n  private shouldLog(messageLevel: LogLevel): boolean {\n    // Convert string levels to numbers for comparison\n    const numericMessageLevel = this.getNumericLevel(messageLevel);\n    const numericLogLevel = this.getNumericLevel(this._logLevel);\n\n    return numericMessageLevel >= numericLogLevel;\n  }\n\n  /**\n   * Convert a log level to its numeric value\n   *\n   * @param {LogLevel} level - The log level to convert\n   * @returns {number} The numeric value of the log level\n   */\n  private getNumericLevel(level: LogLevel): number {\n    if (level === undefined) return LogLevelEnum.NONE;\n\n    if (typeof level === \"number\") return level;\n\n    switch (level) {\n      case \"1\":\n      case \"DEBUG\":\n        return LogLevelEnum.DEBUG;\n      case \"2\":\n      case \"INFO\":\n        return LogLevelEnum.INFO;\n      case \"3\":\n      case \"WARN\":\n        return LogLevelEnum.WARN;\n      case \"4\":\n      case \"ERROR\":\n        return LogLevelEnum.ERROR;\n      case \"5\":\n      case \"NONE\":\n        return LogLevelEnum.NONE;\n      default:\n        return LogLevelEnum.ERROR; // Default to ERROR if unknown\n    }\n  }\n}\n\n// Export a function to get the singleton instance\nexport function getLoggingService(): LoggingService {\n  return LoggingService.getInstance();\n}\n","import { LogLevelEnum } from \"../constants/enums\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { ValidationError } from \"../exceptions\";\nimport { IErrorHandlingService, ILoggingService } from \"../interfaces/services\";\nimport { getLoggingService } from \"./LoggingService\";\n\n/**\n * Service for handling SCORM errors\n */\nexport class ErrorHandlingService implements IErrorHandlingService {\n  private _lastErrorCode: string = \"0\";\n  private readonly _errorCodes: ErrorCode;\n  private readonly _apiLog: (\n    functionName: string,\n    message: string,\n    logLevel?: LogLevelEnum,\n    CMIElement?: string,\n  ) => void;\n  private readonly _getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string;\n  private readonly _loggingService: ILoggingService;\n\n  /**\n   * Constructor for ErrorHandlingService\n   *\n   * @param {ErrorCode} errorCodes - The error codes object\n   * @param {Function} apiLog - Function for logging API calls\n   * @param {Function} getLmsErrorMessageDetails - Function for getting error message details\n   * @param {ILoggingService} loggingService - Optional logging service instance\n   */\n  constructor(\n    errorCodes: ErrorCode,\n    apiLog: (\n      functionName: string,\n      message: string,\n      logLevel?: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n    loggingService?: ILoggingService,\n  ) {\n    this._errorCodes = errorCodes;\n    this._apiLog = apiLog;\n    this._getLmsErrorMessageDetails = getLmsErrorMessageDetails;\n    this._loggingService = loggingService || getLoggingService();\n  }\n\n  /**\n   * Get the last error code\n   *\n   * @return {string} - The last error code\n   */\n  get lastErrorCode(): string {\n    return this._lastErrorCode;\n  }\n\n  /**\n   * Set the last error code\n   *\n   * @param {string} errorCode - The error code to set\n   */\n  set lastErrorCode(errorCode: string) {\n    this._lastErrorCode = errorCode;\n  }\n\n  /**\n   * Throws a SCORM error\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The error number\n   * @param {string} message - The error message\n   * @throws {ValidationError} - If throwException is true, throws a ValidationError\n   */\n  throwSCORMError(CMIElement: string, errorNumber: number, message?: string): void {\n    if (!message) {\n      message = this._getLmsErrorMessageDetails(errorNumber, true);\n    }\n\n    // Format a more descriptive error message with context\n    const formattedMessage = `SCORM Error ${errorNumber}: ${message}${CMIElement ? ` [Element: ${CMIElement}]` : \"\"}`;\n\n    // Log using both the API log and the logging service for consistency\n    this._apiLog(\"throwSCORMError\", errorNumber + \": \" + message, LogLevelEnum.ERROR, CMIElement);\n    this._loggingService.error(formattedMessage);\n\n    this._lastErrorCode = String(errorNumber);\n  }\n\n  /**\n   * Clears the last SCORM error code on success.\n   *\n   * @param {string} success - Whether the operation was successful\n   */\n  clearSCORMError(success: string): void {\n    if (success !== undefined && success !== global_constants.SCORM_FALSE) {\n      this._lastErrorCode = \"0\";\n    }\n  }\n\n  /**\n   * Handles exceptions that occur when accessing or setting CMI values.\n   *\n   * This method provides centralized error handling for exceptions that occur during\n   * CMI data operations. It differentiates between different types of errors and\n   * handles them appropriately:\n   *\n   * 1. ValidationError: These are expected errors from the validation system that\n   *    indicate a specific SCORM error condition (like invalid data format or range).\n   *    For these errors, the method:\n   *    - Sets the lastErrorCode to the error code from the ValidationError\n   *    - Returns SCORM_FALSE to indicate failure to the caller\n   *\n   * 2. Standard JavaScript Error: For general JavaScript errors (like TypeError,\n   *    ReferenceError, etc.), the method:\n   *    - Logs the error message with stack trace to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * 3. Unknown exceptions: For any other type of exception that doesn't match the\n   *    above categories, the method:\n   *    - Logs the entire exception object to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * This method is critical for maintaining SCORM compliance by ensuring that\n   * all errors are properly translated into the appropriate SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {ValidationError|Error|unknown} e - The exception that was thrown\n   * @param {string} returnValue - The default return value (typically an empty string)\n   * @return {string} - Either the original returnValue or SCORM_FALSE if an error occurred\n   *\n   * @example\n   * try {\n   *   const value = getCMIValue(\"cmi.core.score.raw\");\n   *   return value;\n   * } catch (e) {\n   *   return handleValueAccessException(e, \"\");\n   * }\n   */\n  handleValueAccessException(\n    CMIElement: string,\n    e: Error | ValidationError | unknown,\n    returnValue: string,\n  ): string {\n    if (e instanceof ValidationError) {\n      const validationError = e as ValidationError;\n      this._lastErrorCode = String(validationError.errorCode);\n\n      // Log validation errors at WARN level with context\n      const errorMessage = `Validation Error ${validationError.errorCode}: ${validationError.message} [Element: ${CMIElement}]`;\n      this._loggingService.warn(errorMessage);\n\n      returnValue = global_constants.SCORM_FALSE;\n    } else if (e instanceof Error) {\n      // For standard JS errors, include the stack trace and error type\n      const errorType = e.constructor.name; // Gets the error type (e.g., TypeError, ReferenceError)\n      const errorMessage = `${errorType}: ${e.message} [Element: ${CMIElement}]`;\n      const stackTrace = e.stack || \"\";\n\n      // Log the detailed error with stack trace\n      this._loggingService.error(`${errorMessage}\\n${stackTrace}`);\n\n      this.throwSCORMError(CMIElement, this._errorCodes.GENERAL, `${errorType}: ${e.message}`);\n    } else {\n      // For unknown errors, provide as much context as possible\n      const errorMessage = `Unknown error occurred while accessing [Element: ${CMIElement}]`;\n\n      this._loggingService.error(errorMessage);\n\n      try {\n        // Try to stringify the error object for more details\n        const errorDetails = JSON.stringify(e);\n        this._loggingService.error(`Error details: ${errorDetails}`);\n      } catch (jsonError) {\n        // If stringify fails, log that we couldn't get more details\n        this._loggingService.error(\"Could not stringify error object for details\");\n      }\n\n      this.throwSCORMError(CMIElement, this._errorCodes.GENERAL, \"Unknown error\");\n    }\n    return returnValue;\n  }\n\n  /**\n   * Get the error codes object\n   *\n   * @return {ErrorCode} - The error codes object\n   */\n  get errorCodes(): ErrorCode {\n    return this._errorCodes;\n  }\n}\n\n// Export a factory function to create the service\nexport function createErrorHandlingService(\n  errorCodes: ErrorCode,\n  apiLog: (\n    functionName: string,\n    message: string,\n    logLevel: LogLevelEnum,\n    CMIElement?: string,\n  ) => void,\n  getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n  loggingService?: ILoggingService,\n): ErrorHandlingService {\n  return new ErrorHandlingService(errorCodes, apiLog, getLmsErrorMessageDetails, loggingService);\n}\n","import { CommitObject, InternalSettings, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ErrorCode } from \"../constants/error_codes\";\n\n/**\n * Interface for sync queue item\n */\ninterface SyncQueueItem {\n  id: string;\n  courseId: string;\n  timestamp: number;\n  data: CommitObject;\n  syncAttempts: number;\n}\n\n/**\n * Service for handling offline storage and synchronization of SCORM data\n */\nexport class OfflineStorageService {\n  private settings: InternalSettings;\n  private error_codes: ErrorCode;\n  private storeName: string = \"scorm_again_offline_data\";\n  private syncQueue: string = \"scorm_again_sync_queue\";\n  private isOnline: boolean = navigator.onLine;\n  private syncInProgress: boolean = false;\n\n  /**\n   * Constructor for OfflineStorageService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Function} apiLog - The logging function\n   */\n  constructor(\n    settings: InternalSettings,\n    error_codes: ErrorCode,\n    private apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n\n    // Initialize listeners for online/offline events\n    window.addEventListener(\"online\", this.handleOnlineStatusChange.bind(this));\n    window.addEventListener(\"offline\", this.handleOnlineStatusChange.bind(this));\n  }\n\n  /**\n   * Handle changes in online status\n   */\n  private handleOnlineStatusChange() {\n    const wasOnline = this.isOnline;\n    this.isOnline = navigator.onLine;\n\n    // If we've come back online, trigger sync process\n    if (!wasOnline && this.isOnline) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        \"Device is back online, attempting to sync...\",\n        LogLevelEnum.INFO,\n      );\n      this.syncOfflineData();\n    } else if (wasOnline && !this.isOnline) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        \"Device is offline, data will be stored locally\",\n        LogLevelEnum.INFO,\n      );\n    }\n  }\n\n  /**\n   * Store commit data offline\n   * @param {string} courseId - Identifier for the course\n   * @param {CommitObject} commitData - The data to store offline\n   * @returns {Promise<ResultObject>} - Result of the storage operation\n   */\n  async storeOffline(courseId: string, commitData: CommitObject): Promise<ResultObject> {\n    try {\n      // Store the data in the sync queue with timestamp and unique ID\n      const queueItem: SyncQueueItem = {\n        id: `${courseId}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        courseId,\n        timestamp: Date.now(),\n        data: commitData,\n        syncAttempts: 0,\n      };\n\n      // Get current queue\n      const currentQueue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n      currentQueue.push(queueItem);\n\n      // Save updated queue\n      await this.saveToStorage(this.syncQueue, currentQueue);\n\n      // Also update the current state in the main storage (latest known state)\n      await this.saveToStorage(`${this.storeName}_${courseId}`, commitData);\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Stored data offline for course ${courseId}`,\n        LogLevelEnum.INFO,\n      );\n\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error storing offline data: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL,\n      };\n    }\n  }\n\n  /**\n   * Get the stored offline data for a course\n   * @param {string} courseId - Identifier for the course\n   * @returns {Promise<CommitObject|null>} - The stored data or null if not found\n   */\n  async getOfflineData(courseId: string): Promise<CommitObject | null> {\n    try {\n      const data = await this.getFromStorage<CommitObject>(`${this.storeName}_${courseId}`);\n      return data || null;\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error retrieving offline data: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return null;\n    }\n  }\n\n  /**\n   * Synchronize offline data with the LMS when connection is available\n   * @returns {Promise<boolean>} - Success status of synchronization\n   */\n  async syncOfflineData(): Promise<boolean> {\n    // Don't run multiple sync processes at once\n    if (this.syncInProgress || !this.isOnline) {\n      return false;\n    }\n\n    this.syncInProgress = true;\n\n    try {\n      // Get the queue of items to sync\n      const syncQueue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n\n      if (syncQueue.length === 0) {\n        this.syncInProgress = false;\n        return true;\n      }\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Found ${syncQueue.length} items to sync`,\n        LogLevelEnum.INFO,\n      );\n\n      // Keep track of successful and failed sync attempts\n      const remainingQueue: SyncQueueItem[] = [];\n\n      // Process each queue item\n      for (const item of syncQueue) {\n        // Skip items that have been attempted too many times\n        if (item.syncAttempts >= 5) {\n          this.apiLog(\n            \"OfflineStorageService\",\n            `Skipping item ${item.id} after 5 failed attempts`,\n            LogLevelEnum.WARN,\n          );\n          continue;\n        }\n\n        try {\n          // Attempt to sync this item\n          const syncResult = await this.sendDataToLMS(item.data);\n\n          if (syncResult.result === global_constants.SCORM_TRUE) {\n            // Sync was successful, no need to keep this item\n            this.apiLog(\n              \"OfflineStorageService\",\n              `Successfully synced item ${item.id}`,\n              LogLevelEnum.INFO,\n            );\n          } else {\n            // Sync failed, increment attempts and keep in queue\n            item.syncAttempts++;\n            remainingQueue.push(item);\n            this.apiLog(\n              \"OfflineStorageService\",\n              `Failed to sync item ${item.id}, attempt #${item.syncAttempts}`,\n              LogLevelEnum.WARN,\n            );\n          }\n        } catch (error) {\n          // On error, increment attempts and keep in queue\n          item.syncAttempts++;\n          remainingQueue.push(item);\n          this.apiLog(\n            \"OfflineStorageService\",\n            `Error syncing item ${item.id}: ${error}`,\n            LogLevelEnum.ERROR,\n          );\n        }\n      }\n\n      // Update the queue with remaining items\n      await this.saveToStorage(this.syncQueue, remainingQueue);\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Sync completed. ${syncQueue.length - remainingQueue.length} items synced, ${remainingQueue.length} items remaining`,\n        LogLevelEnum.INFO,\n      );\n\n      this.syncInProgress = false;\n      return true;\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error during sync process: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      this.syncInProgress = false;\n      return false;\n    }\n  }\n\n  /**\n   * Send data to the LMS when online\n   * @param {CommitObject} data - The data to send to the LMS\n   * @returns {Promise<ResultObject>} - Result of the sync operation\n   */\n  private async sendDataToLMS(data: CommitObject): Promise<ResultObject> {\n    if (!this.settings.lmsCommitUrl) {\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL,\n      };\n    }\n\n    try {\n      // Apply request handler if configured\n      const processedData = this.settings.requestHandler(data);\n\n      // Send the data to the LMS\n      const init = {\n        method: \"POST\",\n        mode: this.settings.fetchMode,\n        body: JSON.stringify(processedData),\n        headers: {\n          ...this.settings.xhrHeaders,\n          \"Content-Type\": this.settings.commitRequestDataType,\n        },\n      } as RequestInit;\n\n      if (this.settings.xhrWithCredentials) {\n        init.credentials = \"include\";\n      }\n\n      const response = await fetch(this.settings.lmsCommitUrl as string, init);\n\n      // Process the response using the configured handler\n      const result =\n        typeof this.settings.responseHandler === \"function\"\n          ? await this.settings.responseHandler(response)\n          : await response.json();\n\n      if (\n        response.status >= 200 &&\n        response.status <= 299 &&\n        (result.result === true || result.result === global_constants.SCORM_TRUE)\n      ) {\n        if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n          result.errorCode = 0;\n        }\n        return result;\n      } else {\n        if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n          result.errorCode = this.error_codes.GENERAL;\n        }\n        return result;\n      }\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error sending data to LMS: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL,\n      };\n    }\n  }\n\n  /**\n   * Check if the device is currently online\n   * @returns {boolean} - Online status\n   */\n  isDeviceOnline(): boolean {\n    return this.isOnline;\n  }\n\n  /**\n   * Get item from localStorage\n   * @param {string} key - The key to retrieve\n   * @returns {Promise<T|null>} - The retrieved data\n   */\n  private async getFromStorage<T>(key: string): Promise<T | null> {\n    const storedData = localStorage.getItem(key);\n    if (storedData) {\n      try {\n        return JSON.parse(storedData) as T;\n      } catch (e) {\n        return null;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Save item to localStorage\n   * @param {string} key - The key to store under\n   * @param {any} data - The data to store\n   * @returns {Promise<void>}\n   */\n  private async saveToStorage(key: string, data: any): Promise<void> {\n    localStorage.setItem(key, JSON.stringify(data));\n  }\n\n  /**\n   * Check if there is pending offline data for a course\n   * @param {string} courseId - Identifier for the course\n   * @returns {Promise<boolean>} - Whether there is pending data\n   */\n  async hasPendingOfflineData(courseId: string): Promise<boolean> {\n    const queue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n    return queue.some((item) => item.courseId === courseId);\n  }\n\n  /**\n   * Update the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: InternalSettings): void {\n    this.settings = settings;\n  }\n}\n","import { ErrorCode } from \"./constants/error_codes\";\nimport { global_constants } from \"./constants/api_constants\";\nimport * as Utilities from \"./utilities\";\nimport { formatMessage, StringKeyMap, stringMatches } from \"./utilities\";\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport { CommitObject, InternalSettings, LogLevel, ResultObject, Settings } from \"./types/api_types\";\nimport { DefaultSettings } from \"./constants/default_settings\";\nimport { IBaseAPI } from \"./interfaces/IBaseAPI\";\nimport { ScheduledCommit } from \"./helpers/scheduled_commit\";\nimport { LogLevelEnum } from \"./constants/enums\";\nimport { HttpService } from \"./services/HttpService\";\nimport { EventService } from \"./services/EventService\";\nimport { SerializationService } from \"./services/SerializationService\";\nimport { createErrorHandlingService } from \"./services/ErrorHandlingService\";\nimport { getLoggingService } from \"./services/LoggingService\";\nimport { OfflineStorageService } from \"./services/OfflineStorageService\";\nimport {\n  ICMIDataService,\n  IErrorHandlingService,\n  IEventService,\n  IHttpService,\n  ILoggingService,\n  IOfflineStorageService,\n  ISerializationService\n} from \"./interfaces/services\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { ValidationError } from \"./exceptions\";\n\n/**\n * Base API class for AICC, SCORM 1.2, and SCORM 2004. Should be considered\n * abstract, and never initialized on its own.\n */\nexport default abstract class BaseAPI implements IBaseAPI {\n  private _timeout?: ScheduledCommit | undefined;\n  private readonly _error_codes: ErrorCode;\n  private _settings: InternalSettings = DefaultSettings;\n  private readonly _httpService: IHttpService;\n  private _eventService: IEventService;\n  private _serializationService: ISerializationService;\n  private readonly _errorHandlingService: IErrorHandlingService;\n  private readonly _loggingService: ILoggingService;\n  private _offlineStorageService?: IOfflineStorageService;\n  private _courseId: string = \"\";\n\n  /**\n   * Constructor for Base API class. Sets some shared API fields, as well as\n   * sets up options for the API.\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Settings} settings - Optional settings for the API\n   * @param {IHttpService} httpService - Optional HTTP service instance\n   * @param {IEventService} eventService - Optional Event service instance\n   * @param {ISerializationService} serializationService - Optional Serialization service instance\n   * @param {ICMIDataService} cmiDataService - Optional CMI Data service instance\n   * @param {IErrorHandlingService} errorHandlingService - Optional Error Handling service instance\n   * @param {ILoggingService} loggingService - Optional Logging service instance\n   * @param {IOfflineStorageService} offlineStorageService - Optional Offline Storage service instance\n   */\n  protected constructor(\n    error_codes: ErrorCode,\n    settings?: Settings,\n    httpService?: IHttpService,\n    eventService?: IEventService,\n    serializationService?: ISerializationService,\n    cmiDataService?: ICMIDataService,\n    errorHandlingService?: IErrorHandlingService,\n    loggingService?: ILoggingService,\n    offlineStorageService?: IOfflineStorageService,\n  ) {\n    if (new.target === BaseAPI) {\n      throw new TypeError(\"Cannot construct BaseAPI instances directly\");\n    }\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n\n    this._error_codes = error_codes;\n\n    if (settings) {\n      this.settings = {\n        ...DefaultSettings,\n        ...settings,\n      } as InternalSettings;\n    }\n\n    // Initialize and configure LoggingService\n    this._loggingService = loggingService || getLoggingService();\n    this._loggingService.setLogLevel(this.apiLogLevel);\n\n    // If settings include a custom onLogMessage function, use it as the log handler\n    if (this.settings.onLogMessage) {\n      this._loggingService.setLogHandler(this.settings.onLogMessage);\n    }\n\n    // Initialize HTTP service\n    this._httpService = httpService || new HttpService(this.settings, this._error_codes);\n\n    // Initialize Event service\n    this._eventService =\n      eventService ||\n      new EventService((functionName, message, level, element) =>\n        this.apiLog(functionName, message, level, element),\n      );\n\n    // Initialize Serialization service\n    this._serializationService = serializationService || new SerializationService();\n\n    // Initialize Error Handling service\n    this._errorHandlingService =\n      errorHandlingService ||\n      createErrorHandlingService(\n        this._error_codes,\n        (functionName, message, level, element) =>\n          this.apiLog(functionName, message, level, element),\n        (errorNumber, detail) => this.getLmsErrorMessageDetails(errorNumber, detail),\n      );\n\n    // Initialize Offline Storage service if enabled\n    if (this.settings.enableOfflineSupport) {\n      this._offlineStorageService =\n        offlineStorageService ||\n        new OfflineStorageService(\n          this.settings,\n          this._error_codes,\n          (functionName, message, level, element) =>\n            this.apiLog(functionName, message, level, element),\n        );\n\n      if (this.settings.courseId) {\n        this._courseId = this.settings.courseId;\n      }\n\n      // Check for offline data to restore on initialization\n      if (this._offlineStorageService && this._courseId) {\n        this._offlineStorageService\n          .getOfflineData(this._courseId)\n          .then((offlineData) => {\n            if (offlineData) {\n              this.apiLog(\"constructor\", \"Found offline data to restore\", LogLevelEnum.INFO);\n              // Restore data from offline storage\n              this.loadFromJSON(offlineData.runtimeData);\n            }\n          })\n          .catch((error) => {\n            this.apiLog(\n              \"constructor\",\n              `Error retrieving offline data: ${error}`,\n              LogLevelEnum.ERROR,\n            );\n          });\n      }\n    }\n  }\n\n  public abstract cmi: BaseCMI;\n  public startingData?: StringKeyMap;\n\n  public currentState: number;\n  public apiLogLevel: LogLevel;\n  public selfReportSessionTime: boolean;\n\n  /**\n   * Get the last error code\n   * @return {string}\n   */\n  get lastErrorCode(): string {\n    return this._errorHandlingService?.lastErrorCode ?? \"0\";\n  }\n\n  /**\n   * Set the last error code\n   * @param {string} errorCode\n   */\n  set lastErrorCode(errorCode: string) {\n    if (this._errorHandlingService) {\n      this._errorHandlingService.lastErrorCode = errorCode;\n    }\n  }\n\n  /**\n   * Reset the API to its initial state.\n   * This method clears all current data and resets the API to an uninitialized state.\n   * It can optionally accept new settings to configure the API after reset.\n   *\n   * @param {Settings} settings - Optional new settings to apply after reset\n   */\n  abstract reset(settings?: Settings): void;\n\n  /**\n   * Common reset method for all APIs. New settings are merged with the existing settings.\n   * @param {Settings} settings\n   * @protected\n   */\n  commonReset(settings?: Settings): void {\n    this.apiLog(\"reset\", \"Called\", LogLevelEnum.INFO);\n\n    this.settings = { ...this.settings, ...settings };\n\n    this.clearScheduledCommit();\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n    this.lastErrorCode = \"0\";\n    this._eventService.reset();\n    this.startingData = {};\n\n    // Update offline storage service with new settings if it exists\n    if (this._offlineStorageService) {\n      this._offlineStorageService.updateSettings(this.settings);\n\n      if (settings?.courseId) {\n        this._courseId = settings.courseId;\n      }\n    }\n  }\n\n  /**\n   * Initialize the API\n   * @param {string} callbackName\n   * @param {string} initializeMessage\n   * @param {string} terminationMessage\n   * @return {string}\n   */\n  initialize(\n    callbackName: string,\n    initializeMessage?: string,\n    terminationMessage?: string,\n  ): string {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.isInitialized()) {\n      this.throwSCORMError(\"api\", this._error_codes.INITIALIZED, initializeMessage);\n    } else if (this.isTerminated()) {\n      this.throwSCORMError(\"api\", this._error_codes.TERMINATED, terminationMessage);\n    } else {\n      if (this.selfReportSessionTime) {\n        this.cmi.setStartTime();\n      }\n\n      this.currentState = global_constants.STATE_INITIALIZED;\n      this.lastErrorCode = \"0\";\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n\n      // If enabled, attempt to sync offline data on initialization\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._courseId &&\n        this.settings.syncOnInitialize &&\n        this._offlineStorageService.isDeviceOnline()\n      ) {\n        this._offlineStorageService.hasPendingOfflineData(this._courseId).then((hasPendingData) => {\n          if (hasPendingData) {\n            this.apiLog(\n              callbackName,\n              \"Syncing pending offline data on initialization\",\n              LogLevelEnum.INFO,\n            );\n            this._offlineStorageService?.syncOfflineData().then((syncSuccess) => {\n              if (syncSuccess) {\n                this.apiLog(callbackName, \"Successfully synced offline data\", LogLevelEnum.INFO);\n                this.processListeners(\"OfflineDataSynced\");\n              }\n            });\n          }\n        });\n      }\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Initialize the LMS API\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsInitialize(): string;\n\n  /**\n   * Finish the current LMS API session\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsFinish(): string;\n\n  /**\n   * Get the value of a CMI element from the LMS\n   * @param {string} CMIElement - The CMI element to get the value of\n   * @return {string} The value of the CMI element\n   */\n  abstract lmsGetValue(CMIElement: string): string;\n\n  /**\n   * Set the value of a CMI element in the LMS\n   * @param {string} CMIElement - The CMI element to set the value of\n   * @param {any} value - The value to set\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsSetValue(CMIElement: string, value: any): string;\n\n  /**\n   * Commit the current data to the LMS\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsCommit(): string;\n\n  /**\n   * Get the last error code from the LMS\n   * @return {string} The last error code\n   */\n  abstract lmsGetLastError(): string;\n\n  /**\n   * Get the error string for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get the string for\n   * @return {string} The error string\n   */\n  abstract lmsGetErrorString(CMIErrorCode: string | number): string;\n\n  /**\n   * Get diagnostic information for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get diagnostic information for\n   * @return {string} The diagnostic information\n   */\n  abstract lmsGetDiagnostic(CMIErrorCode: string | number): string;\n\n  /**\n   * Abstract method for validating that a response is correct.\n   * This method is used to validate the format and content of a response\n   * before it is set in the CMI data model.\n   *\n   * @param {string} _CMIElement - The CMI element path to validate\n   * @param {any} _value - The value to validate\n   * @throws {Error} If the response format is invalid\n   */\n  abstract validateCorrectResponse(_CMIElement: string, _value: any): void;\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   * APIs that inherit BaseAPI should override this method.\n   *\n   * @param {string} _CMIElement - unused\n   * @param {*} _value - unused\n   * @param {boolean} _foundFirstIndex - unused\n   * @return {BaseCMI|null}\n   * @abstract\n   */\n  abstract getChildElement(\n    _CMIElement: string,\n    _value: any,\n    _foundFirstIndex: boolean,\n  ): BaseCMI | null;\n\n  /**\n   * Attempts to store the data to the LMS, logs data if no LMS configured\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _calculateTotalTime\n   * @return {ResultObject}\n   * @abstract\n   */\n  abstract storeData(_calculateTotalTime: boolean): Promise<ResultObject>;\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _terminateCommit\n   * @return {StringKeyMap|Array}\n   * @abstract\n   */\n  abstract renderCommitCMI(_terminateCommit: boolean): StringKeyMap | Array<string>;\n\n  /**\n   * Render the commit object to the shortened format for LMS commit.\n   * This method transforms the CMI data into a format suitable for sending to the LMS.\n   * It is called during the commit process to prepare the data for transmission.\n   *\n   * @param {boolean} _terminateCommit - Whether this commit is part of the termination process\n   * @return {CommitObject} A formatted object containing the data to be sent to the LMS\n   * @example\n   * // Example of a commit object structure\n   * {\n   *   method: \"POST\",\n   *   params: {\n   *     cmi: { ... },\n   *     finishState: \"COMPLETED\"\n   *   }\n   * }\n   */\n  abstract renderCommitObject(_terminateCommit: boolean): CommitObject;\n\n  /**\n   * Logging for all SCORM actions\n   *\n   * @param {string} functionName\n   * @param {string} logMessage\n   * @param {number} messageLevel\n   * @param {string} CMIElement\n   */\n  apiLog(functionName: string, logMessage: string, messageLevel: LogLevel, CMIElement?: string) {\n    logMessage = formatMessage(functionName, logMessage, CMIElement);\n\n    if (messageLevel >= this.apiLogLevel) {\n      // Use the injected LoggingService\n      this._loggingService.log(messageLevel, logMessage);\n    }\n  }\n\n  /**\n   * Getter for _error_codes\n   * @return {ErrorCode}\n   */\n  get error_codes(): ErrorCode {\n    return this._error_codes;\n  }\n\n  /**\n   * Getter for _settings\n   * @return {Settings}\n   */\n  get settings(): InternalSettings {\n    return this._settings;\n  }\n\n  /**\n   * Setter for _settings\n   * @param {Settings} settings\n   */\n  set settings(settings: Settings) {\n    const previousSettings = this._settings;\n    this._settings = { ...this._settings, ...settings };\n\n    // Update HTTP service settings\n    this._httpService?.updateSettings(this._settings);\n\n    // Update log level if it changed\n    if (settings.logLevel !== undefined && settings.logLevel !== previousSettings.logLevel) {\n      this.apiLogLevel = settings.logLevel;\n      this._loggingService?.setLogLevel(settings.logLevel);\n    }\n\n    // Update log handler if onLogMessage changed\n    if (\n      settings.onLogMessage !== undefined &&\n      settings.onLogMessage !== previousSettings.onLogMessage\n    ) {\n      this._loggingService?.setLogHandler(settings.onLogMessage);\n    }\n  }\n\n  /**\n   * Terminates the current run of the API\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async terminate(callbackName: string, checkTerminated: boolean): Promise<string> {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.TERMINATION_BEFORE_INIT,\n        this._error_codes.MULTIPLE_TERMINATION,\n      )\n    ) {\n      this.currentState = global_constants.STATE_TERMINATED;\n      // If enabled, attempt to sync offline data before termination\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._courseId &&\n        this.settings.syncOnTerminate &&\n        this._offlineStorageService.isDeviceOnline()\n      ) {\n        const hasPendingData = await this._offlineStorageService.hasPendingOfflineData(\n          this._courseId,\n        );\n        if (hasPendingData) {\n          this.apiLog(\n            callbackName,\n            \"Syncing pending offline data before termination\",\n            LogLevelEnum.INFO,\n          );\n          await this._offlineStorageService.syncOfflineData();\n        }\n      }\n\n      const result: ResultObject = await this.storeData(true);\n      if ((result.errorCode ?? 0) > 0) {\n        this.throwSCORMError(\"api\", result.errorCode);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Get the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  getValue(callbackName: string, checkTerminated: boolean, CMIElement: string): string {\n    let returnValue: string = \"\";\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.RETRIEVE_BEFORE_INIT,\n        this._error_codes.RETRIEVE_AFTER_TERM,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.getCMIValue(CMIElement);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement);\n    }\n\n    this.apiLog(callbackName, \": returned: \" + returnValue, LogLevelEnum.INFO, CMIElement);\n\n    if (returnValue === undefined) {\n      return \"\";\n    }\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Sets the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {string} commitCallback\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  setValue(\n    callbackName: string,\n    commitCallback: string,\n    checkTerminated: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (value !== undefined) {\n      value = String(value);\n    }\n    let returnValue: string = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.STORE_BEFORE_INIT,\n        this._error_codes.STORE_AFTER_TERM,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.setCMIValue(CMIElement, value);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement, value);\n    }\n\n    if (returnValue === undefined) {\n      returnValue = global_constants.SCORM_FALSE;\n    }\n\n    // If we didn't have any errors while setting the data, go ahead and\n    // schedule a commit, if autocommit is turned on\n    if (String(this.lastErrorCode) === \"0\") {\n      if (this.settings.autocommit) {\n        this.scheduleCommit(this.settings.autocommitSeconds * 1000, commitCallback);\n      }\n    }\n\n    this.apiLog(\n      callbackName,\n      \": \" + value + \": result: \" + returnValue,\n      LogLevelEnum.INFO,\n      CMIElement,\n    );\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async commit(callbackName: string, checkTerminated: boolean = false): Promise<string> {\n    this.clearScheduledCommit();\n\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.COMMIT_BEFORE_INIT,\n        this._error_codes.COMMIT_AFTER_TERM,\n      )\n    ) {\n      const result = await this.storeData(false);\n      if ((result.errorCode ?? 0) > 0) {\n        this.throwSCORMError(\"api\", result.errorCode);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      this.apiLog(callbackName, \" Result: \" + returnValue, LogLevelEnum.DEBUG, \"HttpRequest\");\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      this.processListeners(callbackName);\n\n      // If online and there is offline data pending, attempt to sync it\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._offlineStorageService.isDeviceOnline() &&\n        this._courseId\n      ) {\n        this._offlineStorageService.hasPendingOfflineData(this._courseId).then((hasPendingData) => {\n          if (hasPendingData) {\n            this.apiLog(callbackName, \"Syncing pending offline data\", LogLevelEnum.INFO);\n            this._offlineStorageService?.syncOfflineData().then((syncSuccess) => {\n              if (syncSuccess) {\n                this.apiLog(callbackName, \"Successfully synced offline data\", LogLevelEnum.INFO);\n                this.processListeners(\"OfflineDataSynced\");\n              } else {\n                this.apiLog(callbackName, \"Failed to sync some offline data\", LogLevelEnum.WARN);\n              }\n            });\n          }\n        });\n      }\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Returns last error code\n   * @param {string} callbackName\n   * @return {string}\n   */\n  getLastError(callbackName: string): string {\n    const returnValue = String(this.lastErrorCode);\n\n    this.processListeners(callbackName);\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getErrorString(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getDiagnostic(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode, true);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Checks the LMS state and ensures it has been initialized.\n   *\n   * @param {boolean} checkTerminated\n   * @param {number} beforeInitError\n   * @param {number} afterTermError\n   * @return {boolean}\n   */\n  checkState(checkTerminated: boolean, beforeInitError: number, afterTermError: number): boolean {\n    if (this.isNotInitialized()) {\n      this.throwSCORMError(\"api\", beforeInitError);\n      return false;\n    } else if (checkTerminated && this.isTerminated()) {\n      this.throwSCORMError(\"api\", afterTermError);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {(string|number)} _errorNumber\n   * @param {boolean} _detail\n   * @return {string}\n   * @abstract\n   */\n  getLmsErrorMessageDetails(_errorNumber: string | number, _detail: boolean = false): string {\n    throw new Error(\"The getLmsErrorMessageDetails method has not been implemented\");\n  }\n\n  /**\n   * Gets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @return {string}\n   * @abstract\n   */\n  getCMIValue(_CMIElement: string): string {\n    throw new Error(\"The getCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Sets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @param {any} _value\n   * @return {string}\n   * @abstract\n   */\n  setCMIValue(_CMIElement: string, _value: any): string {\n    throw new Error(\"The setCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Shared API method to set a valid for a given element.\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  _commonSetCMIValue(\n    methodName: string,\n    scorm2004: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (!CMIElement || CMIElement === \"\") {\n      return global_constants.SCORM_FALSE;\n    }\n\n    this.lastErrorCode = \"0\";\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap | BaseCMI = this as StringKeyMap;\n    let returnValue = global_constants.SCORM_FALSE;\n    let foundFirstIndex = false;\n\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      const attribute = structure[idx];\n\n      if (idx === structure.length - 1) {\n        if (scorm2004 && attribute.substring(0, 8) === \"{target=\") {\n          if (this.isInitialized()) {\n            this.throwSCORMError(CMIElement, this._error_codes.READ_ONLY_ELEMENT);\n            break;\n          } else {\n            refObject = {\n              ...refObject,\n              attribute: value,\n            };\n          }\n        } else if (!this._checkObjectHasProperty(refObject as StringKeyMap, attribute)) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        } else {\n          if (\n            stringMatches(CMIElement, \"\\\\.correct_responses\\\\.\\\\d+$\") &&\n            this.isInitialized() &&\n            attribute !== \"pattern\"\n          ) {\n            this.validateCorrectResponse(CMIElement, value);\n            if (this.lastErrorCode !== \"0\") {\n              this.throwSCORMError(CMIElement, this._error_codes.TYPE_MISMATCH);\n              break;\n            }\n          }\n\n          if (!scorm2004 || this._errorHandlingService.lastErrorCode === \"0\") {\n            if (attribute === \"__proto__\" || attribute === \"constructor\") {\n              this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n              break;\n            }\n            (refObject as StringKeyMap)[attribute] = value;\n            returnValue = global_constants.SCORM_TRUE;\n          }\n        }\n      } else {\n        refObject = (refObject as StringKeyMap)[attribute] as StringKeyMap;\n        if (!refObject) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n\n        if (refObject instanceof CMIArray) {\n          const index = parseInt(structure[idx + 1], 10);\n\n          // SCO is trying to set an item on an array\n          if (!isNaN(index)) {\n            const item = refObject.childArray[index];\n\n            if (item) {\n              refObject = item;\n              foundFirstIndex = true;\n            } else {\n              const newChild = this.getChildElement(CMIElement, value, foundFirstIndex);\n              foundFirstIndex = true;\n\n              if (!newChild) {\n                if (this.lastErrorCode === \"0\") {\n                  this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n                }\n                break;\n              } else {\n                if (refObject.initialized) newChild.initialize();\n                refObject.childArray[index] = newChild;\n                refObject = newChild;\n              }\n            }\n\n            // Have to update idx value to skip the array position\n            idx++;\n          }\n        }\n      }\n    }\n\n    if (returnValue === global_constants.SCORM_FALSE) {\n      this.apiLog(\n        methodName,\n        `There was an error setting the value for: ${CMIElement}, value of: ${value}`,\n        LogLevelEnum.WARN,\n      );\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @return {any}\n   */\n  _commonGetCMIValue(methodName: string, scorm2004: boolean, CMIElement: string): any {\n    if (!CMIElement || CMIElement === \"\") {\n      return \"\";\n    }\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap = this as StringKeyMap;\n    let attribute = null;\n\n    const uninitializedErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) has not been initialized.`;\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      attribute = structure[idx];\n\n      if (!scorm2004) {\n        if (idx === structure.length - 1) {\n          if (!this._checkObjectHasProperty(refObject, attribute)) {\n            this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n            return;\n          }\n        }\n      } else {\n        if (\n          String(attribute).substring(0, 8) === \"{target=\" &&\n          typeof refObject._isTargetValid == \"function\"\n        ) {\n          const target = String(attribute).substring(8, String(attribute).length - 9);\n          return refObject._isTargetValid(target);\n        } else if (!this._checkObjectHasProperty(refObject, attribute)) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          return;\n        }\n      }\n\n      refObject = refObject[attribute] as StringKeyMap;\n      if (refObject === undefined) {\n        this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n        break;\n      }\n\n      if (refObject instanceof CMIArray) {\n        const index = parseInt(structure[idx + 1], 10);\n\n        // SCO is trying to set an item on an array\n        if (!isNaN(index)) {\n          const item = refObject.childArray[index];\n\n          if (item) {\n            refObject = item;\n          } else {\n            this.throwSCORMError(\n              CMIElement,\n              this._error_codes.VALUE_NOT_INITIALIZED,\n              uninitializedErrorMessage,\n            );\n            break;\n          }\n\n          // Have to update idx value to skip the array position\n          idx++;\n        }\n      }\n    }\n\n    if (refObject === null || refObject === undefined) {\n      if (!scorm2004) {\n        if (attribute === \"_children\") {\n          this.throwSCORMError(CMIElement, this._error_codes.CHILDREN_ERROR, undefined);\n        } else if (attribute === \"_count\") {\n          this.throwSCORMError(CMIElement, this._error_codes.COUNT_ERROR, undefined);\n        }\n      }\n    } else {\n      return refObject;\n    }\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isInitialized(): boolean {\n    return this.currentState === global_constants.STATE_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_NOT_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isNotInitialized(): boolean {\n    return this.currentState === global_constants.STATE_NOT_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_TERMINATED\n   *\n   * @return {boolean}\n   */\n  isTerminated(): boolean {\n    return this.currentState === global_constants.STATE_TERMINATED;\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event.\n   * This method allows you to register a callback function that will be executed\n   * when the specified event occurs.\n   *\n   * @param {string} listenerName - The name of the event to listen for (e.g., \"Initialize\", \"Terminate\", \"GetValue\", \"SetValue\", \"Commit\")\n   * @param {function} callback - The function to execute when the event occurs. The callback will receive relevant event data.\n   * @example\n   * // Listen for Initialize events\n   * api.on(\"Initialize\", function() {\n   *   console.log(\"API has been initialized\");\n   * });\n   *\n   * // Listen for SetValue events\n   * api.on(\"SetValue\", function(element, value) {\n   *   console.log(\"Setting \" + element + \" to \" + value);\n   * });\n   */\n  on(listenerName: string, callback: Function) {\n    this._eventService.on(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener.\n   * This method removes a previously registered callback for an event.\n   * Both the event name and the callback reference must match what was used in the 'on' method.\n   *\n   * @param {string} listenerName - The name of the event to stop listening for\n   * @param {function} callback - The callback function to remove\n   * @example\n   * // Remove a specific listener\n   * const myCallback = function() { console.log(\"API initialized\"); };\n   * api.on(\"Initialize\", myCallback);\n   * // Later, when you want to remove it:\n   * api.off(\"Initialize\", myCallback);\n   */\n  off(listenerName: string, callback: Function) {\n    this._eventService.off(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event.\n   * This method removes all callbacks registered for the specified event.\n   *\n   * @param {string} listenerName - The name of the event to clear all listeners for\n   * @example\n   * // Remove all listeners for the Initialize event\n   * api.clear(\"Initialize\");\n   */\n  clear(listenerName: string) {\n    this._eventService.clear(listenerName);\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created for a specific event.\n   * This method is called internally when SCORM events occur to notify all registered listeners.\n   * It triggers all callback functions registered for the specified event.\n   *\n   * @param {string} functionName - The name of the function/event that occurred\n   * @param {string} CMIElement - Optional CMI element involved in the event\n   * @param {any} value - Optional value associated with the event\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this._eventService.processListeners(functionName, CMIElement, value);\n  }\n\n  /**\n   * Throws a SCORM error with the specified error number and optional message.\n   * This method sets the last error code and can be used to indicate that an operation failed.\n   * The error number should correspond to one of the standard SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The SCORM error code to set\n   * @param {string} message - Optional custom error message to provide additional context\n   * @example\n   * // Throw a \"not initialized\" error\n   * this.throwSCORMError(301, \"The API must be initialized before calling GetValue\");\n   */\n  throwSCORMError(CMIElement: string, errorNumber: number, message?: string) {\n    this._errorHandlingService.throwSCORMError(CMIElement, errorNumber, message);\n  }\n\n  /**\n   * Clears the last SCORM error code when an operation succeeds.\n   * This method is typically called after successful API operations to reset the error state.\n   * It only clears the error if the success parameter is \"true\".\n   *\n   * @param {string} success - A string indicating whether the operation succeeded (\"true\" or \"false\")\n   * @example\n   * // Clear error after successful operation\n   * this.clearSCORMError(\"true\");\n   */\n  clearSCORMError(success: string) {\n    this._errorHandlingService.clearSCORMError(success);\n  }\n\n  /**\n   * Load the CMI from a flattened JSON object.\n   * This method populates the CMI data model from a flattened JSON structure\n   * where keys represent CMI element paths (e.g., \"cmi.core.student_id\").\n   *\n   * @param {StringKeyMap} json - The flattened JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a flattened JSON structure\n   * api.loadFromFlattenedJSON({\n   *   \"cmi.core.student_id\": \"12345\",\n   *   \"cmi.core.student_name\": \"John Doe\",\n   *   \"cmi.core.lesson_status\": \"incomplete\"\n   * });\n   */\n  loadFromFlattenedJSON(json: StringKeyMap, CMIElement?: string) {\n    if (!CMIElement) {\n      // by default, we start from a blank string because we're expecting each element to start with `cmi`\n      CMIElement = \"\";\n    }\n\n    this._serializationService.loadFromFlattenedJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Returns a flattened JSON object representing the current CMI data.\n   */\n  getFlattenedCMI(): StringKeyMap {\n    return Utilities.flatten(this.renderCMIToJSONObject());\n  }\n\n  /**\n   * Loads CMI data from a hierarchical JSON object.\n   * This method populates the CMI data model from a nested JSON structure\n   * that mirrors the CMI object hierarchy.\n   *\n   * @param {StringKeyMap} json - The hierarchical JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a hierarchical JSON structure\n   * api.loadFromJSON({\n   *   core: {\n   *     student_id: \"12345\",\n   *     student_name: \"John Doe\",\n   *     lesson_status: \"incomplete\"\n   *   },\n   *   objectives: [\n   *     { id: \"obj1\", score: { raw: 85 } }\n   *   ]\n   * });\n   */\n  loadFromJSON(json: StringKeyMap, CMIElement: string = \"\") {\n    if (\n      (!CMIElement || CMIElement === \"\") &&\n      !Object.hasOwnProperty.call(json, \"cmi\") &&\n      !Object.hasOwnProperty.call(json, \"adl\")\n    ) {\n      // providing a backward compatibility for the old v1 API\n      CMIElement = \"cmi\";\n    }\n    this._serializationService.loadFromJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Render the CMI object to a JSON string for sending to an LMS.\n   * This method serializes the current CMI data model to a JSON string.\n   * The output format is controlled by the sendFullCommit setting.\n   *\n   * @return {string} A JSON string representation of the CMI data\n   * @example\n   * // Get the current CMI data as a JSON string\n   * const jsonString = api.renderCMIToJSONString();\n   * console.log(jsonString); // '{\"core\":{\"student_id\":\"12345\",...}}'\n   */\n  renderCMIToJSONString(): string {\n    return this._serializationService.renderCMIToJSONString(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Returns a JavaScript object representing the current CMI data.\n   * This method creates a plain JavaScript object that mirrors the\n   * structure of the CMI data model, suitable for further processing.\n   *\n   * @return {StringKeyMap} A JavaScript object representing the CMI data\n   * @example\n   * // Get the current CMI data as a JavaScript object\n   * const cmiObject = api.renderCMIToJSONObject();\n   * console.log(cmiObject.core.student_id); // \"12345\"\n   */\n  renderCMIToJSONObject(): StringKeyMap {\n    return this._serializationService.renderCMIToJSONObject(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Process an HTTP request\n   *\n   * @param {string} url - The URL to send the request to\n   * @param {CommitObject | StringKeyMap | Array<any>} params - The parameters to send\n   * @param {boolean} immediate - Whether to send the request immediately without waiting\n   * @returns {Promise<ResultObject>} - The result of the request\n   * @async\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n  ): Promise<ResultObject> {\n    // If offline support is enabled and device is offline, store data locally instead of sending\n    if (\n      this.settings.enableOfflineSupport &&\n      this._offlineStorageService &&\n      !this._offlineStorageService.isDeviceOnline() &&\n      this._courseId\n    ) {\n      this.apiLog(\n        \"processHttpRequest\",\n        \"Device is offline, storing data locally\",\n        LogLevelEnum.INFO,\n      );\n\n      if (params && typeof params === \"object\" && \"cmi\" in params) {\n        return await this._offlineStorageService.storeOffline(\n          this._courseId,\n          params as CommitObject,\n        );\n      } else {\n        this.apiLog(\n          \"processHttpRequest\",\n          \"Invalid commit data format for offline storage\",\n          LogLevelEnum.ERROR,\n        );\n        return {\n          result: global_constants.SCORM_FALSE,\n          errorCode: this._error_codes.GENERAL,\n        };\n      }\n    }\n\n    // Otherwise, proceed with normal HTTP request\n    return await this._httpService.processHttpRequest(\n      url,\n      params,\n      immediate,\n      (functionName, message, level, element) => this.apiLog(functionName, message, level, element),\n      (functionName, CMIElement, value) => this.processListeners(functionName, CMIElement, value),\n    );\n  }\n\n  /**\n   * Schedules a commit operation to occur after a specified delay.\n   * This method is used to implement auto-commit functionality, where data\n   * is periodically sent to the LMS without requiring explicit commit calls.\n   *\n   * @param {number} when - The number of milliseconds to wait before committing\n   * @param {string} callback - The name of the commit event callback\n   * @example\n   * // Schedule a commit to happen in 60 seconds\n   * api.scheduleCommit(60000, \"commit\");\n   */\n  scheduleCommit(when: number, callback: string) {\n    if (!this._timeout) {\n      this._timeout = new ScheduledCommit(this, when, callback);\n      this.apiLog(\"scheduleCommit\", \"scheduled\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Clears and cancels any currently scheduled commits.\n   * This method is typically called when an explicit commit is performed\n   * or when the API is terminated, to prevent redundant commits.\n   *\n   * @example\n   * // Cancel any pending scheduled commits\n   * api.clearScheduledCommit();\n   */\n  clearScheduledCommit() {\n    if (this._timeout) {\n      this._timeout.cancel();\n      this._timeout = undefined;\n      this.apiLog(\"clearScheduledCommit\", \"cleared\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Checks if an object has a specific property, using multiple detection methods.\n   * This method performs a thorough check for property existence by:\n   * 1. Checking if it's an own property using Object.hasOwnProperty\n   * 2. Checking if it's defined in the prototype with a property descriptor\n   * 3. Checking if it's accessible via the 'in' operator (includes inherited properties)\n   *\n   * @param {StringKeyMap} StringKeyMap - The object to check for the property\n   * @param {string} attribute - The property name to look for\n   * @return {boolean} True if the property exists on the object or its prototype chain\n   * @private\n   *\n   * @example\n   * // Check for an own property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"name\"); // Returns true\n   *\n   * @example\n   * // Check for an inherited property\n   * class Parent { get type() { return \"parent\"; } }\n   * const child = Object.create(new Parent());\n   * this._checkObjectHasProperty(child, \"type\"); // Returns true\n   *\n   * @example\n   * // Check for a non-existent property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"age\"); // Returns false\n   */\n  private _checkObjectHasProperty(StringKeyMap: StringKeyMap, attribute: string): boolean {\n    return (\n      Object.hasOwnProperty.call(StringKeyMap, attribute) ||\n      Object.getOwnPropertyDescriptor(Object.getPrototypeOf(StringKeyMap), attribute) != null ||\n      attribute in StringKeyMap\n    );\n  }\n\n  /**\n   * Handles exceptions that occur when accessing CMI values.\n   * This method delegates to the ErrorHandlingService to process exceptions\n   * that occur during CMI data operations, ensuring consistent error handling\n   * throughout the API.\n   *\n   * @param {string} CMIElement\n   * @param {any} e - The exception that was thrown\n   * @param {string} returnValue - The default return value to use if an error occurs\n   * @return {string} Either the original returnValue or SCORM_FALSE if an error occurred\n   * @private\n   *\n   * @example\n   * // Handle a validation error when getting a CMI value\n   * try {\n   *   return this.getCMIValue(\"cmi.core.score.raw\");\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"\");\n   * }\n   *\n   * @example\n   * // Handle a general error when setting a CMI value\n   * try {\n   *   this.setCMIValue(\"cmi.core.lesson_status\", \"completed\");\n   *   return \"true\";\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"false\");\n   * }\n   */\n  private handleValueAccessException(CMIElement: string, e: any, returnValue: string): string {\n    if (e instanceof ValidationError) {\n      this.lastErrorCode = String(e.errorCode);\n      returnValue = global_constants.SCORM_FALSE;\n      this.throwSCORMError(CMIElement, e.errorCode, e.errorMessage);\n    } else {\n      if (e instanceof Error && e.message) {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, e.message);\n      } else {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, \"Unknown error\");\n      }\n    }\n    return returnValue;\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS.\n   * This method delegates to the SerializationService to create a properly\n   * formatted object containing the CMI data that needs to be sent to the LMS.\n   * The format and content of the commit object depend on whether this is a\n   * regular commit or a termination commit.\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @return {CommitObject|StringKeyMap|Array} The formatted commit object\n   * @protected\n   *\n   * @example\n   * // Create a regular commit object\n   * const regularCommit = this.getCommitObject(false);\n   * // Result might be: { cmi: { core: { lesson_status: \"incomplete\" } } }\n   *\n   * @example\n   * // Create a termination commit object (includes total_time)\n   * const terminationCommit = this.getCommitObject(true);\n   * // Result might be: { cmi: { core: { lesson_status: \"completed\", total_time: \"PT1H30M\" } } }\n   */\n  protected getCommitObject(terminateCommit: boolean): CommitObject | StringKeyMap | Array<any> {\n    return this._serializationService.getCommitObject(\n      terminateCommit,\n      this.settings.alwaysSendTotalTime,\n      this.settings.renderCommonCommitFields,\n      (terminateCommit) => this.renderCommitObject(terminateCommit),\n      (terminateCommit) => this.renderCommitCMI(terminateCommit),\n      this.apiLogLevel,\n    );\n  }\n}\n","import { CMI } from \"./cmi/scorm12/cmi\";\nimport * as Utilities from \"./utilities\";\nimport { StringKeyMap, stringMatches } from \"./utilities\";\nimport { global_constants, scorm12_constants } from \"./constants/api_constants\";\nimport { scorm12_errors } from \"./constants/error_codes\";\n\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport { CMIObjectivesObject } from \"./cmi/scorm12/objectives\";\nimport {\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n} from \"./cmi/scorm12/interactions\";\nimport { NAV } from \"./cmi/scorm12/nav\";\nimport { CommitObject, ResultObject, ScoreObject, Settings } from \"./types/api_types\";\nimport { CompletionStatus, SuccessStatus } from \"./constants/enums\";\nimport BaseAPI from \"./BaseAPI\";\nimport { scorm12_regex } from \"./constants/regex\";\n\n/**\n * API class for SCORM 1.2\n */\nclass Scorm12API extends BaseAPI {\n  /**\n   * Constructor for SCORM 1.2 API\n   * @param {object} settings\n   */\n  constructor(settings?: Settings) {\n    if (settings) {\n      if (settings.mastery_override === undefined) {\n        settings.mastery_override = false;\n      }\n    }\n\n    super(scorm12_errors, settings);\n\n    this.cmi = new CMI();\n    this.nav = new NAV();\n\n    // Rename functions to match 1.2 Spec and expose to modules\n    this.LMSInitialize = this.lmsInitialize;\n    this.LMSFinish = this.lmsFinish;\n    this.LMSGetValue = this.lmsGetValue;\n    this.LMSSetValue = this.lmsSetValue;\n    this.LMSCommit = this.lmsCommit;\n    this.LMSGetLastError = this.lmsGetLastError;\n    this.LMSGetErrorString = this.lmsGetErrorString;\n    this.LMSGetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  public statusSetByModule = false;\n\n  cmi: CMI;\n  nav: NAV;\n\n  LMSInitialize: () => string;\n  LMSFinish: () => string;\n  LMSGetValue: (CMIElement: string) => string;\n  LMSSetValue: (CMIElement: string, value: any) => string;\n  LMSCommit: () => string;\n  LMSGetLastError: () => string;\n  LMSGetErrorString: (CMIErrorCode: string) => string;\n  LMSGetDiagnostic: (CMIErrorCode: string) => string;\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset(settings?: Settings) {\n    this.commonReset(settings);\n\n    this.cmi?.reset();\n    this.nav?.reset();\n  }\n\n  /**\n   * lmsInitialize function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize(): string {\n    this.cmi.initialize();\n    if (this.cmi.core.lesson_status) {\n      this.statusSetByModule = true;\n    } else {\n      this.cmi.core.lesson_status = \"not attempted\";\n    }\n    return this.initialize(\n      \"LMSInitialize\",\n      \"LMS was already initialized!\",\n      \"LMS is already finished!\",\n    );\n  }\n\n  /**\n   * LMSFinish function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish(): string {\n    (async () => {\n      await this.internalFinish();\n    })();\n    return global_constants.SCORM_TRUE;\n  }\n\n  async internalFinish(): Promise<string> {\n    const result = await this.terminate(\"LMSFinish\", true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      if (this.nav.event !== \"\") {\n        if (this.nav.event === \"continue\") {\n          this.processListeners(\"SequenceNext\");\n        } else {\n          this.processListeners(\"SequencePrevious\");\n        }\n      } else if (this.settings.autoProgress) {\n        this.processListeners(\"SequenceNext\");\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * LMSGetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement: string): string {\n    return this.getValue(\"LMSGetValue\", false, CMIElement);\n  }\n\n  /**\n   * LMSSetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement: string, value: any): string {\n    if (CMIElement === \"cmi.core.lesson_status\") {\n      this.statusSetByModule = true;\n    }\n    return this.setValue(\"LMSSetValue\", \"LMSCommit\", false, CMIElement, value);\n  }\n\n  /**\n   * LMSCommit function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit(): string {\n    if (this.settings.asyncCommit) {\n      this.scheduleCommit(500, \"LMSCommit\");\n    } else {\n      (async () => {\n        await this.commit(\"LMSCommit\", false);\n      })();\n    }\n    return global_constants.SCORM_TRUE;\n  }\n\n  /**\n   * LMSGetLastError function from SCORM 1.2 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError(): string {\n    return this.getLastError(\"LMSGetLastError\");\n  }\n\n  /**\n   * LMSGetErrorString function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode: string): string {\n    return this.getErrorString(\"LMSGetErrorString\", CMIErrorCode);\n  }\n\n  /**\n   * LMSGetDiagnostic function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode: string): string {\n    return this.getDiagnostic(\"LMSGetDiagnostic\", CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  override setCMIValue(CMIElement: string, value: any): string {\n    return this._commonSetCMIValue(\"LMSSetValue\", false, CMIElement, value);\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  override getCMIValue(CMIElement: string): any {\n    return this._commonGetCMIValue(\"getCMIValue\", false, CMIElement);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {*} _value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI|null}\n   */\n  getChildElement(CMIElement: string, _value: any, foundFirstIndex: boolean): BaseCMI | null {\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      return new CMIObjectivesObject();\n    } else if (\n      foundFirstIndex &&\n      stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+\")\n    ) {\n      return new CMIInteractionsCorrectResponsesObject();\n    } else if (\n      foundFirstIndex &&\n      stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+\")\n    ) {\n      return new CMIInteractionsObjectivesObject();\n    } else if (!foundFirstIndex && stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\")) {\n      return new CMIInteractionsObject();\n    }\n\n    return null;\n  }\n\n  /**\n   * Validates Correct Response values\n   *\n   * @param {string} _CMIElement\n   * @param {*} _value\n   */\n  validateCorrectResponse(_CMIElement: string, _value: any) {\n    // do nothing\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {number|string} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  override getLmsErrorMessageDetails(errorNumber: number | string, detail: boolean): string {\n    let basicMessage = \"No Error\";\n    let detailMessage = \"No Error\";\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (scorm12_constants.error_descriptions[errorNumber]) {\n      basicMessage = scorm12_constants.error_descriptions[errorNumber].basicMessage;\n      detailMessage = scorm12_constants.error_descriptions[errorNumber].detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {Scorm12API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI: Scorm12API) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   *\n   * @param {boolean} terminateCommit\n   * @return {object|Array}\n   */\n  renderCommitCMI(terminateCommit: boolean): StringKeyMap | Array<string> {\n    const cmiExport: StringKeyMap = this.renderCMIToJSONObject();\n\n    if (terminateCommit) {\n      (cmiExport.cmi as any).core.total_time = this.cmi.getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened: StringKeyMap = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case \"flattened\":\n        return Utilities.flatten(cmiExport);\n      case \"params\":\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case \"json\":\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   * @param {boolean} terminateCommit\n   * @return {CommitObject}\n   */\n  renderCommitObject(terminateCommit: boolean): CommitObject {\n    const cmiExport = this.renderCommitCMI(terminateCommit);\n    const totalTimeHHMMSS = this.cmi.getCurrentTotalTime();\n    const totalTimeSeconds = Utilities.getTimeAsSeconds(totalTimeHHMMSS, scorm12_regex.CMITimespan);\n    const lessonStatus = this.cmi.core.lesson_status;\n    let completionStatus = CompletionStatus.UNKNOWN;\n    let successStatus = SuccessStatus.UNKNOWN;\n    if (lessonStatus) {\n      completionStatus =\n        lessonStatus === \"completed\" || lessonStatus === \"passed\"\n          ? CompletionStatus.COMPLETED\n          : CompletionStatus.INCOMPLETE;\n      if (lessonStatus === \"passed\") {\n        successStatus = SuccessStatus.PASSED;\n      } else if (lessonStatus === \"failed\") {\n        successStatus = SuccessStatus.FAILED;\n      }\n    }\n\n    const score = this.cmi.core.score;\n    const scoreObject: ScoreObject = {};\n    if (score) {\n      if (!Number.isNaN(Number.parseFloat(score.raw))) {\n        scoreObject.raw = Number.parseFloat(score.raw);\n      }\n      if (!Number.isNaN(Number.parseFloat(score.min))) {\n        scoreObject.min = Number.parseFloat(score.min);\n      }\n      if (!Number.isNaN(Number.parseFloat(score.max))) {\n        scoreObject.max = Number.parseFloat(score.max);\n      }\n    }\n\n    const commitObject: CommitObject = {\n      successStatus: successStatus,\n      completionStatus: completionStatus,\n      runtimeData: cmiExport as StringKeyMap,\n      totalTimeSeconds: totalTimeSeconds,\n    };\n    if (scoreObject) {\n      commitObject.score = scoreObject;\n    }\n    return commitObject;\n  }\n\n  /**\n   * Attempts to store the data to the LMS\n   *\n   * @param {boolean} terminateCommit\n   * @return {ResultObject}\n   */\n  async storeData(terminateCommit: boolean): Promise<ResultObject> {\n    if (terminateCommit) {\n      const originalStatus = this.cmi.core.lesson_status;\n      if (\n        !this.cmi.core.lesson_status ||\n        (!this.statusSetByModule && this.cmi.core.lesson_status === \"not attempted\")\n      ) {\n        this.cmi.core.lesson_status = \"completed\";\n      }\n\n      if (this.cmi.core.lesson_mode === \"normal\") {\n        if (this.cmi.core.credit === \"credit\") {\n          if (\n            this.settings.mastery_override &&\n            this.cmi.student_data.mastery_score !== \"\" &&\n            this.cmi.core.score.raw !== \"\"\n          ) {\n            this.cmi.core.lesson_status =\n              parseFloat(this.cmi.core.score.raw) >= parseFloat(this.cmi.student_data.mastery_score)\n                ? \"passed\"\n                : \"failed\";\n          }\n        }\n      } else if (this.cmi.core.lesson_mode === \"browse\") {\n        if (\n          ((this.startingData?.cmi as any)?.core?.lesson_status || \"\") === \"\" &&\n          originalStatus === \"not attempted\"\n        ) {\n          this.cmi.core.lesson_status = \"browsed\";\n        }\n      }\n    }\n\n    const commitObject = this.getCommitObject(terminateCommit);\n    if (typeof this.settings.lmsCommitUrl === \"string\") {\n      return await this.processHttpRequest(\n        this.settings.lmsCommitUrl,\n        commitObject,\n        terminateCommit,\n      );\n    } else {\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    }\n  }\n}\n\nexport default Scorm12API;\n","import { ValidationError } from \"../exceptions\";\nimport { aicc_constants } from \"../constants/api_constants\";\n\nconst aicc_errors = aicc_constants.error_descriptions;\n\n/**\n * AICC Validation Error\n */\nexport class AICCValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(aicc_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        aicc_errors[String(errorCode)].basicMessage,\n        aicc_errors[String(errorCode)].detailMessage,\n      );\n    } else {\n      super(CMIElement, 101, aicc_errors[\"101\"].basicMessage, aicc_errors[\"101\"].detailMessage);\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, AICCValidationError.prototype);\n  }\n}\n","import { checkValidFormat } from \"../common/validation\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function checkAICCValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm12_errors.TYPE_MISMATCH,\n    AICCValidationError,\n    allowEmptyString,\n  );\n}\n","import { CMIArray } from \"../common/array\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { aicc_regex } from \"../../constants/regex\";\n\n/**\n * AICC Evaluation object\n */\nexport class CMIEvaluation extends BaseCMI {\n  /**\n   * Constructor for AICC Evaluation object\n   */\n  constructor() {\n    super(\"cmi.evaluation\");\n    this.comments = new CMIEvaluationComments();\n  }\n\n  public comments: CMIEvaluationComments;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.comments?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this.comments?.reset();\n  }\n\n  /**\n   * toJSON for cmi.evaluation object\n   * @return {{comments: CMIEvaluationComments}}\n   */\n  toJSON(): {\n    comments: CMIEvaluationComments;\n  } {\n    this.jsonString = true;\n    const result = {\n      comments: this.comments,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing AICC's cmi.evaluation.comments object\n */\n\nclass CMIEvaluationComments extends CMIArray {\n  /**\n   * Constructor for AICC Evaluation Comments object\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.evaluation.comments\",\n      children: aicc_constants.comments_children,\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: AICCValidationError,\n    });\n  }\n}\n\n/**\n * Class for AICC Evaluation Comments\n */\nexport class CMIEvaluationCommentsObject extends BaseCMI {\n  private _content = \"\";\n  private _location = \"\";\n  private _time = \"\";\n\n  /**\n   * Constructor for Evaluation Comments\n   */\n  constructor() {\n    super(\"cmi.evaluation.comments.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._content = \"\";\n    this._location = \"\";\n    this._time = \"\";\n  }\n\n  /**\n   * Getter for _content\n   * @return {string}\n   */\n  get content(): string {\n    return this._content;\n  }\n\n  /**\n   * Setter for _content\n   * @param {string} content\n   */\n  set content(content: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".content\", content, aicc_regex.CMIString256)) {\n      this._content = content;\n    }\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".location\", location, aicc_regex.CMIString256)) {\n      this._location = location;\n    }\n  }\n\n  /**\n   * Getter for _time\n   * @return {string}\n   */\n  get time(): string {\n    return this._time;\n  }\n\n  /**\n   * Setting for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".time\", time, aicc_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.evaluation.comments.n object\n   * @return {\n   *    {\n   *      content: string,\n   *      location: string,\n   *      time: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    content: string;\n    location: string;\n    time: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      content: this.content,\n      location: this.location,\n      time: this.time,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { CMIStudentPreference } from \"../scorm12/student_preference\";\n\n/**\n * StudentPreferences class for AICC\n */\nexport class AICCStudentPreferences extends CMIStudentPreference {\n  /**\n   * Constructor for AICC Student Preferences object\n   */\n  constructor() {\n    super(aicc_constants.student_preference_children);\n    this.windows = new CMIArray({\n      CMIElement: \"cmi.student_preference.windows\",\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: AICCValidationError,\n      children: \"\",\n    });\n  }\n\n  public windows: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.windows?.initialize();\n  }\n\n  private _lesson_type = \"\";\n  private _text_color = \"\";\n  private _text_location = \"\";\n  private _text_size = \"\";\n  private _video = \"\";\n\n  /**\n   * Getter for _lesson_type\n   * @return {string}\n   */\n  get lesson_type(): string {\n    return this._lesson_type;\n  }\n\n  /**\n   * Setter for _lesson_type\n   * @param {string} lesson_type\n   */\n  set lesson_type(lesson_type: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".lesson_type\", lesson_type, aicc_regex.CMIString256)\n    ) {\n      this._lesson_type = lesson_type;\n    }\n  }\n\n  /**\n   * Getter for _text_color\n   * @return {string}\n   */\n  get text_color(): string {\n    return this._text_color;\n  }\n\n  /**\n   * Setter for _text_color\n   * @param {string} text_color\n   */\n  set text_color(text_color: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".text_color\", text_color, aicc_regex.CMIString256)\n    ) {\n      this._text_color = text_color;\n    }\n  }\n\n  /**\n   * Getter for _text_location\n   * @return {string}\n   */\n  get text_location(): string {\n    return this._text_location;\n  }\n\n  /**\n   * Setter for _text_location\n   * @param {string} text_location\n   */\n  set text_location(text_location: string) {\n    if (\n      checkAICCValidFormat(\n        this._cmi_element + \".text_location\",\n        text_location,\n        aicc_regex.CMIString256,\n      )\n    ) {\n      this._text_location = text_location;\n    }\n  }\n\n  /**\n   * Getter for _text_size\n   * @return {string}\n   */\n  get text_size(): string {\n    return this._text_size;\n  }\n\n  /**\n   * Setter for _text_size\n   * @param {string} text_size\n   */\n  set text_size(text_size: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".text_size\", text_size, aicc_regex.CMIString256)\n    ) {\n      this._text_size = text_size;\n    }\n  }\n\n  /**\n   * Getter for _video\n   * @return {string}\n   */\n  get video(): string {\n    return this._video;\n  }\n\n  /**\n   * Setter for _video\n   * @param {string} video\n   */\n  set video(video: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".video\", video, aicc_regex.CMIString256)) {\n      this._video = video;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_preference\n   *\n   * @return {\n   *    {\n   *      audio: string,\n   *      language: string,\n   *      speed: string,\n   *      text: string,\n   *      text_color: string,\n   *      text_location: string,\n   *      text_size: string,\n   *      video: string,\n   *      windows: CMIArray\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    audio: string;\n    language: string;\n    lesson_type: string;\n    speed: string;\n    text: string;\n    text_color: string;\n    text_location: string;\n    text_size: string;\n    video: string;\n    windows: CMIArray;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio: this.audio,\n      language: this.language,\n      lesson_type: this.lesson_type,\n      speed: this.speed,\n      text: this.text,\n      text_color: this.text_color,\n      text_location: this.text_location,\n      text_size: this.text_size,\n      video: this.video,\n      windows: this.windows,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Class representing the AICC cmi.student_demographics object\n */\nexport class CMIStudentDemographics extends BaseCMI {\n  private __children = aicc_constants.student_demographics_children;\n  private _city = \"\";\n  private _class = \"\";\n  private _company = \"\";\n  private _country = \"\";\n  private _experience = \"\";\n  private _familiar_name = \"\";\n  private _instructor_name = \"\";\n  private _title = \"\";\n  private _native_language = \"\";\n  private _state = \"\";\n  private _street_address = \"\";\n  private _telephone = \"\";\n  private _years_experience = \"\";\n\n  /**\n   * Constructor for AICC StudentDemographics object\n   */\n  constructor() {\n    super(\"cmi.student_demographics\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Getter for city\n   * @return {string}\n   */\n  get city(): string {\n    return this._city;\n  }\n\n  /**\n   * Setter for _city. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} city\n   */\n  set city(city: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.city\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._city = city;\n    }\n  }\n\n  /**\n   * Getter for class\n   * @return {string}\n   */\n  get class(): string {\n    return this._class;\n  }\n\n  /**\n   * Setter for _class. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} clazz\n   */\n  set class(clazz: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.class\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._class = clazz;\n    }\n  }\n\n  /**\n   * Getter for company\n   * @return {string}\n   */\n  get company(): string {\n    return this._company;\n  }\n\n  /**\n   * Setter for _company. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} company\n   */\n  set company(company: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.company\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._company = company;\n    }\n  }\n\n  /**\n   * Getter for country\n   * @return {string}\n   */\n  get country(): string {\n    return this._country;\n  }\n\n  /**\n   * Setter for _country. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} country\n   */\n  set country(country: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.country\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._country = country;\n    }\n  }\n\n  /**\n   * Getter for experience\n   * @return {string}\n   */\n  get experience(): string {\n    return this._experience;\n  }\n\n  /**\n   * Setter for _experience. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} experience\n   */\n  set experience(experience: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.experience\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._experience = experience;\n    }\n  }\n\n  /**\n   * Getter for familiar_name\n   * @return {string}\n   */\n  get familiar_name(): string {\n    return this._familiar_name;\n  }\n\n  /**\n   * Setter for _familiar_name. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} familiar_name\n   */\n  set familiar_name(familiar_name: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.familiar_name\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._familiar_name = familiar_name;\n    }\n  }\n\n  /**\n   * Getter for instructor_name\n   * @return {string}\n   */\n  get instructor_name(): string {\n    return this._instructor_name;\n  }\n\n  /**\n   * Setter for _instructor_name. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} instructor_name\n   */\n  set instructor_name(instructor_name: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.instructor_name\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._instructor_name = instructor_name;\n    }\n  }\n\n  /**\n   * Getter for title\n   * @return {string}\n   */\n  get title(): string {\n    return this._title;\n  }\n\n  /**\n   * Setter for _title. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} title\n   */\n  set title(title: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.title\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._title = title;\n    }\n  }\n\n  /**\n   * Getter for native_language\n   * @return {string}\n   */\n  get native_language(): string {\n    return this._native_language;\n  }\n\n  /**\n   * Setter for _native_language. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} native_language\n   */\n  set native_language(native_language: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.native_language\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._native_language = native_language;\n    }\n  }\n\n  /**\n   * Getter for state\n   * @return {string}\n   */\n  get state(): string {\n    return this._state;\n  }\n\n  /**\n   * Setter for _state. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} state\n   */\n  set state(state: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.state\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._state = state;\n    }\n  }\n\n  /**\n   * Getter for street_address\n   * @return {string}\n   */\n  get street_address(): string {\n    return this._street_address;\n  }\n\n  /**\n   * Setter for _street_address. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} street_address\n   */\n  set street_address(street_address: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.street_address\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._street_address = street_address;\n    }\n  }\n\n  /**\n   * Getter for telephone\n   * @return {string}\n   */\n  get telephone(): string {\n    return this._telephone;\n  }\n\n  /**\n   * Setter for _telephone. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} telephone\n   */\n  set telephone(telephone: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.telephone\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._telephone = telephone;\n    }\n  }\n\n  /**\n   * Getter for years_experience\n   * @return {string}\n   */\n  get years_experience(): string {\n    return this._years_experience;\n  }\n\n  /**\n   * Setter for _years_experience. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} years_experience\n   */\n  set years_experience(years_experience: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.years_experience\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._years_experience = years_experience;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_demographics object\n   * @return {\n   *      {\n   *        city: string,\n   *        class: string,\n   *        company: string,\n   *        country: string,\n   *        experience: string,\n   *        familiar_name: string,\n   *        instructor_name: string,\n   *        title: string,\n   *        native_language: string,\n   *        state: string,\n   *        street_address: string,\n   *        telephone: string,\n   *        years_experience: string\n   *      }\n   *    }\n   */\n  toJSON(): {\n    city: string;\n    class: string;\n    company: string;\n    country: string;\n    experience: string;\n    familiar_name: string;\n    instructor_name: string;\n    title: string;\n    native_language: string;\n    state: string;\n    street_address: string;\n    telephone: string;\n    years_experience: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      city: this.city,\n      class: this.class,\n      company: this.company,\n      country: this.country,\n      experience: this.experience,\n      familiar_name: this.familiar_name,\n      instructor_name: this.instructor_name,\n      title: this.title,\n      native_language: this.native_language,\n      state: this.state,\n      street_address: this.street_address,\n      telephone: this.telephone,\n      years_experience: this.years_experience,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { checkAICCValidFormat } from \"./validation\";\n\n/**\n * Class representing the AICC cmi.student_data.tries object\n */\nexport class CMITries extends CMIArray {\n  /**\n   * Constructor for inline Tries Array class\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.student_data.tries\",\n      children: aicc_constants.tries_children,\n    });\n  }\n}\n\n/**\n * Class for AICC Tries\n */\nexport class CMITriesObject extends BaseCMI {\n  private _status = \"\";\n  private _time = \"\";\n\n  /**\n   * Constructor for AICC Tries object\n   */\n  constructor() {\n    super(\"cmi.student_data.tries.n\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.student_data.tries.n.score\",\n      score_children: aicc_constants.score_children,\n      score_range: aicc_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE,\n      errorClass: AICCValidationError,\n    });\n  }\n\n  public score: CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._status = \"\";\n    this._time = \"\";\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for _status\n   * @return {string}\n   */\n  get status(): string {\n    return this._status;\n  }\n\n  /**\n   * Setter for _status\n   * @param {string} status\n   */\n  set status(status: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".status\", status, aicc_regex.CMIStatus2)) {\n      this._status = status;\n    }\n  }\n\n  /**\n   * Getter for _time\n   * @return {string}\n   */\n  get time(): string {\n    return this._time;\n  }\n\n  /**\n   * Setter for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".time\", time, aicc_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data.tries.n object\n   * @return {\n   *    {\n   *      status: string,\n   *      time: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    status: string;\n    time: string;\n    score: CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      status: this.status,\n      time: this.time,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { CMIArray } from \"../common/array\";\n\n/**\n * Class for cmi.student_data.attempt_records array\n */\nexport class CMIAttemptRecords extends CMIArray {\n  /**\n   * Constructor for inline Tries Array class\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.student_data.attempt_records\",\n      children: aicc_constants.attempt_records_children,\n    });\n  }\n}\n\n/**\n * Class for AICC Attempt Records\n */\nexport class CMIAttemptRecordsObject extends BaseCMI {\n  private _lesson_status = \"\";\n\n  /**\n   * Constructor for AICC Attempt Records object\n   */\n  constructor() {\n    super(\"cmi.student_data.attempt_records.n\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.student_data.attempt_records.n.score\",\n      score_children: aicc_constants.score_children,\n      score_range: aicc_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE,\n      errorClass: AICCValidationError,\n    });\n  }\n\n  public score: CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n\n    this._lesson_status = \"\";\n    this.score?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for _lesson_status\n   * @return {string}\n   */\n  get lesson_status(): string {\n    return this._lesson_status;\n  }\n\n  /**\n   * Setter for _lesson_status\n   * @param {string} lesson_status\n   */\n  set lesson_status(lesson_status: string) {\n    if (\n      checkAICCValidFormat(\n        this._cmi_element + \".lesson_status\",\n        lesson_status,\n        aicc_regex.CMIStatus2,\n      )\n    ) {\n      this._lesson_status = lesson_status;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data.attempt_records.n object\n   * @return {\n   *    {\n   *         lesson_status: string,\n   *         score: CMIScore\n   *     }\n   *  }\n   */\n  toJSON(): {\n    lesson_status: string;\n    score: CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      lesson_status: this.lesson_status,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { CMITries } from \"./tries\";\nimport { CMIStudentData } from \"../scorm12/student_data\";\nimport { CMIAttemptRecords } from \"./attempts\";\n\n/**\n * StudentData class for AICC\n */\nexport class AICCCMIStudentData extends CMIStudentData {\n  /**\n   * Constructor for AICC StudentData object\n   */\n  constructor() {\n    super(aicc_constants.student_data_children);\n    this.tries = new CMITries();\n    this.attempt_records = new CMIAttemptRecords();\n  }\n\n  public tries: CMITries;\n  public attempt_records: CMIAttemptRecords;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.tries?.initialize();\n    this.attempt_records?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n    this.tries?.reset(true);\n    this.attempt_records?.reset(true);\n  }\n\n  private _tries_during_lesson = \"\";\n\n  /**\n   * Getter for tries_during_lesson\n   * @return {string}\n   */\n  get tries_during_lesson(): string {\n    return this._tries_during_lesson;\n  }\n\n  /**\n   * Setter for _tries_during_lesson. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} tries_during_lesson\n   */\n  set tries_during_lesson(tries_during_lesson: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_data.tries_during_lesson\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._tries_during_lesson = tries_during_lesson;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data object\n   * @return {\n   *    {\n   *      mastery_score: string,\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      tries: CMITries,\n   *      attempt_records: CMIAttemptRecords\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    mastery_score: string;\n    max_time_allowed: string;\n    time_limit_action: string;\n    tries: CMITries;\n    attempt_records: CMIAttemptRecords;\n  } {\n    this.jsonString = true;\n    const result = {\n      mastery_score: this.mastery_score,\n      max_time_allowed: this.max_time_allowed,\n      time_limit_action: this.time_limit_action,\n      tries: this.tries,\n      attempt_records: this.attempt_records,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { CMIArray } from \"../common/array\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { aicc_constants } from \"../../constants/api_constants\";\n\n/**\n * Class representing the AICC `cmi.paths` object\n */\nexport class CMIPaths extends CMIArray {\n  /**\n   * Constructor for inline Paths Array class\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.paths\",\n      children: aicc_constants.paths_children,\n    });\n  }\n}\n\n/**\n * Class for AICC Paths\n */\nexport class CMIPathsObject extends BaseCMI {\n  private _location_id = \"\";\n  private _date = \"\";\n  private _time = \"\";\n  private _status = \"\";\n  private _why_left = \"\";\n  private _time_in_element = \"\";\n\n  /**\n   * Constructor for AICC Paths objects\n   */\n  constructor() {\n    super(\"cmi.paths.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._location_id = \"\";\n    this._date = \"\";\n    this._time = \"\";\n    this._status = \"\";\n    this._why_left = \"\";\n    this._time_in_element = \"\";\n  }\n\n  /**\n   * Getter for _location_id\n   * @return {string}\n   */\n  get location_id(): string {\n    return this._location_id;\n  }\n\n  /**\n   * Setter for _location_id\n   * @param {string} location_id\n   */\n  set location_id(location_id: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".location_id\", location_id, aicc_regex.CMIString256)\n    ) {\n      this._location_id = location_id;\n    }\n  }\n\n  /**\n   * Getter for _date\n   * @return {string}\n   */\n  get date(): string {\n    return this._date;\n  }\n\n  /**\n   * Setter for _date\n   * @param {string} date\n   */\n  set date(date: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".date\", date, aicc_regex.CMIString256)) {\n      this._date = date;\n    }\n  }\n\n  /**\n   * Getter for _time\n   * @return {string}\n   */\n  get time(): string {\n    return this._time;\n  }\n\n  /**\n   * Setter for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".time\", time, aicc_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * Getter for _status\n   * @return {string}\n   */\n  get status(): string {\n    return this._status;\n  }\n\n  /**\n   * Setter for _status\n   * @param {string} status\n   */\n  set status(status: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".status\", status, aicc_regex.CMIStatus2)) {\n      this._status = status;\n    }\n  }\n\n  /**\n   * Getter for _why_left\n   * @return {string}\n   */\n  get why_left(): string {\n    return this._why_left;\n  }\n\n  /**\n   * Setter for _why_left\n   * @param {string} why_left\n   */\n  set why_left(why_left: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".why_left\", why_left, aicc_regex.CMIString256)) {\n      this._why_left = why_left;\n    }\n  }\n\n  /**\n   * Getter for _time_in_element\n   * @return {string}\n   */\n  get time_in_element(): string {\n    return this._time_in_element;\n  }\n\n  /**\n   * Setter for _time_in_element\n   * @param {string} time_in_element\n   */\n  set time_in_element(time_in_element: string) {\n    if (\n      checkAICCValidFormat(\n        this._cmi_element + \".time_in_element\",\n        time_in_element,\n        aicc_regex.CMITime,\n      )\n    ) {\n      this._time_in_element = time_in_element;\n    }\n  }\n\n  /**\n   * toJSON for cmi.paths.n object\n   * @return {\n   *    {\n   *      location_id: string,\n   *      date: string,\n   *      time: string,\n   *      status: string,\n   *      why_left: string,\n   *      time_in_element: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    location_id: string;\n    date: string;\n    time: string;\n    status: string;\n    why_left: string;\n    time_in_element: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      location_id: this.location_id,\n      date: this.date,\n      time: this.time,\n      status: this.status,\n      why_left: this.why_left,\n      time_in_element: this.time_in_element,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import * as Scorm12CMI from \"../scorm12/cmi\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { CMIEvaluation } from \"./evaluation\";\nimport { AICCStudentPreferences } from \"./student_preferences\";\nimport { CMIStudentDemographics } from \"./student_demographics\";\nimport { AICCCMIStudentData } from \"./student_data\";\nimport { CMIPaths } from \"./paths\";\nimport { CMICore } from \"./core\";\nimport { CMIObjectives } from \"../scorm12/objectives\";\nimport { CMIStudentData } from \"../scorm12/student_data\";\nimport { CMIStudentPreference } from \"../scorm12/student_preference\";\nimport { CMIInteractions } from \"../scorm12/interactions\";\n\n/**\n * CMI Class for AICC\n */\nexport class CMI extends Scorm12CMI.CMI {\n  /**\n   * Constructor for AICC CMI object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean = false) {\n    super(aicc_constants.cmi_children);\n    if (initialized) this.initialize();\n    this.student_preference = new AICCStudentPreferences();\n    this.student_data = new AICCCMIStudentData();\n    this.student_demographics = new CMIStudentDemographics();\n    this.evaluation = new CMIEvaluation();\n    this.paths = new CMIPaths();\n  }\n\n  public override student_data: AICCCMIStudentData;\n  public override student_preference: AICCStudentPreferences;\n  public student_demographics: CMIStudentDemographics;\n  public evaluation: CMIEvaluation;\n  public paths: CMIPaths;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.student_preference?.initialize();\n    this.student_data?.initialize();\n    this.student_demographics?.initialize();\n    this.evaluation?.initialize();\n    this.paths?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions,\n   *      paths: CMIPaths\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    suspend_data: string;\n    launch_data: string;\n    comments: string;\n    comments_from_lms: string;\n    core: CMICore;\n    objectives: CMIObjectives;\n    student_data: CMIStudentData;\n    student_preference: CMIStudentPreference;\n    student_demographics: CMIStudentDemographics;\n    interactions: CMIInteractions;\n    evaluation: CMIEvaluation;\n    paths: CMIPaths;\n  } {\n    this.jsonString = true;\n    const result = {\n      suspend_data: this.suspend_data,\n      launch_data: this.launch_data,\n      comments: this.comments,\n      comments_from_lms: this.comments_from_lms,\n      core: this.core,\n      objectives: this.objectives,\n      student_data: this.student_data,\n      student_preference: this.student_preference,\n      student_demographics: this.student_demographics,\n      interactions: this.interactions,\n      evaluation: this.evaluation,\n      paths: this.paths,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { ValidationError } from \"../exceptions\";\nimport { scorm2004_constants } from \"../constants/api_constants\";\n\nconst scorm2004_errors = scorm2004_constants.error_descriptions;\n\n/**\n * SCORM 2004 Validation Error\n */\nexport class Scorm2004ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm2004_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm2004_errors[String(errorCode)].basicMessage,\n        scorm2004_errors[String(errorCode)].detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm2004_errors[\"101\"].basicMessage,\n        scorm2004_errors[\"101\"].detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm2004ValidationError.prototype);\n  }\n}\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check2004ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm2004_errors.TYPE_MISMATCH,\n    Scorm2004ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @return {boolean}\n */\nexport function check2004ValidRange(\n  CMIElement: string,\n  value: string,\n  rangePattern: string,\n): boolean {\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm2004_errors.VALUE_OUT_OF_RANGE,\n    Scorm2004ValidationError,\n  );\n}\n","/**\n * Class for SCORM 2004's cmi.learner_preference object\n */\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\n\nexport class CMILearnerPreference extends BaseCMI {\n  private __children = scorm2004_constants.student_preference_children;\n  private _audio_level = \"1\";\n  private _language = \"\";\n  private _delivery_speed = \"1\";\n  private _audio_captioning = \"0\";\n\n  /**\n   * Constructor for cmi.learner_preference\n   */\n  constructor() {\n    super(\"cmi.learner_preference\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._children\",\n      scorm2004_errors.READ_ONLY_ELEMENT,\n    );\n  }\n\n  /**\n   * Getter for _audio_level\n   * @return {string}\n   */\n  get audio_level(): string {\n    return this._audio_level;\n  }\n\n  /**\n   * Setter for _audio_level\n   * @param {string} audio_level\n   */\n  set audio_level(audio_level: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".audio_level\",\n        audio_level,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".audio_level\",\n        audio_level,\n        scorm2004_regex.audio_range,\n      )\n    ) {\n      this._audio_level = audio_level;\n    }\n  }\n\n  /**\n   * Getter for _language\n   * @return {string}\n   */\n  get language(): string {\n    return this._language;\n  }\n\n  /**\n   * Setter for _language\n   * @param {string} language\n   */\n  set language(language: string) {\n    if (check2004ValidFormat(this._cmi_element + \".language\", language, scorm2004_regex.CMILang)) {\n      this._language = language;\n    }\n  }\n\n  /**\n   * Getter for _delivery_speed\n   * @return {string}\n   */\n  get delivery_speed(): string {\n    return this._delivery_speed;\n  }\n\n  /**\n   * Setter for _delivery_speed\n   * @param {string} delivery_speed\n   */\n  set delivery_speed(delivery_speed: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".delivery_speed\",\n        delivery_speed,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".delivery_speed\",\n        delivery_speed,\n        scorm2004_regex.speed_range,\n      )\n    ) {\n      this._delivery_speed = delivery_speed;\n    }\n  }\n\n  /**\n   * Getter for _audio_captioning\n   * @return {string}\n   */\n  get audio_captioning(): string {\n    return this._audio_captioning;\n  }\n\n  /**\n   * Setter for _audio_captioning\n   * @param {string} audio_captioning\n   */\n  set audio_captioning(audio_captioning: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".audio_captioning\",\n        audio_captioning,\n        scorm2004_regex.CMISInteger,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".audio_captioning\",\n        audio_captioning,\n        scorm2004_regex.text_range,\n      )\n    ) {\n      this._audio_captioning = audio_captioning;\n    }\n  }\n\n  /**\n   * toJSON for cmi.learner_preference\n   *\n   * @return {\n   *    {\n   *      audio_level: string,\n   *      language: string,\n   *      delivery_speed: string,\n   *      audio_captioning: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    audio_level: string;\n    language: string;\n    delivery_speed: string;\n    audio_captioning: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio_level: this.audio_level,\n      language: this.language,\n      delivery_speed: this.delivery_speed,\n      audio_captioning: this.audio_captioning,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { scorm2004_regex } from \"./regex\";\n\nexport const LearnerResponses: Responses = {\n  \"true-false\": {\n    format: \"^true$|^false$\",\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  choice: {\n    format: scorm2004_regex.CMILongIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    unique: true,\n  },\n  \"fill-in\": {\n    format: scorm2004_regex.CMILangString250,\n    max: 10,\n    delimiter: \"[,]\",\n    unique: false,\n  },\n  \"long-fill-in\": {\n    format: scorm2004_regex.CMILangString4000,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  matching: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n  },\n  performance: {\n    format: \"^$|\" + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + \"|^$|\" + scorm2004_regex.CMIShortIdentifier,\n    max: 250,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n  },\n  sequencing: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    unique: false,\n  },\n  likert: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  numeric: {\n    format: scorm2004_regex.CMIDecimal,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  other: {\n    format: scorm2004_regex.CMIString4000,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n};\nexport const CorrectResponses: Responses = {\n  \"true-false\": {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: \"^true$|^false$\",\n    limit: 1,\n  },\n  choice: {\n    max: 36,\n    delimiter: \"[,]\",\n    unique: true,\n    duplicate: false,\n    format: scorm2004_regex.CMILongIdentifier,\n  },\n  \"fill-in\": {\n    max: 10,\n    delimiter: \"[,]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMILangString250cr,\n  },\n  \"long-fill-in\": {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: true,\n    format: scorm2004_regex.CMILangString4000,\n  },\n  matching: {\n    max: 36,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n  },\n  performance: {\n    max: 250,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    delimiter3: \"[:]\",\n    unique: false,\n    duplicate: false,\n    format: \"^$|\" + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + \"|^$|\" + scorm2004_regex.CMIShortIdentifier,\n  },\n  sequencing: {\n    max: 36,\n    delimiter: \"[,]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n  },\n  likert: {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    limit: 1,\n  },\n  numeric: {\n    max: 2,\n    delimiter: \"[:]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIDecimal,\n    limit: 1,\n  },\n  other: {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIString4000,\n    limit: 1,\n  },\n};\n\nexport type ResponseType = {\n  format: string;\n  max: number;\n  delimiter: string;\n  unique: boolean;\n  duplicate?: boolean;\n  format2?: string;\n  delimiter2?: string;\n  limit?: number;\n  delimiter3?: string;\n};\n\nexport type Responses = {\n  [key: string]: ResponseType;\n};\n","/**\n * Class representing SCORM 2004's `cmi.interactions` object\n */\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { CMIArray } from \"../common/array\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { CorrectResponses, LearnerResponses } from \"../../constants/response_constants\";\n\nexport class CMIInteractions extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives` Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.interactions\",\n      children: scorm2004_constants.interactions_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.interaction.n object\n */\n\nexport class CMIInteractionsObject extends BaseCMI {\n  private _id = \"\";\n  private _type = \"\";\n  private _timestamp = \"\";\n  private _weighting = \"\";\n  private _learner_response = \"\";\n  private _result = \"\";\n  private _latency = \"\";\n  private _description = \"\";\n\n  /**\n   * Constructor for cmi.interaction.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n\");\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.n.correct_responses\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  public objectives: CMIArray;\n  public correct_responses: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._id = \"\";\n    this._type = \"\";\n    this._timestamp = \"\";\n    this._weighting = \"\";\n    this._learner_response = \"\";\n    this._result = \"\";\n    this._latency = \"\";\n    this._description = \"\";\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.n.correct_responses\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _type\n   * @return {string}\n   */\n  get type(): string {\n    return this._type;\n  }\n\n  /**\n   * Setter for _type\n   * @param {string} type\n   */\n  set type(type: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".type\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (check2004ValidFormat(this._cmi_element + \".type\", type, scorm2004_regex.CMIType)) {\n        this._type = type;\n      }\n    }\n  }\n\n  /**\n   * Getter for _timestamp\n   * @return {string}\n   */\n  get timestamp(): string {\n    return this._timestamp;\n  }\n\n  /**\n   * Setter for _timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".timestamp\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".timestamp\", timestamp, scorm2004_regex.CMITime)\n      ) {\n        this._timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * Getter for _weighting\n   * @return {string}\n   */\n  get weighting(): string {\n    return this._weighting;\n  }\n\n  /**\n   * Setter for _weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".weighting\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".weighting\",\n          weighting,\n          scorm2004_regex.CMIDecimal,\n        )\n      ) {\n        this._weighting = weighting;\n      }\n    }\n  }\n\n  /**\n   * Getter for _learner_response\n   * @return {string}\n   */\n  get learner_response(): string {\n    return this._learner_response;\n  }\n\n  /**\n   * Setter for _learner_response. Does type validation to make sure response\n   * matches SCORM 2004's spec\n   * @param {string} learner_response\n   */\n  set learner_response(learner_response: string) {\n    if (this.initialized && (this._type === \"\" || this._id === \"\")) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_response\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      let nodes = [];\n      const response_type = LearnerResponses[this.type];\n\n      if (response_type) {\n        if (response_type?.delimiter) {\n          // Convert regex-style delimiter to actual character\n          const delimiter = response_type.delimiter === \"[,]\" ? \",\" : response_type.delimiter;\n          nodes = learner_response.split(delimiter);\n        } else {\n          nodes[0] = learner_response;\n        }\n\n        if (nodes.length > 0 && nodes.length <= response_type.max) {\n          const formatRegex = new RegExp(response_type.format);\n\n          for (let i = 0; i < nodes.length; i++) {\n            if (response_type?.delimiter2) {\n              // Convert regex-style delimiter to actual character\n              const delimiter2 =\n                response_type.delimiter2 === \"[.]\" ? \".\" : response_type.delimiter2;\n              const values = nodes[i].split(delimiter2);\n\n              if (values.length === 2) {\n                if (!values[0].match(formatRegex)) {\n                  throw new Scorm2004ValidationError(\n                    this._cmi_element + \".learner_response\",\n                    scorm2004_errors.TYPE_MISMATCH,\n                  );\n                } else {\n                  if (\n                    !response_type.format2 ||\n                    !values[1].match(new RegExp(response_type.format2))\n                  ) {\n                    throw new Scorm2004ValidationError(\n                      this._cmi_element + \".learner_response\",\n                      scorm2004_errors.TYPE_MISMATCH,\n                    );\n                  }\n                }\n              } else {\n                throw new Scorm2004ValidationError(\n                  this._cmi_element + \".learner_response\",\n                  scorm2004_errors.TYPE_MISMATCH,\n                );\n              }\n            } else {\n              if (!nodes[i].match(formatRegex)) {\n                throw new Scorm2004ValidationError(\n                  this._cmi_element + \".learner_response\",\n                  scorm2004_errors.TYPE_MISMATCH,\n                );\n              } else {\n                if (nodes[i] !== \"\" && response_type.unique) {\n                  for (let j = 0; j < i; j++) {\n                    if (nodes[i] === nodes[j]) {\n                      throw new Scorm2004ValidationError(\n                        this._cmi_element + \".learner_response\",\n                        scorm2004_errors.TYPE_MISMATCH,\n                      );\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          throw new Scorm2004ValidationError(\n            this._cmi_element + \".learner_response\",\n            scorm2004_errors.GENERAL_SET_FAILURE,\n          );\n        }\n\n        this._learner_response = learner_response;\n      } else {\n        throw new Scorm2004ValidationError(\n          this._cmi_element + \".learner_response\",\n          scorm2004_errors.TYPE_MISMATCH,\n        );\n      }\n    }\n  }\n\n  /**\n   * Getter for _result\n   * @return {string}\n   */\n  get result(): string {\n    return this._result;\n  }\n\n  /**\n   * Setter for _result\n   * @param {string} result\n   */\n  set result(result: string) {\n    if (check2004ValidFormat(this._cmi_element + \".result\", result, scorm2004_regex.CMIResult)) {\n      this._result = result;\n    }\n  }\n\n  /**\n   * Getter for _latency\n   * @return {string}\n   */\n  get latency(): string {\n    return this._latency;\n  }\n\n  /**\n   * Setter for _latency\n   * @param {string} latency\n   */\n  set latency(latency: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".latency\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".latency\", latency, scorm2004_regex.CMITimespan)\n      ) {\n        this._latency = latency;\n      }\n    }\n  }\n\n  /**\n   * Getter for _description\n   * @return {string}\n   */\n  get description(): string {\n    return this._description;\n  }\n\n  /**\n   * Setter for _description\n   * @param {string} description\n   */\n  set description(description: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".description\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".description\",\n          description,\n          scorm2004_regex.CMILangString250,\n          true,\n        )\n      ) {\n        this._description = description;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      type: string,\n   *      objectives: CMIArray,\n   *      timestamp: string,\n   *      correct_responses: CMIArray,\n   *      weighting: string,\n   *      learner_response: string,\n   *      result: string,\n   *      latency: string,\n   *      description: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    type: string;\n    objectives: CMIArray;\n    timestamp: string;\n    correct_responses: CMIArray;\n    weighting: string;\n    learner_response: string;\n    result: string;\n    latency: string;\n    description: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      type: this.type,\n      objectives: this.objectives,\n      timestamp: this.timestamp,\n      weighting: this.weighting,\n      learner_response: this.learner_response,\n      result: this.result,\n      latency: this.latency,\n      description: this.description,\n      correct_responses: this.correct_responses,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.objectives.n object\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  private _id = \"\";\n\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n.objectives.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._id = \"\";\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.correct_responses.n object\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  private _pattern = \"\";\n  private _parent?: CMIInteractionsObject | undefined;\n\n  /**\n   * Constructor for cmi.interactions.n.correct_responses.n\n   * @param {CMIInteractionsObject} parent - The parent interaction object\n   */\n  constructor(parent?: CMIInteractionsObject) {\n    super(\"cmi.interactions.n.correct_responses.n\");\n    this._parent = parent;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._pattern = \"\";\n  }\n\n  /**\n   * Getter for _pattern\n   * @return {string}\n   */\n  get pattern(): string {\n    return this._pattern;\n  }\n\n  /**\n   * Setter for _pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern: string) {\n    // First do basic format validation\n    if (\n      check2004ValidFormat(this._cmi_element + \".pattern\", pattern, scorm2004_regex.CMIFeedback)\n    ) {\n      // If we have a parent interaction, validate the pattern against the interaction type\n      if (this._parent && this._parent.type) {\n        const interactionType = this._parent.type;\n        const response = CorrectResponses[interactionType];\n\n        if (response) {\n          // Validate the pattern against the interaction type\n          let isValid = true;\n          let nodes = [];\n\n          if (response?.delimiter) {\n            nodes = String(pattern).split(response.delimiter);\n          } else {\n            nodes[0] = pattern;\n          }\n\n          if (nodes.length > 0 && nodes.length <= response.max) {\n            const formatRegex = new RegExp(response.format);\n\n            for (let i = 0; i < nodes.length && isValid; i++) {\n              if (response?.delimiter2) {\n                const values = nodes[i].split(response.delimiter2);\n                if (values.length === 2) {\n                  const matches = values[0].match(formatRegex);\n                  if (!matches) {\n                    isValid = false;\n                  } else if (!response.format2 || !values[1].match(new RegExp(response.format2))) {\n                    isValid = false;\n                  }\n                } else {\n                  isValid = false;\n                }\n              } else {\n                const matches = nodes[i].match(formatRegex);\n                if (\n                  (!matches && pattern !== \"\") ||\n                  (!matches && interactionType === \"true-false\")\n                ) {\n                  isValid = false;\n                }\n              }\n            }\n          } else if (nodes.length > response.max) {\n            isValid = false;\n          }\n\n          if (!isValid) {\n            throw new Scorm2004ValidationError(\n              this._cmi_element + \".pattern\",\n              scorm2004_errors.TYPE_MISMATCH,\n            );\n          }\n        }\n      }\n\n      this._pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON cmi.interactions.n.correct_responses.n object\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    pattern: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      pattern: this.pattern,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","/**\n * Class for SCORM 2004's cmi *.score object\n */\nimport { CMIScore } from \"../common/score\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\n\nexport class Scorm2004CMIScore extends CMIScore {\n  private _scaled = \"\";\n\n  /**\n   * Constructor for cmi *.score\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.score\",\n      score_children: scorm2004_constants.score_children,\n      max: \"\",\n      invalidErrorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      invalidTypeCode: scorm2004_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm2004_errors.VALUE_OUT_OF_RANGE,\n      decimalRegex: scorm2004_regex.CMIDecimal,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n    this._scaled = \"\";\n    this._raw = \"\";\n    this._min = \"\";\n    this._max = \"\";\n  }\n\n  /**\n   * Getter for _scaled\n   * @return {string}\n   */\n  get scaled(): string {\n    return this._scaled;\n  }\n\n  /**\n   * Setter for _scaled\n   * @param {string} scaled\n   */\n  set scaled(scaled: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".scaled\", scaled, scorm2004_regex.CMIDecimal) &&\n      check2004ValidRange(this._cmi_element + \".scaled\", scaled, scorm2004_regex.scaled_range)\n    ) {\n      this._scaled = scaled;\n    }\n  }\n\n  /**\n   * toJSON for cmi *.score\n   *\n   * @return {\n   *    {\n   *      scaled: string,\n   *      raw: string,\n   *      min: string,\n   *      max: string\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    scaled: string;\n    raw: string;\n    min: string;\n    max: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      scaled: this.scaled,\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_lms object\n * @extends CMIArray\n */\nexport class CMICommentsFromLMS extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_lms Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.comments_from_lms\",\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner object\n */\n\nexport class CMICommentsFromLearner extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_learner Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.comments_from_learner\",\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner.n and cmi.comments_from_lms.n object\n */\n\nexport class CMICommentsObject extends BaseCMI {\n  private _comment = \"\";\n  private _location = \"\";\n  private _timestamp = \"\";\n  private readonly _readOnlyAfterInit: boolean;\n\n  /**\n   * Constructor for cmi.comments_from_learner.n and cmi.comments_from_lms.n\n   * @param {boolean} readOnlyAfterInit\n   */\n  constructor(readOnlyAfterInit: boolean = false) {\n    super(\"cmi.comments_from_learner.n\");\n    this._comment = \"\";\n    this._location = \"\";\n    this._timestamp = \"\";\n    this._readOnlyAfterInit = readOnlyAfterInit;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _comment\n   * @return {string}\n   */\n  get comment(): string {\n    return this._comment;\n  }\n\n  /**\n   * Setter for _comment\n   * @param {string} comment\n   */\n  set comment(comment: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".comment\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".comment\",\n          comment,\n          scorm2004_regex.CMILangString4000,\n          true,\n        )\n      ) {\n        this._comment = comment;\n      }\n    }\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".location\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".location\",\n          location,\n          scorm2004_regex.CMIString250,\n        )\n      ) {\n        this._location = location;\n      }\n    }\n  }\n\n  /**\n   * Getter for _timestamp\n   * @return {string}\n   */\n  get timestamp(): string {\n    return this._timestamp;\n  }\n\n  /**\n   * Setter for _timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".timestamp\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".timestamp\", timestamp, scorm2004_regex.CMITime)\n      ) {\n        this._timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.comments_from_learner.n object\n   * @return {\n   *    {\n   *      comment: string,\n   *      location: string,\n   *      timestamp: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    comment: string;\n    location: string;\n    timestamp: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      comment: this.comment,\n      location: this.location,\n      timestamp: this.timestamp,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { Scorm2004CMIScore } from \"./score\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\n\n/**\n * Class representing SCORM 2004's `cmi.objectives` object\n * @extends CMIArray\n */\nexport class CMIObjectives extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives` Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.objectives\",\n      children: scorm2004_constants.objectives_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n\n  /**\n   * Find an objective by its ID\n   */\n  public findObjectiveById(id: string): CMIObjectivesObject | undefined {\n    return this.childArray.find((objective) => objective.id === id);\n  }\n\n  /**\n   * Find objective by its index\n   */\n  public findObjectiveByIndex(index: number): CMIObjectivesObject {\n    return this.childArray[index];\n  }\n\n  /**\n   * Set an objective at the given index\n   */\n  public setObjectiveByIndex(index: number, objective: CMIObjectivesObject) {\n    this.childArray[index] = objective;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.objectives.n object\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  private _id = \"\";\n  private _success_status = \"unknown\";\n  private _completion_status = \"unknown\";\n  private _progress_measure = \"\";\n  private _description = \"\";\n\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super(\"cmi.objectives.n\");\n    this.score = new Scorm2004CMIScore();\n  }\n\n  override reset() {\n    this._initialized = false;\n  }\n\n  public score: Scorm2004CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this._success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".success_status\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".success_status\",\n          success_status,\n          scorm2004_regex.CMISStatus,\n        )\n      ) {\n        this._success_status = success_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this._completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".completion_status\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".completion_status\",\n          completion_status,\n          scorm2004_regex.CMICStatus,\n        )\n      ) {\n        this._completion_status = completion_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this._progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".progress_measure\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".progress_measure\",\n          progress_measure,\n          scorm2004_regex.CMIDecimal,\n        ) &&\n        check2004ValidRange(\n          this._cmi_element + \".progress_measure\",\n          progress_measure,\n          scorm2004_regex.progress_range,\n        )\n      ) {\n        this._progress_measure = progress_measure;\n      }\n    }\n  }\n\n  /**\n   * Getter for _description\n   * @return {string}\n   */\n  get description(): string {\n    return this._description;\n  }\n\n  /**\n   * Setter for _description\n   * @param {string} description\n   */\n  set description(description: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".description\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".description\",\n          description,\n          scorm2004_regex.CMILangString250,\n          true,\n        )\n      ) {\n        this._description = description;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      success_status: string,\n   *      completion_status: string,\n   *      progress_measure: string,\n   *      description: string,\n   *      score: Scorm2004CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    success_status: string;\n    completion_status: string;\n    progress_measure: string;\n    description: string;\n    score: Scorm2004CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      success_status: this.success_status,\n      completion_status: this.completion_status,\n      progress_measure: this.progress_measure,\n      description: this.description,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","/**\n * Class representing metadata properties for SCORM 2004's cmi object\n */\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing metadata properties for SCORM 2004's cmi object\n */\nexport class CMIMetadata extends BaseCMI {\n  private __version = \"1.0\";\n  private __children = scorm2004_constants.cmi_children;\n\n  /**\n   * Constructor for CMIMetadata\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   */\n  get _version(): string {\n    return this.__version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version: string) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._version\",\n      scorm2004_errors.READ_ONLY_ELEMENT,\n    );\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {number} _children\n   */\n  set _children(_children: number) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._children\",\n      scorm2004_errors.READ_ONLY_ELEMENT,\n    );\n  }\n\n  /**\n   * Reset the metadata properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // No need to reset __version and __children as they are constants\n  }\n}\n","/**\n * Class representing learner properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing learner properties for SCORM 2004's cmi object\n */\nexport class CMILearner extends BaseCMI {\n  private _learner_id = \"\";\n  private _learner_name = \"\";\n\n  /**\n   * Constructor for CMILearner\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _learner_id\n   * @return {string}\n   */\n  get learner_id(): string {\n    return this._learner_id;\n  }\n\n  /**\n   * Setter for _learner_id. Can only be called before initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_id\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._learner_id = learner_id;\n    }\n  }\n\n  /**\n   * Getter for _learner_name\n   * @return {string}\n   */\n  get learner_name(): string {\n    return this._learner_name;\n  }\n\n  /**\n   * Setter for _learner_name. Can only be called before initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_name\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._learner_name = learner_name;\n    }\n  }\n\n  /**\n   * Reset the learner properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset learner_id and learner_name as they are read-only after initialization\n  }\n}\n","/**\n * Class representing status properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\n\n/**\n * Class representing status properties for SCORM 2004's cmi object\n */\nexport class CMIStatus extends BaseCMI {\n  private _completion_status = \"unknown\";\n  private _success_status = \"unknown\";\n  private _progress_measure = \"\";\n\n  /**\n   * Constructor for CMIStatus\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this._completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".completion_status\",\n        completion_status,\n        scorm2004_regex.CMICStatus,\n      )\n    ) {\n      this._completion_status = completion_status;\n    }\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this._success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".success_status\",\n        success_status,\n        scorm2004_regex.CMISStatus,\n      )\n    ) {\n      this._success_status = success_status;\n    }\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this._progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".progress_measure\",\n        progress_measure,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".progress_measure\",\n        progress_measure,\n        scorm2004_regex.progress_range,\n      )\n    ) {\n      this._progress_measure = progress_measure;\n    }\n  }\n\n  /**\n   * Reset the status properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._completion_status = \"unknown\";\n    this._success_status = \"unknown\";\n    this._progress_measure = \"\";\n  }\n}\n","/**\n * Class representing session properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\nimport * as Util from \"../../utilities\";\n\n/**\n * Class representing session properties for SCORM 2004's cmi object\n */\nexport class CMISession extends BaseCMI {\n  private _entry = \"\";\n  private _exit = \"\";\n  private _session_time = \"PT0H0M0S\";\n  private _total_time = \"\";\n\n  /**\n   * Constructor for CMISession\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this._entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".entry\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._entry = entry;\n    }\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    if (!this.jsonString) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exit\",\n        scorm2004_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    if (check2004ValidFormat(this._cmi_element + \".exit\", exit, scorm2004_regex.CMIExit, true)) {\n      this._exit = exit;\n    }\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    if (!this.jsonString) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".session_time\",\n        scorm2004_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".session_time\",\n        session_time,\n        scorm2004_regex.CMITimespan,\n      )\n    ) {\n      this._session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this._total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".total_time\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._total_time = total_time;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime(): string {\n    let sessionTime = this._session_time;\n    const startTime = this.start_time;\n\n    if (typeof startTime !== \"undefined\" && startTime !== null) {\n      const seconds = new Date().getTime() - startTime;\n      sessionTime = Util.getSecondsAsISODuration(seconds / 1000);\n    }\n\n    return Util.addTwoDurations(this._total_time, sessionTime, scorm2004_regex.CMITimespan);\n  }\n\n  /**\n   * Reset the session properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._entry = \"\";\n    this._exit = \"\";\n    this._session_time = \"PT0H0M0S\";\n    // Don't reset total_time as it's read-only after initialization\n  }\n}\n","/**\n * Class representing content properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\n\n/**\n * Class representing content properties for SCORM 2004's cmi object\n */\nexport class CMIContent extends BaseCMI {\n  private _location = \"\";\n  private _launch_data = \"\";\n  private _suspend_data = \"\";\n\n  /**\n   * Constructor for CMIContent\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".location\", location, scorm2004_regex.CMIString1000)\n    ) {\n      this._location = location;\n    }\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this._launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".launch_data\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._launch_data = launch_data;\n    }\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this._suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".suspend_data\",\n        suspend_data,\n        scorm2004_regex.CMIString64000,\n        true,\n      )\n    ) {\n      this._suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Reset the content properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._location = \"\";\n    // Don't reset launch_data as it's read-only after initialization\n    this._suspend_data = \"\";\n  }\n}\n","/**\n * Class representing settings properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing settings properties for SCORM 2004's cmi object\n */\nexport class CMISettings extends BaseCMI {\n  private _credit = \"credit\";\n  private _mode = \"normal\";\n  private _time_limit_action = \"continue,no message\";\n  private _max_time_allowed = \"\";\n\n  /**\n   * Constructor for CMISettings\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this._credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".credit\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._credit = credit;\n    }\n  }\n\n  /**\n   * Getter for _mode\n   * @return {string}\n   */\n  get mode(): string {\n    return this._mode;\n  }\n\n  /**\n   * Setter for _mode. Can only be called before initialization.\n   * @param {string} mode\n   */\n  set mode(mode: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".mode\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._mode = mode;\n    }\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this._time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".time_limit_action\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._time_limit_action = time_limit_action;\n    }\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this._max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".max_time_allowed\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._max_time_allowed = max_time_allowed;\n    }\n  }\n\n  /**\n   * Reset the settings properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset these properties as they are read-only after initialization\n  }\n}\n","/**\n * Class representing threshold properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing threshold properties for SCORM 2004's cmi object\n */\nexport class CMIThresholds extends BaseCMI {\n  private _scaled_passing_score = \"\";\n  private _completion_threshold = \"\";\n\n  /**\n   * Constructor for CMIThresholds\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score(): string {\n    return this._scaled_passing_score;\n  }\n\n  /**\n   * Setter for _scaled_passing_score. Can only be called before initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".scaled_passing_score\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._scaled_passing_score = scaled_passing_score;\n    }\n  }\n\n  /**\n   * Getter for _completion_threshold\n   * @return {string}\n   */\n  get completion_threshold(): string {\n    return this._completion_threshold;\n  }\n\n  /**\n   * Setter for _completion_threshold. Can only be called before initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".completion_threshold\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._completion_threshold = completion_threshold;\n    }\n  }\n\n  /**\n   * Reset the threshold properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset these properties as they are read-only after initialization\n  }\n}\n","import { BaseRootCMI } from \"../common/base_cmi\";\nimport { CMILearnerPreference } from \"./learner_preference\";\nimport { CMIInteractions } from \"./interactions\";\nimport { Scorm2004CMIScore } from \"./score\";\nimport { CMICommentsFromLearner, CMICommentsFromLMS } from \"./comments\";\nimport { CMIObjectives } from \"./objectives\";\nimport { CMIMetadata } from \"./metadata\";\nimport { CMILearner } from \"./learner\";\nimport { CMIStatus } from \"./status\";\nimport { CMISession } from \"./session\";\nimport { CMIContent } from \"./content\";\nimport { CMISettings } from \"./settings\";\nimport { CMIThresholds } from \"./thresholds\";\n\n/**\n * Class representing cmi object for SCORM 2004\n */\nexport class CMI extends BaseRootCMI {\n  /**\n   * Constructor for the SCORM 2004 cmi object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean = false) {\n    super(\"cmi\");\n    this.metadata = new CMIMetadata();\n    this.learner = new CMILearner();\n    this.status = new CMIStatus();\n    this.session = new CMISession();\n    this.content = new CMIContent();\n    this.settings = new CMISettings();\n    this.thresholds = new CMIThresholds();\n    this.learner_preference = new CMILearnerPreference();\n    this.score = new Scorm2004CMIScore();\n    this.comments_from_learner = new CMICommentsFromLearner();\n    this.comments_from_lms = new CMICommentsFromLMS();\n    this.interactions = new CMIInteractions();\n    this.objectives = new CMIObjectives();\n    if (initialized) this.initialize();\n  }\n\n  // New component classes\n  private metadata: CMIMetadata;\n  private learner: CMILearner;\n  private status: CMIStatus;\n  private session: CMISession;\n  private content: CMIContent;\n  private settings: CMISettings;\n  private thresholds: CMIThresholds;\n\n  // Original complex objects\n  public learner_preference: CMILearnerPreference;\n  public score: Scorm2004CMIScore;\n  public comments_from_learner: CMICommentsFromLearner;\n  public comments_from_lms: CMICommentsFromLMS;\n  public interactions: CMIInteractions;\n  public objectives: CMIObjectives;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    // Initialize new component classes\n    this.metadata?.initialize();\n    this.learner?.initialize();\n    this.status?.initialize();\n    this.session?.initialize();\n    this.content?.initialize();\n    this.settings?.initialize();\n    this.thresholds?.initialize();\n\n    // Initialize original complex objects\n    this.learner_preference?.initialize();\n    this.score?.initialize();\n    this.comments_from_learner?.initialize();\n    this.comments_from_lms?.initialize();\n    this.interactions?.initialize();\n    this.objectives?.initialize();\n  }\n\n  /**\n   * Called when API is moving to another SCO\n   */\n  reset() {\n    this._initialized = false;\n\n    // Reset new component classes\n    this.metadata?.reset();\n    this.learner?.reset();\n    this.status?.reset();\n    this.session?.reset();\n    this.content?.reset();\n    this.settings?.reset();\n    this.thresholds?.reset();\n\n    // Reset original complex objects\n    this.objectives?.reset(false);\n    this.interactions?.reset(true);\n    this.score?.reset();\n    this.comments_from_learner?.reset();\n    this.comments_from_lms?.reset();\n    this.learner_preference?.reset();\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   * @private\n   */\n  get _version(): string {\n    return this.metadata._version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   * @private\n   */\n  set _version(_version: string) {\n    this.metadata._version = _version;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.metadata._children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {number} _children\n   * @private\n   */\n  set _children(_children: number) {\n    this.metadata._children = _children;\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this.status.completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    this.status.completion_status = completion_status;\n  }\n\n  /**\n   * Getter for _completion_threshold\n   * @return {string}\n   */\n  get completion_threshold(): string {\n    return this.thresholds.completion_threshold;\n  }\n\n  /**\n   * Setter for _completion_threshold. Can only be called before initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold: string) {\n    this.thresholds.completion_threshold = completion_threshold;\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this.settings.credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    this.settings.credit = credit;\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this.session.entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    this.session.entry = entry;\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    this.session.jsonString = this.jsonString;\n    return this.session.exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    this.session.exit = exit;\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this.content.launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    this.content.launch_data = launch_data;\n  }\n\n  /**\n   * Getter for _learner_id\n   * @return {string}\n   */\n  get learner_id(): string {\n    return this.learner.learner_id;\n  }\n\n  /**\n   * Setter for _learner_id. Can only be called before initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id: string) {\n    this.learner.learner_id = learner_id;\n  }\n\n  /**\n   * Getter for _learner_name\n   * @return {string}\n   */\n  get learner_name(): string {\n    return this.learner.learner_name;\n  }\n\n  /**\n   * Setter for _learner_name. Can only be called before initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name: string) {\n    this.learner.learner_name = learner_name;\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this.content.location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    this.content.location = location;\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this.settings.max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    this.settings.max_time_allowed = max_time_allowed;\n  }\n\n  /**\n   * Getter for _mode\n   * @return {string}\n   */\n  get mode(): string {\n    return this.settings.mode;\n  }\n\n  /**\n   * Setter for _mode. Can only be called before initialization.\n   * @param {string} mode\n   */\n  set mode(mode: string) {\n    this.settings.mode = mode;\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this.status.progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    this.status.progress_measure = progress_measure;\n  }\n\n  /**\n   * Getter for _scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score(): string {\n    return this.thresholds.scaled_passing_score;\n  }\n\n  /**\n   * Setter for _scaled_passing_score. Can only be called before initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score: string) {\n    this.thresholds.scaled_passing_score = scaled_passing_score;\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    this.session.jsonString = this.jsonString;\n    return this.session.session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    this.session.session_time = session_time;\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this.status.success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    this.status.success_status = success_status;\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this.content.suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    this.content.suspend_data = suspend_data;\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this.settings.time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    this.settings.time_limit_action = time_limit_action;\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this.session.total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    this.session.total_time = total_time;\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime(): string {\n    return this.session.getCurrentTotalTime();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      comments_from_learner: CMICommentsFromLearner,\n   *      comments_from_lms: CMICommentsFromLMS,\n   *      completion_status: string,\n   *      completion_threshold: string,\n   *      credit: string,\n   *      entry: string,\n   *      exit: string,\n   *      interactions: CMIInteractions,\n   *      launch_data: string,\n   *      learner_id: string,\n   *      learner_name: string,\n   *      learner_preference: CMILearnerPreference,\n   *      location: string,\n   *      max_time_allowed: string,\n   *      mode: string,\n   *      objectives: CMIObjectives,\n   *      progress_measure: string,\n   *      scaled_passing_score: string,\n   *      score: Scorm2004CMIScore,\n   *      session_time: string,\n   *      success_status: string,\n   *      suspend_data: string,\n   *      time_limit_action: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    comments_from_learner: CMICommentsFromLearner;\n    comments_from_lms: CMICommentsFromLMS;\n    completion_status: string;\n    completion_threshold: string;\n    credit: string;\n    entry: string;\n    exit: string;\n    interactions: CMIInteractions;\n    launch_data: string;\n    learner_id: string;\n    learner_name: string;\n    learner_preference: CMILearnerPreference;\n    location: string;\n    max_time_allowed: string;\n    mode: string;\n    objectives: CMIObjectives;\n    progress_measure: string;\n    scaled_passing_score: string;\n    score: Scorm2004CMIScore;\n    session_time: string;\n    success_status: string;\n    suspend_data: string;\n    time_limit_action: string;\n  } {\n    this.jsonString = true;\n\n    // Set jsonString flag on component classes that need it\n    this.session.jsonString = true;\n\n    const result = {\n      comments_from_learner: this.comments_from_learner,\n      comments_from_lms: this.comments_from_lms,\n      completion_status: this.completion_status,\n      completion_threshold: this.completion_threshold,\n      credit: this.credit,\n      entry: this.entry,\n      exit: this.exit,\n      interactions: this.interactions,\n      launch_data: this.launch_data,\n      learner_id: this.learner_id,\n      learner_name: this.learner_name,\n      learner_preference: this.learner_preference,\n      location: this.location,\n      max_time_allowed: this.max_time_allowed,\n      mode: this.mode,\n      objectives: this.objectives,\n      progress_measure: this.progress_measure,\n      scaled_passing_score: this.scaled_passing_score,\n      score: this.score,\n      session_time: this.session_time,\n      success_status: this.success_status,\n      suspend_data: this.suspend_data,\n      time_limit_action: this.time_limit_action,\n    };\n\n    // Clean up jsonString flags\n    this.jsonString = false;\n    this.session.jsonString = false;\n\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { NAVBoolean } from \"../../constants/enums\";\nimport { CMIArray } from \"../common/array\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Sequencing } from \"./sequencing/sequencing\";\n\n/**\n * Class representing SCORM 2004's adl object\n */\nexport class ADL extends BaseCMI {\n  /**\n   * Constructor for adl\n   */\n  constructor() {\n    super(\"adl\");\n    this.nav = new ADLNav();\n    this.data = new ADLData();\n  }\n\n  public nav: ADLNav;\n  public data = new ADLData();\n  private _sequencing: Sequencing | null = null;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.nav?.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this.nav?.reset();\n  }\n\n  /**\n   * Getter for sequencing\n   * @return {Sequencing | null}\n   */\n  get sequencing(): Sequencing | null {\n    return this._sequencing;\n  }\n\n  /**\n   * Setter for sequencing\n   * @param {Sequencing | null} sequencing\n   */\n  set sequencing(sequencing: Sequencing | null) {\n    this._sequencing = sequencing;\n    if (sequencing) {\n      sequencing.adlNav = this.nav;\n      this.nav.sequencing = sequencing;\n    }\n  }\n\n  /**\n   * toJSON for adl\n   * @return {\n   *    {\n   *      nav: ADLNav,\n   *      data: ADLData\n   *    }\n   *  }\n   */\n  toJSON(): {\n    nav: ADLNav;\n    data: ADLData;\n  } {\n    this.jsonString = true;\n    const result = {\n      nav: this.nav,\n      data: this.data,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's `adl.nav` object\n */\n\nexport class ADLNav extends BaseCMI {\n  private _request = \"_none_\";\n  private _sequencing: Sequencing | null = null;\n\n  /**\n   * Constructor for `adl.nav`\n   */\n  constructor() {\n    super(\"adl.nav\");\n    this.request_valid = new ADLNavRequestValid();\n  }\n\n  public request_valid: ADLNavRequestValid;\n\n  /**\n   * Getter for sequencing\n   * @return {Sequencing | null}\n   */\n  get sequencing(): Sequencing | null {\n    return this._sequencing;\n  }\n\n  /**\n   * Setter for sequencing\n   * @param {Sequencing | null} sequencing\n   */\n  set sequencing(sequencing: Sequencing | null) {\n    this._sequencing = sequencing;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.request_valid?.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._request = \"_none_\";\n    this._sequencing = null;\n    this.request_valid?.reset();\n  }\n\n  /**\n   * Getter for _request\n   * @return {string}\n   */\n  get request(): string {\n    return this._request;\n  }\n\n  /**\n   * Setter for _request\n   * @param {string} request\n   */\n  set request(request: string) {\n    if (check2004ValidFormat(this._cmi_element + \".request\", request, scorm2004_regex.NAVEvent)) {\n      // Only process if the request is different from the current request\n      if (this._request !== request) {\n        this._request = request;\n\n        // Process the navigation request using the sequencing implementation\n        if (this._sequencing) {\n          this._sequencing.processNavigationRequest(request);\n        }\n      }\n    }\n  }\n\n  /**\n   * toJSON for adl.nav\n   *\n   * @return {\n   *    {\n   *      request: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    request: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      request: this.request,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's `adl.data` object\n */\nexport class ADLData extends CMIArray {\n  constructor() {\n    super({\n      CMIElement: \"adl.data\",\n      children: scorm2004_constants.adl_data_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's adl.data.n object\n */\nexport class ADLDataObject extends BaseCMI {\n  private _id = \"\";\n  private _store = \"\";\n\n  constructor() {\n    super(\"adl.data.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _store\n   * @return {string}\n   */\n  get store(): string {\n    return this._store;\n  }\n\n  /**\n   * Setter for _store\n   * @param {string} store\n   */\n  set store(store: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".store\", store, scorm2004_regex.CMILangString4000)\n    ) {\n      this._store = store;\n    }\n  }\n\n  /**\n   * toJSON for adl.data.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      store: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    store: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this._id,\n      store: this._store,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl.nav.request_valid object\n */\n\nexport class ADLNavRequestValid extends BaseCMI {\n  private _continue = \"unknown\";\n  private _previous = \"unknown\";\n  private _choice: {\n    [key: string]: NAVBoolean;\n  } = {};\n  private _jump: {\n    [key: string]: NAVBoolean;\n  } = {};\n\n  /**\n   * Constructor for adl.nav.request_valid\n   */\n  constructor() {\n    super(\"adl.nav.request_valid\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._continue = \"unknown\";\n    this._previous = \"unknown\";\n  }\n\n  /**\n   * Getter for _continue\n   * @return {string}\n   */\n  get continue(): string {\n    return this._continue;\n  }\n\n  /**\n   * Setter for _continue. Just throws an error.\n   * @param {string} _continue\n   */\n  set continue(_continue: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".continue\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".continue\", _continue, scorm2004_regex.NAVBoolean)\n    ) {\n      this._continue = _continue;\n    }\n  }\n\n  /**\n   * Getter for _previous\n   * @return {string}\n   */\n  get previous(): string {\n    return this._previous;\n  }\n\n  /**\n   * Setter for _previous. Just throws an error.\n   * @param {string} _previous\n   */\n  set previous(_previous: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".previous\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".previous\", _previous, scorm2004_regex.NAVBoolean)\n    ) {\n      this._previous = _previous;\n    }\n  }\n\n  /**\n   * Getter for _choice\n   * @return {{ [key: string]: NAVBoolean }}\n   */\n  get choice(): { [key: string]: NAVBoolean } {\n    return this._choice;\n  }\n\n  /**\n   * Setter for _choice\n   * @param {{ [key: string]: string }} choice\n   */\n  set choice(choice: { [key: string]: string }) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".choice\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (typeof choice !== \"object\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".choice\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    for (const key in choice) {\n      if ({}.hasOwnProperty.call(choice, key)) {\n        if (\n          check2004ValidFormat(\n            this._cmi_element + \".choice.\" + key,\n            choice[key],\n            scorm2004_regex.NAVBoolean,\n          ) &&\n          check2004ValidFormat(this._cmi_element + \".choice.\" + key, key, scorm2004_regex.NAVTarget)\n        ) {\n          // Convert string value to NAVBoolean enum value\n          const value = choice[key];\n          if (value === \"true\") {\n            this._choice[key] = NAVBoolean.TRUE;\n          } else if (value === \"false\") {\n            this._choice[key] = NAVBoolean.FALSE;\n          } else if (value === \"unknown\") {\n            this._choice[key] = NAVBoolean.UNKNOWN;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Getter for _jump\n   * @return {{ [key: string]: NAVBoolean }}\n   */\n  get jump(): { [key: string]: NAVBoolean } {\n    return this._jump;\n  }\n\n  /**\n   * Setter for _jump\n   * @param {{ [key: string]: string }} jump\n   */\n  set jump(jump: { [key: string]: string }) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".jump\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (typeof jump !== \"object\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".jump\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    for (const key in jump) {\n      if ({}.hasOwnProperty.call(jump, key)) {\n        if (\n          check2004ValidFormat(\n            this._cmi_element + \".jump.\" + key,\n            jump[key],\n            scorm2004_regex.NAVBoolean,\n          ) &&\n          check2004ValidFormat(this._cmi_element + \".jump.\" + key, key, scorm2004_regex.NAVTarget)\n        ) {\n          // Convert string value to NAVBoolean enum value\n          const value = jump[key];\n          if (value === \"true\") {\n            this._jump[key] = NAVBoolean.TRUE;\n          } else if (value === \"false\") {\n            this._jump[key] = NAVBoolean.FALSE;\n          } else if (value === \"unknown\") {\n            this._jump[key] = NAVBoolean.UNKNOWN;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * toJSON for adl.nav.request_valid\n   *\n   * @return {\n   *    {\n   *      previous: string,\n   *      continue: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    previous: string;\n    continue: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      previous: this._previous,\n      continue: this._continue,\n      choice: this._choice,\n      jump: this._jump,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Enum for rule condition operators\n */\nexport enum RuleConditionOperator {\n  NOT = \"not\",\n  AND = \"and\",\n  OR = \"or\",\n}\n\n/**\n * Enum for rule condition types\n */\nexport enum RuleConditionType {\n  SATISFIED = \"satisfied\",\n  OBJECTIVE_STATUS_KNOWN = \"objectiveStatusKnown\",\n  OBJECTIVE_MEASURE_KNOWN = \"objectiveMeasureKnown\",\n  OBJECTIVE_MEASURE_GREATER_THAN = \"objectiveMeasureGreaterThan\",\n  OBJECTIVE_MEASURE_LESS_THAN = \"objectiveMeasureLessThan\",\n  COMPLETED = \"completed\",\n  PROGRESS_KNOWN = \"progressKnown\",\n  ATTEMPTED = \"attempted\",\n  ATTEMPT_LIMIT_EXCEEDED = \"attemptLimitExceeded\",\n  TIME_LIMIT_EXCEEDED = \"timeLimitExceeded\",\n  OUTSIDE_AVAILABLE_TIME_RANGE = \"outsideAvailableTimeRange\",\n  ALWAYS = \"always\",\n}\n\n/**\n * Enum for rule action types\n */\nexport enum RuleActionType {\n  SKIP = \"skip\",\n  DISABLED = \"disabled\",\n  HIDE_FROM_CHOICE = \"hideFromChoice\",\n  STOP_FORWARD_TRAVERSAL = \"stopForwardTraversal\",\n  EXIT_PARENT = \"exitParent\",\n  EXIT_ALL = \"exitAll\",\n  RETRY = \"retry\",\n  RETRY_ALL = \"retryAll\",\n  CONTINUE = \"continue\",\n  PREVIOUS = \"previous\",\n  EXIT = \"exit\",\n}\n\n/**\n * Class representing a sequencing rule condition\n */\nexport class RuleCondition extends BaseCMI {\n  private _condition: RuleConditionType = RuleConditionType.ALWAYS;\n  private _operator: RuleConditionOperator | null = null;\n  private _parameters: Map<string, any> = new Map();\n\n  /**\n   * Constructor for RuleCondition\n   * @param {RuleConditionType} condition - The condition type\n   * @param {RuleConditionOperator | null} operator - The operator (null for no operator)\n   * @param {Map<string, any>} parameters - Additional parameters for the condition\n   */\n  constructor(\n    condition: RuleConditionType = RuleConditionType.ALWAYS,\n    operator: RuleConditionOperator | null = null,\n    parameters: Map<string, any> = new Map(),\n  ) {\n    super(\"ruleCondition\");\n    this._condition = condition;\n    this._operator = operator;\n    this._parameters = parameters;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for condition\n   * @return {RuleConditionType}\n   */\n  get condition(): RuleConditionType {\n    return this._condition;\n  }\n\n  /**\n   * Setter for condition\n   * @param {RuleConditionType} condition\n   */\n  set condition(condition: RuleConditionType) {\n    this._condition = condition;\n  }\n\n  /**\n   * Getter for operator\n   * @return {RuleConditionOperator | null}\n   */\n  get operator(): RuleConditionOperator | null {\n    return this._operator;\n  }\n\n  /**\n   * Setter for operator\n   * @param {RuleConditionOperator | null} operator\n   */\n  set operator(operator: RuleConditionOperator | null) {\n    this._operator = operator;\n  }\n\n  /**\n   * Getter for parameters\n   * @return {Map<string, any>}\n   */\n  get parameters(): Map<string, any> {\n    return this._parameters;\n  }\n\n  /**\n   * Setter for parameters\n   * @param {Map<string, any>} parameters\n   */\n  set parameters(parameters: Map<string, any>) {\n    this._parameters = parameters;\n  }\n\n  /**\n   * Evaluate the condition for an activity\n   * @param {Activity} activity - The activity to evaluate the condition for\n   * @return {boolean} - True if the condition is met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    switch (this._condition) {\n      case RuleConditionType.SATISFIED:\n        return activity.successStatus === SuccessStatus.PASSED;\n      case RuleConditionType.OBJECTIVE_STATUS_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RuleConditionType.OBJECTIVE_MEASURE_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RuleConditionType.OBJECTIVE_MEASURE_GREATER_THAN: {\n        const greaterThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure > greaterThanValue\n        );\n      }\n      case RuleConditionType.OBJECTIVE_MEASURE_LESS_THAN: {\n        const lessThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure < lessThanValue\n        );\n      }\n      case RuleConditionType.COMPLETED:\n        return activity.isCompleted;\n      case RuleConditionType.PROGRESS_KNOWN:\n        return activity.completionStatus !== \"unknown\";\n      case RuleConditionType.ATTEMPTED:\n        return activity.attemptCount > 0;\n      case RuleConditionType.ATTEMPT_LIMIT_EXCEEDED: {\n        const attemptLimit = this._parameters.get(\"attemptLimit\") || 0;\n        return attemptLimit > 0 && activity.attemptCount >= attemptLimit;\n      }\n      case RuleConditionType.TIME_LIMIT_EXCEEDED:\n        // Time limit exceeded would require additional tracking\n        return false;\n      case RuleConditionType.OUTSIDE_AVAILABLE_TIME_RANGE:\n        // Outside available time range would require additional tracking\n        return false;\n      case RuleConditionType.ALWAYS:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RuleCondition\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      condition: this._condition,\n      operator: this._operator,\n      parameters: Object.fromEntries(this._parameters),\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a sequencing rule\n */\nexport class SequencingRule extends BaseCMI {\n  private _conditions: RuleCondition[] = [];\n  private _action: RuleActionType = RuleActionType.SKIP;\n  private _conditionCombination: RuleConditionOperator = RuleConditionOperator.AND;\n\n  /**\n   * Constructor for SequencingRule\n   * @param {RuleActionType} action - The action to take when the rule conditions are met\n   * @param {RuleConditionOperator} conditionCombination - How to combine multiple conditions\n   */\n  constructor(\n    action: RuleActionType = RuleActionType.SKIP,\n    conditionCombination: RuleConditionOperator = RuleConditionOperator.AND,\n  ) {\n    super(\"sequencingRule\");\n    this._action = action;\n    this._conditionCombination = conditionCombination;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._conditions = [];\n  }\n\n  /**\n   * Getter for conditions\n   * @return {RuleCondition[]}\n   */\n  get conditions(): RuleCondition[] {\n    return this._conditions;\n  }\n\n  /**\n   * Add a condition to the rule\n   * @param {RuleCondition} condition - The condition to add\n   */\n  addCondition(condition: RuleCondition): void {\n    if (!(condition instanceof RuleCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._conditions.push(condition);\n  }\n\n  /**\n   * Remove a condition from the rule\n   * @param {RuleCondition} condition - The condition to remove\n   * @return {boolean} - True if the condition was removed, false otherwise\n   */\n  removeCondition(condition: RuleCondition): boolean {\n    const index = this._conditions.indexOf(condition);\n    if (index !== -1) {\n      this._conditions.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for action\n   * @return {RuleActionType}\n   */\n  get action(): RuleActionType {\n    return this._action;\n  }\n\n  /**\n   * Setter for action\n   * @param {RuleActionType} action\n   */\n  set action(action: RuleActionType) {\n    this._action = action;\n  }\n\n  /**\n   * Getter for conditionCombination\n   * @return {RuleConditionOperator}\n   */\n  get conditionCombination(): RuleConditionOperator {\n    return this._conditionCombination;\n  }\n\n  /**\n   * Setter for conditionCombination\n   * @param {RuleConditionOperator} conditionCombination\n   */\n  set conditionCombination(conditionCombination: RuleConditionOperator) {\n    this._conditionCombination = conditionCombination;\n  }\n\n  /**\n   * Evaluate the rule for an activity\n   * @param {Activity} activity - The activity to evaluate the rule for\n   * @return {boolean} - True if the rule conditions are met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    if (this._conditions.length === 0) {\n      return true;\n    }\n\n    if (this._conditionCombination === RuleConditionOperator.AND) {\n      return this._conditions.every((condition) => condition.evaluate(activity));\n    } else if (this._conditionCombination === RuleConditionOperator.OR) {\n      return this._conditions.some((condition) => condition.evaluate(activity));\n    }\n\n    return false;\n  }\n\n  /**\n   * toJSON for SequencingRule\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      conditions: this._conditions,\n      action: this._action,\n      conditionCombination: this._conditionCombination,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a collection of sequencing rules\n */\nexport class SequencingRules extends BaseCMI {\n  private _preConditionRules: SequencingRule[] = [];\n  private _exitConditionRules: SequencingRule[] = [];\n  private _postConditionRules: SequencingRule[] = [];\n\n  /**\n   * Constructor for SequencingRules\n   */\n  constructor() {\n    super(\"sequencingRules\");\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._preConditionRules = [];\n    this._exitConditionRules = [];\n    this._postConditionRules = [];\n  }\n\n  /**\n   * Getter for preConditionRules\n   * @return {SequencingRule[]}\n   */\n  get preConditionRules(): SequencingRule[] {\n    return this._preConditionRules;\n  }\n\n  /**\n   * Add a pre-condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addPreConditionRule(rule: SequencingRule): void {\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".preConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._preConditionRules.push(rule);\n  }\n\n  /**\n   * Getter for exitConditionRules\n   * @return {SequencingRule[]}\n   */\n  get exitConditionRules(): SequencingRule[] {\n    return this._exitConditionRules;\n  }\n\n  /**\n   * Add an exit condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addExitConditionRule(rule: SequencingRule): void {\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exitConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._exitConditionRules.push(rule);\n  }\n\n  /**\n   * Getter for postConditionRules\n   * @return {SequencingRule[]}\n   */\n  get postConditionRules(): SequencingRule[] {\n    return this._postConditionRules;\n  }\n\n  /**\n   * Add a post-condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addPostConditionRule(rule: SequencingRule): void {\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".postConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._postConditionRules.push(rule);\n  }\n\n  /**\n   * Evaluate pre-condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluatePreConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._preConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Evaluate exit condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluateExitConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._exitConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Evaluate post-condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluatePostConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._postConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * toJSON for SequencingRules\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      preConditionRules: this._preConditionRules,\n      exitConditionRules: this._exitConditionRules,\n      postConditionRules: this._postConditionRules,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { CompletionStatus, SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Enum for rollup action types\n */\nexport enum RollupActionType {\n  SATISFIED = \"satisfied\",\n  NOT_SATISFIED = \"notSatisfied\",\n  COMPLETED = \"completed\",\n  INCOMPLETE = \"incomplete\",\n}\n\n/**\n * Enum for rollup condition types\n */\nexport enum RollupConditionType {\n  SATISFIED = \"satisfied\",\n  OBJECTIVE_STATUS_KNOWN = \"objectiveStatusKnown\",\n  OBJECTIVE_MEASURE_KNOWN = \"objectiveMeasureKnown\",\n  OBJECTIVE_MEASURE_GREATER_THAN = \"objectiveMeasureGreaterThan\",\n  OBJECTIVE_MEASURE_LESS_THAN = \"objectiveMeasureLessThan\",\n  COMPLETED = \"completed\",\n  PROGRESS_KNOWN = \"progressKnown\",\n  ATTEMPTED = \"attempted\",\n  NOT_ATTEMPTED = \"notAttempted\",\n  ALWAYS = \"always\",\n}\n\n/**\n * Enum for rollup consideration types\n */\nexport enum RollupConsiderationType {\n  ALL = \"all\",\n  ANY = \"any\",\n  NONE = \"none\",\n  AT_LEAST_COUNT = \"atLeastCount\",\n  AT_LEAST_PERCENT = \"atLeastPercent\",\n}\n\n/**\n * Class representing a rollup condition\n */\nexport class RollupCondition extends BaseCMI {\n  private _condition: RollupConditionType = RollupConditionType.ALWAYS;\n  private _parameters: Map<string, any> = new Map();\n\n  /**\n   * Constructor for RollupCondition\n   * @param {RollupConditionType} condition - The condition type\n   * @param {Map<string, any>} parameters - Additional parameters for the condition\n   */\n  constructor(\n    condition: RollupConditionType = RollupConditionType.ALWAYS,\n    parameters: Map<string, any> = new Map(),\n  ) {\n    super(\"rollupCondition\");\n    this._condition = condition;\n    this._parameters = parameters;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for condition\n   * @return {RollupConditionType}\n   */\n  get condition(): RollupConditionType {\n    return this._condition;\n  }\n\n  /**\n   * Setter for condition\n   * @param {RollupConditionType} condition\n   */\n  set condition(condition: RollupConditionType) {\n    this._condition = condition;\n  }\n\n  /**\n   * Getter for parameters\n   * @return {Map<string, any>}\n   */\n  get parameters(): Map<string, any> {\n    return this._parameters;\n  }\n\n  /**\n   * Setter for parameters\n   * @param {Map<string, any>} parameters\n   */\n  set parameters(parameters: Map<string, any>) {\n    this._parameters = parameters;\n  }\n\n  /**\n   * Evaluate the condition for an activity\n   * @param {Activity} activity - The activity to evaluate the condition for\n   * @return {boolean} - True if the condition is met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    switch (this._condition) {\n      case RollupConditionType.SATISFIED:\n        return activity.successStatus === SuccessStatus.PASSED;\n      case RollupConditionType.OBJECTIVE_STATUS_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RollupConditionType.OBJECTIVE_MEASURE_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RollupConditionType.OBJECTIVE_MEASURE_GREATER_THAN: {\n        const greaterThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure > greaterThanValue\n        );\n      }\n      case RollupConditionType.OBJECTIVE_MEASURE_LESS_THAN: {\n        const lessThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure < lessThanValue\n        );\n      }\n      case RollupConditionType.COMPLETED:\n        return activity.isCompleted;\n      case RollupConditionType.PROGRESS_KNOWN:\n        return activity.completionStatus !== CompletionStatus.UNKNOWN;\n      case RollupConditionType.ATTEMPTED:\n        return activity.attemptCount > 0;\n      case RollupConditionType.NOT_ATTEMPTED:\n        return activity.attemptCount === 0;\n      case RollupConditionType.ALWAYS:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RollupCondition\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      condition: this._condition,\n      parameters: Object.fromEntries(this._parameters),\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a rollup rule\n */\nexport class RollupRule extends BaseCMI {\n  private _conditions: RollupCondition[] = [];\n  private _action: RollupActionType = RollupActionType.SATISFIED;\n  private _consideration: RollupConsiderationType = RollupConsiderationType.ALL;\n  private _minimumCount: number = 0;\n  private _minimumPercent: number = 0;\n\n  /**\n   * Constructor for RollupRule\n   * @param {RollupActionType} action - The action to take when the rule conditions are met\n   * @param {RollupConsiderationType} consideration - How to consider child activities\n   * @param {number} minimumCount - The minimum count for AT_LEAST_COUNT consideration\n   * @param {number} minimumPercent - The minimum percent for AT_LEAST_PERCENT consideration\n   */\n  constructor(\n    action: RollupActionType = RollupActionType.SATISFIED,\n    consideration: RollupConsiderationType = RollupConsiderationType.ALL,\n    minimumCount: number = 0,\n    minimumPercent: number = 0,\n  ) {\n    super(\"rollupRule\");\n    this._action = action;\n    this._consideration = consideration;\n    this._minimumCount = minimumCount;\n    this._minimumPercent = minimumPercent;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._conditions = [];\n  }\n\n  /**\n   * Getter for conditions\n   * @return {RollupCondition[]}\n   */\n  get conditions(): RollupCondition[] {\n    return this._conditions;\n  }\n\n  /**\n   * Add a condition to the rule\n   * @param {RollupCondition} condition - The condition to add\n   */\n  addCondition(condition: RollupCondition): void {\n    if (!(condition instanceof RollupCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._conditions.push(condition);\n  }\n\n  /**\n   * Remove a condition from the rule\n   * @param {RollupCondition} condition - The condition to remove\n   * @return {boolean} - True if the condition was removed, false otherwise\n   */\n  removeCondition(condition: RollupCondition): boolean {\n    const index = this._conditions.indexOf(condition);\n    if (index !== -1) {\n      this._conditions.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for action\n   * @return {RollupActionType}\n   */\n  get action(): RollupActionType {\n    return this._action;\n  }\n\n  /**\n   * Setter for action\n   * @param {RollupActionType} action\n   */\n  set action(action: RollupActionType) {\n    this._action = action;\n  }\n\n  /**\n   * Getter for consideration\n   * @return {RollupConsiderationType}\n   */\n  get consideration(): RollupConsiderationType {\n    return this._consideration;\n  }\n\n  /**\n   * Setter for consideration\n   * @param {RollupConsiderationType} consideration\n   */\n  set consideration(consideration: RollupConsiderationType) {\n    this._consideration = consideration;\n  }\n\n  /**\n   * Getter for minimumCount\n   * @return {number}\n   */\n  get minimumCount(): number {\n    return this._minimumCount;\n  }\n\n  /**\n   * Setter for minimumCount\n   * @param {number} minimumCount\n   */\n  set minimumCount(minimumCount: number) {\n    if (minimumCount >= 0) {\n      this._minimumCount = minimumCount;\n    }\n  }\n\n  /**\n   * Getter for minimumPercent\n   * @return {number}\n   */\n  get minimumPercent(): number {\n    return this._minimumPercent;\n  }\n\n  /**\n   * Setter for minimumPercent\n   * @param {number} minimumPercent\n   */\n  set minimumPercent(minimumPercent: number) {\n    if (minimumPercent >= 0 && minimumPercent <= 100) {\n      this._minimumPercent = minimumPercent;\n    }\n  }\n\n  /**\n   * Evaluate the rule for a set of child activities\n   * @param {Activity[]} children - The child activities to evaluate the rule for\n   * @return {boolean} - True if the rule conditions are met, false otherwise\n   */\n  evaluate(children: Activity[]): boolean {\n    if (children.length === 0) {\n      return false;\n    }\n\n    // Filter children that meet all conditions\n    const matchingChildren = children.filter((child) => {\n      return this._conditions.every((condition) => condition.evaluate(child));\n    });\n\n    // Apply consideration\n    switch (this._consideration) {\n      case RollupConsiderationType.ALL:\n        return matchingChildren.length === children.length;\n      case RollupConsiderationType.ANY:\n        return matchingChildren.length > 0;\n      case RollupConsiderationType.NONE:\n        return matchingChildren.length === 0;\n      case RollupConsiderationType.AT_LEAST_COUNT:\n        return matchingChildren.length >= this._minimumCount;\n      case RollupConsiderationType.AT_LEAST_PERCENT: {\n        const percent = (matchingChildren.length / children.length) * 100;\n        return percent >= this._minimumPercent;\n      }\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RollupRule\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      conditions: this._conditions,\n      action: this._action,\n      consideration: this._consideration,\n      minimumCount: this._minimumCount,\n      minimumPercent: this._minimumPercent,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a collection of rollup rules\n */\nexport class RollupRules extends BaseCMI {\n  private _rules: RollupRule[] = [];\n\n  /**\n   * Constructor for RollupRules\n   */\n  constructor() {\n    super(\"rollupRules\");\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._rules = [];\n  }\n\n  /**\n   * Getter for rules\n   * @return {RollupRule[]}\n   */\n  get rules(): RollupRule[] {\n    return this._rules;\n  }\n\n  /**\n   * Add a rule\n   * @param {RollupRule} rule - The rule to add\n   */\n  addRule(rule: RollupRule): void {\n    if (!(rule instanceof RollupRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".rules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._rules.push(rule);\n  }\n\n  /**\n   * Remove a rule\n   * @param {RollupRule} rule - The rule to remove\n   * @return {boolean} - True if the rule was removed, false otherwise\n   */\n  removeRule(rule: RollupRule): boolean {\n    const index = this._rules.indexOf(rule);\n    if (index !== -1) {\n      this._rules.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Process rollup for an activity\n   * @param {Activity} activity - The activity to process rollup for\n   */\n  processRollup(activity: Activity): void {\n    if (!activity || activity.children.length === 0) {\n      return;\n    }\n\n    const children = activity.children;\n    let completionRollup = false;\n    let successRollup = false;\n\n    // Process each rule\n    for (const rule of this._rules) {\n      if (rule.evaluate(children)) {\n        switch (rule.action) {\n          case RollupActionType.SATISFIED:\n            activity.successStatus = SuccessStatus.PASSED;\n            successRollup = true;\n            break;\n          case RollupActionType.NOT_SATISFIED:\n            activity.successStatus = SuccessStatus.FAILED;\n            successRollup = true;\n            break;\n          case RollupActionType.COMPLETED:\n            activity.completionStatus = CompletionStatus.COMPLETED;\n            activity.isCompleted = true;\n            completionRollup = true;\n            break;\n          case RollupActionType.INCOMPLETE:\n            activity.completionStatus = CompletionStatus.INCOMPLETE;\n            activity.isCompleted = false;\n            completionRollup = true;\n            break;\n        }\n      }\n    }\n\n    // If no rules applied for completion, use default rollup\n    if (!completionRollup) {\n      this._defaultCompletionRollup(activity, children);\n    }\n\n    // If no rules applied for success, use default rollup\n    if (!successRollup) {\n      this._defaultSuccessRollup(activity, children);\n    }\n  }\n\n  /**\n   * Default completion rollup\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @private\n   */\n  private _defaultCompletionRollup(activity: Activity, children: Activity[]): void {\n    // If all children are completed, mark the parent as completed\n    const allCompleted = children.every((child) => child.isCompleted);\n    if (allCompleted) {\n      activity.completionStatus = CompletionStatus.COMPLETED;\n      activity.isCompleted = true;\n    } else {\n      // If any child is incomplete, mark the parent as incomplete\n      const anyIncomplete = children.some(\n        (child) => child.completionStatus === CompletionStatus.INCOMPLETE,\n      );\n      if (anyIncomplete) {\n        activity.completionStatus = CompletionStatus.INCOMPLETE;\n        activity.isCompleted = false;\n      }\n    }\n  }\n\n  /**\n   * Default success rollup\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @private\n   */\n  private _defaultSuccessRollup(activity: Activity, children: Activity[]): void {\n    // If all children are satisfied, mark the parent as satisfied\n    const allSatisfied = children.every((child) => child.successStatus === SuccessStatus.PASSED);\n    if (allSatisfied) {\n      activity.successStatus = SuccessStatus.PASSED;\n    } else {\n      // If any child is not satisfied, mark the parent as not satisfied\n      const anyNotSatisfied = children.some(\n        (child) => child.successStatus === SuccessStatus.FAILED,\n      );\n      if (anyNotSatisfied) {\n        activity.successStatus = SuccessStatus.FAILED;\n      }\n    }\n  }\n\n  /**\n   * toJSON for RollupRules\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      rules: this._rules,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","const ValidLanguages: string[] = [\n  \"aa\",\n  \"ab\",\n  \"ae\",\n  \"af\",\n  \"ak\",\n  \"am\",\n  \"an\",\n  \"ar\",\n  \"as\",\n  \"av\",\n  \"ay\",\n  \"az\",\n  \"ba\",\n  \"be\",\n  \"bg\",\n  \"bh\",\n  \"bi\",\n  \"bm\",\n  \"bn\",\n  \"bo\",\n  \"br\",\n  \"bs\",\n  \"ca\",\n  \"ce\",\n  \"ch\",\n  \"co\",\n  \"cr\",\n  \"cs\",\n  \"cu\",\n  \"cv\",\n  \"cy\",\n  \"da\",\n  \"de\",\n  \"dv\",\n  \"dz\",\n  \"ee\",\n  \"el\",\n  \"en\",\n  \"eo\",\n  \"es\",\n  \"et\",\n  \"eu\",\n  \"fa\",\n  \"ff\",\n  \"fi\",\n  \"fj\",\n  \"fo\",\n  \"fr\",\n  \"fy\",\n  \"ga\",\n  \"gd\",\n  \"gl\",\n  \"gn\",\n  \"gu\",\n  \"gv\",\n  \"ha\",\n  \"he\",\n  \"hi\",\n  \"ho\",\n  \"hr\",\n  \"ht\",\n  \"hu\",\n  \"hy\",\n  \"hz\",\n  \"ia\",\n  \"id\",\n  \"ie\",\n  \"ig\",\n  \"ii\",\n  \"ik\",\n  \"io\",\n  \"is\",\n  \"it\",\n  \"iu\",\n  \"ja\",\n  \"jv\",\n  \"ka\",\n  \"kg\",\n  \"ki\",\n  \"kj\",\n  \"kk\",\n  \"kl\",\n  \"km\",\n  \"kn\",\n  \"ko\",\n  \"kr\",\n  \"ks\",\n  \"ku\",\n  \"kv\",\n  \"kw\",\n  \"ky\",\n  \"la\",\n  \"lb\",\n  \"lg\",\n  \"li\",\n  \"ln\",\n  \"lo\",\n  \"lt\",\n  \"lu\",\n  \"lv\",\n  \"mg\",\n  \"mh\",\n  \"mi\",\n  \"mk\",\n  \"ml\",\n  \"mn\",\n  \"mo\",\n  \"mr\",\n  \"ms\",\n  \"mt\",\n  \"my\",\n  \"na\",\n  \"nb\",\n  \"nd\",\n  \"ne\",\n  \"ng\",\n  \"nl\",\n  \"nn\",\n  \"no\",\n  \"nr\",\n  \"nv\",\n  \"ny\",\n  \"oc\",\n  \"oj\",\n  \"om\",\n  \"or\",\n  \"os\",\n  \"pa\",\n  \"pi\",\n  \"pl\",\n  \"ps\",\n  \"pt\",\n  \"qu\",\n  \"rm\",\n  \"rn\",\n  \"ro\",\n  \"ru\",\n  \"rw\",\n  \"sa\",\n  \"sc\",\n  \"sd\",\n  \"se\",\n  \"sg\",\n  \"sh\",\n  \"si\",\n  \"sk\",\n  \"sl\",\n  \"sm\",\n  \"sn\",\n  \"so\",\n  \"sq\",\n  \"sr\",\n  \"ss\",\n  \"st\",\n  \"su\",\n  \"sv\",\n  \"sw\",\n  \"ta\",\n  \"te\",\n  \"tg\",\n  \"th\",\n  \"ti\",\n  \"tk\",\n  \"tl\",\n  \"tn\",\n  \"to\",\n  \"tr\",\n  \"ts\",\n  \"tt\",\n  \"tw\",\n  \"ty\",\n  \"ug\",\n  \"uk\",\n  \"ur\",\n  \"uz\",\n  \"ve\",\n  \"vi\",\n  \"vo\",\n  \"wa\",\n  \"wo\",\n  \"xh\",\n  \"yi\",\n  \"yo\",\n  \"za\",\n  \"zh\",\n  \"zu\",\n  \"aar\",\n  \"abk\",\n  \"ave\",\n  \"afr\",\n  \"aka\",\n  \"amh\",\n  \"arg\",\n  \"ara\",\n  \"asm\",\n  \"ava\",\n  \"aym\",\n  \"aze\",\n  \"bak\",\n  \"bel\",\n  \"bul\",\n  \"bih\",\n  \"bis\",\n  \"bam\",\n  \"ben\",\n  \"tib\",\n  \"bod\",\n  \"bre\",\n  \"bos\",\n  \"cat\",\n  \"che\",\n  \"cha\",\n  \"cos\",\n  \"cre\",\n  \"cze\",\n  \"ces\",\n  \"chu\",\n  \"chv\",\n  \"wel\",\n  \"cym\",\n  \"dan\",\n  \"ger\",\n  \"deu\",\n  \"div\",\n  \"dzo\",\n  \"ewe\",\n  \"gre\",\n  \"ell\",\n  \"eng\",\n  \"epo\",\n  \"spa\",\n  \"est\",\n  \"baq\",\n  \"eus\",\n  \"per\",\n  \"fas\",\n  \"ful\",\n  \"fin\",\n  \"fij\",\n  \"fao\",\n  \"fre\",\n  \"fra\",\n  \"fry\",\n  \"gle\",\n  \"gla\",\n  \"glg\",\n  \"grn\",\n  \"guj\",\n  \"glv\",\n  \"hau\",\n  \"heb\",\n  \"hin\",\n  \"hmo\",\n  \"hrv\",\n  \"hat\",\n  \"hun\",\n  \"arm\",\n  \"hye\",\n  \"her\",\n  \"ina\",\n  \"ind\",\n  \"ile\",\n  \"ibo\",\n  \"iii\",\n  \"ipk\",\n  \"ido\",\n  \"ice\",\n  \"isl\",\n  \"ita\",\n  \"iku\",\n  \"jpn\",\n  \"jav\",\n  \"geo\",\n  \"kat\",\n  \"kon\",\n  \"kik\",\n  \"kua\",\n  \"kaz\",\n  \"kal\",\n  \"khm\",\n  \"kan\",\n  \"kor\",\n  \"kau\",\n  \"kas\",\n  \"kur\",\n  \"kom\",\n  \"cor\",\n  \"kir\",\n  \"lat\",\n  \"ltz\",\n  \"lug\",\n  \"lim\",\n  \"lin\",\n  \"lao\",\n  \"lit\",\n  \"lub\",\n  \"lav\",\n  \"mlg\",\n  \"mah\",\n  \"mao\",\n  \"mri\",\n  \"mac\",\n  \"mkd\",\n  \"mal\",\n  \"mon\",\n  \"mol\",\n  \"mar\",\n  \"may\",\n  \"msa\",\n  \"mlt\",\n  \"bur\",\n  \"mya\",\n  \"nau\",\n  \"nob\",\n  \"nde\",\n  \"nep\",\n  \"ndo\",\n  \"dut\",\n  \"nld\",\n  \"nno\",\n  \"nor\",\n  \"nbl\",\n  \"nav\",\n  \"nya\",\n  \"oci\",\n  \"oji\",\n  \"orm\",\n  \"ori\",\n  \"oss\",\n  \"pan\",\n  \"pli\",\n  \"pol\",\n  \"pus\",\n  \"por\",\n  \"que\",\n  \"roh\",\n  \"run\",\n  \"rum\",\n  \"ron\",\n  \"rus\",\n  \"kin\",\n  \"san\",\n  \"srd\",\n  \"snd\",\n  \"sme\",\n  \"sag\",\n  \"slo\",\n  \"sin\",\n  \"slk\",\n  \"slv\",\n  \"smo\",\n  \"sna\",\n  \"som\",\n  \"alb\",\n  \"sqi\",\n  \"srp\",\n  \"ssw\",\n  \"sot\",\n  \"sun\",\n  \"swe\",\n  \"swa\",\n  \"tam\",\n  \"tel\",\n  \"tgk\",\n  \"tha\",\n  \"tir\",\n  \"tuk\",\n  \"tgl\",\n  \"tsn\",\n  \"ton\",\n  \"tur\",\n  \"tso\",\n  \"tat\",\n  \"twi\",\n  \"tah\",\n  \"uig\",\n  \"ukr\",\n  \"urd\",\n  \"uzb\",\n  \"ven\",\n  \"vie\",\n  \"vol\",\n  \"wln\",\n  \"wol\",\n  \"xho\",\n  \"yid\",\n  \"yor\",\n  \"zha\",\n  \"chi\",\n  \"zho\",\n  \"zul\",\n];\nexport default ValidLanguages;\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { scorm2004_regex } from \"../../../constants/regex\";\nimport { check2004ValidFormat } from \"../validation\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { CompletionStatus, SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Class representing a single activity in the SCORM 2004 activity tree\n */\nexport class Activity extends BaseCMI {\n  private _id: string = \"\";\n  private _title: string = \"\";\n  private _children: Activity[] = [];\n  private _parent: Activity | null = null;\n  private _isVisible: boolean = true;\n  private _isActive: boolean = false;\n  private _isSuspended: boolean = false;\n  private _isCompleted: boolean = false;\n  private _completionStatus: CompletionStatus = CompletionStatus.UNKNOWN;\n  private _successStatus: SuccessStatus = SuccessStatus.UNKNOWN;\n  private _attemptCount: number = 0;\n  private _attemptCompletionAmount: number = 0;\n  private _attemptAbsoluteDuration: string = \"PT0H0M0S\";\n  private _attemptExperiencedDuration: string = \"PT0H0M0S\";\n  private _activityAbsoluteDuration: string = \"PT0H0M0S\";\n  private _activityExperiencedDuration: string = \"PT0H0M0S\";\n  private _objectiveSatisfiedStatus: boolean = false;\n  private _objectiveMeasureStatus: boolean = false;\n  private _objectiveNormalizedMeasure: number = 0;\n\n  /**\n   * Constructor for Activity\n   * @param {string} id - The unique identifier for this activity\n   * @param {string} title - The title of this activity\n   */\n  constructor(id: string = \"\", title: string = \"\") {\n    super(\"activity\");\n    this._id = id;\n    this._title = title;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    // Initialize children\n    for (const child of this._children) {\n      child.initialize();\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._isActive = false;\n    this._isSuspended = false;\n    this._isCompleted = false;\n    this._completionStatus = CompletionStatus.UNKNOWN;\n    this._successStatus = SuccessStatus.UNKNOWN;\n    this._attemptCount = 0;\n    this._attemptCompletionAmount = 0;\n    this._attemptAbsoluteDuration = \"PT0H0M0S\";\n    this._attemptExperiencedDuration = \"PT0H0M0S\";\n    this._activityAbsoluteDuration = \"PT0H0M0S\";\n    this._activityExperiencedDuration = \"PT0H0M0S\";\n    this._objectiveSatisfiedStatus = false;\n    this._objectiveMeasureStatus = false;\n    this._objectiveNormalizedMeasure = 0;\n\n    // Reset children\n    for (const child of this._children) {\n      child.reset();\n    }\n  }\n\n  /**\n   * Getter for id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for title\n   * @return {string}\n   */\n  get title(): string {\n    return this._title;\n  }\n\n  /**\n   * Setter for title\n   * @param {string} title\n   */\n  set title(title: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".title\", title, scorm2004_regex.CMILangString250)\n    ) {\n      this._title = title;\n    }\n  }\n\n  /**\n   * Getter for children\n   * @return {Activity[]}\n   */\n  get children(): Activity[] {\n    return this._children;\n  }\n\n  /**\n   * Add a child activity to this activity\n   * @param {Activity} child - The child activity to add\n   */\n  addChild(child: Activity): void {\n    if (!(child instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".children\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    child._parent = this;\n    this._children.push(child);\n  }\n\n  /**\n   * Remove a child activity from this activity\n   * @param {Activity} child - The child activity to remove\n   * @return {boolean} - True if the child was removed, false otherwise\n   */\n  removeChild(child: Activity): boolean {\n    const index = this._children.indexOf(child);\n    if (index !== -1) {\n      this._children.splice(index, 1);\n      child._parent = null;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for parent\n   * @return {Activity | null}\n   */\n  get parent(): Activity | null {\n    return this._parent;\n  }\n\n  /**\n   * Getter for isVisible\n   * @return {boolean}\n   */\n  get isVisible(): boolean {\n    return this._isVisible;\n  }\n\n  /**\n   * Setter for isVisible\n   * @param {boolean} isVisible\n   */\n  set isVisible(isVisible: boolean) {\n    this._isVisible = isVisible;\n  }\n\n  /**\n   * Getter for isActive\n   * @return {boolean}\n   */\n  get isActive(): boolean {\n    return this._isActive;\n  }\n\n  /**\n   * Setter for isActive\n   * @param {boolean} isActive\n   */\n  set isActive(isActive: boolean) {\n    this._isActive = isActive;\n  }\n\n  /**\n   * Getter for isSuspended\n   * @return {boolean}\n   */\n  get isSuspended(): boolean {\n    return this._isSuspended;\n  }\n\n  /**\n   * Setter for isSuspended\n   * @param {boolean} isSuspended\n   */\n  set isSuspended(isSuspended: boolean) {\n    this._isSuspended = isSuspended;\n  }\n\n  /**\n   * Getter for isCompleted\n   * @return {boolean}\n   */\n  get isCompleted(): boolean {\n    return this._isCompleted;\n  }\n\n  /**\n   * Setter for isCompleted\n   * @param {boolean} isCompleted\n   */\n  set isCompleted(isCompleted: boolean) {\n    this._isCompleted = isCompleted;\n  }\n\n  /**\n   * Getter for completionStatus\n   * @return {CompletionStatus}\n   */\n  get completionStatus(): CompletionStatus {\n    return this._completionStatus;\n  }\n\n  /**\n   * Setter for completionStatus\n   * @param {CompletionStatus} completionStatus\n   */\n  set completionStatus(completionStatus: CompletionStatus) {\n    this._completionStatus = completionStatus;\n    this._isCompleted = completionStatus === CompletionStatus.COMPLETED;\n  }\n\n  /**\n   * Getter for successStatus\n   * @return {SuccessStatus}\n   */\n  get successStatus(): SuccessStatus {\n    return this._successStatus;\n  }\n\n  /**\n   * Setter for successStatus\n   * @param {SuccessStatus} successStatus\n   */\n  set successStatus(successStatus: SuccessStatus) {\n    this._successStatus = successStatus;\n  }\n\n  /**\n   * Getter for attemptCount\n   * @return {number}\n   */\n  get attemptCount(): number {\n    return this._attemptCount;\n  }\n\n  /**\n   * Increment the attempt count\n   */\n  incrementAttemptCount(): void {\n    this._attemptCount++;\n  }\n\n  /**\n   * Getter for objectiveMeasureStatus\n   * @return {boolean}\n   */\n  get objectiveMeasureStatus(): boolean {\n    return this._objectiveMeasureStatus;\n  }\n\n  /**\n   * Setter for objectiveMeasureStatus\n   * @param {boolean} objectiveMeasureStatus\n   */\n  set objectiveMeasureStatus(objectiveMeasureStatus: boolean) {\n    this._objectiveMeasureStatus = objectiveMeasureStatus;\n  }\n\n  /**\n   * Getter for objectiveNormalizedMeasure\n   * @return {number}\n   */\n  get objectiveNormalizedMeasure(): number {\n    return this._objectiveNormalizedMeasure;\n  }\n\n  /**\n   * Setter for objectiveNormalizedMeasure\n   * @param {number} objectiveNormalizedMeasure\n   */\n  set objectiveNormalizedMeasure(objectiveNormalizedMeasure: number) {\n    this._objectiveNormalizedMeasure = objectiveNormalizedMeasure;\n  }\n\n  /**\n   * toJSON for Activity\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      id: this._id,\n      title: this._title,\n      isVisible: this._isVisible,\n      isActive: this._isActive,\n      isSuspended: this._isSuspended,\n      isCompleted: this._isCompleted,\n      completionStatus: this._completionStatus,\n      successStatus: this._successStatus,\n      attemptCount: this._attemptCount,\n      attemptCompletionAmount: this._attemptCompletionAmount,\n      attemptAbsoluteDuration: this._attemptAbsoluteDuration,\n      attemptExperiencedDuration: this._attemptExperiencedDuration,\n      activityAbsoluteDuration: this._activityAbsoluteDuration,\n      activityExperiencedDuration: this._activityExperiencedDuration,\n      objectiveSatisfiedStatus: this._objectiveSatisfiedStatus,\n      objectiveMeasureStatus: this._objectiveMeasureStatus,\n      objectiveNormalizedMeasure: this._objectiveNormalizedMeasure,\n      children: this._children.map((child) => child.toJSON()),\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\n\n/**\n * Class representing the SCORM 2004 activity tree\n */\nexport class ActivityTree extends BaseCMI {\n  private _root: Activity | null = null;\n  private _currentActivity: Activity | null = null;\n  private _suspendedActivity: Activity | null = null;\n  private _activities: Map<string, Activity> = new Map();\n\n  /**\n   * Constructor for ActivityTree\n   */\n  constructor() {\n    super(\"activityTree\");\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    if (this._root) {\n      this._root.initialize();\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._currentActivity = null;\n    this._suspendedActivity = null;\n    if (this._root) {\n      this._root.reset();\n    }\n  }\n\n  /**\n   * Getter for root\n   * @return {Activity | null}\n   */\n  get root(): Activity | null {\n    return this._root;\n  }\n\n  /**\n   * Setter for root\n   * @param {Activity} root\n   */\n  set root(root: Activity | null) {\n    if (root !== null && !(root instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".root\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._root = root;\n    if (root) {\n      this._activities.set(root.id, root);\n      this._addActivitiesToMap(root);\n    }\n  }\n\n  /**\n   * Recursively add activities to the activities map\n   * @param {Activity} activity\n   * @private\n   */\n  private _addActivitiesToMap(activity: Activity): void {\n    for (const child of activity.children) {\n      this._activities.set(child.id, child);\n      this._addActivitiesToMap(child);\n    }\n  }\n\n  /**\n   * Getter for currentActivity\n   * @return {Activity | null}\n   */\n  get currentActivity(): Activity | null {\n    return this._currentActivity;\n  }\n\n  /**\n   * Setter for currentActivity\n   * @param {Activity | null} activity\n   */\n  set currentActivity(activity: Activity | null) {\n    if (activity !== null && !(activity instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".currentActivity\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n\n    // If there's already a current activity, deactivate it\n    if (this._currentActivity) {\n      this._currentActivity.isActive = false;\n    }\n\n    // Set the new current activity and activate it\n    this._currentActivity = activity;\n    if (activity) {\n      activity.isActive = true;\n    }\n  }\n\n  /**\n   * Getter for suspendedActivity\n   * @return {Activity | null}\n   */\n  get suspendedActivity(): Activity | null {\n    return this._suspendedActivity;\n  }\n\n  /**\n   * Setter for suspendedActivity\n   * @param {Activity | null} activity\n   */\n  set suspendedActivity(activity: Activity | null) {\n    if (activity !== null && !(activity instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".suspendedActivity\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n\n    // If there's already a suspended activity, unsuspend it\n    if (this._suspendedActivity) {\n      this._suspendedActivity.isSuspended = false;\n    }\n\n    // Set the new suspended activity and mark it as suspended\n    this._suspendedActivity = activity;\n    if (activity) {\n      activity.isSuspended = true;\n    }\n  }\n\n  /**\n   * Get an activity by ID\n   * @param {string} id - The ID of the activity to get\n   * @return {Activity | undefined} - The activity with the given ID, or undefined if not found\n   */\n  getActivity(id: string): Activity | undefined {\n    return this._activities.get(id);\n  }\n\n  /**\n   * Get all activities in the tree\n   * @return {Activity[]} - An array of all activities in the tree\n   */\n  getAllActivities(): Activity[] {\n    return Array.from(this._activities.values());\n  }\n\n  /**\n   * Get the parent of an activity\n   * @param {Activity} activity - The activity to get the parent of\n   * @return {Activity | null} - The parent of the activity, or null if it has no parent\n   */\n  getParent(activity: Activity): Activity | null {\n    return activity.parent;\n  }\n\n  /**\n   * Get the children of an activity\n   * @param {Activity} activity - The activity to get the children of\n   * @return {Activity[]} - An array of the activity's children\n   */\n  getChildren(activity: Activity): Activity[] {\n    return activity.children;\n  }\n\n  /**\n   * Get the siblings of an activity\n   * @param {Activity} activity - The activity to get the siblings of\n   * @return {Activity[]} - An array of the activity's siblings\n   */\n  getSiblings(activity: Activity): Activity[] {\n    if (!activity.parent) {\n      return [];\n    }\n    return activity.parent.children.filter((child) => child !== activity);\n  }\n\n  /**\n   * Get the next sibling of an activity\n   * @param {Activity} activity - The activity to get the next sibling of\n   * @return {Activity | null} - The next sibling of the activity, or null if it has no next sibling\n   */\n  getNextSibling(activity: Activity): Activity | null {\n    if (!activity.parent) {\n      return null;\n    }\n    const siblings = activity.parent.children;\n    const index = siblings.indexOf(activity);\n    if (index === -1 || index === siblings.length - 1) {\n      return null;\n    }\n    return siblings[index + 1];\n  }\n\n  /**\n   * Get the previous sibling of an activity\n   * @param {Activity} activity - The activity to get the previous sibling of\n   * @return {Activity | null} - The previous sibling of the activity, or null if it has no previous sibling\n   */\n  getPreviousSibling(activity: Activity): Activity | null {\n    if (!activity.parent) {\n      return null;\n    }\n    const siblings = activity.parent.children;\n    const index = siblings.indexOf(activity);\n    if (index <= 0) {\n      return null;\n    }\n    return siblings[index - 1];\n  }\n\n  /**\n   * Get the first child of an activity\n   * @param {Activity} activity - The activity to get the first child of\n   * @return {Activity | null} - The first child of the activity, or null if it has no children\n   */\n  getFirstChild(activity: Activity): Activity | null {\n    if (activity.children.length === 0) {\n      return null;\n    }\n    return activity.children[0];\n  }\n\n  /**\n   * Get the last child of an activity\n   * @param {Activity} activity - The activity to get the last child of\n   * @return {Activity | null} - The last child of the activity, or null if it has no children\n   */\n  getLastChild(activity: Activity): Activity | null {\n    if (activity.children.length === 0) {\n      return null;\n    }\n    return activity.children[activity.children.length - 1];\n  }\n\n  /**\n   * Get the common ancestor of two activities\n   * @param {Activity} activity1 - The first activity\n   * @param {Activity} activity2 - The second activity\n   * @return {Activity | null} - The common ancestor of the two activities, or null if they have no common ancestor\n   */\n  getCommonAncestor(activity1: Activity, activity2: Activity): Activity | null {\n    // Get the path from the root to activity1\n    const path1: Activity[] = [];\n    let current: Activity | null = activity1;\n    while (current) {\n      path1.unshift(current);\n      current = current.parent;\n    }\n\n    // Check if activity2 is in the path from the root to activity1\n    current = activity2;\n    while (current) {\n      if (path1.includes(current)) {\n        return current;\n      }\n      current = current.parent;\n    }\n\n    return null;\n  }\n\n  /**\n   * toJSON for ActivityTree\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      root: this._root,\n      currentActivity: this._currentActivity ? this._currentActivity.id : null,\n      suspendedActivity: this._suspendedActivity ? this._suspendedActivity.id : null,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\n\n/**\n * Class representing SCORM 2004 sequencing controls\n */\nexport class SequencingControls extends BaseCMI {\n  // Sequencing Control Modes\n  private _enabled: boolean = true;\n  private _choiceExit: boolean = true;\n  private _flow: boolean = false;\n  private _forwardOnly: boolean = false;\n  private _useCurrentAttemptObjectiveInfo: boolean = true;\n  private _useCurrentAttemptProgressInfo: boolean = true;\n\n  // Constrain Choice Controls\n  private _preventActivation: boolean = false;\n  private _constrainChoice: boolean = false;\n\n  // Rollup Controls\n  private _rollupObjectiveSatisfied: boolean = true;\n  private _rollupProgressCompletion: boolean = true;\n  private _objectiveMeasureWeight: number = 1.0;\n\n  /**\n   * Constructor for SequencingControls\n   */\n  constructor() {\n    super(\"sequencingControls\");\n  }\n\n  /**\n   * Reset the sequencing controls to their default values\n   */\n  reset() {\n    this._initialized = false;\n    this._enabled = true;\n    this._choiceExit = true;\n    this._flow = false;\n    this._forwardOnly = false;\n    this._useCurrentAttemptObjectiveInfo = true;\n    this._useCurrentAttemptProgressInfo = true;\n    this._preventActivation = false;\n    this._constrainChoice = false;\n    this._rollupObjectiveSatisfied = true;\n    this._rollupProgressCompletion = true;\n    this._objectiveMeasureWeight = 1.0;\n  }\n\n  /**\n   * Getter for enabled\n   * @return {boolean}\n   */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  /**\n   * Setter for enabled\n   * @param {boolean} enabled\n   */\n  set enabled(enabled: boolean) {\n    this._enabled = enabled;\n  }\n\n  /**\n   * Getter for choiceExit\n   * @return {boolean}\n   */\n  get choiceExit(): boolean {\n    return this._choiceExit;\n  }\n\n  /**\n   * Setter for choiceExit\n   * @param {boolean} choiceExit\n   */\n  set choiceExit(choiceExit: boolean) {\n    this._choiceExit = choiceExit;\n  }\n\n  /**\n   * Getter for flow\n   * @return {boolean}\n   */\n  get flow(): boolean {\n    return this._flow;\n  }\n\n  /**\n   * Setter for flow\n   * @param {boolean} flow\n   */\n  set flow(flow: boolean) {\n    this._flow = flow;\n  }\n\n  /**\n   * Getter for forwardOnly\n   * @return {boolean}\n   */\n  get forwardOnly(): boolean {\n    return this._forwardOnly;\n  }\n\n  /**\n   * Setter for forwardOnly\n   * @param {boolean} forwardOnly\n   */\n  set forwardOnly(forwardOnly: boolean) {\n    this._forwardOnly = forwardOnly;\n  }\n\n  /**\n   * Getter for useCurrentAttemptObjectiveInfo\n   * @return {boolean}\n   */\n  get useCurrentAttemptObjectiveInfo(): boolean {\n    return this._useCurrentAttemptObjectiveInfo;\n  }\n\n  /**\n   * Setter for useCurrentAttemptObjectiveInfo\n   * @param {boolean} useCurrentAttemptObjectiveInfo\n   */\n  set useCurrentAttemptObjectiveInfo(useCurrentAttemptObjectiveInfo: boolean) {\n    this._useCurrentAttemptObjectiveInfo = useCurrentAttemptObjectiveInfo;\n  }\n\n  /**\n   * Getter for useCurrentAttemptProgressInfo\n   * @return {boolean}\n   */\n  get useCurrentAttemptProgressInfo(): boolean {\n    return this._useCurrentAttemptProgressInfo;\n  }\n\n  /**\n   * Setter for useCurrentAttemptProgressInfo\n   * @param {boolean} useCurrentAttemptProgressInfo\n   */\n  set useCurrentAttemptProgressInfo(useCurrentAttemptProgressInfo: boolean) {\n    this._useCurrentAttemptProgressInfo = useCurrentAttemptProgressInfo;\n  }\n\n  /**\n   * Getter for preventActivation\n   * @return {boolean}\n   */\n  get preventActivation(): boolean {\n    return this._preventActivation;\n  }\n\n  /**\n   * Setter for preventActivation\n   * @param {boolean} preventActivation\n   */\n  set preventActivation(preventActivation: boolean) {\n    this._preventActivation = preventActivation;\n  }\n\n  /**\n   * Getter for constrainChoice\n   * @return {boolean}\n   */\n  get constrainChoice(): boolean {\n    return this._constrainChoice;\n  }\n\n  /**\n   * Setter for constrainChoice\n   * @param {boolean} constrainChoice\n   */\n  set constrainChoice(constrainChoice: boolean) {\n    this._constrainChoice = constrainChoice;\n  }\n\n  /**\n   * Getter for rollupObjectiveSatisfied\n   * @return {boolean}\n   */\n  get rollupObjectiveSatisfied(): boolean {\n    return this._rollupObjectiveSatisfied;\n  }\n\n  /**\n   * Setter for rollupObjectiveSatisfied\n   * @param {boolean} rollupObjectiveSatisfied\n   */\n  set rollupObjectiveSatisfied(rollupObjectiveSatisfied: boolean) {\n    this._rollupObjectiveSatisfied = rollupObjectiveSatisfied;\n  }\n\n  /**\n   * Getter for rollupProgressCompletion\n   * @return {boolean}\n   */\n  get rollupProgressCompletion(): boolean {\n    return this._rollupProgressCompletion;\n  }\n\n  /**\n   * Setter for rollupProgressCompletion\n   * @param {boolean} rollupProgressCompletion\n   */\n  set rollupProgressCompletion(rollupProgressCompletion: boolean) {\n    this._rollupProgressCompletion = rollupProgressCompletion;\n  }\n\n  /**\n   * Getter for objectiveMeasureWeight\n   * @return {number}\n   */\n  get objectiveMeasureWeight(): number {\n    return this._objectiveMeasureWeight;\n  }\n\n  /**\n   * Setter for objectiveMeasureWeight\n   * @param {number} objectiveMeasureWeight\n   */\n  set objectiveMeasureWeight(objectiveMeasureWeight: number) {\n    if (objectiveMeasureWeight >= 0 && objectiveMeasureWeight <= 1) {\n      this._objectiveMeasureWeight = objectiveMeasureWeight;\n    }\n  }\n\n  /**\n   * Check if choice navigation is allowed\n   * @return {boolean} - True if choice navigation is allowed, false otherwise\n   */\n  isChoiceNavigationAllowed(): boolean {\n    return this._enabled && !this._constrainChoice;\n  }\n\n  /**\n   * Check if flow navigation is allowed\n   * @return {boolean} - True if flow navigation is allowed, false otherwise\n   */\n  isFlowNavigationAllowed(): boolean {\n    return this._enabled && this._flow;\n  }\n\n  /**\n   * Check if forward navigation is allowed\n   * @return {boolean} - True if forward navigation is allowed, false otherwise\n   */\n  isForwardNavigationAllowed(): boolean {\n    return this._enabled && (!this._forwardOnly || this._flow);\n  }\n\n  /**\n   * Check if backward navigation is allowed\n   * @return {boolean} - True if backward navigation is allowed, false otherwise\n   */\n  isBackwardNavigationAllowed(): boolean {\n    return this._enabled && !this._forwardOnly;\n  }\n\n  /**\n   * toJSON for SequencingControls\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      enabled: this._enabled,\n      choiceExit: this._choiceExit,\n      flow: this._flow,\n      forwardOnly: this._forwardOnly,\n      useCurrentAttemptObjectiveInfo: this._useCurrentAttemptObjectiveInfo,\n      useCurrentAttemptProgressInfo: this._useCurrentAttemptProgressInfo,\n      preventActivation: this._preventActivation,\n      constrainChoice: this._constrainChoice,\n      rollupObjectiveSatisfied: this._rollupObjectiveSatisfied,\n      rollupProgressCompletion: this._rollupProgressCompletion,\n      objectiveMeasureWeight: this._objectiveMeasureWeight,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { ActivityTree } from \"./activity_tree\";\nimport { RuleActionType, SequencingRules } from \"./sequencing_rules\";\nimport { SequencingControls } from \"./sequencing_controls\";\nimport { RollupRules } from \"./rollup_rules\";\nimport { ADLNav } from \"../adl\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\n\n/**\n * Class representing SCORM 2004 sequencing\n */\nexport class Sequencing extends BaseCMI {\n  private _activityTree: ActivityTree;\n  private _sequencingRules: SequencingRules;\n  private _sequencingControls: SequencingControls;\n  private _rollupRules: RollupRules;\n  private _adlNav: ADLNav | null = null;\n\n  /**\n   * Constructor for Sequencing\n   */\n  constructor() {\n    super(\"sequencing\");\n    this._activityTree = new ActivityTree();\n    this._sequencingRules = new SequencingRules();\n    this._sequencingControls = new SequencingControls();\n    this._rollupRules = new RollupRules();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this._activityTree.initialize();\n    this._sequencingRules.initialize();\n    this._sequencingControls.initialize();\n    this._rollupRules.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._activityTree.reset();\n    this._sequencingRules.reset();\n    this._sequencingControls.reset();\n    this._rollupRules.reset();\n  }\n\n  /**\n   * Getter for activityTree\n   * @return {ActivityTree}\n   */\n  get activityTree(): ActivityTree {\n    return this._activityTree;\n  }\n\n  /**\n   * Setter for activityTree\n   * @param {ActivityTree} activityTree\n   */\n  set activityTree(activityTree: ActivityTree) {\n    if (!(activityTree instanceof ActivityTree)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".activityTree\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._activityTree = activityTree;\n  }\n\n  /**\n   * Getter for sequencingRules\n   * @return {SequencingRules}\n   */\n  get sequencingRules(): SequencingRules {\n    return this._sequencingRules;\n  }\n\n  /**\n   * Setter for sequencingRules\n   * @param {SequencingRules} sequencingRules\n   */\n  set sequencingRules(sequencingRules: SequencingRules) {\n    if (!(sequencingRules instanceof SequencingRules)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".sequencingRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._sequencingRules = sequencingRules;\n  }\n\n  /**\n   * Getter for sequencingControls\n   * @return {SequencingControls}\n   */\n  get sequencingControls(): SequencingControls {\n    return this._sequencingControls;\n  }\n\n  /**\n   * Setter for sequencingControls\n   * @param {SequencingControls} sequencingControls\n   */\n  set sequencingControls(sequencingControls: SequencingControls) {\n    if (!(sequencingControls instanceof SequencingControls)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".sequencingControls\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._sequencingControls = sequencingControls;\n  }\n\n  /**\n   * Getter for rollupRules\n   * @return {RollupRules}\n   */\n  get rollupRules(): RollupRules {\n    return this._rollupRules;\n  }\n\n  /**\n   * Setter for rollupRules\n   * @param {RollupRules} rollupRules\n   */\n  set rollupRules(rollupRules: RollupRules) {\n    if (!(rollupRules instanceof RollupRules)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".rollupRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._rollupRules = rollupRules;\n  }\n\n  /**\n   * Getter for adlNav\n   * @return {ADLNav | null}\n   */\n  get adlNav(): ADLNav | null {\n    return this._adlNav;\n  }\n\n  /**\n   * Setter for adlNav\n   * @param {ADLNav | null} adlNav\n   */\n  set adlNav(adlNav: ADLNav | null) {\n    this._adlNav = adlNav;\n  }\n\n  /**\n   * Process navigation request\n   * @param {string} request - The navigation request\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processNavigationRequest(request: string): boolean {\n    if (!this._adlNav) {\n      return false;\n    }\n\n    // Set the navigation request\n    this._adlNav.request = request;\n\n    // Get the current activity\n    const currentActivity = this._activityTree.currentActivity;\n    if (!currentActivity) {\n      return false;\n    }\n\n    // Evaluate pre-condition rules\n    const preConditionAction = this._sequencingRules.evaluatePreConditionRules(currentActivity);\n    if (preConditionAction) {\n      // Handle pre-condition action\n      switch (preConditionAction) {\n        case RuleActionType.SKIP:\n          // Skip this activity\n          return false;\n        case RuleActionType.DISABLED:\n          // Disable this activity\n          return false;\n        case RuleActionType.HIDE_FROM_CHOICE:\n          // Hide this activity from choice\n          return false;\n        case RuleActionType.STOP_FORWARD_TRAVERSAL:\n          // Stop forward traversal\n          return false;\n        default:\n          break;\n      }\n    }\n\n    // Process the navigation request based on the request type\n    switch (request) {\n      case \"continue\":\n        return this.processContinueRequest(currentActivity);\n      case \"previous\":\n        return this.processPreviousRequest(currentActivity);\n      case \"choice\":\n        // Choice navigation would require additional parameters\n        return false;\n      case \"exit\":\n        return this.processExitRequest(currentActivity);\n      case \"exitAll\":\n        return this.processExitAllRequest();\n      case \"abandon\":\n        return this.processAbandonRequest(currentActivity);\n      case \"abandonAll\":\n        return this.processAbandonAllRequest();\n      case \"suspendAll\":\n        return this.processSuspendAllRequest(currentActivity);\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Process continue request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processContinueRequest(currentActivity: Activity): boolean {\n    // Check if continue is allowed\n    if (!this._sequencingControls.isForwardNavigationAllowed()) {\n      return false;\n    }\n\n    // Get the next activity\n    const nextActivity = this._activityTree.getNextSibling(currentActivity);\n    if (!nextActivity) {\n      return false;\n    }\n\n    // Evaluate exit condition rules\n    const exitConditionAction = this._sequencingRules.evaluateExitConditionRules(currentActivity);\n    if (exitConditionAction) {\n      // Handle exit condition action\n      switch (exitConditionAction) {\n        case RuleActionType.EXIT_PARENT: {\n          // Exit to parent\n          const parent = currentActivity.parent;\n          if (parent) {\n            this._activityTree.currentActivity = parent;\n            return true;\n          }\n          return false;\n        }\n        case RuleActionType.EXIT_ALL:\n          // Exit all\n          this._activityTree.currentActivity = null;\n          return true;\n        default:\n          break;\n      }\n    }\n\n    // Set the next activity as current\n    this._activityTree.currentActivity = nextActivity;\n\n    // Evaluate post-condition rules\n    const postConditionAction = this._sequencingRules.evaluatePostConditionRules(nextActivity);\n    if (postConditionAction) {\n      // Handle post-condition action\n      switch (postConditionAction) {\n        case RuleActionType.RETRY:\n          // Retry this activity\n          nextActivity.incrementAttemptCount();\n          return true;\n        case RuleActionType.RETRY_ALL:\n          // Retry all activities\n          this._activityTree.getAllActivities().forEach((activity) => {\n            activity.incrementAttemptCount();\n          });\n          return true;\n        case RuleActionType.CONTINUE:\n          // Continue to next activity\n          return this.processContinueRequest(nextActivity);\n        case RuleActionType.PREVIOUS:\n          // Go to previous activity\n          return this.processPreviousRequest(nextActivity);\n        case RuleActionType.EXIT:\n          // Exit this activity\n          this._activityTree.currentActivity = currentActivity;\n          return true;\n        default:\n          break;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Process previous request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processPreviousRequest(currentActivity: Activity): boolean {\n    // Check if backward navigation is allowed\n    if (!this._sequencingControls.isBackwardNavigationAllowed()) {\n      return false;\n    }\n\n    // Get the previous activity\n    const previousActivity = this._activityTree.getPreviousSibling(currentActivity);\n    if (!previousActivity) {\n      return false;\n    }\n\n    // Evaluate exit condition rules\n    const exitConditionAction = this._sequencingRules.evaluateExitConditionRules(currentActivity);\n    if (exitConditionAction) {\n      // Handle exit condition action\n      switch (exitConditionAction) {\n        case RuleActionType.EXIT_PARENT: {\n          // Exit to parent\n          const parent = currentActivity.parent;\n          if (parent) {\n            this._activityTree.currentActivity = parent;\n            return true;\n          }\n          return false;\n        }\n        case RuleActionType.EXIT_ALL:\n          // Exit all\n          this._activityTree.currentActivity = null;\n          return true;\n        default:\n          break;\n      }\n    }\n\n    // Set the previous activity as current\n    this._activityTree.currentActivity = previousActivity;\n\n    // Evaluate post-condition rules\n    const postConditionAction = this._sequencingRules.evaluatePostConditionRules(previousActivity);\n    if (postConditionAction) {\n      // Handle post-condition action\n      switch (postConditionAction) {\n        case RuleActionType.RETRY:\n          // Retry this activity\n          previousActivity.incrementAttemptCount();\n          return true;\n        case RuleActionType.RETRY_ALL:\n          // Retry all activities\n          this._activityTree.getAllActivities().forEach((activity) => {\n            activity.incrementAttemptCount();\n          });\n          return true;\n        case RuleActionType.CONTINUE:\n          // Continue to next activity\n          return this.processContinueRequest(previousActivity);\n        case RuleActionType.PREVIOUS:\n          // Go to previous activity\n          return this.processPreviousRequest(previousActivity);\n        case RuleActionType.EXIT:\n          // Exit this activity\n          this._activityTree.currentActivity = currentActivity;\n          return true;\n        default:\n          break;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Process exit request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processExitRequest(currentActivity: Activity): boolean {\n    // Check if exit is allowed\n    if (!this._sequencingControls.choiceExit) {\n      return false;\n    }\n\n    // Get the parent activity\n    const parent = currentActivity.parent;\n    if (!parent) {\n      return false;\n    }\n\n    // Set the parent activity as current\n    this._activityTree.currentActivity = parent;\n\n    return true;\n  }\n\n  /**\n   * Process exit all request\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processExitAllRequest(): boolean {\n    // Check if exit is allowed\n    if (!this._sequencingControls.choiceExit) {\n      return false;\n    }\n\n    // Set no activity as current\n    this._activityTree.currentActivity = null;\n\n    return true;\n  }\n\n  /**\n   * Process abandon request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processAbandonRequest(currentActivity: Activity): boolean {\n    // Get the parent activity\n    const parent = currentActivity.parent;\n    if (!parent) {\n      return false;\n    }\n\n    // Set the parent activity as current without processing exit rules\n    this._activityTree.currentActivity = parent;\n\n    return true;\n  }\n\n  /**\n   * Process abandon all request\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processAbandonAllRequest(): boolean {\n    // Set no activity as current without processing exit rules\n    this._activityTree.currentActivity = null;\n\n    return true;\n  }\n\n  /**\n   * Process suspend all request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processSuspendAllRequest(currentActivity: Activity): boolean {\n    // Set the current activity as suspended\n    this._activityTree.suspendedActivity = currentActivity;\n    this._activityTree.currentActivity = null;\n\n    return true;\n  }\n\n  /**\n   * Process rollup for the entire activity tree\n   */\n  processRollup(): void {\n    // Get the root activity\n    const root = this._activityTree.root;\n    if (!root) {\n      return;\n    }\n\n    // Process rollup from the bottom up\n    this._processRollupRecursive(root);\n  }\n\n  /**\n   * Process rollup recursively\n   * @param {Activity} activity - The activity to process rollup for\n   * @private\n   */\n  private _processRollupRecursive(activity: Activity): void {\n    // Process rollup for children first\n    for (const child of activity.children) {\n      this._processRollupRecursive(child);\n    }\n\n    // Process rollup for this activity\n    this._rollupRules.processRollup(activity);\n  }\n\n  /**\n   * toJSON for Sequencing\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      activityTree: this._activityTree,\n      sequencingRules: this._sequencingRules,\n      sequencingControls: this._sequencingControls,\n      rollupRules: this._rollupRules,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import AICC from \"./AICC\";\nimport Scorm12API from \"./Scorm12API\";\nimport Scorm2004API from \"./Scorm2004API\";\n\n// Explicitly assign to window for global usage\nif (typeof window !== \"undefined\") {\n  window.AICC = AICC;\n  window.Scorm12API = Scorm12API;\n  window.Scorm2004API = Scorm2004API;\n}\n","import Scorm12API from \"./Scorm12API\";\nimport { CMI } from \"./cmi/aicc/cmi\";\n\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport { CMITriesObject } from \"./cmi/aicc/tries\";\nimport { CMIAttemptRecordsObject } from \"./cmi/aicc/attempts\";\nimport { CMIEvaluationCommentsObject } from \"./cmi/aicc/evaluation\";\nimport { NAV } from \"./cmi/scorm12/nav\";\nimport { CMIPathsObject } from \"./cmi/aicc/paths\";\nimport { Settings } from \"./types/api_types\";\nimport { stringMatches } from \"./utilities\";\n\n/**\n * The AICC API class\n */\nclass AICC extends Scorm12API {\n  /**\n   * Constructor to create AICC API object\n   * @param {Settings} settings\n   */\n  constructor(settings?: Settings) {\n    super(settings);\n\n    this.cmi = new CMI();\n    this.nav = new NAV();\n  }\n\n  override cmi: CMI;\n  override nav: NAV;\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI | null}\n   */\n  override getChildElement(\n    CMIElement: string,\n    value: any,\n    foundFirstIndex: boolean,\n  ): BaseCMI | null {\n    let newChild = super.getChildElement(CMIElement, value, foundFirstIndex);\n\n    if (!newChild) {\n      if (stringMatches(CMIElement, \"cmi\\\\.evaluation\\\\.comments\\\\.\\\\d+\")) {\n        newChild = new CMIEvaluationCommentsObject();\n      } else if (stringMatches(CMIElement, \"cmi\\\\.student_data\\\\.tries\\\\.\\\\d+\")) {\n        newChild = new CMITriesObject();\n      } else if (stringMatches(CMIElement, \"cmi\\\\.student_data\\\\.attempt_records\\\\.\\\\d+\")) {\n        newChild = new CMIAttemptRecordsObject();\n      } else if (stringMatches(CMIElement, \"cmi\\\\.paths\\\\.\\\\d+\")) {\n        newChild = new CMIPathsObject();\n      }\n    }\n\n    return newChild;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {AICC} newAPI\n   */\n  override replaceWithAnotherScormAPI(newAPI: AICC) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.nav = newAPI.nav;\n  }\n}\n\nexport default AICC;\n","import BaseAPI from \"./BaseAPI\";\nimport { CMI } from \"./cmi/scorm2004/cmi\";\nimport * as Utilities from \"./utilities\";\nimport { StringKeyMap, stringMatches } from \"./utilities\";\nimport { global_constants, scorm2004_constants } from \"./constants/api_constants\";\nimport { scorm2004_errors } from \"./constants/error_codes\";\nimport { CMIObjectivesObject } from \"./cmi/scorm2004/objectives\";\nimport { ADL, ADLDataObject } from \"./cmi/scorm2004/adl\";\nimport { CommitObject, ResultObject, ScoreObject, Settings } from \"./types/api_types\";\nimport {\n  ActivitySettings,\n  RollupRuleSettings,\n  RollupRulesSettings,\n  SequencingControlsSettings,\n  SequencingRuleSettings,\n  SequencingRulesSettings,\n  SequencingSettings,\n} from \"./types/sequencing_types\";\nimport { RuleCondition, SequencingRule } from \"./cmi/scorm2004/sequencing/sequencing_rules\";\nimport { RollupCondition, RollupRule } from \"./cmi/scorm2004/sequencing/rollup_rules\";\nimport { scorm2004_regex } from \"./constants/regex\"; // Import functions from extracted modules\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport {\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n} from \"./cmi/scorm2004/interactions\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { CorrectResponses, ResponseType } from \"./constants/response_constants\";\nimport { CMICommentsObject } from \"./cmi/scorm2004/comments\";\nimport ValidLanguages from \"./constants/language_constants\";\nimport { CompletionStatus, SuccessStatus } from \"./constants/enums\";\nimport { Sequencing } from \"./cmi/scorm2004/sequencing/sequencing\";\nimport { Activity } from \"./cmi/scorm2004/sequencing/activity\";\n\n/**\n * API class for SCORM 2004\n */\nclass Scorm2004API extends BaseAPI {\n  private _version: string = \"1.0\";\n  private _globalObjectives: CMIObjectivesObject[] = [];\n  private _sequencing: Sequencing;\n  private _extractedScoItemIds: string[] = [];\n\n  /**\n   * Constructor for SCORM 2004 API\n   * @param {Settings} settings\n   */\n  constructor(settings?: Settings) {\n    if (settings) {\n      if (settings.mastery_override === undefined) {\n        settings.mastery_override = false;\n      }\n    }\n\n    super(scorm2004_errors, settings);\n\n    this.cmi = new CMI();\n    this.adl = new ADL();\n    this._sequencing = new Sequencing();\n\n    // Connect the sequencing object to the ADL's sequencing property\n    // The Sequencing object is used for both configuration and runtime navigation processing\n    // It needs to be attached to the ADL object for runtime navigation requests (adl.nav.request)\n    this.adl.sequencing = this._sequencing;\n\n    // Configure sequencing if settings are provided\n    if (settings?.sequencing) {\n      this.configureSequencing(settings.sequencing);\n    }\n\n    // Rename functions to match 2004 Spec and expose to modules\n    this.Initialize = this.lmsInitialize;\n    this.Terminate = this.lmsFinish;\n    this.GetValue = this.lmsGetValue;\n    this.SetValue = this.lmsSetValue;\n    this.Commit = this.lmsCommit;\n    this.GetLastError = this.lmsGetLastError;\n    this.GetErrorString = this.lmsGetErrorString;\n    this.GetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  public cmi: CMI;\n  public adl: ADL;\n\n  public Initialize: () => string;\n  public Terminate: () => string;\n  public GetValue: (CMIElement: string) => string;\n  public SetValue: (CMIElement: string, value: any) => string;\n  public Commit: () => string;\n  public GetLastError: () => string;\n  public GetErrorString: (CMIErrorCode: string | number) => string;\n  public GetDiagnostic: (CMIErrorCode: string | number) => string;\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset(settings?: Settings) {\n    this.commonReset(settings);\n\n    this.cmi?.reset();\n    this.adl?.reset();\n    this._sequencing?.reset();\n  }\n\n  /**\n   * Getter for _version\n   * @return {string}\n   */\n  get version(): string {\n    return this._version;\n  }\n\n  /**\n   * Getter for _globalObjectives\n   */\n  get globalObjectives(): CMIObjectivesObject[] {\n    return this._globalObjectives;\n  }\n\n  /**\n   * Initialize function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize(): string {\n    this.cmi.initialize();\n    return this.initialize(\n      \"Initialize\",\n      \"LMS was already initialized!\",\n      \"LMS is already finished!\",\n    );\n  }\n\n  /**\n   * Terminate function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish(): string {\n    (async () => {\n      await this.internalFinish();\n    })();\n    return global_constants.SCORM_TRUE;\n  }\n\n  async internalFinish(): Promise<string> {\n    const result = await this.terminate(\"Terminate\", true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      if (this.adl.nav.request !== \"_none_\") {\n        const navActions: { [key: string]: string } = {\n          continue: \"SequenceNext\",\n          previous: \"SequencePrevious\",\n          choice: \"SequenceChoice\",\n          jump: \"SequenceJump\",\n          exit: \"SequenceExit\",\n          exitAll: \"SequenceExitAll\",\n          abandon: \"SequenceAbandon\",\n          abandonAll: \"SequenceAbandonAll\",\n        };\n\n        let request = this.adl.nav.request;\n        const choiceJumpRegex = new RegExp(scorm2004_regex.NAVEvent);\n        const matches = request.match(choiceJumpRegex);\n        let target = \"\";\n        if (matches) {\n          if (matches.groups?.choice_target) {\n            target = matches.groups?.choice_target;\n            request = \"choice\";\n          } else if (matches.groups?.jump_target) {\n            target = matches.groups?.jump_target;\n            request = \"jump\";\n          }\n        }\n        const action = navActions[request];\n        if (action) {\n          this.processListeners(action, \"adl.nav.request\", target);\n        }\n      } else if (this.settings.autoProgress) {\n        this.processListeners(\"SequenceNext\", undefined, \"next\");\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * GetValue function from SCORM 2004 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement: string): string {\n    const adlNavRequestRegex =\n      \"^adl\\\\.nav\\\\.request_valid\\\\.(choice|jump)\\\\.{target=\\\\S{0,}([a-zA-Z0-9-_]+)}$\";\n    if (stringMatches(CMIElement, adlNavRequestRegex)) {\n      const matches = CMIElement.match(adlNavRequestRegex);\n      if (matches) {\n        const request = matches[1];\n        const target = matches[2].replace(/{target=/g, \"\").replace(/}/g, \"\");\n        if (request === \"choice\" || request === \"jump\") {\n          if (this.settings.scoItemIdValidator) {\n            return String(this.settings.scoItemIdValidator(target));\n          }\n          // If we have extracted IDs from sequencing, use those exclusively\n          if (this._extractedScoItemIds.length > 0) {\n            return String(this._extractedScoItemIds.includes(target));\n          }\n          // Otherwise use the scoItemIds from settings\n          return String(this.settings?.scoItemIds?.includes(target));\n        }\n      }\n    }\n    return this.getValue(\"GetValue\", true, CMIElement);\n  }\n\n  /**\n   * SetValue function from SCORM 2004 Spec\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement: string, value: any): string {\n    // Proceed with regular setting for non-objective elements or fallback behavior\n    return this.setValue(\"SetValue\", \"Commit\", true, CMIElement, value);\n  }\n\n  /**\n   * Commit function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit(): string {\n    if (this.settings.asyncCommit) {\n      this.scheduleCommit(500, \"Commit\");\n    } else {\n      (async () => {\n        await this.commit(\"Commit\", false);\n      })();\n    }\n    return global_constants.SCORM_TRUE;\n  }\n\n  /**\n   * GetLastError function from SCORM 2004 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError(): string {\n    return this.getLastError(\"GetLastError\");\n  }\n\n  /**\n   * GetErrorString function from SCORM 2004 Spec\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode: string | number): string {\n    return this.getErrorString(\"GetErrorString\", CMIErrorCode);\n  }\n\n  /**\n   * GetDiagnostic function from SCORM 2004 Spec\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode: string | number): string {\n    return this.getDiagnostic(\"GetDiagnostic\", CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object - delegates to CMIValueHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  override setCMIValue(CMIElement: string, value: any): string {\n    // Check if we're updating a global or local objective\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      const parts = CMIElement.split(\".\");\n      const index = Number(parts[2]);\n      const element_base = `cmi.objectives.${index}`;\n\n      let objective_id;\n      const setting_id = stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\\\\.id\");\n\n      if (setting_id) {\n        // If we're setting the objective ID, capture it directly\n        objective_id = value;\n      } else {\n        // Find existing objective ID if available\n        const objective = this.cmi.objectives.findObjectiveByIndex(index);\n        objective_id = objective ? objective.id : undefined;\n      }\n\n      // Check if the objective ID matches a global objective\n      const is_global = objective_id && this.settings.globalObjectiveIds?.includes(objective_id);\n\n      if (is_global) {\n        // Locate or create an entry in _globalObjectives for the global objective\n        let global_index = this._globalObjectives.findIndex((obj) => obj.id === objective_id);\n\n        if (global_index === -1) {\n          global_index = this._globalObjectives.length;\n          const newGlobalObjective = new CMIObjectivesObject();\n          newGlobalObjective.id = objective_id;\n          this._globalObjectives.push(newGlobalObjective);\n        }\n\n        // Update the global objective\n        const global_element = CMIElement.replace(\n          element_base,\n          `_globalObjectives.${global_index}`,\n        );\n        this._commonSetCMIValue(\"SetGlobalObjectiveValue\", true, global_element, value);\n      }\n    }\n    return this._commonSetCMIValue(\"SetValue\", true, CMIElement, value);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array - delegates to CMIElementHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI|null}\n   */\n  getChildElement(CMIElement: string, value: any, foundFirstIndex: boolean): BaseCMI | null {\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      return new CMIObjectivesObject();\n    }\n\n    if (foundFirstIndex) {\n      if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+\")) {\n        return this.createCorrectResponsesObject(CMIElement, value);\n      } else if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+\")) {\n        return new CMIInteractionsObjectivesObject();\n      }\n    } else if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\")) {\n      return new CMIInteractionsObject();\n    }\n\n    if (stringMatches(CMIElement, \"cmi\\\\.comments_from_learner\\\\.\\\\d+\")) {\n      return new CMICommentsObject();\n    } else if (stringMatches(CMIElement, \"cmi\\\\.comments_from_lms\\\\.\\\\d+\")) {\n      return new CMICommentsObject(true);\n    }\n\n    if (stringMatches(CMIElement, \"adl\\\\.data\\\\.\\\\d+\")) {\n      return new ADLDataObject();\n    }\n\n    return null;\n  }\n\n  /**\n   * Creates a correct responses object for an interaction - delegates to CMIElementHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {BaseCMI|null}\n   */\n  private createCorrectResponsesObject(CMIElement: string, value: any): BaseCMI | null {\n    const parts = CMIElement.split(\".\");\n    const index = Number(parts[2]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    if (this.isInitialized()) {\n      if (typeof interaction === \"undefined\" || !interaction.type) {\n        this.throwSCORMError(CMIElement, scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED, CMIElement);\n        return null;\n      } else {\n        this.checkDuplicateChoiceResponse(CMIElement, interaction, value);\n        const response_type = CorrectResponses[interaction.type];\n        if (response_type) {\n          this.checkValidResponseType(CMIElement, response_type, value, interaction.type);\n        } else {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.GENERAL_SET_FAILURE,\n            `Incorrect Response Type: ${interaction.type}`,\n          );\n          return null;\n        }\n      }\n    }\n\n    if (this.lastErrorCode === \"0\") {\n      return new CMIInteractionsCorrectResponsesObject(interaction);\n    }\n\n    return null;\n  }\n\n  /**\n   * Checks for valid response types - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {ResponseType} response_type\n   * @param {any} value\n   * @param {string} interaction_type\n   */\n  checkValidResponseType(\n    CMIElement: string,\n    response_type: ResponseType,\n    value: any,\n    interaction_type: string,\n  ) {\n    let nodes = [];\n    if (response_type?.delimiter) {\n      nodes = String(value).split(response_type.delimiter);\n    } else {\n      nodes[0] = value;\n    }\n\n    if (nodes.length > 0 && nodes.length <= response_type.max) {\n      this.checkCorrectResponseValue(CMIElement, interaction_type, nodes, value);\n    } else if (nodes.length > response_type.max) {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.GENERAL_SET_FAILURE,\n        `Data Model Element Pattern Too Long: ${value}`,\n      );\n    }\n  }\n\n  /**\n   * Checks for duplicate 'choice' responses - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {CMIInteractionsObject} interaction\n   * @param {any} value\n   */\n  checkDuplicateChoiceResponse(CMIElement: string, interaction: CMIInteractionsObject, value: any) {\n    const interaction_count = interaction.correct_responses._count;\n    if (interaction.type === \"choice\") {\n      for (let i = 0; i < interaction_count && this.lastErrorCode === \"0\"; i++) {\n        const response = interaction.correct_responses.childArray[i];\n        if (response.pattern === value) {\n          this.throwSCORMError(CMIElement, scorm2004_errors.GENERAL_SET_FAILURE, `${value}`);\n        }\n      }\n    }\n  }\n\n  /**\n   * Validate correct response - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {*} value\n   */\n  validateCorrectResponse(CMIElement: string, value: any) {\n    const parts = CMIElement.split(\".\");\n    const index = Number(parts[2]);\n    const pattern_index = Number(parts[4]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    const interaction_count = interaction.correct_responses._count;\n    this.checkDuplicateChoiceResponse(CMIElement, interaction, value);\n\n    const response_type = CorrectResponses[interaction.type];\n    if (typeof response_type.limit === \"undefined\" || interaction_count <= response_type.limit) {\n      this.checkValidResponseType(CMIElement, response_type, value, interaction.type);\n\n      if (\n        (this.lastErrorCode === \"0\" &&\n          (!response_type.duplicate ||\n            !this.checkDuplicatedPattern(interaction.correct_responses, pattern_index, value))) ||\n        (this.lastErrorCode === \"0\" && value === \"\")\n      ) {\n        // do nothing, we want the inverse\n      } else {\n        if (this.lastErrorCode === \"0\") {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.GENERAL_SET_FAILURE,\n            `Data Model Element Pattern Already Exists: ${CMIElement} - ${value}`,\n          );\n        }\n      }\n    } else {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.GENERAL_SET_FAILURE,\n        `Data Model Element Collection Limit Reached: ${CMIElement} - ${value}`,\n      );\n    }\n  }\n\n  /**\n   * Gets a value from the CMI Object - delegates to CMIValueHandlerModule\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  override getCMIValue(CMIElement: string): any {\n    return this._commonGetCMIValue(\"GetValue\", true, CMIElement);\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {(string|number)} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  override getLmsErrorMessageDetails(errorNumber: string | number, detail: boolean): string {\n    let basicMessage = \"\";\n    let detailMessage = \"\";\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (scorm2004_constants.error_descriptions[errorNumber]) {\n      basicMessage = scorm2004_constants.error_descriptions[errorNumber].basicMessage;\n      detailMessage = scorm2004_constants.error_descriptions[errorNumber].detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Check to see if a correct_response value has been duplicated - delegates to ValidationModule\n   * @param {CMIArray} correct_response\n   * @param {number} current_index\n   * @param {*} value\n   * @return {boolean}\n   */\n  checkDuplicatedPattern(correct_response: CMIArray, current_index: number, value: any): boolean {\n    let found = false;\n    const count = correct_response._count;\n    for (let i = 0; i < count && !found; i++) {\n      if (i !== current_index && correct_response.childArray[i] === value) {\n        found = true;\n      }\n    }\n    return found;\n  }\n\n  /**\n   * Checks for a valid correct_response value - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {string} interaction_type\n   * @param {Array} nodes\n   * @param {*} value\n   */\n  checkCorrectResponseValue(\n    CMIElement: string,\n    interaction_type: string,\n    nodes: Array<any>,\n    value: any,\n  ) {\n    const response = CorrectResponses[interaction_type];\n    if (!response) {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.TYPE_MISMATCH,\n        `Incorrect Response Type: ${interaction_type}`,\n      );\n      return;\n    }\n    const formatRegex = new RegExp(response.format);\n    for (let i = 0; i < nodes.length && this.lastErrorCode === \"0\"; i++) {\n      if (interaction_type.match(\"^(fill-in|long-fill-in|matching|performance|sequencing)$\")) {\n        nodes[i] = this.removeCorrectResponsePrefixes(CMIElement, nodes[i]);\n      }\n\n      if (response?.delimiter2) {\n        const values = nodes[i].split(response.delimiter2);\n        if (values.length === 2) {\n          const matches = values[0].match(formatRegex);\n          if (!matches) {\n            this.throwSCORMError(\n              CMIElement,\n              scorm2004_errors.TYPE_MISMATCH,\n              `${interaction_type}: ${value}`,\n            );\n          } else {\n            if (!response.format2 || !values[1].match(new RegExp(response.format2))) {\n              this.throwSCORMError(\n                CMIElement,\n                scorm2004_errors.TYPE_MISMATCH,\n                `${interaction_type}: ${value}`,\n              );\n            }\n          }\n        } else {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.TYPE_MISMATCH,\n            `${interaction_type}: ${value}`,\n          );\n        }\n      } else {\n        const matches = nodes[i].match(formatRegex);\n        if ((!matches && value !== \"\") || (!matches && interaction_type === \"true-false\")) {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.TYPE_MISMATCH,\n            `${interaction_type}: ${value}`,\n          );\n        } else {\n          if (interaction_type === \"numeric\" && nodes.length > 1) {\n            if (Number(nodes[0]) > Number(nodes[1])) {\n              this.throwSCORMError(\n                CMIElement,\n                scorm2004_errors.TYPE_MISMATCH,\n                `${interaction_type}: ${value}`,\n              );\n            }\n          } else {\n            if (nodes[i] !== \"\" && response.unique) {\n              for (let j = 0; j < i && this.lastErrorCode === \"0\"; j++) {\n                if (nodes[i] === nodes[j]) {\n                  this.throwSCORMError(\n                    CMIElement,\n                    scorm2004_errors.TYPE_MISMATCH,\n                    `${interaction_type}: ${value}`,\n                  );\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove prefixes from correct_response - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {string} node\n   * @return {*}\n   */\n  removeCorrectResponsePrefixes(CMIElement: string, node: string): any {\n    let seenOrder = false;\n    let seenCase = false;\n    let seenLang = false;\n\n    const prefixRegex = new RegExp(\"^({(lang|case_matters|order_matters)=([^}]+)})\");\n    let matches = node.match(prefixRegex);\n    let langMatches = null;\n    while (matches) {\n      switch (matches[2]) {\n        case \"lang\":\n          langMatches = node.match(scorm2004_regex.CMILangcr);\n          if (langMatches) {\n            const lang = langMatches[3];\n            if (lang !== undefined && lang.length > 0) {\n              if (!ValidLanguages.includes(lang.toLowerCase())) {\n                this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n              }\n            }\n          }\n          seenLang = true;\n          break;\n        case \"case_matters\":\n          if (!seenLang && !seenOrder && !seenCase) {\n            if (matches[3] !== \"true\" && matches[3] !== \"false\") {\n              this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n            }\n          }\n\n          seenCase = true;\n          break;\n        case \"order_matters\":\n          if (!seenCase && !seenLang && !seenOrder) {\n            if (matches[3] !== \"true\" && matches[3] !== \"false\") {\n              this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n            }\n          }\n\n          seenOrder = true;\n          break;\n      }\n      node = node.substring(matches[1].length);\n      matches = node.match(prefixRegex);\n    }\n\n    return node;\n  }\n\n  /**\n   * Replace the whole API with another\n   * @param {Scorm2004API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI: Scorm2004API) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.adl = newAPI.adl;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit - delegates to DataSerializationModule\n   *\n   * @param {boolean} terminateCommit\n   * @return {object|Array}\n   */\n  renderCommitCMI(terminateCommit: boolean): StringKeyMap | Array<any> {\n    const cmiExport: StringKeyMap = this.renderCMIToJSONObject();\n\n    if (terminateCommit) {\n      (cmiExport.cmi as any).total_time = (this.cmi as any).getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened: StringKeyMap = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case \"flattened\":\n        return Utilities.flatten(cmiExport);\n      case \"params\":\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case \"json\":\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit - delegates to DataSerializationModule\n   * @param {boolean} terminateCommit\n   * @return {CommitObject}\n   */\n  renderCommitObject(terminateCommit: boolean): CommitObject {\n    const cmiExport = this.renderCommitCMI(terminateCommit);\n    const totalTimeDuration = this.cmi.getCurrentTotalTime();\n    const totalTimeSeconds = Utilities.getDurationAsSeconds(\n      totalTimeDuration,\n      scorm2004_regex.CMITimespan,\n    );\n\n    let completionStatus = CompletionStatus.UNKNOWN;\n    let successStatus = SuccessStatus.UNKNOWN;\n    if (this.cmi.completion_status) {\n      if (this.cmi.completion_status === \"completed\") {\n        completionStatus = CompletionStatus.COMPLETED;\n      } else if (this.cmi.completion_status === \"incomplete\") {\n        completionStatus = CompletionStatus.INCOMPLETE;\n      }\n    }\n    if (this.cmi.success_status) {\n      if (this.cmi.success_status === \"passed\") {\n        successStatus = SuccessStatus.PASSED;\n      } else if (this.cmi.success_status === \"failed\") {\n        successStatus = SuccessStatus.FAILED;\n      }\n    }\n\n    const score = this.cmi.score;\n    const scoreObject: ScoreObject = {};\n    if (score) {\n      if (!Number.isNaN(Number.parseFloat(score.raw))) {\n        scoreObject.raw = Number.parseFloat(score.raw);\n      }\n      if (!Number.isNaN(Number.parseFloat(score.min))) {\n        scoreObject.min = Number.parseFloat(score.min);\n      }\n      if (!Number.isNaN(Number.parseFloat(score.max))) {\n        scoreObject.max = Number.parseFloat(score.max);\n      }\n      if (!Number.isNaN(Number.parseFloat(score.scaled))) {\n        scoreObject.scaled = Number.parseFloat(score.scaled);\n      }\n    }\n\n    const commitObject: CommitObject = {\n      completionStatus: completionStatus,\n      successStatus: successStatus,\n      totalTimeSeconds: totalTimeSeconds,\n      runtimeData: cmiExport as StringKeyMap,\n    };\n    if (scoreObject) {\n      commitObject.score = scoreObject;\n    }\n    return commitObject;\n  }\n\n  /**\n   * Attempts to store the data to the LMS - delegates to DataSerializationModule\n   *\n   * @param {boolean} terminateCommit\n   * @return {ResultObject}\n   */\n  async storeData(terminateCommit: boolean): Promise<ResultObject> {\n    if (terminateCommit) {\n      if (this.cmi.mode === \"normal\") {\n        if (this.cmi.credit === \"credit\") {\n          if (this.cmi.completion_threshold && this.cmi.progress_measure) {\n            if (this.cmi.progress_measure >= this.cmi.completion_threshold) {\n              this.cmi.completion_status = \"completed\";\n            } else {\n              this.cmi.completion_status = \"incomplete\";\n            }\n          }\n          if (this.cmi.scaled_passing_score && this.cmi.score.scaled) {\n            if (this.cmi.score.scaled >= this.cmi.scaled_passing_score) {\n              this.cmi.success_status = \"passed\";\n            } else {\n              this.cmi.success_status = \"failed\";\n            }\n          }\n        }\n      }\n    }\n\n    let navRequest = false;\n    if (\n      this.adl.nav.request !==\n        ((this.startingData?.adl as StringKeyMap)?.nav as StringKeyMap)?.request &&\n      this.adl.nav.request !== \"_none_\"\n    ) {\n      navRequest = true;\n    }\n\n    const commitObject = this.getCommitObject(terminateCommit);\n    if (typeof this.settings.lmsCommitUrl === \"string\") {\n      const result = await this.processHttpRequest(\n        this.settings.lmsCommitUrl,\n        {\n          commitObject: commitObject,\n        },\n        terminateCommit,\n      );\n\n      // Check if this is a sequencing call, and then call the necessary JS\n      if (\n        navRequest &&\n        result.navRequest !== undefined &&\n        result.navRequest !== \"\" &&\n        typeof result.navRequest === \"string\"\n      ) {\n        Function(`\"use strict\";(() => { ${result.navRequest} })()`)();\n      } else if (result?.navRequest && !navRequest) {\n        if (\n          typeof result.navRequest === \"object\" &&\n          Object.hasOwnProperty.call(result.navRequest, \"name\")\n        ) {\n          this.processListeners(result.navRequest.name as string, result.navRequest.data as string);\n        }\n      }\n\n      return result;\n    }\n\n    return {\n      result: \"true\",\n      errorCode: 0,\n    };\n  }\n\n  /**\n   * Configure sequencing based on provided settings\n   * @param {SequencingSettings} sequencingSettings - The sequencing settings\n   */\n  private configureSequencing(sequencingSettings: SequencingSettings): void {\n    // Configure activity tree\n    if (sequencingSettings.activityTree) {\n      this.configureActivityTree(sequencingSettings.activityTree);\n    }\n\n    // Configure sequencing rules\n    if (sequencingSettings.sequencingRules) {\n      this.configureSequencingRules(sequencingSettings.sequencingRules);\n    }\n\n    // Configure sequencing controls\n    if (sequencingSettings.sequencingControls) {\n      this.configureSequencingControls(sequencingSettings.sequencingControls);\n    }\n\n    // Configure rollup rules\n    if (sequencingSettings.rollupRules) {\n      this.configureRollupRules(sequencingSettings.rollupRules);\n    }\n  }\n\n  /**\n   * Configure activity tree based on provided settings\n   * @param {ActivitySettings} activityTreeSettings - The activity tree settings\n   */\n  private configureActivityTree(activityTreeSettings: ActivitySettings): void {\n    // Create root activity\n    const rootActivity = this.createActivity(activityTreeSettings);\n\n    // Create activity tree\n    const activityTree = this._sequencing.activityTree;\n    activityTree.root = rootActivity;\n\n    // Extract activity IDs for use as scoItemIds\n    this._extractedScoItemIds = this.extractActivityIds(rootActivity);\n  }\n\n  /**\n   * Extract all activity IDs from an activity and its children\n   * @param {Activity} activity - The activity to extract IDs from\n   * @return {string[]} - Array of activity IDs\n   */\n  private extractActivityIds(activity: Activity): string[] {\n    const ids = [activity.id];\n\n    // Recursively extract IDs from children\n    for (const child of activity.children) {\n      ids.push(...this.extractActivityIds(child));\n    }\n\n    return ids;\n  }\n\n  /**\n   * Create an activity from settings\n   * @param {ActivitySettings} activitySettings - The activity settings\n   * @return {Activity} - The created activity\n   */\n  private createActivity(activitySettings: ActivitySettings): Activity {\n    // Create activity\n    const activity = new Activity(activitySettings.id, activitySettings.title);\n\n    // Set activity properties\n    if (activitySettings.isVisible !== undefined) {\n      activity.isVisible = activitySettings.isVisible;\n    }\n    if (activitySettings.isActive !== undefined) {\n      activity.isActive = activitySettings.isActive;\n    }\n    if (activitySettings.isSuspended !== undefined) {\n      activity.isSuspended = activitySettings.isSuspended;\n    }\n    if (activitySettings.isCompleted !== undefined) {\n      activity.isCompleted = activitySettings.isCompleted;\n    }\n\n    // Create child activities\n    if (activitySettings.children) {\n      for (const childSettings of activitySettings.children) {\n        const childActivity = this.createActivity(childSettings);\n        activity.addChild(childActivity);\n      }\n    }\n\n    return activity;\n  }\n\n  /**\n   * Configure sequencing rules based on provided settings\n   * @param {SequencingRulesSettings} sequencingRulesSettings - The sequencing rules settings\n   */\n  private configureSequencingRules(sequencingRulesSettings: SequencingRulesSettings): void {\n    const sequencingRules = this._sequencing.sequencingRules;\n\n    // Configure pre-condition rules\n    if (sequencingRulesSettings.preConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.preConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addPreConditionRule(rule);\n      }\n    }\n\n    // Configure exit condition rules\n    if (sequencingRulesSettings.exitConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.exitConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addExitConditionRule(rule);\n      }\n    }\n\n    // Configure post-condition rules\n    if (sequencingRulesSettings.postConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.postConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addPostConditionRule(rule);\n      }\n    }\n  }\n\n  /**\n   * Create a sequencing rule from settings\n   * @param {SequencingRuleSettings} ruleSettings - The sequencing rule settings\n   * @return {SequencingRule} - The created sequencing rule\n   */\n  private createSequencingRule(ruleSettings: SequencingRuleSettings): SequencingRule {\n    // Create rule\n    const rule = new SequencingRule(ruleSettings.action, ruleSettings.conditionCombination);\n\n    // Add conditions\n    for (const conditionSettings of ruleSettings.conditions) {\n      const condition = new RuleCondition(\n        conditionSettings.condition,\n        conditionSettings.operator,\n        new Map(Object.entries(conditionSettings.parameters || {})),\n      );\n      rule.addCondition(condition);\n    }\n\n    return rule;\n  }\n\n  /**\n   * Configure sequencing controls based on provided settings\n   * @param {SequencingControlsSettings} sequencingControlsSettings - The sequencing controls settings\n   */\n  private configureSequencingControls(\n    sequencingControlsSettings: SequencingControlsSettings,\n  ): void {\n    const sequencingControls = this._sequencing.sequencingControls;\n\n    // Set sequencing control properties\n    if (sequencingControlsSettings.enabled !== undefined) {\n      sequencingControls.enabled = sequencingControlsSettings.enabled;\n    }\n    if (sequencingControlsSettings.choiceExit !== undefined) {\n      sequencingControls.choiceExit = sequencingControlsSettings.choiceExit;\n    }\n    if (sequencingControlsSettings.flow !== undefined) {\n      sequencingControls.flow = sequencingControlsSettings.flow;\n    }\n    if (sequencingControlsSettings.forwardOnly !== undefined) {\n      sequencingControls.forwardOnly = sequencingControlsSettings.forwardOnly;\n    }\n    if (sequencingControlsSettings.useCurrentAttemptObjectiveInfo !== undefined) {\n      sequencingControls.useCurrentAttemptObjectiveInfo =\n        sequencingControlsSettings.useCurrentAttemptObjectiveInfo;\n    }\n    if (sequencingControlsSettings.useCurrentAttemptProgressInfo !== undefined) {\n      sequencingControls.useCurrentAttemptProgressInfo =\n        sequencingControlsSettings.useCurrentAttemptProgressInfo;\n    }\n    if (sequencingControlsSettings.preventActivation !== undefined) {\n      sequencingControls.preventActivation = sequencingControlsSettings.preventActivation;\n    }\n    if (sequencingControlsSettings.constrainChoice !== undefined) {\n      sequencingControls.constrainChoice = sequencingControlsSettings.constrainChoice;\n    }\n    if (sequencingControlsSettings.rollupObjectiveSatisfied !== undefined) {\n      sequencingControls.rollupObjectiveSatisfied =\n        sequencingControlsSettings.rollupObjectiveSatisfied;\n    }\n    if (sequencingControlsSettings.rollupProgressCompletion !== undefined) {\n      sequencingControls.rollupProgressCompletion =\n        sequencingControlsSettings.rollupProgressCompletion;\n    }\n    if (sequencingControlsSettings.objectiveMeasureWeight !== undefined) {\n      sequencingControls.objectiveMeasureWeight = sequencingControlsSettings.objectiveMeasureWeight;\n    }\n  }\n\n  /**\n   * Configure rollup rules based on provided settings\n   * @param {RollupRulesSettings} rollupRulesSettings - The rollup rules settings\n   */\n  private configureRollupRules(rollupRulesSettings: RollupRulesSettings): void {\n    const rollupRules = this._sequencing.rollupRules;\n\n    // Configure rollup rules\n    if (rollupRulesSettings.rules) {\n      for (const ruleSettings of rollupRulesSettings.rules) {\n        const rule = this.createRollupRule(ruleSettings);\n        rollupRules.addRule(rule);\n      }\n    }\n  }\n\n  /**\n   * Create a rollup rule from settings\n   * @param {RollupRuleSettings} ruleSettings - The rollup rule settings\n   * @return {RollupRule} - The created rollup rule\n   */\n  private createRollupRule(ruleSettings: RollupRuleSettings): RollupRule {\n    // Create rule\n    const rule = new RollupRule(\n      ruleSettings.action,\n      ruleSettings.consideration,\n      ruleSettings.minimumCount,\n      ruleSettings.minimumPercent,\n    );\n\n    // Add conditions\n    for (const conditionSettings of ruleSettings.conditions) {\n      const condition = new RollupCondition(\n        conditionSettings.condition,\n        new Map(Object.entries(conditionSettings.parameters || {})),\n      );\n      rule.addCondition(condition);\n    }\n\n    return rule;\n  }\n}\n\nexport default Scorm2004API;\n"],"names":["scorm12_constants","cmi_children","core_children","score_children","comments_children","objectives_children","correct_responses_children","student_data_children","student_preference_children","interactions_children","error_descriptions","basicMessage","detailMessage","aicc_constants","__spreadValues","student_demographics_children","tries_children","attempt_records_children","paths_children","scorm2004_constants","adl_data_children","global_errors","GENERAL","INITIALIZATION_FAILED","INITIALIZED","TERMINATED","TERMINATION_FAILURE","TERMINATION_BEFORE_INIT","MULTIPLE_TERMINATION","RETRIEVE_BEFORE_INIT","RETRIEVE_AFTER_TERM","STORE_BEFORE_INIT","STORE_AFTER_TERM","COMMIT_BEFORE_INIT","COMMIT_AFTER_TERM","ARGUMENT_ERROR","CHILDREN_ERROR","COUNT_ERROR","GENERAL_GET_FAILURE","GENERAL_SET_FAILURE","GENERAL_COMMIT_FAILURE","UNDEFINED_DATA_MODEL","UNIMPLEMENTED_ELEMENT","VALUE_NOT_INITIALIZED","INVALID_SET_VALUE","READ_ONLY_ELEMENT","WRITE_ONLY_ELEMENT","TYPE_MISMATCH","VALUE_OUT_OF_RANGE","DEPENDENCY_NOT_ESTABLISHED","scorm12_errors","__spreadProps","scorm2004_errors","MULTIPLE_TERMINATIONS","scorm12_regex","CMIString256","CMIString4096","CMITime","CMITimespan","CMIInteger","CMISInteger","CMIDecimal","CMIIdentifier","CMIFeedback","CMIIndex","CMIStatus","CMIStatus2","CMIExit","CMIType","CMIResult","NAVEvent","score_range","audio_range","speed_range","weighting_range","text_range","aicc_regex","scorm2004_regex","BaseScormValidationError","Error","constructor","CMIElement","errorCode","super","this","_errorCode","Object","setPrototypeOf","prototype","ValidationError","errorMessage","detailedMessage","_detailedMessage","message","_errorMessage","Scorm12ValidationError","hasOwnProperty","call","String","BaseCMI","cmi_element","jsonString","_initialized","_cmi_element","initialized","start_time","_start_time","initialize","setStartTime","Date","getTime","BaseRootCMI","designations","D","H","M","S","getSecondsAsHHMMSS","memoize","totalSeconds","hours","Math","floor","dateObj","minutes","getUTCMinutes","seconds","getSeconds","ms","msStr","countDecimals","toFixed","split","replace","getSecondsAsISODuration","duration","remainder","entries","forEach","designationsKey","current_seconds","value","indexOf","includes","getTimeAsSeconds","timeString","timeRegex","_a","RegExp","match","parts","getDurationAsSeconds","durationRegex","_b","_c","_d","years","_","days","exec","result","flatten","data","recurse","cur","prop","Array","isArray","item","i","length","keys","filter","p","isEmpty","num","stringMatches","str","tester","fn","keyFn","cache","Map","args","key","JSON","stringify","has","get","set","checkValidFormat","regexPattern","errorClass","allowEmptyString","formatRegex","matches","_errorClass","checkValidRange","rangePattern","ranges","check12ValidFormat","check12ValidRange","validationService","validateScore","decimalRegex","scoreRange","invalidTypeCode","invalidRangeCode","validateScorm12Audio","validateScorm12Language","validateScorm12Speed","validateScorm12Text","validateReadOnly","CMIScore","params","_raw","_min","__children","__score_range","_max","max","__invalid_error_code","invalidErrorCode","__invalid_type_code","__invalid_range_code","__decimal_regex","__error_class","reset","_children","raw","min","toJSON","CMICore","_student_id","_student_name","_lesson_location","_credit","_lesson_status","_entry","_total_time","_lesson_mode","_exit","_session_time","_suspend_data","score","student_id","student_name","lesson_location","credit","lesson_status","entry","total_time","lesson_mode","exit","session_time","suspend_data","getCurrentTotalTime","sessionTime","startTime","Util.getSecondsAsHHMMSS","first","second","CMIArray","children","childArray","wipe","_count","_id","_status","id","status","CMIStudentData","_mastery_score","_max_time_allowed","_time_limit_action","mastery_score","max_time_allowed","time_limit_action","CMIStudentPreference","_audio","_language","_speed","_text","audio","language","speed","text","_time","_type","_weighting","_student_response","_result","_latency","objectives","correct_responses","time","type","weighting","student_response","latency","_pattern","pattern","student_data","__version","_launch_data","_comments","_comments_from_lms","core","CMIObjectives","student_preference","interactions","CMIInteractions","_e","launch_data","comments","comments_from_lms","_version","NAV","_event","event","LogLevelEnum","DEBUG","INFO","WARN","ERROR","NONE","DefaultSettings","autocommit","autocommitSeconds","asyncCommit","sendFullCommit","lmsCommitUrl","dataCommitFormat","commitRequestDataType","autoProgress","logLevel","selfReportSessionTime","alwaysSendTotalTime","renderCommonCommitFields","strict_errors","xhrHeaders","xhrWithCredentials","fetchMode","useBeaconInsteadOfFetch","responseHandler","response","httpResult","json","responseText","parse","e","requestHandler","commitObject","onLogMessage","defaultLogHandler","scoItemIds","scoItemIdValidator","globalObjectiveIds","enableOfflineSupport","courseId","syncOnInitialize","syncOnTerminate","maxSyncAttempts","messageLevel","logMessage","console","error","warn","info","debug","log","ScheduledCommit","API","when","callback","_cancelled","_API","_timeout","setTimeout","wrapper","bind","_callback","cancel","clearTimeout","__async","commit","HttpService","settings","error_codes","processHttpRequest","url","immediate","apiLog","processListeners","genericError","body","join","navigator","sendBeacon","Blob","performFetch","then","transformResponse","process","performBeacon","init","method","mode","headers","keepalive","credentials","fetch","beaconSuccess","Promise","resolve","ok","updateSettings","EventService","listenerMap","listenerCount","parseListenerName","listenerName","listenerSplit","functionName","on","listenerFunctions","listenerFunction","parsedListener","listeners","push","off","removeIndex","findIndex","obj","splice","delete","clear","newListeners","listener","listenerHasCMIElement","CMIElementsMatch","endsWith","prefix","slice","startsWith","SerializationService","loadFromFlattenedJSON","setCMIValue","isNotInitialized","setStartingData","int_pattern","obj_pattern","others","intMatch","index","field","objMatch","sort","a","b","localeCompare","processItems","items","loadFromJSON","regex","from","m","unflatten","currentCMIElement","tempCMIElement","renderCMIToJSONString","cmi","k","v","renderCMIToJSONObject","getCommitObject","terminateCommit","renderCommitObject","renderCommitCMI","apiLogLevel","shouldTerminateCommit","LoggingService","_logLevel","_logHandler","getInstance","_instance","setLogLevel","level","getLogLevel","setLogHandler","handler","shouldLog","getNumericLevel","getLoggingService","ErrorHandlingService","errorCodes","getLmsErrorMessageDetails","loggingService","_lastErrorCode","_errorCodes","_apiLog","_getLmsErrorMessageDetails","_loggingService","lastErrorCode","throwSCORMError","errorNumber","formattedMessage","clearSCORMError","success","handleValueAccessException","returnValue","validationError","errorType","name","stack","errorDetails","jsonError","OfflineStorageService","storeName","syncQueue","isOnline","onLine","syncInProgress","window","addEventListener","handleOnlineStatusChange","wasOnline","syncOfflineData","storeOffline","commitData","queueItem","now","random","toString","substr","timestamp","syncAttempts","currentQueue","getFromStorage","saveToStorage","getOfflineData","remainingQueue","sendDataToLMS","processedData","isDeviceOnline","storedData","localStorage","getItem","setItem","hasPendingOfflineData","some","BaseAPI","httpService","eventService","serializationService","cmiDataService","errorHandlingService","offlineStorageService","_settings","_courseId","TypeError","currentState","_error_codes","_httpService","_eventService","element","_serializationService","_errorHandlingService","detail","createErrorHandlingService","_offlineStorageService","offlineData","runtimeData","catch","commonReset","clearScheduledCommit","startingData","callbackName","initializeMessage","terminationMessage","isInitialized","isTerminated","hasPendingData","syncSuccess","messageString","padEnd","formatMessage","previousSettings","terminate","checkTerminated","checkState","storeData","getValue","getCMIValue","setValue","commitCallback","scheduleCommit","getLastError","getErrorString","CMIErrorCode","getDiagnostic","beforeInitError","afterTermError","_errorNumber","_detail","_CMIElement","_value","_commonSetCMIValue","methodName","scorm2004","structure","refObject","foundFirstIndex","invalidErrorMessage","idx","attribute","substring","_checkObjectHasProperty","validateCorrectResponse","parseInt","isNaN","newChild","getChildElement","_commonGetCMIValue","uninitializedErrorMessage","_isTargetValid","getFlattenedCMI","Utilities.flatten","StringKeyMap","getOwnPropertyDescriptor","getPrototypeOf","Scorm12API","mastery_override","statusSetByModule","CMI","nav","LMSInitialize","lmsInitialize","LMSFinish","lmsFinish","LMSGetValue","lmsGetValue","LMSSetValue","lmsSetValue","LMSCommit","lmsCommit","LMSGetLastError","lmsGetLastError","LMSGetErrorString","lmsGetErrorString","LMSGetDiagnostic","lmsGetDiagnostic","internalFinish","CMIObjectivesObject","CMIInteractionsCorrectResponsesObject","CMIInteractionsObjectivesObject","CMIInteractionsObject","replaceWithAnotherScormAPI","newAPI","cmiExport","flattened","totalTimeHHMMSS","totalTimeSeconds","Utilities.getTimeAsSeconds","lessonStatus","completionStatus","successStatus","scoreObject","Number","parseFloat","originalStatus","aicc_errors","AICCValidationError","checkAICCValidFormat","CMIEvaluation","CMIEvaluationComments","CMIEvaluationCommentsObject","_content","_location","content","location","AICCStudentPreferences","_lesson_type","_text_color","_text_location","_text_size","_video","windows","lesson_type","text_color","text_location","text_size","video","CMIStudentDemographics","_city","_class","_company","_country","_experience","_familiar_name","_instructor_name","_title","_native_language","_state","_street_address","_telephone","_years_experience","city","clazz","company","country","experience","familiar_name","instructor_name","title","native_language","state","street_address","telephone","years_experience","class","CMITries","CMITriesObject","CMIAttemptRecords","CMIAttemptRecordsObject","AICCCMIStudentData","_tries_during_lesson","tries","attempt_records","tries_during_lesson","CMIPaths","CMIPathsObject","_location_id","_date","_why_left","_time_in_element","location_id","date","why_left","time_in_element","Scorm12CMI.CMI","student_demographics","evaluation","paths","Scorm2004ValidationError","check2004ValidFormat","check2004ValidRange","CMILearnerPreference","_audio_level","_delivery_speed","_audio_captioning","audio_level","delivery_speed","audio_captioning","LearnerResponses","format","delimiter","unique","choice","matching","format2","delimiter2","performance","sequencing","likert","numeric","other","CorrectResponses","duplicate","limit","delimiter3","_timestamp","_learner_response","_description","learner_response","nodes","response_type","values","j","description","parent","_parent","interactionType","isValid","Scorm2004CMIScore","_scaled","scaled","CMICommentsFromLMS","CMICommentsFromLearner","CMICommentsObject","readOnlyAfterInit","_comment","_readOnlyAfterInit","comment","findObjectiveById","find","objective","findObjectiveByIndex","setObjectiveByIndex","_success_status","_completion_status","_progress_measure","success_status","completion_status","progress_measure","CMIMetadata","CMILearner","_learner_id","_learner_name","learner_id","learner_name","CMISession","Util.getSecondsAsISODuration","Util.addTwoDurations","CMIContent","CMISettings","_mode","CMIThresholds","_scaled_passing_score","_completion_threshold","scaled_passing_score","completion_threshold","metadata","learner","session","thresholds","learner_preference","comments_from_learner","_f","_g","_h","_i","_j","_k","_l","_m","ADL","ADLData","_sequencing","ADLNav","adlNav","_request","request_valid","ADLNavRequestValid","request","processNavigationRequest","ADLDataObject","_store","store","_continue","_previous","_choice","_jump","previous","jump","continue","RuleActionType","RuleCondition","condition","operator","parameters","_condition","_operator","_parameters","evaluate","activity","objectiveMeasureStatus","greaterThanValue","objectiveNormalizedMeasure","lessThanValue","isCompleted","attemptCount","attemptLimit","fromEntries","SequencingRule","action","conditionCombination","_conditions","_action","_conditionCombination","conditions","addCondition","removeCondition","every","SequencingRules","_preConditionRules","_exitConditionRules","_postConditionRules","preConditionRules","addPreConditionRule","rule","exitConditionRules","addExitConditionRule","postConditionRules","addPostConditionRule","evaluatePreConditionRules","evaluateExitConditionRules","evaluatePostConditionRules","RollupCondition","RollupRule","consideration","minimumCount","minimumPercent","_consideration","_minimumCount","_minimumPercent","matchingChildren","child","RollupRules","_rules","rules","addRule","removeRule","processRollup","completionRollup","successRollup","_defaultCompletionRollup","_defaultSuccessRollup","ValidLanguages","Activity","_isVisible","_isActive","_isSuspended","_isCompleted","_completionStatus","_successStatus","_attemptCount","_attemptCompletionAmount","_attemptAbsoluteDuration","_attemptExperiencedDuration","_activityAbsoluteDuration","_activityExperiencedDuration","_objectiveSatisfiedStatus","_objectiveMeasureStatus","_objectiveNormalizedMeasure","addChild","removeChild","isVisible","isActive","isSuspended","incrementAttemptCount","attemptCompletionAmount","attemptAbsoluteDuration","attemptExperiencedDuration","activityAbsoluteDuration","activityExperiencedDuration","objectiveSatisfiedStatus","map","ActivityTree","_root","_currentActivity","_suspendedActivity","_activities","root","_addActivitiesToMap","currentActivity","suspendedActivity","getActivity","getAllActivities","getParent","getChildren","getSiblings","getNextSibling","siblings","getPreviousSibling","getFirstChild","getLastChild","getCommonAncestor","activity1","activity2","path1","current","unshift","SequencingControls","_enabled","_choiceExit","_flow","_forwardOnly","_useCurrentAttemptObjectiveInfo","_useCurrentAttemptProgressInfo","_preventActivation","_constrainChoice","_rollupObjectiveSatisfied","_rollupProgressCompletion","_objectiveMeasureWeight","enabled","choiceExit","flow","forwardOnly","useCurrentAttemptObjectiveInfo","useCurrentAttemptProgressInfo","preventActivation","constrainChoice","rollupObjectiveSatisfied","rollupProgressCompletion","objectiveMeasureWeight","isChoiceNavigationAllowed","isFlowNavigationAllowed","isForwardNavigationAllowed","isBackwardNavigationAllowed","Sequencing","_adlNav","_activityTree","_sequencingRules","_sequencingControls","_rollupRules","activityTree","sequencingRules","sequencingControls","rollupRules","preConditionAction","SKIP","DISABLED","HIDE_FROM_CHOICE","STOP_FORWARD_TRAVERSAL","processContinueRequest","processPreviousRequest","processExitRequest","processExitAllRequest","processAbandonRequest","processAbandonAllRequest","processSuspendAllRequest","nextActivity","exitConditionAction","EXIT_PARENT","EXIT_ALL","postConditionAction","RETRY","RETRY_ALL","CONTINUE","PREVIOUS","EXIT","previousActivity","_processRollupRecursive","AICC","Scorm2004API","_globalObjectives","_extractedScoItemIds","adl","configureSequencing","Initialize","Terminate","GetValue","SetValue","Commit","GetLastError","GetErrorString","GetDiagnostic","version","globalObjectives","navActions","exitAll","abandon","abandonAll","choiceJumpRegex","target","groups","choice_target","jump_target","adlNavRequestRegex","element_base","objective_id","global_index","newGlobalObjective","global_element","createCorrectResponsesObject","interaction","checkDuplicateChoiceResponse","checkValidResponseType","interaction_type","checkCorrectResponseValue","interaction_count","pattern_index","checkDuplicatedPattern","correct_response","current_index","found","count","removeCorrectResponsePrefixes","node","seenOrder","seenCase","seenLang","prefixRegex","langMatches","lang","toLowerCase","totalTimeDuration","Utilities.getDurationAsSeconds","navRequest","Function","sequencingSettings","configureActivityTree","configureSequencingRules","configureSequencingControls","configureRollupRules","activityTreeSettings","rootActivity","createActivity","extractActivityIds","ids","activitySettings","childSettings","childActivity","sequencingRulesSettings","ruleSettings","createSequencingRule","conditionSettings","sequencingControlsSettings","rollupRulesSettings","createRollupRule"],"mappings":"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"}