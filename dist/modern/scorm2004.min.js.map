{"version":3,"file":"scorm2004.min.js","sources":["../../src/constants/api_constants.ts","../../src/utilities.ts","../../src/constants/enums.ts","../../src/constants/default_settings.ts","../../src/helpers/scheduled_commit.ts","../../src/services/HttpService.ts","../../src/services/EventService.ts","../../src/services/SerializationService.ts","../../src/exceptions.ts","../../src/services/LoggingService.ts","../../src/services/ErrorHandlingService.ts","../../src/cmi/common/base_cmi.ts","../../src/constants/error_codes.ts","../../src/cmi/common/array.ts","../../src/BaseAPI.ts","../../src/exceptions/scorm2004_exceptions.ts","../../src/cmi/common/validation.ts","../../src/cmi/scorm2004/validation.ts","../../src/constants/regex.ts","../../src/cmi/scorm2004/learner_preference.ts","../../src/constants/response_constants.ts","../../src/cmi/scorm2004/interactions.ts","../../src/exceptions/scorm12_exceptions.ts","../../src/cmi/scorm12/validation.ts","../../src/services/ValidationService.ts","../../src/cmi/common/score.ts","../../src/cmi/scorm2004/score.ts","../../src/cmi/scorm2004/comments.ts","../../src/cmi/scorm2004/objectives.ts","../../src/cmi/scorm2004/metadata.ts","../../src/cmi/scorm2004/learner.ts","../../src/cmi/scorm2004/status.ts","../../src/cmi/scorm2004/session.ts","../../src/cmi/scorm2004/content.ts","../../src/cmi/scorm2004/settings.ts","../../src/cmi/scorm2004/thresholds.ts","../../src/cmi/scorm2004/cmi.ts","../../src/cmi/scorm2004/adl.ts","../../src/cmi/scorm2004/sequencing/sequencing_rules.ts","../../src/cmi/scorm2004/sequencing/rollup_rules.ts","../../src/constants/language_constants.ts","../../src/cmi/scorm2004/sequencing/activity.ts","../../src/cmi/scorm2004/sequencing/activity_tree.ts","../../src/cmi/scorm2004/sequencing/sequencing_controls.ts","../../src/cmi/scorm2004/sequencing/sequencing.ts","../../src/Scorm2004API.ts"],"sourcesContent":["interface ErrorDescription {\n  basicMessage: string;\n  detailMessage: string;\n}\n\ninterface ErrorDescriptions {\n  [key: string]: ErrorDescription;\n}\n\ninterface ScormConstants {\n  cmi_children: string;\n  core_children: string;\n  score_children: string;\n  comments_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface AiccConstants extends ScormConstants {\n  student_demographics_children: string;\n  tries_children: string;\n  attempt_records_children: string;\n  paths_children: string;\n}\n\ninterface Scorm2004Constants {\n  cmi_children: string;\n  comments_children: string;\n  score_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  adl_data_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface GlobalConstants {\n  SCORM_TRUE: string;\n  SCORM_FALSE: string;\n  STATE_NOT_INITIALIZED: number;\n  STATE_INITIALIZED: number;\n  STATE_TERMINATED: number;\n}\n\nexport const global_constants: GlobalConstants = {\n  SCORM_TRUE: \"true\",\n  SCORM_FALSE: \"false\",\n  STATE_NOT_INITIALIZED: 0,\n  STATE_INITIALIZED: 1,\n  STATE_TERMINATED: 2,\n};\n\nexport const scorm12_constants: ScormConstants = {\n  // Children lists\n  cmi_children:\n    \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions\",\n  core_children:\n    \"student_id,student_name,lesson_location,credit,lesson_status,entry,score,total_time,lesson_mode,exit,session_time\",\n  score_children: \"raw,min,max\",\n  comments_children: \"content,location,time\",\n  objectives_children: \"id,score,status\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio,language,speed,text\",\n  interactions_children:\n    \"id,objectives,time,type,correct_responses,weighting,student_response,result,latency\",\n  error_descriptions: {\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage:\n        \"No specific error code exists to describe the error. Use LMSGetDiagnostic for more information\",\n    },\n    \"201\": {\n      basicMessage: \"Invalid argument error\",\n      detailMessage:\n        \"Indicates that an argument represents an invalid data model element or is otherwise incorrect.\",\n    },\n    \"202\": {\n      basicMessage: \"Element cannot have children\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_children\" for a data model element that does not support the \"_children\" suffix.',\n    },\n    \"203\": {\n      basicMessage: \"Element not an array - cannot have count\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_count\" for a data model element that does not support the \"_count\" suffix.',\n    },\n    \"301\": {\n      basicMessage: \"Not initialized\",\n      detailMessage: \"Indicates that an API call was made before the call to lmsInitialize.\",\n    },\n    \"401\": {\n      basicMessage: \"Not implemented error\",\n      detailMessage:\n        \"The data model element indicated in a call to LMSGetValue or LMSSetValue is valid, but was not implemented by this LMS. SCORM 1.2 defines a set of data model elements as being optional for an LMS to implement.\",\n    },\n    \"402\": {\n      basicMessage: \"Invalid set value, element is a keyword\",\n      detailMessage:\n        'Indicates that LMSSetValue was called on a data model element that represents a keyword (elements that end in \"_children\" and \"_count\").',\n    },\n    \"403\": {\n      basicMessage: \"Element is read only\",\n      detailMessage: \"LMSSetValue was called with a data model element that can only be read.\",\n    },\n    \"404\": {\n      basicMessage: \"Element is write only\",\n      detailMessage: \"LMSGetValue was called on a data model element that can only be written to.\",\n    },\n    \"405\": {\n      basicMessage: \"Incorrect Data Type\",\n      detailMessage:\n        \"LMSSetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a LMSSetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\nexport const aicc_constants: AiccConstants = {\n  ...scorm12_constants,\n  ...{\n    cmi_children:\n      \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions,evaluation\",\n    student_preference_children:\n      \"audio,language,lesson_type,speed,text,text_color,text_location,text_size,video,windows\",\n    student_data_children: \"attempt_number,tries,mastery_score,max_time_allowed,time_limit_action\",\n    student_demographics_children:\n      \"city,class,company,country,experience,familiar_name,instructor_name,title,native_language,state,street_address,telephone,years_experience\",\n    tries_children: \"time,status,score\",\n    attempt_records_children: \"score,lesson_status\",\n    paths_children: \"location_id,date,time,status,why_left,time_in_element\",\n  },\n};\n\nexport const scorm2004_constants: Scorm2004Constants = {\n  // Children lists\n  cmi_children:\n    \"_version,comments_from_learner,comments_from_lms,completion_status,credit,entry,exit,interactions,launch_data,learner_id,learner_name,learner_preference,location,max_time_allowed,mode,objectives,progress_measure,scaled_passing_score,score,session_time,success_status,suspend_data,time_limit_action,total_time\",\n  comments_children: \"comment,timestamp,location\",\n  score_children: \"max,raw,scaled,min\",\n  objectives_children: \"progress_measure,completion_status,success_status,description,score,id\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio_level,audio_captioning,delivery_speed,language\",\n  interactions_children:\n    \"id,type,objectives,timestamp,correct_responses,weighting,learner_response,result,latency,description\",\n  adl_data_children: \"id,store\",\n  error_descriptions: {\n    \"0\": {\n      basicMessage: \"No Error\",\n      detailMessage: \"No error occurred, the previous API call was successful.\",\n    },\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage:\n        \"No specific error code exists to describe the error. Use GetDiagnostic for more information.\",\n    },\n    \"102\": {\n      basicMessage: \"General Initialization Failure\",\n      detailMessage: \"Call to Initialize failed for an unknown reason.\",\n    },\n    \"103\": {\n      basicMessage: \"Already Initialized\",\n      detailMessage: \"Call to Initialize failed because Initialize was already called.\",\n    },\n    \"104\": {\n      basicMessage: \"Content Instance Terminated\",\n      detailMessage: \"Call to Initialize failed because Terminate was already called.\",\n    },\n    \"111\": {\n      basicMessage: \"General Termination Failure\",\n      detailMessage: \"Call to Terminate failed for an unknown reason.\",\n    },\n    \"112\": {\n      basicMessage: \"Termination Before Initialization\",\n      detailMessage: \"Call to Terminate failed because it was made before the call to Initialize.\",\n    },\n    \"113\": {\n      basicMessage: \"Termination After Termination\",\n      detailMessage: \"Call to Terminate failed because Terminate was already called.\",\n    },\n    \"122\": {\n      basicMessage: \"Retrieve Data Before Initialization\",\n      detailMessage: \"Call to GetValue failed because it was made before the call to Initialize.\",\n    },\n    \"123\": {\n      basicMessage: \"Retrieve Data After Termination\",\n      detailMessage: \"Call to GetValue failed because it was made after the call to Terminate.\",\n    },\n    \"132\": {\n      basicMessage: \"Store Data Before Initialization\",\n      detailMessage: \"Call to SetValue failed because it was made before the call to Initialize.\",\n    },\n    \"133\": {\n      basicMessage: \"Store Data After Termination\",\n      detailMessage: \"Call to SetValue failed because it was made after the call to Terminate.\",\n    },\n    \"142\": {\n      basicMessage: \"Commit Before Initialization\",\n      detailMessage: \"Call to Commit failed because it was made before the call to Initialize.\",\n    },\n    \"143\": {\n      basicMessage: \"Commit After Termination\",\n      detailMessage: \"Call to Commit failed because it was made after the call to Terminate.\",\n    },\n    \"201\": {\n      basicMessage: \"General Argument Error\",\n      detailMessage:\n        \"An invalid argument was passed to an API method (usually indicates that Initialize, Commit or Terminate did not receive the expected empty string argument.\",\n    },\n    \"301\": {\n      basicMessage: \"General Get Failure\",\n      detailMessage:\n        \"Indicates a failed GetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"351\": {\n      basicMessage: \"General Set Failure\",\n      detailMessage:\n        \"Indicates a failed SetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"391\": {\n      basicMessage: \"General Commit Failure\",\n      detailMessage:\n        \"Indicates a failed Commit call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"401\": {\n      basicMessage: \"Undefined Data Model Element\",\n      detailMessage:\n        \"The data model element name passed to GetValue or SetValue is not a valid SCORM data model element.\",\n    },\n    \"402\": {\n      basicMessage: \"Unimplemented Data Model Element\",\n      detailMessage:\n        \"The data model element indicated in a call to GetValue or SetValue is valid, but was not implemented by this LMS. In SCORM 2004, this error would indicate an LMS that is not fully SCORM conformant.\",\n    },\n    \"403\": {\n      basicMessage: \"Data Model Element Value Not Initialized\",\n      detailMessage:\n        \"Attempt to read a data model element that has not been initialized by the LMS or through a SetValue call. This error condition is often reached during normal execution of a SCO.\",\n    },\n    \"404\": {\n      basicMessage: \"Data Model Element Is Read Only\",\n      detailMessage: \"SetValue was called with a data model element that can only be read.\",\n    },\n    \"405\": {\n      basicMessage: \"Data Model Element Is Write Only\",\n      detailMessage: \"GetValue was called on a data model element that can only be written to.\",\n    },\n    \"406\": {\n      basicMessage: \"Data Model Element Type Mismatch\",\n      detailMessage:\n        \"SetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Data Model Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a SetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\n","/**\n * Constants for time conversion calculations.\n * These are used throughout the codebase for converting between different time formats.\n */\nexport const SECONDS_PER_SECOND = 1.0;\nexport const SECONDS_PER_MINUTE = 60;\nexport const SECONDS_PER_HOUR = 60 * SECONDS_PER_MINUTE;\nexport const SECONDS_PER_DAY = 24 * SECONDS_PER_HOUR;\n\ntype Designation = {\n  [key: string]: number;\n};\n\n/**\n * A record with string keys and unknown values.\n * This is a more type-safe alternative to using `any`.\n */\nexport type StringKeyMap = Record<string, unknown>;\n\nconst designations: Designation = {\n  D: SECONDS_PER_DAY,\n  H: SECONDS_PER_HOUR,\n  M: SECONDS_PER_MINUTE,\n  S: SECONDS_PER_SECOND,\n};\n\n/**\n * Converts a number of seconds to a formatted time string in HH:MM:SS format.\n * This function handles decimal seconds and ensures proper formatting with leading zeros.\n *\n * @param {number|null} totalSeconds - The total number of seconds to convert. If null or negative, returns \"00:00:00\".\n * @return {string} A formatted time string in HH:MM:SS format, with up to 2 decimal places for seconds if applicable.\n *\n * @example\n * // Returns \"01:30:45\"\n * getSecondsAsHHMMSS(5445);\n *\n * @example\n * // Returns \"00:00:30.5\"\n * getSecondsAsHHMMSS(30.5);\n *\n * @example\n * // Returns \"00:00:00\"\n * getSecondsAsHHMMSS(null);\n */\nexport const getSecondsAsHHMMSS = memoize((totalSeconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!totalSeconds || totalSeconds <= 0) {\n    return \"00:00:00\";\n  }\n\n  const hours = Math.floor(totalSeconds / SECONDS_PER_HOUR);\n  const dateObj = new Date(totalSeconds * 1000);\n  const minutes = dateObj.getUTCMinutes();\n  // make sure we add any possible decimal value\n  const seconds = dateObj.getSeconds();\n  const ms = totalSeconds % 1.0;\n  let msStr = \"\";\n\n  if (countDecimals(ms) > 0) {\n    if (countDecimals(ms) > 2) {\n      msStr = ms.toFixed(2);\n    } else {\n      msStr = String(ms);\n    }\n\n    msStr = \".\" + msStr.split(\".\")[1];\n  }\n\n  return (hours + \":\" + minutes + \":\" + seconds).replace(/\\b\\d\\b/g, \"0$&\") + msStr;\n});\n\n/**\n * Converts a number of seconds to an ISO 8601 duration string (e.g., \"PT1H30M45S\").\n * This function handles the complexity of formatting according to the ISO 8601 standard,\n * including the proper placement of the \"T\" separator for time components.\n *\n * @param {number|null} seconds - The number of seconds to convert. If null or negative, returns \"PT0S\".\n * @return {string} An ISO 8601 formatted duration string.\n *\n * @example\n * // Returns \"PT1H30M45S\" (1 hour, 30 minutes, 45 seconds)\n * getSecondsAsISODuration(5445);\n *\n * @example\n * // Returns \"PT30.5S\" (30.5 seconds)\n * getSecondsAsISODuration(30.5);\n *\n * @example\n * // Returns \"P1DT1H\" (1 day, 1 hour)\n * getSecondsAsISODuration(90000);\n *\n * @example\n * // Returns \"PT0S\" (0 seconds)\n * getSecondsAsISODuration(null);\n */\nexport const getSecondsAsISODuration = memoize((seconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!seconds || seconds <= 0) {\n    return \"PT0S\";\n  }\n\n  let duration = \"P\";\n  let remainder = seconds;\n\n  // Convert to array of entries and use functional methods\n  const designationEntries = Object.entries(designations);\n\n  // Process each time designation\n  designationEntries.forEach(([designationsKey, current_seconds]) => {\n    let value = Math.floor(remainder / current_seconds);\n    remainder = remainder % current_seconds;\n\n    // Limit decimal places\n    if (countDecimals(remainder) > 2) {\n      remainder = Number(Number(remainder).toFixed(2));\n    }\n\n    // If we have anything left in the remainder, and we're currently adding\n    // seconds to the duration, go ahead and add the decimal to the seconds\n    if (designationsKey === \"S\" && remainder > 0) {\n      value += remainder;\n    }\n\n    if (value) {\n      // Add the 'T' separator for time components if needed\n      const needsTimeSeparator =\n        (duration.indexOf(\"D\") > 0 || [\"H\", \"M\", \"S\"].includes(designationsKey)) &&\n        duration.indexOf(\"T\") === -1;\n\n      if (needsTimeSeparator) {\n        duration += \"T\";\n      }\n\n      duration += `${value}${designationsKey}`;\n    }\n  });\n\n  return duration;\n});\n\n/**\n * Converts a time string in HH:MM:SS format to the equivalent number of seconds.\n * This function is flexible and can handle various input types, converting them to strings as needed.\n *\n * @param {string|number|boolean|null} timeString - The time string to convert, typically in HH:MM:SS format.\n *                                                 If not a string, it will be converted to one.\n *                                                 If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} timeRegex - The regular expression used to validate the time string format.\n *                                    If a string is provided, it will be converted to a RegExp.\n * @return {number} The total number of seconds represented by the time string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getTimeAsSeconds(\"01:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getTimeAsSeconds(\"invalid\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 30 (converts number to string \"30\" then parses as 0:0:30)\n * getTimeAsSeconds(30, /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport const getTimeAsSeconds = memoize(\n  (timeString: string | number | boolean | null, timeRegex: RegExp | string): number => {\n    if (typeof timeString === \"number\" || typeof timeString === \"boolean\") {\n      timeString = String(timeString);\n    }\n    if (typeof timeRegex === \"string\") {\n      timeRegex = new RegExp(timeRegex);\n    }\n    if (!timeString || !timeString?.match?.(timeRegex)) {\n      return 0;\n    }\n\n    const parts = timeString.split(\":\");\n    const hours = Number(parts[0]);\n    const minutes = Number(parts[1]);\n    const seconds = Number(parts[2]);\n    return hours * 3600 + minutes * 60 + seconds;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (timeString, timeRegex) => {\n    const timeStr = typeof timeString === \"string\" ? timeString : String(timeString ?? \"\");\n    const regexStr = typeof timeRegex === \"string\" ? timeRegex : (timeRegex?.toString() ?? \"\");\n    return `${timeStr}:${regexStr}`;\n  },\n);\n\n/**\n * Converts an ISO 8601 duration string (e.g., \"PT1H30M45S\") to the equivalent number of seconds.\n * This function parses the duration string using a regular expression to extract years, days,\n * hours, minutes, and seconds components.\n *\n * @param {string|null} duration - The ISO 8601 duration string to convert.\n *                                If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n *                                       The regex should have capture groups for years, days, hours, minutes, and seconds.\n * @return {number} The total number of seconds represented by the duration string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getDurationAsSeconds(\"PT1H30M45S\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 90000 (1 day, 1 hour)\n * getDurationAsSeconds(\"P1DT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getDurationAsSeconds(\"invalid\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport const getDurationAsSeconds = memoize(\n  (duration: string | null, durationRegex: RegExp | string): number => {\n    if (typeof durationRegex === \"string\") {\n      durationRegex = new RegExp(durationRegex);\n    }\n\n    if (!duration || !duration?.match?.(durationRegex)) {\n      return 0;\n    }\n\n    const [, years, _, , days, hours, minutes, seconds] =\n      new RegExp(durationRegex).exec?.(duration) ?? [];\n    let result = 0.0;\n    result += Number(seconds) || 0.0;\n    result += Number(minutes) * 60.0 || 0.0;\n    result += Number(hours) * 3600.0 || 0.0;\n    result += Number(days) * (60 * 60 * 24.0) || 0.0;\n    result += Number(years) * (60 * 60 * 24 * 365.0) || 0.0;\n    return result;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (duration, durationRegex) => {\n    const durationStr = duration ?? \"\";\n    const regexStr =\n      typeof durationRegex === \"string\" ? durationRegex : (durationRegex?.toString() ?? \"\");\n    return `${durationStr}:${regexStr}`;\n  },\n);\n\n/**\n * Adds together two ISO 8601 duration strings and returns the result as a new ISO 8601 duration string.\n * This function works by converting both durations to seconds, adding them together, and then\n * converting the result back to an ISO 8601 duration string.\n *\n * @param {string} first - The first ISO 8601 duration string.\n * @param {string} second - The second ISO 8601 duration string.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n * @return {string} A new ISO 8601 duration string representing the sum of the two input durations.\n *\n * @example\n * // Returns \"PT2H\" (1 hour + 1 hour = 2 hours)\n * addTwoDurations(\"PT1H\", \"PT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"PT1H30M\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addTwoDurations(\"PT1H\", \"PT30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"P1DT1H30M\" (1 day + 1 hour and 30 minutes = 1 day, 1 hour, and 30 minutes)\n * addTwoDurations(\"P1D\", \"PT1H30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport function addTwoDurations(\n  first: string,\n  second: string,\n  durationRegex: RegExp | string,\n): string {\n  const regex: RegExp =\n    typeof durationRegex === \"string\" ? new RegExp(durationRegex) : durationRegex;\n  return getSecondsAsISODuration(\n    getDurationAsSeconds(first, regex) + getDurationAsSeconds(second, regex),\n  );\n}\n\n/**\n * Adds together two time strings in HH:MM:SS format and returns the result as a new time string.\n * This function works by converting both time strings to seconds, adding them together, and then\n * converting the result back to an HH:MM:SS format.\n *\n * @param {string} first - The first time string in HH:MM:SS format.\n * @param {string} second - The second time string in HH:MM:SS format.\n * @param {RegExp|string} timeRegex - The regular expression used to validate and parse the time strings.\n *                                   If a string is provided, it will be converted to a RegExp.\n * @return {string} A new time string in HH:MM:SS format representing the sum of the two input times.\n *\n * @example\n * // Returns \"02:00:00\" (1 hour + 1 hour = 2 hours)\n * addHHMMSSTimeStrings(\"01:00:00\", \"01:00:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:00\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:45\" (1 hour + 30 minutes and 45 seconds = 1 hour, 30 minutes, and 45 seconds)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport function addHHMMSSTimeStrings(\n  first: string,\n  second: string,\n  timeRegex: RegExp | string,\n): string {\n  if (typeof timeRegex === \"string\") {\n    timeRegex = new RegExp(timeRegex);\n  }\n  return getSecondsAsHHMMSS(\n    getTimeAsSeconds(first, timeRegex) + getTimeAsSeconds(second, timeRegex),\n  );\n}\n\n/**\n * Flattens a nested JSON object into a flat object with dot notation for nested properties.\n * This function recursively traverses the object and creates new keys using dot notation\n * for nested objects and bracket notation for arrays.\n *\n * @param {StringKeyMap} data - The nested object to flatten.\n * @return {StringKeyMap} A flattened object where nested properties are represented with dot notation.\n *\n * @example\n * // Returns { \"a\": 1, \"b.c\": 2, \"b.d\": 3, \"e[0]\": 4, \"e[1]\": 5 }\n * flatten({\n *   a: 1,\n *   b: { c: 2, d: 3 },\n *   e: [4, 5]\n * });\n *\n * @example\n * // Returns { \"\": [] } for an empty array\n * flatten([]);\n *\n * @example\n * // Returns { \"\": {} } for an empty object\n * flatten({});\n */\nexport function flatten(data: StringKeyMap): StringKeyMap {\n  const result: StringKeyMap = {};\n\n  /**\n   * Recurse through the object\n   * @param {*} cur\n   * @param {*} prop\n   */\n  function recurse(cur: any, prop: any) {\n    if (Object(cur) !== cur) {\n      result[prop] = cur;\n    } else if (Array.isArray(cur)) {\n      // Use forEach instead of for loop\n      cur.forEach((item, i) => {\n        recurse(item, `${prop}[${i}]`);\n      });\n\n      if (cur.length === 0) result[prop] = [];\n    } else {\n      const keys = Object.keys(cur).filter((p) => Object.prototype.hasOwnProperty.call(cur, p));\n\n      const isEmpty = keys.length === 0;\n\n      // Use forEach instead of for...in loop\n      keys.forEach((p) => {\n        recurse(cur[p], prop ? `${prop}.${p}` : p);\n      });\n\n      if (isEmpty && prop) result[prop] = {};\n    }\n  }\n\n  recurse(data, \"\");\n  return result;\n}\n\n/**\n * Converts a flattened object back into a nested object structure.\n * This function is the inverse of `flatten()`. It parses dot notation and bracket notation\n * in property names to recreate the original nested structure.\n *\n * @param {StringKeyMap} data - The flattened object to unflatten.\n * @return {object} A nested object recreated from the flattened structure.\n *\n * @example\n * // Returns { a: 1, b: { c: 2, d: 3 }, e: [4, 5] }\n * unflatten({\n *   \"a\": 1,\n *   \"b.c\": 2,\n *   \"b.d\": 3,\n *   \"e[0]\": 4,\n *   \"e[1]\": 5\n * });\n *\n * @example\n * // Handles array indices correctly\n * unflatten({\n *   \"users[0].name\": \"John\",\n *   \"users[0].email\": \"john@example.com\",\n *   \"users[1].name\": \"Jane\",\n *   \"users[1].email\": \"jane@example.com\"\n * });\n * // Returns:\n * // {\n * //   users: [\n * //     { name: \"John\", email: \"john@example.com\" },\n * //     { name: \"Jane\", email: \"jane@example.com\" }\n * //   ]\n * // }\n */\nexport function unflatten(data: StringKeyMap): object {\n  \"use strict\";\n\n  if (Object(data) !== data || Array.isArray(data)) return data;\n  const result: StringKeyMap = {};\n\n  // Regex pattern for parsing property paths\n  const pattern = /\\.?([^.[\\]]+)|\\[(\\d+)]/g;\n\n  // Get all own properties and process them\n  Object.keys(data)\n    .filter((p) => Object.prototype.hasOwnProperty.call(data, p))\n    .forEach((p) => {\n      let cur = result;\n      let prop = \"\";\n\n      // Create a new regex instance for each property to reset lastIndex\n      const regex = new RegExp(pattern);\n\n      // Process all matches in the property path\n      Array.from({ length: p.match(new RegExp(pattern, \"g\"))?.length ?? 0 }, () =>\n        regex.exec(p),\n      ).forEach((m) => {\n        if (m) {\n          // Create array or object as needed\n          cur = (cur[prop] ?? (cur[prop] = m[2] ? [] : ({} as StringKeyMap))) as StringKeyMap;\n          prop = m[2] || m[1];\n        }\n      });\n\n      cur[prop] = data[p];\n    });\n\n  return (result[\"\"] ?? result) as object;\n}\n\n/**\n * Counts the number of decimal places in a number.\n * This function handles both integer and floating-point numbers.\n *\n * @param {number} num - The number to analyze.\n * @return {number} The number of decimal places. Returns 0 for integers or if the number doesn't have a decimal point.\n *\n * @example\n * // Returns 0\n * countDecimals(42);\n *\n * @example\n * // Returns 2\n * countDecimals(3.14);\n *\n * @example\n * // Returns 5\n * countDecimals(1.23456);\n */\nexport function countDecimals(num: number): number {\n  if (Math.floor(num) === num || String(num)?.indexOf?.(\".\") < 0) return 0;\n  const parts = num.toString().split(\".\")?.[1];\n  return parts?.length ?? 0;\n}\n\n/**\n * Formats SCORM messages for consistent and readable logging.\n * This function pads the function name and CMI element to create aligned log messages\n * that are easier to read in log files or console output.\n *\n * @param {string} functionName - The name of the function that generated the message.\n * @param {string} message - The message content to be logged.\n * @param {string} [CMIElement] - Optional. The CMI element related to the message.\n * @return {string} A formatted message string with consistent padding.\n *\n * @example\n * // Returns \"initialize          : Successfully initialized\"\n * formatMessage(\"initialize\", \"Successfully initialized\");\n *\n * @example\n * // Returns \"getValue            : cmi.core.student_id                                             : 12345\"\n * formatMessage(\"getValue\", \"12345\", \"cmi.core.student_id\");\n *\n * @example\n * // Returns \"setValue            : cmi.core.lesson_status                                          : completed\"\n * formatMessage(\"setValue\", \"completed\", \"cmi.core.lesson_status\");\n */\nexport function formatMessage(functionName: string, message: string, CMIElement?: string): string {\n  const baseLength = 20;\n\n  // Use string padding instead of loops\n  const paddedFunction = functionName.padEnd(baseLength);\n  let messageString = `${paddedFunction}: `;\n\n  if (CMIElement) {\n    const CMIElementBaseLength = 70;\n    // Add CMIElement and pad to the required length\n    messageString += CMIElement;\n    messageString = messageString.padEnd(CMIElementBaseLength);\n  }\n\n  // Add the message (or empty string if null/undefined)\n  messageString += message ?? \"\";\n\n  return messageString;\n}\n\n/**\n * Checks if a string contains a specific pattern using regular expression matching.\n * This function is a wrapper around JavaScript's String.match() method that handles\n * null/undefined values gracefully.\n *\n * @param {string} str - The string to search within. If null or undefined, returns false.\n * @param {string} tester - The pattern to search for. Can be a regular expression pattern.\n * @return {boolean} True if the pattern is found in the string, false otherwise.\n *\n * @example\n * // Returns true\n * stringMatches(\"Hello, world!\", \"world\");\n *\n * @example\n * // Returns true\n * stringMatches(\"The quick brown fox\", \"\\\\w+\\\\s+\\\\w+\");\n *\n * @example\n * // Returns false\n * stringMatches(\"Hello, world!\", \"universe\");\n *\n * @example\n * // Returns false (handles null gracefully)\n * stringMatches(null, \"test\");\n */\nexport function stringMatches(str: string, tester: string): boolean {\n  return str?.match(tester) !== null;\n}\n\n/**\n * Creates a memoized (cached) version of a function for performance optimization.\n * This function caches the results of previous calls with the same arguments,\n * avoiding redundant calculations for repeated calls with the same input.\n *\n * @template T - The type of the function to memoize\n * @param {T} fn - The function to memoize\n * @param {Function} [keyFn] - Optional function to generate a custom cache key.\n *                           Useful for functions with complex arguments that can't be serialized.\n * @return {T} A memoized version of the input function with the same signature\n *\n * @example\n * // Basic usage with a simple function\n * const memoizedAdd = memoize((a, b) => {\n *   console.log('Calculating...');\n *   return a + b;\n * });\n *\n * memoizedAdd(1, 2); // Logs \"Calculating...\" and returns 3\n * memoizedAdd(1, 2); // Returns 3 without logging (uses cached result)\n *\n * @example\n * // Using a custom key function for objects that can't be serialized\n * const memoizedProcessUser = memoize(\n *   (user) => {\n *     console.log('Processing user...');\n *     return { ...user, processed: true };\n *   },\n *   (user) => user.id // Use user.id as the cache key\n * );\n *\n * memoizedProcessUser({ id: 123, name: 'John' }); // Logs and processes\n * memoizedProcessUser({ id: 123, name: 'John' }); // Uses cached result\n */\nexport function memoize<T extends (...args: any[]) => any>(\n  fn: T,\n  keyFn?: (...args: Parameters<T>) => string,\n): T {\n  const cache = new Map<string, ReturnType<T>>();\n\n  return ((...args: Parameters<T>): ReturnType<T> => {\n    const key = keyFn ? keyFn(...args) : JSON.stringify(args);\n\n    return cache.has(key)\n      ? (cache.get(key) as ReturnType<T>)\n      : (() => {\n          const result = fn(...args);\n          cache.set(key, result);\n          return result;\n        })();\n  }) as T;\n}\n","// Using plain objects instead of enums for better compatibility with strip-only mode\n// This approach avoids TypeScript enum runtime code while maintaining the same API\n\n// NAVBoolean values\nexport const NAVBoolean = {\n  UNKNOWN: \"unknown\",\n  TRUE: \"true\",\n  FALSE: \"false\",\n};\n\n// Type for NAVBoolean values\nexport type NAVBoolean = (typeof NAVBoolean)[keyof typeof NAVBoolean];\n\n// SuccessStatus values\nexport const SuccessStatus = {\n  PASSED: \"passed\",\n  FAILED: \"failed\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for SuccessStatus values\nexport type SuccessStatus = (typeof SuccessStatus)[keyof typeof SuccessStatus];\n\n// CompletionStatus values\nexport const CompletionStatus = {\n  COMPLETED: \"completed\",\n  INCOMPLETE: \"incomplete\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for CompletionStatus values\nexport type CompletionStatus = (typeof CompletionStatus)[keyof typeof CompletionStatus];\n\n// LogLevelEnum values\nexport const LogLevelEnum = {\n  _: 0,\n  DEBUG: 1,\n  INFO: 2,\n  WARN: 3,\n  ERROR: 4,\n  NONE: 5,\n};\n\n// Type for LogLevelEnum values\nexport type LogLevelEnum = (typeof LogLevelEnum)[keyof typeof LogLevelEnum];\n","import { LogLevel, ResultObject, Settings } from \"../types/api_types\";\nimport { global_constants } from \"./api_constants\";\nimport { LogLevelEnum } from \"./enums\";\n\n/**\n * Default settings for the SCORM API\n */\nexport const DefaultSettings: Settings = {\n  autocommit: false,\n  autocommitSeconds: 10,\n  asyncCommit: false,\n  sendFullCommit: true,\n  lmsCommitUrl: false,\n  dataCommitFormat: \"json\",\n  commitRequestDataType: \"application/json;charset=UTF-8\",\n  autoProgress: false,\n  logLevel: LogLevelEnum.ERROR,\n  selfReportSessionTime: false,\n  alwaysSendTotalTime: false,\n  renderCommonCommitFields: false,\n  strict_errors: true,\n  xhrHeaders: {},\n  xhrWithCredentials: false,\n  fetchMode: \"cors\",\n  responseHandler: async function (response: Response): Promise<ResultObject> {\n    if (typeof response !== \"undefined\") {\n      let httpResult = null;\n\n      // Handle both text() and json() response methods\n      try {\n        if (typeof response.json === 'function') {\n          // Try to get JSON directly if the method exists\n          httpResult = await response.json();\n        } else if (typeof response.text === 'function') {\n          // Fall back to text() if json() is not available\n          const responseText = await response.text();\n          if (responseText) {\n            httpResult = JSON.parse(responseText);\n          }\n        }\n      } catch (e) {\n        // If parsing fails, continue with null httpResult\n      }\n\n      if (httpResult === null || !{}.hasOwnProperty.call(httpResult, \"result\")) {\n        if (response.status === 200) {\n          return {\n            result: global_constants.SCORM_TRUE,\n            errorCode: 0,\n          };\n        } else {\n          return {\n            result: global_constants.SCORM_FALSE,\n            errorCode: 101,\n          };\n        }\n      } else {\n        return {\n          result: httpResult.result,\n          errorCode: httpResult.errorCode\n            ? httpResult.errorCode\n            : httpResult.result === global_constants.SCORM_TRUE\n              ? 0\n              : 101,\n        };\n      }\n    }\n    return {\n      result: global_constants.SCORM_FALSE,\n      errorCode: 101,\n    };\n  },\n  requestHandler: function (commitObject) {\n    return commitObject;\n  },\n  onLogMessage: defaultLogHandler,\n  scoItemIds: [],\n  scoItemIdValidator: false,\n  globalObjectiveIds: [],\n};\n\nexport function defaultLogHandler(messageLevel: LogLevel, logMessage: string): void {\n  switch (messageLevel) {\n    case \"4\":\n    case 4:\n    case \"ERROR\":\n    case LogLevelEnum.ERROR:\n      console.error(logMessage);\n      break;\n    case \"3\":\n    case 3:\n    case \"WARN\":\n    case LogLevelEnum.WARN:\n      console.warn(logMessage);\n      break;\n    case \"2\":\n    case 2:\n    case \"INFO\":\n    case LogLevelEnum.INFO:\n      console.info(logMessage);\n      break;\n    case \"1\":\n    case 1:\n    case \"DEBUG\":\n    case LogLevelEnum.DEBUG:\n      if (console.debug) {\n        console.debug(logMessage);\n      } else {\n        console.log(logMessage);\n      }\n      break;\n  }\n}\n","import BaseAPI from \"../BaseAPI\";\n\n/**\n * Private class that wraps a timeout call to the commit() function\n */\nexport class ScheduledCommit {\n  private _API;\n  private _cancelled = false;\n  private readonly _timeout;\n  private readonly _callback;\n\n  /**\n   * Constructor for ScheduledCommit\n   * @param {BaseAPI} API\n   * @param {number} when\n   * @param {string} callback\n   */\n  constructor(API: BaseAPI, when: number, callback: string) {\n    this._API = API;\n    this._timeout = setTimeout(this.wrapper.bind(this), when);\n    this._callback = callback;\n  }\n\n  /**\n   * Cancel any currently scheduled commit\n   */\n  cancel() {\n    this._cancelled = true;\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n  }\n\n  /**\n   * Wrap the API commit call to check if the call has already been cancelled\n   */\n  wrapper() {\n    if (!this._cancelled) {\n      (async () => await this._API.commit(this._callback))();\n    }\n  }\n}\n","import { CommitObject, ResultObject, Settings } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { IHttpService } from \"../interfaces/services\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { StringKeyMap } from \"../utilities\";\n\n/**\n * Service for handling HTTP communication with the LMS\n */\nexport class HttpService implements IHttpService {\n  private settings: Settings;\n  private error_codes: ErrorCode;\n\n  /**\n   * Constructor for HttpService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   */\n  constructor(settings: Settings, error_codes: ErrorCode) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n  }\n\n  /**\n   * Sends HTTP requests to the LMS with special handling for immediate and standard requests.\n   *\n   * This method handles communication with the LMS server, implementing two distinct\n   * request handling strategies based on the context:\n   *\n   * 1. Immediate Mode (used during termination):\n   *    When immediate=true, the method:\n   *    - Initiates the fetch request but doesn't wait for it to complete\n   *    - Returns a success result immediately\n   *    - Processes the response asynchronously when it arrives\n   *\n   *    This is critical for browser compatibility during page unload/termination,\n   *    as some browsers (especially Chrome) may cancel synchronous or awaited\n   *    requests when a page is closing.\n   *\n   * 2. Standard Mode (normal operation):\n   *    When immediate=false, the method:\n   *    - Processes the request parameters through the configured requestHandler\n   *    - Awaits the fetch response completely\n   *    - Transforms the response using the configured responseHandler\n   *    - Triggers appropriate event listeners based on success/failure\n   *    - Returns the complete result with appropriate error codes\n   *\n   * The method also includes error handling to catch network failures or other\n   * exceptions that might occur during the request process.\n   *\n   * @param {string} url - The URL endpoint to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The data to send to the LMS\n   * @param {boolean} immediate - Whether to send the request immediately without waiting (true) or process normally (false)\n   * @param {Function} apiLog - Function to log API messages with appropriate levels\n   * @param {Function} processListeners - Function to trigger event listeners for commit events\n   * @return {Promise<ResultObject>} - A promise that resolves with the result of the request\n   *\n   * @example\n   * // Standard request (waits for response)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   false,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   *\n   * @example\n   * // Immediate request (for termination)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   true,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   * // result will be success immediately, regardless of actual HTTP result\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n    apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    const genericError: ResultObject = {\n      result: global_constants.SCORM_FALSE,\n      errorCode: this.error_codes.GENERAL,\n    };\n\n    // if we are terminating the module or closing the browser window/tab, we need to make this fetch ASAP.\n    // Some browsers, especially Chrome, do not like synchronous requests to be made when the window is closing.\n    if (immediate) {\n      this.performFetch(url, params).then(async (response) => {\n        await this.transformResponse(response, processListeners);\n      });\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    }\n\n    const process = async (\n      url: string,\n      params: CommitObject | StringKeyMap | Array<any>,\n      settings: Settings,\n    ): Promise<ResultObject> => {\n      try {\n        params = settings.requestHandler(params) as CommitObject | StringKeyMap | Array<any>;\n        const response = await this.performFetch(url, params);\n\n        return this.transformResponse(response, processListeners);\n      } catch (e) {\n        apiLog(\"processHttpRequest\", e, LogLevelEnum.ERROR);\n        processListeners(\"CommitError\");\n        return genericError;\n      }\n    };\n\n    return await process(url, params, this.settings);\n  }\n\n  /**\n   * Perform the fetch request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - The response from the LMS\n   * @private\n   */\n  private async performFetch(url: string, params: StringKeyMap | Array<any>): Promise<Response> {\n    return fetch(url, {\n      method: \"POST\",\n      mode: this.settings.fetchMode,\n      body: params instanceof Array ? params.join(\"&\") : JSON.stringify(params),\n      headers: {\n        ...this.settings.xhrHeaders,\n        \"Content-Type\": this.settings.commitRequestDataType,\n      },\n      credentials: this.settings.xhrWithCredentials ? \"include\" : undefined,\n      keepalive: true,\n    });\n  }\n\n  /**\n   * Transforms the response from the LMS to a ResultObject\n   * @param {Response} response - The response from the LMS\n   * @param {Function} processListeners - Function to process event listeners\n   * @return {Promise<ResultObject>} - The transformed response\n   * @private\n   */\n  private async transformResponse(\n    response: Response,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    const result =\n      typeof this.settings.responseHandler === \"function\"\n        ? await this.settings.responseHandler(response)\n        : await response.json();\n\n    if (\n      response.status >= 200 &&\n      response.status <= 299 &&\n      (result.result === true || result.result === global_constants.SCORM_TRUE)\n    ) {\n      processListeners(\"CommitSuccess\");\n      if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n        result.errorCode = 0;\n      }\n    } else {\n      if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n        result.errorCode = this.error_codes.GENERAL;\n      }\n      processListeners(\"CommitError\", null, result.errorCode);\n    }\n    return result;\n  }\n\n  /**\n   * Updates the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: Settings): void {\n    this.settings = settings;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { stringMatches } from \"../utilities\";\nimport { IEventService } from \"../interfaces/services\";\n\n/**\n * Interface for a listener object\n */\ninterface Listener {\n  functionName: string;\n  CMIElement: string | null;\n  callback: Function;\n}\n\n/**\n * Type for parsed listener information\n */\ninterface ParsedListener {\n  functionName: string;\n  CMIElement: string | null;\n}\n\n/**\n * Service for handling event listeners and event processing\n */\nexport class EventService implements IEventService {\n  // Map of function names to listeners for faster lookups\n  private listenerMap: Map<string, Listener[]> = new Map();\n  // Total count of listeners for logging\n  private listenerCount = 0;\n  // Function to log API messages\n  private readonly apiLog: (\n    functionName: string,\n    message: string,\n    messageLevel: LogLevel,\n    CMIElement?: string,\n  ) => void;\n\n  /**\n   * Constructor for EventService\n   * @param {Function} apiLog - Function to log API messages\n   */\n  constructor(\n    apiLog: (\n      functionName: string,\n      message: string,\n      messageLevel: LogLevel,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.apiLog = apiLog;\n  }\n\n  /**\n   * Parses a listener name into its components\n   *\n   * @param {string} listenerName - The name of the listener\n   * @returns {ParsedListener|null} - The parsed listener information or null if invalid\n   */\n  private parseListenerName(listenerName: string): ParsedListener | null {\n    const listenerSplit = listenerName.split(\".\");\n    if (listenerSplit.length === 0) return null;\n\n    const functionName = listenerSplit[0];\n    let CMIElement = null;\n\n    if (listenerSplit.length > 1) {\n      CMIElement = listenerName.replace(`${functionName}.`, \"\");\n    }\n\n    return { functionName, CMIElement };\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener\n   * @param {Function} callback - The callback function to execute when the event occurs\n   */\n  on(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get or create the array for this function name\n      const listeners = this.listenerMap.get(functionName) ?? [];\n\n      // Add the new listener\n      listeners.push({\n        functionName,\n        CMIElement,\n        callback,\n      });\n\n      // Update the map and count\n      this.listenerMap.set(functionName, listeners);\n      this.listenerCount++;\n\n      this.apiLog(\n        \"on\",\n        `Added event listener: ${this.listenerCount}`,\n        LogLevelEnum.INFO,\n        functionName,\n      );\n    }\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener\n   *\n   * @param {string} listenerName - The name of the listener to remove\n   * @param {Function} callback - The callback function to remove\n   */\n  off(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get the listeners for this function name\n      const listeners = this.listenerMap.get(functionName);\n      if (!listeners) continue;\n\n      // Find the index of the listener to remove\n      const removeIndex = listeners.findIndex(\n        (obj) => obj.CMIElement === CMIElement && obj.callback === callback,\n      );\n\n      if (removeIndex !== -1) {\n        // Remove the listener\n        listeners.splice(removeIndex, 1);\n        this.listenerCount--;\n\n        // Update the map or remove the entry if empty\n        if (listeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, listeners);\n        }\n\n        this.apiLog(\n          \"off\",\n          `Removed event listener: ${this.listenerCount}`,\n          LogLevelEnum.INFO,\n          functionName,\n        );\n      }\n    }\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener to clear\n   */\n  clear(listenerName: string) {\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // If we have listeners for this function name\n      if (this.listenerMap.has(functionName)) {\n        const listeners = this.listenerMap.get(functionName)!;\n\n        // Filter out listeners that match the criteria\n        const newListeners = listeners.filter((obj) => obj.CMIElement !== CMIElement);\n\n        // Update the count and map\n        this.listenerCount -= listeners.length - newListeners.length;\n\n        if (newListeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, newListeners);\n        }\n      }\n    }\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created\n   *\n   * @param {string} functionName - The name of the function that triggered the event\n   * @param {string} CMIElement - The CMI element that was affected\n   * @param {any} value - The value that was set\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this.apiLog(functionName, value, LogLevelEnum.INFO, CMIElement);\n\n    // Get listeners for this function name\n    const listeners = this.listenerMap.get(functionName);\n    if (!listeners) return;\n\n    for (const listener of listeners) {\n      const listenerHasCMIElement = !!listener.CMIElement;\n      let CMIElementsMatch = false;\n\n      // Check if CMI elements match\n      if (CMIElement && listener.CMIElement) {\n        if (listener.CMIElement.endsWith(\"*\")) {\n          // For wildcard matches, check if the CMI element starts with the prefix\n          const prefix = listener.CMIElement.slice(0, -1);\n          CMIElementsMatch = CMIElement.startsWith(prefix);\n        } else {\n          // For exact matches, compare the strings directly\n          CMIElementsMatch = listener.CMIElement === CMIElement;\n        }\n      }\n\n      // If the listener matches, call the callback\n      if (!listenerHasCMIElement || CMIElementsMatch) {\n        this.apiLog(\n          \"processListeners\",\n          `Processing listener: ${listener.functionName}`,\n          LogLevelEnum.DEBUG,\n          CMIElement,\n        );\n\n        // Handle special event types\n        if (functionName.startsWith(\"Sequence\")) {\n          // For sequence events, pass the target as the first argument\n          listener.callback(value);\n        } else if (functionName === \"CommitError\") {\n          // For commit error events, pass the error code\n          listener.callback(value);\n        } else if (functionName === \"CommitSuccess\") {\n          // For commit success events, pass no arguments\n          listener.callback();\n        } else {\n          // For regular events, pass CMIElement and value\n          listener.callback(CMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Resets the event service by clearing all listeners\n   */\n  reset() {\n    this.listenerMap.clear();\n    this.listenerCount = 0;\n  }\n}\n","import { CommitObject, LogLevel } from \"../types/api_types\";\nimport { StringKeyMap, unflatten } from \"../utilities\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { BaseCMI } from \"../cmi/common/base_cmi\";\nimport { ISerializationService } from \"../interfaces/services\";\n\n/**\n * Service for handling data serialization and deserialization in scorm-again\n */\nexport class SerializationService implements ISerializationService {\n  /**\n   * Loads CMI data from a flattened JSON object with special handling for arrays and ordering.\n   *\n   * This method implements a complex algorithm for loading flattened JSON data into the CMI\n   * object structure. It handles several key challenges:\n   *\n   * 1. Ordering dependencies: Some CMI elements (like interactions and objectives) must be\n   *    loaded in a specific order to ensure proper initialization.\n   *\n   * 2. Array handling: Interactions and objectives are stored as arrays, and their properties\n   *    must be loaded in the correct order (e.g., 'id' and 'type' must be set before other properties).\n   *\n   * 3. Unflattening: The method converts flattened dot notation (e.g., \"cmi.objectives.0.id\")\n   *    back into nested objects before loading.\n   *\n   * The algorithm works by:\n   * - Categorizing keys into interactions, objectives, and other properties\n   * - Sorting interactions to prioritize 'id' and 'type' fields within each index\n   * - Sorting objectives to prioritize 'id' fields within each index\n   * - Processing each category in order: interactions, objectives, then other properties\n   *\n   * @param {StringKeyMap} json - The flattened JSON object with dot notation keys\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   *\n   * @param setStartingData\n   * @example\n   * // Example of flattened JSON input:\n   * // {\n   * //   \"cmi.objectives.0.id\": \"obj1\",\n   * //   \"cmi.objectives.0.score.raw\": \"80\",\n   * //   \"cmi.interactions.0.id\": \"int1\",\n   * //   \"cmi.interactions.0.type\": \"choice\",\n   * //   \"cmi.interactions.0.result\": \"correct\"\n   * // }\n   */\n  loadFromFlattenedJSON(\n    json: StringKeyMap,\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromFlattenedJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    const int_pattern = /^(cmi\\.interactions\\.)(\\d+)\\.(.*)$/;\n    const obj_pattern = /^(cmi\\.objectives\\.)(\\d+)\\.(.*)$/;\n\n    // Extract and categorize keys for better sorting\n    const interactions: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const objectives: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const others: { key: string; value: any }[] = [];\n\n    // Categorize keys\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key)) {\n        const intMatch = key.match(int_pattern);\n        if (intMatch) {\n          interactions.push({\n            key,\n            value: json[key],\n            index: Number(intMatch[2]),\n            field: intMatch[3],\n          });\n          continue;\n        }\n\n        const objMatch = key.match(obj_pattern);\n        if (objMatch) {\n          objectives.push({\n            key,\n            value: json[key],\n            index: Number(objMatch[2]),\n            field: objMatch[3],\n          });\n          continue;\n        }\n\n        others.push({ key, value: json[key] });\n      }\n    }\n\n    // Sort interactions: first by index, then prioritize 'id' and 'type' fields\n    interactions.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id and type\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n      if (a.field === \"type\") return -1;\n      if (b.field === \"type\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort objectives: first by index, then prioritize 'id' field\n    objectives.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort other keys alphabetically\n    others.sort((a, b) => a.key.localeCompare(b.key));\n\n    // Process all items in the correct order\n    const processItems = (items: { key: string; value: any }[]) => {\n      items.forEach((item) => {\n        const obj: StringKeyMap = {};\n        obj[item.key] = item.value;\n        this.loadFromJSON(\n          unflatten(obj) as StringKeyMap,\n          CMIElement,\n          setCMIValue,\n          isNotInitialized,\n          setStartingData,\n        );\n      });\n    };\n\n    // Process in order: interactions, objectives, others\n    processItems(interactions);\n    processItems(objectives);\n    processItems(others);\n  }\n\n  /**\n   * Loads CMI data from a nested JSON object with recursive traversal.\n   *\n   * This method implements a recursive algorithm for loading nested JSON data into the CMI\n   * object structure. It handles several key aspects:\n   *\n   * 1. Recursive traversal: The method recursively traverses the nested JSON structure,\n   *    building CMI element paths as it goes (e.g., \"cmi.core.student_id\").\n   *\n   * 2. Type-specific handling: Different data types are handled differently:\n   *    - Arrays: Each array element is processed individually with its index in the path\n   *    - Objects: Recursively processed with updated path\n   *    - Primitives: Set directly using setCMIValue\n   *\n   * 3. Initialization check: Ensures the method is only called before API initialization\n   *\n   * 4. Starting data storage: Stores the original JSON data for potential future use\n   *\n   * The algorithm works by:\n   * - First storing the complete JSON object via setStartingData\n   * - Iterating through each property in the JSON object\n   * - For each property, determining its type and handling it accordingly\n   * - Building the CMI element path as it traverses the structure\n   * - Setting values at the appropriate paths using setCMIValue\n   *\n   * @param {{[key: string]: any}} json - The nested JSON object to load\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value at a specific path\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   * @param {Function} setStartingData - Function to store the original JSON data\n   *\n   * @example\n   * // Example of nested JSON input:\n   * // {\n   * //   \"core\": {\n   * //     \"student_id\": \"12345\",\n   * //     \"student_name\": \"John Doe\"\n   * //   },\n   * //   \"objectives\": [\n   * //     { \"id\": \"obj1\", \"score\": { \"raw\": 80 } },\n   * //     { \"id\": \"obj2\", \"score\": { \"raw\": 90 } }\n   * //   ]\n   * // }\n   */\n  loadFromJSON(\n    json: { [key: string]: any },\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    CMIElement = CMIElement !== undefined ? CMIElement : \"cmi\";\n\n    setStartingData(json);\n\n    // could this be refactored down to flatten(json) then setCMIValue on each?\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key) && json[key]) {\n        const currentCMIElement = (CMIElement ? CMIElement + \".\" : \"\") + key;\n        const value = json[key];\n\n        if (value.constructor === Array) {\n          for (let i = 0; i < value.length; i++) {\n            if (value[i]) {\n              const item = value[i];\n              const tempCMIElement = `${currentCMIElement}.${i}`;\n\n              if (item.constructor === Object) {\n                this.loadFromJSON(\n                  item,\n                  tempCMIElement,\n                  setCMIValue,\n                  isNotInitialized,\n                  setStartingData,\n                );\n              } else {\n                setCMIValue(tempCMIElement, item);\n              }\n            }\n          }\n        } else if (value.constructor === Object) {\n          this.loadFromJSON(\n            value,\n            currentCMIElement,\n            setCMIValue,\n            isNotInitialized,\n            setStartingData,\n          );\n        } else {\n          setCMIValue(currentCMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Render the CMI object to JSON for sending to an LMS.\n   *\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {string}\n   */\n  renderCMIToJSONString(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): string {\n    // Do we want/need to return fields that have no set value?\n    if (sendFullCommit) {\n      return JSON.stringify({ cmi });\n    }\n    return JSON.stringify({ cmi }, (k, v) => (v === undefined ? null : v), 2);\n  }\n\n  /**\n   * Returns a JS object representing the current cmi\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {object}\n   */\n  renderCMIToJSONObject(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): StringKeyMap {\n    // Revert to the original implementation to maintain compatibility with tests\n    return JSON.parse(this.renderCMIToJSONString(cmi, sendFullCommit));\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} alwaysSendTotalTime - Whether to always send total time\n   * @param {boolean|Function} renderCommonCommitFields - Whether to render common commit fields\n   * @param {Function} renderCommitObject - Function to render commit object\n   * @param {Function} renderCommitCMI - Function to render commit CMI\n   * @param {LogLevel} apiLogLevel - The API log level\n   * @return {CommitObject|StringKeyMap|Array<any>}\n   */\n  getCommitObject(\n    terminateCommit: boolean,\n    alwaysSendTotalTime: boolean,\n    renderCommonCommitFields: boolean | ((commitObject: CommitObject) => boolean),\n    renderCommitObject: (terminateCommit: boolean) => CommitObject,\n    renderCommitCMI: (terminateCommit: boolean) => StringKeyMap | Array<any>,\n    apiLogLevel: LogLevel,\n  ): CommitObject | StringKeyMap | Array<any> {\n    const shouldTerminateCommit = terminateCommit || alwaysSendTotalTime;\n    const commitObject = renderCommonCommitFields\n      ? renderCommitObject(shouldTerminateCommit)\n      : renderCommitCMI(shouldTerminateCommit);\n\n    if ([LogLevelEnum.DEBUG, \"1\", 1, \"DEBUG\"].includes(apiLogLevel)) {\n      console.debug(\"Commit (terminated: \" + (terminateCommit ? \"yes\" : \"no\") + \"): \");\n      console.debug(commitObject);\n    }\n    return commitObject;\n  }\n}\n","type APIError = {\n  errorCode: number;\n  errorMessage: string;\n  detailedMessage: string;\n};\n\nexport class BaseScormValidationError extends Error {\n  constructor(CMIElement: string, errorCode: number) {\n    super(`${CMIElement} : ${errorCode.toString()}`);\n    this._errorCode = errorCode;\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, BaseScormValidationError.prototype);\n  }\n\n  private readonly _errorCode: number;\n\n  /**\n   * Getter for _errorCode\n   * @return {number}\n   */\n  get errorCode(): number {\n    return this._errorCode;\n  }\n}\n\n/**\n * Base Validation Exception\n */\nexport class ValidationError extends BaseScormValidationError implements APIError {\n  /**\n   * Constructor to take in an error message and code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   * @param {string} errorMessage\n   * @param {string} detailedMessage\n   */\n  constructor(\n    CMIElement: string,\n    errorCode: number,\n    errorMessage: string,\n    detailedMessage?: string,\n  ) {\n    super(CMIElement, errorCode);\n    this.message = `${CMIElement} : ${errorMessage}`;\n    this._errorMessage = errorMessage;\n    if (detailedMessage) {\n      this._detailedMessage = detailedMessage;\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  private readonly _errorMessage: string;\n  private readonly _detailedMessage: string = \"\";\n\n  /**\n   * Getter for _errorMessage\n   * @return {string}\n   */\n  get errorMessage(): string {\n    return this._errorMessage;\n  }\n\n  /**\n   * Getter for _detailedMessage\n   * @return {string}\n   */\n  get detailedMessage(): string {\n    return this._detailedMessage;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ILoggingService } from \"../interfaces/services\";\nimport { defaultLogHandler } from \"../constants/default_settings\";\n\n/**\n * Centralized logging service implemented as a singleton\n * Provides methods for logging at different levels and configuring the log level\n */\nexport class LoggingService implements ILoggingService {\n  private static _instance: LoggingService;\n  private _logLevel: LogLevel = LogLevelEnum.ERROR;\n  private _logHandler: (messageLevel: LogLevel, logMessage: string) => void;\n\n  /**\n   * Private constructor to prevent direct instantiation\n   */\n  private constructor() {\n    // Default log handler uses console methods based on log level\n    this._logHandler = defaultLogHandler;\n  }\n\n  /**\n   * Get the singleton instance of LoggingService\n   *\n   * @returns {LoggingService} The singleton instance\n   */\n  public static getInstance(): LoggingService {\n    if (!LoggingService._instance) {\n      LoggingService._instance = new LoggingService();\n    }\n    return LoggingService._instance;\n  }\n\n  /**\n   * Set the log level\n   *\n   * @param {LogLevel} level - The log level to set\n   */\n  public setLogLevel(level: LogLevel): void {\n    this._logLevel = level;\n  }\n\n  /**\n   * Get the current log level\n   *\n   * @returns {LogLevel} The current log level\n   */\n  public getLogLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  /**\n   * Set a custom log handler\n   *\n   * @param {Function} handler - The function to handle log messages\n   */\n  public setLogHandler(handler: (messageLevel: LogLevel, logMessage: string) => void): void {\n    this._logHandler = handler;\n  }\n\n  /**\n   * Log a message if the message level is greater than or equal to the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @param {string} logMessage - The message to log\n   */\n  public log(messageLevel: LogLevel, logMessage: string): void {\n    if (this.shouldLog(messageLevel)) {\n      this._logHandler(messageLevel, logMessage);\n    }\n  }\n\n  /**\n   * Log a message at ERROR level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public error(logMessage: string): void {\n    this.log(LogLevelEnum.ERROR, logMessage);\n  }\n\n  /**\n   * Log a message at WARN level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public warn(logMessage: string): void {\n    this.log(LogLevelEnum.WARN, logMessage);\n  }\n\n  /**\n   * Log a message at INFO level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public info(logMessage: string): void {\n    this.log(LogLevelEnum.INFO, logMessage);\n  }\n\n  /**\n   * Log a message at DEBUG level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public debug(logMessage: string): void {\n    this.log(LogLevelEnum.DEBUG, logMessage);\n  }\n\n  /**\n   * Determine if a message should be logged based on its level and the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @returns {boolean} Whether the message should be logged\n   */\n  private shouldLog(messageLevel: LogLevel): boolean {\n    // Convert string levels to numbers for comparison\n    const numericMessageLevel = this.getNumericLevel(messageLevel);\n    const numericLogLevel = this.getNumericLevel(this._logLevel);\n\n    return numericMessageLevel >= numericLogLevel;\n  }\n\n  /**\n   * Convert a log level to its numeric value\n   *\n   * @param {LogLevel} level - The log level to convert\n   * @returns {number} The numeric value of the log level\n   */\n  private getNumericLevel(level: LogLevel): number {\n    if (level === undefined) return LogLevelEnum.NONE;\n\n    if (typeof level === \"number\") return level;\n\n    switch (level) {\n      case \"1\":\n      case \"DEBUG\":\n        return LogLevelEnum.DEBUG;\n      case \"2\":\n      case \"INFO\":\n        return LogLevelEnum.INFO;\n      case \"3\":\n      case \"WARN\":\n        return LogLevelEnum.WARN;\n      case \"4\":\n      case \"ERROR\":\n        return LogLevelEnum.ERROR;\n      case \"5\":\n      case \"NONE\":\n        return LogLevelEnum.NONE;\n      default:\n        return LogLevelEnum.ERROR; // Default to ERROR if unknown\n    }\n  }\n}\n\n// Export a function to get the singleton instance\nexport function getLoggingService(): LoggingService {\n  return LoggingService.getInstance();\n}\n","import { LogLevelEnum } from \"../constants/enums\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { ValidationError } from \"../exceptions\";\nimport { IErrorHandlingService, ILoggingService } from \"../interfaces/services\";\nimport { getLoggingService } from \"./LoggingService\";\n\n/**\n * Service for handling SCORM errors\n */\nexport class ErrorHandlingService implements IErrorHandlingService {\n  private _lastErrorCode: string = \"0\";\n  private readonly _errorCodes: ErrorCode;\n  private readonly _apiLog: (\n    functionName: string,\n    message: string,\n    logLevel?: LogLevelEnum,\n    CMIElement?: string,\n  ) => void;\n  private readonly _getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string;\n  private readonly _loggingService: ILoggingService;\n\n  /**\n   * Constructor for ErrorHandlingService\n   *\n   * @param {ErrorCode} errorCodes - The error codes object\n   * @param {Function} apiLog - Function for logging API calls\n   * @param {Function} getLmsErrorMessageDetails - Function for getting error message details\n   * @param {ILoggingService} loggingService - Optional logging service instance\n   */\n  constructor(\n    errorCodes: ErrorCode,\n    apiLog: (\n      functionName: string,\n      message: string,\n      logLevel?: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n    loggingService?: ILoggingService,\n  ) {\n    this._errorCodes = errorCodes;\n    this._apiLog = apiLog;\n    this._getLmsErrorMessageDetails = getLmsErrorMessageDetails;\n    this._loggingService = loggingService || getLoggingService();\n  }\n\n  /**\n   * Get the last error code\n   *\n   * @return {string} - The last error code\n   */\n  get lastErrorCode(): string {\n    return this._lastErrorCode;\n  }\n\n  /**\n   * Set the last error code\n   *\n   * @param {string} errorCode - The error code to set\n   */\n  set lastErrorCode(errorCode: string) {\n    this._lastErrorCode = errorCode;\n  }\n\n  /**\n   * Throws a SCORM error\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The error number\n   * @param {string} message - The error message\n   * @throws {ValidationError} - If throwException is true, throws a ValidationError\n   */\n  throwSCORMError(CMIElement: string, errorNumber: number, message?: string): void {\n    if (!message) {\n      message = this._getLmsErrorMessageDetails(errorNumber, true);\n    }\n\n    // Format a more descriptive error message with context\n    const formattedMessage = `SCORM Error ${errorNumber}: ${message}${CMIElement ? ` [Element: ${CMIElement}]` : \"\"}`;\n\n    // Log using both the API log and the logging service for consistency\n    this._apiLog(\"throwSCORMError\", errorNumber + \": \" + message, LogLevelEnum.ERROR, CMIElement);\n    this._loggingService.error(formattedMessage);\n\n    this._lastErrorCode = String(errorNumber);\n  }\n\n  /**\n   * Clears the last SCORM error code on success.\n   *\n   * @param {string} success - Whether the operation was successful\n   */\n  clearSCORMError(success: string): void {\n    if (success !== undefined && success !== global_constants.SCORM_FALSE) {\n      this._lastErrorCode = \"0\";\n    }\n  }\n\n  /**\n   * Handles exceptions that occur when accessing or setting CMI values.\n   *\n   * This method provides centralized error handling for exceptions that occur during\n   * CMI data operations. It differentiates between different types of errors and\n   * handles them appropriately:\n   *\n   * 1. ValidationError: These are expected errors from the validation system that\n   *    indicate a specific SCORM error condition (like invalid data format or range).\n   *    For these errors, the method:\n   *    - Sets the lastErrorCode to the error code from the ValidationError\n   *    - Returns SCORM_FALSE to indicate failure to the caller\n   *\n   * 2. Standard JavaScript Error: For general JavaScript errors (like TypeError,\n   *    ReferenceError, etc.), the method:\n   *    - Logs the error message with stack trace to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * 3. Unknown exceptions: For any other type of exception that doesn't match the\n   *    above categories, the method:\n   *    - Logs the entire exception object to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * This method is critical for maintaining SCORM compliance by ensuring that\n   * all errors are properly translated into the appropriate SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {ValidationError|Error|unknown} e - The exception that was thrown\n   * @param {string} returnValue - The default return value (typically an empty string)\n   * @return {string} - Either the original returnValue or SCORM_FALSE if an error occurred\n   *\n   * @example\n   * try {\n   *   const value = getCMIValue(\"cmi.core.score.raw\");\n   *   return value;\n   * } catch (e) {\n   *   return handleValueAccessException(e, \"\");\n   * }\n   */\n  handleValueAccessException(\n    CMIElement: string,\n    e: Error | ValidationError | unknown,\n    returnValue: string,\n  ): string {\n    if (e instanceof ValidationError) {\n      const validationError = e as ValidationError;\n      this._lastErrorCode = String(validationError.errorCode);\n\n      // Log validation errors at WARN level with context\n      const errorMessage = `Validation Error ${validationError.errorCode}: ${validationError.message} [Element: ${CMIElement}]`;\n      this._loggingService.warn(errorMessage);\n\n      returnValue = global_constants.SCORM_FALSE;\n    } else if (e instanceof Error) {\n      // For standard JS errors, include the stack trace and error type\n      const errorType = e.constructor.name; // Gets the error type (e.g., TypeError, ReferenceError)\n      const errorMessage = `${errorType}: ${e.message} [Element: ${CMIElement}]`;\n      const stackTrace = e.stack || \"\";\n\n      // Log the detailed error with stack trace\n      this._loggingService.error(`${errorMessage}\\n${stackTrace}`);\n\n      this.throwSCORMError(CMIElement, this._errorCodes.GENERAL, `${errorType}: ${e.message}`);\n    } else {\n      // For unknown errors, provide as much context as possible\n      const errorMessage = `Unknown error occurred while accessing [Element: ${CMIElement}]`;\n\n      this._loggingService.error(errorMessage);\n\n      try {\n        // Try to stringify the error object for more details\n        const errorDetails = JSON.stringify(e);\n        this._loggingService.error(`Error details: ${errorDetails}`);\n      } catch (jsonError) {\n        // If stringify fails, log that we couldn't get more details\n        this._loggingService.error(\"Could not stringify error object for details\");\n      }\n\n      this.throwSCORMError(CMIElement, this._errorCodes.GENERAL, \"Unknown error\");\n    }\n    return returnValue;\n  }\n\n  /**\n   * Get the error codes object\n   *\n   * @return {ErrorCode} - The error codes object\n   */\n  get errorCodes(): ErrorCode {\n    return this._errorCodes;\n  }\n}\n\n// Export a factory function to create the service\nexport function createErrorHandlingService(\n  errorCodes: ErrorCode,\n  apiLog: (\n    functionName: string,\n    message: string,\n    logLevel?: LogLevelEnum,\n    CMIElement?: string,\n  ) => void,\n  getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n  loggingService?: ILoggingService,\n): ErrorHandlingService {\n  return new ErrorHandlingService(errorCodes, apiLog, getLmsErrorMessageDetails, loggingService);\n}\n","/**\n * Base class for API cmi objects\n */\nexport abstract class BaseCMI {\n  jsonString? = false;\n  protected readonly _cmi_element: string;\n  protected _initialized = false;\n  private _start_time: number | undefined;\n\n  /**\n   * Constructor for BaseCMI\n   * @param {string} cmi_element\n   */\n  constructor(cmi_element: string) {\n    this._cmi_element = cmi_element;\n  }\n\n  /**\n   * Getter for _initialized\n   * @return {boolean}\n   */\n  get initialized(): boolean {\n    return this._initialized;\n  }\n\n  /**\n   * Getter for _start_time\n   * @return {number | undefined}\n   */\n  get start_time(): number | undefined {\n    return this._start_time;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize(): void {\n    this._initialized = true;\n  }\n\n  /**\n   * Called when the player should override the 'session_time' provided by\n   * the module\n   */\n  setStartTime(): void {\n    this._start_time = new Date().getTime();\n  }\n\n  abstract reset(): void;\n}\n\n/**\n * Base class for cmi root objects\n */\nexport abstract class BaseRootCMI extends BaseCMI {\n  abstract getCurrentTotalTime(): string;\n}\n","export type ErrorCode = {\n  [key: string]: number;\n};\n\nexport const global_errors: ErrorCode = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nexport const scorm12_errors: ErrorCode = {\n  ...global_errors,\n  RETRIEVE_BEFORE_INIT: 301,\n  STORE_BEFORE_INIT: 301,\n  COMMIT_BEFORE_INIT: 301,\n  ARGUMENT_ERROR: 201,\n  CHILDREN_ERROR: 202,\n  COUNT_ERROR: 203,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 401,\n  VALUE_NOT_INITIALIZED: 301,\n  INVALID_SET_VALUE: 402,\n  READ_ONLY_ELEMENT: 403,\n  WRITE_ONLY_ELEMENT: 404,\n  TYPE_MISMATCH: 405,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n\nexport const scorm2004_errors: ErrorCode = {\n  ...global_errors,\n  INITIALIZATION_FAILED: 102,\n  INITIALIZED: 103,\n  TERMINATED: 104,\n  TERMINATION_FAILURE: 111,\n  TERMINATION_BEFORE_INIT: 112,\n  MULTIPLE_TERMINATIONS: 113,\n  RETRIEVE_BEFORE_INIT: 122,\n  RETRIEVE_AFTER_TERM: 123,\n  STORE_BEFORE_INIT: 132,\n  STORE_AFTER_TERM: 133,\n  COMMIT_BEFORE_INIT: 142,\n  COMMIT_AFTER_TERM: 143,\n  ARGUMENT_ERROR: 201,\n  GENERAL_GET_FAILURE: 301,\n  GENERAL_SET_FAILURE: 351,\n  GENERAL_COMMIT_FAILURE: 391,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 402,\n  VALUE_NOT_INITIALIZED: 403,\n  READ_ONLY_ELEMENT: 404,\n  WRITE_ONLY_ELEMENT: 405,\n  TYPE_MISMATCH: 406,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n","import { BaseCMI } from \"./base_cmi\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Base class for cmi *.n objects\n */\nexport class CMIArray extends BaseCMI {\n  private readonly _errorCode: number;\n  private readonly _errorClass: typeof BaseScormValidationError;\n  private readonly __children: string;\n  public childArray: any[];\n\n  /**\n   * Constructor cmi *.n arrays\n   * @param {object} params\n   */\n  constructor(params: {\n    CMIElement: string;\n    children: string;\n    errorCode?: number;\n    errorClass?: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n    this.__children = params.children;\n    this._errorCode = params.errorCode || scorm12_errors.GENERAL;\n    this._errorClass = params.errorClass || BaseScormValidationError;\n    this.childArray = [];\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(wipe: boolean = false): void {\n    this._initialized = false;\n    if (wipe) {\n      this.childArray = [];\n    } else {\n      // Reset all children\n      for (let i = 0; i < this.childArray.length; i++) {\n        this.childArray[i].reset();\n      }\n    }\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this._errorClass(this._cmi_element + \"._children\", this._errorCode);\n  }\n\n  /**\n   * Getter for _count\n   * @return {number}\n   */\n  get _count(): number {\n    return this.childArray.length;\n  }\n\n  /**\n   * Setter for _count. Just throws an error.\n   * @param {number} _count\n   */\n  set _count(_count: number) {\n    throw new this._errorClass(this._cmi_element + \"._count\", this._errorCode);\n  }\n\n  /**\n   * toJSON for *.n arrays\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result: { [key: string]: any } = {};\n    for (let i = 0; i < this.childArray.length; i++) {\n      result[i + \"\"] = this.childArray[i];\n    }\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { ErrorCode } from \"./constants/error_codes\";\nimport { global_constants } from \"./constants/api_constants\";\nimport { formatMessage, StringKeyMap, stringMatches } from \"./utilities\";\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport { CommitObject, LogLevel, ResultObject, Settings } from \"./types/api_types\";\nimport { DefaultSettings } from \"./constants/default_settings\";\nimport { IBaseAPI } from \"./interfaces/IBaseAPI\";\nimport { ScheduledCommit } from \"./helpers/scheduled_commit\";\nimport { LogLevelEnum } from \"./constants/enums\";\nimport { HttpService } from \"./services/HttpService\";\nimport { EventService } from \"./services/EventService\";\nimport { SerializationService } from \"./services/SerializationService\";\nimport { createErrorHandlingService } from \"./services/ErrorHandlingService\";\nimport { getLoggingService } from \"./services/LoggingService\";\nimport {\n  ICMIDataService,\n  IErrorHandlingService,\n  IEventService,\n  IHttpService,\n  ILoggingService,\n  ISerializationService\n} from \"./interfaces/services\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { ValidationError } from \"./exceptions\";\n\n/**\n * Base API class for AICC, SCORM 1.2, and SCORM 2004. Should be considered\n * abstract, and never initialized on its own.\n */\nexport default abstract class BaseAPI implements IBaseAPI {\n  private _timeout?: ScheduledCommit;\n  private readonly _error_codes: ErrorCode;\n  private _settings: Settings = DefaultSettings;\n  private readonly _httpService: IHttpService;\n  private _eventService: IEventService;\n  private _serializationService: ISerializationService;\n  private readonly _errorHandlingService: IErrorHandlingService;\n  private readonly _loggingService: ILoggingService;\n\n  /**\n   * Constructor for Base API class. Sets some shared API fields, as well as\n   * sets up options for the API.\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Settings} settings - Optional settings for the API\n   * @param {IHttpService} httpService - Optional HTTP service instance\n   * @param {IEventService} eventService - Optional Event service instance\n   * @param {ISerializationService} serializationService - Optional Serialization service instance\n   * @param {ICMIDataService} cmiDataService - Optional CMI Data service instance\n   * @param {IErrorHandlingService} errorHandlingService - Optional Error Handling service instance\n   * @param {ILoggingService} loggingService - Optional Logging service instance\n   */\n  protected constructor(\n    error_codes: ErrorCode,\n    settings?: Settings,\n    httpService?: IHttpService,\n    eventService?: IEventService,\n    serializationService?: ISerializationService,\n    cmiDataService?: ICMIDataService,\n    errorHandlingService?: IErrorHandlingService,\n    loggingService?: ILoggingService,\n  ) {\n    if (new.target === BaseAPI) {\n      throw new TypeError(\"Cannot construct BaseAPI instances directly\");\n    }\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n\n    this._error_codes = error_codes;\n\n    if (settings) {\n      this.settings = settings;\n    }\n    this.apiLogLevel = this.settings.logLevel;\n    this.selfReportSessionTime = this.settings.selfReportSessionTime;\n\n    if (this.apiLogLevel === undefined) {\n      this.apiLogLevel = LogLevelEnum.NONE;\n    }\n\n    // Initialize and configure LoggingService\n    this._loggingService = loggingService || getLoggingService();\n    this._loggingService.setLogLevel(this.apiLogLevel);\n\n    // If settings include a custom onLogMessage function, use it as the log handler\n    if (this.settings.onLogMessage) {\n      this._loggingService.setLogHandler(this.settings.onLogMessage);\n    }\n\n    // Initialize HTTP service\n    this._httpService = httpService || new HttpService(this.settings, this._error_codes);\n\n    // Initialize Event service\n    this._eventService =\n      eventService ||\n      new EventService((functionName, message, level, element) =>\n        this.apiLog(functionName, message, level, element),\n      );\n\n    // Initialize Serialization service\n    this._serializationService = serializationService || new SerializationService();\n\n    // Initialize Error Handling service\n    this._errorHandlingService =\n      errorHandlingService ||\n      createErrorHandlingService(\n        this._error_codes,\n        (functionName, message, level, element) =>\n          this.apiLog(functionName, message, level, element),\n        (errorNumber, detail) => this.getLmsErrorMessageDetails(errorNumber, detail),\n      );\n  }\n\n  public abstract cmi: BaseCMI;\n  public startingData?: StringKeyMap;\n\n  public currentState: number;\n  public apiLogLevel: LogLevel;\n  public selfReportSessionTime: boolean;\n\n  /**\n   * Get the last error code\n   * @return {string}\n   */\n  get lastErrorCode(): string {\n    return this._errorHandlingService?.lastErrorCode ?? \"0\";\n  }\n\n  /**\n   * Set the last error code\n   * @param {string} errorCode\n   */\n  set lastErrorCode(errorCode: string) {\n    if (this._errorHandlingService) {\n      this._errorHandlingService.lastErrorCode = errorCode;\n    }\n  }\n\n  /**\n   * Reset the API to its initial state.\n   * This method clears all current data and resets the API to an uninitialized state.\n   * It can optionally accept new settings to configure the API after reset.\n   *\n   * @param {Settings} settings - Optional new settings to apply after reset\n   */\n  abstract reset(settings?: Settings): void;\n\n  /**\n   * Common reset method for all APIs. New settings are merged with the existing settings.\n   * @param {Settings} settings\n   * @protected\n   */\n  commonReset(settings?: Settings): void {\n    this.apiLog(\"reset\", \"Called\", LogLevelEnum.INFO);\n\n    this.settings = { ...this.settings, ...settings };\n\n    this.clearScheduledCommit();\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n    this.lastErrorCode = \"0\";\n    this._eventService.reset();\n    this.startingData = undefined;\n  }\n\n  /**\n   * Initialize the API\n   * @param {string} callbackName\n   * @param {string} initializeMessage\n   * @param {string} terminationMessage\n   * @return {string}\n   */\n  initialize(\n    callbackName: string,\n    initializeMessage?: string,\n    terminationMessage?: string,\n  ): string {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.isInitialized()) {\n      this.throwSCORMError(\"api\", this._error_codes.INITIALIZED, initializeMessage);\n    } else if (this.isTerminated()) {\n      this.throwSCORMError(\"api\", this._error_codes.TERMINATED, terminationMessage);\n    } else {\n      if (this.selfReportSessionTime) {\n        this.cmi.setStartTime();\n      }\n\n      this.currentState = global_constants.STATE_INITIALIZED;\n      this.lastErrorCode = \"0\";\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Initialize the LMS API\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsInitialize(): string;\n\n  /**\n   * Finish the current LMS API session\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsFinish(): string;\n\n  /**\n   * Get the value of a CMI element from the LMS\n   * @param {string} CMIElement - The CMI element to get the value of\n   * @return {string} The value of the CMI element\n   */\n  abstract lmsGetValue(CMIElement: string): string;\n\n  /**\n   * Set the value of a CMI element in the LMS\n   * @param {string} CMIElement - The CMI element to set the value of\n   * @param {any} value - The value to set\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsSetValue(CMIElement: string, value: any): string;\n\n  /**\n   * Commit the current data to the LMS\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsCommit(): string;\n\n  /**\n   * Get the last error code from the LMS\n   * @return {string} The last error code\n   */\n  abstract lmsGetLastError(): string;\n\n  /**\n   * Get the error string for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get the string for\n   * @return {string} The error string\n   */\n  abstract lmsGetErrorString(CMIErrorCode: string | number): string;\n\n  /**\n   * Get diagnostic information for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get diagnostic information for\n   * @return {string} The diagnostic information\n   */\n  abstract lmsGetDiagnostic(CMIErrorCode: string | number): string;\n\n  /**\n   * Abstract method for validating that a response is correct.\n   * This method is used to validate the format and content of a response\n   * before it is set in the CMI data model.\n   *\n   * @param {string} _CMIElement - The CMI element path to validate\n   * @param {any} _value - The value to validate\n   * @throws {Error} If the response format is invalid\n   */\n  abstract validateCorrectResponse(_CMIElement: string, _value: any): void;\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   * APIs that inherit BaseAPI should override this method.\n   *\n   * @param {string} _CMIElement - unused\n   * @param {*} _value - unused\n   * @param {boolean} _foundFirstIndex - unused\n   * @return {BaseCMI|null}\n   * @abstract\n   */\n  abstract getChildElement(\n    _CMIElement: string,\n    _value: any,\n    _foundFirstIndex: boolean,\n  ): BaseCMI | null;\n\n  /**\n   * Attempts to store the data to the LMS, logs data if no LMS configured\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _calculateTotalTime\n   * @return {ResultObject}\n   * @abstract\n   */\n  abstract storeData(_calculateTotalTime: boolean): Promise<ResultObject>;\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _terminateCommit\n   * @return {StringKeyMap|Array}\n   * @abstract\n   */\n  abstract renderCommitCMI(_terminateCommit: boolean): StringKeyMap | Array<string>;\n\n  /**\n   * Render the commit object to the shortened format for LMS commit.\n   * This method transforms the CMI data into a format suitable for sending to the LMS.\n   * It is called during the commit process to prepare the data for transmission.\n   *\n   * @param {boolean} _terminateCommit - Whether this commit is part of the termination process\n   * @return {CommitObject} A formatted object containing the data to be sent to the LMS\n   * @example\n   * // Example of a commit object structure\n   * {\n   *   method: \"POST\",\n   *   params: {\n   *     cmi: { ... },\n   *     finishState: \"COMPLETED\"\n   *   }\n   * }\n   */\n  abstract renderCommitObject(_terminateCommit: boolean): CommitObject;\n\n  /**\n   * Logging for all SCORM actions\n   *\n   * @param {string} functionName\n   * @param {string} logMessage\n   * @param {number} messageLevel\n   * @param {string} CMIElement\n   */\n  apiLog(functionName: string, logMessage: string, messageLevel: LogLevel, CMIElement?: string) {\n    logMessage = formatMessage(functionName, logMessage, CMIElement);\n\n    if (messageLevel >= this.apiLogLevel) {\n      // Use the injected LoggingService\n      this._loggingService.log(messageLevel, logMessage);\n    }\n  }\n\n  /**\n   * Getter for _error_codes\n   * @return {ErrorCode}\n   */\n  get error_codes(): ErrorCode {\n    return this._error_codes;\n  }\n\n  /**\n   * Getter for _settings\n   * @return {Settings}\n   */\n  get settings(): Settings {\n    return this._settings;\n  }\n\n  /**\n   * Setter for _settings\n   * @param {Settings} settings\n   */\n  set settings(settings: Settings) {\n    const previousSettings = this._settings;\n    this._settings = { ...this._settings, ...settings };\n\n    // Update HTTP service settings\n    this._httpService?.updateSettings(this._settings);\n\n    // Update log level if it changed\n    if (settings.logLevel !== undefined && settings.logLevel !== previousSettings.logLevel) {\n      this.apiLogLevel = settings.logLevel;\n      this._loggingService?.setLogLevel(settings.logLevel);\n    }\n\n    // Update log handler if onLogMessage changed\n    if (\n      settings.onLogMessage !== undefined &&\n      settings.onLogMessage !== previousSettings.onLogMessage\n    ) {\n      this._loggingService?.setLogHandler(settings.onLogMessage);\n    }\n  }\n\n  /**\n   * Terminates the current run of the API\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async terminate(callbackName: string, checkTerminated: boolean): Promise<string> {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.TERMINATION_BEFORE_INIT,\n        this._error_codes.MULTIPLE_TERMINATION,\n      )\n    ) {\n      this.currentState = global_constants.STATE_TERMINATED;\n\n      const result: ResultObject = await this.storeData(true);\n      if ((result.errorCode ?? 0) > 0) {\n        this.throwSCORMError(\"api\", result.errorCode);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Get the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  getValue(callbackName: string, checkTerminated: boolean, CMIElement: string): string {\n    let returnValue: string = \"\";\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.RETRIEVE_BEFORE_INIT,\n        this._error_codes.RETRIEVE_AFTER_TERM,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.getCMIValue(CMIElement);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement);\n    }\n\n    this.apiLog(callbackName, \": returned: \" + returnValue, LogLevelEnum.INFO, CMIElement);\n\n    if (returnValue === undefined) {\n      return \"\";\n    }\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Sets the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {string} commitCallback\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  setValue(\n    callbackName: string,\n    commitCallback: string,\n    checkTerminated: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (value !== undefined) {\n      value = String(value);\n    }\n    let returnValue: string = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.STORE_BEFORE_INIT,\n        this._error_codes.STORE_AFTER_TERM,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.setCMIValue(CMIElement, value);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement, value);\n    }\n\n    if (returnValue === undefined) {\n      returnValue = global_constants.SCORM_FALSE;\n    }\n\n    // If we didn't have any errors while setting the data, go ahead and\n    // schedule a commit, if autocommit is turned on\n    if (String(this.lastErrorCode) === \"0\") {\n      if (this.settings.autocommit) {\n        this.scheduleCommit(this.settings.autocommitSeconds * 1000, commitCallback);\n      }\n    }\n\n    this.apiLog(\n      callbackName,\n      \": \" + value + \": result: \" + returnValue,\n      LogLevelEnum.INFO,\n      CMIElement,\n    );\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async commit(callbackName: string, checkTerminated: boolean = false): Promise<string> {\n    this.clearScheduledCommit();\n\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.COMMIT_BEFORE_INIT,\n        this._error_codes.COMMIT_AFTER_TERM,\n      )\n    ) {\n      const result = await this.storeData(false);\n      if ((result.errorCode ?? 0) > 0) {\n        this.throwSCORMError(\"api\", result.errorCode);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      this.apiLog(callbackName, \" Result: \" + returnValue, LogLevelEnum.DEBUG, \"HttpRequest\");\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Returns last error code\n   * @param {string} callbackName\n   * @return {string}\n   */\n  getLastError(callbackName: string): string {\n    const returnValue = String(this.lastErrorCode);\n\n    this.processListeners(callbackName);\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getErrorString(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getDiagnostic(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode, true);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Checks the LMS state and ensures it has been initialized.\n   *\n   * @param {boolean} checkTerminated\n   * @param {number} beforeInitError\n   * @param {number} afterTermError\n   * @return {boolean}\n   */\n  checkState(checkTerminated: boolean, beforeInitError: number, afterTermError: number): boolean {\n    if (this.isNotInitialized()) {\n      this.throwSCORMError(\"api\", beforeInitError);\n      return false;\n    } else if (checkTerminated && this.isTerminated()) {\n      this.throwSCORMError(\"api\", afterTermError);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {(string|number)} _errorNumber\n   * @param {boolean} _detail\n   * @return {string}\n   * @abstract\n   */\n  getLmsErrorMessageDetails(_errorNumber: string | number, _detail: boolean = false): string {\n    throw new Error(\"The getLmsErrorMessageDetails method has not been implemented\");\n  }\n\n  /**\n   * Gets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @return {string}\n   * @abstract\n   */\n  getCMIValue(_CMIElement: string): string {\n    throw new Error(\"The getCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Sets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @param {any} _value\n   * @return {string}\n   * @abstract\n   */\n  setCMIValue(_CMIElement: string, _value: any): string {\n    throw new Error(\"The setCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Shared API method to set a valid for a given element.\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  _commonSetCMIValue(\n    methodName: string,\n    scorm2004: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (!CMIElement || CMIElement === \"\") {\n      return global_constants.SCORM_FALSE;\n    }\n\n    this.lastErrorCode = \"0\";\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap | BaseCMI = this as StringKeyMap;\n    let returnValue = global_constants.SCORM_FALSE;\n    let foundFirstIndex = false;\n\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      const attribute = structure[idx];\n\n      if (idx === structure.length - 1) {\n        if (scorm2004 && attribute.substring(0, 8) === \"{target=\") {\n          if (this.isInitialized()) {\n            this.throwSCORMError(CMIElement, this._error_codes.READ_ONLY_ELEMENT);\n            break;\n          } else {\n            refObject = {\n              ...refObject,\n              attribute: value,\n            };\n          }\n        } else if (!this._checkObjectHasProperty(refObject as StringKeyMap, attribute)) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        } else {\n          if (\n            stringMatches(CMIElement, \"\\\\.correct_responses\\\\.\\\\d+$\") &&\n            this.isInitialized() &&\n            attribute !== \"pattern\"\n          ) {\n            this.validateCorrectResponse(CMIElement, value);\n            if (this.lastErrorCode !== \"0\") {\n              this.throwSCORMError(CMIElement, this._error_codes.TYPE_MISMATCH);\n              break;\n            }\n          }\n\n          if (!scorm2004 || this._errorHandlingService.lastErrorCode === \"0\") {\n            (refObject as StringKeyMap)[attribute] = value;\n            returnValue = global_constants.SCORM_TRUE;\n          }\n        }\n      } else {\n        refObject = (refObject as StringKeyMap)[attribute] as StringKeyMap;\n        if (!refObject) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n\n        if (refObject instanceof CMIArray) {\n          const index = parseInt(structure[idx + 1], 10);\n\n          // SCO is trying to set an item on an array\n          if (!isNaN(index)) {\n            const item = refObject.childArray[index];\n\n            if (item) {\n              refObject = item;\n              foundFirstIndex = true;\n            } else {\n              const newChild = this.getChildElement(CMIElement, value, foundFirstIndex);\n              foundFirstIndex = true;\n\n              if (!newChild) {\n                if (this.lastErrorCode === \"0\") {\n                  this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n                }\n                break;\n              } else {\n                if (refObject.initialized) newChild.initialize();\n                refObject.childArray[index] = newChild;\n                refObject = newChild;\n              }\n            }\n\n            // Have to update idx value to skip the array position\n            idx++;\n          }\n        }\n      }\n    }\n\n    if (returnValue === global_constants.SCORM_FALSE) {\n      this.apiLog(\n        methodName,\n        `There was an error setting the value for: ${CMIElement}, value of: ${value}`,\n        LogLevelEnum.WARN,\n      );\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @return {any}\n   */\n  _commonGetCMIValue(methodName: string, scorm2004: boolean, CMIElement: string): any {\n    if (!CMIElement || CMIElement === \"\") {\n      return \"\";\n    }\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap = this as StringKeyMap;\n    let attribute = null;\n\n    const uninitializedErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) has not been initialized.`;\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      attribute = structure[idx];\n\n      if (!scorm2004) {\n        if (idx === structure.length - 1) {\n          if (!this._checkObjectHasProperty(refObject, attribute)) {\n            this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n            return;\n          }\n        }\n      } else {\n        if (\n          String(attribute).substring(0, 8) === \"{target=\" &&\n          typeof refObject._isTargetValid == \"function\"\n        ) {\n          const target = String(attribute).substring(8, String(attribute).length - 9);\n          return refObject._isTargetValid(target);\n        } else if (!this._checkObjectHasProperty(refObject, attribute)) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          return;\n        }\n      }\n\n      refObject = refObject[attribute] as StringKeyMap;\n      if (refObject === undefined) {\n        this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n        break;\n      }\n\n      if (refObject instanceof CMIArray) {\n        const index = parseInt(structure[idx + 1], 10);\n\n        // SCO is trying to set an item on an array\n        if (!isNaN(index)) {\n          const item = refObject.childArray[index];\n\n          if (item) {\n            refObject = item;\n          } else {\n            this.throwSCORMError(\n              CMIElement,\n              this._error_codes.VALUE_NOT_INITIALIZED,\n              uninitializedErrorMessage,\n            );\n            break;\n          }\n\n          // Have to update idx value to skip the array position\n          idx++;\n        }\n      }\n    }\n\n    if (refObject === null || refObject === undefined) {\n      if (!scorm2004) {\n        if (attribute === \"_children\") {\n          this.throwSCORMError(CMIElement, this._error_codes.CHILDREN_ERROR, undefined);\n        } else if (attribute === \"_count\") {\n          this.throwSCORMError(CMIElement, this._error_codes.COUNT_ERROR, undefined);\n        }\n      }\n    } else {\n      return refObject;\n    }\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isInitialized(): boolean {\n    return this.currentState === global_constants.STATE_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_NOT_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isNotInitialized(): boolean {\n    return this.currentState === global_constants.STATE_NOT_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_TERMINATED\n   *\n   * @return {boolean}\n   */\n  isTerminated(): boolean {\n    return this.currentState === global_constants.STATE_TERMINATED;\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event.\n   * This method allows you to register a callback function that will be executed\n   * when the specified event occurs.\n   *\n   * @param {string} listenerName - The name of the event to listen for (e.g., \"Initialize\", \"Terminate\", \"GetValue\", \"SetValue\", \"Commit\")\n   * @param {function} callback - The function to execute when the event occurs. The callback will receive relevant event data.\n   * @example\n   * // Listen for Initialize events\n   * api.on(\"Initialize\", function() {\n   *   console.log(\"API has been initialized\");\n   * });\n   *\n   * // Listen for SetValue events\n   * api.on(\"SetValue\", function(element, value) {\n   *   console.log(\"Setting \" + element + \" to \" + value);\n   * });\n   */\n  on(listenerName: string, callback: Function) {\n    this._eventService.on(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener.\n   * This method removes a previously registered callback for an event.\n   * Both the event name and the callback reference must match what was used in the 'on' method.\n   *\n   * @param {string} listenerName - The name of the event to stop listening for\n   * @param {function} callback - The callback function to remove\n   * @example\n   * // Remove a specific listener\n   * const myCallback = function() { console.log(\"API initialized\"); };\n   * api.on(\"Initialize\", myCallback);\n   * // Later, when you want to remove it:\n   * api.off(\"Initialize\", myCallback);\n   */\n  off(listenerName: string, callback: Function) {\n    this._eventService.off(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event.\n   * This method removes all callbacks registered for the specified event.\n   *\n   * @param {string} listenerName - The name of the event to clear all listeners for\n   * @example\n   * // Remove all listeners for the Initialize event\n   * api.clear(\"Initialize\");\n   */\n  clear(listenerName: string) {\n    this._eventService.clear(listenerName);\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created for a specific event.\n   * This method is called internally when SCORM events occur to notify all registered listeners.\n   * It triggers all callback functions registered for the specified event.\n   *\n   * @param {string} functionName - The name of the function/event that occurred\n   * @param {string} CMIElement - Optional CMI element involved in the event\n   * @param {any} value - Optional value associated with the event\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this._eventService.processListeners(functionName, CMIElement, value);\n  }\n\n  /**\n   * Throws a SCORM error with the specified error number and optional message.\n   * This method sets the last error code and can be used to indicate that an operation failed.\n   * The error number should correspond to one of the standard SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The SCORM error code to set\n   * @param {string} message - Optional custom error message to provide additional context\n   * @example\n   * // Throw a \"not initialized\" error\n   * this.throwSCORMError(301, \"The API must be initialized before calling GetValue\");\n   */\n  throwSCORMError(CMIElement: string, errorNumber: number, message?: string) {\n    this._errorHandlingService.throwSCORMError(CMIElement, errorNumber, message);\n  }\n\n  /**\n   * Clears the last SCORM error code when an operation succeeds.\n   * This method is typically called after successful API operations to reset the error state.\n   * It only clears the error if the success parameter is \"true\".\n   *\n   * @param {string} success - A string indicating whether the operation succeeded (\"true\" or \"false\")\n   * @example\n   * // Clear error after successful operation\n   * this.clearSCORMError(\"true\");\n   */\n  clearSCORMError(success: string) {\n    this._errorHandlingService.clearSCORMError(success);\n  }\n\n  /**\n   * Load the CMI from a flattened JSON object.\n   * This method populates the CMI data model from a flattened JSON structure\n   * where keys represent CMI element paths (e.g., \"cmi.core.student_id\").\n   *\n   * @param {StringKeyMap} json - The flattened JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a flattened JSON structure\n   * api.loadFromFlattenedJSON({\n   *   \"cmi.core.student_id\": \"12345\",\n   *   \"cmi.core.student_name\": \"John Doe\",\n   *   \"cmi.core.lesson_status\": \"incomplete\"\n   * });\n   */\n  loadFromFlattenedJSON(json: StringKeyMap, CMIElement?: string) {\n    if (!CMIElement) {\n      // by default, we start from a blank string because we're expecting each element to start with `cmi`\n      CMIElement = \"\";\n    }\n\n    this._serializationService.loadFromFlattenedJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Loads CMI data from a hierarchical JSON object.\n   * This method populates the CMI data model from a nested JSON structure\n   * that mirrors the CMI object hierarchy.\n   *\n   * @param {StringKeyMap} json - The hierarchical JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a hierarchical JSON structure\n   * api.loadFromJSON({\n   *   core: {\n   *     student_id: \"12345\",\n   *     student_name: \"John Doe\",\n   *     lesson_status: \"incomplete\"\n   *   },\n   *   objectives: [\n   *     { id: \"obj1\", score: { raw: 85 } }\n   *   ]\n   * });\n   */\n  loadFromJSON(json: StringKeyMap, CMIElement: string = \"\") {\n    this._serializationService.loadFromJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Render the CMI object to a JSON string for sending to an LMS.\n   * This method serializes the current CMI data model to a JSON string.\n   * The output format is controlled by the sendFullCommit setting.\n   *\n   * @return {string} A JSON string representation of the CMI data\n   * @example\n   * // Get the current CMI data as a JSON string\n   * const jsonString = api.renderCMIToJSONString();\n   * console.log(jsonString); // '{\"core\":{\"student_id\":\"12345\",...}}'\n   */\n  renderCMIToJSONString(): string {\n    return this._serializationService.renderCMIToJSONString(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Returns a JavaScript object representing the current CMI data.\n   * This method creates a plain JavaScript object that mirrors the\n   * structure of the CMI data model, suitable for further processing.\n   *\n   * @return {StringKeyMap} A JavaScript object representing the CMI data\n   * @example\n   * // Get the current CMI data as a JavaScript object\n   * const cmiObject = api.renderCMIToJSONObject();\n   * console.log(cmiObject.core.student_id); // \"12345\"\n   */\n  renderCMIToJSONObject(): StringKeyMap {\n    return this._serializationService.renderCMIToJSONObject(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Sends a request to the LMS with the specified parameters.\n   * This method handles communication with the LMS server, including\n   * formatting the request, handling the response, and triggering appropriate events.\n   *\n   * @param {string} url - The URL endpoint to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The data to send to the LMS\n   * @param {boolean} immediate - Whether to send the request immediately (true) or queue it (false)\n   * @return {Promise<ResultObject>} A promise that resolves with the result of the request\n   * @example\n   * // Send data to the LMS immediately\n   * const result = await api.processHttpRequest(\n   *   \"https://lms.example.com/scorm/commit\",\n   *   { method: \"POST\", params: { cmi: { core: { lesson_status: \"completed\" } } } },\n   *   true\n   * );\n   * console.log(result.errorCode === 0 ? \"Success\" : \"Failed\");\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n  ): Promise<ResultObject> {\n    return this._httpService.processHttpRequest(\n      url,\n      params,\n      immediate,\n      (functionName, message, level, element) => this.apiLog(functionName, message, level, element),\n      (functionName, CMIElement, value) => this.processListeners(functionName, CMIElement, value),\n    );\n  }\n\n  /**\n   * Schedules a commit operation to occur after a specified delay.\n   * This method is used to implement auto-commit functionality, where data\n   * is periodically sent to the LMS without requiring explicit commit calls.\n   *\n   * @param {number} when - The number of milliseconds to wait before committing\n   * @param {string} callback - The name of the commit event callback\n   * @example\n   * // Schedule a commit to happen in 60 seconds\n   * api.scheduleCommit(60000, \"commit\");\n   */\n  scheduleCommit(when: number, callback: string) {\n    if (!this._timeout) {\n      this._timeout = new ScheduledCommit(this, when, callback);\n      this.apiLog(\"scheduleCommit\", \"scheduled\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Clears and cancels any currently scheduled commits.\n   * This method is typically called when an explicit commit is performed\n   * or when the API is terminated, to prevent redundant commits.\n   *\n   * @example\n   * // Cancel any pending scheduled commits\n   * api.clearScheduledCommit();\n   */\n  clearScheduledCommit() {\n    if (this._timeout) {\n      this._timeout.cancel();\n      this._timeout = undefined;\n      this.apiLog(\"clearScheduledCommit\", \"cleared\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Checks if an object has a specific property, using multiple detection methods.\n   * This method performs a thorough check for property existence by:\n   * 1. Checking if it's an own property using Object.hasOwnProperty\n   * 2. Checking if it's defined in the prototype with a property descriptor\n   * 3. Checking if it's accessible via the 'in' operator (includes inherited properties)\n   *\n   * @param {StringKeyMap} StringKeyMap - The object to check for the property\n   * @param {string} attribute - The property name to look for\n   * @return {boolean} True if the property exists on the object or its prototype chain\n   * @private\n   *\n   * @example\n   * // Check for an own property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"name\"); // Returns true\n   *\n   * @example\n   * // Check for an inherited property\n   * class Parent { get type() { return \"parent\"; } }\n   * const child = Object.create(new Parent());\n   * this._checkObjectHasProperty(child, \"type\"); // Returns true\n   *\n   * @example\n   * // Check for a non-existent property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"age\"); // Returns false\n   */\n  private _checkObjectHasProperty(StringKeyMap: StringKeyMap, attribute: string): boolean {\n    return (\n      Object.hasOwnProperty.call(StringKeyMap, attribute) ||\n      Object.getOwnPropertyDescriptor(Object.getPrototypeOf(StringKeyMap), attribute) != null ||\n      attribute in StringKeyMap\n    );\n  }\n\n  /**\n   * Handles exceptions that occur when accessing CMI values.\n   * This method delegates to the ErrorHandlingService to process exceptions\n   * that occur during CMI data operations, ensuring consistent error handling\n   * throughout the API.\n   *\n   * @param {string} CMIElement\n   * @param {any} e - The exception that was thrown\n   * @param {string} returnValue - The default return value to use if an error occurs\n   * @return {string} Either the original returnValue or SCORM_FALSE if an error occurred\n   * @private\n   *\n   * @example\n   * // Handle a validation error when getting a CMI value\n   * try {\n   *   return this.getCMIValue(\"cmi.core.score.raw\");\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"\");\n   * }\n   *\n   * @example\n   * // Handle a general error when setting a CMI value\n   * try {\n   *   this.setCMIValue(\"cmi.core.lesson_status\", \"completed\");\n   *   return \"true\";\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"false\");\n   * }\n   */\n  private handleValueAccessException(CMIElement: string, e: any, returnValue: string): string {\n    if (e instanceof ValidationError) {\n      this.lastErrorCode = String(e.errorCode);\n      returnValue = global_constants.SCORM_FALSE;\n      this.throwSCORMError(CMIElement, e.errorCode, e.errorMessage);\n    } else {\n      if (e instanceof Error && e.message) {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, e.message);\n      } else {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, \"Unknown error\");\n      }\n    }\n    return returnValue;\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS.\n   * This method delegates to the SerializationService to create a properly\n   * formatted object containing the CMI data that needs to be sent to the LMS.\n   * The format and content of the commit object depend on whether this is a\n   * regular commit or a termination commit.\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @return {CommitObject|StringKeyMap|Array} The formatted commit object\n   * @protected\n   *\n   * @example\n   * // Create a regular commit object\n   * const regularCommit = this.getCommitObject(false);\n   * // Result might be: { cmi: { core: { lesson_status: \"incomplete\" } } }\n   *\n   * @example\n   * // Create a termination commit object (includes total_time)\n   * const terminationCommit = this.getCommitObject(true);\n   * // Result might be: { cmi: { core: { lesson_status: \"completed\", total_time: \"PT1H30M\" } } }\n   */\n  protected getCommitObject(terminateCommit: boolean): CommitObject | StringKeyMap | Array<any> {\n    return this._serializationService.getCommitObject(\n      terminateCommit,\n      this.settings.alwaysSendTotalTime,\n      this.settings.renderCommonCommitFields,\n      (terminateCommit) => this.renderCommitObject(terminateCommit),\n      (terminateCommit) => this.renderCommitCMI(terminateCommit),\n      this.apiLogLevel,\n    );\n  }\n}\n","import { ValidationError } from \"../exceptions\";\nimport { scorm2004_constants } from \"../constants/api_constants\";\n\nconst scorm2004_errors = scorm2004_constants.error_descriptions;\n\n/**\n * SCORM 2004 Validation Error\n */\nexport class Scorm2004ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm2004_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm2004_errors[String(errorCode)].basicMessage,\n        scorm2004_errors[String(errorCode)].detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm2004_errors[\"101\"].basicMessage,\n        scorm2004_errors[\"101\"].detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm2004ValidationError.prototype);\n  }\n}\n","import { BaseScormValidationError } from \"../../exceptions\";\nimport { memoize } from \"../../utilities\";\n\n/**\n * Check if the value matches the proper format. If not, throw proper error code.\n *\n * @param {string} value\n * @param {string} regexPattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @param {boolean} [allowEmptyString]\n * @return {boolean}\n */\nexport const checkValidFormat = memoize(\n  (\n    CMIElement: string,\n    value: string,\n    regexPattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n    allowEmptyString?: boolean,\n  ): boolean => {\n    if (typeof value !== \"string\") {\n      return false;\n    }\n    const formatRegex = new RegExp(regexPattern);\n    const matches = value.match(formatRegex);\n    if (allowEmptyString && value === \"\") {\n      return true;\n    }\n    if (value === undefined || !matches || matches[0] === \"\") {\n      throw new errorClass(CMIElement, errorCode);\n    }\n    return true;\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, regexPattern, errorCode, _errorClass, allowEmptyString) => {\n    // Use typeof for non-string values to ensure consistent cache keys\n    const valueKey = typeof value === \"string\" ? value : `[${typeof value}]`;\n    return `${CMIElement}:${valueKey}:${regexPattern}:${errorCode}:${allowEmptyString || false}`;\n  },\n);\n\n/**\n * Check if the value matches the proper range. If not, throw proper error code.\n *\n * @param {any} value\n * @param {string} rangePattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @return {boolean}\n */\nexport const checkValidRange = memoize(\n  (\n    CMIElement: string,\n    value: any,\n    rangePattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean => {\n    const ranges = rangePattern.split(\"#\");\n    value = value * 1.0;\n    if (value >= ranges[0]) {\n      if (ranges[1] === \"*\" || value <= ranges[1]) {\n        return true;\n      } else {\n        throw new errorClass(CMIElement, errorCode);\n      }\n    } else {\n      throw new errorClass(CMIElement, errorCode);\n    }\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, rangePattern, errorCode, _errorClass) =>\n    `${CMIElement}:${value}:${rangePattern}:${errorCode}`,\n);\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check2004ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm2004_errors.TYPE_MISMATCH,\n    Scorm2004ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @return {boolean}\n */\nexport function check2004ValidRange(\n  CMIElement: string,\n  value: string,\n  rangePattern: string,\n): boolean {\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm2004_errors.VALUE_OUT_OF_RANGE,\n    Scorm2004ValidationError,\n  );\n}\n","export const scorm12_regex = {\n  CMIString256: \"^.{0,255}$\",\n  CMIString4096: \"^.{0,4096}$\",\n  CMITime: \"^(?:[01]\\\\d|2[0123]):(?:[012345]\\\\d):(?:[012345]\\\\d)$\",\n  CMITimespan: \"^([0-9]{2,}):([0-9]{2}):([0-9]{2})(.[0-9]{1,2})?$\",\n\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{0,3})(.[0-9]*)?$\",\n\n  CMIIdentifier: \"^[\\\\u0021-\\\\u007E\\\\s]{0,255}$\",\n  CMIFeedback: \"^.{0,255}$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMIStatus: \"^(passed|completed|failed|incomplete|browsed)$\",\n  CMIStatus2: \"^(passed|completed|failed|incomplete|browsed|not attempted)$\",\n  CMIExit: \"^(time-out|suspend|logout|)$\",\n  CMIType: \"^(true-false|choice|fill-in|matching|performance|sequencing|likert|numeric)$\",\n  CMIResult: \"^(correct|wrong|unanticipated|neutral|([0-9]{0,3})?(\\\\.[0-9]*)?)$\",\n  NAVEvent: \"^(previous|continue)$\",\n  // Data ranges\n  score_range: \"0#100\",\n  audio_range: \"-1#100\",\n  speed_range: \"-100#100\",\n  weighting_range: \"-100#100\",\n  text_range: \"-1#1\",\n};\nexport const aicc_regex = {\n  ...scorm12_regex,\n  ...{\n    CMIIdentifier: \"^\\\\w{1,255}$\",\n  },\n};\nexport const scorm2004_regex = {\n  CMIString200: \"^[\\\\u0000-\\\\uFFFF]{0,200}$\",\n  CMIString250: \"^[\\\\u0000-\\\\uFFFF]{0,250}$\",\n  CMIString1000: \"^[\\\\u0000-\\\\uFFFF]{0,1000}$\",\n  CMIString4000: \"^[\\\\u0000-\\\\uFFFF]{0,4000}$\",\n  CMIString64000: \"^[\\\\u0000-\\\\uFFFF]{0,64000}$\",\n  CMILang: \"^([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?$|^$\",\n\n  CMILangString250: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,250}$)?$\",\n\n  CMILangcr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?}))(.*?)$\",\n\n  CMILangString250cr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?})?(.{0,250})?)?$\",\n\n  CMILangString4000: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,4000}$)?$\",\n\n  CMITime:\n    \"^(19[7-9]{1}[0-9]{1}|20[0-2]{1}[0-9]{1}|203[0-8]{1})((-(0[1-9]{1}|1[0-2]{1}))((-(0[1-9]{1}|[1-2]{1}[0-9]{1}|3[0-1]{1}))(T([0-1]{1}[0-9]{1}|2[0-3]{1})((:[0-5]{1}[0-9]{1})((:[0-5]{1}[0-9]{1})((\\\\.[0-9]{1,6})((Z|([+|-]([0-1]{1}[0-9]{1}|2[0-3]{1})))(:[0-5]{1}[0-9]{1})?)?)?)?)?)?)?)?$\",\n  CMITimespan:\n    \"^P(?:([.,\\\\d]+)Y)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)W)?(?:([.,\\\\d]+)D)?(?:T?(?:([.,\\\\d]+)H)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)S)?)?$\",\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{1,5})(\\\\.[0-9]{1,18})?$\",\n  CMIIdentifier: \"^\\\\S{1,250}[a-zA-Z0-9]$\",\n  CMIShortIdentifier: \"^[\\\\w\\\\.\\\\-\\\\_]{1,250}$\",\n  CMILongIdentifier: \"^(?:(?!urn:)\\\\S{1,4000}|urn:[A-Za-z0-9-]{1,31}:\\\\S{1,4000}|.{1,4000})$\",\n  // need to re-examine this\n  CMIFeedback: \"^.*$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  CMIIndexStore: \".N(\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMICStatus: \"^(completed|incomplete|not attempted|unknown)$\",\n  CMISStatus: \"^(passed|failed|unknown)$\",\n  CMIExit: \"^(time-out|suspend|logout|normal)$\",\n  CMIType:\n    \"^(true-false|choice|fill-in|long-fill-in|matching|performance|sequencing|likert|numeric|other)$\",\n  CMIResult: \"^(correct|incorrect|unanticipated|neutral|-?([0-9]{1,4})(\\\\.[0-9]{1,18})?)$\",\n  NAVEvent:\n    \"^(previous|continue|exit|exitAll|abandon|abandonAll|suspendAll|_none_|(\\\\{target=(?<choice_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?choice|(\\\\{target=(?<jump_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?jump)$\",\n\n  NAVBoolean: \"^(unknown|true|false$)\",\n  NAVTarget: \"^{target=\\\\S{0,}[a-zA-Z0-9-_]+}$\",\n  // Data ranges\n  scaled_range: \"-1#1\",\n  audio_range: \"0#999.9999999\",\n  speed_range: \"0#999.9999999\",\n  text_range: \"-1#1\",\n  progress_range: \"0#1\",\n};\n","/**\n * Class for SCORM 2004's cmi.learner_preference object\n */\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\n\nexport class CMILearnerPreference extends BaseCMI {\n  private __children = scorm2004_constants.student_preference_children;\n  private _audio_level = \"1\";\n  private _language = \"\";\n  private _delivery_speed = \"1\";\n  private _audio_captioning = \"0\";\n\n  /**\n   * Constructor for cmi.learner_preference\n   */\n  constructor() {\n    super(\"cmi.learner_preference\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._children\",\n      scorm2004_errors.READ_ONLY_ELEMENT,\n    );\n  }\n\n  /**\n   * Getter for _audio_level\n   * @return {string}\n   */\n  get audio_level(): string {\n    return this._audio_level;\n  }\n\n  /**\n   * Setter for _audio_level\n   * @param {string} audio_level\n   */\n  set audio_level(audio_level: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".audio_level\",\n        audio_level,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".audio_level\",\n        audio_level,\n        scorm2004_regex.audio_range,\n      )\n    ) {\n      this._audio_level = audio_level;\n    }\n  }\n\n  /**\n   * Getter for _language\n   * @return {string}\n   */\n  get language(): string {\n    return this._language;\n  }\n\n  /**\n   * Setter for _language\n   * @param {string} language\n   */\n  set language(language: string) {\n    if (check2004ValidFormat(this._cmi_element + \".language\", language, scorm2004_regex.CMILang)) {\n      this._language = language;\n    }\n  }\n\n  /**\n   * Getter for _delivery_speed\n   * @return {string}\n   */\n  get delivery_speed(): string {\n    return this._delivery_speed;\n  }\n\n  /**\n   * Setter for _delivery_speed\n   * @param {string} delivery_speed\n   */\n  set delivery_speed(delivery_speed: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".delivery_speed\",\n        delivery_speed,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".delivery_speed\",\n        delivery_speed,\n        scorm2004_regex.speed_range,\n      )\n    ) {\n      this._delivery_speed = delivery_speed;\n    }\n  }\n\n  /**\n   * Getter for _audio_captioning\n   * @return {string}\n   */\n  get audio_captioning(): string {\n    return this._audio_captioning;\n  }\n\n  /**\n   * Setter for _audio_captioning\n   * @param {string} audio_captioning\n   */\n  set audio_captioning(audio_captioning: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".audio_captioning\",\n        audio_captioning,\n        scorm2004_regex.CMISInteger,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".audio_captioning\",\n        audio_captioning,\n        scorm2004_regex.text_range,\n      )\n    ) {\n      this._audio_captioning = audio_captioning;\n    }\n  }\n\n  /**\n   * toJSON for cmi.learner_preference\n   *\n   * @return {\n   *    {\n   *      audio_level: string,\n   *      language: string,\n   *      delivery_speed: string,\n   *      audio_captioning: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    audio_level: string;\n    language: string;\n    delivery_speed: string;\n    audio_captioning: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio_level: this.audio_level,\n      language: this.language,\n      delivery_speed: this.delivery_speed,\n      audio_captioning: this.audio_captioning,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { scorm2004_regex } from \"./regex\";\n\nexport const LearnerResponses: Responses = {\n  \"true-false\": {\n    format: \"^true$|^false$\",\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  choice: {\n    format: scorm2004_regex.CMILongIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    unique: true,\n  },\n  \"fill-in\": {\n    format: scorm2004_regex.CMILangString250,\n    max: 10,\n    delimiter: \"[,]\",\n    unique: false,\n  },\n  \"long-fill-in\": {\n    format: scorm2004_regex.CMILangString4000,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  matching: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n  },\n  performance: {\n    format: \"^$|\" + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + \"|^$|\" + scorm2004_regex.CMIShortIdentifier,\n    max: 250,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n  },\n  sequencing: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    unique: false,\n  },\n  likert: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  numeric: {\n    format: scorm2004_regex.CMIDecimal,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  other: {\n    format: scorm2004_regex.CMIString4000,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n};\nexport const CorrectResponses: Responses = {\n  \"true-false\": {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: \"^true$|^false$\",\n    limit: 1,\n  },\n  choice: {\n    max: 36,\n    delimiter: \"[,]\",\n    unique: true,\n    duplicate: false,\n    format: scorm2004_regex.CMILongIdentifier,\n  },\n  \"fill-in\": {\n    max: 10,\n    delimiter: \"[,]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMILangString250cr,\n  },\n  \"long-fill-in\": {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: true,\n    format: scorm2004_regex.CMILangString4000,\n  },\n  matching: {\n    max: 36,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n  },\n  performance: {\n    max: 250,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    delimiter3: \"[:]\",\n    unique: false,\n    duplicate: false,\n    format: \"^$|\" + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + \"|^$|\" + scorm2004_regex.CMIShortIdentifier,\n  },\n  sequencing: {\n    max: 36,\n    delimiter: \"[,]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n  },\n  likert: {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    limit: 1,\n  },\n  numeric: {\n    max: 2,\n    delimiter: \"[:]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIDecimal,\n    limit: 1,\n  },\n  other: {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIString4000,\n    limit: 1,\n  },\n};\n\nexport type ResponseType = {\n  format: string;\n  max: number;\n  delimiter: string;\n  unique: boolean;\n  duplicate?: boolean;\n  format2?: string;\n  delimiter2?: string;\n  limit?: number;\n  delimiter3?: string;\n};\n\nexport type Responses = {\n  [key: string]: ResponseType;\n};\n","/**\n * Class representing SCORM 2004's `cmi.interactions` object\n */\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { CMIArray } from \"../common/array\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { CorrectResponses, LearnerResponses } from \"../../constants/response_constants\";\n\nexport class CMIInteractions extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives` Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.interactions\",\n      children: scorm2004_constants.interactions_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.interaction.n object\n */\n\nexport class CMIInteractionsObject extends BaseCMI {\n  private _id = \"\";\n  private _type = \"\";\n  private _timestamp = \"\";\n  private _weighting = \"\";\n  private _learner_response = \"\";\n  private _result = \"\";\n  private _latency = \"\";\n  private _description = \"\";\n\n  /**\n   * Constructor for cmi.interaction.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n\");\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.n.correct_responses\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  public objectives: CMIArray;\n  public correct_responses: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._id = \"\";\n    this._type = \"\";\n    this._timestamp = \"\";\n    this._weighting = \"\";\n    this._learner_response = \"\";\n    this._result = \"\";\n    this._latency = \"\";\n    this._description = \"\";\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.n.correct_responses\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _type\n   * @return {string}\n   */\n  get type(): string {\n    return this._type;\n  }\n\n  /**\n   * Setter for _type\n   * @param {string} type\n   */\n  set type(type: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".type\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (check2004ValidFormat(this._cmi_element + \".type\", type, scorm2004_regex.CMIType)) {\n        this._type = type;\n      }\n    }\n  }\n\n  /**\n   * Getter for _timestamp\n   * @return {string}\n   */\n  get timestamp(): string {\n    return this._timestamp;\n  }\n\n  /**\n   * Setter for _timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".timestamp\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".timestamp\", timestamp, scorm2004_regex.CMITime)\n      ) {\n        this._timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * Getter for _weighting\n   * @return {string}\n   */\n  get weighting(): string {\n    return this._weighting;\n  }\n\n  /**\n   * Setter for _weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".weighting\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".weighting\",\n          weighting,\n          scorm2004_regex.CMIDecimal,\n        )\n      ) {\n        this._weighting = weighting;\n      }\n    }\n  }\n\n  /**\n   * Getter for _learner_response\n   * @return {string}\n   */\n  get learner_response(): string {\n    return this._learner_response;\n  }\n\n  /**\n   * Setter for _learner_response. Does type validation to make sure response\n   * matches SCORM 2004's spec\n   * @param {string} learner_response\n   */\n  set learner_response(learner_response: string) {\n    if (this.initialized && (this._type === \"\" || this._id === \"\")) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_response\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      let nodes = [];\n      const response_type = LearnerResponses[this.type];\n\n      if (response_type) {\n        if (response_type?.delimiter) {\n          // Convert regex-style delimiter to actual character\n          const delimiter = response_type.delimiter === \"[,]\" ? \",\" : response_type.delimiter;\n          nodes = learner_response.split(delimiter);\n        } else {\n          nodes[0] = learner_response;\n        }\n\n        if (nodes.length > 0 && nodes.length <= response_type.max) {\n          const formatRegex = new RegExp(response_type.format);\n\n          for (let i = 0; i < nodes.length; i++) {\n            if (response_type?.delimiter2) {\n              // Convert regex-style delimiter to actual character\n              const delimiter2 =\n                response_type.delimiter2 === \"[.]\" ? \".\" : response_type.delimiter2;\n              const values = nodes[i].split(delimiter2);\n\n              if (values.length === 2) {\n                if (!values[0].match(formatRegex)) {\n                  throw new Scorm2004ValidationError(\n                    this._cmi_element + \".learner_response\",\n                    scorm2004_errors.TYPE_MISMATCH,\n                  );\n                } else {\n                  if (\n                    !response_type.format2 ||\n                    !values[1].match(new RegExp(response_type.format2))\n                  ) {\n                    throw new Scorm2004ValidationError(\n                      this._cmi_element + \".learner_response\",\n                      scorm2004_errors.TYPE_MISMATCH,\n                    );\n                  }\n                }\n              } else {\n                throw new Scorm2004ValidationError(\n                  this._cmi_element + \".learner_response\",\n                  scorm2004_errors.TYPE_MISMATCH,\n                );\n              }\n            } else {\n              if (!nodes[i].match(formatRegex)) {\n                throw new Scorm2004ValidationError(\n                  this._cmi_element + \".learner_response\",\n                  scorm2004_errors.TYPE_MISMATCH,\n                );\n              } else {\n                if (nodes[i] !== \"\" && response_type.unique) {\n                  for (let j = 0; j < i; j++) {\n                    if (nodes[i] === nodes[j]) {\n                      throw new Scorm2004ValidationError(\n                        this._cmi_element + \".learner_response\",\n                        scorm2004_errors.TYPE_MISMATCH,\n                      );\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          throw new Scorm2004ValidationError(\n            this._cmi_element + \".learner_response\",\n            scorm2004_errors.GENERAL_SET_FAILURE,\n          );\n        }\n\n        this._learner_response = learner_response;\n      } else {\n        throw new Scorm2004ValidationError(\n          this._cmi_element + \".learner_response\",\n          scorm2004_errors.TYPE_MISMATCH,\n        );\n      }\n    }\n  }\n\n  /**\n   * Getter for _result\n   * @return {string}\n   */\n  get result(): string {\n    return this._result;\n  }\n\n  /**\n   * Setter for _result\n   * @param {string} result\n   */\n  set result(result: string) {\n    if (check2004ValidFormat(this._cmi_element + \".result\", result, scorm2004_regex.CMIResult)) {\n      this._result = result;\n    }\n  }\n\n  /**\n   * Getter for _latency\n   * @return {string}\n   */\n  get latency(): string {\n    return this._latency;\n  }\n\n  /**\n   * Setter for _latency\n   * @param {string} latency\n   */\n  set latency(latency: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".latency\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".latency\", latency, scorm2004_regex.CMITimespan)\n      ) {\n        this._latency = latency;\n      }\n    }\n  }\n\n  /**\n   * Getter for _description\n   * @return {string}\n   */\n  get description(): string {\n    return this._description;\n  }\n\n  /**\n   * Setter for _description\n   * @param {string} description\n   */\n  set description(description: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".description\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".description\",\n          description,\n          scorm2004_regex.CMILangString250,\n          true,\n        )\n      ) {\n        this._description = description;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      type: string,\n   *      objectives: CMIArray,\n   *      timestamp: string,\n   *      correct_responses: CMIArray,\n   *      weighting: string,\n   *      learner_response: string,\n   *      result: string,\n   *      latency: string,\n   *      description: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    type: string;\n    objectives: CMIArray;\n    timestamp: string;\n    correct_responses: CMIArray;\n    weighting: string;\n    learner_response: string;\n    result: string;\n    latency: string;\n    description: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      type: this.type,\n      objectives: this.objectives,\n      timestamp: this.timestamp,\n      weighting: this.weighting,\n      learner_response: this.learner_response,\n      result: this.result,\n      latency: this.latency,\n      description: this.description,\n      correct_responses: this.correct_responses,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.objectives.n object\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  private _id = \"\";\n\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n.objectives.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._id = \"\";\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.correct_responses.n object\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  private _pattern = \"\";\n  private _parent?: CMIInteractionsObject;\n\n  /**\n   * Constructor for cmi.interactions.n.correct_responses.n\n   * @param {CMIInteractionsObject} parent - The parent interaction object\n   */\n  constructor(parent?: CMIInteractionsObject) {\n    super(\"cmi.interactions.n.correct_responses.n\");\n    this._parent = parent;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._pattern = \"\";\n  }\n\n  /**\n   * Getter for _pattern\n   * @return {string}\n   */\n  get pattern(): string {\n    return this._pattern;\n  }\n\n  /**\n   * Setter for _pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern: string) {\n    // First do basic format validation\n    if (\n      check2004ValidFormat(this._cmi_element + \".pattern\", pattern, scorm2004_regex.CMIFeedback)\n    ) {\n      // If we have a parent interaction, validate the pattern against the interaction type\n      if (this._parent && this._parent.type) {\n        const interactionType = this._parent.type;\n        const response = CorrectResponses[interactionType];\n\n        if (response) {\n          // Validate the pattern against the interaction type\n          let isValid = true;\n          let nodes = [];\n\n          if (response?.delimiter) {\n            nodes = String(pattern).split(response.delimiter);\n          } else {\n            nodes[0] = pattern;\n          }\n\n          if (nodes.length > 0 && nodes.length <= response.max) {\n            const formatRegex = new RegExp(response.format);\n\n            for (let i = 0; i < nodes.length && isValid; i++) {\n              if (response?.delimiter2) {\n                const values = nodes[i].split(response.delimiter2);\n                if (values.length === 2) {\n                  const matches = values[0].match(formatRegex);\n                  if (!matches) {\n                    isValid = false;\n                  } else if (!response.format2 || !values[1].match(new RegExp(response.format2))) {\n                    isValid = false;\n                  }\n                } else {\n                  isValid = false;\n                }\n              } else {\n                const matches = nodes[i].match(formatRegex);\n                if (\n                  (!matches && pattern !== \"\") ||\n                  (!matches && interactionType === \"true-false\")\n                ) {\n                  isValid = false;\n                }\n              }\n            }\n          } else if (nodes.length > response.max) {\n            isValid = false;\n          }\n\n          if (!isValid) {\n            throw new Scorm2004ValidationError(\n              this._cmi_element + \".pattern\",\n              scorm2004_errors.TYPE_MISMATCH,\n            );\n          }\n        }\n      }\n\n      this._pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON cmi.interactions.n.correct_responses.n object\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    pattern: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      pattern: this.pattern,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { ValidationError } from \"../exceptions\";\nimport { scorm12_constants } from \"../constants/api_constants\";\n\nconst scorm12_errors = scorm12_constants.error_descriptions;\n\n/**\n * SCORM 1.2 Validation Error\n */\nexport class Scorm12ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm12_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm12_errors[String(errorCode)].basicMessage,\n        scorm12_errors[String(errorCode)].detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm12_errors[\"101\"].basicMessage,\n        scorm12_errors[\"101\"].detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm12ValidationError.prototype);\n  }\n}\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm12_errors.TYPE_MISMATCH,\n    Scorm12ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidRange(\n  CMIElement: string,\n  value: any,\n  rangePattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  if (!allowEmptyString && value === \"\") {\n    throw new Scorm12ValidationError(CMIElement, scorm12_errors.VALUE_OUT_OF_RANGE);\n  }\n\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm12_errors.VALUE_OUT_OF_RANGE,\n    Scorm12ValidationError,\n  );\n}\n","import { BaseScormValidationError } from \"../exceptions\";\nimport { checkValidFormat, checkValidRange } from \"../cmi/common/validation\";\nimport { check12ValidFormat, check12ValidRange } from \"../cmi/scorm12/validation\";\nimport { scorm12_regex } from \"../constants/regex\";\nimport { scorm12_errors } from \"../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../exceptions/scorm12_exceptions\";\n\n/**\n * Service for validating CMI data model properties\n */\nexport class ValidationService {\n  /**\n   * Validates a score property (raw, min, max)\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @param {string} decimalRegex - The regex pattern for decimal validation\n   * @param {string | false} scoreRange - The range pattern for score validation, or false if no range validation is needed\n   * @param {number} invalidTypeCode - The error code for invalid type\n   * @param {number} invalidRangeCode - The error code for invalid range\n   * @param {typeof BaseScormValidationError} errorClass - The error class to use for validation errors\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScore(\n    CMIElement: string,\n    value: string,\n    decimalRegex: string,\n    scoreRange: string | false,\n    invalidTypeCode: number,\n    invalidRangeCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean {\n    return (\n      checkValidFormat(CMIElement, value, decimalRegex, invalidTypeCode, errorClass) &&\n      (!scoreRange || checkValidRange(CMIElement, value, scoreRange, invalidRangeCode, errorClass))\n    );\n    // This line should never be reached due to exceptions being thrown\n  }\n\n  /**\n   * Validates a SCORM 1.2 audio property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Audio(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.audio_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 language property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Language(CMIElement: string, value: string): boolean {\n    return check12ValidFormat(CMIElement, value, scorm12_regex.CMIString256);\n  }\n\n  /**\n   * Validates a SCORM 1.2 speed property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Speed(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.speed_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 text property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Text(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.text_range)\n    );\n  }\n\n  /**\n   * Validates if a property is read-only\n   *\n   * @param {string} CMIElement\n   * @param {boolean} initialized - Whether the object is initialized\n   * @throws {BaseScormValidationError} - Throws an error if the object is initialized\n   */\n  validateReadOnly(CMIElement: string, initialized: boolean): void {\n    if (initialized) {\n      throw new Scorm12ValidationError(CMIElement, scorm12_errors.READ_ONLY_ELEMENT);\n    }\n  }\n}\n\n// Export a singleton instance of the ValidationService\nexport const validationService = new ValidationService();\n","import { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"./base_cmi\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { validationService } from \"../../services/ValidationService\";\n\n/**\n * Base class for cmi *.score objects\n */\nexport class CMIScore extends BaseCMI {\n  private readonly __children: string;\n  private readonly __score_range: string | false;\n  private readonly __invalid_error_code: number;\n  private readonly __invalid_type_code: number;\n  private readonly __invalid_range_code: number;\n  private readonly __decimal_regex: string;\n  private readonly __error_class: typeof BaseScormValidationError;\n  protected _raw = \"\";\n  protected _min = \"\";\n  protected _max: string;\n\n  /**\n   * Constructor for *.score\n   * @param {\n   *     score_children: string,\n   *     score_range: string,\n   *     max: string,\n   *     invalidErrorCode: number,\n   *     invalidTypeCode: number,\n   *     invalidRangeCode: number,\n   *     decimalRegex: string,\n   *     errorClass: typeof BaseScormValidationError\n   * } params\n   */\n  constructor(params: {\n    CMIElement: string;\n    score_children?: string;\n    score_range?: string;\n    max?: string;\n    invalidErrorCode?: number;\n    invalidTypeCode?: number;\n    invalidRangeCode?: number;\n    decimalRegex?: string;\n    errorClass: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n\n    this.__children = params.score_children || scorm12_constants.score_children;\n    this.__score_range = !params.score_range ? false : scorm12_regex.score_range;\n    this._max = params.max || params.max === \"\" ? params.max : \"100\";\n    this.__invalid_error_code = params.invalidErrorCode || scorm12_errors.INVALID_SET_VALUE;\n    this.__invalid_type_code = params.invalidTypeCode || scorm12_errors.TYPE_MISMATCH;\n    this.__invalid_range_code = params.invalidRangeCode || scorm12_errors.VALUE_OUT_OF_RANGE;\n    this.__decimal_regex = params.decimalRegex || scorm12_regex.CMIDecimal;\n    this.__error_class = params.errorClass;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this.__error_class(this._cmi_element + \"._children\", this.__invalid_error_code);\n  }\n\n  /**\n   * Getter for _raw\n   * @return {string}\n   */\n  get raw(): string {\n    return this._raw;\n  }\n\n  /**\n   * Setter for _raw\n   * @param {string} raw\n   */\n  set raw(raw: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".raw\",\n        raw,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._raw = raw;\n    }\n  }\n\n  /**\n   * Getter for _min\n   * @return {string}\n   */\n  get min(): string {\n    return this._min;\n  }\n\n  /**\n   * Setter for _min\n   * @param {string} min\n   */\n  set min(min: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".min\",\n        min,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._min = min;\n    }\n  }\n\n  /**\n   * Getter for _max\n   * @return {string}\n   */\n  get max(): string {\n    return this._max;\n  }\n\n  /**\n   * Setter for _max\n   * @param {string} max\n   */\n  set max(max: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".max\",\n        max,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._max = max;\n    }\n  }\n\n  /**\n   * toJSON for *.score\n   * @return {\n   *    {\n   *      min: string,\n   *      max: string,\n   *      raw: string\n   *    }\n   *    }\n   */\n  toJSON(): {\n    min: string;\n    max: string;\n    raw: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","/**\n * Class for SCORM 2004's cmi *.score object\n */\nimport { CMIScore } from \"../common/score\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\n\nexport class Scorm2004CMIScore extends CMIScore {\n  private _scaled = \"\";\n\n  /**\n   * Constructor for cmi *.score\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.score\",\n      score_children: scorm2004_constants.score_children,\n      max: \"\",\n      invalidErrorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      invalidTypeCode: scorm2004_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm2004_errors.VALUE_OUT_OF_RANGE,\n      decimalRegex: scorm2004_regex.CMIDecimal,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n    this._scaled = \"\";\n    this._raw = \"\";\n    this._min = \"\";\n    this._max = \"\";\n  }\n\n  /**\n   * Getter for _scaled\n   * @return {string}\n   */\n  get scaled(): string {\n    return this._scaled;\n  }\n\n  /**\n   * Setter for _scaled\n   * @param {string} scaled\n   */\n  set scaled(scaled: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".scaled\", scaled, scorm2004_regex.CMIDecimal) &&\n      check2004ValidRange(this._cmi_element + \".scaled\", scaled, scorm2004_regex.scaled_range)\n    ) {\n      this._scaled = scaled;\n    }\n  }\n\n  /**\n   * toJSON for cmi *.score\n   *\n   * @return {\n   *    {\n   *      scaled: string,\n   *      raw: string,\n   *      min: string,\n   *      max: string\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    scaled: string;\n    raw: string;\n    min: string;\n    max: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      scaled: this.scaled,\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_lms object\n * @extends CMIArray\n */\nexport class CMICommentsFromLMS extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_lms Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.comments_from_lms\",\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner object\n */\n\nexport class CMICommentsFromLearner extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_learner Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.comments_from_learner\",\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner.n and cmi.comments_from_lms.n object\n */\n\nexport class CMICommentsObject extends BaseCMI {\n  private _comment = \"\";\n  private _location = \"\";\n  private _timestamp = \"\";\n  private readonly _readOnlyAfterInit: boolean;\n\n  /**\n   * Constructor for cmi.comments_from_learner.n and cmi.comments_from_lms.n\n   * @param {boolean} readOnlyAfterInit\n   */\n  constructor(readOnlyAfterInit: boolean = false) {\n    super(\"cmi.comments_from_learner.n\");\n    this._comment = \"\";\n    this._location = \"\";\n    this._timestamp = \"\";\n    this._readOnlyAfterInit = readOnlyAfterInit;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _comment\n   * @return {string}\n   */\n  get comment(): string {\n    return this._comment;\n  }\n\n  /**\n   * Setter for _comment\n   * @param {string} comment\n   */\n  set comment(comment: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".comment\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".comment\",\n          comment,\n          scorm2004_regex.CMILangString4000,\n          true,\n        )\n      ) {\n        this._comment = comment;\n      }\n    }\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".location\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".location\",\n          location,\n          scorm2004_regex.CMIString250,\n        )\n      ) {\n        this._location = location;\n      }\n    }\n  }\n\n  /**\n   * Getter for _timestamp\n   * @return {string}\n   */\n  get timestamp(): string {\n    return this._timestamp;\n  }\n\n  /**\n   * Setter for _timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".timestamp\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".timestamp\", timestamp, scorm2004_regex.CMITime)\n      ) {\n        this._timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.comments_from_learner.n object\n   * @return {\n   *    {\n   *      comment: string,\n   *      location: string,\n   *      timestamp: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    comment: string;\n    location: string;\n    timestamp: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      comment: this.comment,\n      location: this.location,\n      timestamp: this.timestamp,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { Scorm2004CMIScore } from \"./score\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\n\n/**\n * Class representing SCORM 2004's `cmi.objectives` object\n * @extends CMIArray\n */\nexport class CMIObjectives extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives` Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.objectives\",\n      children: scorm2004_constants.objectives_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n\n  /**\n   * Find an objective by its ID\n   */\n  public findObjectiveById(id: string): CMIObjectivesObject | undefined {\n    return this.childArray.find((objective) => objective.id === id);\n  }\n\n  /**\n   * Find objective by its index\n   */\n  public findObjectiveByIndex(index: number): CMIObjectivesObject {\n    return this.childArray[index];\n  }\n\n  /**\n   * Set an objective at the given index\n   */\n  public setObjectiveByIndex(index: number, objective: CMIObjectivesObject) {\n    this.childArray[index] = objective;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.objectives.n object\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  private _id = \"\";\n  private _success_status = \"unknown\";\n  private _completion_status = \"unknown\";\n  private _progress_measure = \"\";\n  private _description = \"\";\n\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super(\"cmi.objectives.n\");\n    this.score = new Scorm2004CMIScore();\n  }\n\n  override reset() {\n    this._initialized = false;\n  }\n\n  public score: Scorm2004CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this._success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".success_status\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".success_status\",\n          success_status,\n          scorm2004_regex.CMISStatus,\n        )\n      ) {\n        this._success_status = success_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this._completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".completion_status\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".completion_status\",\n          completion_status,\n          scorm2004_regex.CMICStatus,\n        )\n      ) {\n        this._completion_status = completion_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this._progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".progress_measure\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".progress_measure\",\n          progress_measure,\n          scorm2004_regex.CMIDecimal,\n        ) &&\n        check2004ValidRange(\n          this._cmi_element + \".progress_measure\",\n          progress_measure,\n          scorm2004_regex.progress_range,\n        )\n      ) {\n        this._progress_measure = progress_measure;\n      }\n    }\n  }\n\n  /**\n   * Getter for _description\n   * @return {string}\n   */\n  get description(): string {\n    return this._description;\n  }\n\n  /**\n   * Setter for _description\n   * @param {string} description\n   */\n  set description(description: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".description\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".description\",\n          description,\n          scorm2004_regex.CMILangString250,\n          true,\n        )\n      ) {\n        this._description = description;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      success_status: string,\n   *      completion_status: string,\n   *      progress_measure: string,\n   *      description: string,\n   *      score: Scorm2004CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    success_status: string;\n    completion_status: string;\n    progress_measure: string;\n    description: string;\n    score: Scorm2004CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      success_status: this.success_status,\n      completion_status: this.completion_status,\n      progress_measure: this.progress_measure,\n      description: this.description,\n      score: this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","/**\n * Class representing metadata properties for SCORM 2004's cmi object\n */\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing metadata properties for SCORM 2004's cmi object\n */\nexport class CMIMetadata extends BaseCMI {\n  private __version = \"1.0\";\n  private __children = scorm2004_constants.cmi_children;\n\n  /**\n   * Constructor for CMIMetadata\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   */\n  get _version(): string {\n    return this.__version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version: string) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._version\",\n      scorm2004_errors.READ_ONLY_ELEMENT,\n    );\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {number} _children\n   */\n  set _children(_children: number) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._children\",\n      scorm2004_errors.READ_ONLY_ELEMENT,\n    );\n  }\n\n  /**\n   * Reset the metadata properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // No need to reset __version and __children as they are constants\n  }\n}\n","/**\n * Class representing learner properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing learner properties for SCORM 2004's cmi object\n */\nexport class CMILearner extends BaseCMI {\n  private _learner_id = \"\";\n  private _learner_name = \"\";\n\n  /**\n   * Constructor for CMILearner\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _learner_id\n   * @return {string}\n   */\n  get learner_id(): string {\n    return this._learner_id;\n  }\n\n  /**\n   * Setter for _learner_id. Can only be called before initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_id\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._learner_id = learner_id;\n    }\n  }\n\n  /**\n   * Getter for _learner_name\n   * @return {string}\n   */\n  get learner_name(): string {\n    return this._learner_name;\n  }\n\n  /**\n   * Setter for _learner_name. Can only be called before initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_name\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._learner_name = learner_name;\n    }\n  }\n\n  /**\n   * Reset the learner properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset learner_id and learner_name as they are read-only after initialization\n  }\n}\n","/**\n * Class representing status properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\n\n/**\n * Class representing status properties for SCORM 2004's cmi object\n */\nexport class CMIStatus extends BaseCMI {\n  private _completion_status = \"unknown\";\n  private _success_status = \"unknown\";\n  private _progress_measure = \"\";\n\n  /**\n   * Constructor for CMIStatus\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this._completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".completion_status\",\n        completion_status,\n        scorm2004_regex.CMICStatus,\n      )\n    ) {\n      this._completion_status = completion_status;\n    }\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this._success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".success_status\",\n        success_status,\n        scorm2004_regex.CMISStatus,\n      )\n    ) {\n      this._success_status = success_status;\n    }\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this._progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".progress_measure\",\n        progress_measure,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".progress_measure\",\n        progress_measure,\n        scorm2004_regex.progress_range,\n      )\n    ) {\n      this._progress_measure = progress_measure;\n    }\n  }\n\n  /**\n   * Reset the status properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._completion_status = \"unknown\";\n    this._success_status = \"unknown\";\n    this._progress_measure = \"\";\n  }\n}\n","/**\n * Class representing session properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\nimport * as Util from \"../../utilities\";\n\n/**\n * Class representing session properties for SCORM 2004's cmi object\n */\nexport class CMISession extends BaseCMI {\n  private _entry = \"\";\n  private _exit = \"\";\n  private _session_time = \"PT0H0M0S\";\n  private _total_time = \"\";\n\n  /**\n   * Constructor for CMISession\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this._entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".entry\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._entry = entry;\n    }\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    if (!this.jsonString) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exit\",\n        scorm2004_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    if (check2004ValidFormat(this._cmi_element + \".exit\", exit, scorm2004_regex.CMIExit, true)) {\n      this._exit = exit;\n    }\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    if (!this.jsonString) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".session_time\",\n        scorm2004_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".session_time\",\n        session_time,\n        scorm2004_regex.CMITimespan,\n      )\n    ) {\n      this._session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this._total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".total_time\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._total_time = total_time;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime(): string {\n    let sessionTime = this._session_time;\n    const startTime = this.start_time;\n\n    if (typeof startTime !== \"undefined\" && startTime !== null) {\n      const seconds = new Date().getTime() - startTime;\n      sessionTime = Util.getSecondsAsISODuration(seconds / 1000);\n    }\n\n    return Util.addTwoDurations(this._total_time, sessionTime, scorm2004_regex.CMITimespan);\n  }\n\n  /**\n   * Reset the session properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._entry = \"\";\n    this._exit = \"\";\n    this._session_time = \"PT0H0M0S\";\n    // Don't reset total_time as it's read-only after initialization\n  }\n}\n","/**\n * Class representing content properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\n\n/**\n * Class representing content properties for SCORM 2004's cmi object\n */\nexport class CMIContent extends BaseCMI {\n  private _location = \"\";\n  private _launch_data = \"\";\n  private _suspend_data = \"\";\n\n  /**\n   * Constructor for CMIContent\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".location\", location, scorm2004_regex.CMIString1000)\n    ) {\n      this._location = location;\n    }\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this._launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".launch_data\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._launch_data = launch_data;\n    }\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this._suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".suspend_data\",\n        suspend_data,\n        scorm2004_regex.CMIString64000,\n        true,\n      )\n    ) {\n      this._suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Reset the content properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._location = \"\";\n    // Don't reset launch_data as it's read-only after initialization\n    this._suspend_data = \"\";\n  }\n}\n","/**\n * Class representing settings properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing settings properties for SCORM 2004's cmi object\n */\nexport class CMISettings extends BaseCMI {\n  private _credit = \"credit\";\n  private _mode = \"normal\";\n  private _time_limit_action = \"continue,no message\";\n  private _max_time_allowed = \"\";\n\n  /**\n   * Constructor for CMISettings\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this._credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".credit\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._credit = credit;\n    }\n  }\n\n  /**\n   * Getter for _mode\n   * @return {string}\n   */\n  get mode(): string {\n    return this._mode;\n  }\n\n  /**\n   * Setter for _mode. Can only be called before initialization.\n   * @param {string} mode\n   */\n  set mode(mode: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".mode\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._mode = mode;\n    }\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this._time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".time_limit_action\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._time_limit_action = time_limit_action;\n    }\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this._max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".max_time_allowed\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._max_time_allowed = max_time_allowed;\n    }\n  }\n\n  /**\n   * Reset the settings properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset these properties as they are read-only after initialization\n  }\n}\n","/**\n * Class representing threshold properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing threshold properties for SCORM 2004's cmi object\n */\nexport class CMIThresholds extends BaseCMI {\n  private _scaled_passing_score = \"\";\n  private _completion_threshold = \"\";\n\n  /**\n   * Constructor for CMIThresholds\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score(): string {\n    return this._scaled_passing_score;\n  }\n\n  /**\n   * Setter for _scaled_passing_score. Can only be called before initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".scaled_passing_score\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._scaled_passing_score = scaled_passing_score;\n    }\n  }\n\n  /**\n   * Getter for _completion_threshold\n   * @return {string}\n   */\n  get completion_threshold(): string {\n    return this._completion_threshold;\n  }\n\n  /**\n   * Setter for _completion_threshold. Can only be called before initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".completion_threshold\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._completion_threshold = completion_threshold;\n    }\n  }\n\n  /**\n   * Reset the threshold properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset these properties as they are read-only after initialization\n  }\n}\n","import { BaseRootCMI } from \"../common/base_cmi\";\nimport { CMILearnerPreference } from \"./learner_preference\";\nimport { CMIInteractions } from \"./interactions\";\nimport { Scorm2004CMIScore } from \"./score\";\nimport { CMICommentsFromLearner, CMICommentsFromLMS } from \"./comments\";\nimport { CMIObjectives } from \"./objectives\";\nimport { CMIMetadata } from \"./metadata\";\nimport { CMILearner } from \"./learner\";\nimport { CMIStatus } from \"./status\";\nimport { CMISession } from \"./session\";\nimport { CMIContent } from \"./content\";\nimport { CMISettings } from \"./settings\";\nimport { CMIThresholds } from \"./thresholds\";\n\n/**\n * Class representing cmi object for SCORM 2004\n */\nexport class CMI extends BaseRootCMI {\n  /**\n   * Constructor for the SCORM 2004 cmi object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean = false) {\n    super(\"cmi\");\n    this.metadata = new CMIMetadata();\n    this.learner = new CMILearner();\n    this.status = new CMIStatus();\n    this.session = new CMISession();\n    this.content = new CMIContent();\n    this.settings = new CMISettings();\n    this.thresholds = new CMIThresholds();\n    this.learner_preference = new CMILearnerPreference();\n    this.score = new Scorm2004CMIScore();\n    this.comments_from_learner = new CMICommentsFromLearner();\n    this.comments_from_lms = new CMICommentsFromLMS();\n    this.interactions = new CMIInteractions();\n    this.objectives = new CMIObjectives();\n    if (initialized) this.initialize();\n  }\n\n  // New component classes\n  private metadata: CMIMetadata;\n  private learner: CMILearner;\n  private status: CMIStatus;\n  private session: CMISession;\n  private content: CMIContent;\n  private settings: CMISettings;\n  private thresholds: CMIThresholds;\n\n  // Original complex objects\n  public learner_preference: CMILearnerPreference;\n  public score: Scorm2004CMIScore;\n  public comments_from_learner: CMICommentsFromLearner;\n  public comments_from_lms: CMICommentsFromLMS;\n  public interactions: CMIInteractions;\n  public objectives: CMIObjectives;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    // Initialize new component classes\n    this.metadata?.initialize();\n    this.learner?.initialize();\n    this.status?.initialize();\n    this.session?.initialize();\n    this.content?.initialize();\n    this.settings?.initialize();\n    this.thresholds?.initialize();\n\n    // Initialize original complex objects\n    this.learner_preference?.initialize();\n    this.score?.initialize();\n    this.comments_from_learner?.initialize();\n    this.comments_from_lms?.initialize();\n    this.interactions?.initialize();\n    this.objectives?.initialize();\n  }\n\n  /**\n   * Called when API is moving to another SCO\n   */\n  reset() {\n    this._initialized = false;\n\n    // Reset new component classes\n    this.metadata?.reset();\n    this.learner?.reset();\n    this.status?.reset();\n    this.session?.reset();\n    this.content?.reset();\n    this.settings?.reset();\n    this.thresholds?.reset();\n\n    // Reset original complex objects\n    this.objectives?.reset(false);\n    this.interactions?.reset(true);\n    this.score?.reset();\n    this.comments_from_learner?.reset();\n    this.comments_from_lms?.reset();\n    this.learner_preference?.reset();\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   * @private\n   */\n  get _version(): string {\n    return this.metadata._version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   * @private\n   */\n  set _version(_version: string) {\n    this.metadata._version = _version;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.metadata._children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {number} _children\n   * @private\n   */\n  set _children(_children: number) {\n    this.metadata._children = _children;\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this.status.completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    this.status.completion_status = completion_status;\n  }\n\n  /**\n   * Getter for _completion_threshold\n   * @return {string}\n   */\n  get completion_threshold(): string {\n    return this.thresholds.completion_threshold;\n  }\n\n  /**\n   * Setter for _completion_threshold. Can only be called before initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold: string) {\n    this.thresholds.completion_threshold = completion_threshold;\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this.settings.credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    this.settings.credit = credit;\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this.session.entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    this.session.entry = entry;\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    this.session.jsonString = this.jsonString;\n    return this.session.exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    this.session.exit = exit;\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this.content.launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    this.content.launch_data = launch_data;\n  }\n\n  /**\n   * Getter for _learner_id\n   * @return {string}\n   */\n  get learner_id(): string {\n    return this.learner.learner_id;\n  }\n\n  /**\n   * Setter for _learner_id. Can only be called before initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id: string) {\n    this.learner.learner_id = learner_id;\n  }\n\n  /**\n   * Getter for _learner_name\n   * @return {string}\n   */\n  get learner_name(): string {\n    return this.learner.learner_name;\n  }\n\n  /**\n   * Setter for _learner_name. Can only be called before initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name: string) {\n    this.learner.learner_name = learner_name;\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this.content.location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    this.content.location = location;\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this.settings.max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    this.settings.max_time_allowed = max_time_allowed;\n  }\n\n  /**\n   * Getter for _mode\n   * @return {string}\n   */\n  get mode(): string {\n    return this.settings.mode;\n  }\n\n  /**\n   * Setter for _mode. Can only be called before initialization.\n   * @param {string} mode\n   */\n  set mode(mode: string) {\n    this.settings.mode = mode;\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this.status.progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    this.status.progress_measure = progress_measure;\n  }\n\n  /**\n   * Getter for _scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score(): string {\n    return this.thresholds.scaled_passing_score;\n  }\n\n  /**\n   * Setter for _scaled_passing_score. Can only be called before initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score: string) {\n    this.thresholds.scaled_passing_score = scaled_passing_score;\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    this.session.jsonString = this.jsonString;\n    return this.session.session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    this.session.session_time = session_time;\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this.status.success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    this.status.success_status = success_status;\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this.content.suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    this.content.suspend_data = suspend_data;\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this.settings.time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    this.settings.time_limit_action = time_limit_action;\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this.session.total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    this.session.total_time = total_time;\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime(): string {\n    return this.session.getCurrentTotalTime();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      comments_from_learner: CMICommentsFromLearner,\n   *      comments_from_lms: CMICommentsFromLMS,\n   *      completion_status: string,\n   *      completion_threshold: string,\n   *      credit: string,\n   *      entry: string,\n   *      exit: string,\n   *      interactions: CMIInteractions,\n   *      launch_data: string,\n   *      learner_id: string,\n   *      learner_name: string,\n   *      learner_preference: CMILearnerPreference,\n   *      location: string,\n   *      max_time_allowed: string,\n   *      mode: string,\n   *      objectives: CMIObjectives,\n   *      progress_measure: string,\n   *      scaled_passing_score: string,\n   *      score: Scorm2004CMIScore,\n   *      session_time: string,\n   *      success_status: string,\n   *      suspend_data: string,\n   *      time_limit_action: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    comments_from_learner: CMICommentsFromLearner;\n    comments_from_lms: CMICommentsFromLMS;\n    completion_status: string;\n    completion_threshold: string;\n    credit: string;\n    entry: string;\n    exit: string;\n    interactions: CMIInteractions;\n    launch_data: string;\n    learner_id: string;\n    learner_name: string;\n    learner_preference: CMILearnerPreference;\n    location: string;\n    max_time_allowed: string;\n    mode: string;\n    objectives: CMIObjectives;\n    progress_measure: string;\n    scaled_passing_score: string;\n    score: Scorm2004CMIScore;\n    session_time: string;\n    success_status: string;\n    suspend_data: string;\n    time_limit_action: string;\n  } {\n    this.jsonString = true;\n\n    // Set jsonString flag on component classes that need it\n    this.session.jsonString = true;\n\n    const result = {\n      comments_from_learner: this.comments_from_learner,\n      comments_from_lms: this.comments_from_lms,\n      completion_status: this.completion_status,\n      completion_threshold: this.completion_threshold,\n      credit: this.credit,\n      entry: this.entry,\n      exit: this.exit,\n      interactions: this.interactions,\n      launch_data: this.launch_data,\n      learner_id: this.learner_id,\n      learner_name: this.learner_name,\n      learner_preference: this.learner_preference,\n      location: this.location,\n      max_time_allowed: this.max_time_allowed,\n      mode: this.mode,\n      objectives: this.objectives,\n      progress_measure: this.progress_measure,\n      scaled_passing_score: this.scaled_passing_score,\n      score: this.score,\n      session_time: this.session_time,\n      success_status: this.success_status,\n      suspend_data: this.suspend_data,\n      time_limit_action: this.time_limit_action,\n    };\n\n    // Clean up jsonString flags\n    delete this.jsonString;\n    delete this.session.jsonString;\n\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { NAVBoolean } from \"../../constants/enums\";\nimport { CMIArray } from \"../common/array\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Sequencing } from \"./sequencing/sequencing\";\n\n/**\n * Class representing SCORM 2004's adl object\n */\nexport class ADL extends BaseCMI {\n  /**\n   * Constructor for adl\n   */\n  constructor() {\n    super(\"adl\");\n    this.nav = new ADLNav();\n    this.data = new ADLData();\n  }\n\n  public nav: ADLNav;\n  public data = new ADLData();\n  private _sequencing: Sequencing | null = null;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.nav?.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this.nav?.reset();\n  }\n\n  /**\n   * Getter for sequencing\n   * @return {Sequencing | null}\n   */\n  get sequencing(): Sequencing | null {\n    return this._sequencing;\n  }\n\n  /**\n   * Setter for sequencing\n   * @param {Sequencing | null} sequencing\n   */\n  set sequencing(sequencing: Sequencing | null) {\n    this._sequencing = sequencing;\n    if (sequencing) {\n      sequencing.adlNav = this.nav;\n      this.nav.sequencing = sequencing;\n    }\n  }\n\n  /**\n   * toJSON for adl\n   * @return {\n   *    {\n   *      nav: ADLNav,\n   *      data: ADLData\n   *    }\n   *  }\n   */\n  toJSON(): {\n    nav: ADLNav;\n    data: ADLData;\n  } {\n    this.jsonString = true;\n    const result = {\n      nav: this.nav,\n      data: this.data,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's `adl.nav` object\n */\n\nexport class ADLNav extends BaseCMI {\n  private _request = \"_none_\";\n  private _sequencing: Sequencing | null = null;\n\n  /**\n   * Constructor for `adl.nav`\n   */\n  constructor() {\n    super(\"adl.nav\");\n    this.request_valid = new ADLNavRequestValid();\n  }\n\n  public request_valid: ADLNavRequestValid;\n\n  /**\n   * Getter for sequencing\n   * @return {Sequencing | null}\n   */\n  get sequencing(): Sequencing | null {\n    return this._sequencing;\n  }\n\n  /**\n   * Setter for sequencing\n   * @param {Sequencing | null} sequencing\n   */\n  set sequencing(sequencing: Sequencing | null) {\n    this._sequencing = sequencing;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.request_valid?.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._request = \"_none_\";\n    this._sequencing = null;\n    this.request_valid?.reset();\n  }\n\n  /**\n   * Getter for _request\n   * @return {string}\n   */\n  get request(): string {\n    return this._request;\n  }\n\n  /**\n   * Setter for _request\n   * @param {string} request\n   */\n  set request(request: string) {\n    if (check2004ValidFormat(this._cmi_element + \".request\", request, scorm2004_regex.NAVEvent)) {\n      // Only process if the request is different from the current request\n      if (this._request !== request) {\n        this._request = request;\n\n        // Process the navigation request using the sequencing implementation\n        if (this._sequencing) {\n          this._sequencing.processNavigationRequest(request);\n        }\n      }\n    }\n  }\n\n  /**\n   * toJSON for adl.nav\n   *\n   * @return {\n   *    {\n   *      request: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    request: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      request: this.request,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's `adl.data` object\n */\nexport class ADLData extends CMIArray {\n  constructor() {\n    super({\n      CMIElement: \"adl.data\",\n      children: scorm2004_constants.adl_data_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's adl.data.n object\n */\nexport class ADLDataObject extends BaseCMI {\n  private _id = \"\";\n  private _store = \"\";\n\n  constructor() {\n    super(\"adl.data.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _store\n   * @return {string}\n   */\n  get store(): string {\n    return this._store;\n  }\n\n  /**\n   * Setter for _store\n   * @param {string} store\n   */\n  set store(store: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".store\", store, scorm2004_regex.CMILangString4000)\n    ) {\n      this._store = store;\n    }\n  }\n\n  /**\n   * toJSON for adl.data.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      store: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    store: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this._id,\n      store: this._store,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl.nav.request_valid object\n */\n\nexport class ADLNavRequestValid extends BaseCMI {\n  private _continue = \"unknown\";\n  private _previous = \"unknown\";\n  private _choice: {\n    [key: string]: NAVBoolean;\n  } = {};\n  private _jump: {\n    [key: string]: NAVBoolean;\n  } = {};\n\n  /**\n   * Constructor for adl.nav.request_valid\n   */\n  constructor() {\n    super(\"adl.nav.request_valid\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._continue = \"unknown\";\n    this._previous = \"unknown\";\n  }\n\n  /**\n   * Getter for _continue\n   * @return {string}\n   */\n  get continue(): string {\n    return this._continue;\n  }\n\n  /**\n   * Setter for _continue. Just throws an error.\n   * @param {string} _continue\n   */\n  set continue(_continue: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".continue\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".continue\", _continue, scorm2004_regex.NAVBoolean)\n    ) {\n      this._continue = _continue;\n    }\n  }\n\n  /**\n   * Getter for _previous\n   * @return {string}\n   */\n  get previous(): string {\n    return this._previous;\n  }\n\n  /**\n   * Setter for _previous. Just throws an error.\n   * @param {string} _previous\n   */\n  set previous(_previous: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".previous\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".previous\", _previous, scorm2004_regex.NAVBoolean)\n    ) {\n      this._previous = _previous;\n    }\n  }\n\n  /**\n   * Getter for _choice\n   * @return {{ [key: string]: NAVBoolean }}\n   */\n  get choice(): { [key: string]: NAVBoolean } {\n    return this._choice;\n  }\n\n  /**\n   * Setter for _choice\n   * @param {{ [key: string]: string }} choice\n   */\n  set choice(choice: { [key: string]: string }) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".choice\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (typeof choice !== \"object\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".choice\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    for (const key in choice) {\n      if ({}.hasOwnProperty.call(choice, key)) {\n        if (\n          check2004ValidFormat(\n            this._cmi_element + \".choice.\" + key,\n            choice[key],\n            scorm2004_regex.NAVBoolean,\n          ) &&\n          check2004ValidFormat(this._cmi_element + \".choice.\" + key, key, scorm2004_regex.NAVTarget)\n        ) {\n          // Convert string value to NAVBoolean enum value\n          const value = choice[key];\n          if (value === \"true\") {\n            this._choice[key] = NAVBoolean.TRUE;\n          } else if (value === \"false\") {\n            this._choice[key] = NAVBoolean.FALSE;\n          } else if (value === \"unknown\") {\n            this._choice[key] = NAVBoolean.UNKNOWN;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Getter for _jump\n   * @return {{ [key: string]: NAVBoolean }}\n   */\n  get jump(): { [key: string]: NAVBoolean } {\n    return this._jump;\n  }\n\n  /**\n   * Setter for _jump\n   * @param {{ [key: string]: string }} jump\n   */\n  set jump(jump: { [key: string]: string }) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".jump\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (typeof jump !== \"object\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".jump\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    for (const key in jump) {\n      if ({}.hasOwnProperty.call(jump, key)) {\n        if (\n          check2004ValidFormat(\n            this._cmi_element + \".jump.\" + key,\n            jump[key],\n            scorm2004_regex.NAVBoolean,\n          ) &&\n          check2004ValidFormat(this._cmi_element + \".jump.\" + key, key, scorm2004_regex.NAVTarget)\n        ) {\n          // Convert string value to NAVBoolean enum value\n          const value = jump[key];\n          if (value === \"true\") {\n            this._jump[key] = NAVBoolean.TRUE;\n          } else if (value === \"false\") {\n            this._jump[key] = NAVBoolean.FALSE;\n          } else if (value === \"unknown\") {\n            this._jump[key] = NAVBoolean.UNKNOWN;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * toJSON for adl.nav.request_valid\n   *\n   * @return {\n   *    {\n   *      previous: string,\n   *      continue: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    previous: string;\n    continue: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      previous: this._previous,\n      continue: this._continue,\n      choice: this._choice,\n      jump: this._jump,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Enum for rule condition operators\n */\nexport enum RuleConditionOperator {\n  NOT = \"not\",\n  AND = \"and\",\n  OR = \"or\",\n}\n\n/**\n * Enum for rule condition types\n */\nexport enum RuleConditionType {\n  SATISFIED = \"satisfied\",\n  OBJECTIVE_STATUS_KNOWN = \"objectiveStatusKnown\",\n  OBJECTIVE_MEASURE_KNOWN = \"objectiveMeasureKnown\",\n  OBJECTIVE_MEASURE_GREATER_THAN = \"objectiveMeasureGreaterThan\",\n  OBJECTIVE_MEASURE_LESS_THAN = \"objectiveMeasureLessThan\",\n  COMPLETED = \"completed\",\n  PROGRESS_KNOWN = \"progressKnown\",\n  ATTEMPTED = \"attempted\",\n  ATTEMPT_LIMIT_EXCEEDED = \"attemptLimitExceeded\",\n  TIME_LIMIT_EXCEEDED = \"timeLimitExceeded\",\n  OUTSIDE_AVAILABLE_TIME_RANGE = \"outsideAvailableTimeRange\",\n  ALWAYS = \"always\",\n}\n\n/**\n * Enum for rule action types\n */\nexport enum RuleActionType {\n  SKIP = \"skip\",\n  DISABLED = \"disabled\",\n  HIDE_FROM_CHOICE = \"hideFromChoice\",\n  STOP_FORWARD_TRAVERSAL = \"stopForwardTraversal\",\n  EXIT_PARENT = \"exitParent\",\n  EXIT_ALL = \"exitAll\",\n  RETRY = \"retry\",\n  RETRY_ALL = \"retryAll\",\n  CONTINUE = \"continue\",\n  PREVIOUS = \"previous\",\n  EXIT = \"exit\",\n}\n\n/**\n * Class representing a sequencing rule condition\n */\nexport class RuleCondition extends BaseCMI {\n  private _condition: RuleConditionType = RuleConditionType.ALWAYS;\n  private _operator: RuleConditionOperator | null = null;\n  private _parameters: Map<string, any> = new Map();\n\n  /**\n   * Constructor for RuleCondition\n   * @param {RuleConditionType} condition - The condition type\n   * @param {RuleConditionOperator | null} operator - The operator (null for no operator)\n   * @param {Map<string, any>} parameters - Additional parameters for the condition\n   */\n  constructor(\n    condition: RuleConditionType = RuleConditionType.ALWAYS,\n    operator: RuleConditionOperator | null = null,\n    parameters: Map<string, any> = new Map(),\n  ) {\n    super(\"ruleCondition\");\n    this._condition = condition;\n    this._operator = operator;\n    this._parameters = parameters;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for condition\n   * @return {RuleConditionType}\n   */\n  get condition(): RuleConditionType {\n    return this._condition;\n  }\n\n  /**\n   * Setter for condition\n   * @param {RuleConditionType} condition\n   */\n  set condition(condition: RuleConditionType) {\n    this._condition = condition;\n  }\n\n  /**\n   * Getter for operator\n   * @return {RuleConditionOperator | null}\n   */\n  get operator(): RuleConditionOperator | null {\n    return this._operator;\n  }\n\n  /**\n   * Setter for operator\n   * @param {RuleConditionOperator | null} operator\n   */\n  set operator(operator: RuleConditionOperator | null) {\n    this._operator = operator;\n  }\n\n  /**\n   * Getter for parameters\n   * @return {Map<string, any>}\n   */\n  get parameters(): Map<string, any> {\n    return this._parameters;\n  }\n\n  /**\n   * Setter for parameters\n   * @param {Map<string, any>} parameters\n   */\n  set parameters(parameters: Map<string, any>) {\n    this._parameters = parameters;\n  }\n\n  /**\n   * Evaluate the condition for an activity\n   * @param {Activity} activity - The activity to evaluate the condition for\n   * @return {boolean} - True if the condition is met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    switch (this._condition) {\n      case RuleConditionType.SATISFIED:\n        return activity.successStatus === SuccessStatus.PASSED;\n      case RuleConditionType.OBJECTIVE_STATUS_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RuleConditionType.OBJECTIVE_MEASURE_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RuleConditionType.OBJECTIVE_MEASURE_GREATER_THAN: {\n        const greaterThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure > greaterThanValue\n        );\n      }\n      case RuleConditionType.OBJECTIVE_MEASURE_LESS_THAN: {\n        const lessThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure < lessThanValue\n        );\n      }\n      case RuleConditionType.COMPLETED:\n        return activity.isCompleted;\n      case RuleConditionType.PROGRESS_KNOWN:\n        return activity.completionStatus !== \"unknown\";\n      case RuleConditionType.ATTEMPTED:\n        return activity.attemptCount > 0;\n      case RuleConditionType.ATTEMPT_LIMIT_EXCEEDED: {\n        const attemptLimit = this._parameters.get(\"attemptLimit\") || 0;\n        return attemptLimit > 0 && activity.attemptCount >= attemptLimit;\n      }\n      case RuleConditionType.TIME_LIMIT_EXCEEDED:\n        // Time limit exceeded would require additional tracking\n        return false;\n      case RuleConditionType.OUTSIDE_AVAILABLE_TIME_RANGE:\n        // Outside available time range would require additional tracking\n        return false;\n      case RuleConditionType.ALWAYS:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RuleCondition\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      condition: this._condition,\n      operator: this._operator,\n      parameters: Object.fromEntries(this._parameters),\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing a sequencing rule\n */\nexport class SequencingRule extends BaseCMI {\n  private _conditions: RuleCondition[] = [];\n  private _action: RuleActionType = RuleActionType.SKIP;\n  private _conditionCombination: RuleConditionOperator = RuleConditionOperator.AND;\n\n  /**\n   * Constructor for SequencingRule\n   * @param {RuleActionType} action - The action to take when the rule conditions are met\n   * @param {RuleConditionOperator} conditionCombination - How to combine multiple conditions\n   */\n  constructor(\n    action: RuleActionType = RuleActionType.SKIP,\n    conditionCombination: RuleConditionOperator = RuleConditionOperator.AND,\n  ) {\n    super(\"sequencingRule\");\n    this._action = action;\n    this._conditionCombination = conditionCombination;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._conditions = [];\n  }\n\n  /**\n   * Getter for conditions\n   * @return {RuleCondition[]}\n   */\n  get conditions(): RuleCondition[] {\n    return this._conditions;\n  }\n\n  /**\n   * Add a condition to the rule\n   * @param {RuleCondition} condition - The condition to add\n   */\n  addCondition(condition: RuleCondition): void {\n    if (!(condition instanceof RuleCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._conditions.push(condition);\n  }\n\n  /**\n   * Remove a condition from the rule\n   * @param {RuleCondition} condition - The condition to remove\n   * @return {boolean} - True if the condition was removed, false otherwise\n   */\n  removeCondition(condition: RuleCondition): boolean {\n    const index = this._conditions.indexOf(condition);\n    if (index !== -1) {\n      this._conditions.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for action\n   * @return {RuleActionType}\n   */\n  get action(): RuleActionType {\n    return this._action;\n  }\n\n  /**\n   * Setter for action\n   * @param {RuleActionType} action\n   */\n  set action(action: RuleActionType) {\n    this._action = action;\n  }\n\n  /**\n   * Getter for conditionCombination\n   * @return {RuleConditionOperator}\n   */\n  get conditionCombination(): RuleConditionOperator {\n    return this._conditionCombination;\n  }\n\n  /**\n   * Setter for conditionCombination\n   * @param {RuleConditionOperator} conditionCombination\n   */\n  set conditionCombination(conditionCombination: RuleConditionOperator) {\n    this._conditionCombination = conditionCombination;\n  }\n\n  /**\n   * Evaluate the rule for an activity\n   * @param {Activity} activity - The activity to evaluate the rule for\n   * @return {boolean} - True if the rule conditions are met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    if (this._conditions.length === 0) {\n      return true;\n    }\n\n    if (this._conditionCombination === RuleConditionOperator.AND) {\n      return this._conditions.every((condition) => condition.evaluate(activity));\n    } else if (this._conditionCombination === RuleConditionOperator.OR) {\n      return this._conditions.some((condition) => condition.evaluate(activity));\n    }\n\n    return false;\n  }\n\n  /**\n   * toJSON for SequencingRule\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      conditions: this._conditions,\n      action: this._action,\n      conditionCombination: this._conditionCombination,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing a collection of sequencing rules\n */\nexport class SequencingRules extends BaseCMI {\n  private _preConditionRules: SequencingRule[] = [];\n  private _exitConditionRules: SequencingRule[] = [];\n  private _postConditionRules: SequencingRule[] = [];\n\n  /**\n   * Constructor for SequencingRules\n   */\n  constructor() {\n    super(\"sequencingRules\");\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._preConditionRules = [];\n    this._exitConditionRules = [];\n    this._postConditionRules = [];\n  }\n\n  /**\n   * Getter for preConditionRules\n   * @return {SequencingRule[]}\n   */\n  get preConditionRules(): SequencingRule[] {\n    return this._preConditionRules;\n  }\n\n  /**\n   * Add a pre-condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addPreConditionRule(rule: SequencingRule): void {\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".preConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._preConditionRules.push(rule);\n  }\n\n  /**\n   * Getter for exitConditionRules\n   * @return {SequencingRule[]}\n   */\n  get exitConditionRules(): SequencingRule[] {\n    return this._exitConditionRules;\n  }\n\n  /**\n   * Add an exit condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addExitConditionRule(rule: SequencingRule): void {\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exitConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._exitConditionRules.push(rule);\n  }\n\n  /**\n   * Getter for postConditionRules\n   * @return {SequencingRule[]}\n   */\n  get postConditionRules(): SequencingRule[] {\n    return this._postConditionRules;\n  }\n\n  /**\n   * Add a post-condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addPostConditionRule(rule: SequencingRule): void {\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".postConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._postConditionRules.push(rule);\n  }\n\n  /**\n   * Evaluate pre-condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluatePreConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._preConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Evaluate exit condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluateExitConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._exitConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Evaluate post-condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluatePostConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._postConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * toJSON for SequencingRules\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      preConditionRules: this._preConditionRules,\n      exitConditionRules: this._exitConditionRules,\n      postConditionRules: this._postConditionRules,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { CompletionStatus, SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Enum for rollup action types\n */\nexport enum RollupActionType {\n  SATISFIED = \"satisfied\",\n  NOT_SATISFIED = \"notSatisfied\",\n  COMPLETED = \"completed\",\n  INCOMPLETE = \"incomplete\",\n}\n\n/**\n * Enum for rollup condition types\n */\nexport enum RollupConditionType {\n  SATISFIED = \"satisfied\",\n  OBJECTIVE_STATUS_KNOWN = \"objectiveStatusKnown\",\n  OBJECTIVE_MEASURE_KNOWN = \"objectiveMeasureKnown\",\n  OBJECTIVE_MEASURE_GREATER_THAN = \"objectiveMeasureGreaterThan\",\n  OBJECTIVE_MEASURE_LESS_THAN = \"objectiveMeasureLessThan\",\n  COMPLETED = \"completed\",\n  PROGRESS_KNOWN = \"progressKnown\",\n  ATTEMPTED = \"attempted\",\n  NOT_ATTEMPTED = \"notAttempted\",\n  ALWAYS = \"always\",\n}\n\n/**\n * Enum for rollup consideration types\n */\nexport enum RollupConsiderationType {\n  ALL = \"all\",\n  ANY = \"any\",\n  NONE = \"none\",\n  AT_LEAST_COUNT = \"atLeastCount\",\n  AT_LEAST_PERCENT = \"atLeastPercent\",\n}\n\n/**\n * Class representing a rollup condition\n */\nexport class RollupCondition extends BaseCMI {\n  private _condition: RollupConditionType = RollupConditionType.ALWAYS;\n  private _parameters: Map<string, any> = new Map();\n\n  /**\n   * Constructor for RollupCondition\n   * @param {RollupConditionType} condition - The condition type\n   * @param {Map<string, any>} parameters - Additional parameters for the condition\n   */\n  constructor(\n    condition: RollupConditionType = RollupConditionType.ALWAYS,\n    parameters: Map<string, any> = new Map(),\n  ) {\n    super(\"rollupCondition\");\n    this._condition = condition;\n    this._parameters = parameters;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for condition\n   * @return {RollupConditionType}\n   */\n  get condition(): RollupConditionType {\n    return this._condition;\n  }\n\n  /**\n   * Setter for condition\n   * @param {RollupConditionType} condition\n   */\n  set condition(condition: RollupConditionType) {\n    this._condition = condition;\n  }\n\n  /**\n   * Getter for parameters\n   * @return {Map<string, any>}\n   */\n  get parameters(): Map<string, any> {\n    return this._parameters;\n  }\n\n  /**\n   * Setter for parameters\n   * @param {Map<string, any>} parameters\n   */\n  set parameters(parameters: Map<string, any>) {\n    this._parameters = parameters;\n  }\n\n  /**\n   * Evaluate the condition for an activity\n   * @param {Activity} activity - The activity to evaluate the condition for\n   * @return {boolean} - True if the condition is met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    switch (this._condition) {\n      case RollupConditionType.SATISFIED:\n        return activity.successStatus === SuccessStatus.PASSED;\n      case RollupConditionType.OBJECTIVE_STATUS_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RollupConditionType.OBJECTIVE_MEASURE_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RollupConditionType.OBJECTIVE_MEASURE_GREATER_THAN: {\n        const greaterThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure > greaterThanValue\n        );\n      }\n      case RollupConditionType.OBJECTIVE_MEASURE_LESS_THAN: {\n        const lessThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure < lessThanValue\n        );\n      }\n      case RollupConditionType.COMPLETED:\n        return activity.isCompleted;\n      case RollupConditionType.PROGRESS_KNOWN:\n        return activity.completionStatus !== CompletionStatus.UNKNOWN;\n      case RollupConditionType.ATTEMPTED:\n        return activity.attemptCount > 0;\n      case RollupConditionType.NOT_ATTEMPTED:\n        return activity.attemptCount === 0;\n      case RollupConditionType.ALWAYS:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RollupCondition\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      condition: this._condition,\n      parameters: Object.fromEntries(this._parameters),\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing a rollup rule\n */\nexport class RollupRule extends BaseCMI {\n  private _conditions: RollupCondition[] = [];\n  private _action: RollupActionType = RollupActionType.SATISFIED;\n  private _consideration: RollupConsiderationType = RollupConsiderationType.ALL;\n  private _minimumCount: number = 0;\n  private _minimumPercent: number = 0;\n\n  /**\n   * Constructor for RollupRule\n   * @param {RollupActionType} action - The action to take when the rule conditions are met\n   * @param {RollupConsiderationType} consideration - How to consider child activities\n   * @param {number} minimumCount - The minimum count for AT_LEAST_COUNT consideration\n   * @param {number} minimumPercent - The minimum percent for AT_LEAST_PERCENT consideration\n   */\n  constructor(\n    action: RollupActionType = RollupActionType.SATISFIED,\n    consideration: RollupConsiderationType = RollupConsiderationType.ALL,\n    minimumCount: number = 0,\n    minimumPercent: number = 0,\n  ) {\n    super(\"rollupRule\");\n    this._action = action;\n    this._consideration = consideration;\n    this._minimumCount = minimumCount;\n    this._minimumPercent = minimumPercent;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._conditions = [];\n  }\n\n  /**\n   * Getter for conditions\n   * @return {RollupCondition[]}\n   */\n  get conditions(): RollupCondition[] {\n    return this._conditions;\n  }\n\n  /**\n   * Add a condition to the rule\n   * @param {RollupCondition} condition - The condition to add\n   */\n  addCondition(condition: RollupCondition): void {\n    if (!(condition instanceof RollupCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._conditions.push(condition);\n  }\n\n  /**\n   * Remove a condition from the rule\n   * @param {RollupCondition} condition - The condition to remove\n   * @return {boolean} - True if the condition was removed, false otherwise\n   */\n  removeCondition(condition: RollupCondition): boolean {\n    const index = this._conditions.indexOf(condition);\n    if (index !== -1) {\n      this._conditions.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for action\n   * @return {RollupActionType}\n   */\n  get action(): RollupActionType {\n    return this._action;\n  }\n\n  /**\n   * Setter for action\n   * @param {RollupActionType} action\n   */\n  set action(action: RollupActionType) {\n    this._action = action;\n  }\n\n  /**\n   * Getter for consideration\n   * @return {RollupConsiderationType}\n   */\n  get consideration(): RollupConsiderationType {\n    return this._consideration;\n  }\n\n  /**\n   * Setter for consideration\n   * @param {RollupConsiderationType} consideration\n   */\n  set consideration(consideration: RollupConsiderationType) {\n    this._consideration = consideration;\n  }\n\n  /**\n   * Getter for minimumCount\n   * @return {number}\n   */\n  get minimumCount(): number {\n    return this._minimumCount;\n  }\n\n  /**\n   * Setter for minimumCount\n   * @param {number} minimumCount\n   */\n  set minimumCount(minimumCount: number) {\n    if (minimumCount >= 0) {\n      this._minimumCount = minimumCount;\n    }\n  }\n\n  /**\n   * Getter for minimumPercent\n   * @return {number}\n   */\n  get minimumPercent(): number {\n    return this._minimumPercent;\n  }\n\n  /**\n   * Setter for minimumPercent\n   * @param {number} minimumPercent\n   */\n  set minimumPercent(minimumPercent: number) {\n    if (minimumPercent >= 0 && minimumPercent <= 100) {\n      this._minimumPercent = minimumPercent;\n    }\n  }\n\n  /**\n   * Evaluate the rule for a set of child activities\n   * @param {Activity[]} children - The child activities to evaluate the rule for\n   * @return {boolean} - True if the rule conditions are met, false otherwise\n   */\n  evaluate(children: Activity[]): boolean {\n    if (children.length === 0) {\n      return false;\n    }\n\n    // Filter children that meet all conditions\n    const matchingChildren = children.filter((child) => {\n      return this._conditions.every((condition) => condition.evaluate(child));\n    });\n\n    // Apply consideration\n    switch (this._consideration) {\n      case RollupConsiderationType.ALL:\n        return matchingChildren.length === children.length;\n      case RollupConsiderationType.ANY:\n        return matchingChildren.length > 0;\n      case RollupConsiderationType.NONE:\n        return matchingChildren.length === 0;\n      case RollupConsiderationType.AT_LEAST_COUNT:\n        return matchingChildren.length >= this._minimumCount;\n      case RollupConsiderationType.AT_LEAST_PERCENT: {\n        const percent = (matchingChildren.length / children.length) * 100;\n        return percent >= this._minimumPercent;\n      }\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RollupRule\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      conditions: this._conditions,\n      action: this._action,\n      consideration: this._consideration,\n      minimumCount: this._minimumCount,\n      minimumPercent: this._minimumPercent,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing a collection of rollup rules\n */\nexport class RollupRules extends BaseCMI {\n  private _rules: RollupRule[] = [];\n\n  /**\n   * Constructor for RollupRules\n   */\n  constructor() {\n    super(\"rollupRules\");\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._rules = [];\n  }\n\n  /**\n   * Getter for rules\n   * @return {RollupRule[]}\n   */\n  get rules(): RollupRule[] {\n    return this._rules;\n  }\n\n  /**\n   * Add a rule\n   * @param {RollupRule} rule - The rule to add\n   */\n  addRule(rule: RollupRule): void {\n    if (!(rule instanceof RollupRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".rules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._rules.push(rule);\n  }\n\n  /**\n   * Remove a rule\n   * @param {RollupRule} rule - The rule to remove\n   * @return {boolean} - True if the rule was removed, false otherwise\n   */\n  removeRule(rule: RollupRule): boolean {\n    const index = this._rules.indexOf(rule);\n    if (index !== -1) {\n      this._rules.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Process rollup for an activity\n   * @param {Activity} activity - The activity to process rollup for\n   */\n  processRollup(activity: Activity): void {\n    if (!activity || activity.children.length === 0) {\n      return;\n    }\n\n    const children = activity.children;\n    let completionRollup = false;\n    let successRollup = false;\n\n    // Process each rule\n    for (const rule of this._rules) {\n      if (rule.evaluate(children)) {\n        switch (rule.action) {\n          case RollupActionType.SATISFIED:\n            activity.successStatus = SuccessStatus.PASSED;\n            successRollup = true;\n            break;\n          case RollupActionType.NOT_SATISFIED:\n            activity.successStatus = SuccessStatus.FAILED;\n            successRollup = true;\n            break;\n          case RollupActionType.COMPLETED:\n            activity.completionStatus = CompletionStatus.COMPLETED;\n            activity.isCompleted = true;\n            completionRollup = true;\n            break;\n          case RollupActionType.INCOMPLETE:\n            activity.completionStatus = CompletionStatus.INCOMPLETE;\n            activity.isCompleted = false;\n            completionRollup = true;\n            break;\n        }\n      }\n    }\n\n    // If no rules applied for completion, use default rollup\n    if (!completionRollup) {\n      this._defaultCompletionRollup(activity, children);\n    }\n\n    // If no rules applied for success, use default rollup\n    if (!successRollup) {\n      this._defaultSuccessRollup(activity, children);\n    }\n  }\n\n  /**\n   * Default completion rollup\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @private\n   */\n  private _defaultCompletionRollup(activity: Activity, children: Activity[]): void {\n    // If all children are completed, mark the parent as completed\n    const allCompleted = children.every((child) => child.isCompleted);\n    if (allCompleted) {\n      activity.completionStatus = CompletionStatus.COMPLETED;\n      activity.isCompleted = true;\n    } else {\n      // If any child is incomplete, mark the parent as incomplete\n      const anyIncomplete = children.some(\n        (child) => child.completionStatus === CompletionStatus.INCOMPLETE,\n      );\n      if (anyIncomplete) {\n        activity.completionStatus = CompletionStatus.INCOMPLETE;\n        activity.isCompleted = false;\n      }\n    }\n  }\n\n  /**\n   * Default success rollup\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @private\n   */\n  private _defaultSuccessRollup(activity: Activity, children: Activity[]): void {\n    // If all children are satisfied, mark the parent as satisfied\n    const allSatisfied = children.every((child) => child.successStatus === SuccessStatus.PASSED);\n    if (allSatisfied) {\n      activity.successStatus = SuccessStatus.PASSED;\n    } else {\n      // If any child is not satisfied, mark the parent as not satisfied\n      const anyNotSatisfied = children.some(\n        (child) => child.successStatus === SuccessStatus.FAILED,\n      );\n      if (anyNotSatisfied) {\n        activity.successStatus = SuccessStatus.FAILED;\n      }\n    }\n  }\n\n  /**\n   * toJSON for RollupRules\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      rules: this._rules,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","const ValidLanguages: string[] = [\n  \"aa\",\n  \"ab\",\n  \"ae\",\n  \"af\",\n  \"ak\",\n  \"am\",\n  \"an\",\n  \"ar\",\n  \"as\",\n  \"av\",\n  \"ay\",\n  \"az\",\n  \"ba\",\n  \"be\",\n  \"bg\",\n  \"bh\",\n  \"bi\",\n  \"bm\",\n  \"bn\",\n  \"bo\",\n  \"br\",\n  \"bs\",\n  \"ca\",\n  \"ce\",\n  \"ch\",\n  \"co\",\n  \"cr\",\n  \"cs\",\n  \"cu\",\n  \"cv\",\n  \"cy\",\n  \"da\",\n  \"de\",\n  \"dv\",\n  \"dz\",\n  \"ee\",\n  \"el\",\n  \"en\",\n  \"eo\",\n  \"es\",\n  \"et\",\n  \"eu\",\n  \"fa\",\n  \"ff\",\n  \"fi\",\n  \"fj\",\n  \"fo\",\n  \"fr\",\n  \"fy\",\n  \"ga\",\n  \"gd\",\n  \"gl\",\n  \"gn\",\n  \"gu\",\n  \"gv\",\n  \"ha\",\n  \"he\",\n  \"hi\",\n  \"ho\",\n  \"hr\",\n  \"ht\",\n  \"hu\",\n  \"hy\",\n  \"hz\",\n  \"ia\",\n  \"id\",\n  \"ie\",\n  \"ig\",\n  \"ii\",\n  \"ik\",\n  \"io\",\n  \"is\",\n  \"it\",\n  \"iu\",\n  \"ja\",\n  \"jv\",\n  \"ka\",\n  \"kg\",\n  \"ki\",\n  \"kj\",\n  \"kk\",\n  \"kl\",\n  \"km\",\n  \"kn\",\n  \"ko\",\n  \"kr\",\n  \"ks\",\n  \"ku\",\n  \"kv\",\n  \"kw\",\n  \"ky\",\n  \"la\",\n  \"lb\",\n  \"lg\",\n  \"li\",\n  \"ln\",\n  \"lo\",\n  \"lt\",\n  \"lu\",\n  \"lv\",\n  \"mg\",\n  \"mh\",\n  \"mi\",\n  \"mk\",\n  \"ml\",\n  \"mn\",\n  \"mo\",\n  \"mr\",\n  \"ms\",\n  \"mt\",\n  \"my\",\n  \"na\",\n  \"nb\",\n  \"nd\",\n  \"ne\",\n  \"ng\",\n  \"nl\",\n  \"nn\",\n  \"no\",\n  \"nr\",\n  \"nv\",\n  \"ny\",\n  \"oc\",\n  \"oj\",\n  \"om\",\n  \"or\",\n  \"os\",\n  \"pa\",\n  \"pi\",\n  \"pl\",\n  \"ps\",\n  \"pt\",\n  \"qu\",\n  \"rm\",\n  \"rn\",\n  \"ro\",\n  \"ru\",\n  \"rw\",\n  \"sa\",\n  \"sc\",\n  \"sd\",\n  \"se\",\n  \"sg\",\n  \"sh\",\n  \"si\",\n  \"sk\",\n  \"sl\",\n  \"sm\",\n  \"sn\",\n  \"so\",\n  \"sq\",\n  \"sr\",\n  \"ss\",\n  \"st\",\n  \"su\",\n  \"sv\",\n  \"sw\",\n  \"ta\",\n  \"te\",\n  \"tg\",\n  \"th\",\n  \"ti\",\n  \"tk\",\n  \"tl\",\n  \"tn\",\n  \"to\",\n  \"tr\",\n  \"ts\",\n  \"tt\",\n  \"tw\",\n  \"ty\",\n  \"ug\",\n  \"uk\",\n  \"ur\",\n  \"uz\",\n  \"ve\",\n  \"vi\",\n  \"vo\",\n  \"wa\",\n  \"wo\",\n  \"xh\",\n  \"yi\",\n  \"yo\",\n  \"za\",\n  \"zh\",\n  \"zu\",\n  \"aar\",\n  \"abk\",\n  \"ave\",\n  \"afr\",\n  \"aka\",\n  \"amh\",\n  \"arg\",\n  \"ara\",\n  \"asm\",\n  \"ava\",\n  \"aym\",\n  \"aze\",\n  \"bak\",\n  \"bel\",\n  \"bul\",\n  \"bih\",\n  \"bis\",\n  \"bam\",\n  \"ben\",\n  \"tib\",\n  \"bod\",\n  \"bre\",\n  \"bos\",\n  \"cat\",\n  \"che\",\n  \"cha\",\n  \"cos\",\n  \"cre\",\n  \"cze\",\n  \"ces\",\n  \"chu\",\n  \"chv\",\n  \"wel\",\n  \"cym\",\n  \"dan\",\n  \"ger\",\n  \"deu\",\n  \"div\",\n  \"dzo\",\n  \"ewe\",\n  \"gre\",\n  \"ell\",\n  \"eng\",\n  \"epo\",\n  \"spa\",\n  \"est\",\n  \"baq\",\n  \"eus\",\n  \"per\",\n  \"fas\",\n  \"ful\",\n  \"fin\",\n  \"fij\",\n  \"fao\",\n  \"fre\",\n  \"fra\",\n  \"fry\",\n  \"gle\",\n  \"gla\",\n  \"glg\",\n  \"grn\",\n  \"guj\",\n  \"glv\",\n  \"hau\",\n  \"heb\",\n  \"hin\",\n  \"hmo\",\n  \"hrv\",\n  \"hat\",\n  \"hun\",\n  \"arm\",\n  \"hye\",\n  \"her\",\n  \"ina\",\n  \"ind\",\n  \"ile\",\n  \"ibo\",\n  \"iii\",\n  \"ipk\",\n  \"ido\",\n  \"ice\",\n  \"isl\",\n  \"ita\",\n  \"iku\",\n  \"jpn\",\n  \"jav\",\n  \"geo\",\n  \"kat\",\n  \"kon\",\n  \"kik\",\n  \"kua\",\n  \"kaz\",\n  \"kal\",\n  \"khm\",\n  \"kan\",\n  \"kor\",\n  \"kau\",\n  \"kas\",\n  \"kur\",\n  \"kom\",\n  \"cor\",\n  \"kir\",\n  \"lat\",\n  \"ltz\",\n  \"lug\",\n  \"lim\",\n  \"lin\",\n  \"lao\",\n  \"lit\",\n  \"lub\",\n  \"lav\",\n  \"mlg\",\n  \"mah\",\n  \"mao\",\n  \"mri\",\n  \"mac\",\n  \"mkd\",\n  \"mal\",\n  \"mon\",\n  \"mol\",\n  \"mar\",\n  \"may\",\n  \"msa\",\n  \"mlt\",\n  \"bur\",\n  \"mya\",\n  \"nau\",\n  \"nob\",\n  \"nde\",\n  \"nep\",\n  \"ndo\",\n  \"dut\",\n  \"nld\",\n  \"nno\",\n  \"nor\",\n  \"nbl\",\n  \"nav\",\n  \"nya\",\n  \"oci\",\n  \"oji\",\n  \"orm\",\n  \"ori\",\n  \"oss\",\n  \"pan\",\n  \"pli\",\n  \"pol\",\n  \"pus\",\n  \"por\",\n  \"que\",\n  \"roh\",\n  \"run\",\n  \"rum\",\n  \"ron\",\n  \"rus\",\n  \"kin\",\n  \"san\",\n  \"srd\",\n  \"snd\",\n  \"sme\",\n  \"sag\",\n  \"slo\",\n  \"sin\",\n  \"slk\",\n  \"slv\",\n  \"smo\",\n  \"sna\",\n  \"som\",\n  \"alb\",\n  \"sqi\",\n  \"srp\",\n  \"ssw\",\n  \"sot\",\n  \"sun\",\n  \"swe\",\n  \"swa\",\n  \"tam\",\n  \"tel\",\n  \"tgk\",\n  \"tha\",\n  \"tir\",\n  \"tuk\",\n  \"tgl\",\n  \"tsn\",\n  \"ton\",\n  \"tur\",\n  \"tso\",\n  \"tat\",\n  \"twi\",\n  \"tah\",\n  \"uig\",\n  \"ukr\",\n  \"urd\",\n  \"uzb\",\n  \"ven\",\n  \"vie\",\n  \"vol\",\n  \"wln\",\n  \"wol\",\n  \"xho\",\n  \"yid\",\n  \"yor\",\n  \"zha\",\n  \"chi\",\n  \"zho\",\n  \"zul\",\n];\nexport default ValidLanguages;\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { scorm2004_regex } from \"../../../constants/regex\";\nimport { check2004ValidFormat } from \"../validation\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { CompletionStatus, SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Class representing a single activity in the SCORM 2004 activity tree\n */\nexport class Activity extends BaseCMI {\n  private _id: string = \"\";\n  private _title: string = \"\";\n  private _children: Activity[] = [];\n  private _parent: Activity | null = null;\n  private _isVisible: boolean = true;\n  private _isActive: boolean = false;\n  private _isSuspended: boolean = false;\n  private _isCompleted: boolean = false;\n  private _completionStatus: CompletionStatus = CompletionStatus.UNKNOWN;\n  private _successStatus: SuccessStatus = SuccessStatus.UNKNOWN;\n  private _attemptCount: number = 0;\n  private _attemptCompletionAmount: number = 0;\n  private _attemptAbsoluteDuration: string = \"PT0H0M0S\";\n  private _attemptExperiencedDuration: string = \"PT0H0M0S\";\n  private _activityAbsoluteDuration: string = \"PT0H0M0S\";\n  private _activityExperiencedDuration: string = \"PT0H0M0S\";\n  private _objectiveSatisfiedStatus: boolean = false;\n  private _objectiveMeasureStatus: boolean = false;\n  private _objectiveNormalizedMeasure: number = 0;\n\n  /**\n   * Constructor for Activity\n   * @param {string} id - The unique identifier for this activity\n   * @param {string} title - The title of this activity\n   */\n  constructor(id: string = \"\", title: string = \"\") {\n    super(\"activity\");\n    this._id = id;\n    this._title = title;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    // Initialize children\n    for (const child of this._children) {\n      child.initialize();\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._isActive = false;\n    this._isSuspended = false;\n    this._isCompleted = false;\n    this._completionStatus = CompletionStatus.UNKNOWN;\n    this._successStatus = SuccessStatus.UNKNOWN;\n    this._attemptCount = 0;\n    this._attemptCompletionAmount = 0;\n    this._attemptAbsoluteDuration = \"PT0H0M0S\";\n    this._attemptExperiencedDuration = \"PT0H0M0S\";\n    this._activityAbsoluteDuration = \"PT0H0M0S\";\n    this._activityExperiencedDuration = \"PT0H0M0S\";\n    this._objectiveSatisfiedStatus = false;\n    this._objectiveMeasureStatus = false;\n    this._objectiveNormalizedMeasure = 0;\n\n    // Reset children\n    for (const child of this._children) {\n      child.reset();\n    }\n  }\n\n  /**\n   * Getter for id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for title\n   * @return {string}\n   */\n  get title(): string {\n    return this._title;\n  }\n\n  /**\n   * Setter for title\n   * @param {string} title\n   */\n  set title(title: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".title\", title, scorm2004_regex.CMILangString250)\n    ) {\n      this._title = title;\n    }\n  }\n\n  /**\n   * Getter for children\n   * @return {Activity[]}\n   */\n  get children(): Activity[] {\n    return this._children;\n  }\n\n  /**\n   * Add a child activity to this activity\n   * @param {Activity} child - The child activity to add\n   */\n  addChild(child: Activity): void {\n    if (!(child instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".children\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    child._parent = this;\n    this._children.push(child);\n  }\n\n  /**\n   * Remove a child activity from this activity\n   * @param {Activity} child - The child activity to remove\n   * @return {boolean} - True if the child was removed, false otherwise\n   */\n  removeChild(child: Activity): boolean {\n    const index = this._children.indexOf(child);\n    if (index !== -1) {\n      this._children.splice(index, 1);\n      child._parent = null;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for parent\n   * @return {Activity | null}\n   */\n  get parent(): Activity | null {\n    return this._parent;\n  }\n\n  /**\n   * Getter for isVisible\n   * @return {boolean}\n   */\n  get isVisible(): boolean {\n    return this._isVisible;\n  }\n\n  /**\n   * Setter for isVisible\n   * @param {boolean} isVisible\n   */\n  set isVisible(isVisible: boolean) {\n    this._isVisible = isVisible;\n  }\n\n  /**\n   * Getter for isActive\n   * @return {boolean}\n   */\n  get isActive(): boolean {\n    return this._isActive;\n  }\n\n  /**\n   * Setter for isActive\n   * @param {boolean} isActive\n   */\n  set isActive(isActive: boolean) {\n    this._isActive = isActive;\n  }\n\n  /**\n   * Getter for isSuspended\n   * @return {boolean}\n   */\n  get isSuspended(): boolean {\n    return this._isSuspended;\n  }\n\n  /**\n   * Setter for isSuspended\n   * @param {boolean} isSuspended\n   */\n  set isSuspended(isSuspended: boolean) {\n    this._isSuspended = isSuspended;\n  }\n\n  /**\n   * Getter for isCompleted\n   * @return {boolean}\n   */\n  get isCompleted(): boolean {\n    return this._isCompleted;\n  }\n\n  /**\n   * Setter for isCompleted\n   * @param {boolean} isCompleted\n   */\n  set isCompleted(isCompleted: boolean) {\n    this._isCompleted = isCompleted;\n  }\n\n  /**\n   * Getter for completionStatus\n   * @return {CompletionStatus}\n   */\n  get completionStatus(): CompletionStatus {\n    return this._completionStatus;\n  }\n\n  /**\n   * Setter for completionStatus\n   * @param {CompletionStatus} completionStatus\n   */\n  set completionStatus(completionStatus: CompletionStatus) {\n    this._completionStatus = completionStatus;\n    this._isCompleted = completionStatus === CompletionStatus.COMPLETED;\n  }\n\n  /**\n   * Getter for successStatus\n   * @return {SuccessStatus}\n   */\n  get successStatus(): SuccessStatus {\n    return this._successStatus;\n  }\n\n  /**\n   * Setter for successStatus\n   * @param {SuccessStatus} successStatus\n   */\n  set successStatus(successStatus: SuccessStatus) {\n    this._successStatus = successStatus;\n  }\n\n  /**\n   * Getter for attemptCount\n   * @return {number}\n   */\n  get attemptCount(): number {\n    return this._attemptCount;\n  }\n\n  /**\n   * Increment the attempt count\n   */\n  incrementAttemptCount(): void {\n    this._attemptCount++;\n  }\n\n  /**\n   * Getter for objectiveMeasureStatus\n   * @return {boolean}\n   */\n  get objectiveMeasureStatus(): boolean {\n    return this._objectiveMeasureStatus;\n  }\n\n  /**\n   * Setter for objectiveMeasureStatus\n   * @param {boolean} objectiveMeasureStatus\n   */\n  set objectiveMeasureStatus(objectiveMeasureStatus: boolean) {\n    this._objectiveMeasureStatus = objectiveMeasureStatus;\n  }\n\n  /**\n   * Getter for objectiveNormalizedMeasure\n   * @return {number}\n   */\n  get objectiveNormalizedMeasure(): number {\n    return this._objectiveNormalizedMeasure;\n  }\n\n  /**\n   * Setter for objectiveNormalizedMeasure\n   * @param {number} objectiveNormalizedMeasure\n   */\n  set objectiveNormalizedMeasure(objectiveNormalizedMeasure: number) {\n    this._objectiveNormalizedMeasure = objectiveNormalizedMeasure;\n  }\n\n  /**\n   * toJSON for Activity\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      id: this._id,\n      title: this._title,\n      isVisible: this._isVisible,\n      isActive: this._isActive,\n      isSuspended: this._isSuspended,\n      isCompleted: this._isCompleted,\n      completionStatus: this._completionStatus,\n      successStatus: this._successStatus,\n      attemptCount: this._attemptCount,\n      attemptCompletionAmount: this._attemptCompletionAmount,\n      attemptAbsoluteDuration: this._attemptAbsoluteDuration,\n      attemptExperiencedDuration: this._attemptExperiencedDuration,\n      activityAbsoluteDuration: this._activityAbsoluteDuration,\n      activityExperiencedDuration: this._activityExperiencedDuration,\n      objectiveSatisfiedStatus: this._objectiveSatisfiedStatus,\n      objectiveMeasureStatus: this._objectiveMeasureStatus,\n      objectiveNormalizedMeasure: this._objectiveNormalizedMeasure,\n      children: this._children.map((child) => child.toJSON()),\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\n\n/**\n * Class representing the SCORM 2004 activity tree\n */\nexport class ActivityTree extends BaseCMI {\n  private _root: Activity | null = null;\n  private _currentActivity: Activity | null = null;\n  private _suspendedActivity: Activity | null = null;\n  private _activities: Map<string, Activity> = new Map();\n\n  /**\n   * Constructor for ActivityTree\n   */\n  constructor() {\n    super(\"activityTree\");\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    if (this._root) {\n      this._root.initialize();\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._currentActivity = null;\n    this._suspendedActivity = null;\n    if (this._root) {\n      this._root.reset();\n    }\n  }\n\n  /**\n   * Getter for root\n   * @return {Activity | null}\n   */\n  get root(): Activity | null {\n    return this._root;\n  }\n\n  /**\n   * Setter for root\n   * @param {Activity} root\n   */\n  set root(root: Activity | null) {\n    if (root !== null && !(root instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".root\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._root = root;\n    if (root) {\n      this._activities.set(root.id, root);\n      this._addActivitiesToMap(root);\n    }\n  }\n\n  /**\n   * Recursively add activities to the activities map\n   * @param {Activity} activity\n   * @private\n   */\n  private _addActivitiesToMap(activity: Activity): void {\n    for (const child of activity.children) {\n      this._activities.set(child.id, child);\n      this._addActivitiesToMap(child);\n    }\n  }\n\n  /**\n   * Getter for currentActivity\n   * @return {Activity | null}\n   */\n  get currentActivity(): Activity | null {\n    return this._currentActivity;\n  }\n\n  /**\n   * Setter for currentActivity\n   * @param {Activity | null} activity\n   */\n  set currentActivity(activity: Activity | null) {\n    if (activity !== null && !(activity instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".currentActivity\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n\n    // If there's already a current activity, deactivate it\n    if (this._currentActivity) {\n      this._currentActivity.isActive = false;\n    }\n\n    // Set the new current activity and activate it\n    this._currentActivity = activity;\n    if (activity) {\n      activity.isActive = true;\n    }\n  }\n\n  /**\n   * Getter for suspendedActivity\n   * @return {Activity | null}\n   */\n  get suspendedActivity(): Activity | null {\n    return this._suspendedActivity;\n  }\n\n  /**\n   * Setter for suspendedActivity\n   * @param {Activity | null} activity\n   */\n  set suspendedActivity(activity: Activity | null) {\n    if (activity !== null && !(activity instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".suspendedActivity\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n\n    // If there's already a suspended activity, unsuspend it\n    if (this._suspendedActivity) {\n      this._suspendedActivity.isSuspended = false;\n    }\n\n    // Set the new suspended activity and mark it as suspended\n    this._suspendedActivity = activity;\n    if (activity) {\n      activity.isSuspended = true;\n    }\n  }\n\n  /**\n   * Get an activity by ID\n   * @param {string} id - The ID of the activity to get\n   * @return {Activity | undefined} - The activity with the given ID, or undefined if not found\n   */\n  getActivity(id: string): Activity | undefined {\n    return this._activities.get(id);\n  }\n\n  /**\n   * Get all activities in the tree\n   * @return {Activity[]} - An array of all activities in the tree\n   */\n  getAllActivities(): Activity[] {\n    return Array.from(this._activities.values());\n  }\n\n  /**\n   * Get the parent of an activity\n   * @param {Activity} activity - The activity to get the parent of\n   * @return {Activity | null} - The parent of the activity, or null if it has no parent\n   */\n  getParent(activity: Activity): Activity | null {\n    return activity.parent;\n  }\n\n  /**\n   * Get the children of an activity\n   * @param {Activity} activity - The activity to get the children of\n   * @return {Activity[]} - An array of the activity's children\n   */\n  getChildren(activity: Activity): Activity[] {\n    return activity.children;\n  }\n\n  /**\n   * Get the siblings of an activity\n   * @param {Activity} activity - The activity to get the siblings of\n   * @return {Activity[]} - An array of the activity's siblings\n   */\n  getSiblings(activity: Activity): Activity[] {\n    if (!activity.parent) {\n      return [];\n    }\n    return activity.parent.children.filter((child) => child !== activity);\n  }\n\n  /**\n   * Get the next sibling of an activity\n   * @param {Activity} activity - The activity to get the next sibling of\n   * @return {Activity | null} - The next sibling of the activity, or null if it has no next sibling\n   */\n  getNextSibling(activity: Activity): Activity | null {\n    if (!activity.parent) {\n      return null;\n    }\n    const siblings = activity.parent.children;\n    const index = siblings.indexOf(activity);\n    if (index === -1 || index === siblings.length - 1) {\n      return null;\n    }\n    return siblings[index + 1];\n  }\n\n  /**\n   * Get the previous sibling of an activity\n   * @param {Activity} activity - The activity to get the previous sibling of\n   * @return {Activity | null} - The previous sibling of the activity, or null if it has no previous sibling\n   */\n  getPreviousSibling(activity: Activity): Activity | null {\n    if (!activity.parent) {\n      return null;\n    }\n    const siblings = activity.parent.children;\n    const index = siblings.indexOf(activity);\n    if (index <= 0) {\n      return null;\n    }\n    return siblings[index - 1];\n  }\n\n  /**\n   * Get the first child of an activity\n   * @param {Activity} activity - The activity to get the first child of\n   * @return {Activity | null} - The first child of the activity, or null if it has no children\n   */\n  getFirstChild(activity: Activity): Activity | null {\n    if (activity.children.length === 0) {\n      return null;\n    }\n    return activity.children[0];\n  }\n\n  /**\n   * Get the last child of an activity\n   * @param {Activity} activity - The activity to get the last child of\n   * @return {Activity | null} - The last child of the activity, or null if it has no children\n   */\n  getLastChild(activity: Activity): Activity | null {\n    if (activity.children.length === 0) {\n      return null;\n    }\n    return activity.children[activity.children.length - 1];\n  }\n\n  /**\n   * Get the common ancestor of two activities\n   * @param {Activity} activity1 - The first activity\n   * @param {Activity} activity2 - The second activity\n   * @return {Activity | null} - The common ancestor of the two activities, or null if they have no common ancestor\n   */\n  getCommonAncestor(activity1: Activity, activity2: Activity): Activity | null {\n    // Get the path from the root to activity1\n    const path1: Activity[] = [];\n    let current: Activity | null = activity1;\n    while (current) {\n      path1.unshift(current);\n      current = current.parent;\n    }\n\n    // Check if activity2 is in the path from the root to activity1\n    current = activity2;\n    while (current) {\n      if (path1.includes(current)) {\n        return current;\n      }\n      current = current.parent;\n    }\n\n    return null;\n  }\n\n  /**\n   * toJSON for ActivityTree\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      root: this._root,\n      currentActivity: this._currentActivity ? this._currentActivity.id : null,\n      suspendedActivity: this._suspendedActivity ? this._suspendedActivity.id : null,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\n\n/**\n * Class representing SCORM 2004 sequencing controls\n */\nexport class SequencingControls extends BaseCMI {\n  // Sequencing Control Modes\n  private _enabled: boolean = true;\n  private _choiceExit: boolean = true;\n  private _flow: boolean = false;\n  private _forwardOnly: boolean = false;\n  private _useCurrentAttemptObjectiveInfo: boolean = true;\n  private _useCurrentAttemptProgressInfo: boolean = true;\n\n  // Constrain Choice Controls\n  private _preventActivation: boolean = false;\n  private _constrainChoice: boolean = false;\n\n  // Rollup Controls\n  private _rollupObjectiveSatisfied: boolean = true;\n  private _rollupProgressCompletion: boolean = true;\n  private _objectiveMeasureWeight: number = 1.0;\n\n  /**\n   * Constructor for SequencingControls\n   */\n  constructor() {\n    super(\"sequencingControls\");\n  }\n\n  /**\n   * Reset the sequencing controls to their default values\n   */\n  reset() {\n    this._initialized = false;\n    this._enabled = true;\n    this._choiceExit = true;\n    this._flow = false;\n    this._forwardOnly = false;\n    this._useCurrentAttemptObjectiveInfo = true;\n    this._useCurrentAttemptProgressInfo = true;\n    this._preventActivation = false;\n    this._constrainChoice = false;\n    this._rollupObjectiveSatisfied = true;\n    this._rollupProgressCompletion = true;\n    this._objectiveMeasureWeight = 1.0;\n  }\n\n  /**\n   * Getter for enabled\n   * @return {boolean}\n   */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  /**\n   * Setter for enabled\n   * @param {boolean} enabled\n   */\n  set enabled(enabled: boolean) {\n    this._enabled = enabled;\n  }\n\n  /**\n   * Getter for choiceExit\n   * @return {boolean}\n   */\n  get choiceExit(): boolean {\n    return this._choiceExit;\n  }\n\n  /**\n   * Setter for choiceExit\n   * @param {boolean} choiceExit\n   */\n  set choiceExit(choiceExit: boolean) {\n    this._choiceExit = choiceExit;\n  }\n\n  /**\n   * Getter for flow\n   * @return {boolean}\n   */\n  get flow(): boolean {\n    return this._flow;\n  }\n\n  /**\n   * Setter for flow\n   * @param {boolean} flow\n   */\n  set flow(flow: boolean) {\n    this._flow = flow;\n  }\n\n  /**\n   * Getter for forwardOnly\n   * @return {boolean}\n   */\n  get forwardOnly(): boolean {\n    return this._forwardOnly;\n  }\n\n  /**\n   * Setter for forwardOnly\n   * @param {boolean} forwardOnly\n   */\n  set forwardOnly(forwardOnly: boolean) {\n    this._forwardOnly = forwardOnly;\n  }\n\n  /**\n   * Getter for useCurrentAttemptObjectiveInfo\n   * @return {boolean}\n   */\n  get useCurrentAttemptObjectiveInfo(): boolean {\n    return this._useCurrentAttemptObjectiveInfo;\n  }\n\n  /**\n   * Setter for useCurrentAttemptObjectiveInfo\n   * @param {boolean} useCurrentAttemptObjectiveInfo\n   */\n  set useCurrentAttemptObjectiveInfo(useCurrentAttemptObjectiveInfo: boolean) {\n    this._useCurrentAttemptObjectiveInfo = useCurrentAttemptObjectiveInfo;\n  }\n\n  /**\n   * Getter for useCurrentAttemptProgressInfo\n   * @return {boolean}\n   */\n  get useCurrentAttemptProgressInfo(): boolean {\n    return this._useCurrentAttemptProgressInfo;\n  }\n\n  /**\n   * Setter for useCurrentAttemptProgressInfo\n   * @param {boolean} useCurrentAttemptProgressInfo\n   */\n  set useCurrentAttemptProgressInfo(useCurrentAttemptProgressInfo: boolean) {\n    this._useCurrentAttemptProgressInfo = useCurrentAttemptProgressInfo;\n  }\n\n  /**\n   * Getter for preventActivation\n   * @return {boolean}\n   */\n  get preventActivation(): boolean {\n    return this._preventActivation;\n  }\n\n  /**\n   * Setter for preventActivation\n   * @param {boolean} preventActivation\n   */\n  set preventActivation(preventActivation: boolean) {\n    this._preventActivation = preventActivation;\n  }\n\n  /**\n   * Getter for constrainChoice\n   * @return {boolean}\n   */\n  get constrainChoice(): boolean {\n    return this._constrainChoice;\n  }\n\n  /**\n   * Setter for constrainChoice\n   * @param {boolean} constrainChoice\n   */\n  set constrainChoice(constrainChoice: boolean) {\n    this._constrainChoice = constrainChoice;\n  }\n\n  /**\n   * Getter for rollupObjectiveSatisfied\n   * @return {boolean}\n   */\n  get rollupObjectiveSatisfied(): boolean {\n    return this._rollupObjectiveSatisfied;\n  }\n\n  /**\n   * Setter for rollupObjectiveSatisfied\n   * @param {boolean} rollupObjectiveSatisfied\n   */\n  set rollupObjectiveSatisfied(rollupObjectiveSatisfied: boolean) {\n    this._rollupObjectiveSatisfied = rollupObjectiveSatisfied;\n  }\n\n  /**\n   * Getter for rollupProgressCompletion\n   * @return {boolean}\n   */\n  get rollupProgressCompletion(): boolean {\n    return this._rollupProgressCompletion;\n  }\n\n  /**\n   * Setter for rollupProgressCompletion\n   * @param {boolean} rollupProgressCompletion\n   */\n  set rollupProgressCompletion(rollupProgressCompletion: boolean) {\n    this._rollupProgressCompletion = rollupProgressCompletion;\n  }\n\n  /**\n   * Getter for objectiveMeasureWeight\n   * @return {number}\n   */\n  get objectiveMeasureWeight(): number {\n    return this._objectiveMeasureWeight;\n  }\n\n  /**\n   * Setter for objectiveMeasureWeight\n   * @param {number} objectiveMeasureWeight\n   */\n  set objectiveMeasureWeight(objectiveMeasureWeight: number) {\n    if (objectiveMeasureWeight >= 0 && objectiveMeasureWeight <= 1) {\n      this._objectiveMeasureWeight = objectiveMeasureWeight;\n    }\n  }\n\n  /**\n   * Check if choice navigation is allowed\n   * @return {boolean} - True if choice navigation is allowed, false otherwise\n   */\n  isChoiceNavigationAllowed(): boolean {\n    return this._enabled && !this._constrainChoice;\n  }\n\n  /**\n   * Check if flow navigation is allowed\n   * @return {boolean} - True if flow navigation is allowed, false otherwise\n   */\n  isFlowNavigationAllowed(): boolean {\n    return this._enabled && this._flow;\n  }\n\n  /**\n   * Check if forward navigation is allowed\n   * @return {boolean} - True if forward navigation is allowed, false otherwise\n   */\n  isForwardNavigationAllowed(): boolean {\n    return this._enabled && (!this._forwardOnly || this._flow);\n  }\n\n  /**\n   * Check if backward navigation is allowed\n   * @return {boolean} - True if backward navigation is allowed, false otherwise\n   */\n  isBackwardNavigationAllowed(): boolean {\n    return this._enabled && !this._forwardOnly;\n  }\n\n  /**\n   * toJSON for SequencingControls\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      enabled: this._enabled,\n      choiceExit: this._choiceExit,\n      flow: this._flow,\n      forwardOnly: this._forwardOnly,\n      useCurrentAttemptObjectiveInfo: this._useCurrentAttemptObjectiveInfo,\n      useCurrentAttemptProgressInfo: this._useCurrentAttemptProgressInfo,\n      preventActivation: this._preventActivation,\n      constrainChoice: this._constrainChoice,\n      rollupObjectiveSatisfied: this._rollupObjectiveSatisfied,\n      rollupProgressCompletion: this._rollupProgressCompletion,\n      objectiveMeasureWeight: this._objectiveMeasureWeight,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { ActivityTree } from \"./activity_tree\";\nimport { RuleActionType, SequencingRules } from \"./sequencing_rules\";\nimport { SequencingControls } from \"./sequencing_controls\";\nimport { RollupRules } from \"./rollup_rules\";\nimport { ADLNav } from \"../adl\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\n\n/**\n * Class representing SCORM 2004 sequencing\n */\nexport class Sequencing extends BaseCMI {\n  private _activityTree: ActivityTree;\n  private _sequencingRules: SequencingRules;\n  private _sequencingControls: SequencingControls;\n  private _rollupRules: RollupRules;\n  private _adlNav: ADLNav | null = null;\n\n  /**\n   * Constructor for Sequencing\n   */\n  constructor() {\n    super(\"sequencing\");\n    this._activityTree = new ActivityTree();\n    this._sequencingRules = new SequencingRules();\n    this._sequencingControls = new SequencingControls();\n    this._rollupRules = new RollupRules();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this._activityTree.initialize();\n    this._sequencingRules.initialize();\n    this._sequencingControls.initialize();\n    this._rollupRules.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._activityTree.reset();\n    this._sequencingRules.reset();\n    this._sequencingControls.reset();\n    this._rollupRules.reset();\n  }\n\n  /**\n   * Getter for activityTree\n   * @return {ActivityTree}\n   */\n  get activityTree(): ActivityTree {\n    return this._activityTree;\n  }\n\n  /**\n   * Setter for activityTree\n   * @param {ActivityTree} activityTree\n   */\n  set activityTree(activityTree: ActivityTree) {\n    if (!(activityTree instanceof ActivityTree)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".activityTree\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._activityTree = activityTree;\n  }\n\n  /**\n   * Getter for sequencingRules\n   * @return {SequencingRules}\n   */\n  get sequencingRules(): SequencingRules {\n    return this._sequencingRules;\n  }\n\n  /**\n   * Setter for sequencingRules\n   * @param {SequencingRules} sequencingRules\n   */\n  set sequencingRules(sequencingRules: SequencingRules) {\n    if (!(sequencingRules instanceof SequencingRules)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".sequencingRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._sequencingRules = sequencingRules;\n  }\n\n  /**\n   * Getter for sequencingControls\n   * @return {SequencingControls}\n   */\n  get sequencingControls(): SequencingControls {\n    return this._sequencingControls;\n  }\n\n  /**\n   * Setter for sequencingControls\n   * @param {SequencingControls} sequencingControls\n   */\n  set sequencingControls(sequencingControls: SequencingControls) {\n    if (!(sequencingControls instanceof SequencingControls)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".sequencingControls\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._sequencingControls = sequencingControls;\n  }\n\n  /**\n   * Getter for rollupRules\n   * @return {RollupRules}\n   */\n  get rollupRules(): RollupRules {\n    return this._rollupRules;\n  }\n\n  /**\n   * Setter for rollupRules\n   * @param {RollupRules} rollupRules\n   */\n  set rollupRules(rollupRules: RollupRules) {\n    if (!(rollupRules instanceof RollupRules)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".rollupRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._rollupRules = rollupRules;\n  }\n\n  /**\n   * Getter for adlNav\n   * @return {ADLNav | null}\n   */\n  get adlNav(): ADLNav | null {\n    return this._adlNav;\n  }\n\n  /**\n   * Setter for adlNav\n   * @param {ADLNav | null} adlNav\n   */\n  set adlNav(adlNav: ADLNav | null) {\n    this._adlNav = adlNav;\n  }\n\n  /**\n   * Process navigation request\n   * @param {string} request - The navigation request\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processNavigationRequest(request: string): boolean {\n    if (!this._adlNav) {\n      return false;\n    }\n\n    // Set the navigation request\n    this._adlNav.request = request;\n\n    // Get the current activity\n    const currentActivity = this._activityTree.currentActivity;\n    if (!currentActivity) {\n      return false;\n    }\n\n    // Evaluate pre-condition rules\n    const preConditionAction = this._sequencingRules.evaluatePreConditionRules(currentActivity);\n    if (preConditionAction) {\n      // Handle pre-condition action\n      switch (preConditionAction) {\n        case RuleActionType.SKIP:\n          // Skip this activity\n          return false;\n        case RuleActionType.DISABLED:\n          // Disable this activity\n          return false;\n        case RuleActionType.HIDE_FROM_CHOICE:\n          // Hide this activity from choice\n          return false;\n        case RuleActionType.STOP_FORWARD_TRAVERSAL:\n          // Stop forward traversal\n          return false;\n        default:\n          break;\n      }\n    }\n\n    // Process the navigation request based on the request type\n    switch (request) {\n      case \"continue\":\n        return this.processContinueRequest(currentActivity);\n      case \"previous\":\n        return this.processPreviousRequest(currentActivity);\n      case \"choice\":\n        // Choice navigation would require additional parameters\n        return false;\n      case \"exit\":\n        return this.processExitRequest(currentActivity);\n      case \"exitAll\":\n        return this.processExitAllRequest();\n      case \"abandon\":\n        return this.processAbandonRequest(currentActivity);\n      case \"abandonAll\":\n        return this.processAbandonAllRequest();\n      case \"suspendAll\":\n        return this.processSuspendAllRequest(currentActivity);\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Process continue request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processContinueRequest(currentActivity: Activity): boolean {\n    // Check if continue is allowed\n    if (!this._sequencingControls.isForwardNavigationAllowed()) {\n      return false;\n    }\n\n    // Get the next activity\n    const nextActivity = this._activityTree.getNextSibling(currentActivity);\n    if (!nextActivity) {\n      return false;\n    }\n\n    // Evaluate exit condition rules\n    const exitConditionAction = this._sequencingRules.evaluateExitConditionRules(currentActivity);\n    if (exitConditionAction) {\n      // Handle exit condition action\n      switch (exitConditionAction) {\n        case RuleActionType.EXIT_PARENT: {\n          // Exit to parent\n          const parent = currentActivity.parent;\n          if (parent) {\n            this._activityTree.currentActivity = parent;\n            return true;\n          }\n          return false;\n        }\n        case RuleActionType.EXIT_ALL:\n          // Exit all\n          this._activityTree.currentActivity = null;\n          return true;\n        default:\n          break;\n      }\n    }\n\n    // Set the next activity as current\n    this._activityTree.currentActivity = nextActivity;\n\n    // Evaluate post-condition rules\n    const postConditionAction = this._sequencingRules.evaluatePostConditionRules(nextActivity);\n    if (postConditionAction) {\n      // Handle post-condition action\n      switch (postConditionAction) {\n        case RuleActionType.RETRY:\n          // Retry this activity\n          nextActivity.incrementAttemptCount();\n          return true;\n        case RuleActionType.RETRY_ALL:\n          // Retry all activities\n          this._activityTree.getAllActivities().forEach((activity) => {\n            activity.incrementAttemptCount();\n          });\n          return true;\n        case RuleActionType.CONTINUE:\n          // Continue to next activity\n          return this.processContinueRequest(nextActivity);\n        case RuleActionType.PREVIOUS:\n          // Go to previous activity\n          return this.processPreviousRequest(nextActivity);\n        case RuleActionType.EXIT:\n          // Exit this activity\n          this._activityTree.currentActivity = currentActivity;\n          return true;\n        default:\n          break;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Process previous request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processPreviousRequest(currentActivity: Activity): boolean {\n    // Check if backward navigation is allowed\n    if (!this._sequencingControls.isBackwardNavigationAllowed()) {\n      return false;\n    }\n\n    // Get the previous activity\n    const previousActivity = this._activityTree.getPreviousSibling(currentActivity);\n    if (!previousActivity) {\n      return false;\n    }\n\n    // Evaluate exit condition rules\n    const exitConditionAction = this._sequencingRules.evaluateExitConditionRules(currentActivity);\n    if (exitConditionAction) {\n      // Handle exit condition action\n      switch (exitConditionAction) {\n        case RuleActionType.EXIT_PARENT: {\n          // Exit to parent\n          const parent = currentActivity.parent;\n          if (parent) {\n            this._activityTree.currentActivity = parent;\n            return true;\n          }\n          return false;\n        }\n        case RuleActionType.EXIT_ALL:\n          // Exit all\n          this._activityTree.currentActivity = null;\n          return true;\n        default:\n          break;\n      }\n    }\n\n    // Set the previous activity as current\n    this._activityTree.currentActivity = previousActivity;\n\n    // Evaluate post-condition rules\n    const postConditionAction = this._sequencingRules.evaluatePostConditionRules(previousActivity);\n    if (postConditionAction) {\n      // Handle post-condition action\n      switch (postConditionAction) {\n        case RuleActionType.RETRY:\n          // Retry this activity\n          previousActivity.incrementAttemptCount();\n          return true;\n        case RuleActionType.RETRY_ALL:\n          // Retry all activities\n          this._activityTree.getAllActivities().forEach((activity) => {\n            activity.incrementAttemptCount();\n          });\n          return true;\n        case RuleActionType.CONTINUE:\n          // Continue to next activity\n          return this.processContinueRequest(previousActivity);\n        case RuleActionType.PREVIOUS:\n          // Go to previous activity\n          return this.processPreviousRequest(previousActivity);\n        case RuleActionType.EXIT:\n          // Exit this activity\n          this._activityTree.currentActivity = currentActivity;\n          return true;\n        default:\n          break;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Process exit request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processExitRequest(currentActivity: Activity): boolean {\n    // Check if exit is allowed\n    if (!this._sequencingControls.choiceExit) {\n      return false;\n    }\n\n    // Get the parent activity\n    const parent = currentActivity.parent;\n    if (!parent) {\n      return false;\n    }\n\n    // Set the parent activity as current\n    this._activityTree.currentActivity = parent;\n\n    return true;\n  }\n\n  /**\n   * Process exit all request\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processExitAllRequest(): boolean {\n    // Check if exit is allowed\n    if (!this._sequencingControls.choiceExit) {\n      return false;\n    }\n\n    // Set no activity as current\n    this._activityTree.currentActivity = null;\n\n    return true;\n  }\n\n  /**\n   * Process abandon request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processAbandonRequest(currentActivity: Activity): boolean {\n    // Get the parent activity\n    const parent = currentActivity.parent;\n    if (!parent) {\n      return false;\n    }\n\n    // Set the parent activity as current without processing exit rules\n    this._activityTree.currentActivity = parent;\n\n    return true;\n  }\n\n  /**\n   * Process abandon all request\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processAbandonAllRequest(): boolean {\n    // Set no activity as current without processing exit rules\n    this._activityTree.currentActivity = null;\n\n    return true;\n  }\n\n  /**\n   * Process suspend all request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processSuspendAllRequest(currentActivity: Activity): boolean {\n    // Set the current activity as suspended\n    this._activityTree.suspendedActivity = currentActivity;\n    this._activityTree.currentActivity = null;\n\n    return true;\n  }\n\n  /**\n   * Process rollup for the entire activity tree\n   */\n  processRollup(): void {\n    // Get the root activity\n    const root = this._activityTree.root;\n    if (!root) {\n      return;\n    }\n\n    // Process rollup from the bottom up\n    this._processRollupRecursive(root);\n  }\n\n  /**\n   * Process rollup recursively\n   * @param {Activity} activity - The activity to process rollup for\n   * @private\n   */\n  private _processRollupRecursive(activity: Activity): void {\n    // Process rollup for children first\n    for (const child of activity.children) {\n      this._processRollupRecursive(child);\n    }\n\n    // Process rollup for this activity\n    this._rollupRules.processRollup(activity);\n  }\n\n  /**\n   * toJSON for Sequencing\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      activityTree: this._activityTree,\n      sequencingRules: this._sequencingRules,\n      sequencingControls: this._sequencingControls,\n      rollupRules: this._rollupRules,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","import BaseAPI from \"./BaseAPI\";\nimport { CMI } from \"./cmi/scorm2004/cmi\";\nimport * as Utilities from \"./utilities\";\nimport { StringKeyMap, stringMatches } from \"./utilities\";\nimport { global_constants, scorm2004_constants } from \"./constants/api_constants\";\nimport { scorm2004_errors } from \"./constants/error_codes\";\nimport { CMIObjectivesObject } from \"./cmi/scorm2004/objectives\";\nimport { ADL, ADLDataObject } from \"./cmi/scorm2004/adl\";\nimport { CommitObject, ResultObject, ScoreObject, Settings } from \"./types/api_types\";\nimport {\n  ActivitySettings,\n  SequencingSettings,\n  SequencingRulesSettings,\n  SequencingControlsSettings,\n  RollupRulesSettings,\n  SequencingRuleSettings,\n  RollupRuleSettings,\n} from \"./types/sequencing_types\";\nimport { SequencingRule, RuleCondition } from \"./cmi/scorm2004/sequencing/sequencing_rules\";\nimport { RollupRule, RollupCondition } from \"./cmi/scorm2004/sequencing/rollup_rules\";\nimport { scorm2004_regex } from \"./constants/regex\"; // Import functions from extracted modules\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport {\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n} from \"./cmi/scorm2004/interactions\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { CorrectResponses, ResponseType } from \"./constants/response_constants\";\nimport { CMICommentsObject } from \"./cmi/scorm2004/comments\";\nimport ValidLanguages from \"./constants/language_constants\";\nimport { CompletionStatus, SuccessStatus } from \"./constants/enums\";\nimport { Sequencing } from \"./cmi/scorm2004/sequencing/sequencing\";\nimport { Activity } from \"./cmi/scorm2004/sequencing/activity\";\n\n/**\n * API class for SCORM 2004\n */\nclass Scorm2004Impl extends BaseAPI {\n  private _version: string = \"1.0\";\n  private _globalObjectives: CMIObjectivesObject[] = [];\n  private _sequencing: Sequencing;\n  private _extractedScoItemIds: string[] = [];\n\n  /**\n   * Constructor for SCORM 2004 API\n   * @param {Settings} settings\n   */\n  constructor(settings?: Settings) {\n    if (settings) {\n      if (settings.mastery_override === undefined) {\n        settings.mastery_override = false;\n      }\n    }\n\n    super(scorm2004_errors, settings);\n\n    this.cmi = new CMI();\n    this.adl = new ADL();\n    this._sequencing = new Sequencing();\n\n    // Connect the sequencing object to the ADL's sequencing property\n    // The Sequencing object is used for both configuration and runtime navigation processing\n    // It needs to be attached to the ADL object for runtime navigation requests (adl.nav.request)\n    this.adl.sequencing = this._sequencing;\n\n    // Configure sequencing if settings are provided\n    if (settings?.sequencing) {\n      this.configureSequencing(settings.sequencing);\n    }\n\n    // Rename functions to match 2004 Spec and expose to modules\n    this.Initialize = this.lmsInitialize;\n    this.Terminate = this.lmsFinish;\n    this.GetValue = this.lmsGetValue;\n    this.SetValue = this.lmsSetValue;\n    this.Commit = this.lmsCommit;\n    this.GetLastError = this.lmsGetLastError;\n    this.GetErrorString = this.lmsGetErrorString;\n    this.GetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  public cmi: CMI;\n  public adl: ADL;\n\n  public Initialize: () => string;\n  public Terminate: () => string;\n  public GetValue: (CMIElement: string) => string;\n  public SetValue: (CMIElement: string, value: any) => string;\n  public Commit: () => string;\n  public GetLastError: () => string;\n  public GetErrorString: (CMIErrorCode: string | number) => string;\n  public GetDiagnostic: (CMIErrorCode: string | number) => string;\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset(settings?: Settings) {\n    this.commonReset(settings);\n\n    this.cmi?.reset();\n    this.adl?.reset();\n    this._sequencing?.reset();\n  }\n\n  /**\n   * Getter for _version\n   * @return {string}\n   */\n  get version(): string {\n    return this._version;\n  }\n\n  /**\n   * Getter for _globalObjectives\n   */\n  get globalObjectives(): CMIObjectivesObject[] {\n    return this._globalObjectives;\n  }\n\n  /**\n   * Initialize function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize(): string {\n    this.cmi.initialize();\n    return this.initialize(\n      \"Initialize\",\n      \"LMS was already initialized!\",\n      \"LMS is already finished!\",\n    );\n  }\n\n  /**\n   * Terminate function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish(): string {\n    (async () => {\n      await this.internalFinish();\n    })();\n    return global_constants.SCORM_TRUE;\n  }\n\n  async internalFinish(): Promise<string> {\n    const result = await this.terminate(\"Terminate\", true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      if (this.adl.nav.request !== \"_none_\") {\n        const navActions: { [key: string]: string } = {\n          continue: \"SequenceNext\",\n          previous: \"SequencePrevious\",\n          choice: \"SequenceChoice\",\n          jump: \"SequenceJump\",\n          exit: \"SequenceExit\",\n          exitAll: \"SequenceExitAll\",\n          abandon: \"SequenceAbandon\",\n          abandonAll: \"SequenceAbandonAll\",\n        };\n\n        let request = this.adl.nav.request;\n        const choiceJumpRegex = new RegExp(scorm2004_regex.NAVEvent);\n        const matches = request.match(choiceJumpRegex);\n        let target = \"\";\n        if (matches) {\n          if (matches.groups?.choice_target) {\n            target = matches.groups?.choice_target;\n            request = \"choice\";\n          } else if (matches.groups?.jump_target) {\n            target = matches.groups?.jump_target;\n            request = \"jump\";\n          }\n        }\n        const action = navActions[request];\n        if (action) {\n          this.processListeners(action, \"adl.nav.request\", target);\n        }\n      } else if (this.settings.autoProgress) {\n        this.processListeners(\"SequenceNext\", null, \"next\");\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * GetValue function from SCORM 2004 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement: string): string {\n    const adlNavRequestRegex =\n      \"^adl\\\\.nav\\\\.request_valid\\\\.(choice|jump)\\\\.{target=\\\\S{0,}([a-zA-Z0-9-_]+)}$\";\n    if (stringMatches(CMIElement, adlNavRequestRegex)) {\n      const matches = CMIElement.match(adlNavRequestRegex);\n      const request = matches[1];\n      const target = matches[2].replace(\"{target=\", \"\").replace(\"}\", \"\");\n      if (request === \"choice\" || request === \"jump\") {\n        if (this.settings.scoItemIdValidator) {\n          return String(this.settings.scoItemIdValidator(target));\n        }\n        // If we have extracted IDs from sequencing, use those exclusively\n        if (this._extractedScoItemIds.length > 0) {\n          return String(this._extractedScoItemIds.includes(target));\n        }\n        // Otherwise use the scoItemIds from settings\n        return String(this.settings.scoItemIds.includes(target));\n      }\n    }\n    return this.getValue(\"GetValue\", true, CMIElement);\n  }\n\n  /**\n   * SetValue function from SCORM 2004 Spec\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement: string, value: any): string {\n    // Proceed with regular setting for non-objective elements or fallback behavior\n    return this.setValue(\"SetValue\", \"Commit\", true, CMIElement, value);\n  }\n\n  /**\n   * Commit function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit(): string {\n    if (this.settings.asyncCommit) {\n      this.scheduleCommit(500, \"Commit\");\n    } else {\n      (async () => {\n        await this.commit(\"Commit\", false);\n      })();\n    }\n    return global_constants.SCORM_TRUE;\n  }\n\n  /**\n   * GetLastError function from SCORM 2004 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError(): string {\n    return this.getLastError(\"GetLastError\");\n  }\n\n  /**\n   * GetErrorString function from SCORM 2004 Spec\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode: string | number): string {\n    return this.getErrorString(\"GetErrorString\", CMIErrorCode);\n  }\n\n  /**\n   * GetDiagnostic function from SCORM 2004 Spec\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode: string | number): string {\n    return this.getDiagnostic(\"GetDiagnostic\", CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object - delegates to CMIValueHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  override setCMIValue(CMIElement: string, value: any): string {\n    // Check if we're updating a global or local objective\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      const parts = CMIElement.split(\".\");\n      const index = Number(parts[2]);\n      const element_base = `cmi.objectives.${index}`;\n\n      let objective_id;\n      const setting_id = stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\\\\.id\");\n\n      if (setting_id) {\n        // If we're setting the objective ID, capture it directly\n        objective_id = value;\n      } else {\n        // Find existing objective ID if available\n        const objective = this.cmi.objectives.findObjectiveByIndex(index);\n        objective_id = objective ? objective.id : undefined;\n      }\n\n      // Check if the objective ID matches a global objective\n      const is_global = objective_id && this.settings.globalObjectiveIds.includes(objective_id);\n\n      if (is_global) {\n        // Locate or create an entry in _globalObjectives for the global objective\n        let global_index = this._globalObjectives.findIndex((obj) => obj.id === objective_id);\n\n        if (global_index === -1) {\n          global_index = this._globalObjectives.length;\n          const newGlobalObjective = new CMIObjectivesObject();\n          newGlobalObjective.id = objective_id;\n          this._globalObjectives.push(newGlobalObjective);\n        }\n\n        // Update the global objective\n        const global_element = CMIElement.replace(\n          element_base,\n          `_globalObjectives.${global_index}`,\n        );\n        this._commonSetCMIValue(\"SetGlobalObjectiveValue\", true, global_element, value);\n      }\n    }\n    return this._commonSetCMIValue(\"SetValue\", true, CMIElement, value);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array - delegates to CMIElementHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI|null}\n   */\n  getChildElement(CMIElement: string, value: any, foundFirstIndex: boolean): BaseCMI | null {\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      return new CMIObjectivesObject();\n    }\n\n    if (foundFirstIndex) {\n      if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+\")) {\n        return this.createCorrectResponsesObject(CMIElement, value);\n      } else if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+\")) {\n        return new CMIInteractionsObjectivesObject();\n      }\n    } else if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\")) {\n      return new CMIInteractionsObject();\n    }\n\n    if (stringMatches(CMIElement, \"cmi\\\\.comments_from_learner\\\\.\\\\d+\")) {\n      return new CMICommentsObject();\n    } else if (stringMatches(CMIElement, \"cmi\\\\.comments_from_lms\\\\.\\\\d+\")) {\n      return new CMICommentsObject(true);\n    }\n\n    if (stringMatches(CMIElement, \"adl\\\\.data\\\\.\\\\d+\")) {\n      return new ADLDataObject();\n    }\n\n    return null;\n  }\n\n  /**\n   * Creates a correct responses object for an interaction - delegates to CMIElementHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {BaseCMI|null}\n   */\n  private createCorrectResponsesObject(CMIElement: string, value: any): BaseCMI | null {\n    const parts = CMIElement.split(\".\");\n    const index = Number(parts[2]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    if (this.isInitialized()) {\n      if (typeof interaction === \"undefined\" || !interaction.type) {\n        this.throwSCORMError(CMIElement, scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED, CMIElement);\n        return null;\n      } else {\n        this.checkDuplicateChoiceResponse(CMIElement, interaction, value);\n        const response_type = CorrectResponses[interaction.type];\n        if (response_type) {\n          this.checkValidResponseType(CMIElement, response_type, value, interaction.type);\n        } else {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.GENERAL_SET_FAILURE,\n            `Incorrect Response Type: ${interaction.type}`,\n          );\n          return null;\n        }\n      }\n    }\n\n    if (this.lastErrorCode === \"0\") {\n      return new CMIInteractionsCorrectResponsesObject(interaction);\n    }\n\n    return null;\n  }\n\n  /**\n   * Checks for valid response types - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {ResponseType} response_type\n   * @param {any} value\n   * @param {string} interaction_type\n   */\n  checkValidResponseType(\n    CMIElement: string,\n    response_type: ResponseType,\n    value: any,\n    interaction_type: string,\n  ) {\n    let nodes = [];\n    if (response_type?.delimiter) {\n      nodes = String(value).split(response_type.delimiter);\n    } else {\n      nodes[0] = value;\n    }\n\n    if (nodes.length > 0 && nodes.length <= response_type.max) {\n      this.checkCorrectResponseValue(CMIElement, interaction_type, nodes, value);\n    } else if (nodes.length > response_type.max) {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.GENERAL_SET_FAILURE,\n        `Data Model Element Pattern Too Long: ${value}`,\n      );\n    }\n  }\n\n  /**\n   * Checks for duplicate 'choice' responses - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {CMIInteractionsObject} interaction\n   * @param {any} value\n   */\n  checkDuplicateChoiceResponse(CMIElement: string, interaction: CMIInteractionsObject, value: any) {\n    const interaction_count = interaction.correct_responses._count;\n    if (interaction.type === \"choice\") {\n      for (let i = 0; i < interaction_count && this.lastErrorCode === \"0\"; i++) {\n        const response = interaction.correct_responses.childArray[i];\n        if (response.pattern === value) {\n          this.throwSCORMError(CMIElement, scorm2004_errors.GENERAL_SET_FAILURE, `${value}`);\n        }\n      }\n    }\n  }\n\n  /**\n   * Validate correct response - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {*} value\n   */\n  validateCorrectResponse(CMIElement: string, value: any) {\n    const parts = CMIElement.split(\".\");\n    const index = Number(parts[2]);\n    const pattern_index = Number(parts[4]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    const interaction_count = interaction.correct_responses._count;\n    this.checkDuplicateChoiceResponse(CMIElement, interaction, value);\n\n    const response_type = CorrectResponses[interaction.type];\n    if (typeof response_type.limit === \"undefined\" || interaction_count <= response_type.limit) {\n      this.checkValidResponseType(CMIElement, response_type, value, interaction.type);\n\n      if (\n        (this.lastErrorCode === \"0\" &&\n          (!response_type.duplicate ||\n            !this.checkDuplicatedPattern(interaction.correct_responses, pattern_index, value))) ||\n        (this.lastErrorCode === \"0\" && value === \"\")\n      ) {\n        // do nothing, we want the inverse\n      } else {\n        if (this.lastErrorCode === \"0\") {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.GENERAL_SET_FAILURE,\n            `Data Model Element Pattern Already Exists: ${CMIElement} - ${value}`,\n          );\n        }\n      }\n    } else {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.GENERAL_SET_FAILURE,\n        `Data Model Element Collection Limit Reached: ${CMIElement} - ${value}`,\n      );\n    }\n  }\n\n  /**\n   * Gets a value from the CMI Object - delegates to CMIValueHandlerModule\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  override getCMIValue(CMIElement: string): any {\n    return this._commonGetCMIValue(\"GetValue\", true, CMIElement);\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {(string|number)} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  override getLmsErrorMessageDetails(errorNumber: string | number, detail: boolean): string {\n    let basicMessage = \"\";\n    let detailMessage = \"\";\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (scorm2004_constants.error_descriptions[errorNumber]) {\n      basicMessage = scorm2004_constants.error_descriptions[errorNumber].basicMessage;\n      detailMessage = scorm2004_constants.error_descriptions[errorNumber].detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Check to see if a correct_response value has been duplicated - delegates to ValidationModule\n   * @param {CMIArray} correct_response\n   * @param {number} current_index\n   * @param {*} value\n   * @return {boolean}\n   */\n  checkDuplicatedPattern(correct_response: CMIArray, current_index: number, value: any): boolean {\n    let found = false;\n    const count = correct_response._count;\n    for (let i = 0; i < count && !found; i++) {\n      if (i !== current_index && correct_response.childArray[i] === value) {\n        found = true;\n      }\n    }\n    return found;\n  }\n\n  /**\n   * Checks for a valid correct_response value - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {string} interaction_type\n   * @param {Array} nodes\n   * @param {*} value\n   */\n  checkCorrectResponseValue(\n    CMIElement: string,\n    interaction_type: string,\n    nodes: Array<any>,\n    value: any,\n  ) {\n    const response = CorrectResponses[interaction_type];\n    if (!response) {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.TYPE_MISMATCH,\n        `Incorrect Response Type: ${interaction_type}`,\n      );\n      return;\n    }\n    const formatRegex = new RegExp(response.format);\n    for (let i = 0; i < nodes.length && this.lastErrorCode === \"0\"; i++) {\n      if (interaction_type.match(\"^(fill-in|long-fill-in|matching|performance|sequencing)$\")) {\n        nodes[i] = this.removeCorrectResponsePrefixes(CMIElement, nodes[i]);\n      }\n\n      if (response?.delimiter2) {\n        const values = nodes[i].split(response.delimiter2);\n        if (values.length === 2) {\n          const matches = values[0].match(formatRegex);\n          if (!matches) {\n            this.throwSCORMError(\n              CMIElement,\n              scorm2004_errors.TYPE_MISMATCH,\n              `${interaction_type}: ${value}`,\n            );\n          } else {\n            if (!response.format2 || !values[1].match(new RegExp(response.format2))) {\n              this.throwSCORMError(\n                CMIElement,\n                scorm2004_errors.TYPE_MISMATCH,\n                `${interaction_type}: ${value}`,\n              );\n            }\n          }\n        } else {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.TYPE_MISMATCH,\n            `${interaction_type}: ${value}`,\n          );\n        }\n      } else {\n        const matches = nodes[i].match(formatRegex);\n        if ((!matches && value !== \"\") || (!matches && interaction_type === \"true-false\")) {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.TYPE_MISMATCH,\n            `${interaction_type}: ${value}`,\n          );\n        } else {\n          if (interaction_type === \"numeric\" && nodes.length > 1) {\n            if (Number(nodes[0]) > Number(nodes[1])) {\n              this.throwSCORMError(\n                CMIElement,\n                scorm2004_errors.TYPE_MISMATCH,\n                `${interaction_type}: ${value}`,\n              );\n            }\n          } else {\n            if (nodes[i] !== \"\" && response.unique) {\n              for (let j = 0; j < i && this.lastErrorCode === \"0\"; j++) {\n                if (nodes[i] === nodes[j]) {\n                  this.throwSCORMError(\n                    CMIElement,\n                    scorm2004_errors.TYPE_MISMATCH,\n                    `${interaction_type}: ${value}`,\n                  );\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove prefixes from correct_response - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {string} node\n   * @return {*}\n   */\n  removeCorrectResponsePrefixes(CMIElement: string, node: string): any {\n    let seenOrder = false;\n    let seenCase = false;\n    let seenLang = false;\n\n    const prefixRegex = new RegExp(\"^({(lang|case_matters|order_matters)=([^}]+)})\");\n    let matches = node.match(prefixRegex);\n    let langMatches = null;\n    while (matches) {\n      switch (matches[2]) {\n        case \"lang\":\n          langMatches = node.match(scorm2004_regex.CMILangcr);\n          if (langMatches) {\n            const lang = langMatches[3];\n            if (lang !== undefined && lang.length > 0) {\n              if (!ValidLanguages.includes(lang.toLowerCase())) {\n                this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n              }\n            }\n          }\n          seenLang = true;\n          break;\n        case \"case_matters\":\n          if (!seenLang && !seenOrder && !seenCase) {\n            if (matches[3] !== \"true\" && matches[3] !== \"false\") {\n              this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n            }\n          }\n\n          seenCase = true;\n          break;\n        case \"order_matters\":\n          if (!seenCase && !seenLang && !seenOrder) {\n            if (matches[3] !== \"true\" && matches[3] !== \"false\") {\n              this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n            }\n          }\n\n          seenOrder = true;\n          break;\n      }\n      node = node.substring(matches[1].length);\n      matches = node.match(prefixRegex);\n    }\n\n    return node;\n  }\n\n  /**\n   * Replace the whole API with another\n   * @param {Scorm2004Impl} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI: Scorm2004Impl) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.adl = newAPI.adl;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit - delegates to DataSerializationModule\n   *\n   * @param {boolean} terminateCommit\n   * @return {object|Array}\n   */\n  renderCommitCMI(terminateCommit: boolean): StringKeyMap | Array<any> {\n    const cmiExport: StringKeyMap = this.renderCMIToJSONObject();\n\n    if (terminateCommit) {\n      (cmiExport.cmi as any).total_time = (this.cmi as any).getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened: StringKeyMap = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case \"flattened\":\n        return Utilities.flatten(cmiExport);\n      case \"params\":\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case \"json\":\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit - delegates to DataSerializationModule\n   * @param {boolean} terminateCommit\n   * @return {CommitObject}\n   */\n  renderCommitObject(terminateCommit: boolean): CommitObject {\n    const cmiExport = this.renderCommitCMI(terminateCommit);\n    const totalTimeDuration = this.cmi.getCurrentTotalTime();\n    const totalTimeSeconds = Utilities.getDurationAsSeconds(\n      totalTimeDuration,\n      scorm2004_regex.CMITimespan,\n    );\n\n    let completionStatus = CompletionStatus.UNKNOWN;\n    let successStatus = SuccessStatus.UNKNOWN;\n    if (this.cmi.completion_status) {\n      if (this.cmi.completion_status === \"completed\") {\n        completionStatus = CompletionStatus.COMPLETED;\n      } else if (this.cmi.completion_status === \"incomplete\") {\n        completionStatus = CompletionStatus.INCOMPLETE;\n      }\n    }\n    if (this.cmi.success_status) {\n      if (this.cmi.success_status === \"passed\") {\n        successStatus = SuccessStatus.PASSED;\n      } else if (this.cmi.success_status === \"failed\") {\n        successStatus = SuccessStatus.FAILED;\n      }\n    }\n\n    const score = this.cmi.score;\n    let scoreObject: ScoreObject = null;\n    if (score) {\n      scoreObject = {};\n\n      if (!Number.isNaN(Number.parseFloat(score.raw))) {\n        scoreObject.raw = Number.parseFloat(score.raw);\n      }\n      if (!Number.isNaN(Number.parseFloat(score.min))) {\n        scoreObject.min = Number.parseFloat(score.min);\n      }\n      if (!Number.isNaN(Number.parseFloat(score.max))) {\n        scoreObject.max = Number.parseFloat(score.max);\n      }\n      if (!Number.isNaN(Number.parseFloat(score.scaled))) {\n        scoreObject.scaled = Number.parseFloat(score.scaled);\n      }\n    }\n\n    const commitObject: CommitObject = {\n      completionStatus: completionStatus,\n      successStatus: successStatus,\n      totalTimeSeconds: totalTimeSeconds,\n      runtimeData: cmiExport as StringKeyMap,\n    };\n    if (scoreObject) {\n      commitObject.score = scoreObject;\n    }\n    return commitObject;\n  }\n\n  /**\n   * Attempts to store the data to the LMS - delegates to DataSerializationModule\n   *\n   * @param {boolean} terminateCommit\n   * @return {ResultObject}\n   */\n  async storeData(terminateCommit: boolean): Promise<ResultObject> {\n    if (terminateCommit) {\n      if (this.cmi.mode === \"normal\") {\n        if (this.cmi.credit === \"credit\") {\n          if (this.cmi.completion_threshold && this.cmi.progress_measure) {\n            if (this.cmi.progress_measure >= this.cmi.completion_threshold) {\n              this.cmi.completion_status = \"completed\";\n            } else {\n              this.cmi.completion_status = \"incomplete\";\n            }\n          }\n          if (this.cmi.scaled_passing_score && this.cmi.score.scaled) {\n            if (this.cmi.score.scaled >= this.cmi.scaled_passing_score) {\n              this.cmi.success_status = \"passed\";\n            } else {\n              this.cmi.success_status = \"failed\";\n            }\n          }\n        }\n      }\n    }\n\n    let navRequest = false;\n    if (\n      this.adl.nav.request !==\n        ((this.startingData?.adl as StringKeyMap)?.nav as StringKeyMap)?.request &&\n      this.adl.nav.request !== \"_none_\"\n    ) {\n      navRequest = true;\n    }\n\n    const commitObject = this.getCommitObject(terminateCommit);\n    if (typeof this.settings.lmsCommitUrl === \"string\") {\n      const result = await this.processHttpRequest(\n        this.settings.lmsCommitUrl,\n        {\n          commitObject: commitObject,\n        },\n        terminateCommit,\n      );\n\n      // Check if this is a sequencing call, and then call the necessary JS\n      if (\n        navRequest &&\n        result.navRequest !== undefined &&\n        result.navRequest !== \"\" &&\n        typeof result.navRequest === \"string\"\n      ) {\n        Function(`\"use strict\";(() => { ${result.navRequest} })()`)();\n      } else if (result?.navRequest && !navRequest) {\n        if (\n          typeof result.navRequest === \"object\" &&\n          Object.hasOwnProperty.call(result.navRequest, \"name\")\n        ) {\n          this.processListeners(result.navRequest.name as string, result.navRequest.data as string);\n        }\n      }\n\n      return result;\n    }\n\n    return {\n      result: \"true\",\n      errorCode: 0,\n    };\n  }\n\n  /**\n   * Configure sequencing based on provided settings\n   * @param {SequencingSettings} sequencingSettings - The sequencing settings\n   */\n  private configureSequencing(sequencingSettings: SequencingSettings): void {\n    // Configure activity tree\n    if (sequencingSettings.activityTree) {\n      this.configureActivityTree(sequencingSettings.activityTree);\n    }\n\n    // Configure sequencing rules\n    if (sequencingSettings.sequencingRules) {\n      this.configureSequencingRules(sequencingSettings.sequencingRules);\n    }\n\n    // Configure sequencing controls\n    if (sequencingSettings.sequencingControls) {\n      this.configureSequencingControls(sequencingSettings.sequencingControls);\n    }\n\n    // Configure rollup rules\n    if (sequencingSettings.rollupRules) {\n      this.configureRollupRules(sequencingSettings.rollupRules);\n    }\n  }\n\n  /**\n   * Configure activity tree based on provided settings\n   * @param {ActivitySettings} activityTreeSettings - The activity tree settings\n   */\n  private configureActivityTree(activityTreeSettings: ActivitySettings): void {\n    // Create root activity\n    const rootActivity = this.createActivity(activityTreeSettings);\n\n    // Create activity tree\n    const activityTree = this._sequencing.activityTree;\n    activityTree.root = rootActivity;\n\n    // Extract activity IDs for use as scoItemIds\n    this._extractedScoItemIds = this.extractActivityIds(rootActivity);\n  }\n\n  /**\n   * Extract all activity IDs from an activity and its children\n   * @param {Activity} activity - The activity to extract IDs from\n   * @return {string[]} - Array of activity IDs\n   */\n  private extractActivityIds(activity: Activity): string[] {\n    const ids = [activity.id];\n\n    // Recursively extract IDs from children\n    for (const child of activity.children) {\n      ids.push(...this.extractActivityIds(child));\n    }\n\n    return ids;\n  }\n\n  /**\n   * Create an activity from settings\n   * @param {ActivitySettings} activitySettings - The activity settings\n   * @return {Activity} - The created activity\n   */\n  private createActivity(activitySettings: ActivitySettings): Activity {\n    // Create activity\n    const activity = new Activity(activitySettings.id, activitySettings.title);\n\n    // Set activity properties\n    if (activitySettings.isVisible !== undefined) {\n      activity.isVisible = activitySettings.isVisible;\n    }\n    if (activitySettings.isActive !== undefined) {\n      activity.isActive = activitySettings.isActive;\n    }\n    if (activitySettings.isSuspended !== undefined) {\n      activity.isSuspended = activitySettings.isSuspended;\n    }\n    if (activitySettings.isCompleted !== undefined) {\n      activity.isCompleted = activitySettings.isCompleted;\n    }\n\n    // Create child activities\n    if (activitySettings.children) {\n      for (const childSettings of activitySettings.children) {\n        const childActivity = this.createActivity(childSettings);\n        activity.addChild(childActivity);\n      }\n    }\n\n    return activity;\n  }\n\n  /**\n   * Configure sequencing rules based on provided settings\n   * @param {SequencingRulesSettings} sequencingRulesSettings - The sequencing rules settings\n   */\n  private configureSequencingRules(sequencingRulesSettings: SequencingRulesSettings): void {\n    const sequencingRules = this._sequencing.sequencingRules;\n\n    // Configure pre-condition rules\n    if (sequencingRulesSettings.preConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.preConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addPreConditionRule(rule);\n      }\n    }\n\n    // Configure exit condition rules\n    if (sequencingRulesSettings.exitConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.exitConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addExitConditionRule(rule);\n      }\n    }\n\n    // Configure post-condition rules\n    if (sequencingRulesSettings.postConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.postConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addPostConditionRule(rule);\n      }\n    }\n  }\n\n  /**\n   * Create a sequencing rule from settings\n   * @param {SequencingRuleSettings} ruleSettings - The sequencing rule settings\n   * @return {SequencingRule} - The created sequencing rule\n   */\n  private createSequencingRule(ruleSettings: SequencingRuleSettings): SequencingRule {\n    // Create rule\n    const rule = new SequencingRule(ruleSettings.action, ruleSettings.conditionCombination);\n\n    // Add conditions\n    for (const conditionSettings of ruleSettings.conditions) {\n      const condition = new RuleCondition(\n        conditionSettings.condition,\n        conditionSettings.operator,\n        new Map(Object.entries(conditionSettings.parameters || {})),\n      );\n      rule.addCondition(condition);\n    }\n\n    return rule;\n  }\n\n  /**\n   * Configure sequencing controls based on provided settings\n   * @param {SequencingControlsSettings} sequencingControlsSettings - The sequencing controls settings\n   */\n  private configureSequencingControls(\n    sequencingControlsSettings: SequencingControlsSettings,\n  ): void {\n    const sequencingControls = this._sequencing.sequencingControls;\n\n    // Set sequencing control properties\n    if (sequencingControlsSettings.enabled !== undefined) {\n      sequencingControls.enabled = sequencingControlsSettings.enabled;\n    }\n    if (sequencingControlsSettings.choiceExit !== undefined) {\n      sequencingControls.choiceExit = sequencingControlsSettings.choiceExit;\n    }\n    if (sequencingControlsSettings.flow !== undefined) {\n      sequencingControls.flow = sequencingControlsSettings.flow;\n    }\n    if (sequencingControlsSettings.forwardOnly !== undefined) {\n      sequencingControls.forwardOnly = sequencingControlsSettings.forwardOnly;\n    }\n    if (sequencingControlsSettings.useCurrentAttemptObjectiveInfo !== undefined) {\n      sequencingControls.useCurrentAttemptObjectiveInfo =\n        sequencingControlsSettings.useCurrentAttemptObjectiveInfo;\n    }\n    if (sequencingControlsSettings.useCurrentAttemptProgressInfo !== undefined) {\n      sequencingControls.useCurrentAttemptProgressInfo =\n        sequencingControlsSettings.useCurrentAttemptProgressInfo;\n    }\n    if (sequencingControlsSettings.preventActivation !== undefined) {\n      sequencingControls.preventActivation = sequencingControlsSettings.preventActivation;\n    }\n    if (sequencingControlsSettings.constrainChoice !== undefined) {\n      sequencingControls.constrainChoice = sequencingControlsSettings.constrainChoice;\n    }\n    if (sequencingControlsSettings.rollupObjectiveSatisfied !== undefined) {\n      sequencingControls.rollupObjectiveSatisfied =\n        sequencingControlsSettings.rollupObjectiveSatisfied;\n    }\n    if (sequencingControlsSettings.rollupProgressCompletion !== undefined) {\n      sequencingControls.rollupProgressCompletion =\n        sequencingControlsSettings.rollupProgressCompletion;\n    }\n    if (sequencingControlsSettings.objectiveMeasureWeight !== undefined) {\n      sequencingControls.objectiveMeasureWeight = sequencingControlsSettings.objectiveMeasureWeight;\n    }\n  }\n\n  /**\n   * Configure rollup rules based on provided settings\n   * @param {RollupRulesSettings} rollupRulesSettings - The rollup rules settings\n   */\n  private configureRollupRules(rollupRulesSettings: RollupRulesSettings): void {\n    const rollupRules = this._sequencing.rollupRules;\n\n    // Configure rollup rules\n    if (rollupRulesSettings.rules) {\n      for (const ruleSettings of rollupRulesSettings.rules) {\n        const rule = this.createRollupRule(ruleSettings);\n        rollupRules.addRule(rule);\n      }\n    }\n  }\n\n  /**\n   * Create a rollup rule from settings\n   * @param {RollupRuleSettings} ruleSettings - The rollup rule settings\n   * @return {RollupRule} - The created rollup rule\n   */\n  private createRollupRule(ruleSettings: RollupRuleSettings): RollupRule {\n    // Create rule\n    const rule = new RollupRule(\n      ruleSettings.action,\n      ruleSettings.consideration,\n      ruleSettings.minimumCount,\n      ruleSettings.minimumPercent,\n    );\n\n    // Add conditions\n    for (const conditionSettings of ruleSettings.conditions) {\n      const condition = new RollupCondition(\n        conditionSettings.condition,\n        new Map(Object.entries(conditionSettings.parameters || {})),\n      );\n      rule.addCondition(condition);\n    }\n\n    return rule;\n  }\n}\n\nexport default Scorm2004Impl;\n"],"names":["global_constants","scorm2004_constants","cmi_children","comments_children","score_children","objectives_children","correct_responses_children","student_preference_children","interactions_children","adl_data_children","error_descriptions","basicMessage","detailMessage","designations","D","H","M","S","getSecondsAsISODuration","memoize","seconds","duration","remainder","Object","entries","forEach","designationsKey","current_seconds","value","Math","floor","num","String","indexOf","parts","split","length","countDecimals","toFixed","includes","getDurationAsSeconds","durationRegex","RegExp","match","years","_","days","hours","minutes","exec","result","toString","flatten","data","recurse","cur","prop","Array","isArray","item","i","keys","filter","p","prototype","hasOwnProperty","call","isEmpty","stringMatches","str","tester","fn","keyFn","cache","Map","args","key","JSON","stringify","has","get","set","NAVBoolean","SuccessStatus","CompletionStatus","LogLevelEnum","DEBUG","INFO","WARN","ERROR","NONE","DefaultSettings","autocommit","autocommitSeconds","asyncCommit","sendFullCommit","lmsCommitUrl","dataCommitFormat","commitRequestDataType","autoProgress","logLevel","selfReportSessionTime","alwaysSendTotalTime","renderCommonCommitFields","strict_errors","xhrHeaders","xhrWithCredentials","fetchMode","responseHandler","async","response","httpResult","json","text","responseText","parse","e","errorCode","status","requestHandler","commitObject","onLogMessage","defaultLogHandler","scoItemIds","scoItemIdValidator","globalObjectiveIds","messageLevel","logMessage","console","error","warn","info","debug","log","ScheduledCommit","constructor","API","when","callback","this","_cancelled","_API","_timeout","setTimeout","wrapper","bind","_callback","cancel","clearTimeout","commit","HttpService","settings","error_codes","processHttpRequest","url","params","immediate","apiLog","processListeners","genericError","GENERAL","performFetch","then","transformResponse","process","fetch","method","mode","body","join","headers","credentials","keepalive","updateSettings","EventService","listenerMap","listenerCount","parseListenerName","listenerName","listenerSplit","functionName","CMIElement","replace","on","listenerFunctions","listenerFunction","parsedListener","listeners","push","off","removeIndex","findIndex","obj","splice","delete","clear","newListeners","listener","listenerHasCMIElement","CMIElementsMatch","endsWith","prefix","slice","startsWith","reset","SerializationService","loadFromFlattenedJSON","setCMIValue","isNotInitialized","setStartingData","int_pattern","obj_pattern","interactions","objectives","others","intMatch","index","field","objMatch","sort","a","b","localeCompare","processItems","items","loadFromJSON","pattern","regex","from","m","unflatten","currentCMIElement","tempCMIElement","renderCMIToJSONString","cmi","k","v","renderCMIToJSONObject","getCommitObject","terminateCommit","renderCommitObject","renderCommitCMI","apiLogLevel","shouldTerminateCommit","BaseScormValidationError","Error","super","_errorCode","setPrototypeOf","ValidationError","errorMessage","detailedMessage","_detailedMessage","message","_errorMessage","LoggingService","_logLevel","_logHandler","getInstance","_instance","setLogLevel","level","getLogLevel","setLogHandler","handler","shouldLog","getNumericLevel","getLoggingService","ErrorHandlingService","errorCodes","getLmsErrorMessageDetails","loggingService","_lastErrorCode","_errorCodes","_apiLog","_getLmsErrorMessageDetails","_loggingService","lastErrorCode","throwSCORMError","errorNumber","formattedMessage","clearSCORMError","success","handleValueAccessException","returnValue","validationError","errorType","name","stack","errorDetails","jsonError","BaseCMI","cmi_element","jsonString","_initialized","_cmi_element","initialized","start_time","_start_time","initialize","setStartTime","Date","getTime","BaseRootCMI","global_errors","INITIALIZATION_FAILED","INITIALIZED","TERMINATED","TERMINATION_FAILURE","TERMINATION_BEFORE_INIT","MULTIPLE_TERMINATION","RETRIEVE_BEFORE_INIT","RETRIEVE_AFTER_TERM","STORE_BEFORE_INIT","STORE_AFTER_TERM","COMMIT_BEFORE_INIT","COMMIT_AFTER_TERM","ARGUMENT_ERROR","CHILDREN_ERROR","COUNT_ERROR","GENERAL_GET_FAILURE","GENERAL_SET_FAILURE","GENERAL_COMMIT_FAILURE","UNDEFINED_DATA_MODEL","UNIMPLEMENTED_ELEMENT","VALUE_NOT_INITIALIZED","INVALID_SET_VALUE","READ_ONLY_ELEMENT","WRITE_ONLY_ELEMENT","TYPE_MISMATCH","VALUE_OUT_OF_RANGE","DEPENDENCY_NOT_ESTABLISHED","scorm12_errors","scorm2004_errors","MULTIPLE_TERMINATIONS","CMIArray","__children","children","_errorClass","errorClass","childArray","wipe","_children","_count","toJSON","BaseAPI","httpService","eventService","serializationService","cmiDataService","errorHandlingService","_settings","TypeError","currentState","_error_codes","_httpService","_eventService","element","_serializationService","_errorHandlingService","detail","createErrorHandlingService","commonReset","clearScheduledCommit","startingData","callbackName","initializeMessage","terminationMessage","isInitialized","isTerminated","messageString","padEnd","formatMessage","previousSettings","terminate","checkTerminated","checkState","storeData","getValue","getCMIValue","setValue","commitCallback","scheduleCommit","getLastError","getErrorString","CMIErrorCode","getDiagnostic","beforeInitError","afterTermError","_errorNumber","_detail","_CMIElement","_value","_commonSetCMIValue","methodName","scorm2004","structure","refObject","foundFirstIndex","invalidErrorMessage","invalidErrorCode","idx","attribute","substring","_checkObjectHasProperty","validateCorrectResponse","parseInt","isNaN","newChild","getChildElement","_commonGetCMIValue","uninitializedErrorMessage","_isTargetValid","StringKeyMap","getOwnPropertyDescriptor","getPrototypeOf","Scorm2004ValidationError","checkValidFormat","regexPattern","allowEmptyString","formatRegex","matches","checkValidRange","rangePattern","ranges","check2004ValidFormat","check2004ValidRange","scorm12_regex","scorm2004_regex","CMILearnerPreference","_audio_level","_language","_delivery_speed","_audio_captioning","audio_level","language","delivery_speed","audio_captioning","LearnerResponses","format","max","delimiter","unique","choice","matching","format2","delimiter2","performance","sequencing","likert","numeric","other","CorrectResponses","duplicate","limit","delimiter3","CMIInteractions","CMIInteractionsObject","_id","_type","_timestamp","_weighting","_learner_response","_result","_latency","_description","correct_responses","id","type","timestamp","weighting","learner_response","nodes","response_type","values","j","latency","description","CMIInteractionsObjectivesObject","CMIInteractionsCorrectResponsesObject","parent","_pattern","_parent","interactionType","isValid","Scorm12ValidationError","check12ValidFormat","check12ValidRange","validationService","validateScore","decimalRegex","scoreRange","invalidTypeCode","invalidRangeCode","validateScorm12Audio","validateScorm12Language","validateScorm12Speed","validateScorm12Text","validateReadOnly","CMIScore","_raw","_min","__score_range","score_range","_max","__invalid_error_code","__invalid_type_code","__invalid_range_code","__decimal_regex","__error_class","raw","min","Scorm2004CMIScore","_scaled","scaled","CMICommentsFromLMS","CMICommentsFromLearner","CMICommentsObject","readOnlyAfterInit","_comment","_location","_readOnlyAfterInit","comment","location","CMIObjectives","findObjectiveById","find","objective","findObjectiveByIndex","setObjectiveByIndex","CMIObjectivesObject","_success_status","_completion_status","_progress_measure","score","success_status","completion_status","progress_measure","CMIMetadata","__version","_version","CMILearner","_learner_id","_learner_name","learner_id","learner_name","CMIStatus","CMISession","_entry","_exit","_session_time","_total_time","entry","exit","session_time","total_time","getCurrentTotalTime","sessionTime","startTime","Util.getSecondsAsISODuration","first","second","Util.addTwoDurations","CMIContent","_launch_data","_suspend_data","launch_data","suspend_data","CMISettings","_credit","_mode","_time_limit_action","_max_time_allowed","credit","time_limit_action","max_time_allowed","CMIThresholds","_scaled_passing_score","_completion_threshold","scaled_passing_score","completion_threshold","CMI","metadata","learner","session","content","thresholds","learner_preference","comments_from_learner","comments_from_lms","ADL","ADLData","_sequencing","nav","ADLNav","adlNav","_request","request_valid","ADLNavRequestValid","request","processNavigationRequest","ADLDataObject","_store","store","_continue","_previous","_choice","_jump","previous","jump","continue","RuleActionType","RuleCondition","condition","operator","parameters","_condition","_operator","_parameters","evaluate","activity","successStatus","objectiveMeasureStatus","greaterThanValue","objectiveNormalizedMeasure","lessThanValue","isCompleted","completionStatus","attemptCount","attemptLimit","fromEntries","SequencingRule","action","conditionCombination","_conditions","_action","_conditionCombination","conditions","addCondition","removeCondition","every","some","SequencingRules","_preConditionRules","_exitConditionRules","_postConditionRules","preConditionRules","addPreConditionRule","rule","exitConditionRules","addExitConditionRule","postConditionRules","addPostConditionRule","evaluatePreConditionRules","evaluateExitConditionRules","evaluatePostConditionRules","RollupCondition","RollupRule","consideration","minimumCount","minimumPercent","_consideration","_minimumCount","_minimumPercent","matchingChildren","child","RollupRules","_rules","rules","addRule","removeRule","processRollup","completionRollup","successRollup","_defaultCompletionRollup","_defaultSuccessRollup","ValidLanguages","Activity","title","_title","_isVisible","_isActive","_isSuspended","_isCompleted","_completionStatus","_successStatus","_attemptCount","_attemptCompletionAmount","_attemptAbsoluteDuration","_attemptExperiencedDuration","_activityAbsoluteDuration","_activityExperiencedDuration","_objectiveSatisfiedStatus","_objectiveMeasureStatus","_objectiveNormalizedMeasure","addChild","removeChild","isVisible","isActive","isSuspended","incrementAttemptCount","attemptCompletionAmount","attemptAbsoluteDuration","attemptExperiencedDuration","activityAbsoluteDuration","activityExperiencedDuration","objectiveSatisfiedStatus","map","ActivityTree","_root","_currentActivity","_suspendedActivity","_activities","root","_addActivitiesToMap","currentActivity","suspendedActivity","getActivity","getAllActivities","getParent","getChildren","getSiblings","getNextSibling","siblings","getPreviousSibling","getFirstChild","getLastChild","getCommonAncestor","activity1","activity2","path1","current","unshift","SequencingControls","_enabled","_choiceExit","_flow","_forwardOnly","_useCurrentAttemptObjectiveInfo","_useCurrentAttemptProgressInfo","_preventActivation","_constrainChoice","_rollupObjectiveSatisfied","_rollupProgressCompletion","_objectiveMeasureWeight","enabled","choiceExit","flow","forwardOnly","useCurrentAttemptObjectiveInfo","useCurrentAttemptProgressInfo","preventActivation","constrainChoice","rollupObjectiveSatisfied","rollupProgressCompletion","objectiveMeasureWeight","isChoiceNavigationAllowed","isFlowNavigationAllowed","isForwardNavigationAllowed","isBackwardNavigationAllowed","Sequencing","_adlNav","_activityTree","_sequencingRules","_sequencingControls","_rollupRules","activityTree","sequencingRules","sequencingControls","rollupRules","preConditionAction","SKIP","DISABLED","HIDE_FROM_CHOICE","STOP_FORWARD_TRAVERSAL","processContinueRequest","processPreviousRequest","processExitRequest","processExitAllRequest","processAbandonRequest","processAbandonAllRequest","processSuspendAllRequest","nextActivity","exitConditionAction","EXIT_PARENT","EXIT_ALL","postConditionAction","RETRY","RETRY_ALL","CONTINUE","PREVIOUS","EXIT","previousActivity","_processRollupRecursive","Scorm2004Impl","mastery_override","_globalObjectives","_extractedScoItemIds","adl","configureSequencing","Initialize","lmsInitialize","Terminate","lmsFinish","GetValue","lmsGetValue","SetValue","lmsSetValue","Commit","lmsCommit","GetLastError","lmsGetLastError","GetErrorString","lmsGetErrorString","GetDiagnostic","lmsGetDiagnostic","version","globalObjectives","internalFinish","navActions","exitAll","abandon","abandonAll","choiceJumpRegex","target","groups","choice_target","jump_target","adlNavRequestRegex","element_base","objective_id","global_index","newGlobalObjective","global_element","createCorrectResponsesObject","interaction","checkDuplicateChoiceResponse","checkValidResponseType","interaction_type","checkCorrectResponseValue","interaction_count","pattern_index","checkDuplicatedPattern","correct_response","current_index","found","count","removeCorrectResponsePrefixes","node","seenOrder","seenCase","seenLang","prefixRegex","langMatches","lang","toLowerCase","replaceWithAnotherScormAPI","newAPI","cmiExport","flattened","Utilities.flatten","totalTimeDuration","totalTimeSeconds","Utilities.getDurationAsSeconds","scoreObject","Number","parseFloat","runtimeData","navRequest","Function","sequencingSettings","configureActivityTree","configureSequencingRules","configureSequencingControls","configureRollupRules","activityTreeSettings","rootActivity","createActivity","extractActivityIds","ids","activitySettings","childSettings","childActivity","sequencingRulesSettings","ruleSettings","createSequencingRule","conditionSettings","sequencingControlsSettings","rollupRulesSettings","createRollupRule"],"mappings":"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"}