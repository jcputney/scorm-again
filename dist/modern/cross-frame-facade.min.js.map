{"version":3,"file":"cross-frame-facade.min.js","sources":["../../src/facades/CrossFrameFacade.ts"],"sourcesContent":["/**\n * CrossFrameFacade.ts\n *\n * This file implements a cross-frame facade for the scorm-again API.\n * It allows communication between frames from different domains using the postMessage API.\n */\n\nimport BaseAPI from \"../BaseAPI\";\n\n/**\n * Type for the message data\n */\nexport type MessageData = {\n  messageId: string;\n  method: string;\n  params: unknown[];\n  sab?: SharedArrayBuffer;\n};\n\n/**\n * Type for the message response\n */\nexport type MessageResponse = {\n  messageId: string;\n  result?: unknown;\n  error?: {\n    message: string;\n    stack?: string;\n  };\n  sab?: SharedArrayBuffer;\n};\n\n/**\n * Interface for the CrossFrameFacade\n */\nexport interface ICrossFrameFacade {\n  /**\n   * Initialize the SCORM API (SCORM 1.2 style) - Asynchronous version\n   * @returns Promise that resolves to true if initialization was successful\n   */\n  initialize(): Promise<boolean>;\n\n  /**\n   * Initialize the SCORM API (SCORM 1.2 style) - Synchronous version\n   * @returns \"true\" if initialization was successful, \"false\" otherwise\n   */\n  lmsInitialize(): string;\n\n  /**\n   * Initialize the SCORM API (SCORM 2004 style) - Asynchronous version\n   * @returns Promise that resolves to true if initialization was successful\n   */\n  Initialize(): Promise<boolean>;\n\n  /**\n   * Initialize the SCORM API (SCORM 2004 style) - Synchronous version\n   * @returns \"true\" if initialization was successful, \"false\" otherwise\n   */\n  LMSInitialize(): string;\n\n  /**\n   * Terminate the SCORM API (SCORM 1.2 style) - Asynchronous version\n   * @returns Promise that resolves to true if termination was successful\n   */\n  terminate(): Promise<boolean>;\n\n  /**\n   * Terminate the SCORM API (SCORM 1.2 style) - Synchronous version\n   * @returns \"true\" if termination was successful, \"false\" otherwise\n   */\n  lmsFinish(): string;\n\n  /**\n   * Terminate the SCORM API (SCORM 2004 style) - Asynchronous version\n   * @returns Promise that resolves to true if termination was successful\n   */\n  Terminate(): Promise<boolean>;\n\n  /**\n   * Terminate the SCORM API (SCORM 2004 style) - Synchronous version\n   * @returns \"true\" if termination was successful, \"false\" otherwise\n   */\n  LMSFinish(): string;\n\n  /**\n   * Get a value from the SCORM API (SCORM 1.2 style) - Asynchronous version\n   * @param element The CMI element to get\n   * @returns Promise that resolves to the value of the CMI element\n   */\n  getValue(element: string): Promise<string>;\n\n  /**\n   * Get a value from the SCORM API (SCORM 1.2 style) - Synchronous version\n   * @param element The CMI element to get\n   * @returns The value of the CMI element\n   */\n  lmsGetValue(element: string): string;\n\n  /**\n   * Get a value from the SCORM API (SCORM 2004 style) - Asynchronous version\n   * @param element The CMI element to get\n   * @returns Promise that resolves to the value of the CMI element\n   */\n  GetValue(element: string): Promise<string>;\n\n  /**\n   * Get a value from the SCORM API (SCORM 2004 style) - Synchronous version\n   * @param element The CMI element to get\n   * @returns The value of the CMI element\n   */\n  LMSGetValue(element: string): string;\n\n  /**\n   * Set a value in the SCORM API (SCORM 1.2 style) - Asynchronous version\n   * @param element The CMI element to set\n   * @param value The value to set\n   * @returns Promise that resolves to true if the value was set successfully\n   */\n  setValue(element: string, value: string | number | boolean): Promise<boolean>;\n\n  /**\n   * Set a value in the SCORM API (SCORM 1.2 style) - Synchronous version\n   * @param element The CMI element to set\n   * @param value The value to set\n   * @returns \"true\" if the value was set successfully, \"false\" otherwise\n   */\n  lmsSetValue(element: string, value: string | number | boolean): string;\n\n  /**\n   * Set a value in the SCORM API (SCORM 2004 style) - Asynchronous version\n   * @param element The CMI element to set\n   * @param value The value to set\n   * @returns Promise that resolves to true if the value was set successfully\n   */\n  SetValue(element: string, value: string | number | boolean): Promise<boolean>;\n\n  /**\n   * Set a value in the SCORM API (SCORM 2004 style) - Synchronous version\n   * @param element The CMI element to set\n   * @param value The value to set\n   * @returns \"true\" if the value was set successfully, \"false\" otherwise\n   */\n  LMSSetValue(element: string, value: string | number | boolean): string;\n\n  /**\n   * Commit changes to the LMS (SCORM 1.2 style) - Asynchronous version\n   * @returns Promise that resolves to true if the commit was successful\n   */\n  commit(): Promise<boolean>;\n\n  /**\n   * Commit changes to the LMS (SCORM 1.2 style) - Synchronous version\n   * @returns \"true\" if the commit was successful, \"false\" otherwise\n   */\n  lmsCommit(): string;\n\n  /**\n   * Commit changes to the LMS (SCORM 2004 style) - Asynchronous version\n   * @returns Promise that resolves to true if the commit was successful\n   */\n  Commit(): Promise<boolean>;\n\n  /**\n   * Commit changes to the LMS (SCORM 2004 style) - Synchronous version\n   * @returns \"true\" if the commit was successful, \"false\" otherwise\n   */\n  LMSCommit(): string;\n\n  /**\n   * Get the last error code (SCORM 1.2 style) - Asynchronous version\n   * @returns Promise that resolves to the last error code as a string\n   */\n  getLastError(): Promise<string>;\n\n  /**\n   * Get the last error code (SCORM 1.2 style) - Synchronous version\n   * @returns The last error code as a string\n   */\n  lmsGetLastError(): string;\n\n  /**\n   * Get the last error code (SCORM 2004 style) - Asynchronous version\n   * @returns Promise that resolves to the last error code as a string\n   */\n  GetLastError(): Promise<string>;\n\n  /**\n   * Get the last error code (SCORM 2004 style) - Synchronous version\n   * @returns The last error code as a string\n   */\n  LMSGetLastError(): string;\n\n  /**\n   * Get the error string for an error code (SCORM 1.2 style) - Asynchronous version\n   * @param errorCode The error code\n   * @returns Promise that resolves to the error string\n   */\n  getErrorString(errorCode: string | number): Promise<string>;\n\n  /**\n   * Get the error string for an error code (SCORM 1.2 style) - Synchronous version\n   * @param errorCode The error code\n   * @returns The error string\n   */\n  lmsGetErrorString(errorCode: string | number): string;\n\n  /**\n   * Get the error string for an error code (SCORM 2004 style) - Asynchronous version\n   * @param errorCode The error code\n   * @returns Promise that resolves to the error string\n   */\n  GetErrorString(errorCode: string | number): Promise<string>;\n\n  /**\n   * Get the error string for an error code (SCORM 2004 style) - Synchronous version\n   * @param errorCode The error code\n   * @returns The error string\n   */\n  LMSGetErrorString(errorCode: string | number): string;\n\n  /**\n   * Get diagnostic information for an error code (SCORM 1.2 style) - Asynchronous version\n   * @param errorCode The error code\n   * @returns Promise that resolves to the diagnostic information\n   */\n  getDiagnostic(errorCode: string | number): Promise<string>;\n\n  /**\n   * Get diagnostic information for an error code (SCORM 1.2 style) - Synchronous version\n   * @param errorCode The error code\n   * @returns The diagnostic information\n   */\n  lmsGetDiagnostic(errorCode: string | number): string;\n\n  /**\n   * Get diagnostic information for an error code (SCORM 2004 style) - Asynchronous version\n   * @param errorCode The error code\n   * @returns Promise that resolves to the diagnostic information\n   */\n  GetDiagnostic(errorCode: string | number): Promise<string>;\n\n  /**\n   * Get diagnostic information for an error code (SCORM 2004 style) - Synchronous version\n   * @param errorCode The error code\n   * @returns The diagnostic information\n   */\n  LMSGetDiagnostic(errorCode: string | number): string;\n\n  /**\n   * Check if the API is currently initialized - Asynchronous version\n   * @returns Promise that resolves to true if the API is initialized\n   */\n  isInitialized(): Promise<boolean>;\n\n  /**\n   * Check if the API is currently initialized - Synchronous version\n   * @returns True if the API is initialized, false otherwise\n   */\n  getIsInitialized(): boolean;\n\n  /**\n   * Register an event listener\n   * @param event The event name\n   * @param callback The callback function\n   */\n  on(event: string, callback: (...args: unknown[]) => void): void;\n\n  /**\n   * Remove an event listener\n   * @param event The event name\n   * @param callback The callback function\n   */\n  off(event: string, callback: (...args: unknown[]) => void): void;\n}\n\n/**\n * Server-side facade that runs in the parent frame where the API is initialized.\n * This facade listens for messages from the client-side facade and proxies them to the actual API.\n */\nexport class CrossFrameLMS {\n  private readonly _api: BaseAPI;\n  private readonly _targetOrigin: string = \"*\";\n\n  /**\n   * Constructor\n   * @param {BaseAPI} api The API instance to use\n   * @param targetOrigin The target origin for postMessage (default: \"*\")\n   */\n  constructor(api: BaseAPI, targetOrigin?: string) {\n    this._api = api;\n\n    // Set target origin if provided\n    if (targetOrigin) {\n      this._targetOrigin = targetOrigin;\n    }\n\n    // Listen for messages from the client-side facade\n    window.addEventListener(\"message\", this._handleMessage.bind(this));\n\n    // Set up event forwarding\n    this._setupEventForwarding();\n  }\n\n  /**\n   * Handle messages from the client-side facade\n   * @param event The message event\n   */\n  private _handleMessage(event: MessageEvent) {\n    const data = event.data as MessageData;\n\n    // Ignore messages that don't have the expected format\n    if (!data || !data.messageId || !data.method) {\n      return;\n    }\n\n    // Process the message\n    this._processMessage(data, event.source as Window, event.origin);\n  }\n\n  /**\n   * Process a message from the client-side facade\n   * @param data The message data\n   * @param source The source window\n   * @param origin The origin of the message\n   */\n  private _processMessage(data: MessageData, source: Window, origin: string) {\n    const { messageId, method, params, sab } = data;\n    let result: any;\n    let error: any;\n\n    try {\n      // Call the appropriate method on the API\n      if (typeof (this._api as unknown as Record<string, Function>)[method] === \"function\") {\n        result = (this._api as unknown as Record<string, Function>)[method](...params);\n      } else {\n        throw new Error(`Method ${method} not found on API`);\n      }\n    } catch (e: unknown) {\n      if (e instanceof Error) {\n        error = {\n          message: e.message,\n          stack: e.stack,\n        };\n      } else {\n        error = {\n          message: String(e),\n        };\n      }\n    }\n\n    // Send the response back to the client-side facade\n    const response: MessageResponse = {\n      messageId,\n      result,\n      error,\n      sab,\n    };\n\n    source.postMessage(response, this._targetOrigin, sab ? [sab] : undefined);\n  }\n\n  /**\n   * Set up event forwarding from the API to the client-side facade\n   */\n  private _setupEventForwarding() {\n    // Forward all events from the API to the client-side facades\n    this._api.on(\"*\", (event: string, ...args: any[]) => {\n      // Get all frames that might contain client-side facades\n      // We get the frames each time an event is triggered to ensure we have the latest frames\n      const frames = Array.from(document.querySelectorAll(\"iframe\"));\n\n      // Send the event to all frames\n      frames.forEach((frame) => {\n        if (frame.contentWindow) {\n          frame.contentWindow.postMessage(\n            {\n              event,\n              args,\n            },\n            this._targetOrigin,\n          );\n        }\n      });\n    });\n  }\n}\n\n/**\n * Client-side facade that runs in the child frame where the module is loaded.\n * This facade sends messages to the server-side facade and provides the same interface as the actual API.\n */\nexport class CrossFrameAPI implements ICrossFrameFacade {\n  private _targetOrigin: string = \"*\";\n  private _pendingRequests: Map<\n    string,\n    {\n      resolve: (value: unknown) => void;\n      reject: (reason?: unknown) => void;\n      source?: Window; // Source window for forwarding responses\n    }\n  > = new Map();\n  private _eventListeners: Map<string, Set<(...args: unknown[]) => void>> = new Map();\n  private _messageIdCounter: number = 0;\n  private _childFrames: Set<Window> = new Set(); // Track child frames that have sent messages\n  private _isInitialized: boolean = false;\n  private _lastError: string = \"0\";\n  private _cache: Map<string, string> = new Map(); // Cache for synchronous operations\n  private _sabBuffers: Map<string, SharedArrayBuffer> = new Map();\n\n  private _syncCall(method: string, params: any[], timeoutMs = 5000): any {\n    // In a test environment, this method might be mocked\n    // so we need to ensure it's testable\n    try {\n      const sab = new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT);\n      const int32 = new Int32Array(sab);\n      const messageId = `${Date.now()}-sync-${this._messageIdCounter++}`;\n      // store sab for matching responses\n      this._sabBuffers.set(messageId, sab);\n      // send the call, transferring sab\n      window.parent.postMessage({ messageId, method, params, sab }, this._targetOrigin, [sab]);\n      // block until notified\n      const status = Atomics.wait(int32, 0, 0, timeoutMs);\n      // cleanup\n      this._sabBuffers.delete(messageId);\n      const pending = this._pendingRequests.get(messageId) || {};\n      this._pendingRequests.delete(messageId);\n      if (status === \"timed-out\") {\n        throw new Error(`SCORM ${method} timeout after ${timeoutMs}ms`);\n      }\n      if ((pending as any).error) throw (pending as any).error;\n      return (pending as any).result;\n    } catch (e) {\n      // If SharedArrayBuffer or Atomics are not available (e.g., in test environment)\n      // or if there's any other error, rethrow it to be handled by the caller\n      throw e;\n    }\n  }\n\n  /**\n   * Constructor\n   * @param targetOrigin The target origin for postMessage (default: \"*\")\n   */\n  constructor(targetOrigin?: string) {\n    // Set target origin if provided\n    if (targetOrigin) {\n      this._targetOrigin = targetOrigin;\n    }\n\n    // Listen for messages from the server-side facade and child frames\n    window.addEventListener(\"message\", this._handleMessage.bind(this));\n  }\n\n  /**\n   * Handle messages from the server-side facade and child frames\n   * @param event The message event\n   */\n  private _handleMessage(event: MessageEvent) {\n    const data = event.data;\n    const source = event.source as Window;\n\n    // Check if the message is from a child frame\n    const isFromChildFrame = source !== window.parent && source !== window;\n\n    // Handle method responses from parent frame\n    if (\n      data.messageId &&\n      (data.result !== undefined || data.error !== undefined) &&\n      !isFromChildFrame\n    ) {\n      this._handleMethodResponse(data);\n    }\n\n    // Handle method requests from child frames\n    if (data.messageId && data.method && isFromChildFrame) {\n      // Add the child frame to our set of known frames\n      this._childFrames.add(source);\n\n      // Forward the message to the parent frame, but keep track of the source\n      const { messageId, method, params } = data;\n      const forwardedMessageId = `forwarded-${messageId}`;\n\n      // Store the promise callbacks with the source window\n      this._pendingRequests.set(forwardedMessageId, {\n        resolve: (result) => {\n          // Forward the result back to the child frame\n          source.postMessage(\n            {\n              messageId,\n              result,\n            },\n            this._targetOrigin,\n          );\n        },\n        reject: (error) => {\n          // Forward the error back to the child frame\n          source.postMessage(\n            {\n              messageId,\n              error,\n            },\n            this._targetOrigin,\n          );\n        },\n        source,\n      });\n\n      // Forward the message to the parent frame\n      window.parent.postMessage(\n        {\n          messageId: forwardedMessageId,\n          method,\n          params,\n        },\n        this._targetOrigin,\n      );\n\n      // Set a timeout to clean up if no response is received\n      setTimeout(() => {\n        if (this._pendingRequests.has(forwardedMessageId)) {\n          const request = this._pendingRequests.get(forwardedMessageId);\n          this._pendingRequests.delete(forwardedMessageId);\n          if (request?.source) {\n            request.source.postMessage(\n              {\n                messageId,\n                error: {\n                  message: `Timeout waiting for response to method ${method}`,\n                },\n              },\n              this._targetOrigin,\n            );\n          }\n        }\n      }, 5000);\n    }\n\n    // Handle events from parent frame\n    if (data.event && !isFromChildFrame) {\n      this._handleEvent(data.event, ...(data.args || []));\n\n      // Forward events to child frames\n      this._forwardEventToChildFrames(data.event, data.args || []);\n    }\n  }\n\n  /**\n   * Handle a method response from the server-side facade\n   * @param data The response data\n   */\n  private _handleMethodResponse(data: MessageResponse) {\n    const { messageId, result, error } = data;\n    if (data.sab) {\n      const int32 = new Int32Array(data.sab);\n      Atomics.store(int32, 0, 1);\n      Atomics.notify(int32, 0);\n    }\n    const pendingRequest = this._pendingRequests.get(messageId);\n    if (pendingRequest) {\n      const { resolve, reject } = pendingRequest;\n      if (error) {\n        reject(error);\n      } else {\n        resolve(result);\n      }\n      this._pendingRequests.delete(messageId);\n    }\n  }\n\n  /**\n   * Handle an event from the server-side facade\n   * @param event The event name\n   * @param args The event arguments\n   */\n  private _handleEvent(event: string, ...args: any[]) {\n    const listeners = this._eventListeners.get(event);\n\n    if (listeners) {\n      listeners.forEach((listener) => {\n        try {\n          listener(...args);\n        } catch (e: unknown) {\n          console.error(`Error in event listener for ${event}:`, e);\n        }\n      });\n    }\n\n    // Also trigger listeners for the \"*\" event\n    const allListeners = this._eventListeners.get(\"*\");\n\n    if (allListeners) {\n      allListeners.forEach((listener) => {\n        try {\n          listener(event, ...args);\n        } catch (e: unknown) {\n          console.error(`Error in \"*\" event listener for ${event}:`, e);\n        }\n      });\n    }\n  }\n\n  /**\n   * Forward an event to all child frames\n   * @param event The event name\n   * @param args The event arguments\n   */\n  private _forwardEventToChildFrames(event: string, args: unknown[]) {\n    // Send the event to all child frames\n    this._childFrames.forEach((frame) => {\n      try {\n        frame.postMessage(\n          {\n            event,\n            args,\n          },\n          this._targetOrigin,\n        );\n      } catch (e: unknown) {\n        console.error(`Error forwarding event to child frame:`, e);\n      }\n    });\n  }\n\n  /**\n   * Send a message to the server-side facade\n   * @param method The method to call\n   * @param params The parameters to pass to the method\n   * @returns A promise that resolves with the result of the method call\n   */\n  private _sendMessage(\n    method: string,\n    params: (string | number | boolean)[] = [],\n  ): Promise<unknown> {\n    // In test environments, we need to handle the case where window.parent.postMessage\n    // might not be properly mocked, which can lead to unhandled promise rejections\n    if (\n      typeof window === \"undefined\" ||\n      typeof window.parent === \"undefined\" ||\n      typeof window.parent.postMessage !== \"function\"\n    ) {\n      // Return a resolved promise with an empty string in test environments\n      return Promise.resolve(\"\");\n    }\n\n    return new Promise((resolve, reject) => {\n      const messageId = `${Date.now()}-${this._messageIdCounter++}`;\n\n      // Store the promise callbacks\n      this._pendingRequests.set(messageId, { resolve, reject });\n\n      try {\n        // Send the message to the parent frame\n        window.parent.postMessage(\n          {\n            messageId,\n            method,\n            params,\n          },\n          this._targetOrigin,\n        );\n\n        // Set a timeout to reject the promise if no response is received\n        setTimeout(() => {\n          if (this._pendingRequests.has(messageId)) {\n            this._pendingRequests.delete(messageId);\n            reject(new Error(`Timeout waiting for response to method ${method}`));\n          }\n        }, 5000);\n      } catch (e) {\n        // If there's an error sending the message, clean up and reject the promise\n        this._pendingRequests.delete(messageId);\n        reject(e);\n      }\n    });\n  }\n\n  /**\n   * Initialize the SCORM API (SCORM 1.2 style) - Asynchronous version\n   * @returns Promise that resolves to true if initialization was successful\n   */\n  async initialize(): Promise<boolean> {\n    const result = await this._sendMessage(\"lmsInitialize\");\n    this._isInitialized = result === \"true\";\n    return this._isInitialized;\n  }\n\n  /**\n   * Initialize the SCORM API (SCORM 1.2 style) - Synchronous version\n   * @returns \"true\" if initialization was successful, \"false\" otherwise\n   */\n  lmsInitialize(): string {\n    try {\n      return String(this._syncCall(\"lmsInitialize\", []));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"false\";\n    }\n  }\n\n  /**\n   * Initialize the SCORM API (SCORM 2004 style) - Asynchronous version\n   * @returns Promise that resolves to true if initialization was successful\n   */\n  async Initialize(): Promise<boolean> {\n    return this.initialize();\n  }\n\n  /**\n   * Initialize the SCORM API (SCORM 2004 style) - Synchronous version\n   * @returns \"true\" if initialization was successful, \"false\" otherwise\n   */\n  LMSInitialize(): string {\n    try {\n      return String(this._syncCall(\"LMSInitialize\", []));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"false\";\n    }\n  }\n\n  /**\n   * Terminate the SCORM API (SCORM 1.2 style) - Asynchronous version\n   * @returns Promise that resolves to true if termination was successful\n   */\n  async terminate(): Promise<boolean> {\n    const result = await this._sendMessage(\"lmsFinish\");\n    const success = result === \"true\";\n    if (success) {\n      this._isInitialized = false;\n    }\n    return success;\n  }\n\n  /**\n   * Terminate the SCORM API (SCORM 1.2 style) - Synchronous version\n   * @returns \"true\" if termination was successful, \"false\" otherwise\n   */\n  lmsFinish(): string {\n    try {\n      return String(this._syncCall(\"lmsFinish\", []));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"false\";\n    }\n  }\n\n  /**\n   * Terminate the SCORM API (SCORM 2004 style) - Asynchronous version\n   * @returns Promise that resolves to true if termination was successful\n   */\n  async Terminate(): Promise<boolean> {\n    return this.terminate();\n  }\n\n  /**\n   * Terminate the SCORM API (SCORM 2004 style) - Synchronous version\n   * @returns \"true\" if termination was successful, \"false\" otherwise\n   */\n  LMSFinish(): string {\n    try {\n      return String(this._syncCall(\"LMSFinish\", []));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"false\";\n    }\n  }\n\n  /**\n   * Get a value from the SCORM API (SCORM 1.2 style) - Asynchronous version\n   * @param element The CMI element to get\n   * @returns Promise that resolves to the value of the CMI element\n   */\n  async getValue(element: string): Promise<string> {\n    try {\n      const result = await this._sendMessage(\"lmsGetValue\", [element]);\n      const value = String(result);\n      // Cache the result for synchronous operations\n      this._cache.set(element, value);\n      return value;\n    } catch (e) {\n      this._lastError = \"101\"; // General exception\n      console.error(`Error in getValue(${element}):`, e);\n      return \"\";\n    }\n  }\n\n  /**\n   * Get a value from the SCORM API (SCORM 1.2 style) - Synchronous version\n   * @param element The CMI element to get\n   * @returns The value of the CMI element\n   */\n  lmsGetValue(element: string): string {\n    try {\n      return String(this._syncCall(\"lmsGetValue\", [element]));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"\";\n    }\n  }\n\n  /**\n   * Get a value from the SCORM API (SCORM 2004 style) - Asynchronous version\n   * @param element The CMI element to get\n   * @returns Promise that resolves to the value of the CMI element\n   */\n  async GetValue(element: string): Promise<string> {\n    return this.getValue(element);\n  }\n\n  /**\n   * Get a value from the SCORM API (SCORM 2004 style) - Synchronous version\n   * @param element The CMI element to get\n   * @returns The value of the CMI element\n   */\n  LMSGetValue(element: string): string {\n    try {\n      return String(this._syncCall(\"LMSGetValue\", [element]));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"\";\n    }\n  }\n\n  /**\n   * Set a value in the SCORM API (SCORM 1.2 style) - Asynchronous version\n   * @param element The CMI element to set\n   * @param value The value to set\n   * @returns Promise that resolves to true if the value was set successfully\n   */\n  async setValue(element: string, value: string | number | boolean): Promise<boolean> {\n    try {\n      const result = await this._sendMessage(\"lmsSetValue\", [element, value]);\n      const success = result === \"true\";\n      if (success) {\n        // Update the cache with the new value\n        this._cache.set(element, String(value));\n      }\n      return success;\n    } catch (e) {\n      this._lastError = \"101\"; // General exception\n      console.error(`Error in setValue(${element}, ${value}):`, e);\n      return false;\n    }\n  }\n\n  /**\n   * Set a value in the SCORM API (SCORM 1.2 style) - Synchronous version\n   * @param element The CMI element to set\n   * @param value The value to set\n   * @returns \"true\" if the value was set successfully, \"false\" otherwise\n   */\n  lmsSetValue(element: string, value: string | number | boolean): string {\n    try {\n      return String(this._syncCall(\"lmsSetValue\", [element, value]));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"false\";\n    }\n  }\n\n  /**\n   * Set a value in the SCORM API (SCORM 2004 style) - Asynchronous version\n   * @param element The CMI element to set\n   * @param value The value to set\n   * @returns Promise that resolves to true if the value was set successfully\n   */\n  async SetValue(element: string, value: string | number | boolean): Promise<boolean> {\n    return this.setValue(element, value);\n  }\n\n  /**\n   * Set a value in the SCORM API (SCORM 2004 style) - Synchronous version\n   * @param element The CMI element to set\n   * @param value The value to set\n   * @returns \"true\" if the value was set successfully, \"false\" otherwise\n   */\n  LMSSetValue(element: string, value: string | number | boolean): string {\n    try {\n      return String(this._syncCall(\"LMSSetValue\", [element, value]));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"false\";\n    }\n  }\n\n  /**\n   * Commit changes to the LMS (SCORM 1.2 style) - Asynchronous version\n   * @returns Promise that resolves to true if the commit was successful\n   */\n  async commit(): Promise<boolean> {\n    try {\n      const result = await this._sendMessage(\"lmsCommit\");\n      return result === \"true\";\n    } catch (e) {\n      this._lastError = \"101\"; // General exception\n      console.error(\"Error in commit:\", e);\n      return false;\n    }\n  }\n\n  /**\n   * Commit changes to the LMS (SCORM 1.2 style) - Synchronous version\n   * @returns \"true\" if the commit was successful, \"false\" otherwise\n   */\n  lmsCommit(): string {\n    try {\n      return String(this._syncCall(\"lmsCommit\", []));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"false\";\n    }\n  }\n\n  /**\n   * Commit changes to the LMS (SCORM 2004 style) - Asynchronous version\n   * @returns Promise that resolves to true if the commit was successful\n   */\n  async Commit(): Promise<boolean> {\n    return this.commit();\n  }\n\n  /**\n   * Commit changes to the LMS (SCORM 2004 style) - Synchronous version\n   * @returns \"true\" if the commit was successful, \"false\" otherwise\n   */\n  LMSCommit(): string {\n    try {\n      return String(this._syncCall(\"LMSCommit\", []));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"false\";\n    }\n  }\n\n  /**\n   * Get the last error code (SCORM 1.2 style) - Asynchronous version\n   * @returns Promise that resolves to the last error code as a string\n   */\n  async getLastError(): Promise<string> {\n    try {\n      const result = await this._sendMessage(\"lmsGetLastError\");\n      this._lastError = String(result);\n      return this._lastError;\n    } catch (e) {\n      console.error(\"Error in getLastError:\", e);\n      return \"101\"; // General exception\n    }\n  }\n\n  /**\n   * Get the last error code (SCORM 1.2 style) - Synchronous version\n   * @returns The last error code as a string\n   */\n  lmsGetLastError(): string {\n    try {\n      return String(this._syncCall(\"lmsGetLastError\", []));\n    } catch (e) {\n      return \"101\";\n    }\n  }\n\n  /**\n   * Get the last error code (SCORM 2004 style) - Asynchronous version\n   * @returns Promise that resolves to the last error code as a string\n   */\n  async GetLastError(): Promise<string> {\n    return this.getLastError();\n  }\n\n  /**\n   * Get the last error code (SCORM 2004 style) - Synchronous version\n   * @returns The last error code as a string\n   */\n  LMSGetLastError(): string {\n    try {\n      return String(this._syncCall(\"LMSGetLastError\", []));\n    } catch (e) {\n      return \"101\";\n    }\n  }\n\n  /**\n   * Get the error string for an error code (SCORM 1.2 style) - Asynchronous version\n   * @param errorCode The error code\n   * @returns Promise that resolves to the error string\n   */\n  async getErrorString(errorCode: string | number): Promise<string> {\n    try {\n      const result = await this._sendMessage(\"lmsGetErrorString\", [errorCode]);\n      const errorString = String(result);\n      // Cache the result for synchronous operations\n      this._cache.set(`error_${errorCode}`, errorString);\n      return errorString;\n    } catch (e) {\n      console.error(`Error in getErrorString(${errorCode}):`, e);\n      return \"\";\n    }\n  }\n\n  /**\n   * Get the error string for an error code (SCORM 1.2 style) - Synchronous version\n   * @param errorCode The error code\n   * @returns The error string\n   */\n  lmsGetErrorString(errorCode: string | number): string {\n    try {\n      return String(this._syncCall(\"lmsGetErrorString\", [errorCode]));\n    } catch (e) {\n      return \"No error\";\n    }\n  }\n\n  /**\n   * Get the error string for an error code (SCORM 2004 style) - Asynchronous version\n   * @param errorCode The error code\n   * @returns Promise that resolves to the error string\n   */\n  async GetErrorString(errorCode: string | number): Promise<string> {\n    return this.getErrorString(errorCode);\n  }\n\n  /**\n   * Get the error string for an error code (SCORM 2004 style) - Synchronous version\n   * @param errorCode The error code\n   * @returns The error string\n   */\n  LMSGetErrorString(errorCode: string | number): string {\n    try {\n      return String(this._syncCall(\"LMSGetErrorString\", [errorCode]));\n    } catch (e) {\n      return \"No error\";\n    }\n  }\n\n  /**\n   * Get diagnostic information for an error code (SCORM 1.2 style) - Asynchronous version\n   * @param errorCode The error code\n   * @returns Promise that resolves to the diagnostic information\n   */\n  async getDiagnostic(errorCode: string | number): Promise<string> {\n    try {\n      const result = await this._sendMessage(\"lmsGetDiagnostic\", [errorCode]);\n      const diagnostic = String(result);\n      // Cache the result for synchronous operations\n      this._cache.set(`diagnostic_${errorCode}`, diagnostic);\n      return diagnostic;\n    } catch (e) {\n      console.error(`Error in getDiagnostic(${errorCode}):`, e);\n      return \"\";\n    }\n  }\n\n  /**\n   * Get diagnostic information for an error code (SCORM 1.2 style) - Synchronous version\n   * @param errorCode The error code\n   * @returns The diagnostic information\n   */\n  lmsGetDiagnostic(errorCode: string | number): string {\n    try {\n      return String(this._syncCall(\"lmsGetDiagnostic\", [errorCode]));\n    } catch (e) {\n      return \"No diagnostic information available\";\n    }\n  }\n\n  /**\n   * Get diagnostic information for an error code (SCORM 2004 style) - Asynchronous version\n   * @param errorCode The error code\n   * @returns Promise that resolves to the diagnostic information\n   */\n  async GetDiagnostic(errorCode: string | number): Promise<string> {\n    return this.getDiagnostic(errorCode);\n  }\n\n  /**\n   * Get diagnostic information for an error code (SCORM 2004 style) - Synchronous version\n   * @param errorCode The error code\n   * @returns The diagnostic information\n   */\n  LMSGetDiagnostic(errorCode: string | number): string {\n    try {\n      return String(this._syncCall(\"LMSGetDiagnostic\", [errorCode]));\n    } catch (e) {\n      return \"No diagnostic information available\";\n    }\n  }\n\n  /**\n   * Check if the API is currently initialized - Asynchronous version\n   * @returns Promise that resolves to true if the API is initialized\n   */\n  async isInitialized(): Promise<boolean> {\n    try {\n      const result = await this._sendMessage(\"isInitialized\");\n      this._isInitialized = Boolean(result);\n      return this._isInitialized;\n    } catch (e) {\n      console.error(\"Error in isInitialized:\", e);\n      return this._isInitialized;\n    }\n  }\n\n  /**\n   * Check if the API is currently initialized - Synchronous version\n   * @returns True if the API is initialized, false otherwise\n   */\n  getIsInitialized(): boolean {\n    // In test environments, starting an async operation can cause issues\n    // with unhandled promise rejections, so we'll just return the current value\n    return this._isInitialized;\n  }\n\n  /**\n   * Register an event listener\n   * @param event The event name\n   * @param callback The callback function\n   */\n  on(event: string, callback: (...args: unknown[]) => void): void {\n    if (!this._eventListeners.has(event)) {\n      this._eventListeners.set(event, new Set());\n    }\n\n    const listeners = this._eventListeners.get(event);\n    if (listeners) {\n      listeners.add(callback);\n    }\n  }\n\n  /**\n   * Remove an event listener\n   * @param event The event name\n   * @param callback The callback function\n   */\n  off(event: string, callback: (...args: unknown[]) => void): void {\n    const listeners = this._eventListeners.get(event);\n\n    if (listeners) {\n      listeners.delete(callback);\n\n      if (listeners.size === 0) {\n        this._eventListeners.delete(event);\n      }\n    }\n  }\n}\n\n/**\n * Factory function to create a CrossFrameServer instance\n * @param {BaseAPI} api The API instance to use\n * @param targetOrigin The target origin for postMessage\n * @returns A CrossFrameServer instance\n */\nexport function createCrossFrameServer(api: BaseAPI, targetOrigin?: string): CrossFrameLMS {\n  return new CrossFrameLMS(api, targetOrigin);\n}\n\n/**\n * Factory function to create a CrossFrameClient instance\n * @param targetOrigin The target origin for postMessage\n * @returns A CrossFrameClient instance\n */\nexport function createCrossFrameClient(targetOrigin?: string): CrossFrameAPI {\n  return new CrossFrameAPI(targetOrigin);\n}\n"],"names":["CrossFrameLMS","constructor","api","targetOrigin","this","_targetOrigin","_api","window","addEventListener","_handleMessage","bind","_setupEventForwarding","event","data","messageId","method","_processMessage","source","origin","params","sab","result","error","Error","e","message","stack","String","postMessage","on","args","Array","from","document","querySelectorAll","forEach","frame","contentWindow","CrossFrameAPI","_pendingRequests","Map","_eventListeners","_messageIdCounter","_childFrames","Set","_isInitialized","_lastError","_cache","_sabBuffers","_syncCall","timeoutMs","SharedArrayBuffer","Int32Array","BYTES_PER_ELEMENT","int32","Date","now","set","parent","status","Atomics","wait","delete","pending","get","isFromChildFrame","_handleMethodResponse","add","forwardedMessageId","resolve","reject","setTimeout","has","request","_handleEvent","_forwardEventToChildFrames","store","notify","pendingRequest","listeners","listener","console","allListeners","_sendMessage","Promise","initialize","lmsInitialize","Initialize","LMSInitialize","terminate","success","lmsFinish","Terminate","LMSFinish","getValue","element","value","lmsGetValue","GetValue","LMSGetValue","setValue","lmsSetValue","SetValue","LMSSetValue","commit","lmsCommit","Commit","LMSCommit","getLastError","lmsGetLastError","GetLastError","LMSGetLastError","getErrorString","errorCode","errorString","lmsGetErrorString","GetErrorString","LMSGetErrorString","getDiagnostic","diagnostic","lmsGetDiagnostic","GetDiagnostic","LMSGetDiagnostic","isInitialized","getIsInitialized","callback","off","size"],"mappings":"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"}