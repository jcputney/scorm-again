{"version":3,"file":"cross-frame-api.js","sources":["../../src/constants/error_codes.ts","../../src/CrossFrameAPI.ts"],"sourcesContent":["export type ErrorCode = {\n  [key: string]: number;\n};\n\nexport const global_errors: ErrorCode = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nexport const scorm12_errors: ErrorCode = {\n  ...global_errors,\n  RETRIEVE_BEFORE_INIT: 301,\n  STORE_BEFORE_INIT: 301,\n  COMMIT_BEFORE_INIT: 301,\n  ARGUMENT_ERROR: 201,\n  CHILDREN_ERROR: 202,\n  COUNT_ERROR: 203,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 401,\n  VALUE_NOT_INITIALIZED: 301,\n  INVALID_SET_VALUE: 402,\n  READ_ONLY_ELEMENT: 403,\n  WRITE_ONLY_ELEMENT: 404,\n  TYPE_MISMATCH: 405,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n\nexport const scorm2004_errors: ErrorCode = {\n  ...global_errors,\n  INITIALIZATION_FAILED: 102,\n  INITIALIZED: 103,\n  TERMINATED: 104,\n  TERMINATION_FAILURE: 111,\n  TERMINATION_BEFORE_INIT: 112,\n  MULTIPLE_TERMINATIONS: 113,\n  RETRIEVE_BEFORE_INIT: 122,\n  RETRIEVE_AFTER_TERM: 123,\n  STORE_BEFORE_INIT: 132,\n  STORE_AFTER_TERM: 133,\n  COMMIT_BEFORE_INIT: 142,\n  COMMIT_AFTER_TERM: 143,\n  ARGUMENT_ERROR: 201,\n  GENERAL_GET_FAILURE: 301,\n  GENERAL_SET_FAILURE: 351,\n  GENERAL_COMMIT_FAILURE: 391,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 402,\n  VALUE_NOT_INITIALIZED: 403,\n  READ_ONLY_ELEMENT: 404,\n  WRITE_ONLY_ELEMENT: 405,\n  TYPE_MISMATCH: 406,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n","// src/CrossFrameAPI.ts\nimport { MessageData, MessageResponse } from \"./types/CrossFrame\";\nimport { global_errors } from \"./constants/error_codes\";\n\n/**\n * Client-side SCORM façade running in your content frame.\n * Returns cached/default values synchronously, then fires off an async\n * postMessage to the LMS frame to refresh cache and error state.\n */\nexport default class CrossFrameAPI {\n  private _cache = new Map<string, string>();\n  private _lastError = \"0\";\n  private _pending = new Map<string, { resolve: (v: any) => void; reject: (e: any) => void }>();\n  private _counter = 0;\n  private readonly _origin: string;\n\n  private _handler: ProxyHandler<CrossFrameAPI> = {\n    get: (target, prop, receiver) => {\n      // If it's an existing property/method, return it\n      if (typeof prop !== \"string\" || prop in target) {\n        const v = Reflect.get(target, prop, receiver);\n        return typeof v === \"function\" ? v.bind(target) : v;\n      }\n\n      // Otherwise treat prop as a SCORM call\n      const methodName = prop;\n      const isGet = methodName.endsWith(\"GetValue\");\n      const isSet = methodName.startsWith(\"LMSSet\") || methodName.endsWith(\"SetValue\");\n      const isInit = methodName === \"Initialize\" || methodName === \"LMSInitialize\";\n      const isFinish = methodName === \"Terminate\" || methodName === \"LMSFinish\";\n      const isCommit = methodName === \"Commit\" || methodName === \"LMSCommit\";\n\n      return (...args: any[]): string => {\n        // Synchronous cache update for setter calls\n        if (isSet && args.length >= 2) {\n          target._cache.set(args[0], String(args[1]));\n          target._lastError = \"0\";\n        }\n\n        // Fire off async postMessage to refresh cache & error\n        target\n          ._post(methodName, args)\n          .then((res) => {\n            if (isGet && args.length >= 1) {\n              target._cache.set(args[0], String(res));\n              target._lastError = \"0\";\n            }\n            if (methodName === \"GetLastError\" || methodName === \"LMSGetLastError\") {\n              target._lastError = String(res);\n            }\n          })\n          .catch((err) => target._capture(methodName, err));\n\n        // Return synchronously\n        if (isGet && args.length >= 1) {\n          return target._cache.get(args[0]) ?? \"\";\n        }\n        if (isInit || isFinish || isCommit || isSet) {\n          // Immediately return “true”\n          const result = \"true\";\n          // Then warm cache:\n          target\n            ._post(\"getFlattenedCMI\", [])\n            .then((all: Record<string, string>) => {\n              Object.entries(all).forEach(([key, val]) => {\n                target._cache.set(key, val);\n              });\n              // reset error\n              target._lastError = \"0\";\n            })\n            .catch((err) => target._capture(\"getFlattenedCMI\", err));\n          return result;\n        }\n        if (methodName === \"GetLastError\" || methodName === \"LMSGetLastError\") {\n          return target._lastError;\n        }\n        return \"\";\n      };\n    },\n  };\n\n  constructor(targetOrigin: string = \"*\") {\n    this._origin = targetOrigin;\n    window.addEventListener(\"message\", this._onMessage.bind(this));\n    return new Proxy(this, this._handler);\n  }\n\n  /** Send a message to the LMS frame and return a promise for its response */\n  private _post(method: string, params: any[]): Promise<any> {\n    const messageId = `cfapi-${Date.now()}-${this._counter++}`;\n\n    // Deep‐clean params of non-cloneables (e.g. functions)\n    const safeParams = params.map((p) => {\n      if (typeof p === \"function\") {\n        console.warn(\"Dropping function param when posting SCORM call:\", method);\n        return undefined;\n      }\n      return p;\n    });\n\n    return new Promise((resolve, reject) => {\n      this._pending.set(messageId, { resolve, reject });\n      const msg: MessageData = { messageId, method, params: safeParams };\n      window.parent.postMessage(msg, this._origin);\n      // Optional timeout\n      setTimeout(() => {\n        if (this._pending.has(messageId)) {\n          this._pending.delete(messageId);\n          reject(new Error(`Timeout calling ${method}`));\n        }\n      }, 5000);\n    });\n  }\n\n  /** Handle incoming postMessage responses from the LMS frame */\n  private _onMessage(ev: MessageEvent) {\n    const data = ev.data as MessageResponse;\n    if (!data?.messageId) return;\n    const pending = this._pending.get(data.messageId);\n    if (!pending) return;\n    this._pending.delete(data.messageId);\n    if (data.error) pending.reject(data.error);\n    else pending.resolve(data.result);\n  }\n\n  /** Capture and cache SCORM errors */\n  private _capture(method: string, err: any) {\n    console.error(`CrossFrameAPI ${method} error:`, err);\n    const code = (/(\\d{3})/.exec(err.message) || [])[1] || global_errors.GENERAL;\n    this._lastError = String(code);\n    this._cache.set(`error_${code}`, err.message);\n  }\n}\n"],"names":[],"mappings":"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"}