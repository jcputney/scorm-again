{"version":3,"file":"scorm12.js","sources":["../../src/constants/api_constants.ts","../../src/constants/error_codes.ts","../../src/constants/regex.ts","../../src/exceptions.ts","../../src/exceptions/scorm12_exceptions.ts","../../src/cmi/common/base_cmi.ts","../../src/utilities.ts","../../src/cmi/common/validation.ts","../../src/cmi/scorm12/validation.ts","../../src/services/ValidationService.ts","../../src/cmi/common/score.ts","../../src/cmi/aicc/core.ts","../../src/cmi/common/array.ts","../../src/cmi/scorm12/objectives.ts","../../src/cmi/scorm12/student_data.ts","../../src/cmi/scorm12/student_preference.ts","../../src/cmi/scorm12/interactions.ts","../../src/cmi/scorm12/cmi.ts","../../src/cmi/scorm12/nav.ts","../../src/constants/enums.ts","../../src/constants/default_settings.ts","../../src/types/scheduled_commit.ts","../../src/services/HttpService.ts","../../src/services/EventService.ts","../../src/services/SerializationService.ts","../../src/services/LoggingService.ts","../../src/services/ErrorHandlingService.ts","../../src/services/OfflineStorageService.ts","../../src/BaseAPI.ts","../../src/Scorm12API.ts"],"sourcesContent":["interface ErrorDescription {\n  basicMessage: string;\n  detailMessage: string;\n}\n\ninterface ErrorDescriptions {\n  [key: string]: ErrorDescription;\n}\n\ninterface ScormConstants {\n  cmi_children: string;\n  core_children: string;\n  score_children: string;\n  comments_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface AiccConstants extends ScormConstants {\n  student_demographics_children: string;\n  tries_children: string;\n  attempt_records_children: string;\n  paths_children: string;\n}\n\ninterface Scorm2004Constants {\n  cmi_children: string;\n  comments_children: string;\n  score_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  adl_data_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface GlobalConstants {\n  SCORM_TRUE: string;\n  SCORM_FALSE: string;\n  STATE_NOT_INITIALIZED: number;\n  STATE_INITIALIZED: number;\n  STATE_TERMINATED: number;\n}\n\nexport const global_constants: GlobalConstants = {\n  SCORM_TRUE: \"true\",\n  SCORM_FALSE: \"false\",\n  STATE_NOT_INITIALIZED: 0,\n  STATE_INITIALIZED: 1,\n  STATE_TERMINATED: 2,\n};\n\nexport const scorm12_constants: ScormConstants = {\n  // Children lists\n  cmi_children:\n    \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions\",\n  core_children:\n    \"student_id,student_name,lesson_location,credit,lesson_status,entry,score,total_time,lesson_mode,exit,session_time\",\n  score_children: \"raw,min,max\",\n  comments_children: \"content,location,time\",\n  objectives_children: \"id,score,status\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio,language,speed,text\",\n  interactions_children:\n    \"id,objectives,time,type,correct_responses,weighting,student_response,result,latency\",\n  error_descriptions: {\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage: \"No specific error code exists to describe the error.\",\n    },\n    \"201\": {\n      basicMessage: \"Invalid argument error\",\n      detailMessage:\n        \"Indicates that an argument represents an invalid data model element or is otherwise incorrect.\",\n    },\n    \"202\": {\n      basicMessage: \"Element cannot have children\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_children\" for a data model element that does not support the \"_children\" suffix.',\n    },\n    \"203\": {\n      basicMessage: \"Element not an array - cannot have count\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_count\" for a data model element that does not support the \"_count\" suffix.',\n    },\n    \"301\": {\n      basicMessage: \"Not initialized\",\n      detailMessage: \"Indicates that an API call was made before the call to lmsInitialize.\",\n    },\n    \"401\": {\n      basicMessage: \"Not implemented error\",\n      detailMessage:\n        \"The data model element indicated in a call to LMSGetValue or LMSSetValue is valid, but was not implemented by this LMS. SCORM 1.2 defines a set of data model elements as being optional for an LMS to implement.\",\n    },\n    \"402\": {\n      basicMessage: \"Invalid set value, element is a keyword\",\n      detailMessage:\n        'Indicates that LMSSetValue was called on a data model element that represents a keyword (elements that end in \"_children\" and \"_count\").',\n    },\n    \"403\": {\n      basicMessage: \"Element is read only\",\n      detailMessage: \"LMSSetValue was called with a data model element that can only be read.\",\n    },\n    \"404\": {\n      basicMessage: \"Element is write only\",\n      detailMessage: \"LMSGetValue was called on a data model element that can only be written to.\",\n    },\n    \"405\": {\n      basicMessage: \"Incorrect Data Type\",\n      detailMessage:\n        \"LMSSetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a LMSSetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\nexport const aicc_constants: AiccConstants = {\n  ...scorm12_constants,\n  ...{\n    cmi_children:\n      \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions,evaluation\",\n    student_preference_children:\n      \"audio,language,lesson_type,speed,text,text_color,text_location,text_size,video,windows\",\n    student_data_children: \"attempt_number,tries,mastery_score,max_time_allowed,time_limit_action\",\n    student_demographics_children:\n      \"city,class,company,country,experience,familiar_name,instructor_name,title,native_language,state,street_address,telephone,years_experience\",\n    tries_children: \"time,status,score\",\n    attempt_records_children: \"score,lesson_status\",\n    paths_children: \"location_id,date,time,status,why_left,time_in_element\",\n  },\n};\n\nexport const scorm2004_constants: Scorm2004Constants = {\n  // Children lists\n  cmi_children:\n    \"_version,comments_from_learner,comments_from_lms,completion_status,credit,entry,exit,interactions,launch_data,learner_id,learner_name,learner_preference,location,max_time_allowed,mode,objectives,progress_measure,scaled_passing_score,score,session_time,success_status,suspend_data,time_limit_action,total_time\",\n  comments_children: \"comment,timestamp,location\",\n  score_children: \"max,raw,scaled,min\",\n  objectives_children: \"progress_measure,completion_status,success_status,description,score,id\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio_level,audio_captioning,delivery_speed,language\",\n  interactions_children:\n    \"id,type,objectives,timestamp,correct_responses,weighting,learner_response,result,latency,description\",\n  adl_data_children: \"id,store\",\n  error_descriptions: {\n    \"0\": {\n      basicMessage: \"No Error\",\n      detailMessage: \"No error occurred, the previous API call was successful.\",\n    },\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage: \"No specific error code exists to describe the error.\",\n    },\n    \"102\": {\n      basicMessage: \"General Initialization Failure\",\n      detailMessage: \"Call to Initialize failed for an unknown reason.\",\n    },\n    \"103\": {\n      basicMessage: \"Already Initialized\",\n      detailMessage: \"Call to Initialize failed because Initialize was already called.\",\n    },\n    \"104\": {\n      basicMessage: \"Content Instance Terminated\",\n      detailMessage: \"Call to Initialize failed because Terminate was already called.\",\n    },\n    \"111\": {\n      basicMessage: \"General Termination Failure\",\n      detailMessage: \"Call to Terminate failed for an unknown reason.\",\n    },\n    \"112\": {\n      basicMessage: \"Termination Before Initialization\",\n      detailMessage: \"Call to Terminate failed because it was made before the call to Initialize.\",\n    },\n    \"113\": {\n      basicMessage: \"Termination After Termination\",\n      detailMessage: \"Call to Terminate failed because Terminate was already called.\",\n    },\n    \"122\": {\n      basicMessage: \"Retrieve Data Before Initialization\",\n      detailMessage: \"Call to GetValue failed because it was made before the call to Initialize.\",\n    },\n    \"123\": {\n      basicMessage: \"Retrieve Data After Termination\",\n      detailMessage: \"Call to GetValue failed because it was made after the call to Terminate.\",\n    },\n    \"132\": {\n      basicMessage: \"Store Data Before Initialization\",\n      detailMessage: \"Call to SetValue failed because it was made before the call to Initialize.\",\n    },\n    \"133\": {\n      basicMessage: \"Store Data After Termination\",\n      detailMessage: \"Call to SetValue failed because it was made after the call to Terminate.\",\n    },\n    \"142\": {\n      basicMessage: \"Commit Before Initialization\",\n      detailMessage: \"Call to Commit failed because it was made before the call to Initialize.\",\n    },\n    \"143\": {\n      basicMessage: \"Commit After Termination\",\n      detailMessage: \"Call to Commit failed because it was made after the call to Terminate.\",\n    },\n    \"201\": {\n      basicMessage: \"General Argument Error\",\n      detailMessage:\n        \"An invalid argument was passed to an API method (usually indicates that Initialize, Commit or Terminate did not receive the expected empty string argument.\",\n    },\n    \"301\": {\n      basicMessage: \"General Get Failure\",\n      detailMessage:\n        \"Indicates a failed GetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"351\": {\n      basicMessage: \"General Set Failure\",\n      detailMessage:\n        \"Indicates a failed SetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"391\": {\n      basicMessage: \"General Commit Failure\",\n      detailMessage:\n        \"Indicates a failed Commit call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"401\": {\n      basicMessage: \"Undefined Data Model Element\",\n      detailMessage:\n        \"The data model element name passed to GetValue or SetValue is not a valid SCORM data model element.\",\n    },\n    \"402\": {\n      basicMessage: \"Unimplemented Data Model Element\",\n      detailMessage:\n        \"The data model element indicated in a call to GetValue or SetValue is valid, but was not implemented by this LMS. In SCORM 2004, this error would indicate an LMS that is not fully SCORM conformant.\",\n    },\n    \"403\": {\n      basicMessage: \"Data Model Element Value Not Initialized\",\n      detailMessage:\n        \"Attempt to read a data model element that has not been initialized by the LMS or through a SetValue call. This error condition is often reached during normal execution of a SCO.\",\n    },\n    \"404\": {\n      basicMessage: \"Data Model Element Is Read Only\",\n      detailMessage: \"SetValue was called with a data model element that can only be read.\",\n    },\n    \"405\": {\n      basicMessage: \"Data Model Element Is Write Only\",\n      detailMessage: \"GetValue was called on a data model element that can only be written to.\",\n    },\n    \"406\": {\n      basicMessage: \"Data Model Element Type Mismatch\",\n      detailMessage:\n        \"SetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Data Model Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a SetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\n","export type ErrorCode = {\n  [key: string]: number;\n};\n\nexport const global_errors: ErrorCode = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nexport const scorm12_errors: ErrorCode = {\n  ...global_errors,\n  RETRIEVE_BEFORE_INIT: 301,\n  STORE_BEFORE_INIT: 301,\n  COMMIT_BEFORE_INIT: 301,\n  ARGUMENT_ERROR: 201,\n  CHILDREN_ERROR: 202,\n  COUNT_ERROR: 203,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 401,\n  VALUE_NOT_INITIALIZED: 301,\n  INVALID_SET_VALUE: 402,\n  READ_ONLY_ELEMENT: 403,\n  WRITE_ONLY_ELEMENT: 404,\n  TYPE_MISMATCH: 405,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n\nexport const scorm2004_errors: ErrorCode = {\n  ...global_errors,\n  INITIALIZATION_FAILED: 102,\n  INITIALIZED: 103,\n  TERMINATED: 104,\n  TERMINATION_FAILURE: 111,\n  TERMINATION_BEFORE_INIT: 112,\n  MULTIPLE_TERMINATIONS: 113,\n  RETRIEVE_BEFORE_INIT: 122,\n  RETRIEVE_AFTER_TERM: 123,\n  STORE_BEFORE_INIT: 132,\n  STORE_AFTER_TERM: 133,\n  COMMIT_BEFORE_INIT: 142,\n  COMMIT_AFTER_TERM: 143,\n  ARGUMENT_ERROR: 201,\n  GENERAL_GET_FAILURE: 301,\n  GENERAL_SET_FAILURE: 351,\n  GENERAL_COMMIT_FAILURE: 391,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 402,\n  VALUE_NOT_INITIALIZED: 403,\n  READ_ONLY_ELEMENT: 404,\n  WRITE_ONLY_ELEMENT: 405,\n  TYPE_MISMATCH: 406,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n","export const scorm12_regex = {\n  CMIString256: \"^.{0,255}$\",\n  CMIString4096: \"^.{0,4096}$\",\n  CMITime: \"^(?:[01]\\\\d|2[0123]):(?:[012345]\\\\d):(?:[012345]\\\\d)$\",\n  CMITimespan: \"^([0-9]{2,}):([0-9]{2}):([0-9]{2})(.[0-9]{1,2})?$\",\n\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{0,3})(.[0-9]*)?$\",\n\n  CMIIdentifier: \"^[\\\\u0021-\\\\u007E\\\\s]{0,255}$\",\n  CMIFeedback: \"^.{0,255}$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMIStatus: \"^(passed|completed|failed|incomplete|browsed)$\",\n  CMIStatus2: \"^(passed|completed|failed|incomplete|browsed|not attempted)$\",\n  CMIExit: \"^(time-out|suspend|logout|)$\",\n  CMIType: \"^(true-false|choice|fill-in|matching|performance|sequencing|likert|numeric)$\",\n  CMIResult: \"^(correct|wrong|unanticipated|neutral|([0-9]{0,3})?(\\\\.[0-9]*)?)$\",\n  NAVEvent: \"^(previous|continue)$\",\n  // Data ranges\n  score_range: \"0#100\",\n  audio_range: \"-1#100\",\n  speed_range: \"-100#100\",\n  weighting_range: \"-100#100\",\n  text_range: \"-1#1\",\n};\nexport const aicc_regex = {\n  ...scorm12_regex,\n  ...{\n    CMIIdentifier: \"^\\\\w{1,255}$\",\n  },\n};\nexport const scorm2004_regex = {\n  CMIString200: \"^[\\\\u0000-\\\\uFFFF]{0,200}$\",\n  CMIString250: \"^[\\\\u0000-\\\\uFFFF]{0,250}$\",\n  CMIString1000: \"^[\\\\u0000-\\\\uFFFF]{0,1000}$\",\n  CMIString4000: \"^[\\\\u0000-\\\\uFFFF]{0,4000}$\",\n  CMIString64000: \"^[\\\\u0000-\\\\uFFFF]{0,64000}$\",\n  CMILang: \"^([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?$|^$\",\n\n  CMILangString250: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,250}$)?$\",\n\n  CMILangcr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?}))(.*?)$\",\n\n  CMILangString250cr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?})?(.{0,250})?)?$\",\n\n  CMILangString4000: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,4000}$)?$\",\n\n  CMITime:\n    \"^(19[7-9]{1}[0-9]{1}|20[0-2]{1}[0-9]{1}|203[0-8]{1})((-(0[1-9]{1}|1[0-2]{1}))((-(0[1-9]{1}|[1-2]{1}[0-9]{1}|3[0-1]{1}))(T([0-1]{1}[0-9]{1}|2[0-3]{1})((:[0-5]{1}[0-9]{1})((:[0-5]{1}[0-9]{1})((\\\\.[0-9]{1,6})((Z|([+|-]([0-1]{1}[0-9]{1}|2[0-3]{1})))(:[0-5]{1}[0-9]{1})?)?)?)?)?)?)?)?$\",\n  CMITimespan:\n    \"^P(?:([.,\\\\d]+)Y)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)W)?(?:([.,\\\\d]+)D)?(?:T?(?:([.,\\\\d]+)H)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)S)?)?$\",\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{1,5})(\\\\.[0-9]{1,18})?$\",\n  CMIIdentifier: \"^\\\\S{1,250}[a-zA-Z0-9]$\",\n  CMIShortIdentifier: \"^[\\\\w\\\\.\\\\-\\\\_]{1,250}$\",\n  CMILongIdentifier: \"^(?:(?!urn:)\\\\S{1,4000}|urn:[A-Za-z0-9-]{1,31}:\\\\S{1,4000}|.{1,4000})$\",\n  // need to re-examine this\n  CMIFeedback: \"^.*$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  CMIIndexStore: \".N(\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMICStatus: \"^(completed|incomplete|not attempted|unknown)$\",\n  CMISStatus: \"^(passed|failed|unknown)$\",\n  CMIExit: \"^(time-out|suspend|logout|normal)$\",\n  CMIType:\n    \"^(true-false|choice|fill-in|long-fill-in|matching|performance|sequencing|likert|numeric|other)$\",\n  CMIResult: \"^(correct|incorrect|unanticipated|neutral|-?([0-9]{1,4})(\\\\.[0-9]{1,18})?)$\",\n  NAVEvent:\n    \"^(previous|continue|exit|exitAll|abandon|abandonAll|suspendAll|_none_|(\\\\{target=(?<choice_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?choice|(\\\\{target=(?<jump_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?jump)$\",\n\n  NAVBoolean: \"^(unknown|true|false$)\",\n  NAVTarget: \"^{target=\\\\S{0,}[a-zA-Z0-9-_]+}$\",\n  // Data ranges\n  scaled_range: \"-1#1\",\n  audio_range: \"0#999.9999999\",\n  speed_range: \"0#999.9999999\",\n  text_range: \"-1#1\",\n  progress_range: \"0#1\",\n};\n","type APIError = {\n  errorCode: number;\n  errorMessage: string;\n  detailedMessage: string;\n};\n\nexport class BaseScormValidationError extends Error {\n  constructor(CMIElement: string, errorCode: number) {\n    super(`${CMIElement} : ${errorCode.toString()}`);\n    this._errorCode = errorCode;\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, BaseScormValidationError.prototype);\n  }\n\n  private readonly _errorCode: number;\n\n  /**\n   * Getter for _errorCode\n   * @return {number}\n   */\n  get errorCode(): number {\n    return this._errorCode;\n  }\n}\n\n/**\n * Base Validation Exception\n */\nexport class ValidationError extends BaseScormValidationError implements APIError {\n  /**\n   * Constructor to take in an error message and code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   * @param {string} errorMessage\n   * @param {string} detailedMessage\n   */\n  constructor(\n    CMIElement: string,\n    errorCode: number,\n    errorMessage: string,\n    detailedMessage?: string,\n  ) {\n    super(CMIElement, errorCode);\n    this.message = `${CMIElement} : ${errorMessage}`;\n    this._errorMessage = errorMessage;\n    if (detailedMessage) {\n      this._detailedMessage = detailedMessage;\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  private readonly _errorMessage: string;\n  private readonly _detailedMessage: string = \"\";\n\n  /**\n   * Getter for _errorMessage\n   * @return {string}\n   */\n  get errorMessage(): string {\n    return this._errorMessage;\n  }\n\n  /**\n   * Getter for _detailedMessage\n   * @return {string}\n   */\n  get detailedMessage(): string {\n    return this._detailedMessage;\n  }\n}\n","import { ValidationError } from \"../exceptions\";\nimport { scorm12_constants } from \"../constants/api_constants\";\n\nconst scorm12_errors = scorm12_constants.error_descriptions;\n\n/**\n * SCORM 1.2 Validation Error\n */\nexport class Scorm12ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm12_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm12_errors[String(errorCode)].basicMessage,\n        scorm12_errors[String(errorCode)].detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm12_errors[\"101\"].basicMessage,\n        scorm12_errors[\"101\"].detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm12ValidationError.prototype);\n  }\n}\n","/**\n * Base class for API cmi objects\n */\nexport abstract class BaseCMI {\n  jsonString = false;\n  protected readonly _cmi_element: string;\n  protected _initialized = false;\n  private _start_time: number | undefined;\n\n  /**\n   * Constructor for BaseCMI\n   * @param {string} cmi_element\n   */\n  constructor(cmi_element: string) {\n    this._cmi_element = cmi_element;\n  }\n\n  /**\n   * Getter for _initialized\n   * @return {boolean}\n   */\n  get initialized(): boolean {\n    return this._initialized;\n  }\n\n  /**\n   * Getter for _start_time\n   * @return {number | undefined}\n   */\n  get start_time(): number | undefined {\n    return this._start_time;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize(): void {\n    this._initialized = true;\n  }\n\n  /**\n   * Called when the player should override the 'session_time' provided by\n   * the module\n   */\n  setStartTime(): void {\n    this._start_time = new Date().getTime();\n  }\n\n  abstract reset(): void;\n}\n\n/**\n * Base class for cmi root objects\n */\nexport abstract class BaseRootCMI extends BaseCMI {\n  abstract getCurrentTotalTime(): string;\n}\n","/**\n * Constants for time conversion calculations.\n * These are used throughout the codebase for converting between different time formats.\n */\nexport const SECONDS_PER_SECOND = 1.0;\nexport const SECONDS_PER_MINUTE = 60;\nexport const SECONDS_PER_HOUR = 60 * SECONDS_PER_MINUTE;\nexport const SECONDS_PER_DAY = 24 * SECONDS_PER_HOUR;\n\ntype Designation = {\n  [key: string]: number;\n};\n\n/**\n * A record with string keys and unknown values.\n * This is a more type-safe alternative to using `any`.\n */\nexport type StringKeyMap = Record<string, unknown>;\n\nconst designations: Designation = {\n  D: SECONDS_PER_DAY,\n  H: SECONDS_PER_HOUR,\n  M: SECONDS_PER_MINUTE,\n  S: SECONDS_PER_SECOND,\n};\n\n/**\n * Converts a number of seconds to a formatted time string in HH:MM:SS format.\n * This function handles decimal seconds and ensures proper formatting with leading zeros.\n *\n * @param {number|null} totalSeconds - The total number of seconds to convert. If null or negative, returns \"00:00:00\".\n * @return {string} A formatted time string in HH:MM:SS format, with up to 2 decimal places for seconds if applicable.\n *\n * @example\n * // Returns \"01:30:45\"\n * getSecondsAsHHMMSS(5445);\n *\n * @example\n * // Returns \"00:00:30.5\"\n * getSecondsAsHHMMSS(30.5);\n *\n * @example\n * // Returns \"00:00:00\"\n * getSecondsAsHHMMSS(null);\n */\nexport const getSecondsAsHHMMSS = memoize((totalSeconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!totalSeconds || totalSeconds <= 0) {\n    return \"00:00:00\";\n  }\n\n  const hours = Math.floor(totalSeconds / SECONDS_PER_HOUR);\n  const dateObj = new Date(totalSeconds * 1000);\n  const minutes = dateObj.getUTCMinutes();\n  // make sure we add any possible decimal value\n  const seconds = dateObj.getSeconds();\n  const ms = totalSeconds % 1.0;\n  let msStr = \"\";\n\n  if (countDecimals(ms) > 0) {\n    if (countDecimals(ms) > 2) {\n      msStr = ms.toFixed(2);\n    } else {\n      msStr = String(ms);\n    }\n\n    msStr = \".\" + msStr.split(\".\")[1];\n  }\n\n  return (hours + \":\" + minutes + \":\" + seconds).replace(/\\b\\d\\b/g, \"0$&\") + msStr;\n});\n\n/**\n * Converts a number of seconds to an ISO 8601 duration string (e.g., \"PT1H30M45S\").\n * This function handles the complexity of formatting according to the ISO 8601 standard,\n * including the proper placement of the \"T\" separator for time components.\n *\n * @param {number|null} seconds - The number of seconds to convert. If null or negative, returns \"PT0S\".\n * @return {string} An ISO 8601 formatted duration string.\n *\n * @example\n * // Returns \"PT1H30M45S\" (1 hour, 30 minutes, 45 seconds)\n * getSecondsAsISODuration(5445);\n *\n * @example\n * // Returns \"PT30.5S\" (30.5 seconds)\n * getSecondsAsISODuration(30.5);\n *\n * @example\n * // Returns \"P1DT1H\" (1 day, 1 hour)\n * getSecondsAsISODuration(90000);\n *\n * @example\n * // Returns \"PT0S\" (0 seconds)\n * getSecondsAsISODuration(null);\n */\nexport const getSecondsAsISODuration = memoize((seconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!seconds || seconds <= 0) {\n    return \"PT0S\";\n  }\n\n  let duration = \"P\";\n  let remainder = seconds;\n\n  // Convert to array of entries and use functional methods\n  const designationEntries = Object.entries(designations);\n\n  // Process each time designation\n  designationEntries.forEach(([designationsKey, current_seconds]) => {\n    let value = Math.floor(remainder / current_seconds);\n    remainder = remainder % current_seconds;\n\n    // Limit decimal places\n    if (countDecimals(remainder) > 2) {\n      remainder = Number(Number(remainder).toFixed(2));\n    }\n\n    // If we have anything left in the remainder, and we're currently adding\n    // seconds to the duration, go ahead and add the decimal to the seconds\n    if (designationsKey === \"S\" && remainder > 0) {\n      value += remainder;\n    }\n\n    if (value) {\n      // Add the 'T' separator for time components if needed\n      const needsTimeSeparator =\n        (duration.indexOf(\"D\") > 0 || [\"H\", \"M\", \"S\"].includes(designationsKey)) &&\n        duration.indexOf(\"T\") === -1;\n\n      if (needsTimeSeparator) {\n        duration += \"T\";\n      }\n\n      duration += `${value}${designationsKey}`;\n    }\n  });\n\n  return duration;\n});\n\n/**\n * Converts a time string in HH:MM:SS format to the equivalent number of seconds.\n * This function is flexible and can handle various input types, converting them to strings as needed.\n *\n * @param {string|number|boolean|null} timeString - The time string to convert, typically in HH:MM:SS format.\n *                                                 If not a string, it will be converted to one.\n *                                                 If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} timeRegex - The regular expression used to validate the time string format.\n *                                    If a string is provided, it will be converted to a RegExp.\n * @return {number} The total number of seconds represented by the time string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getTimeAsSeconds(\"01:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getTimeAsSeconds(\"invalid\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 30 (converts number to string \"30\" then parses as 0:0:30)\n * getTimeAsSeconds(30, /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport const getTimeAsSeconds = memoize(\n  (timeString: string | number | boolean | null, timeRegex: RegExp | string): number => {\n    if (typeof timeString === \"number\" || typeof timeString === \"boolean\") {\n      timeString = String(timeString);\n    }\n    if (typeof timeRegex === \"string\") {\n      timeRegex = new RegExp(timeRegex);\n    }\n    if (!timeString || !timeString?.match?.(timeRegex)) {\n      return 0;\n    }\n\n    const parts = timeString.split(\":\");\n    const hours = Number(parts[0]);\n    const minutes = Number(parts[1]);\n    const seconds = Number(parts[2]);\n    return hours * 3600 + minutes * 60 + seconds;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (timeString, timeRegex) => {\n    const timeStr = typeof timeString === \"string\" ? timeString : String(timeString ?? \"\");\n    const regexStr = typeof timeRegex === \"string\" ? timeRegex : (timeRegex?.toString() ?? \"\");\n    return `${timeStr}:${regexStr}`;\n  },\n);\n\n/**\n * Converts an ISO 8601 duration string (e.g., \"PT1H30M45S\") to the equivalent number of seconds.\n * This function parses the duration string using a regular expression to extract years, days,\n * hours, minutes, and seconds components.\n *\n * @param {string|null} duration - The ISO 8601 duration string to convert.\n *                                If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n *                                       The regex should have capture groups for years, days, hours, minutes, and seconds.\n * @return {number} The total number of seconds represented by the duration string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getDurationAsSeconds(\"PT1H30M45S\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 90000 (1 day, 1 hour)\n * getDurationAsSeconds(\"P1DT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getDurationAsSeconds(\"invalid\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport const getDurationAsSeconds = memoize(\n  (duration: string | null, durationRegex: RegExp | string): number => {\n    if (typeof durationRegex === \"string\") {\n      durationRegex = new RegExp(durationRegex);\n    }\n\n    if (!duration || !duration?.match?.(durationRegex)) {\n      return 0;\n    }\n\n    const [, years, _, , days, hours, minutes, seconds] =\n      new RegExp(durationRegex).exec?.(duration) ?? [];\n    let result = 0.0;\n    result += Number(seconds) || 0.0;\n    result += Number(minutes) * 60.0 || 0.0;\n    result += Number(hours) * 3600.0 || 0.0;\n    result += Number(days) * (60 * 60 * 24.0) || 0.0;\n    result += Number(years) * (60 * 60 * 24 * 365.0) || 0.0;\n    return result;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (duration, durationRegex) => {\n    const durationStr = duration ?? \"\";\n    const regexStr =\n      typeof durationRegex === \"string\" ? durationRegex : (durationRegex?.toString() ?? \"\");\n    return `${durationStr}:${regexStr}`;\n  },\n);\n\n/**\n * Adds together two ISO 8601 duration strings and returns the result as a new ISO 8601 duration string.\n * This function works by converting both durations to seconds, adding them together, and then\n * converting the result back to an ISO 8601 duration string.\n *\n * @param {string} first - The first ISO 8601 duration string.\n * @param {string} second - The second ISO 8601 duration string.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n * @return {string} A new ISO 8601 duration string representing the sum of the two input durations.\n *\n * @example\n * // Returns \"PT2H\" (1 hour + 1 hour = 2 hours)\n * addTwoDurations(\"PT1H\", \"PT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"PT1H30M\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addTwoDurations(\"PT1H\", \"PT30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"P1DT1H30M\" (1 day + 1 hour and 30 minutes = 1 day, 1 hour, and 30 minutes)\n * addTwoDurations(\"P1D\", \"PT1H30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport function addTwoDurations(\n  first: string,\n  second: string,\n  durationRegex: RegExp | string,\n): string {\n  const regex: RegExp =\n    typeof durationRegex === \"string\" ? new RegExp(durationRegex) : durationRegex;\n  return getSecondsAsISODuration(\n    getDurationAsSeconds(first, regex) + getDurationAsSeconds(second, regex),\n  );\n}\n\n/**\n * Adds together two time strings in HH:MM:SS format and returns the result as a new time string.\n * This function works by converting both time strings to seconds, adding them together, and then\n * converting the result back to an HH:MM:SS format.\n *\n * @param {string} first - The first time string in HH:MM:SS format.\n * @param {string} second - The second time string in HH:MM:SS format.\n * @param {RegExp|string} timeRegex - The regular expression used to validate and parse the time strings.\n *                                   If a string is provided, it will be converted to a RegExp.\n * @return {string} A new time string in HH:MM:SS format representing the sum of the two input times.\n *\n * @example\n * // Returns \"02:00:00\" (1 hour + 1 hour = 2 hours)\n * addHHMMSSTimeStrings(\"01:00:00\", \"01:00:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:00\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:45\" (1 hour + 30 minutes and 45 seconds = 1 hour, 30 minutes, and 45 seconds)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport function addHHMMSSTimeStrings(\n  first: string,\n  second: string,\n  timeRegex: RegExp | string,\n): string {\n  if (typeof timeRegex === \"string\") {\n    timeRegex = new RegExp(timeRegex);\n  }\n  return getSecondsAsHHMMSS(\n    getTimeAsSeconds(first, timeRegex) + getTimeAsSeconds(second, timeRegex),\n  );\n}\n\n/**\n * Flattens a nested JSON object into a flat object with dot notation for nested properties.\n * This function recursively traverses the object and creates new keys using dot notation\n * for nested objects and bracket notation for arrays.\n *\n * @param {StringKeyMap} data - The nested object to flatten.\n * @return {StringKeyMap} A flattened object where nested properties are represented with dot notation.\n *\n * @example\n * // Returns { \"a\": 1, \"b.c\": 2, \"b.d\": 3, \"e[0]\": 4, \"e[1]\": 5 }\n * flatten({\n *   a: 1,\n *   b: { c: 2, d: 3 },\n *   e: [4, 5]\n * });\n *\n * @example\n * // Returns { \"\": [] } for an empty array\n * flatten([]);\n *\n * @example\n * // Returns { \"\": {} } for an empty object\n * flatten({});\n */\nexport function flatten(data: StringKeyMap): StringKeyMap {\n  const result: StringKeyMap = {};\n\n  /**\n   * Recurse through the object\n   * @param {*} cur\n   * @param {*} prop\n   */\n  function recurse(cur: any, prop: any) {\n    if (Object(cur) !== cur) {\n      result[prop] = cur;\n    } else if (Array.isArray(cur)) {\n      // Use forEach instead of for loop\n      cur.forEach((item, i) => {\n        recurse(item, `${prop}[${i}]`);\n      });\n\n      if (cur.length === 0) result[prop] = [];\n    } else {\n      const keys = Object.keys(cur).filter((p) => Object.prototype.hasOwnProperty.call(cur, p));\n\n      const isEmpty = keys.length === 0;\n\n      // Use forEach instead of for...in loop\n      keys.forEach((p) => {\n        recurse(cur[p], prop ? `${prop}.${p}` : p);\n      });\n\n      if (isEmpty && prop) result[prop] = {};\n    }\n  }\n\n  recurse(data, \"\");\n  return result;\n}\n\n/**\n * Converts a flattened object back into a nested object structure.\n * This function is the inverse of `flatten()`. It parses dot notation and bracket notation\n * in property names to recreate the original nested structure.\n *\n * @param {StringKeyMap} data - The flattened object to unflatten.\n * @return {object} A nested object recreated from the flattened structure.\n *\n * @example\n * // Returns { a: 1, b: { c: 2, d: 3 }, e: [4, 5] }\n * unflatten({\n *   \"a\": 1,\n *   \"b.c\": 2,\n *   \"b.d\": 3,\n *   \"e[0]\": 4,\n *   \"e[1]\": 5\n * });\n *\n * @example\n * // Handles array indices correctly\n * unflatten({\n *   \"users[0].name\": \"John\",\n *   \"users[0].email\": \"john@example.com\",\n *   \"users[1].name\": \"Jane\",\n *   \"users[1].email\": \"jane@example.com\"\n * });\n * // Returns:\n * // {\n * //   users: [\n * //     { name: \"John\", email: \"john@example.com\" },\n * //     { name: \"Jane\", email: \"jane@example.com\" }\n * //   ]\n * // }\n */\nexport function unflatten(data: StringKeyMap): object {\n  \"use strict\";\n\n  if (Object(data) !== data || Array.isArray(data)) return data;\n  const result: StringKeyMap = {};\n\n  // Regex pattern for parsing property paths\n  const pattern = /\\.?([^.[\\]]+)|\\[(\\d+)]/g;\n\n  // Get all own properties and process them\n  Object.keys(data)\n    .filter((p) => Object.prototype.hasOwnProperty.call(data, p))\n    .forEach((p) => {\n      let cur = result;\n      let prop = \"\";\n\n      // Create a new regex instance for each property to reset lastIndex\n      const regex = new RegExp(pattern);\n\n      // Process all matches in the property path\n      Array.from({ length: p.match(new RegExp(pattern, \"g\"))?.length ?? 0 }, () =>\n        regex.exec(p),\n      ).forEach((m) => {\n        if (m) {\n          // Create array or object as needed\n          cur = (cur[prop] ?? (cur[prop] = m[2] ? [] : ({} as StringKeyMap))) as StringKeyMap;\n          prop = m[2] || m[1];\n        }\n      });\n\n      cur[prop] = data[p];\n    });\n\n  return (result[\"\"] ?? result) as object;\n}\n\n/**\n * Counts the number of decimal places in a number.\n * This function handles both integer and floating-point numbers.\n *\n * @param {number} num - The number to analyze.\n * @return {number} The number of decimal places. Returns 0 for integers or if the number doesn't have a decimal point.\n *\n * @example\n * // Returns 0\n * countDecimals(42);\n *\n * @example\n * // Returns 2\n * countDecimals(3.14);\n *\n * @example\n * // Returns 5\n * countDecimals(1.23456);\n */\nexport function countDecimals(num: number): number {\n  if (Math.floor(num) === num || String(num)?.indexOf?.(\".\") < 0) return 0;\n  const parts = num.toString().split(\".\")?.[1];\n  return parts?.length ?? 0;\n}\n\n/**\n * Formats SCORM messages for consistent and readable logging.\n * This function pads the function name and CMI element to create aligned log messages\n * that are easier to read in log files or console output.\n *\n * @param {string} functionName - The name of the function that generated the message.\n * @param {string} message - The message content to be logged.\n * @param {string} [CMIElement] - Optional. The CMI element related to the message.\n * @return {string} A formatted message string with consistent padding.\n *\n * @example\n * // Returns \"initialize          : Successfully initialized\"\n * formatMessage(\"initialize\", \"Successfully initialized\");\n *\n * @example\n * // Returns \"getValue            : cmi.core.student_id                                             : 12345\"\n * formatMessage(\"getValue\", \"12345\", \"cmi.core.student_id\");\n *\n * @example\n * // Returns \"setValue            : cmi.core.lesson_status                                          : completed\"\n * formatMessage(\"setValue\", \"completed\", \"cmi.core.lesson_status\");\n */\nexport function formatMessage(functionName: string, message: string, CMIElement?: string): string {\n  const baseLength = 20;\n\n  // Use string padding instead of loops\n  const paddedFunction = functionName.padEnd(baseLength);\n  let messageString = `${paddedFunction}: `;\n\n  if (CMIElement) {\n    const CMIElementBaseLength = 70;\n    // Add CMIElement and pad to the required length\n    messageString += CMIElement;\n    messageString = messageString.padEnd(CMIElementBaseLength);\n  }\n\n  // Add the message (or empty string if null/undefined)\n  messageString += message ?? \"\";\n\n  return messageString;\n}\n\n/**\n * Checks if a string contains a specific pattern using regular expression matching.\n * This function is a wrapper around JavaScript's String.match() method that handles\n * null/undefined values gracefully.\n *\n * @param {string} str - The string to search within. If null or undefined, returns false.\n * @param {string} tester - The pattern to search for. Can be a regular expression pattern.\n * @return {boolean} True if the pattern is found in the string, false otherwise.\n *\n * @example\n * // Returns true\n * stringMatches(\"Hello, world!\", \"world\");\n *\n * @example\n * // Returns true\n * stringMatches(\"The quick brown fox\", \"\\\\w+\\\\s+\\\\w+\");\n *\n * @example\n * // Returns false\n * stringMatches(\"Hello, world!\", \"universe\");\n *\n * @example\n * // Returns false (handles null gracefully)\n * stringMatches(null, \"test\");\n */\nexport function stringMatches(str: string, tester: string): boolean {\n  return str?.match(tester) !== null;\n}\n\n/**\n * Creates a memoized (cached) version of a function for performance optimization.\n * This function caches the results of previous calls with the same arguments,\n * avoiding redundant calculations for repeated calls with the same input.\n *\n * @template T - The type of the function to memoize\n * @param {T} fn - The function to memoize\n * @param {Function} [keyFn] - Optional function to generate a custom cache key.\n *                           Useful for functions with complex arguments that can't be serialized.\n * @return {T} A memoized version of the input function with the same signature\n *\n * @example\n * // Basic usage with a simple function\n * const memoizedAdd = memoize((a, b) => {\n *   console.log('Calculating...');\n *   return a + b;\n * });\n *\n * memoizedAdd(1, 2); // Logs \"Calculating...\" and returns 3\n * memoizedAdd(1, 2); // Returns 3 without logging (uses cached result)\n *\n * @example\n * // Using a custom key function for objects that can't be serialized\n * const memoizedProcessUser = memoize(\n *   (user) => {\n *     console.log('Processing user...');\n *     return { ...user, processed: true };\n *   },\n *   (user) => user.id // Use user.id as the cache key\n * );\n *\n * memoizedProcessUser({ id: 123, name: 'John' }); // Logs and processes\n * memoizedProcessUser({ id: 123, name: 'John' }); // Uses cached result\n */\nexport function memoize<T extends (...args: any[]) => any>(\n  fn: T,\n  keyFn?: (...args: Parameters<T>) => string,\n): T {\n  const cache = new Map<string, ReturnType<T>>();\n\n  return ((...args: Parameters<T>): ReturnType<T> => {\n    const key = keyFn ? keyFn(...args) : JSON.stringify(args);\n\n    return cache.has(key)\n      ? (cache.get(key) as ReturnType<T>)\n      : (() => {\n          const result = fn(...args);\n          cache.set(key, result);\n          return result;\n        })();\n  }) as T;\n}\n","import { BaseScormValidationError } from \"../../exceptions\";\nimport { memoize } from \"../../utilities\";\n\n/**\n * Check if the value matches the proper format. If not, throw proper error code.\n *\n * @param {string} value\n * @param {string} regexPattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @param {boolean} [allowEmptyString]\n * @return {boolean}\n */\nexport const checkValidFormat = memoize(\n  (\n    CMIElement: string,\n    value: string,\n    regexPattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n    allowEmptyString?: boolean,\n  ): boolean => {\n    // noinspection SuspiciousTypeOfGuard\n    if (typeof value !== \"string\") {\n      return false;\n    }\n    const formatRegex = new RegExp(regexPattern);\n    const matches = value.match(formatRegex);\n    if (allowEmptyString && value === \"\") {\n      return true;\n    }\n    if (value === undefined || !matches || matches[0] === \"\") {\n      throw new errorClass(CMIElement, errorCode);\n    }\n    return true;\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, regexPattern, errorCode, _errorClass, allowEmptyString) => {\n    // Use typeof for non-string values to ensure consistent cache keys\n    // noinspection SuspiciousTypeOfGuard\n    const valueKey = typeof value === \"string\" ? value : `[${typeof value}]`;\n    return `${CMIElement}:${valueKey}:${regexPattern}:${errorCode}:${allowEmptyString || false}`;\n  },\n);\n\n/**\n * Check if the value matches the proper range. If not, throw proper error code.\n *\n * @param {any} value\n * @param {string} rangePattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @return {boolean}\n */\nexport const checkValidRange = memoize(\n  (\n    CMIElement: string,\n    value: any,\n    rangePattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean => {\n    const ranges = rangePattern.split(\"#\");\n    value = value * 1.0;\n    if (value >= ranges[0]) {\n      if (ranges[1] === \"*\" || value <= ranges[1]) {\n        return true;\n      } else {\n        throw new errorClass(CMIElement, errorCode);\n      }\n    } else {\n      throw new errorClass(CMIElement, errorCode);\n    }\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, rangePattern, errorCode, _errorClass) =>\n    `${CMIElement}:${value}:${rangePattern}:${errorCode}`,\n);\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm12_errors.TYPE_MISMATCH,\n    Scorm12ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidRange(\n  CMIElement: string,\n  value: any,\n  rangePattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  if (!allowEmptyString && value === \"\") {\n    throw new Scorm12ValidationError(CMIElement, scorm12_errors.VALUE_OUT_OF_RANGE);\n  }\n\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm12_errors.VALUE_OUT_OF_RANGE,\n    Scorm12ValidationError,\n  );\n}\n","import { BaseScormValidationError } from \"../exceptions\";\nimport { checkValidFormat, checkValidRange } from \"../cmi/common/validation\";\nimport { check12ValidFormat, check12ValidRange } from \"../cmi/scorm12/validation\";\nimport { scorm12_regex } from \"../constants/regex\";\nimport { scorm12_errors } from \"../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../exceptions/scorm12_exceptions\";\n\n/**\n * Service for validating CMI data model properties\n */\nexport class ValidationService {\n  /**\n   * Validates a score property (raw, min, max)\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @param {string} decimalRegex - The regex pattern for decimal validation\n   * @param {string | false} scoreRange - The range pattern for score validation, or false if no range validation is needed\n   * @param {number} invalidTypeCode - The error code for invalid type\n   * @param {number} invalidRangeCode - The error code for invalid range\n   * @param {typeof BaseScormValidationError} errorClass - The error class to use for validation errors\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScore(\n    CMIElement: string,\n    value: string,\n    decimalRegex: string,\n    scoreRange: string | false,\n    invalidTypeCode: number,\n    invalidRangeCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean {\n    return (\n      checkValidFormat(CMIElement, value, decimalRegex, invalidTypeCode, errorClass) &&\n      (!scoreRange || checkValidRange(CMIElement, value, scoreRange, invalidRangeCode, errorClass))\n    );\n    // This line should never be reached due to exceptions being thrown\n  }\n\n  /**\n   * Validates a SCORM 1.2 audio property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Audio(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.audio_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 language property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Language(CMIElement: string, value: string): boolean {\n    return check12ValidFormat(CMIElement, value, scorm12_regex.CMIString256);\n  }\n\n  /**\n   * Validates a SCORM 1.2 speed property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Speed(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.speed_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 text property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Text(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.text_range)\n    );\n  }\n\n  /**\n   * Validates if a property is read-only\n   *\n   * @param {string} CMIElement\n   * @param {boolean} initialized - Whether the object is initialized\n   * @throws {BaseScormValidationError} - Throws an error if the object is initialized\n   */\n  validateReadOnly(CMIElement: string, initialized: boolean): void {\n    if (initialized) {\n      throw new Scorm12ValidationError(CMIElement, scorm12_errors.READ_ONLY_ELEMENT);\n    }\n  }\n}\n\n// Export a singleton instance of the ValidationService\nexport const validationService = new ValidationService();\n","import { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"./base_cmi\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { validationService } from \"../../services/ValidationService\";\nimport { ScoreObject } from \"../../types/api_types\";\n\n/**\n * Base class for cmi *.score objects\n */\nexport class CMIScore extends BaseCMI {\n  private readonly __children: string;\n  private readonly __score_range: string | false;\n  private readonly __invalid_error_code: number;\n  private readonly __invalid_type_code: number;\n  private readonly __invalid_range_code: number;\n  private readonly __decimal_regex: string;\n  private readonly __error_class: typeof BaseScormValidationError;\n  protected _raw = \"\";\n  protected _min = \"\";\n  protected _max: string;\n\n  /**\n   * Constructor for *.score\n   * @param {\n   *     score_children: string,\n   *     score_range: string,\n   *     max: string,\n   *     invalidErrorCode: number,\n   *     invalidTypeCode: number,\n   *     invalidRangeCode: number,\n   *     decimalRegex: string,\n   *     errorClass: typeof BaseScormValidationError\n   * } params\n   */\n  constructor(params: {\n    CMIElement: string;\n    score_children?: string;\n    score_range?: string;\n    max?: string;\n    invalidErrorCode?: number;\n    invalidTypeCode?: number;\n    invalidRangeCode?: number;\n    decimalRegex?: string;\n    errorClass: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n\n    this.__children = params.score_children || scorm12_constants.score_children;\n    this.__score_range = !params.score_range ? false : scorm12_regex.score_range;\n    this._max = params.max || params.max === \"\" ? params.max : \"100\";\n    this.__invalid_error_code = params.invalidErrorCode || scorm12_errors.INVALID_SET_VALUE;\n    this.__invalid_type_code = params.invalidTypeCode || scorm12_errors.TYPE_MISMATCH;\n    this.__invalid_range_code = params.invalidRangeCode || scorm12_errors.VALUE_OUT_OF_RANGE;\n    this.__decimal_regex = params.decimalRegex || scorm12_regex.CMIDecimal;\n    this.__error_class = params.errorClass;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this.__error_class(this._cmi_element + \"._children\", this.__invalid_error_code);\n  }\n\n  /**\n   * Getter for _raw\n   * @return {string}\n   */\n  get raw(): string {\n    return this._raw;\n  }\n\n  /**\n   * Setter for _raw\n   * @param {string} raw\n   */\n  set raw(raw: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".raw\",\n        raw,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._raw = raw;\n    }\n  }\n\n  /**\n   * Getter for _min\n   * @return {string}\n   */\n  get min(): string {\n    return this._min;\n  }\n\n  /**\n   * Setter for _min\n   * @param {string} min\n   */\n  set min(min: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".min\",\n        min,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._min = min;\n    }\n  }\n\n  /**\n   * Getter for _max\n   * @return {string}\n   */\n  get max(): string {\n    return this._max;\n  }\n\n  /**\n   * Setter for _max\n   * @param {string} max\n   */\n  set max(max: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".max\",\n        max,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._max = max;\n    }\n  }\n\n  /**\n   * Getter for _score_range\n   * @return {string | false}\n   */\n  public getScoreObject(): ScoreObject {\n    const scoreObject: ScoreObject = {};\n    if (!Number.isNaN(Number.parseFloat(this.raw))) {\n      scoreObject.raw = Number.parseFloat(this.raw);\n    }\n    if (!Number.isNaN(Number.parseFloat(this.min))) {\n      scoreObject.min = Number.parseFloat(this.min);\n    }\n    if (!Number.isNaN(Number.parseFloat(this.max))) {\n      scoreObject.max = Number.parseFloat(this.max);\n    }\n    return scoreObject;\n  }\n\n  /**\n   * toJSON for *.score\n   * @return {\n   *    {\n   *      min: string,\n   *      max: string,\n   *      raw: string\n   *    }\n   *    }\n   */\n  toJSON(): {\n    min: string;\n    max: string;\n    raw: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { check12ValidFormat } from \"../scorm12/validation\";\nimport * as Util from \"../../utilities\";\n\n/**\n * Class representing the `cmi.core` object\n * @extends BaseCMI\n */\nexport class CMICore extends BaseCMI {\n  /**\n   * Constructor for `cmi.core`\n   */\n  constructor() {\n    super(\"cmi.core\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.core.score\",\n      score_children: scorm12_constants.score_children,\n      score_range: scorm12_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n\n  public readonly score: CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  private __children = scorm12_constants.core_children;\n  private _student_id = \"\";\n  private _student_name = \"\";\n  private _lesson_location = \"\";\n  private _credit = \"\";\n  private _lesson_status = \"not attempted\";\n  private _entry = \"\";\n  private _total_time = \"\";\n  private _lesson_mode = \"normal\";\n  private _exit = \"\";\n  private _session_time = \"00:00:00\";\n  private _suspend_data = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._exit = \"\";\n    this._entry = \"\";\n\n    /**\n     * Resetting ensures we accurately track the time spent on each individual SCO session independently. Each new\n     * session should start from zero, so we can reset cmi.core.session_time at the beginning of each session.\n     */\n    this._session_time = \"00:00:00\";\n\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for _student_id\n   * @return {string}\n   */\n  get student_id(): string {\n    return this._student_id;\n  }\n\n  /**\n   * Setter for _student_id. Can only be called before  initialization.\n   * @param {string} student_id\n   */\n  set student_id(student_id: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".student_id\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._student_id = student_id;\n    }\n  }\n\n  /**\n   * Getter for _student_name\n   * @return {string}\n   */\n  get student_name(): string {\n    return this._student_name;\n  }\n\n  /**\n   * Setter for _student_name. Can only be called before  initialization.\n   * @param {string} student_name\n   */\n  set student_name(student_name: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".student_name\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._student_name = student_name;\n    }\n  }\n\n  /**\n   * Getter for _lesson_location\n   * @return {string}\n   */\n  get lesson_location(): string {\n    return this._lesson_location;\n  }\n\n  /**\n   * Setter for _lesson_location\n   * @param {string} lesson_location\n   */\n  set lesson_location(lesson_location: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".lesson_location\",\n        lesson_location,\n        scorm12_regex.CMIString256,\n        true,\n      )\n    ) {\n      this._lesson_location = lesson_location;\n    }\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this._credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before  initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".credit\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._credit = credit;\n    }\n  }\n\n  /**\n   * Getter for _lesson_status\n   * @return {string}\n   */\n  get lesson_status(): string {\n    return this._lesson_status;\n  }\n\n  /**\n   * Setter for _lesson_status\n   * @param {string} lesson_status\n   */\n  set lesson_status(lesson_status: string) {\n    if (this.initialized) {\n      if (\n        check12ValidFormat(\n          this._cmi_element + \".lesson_status\",\n          lesson_status,\n          scorm12_regex.CMIStatus,\n        )\n      ) {\n        this._lesson_status = lesson_status;\n      }\n    } else {\n      if (\n        check12ValidFormat(\n          this._cmi_element + \".lesson_status\",\n          lesson_status,\n          scorm12_regex.CMIStatus2,\n        )\n      ) {\n        this._lesson_status = lesson_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this._entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before  initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".entry\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._entry = entry;\n    }\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this._total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before  initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".total_time\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._total_time = total_time;\n    }\n  }\n\n  /**\n   * Getter for _lesson_mode\n   * @return {string}\n   */\n  get lesson_mode(): string {\n    return this._lesson_mode;\n  }\n\n  /**\n   * Setter for _lesson_mode. Can only be called before  initialization.\n   * @param {string} lesson_mode\n   */\n  set lesson_mode(lesson_mode: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".lesson_mode\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._lesson_mode = lesson_mode;\n    }\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".exit\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    if (check12ValidFormat(this._cmi_element + \".exit\", exit, scorm12_regex.CMIExit, true)) {\n      this._exit = exit;\n    }\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".session_time\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".session_time\",\n        session_time,\n        scorm12_regex.CMITimespan,\n      )\n    ) {\n      this._session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this._suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".suspend_data\",\n        suspend_data,\n        scorm12_regex.CMIString4096,\n        true,\n      )\n    ) {\n      this._suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   * @param {number} start_time\n   * @return {string}\n   */\n  getCurrentTotalTime(start_time: number | undefined): string {\n    let sessionTime = this._session_time;\n    const startTime = start_time;\n\n    if (typeof startTime !== \"undefined\" && startTime !== null) {\n      const seconds = new Date().getTime() - startTime;\n      sessionTime = Util.getSecondsAsHHMMSS(seconds / 1000);\n    }\n\n    return Util.addHHMMSSTimeStrings(\n      this._total_time,\n      sessionTime,\n      new RegExp(scorm12_regex.CMITimespan),\n    );\n  }\n\n  /**\n   * toJSON for cmi.core\n   *\n   * @return {\n   *    {\n   *      student_name: string,\n   *      entry: string,\n   *      exit: string,\n   *      score: CMIScore,\n   *      student_id: string,\n   *      lesson_mode: string,\n   *      lesson_location: string,\n   *      lesson_status: string,\n   *      credit: string,\n   *      session_time: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    student_name: string;\n    entry: string;\n    exit: string;\n    score: CMIScore;\n    student_id: string;\n    lesson_mode: string;\n    lesson_location: string;\n    lesson_status: string;\n    credit: string;\n    session_time: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      student_id: this.student_id,\n      student_name: this.student_name,\n      lesson_location: this.lesson_location,\n      credit: this.credit,\n      lesson_status: this.lesson_status,\n      entry: this.entry,\n      lesson_mode: this.lesson_mode,\n      exit: this.exit,\n      session_time: this.session_time,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"./base_cmi\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Base class for cmi *.n objects\n */\nexport class CMIArray extends BaseCMI {\n  private readonly _errorCode: number;\n  private readonly _errorClass: typeof BaseScormValidationError;\n  private readonly __children: string;\n  public childArray: any[];\n\n  /**\n   * Constructor cmi *.n arrays\n   * @param {object} params\n   */\n  constructor(params: {\n    CMIElement: string;\n    children: string;\n    errorCode?: number;\n    errorClass?: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n    this.__children = params.children;\n    this._errorCode = params.errorCode || scorm12_errors.GENERAL;\n    this._errorClass = params.errorClass || BaseScormValidationError;\n    this.childArray = [];\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(wipe: boolean = false): void {\n    this._initialized = false;\n    if (wipe) {\n      this.childArray = [];\n    } else {\n      // Reset all children\n      for (let i = 0; i < this.childArray.length; i++) {\n        this.childArray[i].reset();\n      }\n    }\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this._errorClass(this._cmi_element + \"._children\", this._errorCode);\n  }\n\n  /**\n   * Getter for _count\n   * @return {number}\n   */\n  get _count(): number {\n    return this.childArray.length;\n  }\n\n  /**\n   * Setter for _count. Just throws an error.\n   * @param {number} _count\n   */\n  set _count(_count: number) {\n    throw new this._errorClass(this._cmi_element + \"._count\", this._errorCode);\n  }\n\n  /**\n   * toJSON for *.n arrays\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result: { [key: string]: any } = {};\n    for (let i = 0; i < this.childArray.length; i++) {\n      result[i + \"\"] = this.childArray[i];\n    }\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { check12ValidFormat } from \"./validation\";\nimport { CMIArray } from \"../common/array\";\n\n/**\n * Class representing SCORM 1.2's `cmi.objectives` object\n * @extends CMIArray\n */\nexport class CMIObjectives extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives`\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.objectives\",\n      children: scorm12_constants.objectives_children,\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super(\"cmi.objectives.n\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.objectives.n.score\",\n      score_children: scorm12_constants.score_children,\n      score_range: scorm12_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n\n  public readonly score: CMIScore;\n\n  private _id = \"\";\n  private _status = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._id = \"\";\n    this._status = \"\";\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check12ValidFormat(this._cmi_element + \".id\", id, scorm12_regex.CMIIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _status\n   * @return {string}\n   */\n  get status(): string {\n    return this._status;\n  }\n\n  /**\n   * Setter for _status\n   * @param {string} status\n   */\n  set status(status: string) {\n    if (check12ValidFormat(this._cmi_element + \".status\", status, scorm12_regex.CMIStatus2)) {\n      this._status = status;\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   * @return {\n   *    {\n   *      id: string,\n   *      status: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    status: string;\n    score: CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      status: this.status,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { validationService } from \"../../services/ValidationService\";\n\n/**\n * Class representing the SCORM 1.2 cmi.student_data object\n * @extends BaseCMI\n */\nexport class CMIStudentData extends BaseCMI {\n  private readonly __children;\n  private _mastery_score = \"\";\n  private _max_time_allowed = \"\";\n  private _time_limit_action = \"\";\n\n  /**\n   * Constructor for cmi.student_data\n   * @param {string} student_data_children\n   */\n  constructor(student_data_children?: string) {\n    super(\"cmi.student_data\");\n    this.__children = student_data_children\n      ? student_data_children\n      : scorm12_constants.student_data_children;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for _master_score\n   * @return {string}\n   */\n  get mastery_score(): string {\n    return this._mastery_score;\n  }\n\n  /**\n   * Setter for _master_score. Can only be called before  initialization.\n   * @param {string} mastery_score\n   */\n  set mastery_score(mastery_score: string) {\n    validationService.validateReadOnly(this._cmi_element + \".mastery_score\", this.initialized);\n    this._mastery_score = mastery_score;\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this._max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before  initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    validationService.validateReadOnly(this._cmi_element + \".max_time_allowed\", this.initialized);\n    this._max_time_allowed = max_time_allowed;\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this._time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before  initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    validationService.validateReadOnly(this._cmi_element + \".time_limit_action\", this.initialized);\n    this._time_limit_action = time_limit_action;\n  }\n\n  /**\n   * toJSON for cmi.student_data\n   *\n   * @return {\n   *    {\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      mastery_score: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    mastery_score: string;\n    max_time_allowed: string;\n    time_limit_action: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      mastery_score: this.mastery_score,\n      max_time_allowed: this.max_time_allowed,\n      time_limit_action: this.time_limit_action,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { validationService } from \"../../services/ValidationService\";\n\n/**\n * Class representing the SCORM 1.2 cmi.student_preference object\n * @extends BaseCMI\n */\nexport class CMIStudentPreference extends BaseCMI {\n  private readonly __children;\n\n  /**\n   * Constructor for cmi.student_preference\n   * @param {string} student_preference_children\n   */\n  constructor(student_preference_children?: string) {\n    super(\"cmi.student_preference\");\n    this.__children = student_preference_children\n      ? student_preference_children\n      : scorm12_constants.student_preference_children;\n  }\n\n  private _audio = \"\";\n  private _language = \"\";\n  private _speed = \"\";\n  private _text = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for _audio\n   * @return {string}\n   */\n  get audio(): string {\n    return this._audio;\n  }\n\n  /**\n   * Setter for _audio\n   * @param {string} audio\n   */\n  set audio(audio: string) {\n    if (validationService.validateScorm12Audio(this._cmi_element + \".audio\", audio)) {\n      this._audio = audio;\n    }\n  }\n\n  /**\n   * Getter for _language\n   * @return {string}\n   */\n  get language(): string {\n    return this._language;\n  }\n\n  /**\n   * Setter for _language\n   * @param {string} language\n   */\n  set language(language: string) {\n    if (validationService.validateScorm12Language(this._cmi_element + \".language\", language)) {\n      this._language = language;\n    }\n  }\n\n  /**\n   * Getter for _speed\n   * @return {string}\n   */\n  get speed(): string {\n    return this._speed;\n  }\n\n  /**\n   * Setter for _speed\n   * @param {string} speed\n   */\n  set speed(speed: string) {\n    if (validationService.validateScorm12Speed(this._cmi_element + \".speed\", speed)) {\n      this._speed = speed;\n    }\n  }\n\n  /**\n   * Getter for _text\n   * @return {string}\n   */\n  get text(): string {\n    return this._text;\n  }\n\n  /**\n   * Setter for _text\n   * @param {string} text\n   */\n  set text(text: string) {\n    if (validationService.validateScorm12Text(this._cmi_element + \".text\", text)) {\n      this._text = text;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_preference\n   *\n   * @return {\n   *    {\n   *      audio: string,\n   *      language: string,\n   *      speed: string,\n   *      text: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    audio: string;\n    language: string;\n    speed: string;\n    text: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio: this.audio,\n      language: this.language,\n      speed: this.speed,\n      text: this.text,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check12ValidFormat, check12ValidRange } from \"./validation\";\nimport { scorm12_regex } from \"../../constants/regex\";\n\n/**\n * Class representing the SCORM 1.2 `cmi.interactions`\n * @extends CMIArray\n */\nexport class CMIInteractions extends CMIArray {\n  /**\n   * Constructor for `cmi.interactions`\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.interactions\",\n      children: scorm12_constants.interactions_children,\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n object\n   */\n  constructor() {\n    super(\"cmi.interactions.n\");\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: Scorm12ValidationError,\n      children: scorm12_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.correct_responses\",\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: Scorm12ValidationError,\n      children: scorm12_constants.correct_responses_children,\n    });\n  }\n\n  public readonly objectives: CMIArray;\n  public readonly correct_responses: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  private _id = \"\";\n  private _time = \"\";\n  private _type = \"\";\n  private _weighting = \"\";\n  private _student_response = \"\";\n  private _result = \"\";\n  private _latency = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n\n    this._id = \"\";\n    this._time = \"\";\n    this._type = \"\";\n    this._weighting = \"\";\n    this._student_response = \"\";\n    this._result = \"\";\n    this._latency = \"\";\n\n    this.objectives?.reset();\n    this.correct_responses?.reset();\n  }\n\n  /**\n   * Getter for _id. Should only be called during JSON export.\n   * @return {string}\n   */\n  get id(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".id\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check12ValidFormat(this._cmi_element + \".id\", id, scorm12_regex.CMIIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get time(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".time\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._time;\n  }\n\n  /**\n   * Setter for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (check12ValidFormat(this._cmi_element + \".time\", time, scorm12_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * Getter for _type. Should only be called during JSON export.\n   * @return {string}\n   */\n  get type(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".type\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._type;\n  }\n\n  /**\n   * Setter for _type\n   * @param {string} type\n   */\n  set type(type: string) {\n    if (check12ValidFormat(this._cmi_element + \".type\", type, scorm12_regex.CMIType)) {\n      this._type = type;\n    }\n  }\n\n  /**\n   * Getter for _weighting. Should only be called during JSON export.\n   * @return {string}\n   */\n  get weighting(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".weighting\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._weighting;\n  }\n\n  /**\n   * Setter for _weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting: string) {\n    if (\n      check12ValidFormat(this._cmi_element + \".weighting\", weighting, scorm12_regex.CMIDecimal) &&\n      check12ValidRange(this._cmi_element + \".weighting\", weighting, scorm12_regex.weighting_range)\n    ) {\n      this._weighting = weighting;\n    }\n  }\n\n  /**\n   * Getter for _student_response. Should only be called during JSON export.\n   * @return {string}\n   */\n  get student_response(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".student_response\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._student_response;\n  }\n\n  /**\n   * Setter for _student_response\n   * @param {string} student_response\n   */\n  set student_response(student_response: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".student_response\",\n        student_response,\n        scorm12_regex.CMIFeedback,\n        true,\n      )\n    ) {\n      this._student_response = student_response;\n    }\n  }\n\n  /**\n   * Getter for _result. Should only be called during JSON export.\n   * @return {string}\n   */\n  get result(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".result\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._result;\n  }\n\n  /**\n   * Setter for _result\n   * @param {string} result\n   */\n  set result(result: string) {\n    if (check12ValidFormat(this._cmi_element + \".result\", result, scorm12_regex.CMIResult)) {\n      this._result = result;\n    }\n  }\n\n  /**\n   * Getter for _latency. Should only be called during JSON export.\n   * @return {string}\n   */\n  get latency(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".latency\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._latency;\n  }\n\n  /**\n   * Setter for _latency\n   * @param {string} latency\n   */\n  set latency(latency: string) {\n    if (check12ValidFormat(this._cmi_element + \".latency\", latency, scorm12_regex.CMITimespan)) {\n      this._latency = latency;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      time: string,\n   *      type: string,\n   *      weighting: string,\n   *      student_response: string,\n   *      result: string,\n   *      latency: string,\n   *      objectives: CMIArray,\n   *      correct_responses: CMIArray\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    time: string;\n    type: string;\n    weighting: string;\n    student_response: string;\n    result: string;\n    latency: string;\n    objectives: CMIArray;\n    correct_responses: CMIArray;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      time: this.time,\n      type: this.type,\n      weighting: this.weighting,\n      student_response: this.student_response,\n      result: this.result,\n      latency: this.latency,\n      objectives: this.objectives,\n      correct_responses: this.correct_responses,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n.objectives.n\");\n  }\n\n  private _id = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._id = \"\";\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check12ValidFormat(this._cmi_element + \".id\", id, scorm12_regex.CMIIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.correct_responses.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.correct_responses.n\n   */\n  constructor() {\n    super(\"cmi.interactions.correct_responses.n\");\n  }\n\n  private _pattern = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._pattern = \"\";\n  }\n\n  /**\n   * Getter for _pattern\n   * @return {string}\n   */\n  get pattern(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".pattern\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._pattern;\n  }\n\n  /**\n   * Setter for _pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern: string) {\n    if (\n      check12ValidFormat(this._cmi_element + \".pattern\", pattern, scorm12_regex.CMIFeedback, true)\n    ) {\n      this._pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.correct_responses.n\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    pattern: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      pattern: this._pattern,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { BaseRootCMI } from \"../common/base_cmi\";\nimport { check12ValidFormat } from \"./validation\";\nimport { CMICore } from \"../aicc/core\";\nimport { CMIObjectives } from \"./objectives\";\nimport { CMIStudentData } from \"./student_data\";\nimport { CMIStudentPreference } from \"./student_preference\";\nimport { CMIInteractions } from \"./interactions\";\n\n/**\n * Class representing the cmi object for SCORM 1.2\n */\nexport class CMI extends BaseRootCMI {\n  private readonly __children: string = \"\";\n  private __version: string = \"3.4\";\n  private _launch_data: string = \"\";\n  private _comments: string = \"\";\n  private _comments_from_lms: string = \"\";\n\n  /**\n   * Constructor for the SCORM 1.2 cmi object\n   * @param {string} cmi_children\n   * @param {(CMIStudentData|AICCCMIStudentData)} student_data\n   * @param {boolean} initialized\n   */\n  constructor(cmi_children?: string, student_data?: CMIStudentData, initialized?: boolean) {\n    super(\"cmi\");\n    if (initialized) this.initialize();\n    this.__children = cmi_children ? cmi_children : scorm12_constants.cmi_children;\n    this.core = new CMICore();\n    this.objectives = new CMIObjectives();\n    this.student_data = student_data ? student_data : new CMIStudentData();\n    this.student_preference = new CMIStudentPreference();\n    this.interactions = new CMIInteractions();\n  }\n\n  public core: CMICore;\n  public objectives: CMIObjectives;\n  public student_data: CMIStudentData;\n  public student_preference: CMIStudentPreference;\n  public interactions: CMIInteractions;\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._launch_data = \"\";\n    this._comments = \"\";\n    this.core?.reset();\n    this.objectives = new CMIObjectives();\n    this.interactions = new CMIInteractions();\n    this.student_data?.reset();\n    this.student_preference?.reset();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.core?.initialize();\n    this.objectives?.initialize();\n    this.student_data?.initialize();\n    this.student_preference?.initialize();\n    this.interactions?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions\n   *    }\n   *  }\n   */\n  toJSON(): {\n    suspend_data: string;\n    launch_data: string;\n    comments: string;\n    comments_from_lms: string;\n    core: CMICore;\n    objectives: CMIObjectives;\n    student_data: CMIStudentData;\n    student_preference: CMIStudentPreference;\n    interactions: CMIInteractions;\n  } {\n    this.jsonString = true;\n    const result = {\n      suspend_data: this.suspend_data,\n      launch_data: this.launch_data,\n      comments: this.comments,\n      comments_from_lms: this.comments_from_lms,\n      core: this.core,\n      objectives: this.objectives,\n      student_data: this.student_data,\n      student_preference: this.student_preference,\n      interactions: this.interactions,\n    };\n    this.jsonString = false;\n    return result;\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   */\n  get _version(): string {\n    return this.__version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._version\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this.core?.suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (this.core) {\n      this.core.suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this._launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before  initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".launch_data\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._launch_data = launch_data;\n    }\n  }\n\n  /**\n   * Getter for _comments\n   * @return {string}\n   */\n  get comments(): string {\n    return this._comments;\n  }\n\n  /**\n   * Setter for _comments\n   * @param {string} comments\n   */\n  set comments(comments: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".comments\",\n        comments,\n        scorm12_regex.CMIString4096,\n        true,\n      )\n    ) {\n      this._comments = comments;\n    }\n  }\n\n  /**\n   * Getter for _comments_from_lms\n   * @return {string}\n   */\n  get comments_from_lms(): string {\n    return this._comments_from_lms;\n  }\n\n  /**\n   * Setter for _comments_from_lms. Can only be called before  initialization.\n   * @param {string} comments_from_lms\n   */\n  set comments_from_lms(comments_from_lms: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".comments_from_lms\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._comments_from_lms = comments_from_lms;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string}\n   */\n  getCurrentTotalTime(): string {\n    return this.core.getCurrentTotalTime(this.start_time);\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { check12ValidFormat } from \"./validation\";\nimport { scorm12_regex } from \"../../constants/regex\";\n\n/**\n * Class for AICC Navigation object\n */\nexport class NAV extends BaseCMI {\n  /**\n   * Constructor for NAV object\n   */\n  constructor() {\n    super(\"cmi.nav\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._event = \"\";\n    this._initialized = false;\n  }\n\n  private _event = \"\";\n\n  /**\n   * Getter for _event\n   * @return {string}\n   */\n  get event(): string {\n    return this._event;\n  }\n\n  /**\n   * Setter for _event\n   * @param {string} event\n   */\n  set event(event: string) {\n    if (\n      event === \"\" ||\n      check12ValidFormat(this._cmi_element + \".event\", event, scorm12_regex.NAVEvent)\n    ) {\n      this._event = event;\n    }\n  }\n\n  /**\n   * toJSON for nav object\n   * @return {\n   *    {\n   *      event: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    event: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      event: this.event,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","// Using plain objects instead of enums for better compatibility with strip-only mode\n// This approach avoids TypeScript enum runtime code while maintaining the same API\n\n// NAVBoolean values\nexport const NAVBoolean = {\n  UNKNOWN: \"unknown\",\n  TRUE: \"true\",\n  FALSE: \"false\",\n};\n\n// Type for NAVBoolean values\nexport type NAVBoolean = (typeof NAVBoolean)[keyof typeof NAVBoolean];\n\n// SuccessStatus values\nexport const SuccessStatus = {\n  PASSED: \"passed\",\n  FAILED: \"failed\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for SuccessStatus values\nexport type SuccessStatus = (typeof SuccessStatus)[keyof typeof SuccessStatus];\n\n// CompletionStatus values\nexport const CompletionStatus = {\n  COMPLETED: \"completed\",\n  INCOMPLETE: \"incomplete\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for CompletionStatus values\nexport type CompletionStatus = (typeof CompletionStatus)[keyof typeof CompletionStatus];\n\n// LogLevelEnum values\nexport const LogLevelEnum = {\n  _: 0,\n  DEBUG: 1,\n  INFO: 2,\n  WARN: 3,\n  ERROR: 4,\n  NONE: 5,\n};\n\n// Type for LogLevelEnum values\nexport type LogLevelEnum = (typeof LogLevelEnum)[keyof typeof LogLevelEnum];\n","import { InternalSettings, LogLevel, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"./api_constants\";\nimport { LogLevelEnum } from \"./enums\";\n\n/**\n * Default settings for the SCORM API\n */\nexport const DefaultSettings: InternalSettings = {\n  autocommit: false,\n  autocommitSeconds: 10,\n  asyncCommit: false,\n  sendFullCommit: true,\n  lmsCommitUrl: false,\n  dataCommitFormat: \"json\",\n  commitRequestDataType: \"application/json;charset=UTF-8\",\n  autoProgress: false,\n  logLevel: LogLevelEnum.ERROR,\n  selfReportSessionTime: false,\n  alwaysSendTotalTime: false,\n  renderCommonCommitFields: false,\n  strict_errors: true,\n  xhrHeaders: {},\n  xhrWithCredentials: false,\n  fetchMode: \"cors\",\n  useBeaconInsteadOfFetch: \"never\",\n  responseHandler: async function (response: Response): Promise<ResultObject> {\n    if (typeof response !== \"undefined\") {\n      let httpResult = null;\n\n      // Handle both text() and json() response methods\n      try {\n        if (typeof response.json === \"function\") {\n          // Try to get JSON directly if the method exists\n          httpResult = await response.json();\n        } else if (typeof response.text === \"function\") {\n          // Fall back to text() if json() is not available\n          const responseText = await response.text();\n          if (responseText) {\n            httpResult = JSON.parse(responseText);\n          }\n        }\n      } catch (e) {\n        // If parsing fails, continue with null httpResult\n      }\n\n      if (httpResult === null || !{}.hasOwnProperty.call(httpResult, \"result\")) {\n        if (response.status === 200) {\n          return {\n            result: global_constants.SCORM_TRUE,\n            errorCode: 0,\n          };\n        } else {\n          return {\n            result: global_constants.SCORM_FALSE,\n            errorCode: 101,\n          };\n        }\n      } else {\n        return {\n          result: httpResult.result,\n          errorCode: httpResult.errorCode\n            ? httpResult.errorCode\n            : httpResult.result === global_constants.SCORM_TRUE\n              ? 0\n              : 101,\n        };\n      }\n    }\n    return {\n      result: global_constants.SCORM_FALSE,\n      errorCode: 101,\n    };\n  },\n  requestHandler: function (commitObject) {\n    return commitObject;\n  },\n  onLogMessage: defaultLogHandler,\n  scoItemIds: [],\n  scoItemIdValidator: false,\n  globalObjectiveIds: [],\n\n  // Offline support settings\n  enableOfflineSupport: false,\n  courseId: \"\",\n  syncOnInitialize: true,\n  syncOnTerminate: true,\n  maxSyncAttempts: 5,\n};\n\nexport function defaultLogHandler(messageLevel: LogLevel, logMessage: string): void {\n  switch (messageLevel) {\n    case \"4\":\n    case 4:\n    case \"ERROR\":\n    case LogLevelEnum.ERROR:\n      console.error(logMessage);\n      break;\n    case \"3\":\n    case 3:\n    case \"WARN\":\n    case LogLevelEnum.WARN:\n      console.warn(logMessage);\n      break;\n    case \"2\":\n    case 2:\n    case \"INFO\":\n    case LogLevelEnum.INFO:\n      console.info(logMessage);\n      break;\n    case \"1\":\n    case 1:\n    case \"DEBUG\":\n    case LogLevelEnum.DEBUG:\n      if (console.debug) {\n        console.debug(logMessage);\n      } else {\n        console.log(logMessage);\n      }\n      break;\n  }\n}\n","import BaseAPI from \"../BaseAPI\";\n\n/**\n * Private class that wraps a timeout call to the commit() function\n */\nexport class ScheduledCommit {\n  private _API;\n  private _cancelled = false;\n  private readonly _timeout;\n  private readonly _callback;\n\n  /**\n   * Constructor for ScheduledCommit\n   * @param {BaseAPI} API\n   * @param {number} when\n   * @param {string} callback\n   */\n  constructor(API: BaseAPI, when: number, callback: string) {\n    this._API = API;\n    this._timeout = setTimeout(this.wrapper.bind(this), when);\n    this._callback = callback;\n  }\n\n  /**\n   * Cancel any currently scheduled commit\n   */\n  cancel() {\n    this._cancelled = true;\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n  }\n\n  /**\n   * Wrap the API commit call to check if the call has already been cancelled\n   */\n  wrapper() {\n    if (!this._cancelled) {\n      (async () => await this._API.commit(this._callback))();\n    }\n  }\n}\n","import { CommitObject, InternalSettings, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { IHttpService } from \"../interfaces/services\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { StringKeyMap } from \"../utilities\";\n\n/**\n * Service for handling HTTP communication with the LMS\n */\nexport class HttpService implements IHttpService {\n  private settings: InternalSettings;\n  private error_codes: ErrorCode;\n\n  /**\n   * Constructor for HttpService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   */\n  constructor(settings: InternalSettings, error_codes: ErrorCode) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n  }\n\n  /**\n   * Sends HTTP requests to the LMS with special handling for immediate and standard requests.\n   *\n   * This method handles communication with the LMS server, implementing two distinct\n   * request handling strategies based on the context:\n   *\n   * 1. Immediate Mode (used during termination):\n   *    When immediate=true, the method:\n   *    - Initiates the fetch request but doesn't wait for it to complete\n   *    - Returns a success result immediately\n   *    - Processes the response asynchronously when it arrives\n   *\n   *    This is critical for browser compatibility during page unload/termination,\n   *    as some browsers (especially Chrome) may cancel synchronous or awaited\n   *    requests when a page is closing.\n   *\n   * 2. Standard Mode (normal operation):\n   *    When immediate=false, the method:\n   *    - Processes the request parameters through the configured requestHandler\n   *    - Awaits the fetch response completely\n   *    - Transforms the response using the configured responseHandler\n   *    - Triggers appropriate event listeners based on success/failure\n   *    - Returns the complete result with appropriate error codes\n   *\n   * The method also includes error handling to catch network failures or other\n   * exceptions that might occur during the request process.\n   *\n   * @param {string} url - The URL endpoint to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The data to send to the LMS\n   * @param {boolean} immediate - Whether to send the request immediately without waiting (true) or process normally (false)\n   * @param {Function} apiLog - Function to log API messages with appropriate levels\n   * @param {Function} processListeners - Function to trigger event listeners for commit events\n   * @return {Promise<ResultObject>} - A promise that resolves with the result of the request\n   *\n   * @example\n   * // Standard request (waits for response)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   false,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   *\n   * @example\n   * // Immediate request (for termination)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   true,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   * // result will be success immediately, regardless of actual HTTP result\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n    apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    const genericError: ResultObject = {\n      result: global_constants.SCORM_FALSE,\n      errorCode: this.error_codes.GENERAL,\n    };\n\n    // If immediate mode (for termination), handle differently\n    if (immediate) {\n      return this._handleImmediateRequest(url, params, processListeners);\n    }\n\n    // Standard request processing\n    try {\n      const processedParams = this.settings.requestHandler(params) as\n        | CommitObject\n        | StringKeyMap\n        | Array<any>;\n      const response = await this.performFetch(url, processedParams);\n      return this.transformResponse(response, processListeners);\n    } catch (e) {\n      apiLog(\"processHttpRequest\", e, LogLevelEnum.ERROR);\n      processListeners(\"CommitError\");\n      return genericError;\n    }\n  }\n\n  /**\n   * Handles an immediate request (used during termination)\n   * @param {string} url - The URL to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The parameters to include in the request\n   * @param {Function} processListeners - Function to process event listeners\n   * @return {ResultObject} - A success result object\n   * @private\n   */\n  private _handleImmediateRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): ResultObject {\n    // Use Beacon API for final commit if specified in settings\n    if (this.settings.useBeaconInsteadOfFetch !== \"never\") {\n      const { body, contentType } = this._prepareRequestBody(params);\n      navigator.sendBeacon(url, new Blob([body], { type: contentType }));\n    } else {\n      // Use regular fetch with keepalive\n      this.performFetch(url, params).then(async (response) => {\n        await this.transformResponse(response, processListeners);\n      });\n    }\n\n    // Return success immediately without waiting for response\n    return {\n      result: global_constants.SCORM_TRUE,\n      errorCode: 0,\n    };\n  }\n\n  /**\n   * Prepares the request body and content type based on params type\n   * @param {CommitObject|StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Object} - Object containing body and contentType\n   * @private\n   */\n  private _prepareRequestBody(params: CommitObject | StringKeyMap | Array<any>): {\n    body: string;\n    contentType: string;\n  } {\n    const body = params instanceof Array ? params.join(\"&\") : JSON.stringify(params);\n    const contentType =\n      params instanceof Array\n        ? \"application/x-www-form-urlencoded\"\n        : this.settings.commitRequestDataType;\n\n    return { body, contentType };\n  }\n\n  /**\n   * Perform the fetch request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - The response from the LMS\n   * @private\n   */\n  private async performFetch(url: string, params: StringKeyMap | Array<any>): Promise<Response> {\n    // Use Beacon API if specified in settings\n    if (this.settings.useBeaconInsteadOfFetch === \"always\") {\n      return this.performBeacon(url, params);\n    }\n\n    const { body, contentType } = this._prepareRequestBody(params);\n    const init = {\n      method: \"POST\",\n      mode: this.settings.fetchMode,\n      body,\n      headers: {\n        ...this.settings.xhrHeaders,\n        \"Content-Type\": contentType,\n      },\n      keepalive: true,\n    } as RequestInit;\n\n    if (this.settings.xhrWithCredentials) {\n      init.credentials = \"include\";\n    }\n\n    return fetch(url, init);\n  }\n\n  /**\n   * Perform the beacon request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - A promise that resolves with a mock Response object\n   * @private\n   */\n  private async performBeacon(url: string, params: StringKeyMap | Array<any>): Promise<Response> {\n    const { body, contentType } = this._prepareRequestBody(params);\n\n    // Send the beacon request\n    const beaconSuccess = navigator.sendBeacon(url, new Blob([body], { type: contentType }));\n\n    // Create a mock Response object since sendBeacon doesn't return a Response\n    return Promise.resolve({\n      status: beaconSuccess ? 200 : 0,\n      ok: beaconSuccess,\n      json: async () => ({\n        result: beaconSuccess ? \"true\" : \"false\",\n        errorCode: beaconSuccess ? 0 : this.error_codes.GENERAL,\n      }),\n      text: async () =>\n        JSON.stringify({\n          result: beaconSuccess ? \"true\" : \"false\",\n          errorCode: beaconSuccess ? 0 : this.error_codes.GENERAL,\n        }),\n    } as Response);\n  }\n\n  /**\n   * Transforms the response from the LMS to a ResultObject\n   * @param {Response} response - The response from the LMS\n   * @param {Function} processListeners - Function to process event listeners\n   * @return {Promise<ResultObject>} - The transformed response\n   * @private\n   */\n  private async transformResponse(\n    response: Response,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    // Parse the response using the configured handler or default to json\n    const result =\n      typeof this.settings.responseHandler === \"function\"\n        ? await this.settings.responseHandler(response)\n        : await response.json();\n\n    // Ensure result has an errorCode property\n    if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n      result.errorCode = this._isSuccessResponse(response, result) ? 0 : this.error_codes.GENERAL;\n    }\n\n    // Trigger appropriate event based on success/failure\n    if (this._isSuccessResponse(response, result)) {\n      processListeners(\"CommitSuccess\");\n    } else {\n      processListeners(\"CommitError\", undefined, result.errorCode);\n    }\n\n    return result;\n  }\n\n  /**\n   * Determines if a response is successful based on status code and result\n   * @param {Response} response - The HTTP response\n   * @param {ResultObject} result - The parsed result object\n   * @return {boolean} - Whether the response is successful\n   * @private\n   */\n  private _isSuccessResponse(response: Response, result: ResultObject): boolean {\n    return (\n      response.status >= 200 &&\n      response.status <= 299 &&\n      (result.result === \"true\" || result.result === global_constants.SCORM_TRUE)\n    );\n  }\n\n  /**\n   * Updates the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: InternalSettings): void {\n    this.settings = settings;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { IEventService } from \"../interfaces/services\";\n\n/**\n * Interface for a listener object\n */\ninterface Listener {\n  functionName: string;\n  CMIElement: string | null;\n  callback: Function;\n}\n\n/**\n * Type for parsed listener information\n */\ninterface ParsedListener {\n  functionName: string;\n  CMIElement: string | null;\n}\n\n/**\n * Service for handling event listeners and event processing\n */\nexport class EventService implements IEventService {\n  // Map of function names to listeners for faster lookups\n  private listenerMap: Map<string, Listener[]> = new Map();\n  // Total count of listeners for logging\n  private listenerCount = 0;\n  // Function to log API messages\n  private readonly apiLog: (\n    functionName: string,\n    message: string,\n    messageLevel: LogLevel,\n    CMIElement?: string,\n  ) => void;\n\n  /**\n   * Constructor for EventService\n   * @param {Function} apiLog - Function to log API messages\n   */\n  constructor(\n    apiLog: (\n      functionName: string,\n      message: string,\n      messageLevel: LogLevel,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.apiLog = apiLog;\n  }\n\n  /**\n   * Parses a listener name into its components\n   *\n   * @param {string} listenerName - The name of the listener\n   * @returns {ParsedListener|null} - The parsed listener information or null if invalid\n   */\n  private parseListenerName(listenerName: string): ParsedListener | null {\n    const listenerSplit = listenerName.split(\".\");\n    if (listenerSplit.length === 0) return null;\n\n    const functionName = listenerSplit[0];\n    let CMIElement = null;\n\n    if (listenerSplit.length > 1) {\n      CMIElement = listenerName.replace(`${functionName}.`, \"\");\n    }\n\n    return { functionName, CMIElement };\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener\n   * @param {Function} callback - The callback function to execute when the event occurs\n   */\n  on(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get or create the array for this function name\n      const listeners = this.listenerMap.get(functionName) ?? [];\n\n      // Add the new listener\n      listeners.push({\n        functionName,\n        CMIElement,\n        callback,\n      });\n\n      // Update the map and count\n      this.listenerMap.set(functionName, listeners);\n      this.listenerCount++;\n\n      this.apiLog(\n        \"on\",\n        `Added event listener: ${this.listenerCount}`,\n        LogLevelEnum.INFO,\n        functionName,\n      );\n    }\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener\n   *\n   * @param {string} listenerName - The name of the listener to remove\n   * @param {Function} callback - The callback function to remove\n   */\n  off(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get the listeners for this function name\n      const listeners = this.listenerMap.get(functionName);\n      if (!listeners) continue;\n\n      // Find the index of the listener to remove\n      const removeIndex = listeners.findIndex(\n        (obj) => obj.CMIElement === CMIElement && obj.callback === callback,\n      );\n\n      if (removeIndex !== -1) {\n        // Remove the listener\n        listeners.splice(removeIndex, 1);\n        this.listenerCount--;\n\n        // Update the map or remove the entry if empty\n        if (listeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, listeners);\n        }\n\n        this.apiLog(\n          \"off\",\n          `Removed event listener: ${this.listenerCount}`,\n          LogLevelEnum.INFO,\n          functionName,\n        );\n      }\n    }\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener to clear\n   */\n  clear(listenerName: string) {\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // If we have listeners for this function name\n      if (this.listenerMap.has(functionName)) {\n        const listeners = this.listenerMap.get(functionName)!;\n\n        // Filter out listeners that match the criteria\n        const newListeners = listeners.filter((obj) => obj.CMIElement !== CMIElement);\n\n        // Update the count and map\n        this.listenerCount -= listeners.length - newListeners.length;\n\n        if (newListeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, newListeners);\n        }\n      }\n    }\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created\n   *\n   * @param {string} functionName - The name of the function that triggered the event\n   * @param {string} CMIElement - The CMI element that was affected\n   * @param {any} value - The value that was set\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this.apiLog(functionName, value, LogLevelEnum.INFO, CMIElement);\n\n    // Get listeners for this function name\n    const listeners = this.listenerMap.get(functionName);\n    if (!listeners) return;\n\n    for (const listener of listeners) {\n      const listenerHasCMIElement = !!listener.CMIElement;\n      let CMIElementsMatch = false;\n\n      // Check if CMI elements match\n      if (CMIElement && listener.CMIElement) {\n        if (listener.CMIElement.endsWith(\"*\")) {\n          // For wildcard matches, check if the CMI element starts with the prefix\n          const prefix = listener.CMIElement.slice(0, -1);\n          CMIElementsMatch = CMIElement.startsWith(prefix);\n        } else {\n          // For exact matches, compare the strings directly\n          CMIElementsMatch = listener.CMIElement === CMIElement;\n        }\n      }\n\n      // If the listener matches, call the callback\n      if (!listenerHasCMIElement || CMIElementsMatch) {\n        this.apiLog(\n          \"processListeners\",\n          `Processing listener: ${listener.functionName}`,\n          LogLevelEnum.DEBUG,\n          CMIElement,\n        );\n\n        // Handle special event types\n        if (functionName.startsWith(\"Sequence\")) {\n          // For sequence events, pass the target as the first argument\n          listener.callback(value);\n        } else if (functionName === \"CommitError\") {\n          // For commit error events, pass the error code\n          listener.callback(value);\n        } else if (functionName === \"CommitSuccess\") {\n          // For commit success events, pass no arguments\n          listener.callback();\n        } else {\n          // For regular events, pass CMIElement and value\n          listener.callback(CMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Resets the event service by clearing all listeners\n   */\n  reset() {\n    this.listenerMap.clear();\n    this.listenerCount = 0;\n  }\n}\n","import { CommitObject, LogLevel } from \"../types/api_types\";\nimport { StringKeyMap, unflatten } from \"../utilities\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { BaseCMI } from \"../cmi/common/base_cmi\";\nimport { ISerializationService } from \"../interfaces/services\";\n\n/**\n * Service for handling data serialization and deserialization in scorm-again\n */\nexport class SerializationService implements ISerializationService {\n  /**\n   * Loads CMI data from a flattened JSON object with special handling for arrays and ordering.\n   *\n   * This method implements a complex algorithm for loading flattened JSON data into the CMI\n   * object structure. It handles several key challenges:\n   *\n   * 1. Ordering dependencies: Some CMI elements (like interactions and objectives) must be\n   *    loaded in a specific order to ensure proper initialization.\n   *\n   * 2. Array handling: Interactions and objectives are stored as arrays, and their properties\n   *    must be loaded in the correct order (e.g., 'id' and 'type' must be set before other properties).\n   *\n   * 3. Unflattening: The method converts flattened dot notation (e.g., \"cmi.objectives.0.id\")\n   *    back into nested objects before loading.\n   *\n   * The algorithm works by:\n   * - Categorizing keys into interactions, objectives, and other properties\n   * - Sorting interactions to prioritize 'id' and 'type' fields within each index\n   * - Sorting objectives to prioritize 'id' fields within each index\n   * - Processing each category in order: interactions, objectives, then other properties\n   *\n   * @param {StringKeyMap} json - The flattened JSON object with dot notation keys\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   *\n   * @param setStartingData\n   * @example\n   * // Example of flattened JSON input:\n   * // {\n   * //   \"cmi.objectives.0.id\": \"obj1\",\n   * //   \"cmi.objectives.0.score.raw\": \"80\",\n   * //   \"cmi.interactions.0.id\": \"int1\",\n   * //   \"cmi.interactions.0.type\": \"choice\",\n   * //   \"cmi.interactions.0.result\": \"correct\"\n   * // }\n   */\n  loadFromFlattenedJSON(\n    json: StringKeyMap,\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromFlattenedJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    const int_pattern = /^(cmi\\.interactions\\.)(\\d+)\\.(.*)$/;\n    const obj_pattern = /^(cmi\\.objectives\\.)(\\d+)\\.(.*)$/;\n\n    // Extract and categorize keys for better sorting\n    const interactions: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const objectives: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const others: { key: string; value: any }[] = [];\n\n    // Categorize keys\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key)) {\n        const intMatch = key.match(int_pattern);\n        if (intMatch) {\n          interactions.push({\n            key,\n            value: json[key],\n            index: Number(intMatch[2]),\n            field: intMatch[3],\n          });\n          continue;\n        }\n\n        const objMatch = key.match(obj_pattern);\n        if (objMatch) {\n          objectives.push({\n            key,\n            value: json[key],\n            index: Number(objMatch[2]),\n            field: objMatch[3],\n          });\n          continue;\n        }\n\n        others.push({ key, value: json[key] });\n      }\n    }\n\n    // Sort interactions: first by index, then prioritize 'id' and 'type' fields\n    interactions.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id and type\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n      if (a.field === \"type\") return -1;\n      if (b.field === \"type\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort objectives: first by index, then prioritize 'id' field\n    objectives.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort other keys alphabetically\n    others.sort((a, b) => a.key.localeCompare(b.key));\n\n    // Process all items in the correct order\n    const processItems = (items: { key: string; value: any }[]) => {\n      items.forEach((item) => {\n        const obj: StringKeyMap = {};\n        obj[item.key] = item.value;\n        this.loadFromJSON(\n          unflatten(obj) as StringKeyMap,\n          CMIElement,\n          setCMIValue,\n          isNotInitialized,\n          setStartingData,\n        );\n      });\n    };\n\n    // Process in order: interactions, objectives, others\n    processItems(interactions);\n    processItems(objectives);\n    processItems(others);\n  }\n\n  /**\n   * Loads CMI data from a nested JSON object with recursive traversal.\n   *\n   * This method implements a recursive algorithm for loading nested JSON data into the CMI\n   * object structure. It handles several key aspects:\n   *\n   * 1. Recursive traversal: The method recursively traverses the nested JSON structure,\n   *    building CMI element paths as it goes (e.g., \"cmi.core.student_id\").\n   *\n   * 2. Type-specific handling: Different data types are handled differently:\n   *    - Arrays: Each array element is processed individually with its index in the path\n   *    - Objects: Recursively processed with updated path\n   *    - Primitives: Set directly using setCMIValue\n   *\n   * 3. Initialization check: Ensures the method is only called before API initialization\n   *\n   * 4. Starting data storage: Stores the original JSON data for potential future use\n   *\n   * The algorithm works by:\n   * - First storing the complete JSON object via setStartingData\n   * - Iterating through each property in the JSON object\n   * - For each property, determining its type and handling it accordingly\n   * - Building the CMI element path as it traverses the structure\n   * - Setting values at the appropriate paths using setCMIValue\n   *\n   * @param {{[key: string]: any}} json - The nested JSON object to load\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value at a specific path\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   * @param {Function} setStartingData - Function to store the original JSON data\n   *\n   * @example\n   * // Example of nested JSON input:\n   * // {\n   * //   \"core\": {\n   * //     \"student_id\": \"12345\",\n   * //     \"student_name\": \"John Doe\"\n   * //   },\n   * //   \"objectives\": [\n   * //     { \"id\": \"obj1\", \"score\": { \"raw\": 80 } },\n   * //     { \"id\": \"obj2\", \"score\": { \"raw\": 90 } }\n   * //   ]\n   * // }\n   */\n  loadFromJSON(\n    json: { [key: string]: any },\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    CMIElement = CMIElement !== undefined ? CMIElement : \"cmi\";\n\n    setStartingData(json);\n\n    // could this be refactored down to flatten(json) then setCMIValue on each?\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key) && json[key]) {\n        const currentCMIElement = (CMIElement ? CMIElement + \".\" : \"\") + key;\n        const value = json[key];\n\n        if (value.constructor === Array) {\n          for (let i = 0; i < value.length; i++) {\n            if (value[i]) {\n              const item = value[i];\n              const tempCMIElement = `${currentCMIElement}.${i}`;\n\n              if (item.constructor === Object) {\n                this.loadFromJSON(\n                  item,\n                  tempCMIElement,\n                  setCMIValue,\n                  isNotInitialized,\n                  setStartingData,\n                );\n              } else {\n                setCMIValue(tempCMIElement, item);\n              }\n            }\n          }\n        } else if (value.constructor === Object) {\n          this.loadFromJSON(\n            value,\n            currentCMIElement,\n            setCMIValue,\n            isNotInitialized,\n            setStartingData,\n          );\n        } else {\n          setCMIValue(currentCMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Render the CMI object to JSON for sending to an LMS.\n   *\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {string}\n   */\n  renderCMIToJSONString(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): string {\n    // Do we want/need to return fields that have no set value?\n    if (sendFullCommit) {\n      return JSON.stringify({ cmi });\n    }\n    return JSON.stringify({ cmi }, (k, v) => (v === undefined ? null : v), 2);\n  }\n\n  /**\n   * Returns a JS object representing the current cmi\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {object}\n   */\n  renderCMIToJSONObject(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): StringKeyMap {\n    // Revert to the original implementation to maintain compatibility with tests\n    return JSON.parse(this.renderCMIToJSONString(cmi, sendFullCommit));\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} alwaysSendTotalTime - Whether to always send total time\n   * @param {boolean|Function} renderCommonCommitFields - Whether to render common commit fields\n   * @param {Function} renderCommitObject - Function to render commit object\n   * @param {Function} renderCommitCMI - Function to render commit CMI\n   * @param {LogLevel} apiLogLevel - The API log level\n   * @return {CommitObject|StringKeyMap|Array<any>}\n   */\n  getCommitObject(\n    terminateCommit: boolean,\n    alwaysSendTotalTime: boolean,\n    renderCommonCommitFields: boolean | ((commitObject: CommitObject) => boolean),\n    renderCommitObject: (terminateCommit: boolean, includeTotalTime?: boolean) => CommitObject,\n    renderCommitCMI: (\n      terminateCommit: boolean,\n      includeTotalTime?: boolean,\n    ) => StringKeyMap | Array<any>,\n    apiLogLevel: LogLevel,\n  ): CommitObject | StringKeyMap | Array<any> {\n    // Fix for issue: total time is being calculated incorrectly across multiple sessions\n    // when selfReportSessionTime and alwaysSendTotalTime are enabled.\n    //\n    // Previously, we were using a single variable (shouldTerminateCommit) that combined\n    // both concerns: whether this is a termination commit and whether to include total time.\n    // This caused the total time to be calculated as if every commit was a terminate commit\n    // when alwaysSendTotalTime was true, leading to incorrect time calculations.\n    //\n    // Now we pass the actual terminateCommit value and a separate parameter for whether\n    // to include total time, allowing the rendering functions to handle these concerns separately.\n    const includeTotalTime = alwaysSendTotalTime || terminateCommit;\n\n    const commitObject = renderCommonCommitFields\n      ? renderCommitObject(terminateCommit, includeTotalTime)\n      : renderCommitCMI(terminateCommit, includeTotalTime);\n\n    if ([LogLevelEnum.DEBUG, \"1\", 1, \"DEBUG\"].includes(apiLogLevel)) {\n      console.debug(\"Commit (terminated: \" + (terminateCommit ? \"yes\" : \"no\") + \"): \");\n      console.debug(commitObject);\n    }\n    return commitObject;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ILoggingService } from \"../interfaces/services\";\nimport { defaultLogHandler } from \"../constants/default_settings\";\n\n/**\n * Centralized logging service implemented as a singleton\n * Provides methods for logging at different levels and configuring the log level\n */\nexport class LoggingService implements ILoggingService {\n  private static _instance: LoggingService;\n  private _logLevel: LogLevel = LogLevelEnum.ERROR;\n  private _logHandler: (messageLevel: LogLevel, logMessage: string) => void;\n\n  /**\n   * Private constructor to prevent direct instantiation\n   */\n  private constructor() {\n    // Default log handler uses console methods based on log level\n    this._logHandler = defaultLogHandler;\n  }\n\n  /**\n   * Get the singleton instance of LoggingService\n   *\n   * @returns {LoggingService} The singleton instance\n   */\n  public static getInstance(): LoggingService {\n    if (!LoggingService._instance) {\n      LoggingService._instance = new LoggingService();\n    }\n    return LoggingService._instance;\n  }\n\n  /**\n   * Set the log level\n   *\n   * @param {LogLevel} level - The log level to set\n   */\n  public setLogLevel(level: LogLevel): void {\n    this._logLevel = level;\n  }\n\n  /**\n   * Get the current log level\n   *\n   * @returns {LogLevel} The current log level\n   */\n  public getLogLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  /**\n   * Set a custom log handler\n   *\n   * @param {Function} handler - The function to handle log messages\n   */\n  public setLogHandler(handler: (messageLevel: LogLevel, logMessage: string) => void): void {\n    this._logHandler = handler;\n  }\n\n  /**\n   * Log a message if the message level is greater than or equal to the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @param {string} logMessage - The message to log\n   */\n  public log(messageLevel: LogLevel, logMessage: string): void {\n    if (this.shouldLog(messageLevel)) {\n      this._logHandler(messageLevel, logMessage);\n    }\n  }\n\n  /**\n   * Log a message at ERROR level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public error(logMessage: string): void {\n    this.log(LogLevelEnum.ERROR, logMessage);\n  }\n\n  /**\n   * Log a message at WARN level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public warn(logMessage: string): void {\n    this.log(LogLevelEnum.WARN, logMessage);\n  }\n\n  /**\n   * Log a message at INFO level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public info(logMessage: string): void {\n    this.log(LogLevelEnum.INFO, logMessage);\n  }\n\n  /**\n   * Log a message at DEBUG level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public debug(logMessage: string): void {\n    this.log(LogLevelEnum.DEBUG, logMessage);\n  }\n\n  /**\n   * Determine if a message should be logged based on its level and the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @returns {boolean} Whether the message should be logged\n   */\n  private shouldLog(messageLevel: LogLevel): boolean {\n    // Convert string levels to numbers for comparison\n    const numericMessageLevel = this.getNumericLevel(messageLevel);\n    const numericLogLevel = this.getNumericLevel(this._logLevel);\n\n    return numericMessageLevel >= numericLogLevel;\n  }\n\n  /**\n   * Convert a log level to its numeric value\n   *\n   * @param {LogLevel} level - The log level to convert\n   * @returns {number} The numeric value of the log level\n   */\n  private getNumericLevel(level: LogLevel): number {\n    if (level === undefined) return LogLevelEnum.NONE;\n\n    if (typeof level === \"number\") return level;\n\n    switch (level) {\n      case \"1\":\n      case \"DEBUG\":\n        return LogLevelEnum.DEBUG;\n      case \"2\":\n      case \"INFO\":\n        return LogLevelEnum.INFO;\n      case \"3\":\n      case \"WARN\":\n        return LogLevelEnum.WARN;\n      case \"4\":\n      case \"ERROR\":\n        return LogLevelEnum.ERROR;\n      case \"5\":\n      case \"NONE\":\n        return LogLevelEnum.NONE;\n      default:\n        return LogLevelEnum.ERROR; // Default to ERROR if unknown\n    }\n  }\n}\n\n// Export a function to get the singleton instance\nexport function getLoggingService(): LoggingService {\n  return LoggingService.getInstance();\n}\n","import { LogLevelEnum } from \"../constants/enums\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { ValidationError } from \"../exceptions\";\nimport { IErrorHandlingService, ILoggingService } from \"../interfaces/services\";\nimport { getLoggingService } from \"./LoggingService\";\n\n/**\n * Service for handling SCORM errors\n */\nexport class ErrorHandlingService implements IErrorHandlingService {\n  private _lastErrorCode: string = \"0\";\n  private readonly _errorCodes: ErrorCode;\n  private readonly _apiLog: (\n    functionName: string,\n    message: string,\n    logLevel?: LogLevelEnum,\n    CMIElement?: string,\n  ) => void;\n  private readonly _getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string;\n  private readonly _loggingService: ILoggingService;\n\n  /**\n   * Constructor for ErrorHandlingService\n   *\n   * @param {ErrorCode} errorCodes - The error codes object\n   * @param {Function} apiLog - Function for logging API calls\n   * @param {Function} getLmsErrorMessageDetails - Function for getting error message details\n   * @param {ILoggingService} loggingService - Optional logging service instance\n   */\n  constructor(\n    errorCodes: ErrorCode,\n    apiLog: (\n      functionName: string,\n      message: string,\n      logLevel?: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n    loggingService?: ILoggingService,\n  ) {\n    this._errorCodes = errorCodes;\n    this._apiLog = apiLog;\n    this._getLmsErrorMessageDetails = getLmsErrorMessageDetails;\n    this._loggingService = loggingService || getLoggingService();\n  }\n\n  /**\n   * Get the last error code\n   *\n   * @return {string} - The last error code\n   */\n  get lastErrorCode(): string {\n    return this._lastErrorCode;\n  }\n\n  /**\n   * Set the last error code\n   *\n   * @param {string} errorCode - The error code to set\n   */\n  set lastErrorCode(errorCode: string) {\n    this._lastErrorCode = errorCode;\n  }\n\n  /**\n   * Throws a SCORM error\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The error number\n   * @param {string} message - The error message\n   * @throws {ValidationError} - If throwException is true, throws a ValidationError\n   */\n  throwSCORMError(CMIElement: string, errorNumber: number, message?: string): void {\n    if (!message) {\n      message = this._getLmsErrorMessageDetails(errorNumber, true);\n    }\n\n    // Format a more descriptive error message with context\n    const formattedMessage = `SCORM Error ${errorNumber}: ${message}${CMIElement ? ` [Element: ${CMIElement}]` : \"\"}`;\n\n    // Log using both the API log and the logging service for consistency\n    this._apiLog(\"throwSCORMError\", errorNumber + \": \" + message, LogLevelEnum.ERROR, CMIElement);\n    this._loggingService.error(formattedMessage);\n\n    this._lastErrorCode = String(errorNumber);\n  }\n\n  /**\n   * Clears the last SCORM error code on success.\n   *\n   * @param {string} success - Whether the operation was successful\n   */\n  clearSCORMError(success: string): void {\n    if (success !== undefined && success !== global_constants.SCORM_FALSE) {\n      this._lastErrorCode = \"0\";\n    }\n  }\n\n  /**\n   * Handles exceptions that occur when accessing or setting CMI values.\n   *\n   * This method provides centralized error handling for exceptions that occur during\n   * CMI data operations. It differentiates between different types of errors and\n   * handles them appropriately:\n   *\n   * 1. ValidationError: These are expected errors from the validation system that\n   *    indicate a specific SCORM error condition (like invalid data format or range).\n   *    For these errors, the method:\n   *    - Sets the lastErrorCode to the error code from the ValidationError\n   *    - Returns SCORM_FALSE to indicate failure to the caller\n   *\n   * 2. Standard JavaScript Error: For general JavaScript errors (like TypeError,\n   *    ReferenceError, etc.), the method:\n   *    - Logs the error message with stack trace to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * 3. Unknown exceptions: For any other type of exception that doesn't match the\n   *    above categories, the method:\n   *    - Logs the entire exception object to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * This method is critical for maintaining SCORM compliance by ensuring that\n   * all errors are properly translated into the appropriate SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {ValidationError|Error|unknown} e - The exception that was thrown\n   * @param {string} returnValue - The default return value (typically an empty string)\n   * @return {string} - Either the original returnValue or SCORM_FALSE if an error occurred\n   *\n   * @example\n   * try {\n   *   const value = getCMIValue(\"cmi.core.score.raw\");\n   *   return value;\n   * } catch (e) {\n   *   return handleValueAccessException(e, \"\");\n   * }\n   */\n  handleValueAccessException(\n    CMIElement: string,\n    e: Error | ValidationError | unknown,\n    returnValue: string,\n  ): string {\n    if (e instanceof ValidationError) {\n      const validationError = e as ValidationError;\n      this._lastErrorCode = String(validationError.errorCode);\n\n      // Log validation errors at WARN level with context\n      const errorMessage = `Validation Error ${validationError.errorCode}: ${validationError.message} [Element: ${CMIElement}]`;\n      this._loggingService.warn(errorMessage);\n\n      returnValue = global_constants.SCORM_FALSE;\n    } else if (e instanceof Error) {\n      // For standard JS errors, include the stack trace and error type\n      const errorType = e.constructor.name; // Gets the error type (e.g., TypeError, ReferenceError)\n      const errorMessage = `${errorType}: ${e.message} [Element: ${CMIElement}]`;\n      const stackTrace = e.stack || \"\";\n\n      // Log the detailed error with stack trace\n      this._loggingService.error(`${errorMessage}\\n${stackTrace}`);\n\n      this.throwSCORMError(CMIElement, this._errorCodes.GENERAL, `${errorType}: ${e.message}`);\n    } else {\n      // For unknown errors, provide as much context as possible\n      const errorMessage = `Unknown error occurred while accessing [Element: ${CMIElement}]`;\n\n      this._loggingService.error(errorMessage);\n\n      try {\n        // Try to stringify the error object for more details\n        const errorDetails = JSON.stringify(e);\n        this._loggingService.error(`Error details: ${errorDetails}`);\n      } catch (jsonError) {\n        // If stringify fails, log that we couldn't get more details\n        this._loggingService.error(\"Could not stringify error object for details\");\n      }\n\n      this.throwSCORMError(CMIElement, this._errorCodes.GENERAL, \"Unknown error\");\n    }\n    return returnValue;\n  }\n\n  /**\n   * Get the error codes object\n   *\n   * @return {ErrorCode} - The error codes object\n   */\n  get errorCodes(): ErrorCode {\n    return this._errorCodes;\n  }\n}\n\n// Export a factory function to create the service\nexport function createErrorHandlingService(\n  errorCodes: ErrorCode,\n  apiLog: (\n    functionName: string,\n    message: string,\n    logLevel: LogLevelEnum,\n    CMIElement?: string,\n  ) => void,\n  getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n  loggingService?: ILoggingService,\n): ErrorHandlingService {\n  return new ErrorHandlingService(errorCodes, apiLog, getLmsErrorMessageDetails, loggingService);\n}\n","import { CommitObject, InternalSettings, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ErrorCode } from \"../constants/error_codes\";\n\n/**\n * Interface for sync queue item\n */\ninterface SyncQueueItem {\n  id: string;\n  courseId: string;\n  timestamp: number;\n  data: CommitObject;\n  syncAttempts: number;\n}\n\n/**\n * Service for handling offline storage and synchronization of SCORM data\n */\nexport class OfflineStorageService {\n  private settings: InternalSettings;\n  private error_codes: ErrorCode;\n  private storeName: string = \"scorm_again_offline_data\";\n  private syncQueue: string = \"scorm_again_sync_queue\";\n  private isOnline: boolean = navigator.onLine;\n  private syncInProgress: boolean = false;\n\n  /**\n   * Constructor for OfflineStorageService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Function} apiLog - The logging function\n   */\n  constructor(\n    settings: InternalSettings,\n    error_codes: ErrorCode,\n    private apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n\n    // Initialize listeners for online/offline events\n    window.addEventListener(\"online\", this.handleOnlineStatusChange.bind(this));\n    window.addEventListener(\"offline\", this.handleOnlineStatusChange.bind(this));\n  }\n\n  /**\n   * Handle changes in online status\n   */\n  private handleOnlineStatusChange() {\n    const wasOnline = this.isOnline;\n    this.isOnline = navigator.onLine;\n\n    // If we've come back online, trigger sync process\n    if (!wasOnline && this.isOnline) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        \"Device is back online, attempting to sync...\",\n        LogLevelEnum.INFO,\n      );\n      this.syncOfflineData().then(\n        (success) => {\n          if (success) {\n            this.apiLog(\"OfflineStorageService\", \"Sync completed successfully\", LogLevelEnum.INFO);\n          } else {\n            this.apiLog(\"OfflineStorageService\", \"Sync failed\", LogLevelEnum.ERROR);\n          }\n        },\n        (error) => {\n          this.apiLog(\"OfflineStorageService\", `Error during sync: ${error}`, LogLevelEnum.ERROR);\n        },\n      );\n    } else if (wasOnline && !this.isOnline) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        \"Device is offline, data will be stored locally\",\n        LogLevelEnum.INFO,\n      );\n    }\n  }\n\n  /**\n   * Store commit data offline\n   * @param {string} courseId - Identifier for the course\n   * @param {CommitObject} commitData - The data to store offline\n   * @returns {Promise<ResultObject>} - Result of the storage operation\n   */\n  async storeOffline(courseId: string, commitData: CommitObject): Promise<ResultObject> {\n    try {\n      // Store the data in the sync queue with timestamp and unique ID\n      const queueItem: SyncQueueItem = {\n        id: `${courseId}_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`,\n        courseId,\n        timestamp: Date.now(),\n        data: commitData,\n        syncAttempts: 0,\n      };\n\n      // Get current queue\n      const currentQueue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n      currentQueue.push(queueItem);\n\n      // Save updated queue\n      await this.saveToStorage(this.syncQueue, currentQueue);\n\n      // Also update the current state in the main storage (latest known state)\n      await this.saveToStorage(`${this.storeName}_${courseId}`, commitData);\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Stored data offline for course ${courseId}`,\n        LogLevelEnum.INFO,\n      );\n\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error storing offline data: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL,\n      };\n    }\n  }\n\n  /**\n   * Get the stored offline data for a course\n   * @param {string} courseId - Identifier for the course\n   * @returns {Promise<CommitObject|null>} - The stored data or null if not found\n   */\n  async getOfflineData(courseId: string): Promise<CommitObject | null> {\n    try {\n      const data = await this.getFromStorage<CommitObject>(`${this.storeName}_${courseId}`);\n      return data || null;\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error retrieving offline data: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return null;\n    }\n  }\n\n  /**\n   * Synchronize offline data with the LMS when connection is available\n   * @returns {Promise<boolean>} - Success status of synchronization\n   */\n  async syncOfflineData(): Promise<boolean> {\n    // Don't run multiple sync processes at once\n    if (this.syncInProgress || !this.isOnline) {\n      return false;\n    }\n\n    this.syncInProgress = true;\n\n    try {\n      // Get the queue of items to sync\n      const syncQueue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n\n      if (syncQueue.length === 0) {\n        this.syncInProgress = false;\n        return true;\n      }\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Found ${syncQueue.length} items to sync`,\n        LogLevelEnum.INFO,\n      );\n\n      // Keep track of successful and failed sync attempts\n      const remainingQueue: SyncQueueItem[] = [];\n\n      // Process each queue item\n      for (const item of syncQueue) {\n        // Skip items that have been attempted too many times\n        if (item.syncAttempts >= 5) {\n          this.apiLog(\n            \"OfflineStorageService\",\n            `Skipping item ${item.id} after 5 failed attempts`,\n            LogLevelEnum.WARN,\n          );\n          continue;\n        }\n\n        try {\n          // Attempt to sync this item\n          const syncResult = await this.sendDataToLMS(item.data);\n\n          if (syncResult.result === global_constants.SCORM_TRUE) {\n            // Sync was successful, no need to keep this item\n            this.apiLog(\n              \"OfflineStorageService\",\n              `Successfully synced item ${item.id}`,\n              LogLevelEnum.INFO,\n            );\n          } else {\n            // Sync failed, increment attempts and keep in queue\n            item.syncAttempts++;\n            remainingQueue.push(item);\n            this.apiLog(\n              \"OfflineStorageService\",\n              `Failed to sync item ${item.id}, attempt #${item.syncAttempts}`,\n              LogLevelEnum.WARN,\n            );\n          }\n        } catch (error) {\n          // On error, increment attempts and keep in queue\n          item.syncAttempts++;\n          remainingQueue.push(item);\n          this.apiLog(\n            \"OfflineStorageService\",\n            `Error syncing item ${item.id}: ${error}`,\n            LogLevelEnum.ERROR,\n          );\n        }\n      }\n\n      // Update the queue with remaining items\n      await this.saveToStorage(this.syncQueue, remainingQueue);\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Sync completed. ${syncQueue.length - remainingQueue.length} items synced, ${remainingQueue.length} items remaining`,\n        LogLevelEnum.INFO,\n      );\n\n      this.syncInProgress = false;\n      return true;\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error during sync process: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      this.syncInProgress = false;\n      return false;\n    }\n  }\n\n  /**\n   * Send data to the LMS when online\n   * @param {CommitObject} data - The data to send to the LMS\n   * @returns {Promise<ResultObject>} - Result of the sync operation\n   */\n  private async sendDataToLMS(data: CommitObject): Promise<ResultObject> {\n    if (!this.settings.lmsCommitUrl) {\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL,\n      };\n    }\n\n    try {\n      // Apply request handler if configured\n      const processedData = this.settings.requestHandler(data);\n\n      // Send the data to the LMS\n      const init = {\n        method: \"POST\",\n        mode: this.settings.fetchMode,\n        body: JSON.stringify(processedData),\n        headers: {\n          ...this.settings.xhrHeaders,\n          \"Content-Type\": this.settings.commitRequestDataType,\n        },\n      } as RequestInit;\n\n      if (this.settings.xhrWithCredentials) {\n        init.credentials = \"include\";\n      }\n\n      const response = await fetch(this.settings.lmsCommitUrl as string, init);\n\n      // Process the response using the configured handler\n      const result =\n        typeof this.settings.responseHandler === \"function\"\n          ? await this.settings.responseHandler(response)\n          : await response.json();\n\n      if (\n        response.status >= 200 &&\n        response.status <= 299 &&\n        (result.result === true || result.result === global_constants.SCORM_TRUE)\n      ) {\n        if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n          result.errorCode = 0;\n        }\n        return result;\n      } else {\n        if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n          result.errorCode = this.error_codes.GENERAL;\n        }\n        return result;\n      }\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error sending data to LMS: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL,\n      };\n    }\n  }\n\n  /**\n   * Check if the device is currently online\n   * @returns {boolean} - Online status\n   */\n  isDeviceOnline(): boolean {\n    return this.isOnline;\n  }\n\n  // noinspection JSValidateJSDoc\n  /**\n   * Get item from localStorage\n   * @param {string} key - The key to retrieve\n   * @returns {Promise<T|null>} - The retrieved data\n   */\n  private async getFromStorage<T>(key: string): Promise<T | null> {\n    const storedData = localStorage.getItem(key);\n    if (storedData) {\n      try {\n        return JSON.parse(storedData) as T;\n      } catch (e) {\n        return null;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Save item to localStorage\n   * @param {string} key - The key to store under\n   * @param {any} data - The data to store\n   * @returns {Promise<void>}\n   */\n  private async saveToStorage(key: string, data: any): Promise<void> {\n    localStorage.setItem(key, JSON.stringify(data));\n  }\n\n  /**\n   * Check if there is pending offline data for a course\n   * @param {string} courseId - Identifier for the course\n   * @returns {Promise<boolean>} - Whether there is pending data\n   */\n  async hasPendingOfflineData(courseId: string): Promise<boolean> {\n    const queue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n    return queue.some((item) => item.courseId === courseId);\n  }\n\n  /**\n   * Update the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: InternalSettings): void {\n    this.settings = settings;\n  }\n}\n","import { ErrorCode } from \"./constants/error_codes\";\nimport { global_constants } from \"./constants/api_constants\";\nimport * as Utilities from \"./utilities\";\nimport { formatMessage, StringKeyMap, stringMatches } from \"./utilities\";\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport { CommitObject, InternalSettings, LogLevel, ResultObject, Settings } from \"./types/api_types\";\nimport { DefaultSettings } from \"./constants/default_settings\";\nimport { IBaseAPI } from \"./interfaces/IBaseAPI\";\nimport { ScheduledCommit } from \"./types/scheduled_commit\";\nimport { LogLevelEnum } from \"./constants/enums\";\nimport { HttpService } from \"./services/HttpService\";\nimport { EventService } from \"./services/EventService\";\nimport { SerializationService } from \"./services/SerializationService\";\nimport { createErrorHandlingService } from \"./services/ErrorHandlingService\";\nimport { getLoggingService } from \"./services/LoggingService\";\nimport { OfflineStorageService } from \"./services/OfflineStorageService\";\nimport {\n  ICMIDataService,\n  IErrorHandlingService,\n  IEventService,\n  IHttpService,\n  ILoggingService,\n  IOfflineStorageService,\n  ISerializationService\n} from \"./interfaces/services\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { ValidationError } from \"./exceptions\";\n\n/**\n * Base API class for AICC, SCORM 1.2, and SCORM 2004. Should be considered\n * abstract, and never initialized on its own.\n */\nexport default abstract class BaseAPI implements IBaseAPI {\n  private _timeout?: ScheduledCommit | undefined;\n  private readonly _error_codes: ErrorCode;\n  private _settings: InternalSettings = DefaultSettings;\n  private readonly _httpService: IHttpService;\n  private _eventService: IEventService;\n  private _serializationService: ISerializationService;\n  private readonly _errorHandlingService: IErrorHandlingService;\n  private readonly _loggingService: ILoggingService;\n  private readonly _offlineStorageService?: IOfflineStorageService;\n  private _courseId: string = \"\";\n\n  /**\n   * Constructor for Base API class. Sets some shared API fields, as well as\n   * sets up options for the API.\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Settings} settings - Optional settings for the API\n   * @param {IHttpService} httpService - Optional HTTP service instance\n   * @param {IEventService} eventService - Optional Event service instance\n   * @param {ISerializationService} serializationService - Optional Serialization service instance\n   * @param {ICMIDataService} cmiDataService - Optional CMI Data service instance\n   * @param {IErrorHandlingService} errorHandlingService - Optional Error Handling service instance\n   * @param {ILoggingService} loggingService - Optional Logging service instance\n   * @param {IOfflineStorageService} offlineStorageService - Optional Offline Storage service instance\n   */\n  protected constructor(\n    error_codes: ErrorCode,\n    settings?: Settings,\n    httpService?: IHttpService,\n    eventService?: IEventService,\n    serializationService?: ISerializationService,\n    cmiDataService?: ICMIDataService,\n    errorHandlingService?: IErrorHandlingService,\n    loggingService?: ILoggingService,\n    offlineStorageService?: IOfflineStorageService,\n  ) {\n    if (new.target === BaseAPI) {\n      throw new TypeError(\"Cannot construct BaseAPI instances directly\");\n    }\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n\n    this._error_codes = error_codes;\n\n    if (settings) {\n      this.settings = {\n        ...DefaultSettings,\n        ...settings,\n      } as InternalSettings;\n    }\n\n    // Initialize and configure LoggingService\n    this._loggingService = loggingService || getLoggingService();\n    this._loggingService.setLogLevel(this.apiLogLevel);\n\n    // If settings include a custom onLogMessage function, use it as the log handler\n    if (this.settings.onLogMessage) {\n      this._loggingService.setLogHandler(this.settings.onLogMessage);\n    }\n\n    // Initialize HTTP service\n    this._httpService = httpService || new HttpService(this.settings, this._error_codes);\n\n    // Initialize Event service\n    this._eventService =\n      eventService ||\n      new EventService((functionName, message, level, element) =>\n        this.apiLog(functionName, message, level, element),\n      );\n\n    // Initialize Serialization service\n    this._serializationService = serializationService || new SerializationService();\n\n    // Initialize Error Handling service\n    this._errorHandlingService =\n      errorHandlingService ||\n      createErrorHandlingService(\n        this._error_codes,\n        (functionName, message, level, element) =>\n          this.apiLog(functionName, message, level, element),\n        (errorNumber, detail) => this.getLmsErrorMessageDetails(errorNumber, detail),\n      );\n\n    // Initialize Offline Storage service if enabled\n    if (this.settings.enableOfflineSupport) {\n      this._offlineStorageService =\n        offlineStorageService ||\n        new OfflineStorageService(\n          this.settings,\n          this._error_codes,\n          (functionName, message, level, element) =>\n            this.apiLog(functionName, message, level, element),\n        );\n\n      if (this.settings.courseId) {\n        this._courseId = this.settings.courseId;\n      }\n\n      // Check for offline data to restore on initialization\n      if (this._offlineStorageService && this._courseId) {\n        this._offlineStorageService\n          .getOfflineData(this._courseId)\n          .then((offlineData) => {\n            if (offlineData) {\n              this.apiLog(\"constructor\", \"Found offline data to restore\", LogLevelEnum.INFO);\n              // Restore data from offline storage\n              this.loadFromJSON(offlineData.runtimeData);\n            }\n          })\n          .catch((error) => {\n            this.apiLog(\n              \"constructor\",\n              `Error retrieving offline data: ${error}`,\n              LogLevelEnum.ERROR,\n            );\n          });\n      }\n    }\n  }\n\n  public abstract cmi: BaseCMI;\n  public startingData?: StringKeyMap;\n\n  public currentState: number;\n  public apiLogLevel: LogLevel;\n  public selfReportSessionTime: boolean;\n\n  /**\n   * Get the last error code\n   * @return {string}\n   */\n  get lastErrorCode(): string {\n    return this._errorHandlingService?.lastErrorCode ?? \"0\";\n  }\n\n  /**\n   * Set the last error code\n   * @param {string} errorCode\n   */\n  set lastErrorCode(errorCode: string) {\n    if (this._errorHandlingService) {\n      this._errorHandlingService.lastErrorCode = errorCode;\n    }\n  }\n\n  /**\n   * Reset the API to its initial state.\n   * This method clears all current data and resets the API to an uninitialized state.\n   * It can optionally accept new settings to configure the API after reset.\n   *\n   * @param {Settings} settings - Optional new settings to apply after reset\n   */\n  abstract reset(settings?: Settings): void;\n\n  /**\n   * Common reset method for all APIs. New settings are merged with the existing settings.\n   * @param {Settings} settings\n   * @protected\n   */\n  commonReset(settings?: Settings): void {\n    this.apiLog(\"reset\", \"Called\", LogLevelEnum.INFO);\n\n    this.settings = { ...this.settings, ...settings };\n\n    this.clearScheduledCommit();\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n    this.lastErrorCode = \"0\";\n    this._eventService.reset();\n    this.startingData = {};\n\n    // Update offline storage service with new settings if it exists\n    if (this._offlineStorageService) {\n      this._offlineStorageService.updateSettings(this.settings);\n\n      if (settings?.courseId) {\n        this._courseId = settings.courseId;\n      }\n    }\n  }\n\n  /**\n   * Initialize the API\n   * @param {string} callbackName\n   * @param {string} initializeMessage\n   * @param {string} terminationMessage\n   * @return {string}\n   */\n  initialize(\n    callbackName: string,\n    initializeMessage?: string,\n    terminationMessage?: string,\n  ): string {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.isInitialized()) {\n      this.throwSCORMError(\"api\", this._error_codes.INITIALIZED, initializeMessage);\n    } else if (this.isTerminated()) {\n      this.throwSCORMError(\"api\", this._error_codes.TERMINATED, terminationMessage);\n    } else {\n      if (this.selfReportSessionTime) {\n        this.cmi.setStartTime();\n      }\n\n      this.currentState = global_constants.STATE_INITIALIZED;\n      this.lastErrorCode = \"0\";\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n\n      // If enabled, attempt to sync offline data on initialization\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._courseId &&\n        this.settings.syncOnInitialize &&\n        this._offlineStorageService.isDeviceOnline()\n      ) {\n        this._offlineStorageService.hasPendingOfflineData(this._courseId).then((hasPendingData) => {\n          if (hasPendingData) {\n            this.apiLog(\n              callbackName,\n              \"Syncing pending offline data on initialization\",\n              LogLevelEnum.INFO,\n            );\n            this._offlineStorageService?.syncOfflineData().then((syncSuccess) => {\n              if (syncSuccess) {\n                this.apiLog(callbackName, \"Successfully synced offline data\", LogLevelEnum.INFO);\n                this.processListeners(\"OfflineDataSynced\");\n              }\n            });\n          }\n        });\n      }\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Initialize the LMS API\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsInitialize(): string;\n\n  /**\n   * Finish the current LMS API session\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsFinish(): string;\n\n  /**\n   * Get the value of a CMI element from the LMS\n   * @param {string} CMIElement - The CMI element to get the value of\n   * @return {string} The value of the CMI element\n   */\n  abstract lmsGetValue(CMIElement: string): string;\n\n  /**\n   * Set the value of a CMI element in the LMS\n   * @param {string} CMIElement - The CMI element to set the value of\n   * @param {any} value - The value to set\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsSetValue(CMIElement: string, value: any): string;\n\n  /**\n   * Commit the current data to the LMS\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsCommit(): string;\n\n  /**\n   * Get the last error code from the LMS\n   * @return {string} The last error code\n   */\n  abstract lmsGetLastError(): string;\n\n  /**\n   * Get the error string for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get the string for\n   * @return {string} The error string\n   */\n  abstract lmsGetErrorString(CMIErrorCode: string | number): string;\n\n  /**\n   * Get diagnostic information for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get diagnostic information for\n   * @return {string} The diagnostic information\n   */\n  abstract lmsGetDiagnostic(CMIErrorCode: string | number): string;\n\n  /**\n   * Abstract method for validating that a response is correct.\n   * This method is used to validate the format and content of a response\n   * before it is set in the CMI data model.\n   *\n   * @param {string} _CMIElement - The CMI element path to validate\n   * @param {any} _value - The value to validate\n   * @throws {Error} If the response format is invalid\n   */\n  abstract validateCorrectResponse(_CMIElement: string, _value: any): void;\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   * APIs that inherit BaseAPI should override this method.\n   *\n   * @param {string} _CMIElement - unused\n   * @param {*} _value - unused\n   * @param {boolean} _foundFirstIndex - unused\n   * @return {BaseCMI|null}\n   * @abstract\n   */\n  abstract getChildElement(\n    _CMIElement: string,\n    _value: any,\n    _foundFirstIndex: boolean,\n  ): BaseCMI | null;\n\n  /**\n   * Attempts to store the data to the LMS, logs data if no LMS configured\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _calculateTotalTime\n   * @return {ResultObject}\n   * @abstract\n   */\n  abstract storeData(_calculateTotalTime: boolean): Promise<ResultObject>;\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _terminateCommit\n   * @return {StringKeyMap|Array}\n   * @abstract\n   */\n  abstract renderCommitCMI(_terminateCommit: boolean): StringKeyMap | Array<string>;\n\n  /**\n   * Render the commit object to the shortened format for LMS commit.\n   * This method transforms the CMI data into a format suitable for sending to the LMS.\n   * It is called during the commit process to prepare the data for transmission.\n   *\n   * @param {boolean} _terminateCommit - Whether this commit is part of the termination process\n   * @return {CommitObject} A formatted object containing the data to be sent to the LMS\n   * @example\n   * // Example of a commit object structure\n   * {\n   *   method: \"POST\",\n   *   params: {\n   *     cmi: { ... },\n   *     finishState: \"COMPLETED\"\n   *   }\n   * }\n   */\n  abstract renderCommitObject(_terminateCommit: boolean): CommitObject;\n\n  /**\n   * Logging for all SCORM actions\n   *\n   * @param {string} functionName\n   * @param {string} logMessage\n   * @param {number} messageLevel\n   * @param {string} CMIElement\n   */\n  apiLog(functionName: string, logMessage: string, messageLevel: LogLevel, CMIElement?: string) {\n    logMessage = formatMessage(functionName, logMessage, CMIElement);\n\n    if (messageLevel >= this.apiLogLevel) {\n      // Use the injected LoggingService\n      this._loggingService.log(messageLevel, logMessage);\n    }\n  }\n\n  /**\n   * Getter for _settings\n   * @return {InternalSettings}\n   */\n  get settings(): InternalSettings {\n    return this._settings;\n  }\n\n  /**\n   * Setter for _settings\n   * @param {Settings} settings\n   */\n  set settings(settings: Settings) {\n    const previousSettings = this._settings;\n    this._settings = { ...this._settings, ...settings } as InternalSettings;\n\n    // Update HTTP service settings\n    this._httpService?.updateSettings(this._settings);\n\n    // Update log level if it changed\n    if (settings.logLevel !== undefined && settings.logLevel !== previousSettings.logLevel) {\n      this.apiLogLevel = settings.logLevel;\n      this._loggingService?.setLogLevel(settings.logLevel);\n    }\n\n    // Update log handler if onLogMessage changed\n    if (\n      settings.onLogMessage !== undefined &&\n      settings.onLogMessage !== previousSettings.onLogMessage\n    ) {\n      this._loggingService?.setLogHandler(settings.onLogMessage);\n    }\n  }\n\n  /**\n   * Terminates the current run of the API\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async terminate(callbackName: string, checkTerminated: boolean): Promise<string> {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.TERMINATION_BEFORE_INIT,\n        this._error_codes.MULTIPLE_TERMINATION,\n      )\n    ) {\n      this.currentState = global_constants.STATE_TERMINATED;\n      // If enabled, attempt to sync offline data before termination\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._courseId &&\n        this.settings.syncOnTerminate &&\n        this._offlineStorageService.isDeviceOnline()\n      ) {\n        const hasPendingData = await this._offlineStorageService.hasPendingOfflineData(\n          this._courseId,\n        );\n        if (hasPendingData) {\n          this.apiLog(\n            callbackName,\n            \"Syncing pending offline data before termination\",\n            LogLevelEnum.INFO,\n          );\n          await this._offlineStorageService.syncOfflineData();\n        }\n      }\n\n      const result: ResultObject = await this.storeData(true);\n      if ((result.errorCode ?? 0) > 0) {\n        this.throwSCORMError(\"api\", result.errorCode);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Get the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  getValue(callbackName: string, checkTerminated: boolean, CMIElement: string): string {\n    let returnValue: string = \"\";\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.RETRIEVE_BEFORE_INIT,\n        this._error_codes.RETRIEVE_AFTER_TERM,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.getCMIValue(CMIElement);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement);\n    }\n\n    this.apiLog(callbackName, \": returned: \" + returnValue, LogLevelEnum.INFO, CMIElement);\n\n    if (returnValue === undefined) {\n      return \"\";\n    }\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Sets the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {string} commitCallback\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  setValue(\n    callbackName: string,\n    commitCallback: string,\n    checkTerminated: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (value !== undefined) {\n      value = String(value);\n    }\n    let returnValue: string = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.STORE_BEFORE_INIT,\n        this._error_codes.STORE_AFTER_TERM,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.setCMIValue(CMIElement, value);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement, value);\n    }\n\n    if (returnValue === undefined) {\n      returnValue = global_constants.SCORM_FALSE;\n    }\n\n    // If we didn't have any errors while setting the data, go ahead and\n    // schedule a commit, if autocommit is turned on\n    if (String(this.lastErrorCode) === \"0\") {\n      if (this.settings.autocommit) {\n        this.scheduleCommit(this.settings.autocommitSeconds * 1000, commitCallback);\n      }\n    }\n\n    this.apiLog(\n      callbackName,\n      \": \" + value + \": result: \" + returnValue,\n      LogLevelEnum.INFO,\n      CMIElement,\n    );\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async commit(callbackName: string, checkTerminated: boolean = false): Promise<string> {\n    this.clearScheduledCommit();\n\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.COMMIT_BEFORE_INIT,\n        this._error_codes.COMMIT_AFTER_TERM,\n      )\n    ) {\n      const result = await this.storeData(false);\n      if ((result.errorCode ?? 0) > 0) {\n        this.throwSCORMError(\"api\", result.errorCode);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      this.apiLog(callbackName, \" Result: \" + returnValue, LogLevelEnum.DEBUG, \"HttpRequest\");\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      this.processListeners(callbackName);\n\n      // If online and there is offline data pending, attempt to sync it\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._offlineStorageService.isDeviceOnline() &&\n        this._courseId\n      ) {\n        this._offlineStorageService.hasPendingOfflineData(this._courseId).then((hasPendingData) => {\n          if (hasPendingData) {\n            this.apiLog(callbackName, \"Syncing pending offline data\", LogLevelEnum.INFO);\n            this._offlineStorageService?.syncOfflineData().then((syncSuccess) => {\n              if (syncSuccess) {\n                this.apiLog(callbackName, \"Successfully synced offline data\", LogLevelEnum.INFO);\n                this.processListeners(\"OfflineDataSynced\");\n              } else {\n                this.apiLog(callbackName, \"Failed to sync some offline data\", LogLevelEnum.WARN);\n              }\n            });\n          }\n        });\n      }\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Returns last error code\n   * @param {string} callbackName\n   * @return {string}\n   */\n  getLastError(callbackName: string): string {\n    const returnValue = String(this.lastErrorCode);\n\n    this.processListeners(callbackName);\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getErrorString(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getDiagnostic(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode, true);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Checks the LMS state and ensures it has been initialized.\n   *\n   * @param {boolean} checkTerminated\n   * @param {number} beforeInitError\n   * @param {number} afterTermError\n   * @return {boolean}\n   */\n  checkState(checkTerminated: boolean, beforeInitError: number, afterTermError: number): boolean {\n    if (this.isNotInitialized()) {\n      this.throwSCORMError(\"api\", beforeInitError);\n      return false;\n    } else if (checkTerminated && this.isTerminated()) {\n      this.throwSCORMError(\"api\", afterTermError);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {(string|number)} _errorNumber\n   * @param {boolean} _detail\n   * @return {string}\n   * @abstract\n   */\n  getLmsErrorMessageDetails(_errorNumber: string | number, _detail: boolean = false): string {\n    throw new Error(\"The getLmsErrorMessageDetails method has not been implemented\");\n  }\n\n  /**\n   * Gets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @return {string}\n   * @abstract\n   */\n  getCMIValue(_CMIElement: string): string {\n    throw new Error(\"The getCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Sets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @param {any} _value\n   * @return {string}\n   * @abstract\n   */\n  setCMIValue(_CMIElement: string, _value: any): string {\n    throw new Error(\"The setCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Shared API method to set a valid for a given element.\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  _commonSetCMIValue(\n    methodName: string,\n    scorm2004: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (!CMIElement || CMIElement === \"\") {\n      return global_constants.SCORM_FALSE;\n    }\n\n    this.lastErrorCode = \"0\";\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap | BaseCMI = this as StringKeyMap;\n    let returnValue = global_constants.SCORM_FALSE;\n    let foundFirstIndex = false;\n\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      const attribute = structure[idx];\n\n      if (idx === structure.length - 1) {\n        if (scorm2004 && attribute.substring(0, 8) === \"{target=\") {\n          if (this.isInitialized()) {\n            this.throwSCORMError(CMIElement, this._error_codes.READ_ONLY_ELEMENT);\n            break;\n          } else {\n            refObject = {\n              ...refObject,\n              attribute: value,\n            };\n          }\n        } else if (!this._checkObjectHasProperty(refObject as StringKeyMap, attribute)) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        } else {\n          if (\n            stringMatches(CMIElement, \"\\\\.correct_responses\\\\.\\\\d+$\") &&\n            this.isInitialized() &&\n            attribute !== \"pattern\"\n          ) {\n            this.validateCorrectResponse(CMIElement, value);\n            if (this.lastErrorCode !== \"0\") {\n              this.throwSCORMError(CMIElement, this._error_codes.TYPE_MISMATCH);\n              break;\n            }\n          }\n\n          if (!scorm2004 || this._errorHandlingService.lastErrorCode === \"0\") {\n            if (attribute === \"__proto__\" || attribute === \"constructor\") {\n              this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n              break;\n            }\n            (refObject as StringKeyMap)[attribute] = value;\n            returnValue = global_constants.SCORM_TRUE;\n          }\n        }\n      } else {\n        refObject = (refObject as StringKeyMap)[attribute] as StringKeyMap;\n        if (!refObject) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n\n        if (refObject instanceof CMIArray) {\n          const index = parseInt(structure[idx + 1], 10);\n\n          // SCO is trying to set an item on an array\n          if (!isNaN(index)) {\n            const item = refObject.childArray[index];\n\n            if (item) {\n              refObject = item;\n              foundFirstIndex = true;\n            } else {\n              const newChild = this.getChildElement(CMIElement, value, foundFirstIndex);\n              foundFirstIndex = true;\n\n              if (!newChild) {\n                if (this.lastErrorCode === \"0\") {\n                  this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n                }\n                break;\n              } else {\n                if (refObject.initialized) newChild.initialize();\n                refObject.childArray[index] = newChild;\n                refObject = newChild;\n              }\n            }\n\n            // Have to update idx value to skip the array position\n            idx++;\n          }\n        }\n      }\n    }\n\n    if (returnValue === global_constants.SCORM_FALSE) {\n      this.apiLog(\n        methodName,\n        `There was an error setting the value for: ${CMIElement}, value of: ${value}`,\n        LogLevelEnum.WARN,\n      );\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @return {any}\n   */\n  _commonGetCMIValue(methodName: string, scorm2004: boolean, CMIElement: string): any {\n    if (!CMIElement || CMIElement === \"\") {\n      return \"\";\n    }\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap = this as StringKeyMap;\n    let attribute = null;\n\n    const uninitializedErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) has not been initialized.`;\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      attribute = structure[idx];\n\n      if (!scorm2004) {\n        if (idx === structure.length - 1) {\n          if (!this._checkObjectHasProperty(refObject, attribute)) {\n            this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n            return;\n          }\n        }\n      } else {\n        if (\n          String(attribute).substring(0, 8) === \"{target=\" &&\n          typeof refObject._isTargetValid == \"function\"\n        ) {\n          const target = String(attribute).substring(8, String(attribute).length - 9);\n          return refObject._isTargetValid(target);\n        } else if (!this._checkObjectHasProperty(refObject, attribute)) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          return;\n        }\n      }\n\n      refObject = refObject[attribute] as StringKeyMap;\n      if (refObject === undefined) {\n        this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n        break;\n      }\n\n      if (refObject instanceof CMIArray) {\n        const index = parseInt(structure[idx + 1], 10);\n\n        // SCO is trying to set an item on an array\n        if (!isNaN(index)) {\n          const item = refObject.childArray[index];\n\n          if (item) {\n            refObject = item;\n          } else {\n            this.throwSCORMError(\n              CMIElement,\n              this._error_codes.VALUE_NOT_INITIALIZED,\n              uninitializedErrorMessage,\n            );\n            break;\n          }\n\n          // Have to update idx value to skip the array position\n          idx++;\n        }\n      }\n    }\n\n    if (refObject === null || refObject === undefined) {\n      if (!scorm2004) {\n        if (attribute === \"_children\") {\n          this.throwSCORMError(CMIElement, this._error_codes.CHILDREN_ERROR, undefined);\n        } else if (attribute === \"_count\") {\n          this.throwSCORMError(CMIElement, this._error_codes.COUNT_ERROR, undefined);\n        }\n      }\n    } else {\n      return refObject;\n    }\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isInitialized(): boolean {\n    return this.currentState === global_constants.STATE_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_NOT_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isNotInitialized(): boolean {\n    return this.currentState === global_constants.STATE_NOT_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_TERMINATED\n   *\n   * @return {boolean}\n   */\n  isTerminated(): boolean {\n    return this.currentState === global_constants.STATE_TERMINATED;\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event.\n   * This method allows you to register a callback function that will be executed\n   * when the specified event occurs.\n   *\n   * @param {string} listenerName - The name of the event to listen for (e.g., \"Initialize\", \"Terminate\", \"GetValue\", \"SetValue\", \"Commit\")\n   * @param {function} callback - The function to execute when the event occurs. The callback will receive relevant event data.\n   * @example\n   * // Listen for Initialize events\n   * api.on(\"Initialize\", function() {\n   *   console.log(\"API has been initialized\");\n   * });\n   *\n   * // Listen for SetValue events\n   * api.on(\"SetValue\", function(element, value) {\n   *   console.log(\"Setting \" + element + \" to \" + value);\n   * });\n   */\n  on(listenerName: string, callback: Function) {\n    this._eventService.on(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener.\n   * This method removes a previously registered callback for an event.\n   * Both the event name and the callback reference must match what was used in the 'on' method.\n   *\n   * @param {string} listenerName - The name of the event to stop listening for\n   * @param {function} callback - The callback function to remove\n   * @example\n   * // Remove a specific listener\n   * const myCallback = function() { console.log(\"API initialized\"); };\n   * api.on(\"Initialize\", myCallback);\n   * // Later, when you want to remove it:\n   * api.off(\"Initialize\", myCallback);\n   */\n  off(listenerName: string, callback: Function) {\n    this._eventService.off(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event.\n   * This method removes all callbacks registered for the specified event.\n   *\n   * @param {string} listenerName - The name of the event to clear all listeners for\n   * @example\n   * // Remove all listeners for the Initialize event\n   * api.clear(\"Initialize\");\n   */\n  clear(listenerName: string) {\n    this._eventService.clear(listenerName);\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created for a specific event.\n   * This method is called internally when SCORM events occur to notify all registered listeners.\n   * It triggers all callback functions registered for the specified event.\n   *\n   * @param {string} functionName - The name of the function/event that occurred\n   * @param {string} CMIElement - Optional CMI element involved in the event\n   * @param {any} value - Optional value associated with the event\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this._eventService.processListeners(functionName, CMIElement, value);\n  }\n\n  /**\n   * Throws a SCORM error with the specified error number and optional message.\n   * This method sets the last error code and can be used to indicate that an operation failed.\n   * The error number should correspond to one of the standard SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The SCORM error code to set\n   * @param {string} message - Optional custom error message to provide additional context\n   * @example\n   * // Throw a \"not initialized\" error\n   * this.throwSCORMError(301, \"The API must be initialized before calling GetValue\");\n   */\n  throwSCORMError(CMIElement: string, errorNumber: number, message?: string) {\n    this._errorHandlingService.throwSCORMError(CMIElement, errorNumber, message);\n  }\n\n  /**\n   * Clears the last SCORM error code when an operation succeeds.\n   * This method is typically called after successful API operations to reset the error state.\n   * It only clears the error if the success parameter is \"true\".\n   *\n   * @param {string} success - A string indicating whether the operation succeeded (\"true\" or \"false\")\n   * @example\n   * // Clear error after successful operation\n   * this.clearSCORMError(\"true\");\n   */\n  clearSCORMError(success: string) {\n    this._errorHandlingService.clearSCORMError(success);\n  }\n\n  /**\n   * Load the CMI from a flattened JSON object.\n   * This method populates the CMI data model from a flattened JSON structure\n   * where keys represent CMI element paths (e.g., \"cmi.core.student_id\").\n   *\n   * @param {StringKeyMap} json - The flattened JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a flattened JSON structure\n   * api.loadFromFlattenedJSON({\n   *   \"cmi.core.student_id\": \"12345\",\n   *   \"cmi.core.student_name\": \"John Doe\",\n   *   \"cmi.core.lesson_status\": \"incomplete\"\n   * });\n   */\n  loadFromFlattenedJSON(json: StringKeyMap, CMIElement?: string) {\n    if (!CMIElement) {\n      // by default, we start from a blank string because we're expecting each element to start with `cmi`\n      CMIElement = \"\";\n    }\n\n    this._serializationService.loadFromFlattenedJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Returns a flattened JSON object representing the current CMI data.\n   */\n  getFlattenedCMI(): StringKeyMap {\n    return Utilities.flatten(this.renderCMIToJSONObject());\n  }\n\n  /**\n   * Loads CMI data from a hierarchical JSON object.\n   * This method populates the CMI data model from a nested JSON structure\n   * that mirrors the CMI object hierarchy.\n   *\n   * @param {StringKeyMap} json - The hierarchical JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a hierarchical JSON structure\n   * api.loadFromJSON({\n   *   core: {\n   *     student_id: \"12345\",\n   *     student_name: \"John Doe\",\n   *     lesson_status: \"incomplete\"\n   *   },\n   *   objectives: [\n   *     { id: \"obj1\", score: { raw: 85 } }\n   *   ]\n   * });\n   */\n  loadFromJSON(json: StringKeyMap, CMIElement: string = \"\") {\n    if (\n      (!CMIElement || CMIElement === \"\") &&\n      !Object.hasOwnProperty.call(json, \"cmi\") &&\n      !Object.hasOwnProperty.call(json, \"adl\")\n    ) {\n      // providing a backward compatibility for the old v1 API\n      CMIElement = \"cmi\";\n    }\n    this._serializationService.loadFromJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Render the CMI object to a JSON string for sending to an LMS.\n   * This method serializes the current CMI data model to a JSON string.\n   * The output format is controlled by the sendFullCommit setting.\n   *\n   * @return {string} A JSON string representation of the CMI data\n   * @example\n   * // Get the current CMI data as a JSON string\n   * const jsonString = api.renderCMIToJSONString();\n   * console.log(jsonString); // '{\"core\":{\"student_id\":\"12345\",...}}'\n   */\n  renderCMIToJSONString(): string {\n    return this._serializationService.renderCMIToJSONString(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Returns a JavaScript object representing the current CMI data.\n   * This method creates a plain JavaScript object that mirrors the\n   * structure of the CMI data model, suitable for further processing.\n   *\n   * @return {StringKeyMap} A JavaScript object representing the CMI data\n   * @example\n   * // Get the current CMI data as a JavaScript object\n   * const cmiObject = api.renderCMIToJSONObject();\n   * console.log(cmiObject.core.student_id); // \"12345\"\n   */\n  renderCMIToJSONObject(): StringKeyMap {\n    return this._serializationService.renderCMIToJSONObject(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Process an HTTP request\n   *\n   * @param {string} url - The URL to send the request to\n   * @param {CommitObject | StringKeyMap | Array<any>} params - The parameters to send\n   * @param {boolean} immediate - Whether to send the request immediately without waiting\n   * @returns {Promise<ResultObject>} - The result of the request\n   * @async\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n  ): Promise<ResultObject> {\n    // If offline support is enabled and device is offline, store data locally instead of sending\n    if (\n      this.settings.enableOfflineSupport &&\n      this._offlineStorageService &&\n      !this._offlineStorageService.isDeviceOnline() &&\n      this._courseId\n    ) {\n      this.apiLog(\n        \"processHttpRequest\",\n        \"Device is offline, storing data locally\",\n        LogLevelEnum.INFO,\n      );\n\n      if (params && typeof params === \"object\" && \"cmi\" in params) {\n        return await this._offlineStorageService.storeOffline(\n          this._courseId,\n          params as CommitObject,\n        );\n      } else {\n        this.apiLog(\n          \"processHttpRequest\",\n          \"Invalid commit data format for offline storage\",\n          LogLevelEnum.ERROR,\n        );\n        return {\n          result: global_constants.SCORM_FALSE,\n          errorCode: this._error_codes.GENERAL,\n        };\n      }\n    }\n\n    // Otherwise, proceed with normal HTTP request\n    return await this._httpService.processHttpRequest(\n      url,\n      params,\n      immediate,\n      (functionName, message, level, element) => this.apiLog(functionName, message, level, element),\n      (functionName, CMIElement, value) => this.processListeners(functionName, CMIElement, value),\n    );\n  }\n\n  /**\n   * Schedules a commit operation to occur after a specified delay.\n   * This method is used to implement auto-commit functionality, where data\n   * is periodically sent to the LMS without requiring explicit commit calls.\n   *\n   * @param {number} when - The number of milliseconds to wait before committing\n   * @param {string} callback - The name of the commit event callback\n   * @example\n   * // Schedule a commit to happen in 60 seconds\n   * api.scheduleCommit(60000, \"commit\");\n   */\n  scheduleCommit(when: number, callback: string) {\n    if (!this._timeout) {\n      this._timeout = new ScheduledCommit(this, when, callback);\n      this.apiLog(\"scheduleCommit\", \"scheduled\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Clears and cancels any currently scheduled commits.\n   * This method is typically called when an explicit commit is performed\n   * or when the API is terminated, to prevent redundant commits.\n   *\n   * @example\n   * // Cancel any pending scheduled commits\n   * api.clearScheduledCommit();\n   */\n  clearScheduledCommit() {\n    if (this._timeout) {\n      this._timeout.cancel();\n      this._timeout = undefined;\n      this.apiLog(\"clearScheduledCommit\", \"cleared\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Checks if an object has a specific property, using multiple detection methods.\n   * This method performs a thorough check for property existence by:\n   * 1. Checking if it's an own property using Object.hasOwnProperty\n   * 2. Checking if it's defined in the prototype with a property descriptor\n   * 3. Checking if it's accessible via the 'in' operator (includes inherited properties)\n   *\n   * @param {StringKeyMap} StringKeyMap - The object to check for the property\n   * @param {string} attribute - The property name to look for\n   * @return {boolean} True if the property exists on the object or its prototype chain\n   * @private\n   *\n   * @example\n   * // Check for an own property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"name\"); // Returns true\n   *\n   * @example\n   * // Check for an inherited property\n   * class Parent { get type() { return \"parent\"; } }\n   * const child = Object.create(new Parent());\n   * this._checkObjectHasProperty(child, \"type\"); // Returns true\n   *\n   * @example\n   * // Check for a non-existent property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"age\"); // Returns false\n   */\n  private _checkObjectHasProperty(StringKeyMap: StringKeyMap, attribute: string): boolean {\n    return (\n      Object.hasOwnProperty.call(StringKeyMap, attribute) ||\n      Object.getOwnPropertyDescriptor(Object.getPrototypeOf(StringKeyMap), attribute) != null ||\n      attribute in StringKeyMap\n    );\n  }\n\n  /**\n   * Handles exceptions that occur when accessing CMI values.\n   * This method delegates to the ErrorHandlingService to process exceptions\n   * that occur during CMI data operations, ensuring consistent error handling\n   * throughout the API.\n   *\n   * @param {string} CMIElement\n   * @param {any} e - The exception that was thrown\n   * @param {string} returnValue - The default return value to use if an error occurs\n   * @return {string} Either the original returnValue or SCORM_FALSE if an error occurred\n   * @private\n   *\n   * @example\n   * // Handle a validation error when getting a CMI value\n   * try {\n   *   return this.getCMIValue(\"cmi.core.score.raw\");\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"\");\n   * }\n   *\n   * @example\n   * // Handle a general error when setting a CMI value\n   * try {\n   *   this.setCMIValue(\"cmi.core.lesson_status\", \"completed\");\n   *   return \"true\";\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"false\");\n   * }\n   */\n  private handleValueAccessException(CMIElement: string, e: any, returnValue: string): string {\n    if (e instanceof ValidationError) {\n      this.lastErrorCode = String(e.errorCode);\n      returnValue = global_constants.SCORM_FALSE;\n      this.throwSCORMError(CMIElement, e.errorCode, e.errorMessage);\n    } else {\n      if (e instanceof Error && e.message) {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, e.message);\n      } else {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, \"Unknown error\");\n      }\n    }\n    return returnValue;\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS.\n   * This method delegates to the SerializationService to create a properly\n   * formatted object containing the CMI data that needs to be sent to the LMS.\n   * The format and content of the commit object depend on whether this is a\n   * regular commit or a termination commit.\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @return {CommitObject|StringKeyMap|Array} The formatted commit object\n   * @protected\n   *\n   * @example\n   * // Create a regular commit object\n   * const regularCommit = this.getCommitObject(false);\n   * // Result might be: { cmi: { core: { lesson_status: \"incomplete\" } } }\n   *\n   * @example\n   * // Create a termination commit object (includes total_time)\n   * const terminationCommit = this.getCommitObject(true);\n   * // Result might be: { cmi: { core: { lesson_status: \"completed\", total_time: \"PT1H30M\" } } }\n   */\n  protected getCommitObject(terminateCommit: boolean): CommitObject | StringKeyMap | Array<any> {\n    return this._serializationService.getCommitObject(\n      terminateCommit,\n      this.settings.alwaysSendTotalTime,\n      this.settings.renderCommonCommitFields,\n      (terminateCommit) => this.renderCommitObject(terminateCommit),\n      (terminateCommit) => this.renderCommitCMI(terminateCommit),\n      this.apiLogLevel,\n    );\n  }\n}\n","import { CMI } from \"./cmi/scorm12/cmi\";\nimport * as Utilities from \"./utilities\";\nimport { StringKeyMap, stringMatches } from \"./utilities\";\nimport { global_constants, scorm12_constants } from \"./constants/api_constants\";\nimport { scorm12_errors } from \"./constants/error_codes\";\n\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport { CMIObjectivesObject } from \"./cmi/scorm12/objectives\";\nimport {\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n} from \"./cmi/scorm12/interactions\";\nimport { NAV } from \"./cmi/scorm12/nav\";\nimport { CommitObject, ResultObject, ScoreObject, Settings } from \"./types/api_types\";\nimport { CompletionStatus, SuccessStatus } from \"./constants/enums\";\nimport BaseAPI from \"./BaseAPI\";\nimport { scorm12_regex } from \"./constants/regex\";\n\n/**\n * API class for SCORM 1.2\n */\nclass Scorm12API extends BaseAPI {\n  /**\n   * Constructor for SCORM 1.2 API\n   * @param {object} settings\n   */\n  constructor(settings?: Settings) {\n    if (settings) {\n      if (settings.mastery_override === undefined) {\n        settings.mastery_override = false;\n      }\n    }\n\n    super(scorm12_errors, settings);\n\n    this.cmi = new CMI();\n    this.nav = new NAV();\n\n    // Rename functions to match 1.2 Spec and expose to modules\n    this.LMSInitialize = this.lmsInitialize;\n    this.LMSFinish = this.lmsFinish;\n    this.LMSGetValue = this.lmsGetValue;\n    this.LMSSetValue = this.lmsSetValue;\n    this.LMSCommit = this.lmsCommit;\n    this.LMSGetLastError = this.lmsGetLastError;\n    this.LMSGetErrorString = this.lmsGetErrorString;\n    this.LMSGetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  public statusSetByModule = false;\n\n  cmi: CMI;\n  nav: NAV;\n\n  LMSInitialize: () => string;\n  LMSFinish: () => string;\n  LMSGetValue: (CMIElement: string) => string;\n  LMSSetValue: (CMIElement: string, value: any) => string;\n  LMSCommit: () => string;\n  LMSGetLastError: () => string;\n  LMSGetErrorString: (CMIErrorCode: string) => string;\n  LMSGetDiagnostic: (CMIErrorCode: string) => string;\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset(settings?: Settings) {\n    this.commonReset(settings);\n\n    this.cmi?.reset();\n    this.nav?.reset();\n  }\n\n  /**\n   * lmsInitialize function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize(): string {\n    this.cmi.initialize();\n    if (this.cmi.core.lesson_status) {\n      this.statusSetByModule = true;\n    } else {\n      this.cmi.core.lesson_status = \"not attempted\";\n    }\n    return this.initialize(\n      \"LMSInitialize\",\n      \"LMS was already initialized!\",\n      \"LMS is already finished!\",\n    );\n  }\n\n  /**\n   * LMSFinish function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish(): string {\n    (async () => {\n      await this.internalFinish();\n    })();\n    return global_constants.SCORM_TRUE;\n  }\n\n  async internalFinish(): Promise<string> {\n    const result = await this.terminate(\"LMSFinish\", true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      if (this.nav.event !== \"\") {\n        if (this.nav.event === \"continue\") {\n          this.processListeners(\"SequenceNext\");\n        } else {\n          this.processListeners(\"SequencePrevious\");\n        }\n      } else if (this.settings.autoProgress) {\n        this.processListeners(\"SequenceNext\");\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * LMSGetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement: string): string {\n    return this.getValue(\"LMSGetValue\", false, CMIElement);\n  }\n\n  /**\n   * LMSSetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement: string, value: any): string {\n    if (CMIElement === \"cmi.core.lesson_status\") {\n      this.statusSetByModule = true;\n    }\n    return this.setValue(\"LMSSetValue\", \"LMSCommit\", false, CMIElement, value);\n  }\n\n  /**\n   * LMSCommit function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit(): string {\n    if (this.settings.asyncCommit) {\n      this.scheduleCommit(500, \"LMSCommit\");\n    } else {\n      (async () => {\n        await this.commit(\"LMSCommit\", false);\n      })();\n    }\n    return global_constants.SCORM_TRUE;\n  }\n\n  /**\n   * LMSGetLastError function from SCORM 1.2 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError(): string {\n    return this.getLastError(\"LMSGetLastError\");\n  }\n\n  /**\n   * LMSGetErrorString function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode: string): string {\n    return this.getErrorString(\"LMSGetErrorString\", CMIErrorCode);\n  }\n\n  /**\n   * LMSGetDiagnostic function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode: string): string {\n    return this.getDiagnostic(\"LMSGetDiagnostic\", CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  override setCMIValue(CMIElement: string, value: any): string {\n    return this._commonSetCMIValue(\"LMSSetValue\", false, CMIElement, value);\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  override getCMIValue(CMIElement: string): any {\n    return this._commonGetCMIValue(\"getCMIValue\", false, CMIElement);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {*} _value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI|null}\n   */\n  getChildElement(CMIElement: string, _value: any, foundFirstIndex: boolean): BaseCMI | null {\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      return new CMIObjectivesObject();\n    } else if (\n      foundFirstIndex &&\n      stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+\")\n    ) {\n      return new CMIInteractionsCorrectResponsesObject();\n    } else if (\n      foundFirstIndex &&\n      stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+\")\n    ) {\n      return new CMIInteractionsObjectivesObject();\n    } else if (!foundFirstIndex && stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\")) {\n      return new CMIInteractionsObject();\n    }\n\n    return null;\n  }\n\n  /**\n   * Validates Correct Response values\n   *\n   * @param {string} _CMIElement\n   * @param {*} _value\n   */\n  validateCorrectResponse(_CMIElement: string, _value: any) {\n    // do nothing\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {number|string} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  override getLmsErrorMessageDetails(errorNumber: number | string, detail: boolean): string {\n    let basicMessage = \"No Error\";\n    let detailMessage = \"No Error\";\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (scorm12_constants.error_descriptions[errorNumber]) {\n      basicMessage = scorm12_constants.error_descriptions[errorNumber].basicMessage;\n      detailMessage = scorm12_constants.error_descriptions[errorNumber].detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {Scorm12API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI: Scorm12API) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} includeTotalTime - Whether to include total time in the commit data\n   * @return {object|Array}\n   */\n  renderCommitCMI(\n    terminateCommit: boolean,\n    includeTotalTime: boolean = false,\n  ): StringKeyMap | Array<string> {\n    const cmiExport: StringKeyMap = this.renderCMIToJSONObject();\n\n    if (includeTotalTime) {\n      (cmiExport.cmi as any).core.total_time = this.cmi.getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened: StringKeyMap = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case \"flattened\":\n        return Utilities.flatten(cmiExport);\n      case \"params\":\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case \"json\":\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} includeTotalTime - Whether to include total time in the commit data\n   * @return {CommitObject}\n   */\n  renderCommitObject(terminateCommit: boolean, includeTotalTime: boolean = false): CommitObject {\n    const cmiExport = this.renderCommitCMI(terminateCommit, includeTotalTime);\n    const totalTimeHHMMSS = includeTotalTime ? this.cmi.getCurrentTotalTime() : \"\";\n    const totalTimeSeconds = Utilities.getTimeAsSeconds(totalTimeHHMMSS, scorm12_regex.CMITimespan);\n    const lessonStatus = this.cmi.core.lesson_status;\n    let completionStatus = CompletionStatus.UNKNOWN;\n    let successStatus = SuccessStatus.UNKNOWN;\n    if (lessonStatus) {\n      completionStatus =\n        lessonStatus === \"completed\" || lessonStatus === \"passed\"\n          ? CompletionStatus.COMPLETED\n          : CompletionStatus.INCOMPLETE;\n      if (lessonStatus === \"passed\") {\n        successStatus = SuccessStatus.PASSED;\n      } else if (lessonStatus === \"failed\") {\n        successStatus = SuccessStatus.FAILED;\n      }\n    }\n\n    const scoreObject: ScoreObject = this.cmi?.core?.score?.getScoreObject() || {};\n    const commitObject: CommitObject = {\n      successStatus: successStatus,\n      completionStatus: completionStatus,\n      runtimeData: cmiExport as StringKeyMap,\n      totalTimeSeconds: totalTimeSeconds,\n    };\n    if (scoreObject) {\n      commitObject.score = scoreObject;\n    }\n    return commitObject;\n  }\n\n  /**\n   * Attempts to store the data to the LMS\n   *\n   * @param {boolean} terminateCommit\n   * @return {ResultObject}\n   */\n  async storeData(terminateCommit: boolean): Promise<ResultObject> {\n    if (terminateCommit) {\n      const originalStatus = this.cmi.core.lesson_status;\n      if (\n        !this.cmi.core.lesson_status ||\n        (!this.statusSetByModule && this.cmi.core.lesson_status === \"not attempted\")\n      ) {\n        this.cmi.core.lesson_status = \"completed\";\n      }\n\n      if (this.cmi.core.lesson_mode === \"normal\") {\n        if (this.cmi.core.credit === \"credit\") {\n          if (\n            this.settings.mastery_override &&\n            this.cmi.student_data.mastery_score !== \"\" &&\n            this.cmi.core.score.raw !== \"\"\n          ) {\n            this.cmi.core.lesson_status =\n              parseFloat(this.cmi.core.score.raw) >= parseFloat(this.cmi.student_data.mastery_score)\n                ? \"passed\"\n                : \"failed\";\n          }\n        }\n      } else if (this.cmi.core.lesson_mode === \"browse\") {\n        if (\n          ((this.startingData?.cmi as any)?.core?.lesson_status || \"\") === \"\" &&\n          originalStatus === \"not attempted\"\n        ) {\n          this.cmi.core.lesson_status = \"browsed\";\n        }\n      }\n    }\n\n    const commitObject = this.getCommitObject(terminateCommit);\n    if (typeof this.settings.lmsCommitUrl === \"string\") {\n      return await this.processHttpRequest(\n        this.settings.lmsCommitUrl,\n        commitObject,\n        terminateCommit,\n      );\n    } else {\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    }\n  }\n}\n\nexport default Scorm12API;\n"],"names":["__spreadValues","scorm12_errors","__spreadProps","_a","Util.getSecondsAsHHMMSS","Util.addHHMMSSTimeStrings","__async","CMIElement","Utilities.flatten","StringKeyMap","terminateCommit","Utilities.getTimeAsSeconds"],"mappings":"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"}