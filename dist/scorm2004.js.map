{"version":3,"file":"scorm2004.js","sources":["../src/constants/api_constants.ts","../src/utilities.ts","../src/constants/enums.ts","../src/constants/default_settings.ts","../src/types/scheduled_commit.ts","../src/services/HttpService.ts","../src/services/EventService.ts","../src/services/SerializationService.ts","../src/exceptions.ts","../src/services/LoggingService.ts","../src/services/ErrorHandlingService.ts","../src/services/OfflineStorageService.ts","../src/cmi/common/base_cmi.ts","../src/constants/error_codes.ts","../src/cmi/common/array.ts","../src/BaseAPI.ts","../src/exceptions/scorm2004_exceptions.ts","../src/cmi/common/validation.ts","../src/cmi/scorm2004/validation.ts","../src/constants/regex.ts","../src/cmi/scorm2004/learner_preference.ts","../src/constants/response_constants.ts","../src/cmi/scorm2004/interactions.ts","../src/exceptions/scorm12_exceptions.ts","../src/cmi/scorm12/validation.ts","../src/services/ValidationService.ts","../src/cmi/common/score.ts","../src/cmi/scorm2004/score.ts","../src/cmi/scorm2004/comments.ts","../src/cmi/scorm2004/objectives.ts","../src/cmi/scorm2004/metadata.ts","../src/cmi/scorm2004/learner.ts","../src/cmi/scorm2004/status.ts","../src/cmi/scorm2004/session.ts","../src/cmi/scorm2004/content.ts","../src/cmi/scorm2004/settings.ts","../src/cmi/scorm2004/thresholds.ts","../src/cmi/scorm2004/cmi.ts","../src/cmi/scorm2004/adl.ts","../src/cmi/scorm2004/sequencing/sequencing_rules.ts","../src/cmi/scorm2004/sequencing/rollup_rules.ts","../src/constants/language_constants.ts","../src/cmi/scorm2004/sequencing/sequencing_controls.ts","../src/cmi/scorm2004/sequencing/activity.ts","../src/cmi/scorm2004/sequencing/activity_tree.ts","../src/cmi/scorm2004/sequencing/sequencing.ts","../src/cmi/scorm2004/sequencing/rollup_process.ts","../src/cmi/scorm2004/sequencing/selection_randomization.ts","../src/cmi/scorm2004/sequencing/sequencing_process.ts","../src/cmi/scorm2004/sequencing/overall_sequencing_process.ts","../src/services/ActivityDeliveryService.ts","../src/services/SequencingService.ts","../src/Scorm2004API.ts"],"sourcesContent":["interface ErrorDescription {\n  basicMessage: string;\n  detailMessage: string;\n}\n\ninterface ErrorDescriptions {\n  [key: string]: ErrorDescription;\n}\n\ninterface ScormConstants {\n  cmi_children: string;\n  core_children: string;\n  score_children: string;\n  comments_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface AiccConstants extends ScormConstants {\n  student_demographics_children: string;\n  tries_children: string;\n  attempt_records_children: string;\n  paths_children: string;\n}\n\ninterface Scorm2004Constants {\n  cmi_children: string;\n  comments_children: string;\n  score_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  adl_data_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface GlobalConstants {\n  SCORM_TRUE: string;\n  SCORM_FALSE: string;\n  STATE_NOT_INITIALIZED: number;\n  STATE_INITIALIZED: number;\n  STATE_TERMINATED: number;\n}\n\nexport const global_constants: GlobalConstants = {\n  SCORM_TRUE: \"true\",\n  SCORM_FALSE: \"false\",\n  STATE_NOT_INITIALIZED: 0,\n  STATE_INITIALIZED: 1,\n  STATE_TERMINATED: 2,\n};\n\nexport const scorm12_constants: ScormConstants = {\n  // Children lists\n  cmi_children:\n    \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions\",\n  core_children:\n    \"student_id,student_name,lesson_location,credit,lesson_status,entry,score,total_time,lesson_mode,exit,session_time\",\n  score_children: \"raw,min,max\",\n  comments_children: \"content,location,time\",\n  objectives_children: \"id,score,status\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio,language,speed,text\",\n  interactions_children:\n    \"id,objectives,time,type,correct_responses,weighting,student_response,result,latency\",\n  error_descriptions: {\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage: \"No specific error code exists to describe the error.\",\n    },\n    \"201\": {\n      basicMessage: \"Invalid argument error\",\n      detailMessage:\n        \"Indicates that an argument represents an invalid data model element or is otherwise incorrect.\",\n    },\n    \"202\": {\n      basicMessage: \"Element cannot have children\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_children\" for a data model element that does not support the \"_children\" suffix.',\n    },\n    \"203\": {\n      basicMessage: \"Element not an array - cannot have count\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_count\" for a data model element that does not support the \"_count\" suffix.',\n    },\n    \"301\": {\n      basicMessage: \"Not initialized\",\n      detailMessage: \"Indicates that an API call was made before the call to lmsInitialize.\",\n    },\n    \"401\": {\n      basicMessage: \"Not implemented error\",\n      detailMessage:\n        \"The data model element indicated in a call to LMSGetValue or LMSSetValue is valid, but was not implemented by this LMS. SCORM 1.2 defines a set of data model elements as being optional for an LMS to implement.\",\n    },\n    \"402\": {\n      basicMessage: \"Invalid set value, element is a keyword\",\n      detailMessage:\n        'Indicates that LMSSetValue was called on a data model element that represents a keyword (elements that end in \"_children\" and \"_count\").',\n    },\n    \"403\": {\n      basicMessage: \"Element is read only\",\n      detailMessage: \"LMSSetValue was called with a data model element that can only be read.\",\n    },\n    \"404\": {\n      basicMessage: \"Element is write only\",\n      detailMessage: \"LMSGetValue was called on a data model element that can only be written to.\",\n    },\n    \"405\": {\n      basicMessage: \"Incorrect Data Type\",\n      detailMessage:\n        \"LMSSetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a LMSSetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\nexport const aicc_constants: AiccConstants = {\n  ...scorm12_constants,\n  ...{\n    cmi_children:\n      \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions,evaluation\",\n    student_preference_children:\n      \"audio,language,lesson_type,speed,text,text_color,text_location,text_size,video,windows\",\n    student_data_children: \"attempt_number,tries,mastery_score,max_time_allowed,time_limit_action\",\n    student_demographics_children:\n      \"city,class,company,country,experience,familiar_name,instructor_name,title,native_language,state,street_address,telephone,years_experience\",\n    tries_children: \"time,status,score\",\n    attempt_records_children: \"score,lesson_status\",\n    paths_children: \"location_id,date,time,status,why_left,time_in_element\",\n  },\n};\n\nexport const scorm2004_constants: Scorm2004Constants = {\n  // Children lists\n  cmi_children:\n    \"_version,comments_from_learner,comments_from_lms,completion_status,credit,entry,exit,interactions,launch_data,learner_id,learner_name,learner_preference,location,max_time_allowed,mode,objectives,progress_measure,scaled_passing_score,score,session_time,success_status,suspend_data,time_limit_action,total_time\",\n  comments_children: \"comment,timestamp,location\",\n  score_children: \"max,raw,scaled,min\",\n  objectives_children: \"progress_measure,completion_status,success_status,description,score,id\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio_level,audio_captioning,delivery_speed,language\",\n  interactions_children:\n    \"id,type,objectives,timestamp,correct_responses,weighting,learner_response,result,latency,description\",\n  adl_data_children: \"id,store\",\n  error_descriptions: {\n    \"0\": {\n      basicMessage: \"No Error\",\n      detailMessage: \"No error occurred, the previous API call was successful.\",\n    },\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage: \"No specific error code exists to describe the error.\",\n    },\n    \"102\": {\n      basicMessage: \"General Initialization Failure\",\n      detailMessage: \"Call to Initialize failed for an unknown reason.\",\n    },\n    \"103\": {\n      basicMessage: \"Already Initialized\",\n      detailMessage: \"Call to Initialize failed because Initialize was already called.\",\n    },\n    \"104\": {\n      basicMessage: \"Content Instance Terminated\",\n      detailMessage: \"Call to Initialize failed because Terminate was already called.\",\n    },\n    \"111\": {\n      basicMessage: \"General Termination Failure\",\n      detailMessage: \"Call to Terminate failed for an unknown reason.\",\n    },\n    \"112\": {\n      basicMessage: \"Termination Before Initialization\",\n      detailMessage: \"Call to Terminate failed because it was made before the call to Initialize.\",\n    },\n    \"113\": {\n      basicMessage: \"Termination After Termination\",\n      detailMessage: \"Call to Terminate failed because Terminate was already called.\",\n    },\n    \"122\": {\n      basicMessage: \"Retrieve Data Before Initialization\",\n      detailMessage: \"Call to GetValue failed because it was made before the call to Initialize.\",\n    },\n    \"123\": {\n      basicMessage: \"Retrieve Data After Termination\",\n      detailMessage: \"Call to GetValue failed because it was made after the call to Terminate.\",\n    },\n    \"132\": {\n      basicMessage: \"Store Data Before Initialization\",\n      detailMessage: \"Call to SetValue failed because it was made before the call to Initialize.\",\n    },\n    \"133\": {\n      basicMessage: \"Store Data After Termination\",\n      detailMessage: \"Call to SetValue failed because it was made after the call to Terminate.\",\n    },\n    \"142\": {\n      basicMessage: \"Commit Before Initialization\",\n      detailMessage: \"Call to Commit failed because it was made before the call to Initialize.\",\n    },\n    \"143\": {\n      basicMessage: \"Commit After Termination\",\n      detailMessage: \"Call to Commit failed because it was made after the call to Terminate.\",\n    },\n    \"201\": {\n      basicMessage: \"General Argument Error\",\n      detailMessage:\n        \"An invalid argument was passed to an API method (usually indicates that Initialize, Commit or Terminate did not receive the expected empty string argument.\",\n    },\n    \"301\": {\n      basicMessage: \"General Get Failure\",\n      detailMessage:\n        \"Indicates a failed GetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"351\": {\n      basicMessage: \"General Set Failure\",\n      detailMessage:\n        \"Indicates a failed SetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"391\": {\n      basicMessage: \"General Commit Failure\",\n      detailMessage:\n        \"Indicates a failed Commit call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"401\": {\n      basicMessage: \"Undefined Data Model Element\",\n      detailMessage:\n        \"The data model element name passed to GetValue or SetValue is not a valid SCORM data model element.\",\n    },\n    \"402\": {\n      basicMessage: \"Unimplemented Data Model Element\",\n      detailMessage:\n        \"The data model element indicated in a call to GetValue or SetValue is valid, but was not implemented by this LMS. In SCORM 2004, this error would indicate an LMS that is not fully SCORM conformant.\",\n    },\n    \"403\": {\n      basicMessage: \"Data Model Element Value Not Initialized\",\n      detailMessage:\n        \"Attempt to read a data model element that has not been initialized by the LMS or through a SetValue call. This error condition is often reached during normal execution of a SCO.\",\n    },\n    \"404\": {\n      basicMessage: \"Data Model Element Is Read Only\",\n      detailMessage: \"SetValue was called with a data model element that can only be read.\",\n    },\n    \"405\": {\n      basicMessage: \"Data Model Element Is Write Only\",\n      detailMessage: \"GetValue was called on a data model element that can only be written to.\",\n    },\n    \"406\": {\n      basicMessage: \"Data Model Element Type Mismatch\",\n      detailMessage:\n        \"SetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Data Model Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a SetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\n","/**\n * Constants for time conversion calculations.\n * These are used throughout the codebase for converting between different time formats.\n */\nexport const SECONDS_PER_SECOND = 1.0;\nexport const SECONDS_PER_MINUTE = 60;\nexport const SECONDS_PER_HOUR = 60 * SECONDS_PER_MINUTE;\nexport const SECONDS_PER_DAY = 24 * SECONDS_PER_HOUR;\n\ntype Designation = {\n  [key: string]: number;\n};\n\n/**\n * A record with string keys and unknown values.\n * This is a more type-safe alternative to using `any`.\n */\nexport type StringKeyMap = Record<string, unknown>;\n\nconst designations: Designation = {\n  D: SECONDS_PER_DAY,\n  H: SECONDS_PER_HOUR,\n  M: SECONDS_PER_MINUTE,\n  S: SECONDS_PER_SECOND,\n};\n\n/**\n * Converts a number of seconds to a formatted time string in HH:MM:SS format.\n * This function handles decimal seconds and ensures proper formatting with leading zeros.\n *\n * @param {number|null} totalSeconds - The total number of seconds to convert. If null or negative, returns \"00:00:00\".\n * @return {string} A formatted time string in HH:MM:SS format, with up to 2 decimal places for seconds if applicable.\n *\n * @example\n * // Returns \"01:30:45\"\n * getSecondsAsHHMMSS(5445);\n *\n * @example\n * // Returns \"00:00:30.5\"\n * getSecondsAsHHMMSS(30.5);\n *\n * @example\n * // Returns \"00:00:00\"\n * getSecondsAsHHMMSS(null);\n */\nexport const getSecondsAsHHMMSS = memoize((totalSeconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!totalSeconds || totalSeconds <= 0) {\n    return \"00:00:00\";\n  }\n\n  const hours = Math.floor(totalSeconds / SECONDS_PER_HOUR);\n  const dateObj = new Date(totalSeconds * 1000);\n  const minutes = dateObj.getUTCMinutes();\n  // make sure we add any possible decimal value\n  const seconds = dateObj.getSeconds();\n  const ms = totalSeconds % 1.0;\n  let msStr = \"\";\n\n  if (countDecimals(ms) > 0) {\n    if (countDecimals(ms) > 2) {\n      msStr = ms.toFixed(2);\n    } else {\n      msStr = String(ms);\n    }\n\n    msStr = \".\" + msStr.split(\".\")[1];\n  }\n\n  return (hours + \":\" + minutes + \":\" + seconds).replace(/\\b\\d\\b/g, \"0$&\") + msStr;\n});\n\n/**\n * Converts a number of seconds to an ISO 8601 duration string (e.g., \"PT1H30M45S\").\n * This function handles the complexity of formatting according to the ISO 8601 standard,\n * including the proper placement of the \"T\" separator for time components.\n *\n * @param {number|null} seconds - The number of seconds to convert. If null or negative, returns \"PT0S\".\n * @return {string} An ISO 8601 formatted duration string.\n *\n * @example\n * // Returns \"PT1H30M45S\" (1 hour, 30 minutes, 45 seconds)\n * getSecondsAsISODuration(5445);\n *\n * @example\n * // Returns \"PT30.5S\" (30.5 seconds)\n * getSecondsAsISODuration(30.5);\n *\n * @example\n * // Returns \"P1DT1H\" (1 day, 1 hour)\n * getSecondsAsISODuration(90000);\n *\n * @example\n * // Returns \"PT0S\" (0 seconds)\n * getSecondsAsISODuration(null);\n */\nexport const getSecondsAsISODuration = memoize((seconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!seconds || seconds <= 0) {\n    return \"PT0S\";\n  }\n\n  let duration = \"P\";\n  let remainder = seconds;\n\n  // Convert to array of entries and use functional methods\n  const designationEntries = Object.entries(designations);\n\n  // Process each time designation\n  designationEntries.forEach(([designationsKey, current_seconds]) => {\n    let value = Math.floor(remainder / current_seconds);\n    remainder = remainder % current_seconds;\n\n    // Limit decimal places\n    if (countDecimals(remainder) > 2) {\n      remainder = Number(Number(remainder).toFixed(2));\n    }\n\n    // If we have anything left in the remainder, and we're currently adding\n    // seconds to the duration, go ahead and add the decimal to the seconds\n    if (designationsKey === \"S\" && remainder > 0) {\n      value += remainder;\n    }\n\n    if (value) {\n      // Add the 'T' separator for time components if needed\n      const needsTimeSeparator =\n        (duration.indexOf(\"D\") > 0 || [\"H\", \"M\", \"S\"].includes(designationsKey)) &&\n        duration.indexOf(\"T\") === -1;\n\n      if (needsTimeSeparator) {\n        duration += \"T\";\n      }\n\n      duration += `${value}${designationsKey}`;\n    }\n  });\n\n  return duration;\n});\n\n/**\n * Converts a time string in HH:MM:SS format to the equivalent number of seconds.\n * This function is flexible and can handle various input types, converting them to strings as needed.\n *\n * @param {string|number|boolean|null} timeString - The time string to convert, typically in HH:MM:SS format.\n *                                                 If not a string, it will be converted to one.\n *                                                 If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} timeRegex - The regular expression used to validate the time string format.\n *                                    If a string is provided, it will be converted to a RegExp.\n * @return {number} The total number of seconds represented by the time string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getTimeAsSeconds(\"01:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getTimeAsSeconds(\"invalid\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 30 (converts number to string \"30\" then parses as 0:0:30)\n * getTimeAsSeconds(30, /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport const getTimeAsSeconds = memoize(\n  (timeString: string | number | boolean | null, timeRegex: RegExp | string): number => {\n    if (typeof timeString === \"number\" || typeof timeString === \"boolean\") {\n      timeString = String(timeString);\n    }\n    if (typeof timeRegex === \"string\") {\n      timeRegex = new RegExp(timeRegex);\n    }\n    if (!timeString) {\n      return 0;\n    }\n\n    if (!timeString.match(timeRegex)) {\n      // If the string represents a simple number, treat it as seconds\n      if (/^\\d+(?:\\.\\d+)?$/.test(timeString)) {\n        return Number(timeString);\n      }\n      return 0;\n    }\n\n    const parts = timeString.split(\":\");\n    const hours = Number(parts[0]);\n    const minutes = Number(parts[1]);\n    const seconds = Number(parts[2]);\n    return hours * 3600 + minutes * 60 + seconds;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (timeString, timeRegex) => {\n    const timeStr = typeof timeString === \"string\" ? timeString : String(timeString ?? \"\");\n    const regexStr = typeof timeRegex === \"string\" ? timeRegex : (timeRegex?.toString() ?? \"\");\n    return `${timeStr}:${regexStr}`;\n  },\n);\n\n/**\n * Converts an ISO 8601 duration string (e.g., \"PT1H30M45S\") to the equivalent number of seconds.\n * This function parses the duration string using a regular expression to extract years, days,\n * hours, minutes, and seconds components.\n *\n * @param {string|null} duration - The ISO 8601 duration string to convert.\n *                                If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n *                                       The regex should have capture groups for years, days, hours, minutes, and seconds.\n * @return {number} The total number of seconds represented by the duration string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getDurationAsSeconds(\"PT1H30M45S\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 90000 (1 day, 1 hour)\n * getDurationAsSeconds(\"P1DT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getDurationAsSeconds(\"invalid\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport const getDurationAsSeconds = memoize(\n  (duration: string | null, durationRegex: RegExp | string): number => {\n    if (typeof durationRegex === \"string\") {\n      durationRegex = new RegExp(durationRegex);\n    }\n\n    if (!duration || !duration?.match?.(durationRegex)) {\n      return 0;\n    }\n\n    const [, years, _, , days, hours, minutes, seconds] =\n      new RegExp(durationRegex).exec?.(duration) ?? [];\n    let result = 0.0;\n    result += Number(seconds) || 0.0;\n    result += Number(minutes) * 60.0 || 0.0;\n    result += Number(hours) * 3600.0 || 0.0;\n    result += Number(days) * (60 * 60 * 24.0) || 0.0;\n    result += Number(years) * (60 * 60 * 24 * 365.0) || 0.0;\n    return result;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (duration, durationRegex) => {\n    const durationStr = duration ?? \"\";\n    const regexStr =\n      typeof durationRegex === \"string\" ? durationRegex : (durationRegex?.toString() ?? \"\");\n    return `${durationStr}:${regexStr}`;\n  },\n);\n\n/**\n * Validates ISO 8601 duration format according to SCORM 2004 specification\n * @param {string} duration - The duration string to validate\n * @return {boolean} - True if valid ISO 8601 duration format\n */\nexport const validateISO8601Duration = memoize(\n  (duration: string, durationRegex: RegExp | string): boolean => {\n    if (typeof durationRegex === \"string\") {\n      durationRegex = new RegExp(durationRegex);\n    }\n\n    return !(!duration || !duration?.match?.(durationRegex));\n  },\n);\n\n/**\n * Adds together two ISO 8601 duration strings and returns the result as a new ISO 8601 duration string.\n * This function works by converting both durations to seconds, adding them together, and then\n * converting the result back to an ISO 8601 duration string.\n *\n * @param {string} first - The first ISO 8601 duration string.\n * @param {string} second - The second ISO 8601 duration string.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n * @return {string} A new ISO 8601 duration string representing the sum of the two input durations.\n *\n * @example\n * // Returns \"PT2H\" (1 hour + 1 hour = 2 hours)\n * addTwoDurations(\"PT1H\", \"PT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"PT1H30M\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addTwoDurations(\"PT1H\", \"PT30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"P1DT1H30M\" (1 day + 1 hour and 30 minutes = 1 day, 1 hour, and 30 minutes)\n * addTwoDurations(\"P1D\", \"PT1H30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport function addTwoDurations(\n  first: string,\n  second: string,\n  durationRegex: RegExp | string,\n): string {\n  const regex: RegExp =\n    typeof durationRegex === \"string\" ? new RegExp(durationRegex) : durationRegex;\n  return getSecondsAsISODuration(\n    getDurationAsSeconds(first, regex) + getDurationAsSeconds(second, regex),\n  );\n}\n\n/**\n * Adds together two time strings in HH:MM:SS format and returns the result as a new time string.\n * This function works by converting both time strings to seconds, adding them together, and then\n * converting the result back to an HH:MM:SS format.\n *\n * @param {string} first - The first time string in HH:MM:SS format.\n * @param {string} second - The second time string in HH:MM:SS format.\n * @param {RegExp|string} timeRegex - The regular expression used to validate and parse the time strings.\n *                                   If a string is provided, it will be converted to a RegExp.\n * @return {string} A new time string in HH:MM:SS format representing the sum of the two input times.\n *\n * @example\n * // Returns \"02:00:00\" (1 hour + 1 hour = 2 hours)\n * addHHMMSSTimeStrings(\"01:00:00\", \"01:00:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:00\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:45\" (1 hour + 30 minutes and 45 seconds = 1 hour, 30 minutes, and 45 seconds)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport function addHHMMSSTimeStrings(\n  first: string,\n  second: string,\n  timeRegex: RegExp | string,\n): string {\n  if (typeof timeRegex === \"string\") {\n    timeRegex = new RegExp(timeRegex);\n  }\n  return getSecondsAsHHMMSS(\n    getTimeAsSeconds(first, timeRegex) + getTimeAsSeconds(second, timeRegex),\n  );\n}\n\n/**\n * Flattens a nested JSON object into a flat object with dot notation for nested properties.\n * This function recursively traverses the object and creates new keys using dot notation\n * for nested objects and bracket notation for arrays.\n *\n * @param {StringKeyMap} data - The nested object to flatten.\n * @return {StringKeyMap} A flattened object where nested properties are represented with dot notation.\n *\n * @example\n * // Returns { \"a\": 1, \"b.c\": 2, \"b.d\": 3, \"e[0]\": 4, \"e[1]\": 5 }\n * flatten({\n *   a: 1,\n *   b: { c: 2, d: 3 },\n *   e: [4, 5]\n * });\n *\n * @example\n * // Returns { \"\": [] } for an empty array\n * flatten([]);\n *\n * @example\n * // Returns { \"\": {} } for an empty object\n * flatten({});\n */\nexport function flatten(data: StringKeyMap): StringKeyMap {\n  const result: StringKeyMap = {};\n\n  /**\n   * Recurse through the object\n   * @param {*} cur\n   * @param {*} prop\n   */\n  function recurse(cur: any, prop: any) {\n    if (Object(cur) !== cur) {\n      result[prop] = cur;\n    } else if (Array.isArray(cur)) {\n      // Use forEach instead of for loop\n      cur.forEach((item, i) => {\n        recurse(item, `${prop}[${i}]`);\n      });\n\n      if (cur.length === 0) result[prop] = [];\n    } else {\n      const keys = Object.keys(cur).filter((p) => Object.prototype.hasOwnProperty.call(cur, p));\n\n      const isEmpty = keys.length === 0;\n\n      // Use forEach instead of for...in loop\n      keys.forEach((p) => {\n        recurse(cur[p], prop ? `${prop}.${p}` : p);\n      });\n\n      if (isEmpty && prop) result[prop] = {};\n    }\n  }\n\n  recurse(data, \"\");\n  return result;\n}\n\n/**\n * Converts a flattened object back into a nested object structure.\n * This function is the inverse of `flatten()`. It parses dot notation and bracket notation\n * in property names to recreate the original nested structure.\n *\n * @param {StringKeyMap} data - The flattened object to unflatten.\n * @return {object} A nested object recreated from the flattened structure.\n *\n * @example\n * // Returns { a: 1, b: { c: 2, d: 3 }, e: [4, 5] }\n * unflatten({\n *   \"a\": 1,\n *   \"b.c\": 2,\n *   \"b.d\": 3,\n *   \"e[0]\": 4,\n *   \"e[1]\": 5\n * });\n *\n * @example\n * // Handles array indices correctly\n * unflatten({\n *   \"users[0].name\": \"John\",\n *   \"users[0].email\": \"john@example.com\",\n *   \"users[1].name\": \"Jane\",\n *   \"users[1].email\": \"jane@example.com\"\n * });\n * // Returns:\n * // {\n * //   users: [\n * //     { name: \"John\", email: \"john@example.com\" },\n * //     { name: \"Jane\", email: \"jane@example.com\" }\n * //   ]\n * // }\n */\nexport function unflatten(data: StringKeyMap): object {\n  \"use strict\";\n\n  if (Object(data) !== data || Array.isArray(data)) return data;\n  const result: StringKeyMap = {};\n\n  // Regex pattern for parsing property paths\n  const pattern = /\\.?([^.[\\]]+)|\\[(\\d+)]/g;\n\n  // Get all own properties and process them\n  Object.keys(data)\n    .filter((p) => Object.prototype.hasOwnProperty.call(data, p))\n    .forEach((p) => {\n      let cur = result;\n      let prop = \"\";\n\n      // Create a new regex instance for each property to reset lastIndex\n      const regex = new RegExp(pattern);\n\n      // Process all matches in the property path\n      Array.from({ length: p.match(new RegExp(pattern, \"g\"))?.length ?? 0 }, () =>\n        regex.exec(p),\n      ).forEach((m) => {\n        if (m) {\n          // Create array or object as needed\n          cur = (cur[prop] ?? (cur[prop] = m[2] ? [] : ({} as StringKeyMap))) as StringKeyMap;\n          prop = m[2] || m[1] || \"\";\n        }\n      });\n\n      cur[prop] = data[p];\n    });\n\n  return (result[\"\"] ?? result) as object;\n}\n\n/**\n * Counts the number of decimal places in a number.\n * This function handles both integer and floating-point numbers.\n *\n * @param {number} num - The number to analyze.\n * @return {number} The number of decimal places. Returns 0 for integers or if the number doesn't have a decimal point.\n *\n * @example\n * // Returns 0\n * countDecimals(42);\n *\n * @example\n * // Returns 2\n * countDecimals(3.14);\n *\n * @example\n * // Returns 5\n * countDecimals(1.23456);\n */\nexport function countDecimals(num: number): number {\n  if (Math.floor(num) === num || String(num)?.indexOf?.(\".\") < 0) return 0;\n  const parts = num.toString().split(\".\")?.[1];\n  return parts?.length ?? 0;\n}\n\n/**\n * Formats SCORM messages for consistent and readable logging.\n * This function pads the function name and CMI element to create aligned log messages\n * that are easier to read in log files or console output.\n *\n * @param {string} functionName - The name of the function that generated the message.\n * @param {string} message - The message content to be logged.\n * @param {string} [CMIElement] - Optional. The CMI element related to the message.\n * @return {string} A formatted message string with consistent padding.\n *\n * @example\n * // Returns \"initialize          : Successfully initialized\"\n * formatMessage(\"initialize\", \"Successfully initialized\");\n *\n * @example\n * // Returns \"getValue            : cmi.core.student_id                                             : 12345\"\n * formatMessage(\"getValue\", \"12345\", \"cmi.core.student_id\");\n *\n * @example\n * // Returns \"setValue            : cmi.core.lesson_status                                          : completed\"\n * formatMessage(\"setValue\", \"completed\", \"cmi.core.lesson_status\");\n */\nexport function formatMessage(functionName: string, message: string, CMIElement?: string): string {\n  const baseLength = 20;\n\n  // Use string padding instead of loops\n  const paddedFunction = functionName.padEnd(baseLength);\n  let messageString = `${paddedFunction}: `;\n\n  if (CMIElement) {\n    const CMIElementBaseLength = 70;\n    // Add CMIElement and pad to the required length\n    messageString += CMIElement;\n    messageString = messageString.padEnd(CMIElementBaseLength);\n  }\n\n  // Add the message (or empty string if null/undefined)\n  messageString += message ?? \"\";\n\n  return messageString;\n}\n\n/**\n * Checks if a string contains a specific pattern using regular expression matching.\n * This function is a wrapper around JavaScript's String.match() method that handles\n * null/undefined values gracefully.\n *\n * @param {string} str - The string to search within. If null or undefined, returns false.\n * @param {string} tester - The pattern to search for. Can be a regular expression pattern.\n * @return {boolean} True if the pattern is found in the string, false otherwise.\n *\n * @example\n * // Returns true\n * stringMatches(\"Hello, world!\", \"world\");\n *\n * @example\n * // Returns true\n * stringMatches(\"The quick brown fox\", \"\\\\w+\\\\s+\\\\w+\");\n *\n * @example\n * // Returns false\n * stringMatches(\"Hello, world!\", \"universe\");\n *\n * @example\n * // Returns false (handles null gracefully)\n * stringMatches(null, \"test\");\n */\nexport function stringMatches(str: string | null | undefined, tester: string): boolean {\n  if (typeof str !== \"string\") {\n    return false;\n  }\n  return new RegExp(tester).test(str);\n}\n\n/**\n * Creates a memoized (cached) version of a function for performance optimization.\n * This function caches the results of previous calls with the same arguments,\n * avoiding redundant calculations for repeated calls with the same input.\n *\n * @template T - The type of the function to memoize\n * @param {T} fn - The function to memoize\n * @param {Function} [keyFn] - Optional function to generate a custom cache key.\n *                           Useful for functions with complex arguments that can't be serialized.\n * @return {T} A memoized version of the input function with the same signature\n *\n * @example\n * // Basic usage with a simple function\n * const memoizedAdd = memoize((a, b) => {\n *   console.log('Calculating...');\n *   return a + b;\n * });\n *\n * memoizedAdd(1, 2); // Logs \"Calculating...\" and returns 3\n * memoizedAdd(1, 2); // Returns 3 without logging (uses cached result)\n *\n * @example\n * // Using a custom key function for objects that can't be serialized\n * const memoizedProcessUser = memoize(\n *   (user) => {\n *     console.log('Processing user...');\n *     return { ...user, processed: true };\n *   },\n *   (user) => user.id // Use user.id as the cache key\n * );\n *\n * memoizedProcessUser({ id: 123, name: 'John' }); // Logs and processes\n * memoizedProcessUser({ id: 123, name: 'John' }); // Uses cached result\n */\nexport function memoize<T extends (...args: any[]) => any>(\n  fn: T,\n  keyFn?: (...args: Parameters<T>) => string,\n): T {\n  const cache = new Map<string, ReturnType<T>>();\n\n  return ((...args: Parameters<T>): ReturnType<T> => {\n    const key = keyFn ? keyFn(...args) : JSON.stringify(args);\n\n    return cache.has(key)\n      ? (cache.get(key) as ReturnType<T>)\n      : (() => {\n          const result = fn(...args);\n          cache.set(key, result);\n          return result;\n        })();\n  }) as T;\n}\n","// Using plain objects instead of enums for better compatibility with strip-only mode\n// This approach avoids TypeScript enum runtime code while maintaining the same API\n\n// NAVBoolean values\nexport const NAVBoolean = {\n  UNKNOWN: \"unknown\",\n  TRUE: \"true\",\n  FALSE: \"false\",\n};\n\n// Type for NAVBoolean values\nexport type NAVBoolean = (typeof NAVBoolean)[keyof typeof NAVBoolean];\n\n// SuccessStatus values\nexport const SuccessStatus = {\n  PASSED: \"passed\",\n  FAILED: \"failed\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for SuccessStatus values\nexport type SuccessStatus = (typeof SuccessStatus)[keyof typeof SuccessStatus];\n\n// CompletionStatus values\nexport const CompletionStatus = {\n  COMPLETED: \"completed\",\n  INCOMPLETE: \"incomplete\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for CompletionStatus values\nexport type CompletionStatus = (typeof CompletionStatus)[keyof typeof CompletionStatus];\n\n// LogLevelEnum values\nexport const LogLevelEnum = {\n  _: 0,\n  DEBUG: 1,\n  INFO: 2,\n  WARN: 3,\n  ERROR: 4,\n  NONE: 5,\n};\n\n// Type for LogLevelEnum values\nexport type LogLevelEnum = (typeof LogLevelEnum)[keyof typeof LogLevelEnum];\n","import { InternalSettings, LogLevel, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"./api_constants\";\nimport { LogLevelEnum } from \"./enums\";\n\n/**\n * Default settings for the SCORM API\n */\nexport const DefaultSettings: InternalSettings = {\n  autocommit: false,\n  autocommitSeconds: 10,\n  asyncCommit: false,\n  sendFullCommit: true,\n  lmsCommitUrl: false,\n  dataCommitFormat: \"json\",\n  commitRequestDataType: \"application/json;charset=UTF-8\",\n  autoProgress: false,\n  logLevel: LogLevelEnum.ERROR,\n  selfReportSessionTime: false,\n  alwaysSendTotalTime: false,\n  renderCommonCommitFields: false,\n  strict_errors: true,\n  xhrHeaders: {},\n  xhrWithCredentials: false,\n  fetchMode: \"cors\",\n  useBeaconInsteadOfFetch: \"never\",\n  responseHandler: async function (response: Response): Promise<ResultObject> {\n    if (typeof response !== \"undefined\") {\n      let httpResult = null;\n\n      // Handle both text() and json() response methods\n      try {\n        if (typeof response.json === \"function\") {\n          // Try to get JSON directly if the method exists\n          httpResult = await response.json();\n        } else if (typeof response.text === \"function\") {\n          // Fall back to text() if json() is not available\n          const responseText = await response.text();\n          if (responseText) {\n            httpResult = JSON.parse(responseText);\n          }\n        }\n      } catch (e) {\n        // If parsing fails, continue with null httpResult\n      }\n\n      if (httpResult === null || !{}.hasOwnProperty.call(httpResult, \"result\")) {\n        if (response.status === 200) {\n          return {\n            result: global_constants.SCORM_TRUE,\n            errorCode: 0,\n          };\n        } else {\n          return {\n            result: global_constants.SCORM_FALSE,\n            errorCode: 101,\n          };\n        }\n      } else {\n        return {\n          result: httpResult.result,\n          errorCode: httpResult.errorCode\n            ? httpResult.errorCode\n            : httpResult.result === global_constants.SCORM_TRUE\n              ? 0\n              : 101,\n        };\n      }\n    }\n    return {\n      result: global_constants.SCORM_FALSE,\n      errorCode: 101,\n    };\n  },\n  requestHandler: function (commitObject) {\n    return commitObject;\n  },\n  onLogMessage: defaultLogHandler,\n  scoItemIds: [],\n  scoItemIdValidator: false,\n  globalObjectiveIds: [],\n\n  // Offline support settings\n  enableOfflineSupport: false,\n  courseId: \"\",\n  syncOnInitialize: true,\n  syncOnTerminate: true,\n  maxSyncAttempts: 5,\n};\n\nexport function defaultLogHandler(messageLevel: LogLevel, logMessage: string): void {\n  switch (messageLevel) {\n    case \"4\":\n    case 4:\n    case \"ERROR\":\n    case LogLevelEnum.ERROR:\n      console.error(logMessage);\n      break;\n    case \"3\":\n    case 3:\n    case \"WARN\":\n    case LogLevelEnum.WARN:\n      console.warn(logMessage);\n      break;\n    case \"2\":\n    case 2:\n    case \"INFO\":\n    case LogLevelEnum.INFO:\n      console.info(logMessage);\n      break;\n    case \"1\":\n    case 1:\n    case \"DEBUG\":\n    case LogLevelEnum.DEBUG:\n      if (console.debug) {\n        console.debug(logMessage);\n      } else {\n        console.log(logMessage);\n      }\n      break;\n  }\n}\n","import BaseAPI from \"../BaseAPI\";\n\n/**\n * Private class that wraps a timeout call to the commit() function\n */\nexport class ScheduledCommit {\n  private _API;\n  private _cancelled = false;\n  private readonly _timeout;\n  private readonly _callback;\n\n  /**\n   * Constructor for ScheduledCommit\n   * @param {BaseAPI} API\n   * @param {number} when\n   * @param {string} callback\n   */\n  constructor(API: BaseAPI, when: number, callback: string) {\n    this._API = API;\n    this._timeout = setTimeout(this.wrapper.bind(this), when);\n    this._callback = callback;\n  }\n\n  /**\n   * Cancel any currently scheduled commit\n   */\n  cancel() {\n    this._cancelled = true;\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n  }\n\n  /**\n   * Wrap the API commit call to check if the call has already been canceled\n   */\n  wrapper() {\n    if (!this._cancelled) {\n      // Only proceed with scheduled commit if API is properly initialized\n      if (this._API.isInitialized()) {\n        (async () => await this._API.commit(this._callback))();\n      }\n    }\n  }\n}\n","import { CommitObject, InternalSettings, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { IHttpService } from \"../interfaces/services\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { StringKeyMap } from \"../utilities\";\n\n/**\n * Service for handling HTTP communication with the LMS\n */\nexport class HttpService implements IHttpService {\n  private settings: InternalSettings;\n  private error_codes: ErrorCode;\n\n  /**\n   * Constructor for HttpService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   */\n  constructor(settings: InternalSettings, error_codes: ErrorCode) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n  }\n\n  /**\n   * Sends HTTP requests to the LMS with special handling for immediate and standard requests.\n   *\n   * This method handles communication with the LMS server, implementing two distinct\n   * request handling strategies based on the context:\n   *\n   * 1. Immediate Mode (used during termination):\n   *    When immediate=true, the method:\n   *    - Initiates the fetch request but doesn't wait for it to complete\n   *    - Returns a success result immediately\n   *    - Processes the response asynchronously when it arrives\n   *\n   *    This is critical for browser compatibility during page unload/termination,\n   *    as some browsers (especially Chrome) may cancel synchronous or awaited\n   *    requests when a page is closing.\n   *\n   * 2. Standard Mode (normal operation):\n   *    When immediate=false, the method:\n   *    - Processes the request parameters through the configured requestHandler\n   *    - Awaits the fetch response completely\n   *    - Transforms the response using the configured responseHandler\n   *    - Triggers appropriate event listeners based on success/failure\n   *    - Returns the complete result with appropriate error codes\n   *\n   * The method also includes error handling to catch network failures or other\n   * exceptions that might occur during the request process.\n   *\n   * @param {string} url - The URL endpoint to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The data to send to the LMS\n   * @param {boolean} immediate - Whether to send the request immediately without waiting (true) or process normally (false)\n   * @param {Function} apiLog - Function to log API messages with appropriate levels\n   * @param {Function} processListeners - Function to trigger event listeners for commit events\n   * @return {Promise<ResultObject>} - A promise that resolves with the result of the request\n   *\n   * @example\n   * // Standard request (waits for response)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   false,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   *\n   * @example\n   * // Immediate request (for termination)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   true,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   * // result will be success immediately, regardless of actual HTTP result\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n    apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    const genericError: ResultObject = {\n      result: global_constants.SCORM_FALSE,\n      errorCode: this.error_codes.GENERAL || 101,\n    };\n\n    // If immediate mode (for termination), handle differently\n    if (immediate) {\n      return this._handleImmediateRequest(url, params, apiLog, processListeners);\n    }\n\n    // Standard request processing\n    try {\n      const processedParams = this.settings.requestHandler(params) as\n        | CommitObject\n        | StringKeyMap\n        | Array<any>;\n      const response = await this.performFetch(url, processedParams);\n      return this.transformResponse(response, processListeners);\n    } catch (e: unknown) {\n      const message = e instanceof Error ? e.message : String(e);\n\n      // Enhanced error logging with more context\n      apiLog(\"processHttpRequest\", `HTTP request failed to ${url}: ${message}`, LogLevelEnum.ERROR);\n\n      if (e instanceof Error && e.stack) {\n        apiLog(\"processHttpRequest\", `Stack trace: ${e.stack}`, LogLevelEnum.DEBUG);\n      }\n\n      // Create enhanced error object with more details\n      const enhancedError: ResultObject = {\n        ...genericError,\n        errorMessage: message,\n        errorDetails: JSON.stringify({\n          url,\n          errorType: e instanceof Error ? e.constructor.name : typeof e,\n          originalError: message,\n        }),\n      };\n\n      processListeners(\"CommitError\");\n      return enhancedError;\n    }\n  }\n\n  /**\n   * Handles an immediate request (used during termination)\n   * @param {string} url - The URL to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The parameters to include in the request\n   * @param {Function} processListeners - Function to process event listeners\n   * @return {ResultObject} - A success result object\n   * @private\n   */\n  private _handleImmediateRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): ResultObject {\n    // Use Beacon API for final commit if specified in settings\n    if (this.settings.useBeaconInsteadOfFetch !== \"never\") {\n      const { body, contentType } = this._prepareRequestBody(params);\n      navigator.sendBeacon(url, new Blob([body], { type: contentType }));\n    } else {\n      // Use regular fetch with keepalive\n      this.performFetch(url, params)\n        .then(async (response) => {\n          await this.transformResponse(response, processListeners);\n        })\n        .catch((e: unknown) => {\n          const message = e instanceof Error ? e.message : String(e);\n          apiLog(\"processHttpRequest\", message, LogLevelEnum.ERROR);\n          processListeners(\"CommitError\");\n        });\n    }\n\n    // Return success immediately without waiting for response\n    return {\n      result: global_constants.SCORM_TRUE,\n      errorCode: 0,\n    };\n  }\n\n  /**\n   * Prepares the request body and content type based on params type\n   * @param {CommitObject|StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Object} - Object containing body and contentType\n   * @private\n   */\n  private _prepareRequestBody(params: CommitObject | StringKeyMap | Array<any>): {\n    body: string;\n    contentType: string;\n  } {\n    const body = params instanceof Array ? params.join(\"&\") : JSON.stringify(params);\n    const contentType =\n      params instanceof Array\n        ? \"application/x-www-form-urlencoded\"\n        : this.settings.commitRequestDataType;\n\n    return { body, contentType };\n  }\n\n  /**\n   * Perform the fetch request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - The response from the LMS\n   * @private\n   */\n  private async performFetch(url: string, params: StringKeyMap | Array<any>): Promise<Response> {\n    // Use Beacon API if specified in settings\n    if (this.settings.useBeaconInsteadOfFetch === \"always\") {\n      return this.performBeacon(url, params);\n    }\n\n    const { body, contentType } = this._prepareRequestBody(params);\n    const init = {\n      method: \"POST\",\n      mode: this.settings.fetchMode,\n      body,\n      headers: {\n        ...this.settings.xhrHeaders,\n        \"Content-Type\": contentType,\n      },\n      keepalive: true,\n    } as RequestInit;\n\n    if (this.settings.xhrWithCredentials) {\n      init.credentials = \"include\";\n    }\n\n    return fetch(url, init);\n  }\n\n  /**\n   * Perform the beacon request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - A promise that resolves with a mock Response object\n   * @private\n   */\n  private async performBeacon(url: string, params: StringKeyMap | Array<any>): Promise<Response> {\n    const { body, contentType } = this._prepareRequestBody(params);\n\n    // Send the beacon request\n    const beaconSuccess = navigator.sendBeacon(url, new Blob([body], { type: contentType }));\n\n    // Create a mock Response object since sendBeacon doesn't return a Response\n    return Promise.resolve({\n      status: beaconSuccess ? 200 : 0,\n      ok: beaconSuccess,\n      json: async () => ({\n        result: beaconSuccess ? \"true\" : \"false\",\n        errorCode: beaconSuccess ? 0 : this.error_codes.GENERAL,\n      }),\n      text: async () =>\n        JSON.stringify({\n          result: beaconSuccess ? \"true\" : \"false\",\n          errorCode: beaconSuccess ? 0 : this.error_codes.GENERAL,\n        }),\n    } as Response);\n  }\n\n  /**\n   * Transforms the response from the LMS to a ResultObject\n   * @param {Response} response - The response from the LMS\n   * @param {Function} processListeners - Function to process event listeners\n   * @return {Promise<ResultObject>} - The transformed response\n   * @private\n   */\n  private async transformResponse(\n    response: Response,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    let result: any;\n\n    try {\n      // Parse the response using the configured handler or default to json\n      result =\n        typeof this.settings.responseHandler === \"function\"\n          ? await this.settings.responseHandler(response)\n          : await response.json();\n    } catch (parseError) {\n      // If we can't parse the response, log the raw response for debugging\n      const responseText = await response.text().catch(() => \"Unable to read response text\");\n\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL || 101,\n        errorMessage: `Failed to parse LMS response: ${parseError instanceof Error ? parseError.message : String(parseError)}`,\n        errorDetails: JSON.stringify({\n          status: response.status,\n          statusText: response.statusText,\n          url: response.url,\n          responseText: responseText.substring(0, 500), // Limit response text to avoid huge logs\n          parseError: parseError instanceof Error ? parseError.message : String(parseError),\n        }),\n      };\n    }\n\n    // Ensure result has an errorCode property\n    if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n      result.errorCode = this._isSuccessResponse(response, result) ? 0 : this.error_codes.GENERAL;\n    }\n\n    // Add response details for failed requests\n    if (!this._isSuccessResponse(response, result)) {\n      result.errorDetails = {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n        ...result.errorDetails, // Preserve any existing error details\n      };\n    }\n\n    // Trigger appropriate event based on success/failure\n    if (this._isSuccessResponse(response, result)) {\n      processListeners(\"CommitSuccess\");\n    } else {\n      processListeners(\"CommitError\", undefined, result.errorCode);\n    }\n\n    return result;\n  }\n\n  /**\n   * Determines if a response is successful based on status code and result\n   * @param {Response} response - The HTTP response\n   * @param {ResultObject} result - The parsed result object\n   * @return {boolean} - Whether the response is successful\n   * @private\n   */\n  private _isSuccessResponse(response: Response, result: ResultObject): boolean {\n    const value = (result as any).result;\n    return (\n      response.status >= 200 &&\n      response.status <= 299 &&\n      (value === true || value === \"true\" || value === global_constants.SCORM_TRUE)\n    );\n  }\n\n  /**\n   * Updates the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: InternalSettings): void {\n    this.settings = settings;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { IEventService } from \"../interfaces/services\";\n\n/**\n * Interface for a listener object\n */\ninterface Listener {\n  functionName: string;\n  CMIElement: string | null;\n  callback: Function;\n}\n\n/**\n * Type for parsed listener information\n */\ninterface ParsedListener {\n  functionName: string;\n  CMIElement: string | null;\n}\n\n/**\n * Service for handling event listeners and event processing\n */\nexport class EventService implements IEventService {\n  // Map of function names to listeners for faster lookups\n  private listenerMap: Map<string, Listener[]> = new Map();\n  // Total count of listeners for logging\n  private listenerCount = 0;\n  // Function to log API messages\n  private readonly apiLog: (\n    functionName: string,\n    message: string,\n    messageLevel: LogLevel,\n    CMIElement?: string,\n  ) => void;\n\n  /**\n   * Constructor for EventService\n   * @param {Function} apiLog - Function to log API messages\n   */\n  constructor(\n    apiLog: (\n      functionName: string,\n      message: string,\n      messageLevel: LogLevel,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.apiLog = apiLog;\n  }\n\n  /**\n   * Parses a listener name into its components\n   *\n   * @param {string} listenerName - The name of the listener\n   * @returns {ParsedListener|null} - The parsed listener information or null if invalid\n   */\n  private parseListenerName(listenerName: string): ParsedListener | null {\n    const listenerSplit = listenerName.split(\".\");\n    if (listenerSplit.length === 0) return null;\n\n    const functionName = listenerSplit[0];\n    let CMIElement: string | null = null;\n\n    if (listenerSplit.length > 1) {\n      CMIElement = listenerName.replace(`${functionName}.`, \"\");\n    }\n\n    return { functionName: functionName ?? listenerName, CMIElement };\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener\n   * @param {Function} callback - The callback function to execute when the event occurs\n   */\n  on(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get or create the array for this function name\n      const listeners = this.listenerMap.get(functionName) ?? [];\n\n      // Add the new listener\n      listeners.push({\n        functionName,\n        CMIElement,\n        callback,\n      });\n\n      // Update the map and count\n      this.listenerMap.set(functionName, listeners);\n      this.listenerCount++;\n\n      this.apiLog(\n        \"on\",\n        `Added event listener: ${this.listenerCount}`,\n        LogLevelEnum.INFO,\n        functionName,\n      );\n    }\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener\n   *\n   * @param {string} listenerName - The name of the listener to remove\n   * @param {Function} callback - The callback function to remove\n   */\n  off(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get the listeners for this function name\n      const listeners = this.listenerMap.get(functionName);\n      if (!listeners) continue;\n\n      // Find the index of the listener to remove\n      const removeIndex = listeners.findIndex(\n        (obj) => obj.CMIElement === CMIElement && obj.callback === callback,\n      );\n\n      if (removeIndex !== -1) {\n        // Remove the listener\n        listeners.splice(removeIndex, 1);\n        this.listenerCount--;\n\n        // Update the map or remove the entry if empty\n        if (listeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, listeners);\n        }\n\n        this.apiLog(\n          \"off\",\n          `Removed event listener: ${this.listenerCount}`,\n          LogLevelEnum.INFO,\n          functionName,\n        );\n      }\n    }\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener to clear\n   */\n  clear(listenerName: string) {\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // If we have listeners for this function name\n      if (this.listenerMap.has(functionName)) {\n        const listeners = this.listenerMap.get(functionName)!;\n\n        // Filter out listeners that match the criteria\n        const newListeners = listeners.filter((obj) => obj.CMIElement !== CMIElement);\n\n        // Update the count and map\n        this.listenerCount -= listeners.length - newListeners.length;\n\n        if (newListeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, newListeners);\n        }\n      }\n    }\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created\n   *\n   * @param {string} functionName - The name of the function that triggered the event\n   * @param {string} CMIElement - The CMI element that was affected\n   * @param {any} value - The value that was set\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this.apiLog(functionName, value, LogLevelEnum.INFO, CMIElement);\n\n    // Get listeners for this function name\n    const listeners = this.listenerMap.get(functionName);\n    if (!listeners) return;\n\n    for (const listener of listeners) {\n      const listenerHasCMIElement = !!listener.CMIElement;\n      let CMIElementsMatch = false;\n\n      // Check if CMI elements match\n      if (CMIElement && listener.CMIElement) {\n        if (listener.CMIElement.endsWith(\"*\")) {\n          // For wildcard matches, check if the CMI element starts with the prefix\n          const prefix = listener.CMIElement.slice(0, -1);\n          CMIElementsMatch = CMIElement.startsWith(prefix);\n        } else {\n          // For exact matches, compare the strings directly\n          CMIElementsMatch = listener.CMIElement === CMIElement;\n        }\n      }\n\n      // If the listener matches, call the callback\n      if (!listenerHasCMIElement || CMIElementsMatch) {\n        this.apiLog(\n          \"processListeners\",\n          `Processing listener: ${listener.functionName}`,\n          LogLevelEnum.DEBUG,\n          CMIElement,\n        );\n\n        // Handle special event types\n        if (functionName.startsWith(\"Sequence\")) {\n          // For sequence events, pass the target as the first argument\n          listener.callback(value);\n        } else if (functionName === \"CommitError\") {\n          // For commit error events, pass the error code\n          listener.callback(value);\n        } else if (functionName === \"CommitSuccess\") {\n          // For commit success events, pass no arguments\n          listener.callback();\n        } else {\n          // For regular events, pass CMIElement and value\n          listener.callback(CMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Resets the event service by clearing all listeners\n   */\n  reset() {\n    this.listenerMap.clear();\n    this.listenerCount = 0;\n  }\n}\n","import { CommitObject, LogLevel } from \"../types/api_types\";\nimport { StringKeyMap, unflatten } from \"../utilities\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { BaseCMI } from \"../cmi/common/base_cmi\";\nimport { ISerializationService } from \"../interfaces/services\";\n\n/**\n * Service for handling data serialization and deserialization in scorm-again\n */\nexport class SerializationService implements ISerializationService {\n  /**\n   * Loads CMI data from a flattened JSON object with special handling for arrays and ordering.\n   *\n   * This method implements a complex algorithm for loading flattened JSON data into the CMI\n   * object structure. It handles several key challenges:\n   *\n   * 1. Ordering dependencies: Some CMI elements (like interactions and objectives) must be\n   *    loaded in a specific order to ensure proper initialization.\n   *\n   * 2. Array handling: Interactions and objectives are stored as arrays, and their properties\n   *    must be loaded in the correct order (e.g., 'id' and 'type' must be set before other properties).\n   *\n   * 3. Unflattening: The method converts flattened dot notation (e.g., \"cmi.objectives.0.id\")\n   *    back into nested objects before loading.\n   *\n   * The algorithm works by:\n   * - Categorizing keys into interactions, objectives, and other properties\n   * - Sorting interactions to prioritize 'id' and 'type' fields within each index\n   * - Sorting objectives to prioritize 'id' fields within each index\n   * - Processing each category in order: interactions, objectives, then other properties\n   *\n   * @param {StringKeyMap} json - The flattened JSON object with dot notation keys\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   *\n   * @param setStartingData\n   * @example\n   * // Example of flattened JSON input:\n   * // {\n   * //   \"cmi.objectives.0.id\": \"obj1\",\n   * //   \"cmi.objectives.0.score.raw\": \"80\",\n   * //   \"cmi.interactions.0.id\": \"int1\",\n   * //   \"cmi.interactions.0.type\": \"choice\",\n   * //   \"cmi.interactions.0.result\": \"correct\"\n   * // }\n   */\n  loadFromFlattenedJSON(\n    json: StringKeyMap,\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromFlattenedJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    const int_pattern = /^(cmi\\.interactions\\.)(\\d+)\\.(.*)$/;\n    const obj_pattern = /^(cmi\\.objectives\\.)(\\d+)\\.(.*)$/;\n\n    // Extract and categorize keys for better sorting\n    const interactions: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const objectives: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const others: { key: string; value: any }[] = [];\n\n    // Categorize keys\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key)) {\n        const intMatch = key.match(int_pattern);\n        if (intMatch) {\n          interactions.push({\n            key,\n            value: json[key],\n            index: Number(intMatch[2]),\n            field: intMatch[3] || \"\",\n          });\n          continue;\n        }\n\n        const objMatch = key.match(obj_pattern);\n        if (objMatch) {\n          objectives.push({\n            key,\n            value: json[key],\n            index: Number(objMatch[2]),\n            field: objMatch[3] || \"\",\n          });\n          continue;\n        }\n\n        others.push({ key, value: json[key] });\n      }\n    }\n\n    // Sort interactions: first by index, then prioritize 'id' and 'type' fields\n    interactions.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id and type\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n      if (a.field === \"type\") return -1;\n      if (b.field === \"type\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort objectives: first by index, then prioritize 'id' field\n    objectives.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort other keys alphabetically\n    others.sort((a, b) => a.key.localeCompare(b.key));\n\n    // Process all items in the correct order\n    const processItems = (items: { key: string; value: any }[]) => {\n      items.forEach((item) => {\n        const obj: StringKeyMap = {};\n        obj[item.key] = item.value;\n        this.loadFromJSON(\n          unflatten(obj) as StringKeyMap,\n          CMIElement,\n          setCMIValue,\n          isNotInitialized,\n          setStartingData,\n        );\n      });\n    };\n\n    // Process in order: interactions, objectives, others\n    processItems(interactions);\n    processItems(objectives);\n    processItems(others);\n  }\n\n  /**\n   * Loads CMI data from a nested JSON object with recursive traversal.\n   *\n   * This method implements a recursive algorithm for loading nested JSON data into the CMI\n   * object structure. It handles several key aspects:\n   *\n   * 1. Recursive traversal: The method recursively traverses the nested JSON structure,\n   *    building CMI element paths as it goes (e.g., \"cmi.core.student_id\").\n   *\n   * 2. Type-specific handling: Different data types are handled differently:\n   *    - Arrays: Each array element is processed individually with its index in the path\n   *    - Objects: Recursively processed with updated path\n   *    - Primitives: Set directly using setCMIValue\n   *\n   * 3. Initialization check: Ensures the method is only called before API initialization\n   *\n   * 4. Starting data storage: Stores the original JSON data for potential future use\n   *\n   * The algorithm works by:\n   * - First storing the complete JSON object via setStartingData\n   * - Iterating through each property in the JSON object\n   * - For each property, determining its type and handling it accordingly\n   * - Building the CMI element path as it traverses the structure\n   * - Setting values at the appropriate paths using setCMIValue\n   *\n   * @param {{[key: string]: any}} json - The nested JSON object to load\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value at a specific path\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   * @param {Function} setStartingData - Function to store the original JSON data\n   *\n   * @example\n   * // Example of nested JSON input:\n   * // {\n   * //   \"core\": {\n   * //     \"student_id\": \"12345\",\n   * //     \"student_name\": \"John Doe\"\n   * //   },\n   * //   \"objectives\": [\n   * //     { \"id\": \"obj1\", \"score\": { \"raw\": 80 } },\n   * //     { \"id\": \"obj2\", \"score\": { \"raw\": 90 } }\n   * //   ]\n   * // }\n   */\n  loadFromJSON(\n    json: { [key: string]: any },\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    CMIElement = CMIElement !== undefined ? CMIElement : \"cmi\";\n\n    setStartingData(json);\n\n    // could this be refactored down to flatten(json) then setCMIValue on each?\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key) && json[key]) {\n        const currentCMIElement = (CMIElement ? CMIElement + \".\" : \"\") + key;\n        const value = json[key];\n\n        if (value.constructor === Array) {\n          for (let i = 0; i < value.length; i++) {\n            if (value[i]) {\n              const item = value[i];\n              const tempCMIElement = `${currentCMIElement}.${i}`;\n\n              if (item.constructor === Object) {\n                this.loadFromJSON(\n                  item,\n                  tempCMIElement,\n                  setCMIValue,\n                  isNotInitialized,\n                  setStartingData,\n                );\n              } else {\n                setCMIValue(tempCMIElement, item);\n              }\n            }\n          }\n        } else if (value.constructor === Object) {\n          this.loadFromJSON(\n            value,\n            currentCMIElement,\n            setCMIValue,\n            isNotInitialized,\n            setStartingData,\n          );\n        } else {\n          setCMIValue(currentCMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Render the CMI object to JSON for sending to an LMS.\n   *\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {string}\n   */\n  renderCMIToJSONString(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): string {\n    // Do we want/need to return fields that have no set value?\n    if (sendFullCommit) {\n      return JSON.stringify({ cmi });\n    }\n    return JSON.stringify({ cmi }, (k, v) => (v === undefined ? null : v), 2);\n  }\n\n  /**\n   * Returns a JS object representing the current cmi\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {object}\n   */\n  renderCMIToJSONObject(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): StringKeyMap {\n    // Revert to the original implementation to maintain compatibility with tests\n    return JSON.parse(this.renderCMIToJSONString(cmi, sendFullCommit));\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} alwaysSendTotalTime - Whether to always send total time\n   * @param {boolean|Function} renderCommonCommitFields - Whether to render common commit fields\n   * @param {Function} renderCommitObject - Function to render commit object\n   * @param {Function} renderCommitCMI - Function to render commit CMI\n   * @param {LogLevel} apiLogLevel - The API log level\n   * @return {CommitObject|StringKeyMap|Array<any>}\n   */\n  getCommitObject(\n    terminateCommit: boolean,\n    alwaysSendTotalTime: boolean,\n    renderCommonCommitFields: boolean | ((commitObject: CommitObject) => boolean),\n    renderCommitObject: (terminateCommit: boolean, includeTotalTime?: boolean) => CommitObject,\n    renderCommitCMI: (\n      terminateCommit: boolean,\n      includeTotalTime?: boolean,\n    ) => StringKeyMap | Array<any>,\n    apiLogLevel: LogLevel,\n  ): CommitObject | StringKeyMap | Array<any> {\n    // Fix for issue: total time is being calculated incorrectly across multiple sessions\n    // when selfReportSessionTime and alwaysSendTotalTime are enabled.\n    //\n    // Previously, we were using a single variable (shouldTerminateCommit) that combined\n    // both concerns: whether this is a termination commit and whether to include total time.\n    // This caused the total time to be calculated as if every commit was a terminate commit\n    // when alwaysSendTotalTime was true, leading to incorrect time calculations.\n    //\n    // Now we pass the actual terminateCommit value and a separate parameter for whether\n    // to include total time, allowing the rendering functions to handle these concerns separately.\n    const includeTotalTime = alwaysSendTotalTime || terminateCommit;\n\n    const commitObject = renderCommonCommitFields\n      ? renderCommitObject(terminateCommit, includeTotalTime)\n      : renderCommitCMI(terminateCommit, includeTotalTime);\n\n    if ([LogLevelEnum.DEBUG, \"1\", 1, \"DEBUG\"].includes(apiLogLevel)) {\n      console.debug(\"Commit (terminated: \" + (terminateCommit ? \"yes\" : \"no\") + \"): \");\n      console.debug(commitObject);\n    }\n    return commitObject;\n  }\n}\n","type APIError = {\n  errorCode: number;\n  errorMessage: string;\n  detailedMessage: string;\n};\n\nexport class BaseScormValidationError extends Error {\n  constructor(CMIElement: string, errorCode: number) {\n    super(`${CMIElement} : ${errorCode.toString()}`);\n    this._errorCode = errorCode;\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, BaseScormValidationError.prototype);\n  }\n\n  private readonly _errorCode: number;\n\n  /**\n   * Getter for _errorCode\n   * @return {number}\n   */\n  get errorCode(): number {\n    return this._errorCode;\n  }\n}\n\n/**\n * Base Validation Exception\n */\nexport class ValidationError extends BaseScormValidationError implements APIError {\n  /**\n   * Constructor to take in an error message and code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   * @param {string} errorMessage\n   * @param {string} detailedMessage\n   */\n  constructor(\n    CMIElement: string,\n    errorCode: number,\n    errorMessage: string,\n    detailedMessage?: string,\n  ) {\n    super(CMIElement, errorCode);\n    this.message = `${CMIElement} : ${errorMessage}`;\n    this._errorMessage = errorMessage;\n    if (detailedMessage) {\n      this._detailedMessage = detailedMessage;\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  private readonly _errorMessage: string;\n  private readonly _detailedMessage: string = \"\";\n\n  /**\n   * Getter for _errorMessage\n   * @return {string}\n   */\n  get errorMessage(): string {\n    return this._errorMessage;\n  }\n\n  /**\n   * Getter for _detailedMessage\n   * @return {string}\n   */\n  get detailedMessage(): string {\n    return this._detailedMessage;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ILoggingService } from \"../interfaces/services\";\nimport { defaultLogHandler } from \"../constants/default_settings\";\n\n/**\n * Centralized logging service implemented as a singleton\n * Provides methods for logging at different levels and configuring the log level\n */\nexport class LoggingService implements ILoggingService {\n  private static _instance: LoggingService;\n  private _logLevel: LogLevel = LogLevelEnum.ERROR;\n  private _logHandler: (messageLevel: LogLevel, logMessage: string) => void;\n\n  /**\n   * Private constructor to prevent direct instantiation\n   */\n  private constructor() {\n    // Default log handler uses console methods based on log level\n    this._logHandler = defaultLogHandler;\n  }\n\n  /**\n   * Get the singleton instance of LoggingService\n   *\n   * @returns {LoggingService} The singleton instance\n   */\n  public static getInstance(): LoggingService {\n    if (!LoggingService._instance) {\n      LoggingService._instance = new LoggingService();\n    }\n    return LoggingService._instance;\n  }\n\n  /**\n   * Set the log level\n   *\n   * @param {LogLevel} level - The log level to set\n   */\n  public setLogLevel(level: LogLevel): void {\n    this._logLevel = level;\n  }\n\n  /**\n   * Get the current log level\n   *\n   * @returns {LogLevel} The current log level\n   */\n  public getLogLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  /**\n   * Set a custom log handler\n   *\n   * @param {Function} handler - The function to handle log messages\n   */\n  public setLogHandler(handler: (messageLevel: LogLevel, logMessage: string) => void): void {\n    this._logHandler = handler;\n  }\n\n  /**\n   * Log a message if the message level is greater than or equal to the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @param {string} logMessage - The message to log\n   */\n  public log(messageLevel: LogLevel, logMessage: string): void {\n    if (this.shouldLog(messageLevel)) {\n      this._logHandler(messageLevel, logMessage);\n    }\n  }\n\n  /**\n   * Log a message at ERROR level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public error(logMessage: string): void {\n    this.log(LogLevelEnum.ERROR, logMessage);\n  }\n\n  /**\n   * Log a message at WARN level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public warn(logMessage: string): void {\n    this.log(LogLevelEnum.WARN, logMessage);\n  }\n\n  /**\n   * Log a message at INFO level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public info(logMessage: string): void {\n    this.log(LogLevelEnum.INFO, logMessage);\n  }\n\n  /**\n   * Log a message at DEBUG level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public debug(logMessage: string): void {\n    this.log(LogLevelEnum.DEBUG, logMessage);\n  }\n\n  /**\n   * Determine if a message should be logged based on its level and the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @returns {boolean} Whether the message should be logged\n   */\n  private shouldLog(messageLevel: LogLevel): boolean {\n    // Convert string levels to numbers for comparison\n    const numericMessageLevel = this.getNumericLevel(messageLevel);\n    const numericLogLevel = this.getNumericLevel(this._logLevel);\n\n    return numericMessageLevel >= numericLogLevel;\n  }\n\n  /**\n   * Convert a log level to its numeric value\n   *\n   * @param {LogLevel} level - The log level to convert\n   * @returns {number} The numeric value of the log level\n   */\n  private getNumericLevel(level: LogLevel): number {\n    if (level === undefined) return LogLevelEnum.NONE;\n\n    if (typeof level === \"number\") return level;\n\n    switch (level) {\n      case \"1\":\n      case \"DEBUG\":\n        return LogLevelEnum.DEBUG;\n      case \"2\":\n      case \"INFO\":\n        return LogLevelEnum.INFO;\n      case \"3\":\n      case \"WARN\":\n        return LogLevelEnum.WARN;\n      case \"4\":\n      case \"ERROR\":\n        return LogLevelEnum.ERROR;\n      case \"5\":\n      case \"NONE\":\n        return LogLevelEnum.NONE;\n      default:\n        return LogLevelEnum.ERROR; // Default to ERROR if unknown\n    }\n  }\n}\n\n// Export a function to get the singleton instance\nexport function getLoggingService(): LoggingService {\n  return LoggingService.getInstance();\n}\n","import { LogLevelEnum } from \"../constants/enums\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { ValidationError } from \"../exceptions\";\nimport { IErrorHandlingService, ILoggingService } from \"../interfaces/services\";\nimport { getLoggingService } from \"./LoggingService\";\n\n/**\n * Service for handling SCORM errors\n */\nexport class ErrorHandlingService implements IErrorHandlingService {\n  private _lastErrorCode: string = \"0\";\n  private readonly _errorCodes: ErrorCode;\n  private readonly _apiLog: (\n    functionName: string,\n    message: string,\n    logLevel?: LogLevelEnum,\n    CMIElement?: string,\n  ) => void;\n  private readonly _getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string;\n  private readonly _loggingService: ILoggingService;\n\n  /**\n   * Constructor for ErrorHandlingService\n   *\n   * @param {ErrorCode} errorCodes - The error codes object\n   * @param {Function} apiLog - Function for logging API calls\n   * @param {Function} getLmsErrorMessageDetails - Function for getting error message details\n   * @param {ILoggingService} loggingService - Optional logging service instance\n   */\n  constructor(\n    errorCodes: ErrorCode,\n    apiLog: (\n      functionName: string,\n      message: string,\n      logLevel?: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n    loggingService?: ILoggingService,\n  ) {\n    this._errorCodes = errorCodes;\n    this._apiLog = apiLog;\n    this._getLmsErrorMessageDetails = getLmsErrorMessageDetails;\n    this._loggingService = loggingService || getLoggingService();\n  }\n\n  /**\n   * Get the last error code\n   *\n   * @return {string} - The last error code\n   */\n  get lastErrorCode(): string {\n    return this._lastErrorCode;\n  }\n\n  /**\n   * Set the last error code\n   *\n   * @param {string} errorCode - The error code to set\n   */\n  set lastErrorCode(errorCode: string) {\n    this._lastErrorCode = errorCode;\n  }\n\n  /**\n   * Throws a SCORM error\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The error number\n   * @param {string} message - The error message\n   * @throws {ValidationError} - If throwException is true, throws a ValidationError\n   */\n  throwSCORMError(CMIElement: string, errorNumber: number, message?: string): void {\n    if (!message) {\n      message = this._getLmsErrorMessageDetails(errorNumber, true);\n    }\n\n    // Format a more descriptive error message with context\n    const formattedMessage = `SCORM Error ${errorNumber}: ${message}${CMIElement ? ` [Element: ${CMIElement}]` : \"\"}`;\n\n    // Log using both the API log and the logging service for consistency\n    this._apiLog(\"throwSCORMError\", errorNumber + \": \" + message, LogLevelEnum.ERROR, CMIElement);\n    this._loggingService.error(formattedMessage);\n\n    this._lastErrorCode = String(errorNumber);\n  }\n\n  /**\n   * Clears the last SCORM error code on success.\n   *\n   * @param {string} success - Whether the operation was successful\n   */\n  clearSCORMError(success: string): void {\n    if (success !== undefined && success !== global_constants.SCORM_FALSE) {\n      this._lastErrorCode = \"0\";\n    }\n  }\n\n  /**\n   * Handles exceptions that occur when accessing or setting CMI values.\n   *\n   * This method provides centralized error handling for exceptions that occur during\n   * CMI data operations. It differentiates between different types of errors and\n   * handles them appropriately:\n   *\n   * 1. ValidationError: These are expected errors from the validation system that\n   *    indicate a specific SCORM error condition (like invalid data format or range).\n   *    For these errors, the method:\n   *    - Sets the lastErrorCode to the error code from the ValidationError\n   *    - Returns SCORM_FALSE to indicate failure to the caller\n   *\n   * 2. Standard JavaScript Error: For general JavaScript errors (like TypeError,\n   *    ReferenceError, etc.), the method:\n   *    - Logs the error message with stack trace to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * 3. Unknown exceptions: For any other type of exception that doesn't match the\n   *    above categories, the method:\n   *    - Logs the entire exception object to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * This method is critical for maintaining SCORM compliance by ensuring that\n   * all errors are properly translated into the appropriate SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {ValidationError|Error|unknown} e - The exception that was thrown\n   * @param {string} returnValue - The default return value (typically an empty string)\n   * @return {string} - Either the original returnValue or SCORM_FALSE if an error occurred\n   *\n   * @example\n   * try {\n   *   const value = getCMIValue(\"cmi.core.score.raw\");\n   *   return value;\n   * } catch (e) {\n   *   return handleValueAccessException(e, \"\");\n   * }\n   */\n  handleValueAccessException(\n    CMIElement: string,\n    e: Error | ValidationError | unknown,\n    returnValue: string,\n  ): string {\n    if (e instanceof ValidationError) {\n      const validationError = e as ValidationError;\n      this._lastErrorCode = String(validationError.errorCode);\n\n      // Log validation errors at WARN level with context\n      const errorMessage = `Validation Error ${validationError.errorCode}: ${validationError.message} [Element: ${CMIElement}]`;\n      this._loggingService.warn(errorMessage);\n\n      returnValue = global_constants.SCORM_FALSE;\n    } else if (e instanceof Error) {\n      // For standard JS errors, include the stack trace and error type\n      const errorType = e.constructor.name; // Gets the error type (e.g., TypeError, ReferenceError)\n      const errorMessage = `${errorType}: ${e.message} [Element: ${CMIElement}]`;\n      const stackTrace = e.stack || \"\";\n\n      // Log the detailed error with stack trace\n      this._loggingService.error(`${errorMessage}\\n${stackTrace}`);\n\n      this.throwSCORMError(\n        CMIElement,\n        this._errorCodes.GENERAL as number,\n        `${errorType}: ${e.message}`,\n      );\n    } else {\n      // For unknown errors, provide as much context as possible\n      const errorMessage = `Unknown error occurred while accessing [Element: ${CMIElement}]`;\n\n      this._loggingService.error(errorMessage);\n\n      try {\n        // Try to stringify the error object for more details\n        const errorDetails = JSON.stringify(e);\n        this._loggingService.error(`Error details: ${errorDetails}`);\n      } catch (jsonError) {\n        // If stringify fails, log that we couldn't get more details\n        this._loggingService.error(\"Could not stringify error object for details\");\n      }\n\n      this.throwSCORMError(CMIElement, this._errorCodes.GENERAL as number, \"Unknown error\");\n    }\n    return returnValue;\n  }\n\n  /**\n   * Get the error codes object\n   *\n   * @return {ErrorCode} - The error codes object\n   */\n  get errorCodes(): ErrorCode {\n    return this._errorCodes;\n  }\n}\n\n// Export a factory function to create the service\nexport function createErrorHandlingService(\n  errorCodes: ErrorCode,\n  apiLog: (\n    functionName: string,\n    message: string,\n    logLevel?: LogLevelEnum,\n    CMIElement?: string,\n  ) => void,\n  getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n  loggingService?: ILoggingService,\n): ErrorHandlingService {\n  return new ErrorHandlingService(errorCodes, apiLog, getLmsErrorMessageDetails, loggingService);\n}\n","import { CommitObject, InternalSettings, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ErrorCode } from \"../constants/error_codes\";\n\n/**\n * Interface for sync queue item\n */\ninterface SyncQueueItem {\n  id: string;\n  courseId: string;\n  timestamp: number;\n  data: CommitObject;\n  syncAttempts: number;\n}\n\n/**\n * Service for handling offline storage and synchronization of SCORM data\n */\nexport class OfflineStorageService {\n  private settings: InternalSettings;\n  private error_codes: ErrorCode;\n  private storeName: string = \"scorm_again_offline_data\";\n  private syncQueue: string = \"scorm_again_sync_queue\";\n  private isOnline: boolean = navigator.onLine;\n  private syncInProgress: boolean = false;\n\n  /**\n   * Constructor for OfflineStorageService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Function} apiLog - The logging function\n   */\n  constructor(\n    settings: InternalSettings,\n    error_codes: ErrorCode,\n    private apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n\n    // Initialize listeners for online/offline events\n    window.addEventListener(\"online\", this.handleOnlineStatusChange.bind(this));\n    window.addEventListener(\"offline\", this.handleOnlineStatusChange.bind(this));\n  }\n\n  /**\n   * Handle changes in online status\n   */\n  private handleOnlineStatusChange() {\n    const wasOnline = this.isOnline;\n    this.isOnline = navigator.onLine;\n\n    // If we've come back online, trigger sync process\n    if (!wasOnline && this.isOnline) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        \"Device is back online, attempting to sync...\",\n        LogLevelEnum.INFO,\n      );\n      this.syncOfflineData().then(\n        (success) => {\n          if (success) {\n            this.apiLog(\"OfflineStorageService\", \"Sync completed successfully\", LogLevelEnum.INFO);\n          } else {\n            this.apiLog(\"OfflineStorageService\", \"Sync failed\", LogLevelEnum.ERROR);\n          }\n        },\n        (error) => {\n          this.apiLog(\"OfflineStorageService\", `Error during sync: ${error}`, LogLevelEnum.ERROR);\n        },\n      );\n    } else if (wasOnline && !this.isOnline) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        \"Device is offline, data will be stored locally\",\n        LogLevelEnum.INFO,\n      );\n    }\n  }\n\n  /**\n   * Store commit data offline\n   * @param {string} courseId - Identifier for the course\n   * @param {CommitObject} commitData - The data to store offline\n   * @returns {Promise<ResultObject>} - Result of the storage operation\n   */\n  async storeOffline(courseId: string, commitData: CommitObject): Promise<ResultObject> {\n    try {\n      // Store the data in the sync queue with timestamp and unique ID\n      const queueItem: SyncQueueItem = {\n        id: `${courseId}_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`,\n        courseId,\n        timestamp: Date.now(),\n        data: commitData,\n        syncAttempts: 0,\n      };\n\n      // Get current queue\n      const currentQueue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n      currentQueue.push(queueItem);\n\n      // Save updated queue\n      await this.saveToStorage(this.syncQueue, currentQueue);\n\n      // Also update the current state in the main storage (latest known state)\n      await this.saveToStorage(`${this.storeName}_${courseId}`, commitData);\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Stored data offline for course ${courseId}`,\n        LogLevelEnum.INFO,\n      );\n\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error storing offline data: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL ?? 0,\n      };\n    }\n  }\n\n  /**\n   * Get the stored offline data for a course\n   * @param {string} courseId - Identifier for the course\n   * @returns {Promise<CommitObject|null>} - The stored data or null if not found\n   */\n  async getOfflineData(courseId: string): Promise<CommitObject | null> {\n    try {\n      const data = await this.getFromStorage<CommitObject>(`${this.storeName}_${courseId}`);\n      return data || null;\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error retrieving offline data: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return null;\n    }\n  }\n\n  /**\n   * Synchronize offline data with the LMS when connection is available\n   * @returns {Promise<boolean>} - Success status of synchronization\n   */\n  async syncOfflineData(): Promise<boolean> {\n    // Don't run multiple sync processes at once\n    if (this.syncInProgress || !this.isOnline) {\n      return false;\n    }\n\n    this.syncInProgress = true;\n\n    try {\n      // Get the queue of items to sync\n      const syncQueue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n\n      if (syncQueue.length === 0) {\n        this.syncInProgress = false;\n        return true;\n      }\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Found ${syncQueue.length} items to sync`,\n        LogLevelEnum.INFO,\n      );\n\n      // Keep track of successful and failed sync attempts\n      const remainingQueue: SyncQueueItem[] = [];\n\n      // Process each queue item\n      for (const item of syncQueue) {\n        // Skip items that have been attempted too many times\n        if (item.syncAttempts >= 5) {\n          this.apiLog(\n            \"OfflineStorageService\",\n            `Skipping item ${item.id} after 5 failed attempts`,\n            LogLevelEnum.WARN,\n          );\n          continue;\n        }\n\n        try {\n          // Attempt to sync this item\n          const syncResult = await this.sendDataToLMS(item.data);\n\n          if (syncResult.result === global_constants.SCORM_TRUE) {\n            // Sync was successful, no need to keep this item\n            this.apiLog(\n              \"OfflineStorageService\",\n              `Successfully synced item ${item.id}`,\n              LogLevelEnum.INFO,\n            );\n          } else {\n            // Sync failed, increment attempts and keep in queue\n            item.syncAttempts++;\n            remainingQueue.push(item);\n            this.apiLog(\n              \"OfflineStorageService\",\n              `Failed to sync item ${item.id}, attempt #${item.syncAttempts}`,\n              LogLevelEnum.WARN,\n            );\n          }\n        } catch (error) {\n          // On error, increment attempts and keep in queue\n          item.syncAttempts++;\n          remainingQueue.push(item);\n          this.apiLog(\n            \"OfflineStorageService\",\n            `Error syncing item ${item.id}: ${error}`,\n            LogLevelEnum.ERROR,\n          );\n        }\n      }\n\n      // Update the queue with remaining items\n      await this.saveToStorage(this.syncQueue, remainingQueue);\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Sync completed. ${syncQueue.length - remainingQueue.length} items synced, ${remainingQueue.length} items remaining`,\n        LogLevelEnum.INFO,\n      );\n\n      this.syncInProgress = false;\n      return true;\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error during sync process: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      this.syncInProgress = false;\n      return false;\n    }\n  }\n\n  /**\n   * Send data to the LMS when online\n   * @param {CommitObject} data - The data to send to the LMS\n   * @returns {Promise<ResultObject>} - Result of the sync operation\n   */\n  private async sendDataToLMS(data: CommitObject): Promise<ResultObject> {\n    if (!this.settings.lmsCommitUrl) {\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL || 101,\n      };\n    }\n\n    try {\n      // Apply request handler if configured\n      const processedData = this.settings.requestHandler(data);\n\n      // Send the data to the LMS\n      const init = {\n        method: \"POST\",\n        mode: this.settings.fetchMode,\n        body: JSON.stringify(processedData),\n        headers: {\n          ...this.settings.xhrHeaders,\n          \"Content-Type\": this.settings.commitRequestDataType,\n        },\n      } as RequestInit;\n\n      if (this.settings.xhrWithCredentials) {\n        init.credentials = \"include\";\n      }\n\n      const response = await fetch(this.settings.lmsCommitUrl as string, init);\n\n      // Process the response using the configured handler\n      const result =\n        typeof this.settings.responseHandler === \"function\"\n          ? await this.settings.responseHandler(response)\n          : await response.json();\n\n      if (\n        response.status >= 200 &&\n        response.status <= 299 &&\n        (result.result === true || result.result === global_constants.SCORM_TRUE)\n      ) {\n        if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n          result.errorCode = 0;\n        }\n        return result;\n      } else {\n        if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n          result.errorCode = this.error_codes.GENERAL;\n        }\n        return result;\n      }\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error sending data to LMS: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL || 101,\n      };\n    }\n  }\n\n  /**\n   * Check if the device is currently online\n   * @returns {boolean} - Online status\n   */\n  isDeviceOnline(): boolean {\n    return this.isOnline;\n  }\n\n  // noinspection JSValidateJSDoc\n  /**\n   * Get item from localStorage\n   * @param {string} key - The key to retrieve\n   * @returns {Promise<T|null>} - The retrieved data\n   */\n  private async getFromStorage<T>(key: string): Promise<T | null> {\n    const storedData = localStorage.getItem(key);\n    if (storedData) {\n      try {\n        return JSON.parse(storedData) as T;\n      } catch (e) {\n        return null;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Save item to localStorage\n   * @param {string} key - The key to store under\n   * @param {any} data - The data to store\n   * @returns {Promise<void>}\n   */\n  private async saveToStorage(key: string, data: any): Promise<void> {\n    localStorage.setItem(key, JSON.stringify(data));\n  }\n\n  /**\n   * Check if there is pending offline data for a course\n   * @param {string} courseId - Identifier for the course\n   * @returns {Promise<boolean>} - Whether there is pending data\n   */\n  async hasPendingOfflineData(courseId: string): Promise<boolean> {\n    const queue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n    return queue.some((item) => item.courseId === courseId);\n  }\n\n  /**\n   * Update the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: InternalSettings): void {\n    this.settings = settings;\n  }\n}\n","/**\n * Base class for API cmi objects\n */\nexport abstract class BaseCMI {\n  jsonString = false;\n  protected readonly _cmi_element: string;\n  protected _initialized = false;\n\n  /**\n   * Constructor for BaseCMI\n   * @param {string} cmi_element\n   */\n  constructor(cmi_element: string) {\n    this._cmi_element = cmi_element;\n  }\n\n  /**\n   * Getter for _initialized\n   * @return {boolean}\n   */\n  get initialized(): boolean {\n    return this._initialized;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize(): void {\n    this._initialized = true;\n  }\n\n  abstract reset(): void;\n}\n\n/**\n * Base class for cmi root objects\n */\nexport abstract class BaseRootCMI extends BaseCMI {\n  protected _start_time: number | undefined;\n\n  /**\n   * Start time of the course\n   * @type {number | undefined}\n   * @protected\n   */\n  get start_time(): number | undefined {\n    return this._start_time;\n  }\n\n  /**\n   * Setter for start_time. Can only be called once.\n   */\n  setStartTime(): void {\n    if (this._start_time === undefined) {\n      this._start_time = new Date().getTime();\n    } else {\n      throw new Error(\"Start time has already been set.\");\n    }\n  }\n\n  abstract getCurrentTotalTime(): string;\n}\n","export type ErrorCode = {\n  [key: string]: number;\n};\n\nexport const global_errors: ErrorCode = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nexport const scorm12_errors: ErrorCode = {\n  ...global_errors,\n  RETRIEVE_BEFORE_INIT: 301,\n  STORE_BEFORE_INIT: 301,\n  COMMIT_BEFORE_INIT: 301,\n  ARGUMENT_ERROR: 201,\n  CHILDREN_ERROR: 202,\n  COUNT_ERROR: 203,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 401,\n  VALUE_NOT_INITIALIZED: 301,\n  INVALID_SET_VALUE: 402,\n  READ_ONLY_ELEMENT: 403,\n  WRITE_ONLY_ELEMENT: 404,\n  TYPE_MISMATCH: 405,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n\nexport const scorm2004_errors: ErrorCode = {\n  ...global_errors,\n  INITIALIZATION_FAILED: 102,\n  INITIALIZED: 103,\n  TERMINATED: 104,\n  TERMINATION_FAILURE: 111,\n  TERMINATION_BEFORE_INIT: 112,\n  MULTIPLE_TERMINATION: 113,\n  MULTIPLE_TERMINATIONS: 113,\n  RETRIEVE_BEFORE_INIT: 122,\n  RETRIEVE_AFTER_TERM: 123,\n  STORE_BEFORE_INIT: 132,\n  STORE_AFTER_TERM: 133,\n  COMMIT_BEFORE_INIT: 142,\n  COMMIT_AFTER_TERM: 143,\n  ARGUMENT_ERROR: 201,\n  GENERAL_GET_FAILURE: 301,\n  GENERAL_SET_FAILURE: 351,\n  GENERAL_COMMIT_FAILURE: 391,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 402,\n  VALUE_NOT_INITIALIZED: 403,\n  READ_ONLY_ELEMENT: 404,\n  WRITE_ONLY_ELEMENT: 405,\n  TYPE_MISMATCH: 406,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n","import { BaseCMI } from \"./base_cmi\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Base class for cmi *.n objects\n */\nexport class CMIArray extends BaseCMI {\n  private readonly _errorCode: number;\n  private readonly _errorClass: typeof BaseScormValidationError;\n  private readonly __children: string;\n  public childArray: any[];\n\n  /**\n   * Constructor cmi *.n arrays\n   * @param {object} params\n   */\n  constructor(params: {\n    CMIElement: string;\n    children: string;\n    errorCode?: number;\n    errorClass?: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n    this.__children = params.children;\n    this._errorCode = params.errorCode || (scorm12_errors.GENERAL as number);\n    this._errorClass = params.errorClass || BaseScormValidationError;\n    this.childArray = [];\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(wipe: boolean = false): void {\n    this._initialized = false;\n    if (wipe) {\n      this.childArray = [];\n    } else {\n      // Reset all children\n      for (let i = 0; i < this.childArray.length; i++) {\n        this.childArray[i].reset();\n      }\n    }\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this._errorClass(this._cmi_element + \"._children\", this._errorCode);\n  }\n\n  /**\n   * Getter for _count\n   * @return {number}\n   */\n  get _count(): number {\n    return this.childArray.length;\n  }\n\n  /**\n   * Setter for _count. Just throws an error.\n   * @param {number} _count\n   */\n  set _count(_count: number) {\n    throw new this._errorClass(this._cmi_element + \"._count\", this._errorCode);\n  }\n\n  /**\n   * toJSON for *.n arrays\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result: { [key: string]: any } = {};\n    for (let i = 0; i < this.childArray.length; i++) {\n      result[i + \"\"] = this.childArray[i];\n    }\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { ErrorCode } from \"./constants/error_codes\";\nimport { global_constants } from \"./constants/api_constants\";\nimport * as Utilities from \"./utilities\";\nimport { formatMessage, StringKeyMap, stringMatches } from \"./utilities\";\nimport { BaseCMI, BaseRootCMI } from \"./cmi/common/base_cmi\";\nimport {\n  CommitObject,\n  InternalSettings,\n  LogLevel,\n  ResultObject,\n  Settings,\n} from \"./types/api_types\";\nimport { defaultLogHandler, DefaultSettings } from \"./constants/default_settings\";\nimport { IBaseAPI } from \"./interfaces/IBaseAPI\";\nimport { ScheduledCommit } from \"./types/scheduled_commit\";\nimport { LogLevelEnum } from \"./constants/enums\";\nimport { HttpService } from \"./services/HttpService\";\nimport { EventService } from \"./services/EventService\";\nimport { SerializationService } from \"./services/SerializationService\";\nimport { createErrorHandlingService } from \"./services/ErrorHandlingService\";\nimport { getLoggingService } from \"./services/LoggingService\";\nimport { OfflineStorageService } from \"./services/OfflineStorageService\";\nimport {\n  ICMIDataService,\n  IErrorHandlingService,\n  IEventService,\n  IHttpService,\n  ILoggingService,\n  IOfflineStorageService,\n  ISerializationService,\n} from \"./interfaces/services\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { ValidationError } from \"./exceptions\";\n\n/**\n * Base API class for AICC, SCORM 1.2, and SCORM 2004. Should be considered\n * abstract, and never initialized on its own.\n */\nexport default abstract class BaseAPI implements IBaseAPI {\n  private _timeout?: ScheduledCommit | undefined;\n  private readonly _error_codes: ErrorCode;\n  private _settings: InternalSettings = DefaultSettings;\n  private readonly _httpService: IHttpService;\n  private _eventService: IEventService;\n  private _serializationService: ISerializationService;\n  private readonly _errorHandlingService: IErrorHandlingService;\n  private readonly _loggingService: ILoggingService;\n  private readonly _offlineStorageService?: IOfflineStorageService;\n  private _courseId: string = \"\";\n\n  /**\n   * Constructor for Base API class. Sets some shared API fields, as well as\n   * sets up options for the API.\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Settings} settings - Optional settings for the API\n   * @param {IHttpService} httpService - Optional HTTP service instance\n   * @param {IEventService} eventService - Optional Event service instance\n   * @param {ISerializationService} serializationService - Optional Serialization service instance\n   * @param {ICMIDataService} cmiDataService - Optional CMI Data service instance\n   * @param {IErrorHandlingService} errorHandlingService - Optional Error Handling service instance\n   * @param {ILoggingService} loggingService - Optional Logging service instance\n   * @param {IOfflineStorageService} offlineStorageService - Optional Offline Storage service instance\n   */\n  protected constructor(\n    error_codes: ErrorCode,\n    settings?: Settings,\n    httpService?: IHttpService,\n    eventService?: IEventService,\n    serializationService?: ISerializationService,\n    cmiDataService?: ICMIDataService,\n    errorHandlingService?: IErrorHandlingService,\n    loggingService?: ILoggingService,\n    offlineStorageService?: IOfflineStorageService,\n  ) {\n    if (new.target === BaseAPI) {\n      throw new TypeError(\"Cannot construct BaseAPI instances directly\");\n    }\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n\n    this._error_codes = error_codes;\n\n    if (settings) {\n      this.settings = {\n        ...DefaultSettings,\n        ...settings,\n      } as InternalSettings;\n    }\n\n    // Initialize and configure LoggingService\n    this._loggingService = loggingService || getLoggingService();\n    this._loggingService.setLogLevel(this.settings.logLevel);\n\n    // If settings include a custom onLogMessage function, use it as the log handler\n    if (this.settings.onLogMessage) {\n      this._loggingService.setLogHandler(this.settings.onLogMessage);\n    } else {\n      this._loggingService.setLogHandler(defaultLogHandler);\n    }\n\n    // Initialize HTTP service\n    this._httpService = httpService || new HttpService(this.settings, this._error_codes);\n\n    // Initialize Event service\n    this._eventService =\n      eventService ||\n      new EventService((functionName, message, level, element) =>\n        this.apiLog(functionName, message, level, element),\n      );\n\n    // Initialize Serialization service\n    this._serializationService = serializationService || new SerializationService();\n\n    // Initialize Error Handling service\n    this._errorHandlingService =\n      errorHandlingService ||\n      createErrorHandlingService(\n        this._error_codes,\n        (functionName, message, level, element) =>\n          this.apiLog(functionName, message, level || LogLevelEnum.ERROR, element),\n        (errorNumber, detail) => this.getLmsErrorMessageDetails(errorNumber, detail),\n      );\n\n    // Initialize Offline Storage service if enabled\n    if (this.settings.enableOfflineSupport) {\n      this._offlineStorageService =\n        offlineStorageService ||\n        new OfflineStorageService(\n          this.settings,\n          this._error_codes,\n          (functionName, message, level, element) =>\n            this.apiLog(functionName, message, level, element),\n        );\n\n      if (this.settings.courseId) {\n        this._courseId = this.settings.courseId;\n      }\n\n      // Check for offline data to restore on initialization\n      if (this._offlineStorageService && this._courseId) {\n        this._offlineStorageService\n          .getOfflineData(this._courseId)\n          .then((offlineData) => {\n            if (offlineData) {\n              this.apiLog(\"constructor\", \"Found offline data to restore\", LogLevelEnum.INFO);\n              // Restore data from offline storage\n              this.loadFromJSON(offlineData.runtimeData);\n            }\n          })\n          .catch((error) => {\n            this.apiLog(\n              \"constructor\",\n              `Error retrieving offline data: ${error}`,\n              LogLevelEnum.ERROR,\n            );\n          });\n      }\n    }\n  }\n\n  public abstract cmi: BaseCMI;\n  public startingData?: StringKeyMap;\n\n  public currentState: number;\n\n  /**\n   * Get the last error code\n   * @return {string}\n   */\n  get lastErrorCode(): string {\n    return this._errorHandlingService?.lastErrorCode ?? \"0\";\n  }\n\n  /**\n   * Set the last error code\n   * @param {string} errorCode\n   */\n  set lastErrorCode(errorCode: string) {\n    if (this._errorHandlingService) {\n      this._errorHandlingService.lastErrorCode = errorCode;\n    }\n  }\n\n  /**\n   * Protected getter for eventService\n   * @return {IEventService}\n   */\n  protected get eventService(): IEventService {\n    return this._eventService;\n  }\n\n  /**\n   * Protected getter for loggingService\n   * @return {ILoggingService}\n   */\n  protected get loggingService(): ILoggingService {\n    return this._loggingService;\n  }\n\n  /**\n   * Reset the API to its initial state.\n   * This method clears all current data and resets the API to an uninitialized state.\n   * It can optionally accept new settings to configure the API after reset.\n   *\n   * @param {Settings} settings - Optional new settings to apply after reset\n   */\n  abstract reset(settings?: Settings): void;\n\n  /**\n   * Common reset method for all APIs. New settings are merged with the existing settings.\n   * @param {Settings} settings\n   * @protected\n   */\n  commonReset(settings?: Settings): void {\n    this.apiLog(\"reset\", \"Called\", LogLevelEnum.INFO);\n\n    this.settings = { ...this.settings, ...settings };\n\n    this.clearScheduledCommit();\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n    this.lastErrorCode = \"0\";\n    this._eventService.reset();\n    this.startingData = {};\n\n    // Update offline storage service with new settings if it exists\n    if (this._offlineStorageService) {\n      this._offlineStorageService.updateSettings(this.settings);\n\n      if (settings?.courseId) {\n        this._courseId = settings.courseId;\n      }\n    }\n  }\n\n  /**\n   * Initialize the API\n   * @param {string} callbackName\n   * @param {string} initializeMessage\n   * @param {string} terminationMessage\n   * @return {string}\n   */\n  initialize(\n    callbackName: string,\n    initializeMessage?: string,\n    terminationMessage?: string,\n  ): string {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.isInitialized()) {\n      this.throwSCORMError(\"api\", this._error_codes.INITIALIZED, initializeMessage);\n    } else if (this.isTerminated()) {\n      this.throwSCORMError(\"api\", this._error_codes.TERMINATED, terminationMessage);\n    } else {\n      if (this.settings.selfReportSessionTime) {\n        (this.cmi as BaseRootCMI).setStartTime();\n      }\n\n      this.currentState = global_constants.STATE_INITIALIZED;\n      this.lastErrorCode = \"0\";\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n\n      // If enabled, attempt to sync offline data on initialization\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._courseId &&\n        this.settings.syncOnInitialize &&\n        this._offlineStorageService.isDeviceOnline()\n      ) {\n        this._offlineStorageService.hasPendingOfflineData(this._courseId).then((hasPendingData) => {\n          if (hasPendingData) {\n            this.apiLog(\n              callbackName,\n              \"Syncing pending offline data on initialization\",\n              LogLevelEnum.INFO,\n            );\n            this._offlineStorageService?.syncOfflineData().then((syncSuccess) => {\n              if (syncSuccess) {\n                this.apiLog(callbackName, \"Successfully synced offline data\", LogLevelEnum.INFO);\n                this.processListeners(\"OfflineDataSynced\");\n              }\n            });\n          }\n        });\n      }\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Initialize the LMS API\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsInitialize(): string;\n\n  /**\n   * Finish the current LMS API session\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsFinish(): string;\n\n  /**\n   * Get the value of a CMI element from the LMS\n   * @param {string} CMIElement - The CMI element to get the value of\n   * @return {string} The value of the CMI element\n   */\n  abstract lmsGetValue(CMIElement: string): string;\n\n  /**\n   * Set the value of a CMI element in the LMS\n   * @param {string} CMIElement - The CMI element to set the value of\n   * @param {any} value - The value to set\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsSetValue(CMIElement: string, value: any): string;\n\n  /**\n   * Commit the current data to the LMS\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsCommit(): string;\n\n  /**\n   * Get the last error code from the LMS\n   * @return {string} The last error code\n   */\n  abstract lmsGetLastError(): string;\n\n  /**\n   * Get the error string for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get the string for\n   * @return {string} The error string\n   */\n  abstract lmsGetErrorString(CMIErrorCode: string | number): string;\n\n  /**\n   * Get diagnostic information for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get diagnostic information for\n   * @return {string} The diagnostic information\n   */\n  abstract lmsGetDiagnostic(CMIErrorCode: string | number): string;\n\n  /**\n   * Abstract method for validating that a response is correct.\n   * This method is used to validate the format and content of a response\n   * before it is set in the CMI data model.\n   *\n   * @param {string} _CMIElement - The CMI element path to validate\n   * @param {any} _value - The value to validate\n   * @throws {Error} If the response format is invalid\n   */\n  abstract validateCorrectResponse(_CMIElement: string, _value: any): void;\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   * APIs that inherit BaseAPI should override this method.\n   *\n   * @param {string} _CMIElement - unused\n   * @param {*} _value - unused\n   * @param {boolean} _foundFirstIndex - unused\n   * @return {BaseCMI|null}\n   * @abstract\n   */\n  abstract getChildElement(\n    _CMIElement: string,\n    _value: any,\n    _foundFirstIndex: boolean,\n  ): BaseCMI | null;\n\n  /**\n   * Attempts to store the data to the LMS, logs data if no LMS configured\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _calculateTotalTime\n   * @return {ResultObject}\n   * @abstract\n   */\n  abstract storeData(_calculateTotalTime: boolean): Promise<ResultObject>;\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   *\n   * @param {boolean} _terminateCommit - Whether this commit is part of the termination process\n   * @param {boolean} [_includeTotalTime] - Whether to include total time in the commit data\n   * @return {StringKeyMap|Array}\n   * @abstract\n   */\n  abstract renderCommitCMI(\n    _terminateCommit: boolean,\n    _includeTotalTime?: boolean,\n  ): StringKeyMap | Array<string>;\n\n  /**\n   * Render the commit object to the shortened format for LMS commit.\n   * This method transforms the CMI data into a format suitable for sending to the LMS.\n   * It is called during the commit process to prepare the data for transmission.\n   *\n   * @param {boolean} _terminateCommit - Whether this commit is part of the termination process\n   * @param {boolean} [_includeTotalTime] - Whether to include total time in the commit data\n   * @return {CommitObject} A formatted object containing the data to be sent to the LMS\n   * @example\n   * // Example of a commit object structure\n   * {\n   *   method: \"POST\",\n   *   params: {\n   *     cmi: { ... },\n   *     finishState: \"COMPLETED\"\n   *   }\n   * }\n   */\n  abstract renderCommitObject(_terminateCommit: boolean, _includeTotalTime?: boolean): CommitObject;\n\n  /**\n   * Logging for all SCORM actions\n   *\n   * @param {string} functionName\n   * @param {string} logMessage\n   * @param {number} messageLevel\n   * @param {string} CMIElement\n   */\n  apiLog(functionName: string, logMessage: string, messageLevel: LogLevel, CMIElement?: string) {\n    logMessage = formatMessage(functionName, logMessage, CMIElement);\n\n    // Delegate to LoggingService which handles log level comparison properly\n    this._loggingService.log(messageLevel, logMessage);\n  }\n\n  /**\n   * Getter for _settings\n   * @return {InternalSettings}\n   */\n  get settings(): InternalSettings {\n    return this._settings;\n  }\n\n  /**\n   * Setter for _settings\n   * @param {Settings} settings\n   */\n  set settings(settings: Settings) {\n    const previousSettings = this._settings;\n    // Merge the incoming settings with the existing settings\n    this._settings = { ...this._settings, ...settings } as InternalSettings;\n\n    // Update HTTP service settings\n    this._httpService?.updateSettings(this._settings);\n\n    // The following properties are duplicated as class properties for easier access\n    // and need to be manually updated to stay in sync with the settings object\n\n    // Update log level if it changed\n    if (settings.logLevel !== undefined && settings.logLevel !== previousSettings.logLevel) {\n      this._loggingService?.setLogLevel(settings.logLevel);\n    }\n\n    // Update log handler if onLogMessage changed\n    if (\n      settings.onLogMessage !== undefined &&\n      settings.onLogMessage !== previousSettings.onLogMessage\n    ) {\n      this._loggingService?.setLogHandler(settings.onLogMessage);\n    }\n  }\n\n  /**\n   * Terminates the current run of the API\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async terminate(callbackName: string, checkTerminated: boolean): Promise<string> {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.TERMINATION_BEFORE_INIT ?? 0,\n        this._error_codes.MULTIPLE_TERMINATION ?? 0,\n      )\n    ) {\n      this.currentState = global_constants.STATE_TERMINATED;\n      // If enabled, attempt to sync offline data before termination\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._courseId &&\n        this.settings.syncOnTerminate &&\n        this._offlineStorageService.isDeviceOnline()\n      ) {\n        const hasPendingData = await this._offlineStorageService.hasPendingOfflineData(\n          this._courseId,\n        );\n        if (hasPendingData) {\n          this.apiLog(\n            callbackName,\n            \"Syncing pending offline data before termination\",\n            LogLevelEnum.INFO,\n          );\n          await this._offlineStorageService.syncOfflineData();\n        }\n      }\n\n      const result: ResultObject = await this.storeData(true);\n      if ((result.errorCode ?? 0) > 0) {\n        // Log detailed error information before throwing SCORM error\n        if (result.errorMessage) {\n          this.apiLog(\n            \"terminate\",\n            `Terminate failed with error: ${result.errorMessage}`,\n            LogLevelEnum.ERROR,\n          );\n        }\n        if (result.errorDetails) {\n          this.apiLog(\n            \"terminate\",\n            `Error details: ${JSON.stringify(result.errorDetails)}`,\n            LogLevelEnum.DEBUG,\n          );\n        }\n        this.throwSCORMError(\"api\", result.errorCode ?? 0);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Get the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  getValue(callbackName: string, checkTerminated: boolean, CMIElement: string): string {\n    let returnValue: string = \"\";\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.RETRIEVE_BEFORE_INIT ?? 0,\n        this._error_codes.RETRIEVE_AFTER_TERM ?? 0,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.getCMIValue(CMIElement);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement);\n    }\n\n    this.apiLog(callbackName, \": returned: \" + returnValue, LogLevelEnum.INFO, CMIElement);\n\n    if (returnValue === undefined) {\n      return \"\";\n    }\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Sets the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {string} commitCallback\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  setValue(\n    callbackName: string,\n    commitCallback: string,\n    checkTerminated: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (value !== undefined) {\n      value = String(value);\n    }\n    let returnValue: string = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.STORE_BEFORE_INIT ?? 0,\n        this._error_codes.STORE_AFTER_TERM ?? 0,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.setCMIValue(CMIElement, value);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement, value);\n    }\n\n    if (returnValue === undefined) {\n      returnValue = global_constants.SCORM_FALSE;\n    }\n\n    // If we didn't have any errors while setting the data, go ahead and\n    // schedule a commit, if autocommit is turned on\n    if (String(this.lastErrorCode) === \"0\") {\n      if (this.settings.autocommit) {\n        this.scheduleCommit(this.settings.autocommitSeconds * 1000, commitCallback);\n      }\n    }\n\n    this.apiLog(\n      callbackName,\n      \": \" + value + \": result: \" + returnValue,\n      LogLevelEnum.INFO,\n      CMIElement,\n    );\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async commit(callbackName: string, checkTerminated: boolean = false): Promise<string> {\n    this.clearScheduledCommit();\n\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.COMMIT_BEFORE_INIT ?? 0,\n        this._error_codes.COMMIT_AFTER_TERM ?? 0,\n      )\n    ) {\n      const result = await this.storeData(false);\n      if ((result.errorCode ?? 0) > 0) {\n        // Log detailed error information before throwing SCORM error\n        if (result.errorMessage) {\n          this.apiLog(\n            \"commit\",\n            `Commit failed with error: ${result.errorMessage}`,\n            LogLevelEnum.ERROR,\n          );\n        }\n        if (result.errorDetails) {\n          this.apiLog(\n            \"commit\",\n            `Error details: ${JSON.stringify(result.errorDetails)}`,\n            LogLevelEnum.DEBUG,\n          );\n        }\n        this.throwSCORMError(\"api\", result.errorCode);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      this.apiLog(callbackName, \" Result: \" + returnValue, LogLevelEnum.DEBUG, \"HttpRequest\");\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      this.processListeners(callbackName);\n\n      // If online and there is offline data pending, attempt to sync it\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._offlineStorageService.isDeviceOnline() &&\n        this._courseId\n      ) {\n        this._offlineStorageService.hasPendingOfflineData(this._courseId).then((hasPendingData) => {\n          if (hasPendingData) {\n            this.apiLog(callbackName, \"Syncing pending offline data\", LogLevelEnum.INFO);\n            this._offlineStorageService?.syncOfflineData().then((syncSuccess) => {\n              if (syncSuccess) {\n                this.apiLog(callbackName, \"Successfully synced offline data\", LogLevelEnum.INFO);\n                this.processListeners(\"OfflineDataSynced\");\n              } else {\n                this.apiLog(callbackName, \"Failed to sync some offline data\", LogLevelEnum.WARN);\n              }\n            });\n          }\n        });\n      }\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Returns last error code\n   * @param {string} callbackName\n   * @return {string}\n   */\n  getLastError(callbackName: string): string {\n    const returnValue = String(this.lastErrorCode);\n\n    this.processListeners(callbackName);\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getErrorString(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getDiagnostic(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode, true);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Checks the LMS state and ensures it has been initialized.\n   *\n   * @param {boolean} checkTerminated\n   * @param {number} beforeInitError\n   * @param {number} afterTermError\n   * @return {boolean}\n   */\n  checkState(checkTerminated: boolean, beforeInitError: number, afterTermError: number): boolean {\n    if (this.isNotInitialized()) {\n      this.throwSCORMError(\"api\", beforeInitError);\n      return false;\n    } else if (checkTerminated && this.isTerminated()) {\n      this.throwSCORMError(\"api\", afterTermError);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {(string|number)} _errorNumber\n   * @param {boolean} _detail\n   * @return {string}\n   * @abstract\n   */\n  getLmsErrorMessageDetails(_errorNumber: string | number, _detail: boolean = false): string {\n    throw new Error(\"The getLmsErrorMessageDetails method has not been implemented\");\n  }\n\n  /**\n   * Gets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @return {string}\n   * @abstract\n   */\n  getCMIValue(_CMIElement: string): string {\n    throw new Error(\"The getCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Sets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @param {any} _value\n   * @return {string}\n   * @abstract\n   */\n  setCMIValue(_CMIElement: string, _value: any): string {\n    throw new Error(\"The setCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Shared API method to set a valid for a given element.\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  _commonSetCMIValue(\n    methodName: string,\n    scorm2004: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (!CMIElement || CMIElement === \"\") {\n      return global_constants.SCORM_FALSE;\n    }\n\n    this.lastErrorCode = \"0\";\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap | BaseCMI = this as StringKeyMap;\n    let returnValue = global_constants.SCORM_FALSE;\n    let foundFirstIndex = false;\n\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      const attribute = structure[idx];\n\n      if (idx === structure.length - 1) {\n        if (scorm2004 && attribute && attribute.substring(0, 8) === \"{target=\") {\n          if (this.isInitialized()) {\n            this.throwSCORMError(CMIElement, this._error_codes.READ_ONLY_ELEMENT);\n            break;\n          } else {\n            refObject = {\n              ...refObject,\n              attribute: value,\n            };\n          }\n        } else if (\n          typeof attribute === \"undefined\" ||\n          !this._checkObjectHasProperty(refObject as StringKeyMap, attribute)\n        ) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        } else {\n          if (\n            stringMatches(CMIElement, \"\\\\.correct_responses\\\\.\\\\d+$\") &&\n            this.isInitialized() &&\n            attribute !== \"pattern\"\n          ) {\n            this.validateCorrectResponse(CMIElement, value);\n            if (this.lastErrorCode !== \"0\") {\n              this.throwSCORMError(CMIElement, this._error_codes.TYPE_MISMATCH);\n              break;\n            }\n          }\n\n          if (!scorm2004 || this._errorHandlingService.lastErrorCode === \"0\") {\n            if (\n              typeof attribute === \"undefined\" ||\n              attribute === \"__proto__\" ||\n              attribute === \"constructor\"\n            ) {\n              this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n              break;\n            }\n            (refObject as StringKeyMap)[attribute] = value;\n            returnValue = global_constants.SCORM_TRUE;\n          }\n        }\n      } else {\n        if (\n          typeof attribute === \"undefined\" ||\n          !this._checkObjectHasProperty(refObject as StringKeyMap, attribute)\n        ) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n        refObject = (refObject as StringKeyMap)[attribute] as StringKeyMap;\n        if (!refObject) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n\n        if (refObject instanceof CMIArray) {\n          const index = parseInt(structure[idx + 1] || \"0\", 10);\n\n          // SCO is trying to set an item on an array\n          if (!isNaN(index)) {\n            const item = refObject.childArray[index];\n\n            if (item) {\n              refObject = item;\n              foundFirstIndex = true;\n            } else {\n              const newChild = this.getChildElement(CMIElement, value, foundFirstIndex);\n              foundFirstIndex = true;\n\n              if (!newChild) {\n                if (this.lastErrorCode === \"0\") {\n                  this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n                }\n                break;\n              } else {\n                if (refObject.initialized) newChild.initialize();\n                refObject.childArray[index] = newChild;\n                refObject = newChild;\n              }\n            }\n\n            // Have to update idx value to skip the array position\n            idx++;\n          }\n        }\n      }\n    }\n\n    if (returnValue === global_constants.SCORM_FALSE) {\n      this.apiLog(\n        methodName,\n        `There was an error setting the value for: ${CMIElement}, value of: ${value}`,\n        LogLevelEnum.WARN,\n      );\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @return {any}\n   */\n  _commonGetCMIValue(methodName: string, scorm2004: boolean, CMIElement: string): any {\n    if (!CMIElement || CMIElement === \"\") {\n      return \"\";\n    }\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap = this as StringKeyMap;\n    let attribute = null;\n\n    const uninitializedErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) has not been initialized.`;\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      attribute = structure[idx];\n\n      if (!scorm2004) {\n        if (idx === structure.length - 1) {\n          if (\n            typeof attribute === \"undefined\" ||\n            !this._checkObjectHasProperty(refObject, attribute)\n          ) {\n            this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n            return;\n          }\n        }\n      } else {\n        if (\n          String(attribute).substring(0, 8) === \"{target=\" &&\n          typeof refObject._isTargetValid == \"function\"\n        ) {\n          const target = String(attribute).substring(8, String(attribute).length - 9);\n          return refObject._isTargetValid(target);\n        } else if (\n          typeof attribute === \"undefined\" ||\n          !this._checkObjectHasProperty(refObject, attribute)\n        ) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          return;\n        }\n      }\n\n      if (attribute !== undefined && attribute !== null) {\n        refObject = refObject[attribute] as StringKeyMap;\n        if (refObject === undefined) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n      } else {\n        this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n        break;\n      }\n\n      if (refObject instanceof CMIArray) {\n        const index = parseInt(structure[idx + 1] || \"\", 10);\n\n        // SCO is trying to set an item on an array\n        if (!isNaN(index)) {\n          const item = refObject.childArray[index];\n\n          if (item) {\n            refObject = item;\n          } else {\n            this.throwSCORMError(\n              CMIElement,\n              this._error_codes.VALUE_NOT_INITIALIZED,\n              uninitializedErrorMessage,\n            );\n            break;\n          }\n\n          // Have to update idx value to skip the array position\n          idx++;\n        }\n      }\n    }\n\n    if (refObject === null || refObject === undefined) {\n      if (!scorm2004) {\n        if (attribute === \"_children\") {\n          this.throwSCORMError(CMIElement, this._error_codes.CHILDREN_ERROR, undefined);\n        } else if (attribute === \"_count\") {\n          this.throwSCORMError(CMIElement, this._error_codes.COUNT_ERROR, undefined);\n        }\n      }\n    } else {\n      return refObject;\n    }\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isInitialized(): boolean {\n    return this.currentState === global_constants.STATE_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_NOT_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isNotInitialized(): boolean {\n    return this.currentState === global_constants.STATE_NOT_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_TERMINATED\n   *\n   * @return {boolean}\n   */\n  isTerminated(): boolean {\n    return this.currentState === global_constants.STATE_TERMINATED;\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event.\n   * This method allows you to register a callback function that will be executed\n   * when the specified event occurs.\n   *\n   * @param {string} listenerName - The name of the event to listen for (e.g., \"Initialize\", \"Terminate\", \"GetValue\", \"SetValue\", \"Commit\")\n   * @param {function} callback - The function to execute when the event occurs. The callback will receive relevant event data.\n   * @example\n   * // Listen for Initialize events\n   * api.on(\"Initialize\", function() {\n   *   console.log(\"API has been initialized\");\n   * });\n   *\n   * // Listen for SetValue events\n   * api.on(\"SetValue\", function(element, value) {\n   *   console.log(\"Setting \" + element + \" to \" + value);\n   * });\n   */\n  on(listenerName: string, callback: Function) {\n    this._eventService.on(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener.\n   * This method removes a previously registered callback for an event.\n   * Both the event name and the callback reference must match what was used in the 'on' method.\n   *\n   * @param {string} listenerName - The name of the event to stop listening for\n   * @param {function} callback - The callback function to remove\n   * @example\n   * // Remove a specific listener\n   * const myCallback = function() { console.log(\"API initialized\"); };\n   * api.on(\"Initialize\", myCallback);\n   * // Later, when you want to remove it:\n   * api.off(\"Initialize\", myCallback);\n   */\n  off(listenerName: string, callback: Function) {\n    this._eventService.off(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event.\n   * This method removes all callbacks registered for the specified event.\n   *\n   * @param {string} listenerName - The name of the event to clear all listeners for\n   * @example\n   * // Remove all listeners for the Initialize event\n   * api.clear(\"Initialize\");\n   */\n  clear(listenerName: string) {\n    this._eventService.clear(listenerName);\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created for a specific event.\n   * This method is called internally when SCORM events occur to notify all registered listeners.\n   * It triggers all callback functions registered for the specified event.\n   *\n   * @param {string} functionName - The name of the function/event that occurred\n   * @param {string} CMIElement - Optional CMI element involved in the event\n   * @param {any} value - Optional value associated with the event\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this._eventService.processListeners(functionName, CMIElement, value);\n  }\n\n  /**\n   * Throws a SCORM error with the specified error number and optional message.\n   * This method sets the last error code and can be used to indicate that an operation failed.\n   * The error number should correspond to one of the standard SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The SCORM error code to set\n   * @param {string} message - Optional custom error message to provide additional context\n   * @example\n   * // Throw a \"not initialized\" error\n   * this.throwSCORMError(301, \"The API must be initialized before calling GetValue\");\n   */\n  throwSCORMError(\n    CMIElement: string | undefined,\n    errorNumber: number | undefined,\n    message?: string,\n  ) {\n    this._errorHandlingService.throwSCORMError(CMIElement, errorNumber ?? 0, message);\n  }\n\n  /**\n   * Clears the last SCORM error code when an operation succeeds.\n   * This method is typically called after successful API operations to reset the error state.\n   * It only clears the error if the success parameter is \"true\".\n   *\n   * @param {string} success - A string indicating whether the operation succeeded (\"true\" or \"false\")\n   * @example\n   * // Clear error after successful operation\n   * this.clearSCORMError(\"true\");\n   */\n  clearSCORMError(success: string) {\n    this._errorHandlingService.clearSCORMError(success);\n  }\n\n  /**\n   * Load the CMI from a flattened JSON object.\n   * This method populates the CMI data model from a flattened JSON structure\n   * where keys represent CMI element paths (e.g., \"cmi.core.student_id\").\n   *\n   * @param {StringKeyMap} json - The flattened JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a flattened JSON structure\n   * api.loadFromFlattenedJSON({\n   *   \"cmi.core.student_id\": \"12345\",\n   *   \"cmi.core.student_name\": \"John Doe\",\n   *   \"cmi.core.lesson_status\": \"incomplete\"\n   * });\n   */\n  loadFromFlattenedJSON(json: StringKeyMap, CMIElement?: string) {\n    if (!CMIElement) {\n      // by default, we start from a blank string because we're expecting each element to start with `cmi`\n      CMIElement = \"\";\n    }\n\n    this._serializationService.loadFromFlattenedJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Returns a flattened JSON object representing the current CMI data.\n   */\n  getFlattenedCMI(): StringKeyMap {\n    return Utilities.flatten(this.renderCMIToJSONObject());\n  }\n\n  /**\n   * Loads CMI data from a hierarchical JSON object.\n   * This method populates the CMI data model from a nested JSON structure\n   * that mirrors the CMI object hierarchy.\n   *\n   * @param {StringKeyMap} json - The hierarchical JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a hierarchical JSON structure\n   * api.loadFromJSON({\n   *   core: {\n   *     student_id: \"12345\",\n   *     student_name: \"John Doe\",\n   *     lesson_status: \"incomplete\"\n   *   },\n   *   objectives: [\n   *     { id: \"obj1\", score: { raw: 85 } }\n   *   ]\n   * });\n   */\n  loadFromJSON(json: StringKeyMap, CMIElement: string = \"\") {\n    if (\n      (!CMIElement || CMIElement === \"\") &&\n      !Object.hasOwnProperty.call(json, \"cmi\") &&\n      !Object.hasOwnProperty.call(json, \"adl\")\n    ) {\n      // providing a backward compatibility for the old v1 API\n      CMIElement = \"cmi\";\n    }\n    this._serializationService.loadFromJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Render the CMI object to a JSON string for sending to an LMS.\n   * This method serializes the current CMI data model to a JSON string.\n   * The output format is controlled by the sendFullCommit setting.\n   *\n   * @return {string} A JSON string representation of the CMI data\n   * @example\n   * // Get the current CMI data as a JSON string\n   * const jsonString = api.renderCMIToJSONString();\n   * console.log(jsonString); // '{\"core\":{\"student_id\":\"12345\",...}}'\n   */\n  renderCMIToJSONString(): string {\n    return this._serializationService.renderCMIToJSONString(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Returns a JavaScript object representing the current CMI data.\n   * This method creates a plain JavaScript object that mirrors the\n   * structure of the CMI data model, suitable for further processing.\n   *\n   * @return {StringKeyMap} A JavaScript object representing the CMI data\n   * @example\n   * // Get the current CMI data as a JavaScript object\n   * const cmiObject = api.renderCMIToJSONObject();\n   * console.log(cmiObject.core.student_id); // \"12345\"\n   */\n  renderCMIToJSONObject(): StringKeyMap {\n    return this._serializationService.renderCMIToJSONObject(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Process an HTTP request\n   *\n   * @param {string} url - The URL to send the request to\n   * @param {CommitObject | StringKeyMap | Array<any>} params - The parameters to send\n   * @param {boolean} immediate - Whether to send the request immediately without waiting\n   * @returns {Promise<ResultObject>} - The result of the request\n   * @async\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n  ): Promise<ResultObject> {\n    // If offline support is enabled and device is offline, store data locally instead of sending\n    if (\n      this.settings.enableOfflineSupport &&\n      this._offlineStorageService &&\n      !this._offlineStorageService.isDeviceOnline() &&\n      this._courseId\n    ) {\n      this.apiLog(\n        \"processHttpRequest\",\n        \"Device is offline, storing data locally\",\n        LogLevelEnum.INFO,\n      );\n\n      if (params && typeof params === \"object\" && \"cmi\" in params) {\n        return await this._offlineStorageService.storeOffline(\n          this._courseId,\n          params as CommitObject,\n        );\n      } else {\n        this.apiLog(\n          \"processHttpRequest\",\n          \"Invalid commit data format for offline storage\",\n          LogLevelEnum.ERROR,\n        );\n        return {\n          result: global_constants.SCORM_FALSE,\n          errorCode: this._error_codes.GENERAL ?? 101, // Fallback to a default error code if GENERAL is undefined\n        };\n      }\n    }\n\n    // Otherwise, proceed with normal HTTP request\n    return await this._httpService.processHttpRequest(\n      url,\n      params,\n      immediate,\n      (functionName, message, level, element) => this.apiLog(functionName, message, level, element),\n      (functionName, CMIElement, value) => this.processListeners(functionName, CMIElement, value),\n    );\n  }\n\n  /**\n   * Schedules a commit operation to occur after a specified delay.\n   * This method is used to implement auto-commit functionality, where data\n   * is periodically sent to the LMS without requiring explicit commit calls.\n   *\n   * @param {number} when - The number of milliseconds to wait before committing\n   * @param {string} callback - The name of the commit event callback\n   * @example\n   * // Schedule a commit to happen in 60 seconds\n   * api.scheduleCommit(60000, \"commit\");\n   */\n  scheduleCommit(when: number, callback: string) {\n    if (!this._timeout) {\n      this._timeout = new ScheduledCommit(this, when, callback);\n      this.apiLog(\"scheduleCommit\", \"scheduled\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Clears and cancels any currently scheduled commits.\n   * This method is typically called when an explicit commit is performed\n   * or when the API is terminated, to prevent redundant commits.\n   *\n   * @example\n   * // Cancel any pending scheduled commits\n   * api.clearScheduledCommit();\n   */\n  clearScheduledCommit() {\n    if (this._timeout) {\n      this._timeout.cancel();\n      this._timeout = undefined;\n      this.apiLog(\"clearScheduledCommit\", \"cleared\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Checks if an object has a specific property, using multiple detection methods.\n   * This method performs a thorough check for property existence by:\n   * 1. Checking if it's an own property using Object.hasOwnProperty\n   * 2. Checking if it's defined in the prototype with a property descriptor\n   * 3. Checking if it's accessible via the 'in' operator (includes inherited properties)\n   *\n   * @param {StringKeyMap} StringKeyMap - The object to check for the property\n   * @param {string} attribute - The property name to look for\n   * @return {boolean} True if the property exists on the object or its prototype chain\n   * @private\n   *\n   * @example\n   * // Check for an own property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"name\"); // Returns true\n   *\n   * @example\n   * // Check for an inherited property\n   * class Parent { get type() { return \"parent\"; } }\n   * const child = Object.create(new Parent());\n   * this._checkObjectHasProperty(child, \"type\"); // Returns true\n   *\n   * @example\n   * // Check for a non-existent property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"age\"); // Returns false\n   */\n  private _checkObjectHasProperty(StringKeyMap: StringKeyMap, attribute: string): boolean {\n    return (\n      Object.hasOwnProperty.call(StringKeyMap, attribute) ||\n      Object.getOwnPropertyDescriptor(Object.getPrototypeOf(StringKeyMap), attribute) != null ||\n      attribute in StringKeyMap\n    );\n  }\n\n  /**\n   * Handles exceptions that occur when accessing CMI values.\n   * This method delegates to the ErrorHandlingService to process exceptions\n   * that occur during CMI data operations, ensuring consistent error handling\n   * throughout the API.\n   *\n   * @param {string} CMIElement\n   * @param {any} e - The exception that was thrown\n   * @param {string} returnValue - The default return value to use if an error occurs\n   * @return {string} Either the original returnValue or SCORM_FALSE if an error occurred\n   * @private\n   *\n   * @example\n   * // Handle a validation error when getting a CMI value\n   * try {\n   *   return this.getCMIValue(\"cmi.core.score.raw\");\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"\");\n   * }\n   *\n   * @example\n   * // Handle a general error when setting a CMI value\n   * try {\n   *   this.setCMIValue(\"cmi.core.lesson_status\", \"completed\");\n   *   return \"true\";\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"false\");\n   * }\n   */\n  private handleValueAccessException(CMIElement: string, e: any, returnValue: string): string {\n    if (e instanceof ValidationError) {\n      this.lastErrorCode = String(e.errorCode);\n      returnValue = global_constants.SCORM_FALSE;\n      this.throwSCORMError(CMIElement, e.errorCode, e.errorMessage);\n    } else {\n      if (e instanceof Error && e.message) {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, e.message);\n      } else {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, \"Unknown error\");\n      }\n    }\n    return returnValue;\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS.\n   * This method delegates to the SerializationService to create a properly\n   * formatted object containing the CMI data that needs to be sent to the LMS.\n   * The format and content of the commit object depend on whether this is a\n   * regular commit or a termination commit.\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @return {CommitObject|StringKeyMap|Array} The formatted commit object\n   * @protected\n   *\n   * @example\n   * // Create a regular commit object\n   * const regularCommit = this.getCommitObject(false);\n   * // Result might be: { cmi: { core: { lesson_status: \"incomplete\" } } }\n   *\n   * @example\n   * // Create a termination commit object (includes total_time)\n   * const terminationCommit = this.getCommitObject(true);\n   * // Result might be: { cmi: { core: { lesson_status: \"completed\", total_time: \"PT1H30M\" } } }\n   */\n  protected getCommitObject(terminateCommit: boolean): CommitObject | StringKeyMap | Array<any> {\n    return this._serializationService.getCommitObject(\n      terminateCommit,\n      this.settings.alwaysSendTotalTime,\n      this.settings.renderCommonCommitFields,\n      (terminateCommit: boolean, includeTotalTime?: boolean) =>\n        this.renderCommitObject(terminateCommit, includeTotalTime),\n      (terminateCommit: boolean, includeTotalTime?: boolean) =>\n        this.renderCommitCMI(terminateCommit, includeTotalTime),\n      this.settings.logLevel,\n    );\n  }\n}\n","import { ValidationError } from \"../exceptions\";\nimport { scorm2004_constants } from \"../constants/api_constants\";\n\nconst scorm2004_errors = scorm2004_constants.error_descriptions;\n\n/**\n * SCORM 2004 Validation Error\n */\nexport class Scorm2004ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm2004_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm2004_errors[String(errorCode)]?.basicMessage || \"Unknown error\",\n        scorm2004_errors[String(errorCode)]?.detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm2004_errors[\"101\"]?.basicMessage || \"General error\",\n        scorm2004_errors[\"101\"]?.detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm2004ValidationError.prototype);\n  }\n}\n","import { BaseScormValidationError } from \"../../exceptions\";\nimport { memoize } from \"../../utilities\";\n\n/**\n * Check if the value matches the proper format. If not, throw proper error code.\n *\n * @param {string} value\n * @param {string} regexPattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @param {boolean} [allowEmptyString]\n * @return {boolean}\n */\nexport const checkValidFormat = memoize(\n  (\n    CMIElement: string,\n    value: string,\n    regexPattern: string | RegExp, // We accept either a string or a RegExp object to allow the usage of flags.\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n    allowEmptyString?: boolean,\n  ): boolean => {\n    // noinspection SuspiciousTypeOfGuard\n    if (typeof value !== \"string\") {\n      return false;\n    }\n    const formatRegex = new RegExp(regexPattern);\n    const matches = value.match(formatRegex);\n    if (allowEmptyString && value === \"\") {\n      return true;\n    }\n    if (value === undefined || !matches || matches[0] === \"\") {\n      throw new errorClass(CMIElement, errorCode);\n    }\n    return true;\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, regexPattern, errorCode, _errorClass, allowEmptyString) => {\n    // Use typeof for non-string values to ensure consistent cache keys\n    // noinspection SuspiciousTypeOfGuard\n    const valueKey = typeof value === \"string\" ? value : `[${typeof value}]`;\n    return `${CMIElement}:${valueKey}:${regexPattern}:${errorCode}:${allowEmptyString || false}`;\n  },\n);\n\n/**\n * Check if the value matches the proper range. If not, throw proper error code.\n *\n * @param {any} value\n * @param {string} rangePattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @return {boolean}\n */\nexport const checkValidRange = memoize(\n  (\n    CMIElement: string,\n    value: any,\n    rangePattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean => {\n    const ranges = rangePattern.split(\"#\");\n    value = value * 1.0;\n    if (ranges[0] && value >= ranges[0]) {\n      if (ranges[1] && (ranges[1] === \"*\" || value <= ranges[1])) {\n        return true;\n      } else {\n        throw new errorClass(CMIElement, errorCode);\n      }\n    } else {\n      throw new errorClass(CMIElement, errorCode);\n    }\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, rangePattern, errorCode, _errorClass) =>\n    `${CMIElement}:${value}:${rangePattern}:${errorCode}`,\n);\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check2004ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm2004_errors.TYPE_MISMATCH as number,\n    Scorm2004ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @return {boolean}\n */\nexport function check2004ValidRange(\n  CMIElement: string,\n  value: string,\n  rangePattern: string,\n): boolean {\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm2004_errors.VALUE_OUT_OF_RANGE as number,\n    Scorm2004ValidationError,\n  );\n}\n","export const scorm12_regex = {\n  CMIString256: \"^[\\\\s\\\\S]{0,255}$\",\n  CMIString4096: \"^[\\\\s\\\\S]{0,4096}$\",\n  CMITime: \"^(?:[01]\\\\d|2[0123]):(?:[012345]\\\\d):(?:[012345]\\\\d)$\",\n  CMITimespan: \"^([0-9]{2,}):([0-9]{2}):([0-9]{2})(.[0-9]{1,2})?$\",\n\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{0,3})(\\\\.[0-9]*)?$\",\n\n  CMIIdentifier: \"^[\\\\u0021-\\\\u007E\\\\s]{0,255}$\",\n  // Allow storing larger responses for interactions\n  // Some content packages may exceed the 255 character limit\n  // defined in the SCORM 1.2 specification.  The previous\n  // expression truncated these values which resulted in\n  // a \"101: General Exception\" being thrown when long\n  // answers were supplied.  To support these packages we\n  // relax the limitation and accept any length string.\n  CMIFeedback: \"^.*$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMIStatus: \"^(passed|completed|failed|incomplete|browsed)$\",\n  CMIStatus2: \"^(passed|completed|failed|incomplete|browsed|not attempted)$\",\n  CMIExit: \"^(time-out|suspend|logout|)$\",\n  CMIType: \"^(true-false|choice|fill-in|matching|performance|sequencing|likert|numeric)$\",\n  CMIResult: \"^(correct|wrong|unanticipated|neutral|([0-9]{0,3})?(\\\\.[0-9]*)?)$\",\n  NAVEvent:\n    \"^(previous|continue|start|resumeAll|choice|jump|exit|exitAll|abandon|abandonAll|suspendAll|retry|retryAll|_none_)$\",\n  // Data ranges\n  score_range: \"0#100\",\n  audio_range: \"-1#100\",\n  speed_range: \"-100#100\",\n  weighting_range: \"-100#100\",\n  text_range: \"-1#1\",\n};\nexport const aicc_regex = {\n  ...scorm12_regex,\n  ...{\n    // AICC identifiers may contain letters, numbers, underscores,\n    // periods, and hyphens up to 255 characters in length.\n    // The previous expression only allowed \"\\w\" characters which\n    // excluded periods and hyphens.\n    CMIIdentifier: \"^[A-Za-z0-9._-]{1,255}$\",\n  },\n};\nexport const scorm2004_regex = {\n  CMIString200: \"^[\\\\u0000-\\\\uFFFF]{0,200}$\",\n  CMIString250: \"^[\\\\u0000-\\\\uFFFF]{0,250}$\",\n  CMIString1000: \"^[\\\\u0000-\\\\uFFFF]{0,1000}$\",\n  CMIString4000: \"^[\\\\u0000-\\\\uFFFF]{0,4000}$\",\n  CMIString64000: \"^[\\\\u0000-\\\\uFFFF]{0,64000}$\",\n  CMILang: \"^([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?$|^$\",\n\n  CMILangString250: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,250}$)?$\",\n\n  CMILangcr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?}))(.*?)$\",\n\n  CMILangString250cr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?})?(.{0,250})?)?$\",\n\n  CMILangString4000: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,4000}$)?$\",\n\n  CMITime:\n    \"^(19[7-9]{1}[0-9]{1}|20[0-2]{1}[0-9]{1}|203[0-8]{1})((-(0[1-9]{1}|1[0-2]{1}))((-(0[1-9]{1}|[1-2]{1}[0-9]{1}|3[0-1]{1}))(T([0-1]{1}[0-9]{1}|2[0-3]{1})((:[0-5]{1}[0-9]{1})((:[0-5]{1}[0-9]{1})((\\\\.[0-9]{1,6})((Z|([+|-]([0-1]{1}[0-9]{1}|2[0-3]{1})))(:[0-5]{1}[0-9]{1})?)?)?)?)?)?)?)?$\",\n  CMITimespan:\n    \"^P(?:([.,\\\\d]+)Y)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)W)?(?:([.,\\\\d]+)D)?(?:T?(?:([.,\\\\d]+)H)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)S)?)?$\",\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{1,5})(\\\\.[0-9]{1,18})?$\",\n  CMIIdentifier: \"^\\\\S{1,250}[a-zA-Z0-9]$\",\n  CMIShortIdentifier: \"^[\\\\w\\\\.\\\\-\\\\_]{1,250}$\",\n  CMILongIdentifier: \"^(?:(?!urn:)\\\\S{1,4000}|urn:[A-Za-z0-9-]{1,31}:\\\\S{1,4000}|.{1,4000})$\",\n  // need to re-examine this\n  CMIFeedback: \"^.*$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  CMIIndexStore: \".N(\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMICStatus: \"^(completed|incomplete|not attempted|unknown)$\",\n  CMISStatus: \"^(passed|failed|unknown)$\",\n  CMIExit: \"^(time-out|suspend|logout|normal)$\",\n  CMIType:\n    \"^(true-false|choice|fill-in|long-fill-in|matching|performance|sequencing|likert|numeric|other)$\",\n  CMIResult: \"^(correct|incorrect|unanticipated|neutral|-?([0-9]{1,4})(\\\\.[0-9]{1,18})?)$\",\n  NAVEvent:\n    \"^(start|resumeAll|previous|continue|exit|exitAll|abandon|abandonAll|suspendAll|retry|retryAll|_none_|(\\\\{target=(?<choice_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?choice|(\\\\{target=(?<jump_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?jump)$\",\n\n  NAVBoolean: \"^(unknown|true|false)$\",\n  NAVTarget: \"^{target=\\\\S{0,}[a-zA-Z0-9-_]+}$\",\n  // Data ranges\n  scaled_range: \"-1#1\",\n  audio_range: \"0#999.9999999\",\n  speed_range: \"0#999.9999999\",\n  text_range: \"-1#1\",\n  progress_range: \"0#1\",\n};\n","/**\n * Class for SCORM 2004's cmi.learner_preference object\n */\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\n\nexport class CMILearnerPreference extends BaseCMI {\n  private __children = scorm2004_constants.student_preference_children;\n  private _audio_level = \"1\";\n  private _language = \"\";\n  private _delivery_speed = \"1\";\n  private _audio_captioning = \"0\";\n\n  /**\n   * Constructor for cmi.learner_preference\n   */\n  constructor() {\n    super(\"cmi.learner_preference\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._children\",\n      scorm2004_errors.READ_ONLY_ELEMENT as number,\n    );\n  }\n\n  /**\n   * Getter for _audio_level\n   * @return {string}\n   */\n  get audio_level(): string {\n    return this._audio_level;\n  }\n\n  /**\n   * Setter for _audio_level\n   * @param {string} audio_level\n   */\n  set audio_level(audio_level: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".audio_level\",\n        audio_level,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".audio_level\",\n        audio_level,\n        scorm2004_regex.audio_range,\n      )\n    ) {\n      this._audio_level = audio_level;\n    }\n  }\n\n  /**\n   * Getter for _language\n   * @return {string}\n   */\n  get language(): string {\n    return this._language;\n  }\n\n  /**\n   * Setter for _language\n   * @param {string} language\n   */\n  set language(language: string) {\n    if (check2004ValidFormat(this._cmi_element + \".language\", language, scorm2004_regex.CMILang)) {\n      this._language = language;\n    }\n  }\n\n  /**\n   * Getter for _delivery_speed\n   * @return {string}\n   */\n  get delivery_speed(): string {\n    return this._delivery_speed;\n  }\n\n  /**\n   * Setter for _delivery_speed\n   * @param {string} delivery_speed\n   */\n  set delivery_speed(delivery_speed: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".delivery_speed\",\n        delivery_speed,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".delivery_speed\",\n        delivery_speed,\n        scorm2004_regex.speed_range,\n      )\n    ) {\n      this._delivery_speed = delivery_speed;\n    }\n  }\n\n  /**\n   * Getter for _audio_captioning\n   * @return {string}\n   */\n  get audio_captioning(): string {\n    return this._audio_captioning;\n  }\n\n  /**\n   * Setter for _audio_captioning\n   * @param {string} audio_captioning\n   */\n  set audio_captioning(audio_captioning: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".audio_captioning\",\n        audio_captioning,\n        scorm2004_regex.CMISInteger,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".audio_captioning\",\n        audio_captioning,\n        scorm2004_regex.text_range,\n      )\n    ) {\n      this._audio_captioning = audio_captioning;\n    }\n  }\n\n  /**\n   * toJSON for cmi.learner_preference\n   *\n   * @return {\n   *    {\n   *      audio_level: string,\n   *      language: string,\n   *      delivery_speed: string,\n   *      audio_captioning: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    audio_level: string;\n    language: string;\n    delivery_speed: string;\n    audio_captioning: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio_level: this.audio_level,\n      language: this.language,\n      delivery_speed: this.delivery_speed,\n      audio_captioning: this.audio_captioning,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { scorm2004_regex } from \"./regex\";\n\nexport const LearnerResponses: Responses = {\n  \"true-false\": {\n    format: \"^true$|^false$\",\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  choice: {\n    format: scorm2004_regex.CMILongIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    unique: true,\n  },\n  \"fill-in\": {\n    format: scorm2004_regex.CMILangString250,\n    max: 10,\n    delimiter: \"[,]\",\n    unique: false,\n  },\n  \"long-fill-in\": {\n    format: scorm2004_regex.CMILangString4000,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  matching: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n  },\n  performance: {\n    format: \"^$|\" + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + \"|^$|\" + scorm2004_regex.CMIShortIdentifier,\n    max: 250,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n  },\n  sequencing: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    unique: false,\n  },\n  likert: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  numeric: {\n    format: scorm2004_regex.CMIDecimal,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  other: {\n    format: scorm2004_regex.CMIString4000,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n};\nexport const CorrectResponses: Responses = {\n  \"true-false\": {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: \"^true$|^false$\",\n    limit: 1,\n  },\n  choice: {\n    max: 36,\n    delimiter: \"[,]\",\n    unique: true,\n    duplicate: false,\n    format: scorm2004_regex.CMILongIdentifier,\n  },\n  \"fill-in\": {\n    max: 10,\n    delimiter: \"[,]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMILangString250cr,\n  },\n  \"long-fill-in\": {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: true,\n    format: scorm2004_regex.CMILangString4000,\n  },\n  matching: {\n    max: 36,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n  },\n  performance: {\n    max: 250,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    delimiter3: \"[:]\",\n    unique: false,\n    duplicate: false,\n    // step_name must be a non-empty short identifier\n    format: scorm2004_regex.CMIShortIdentifier,\n    // step_answer may be short identifier or numeric range (<decimal>[:<decimal>])\n    format2: `^(${scorm2004_regex.CMIShortIdentifier})$|^(?:\\\\d+(?:\\\\.\\\\d+)?(?::\\\\d+(?:\\\\.\\\\d+)?)?)$`,\n  },\n  sequencing: {\n    max: 36,\n    delimiter: \"[,]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n  },\n  likert: {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    limit: 1,\n  },\n  numeric: {\n    max: 2,\n    delimiter: \"[:]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIDecimal,\n    limit: 1,\n  },\n  other: {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIString4000,\n    limit: 1,\n  },\n};\n\nexport type ResponseType = {\n  format: string;\n  max: number;\n  delimiter: string;\n  unique: boolean;\n  duplicate?: boolean;\n  format2?: string;\n  delimiter2?: string;\n  limit?: number;\n  delimiter3?: string;\n};\n\nexport type Responses = {\n  [key: string]: ResponseType;\n};\n","/**\n * Class representing SCORM 2004's `cmi.interactions` object\n */\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { CMIArray } from \"../common/array\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport {\n  CorrectResponses,\n  LearnerResponses,\n  ResponseType,\n} from \"../../constants/response_constants\";\n\nexport class CMIInteractions extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives` Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.interactions\",\n      children: scorm2004_constants.interactions_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.interaction.n object\n */\n\nexport class CMIInteractionsObject extends BaseCMI {\n  private _id = \"\";\n  private _type = \"\";\n  private _timestamp = \"\";\n  private _weighting = \"\";\n  private _learner_response = \"\";\n  private _result = \"\";\n  private _latency = \"\";\n  private _description = \"\";\n\n  /**\n   * Constructor for cmi.interaction.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n\");\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.n.correct_responses\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  public objectives: CMIArray;\n  public correct_responses: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._id = \"\";\n    this._type = \"\";\n    this._timestamp = \"\";\n    this._weighting = \"\";\n    this._learner_response = \"\";\n    this._result = \"\";\n    this._latency = \"\";\n    this._description = \"\";\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.n.correct_responses\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _type\n   * @return {string}\n   */\n  get type(): string {\n    return this._type;\n  }\n\n  /**\n   * Setter for _type\n   * @param {string} type\n   */\n  set type(type: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".type\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (check2004ValidFormat(this._cmi_element + \".type\", type, scorm2004_regex.CMIType)) {\n        this._type = type;\n      }\n    }\n  }\n\n  /**\n   * Getter for _timestamp\n   * @return {string}\n   */\n  get timestamp(): string {\n    return this._timestamp;\n  }\n\n  /**\n   * Setter for _timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".timestamp\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".timestamp\", timestamp, scorm2004_regex.CMITime)\n      ) {\n        this._timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * Getter for _weighting\n   * @return {string}\n   */\n  get weighting(): string {\n    return this._weighting;\n  }\n\n  /**\n   * Setter for _weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".weighting\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".weighting\",\n          weighting,\n          scorm2004_regex.CMIDecimal,\n        )\n      ) {\n        this._weighting = weighting;\n      }\n    }\n  }\n\n  /**\n   * Getter for _learner_response\n   * @return {string}\n   */\n  get learner_response(): string {\n    return this._learner_response;\n  }\n\n  /**\n   * Setter for _learner_response. Does type validation to make sure response\n   * matches SCORM 2004's spec\n   * @param {string} learner_response\n   */\n  set learner_response(learner_response: string) {\n    if (this.initialized && (this._type === \"\" || this._id === \"\")) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_response\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      let nodes = [];\n      const response_type = LearnerResponses[this.type];\n\n      if (response_type) {\n        if (response_type?.delimiter) {\n          // Convert regex-style delimiter to actual character\n          const delimiter = response_type.delimiter === \"[,]\" ? \",\" : response_type.delimiter;\n          nodes = learner_response.split(delimiter);\n        } else {\n          nodes[0] = learner_response;\n        }\n\n        if (nodes.length > 0 && nodes.length <= response_type.max) {\n          const formatRegex = new RegExp(response_type.format);\n\n          for (let i = 0; i < nodes.length; i++) {\n            if (response_type?.delimiter2) {\n              // Convert regex-style delimiter to actual character\n              const delimiter2 =\n                response_type.delimiter2 === \"[.]\" ? \".\" : response_type.delimiter2;\n              const values = nodes[i]?.split(delimiter2);\n\n              if (values?.length === 2) {\n                // For performance type, both parts must be non-empty\n                if (this.type === \"performance\" && (values[0] === \"\" || values[1] === \"\")) {\n                  throw new Scorm2004ValidationError(\n                    this._cmi_element + \".learner_response\",\n                    scorm2004_errors.TYPE_MISMATCH as number,\n                  );\n                }\n\n                if (!values[0]?.match(formatRegex)) {\n                  throw new Scorm2004ValidationError(\n                    this._cmi_element + \".learner_response\",\n                    scorm2004_errors.TYPE_MISMATCH as number,\n                  );\n                } else {\n                  if (\n                    !response_type.format2 ||\n                    !values[1]?.match(new RegExp(response_type.format2))\n                  ) {\n                    throw new Scorm2004ValidationError(\n                      this._cmi_element + \".learner_response\",\n                      scorm2004_errors.TYPE_MISMATCH as number,\n                    );\n                  }\n                }\n              } else {\n                throw new Scorm2004ValidationError(\n                  this._cmi_element + \".learner_response\",\n                  scorm2004_errors.TYPE_MISMATCH as number,\n                );\n              }\n            } else {\n              if (!nodes[i]?.match(formatRegex)) {\n                throw new Scorm2004ValidationError(\n                  this._cmi_element + \".learner_response\",\n                  scorm2004_errors.TYPE_MISMATCH as number,\n                );\n              } else {\n                if (nodes[i] !== \"\" && response_type.unique) {\n                  for (let j = 0; j < i; j++) {\n                    if (nodes[i] === nodes[j]) {\n                      throw new Scorm2004ValidationError(\n                        this._cmi_element + \".learner_response\",\n                        scorm2004_errors.TYPE_MISMATCH as number,\n                      );\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          throw new Scorm2004ValidationError(\n            this._cmi_element + \".learner_response\",\n            scorm2004_errors.GENERAL_SET_FAILURE as number,\n          );\n        }\n\n        this._learner_response = learner_response;\n      } else {\n        throw new Scorm2004ValidationError(\n          this._cmi_element + \".learner_response\",\n          scorm2004_errors.TYPE_MISMATCH as number,\n        );\n      }\n    }\n  }\n\n  /**\n   * Getter for _result\n   * @return {string}\n   */\n  get result(): string {\n    return this._result;\n  }\n\n  /**\n   * Setter for _result\n   * @param {string} result\n   */\n  set result(result: string) {\n    if (check2004ValidFormat(this._cmi_element + \".result\", result, scorm2004_regex.CMIResult)) {\n      this._result = result;\n    }\n  }\n\n  /**\n   * Getter for _latency\n   * @return {string}\n   */\n  get latency(): string {\n    return this._latency;\n  }\n\n  /**\n   * Setter for _latency\n   * @param {string} latency\n   */\n  set latency(latency: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".latency\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".latency\", latency, scorm2004_regex.CMITimespan)\n      ) {\n        this._latency = latency;\n      }\n    }\n  }\n\n  /**\n   * Getter for _description\n   * @return {string}\n   */\n  get description(): string {\n    return this._description;\n  }\n\n  /**\n   * Setter for _description\n   * @param {string} description\n   */\n  set description(description: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".description\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".description\",\n          description,\n          scorm2004_regex.CMILangString250,\n          true,\n        )\n      ) {\n        this._description = description;\n      }\n    }\n  }\n\n  // noinspection JSUnusedGlobalSymbols\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      type: string,\n   *      objectives: CMIArray,\n   *      timestamp: string,\n   *      correct_responses: CMIArray,\n   *      weighting: string,\n   *      learner_response: string,\n   *      result: string,\n   *      latency: string,\n   *      description: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    type: string;\n    objectives: CMIArray;\n    timestamp: string;\n    correct_responses: CMIArray;\n    weighting: string;\n    learner_response: string;\n    result: string;\n    latency: string;\n    description: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      type: this.type,\n      objectives: this.objectives,\n      timestamp: this.timestamp,\n      weighting: this.weighting,\n      learner_response: this.learner_response,\n      result: this.result,\n      latency: this.latency,\n      description: this.description,\n      correct_responses: this.correct_responses,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.objectives.n object\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  private _id = \"\";\n\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n.objectives.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._id = \"\";\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Helper: strip the square-bracket notation (e.g. \"[,]\") down to the character (\",\")\n */\nfunction stripBrackets(delim: string): string {\n  return delim.replace(/[[\\]]/g, \"\");\n}\n\n// Helper to escape a string for use in a RegExp\nfunction escapeRegex(s: string): string {\n  // Only , and . are expected, but escape any regex special chars for safety\n  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\n\n/**\n * Split on unescaped delimiter and unescape the delimiter in resulting parts.\n * @param text - the input string\n * @param delim - the delimiter character, e.g. ',' or '.'\n */\nfunction splitUnescaped(text: string, delim: string): string[] {\n  const reDelim = escapeRegex(delim);\n  const splitRe = new RegExp(`(?<!\\\\\\\\)${reDelim}`, \"g\");\n  const unescapeRe = new RegExp(`\\\\\\\\${reDelim}`, \"g\");\n  return text.split(splitRe).map((part) => part.replace(unescapeRe, delim));\n}\n\n/**\n * Helper: validate a `pattern` string against its SCORM definition\n */\nfunction validatePattern(type: string, pattern: string, responseDef: ResponseType) {\n  // Reject patterns with leading or trailing whitespace\n  if (pattern.trim() !== pattern) {\n    throw new Scorm2004ValidationError(\n      \"cmi.interactions.n.correct_responses.n.pattern\",\n      scorm2004_errors.TYPE_MISMATCH as number,\n    );\n  }\n\n  // Reject any nodes with leading/trailing whitespace around tokens\n  const subDelim1 = responseDef.delimiter ? stripBrackets(responseDef.delimiter) : null;\n  const rawNodes = subDelim1 ? splitUnescaped(pattern, subDelim1) : [pattern];\n  for (const raw of rawNodes) {\n    if (raw.trim() !== raw) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n  }\n\n  // Allow empty fill-in patterns\n  if (type === \"fill-in\" && pattern === \"\") {\n    return;\n  }\n  // Split into nodes on the primary delimiter (if any)\n  const delim1 = responseDef.delimiter ? stripBrackets(responseDef.delimiter) : null;\n  let nodes: string[];\n  if (delim1) {\n    nodes = splitUnescaped(pattern, delim1);\n  } else {\n    nodes = [pattern];\n  }\n\n  // If no primary delimiter but pattern contains comma, reject multiple entries\n  if (!responseDef.delimiter && pattern.includes(\",\")) {\n    throw new Scorm2004ValidationError(\n      \"cmi.interactions.n.correct_responses.n.pattern\",\n      scorm2004_errors.TYPE_MISMATCH as number,\n    );\n  }\n\n  // Enforce uniqueness or disallow duplicates if required\n  if (responseDef.unique || responseDef.duplicate === false) {\n    const seen = new Set(nodes);\n    if (seen.size !== nodes.length) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n  }\n\n  // Must have at least 1 node, and no more than max\n  if (nodes.length === 0 || nodes.length > responseDef.max) {\n    throw new Scorm2004ValidationError(\n      \"cmi.interactions.n.correct_responses.n.pattern\",\n      scorm2004_errors.GENERAL_SET_FAILURE as number,\n    );\n  }\n\n  const fmt1 = new RegExp(responseDef.format);\n  const fmt2 = responseDef.format2 ? new RegExp(responseDef.format2) : null;\n\n  const checkSingle = (value: string) => {\n    if (!fmt1.test(value)) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n  };\n\n  const checkPair = (value: string, delimBracketed?: string) => {\n    if (!delimBracketed) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    const delim = stripBrackets(delimBracketed);\n    const parts = value\n      .split(new RegExp(`(?<!\\\\\\\\)${escapeRegex(delim)}`, \"g\"))\n      .map((n) => n.replace(new RegExp(`\\\\\\\\${escapeRegex(delim)}`, \"g\"), delim));\n    if (parts.length !== 2 || parts[0] === \"\" || parts[1] === \"\") {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    // test both parts\n    if (\n      (parts[0] !== undefined && !fmt1.test(parts[0])) ||\n      (fmt2 && parts[1] !== undefined && !fmt2.test(parts[1]))\n    ) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n  };\n\n  for (const node of nodes) {\n    switch (type) {\n      case \"numeric\": {\n        // 1 or 2 numeric values separated by \":\"\n        const numDelim = responseDef.delimiter ? stripBrackets(responseDef.delimiter) : \":\";\n        const nums = node.split(numDelim);\n        if (nums.length < 1 || nums.length > 2) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        nums.forEach(checkSingle);\n        break;\n      }\n\n      case \"performance\": {\n        // split into parts on unescaped dot\n        const delimBracketed = responseDef.delimiter2;\n        if (!delimBracketed) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        const delim = stripBrackets(delimBracketed);\n        // split into parts on unescaped dot\n        const allParts = splitUnescaped(node, delim);\n        if (!node.includes(\":\") && allParts.length !== 2) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        // use splitUnescaped to get [part1, part2]\n        const [part1, part2] = splitUnescaped(node, delim);\n        // Validate non-empty\n        if (part1 === \"\" || part2 === \"\" || part1 === part2) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        // part1 against format1\n        if (part1 === undefined || !fmt1.test(part1)) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        // part2 against format2\n        if (fmt2 && part2 !== undefined && !fmt2.test(part2)) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        break;\n      }\n\n      default:\n        if (responseDef.delimiter2) {\n          // matching and other two-part types\n          checkPair(node, responseDef.delimiter2);\n        } else {\n          // simple single-value types (true-false, choice, fill-in, etc.)\n          checkSingle(node);\n        }\n    }\n  }\n}\n\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  private _pattern = \"\";\n  private readonly _interactionType?: string | undefined;\n\n  /**\n   * Constructor for cmi.interactions.n.correct_responses.n\n   * @param interactionType The type of interaction (e.g. \"numeric\", \"choice\", etc.)\n   */\n  constructor(interactionType?: string) {\n    super(\"cmi.interactions.n.correct_responses.n\");\n    this._interactionType = interactionType;\n  }\n\n  override reset() {\n    this._initialized = false;\n    this._pattern = \"\";\n  }\n\n  get pattern(): string {\n    return this._pattern;\n  }\n\n  set pattern(pattern: string) {\n    // Allow empty fill-in patterns\n    if (this._interactionType === \"fill-in\" && pattern === \"\") {\n      this._pattern = \"\";\n      return;\n    }\n    // 1) Basic SCORM‐pattern format check\n    if (\n      !check2004ValidFormat(this._cmi_element + \".pattern\", pattern, scorm2004_regex.CMIFeedback)\n    ) {\n      return;\n    }\n\n    // 2) If we know the interaction type, run the detailed validator\n    if (this._interactionType) {\n      const responseDef = CorrectResponses[this._interactionType];\n      if (responseDef) {\n        // Skip detailed validation for matching when pattern contains escaped comma or dot\n        if (this._interactionType === \"matching\" && /\\\\[.,]/.test(pattern)) {\n          // accept escaped comma or dot patterns without further validation\n        } else {\n          validatePattern(this._interactionType, pattern, responseDef);\n        }\n      }\n    }\n\n    // 3) Finally, set\n    this._pattern = pattern;\n  }\n\n  toJSON(): { pattern: string } {\n    this.jsonString = true;\n    const result = { pattern: this.pattern };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { ValidationError } from \"../exceptions\";\nimport { scorm12_constants } from \"../constants/api_constants\";\n\nconst scorm12_errors = scorm12_constants.error_descriptions;\n\n/**\n * SCORM 1.2 Validation Error\n */\nexport class Scorm12ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm12_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm12_errors[String(errorCode)]?.basicMessage || \"Unknown error\",\n        scorm12_errors[String(errorCode)]?.detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm12_errors[\"101\"]?.basicMessage ?? \"General error\",\n        scorm12_errors[\"101\"]?.detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm12ValidationError.prototype);\n  }\n}\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string | RegExp, // We accept either a string or a RegExp object to allow the usage of flags.\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm12_errors.TYPE_MISMATCH as number,\n    Scorm12ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidRange(\n  CMIElement: string,\n  value: any,\n  rangePattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  if (!allowEmptyString && value === \"\") {\n    throw new Scorm12ValidationError(CMIElement, scorm12_errors.VALUE_OUT_OF_RANGE as number);\n  }\n\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm12_errors.VALUE_OUT_OF_RANGE as number,\n    Scorm12ValidationError,\n  );\n}\n","import { BaseScormValidationError } from \"../exceptions\";\nimport { checkValidFormat, checkValidRange } from \"../cmi/common/validation\";\nimport { check12ValidFormat, check12ValidRange } from \"../cmi/scorm12/validation\";\nimport { scorm12_regex } from \"../constants/regex\";\nimport { scorm12_errors } from \"../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../exceptions/scorm12_exceptions\";\n\n/**\n * Service for validating CMI data model properties\n */\nexport class ValidationService {\n  /**\n   * Validates a score property (raw, min, max)\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @param {string} decimalRegex - The regex pattern for decimal validation\n   * @param {string | false} scoreRange - The range pattern for score validation, or false if no range validation is needed\n   * @param {number} invalidTypeCode - The error code for invalid type\n   * @param {number} invalidRangeCode - The error code for invalid range\n   * @param {typeof BaseScormValidationError} errorClass - The error class to use for validation errors\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScore(\n    CMIElement: string,\n    value: string,\n    decimalRegex: string,\n    scoreRange: string | false,\n    invalidTypeCode: number,\n    invalidRangeCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean {\n    return (\n      checkValidFormat(CMIElement, value, decimalRegex, invalidTypeCode, errorClass) &&\n      (!scoreRange || checkValidRange(CMIElement, value, scoreRange, invalidRangeCode, errorClass))\n    );\n    // This line should never be reached due to exceptions being thrown\n  }\n\n  /**\n   * Validates a SCORM 1.2 audio property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Audio(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.audio_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 language property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Language(CMIElement: string, value: string): boolean {\n    return check12ValidFormat(CMIElement, value, scorm12_regex.CMIString256);\n  }\n\n  /**\n   * Validates a SCORM 1.2 speed property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Speed(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.speed_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 text property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Text(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.text_range)\n    );\n  }\n\n  /**\n   * Validates if a property is read-only\n   *\n   * @param {string} CMIElement\n   * @param {boolean} initialized - Whether the object is initialized\n   * @throws {BaseScormValidationError} - Throws an error if the object is initialized\n   */\n  validateReadOnly(CMIElement: string, initialized: boolean): void {\n    if (initialized) {\n      throw new Scorm12ValidationError(CMIElement, scorm12_errors.READ_ONLY_ELEMENT as number);\n    }\n  }\n}\n\n// Export a singleton instance of the ValidationService\nexport const validationService = new ValidationService();\n","import { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"./base_cmi\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { validationService } from \"../../services/ValidationService\";\nimport { ScoreObject } from \"../../types/api_types\";\n\n/**\n * Base class for cmi *.score objects\n */\nexport class CMIScore extends BaseCMI {\n  private readonly __children: string;\n  private readonly __score_range: string | false;\n  private readonly __invalid_error_code: number;\n  private readonly __invalid_type_code: number;\n  private readonly __invalid_range_code: number;\n  private readonly __decimal_regex: string;\n  private readonly __error_class: typeof BaseScormValidationError;\n  protected _raw = \"\";\n  protected _min = \"\";\n  protected _max: string;\n\n  /**\n   * Constructor for *.score\n   * @param {\n   *     score_children: string,\n   *     score_range: string,\n   *     max: string,\n   *     invalidErrorCode: number,\n   *     invalidTypeCode: number,\n   *     invalidRangeCode: number,\n   *     decimalRegex: string,\n   *     errorClass: typeof BaseScormValidationError\n   * } params\n   */\n  constructor(params: {\n    CMIElement: string;\n    score_children?: string;\n    score_range?: string;\n    max?: string;\n    invalidErrorCode?: number;\n    invalidTypeCode?: number;\n    invalidRangeCode?: number;\n    decimalRegex?: string;\n    errorClass: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n\n    this.__children = params.score_children || scorm12_constants.score_children;\n    this.__score_range = !params.score_range ? false : scorm12_regex.score_range;\n    this._max = params.max || params.max === \"\" ? params.max : \"100\";\n    this.__invalid_error_code =\n      params.invalidErrorCode || (scorm12_errors.INVALID_SET_VALUE as number);\n    this.__invalid_type_code = params.invalidTypeCode || (scorm12_errors.TYPE_MISMATCH as number);\n    this.__invalid_range_code =\n      params.invalidRangeCode || (scorm12_errors.VALUE_OUT_OF_RANGE as number);\n    this.__decimal_regex = params.decimalRegex || scorm12_regex.CMIDecimal;\n    this.__error_class = params.errorClass;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this.__error_class(this._cmi_element + \"._children\", this.__invalid_error_code);\n  }\n\n  /**\n   * Getter for _raw\n   * @return {string}\n   */\n  get raw(): string {\n    return this._raw;\n  }\n\n  /**\n   * Setter for _raw\n   * @param {string} raw\n   */\n  set raw(raw: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".raw\",\n        raw,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._raw = raw;\n    }\n  }\n\n  /**\n   * Getter for _min\n   * @return {string}\n   */\n  get min(): string {\n    return this._min;\n  }\n\n  /**\n   * Setter for _min\n   * @param {string} min\n   */\n  set min(min: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".min\",\n        min,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._min = min;\n    }\n  }\n\n  /**\n   * Getter for _max\n   * @return {string}\n   */\n  get max(): string {\n    return this._max;\n  }\n\n  /**\n   * Setter for _max\n   * @param {string} max\n   */\n  set max(max: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".max\",\n        max,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._max = max;\n    }\n  }\n\n  /**\n   * Getter for _score_range\n   * @return {string | false}\n   */\n  public getScoreObject(): ScoreObject {\n    const scoreObject: ScoreObject = {};\n    if (!Number.isNaN(Number.parseFloat(this.raw))) {\n      scoreObject.raw = Number.parseFloat(this.raw);\n    }\n    if (!Number.isNaN(Number.parseFloat(this.min))) {\n      scoreObject.min = Number.parseFloat(this.min);\n    }\n    if (!Number.isNaN(Number.parseFloat(this.max))) {\n      scoreObject.max = Number.parseFloat(this.max);\n    }\n    return scoreObject;\n  }\n\n  /**\n   * toJSON for *.score\n   * @return {\n   *    {\n   *      min: string,\n   *      max: string,\n   *      raw: string\n   *    }\n   *    }\n   */\n  toJSON(): {\n    min: string;\n    max: string;\n    raw: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","/**\n * Class for SCORM 2004's cmi *.score object\n */\nimport { CMIScore } from \"../common/score\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { ScoreObject } from \"../../types/api_types\";\n\nexport class Scorm2004CMIScore extends CMIScore {\n  private _scaled = \"\";\n\n  /**\n   * Constructor for cmi *.score\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.score\",\n      score_children: scorm2004_constants.score_children,\n      max: \"\",\n      invalidErrorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      invalidTypeCode: scorm2004_errors.TYPE_MISMATCH as number,\n      invalidRangeCode: scorm2004_errors.VALUE_OUT_OF_RANGE as number,\n      decimalRegex: scorm2004_regex.CMIDecimal,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n    this._scaled = \"\";\n    this._raw = \"\";\n    this._min = \"\";\n    this._max = \"\";\n  }\n\n  /**\n   * Getter for _scaled\n   * @return {string}\n   */\n  get scaled(): string {\n    return this._scaled;\n  }\n\n  /**\n   * Setter for _scaled\n   * @param {string} scaled\n   */\n  set scaled(scaled: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".scaled\", scaled, scorm2004_regex.CMIDecimal) &&\n      check2004ValidRange(this._cmi_element + \".scaled\", scaled, scorm2004_regex.scaled_range)\n    ) {\n      this._scaled = scaled;\n    }\n  }\n\n  override getScoreObject(): ScoreObject {\n    const scoreObject = super.getScoreObject();\n\n    if (!Number.isNaN(Number.parseFloat(this.scaled))) {\n      scoreObject.scaled = Number.parseFloat(this.scaled);\n    }\n\n    return scoreObject;\n  }\n\n  /**\n   * toJSON for cmi *.score\n   *\n   * @return {\n   *    {\n   *      scaled: string,\n   *      raw: string,\n   *      min: string,\n   *      max: string\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    scaled: string;\n    raw: string;\n    min: string;\n    max: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      scaled: this.scaled,\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_lms object\n * @extends CMIArray\n */\nexport class CMICommentsFromLMS extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_lms Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.comments_from_lms\",\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner object\n */\n\nexport class CMICommentsFromLearner extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_learner Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.comments_from_learner\",\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner.n and cmi.comments_from_lms.n object\n */\n\nexport class CMICommentsObject extends BaseCMI {\n  private _comment = \"\";\n  private _location = \"\";\n  private _timestamp = \"\";\n  private readonly _readOnlyAfterInit: boolean;\n\n  /**\n   * Constructor for cmi.comments_from_learner.n and cmi.comments_from_lms.n\n   * @param {boolean} readOnlyAfterInit\n   */\n  constructor(readOnlyAfterInit: boolean = false) {\n    super(\"cmi.comments_from_learner.n\");\n    this._comment = \"\";\n    this._location = \"\";\n    this._timestamp = \"\";\n    this._readOnlyAfterInit = readOnlyAfterInit;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _comment\n   * @return {string}\n   */\n  get comment(): string {\n    return this._comment;\n  }\n\n  /**\n   * Setter for _comment\n   * @param {string} comment\n   */\n  set comment(comment: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".comment\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".comment\",\n          comment,\n          scorm2004_regex.CMILangString4000,\n          true,\n        )\n      ) {\n        this._comment = comment;\n      }\n    }\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".location\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".location\",\n          location,\n          scorm2004_regex.CMIString250,\n        )\n      ) {\n        this._location = location;\n      }\n    }\n  }\n\n  /**\n   * Getter for _timestamp\n   * @return {string}\n   */\n  get timestamp(): string {\n    return this._timestamp;\n  }\n\n  /**\n   * Setter for _timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".timestamp\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".timestamp\", timestamp, scorm2004_regex.CMITime)\n      ) {\n        this._timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.comments_from_learner.n object\n   * @return {\n   *    {\n   *      comment: string,\n   *      location: string,\n   *      timestamp: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    comment: string;\n    location: string;\n    timestamp: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      comment: this.comment,\n      location: this.location,\n      timestamp: this.timestamp,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { Scorm2004CMIScore } from \"./score\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\n\n/**\n * Class representing SCORM 2004's `cmi.objectives` object\n * @extends CMIArray\n */\nexport class CMIObjectives extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives` Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.objectives\",\n      children: scorm2004_constants.objectives_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n\n  /**\n   * Find an objective by its ID\n   */\n  public findObjectiveById(id: string): CMIObjectivesObject | undefined {\n    return this.childArray.find((objective) => objective.id === id);\n  }\n\n  /**\n   * Find objective by its index\n   */\n  public findObjectiveByIndex(index: number): CMIObjectivesObject {\n    return this.childArray[index];\n  }\n\n  /**\n   * Set an objective at the given index\n   */\n  public setObjectiveByIndex(index: number, objective: CMIObjectivesObject) {\n    this.childArray[index] = objective;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.objectives.n object\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  private _id = \"\";\n  private _success_status = \"unknown\";\n  private _completion_status = \"unknown\";\n  private _progress_measure = \"\";\n  private _description = \"\";\n\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super(\"cmi.objectives.n\");\n    this.score = new Scorm2004CMIScore();\n  }\n\n  override reset() {\n    this._initialized = false;\n  }\n\n  public score: Scorm2004CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this._success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".success_status\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".success_status\",\n          success_status,\n          scorm2004_regex.CMISStatus,\n        )\n      ) {\n        this._success_status = success_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this._completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".completion_status\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".completion_status\",\n          completion_status,\n          scorm2004_regex.CMICStatus,\n        )\n      ) {\n        this._completion_status = completion_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this._progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".progress_measure\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".progress_measure\",\n          progress_measure,\n          scorm2004_regex.CMIDecimal,\n        ) &&\n        check2004ValidRange(\n          this._cmi_element + \".progress_measure\",\n          progress_measure,\n          scorm2004_regex.progress_range,\n        )\n      ) {\n        this._progress_measure = progress_measure;\n      }\n    }\n  }\n\n  /**\n   * Getter for _description\n   * @return {string}\n   */\n  get description(): string {\n    return this._description;\n  }\n\n  /**\n   * Setter for _description\n   * @param {string} description\n   */\n  set description(description: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".description\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".description\",\n          description,\n          scorm2004_regex.CMILangString250,\n          true,\n        )\n      ) {\n        this._description = description;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      success_status: string,\n   *      completion_status: string,\n   *      progress_measure: string,\n   *      description: string,\n   *      score: Scorm2004CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    success_status: string;\n    completion_status: string;\n    progress_measure: string;\n    description: string;\n    score: Scorm2004CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      success_status: this.success_status,\n      completion_status: this.completion_status,\n      progress_measure: this.progress_measure,\n      description: this.description,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n\n  /**\n   * Populate this objective from a plain object\n   * @param {any} data\n   */\n  fromJSON(data: any): void {\n    if (!data || typeof data !== \"object\") return;\n    if (typeof data.id === \"string\") this.id = data.id;\n    if (typeof data.success_status === \"string\") this.success_status = data.success_status;\n    if (typeof data.completion_status === \"string\") this.completion_status = data.completion_status;\n    if (typeof data.progress_measure !== \"undefined\") this.progress_measure = String(data.progress_measure);\n    if (typeof data.description === \"string\") this.description = data.description;\n    if (data.score && typeof data.score === \"object\") {\n      if (typeof data.score.scaled !== \"undefined\") this.score.scaled = String(data.score.scaled);\n      if (typeof data.score.raw !== \"undefined\") this.score.raw = String(data.score.raw);\n      if (typeof data.score.min !== \"undefined\") this.score.min = String(data.score.min);\n      if (typeof data.score.max !== \"undefined\") this.score.max = String(data.score.max);\n    }\n  }\n}\n","/**\n * Class representing metadata properties for SCORM 2004's cmi object\n */\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing metadata properties for SCORM 2004's cmi object\n */\nexport class CMIMetadata extends BaseCMI {\n  private __version = \"1.0\";\n  private __children = scorm2004_constants.cmi_children;\n\n  /**\n   * Constructor for CMIMetadata\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   */\n  get _version(): string {\n    return this.__version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version: string) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._version\",\n      scorm2004_errors.READ_ONLY_ELEMENT as number,\n    );\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {number} _children\n   */\n  set _children(_children: number) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._children\",\n      scorm2004_errors.READ_ONLY_ELEMENT as number,\n    );\n  }\n\n  /**\n   * Reset the metadata properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // No need to reset __version and __children as they are constants\n  }\n}\n","/**\n * Class representing learner properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing learner properties for SCORM 2004's cmi object\n */\nexport class CMILearner extends BaseCMI {\n  private _learner_id = \"\";\n  private _learner_name = \"\";\n\n  /**\n   * Constructor for CMILearner\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _learner_id\n   * @return {string}\n   */\n  get learner_id(): string {\n    return this._learner_id;\n  }\n\n  /**\n   * Setter for _learner_id. Can only be called before initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_id\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._learner_id = learner_id;\n    }\n  }\n\n  /**\n   * Getter for _learner_name\n   * @return {string}\n   */\n  get learner_name(): string {\n    return this._learner_name;\n  }\n\n  /**\n   * Setter for _learner_name. Can only be called before initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_name\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._learner_name = learner_name;\n    }\n  }\n\n  /**\n   * Reset the learner properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset learner_id and learner_name as they are read-only after initialization\n  }\n}\n","/**\n * Class representing status properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\n\n/**\n * Class representing status properties for SCORM 2004's cmi object\n */\nexport class CMIStatus extends BaseCMI {\n  private _completion_status = \"unknown\";\n  private _success_status = \"unknown\";\n  private _progress_measure = \"\";\n\n  /**\n   * Constructor for CMIStatus\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this._completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".completion_status\",\n        completion_status,\n        scorm2004_regex.CMICStatus,\n      )\n    ) {\n      this._completion_status = completion_status;\n    }\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this._success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".success_status\",\n        success_status,\n        scorm2004_regex.CMISStatus,\n      )\n    ) {\n      this._success_status = success_status;\n    }\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this._progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".progress_measure\",\n        progress_measure,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".progress_measure\",\n        progress_measure,\n        scorm2004_regex.progress_range,\n      )\n    ) {\n      this._progress_measure = progress_measure;\n    }\n  }\n\n  /**\n   * Reset the status properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._completion_status = \"unknown\";\n    this._success_status = \"unknown\";\n    this._progress_measure = \"\";\n  }\n}\n","/**\n * Class representing session properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\nimport * as Util from \"../../utilities\";\n\n/**\n * Class representing session properties for SCORM 2004's cmi object\n */\nexport class CMISession extends BaseCMI {\n  private _entry = \"\";\n  private _exit = \"\";\n  private _session_time = \"PT0H0M0S\";\n  private _total_time = \"\";\n\n  /**\n   * Constructor for CMISession\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this._entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".entry\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._entry = entry;\n    }\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    if (!this.jsonString) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exit\",\n        scorm2004_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    if (check2004ValidFormat(this._cmi_element + \".exit\", exit, scorm2004_regex.CMIExit, true)) {\n      this._exit = exit;\n    }\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    if (!this.jsonString) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".session_time\",\n        scorm2004_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".session_time\",\n        session_time,\n        scorm2004_regex.CMITimespan,\n      )\n    ) {\n      this._session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this._total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".total_time\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._total_time = total_time;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime(start_time: number | undefined): string {\n    let sessionTime = this._session_time;\n    if (typeof start_time !== \"undefined\" && start_time !== null) {\n      const seconds = new Date().getTime() - start_time;\n      sessionTime = Util.getSecondsAsISODuration(seconds / 1000);\n    }\n\n    return Util.addTwoDurations(this._total_time, sessionTime, scorm2004_regex.CMITimespan);\n  }\n\n  /**\n   * Reset the session properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._entry = \"\";\n    this._exit = \"\";\n    this._session_time = \"PT0H0M0S\";\n    // Don't reset total_time as it's read-only after initialization\n  }\n}\n","/**\n * Class representing content properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\n\n/**\n * Class representing content properties for SCORM 2004's cmi object\n */\nexport class CMIContent extends BaseCMI {\n  private _location = \"\";\n  private _launch_data = \"\";\n  private _suspend_data = \"\";\n\n  /**\n   * Constructor for CMIContent\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".location\", location, scorm2004_regex.CMIString1000)\n    ) {\n      this._location = location;\n    }\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this._launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".launch_data\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._launch_data = launch_data;\n    }\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this._suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".suspend_data\",\n        suspend_data,\n        scorm2004_regex.CMIString64000,\n        true,\n      )\n    ) {\n      this._suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Reset the content properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._location = \"\";\n    // Don't reset launch_data as it's read-only after initialization\n    this._suspend_data = \"\";\n  }\n}\n","/**\n * Class representing settings properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing settings properties for SCORM 2004's cmi object\n */\nexport class CMISettings extends BaseCMI {\n  private _credit = \"credit\";\n  private _mode = \"normal\";\n  private _time_limit_action = \"continue,no message\";\n  private _max_time_allowed = \"\";\n\n  /**\n   * Constructor for CMISettings\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this._credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".credit\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._credit = credit;\n    }\n  }\n\n  /**\n   * Getter for _mode\n   * @return {string}\n   */\n  get mode(): string {\n    return this._mode;\n  }\n\n  /**\n   * Setter for _mode. Can only be called before initialization.\n   * @param {string} mode\n   */\n  set mode(mode: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".mode\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._mode = mode;\n    }\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this._time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".time_limit_action\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._time_limit_action = time_limit_action;\n    }\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this._max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".max_time_allowed\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._max_time_allowed = max_time_allowed;\n    }\n  }\n\n  /**\n   * Reset the settings properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset these properties as they are read-only after initialization\n  }\n}\n","/**\n * Class representing threshold properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing threshold properties for SCORM 2004's cmi object\n */\nexport class CMIThresholds extends BaseCMI {\n  private _scaled_passing_score = \"\";\n  private _completion_threshold = \"\";\n\n  /**\n   * Constructor for CMIThresholds\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score(): string {\n    return this._scaled_passing_score;\n  }\n\n  /**\n   * Setter for _scaled_passing_score. Can only be called before initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".scaled_passing_score\",\n        scorm2004_errors.READ_ONLY_ELEMENT ?? 404,\n      );\n    } else {\n      this._scaled_passing_score = scaled_passing_score;\n    }\n  }\n\n  /**\n   * Getter for _completion_threshold\n   * @return {string}\n   */\n  get completion_threshold(): string {\n    return this._completion_threshold;\n  }\n\n  /**\n   * Setter for _completion_threshold. Can only be called before initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".completion_threshold\",\n        scorm2004_errors.READ_ONLY_ELEMENT ?? 404,\n      );\n    } else {\n      this._completion_threshold = completion_threshold;\n    }\n  }\n\n  /**\n   * Reset the threshold properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset these properties as they are read-only after initialization\n  }\n}\n","import { BaseRootCMI } from \"../common/base_cmi\";\nimport { CMILearnerPreference } from \"./learner_preference\";\nimport { CMIInteractions } from \"./interactions\";\nimport { Scorm2004CMIScore } from \"./score\";\nimport { CMICommentsFromLearner, CMICommentsFromLMS } from \"./comments\";\nimport { CMIObjectives } from \"./objectives\";\nimport { CMIMetadata } from \"./metadata\";\nimport { CMILearner } from \"./learner\";\nimport { CMIStatus } from \"./status\";\nimport { CMISession } from \"./session\";\nimport { CMIContent } from \"./content\";\nimport { CMISettings } from \"./settings\";\nimport { CMIThresholds } from \"./thresholds\";\n\n/**\n * Class representing cmi object for SCORM 2004\n */\nexport class CMI extends BaseRootCMI {\n  /**\n   * Constructor for the SCORM 2004 cmi object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean = false) {\n    super(\"cmi\");\n    this.metadata = new CMIMetadata();\n    this.learner = new CMILearner();\n    this.status = new CMIStatus();\n    this.session = new CMISession();\n    this.content = new CMIContent();\n    this.settings = new CMISettings();\n    this.thresholds = new CMIThresholds();\n    this.learner_preference = new CMILearnerPreference();\n    this.score = new Scorm2004CMIScore();\n    this.comments_from_learner = new CMICommentsFromLearner();\n    this.comments_from_lms = new CMICommentsFromLMS();\n    this.interactions = new CMIInteractions();\n    this.objectives = new CMIObjectives();\n    if (initialized) this.initialize();\n  }\n\n  // New component classes\n  private metadata: CMIMetadata;\n  private learner: CMILearner;\n  private status: CMIStatus;\n  private session: CMISession;\n  private content: CMIContent;\n  private settings: CMISettings;\n  private thresholds: CMIThresholds;\n\n  // Original complex objects\n  public learner_preference: CMILearnerPreference;\n  public score: Scorm2004CMIScore;\n  public comments_from_learner: CMICommentsFromLearner;\n  public comments_from_lms: CMICommentsFromLMS;\n  public interactions: CMIInteractions;\n  public objectives: CMIObjectives;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    // Initialize new component classes\n    this.metadata?.initialize();\n    this.learner?.initialize();\n    this.status?.initialize();\n    this.session?.initialize();\n    this.content?.initialize();\n    this.settings?.initialize();\n    this.thresholds?.initialize();\n\n    // Initialize original complex objects\n    this.learner_preference?.initialize();\n    this.score?.initialize();\n    this.comments_from_learner?.initialize();\n    this.comments_from_lms?.initialize();\n    this.interactions?.initialize();\n    this.objectives?.initialize();\n  }\n\n  /**\n   * Called when API is moving to another SCO\n   */\n  reset() {\n    this._initialized = false;\n\n    // Reset new component classes\n    this.metadata?.reset();\n    this.learner?.reset();\n    this.status?.reset();\n    this.session?.reset();\n    this.content?.reset();\n    this.settings?.reset();\n    this.thresholds?.reset();\n\n    // Reset original complex objects\n    this.objectives?.reset(false);\n    this.interactions?.reset(true);\n    this.score?.reset();\n    this.comments_from_learner?.reset();\n    this.comments_from_lms?.reset();\n    this.learner_preference?.reset();\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   * @private\n   */\n  get _version(): string {\n    return this.metadata._version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   * @private\n   */\n  set _version(_version: string) {\n    this.metadata._version = _version;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.metadata._children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {number} _children\n   * @private\n   */\n  set _children(_children: number) {\n    this.metadata._children = _children;\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this.status.completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    this.status.completion_status = completion_status;\n  }\n\n  /**\n   * Getter for _completion_threshold\n   * @return {string}\n   */\n  get completion_threshold(): string {\n    return this.thresholds.completion_threshold;\n  }\n\n  /**\n   * Setter for _completion_threshold. Can only be called before initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold: string) {\n    this.thresholds.completion_threshold = completion_threshold;\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this.settings.credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    this.settings.credit = credit;\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this.session.entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    this.session.entry = entry;\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    this.session.jsonString = this.jsonString;\n    return this.session.exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    this.session.exit = exit;\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this.content.launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    this.content.launch_data = launch_data;\n  }\n\n  /**\n   * Getter for _learner_id\n   * @return {string}\n   */\n  get learner_id(): string {\n    return this.learner.learner_id;\n  }\n\n  /**\n   * Setter for _learner_id. Can only be called before initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id: string) {\n    this.learner.learner_id = learner_id;\n  }\n\n  /**\n   * Getter for _learner_name\n   * @return {string}\n   */\n  get learner_name(): string {\n    return this.learner.learner_name;\n  }\n\n  /**\n   * Setter for _learner_name. Can only be called before initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name: string) {\n    this.learner.learner_name = learner_name;\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this.content.location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    this.content.location = location;\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this.settings.max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    this.settings.max_time_allowed = max_time_allowed;\n  }\n\n  /**\n   * Getter for _mode\n   * @return {string}\n   */\n  get mode(): string {\n    return this.settings.mode;\n  }\n\n  /**\n   * Setter for _mode. Can only be called before initialization.\n   * @param {string} mode\n   */\n  set mode(mode: string) {\n    this.settings.mode = mode;\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this.status.progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    this.status.progress_measure = progress_measure;\n  }\n\n  /**\n   * Getter for _scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score(): string {\n    return this.thresholds.scaled_passing_score;\n  }\n\n  /**\n   * Setter for _scaled_passing_score. Can only be called before initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score: string) {\n    this.thresholds.scaled_passing_score = scaled_passing_score;\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    this.session.jsonString = this.jsonString;\n    return this.session.session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    this.session.session_time = session_time;\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this.status.success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    this.status.success_status = success_status;\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this.content.suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    this.content.suspend_data = suspend_data;\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this.settings.time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    this.settings.time_limit_action = time_limit_action;\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this.session.total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    this.session.total_time = total_time;\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime(): string {\n    return this.session.getCurrentTotalTime(this.start_time);\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      comments_from_learner: CMICommentsFromLearner,\n   *      comments_from_lms: CMICommentsFromLMS,\n   *      completion_status: string,\n   *      completion_threshold: string,\n   *      credit: string,\n   *      entry: string,\n   *      exit: string,\n   *      interactions: CMIInteractions,\n   *      launch_data: string,\n   *      learner_id: string,\n   *      learner_name: string,\n   *      learner_preference: CMILearnerPreference,\n   *      location: string,\n   *      max_time_allowed: string,\n   *      mode: string,\n   *      objectives: CMIObjectives,\n   *      progress_measure: string,\n   *      scaled_passing_score: string,\n   *      score: Scorm2004CMIScore,\n   *      session_time: string,\n   *      success_status: string,\n   *      suspend_data: string,\n   *      time_limit_action: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    comments_from_learner: CMICommentsFromLearner;\n    comments_from_lms: CMICommentsFromLMS;\n    completion_status: string;\n    completion_threshold: string;\n    credit: string;\n    entry: string;\n    exit: string;\n    interactions: CMIInteractions;\n    launch_data: string;\n    learner_id: string;\n    learner_name: string;\n    learner_preference: CMILearnerPreference;\n    location: string;\n    max_time_allowed: string;\n    mode: string;\n    objectives: CMIObjectives;\n    progress_measure: string;\n    scaled_passing_score: string;\n    score: Scorm2004CMIScore;\n    session_time: string;\n    success_status: string;\n    suspend_data: string;\n    time_limit_action: string;\n  } {\n    this.jsonString = true;\n\n    // Set jsonString flag on component classes that need it\n    this.session.jsonString = true;\n\n    const result = {\n      comments_from_learner: this.comments_from_learner,\n      comments_from_lms: this.comments_from_lms,\n      completion_status: this.completion_status,\n      completion_threshold: this.completion_threshold,\n      credit: this.credit,\n      entry: this.entry,\n      exit: this.exit,\n      interactions: this.interactions,\n      launch_data: this.launch_data,\n      learner_id: this.learner_id,\n      learner_name: this.learner_name,\n      learner_preference: this.learner_preference,\n      location: this.location,\n      max_time_allowed: this.max_time_allowed,\n      mode: this.mode,\n      objectives: this.objectives,\n      progress_measure: this.progress_measure,\n      scaled_passing_score: this.scaled_passing_score,\n      score: this.score,\n      session_time: this.session_time,\n      success_status: this.success_status,\n      suspend_data: this.suspend_data,\n      time_limit_action: this.time_limit_action,\n    };\n\n    // Clean up jsonString flags\n    this.jsonString = false;\n    this.session.jsonString = false;\n\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { NAVBoolean } from \"../../constants/enums\";\nimport { CMIArray } from \"../common/array\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Sequencing } from \"./sequencing/sequencing\";\n\n/**\n * Class representing SCORM 2004's adl object\n */\nexport class ADL extends BaseCMI {\n  /**\n   * Constructor for adl\n   */\n  constructor() {\n    super(\"adl\");\n    this.nav = new ADLNav();\n    this.data = new ADLData();\n  }\n\n  public nav: ADLNav;\n  public data = new ADLData();\n  private _sequencing: Sequencing | null = null;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.nav?.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this.nav?.reset();\n  }\n\n  /**\n   * Getter for sequencing\n   * @return {Sequencing | null}\n   */\n  get sequencing(): Sequencing | null {\n    return this._sequencing;\n  }\n\n  /**\n   * Setter for sequencing\n   * @param {Sequencing | null} sequencing\n   */\n  set sequencing(sequencing: Sequencing | null) {\n    this._sequencing = sequencing;\n    if (sequencing) {\n      sequencing.adlNav = this.nav;\n      this.nav.sequencing = sequencing;\n    }\n  }\n\n  /**\n   * toJSON for adl\n   * @return {\n   *    {\n   *      nav: ADLNav,\n   *      data: ADLData\n   *    }\n   *  }\n   */\n  toJSON(): {\n    nav: ADLNav;\n    data: ADLData;\n  } {\n    this.jsonString = true;\n    const result = {\n      nav: this.nav,\n      data: this.data,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's `adl.nav` object\n */\n\nexport class ADLNav extends BaseCMI {\n  private _request = \"_none_\";\n  private _sequencing: Sequencing | null = null;\n\n  /**\n   * Constructor for `adl.nav`\n   */\n  constructor() {\n    super(\"adl.nav\");\n    this.request_valid = new ADLNavRequestValid();\n  }\n\n  public request_valid: ADLNavRequestValid;\n\n  /**\n   * Getter for sequencing\n   * @return {Sequencing | null}\n   */\n  get sequencing(): Sequencing | null {\n    return this._sequencing;\n  }\n\n  /**\n   * Setter for sequencing\n   * @param {Sequencing | null} sequencing\n   */\n  set sequencing(sequencing: Sequencing | null) {\n    this._sequencing = sequencing;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.request_valid?.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._request = \"_none_\";\n    if (this._sequencing) {\n      this._sequencing.adlNav = null;\n    }\n    this._sequencing = null;\n    this.request_valid?.reset();\n  }\n\n  /**\n   * Getter for _request\n   * @return {string}\n   */\n  get request(): string {\n    return this._request;\n  }\n\n  /**\n   * Setter for _request\n   * @param {string} request\n   */\n  set request(request: string) {\n    if (check2004ValidFormat(this._cmi_element + \".request\", request, scorm2004_regex.NAVEvent)) {\n      this._request = request;\n    }\n  }\n\n  /**\n   * toJSON for adl.nav\n   *\n   * @return {\n   *    {\n   *      request: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    request: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      request: this.request,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's `adl.data` object\n */\nexport class ADLData extends CMIArray {\n  constructor() {\n    super({\n      CMIElement: \"adl.data\",\n      children: scorm2004_constants.adl_data_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's adl.data.n object\n */\nexport class ADLDataObject extends BaseCMI {\n  private _id = \"\";\n  private _store = \"\";\n\n  constructor() {\n    super(\"adl.data.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _store\n   * @return {string}\n   */\n  get store(): string {\n    return this._store;\n  }\n\n  /**\n   * Setter for _store\n   * @param {string} store\n   */\n  set store(store: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".store\", store, scorm2004_regex.CMILangString4000)\n    ) {\n      this._store = store;\n    }\n  }\n\n  /**\n   * toJSON for adl.data.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      store: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    store: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this._id,\n      store: this._store,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl.nav.request_valid object\n */\n\nexport class ADLNavRequestValid extends BaseCMI {\n  private _continue = \"unknown\";\n  private _previous = \"unknown\";\n  private _choice: {\n    [key: string]: NAVBoolean;\n  } = {};\n  private _jump: {\n    [key: string]: NAVBoolean;\n  } = {};\n  private _exit = \"unknown\";\n  private _exitAll = \"unknown\";\n  private _abandon = \"unknown\";\n  private _abandonAll = \"unknown\";\n  private _suspendAll = \"unknown\";\n\n  /**\n   * Constructor for adl.nav.request_valid\n   */\n  constructor() {\n    super(\"adl.nav.request_valid\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._continue = \"unknown\";\n    this._previous = \"unknown\";\n    this._choice = {};\n    this._jump = {};\n    this._exit = \"unknown\";\n    this._exitAll = \"unknown\";\n    this._abandon = \"unknown\";\n    this._abandonAll = \"unknown\";\n    this._suspendAll = \"unknown\";\n  }\n\n  /**\n   * Getter for _continue\n   * @return {string}\n   */\n  get continue(): string {\n    return this._continue;\n  }\n\n  /**\n   * Setter for _continue. Just throws an error.\n   * @param {string} _continue\n   */\n  set continue(_continue: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".continue\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".continue\", _continue, scorm2004_regex.NAVBoolean)\n    ) {\n      this._continue = _continue;\n    }\n  }\n\n  /**\n   * Getter for _previous\n   * @return {string}\n   */\n  get previous(): string {\n    return this._previous;\n  }\n\n  /**\n   * Setter for _previous. Just throws an error.\n   * @param {string} _previous\n   */\n  set previous(_previous: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".previous\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".previous\", _previous, scorm2004_regex.NAVBoolean)\n    ) {\n      this._previous = _previous;\n    }\n  }\n\n  /**\n   * Getter for _choice\n   * @return {{ [key: string]: NAVBoolean }}\n   */\n  get choice(): { [key: string]: NAVBoolean } {\n    return this._choice;\n  }\n\n  /**\n   * Setter for _choice\n   * @param {{ [key: string]: string }} choice\n   */\n  set choice(choice: { [key: string]: string }) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".choice\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (typeof choice !== \"object\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".choice\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    for (const key in choice) {\n      if ({}.hasOwnProperty.call(choice, key)) {\n        if (\n          check2004ValidFormat(\n            this._cmi_element + \".choice.\" + key,\n            choice[key] || \"\",\n            scorm2004_regex.NAVBoolean,\n          ) &&\n          check2004ValidFormat(this._cmi_element + \".choice.\" + key, key, scorm2004_regex.NAVTarget)\n        ) {\n          // Convert string value to NAVBoolean enum value\n          const value = choice[key];\n          if (value === \"true\") {\n            this._choice[key] = NAVBoolean.TRUE;\n          } else if (value === \"false\") {\n            this._choice[key] = NAVBoolean.FALSE;\n          } else if (value === \"unknown\") {\n            this._choice[key] = NAVBoolean.UNKNOWN;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Getter for _jump\n   * @return {{ [key: string]: NAVBoolean }}\n   */\n  get jump(): { [key: string]: NAVBoolean } {\n    return this._jump;\n  }\n\n  /**\n   * Setter for _jump\n   * @param {{ [key: string]: string }} jump\n   */\n  set jump(jump: { [key: string]: string }) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".jump\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (typeof jump !== \"object\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".jump\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    for (const key in jump) {\n      if ({}.hasOwnProperty.call(jump, key)) {\n        if (\n          check2004ValidFormat(\n            this._cmi_element + \".jump.\" + key,\n            jump[key] || \"\",\n            scorm2004_regex.NAVBoolean,\n          ) &&\n          check2004ValidFormat(this._cmi_element + \".jump.\" + key, key, scorm2004_regex.NAVTarget)\n        ) {\n          // Convert string value to NAVBoolean enum value\n          const value = jump[key];\n          if (value === \"true\") {\n            this._jump[key] = NAVBoolean.TRUE;\n          } else if (value === \"false\") {\n            this._jump[key] = NAVBoolean.FALSE;\n          } else if (value === \"unknown\") {\n            this._jump[key] = NAVBoolean.UNKNOWN;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Getter for _exit\n   * @return {string}\n   */\n  get exit(): string {\n    return this._exit;\n  }\n\n  /**\n   * Setter for _exit. Just throws an error.\n   * @param {string} _exit\n   */\n  set exit(_exit: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exit\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".exit\", _exit, scorm2004_regex.NAVBoolean)\n    ) {\n      this._exit = _exit;\n    }\n  }\n\n  /**\n   * Getter for _exitAll\n   * @return {string}\n   */\n  get exitAll(): string {\n    return this._exitAll;\n  }\n\n  /**\n   * Setter for _exitAll. Just throws an error.\n   * @param {string} _exitAll\n   */\n  set exitAll(_exitAll: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exitAll\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".exitAll\", _exitAll, scorm2004_regex.NAVBoolean)\n    ) {\n      this._exitAll = _exitAll;\n    }\n  }\n\n  /**\n   * Getter for _abandon\n   * @return {string}\n   */\n  get abandon(): string {\n    return this._abandon;\n  }\n\n  /**\n   * Setter for _abandon. Just throws an error.\n   * @param {string} _abandon\n   */\n  set abandon(_abandon: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".abandon\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".abandon\", _abandon, scorm2004_regex.NAVBoolean)\n    ) {\n      this._abandon = _abandon;\n    }\n  }\n\n  /**\n   * Getter for _abandonAll\n   * @return {string}\n   */\n  get abandonAll(): string {\n    return this._abandonAll;\n  }\n\n  /**\n   * Setter for _abandonAll. Just throws an error.\n   * @param {string} _abandonAll\n   */\n  set abandonAll(_abandonAll: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".abandonAll\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".abandonAll\", _abandonAll, scorm2004_regex.NAVBoolean)\n    ) {\n      this._abandonAll = _abandonAll;\n    }\n  }\n\n  /**\n   * Getter for _suspendAll\n   * @return {string}\n   */\n  get suspendAll(): string {\n    return this._suspendAll;\n  }\n\n  /**\n   * Setter for _suspendAll. Just throws an error.\n   * @param {string} _suspendAll\n   */\n  set suspendAll(_suspendAll: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".suspendAll\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".suspendAll\", _suspendAll, scorm2004_regex.NAVBoolean)\n    ) {\n      this._suspendAll = _suspendAll;\n    }\n  }\n\n  /**\n   * toJSON for adl.nav.request_valid\n   *\n   * @return {\n   *    {\n   *      previous: string,\n   *      continue: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    previous: string;\n    continue: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      previous: this._previous,\n      continue: this._continue,\n      choice: this._choice,\n      jump: this._jump,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Enum for rule condition operators\n */\nexport enum RuleConditionOperator {\n  NOT = \"not\",\n  AND = \"and\",\n  OR = \"or\",\n}\n\n/**\n * Enum for rule condition types\n */\nexport enum RuleConditionType {\n  SATISFIED = \"satisfied\",\n  OBJECTIVE_STATUS_KNOWN = \"objectiveStatusKnown\",\n  OBJECTIVE_MEASURE_KNOWN = \"objectiveMeasureKnown\",\n  OBJECTIVE_MEASURE_GREATER_THAN = \"objectiveMeasureGreaterThan\",\n  OBJECTIVE_MEASURE_LESS_THAN = \"objectiveMeasureLessThan\",\n  COMPLETED = \"completed\",\n  PROGRESS_KNOWN = \"progressKnown\",\n  ATTEMPTED = \"attempted\",\n  ATTEMPT_LIMIT_EXCEEDED = \"attemptLimitExceeded\",\n  TIME_LIMIT_EXCEEDED = \"timeLimitExceeded\",\n  OUTSIDE_AVAILABLE_TIME_RANGE = \"outsideAvailableTimeRange\",\n  ALWAYS = \"always\",\n}\n\n/**\n * Enum for rule action types\n */\nexport enum RuleActionType {\n  SKIP = \"skip\",\n  DISABLED = \"disabled\",\n  HIDE_FROM_CHOICE = \"hideFromChoice\",\n  STOP_FORWARD_TRAVERSAL = \"stopForwardTraversal\",\n  EXIT_PARENT = \"exitParent\",\n  EXIT_ALL = \"exitAll\",\n  RETRY = \"retry\",\n  RETRY_ALL = \"retryAll\",\n  CONTINUE = \"continue\",\n  PREVIOUS = \"previous\",\n  EXIT = \"exit\",\n}\n\n/**\n * Class representing a sequencing rule condition\n */\nexport class RuleCondition extends BaseCMI {\n  private _condition: RuleConditionType = RuleConditionType.ALWAYS;\n  private _operator: RuleConditionOperator | null = null;\n  private _parameters: Map<string, any> = new Map();\n  // Optional, overridable provider for current time (LMS may set via SequencingService)\n  private static _now: () => Date = () => new Date();\n\n  /**\n   * Constructor for RuleCondition\n   * @param {RuleConditionType} condition - The condition type\n   * @param {RuleConditionOperator | null} operator - The operator (null for no operator)\n   * @param {Map<string, any>} parameters - Additional parameters for the condition\n   */\n  constructor(\n    condition: RuleConditionType = RuleConditionType.ALWAYS,\n    operator: RuleConditionOperator | null = null,\n    parameters: Map<string, any> = new Map(),\n  ) {\n    super(\"ruleCondition\");\n    this._condition = condition;\n    this._operator = operator;\n    this._parameters = parameters;\n  }\n\n  /**\n   * Allow integrators to override the clock used for time-based rules.\n   */\n  public static setNowProvider(now: () => Date) {\n    if (typeof now === \"function\") {\n      RuleCondition._now = now;\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._condition = RuleConditionType.ALWAYS;\n    this._operator = null;\n    this._parameters = new Map();\n  }\n\n  /**\n   * Getter for condition\n   * @return {RuleConditionType}\n   */\n  get condition(): RuleConditionType {\n    return this._condition;\n  }\n\n  /**\n   * Setter for condition\n   * @param {RuleConditionType} condition\n   */\n  set condition(condition: RuleConditionType) {\n    this._condition = condition;\n  }\n\n  /**\n   * Getter for operator\n   * @return {RuleConditionOperator | null}\n   */\n  get operator(): RuleConditionOperator | null {\n    return this._operator;\n  }\n\n  /**\n   * Setter for operator\n   * @param {RuleConditionOperator | null} operator\n   */\n  set operator(operator: RuleConditionOperator | null) {\n    this._operator = operator;\n  }\n\n  /**\n   * Getter for parameters\n   * @return {Map<string, any>}\n   */\n  get parameters(): Map<string, any> {\n    return this._parameters;\n  }\n\n  /**\n   * Setter for parameters\n   * @param {Map<string, any>} parameters\n   */\n  set parameters(parameters: Map<string, any>) {\n    this._parameters = parameters;\n  }\n\n  /**\n   * Evaluate the condition for an activity\n   * @param {Activity} activity - The activity to evaluate the condition for\n   * @return {boolean} - True if the condition is met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    let result;\n    switch (this._condition) {\n      case RuleConditionType.SATISFIED:\n        result = activity.successStatus === SuccessStatus.PASSED;\n        break;\n      case RuleConditionType.OBJECTIVE_STATUS_KNOWN:\n        // noinspection PointlessBooleanExpressionJS\n        result = !!activity.objectiveMeasureStatus;\n        break;\n      case RuleConditionType.OBJECTIVE_MEASURE_KNOWN:\n        // noinspection PointlessBooleanExpressionJS\n        result = !!activity.objectiveMeasureStatus;\n        break;\n      case RuleConditionType.OBJECTIVE_MEASURE_GREATER_THAN: {\n        const greaterThanValue = this._parameters.get(\"threshold\") || 0;\n        result =\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure > greaterThanValue;\n        break;\n      }\n      case RuleConditionType.OBJECTIVE_MEASURE_LESS_THAN: {\n        const lessThanValue = this._parameters.get(\"threshold\") || 0;\n        result =\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure < lessThanValue;\n        break;\n      }\n      case RuleConditionType.COMPLETED:\n        result = activity.isCompleted;\n        break;\n      case RuleConditionType.PROGRESS_KNOWN:\n        result = activity.completionStatus !== \"unknown\";\n        break;\n      case RuleConditionType.ATTEMPTED:\n        result = activity.attemptCount > 0;\n        break;\n      case RuleConditionType.ATTEMPT_LIMIT_EXCEEDED: {\n        const attemptLimit = this._parameters.get(\"attemptLimit\") || 0;\n        result = activity.attemptCount >= attemptLimit;\n        break;\n      }\n      case RuleConditionType.TIME_LIMIT_EXCEEDED:\n        result = this.evaluateTimeLimitExceeded(activity);\n        break;\n      case RuleConditionType.OUTSIDE_AVAILABLE_TIME_RANGE:\n        result = this.evaluateOutsideAvailableTimeRange(activity);\n        break;\n      case RuleConditionType.ALWAYS:\n        result = true;\n        break;\n      default:\n        result = false;\n        break;\n    }\n\n    if (this._operator === RuleConditionOperator.NOT) {\n      result = !result;\n    }\n\n    return result;\n  }\n\n  /**\n   * Evaluate if time limit has been exceeded\n   * @param {Activity} activity - The activity to evaluate\n   * @return {boolean}\n   * @private\n   */\n  private evaluateTimeLimitExceeded(activity: Activity): boolean {\n    const timeLimitDuration = activity.timeLimitDuration;\n    if (!timeLimitDuration) {\n      return false;\n    }\n\n    // Parse ISO 8601 duration to milliseconds\n    const durationMs = this.parseISO8601Duration(timeLimitDuration);\n    if (durationMs === 0) {\n      return false;\n    }\n\n    // Get current attempt duration\n    const attemptDuration = activity.attemptExperiencedDuration;\n    const attemptDurationMs = this.parseISO8601Duration(attemptDuration);\n\n    return attemptDurationMs > durationMs;\n  }\n\n  /**\n   * Evaluate if activity is outside available time range\n   * @param {Activity} activity - The activity to evaluate\n   * @return {boolean}\n   * @private\n   */\n  private evaluateOutsideAvailableTimeRange(activity: Activity): boolean {\n    const beginTime = activity.beginTimeLimit;\n    const endTime = activity.endTimeLimit;\n\n    if (!beginTime && !endTime) {\n      return false;\n    }\n\n    const now = RuleCondition._now();\n\n    if (beginTime) {\n      const beginDate = new Date(beginTime);\n      if (now < beginDate) {\n        return true;\n      }\n    }\n\n    if (endTime) {\n      const endDate = new Date(endTime);\n      if (now > endDate) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Parse ISO 8601 duration to milliseconds\n   * @param {string} duration - ISO 8601 duration string\n   * @return {number} - Duration in milliseconds\n   * @private\n   */\n  private parseISO8601Duration(duration: string): number {\n    const regex = /PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?/;\n    const matches = duration.match(regex);\n\n    if (!matches) {\n      return 0;\n    }\n\n    const hours = parseInt(matches[1] || \"0\", 10);\n    const minutes = parseInt(matches[2] || \"0\", 10);\n    const seconds = parseFloat(matches[3] || \"0\");\n\n    return (hours * 3600 + minutes * 60 + seconds) * 1000;\n  }\n\n  /**\n   * toJSON for RuleCondition\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      condition: this._condition,\n      operator: this._operator,\n      parameters: Object.fromEntries(this._parameters),\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a sequencing rule\n */\nexport class SequencingRule extends BaseCMI {\n  private _conditions: RuleCondition[] = [];\n  private _action: RuleActionType = RuleActionType.SKIP;\n  private _conditionCombination: string | RuleConditionOperator = RuleConditionOperator.AND;\n\n  /**\n   * Constructor for SequencingRule\n   * @param {RuleActionType} action - The action to take when the rule conditions are met\n   * @param {string | RuleConditionOperator} conditionCombination - How to combine multiple conditions (\"all\"/\"and\" or \"any\"/\"or\")\n   */\n  constructor(\n    action: RuleActionType = RuleActionType.SKIP,\n    conditionCombination: string | RuleConditionOperator = RuleConditionOperator.AND,\n  ) {\n    super(\"sequencingRule\");\n    this._action = action;\n    this._conditionCombination = conditionCombination;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._conditions = [];\n    this._action = RuleActionType.SKIP;\n    this._conditionCombination = RuleConditionOperator.AND;\n  }\n\n  /**\n   * Getter for conditions\n   * @return {RuleCondition[]}\n   */\n  get conditions(): RuleCondition[] {\n    return this._conditions;\n  }\n\n  /**\n   * Add a condition to the rule\n   * @param {RuleCondition} condition - The condition to add\n   */\n  addCondition(condition: RuleCondition): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(condition instanceof RuleCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    // Check if the condition is already in the array\n    if (!this._conditions.includes(condition)) {\n      this._conditions.push(condition);\n    }\n  }\n\n  /**\n   * Remove a condition from the rule\n   * @param {RuleCondition} condition - The condition to remove\n   * @return {boolean} - True if the condition was removed, false otherwise\n   */\n  removeCondition(condition: RuleCondition): boolean {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(condition instanceof RuleCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    const index = this._conditions.indexOf(condition);\n    if (index !== -1) {\n      this._conditions.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for action\n   * @return {RuleActionType}\n   */\n  get action(): RuleActionType {\n    return this._action;\n  }\n\n  /**\n   * Setter for action\n   * @param {RuleActionType} action\n   */\n  set action(action: RuleActionType) {\n    this._action = action;\n  }\n\n  /**\n   * Getter for conditionCombination\n   * @return {string | RuleConditionOperator}\n   */\n  get conditionCombination(): string | RuleConditionOperator {\n    return this._conditionCombination;\n  }\n\n  /**\n   * Setter for conditionCombination\n   * @param {string | RuleConditionOperator} conditionCombination\n   */\n  set conditionCombination(conditionCombination: string | RuleConditionOperator) {\n    this._conditionCombination = conditionCombination;\n  }\n\n  /**\n   * Evaluate the rule for an activity\n   * @param {Activity} activity - The activity to evaluate the rule for\n   * @return {boolean} - True if the rule conditions are met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    if (this._conditions.length === 0) {\n      return true;\n    }\n\n    if (\n      this._conditionCombination === \"all\" ||\n      this._conditionCombination === RuleConditionOperator.AND\n    ) {\n      return this._conditions.every((condition) => condition.evaluate(activity));\n    } else if (\n      this._conditionCombination === \"any\" ||\n      this._conditionCombination === RuleConditionOperator.OR\n    ) {\n      return this._conditions.some((condition) => condition.evaluate(activity));\n    }\n\n    return false;\n  }\n\n  /**\n   * toJSON for SequencingRule\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      conditions: this._conditions,\n      action: this._action,\n      conditionCombination: this._conditionCombination,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a collection of sequencing rules\n */\nexport class SequencingRules extends BaseCMI {\n  private _preConditionRules: SequencingRule[] = [];\n  private _exitConditionRules: SequencingRule[] = [];\n  private _postConditionRules: SequencingRule[] = [];\n\n  /**\n   * Constructor for SequencingRules\n   */\n  constructor() {\n    super(\"sequencingRules\");\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._preConditionRules = [];\n    this._exitConditionRules = [];\n    this._postConditionRules = [];\n  }\n\n  /**\n   * Getter for preConditionRules\n   * @return {SequencingRule[]}\n   */\n  get preConditionRules(): SequencingRule[] {\n    return this._preConditionRules;\n  }\n\n  /**\n   * Add a pre-condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addPreConditionRule(rule: SequencingRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".preConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._preConditionRules.push(rule);\n  }\n\n  /**\n   * Getter for exitConditionRules\n   * @return {SequencingRule[]}\n   */\n  get exitConditionRules(): SequencingRule[] {\n    return this._exitConditionRules;\n  }\n\n  /**\n   * Add an exit condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addExitConditionRule(rule: SequencingRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exitConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._exitConditionRules.push(rule);\n  }\n\n  /**\n   * Getter for postConditionRules\n   * @return {SequencingRule[]}\n   */\n  get postConditionRules(): SequencingRule[] {\n    return this._postConditionRules;\n  }\n\n  /**\n   * Add a post-condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addPostConditionRule(rule: SequencingRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".postConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._postConditionRules.push(rule);\n  }\n\n  /**\n   * Evaluate pre-condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluatePreConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._preConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Evaluate exit condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluateExitConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._exitConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Evaluate post-condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluatePostConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._postConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * toJSON for SequencingRules\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      preConditionRules: this._preConditionRules,\n      exitConditionRules: this._exitConditionRules,\n      postConditionRules: this._postConditionRules,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { CompletionStatus, SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Enum for rollup action types\n */\nexport enum RollupActionType {\n  SATISFIED = \"satisfied\",\n  NOT_SATISFIED = \"notSatisfied\",\n  COMPLETED = \"completed\",\n  INCOMPLETE = \"incomplete\",\n}\n\n/**\n * Enum for rollup condition types\n */\nexport enum RollupConditionType {\n  SATISFIED = \"satisfied\",\n  OBJECTIVE_STATUS_KNOWN = \"objectiveStatusKnown\",\n  OBJECTIVE_MEASURE_KNOWN = \"objectiveMeasureKnown\",\n  OBJECTIVE_MEASURE_GREATER_THAN = \"objectiveMeasureGreaterThan\",\n  OBJECTIVE_MEASURE_LESS_THAN = \"objectiveMeasureLessThan\",\n  COMPLETED = \"completed\",\n  PROGRESS_KNOWN = \"progressKnown\",\n  ATTEMPTED = \"attempted\",\n  NOT_ATTEMPTED = \"notAttempted\",\n  ALWAYS = \"always\",\n}\n\n/**\n * Enum for rollup consideration types\n */\nexport enum RollupConsiderationType {\n  ALL = \"all\",\n  ANY = \"any\",\n  NONE = \"none\",\n  AT_LEAST_COUNT = \"atLeastCount\",\n  AT_LEAST_PERCENT = \"atLeastPercent\",\n}\n\n/**\n * Class representing a rollup condition\n */\nexport class RollupCondition extends BaseCMI {\n  private _condition: RollupConditionType = RollupConditionType.ALWAYS;\n  private _parameters: Map<string, any> = new Map();\n\n  /**\n   * Constructor for RollupCondition\n   * @param {RollupConditionType} condition - The condition type\n   * @param {Map<string, any>} parameters - Additional parameters for the condition\n   */\n  constructor(\n    condition: RollupConditionType = RollupConditionType.ALWAYS,\n    parameters: Map<string, any> = new Map(),\n  ) {\n    super(\"rollupCondition\");\n    this._condition = condition;\n    this._parameters = parameters;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for condition\n   * @return {RollupConditionType}\n   */\n  get condition(): RollupConditionType {\n    return this._condition;\n  }\n\n  /**\n   * Setter for condition\n   * @param {RollupConditionType} condition\n   */\n  set condition(condition: RollupConditionType) {\n    this._condition = condition;\n  }\n\n  /**\n   * Getter for parameters\n   * @return {Map<string, any>}\n   */\n  get parameters(): Map<string, any> {\n    return this._parameters;\n  }\n\n  /**\n   * Setter for parameters\n   * @param {Map<string, any>} parameters\n   */\n  set parameters(parameters: Map<string, any>) {\n    this._parameters = parameters;\n  }\n\n  /**\n   * Evaluate the condition for an activity\n   * @param {Activity} activity - The activity to evaluate the condition for\n   * @return {boolean} - True if the condition is met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    switch (this._condition) {\n      case RollupConditionType.SATISFIED:\n        return activity.successStatus === SuccessStatus.PASSED;\n      case RollupConditionType.OBJECTIVE_STATUS_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RollupConditionType.OBJECTIVE_MEASURE_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RollupConditionType.OBJECTIVE_MEASURE_GREATER_THAN: {\n        const greaterThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure > greaterThanValue\n        );\n      }\n      case RollupConditionType.OBJECTIVE_MEASURE_LESS_THAN: {\n        const lessThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure < lessThanValue\n        );\n      }\n      case RollupConditionType.COMPLETED:\n        return activity.isCompleted;\n      case RollupConditionType.PROGRESS_KNOWN:\n        return activity.completionStatus !== CompletionStatus.UNKNOWN;\n      case RollupConditionType.ATTEMPTED:\n        return activity.attemptCount > 0;\n      case RollupConditionType.NOT_ATTEMPTED:\n        return activity.attemptCount === 0;\n      case RollupConditionType.ALWAYS:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RollupCondition\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      condition: this._condition,\n      parameters: Object.fromEntries(this._parameters),\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a rollup rule\n */\nexport class RollupRule extends BaseCMI {\n  private _conditions: RollupCondition[] = [];\n  private _action: RollupActionType = RollupActionType.SATISFIED;\n  private _consideration: RollupConsiderationType = RollupConsiderationType.ALL;\n  private _minimumCount: number = 0;\n  private _minimumPercent: number = 0;\n\n  /**\n   * Constructor for RollupRule\n   * @param {RollupActionType} action - The action to take when the rule conditions are met\n   * @param {RollupConsiderationType} consideration - How to consider child activities\n   * @param {number} minimumCount - The minimum count for AT_LEAST_COUNT consideration\n   * @param {number} minimumPercent - The minimum percent for AT_LEAST_PERCENT consideration\n   */\n  constructor(\n    action: RollupActionType = RollupActionType.SATISFIED,\n    consideration: RollupConsiderationType = RollupConsiderationType.ALL,\n    minimumCount: number = 0,\n    minimumPercent: number = 0,\n  ) {\n    super(\"rollupRule\");\n    this._action = action;\n    this._consideration = consideration;\n    this._minimumCount = minimumCount;\n    this._minimumPercent = minimumPercent;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._conditions = [];\n  }\n\n  /**\n   * Getter for conditions\n   * @return {RollupCondition[]}\n   */\n  get conditions(): RollupCondition[] {\n    return this._conditions;\n  }\n\n  /**\n   * Add a condition to the rule\n   * @param {RollupCondition} condition - The condition to add\n   */\n  addCondition(condition: RollupCondition): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(condition instanceof RollupCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._conditions.push(condition);\n  }\n\n  /**\n   * Remove a condition from the rule\n   * @param {RollupCondition} condition - The condition to remove\n   * @return {boolean} - True if the condition was removed, false otherwise\n   */\n  removeCondition(condition: RollupCondition): boolean {\n    const index = this._conditions.indexOf(condition);\n    if (index !== -1) {\n      this._conditions.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for action\n   * @return {RollupActionType}\n   */\n  get action(): RollupActionType {\n    return this._action;\n  }\n\n  /**\n   * Setter for action\n   * @param {RollupActionType} action\n   */\n  set action(action: RollupActionType) {\n    this._action = action;\n  }\n\n  /**\n   * Getter for consideration\n   * @return {RollupConsiderationType}\n   */\n  get consideration(): RollupConsiderationType {\n    return this._consideration;\n  }\n\n  /**\n   * Setter for consideration\n   * @param {RollupConsiderationType} consideration\n   */\n  set consideration(consideration: RollupConsiderationType) {\n    this._consideration = consideration;\n  }\n\n  /**\n   * Getter for minimumCount\n   * @return {number}\n   */\n  get minimumCount(): number {\n    return this._minimumCount;\n  }\n\n  /**\n   * Setter for minimumCount\n   * @param {number} minimumCount\n   */\n  set minimumCount(minimumCount: number) {\n    if (minimumCount >= 0) {\n      this._minimumCount = minimumCount;\n    }\n  }\n\n  /**\n   * Getter for minimumPercent\n   * @return {number}\n   */\n  get minimumPercent(): number {\n    return this._minimumPercent;\n  }\n\n  /**\n   * Setter for minimumPercent\n   * @param {number} minimumPercent\n   */\n  set minimumPercent(minimumPercent: number) {\n    if (minimumPercent >= 0 && minimumPercent <= 100) {\n      this._minimumPercent = minimumPercent;\n    }\n  }\n\n  /**\n   * Evaluate the rule for a set of child activities\n   * @param {Activity[]} children - The child activities to evaluate the rule for\n   * @return {boolean} - True if the rule conditions are met, false otherwise\n   */\n  evaluate(children: Activity[]): boolean {\n    if (children.length === 0) {\n      return false;\n    }\n\n    // Filter children that meet all conditions\n    const matchingChildren = children.filter((child) => {\n      return this._conditions.every((condition) => condition.evaluate(child));\n    });\n\n    // Apply consideration\n    switch (this._consideration) {\n      case RollupConsiderationType.ALL:\n        return matchingChildren.length === children.length;\n      case RollupConsiderationType.ANY:\n        return matchingChildren.length > 0;\n      case RollupConsiderationType.NONE:\n        return matchingChildren.length === 0;\n      case RollupConsiderationType.AT_LEAST_COUNT:\n        return matchingChildren.length >= this._minimumCount;\n      case RollupConsiderationType.AT_LEAST_PERCENT: {\n        const percent = (matchingChildren.length / children.length) * 100;\n        return percent >= this._minimumPercent;\n      }\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RollupRule\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      conditions: this._conditions,\n      action: this._action,\n      consideration: this._consideration,\n      minimumCount: this._minimumCount,\n      minimumPercent: this._minimumPercent,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a collection of rollup rules\n */\nexport class RollupRules extends BaseCMI {\n  private _rules: RollupRule[] = [];\n\n  /**\n   * Constructor for RollupRules\n   */\n  constructor() {\n    super(\"rollupRules\");\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._rules = [];\n  }\n\n  /**\n   * Getter for rules\n   * @return {RollupRule[]}\n   */\n  get rules(): RollupRule[] {\n    return this._rules;\n  }\n\n  /**\n   * Add a rule\n   * @param {RollupRule} rule - The rule to add\n   */\n  addRule(rule: RollupRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof RollupRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".rules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._rules.push(rule);\n  }\n\n  /**\n   * Remove a rule\n   * @param {RollupRule} rule - The rule to remove\n   * @return {boolean} - True if the rule was removed, false otherwise\n   */\n  removeRule(rule: RollupRule): boolean {\n    const index = this._rules.indexOf(rule);\n    if (index !== -1) {\n      this._rules.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Process rollup for an activity\n   * @param {Activity} activity - The activity to process rollup for\n   */\n  processRollup(activity: Activity): void {\n    if (!activity || activity.children.length === 0) {\n      return;\n    }\n\n    const children = activity.getAvailableChildren();\n    let completionRollup = false;\n    let successRollup = false;\n\n    // First, check if we should use measure rollup (RB.1.2.a)\n    if (activity.sequencingControls.rollupObjectiveSatisfied) {\n      const measureRollupResult = this._objectiveRollupUsingMeasure(activity, children);\n      if (measureRollupResult !== null) {\n        successRollup = true;\n        // Skip rule-based rollup if measure rollup was successful\n      }\n    }\n\n    // Process each rule (RB.1.2.b)\n    if (!successRollup) {\n      for (const rule of this._rules) {\n        if (rule.evaluate(children)) {\n          switch (rule.action) {\n            case RollupActionType.SATISFIED:\n              activity.successStatus = SuccessStatus.PASSED;\n              successRollup = true;\n              break;\n            case RollupActionType.NOT_SATISFIED:\n              activity.successStatus = SuccessStatus.FAILED;\n              successRollup = true;\n              break;\n            case RollupActionType.COMPLETED:\n              activity.completionStatus = CompletionStatus.COMPLETED;\n              activity.isCompleted = true;\n              completionRollup = true;\n              break;\n            case RollupActionType.INCOMPLETE:\n              activity.completionStatus = CompletionStatus.INCOMPLETE;\n              activity.isCompleted = false;\n              completionRollup = true;\n              break;\n          }\n        }\n      }\n    }\n\n    // If no rules applied for completion, use default rollup\n    if (!completionRollup) {\n      this._defaultCompletionRollup(activity, children);\n    }\n\n    // If no rules applied for success, use default rollup (RB.1.2.c)\n    if (!successRollup) {\n      this._defaultSuccessRollup(activity, children);\n    }\n  }\n\n  /**\n   * Default completion rollup\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @private\n   */\n  private _defaultCompletionRollup(activity: Activity, children: Activity[]): void {\n    // If all children are completed, mark the parent as completed\n    const allCompleted = children.every((child) => child.isCompleted);\n    if (allCompleted) {\n      activity.completionStatus = CompletionStatus.COMPLETED;\n      activity.isCompleted = true;\n    } else {\n      // If any child is incomplete, mark the parent as incomplete\n      const anyIncomplete = children.some(\n        (child) => child.completionStatus === CompletionStatus.INCOMPLETE,\n      );\n      if (anyIncomplete) {\n        activity.completionStatus = CompletionStatus.INCOMPLETE;\n        activity.isCompleted = false;\n      }\n    }\n  }\n\n  /**\n   * Objective Rollup Using Measure Process (RB.1.2.a)\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @return {boolean | null} - True if satisfied, false if not satisfied, null if measure rollup not applicable\n   * @private\n   */\n  private _objectiveRollupUsingMeasure(activity: Activity, children: Activity[]): boolean | null {\n    // Check if objective measure weight is properly configured\n    const objectiveMeasureWeight = activity.sequencingControls.objectiveMeasureWeight;\n    if (objectiveMeasureWeight <= 0) {\n      return null; // Measure rollup not applicable\n    }\n\n    // Calculate weighted average of child objective measures\n    let totalWeight = 0;\n    let weightedSum = 0;\n    let hasValidMeasures = false;\n\n    for (const child of children) {\n      // Only include children that should contribute to rollup\n      if (!child.sequencingControls.rollupObjectiveSatisfied) {\n        continue;\n      }\n\n      // Check if child has a valid objective measure\n      if (child.objectiveMeasureStatus && child.objectiveMeasureStatus === true) {\n        const childWeight = child.sequencingControls.objectiveMeasureWeight;\n        if (childWeight > 0) {\n          weightedSum += child.objectiveNormalizedMeasure * childWeight;\n          totalWeight += childWeight;\n          hasValidMeasures = true;\n        }\n      }\n    }\n\n    // If no valid measures found, measure rollup is not applicable\n    if (!hasValidMeasures || totalWeight === 0) {\n      return null;\n    }\n\n    // Calculate the normalized measure for the parent activity\n    const normalizedMeasure = weightedSum / totalWeight;\n    activity.objectiveNormalizedMeasure = normalizedMeasure;\n    activity.objectiveMeasureStatus = true;\n\n    // Determine satisfaction based on scaled passing score\n    if (normalizedMeasure >= activity.scaledPassingScore) {\n      activity.successStatus = SuccessStatus.PASSED;\n      activity.objectiveSatisfiedStatus = true;\n      return true;\n    } else {\n      activity.successStatus = SuccessStatus.FAILED;\n      activity.objectiveSatisfiedStatus = false;\n      return false;\n    }\n  }\n\n  /**\n   * Default success rollup\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @private\n   */\n  private _defaultSuccessRollup(activity: Activity, children: Activity[]): void {\n    // If all children are satisfied, mark the parent as satisfied\n    const allSatisfied = children.every((child) => child.successStatus === SuccessStatus.PASSED);\n    if (allSatisfied) {\n      activity.successStatus = SuccessStatus.PASSED;\n    } else {\n      // If any child is not satisfied, mark the parent as not satisfied\n      const anyNotSatisfied = children.some(\n        (child) => child.successStatus === SuccessStatus.FAILED,\n      );\n      if (anyNotSatisfied) {\n        activity.successStatus = SuccessStatus.FAILED;\n      }\n    }\n  }\n\n  /**\n   * toJSON for RollupRules\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      rules: this._rules,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","const ValidLanguages: string[] = [\n  \"aa\",\n  \"ab\",\n  \"ae\",\n  \"af\",\n  \"ak\",\n  \"am\",\n  \"an\",\n  \"ar\",\n  \"as\",\n  \"av\",\n  \"ay\",\n  \"az\",\n  \"ba\",\n  \"be\",\n  \"bg\",\n  \"bh\",\n  \"bi\",\n  \"bm\",\n  \"bn\",\n  \"bo\",\n  \"br\",\n  \"bs\",\n  \"ca\",\n  \"ce\",\n  \"ch\",\n  \"co\",\n  \"cr\",\n  \"cs\",\n  \"cu\",\n  \"cv\",\n  \"cy\",\n  \"da\",\n  \"de\",\n  \"dv\",\n  \"dz\",\n  \"ee\",\n  \"el\",\n  \"en\",\n  \"eo\",\n  \"es\",\n  \"et\",\n  \"eu\",\n  \"fa\",\n  \"ff\",\n  \"fi\",\n  \"fj\",\n  \"fo\",\n  \"fr\",\n  \"fy\",\n  \"ga\",\n  \"gd\",\n  \"gl\",\n  \"gn\",\n  \"gu\",\n  \"gv\",\n  \"ha\",\n  \"he\",\n  \"hi\",\n  \"ho\",\n  \"hr\",\n  \"ht\",\n  \"hu\",\n  \"hy\",\n  \"hz\",\n  \"ia\",\n  \"id\",\n  \"ie\",\n  \"ig\",\n  \"ii\",\n  \"ik\",\n  \"io\",\n  \"is\",\n  \"it\",\n  \"iu\",\n  \"ja\",\n  \"jv\",\n  \"ka\",\n  \"kg\",\n  \"ki\",\n  \"kj\",\n  \"kk\",\n  \"kl\",\n  \"km\",\n  \"kn\",\n  \"ko\",\n  \"kr\",\n  \"ks\",\n  \"ku\",\n  \"kv\",\n  \"kw\",\n  \"ky\",\n  \"la\",\n  \"lb\",\n  \"lg\",\n  \"li\",\n  \"ln\",\n  \"lo\",\n  \"lt\",\n  \"lu\",\n  \"lv\",\n  \"mg\",\n  \"mh\",\n  \"mi\",\n  \"mk\",\n  \"ml\",\n  \"mn\",\n  \"mo\",\n  \"mr\",\n  \"ms\",\n  \"mt\",\n  \"my\",\n  \"na\",\n  \"nb\",\n  \"nd\",\n  \"ne\",\n  \"ng\",\n  \"nl\",\n  \"nn\",\n  \"no\",\n  \"nr\",\n  \"nv\",\n  \"ny\",\n  \"oc\",\n  \"oj\",\n  \"om\",\n  \"or\",\n  \"os\",\n  \"pa\",\n  \"pi\",\n  \"pl\",\n  \"ps\",\n  \"pt\",\n  \"qu\",\n  \"rm\",\n  \"rn\",\n  \"ro\",\n  \"ru\",\n  \"rw\",\n  \"sa\",\n  \"sc\",\n  \"sd\",\n  \"se\",\n  \"sg\",\n  \"sh\",\n  \"si\",\n  \"sk\",\n  \"sl\",\n  \"sm\",\n  \"sn\",\n  \"so\",\n  \"sq\",\n  \"sr\",\n  \"ss\",\n  \"st\",\n  \"su\",\n  \"sv\",\n  \"sw\",\n  \"ta\",\n  \"te\",\n  \"tg\",\n  \"th\",\n  \"ti\",\n  \"tk\",\n  \"tl\",\n  \"tn\",\n  \"to\",\n  \"tr\",\n  \"ts\",\n  \"tt\",\n  \"tw\",\n  \"ty\",\n  \"ug\",\n  \"uk\",\n  \"ur\",\n  \"uz\",\n  \"ve\",\n  \"vi\",\n  \"vo\",\n  \"wa\",\n  \"wo\",\n  \"xh\",\n  \"yi\",\n  \"yo\",\n  \"za\",\n  \"zh\",\n  \"zu\",\n  \"aar\",\n  \"abk\",\n  \"ave\",\n  \"afr\",\n  \"aka\",\n  \"amh\",\n  \"arg\",\n  \"ara\",\n  \"asm\",\n  \"ava\",\n  \"aym\",\n  \"aze\",\n  \"bak\",\n  \"bel\",\n  \"bul\",\n  \"bih\",\n  \"bis\",\n  \"bam\",\n  \"ben\",\n  \"tib\",\n  \"bod\",\n  \"bre\",\n  \"bos\",\n  \"cat\",\n  \"che\",\n  \"cha\",\n  \"cos\",\n  \"cre\",\n  \"cze\",\n  \"ces\",\n  \"chu\",\n  \"chv\",\n  \"wel\",\n  \"cym\",\n  \"dan\",\n  \"ger\",\n  \"deu\",\n  \"div\",\n  \"dzo\",\n  \"ewe\",\n  \"gre\",\n  \"ell\",\n  \"eng\",\n  \"epo\",\n  \"spa\",\n  \"est\",\n  \"baq\",\n  \"eus\",\n  \"per\",\n  \"fas\",\n  \"ful\",\n  \"fin\",\n  \"fij\",\n  \"fao\",\n  \"fre\",\n  \"fra\",\n  \"fry\",\n  \"gle\",\n  \"gla\",\n  \"glg\",\n  \"grn\",\n  \"guj\",\n  \"glv\",\n  \"hau\",\n  \"heb\",\n  \"hin\",\n  \"hmo\",\n  \"hrv\",\n  \"hat\",\n  \"hun\",\n  \"arm\",\n  \"hye\",\n  \"her\",\n  \"ina\",\n  \"ind\",\n  \"ile\",\n  \"ibo\",\n  \"iii\",\n  \"ipk\",\n  \"ido\",\n  \"ice\",\n  \"isl\",\n  \"ita\",\n  \"iku\",\n  \"jpn\",\n  \"jav\",\n  \"geo\",\n  \"kat\",\n  \"kon\",\n  \"kik\",\n  \"kua\",\n  \"kaz\",\n  \"kal\",\n  \"khm\",\n  \"kan\",\n  \"kor\",\n  \"kau\",\n  \"kas\",\n  \"kur\",\n  \"kom\",\n  \"cor\",\n  \"kir\",\n  \"lat\",\n  \"ltz\",\n  \"lug\",\n  \"lim\",\n  \"lin\",\n  \"lao\",\n  \"lit\",\n  \"lub\",\n  \"lav\",\n  \"mlg\",\n  \"mah\",\n  \"mao\",\n  \"mri\",\n  \"mac\",\n  \"mkd\",\n  \"mal\",\n  \"mon\",\n  \"mol\",\n  \"mar\",\n  \"may\",\n  \"msa\",\n  \"mlt\",\n  \"bur\",\n  \"mya\",\n  \"nau\",\n  \"nob\",\n  \"nde\",\n  \"nep\",\n  \"ndo\",\n  \"dut\",\n  \"nld\",\n  \"nno\",\n  \"nor\",\n  \"nbl\",\n  \"nav\",\n  \"nya\",\n  \"oci\",\n  \"oji\",\n  \"orm\",\n  \"ori\",\n  \"oss\",\n  \"pan\",\n  \"pli\",\n  \"pol\",\n  \"pus\",\n  \"por\",\n  \"que\",\n  \"roh\",\n  \"run\",\n  \"rum\",\n  \"ron\",\n  \"rus\",\n  \"kin\",\n  \"san\",\n  \"srd\",\n  \"snd\",\n  \"sme\",\n  \"sag\",\n  \"slo\",\n  \"sin\",\n  \"slk\",\n  \"slv\",\n  \"smo\",\n  \"sna\",\n  \"som\",\n  \"alb\",\n  \"sqi\",\n  \"srp\",\n  \"ssw\",\n  \"sot\",\n  \"sun\",\n  \"swe\",\n  \"swa\",\n  \"tam\",\n  \"tel\",\n  \"tgk\",\n  \"tha\",\n  \"tir\",\n  \"tuk\",\n  \"tgl\",\n  \"tsn\",\n  \"ton\",\n  \"tur\",\n  \"tso\",\n  \"tat\",\n  \"twi\",\n  \"tah\",\n  \"uig\",\n  \"ukr\",\n  \"urd\",\n  \"uzb\",\n  \"ven\",\n  \"vie\",\n  \"vol\",\n  \"wln\",\n  \"wol\",\n  \"xho\",\n  \"yid\",\n  \"yor\",\n  \"zha\",\n  \"chi\",\n  \"zho\",\n  \"zul\",\n];\nexport default ValidLanguages;\n","import { BaseCMI } from \"../../common/base_cmi\";\n\n/**\n * Enum for selection timing\n */\nexport enum SelectionTiming {\n  NEVER = \"never\",\n  ONCE = \"once\",\n  ON_EACH_NEW_ATTEMPT = \"onEachNewAttempt\",\n}\n\n/**\n * Enum for randomization timing\n */\nexport enum RandomizationTiming {\n  NEVER = \"never\",\n  ONCE = \"once\",\n  ON_EACH_NEW_ATTEMPT = \"onEachNewAttempt\",\n}\n\n/**\n * Class representing SCORM 2004 sequencing controls\n */\nexport class SequencingControls extends BaseCMI {\n  // Sequencing Control Modes\n  private _enabled: boolean = true;\n  private _choice: boolean = true;\n  private _choiceExit: boolean = true;\n  private _flow: boolean = false;\n  private _forwardOnly: boolean = false;\n  private _useCurrentAttemptObjectiveInfo: boolean = true;\n  private _useCurrentAttemptProgressInfo: boolean = true;\n\n  // Constrain Choice Controls\n  private _preventActivation: boolean = false;\n  private _constrainChoice: boolean = false;\n  // Rule-driven traversal limiter (e.g., post-condition stopForwardTraversal)\n  private _stopForwardTraversal: boolean = false;\n\n  // Rollup Controls\n  private _rollupObjectiveSatisfied: boolean = true;\n  private _rollupProgressCompletion: boolean = true;\n  private _objectiveMeasureWeight: number = 1.0;\n\n  // Selection Controls\n  private _selectionTiming: SelectionTiming = SelectionTiming.NEVER;\n  private _selectCount: number | null = null;\n  private _selectionCountStatus: boolean = false;\n  private _randomizeChildren: boolean = false;\n\n  // Randomization Controls\n  private _randomizationTiming: RandomizationTiming = RandomizationTiming.NEVER;\n  private _reorderChildren: boolean = false;\n\n  /**\n   * Constructor for SequencingControls\n   */\n  constructor() {\n    super(\"sequencingControls\");\n  }\n\n  /**\n   * Reset the sequencing controls to their default values\n   */\n  reset() {\n    this._initialized = false;\n    this._enabled = true;\n    this._choice = true;\n    this._choiceExit = true;\n    this._flow = false;\n    this._forwardOnly = false;\n    this._useCurrentAttemptObjectiveInfo = true;\n    this._useCurrentAttemptProgressInfo = true;\n    this._preventActivation = false;\n    this._constrainChoice = false;\n    this._stopForwardTraversal = false;\n    this._rollupObjectiveSatisfied = true;\n    this._rollupProgressCompletion = true;\n    this._objectiveMeasureWeight = 1.0;\n    this._selectionTiming = SelectionTiming.NEVER;\n    this._selectCount = null;\n    this._selectionCountStatus = false;\n    this._randomizeChildren = false;\n    this._randomizationTiming = RandomizationTiming.NEVER;\n    this._reorderChildren = false;\n  }\n\n  /**\n   * Getter for enabled\n   * @return {boolean}\n   */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  /**\n   * Setter for enabled\n   * @param {boolean} enabled\n   */\n  set enabled(enabled: boolean) {\n    this._enabled = enabled;\n  }\n\n  /**\n   * Getter for choice\n   * @return {boolean}\n   */\n  get choice(): boolean {\n    return this._choice;\n  }\n\n  /**\n   * Setter for choice\n   * @param {boolean} choice\n   */\n  set choice(choice: boolean) {\n    this._choice = choice;\n  }\n\n  /**\n   * Getter for choiceExit\n   * @return {boolean}\n   */\n  get choiceExit(): boolean {\n    return this._choiceExit;\n  }\n\n  /**\n   * Setter for choiceExit\n   * @param {boolean} choiceExit\n   */\n  set choiceExit(choiceExit: boolean) {\n    this._choiceExit = choiceExit;\n  }\n\n  /**\n   * Getter for flow\n   * @return {boolean}\n   */\n  get flow(): boolean {\n    return this._flow;\n  }\n\n  /**\n   * Setter for flow\n   * @param {boolean} flow\n   */\n  set flow(flow: boolean) {\n    this._flow = flow;\n  }\n\n  /**\n   * Getter for forwardOnly\n   * @return {boolean}\n   */\n  get forwardOnly(): boolean {\n    return this._forwardOnly;\n  }\n\n  /**\n   * Setter for forwardOnly\n   * @param {boolean} forwardOnly\n   */\n  set forwardOnly(forwardOnly: boolean) {\n    this._forwardOnly = forwardOnly;\n  }\n\n  /**\n   * Getter for useCurrentAttemptObjectiveInfo\n   * @return {boolean}\n   */\n  get useCurrentAttemptObjectiveInfo(): boolean {\n    return this._useCurrentAttemptObjectiveInfo;\n  }\n\n  /**\n   * Setter for useCurrentAttemptObjectiveInfo\n   * @param {boolean} useCurrentAttemptObjectiveInfo\n   */\n  set useCurrentAttemptObjectiveInfo(useCurrentAttemptObjectiveInfo: boolean) {\n    this._useCurrentAttemptObjectiveInfo = useCurrentAttemptObjectiveInfo;\n  }\n\n  /**\n   * Getter for useCurrentAttemptProgressInfo\n   * @return {boolean}\n   */\n  get useCurrentAttemptProgressInfo(): boolean {\n    return this._useCurrentAttemptProgressInfo;\n  }\n\n  /**\n   * Setter for useCurrentAttemptProgressInfo\n   * @param {boolean} useCurrentAttemptProgressInfo\n   */\n  set useCurrentAttemptProgressInfo(useCurrentAttemptProgressInfo: boolean) {\n    this._useCurrentAttemptProgressInfo = useCurrentAttemptProgressInfo;\n  }\n\n  /**\n   * Getter for preventActivation\n   * @return {boolean}\n   */\n  get preventActivation(): boolean {\n    return this._preventActivation;\n  }\n\n  /**\n   * Setter for preventActivation\n   * @param {boolean} preventActivation\n   */\n  set preventActivation(preventActivation: boolean) {\n    this._preventActivation = preventActivation;\n  }\n\n  /**\n   * Getter for constrainChoice\n   * @return {boolean}\n   */\n  get constrainChoice(): boolean {\n    return this._constrainChoice;\n  }\n\n  /**\n   * Setter for constrainChoice\n   * @param {boolean} constrainChoice\n   */\n  set constrainChoice(constrainChoice: boolean) {\n    this._constrainChoice = constrainChoice;\n  }\n\n  /**\n   * Getter for stopForwardTraversal\n   * @return {boolean}\n   */\n  get stopForwardTraversal(): boolean {\n    return this._stopForwardTraversal;\n  }\n\n  /**\n   * Setter for stopForwardTraversal\n   * @param {boolean} stopForwardTraversal\n   */\n  set stopForwardTraversal(stopForwardTraversal: boolean) {\n    this._stopForwardTraversal = stopForwardTraversal;\n  }\n\n  /**\n   * Getter for rollupObjectiveSatisfied\n   * @return {boolean}\n   */\n  get rollupObjectiveSatisfied(): boolean {\n    return this._rollupObjectiveSatisfied;\n  }\n\n  /**\n   * Setter for rollupObjectiveSatisfied\n   * @param {boolean} rollupObjectiveSatisfied\n   */\n  set rollupObjectiveSatisfied(rollupObjectiveSatisfied: boolean) {\n    this._rollupObjectiveSatisfied = rollupObjectiveSatisfied;\n  }\n\n  /**\n   * Getter for rollupProgressCompletion\n   * @return {boolean}\n   */\n  get rollupProgressCompletion(): boolean {\n    return this._rollupProgressCompletion;\n  }\n\n  /**\n   * Setter for rollupProgressCompletion\n   * @param {boolean} rollupProgressCompletion\n   */\n  set rollupProgressCompletion(rollupProgressCompletion: boolean) {\n    this._rollupProgressCompletion = rollupProgressCompletion;\n  }\n\n  /**\n   * Getter for objectiveMeasureWeight\n   * @return {number}\n   */\n  get objectiveMeasureWeight(): number {\n    return this._objectiveMeasureWeight;\n  }\n\n  /**\n   * Setter for objectiveMeasureWeight\n   * @param {number} objectiveMeasureWeight\n   */\n  set objectiveMeasureWeight(objectiveMeasureWeight: number) {\n    // According to SCORM 2004, weight must be >= 0 but there's no upper limit\n    if (objectiveMeasureWeight >= 0) {\n      this._objectiveMeasureWeight = objectiveMeasureWeight;\n    }\n  }\n\n  /**\n   * Check if choice navigation is allowed\n   * @return {boolean} - True if choice navigation is allowed, false otherwise\n   */\n  isChoiceNavigationAllowed(): boolean {\n    return this._enabled && !this._constrainChoice;\n  }\n\n  /**\n   * Check if flow navigation is allowed\n   * @return {boolean} - True if flow navigation is allowed, false otherwise\n   */\n  isFlowNavigationAllowed(): boolean {\n    return this._enabled && this._flow;\n  }\n\n  /**\n   * Check if forward navigation is allowed\n   * @return {boolean} - True if forward navigation is allowed, false otherwise\n   */\n  isForwardNavigationAllowed(): boolean {\n    // Forward navigation (Continue request) is only valid when flow mode is\n    // enabled. The forwardOnly flag simply restricts backward navigation and\n    // does not affect the ability to move forward when flow is disabled.\n    return this._enabled && this._flow;\n  }\n\n  /**\n   * Check if backward navigation is allowed\n   * @return {boolean} - True if backward navigation is allowed, false otherwise\n   */\n  isBackwardNavigationAllowed(): boolean {\n    // Previous navigation is also part of flow based navigation and should only\n    // be permitted when flow mode is enabled and forwardOnly does not restrict\n    // going backwards.\n    return this._enabled && this._flow && !this._forwardOnly;\n  }\n\n  /**\n   * Getter for selectionTiming\n   * @return {SelectionTiming}\n   */\n  get selectionTiming(): SelectionTiming {\n    return this._selectionTiming;\n  }\n\n  /**\n   * Setter for selectionTiming\n   * @param {SelectionTiming} selectionTiming\n   */\n  set selectionTiming(selectionTiming: SelectionTiming) {\n    this._selectionTiming = selectionTiming;\n  }\n\n  /**\n   * Getter for selectCount\n   * @return {number | null}\n   */\n  get selectCount(): number | null {\n    return this._selectCount;\n  }\n\n  /**\n   * Setter for selectCount\n   * @param {number | null} selectCount\n   */\n  set selectCount(selectCount: number | null) {\n    if (selectCount === null || selectCount > 0) {\n      this._selectCount = selectCount;\n    }\n  }\n\n  /**\n   * Getter for selectionCountStatus\n   * @return {boolean}\n   */\n  get selectionCountStatus(): boolean {\n    return this._selectionCountStatus;\n  }\n\n  /**\n   * Setter for selectionCountStatus\n   * @param {boolean} selectionCountStatus\n   */\n  set selectionCountStatus(selectionCountStatus: boolean) {\n    this._selectionCountStatus = selectionCountStatus;\n  }\n\n  /**\n   * Getter for randomizeChildren\n   * @return {boolean}\n   */\n  get randomizeChildren(): boolean {\n    return this._randomizeChildren;\n  }\n\n  /**\n   * Setter for randomizeChildren\n   * @param {boolean} randomizeChildren\n   */\n  set randomizeChildren(randomizeChildren: boolean) {\n    this._randomizeChildren = randomizeChildren;\n  }\n\n  /**\n   * Getter for randomizationTiming\n   * @return {RandomizationTiming}\n   */\n  get randomizationTiming(): RandomizationTiming {\n    return this._randomizationTiming;\n  }\n\n  /**\n   * Setter for randomizationTiming\n   * @param {RandomizationTiming} randomizationTiming\n   */\n  set randomizationTiming(randomizationTiming: RandomizationTiming) {\n    this._randomizationTiming = randomizationTiming;\n  }\n\n  /**\n   * Getter for reorderChildren\n   * @return {boolean}\n   */\n  get reorderChildren(): boolean {\n    return this._reorderChildren;\n  }\n\n  /**\n   * Setter for reorderChildren\n   * @param {boolean} reorderChildren\n   */\n  set reorderChildren(reorderChildren: boolean) {\n    this._reorderChildren = reorderChildren;\n  }\n\n  /**\n   * toJSON for SequencingControls\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      enabled: this._enabled,\n      choice: this._choice,\n      choiceExit: this._choiceExit,\n      flow: this._flow,\n      forwardOnly: this._forwardOnly,\n      useCurrentAttemptObjectiveInfo: this._useCurrentAttemptObjectiveInfo,\n      useCurrentAttemptProgressInfo: this._useCurrentAttemptProgressInfo,\n      preventActivation: this._preventActivation,\n      constrainChoice: this._constrainChoice,\n      stopForwardTraversal: this._stopForwardTraversal,\n      rollupObjectiveSatisfied: this._rollupObjectiveSatisfied,\n      rollupProgressCompletion: this._rollupProgressCompletion,\n      objectiveMeasureWeight: this._objectiveMeasureWeight,\n      selectionTiming: this._selectionTiming,\n      selectCount: this._selectCount,\n      selectionCountStatus: this._selectionCountStatus,\n      randomizeChildren: this._randomizeChildren,\n      randomizationTiming: this._randomizationTiming,\n      reorderChildren: this._reorderChildren,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { scorm2004_regex } from \"../../../constants/regex\";\nimport { check2004ValidFormat } from \"../validation\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { CompletionStatus, SuccessStatus } from \"../../../constants/enums\";\nimport { SequencingControls } from \"./sequencing_controls\";\nimport { SequencingRules } from \"./sequencing_rules\";\nimport { RollupRules } from \"./rollup_rules\";\nimport { validateISO8601Duration } from \"../../../utilities\";\n\n/**\n * Class representing a single activity in the SCORM 2004 activity tree\n */\nexport class Activity extends BaseCMI {\n  private _id: string = \"\";\n  private _title: string = \"\";\n  private _children: Activity[] = [];\n  private _parent: Activity | null = null;\n  private _isVisible: boolean = true;\n  private _isActive: boolean = false;\n  private _isSuspended: boolean = false;\n  private _isCompleted: boolean = false;\n  private _completionStatus: CompletionStatus = CompletionStatus.UNKNOWN;\n  private _successStatus: SuccessStatus = SuccessStatus.UNKNOWN;\n  private _attemptCount: number = 0;\n  private _attemptCompletionAmount: number = 0;\n  private _attemptAbsoluteDuration: string = \"PT0H0M0S\";\n  private _attemptExperiencedDuration: string = \"PT0H0M0S\";\n  private _activityAbsoluteDuration: string = \"PT0H0M0S\";\n  private _activityExperiencedDuration: string = \"PT0H0M0S\";\n  private _objectiveSatisfiedStatus: boolean = false;\n  private _objectiveMeasureStatus: boolean = false;\n  private _objectiveNormalizedMeasure: number = 0;\n  private _scaledPassingScore: number = 0.7; // Default passing score\n  private _progressMeasure: number = 0;\n  private _progressMeasureStatus: boolean = false;\n  private _location: string = \"\";\n  private _attemptAbsoluteStartTime: string = \"\";\n  private _learnerPrefs: any = null;\n  private _activityAttemptActive: boolean = false;\n  private _isHiddenFromChoice: boolean = false;\n  private _isAvailable: boolean = true;\n  private _attemptLimit: number | null = null;\n  private _attemptAbsoluteDurationLimit: string | null = null;\n  private _activityAbsoluteDurationLimit: string | null = null;\n  private _timeLimitAction: string | null = null;\n  private _timeLimitDuration: string | null = null;\n  private _beginTimeLimit: string | null = null;\n  private _endTimeLimit: string | null = null;\n  private _sequencingControls: SequencingControls;\n  private _sequencingRules: SequencingRules;\n  private _rollupRules: RollupRules;\n  private _processedChildren: Activity[] | null = null;\n  private _isNewAttempt: boolean = false;\n\n  /**\n   * Constructor for Activity\n   * @param {string} id - The unique identifier for this activity\n   * @param {string} title - The title of this activity\n   */\n  constructor(id: string = \"\", title: string = \"\") {\n    super(\"activity\");\n    this._id = id;\n    this._title = title;\n    this._sequencingControls = new SequencingControls();\n    this._sequencingRules = new SequencingRules();\n    this._rollupRules = new RollupRules();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    // Initialize children\n    for (const child of this._children) {\n      child.initialize();\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._isActive = false;\n    this._isSuspended = false;\n    this._isCompleted = false;\n    this._completionStatus = CompletionStatus.UNKNOWN;\n    this._successStatus = SuccessStatus.UNKNOWN;\n    this._attemptCount = 0;\n    this._attemptCompletionAmount = 0;\n    this._attemptAbsoluteDuration = \"PT0H0M0S\";\n    this._attemptExperiencedDuration = \"PT0H0M0S\";\n    this._activityAbsoluteDuration = \"PT0H0M0S\";\n    this._activityExperiencedDuration = \"PT0H0M0S\";\n    this._objectiveSatisfiedStatus = false;\n    this._objectiveMeasureStatus = false;\n    this._objectiveNormalizedMeasure = 0;\n    this._progressMeasure = 0;\n    this._progressMeasureStatus = false;\n    this._location = \"\";\n    this._attemptAbsoluteStartTime = \"\";\n    this._learnerPrefs = null;\n    this._activityAttemptActive = false;\n\n    // Reset children\n    for (const child of this._children) {\n      child.reset();\n    }\n  }\n\n  /**\n   * Getter for id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for title\n   * @return {string}\n   */\n  get title(): string {\n    return this._title;\n  }\n\n  /**\n   * Setter for title\n   * @param {string} title\n   */\n  set title(title: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".title\", title, scorm2004_regex.CMILangString250)\n    ) {\n      this._title = title;\n    }\n  }\n\n  /**\n   * Getter for children\n   * @return {Activity[]}\n   */\n  get children(): Activity[] {\n    return this._children;\n  }\n\n  /**\n   * Add a child activity to this activity\n   * @param {Activity} child - The child activity to add\n   */\n  addChild(child: Activity): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(child instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".children\",\n        scorm2004_errors.TYPE_MISMATCH as number\n      );\n    }\n    child._parent = this;\n    this._children.push(child);\n  }\n\n  /**\n   * Remove a child activity from this activity\n   * @param {Activity} child - The child activity to remove\n   * @return {boolean} - True if the child was removed, false otherwise\n   */\n  removeChild(child: Activity): boolean {\n    const index = this._children.indexOf(child);\n    if (index !== -1) {\n      this._children.splice(index, 1);\n      child._parent = null;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for parent\n   * @return {Activity | null}\n   */\n  get parent(): Activity | null {\n    return this._parent;\n  }\n\n  /**\n   * Getter for isVisible\n   * @return {boolean}\n   */\n  get isVisible(): boolean {\n    return this._isVisible;\n  }\n\n  /**\n   * Setter for isVisible\n   * @param {boolean} isVisible\n   */\n  set isVisible(isVisible: boolean) {\n    this._isVisible = isVisible;\n  }\n\n  /**\n   * Getter for isActive\n   * @return {boolean}\n   */\n  get isActive(): boolean {\n    return this._isActive;\n  }\n\n  /**\n   * Setter for isActive\n   * @param {boolean} isActive\n   */\n  set isActive(isActive: boolean) {\n    this._isActive = isActive;\n  }\n\n  /**\n   * Getter for isSuspended\n   * @return {boolean}\n   */\n  get isSuspended(): boolean {\n    return this._isSuspended;\n  }\n\n  /**\n   * Setter for isSuspended\n   * @param {boolean} isSuspended\n   */\n  set isSuspended(isSuspended: boolean) {\n    this._isSuspended = isSuspended;\n  }\n\n  /**\n   * Getter for isCompleted\n   * @return {boolean}\n   */\n  get isCompleted(): boolean {\n    return this._isCompleted;\n  }\n\n  /**\n   * Setter for isCompleted\n   * @param {boolean} isCompleted\n   */\n  set isCompleted(isCompleted: boolean) {\n    this._isCompleted = isCompleted;\n    // Update completion status based on boolean value\n    if (isCompleted) {\n      this._completionStatus = CompletionStatus.COMPLETED;\n    } else {\n      this._completionStatus = CompletionStatus.INCOMPLETE;\n    }\n  }\n\n  /**\n   * Getter for completionStatus\n   * @return {CompletionStatus}\n   */\n  get completionStatus(): CompletionStatus {\n    return this._completionStatus;\n  }\n\n  /**\n   * Setter for completionStatus\n   * @param {CompletionStatus} completionStatus\n   */\n  set completionStatus(completionStatus: CompletionStatus) {\n    this._completionStatus = completionStatus;\n    this._isCompleted = completionStatus === CompletionStatus.COMPLETED;\n  }\n\n  /**\n   * Getter for successStatus\n   * @return {SuccessStatus}\n   */\n  get successStatus(): SuccessStatus {\n    return this._successStatus;\n  }\n\n  /**\n   * Setter for successStatus\n   * @param {SuccessStatus} successStatus\n   */\n  set successStatus(successStatus: SuccessStatus) {\n    this._successStatus = successStatus;\n  }\n\n  /**\n   * Getter for attemptCount\n   * @return {number}\n   */\n  get attemptCount(): number {\n    return this._attemptCount;\n  }\n\n  /**\n   * Setter for attemptCount\n   * @param {number} value\n   */\n  set attemptCount(value: number) {\n    this._attemptCount = value;\n  }\n\n  /**\n   * Getter for attemptCompletionAmount\n   * @return {number}\n   */\n  get attemptCompletionAmount(): number {\n    return this._attemptCompletionAmount;\n  }\n\n  /**\n   * Setter for attemptCompletionAmount\n   * @param {number} value\n   */\n  set attemptCompletionAmount(value: number) {\n    this._attemptCompletionAmount = value;\n  }\n\n  /**\n   * Increment the attempt count\n   */\n  incrementAttemptCount(): void {\n    this._attemptCount++;\n    this._isNewAttempt = true;\n    // Reset processed children on new attempt if needed\n    const controls = this._sequencingControls;\n    if (\n      controls.selectionTiming === \"onEachNewAttempt\" ||\n      controls.randomizationTiming === \"onEachNewAttempt\"\n    ) {\n      this._processedChildren = null;\n    }\n  }\n\n  /**\n   * Getter for objectiveSatisfiedStatus\n   * @return {boolean}\n   */\n  get objectiveSatisfiedStatus(): boolean {\n    return this._objectiveSatisfiedStatus;\n  }\n\n  /**\n   * Setter for objectiveSatisfiedStatus\n   * @param {boolean} objectiveSatisfiedStatus\n   */\n  set objectiveSatisfiedStatus(objectiveSatisfiedStatus: boolean) {\n    this._objectiveSatisfiedStatus = objectiveSatisfiedStatus;\n    // Update success status based on objective satisfaction\n    if (objectiveSatisfiedStatus) {\n      this._successStatus = SuccessStatus.PASSED;\n    } else {\n      this._successStatus = SuccessStatus.FAILED;\n    }\n  }\n\n  /**\n   * Getter for objectiveMeasureStatus\n   * @return {boolean}\n   */\n  get objectiveMeasureStatus(): boolean {\n    return this._objectiveMeasureStatus;\n  }\n\n  /**\n   * Setter for objectiveMeasureStatus\n   * @param {boolean} objectiveMeasureStatus\n   */\n  set objectiveMeasureStatus(objectiveMeasureStatus: boolean) {\n    this._objectiveMeasureStatus = objectiveMeasureStatus;\n  }\n\n  /**\n   * Getter for objectiveNormalizedMeasure\n   * @return {number}\n   */\n  get objectiveNormalizedMeasure(): number {\n    return this._objectiveNormalizedMeasure;\n  }\n\n  /**\n   * Setter for objectiveNormalizedMeasure\n   * @param {number} objectiveNormalizedMeasure\n   */\n  set objectiveNormalizedMeasure(objectiveNormalizedMeasure: number) {\n    this._objectiveNormalizedMeasure = objectiveNormalizedMeasure;\n  }\n\n  /**\n   * Getter for scaledPassingScore\n   * @return {number}\n   */\n  get scaledPassingScore(): number {\n    return this._scaledPassingScore;\n  }\n\n  /**\n   * Setter for scaledPassingScore\n   * @param {number} scaledPassingScore\n   */\n  set scaledPassingScore(scaledPassingScore: number) {\n    if (scaledPassingScore >= -1 && scaledPassingScore <= 1) {\n      this._scaledPassingScore = scaledPassingScore;\n    }\n  }\n\n  /**\n   * Getter for progressMeasure\n   * @return {number}\n   */\n  get progressMeasure(): number {\n    return this._progressMeasure;\n  }\n\n  /**\n   * Setter for progressMeasure\n   * @param {number} progressMeasure\n   */\n  set progressMeasure(progressMeasure: number) {\n    this._progressMeasure = progressMeasure;\n  }\n\n  /**\n   * Getter for progressMeasureStatus\n   * @return {boolean}\n   */\n  get progressMeasureStatus(): boolean {\n    return this._progressMeasureStatus;\n  }\n\n  /**\n   * Setter for progressMeasureStatus\n   * @param {boolean} progressMeasureStatus\n   */\n  set progressMeasureStatus(progressMeasureStatus: boolean) {\n    this._progressMeasureStatus = progressMeasureStatus;\n  }\n\n  /**\n   * Getter for location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for location\n   * @param {string} location\n   */\n  set location(location: string) {\n    this._location = location;\n  }\n\n  /**\n   * Getter for attemptAbsoluteStartTime\n   * @return {string}\n   */\n  get attemptAbsoluteStartTime(): string {\n    return this._attemptAbsoluteStartTime;\n  }\n\n  /**\n   * Setter for attemptAbsoluteStartTime\n   * @param {string} attemptAbsoluteStartTime\n   */\n  set attemptAbsoluteStartTime(attemptAbsoluteStartTime: string) {\n    this._attemptAbsoluteStartTime = attemptAbsoluteStartTime;\n  }\n\n  /**\n   * Getter for learnerPrefs\n   * @return {any}\n   */\n  get learnerPrefs(): any {\n    return this._learnerPrefs;\n  }\n\n  /**\n   * Setter for learnerPrefs\n   * @param {any} learnerPrefs\n   */\n  set learnerPrefs(learnerPrefs: any) {\n    this._learnerPrefs = learnerPrefs;\n  }\n\n  /**\n   * Getter for activityAttemptActive\n   * @return {boolean}\n   */\n  get activityAttemptActive(): boolean {\n    return this._activityAttemptActive;\n  }\n\n  /**\n   * Setter for activityAttemptActive\n   * @param {boolean} activityAttemptActive\n   */\n  set activityAttemptActive(activityAttemptActive: boolean) {\n    this._activityAttemptActive = activityAttemptActive;\n  }\n\n  /**\n   * Getter for isHiddenFromChoice\n   * @return {boolean}\n   */\n  get isHiddenFromChoice(): boolean {\n    return this._isHiddenFromChoice;\n  }\n\n  /**\n   * Setter for isHiddenFromChoice\n   * @param {boolean} isHiddenFromChoice\n   */\n  set isHiddenFromChoice(isHiddenFromChoice: boolean) {\n    this._isHiddenFromChoice = isHiddenFromChoice;\n  }\n\n  /**\n   * Getter for isAvailable\n   * @return {boolean}\n   */\n  get isAvailable(): boolean {\n    return this._isAvailable;\n  }\n\n  /**\n   * Setter for isAvailable\n   * @param {boolean} isAvailable\n   */\n  set isAvailable(isAvailable: boolean) {\n    this._isAvailable = isAvailable;\n  }\n\n  /**\n   * Getter for attemptLimit\n   * @return {number | null}\n   */\n  get attemptLimit(): number | null {\n    return this._attemptLimit;\n  }\n\n  /**\n   * Setter for attemptLimit\n   * @param {number | null} attemptLimit\n   */\n  set attemptLimit(attemptLimit: number | null) {\n    this._attemptLimit = attemptLimit;\n  }\n\n  /**\n   * Check if attempt limit has been exceeded\n   * @return {boolean}\n   */\n  hasAttemptLimitExceeded(): boolean {\n    if (this._attemptLimit === null) {\n      return false;\n    }\n    return this._attemptCount >= this._attemptLimit;\n  }\n\n  /**\n   * Getter for timeLimitDuration\n   * @return {string | null}\n   */\n  get timeLimitDuration(): string | null {\n    return this._timeLimitDuration;\n  }\n\n  /**\n   * Setter for timeLimitDuration\n   * @param {string | null} timeLimitDuration\n   */\n  set timeLimitDuration(timeLimitDuration: string | null) {\n    this._timeLimitDuration = timeLimitDuration;\n  }\n\n  /**\n   * Getter for timeLimitAction\n   * @return {string | null}\n   */\n  get timeLimitAction(): string | null {\n    return this._timeLimitAction;\n  }\n\n  /**\n   * Setter for timeLimitAction\n   * @param {string | null} timeLimitAction\n   */\n  set timeLimitAction(timeLimitAction: string | null) {\n    this._timeLimitAction = timeLimitAction;\n  }\n\n  /**\n   * Getter for beginTimeLimit\n   * @return {string | null}\n   */\n  get beginTimeLimit(): string | null {\n    return this._beginTimeLimit;\n  }\n\n  /**\n   * Setter for beginTimeLimit\n   * @param {string | null} beginTimeLimit\n   */\n  set beginTimeLimit(beginTimeLimit: string | null) {\n    this._beginTimeLimit = beginTimeLimit;\n  }\n\n  /**\n   * Getter for endTimeLimit\n   * @return {string | null}\n   */\n  get endTimeLimit(): string | null {\n    return this._endTimeLimit;\n  }\n\n  /**\n   * Setter for endTimeLimit\n   * @param {string | null} endTimeLimit\n   */\n  set endTimeLimit(endTimeLimit: string | null) {\n    this._endTimeLimit = endTimeLimit;\n  }\n\n\n  /**\n   * Getter for attemptAbsoluteDurationLimit\n   * @return {string | null}\n   */\n  get attemptAbsoluteDurationLimit(): string | null {\n    return this._attemptAbsoluteDurationLimit;\n  }\n\n  /**\n   * Setter for attemptAbsoluteDurationLimit\n   * @param {string | null} attemptAbsoluteDurationLimit\n   */\n  set attemptAbsoluteDurationLimit(attemptAbsoluteDurationLimit: string | null) {\n    if (attemptAbsoluteDurationLimit !== null) {\n      if (!validateISO8601Duration(attemptAbsoluteDurationLimit, scorm2004_regex.CMITimespan)) {\n        throw new Scorm2004ValidationError(\n          this._cmi_element + \".attemptAbsoluteDurationLimit\",\n          scorm2004_errors.TYPE_MISMATCH as number\n        );\n      }\n    }\n    this._attemptAbsoluteDurationLimit = attemptAbsoluteDurationLimit;\n  }\n\n  /**\n   * Getter for attemptExperiencedDuration\n   * @return {string}\n   */\n  get attemptExperiencedDuration(): string {\n    return this._attemptExperiencedDuration;\n  }\n\n  /**\n   * Setter for attemptExperiencedDuration\n   * @param {string} attemptExperiencedDuration\n   */\n  set attemptExperiencedDuration(attemptExperiencedDuration: string) {\n    if (!validateISO8601Duration(attemptExperiencedDuration, scorm2004_regex.CMITimespan)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".attemptExperiencedDuration\",\n        scorm2004_errors.TYPE_MISMATCH as number\n      );\n    }\n    this._attemptExperiencedDuration = attemptExperiencedDuration;\n  }\n\n  /**\n   * Getter for activityAbsoluteDurationLimit\n   * @return {string | null}\n   */\n  get activityAbsoluteDurationLimit(): string | null {\n    return this._activityAbsoluteDurationLimit;\n  }\n\n  /**\n   * Setter for activityAbsoluteDurationLimit\n   * @param {string | null} activityAbsoluteDurationLimit\n   */\n  set activityAbsoluteDurationLimit(activityAbsoluteDurationLimit: string | null) {\n    if (activityAbsoluteDurationLimit !== null) {\n      if (!validateISO8601Duration(activityAbsoluteDurationLimit, scorm2004_regex.CMITimespan)) {\n        throw new Scorm2004ValidationError(\n          this._cmi_element + \".activityAbsoluteDurationLimit\",\n          scorm2004_errors.TYPE_MISMATCH as number\n        );\n      }\n    }\n    this._activityAbsoluteDurationLimit = activityAbsoluteDurationLimit;\n  }\n\n  /**\n   * Getter for activityExperiencedDuration\n   * @return {string}\n   */\n  get activityExperiencedDuration(): string {\n    return this._activityExperiencedDuration;\n  }\n\n  /**\n   * Setter for activityExperiencedDuration\n   * @param {string} activityExperiencedDuration\n   */\n  set activityExperiencedDuration(activityExperiencedDuration: string) {\n    if (!validateISO8601Duration(activityExperiencedDuration, scorm2004_regex.CMITimespan)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".activityExperiencedDuration\",\n        scorm2004_errors.TYPE_MISMATCH as number\n      );\n    }\n    this._activityExperiencedDuration = activityExperiencedDuration;\n  }\n\n  /**\n   * Getter for attemptAbsoluteDuration (alias for limit)\n   * @return {string}\n   */\n  get attemptAbsoluteDuration(): string {\n    return this._attemptAbsoluteDurationLimit || \"PT0H0M0S\";\n  }\n\n  /**\n   * Setter for attemptAbsoluteDuration\n   * @param {string} duration\n   */\n  set attemptAbsoluteDuration(duration: string) {\n    this._attemptAbsoluteDurationLimit = duration;\n  }\n\n  /**\n   * Getter for activityAbsoluteDuration (alias for limit)\n   * @return {string}\n   */\n  get activityAbsoluteDuration(): string {\n    return this._activityAbsoluteDurationLimit || \"PT0H0M0S\";\n  }\n\n  /**\n   * Setter for activityAbsoluteDuration\n   * @param {string} duration\n   */\n  set activityAbsoluteDuration(duration: string) {\n    this._activityAbsoluteDurationLimit = duration;\n  }\n\n\n  /**\n   * Getter for sequencingControls\n   * @return {SequencingControls}\n   */\n  get sequencingControls(): SequencingControls {\n    return this._sequencingControls;\n  }\n\n  /**\n   * Setter for sequencingControls\n   * @param {SequencingControls} sequencingControls\n   */\n  set sequencingControls(sequencingControls: SequencingControls) {\n    this._sequencingControls = sequencingControls;\n  }\n\n  /**\n   * Getter for sequencingRules\n   * @return {SequencingRules}\n   */\n  get sequencingRules(): SequencingRules {\n    return this._sequencingRules;\n  }\n\n  /**\n   * Setter for sequencingRules\n   * @param {SequencingRules} sequencingRules\n   */\n  set sequencingRules(sequencingRules: SequencingRules) {\n    this._sequencingRules = sequencingRules;\n  }\n\n  /**\n   * Getter for rollupRules\n   * @return {RollupRules}\n   */\n  get rollupRules(): RollupRules {\n    return this._rollupRules;\n  }\n\n  /**\n   * Setter for rollupRules\n   * @param {RollupRules} rollupRules\n   */\n  set rollupRules(rollupRules: RollupRules) {\n    this._rollupRules = rollupRules;\n  }\n\n  /**\n   * Get available children with selection and randomization applied\n   * @return {Activity[]}\n   */\n  getAvailableChildren(): Activity[] {\n    // If no children, return empty array\n    if (this._children.length === 0) {\n      return [];\n    }\n\n    // If processed children already exist and no new attempt, return them\n    if (this._processedChildren !== null) {\n      return this._processedChildren;\n    }\n\n    // If no processing has been done yet, return all children\n    // The sequencing process will call applySelectionAndRandomization when needed\n    return this._children;\n  }\n\n  /**\n   * Set the processed children (called by SelectionRandomization)\n   * @param {Activity[]} processedChildren\n   */\n  setProcessedChildren(processedChildren: Activity[]): void {\n    this._processedChildren = processedChildren;\n  }\n\n  /**\n   * Reset processed children (used when configuration changes)\n   */\n  resetProcessedChildren(): void {\n    this._processedChildren = null;\n  }\n\n  /**\n   * Get whether this is a new attempt\n   * @return {boolean}\n   */\n  get isNewAttempt(): boolean {\n    return this._isNewAttempt;\n  }\n\n  /**\n   * Set whether this is a new attempt\n   * @param {boolean} isNewAttempt\n   */\n  set isNewAttempt(isNewAttempt: boolean) {\n    this._isNewAttempt = isNewAttempt;\n  }\n\n  /**\n   * toJSON for Activity\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      id: this._id,\n      title: this._title,\n      isVisible: this._isVisible,\n      isActive: this._isActive,\n      isSuspended: this._isSuspended,\n      isCompleted: this._isCompleted,\n      completionStatus: this._completionStatus,\n      successStatus: this._successStatus,\n      attemptCount: this._attemptCount,\n      attemptCompletionAmount: this._attemptCompletionAmount,\n      attemptAbsoluteDuration: this._attemptAbsoluteDuration,\n      attemptExperiencedDuration: this._attemptExperiencedDuration,\n      activityAbsoluteDuration: this._activityAbsoluteDuration,\n      activityExperiencedDuration: this._activityExperiencedDuration,\n      objectiveSatisfiedStatus: this._objectiveSatisfiedStatus,\n      objectiveMeasureStatus: this._objectiveMeasureStatus,\n      objectiveNormalizedMeasure: this._objectiveNormalizedMeasure,\n      children: this._children.map((child) => child.toJSON())\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\n\n/**\n * Class representing the SCORM 2004 activity tree\n */\nexport class ActivityTree extends BaseCMI {\n  private _root: Activity | null = null;\n  private _currentActivity: Activity | null = null;\n  private _suspendedActivity: Activity | null = null;\n  private _activities: Map<string, Activity> = new Map();\n\n  /**\n   * Constructor for ActivityTree\n   */\n  constructor(root?: Activity) {\n    super(\"activityTree\");\n    if (root) {\n      this.root = root;\n    }\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    if (this._root) {\n      this._root.initialize();\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._currentActivity = null;\n    this._suspendedActivity = null;\n    // Clear the activities map so it can be rebuilt\n    this._activities.clear();\n    if (this._root) {\n      this._root.reset();\n      // Re-populate the activities map with the root and its children\n      this._activities.set(this._root.id, this._root);\n      this._addActivitiesToMap(this._root);\n    }\n  }\n\n  /**\n   * Getter for root\n   * @return {Activity | null}\n   */\n  get root(): Activity | null {\n    return this._root;\n  }\n\n  /**\n   * Setter for root\n   * @param {Activity} root\n   */\n  set root(root: Activity | null) {\n    // noinspection SuspiciousTypeOfGuard\n    if (root !== null && !(root instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".root\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    // Clear existing map when assigning a new root to avoid stale activities\n    this._activities.clear();\n    this._root = root;\n    if (root) {\n      this._activities.set(root.id, root);\n      this._addActivitiesToMap(root);\n    }\n  }\n\n  /**\n   * Recursively add activities to the activities map\n   * @param {Activity} activity\n   * @private\n   */\n  private _addActivitiesToMap(activity: Activity): void {\n    for (const child of activity.children) {\n      this._activities.set(child.id, child);\n      this._addActivitiesToMap(child);\n    }\n  }\n\n  /**\n   * Getter for currentActivity\n   * @return {Activity | null}\n   */\n  get currentActivity(): Activity | null {\n    return this._currentActivity;\n  }\n\n  /**\n   * Setter for currentActivity\n   * @param {Activity | null} activity\n   */\n  set currentActivity(activity: Activity | null) {\n    // noinspection SuspiciousTypeOfGuard\n    if (activity !== null && !(activity instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".currentActivity\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n\n    // If there's already a current activity, deactivate it\n    if (this._currentActivity) {\n      this._currentActivity.isActive = false;\n    }\n\n    // Set the new current activity and activate it\n    this._currentActivity = activity;\n    if (activity) {\n      activity.isActive = true;\n    }\n  }\n\n  /**\n   * Getter for suspendedActivity\n   * @return {Activity | null}\n   */\n  get suspendedActivity(): Activity | null {\n    return this._suspendedActivity;\n  }\n\n  /**\n   * Setter for suspendedActivity\n   * @param {Activity | null} activity\n   */\n  set suspendedActivity(activity: Activity | null) {\n    // noinspection SuspiciousTypeOfGuard\n    if (activity !== null && !(activity instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".suspendedActivity\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n\n    // If there's already a suspended activity, unsuspend it\n    if (this._suspendedActivity) {\n      this._suspendedActivity.isSuspended = false;\n    }\n\n    // Set the new suspended activity and mark it as suspended\n    this._suspendedActivity = activity;\n    if (activity) {\n      activity.isSuspended = true;\n    }\n  }\n\n  /**\n   * Get an activity by ID\n   * @param {string} id - The ID of the activity to get\n   * @return {Activity | null} - The activity with the given ID, or null if not found\n   */\n  getActivity(id: string): Activity | null {\n    return this._activities.get(id) || null;\n  }\n\n  /**\n   * Get all activities in the tree\n   * @return {Activity[]} - An array of all activities in the tree\n   */\n  getAllActivities(): Activity[] {\n    return Array.from(this._activities.values());\n  }\n\n  /**\n   * Get the parent of an activity\n   * @param {Activity} activity - The activity to get the parent of\n   * @return {Activity | null} - The parent of the activity, or null if it has no parent\n   */\n  getParent(activity: Activity): Activity | null {\n    return activity.parent;\n  }\n\n  /**\n   * Get the children of an activity\n   * @param {Activity} activity - The activity to get the children of\n   * @param {boolean} useAvailableChildren - Whether to use available children (with selection/randomization)\n   * @return {Activity[]} - An array of the activity's children\n   */\n  getChildren(activity: Activity, useAvailableChildren: boolean = true): Activity[] {\n    return useAvailableChildren ? activity.getAvailableChildren() : activity.children;\n  }\n\n  /**\n   * Get the siblings of an activity\n   * @param {Activity} activity - The activity to get the siblings of\n   * @return {Activity[]} - An array of the activity's siblings\n   */\n  getSiblings(activity: Activity): Activity[] {\n    if (!activity.parent) {\n      return [];\n    }\n    return activity.parent.children.filter((child) => child !== activity);\n  }\n\n  /**\n   * Get the next sibling of an activity\n   * @param {Activity} activity - The activity to get the next sibling of\n   * @param {boolean} useAvailableChildren - Whether to use available children (with selection/randomization)\n   * @return {Activity | null} - The next sibling of the activity, or null if it has no next sibling\n   */\n  getNextSibling(activity: Activity, useAvailableChildren: boolean = true): Activity | null {\n    if (!activity.parent) {\n      return null;\n    }\n    let siblings = useAvailableChildren \n      ? activity.parent.getAvailableChildren() \n      : activity.parent.children;\n    let index = siblings.indexOf(activity);\n    \n    // Fallback: if not found in available children, try raw children\n    if (index === -1 && useAvailableChildren) {\n      siblings = activity.parent.children;\n      index = siblings.indexOf(activity);\n    }\n    \n    if (index === -1 || index === siblings.length - 1) {\n      return null;\n    }\n    return siblings[index + 1] ?? null;\n  }\n\n  /**\n   * Get the previous sibling of an activity\n   * @param {Activity} activity - The activity to get the previous sibling of\n   * @param {boolean} useAvailableChildren - Whether to use available children (with selection/randomization)\n   * @return {Activity | null} - The previous sibling of the activity, or null if it has no previous sibling\n   */\n  getPreviousSibling(activity: Activity, useAvailableChildren: boolean = true): Activity | null {\n    if (!activity.parent) {\n      return null;\n    }\n    let siblings = useAvailableChildren \n      ? activity.parent.getAvailableChildren() \n      : activity.parent.children;\n    let index = siblings.indexOf(activity);\n    \n    // Fallback: if not found in available children, try raw children\n    if (index === -1 && useAvailableChildren) {\n      siblings = activity.parent.children;\n      index = siblings.indexOf(activity);\n    }\n    \n    if (index <= 0) {\n      return null;\n    }\n    return siblings[index - 1] ?? null;\n  }\n\n  /**\n   * Get the first child of an activity\n   * @param {Activity} activity - The activity to get the first child of\n   * @param {boolean} useAvailableChildren - Whether to use available children (with selection/randomization)\n   * @return {Activity | null} - The first child of the activity, or null if it has no children\n   */\n  getFirstChild(activity: Activity, useAvailableChildren: boolean = true): Activity | null {\n    const children = useAvailableChildren \n      ? activity.getAvailableChildren() \n      : activity.children;\n    if (children.length === 0) {\n      return null;\n    }\n    return children[0] ?? null;\n  }\n\n  /**\n   * Get the last child of an activity\n   * @param {Activity} activity - The activity to get the last child of\n   * @param {boolean} useAvailableChildren - Whether to use available children (with selection/randomization)\n   * @return {Activity | null} - The last child of the activity, or null if it has no children\n   */\n  getLastChild(activity: Activity, useAvailableChildren: boolean = true): Activity | null {\n    const children = useAvailableChildren \n      ? activity.getAvailableChildren() \n      : activity.children;\n    if (children.length === 0) {\n      return null;\n    }\n    return children[children.length - 1] ?? null;\n  }\n\n  /**\n   * Get the common ancestor of two activities\n   * @param {Activity} activity1 - The first activity\n   * @param {Activity} activity2 - The second activity\n   * @return {Activity | null} - The common ancestor of the two activities, or null if they have no common ancestor\n   */\n  getCommonAncestor(activity1: Activity, activity2: Activity): Activity | null {\n    // Get the path from the root to activity1\n    const path1: Activity[] = [];\n    let current: Activity | null = activity1;\n    while (current) {\n      path1.unshift(current);\n      current = current.parent;\n    }\n\n    // Check if activity2 is in the path from the root to activity1\n    current = activity2;\n    while (current) {\n      if (path1.includes(current)) {\n        return current;\n      }\n      current = current.parent;\n    }\n\n    return null;\n  }\n\n  /**\n   * toJSON for ActivityTree\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      root: this._root,\n      currentActivity: this._currentActivity ? this._currentActivity.id : null,\n      suspendedActivity: this._suspendedActivity ? this._suspendedActivity.id : null,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { ActivityTree } from \"./activity_tree\";\nimport { SequencingRules } from \"./sequencing_rules\";\nimport { SequencingControls } from \"./sequencing_controls\";\nimport { RollupRules } from \"./rollup_rules\";\nimport { ADLNav } from \"../adl\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\n\n/**\n * Class representing SCORM 2004 sequencing\n */\nexport class Sequencing extends BaseCMI {\n  private _activityTree: ActivityTree;\n  private _sequencingRules: SequencingRules;\n  private _sequencingControls: SequencingControls;\n  private _rollupRules: RollupRules;\n  private _adlNav: ADLNav | null = null;\n\n  /**\n   * Constructor for Sequencing\n   */\n  constructor() {\n    super(\"sequencing\");\n    this._activityTree = new ActivityTree();\n    this._sequencingRules = new SequencingRules();\n    this._sequencingControls = new SequencingControls();\n    this._rollupRules = new RollupRules();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this._activityTree.initialize();\n    this._sequencingRules.initialize();\n    this._sequencingControls.initialize();\n    this._rollupRules.initialize();\n    \n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._activityTree.reset();\n    this._sequencingRules.reset();\n    this._sequencingControls.reset();\n    this._rollupRules.reset();\n  }\n\n  /**\n   * Getter for activityTree\n   * @return {ActivityTree}\n   */\n  get activityTree(): ActivityTree {\n    return this._activityTree;\n  }\n\n  /**\n   * Setter for activityTree\n   * @param {ActivityTree} activityTree\n   */\n  set activityTree(activityTree: ActivityTree) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(activityTree instanceof ActivityTree)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".activityTree\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._activityTree = activityTree;\n  }\n\n  /**\n   * Getter for sequencingRules\n   * @return {SequencingRules}\n   */\n  get sequencingRules(): SequencingRules {\n    return this._sequencingRules;\n  }\n\n  /**\n   * Setter for sequencingRules\n   * @param {SequencingRules} sequencingRules\n   */\n  set sequencingRules(sequencingRules: SequencingRules) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(sequencingRules instanceof SequencingRules)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".sequencingRules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._sequencingRules = sequencingRules;\n  }\n\n  /**\n   * Getter for sequencingControls\n   * @return {SequencingControls}\n   */\n  get sequencingControls(): SequencingControls {\n    return this._sequencingControls;\n  }\n\n  /**\n   * Setter for sequencingControls\n   * @param {SequencingControls} sequencingControls\n   */\n  set sequencingControls(sequencingControls: SequencingControls) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(sequencingControls instanceof SequencingControls)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".sequencingControls\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._sequencingControls = sequencingControls;\n  }\n\n  /**\n   * Getter for rollupRules\n   * @return {RollupRules}\n   */\n  get rollupRules(): RollupRules {\n    return this._rollupRules;\n  }\n\n  /**\n   * Setter for rollupRules\n   * @param {RollupRules} rollupRules\n   */\n  set rollupRules(rollupRules: RollupRules) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rollupRules instanceof RollupRules)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".rollupRules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._rollupRules = rollupRules;\n  }\n\n  /**\n   * Getter for adlNav\n   * @return {ADLNav | null}\n   */\n  get adlNav(): ADLNav | null {\n    return this._adlNav;\n  }\n\n  /**\n   * Setter for adlNav\n   * @param {ADLNav | null} adlNav\n   */\n  set adlNav(adlNav: ADLNav | null) {\n    this._adlNav = adlNav;\n    \n  }\n\n\n\n\n\n  /**\n   * Process rollup for the entire activity tree\n   */\n  processRollup(): void {\n    // Get the root activity\n    const root = this._activityTree.root;\n    if (!root) {\n      return;\n    }\n\n    // Process rollup from the bottom up\n    this._processRollupRecursive(root);\n  }\n\n\n  /**\n   * Process rollup recursively\n   * @param {Activity} activity - The activity to process rollup for\n   * @private\n   */\n  private _processRollupRecursive(activity: Activity): void {\n    // Process rollup for children first\n    for (const child of activity.children) {\n      this._processRollupRecursive(child);\n    }\n\n    // Process rollup for this activity\n    this._rollupRules.processRollup(activity);\n  }\n\n\n  /**\n   * Get the current activity\n   * @return {Activity | null}\n   */\n  getCurrentActivity(): Activity | null {\n    return this._activityTree.currentActivity;\n  }\n\n  /**\n   * Get the root activity\n   * @return {Activity | null}\n   */\n  getRootActivity(): Activity | null {\n    return this._activityTree.root;\n  }\n\n  /**\n   * toJSON for Sequencing\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      activityTree: this._activityTree,\n      sequencingRules: this._sequencingRules,\n      sequencingControls: this._sequencingControls,\n      rollupRules: this._rollupRules,\n      adlNav: this._adlNav,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { Activity } from \"./activity\";\nimport { RollupActionType, RollupConsiderationType, RollupRule } from \"./rollup_rules\";\n\n/**\n * Enhanced Rollup Process implementation for SCORM 2004 sequencing\n * Priority 5 Gap: Comprehensive rollup with global objective mapping and complex weighting\n * Handles all rollup operations including measure, objective, and progress rollup\n */\nexport class RollupProcess {\n  private rollupStateLog: Array<{ activity: string, timestamp: string, state: any }> = [];\n  private eventCallback: ((eventType: string, data?: any) => void) | null = null;\n\n  constructor(eventCallback?: (eventType: string, data?: any) => void) {\n    this.eventCallback = eventCallback || null;\n  }\n\n  /**\n   * Overall Rollup Process (RB.1.5)\n   * Performs rollup from a given activity up through its ancestors\n   * @param {Activity} activity - The activity to start rollup from\n   */\n  public overallRollupProcess(activity: Activity): void {\n    let currentActivity: Activity | null = activity;\n\n    // Process rollup up the tree until we reach the root\n    while (currentActivity && currentActivity.parent) {\n      const parent: Activity = currentActivity.parent;\n\n      // Only perform rollup if the parent tracks status\n      if (parent.sequencingControls.rollupObjectiveSatisfied ||\n        parent.sequencingControls.rollupProgressCompletion) {\n\n        // Step 1: Measure Rollup Process (RB.1.1)\n        this.measureRollupProcess(parent);\n\n        // Step 2: Objective Rollup Process (RB.1.2)\n        if (parent.sequencingControls.rollupObjectiveSatisfied) {\n          this.objectiveRollupProcess(parent);\n        }\n\n        // Step 3: Activity Progress Rollup Process (RB.1.3)\n        if (parent.sequencingControls.rollupProgressCompletion) {\n          this.activityProgressRollupProcess(parent);\n        }\n      }\n\n      // Move up the tree\n      currentActivity = parent;\n    }\n  }\n\n  /**\n   * Measure Rollup Process (RB.1.1)\n   * Rolls up objective measure (score) from children to parent\n   * INTEGRATION: Uses complex weighted measure calculation\n   * @param {Activity} activity - The parent activity\n   */\n  private measureRollupProcess(activity: Activity): void {\n    if (!activity.sequencingControls.rollupObjectiveSatisfied) {\n      return;\n    }\n\n    const children = activity.getAvailableChildren();\n    if (children.length === 0) {\n      return;\n    }\n\n    // INTEGRATION: Use complex weighted measure calculation instead of simple calculation\n    // Determine if there are any valid child measures\n    const hasValidMeasures = children.some(\n      (c) => this.checkChildForRollupSubprocess(c, \"measure\") && c.objectiveMeasureStatus && c.objectiveNormalizedMeasure !== null,\n    );\n\n    if (!hasValidMeasures) {\n      activity.objectiveMeasureStatus = false;\n      return;\n    }\n\n    const complexWeightedMeasure = this.calculateComplexWeightedMeasure(activity, children, { enableThresholdBias: false });\n    activity.objectiveNormalizedMeasure = complexWeightedMeasure;\n    activity.objectiveMeasureStatus = true;\n\n    // INTEGRATION: Process cross-cluster dependencies if dealing with activity clusters\n    const clusters = this.identifyActivityClusters(children);\n    if (clusters.length > 1) {\n      this.processCrossClusterDependencies(activity, clusters);\n    }\n  }\n\n  /**\n   * Objective Rollup Process (RB.1.2)\n   * Determines objective satisfaction status using rules, measure, or default\n   * @param {Activity} activity - The parent activity\n   */\n  private objectiveRollupProcess(activity: Activity): void {\n    const rollupRules = activity.rollupRules;\n\n    // First, try rollup using rules (RB.1.2.b)\n    const ruleResult = this.objectiveRollupUsingRules(activity, rollupRules.rules);\n    if (ruleResult !== null) {\n      activity.objectiveSatisfiedStatus = ruleResult;\n      return;\n    }\n\n    // Then, try rollup using measure (RB.1.2.a)\n    const measureResult = this.objectiveRollupUsingMeasure(activity);\n    if (measureResult !== null) {\n      activity.objectiveSatisfiedStatus = measureResult;\n      return;\n    }\n\n    // Finally, use default rollup (RB.1.2.c)\n    activity.objectiveSatisfiedStatus = this.objectiveRollupUsingDefault(activity);\n  }\n\n  /**\n   * Objective Rollup Using Rules (RB.1.2.b)\n   * @param {Activity} activity - The parent activity\n   * @param {RollupRule[]} rules - The rollup rules to evaluate\n   * @return {boolean | null} - True if satisfied, false if not, null if no rule applies\n   */\n  private objectiveRollupUsingRules(activity: Activity, rules: RollupRule[]): boolean | null {\n    // Get satisfied and not satisfied rules\n    const satisfiedRules = rules.filter(rule =>\n      rule.action === RollupActionType.SATISFIED\n    );\n\n    const notSatisfiedRules = rules.filter(rule =>\n      rule.action === RollupActionType.NOT_SATISFIED\n    );\n\n    // Evaluate satisfied rules first\n    for (const rule of satisfiedRules) {\n      if (this.evaluateRollupRule(activity, rule)) {\n        return true;\n      }\n    }\n\n    // Then evaluate not satisfied rules\n    for (const rule of notSatisfiedRules) {\n      if (this.evaluateRollupRule(activity, rule)) {\n        return false;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Objective Rollup Using Measure (RB.1.2.a)\n   * @param {Activity} activity - The parent activity\n   * @return {boolean | null} - True if satisfied, false if not, null if no measure\n   */\n  private objectiveRollupUsingMeasure(activity: Activity): boolean | null {\n    if (!activity.objectiveMeasureStatus || activity.scaledPassingScore === null) {\n      return null;\n    }\n\n    return activity.objectiveNormalizedMeasure >= activity.scaledPassingScore;\n  }\n\n  /**\n   * Objective Rollup Using Default (RB.1.2.c)\n   * @param {Activity} activity - The parent activity\n   * @return {boolean} - True if all tracked children are satisfied\n   */\n  private objectiveRollupUsingDefault(activity: Activity): boolean {\n    const children = activity.getAvailableChildren();\n\n    // If no children, not satisfied\n    if (children.length === 0) {\n      return false;\n    }\n\n    // Check if all tracked children are satisfied\n    for (const child of children) {\n      if (this.checkChildForRollupSubprocess(child, \"objective\")) {\n        if (!child.objectiveSatisfiedStatus) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Activity Progress Rollup Process (RB.1.3)\n   * Determines activity completion status\n   * @param {Activity} activity - The parent activity\n   */\n  private activityProgressRollupProcess(activity: Activity): void {\n    const rollupRules = activity.rollupRules;\n\n    // Get completion rules\n    const completedRules = rollupRules.rules.filter(rule =>\n      rule.action === RollupActionType.COMPLETED\n    );\n\n    const incompleteRules = rollupRules.rules.filter(rule =>\n      rule.action === RollupActionType.INCOMPLETE\n    );\n\n    // Evaluate completed rules first\n    for (const rule of completedRules) {\n      if (this.evaluateRollupRule(activity, rule)) {\n        activity.completionStatus = \"completed\";\n        return;\n      }\n    }\n\n    // Then evaluate incomplete rules\n    for (const rule of incompleteRules) {\n      if (this.evaluateRollupRule(activity, rule)) {\n        activity.completionStatus = \"incomplete\";\n        return;\n      }\n    }\n\n    // Default: completed if all tracked children are completed\n    const children = activity.getAvailableChildren();\n    let allCompleted = true;\n\n    for (const child of children) {\n      if (this.checkChildForRollupSubprocess(child, \"progress\")) {\n        if (child.completionStatus !== \"completed\") {\n          allCompleted = false;\n          break;\n        }\n      }\n    }\n\n    activity.completionStatus = allCompleted ? \"completed\" : \"incomplete\";\n  }\n\n  /**\n   * Check Child For Rollup Subprocess (RB.1.4.2)\n   * Determines if a child activity contributes to rollup\n   * @param {Activity} child - The child activity to check\n   * @param {string} rollupType - Type of rollup (\"measure\", \"objective\", \"progress\")\n   * @return {boolean} - True if child contributes to rollup\n   */\n  private checkChildForRollupSubprocess(child: Activity, rollupType: string): boolean {\n    // Check if child is tracked\n    switch (rollupType) {\n      case \"measure\":\n      case \"objective\":\n        if (!child.sequencingControls.rollupObjectiveSatisfied) {\n          return false;\n        }\n        break;\n      case \"progress\":\n        if (!child.sequencingControls.rollupProgressCompletion) {\n          return false;\n        }\n        break;\n    }\n\n    // Check if child is available for rollup\n    if (!child.isAvailable) {\n      return false;\n    }\n\n    // Additional checks can be added here based on rollup configuration\n\n    return true;\n  }\n\n  /**\n   * Evaluate a rollup rule\n   * @param {Activity} activity - The parent activity\n   * @param {RollupRule} rule - The rule to evaluate\n   * @return {boolean} - True if the rule applies\n   */\n  private evaluateRollupRule(activity: Activity, rule: RollupRule): boolean {\n    const children = activity.getAvailableChildren();\n    let contributingChildren = 0;\n    let satisfiedCount = 0;\n\n    // Count children that meet the rule conditions\n    for (const child of children) {\n      // Check if child contributes based on rule action\n      let contributes = false;\n      switch (rule.action) {\n        case RollupActionType.SATISFIED:\n        case RollupActionType.NOT_SATISFIED:\n          contributes = this.checkChildForRollupSubprocess(child, \"objective\");\n          break;\n        case RollupActionType.COMPLETED:\n        case RollupActionType.INCOMPLETE:\n          contributes = this.checkChildForRollupSubprocess(child, \"progress\");\n          break;\n      }\n\n      if (contributes) {\n        contributingChildren++;\n\n        // Evaluate rule conditions for this child using RB.1.4.1\n        if (this.evaluateRollupConditionsSubprocess(child, rule)) {\n          satisfiedCount++;\n        }\n      }\n    }\n\n    // Apply minimum count/percent logic OR consideration type\n    if (rule.consideration === RollupConsiderationType.ALL) {\n      // For ALL consideration, all contributing children must satisfy\n      return contributingChildren > 0 && satisfiedCount === contributingChildren;\n    } else if (rule.minimumCount !== null) {\n      return satisfiedCount >= rule.minimumCount;\n    } else if (rule.minimumPercent !== null) {\n      const percent = contributingChildren > 0 ? (satisfiedCount / contributingChildren) : 0;\n      return percent >= rule.minimumPercent;\n    }\n\n    // Default: all contributing children must satisfy\n    return contributingChildren > 0 && satisfiedCount === contributingChildren;\n  }\n\n  /**\n   * Evaluate Rollup Conditions Subprocess (RB.1.4.1)\n   * Evaluates if rollup rule conditions are met for a given activity\n   * @param {Activity} child - The child activity to evaluate\n   * @param {RollupRule} rule - The rollup rule containing conditions to evaluate\n   * @return {boolean} - True if all conditions are met, false otherwise\n   */\n  private evaluateRollupConditionsSubprocess(child: Activity, rule: RollupRule): boolean {\n    // If no conditions are specified, the rule always applies\n    if (rule.conditions.length === 0) {\n      return true;\n    }\n\n    // Evaluate based on the rule's consideration type\n    switch (rule.consideration) {\n      case RollupConsiderationType.ALL:\n        // All conditions must be met\n        return rule.conditions.every(condition => condition.evaluate(child));\n\n      case RollupConsiderationType.ANY:\n        // At least one condition must be met\n        return rule.conditions.some(condition => condition.evaluate(child));\n\n      case RollupConsiderationType.NONE:\n        // No conditions should be met\n        return !rule.conditions.some(condition => condition.evaluate(child));\n\n      case RollupConsiderationType.AT_LEAST_COUNT:\n      case RollupConsiderationType.AT_LEAST_PERCENT:\n        // These are handled at the rule level, not condition level\n        // For individual condition evaluation, treat as ALL\n        return rule.conditions.every(condition => condition.evaluate(child));\n\n      default:\n        // Unknown consideration type, default to false\n        return false;\n    }\n  }\n\n  /**\n   * Priority 5 Gap: Validate rollup state consistency across the activity tree\n   * Ensures that rollup states are consistent and valid before processing\n   * @param {Activity} rootActivity - The root activity to validate from\n   * @return {boolean} - True if state is consistent, false otherwise\n   */\n  public validateRollupStateConsistency(rootActivity: Activity): boolean {\n    try {\n      this.eventCallback?.(\"rollup_validation_started\", {\n        activityId: rootActivity.id,\n        timestamp: new Date().toISOString()\n      });\n\n      const inconsistencies: string[] = [];\n\n      // Validate the entire tree recursively\n      this.validateActivityRollupState(rootActivity, inconsistencies);\n\n      if (inconsistencies.length > 0) {\n        this.eventCallback?.(\"rollup_state_inconsistencies\", {\n          activityId: rootActivity.id,\n          inconsistencies,\n          count: inconsistencies.length\n        });\n        return false;\n      }\n\n      this.eventCallback?.(\"rollup_validation_completed\", {\n        activityId: rootActivity.id,\n        result: \"consistent\"\n      });\n      return true;\n    } catch (error) {\n      this.eventCallback?.(\"rollup_validation_error\", {\n        activityId: rootActivity.id,\n        error: error instanceof Error ? error.message : String(error)\n      });\n      return false;\n    }\n  }\n\n  /**\n   * Priority 5 Gap: Process global objective mapping for shared objectives\n   * Handles cross-activity objective synchronization and global state management\n   * @param {Activity} activity - The activity to process objectives for\n   * @param {Map<string, any>} globalObjectives - Global objective map\n   */\n  public processGlobalObjectiveMapping(activity: Activity, globalObjectives: Map<string, any>): void {\n    try {\n      this.eventCallback?.(\"global_objective_processing_started\", {\n        activityId: activity.id,\n        globalObjectiveCount: globalObjectives.size\n      });\n\n      // Process shared objectives for this activity\n      this.synchronizeGlobalObjectives(activity, globalObjectives);\n\n      // Process children recursively\n      const children = activity.getAvailableChildren();\n      for (const child of children) {\n        this.processGlobalObjectiveMapping(child, globalObjectives);\n      }\n\n      this.eventCallback?.(\"global_objective_processing_completed\", {\n        activityId: activity.id,\n        processedObjectives: globalObjectives.size\n      });\n    } catch (error) {\n      this.eventCallback?.(\"global_objective_processing_error\", {\n        activityId: activity.id,\n        error: error instanceof Error ? error.message : String(error)\n      });\n    }\n  }\n\n  /**\n   * Priority 5 Gap: Handle complex objective weighting scenarios\n   * Supports weighted rollup calculations with complex dependency chains\n   * INTEGRATION: Now properly integrated into measureRollupProcess\n   * @param {Activity} activity - The parent activity\n   * @param {Activity[]} children - Child activities to weight\n   * @return {number} - Calculated weighted measure\n   */\n  public calculateComplexWeightedMeasure(\n    activity: Activity,\n    children: Activity[],\n    options?: { enableThresholdBias?: boolean }\n  ): number {\n    let totalWeightedMeasure = 0;\n    let totalWeight = 0;\n    const weightingLog: Array<{ childId: string, measure: number, weight: number }> = [];\n    const enableBias = options?.enableThresholdBias ?? true;\n\n    for (const child of children) {\n      if (!this.checkChildForRollupSubprocess(child, \"measure\")) {\n        continue;\n      }\n\n      if (child.objectiveMeasureStatus && child.objectiveNormalizedMeasure !== null) {\n        // Handle complex weighting scenarios\n        const baseWeight = child.sequencingControls.objectiveMeasureWeight;\n        const adjustedWeight = this.calculateAdjustedWeight(child, baseWeight, enableBias);\n        const contribution = child.objectiveNormalizedMeasure * adjustedWeight;\n\n        totalWeightedMeasure += contribution;\n        totalWeight += adjustedWeight;\n\n        weightingLog.push({\n          childId: child.id,\n          measure: child.objectiveNormalizedMeasure,\n          weight: adjustedWeight\n        });\n      }\n    }\n\n    this.eventCallback?.(\"complex_weighting_calculated\", {\n      activityId: activity.id,\n      weightingDetails: weightingLog,\n      totalWeight,\n      totalWeightedMeasure,\n      result: totalWeight > 0 ? totalWeightedMeasure / totalWeight : 0\n    });\n\n    return totalWeight > 0 ? totalWeightedMeasure / totalWeight : 0;\n  }\n\n  /**\n   * Priority 5 Gap: Handle cross-cluster dependencies in rollup\n   * Manages dependencies between activity clusters for accurate rollup\n   * INTEGRATION: Now properly integrated into rollup process\n   * @param {Activity} activity - The activity to process\n   * @param {Activity[]} clusters - Related activity clusters\n   */\n  public processCrossClusterDependencies(activity: Activity, clusters: Activity[]): void {\n    try {\n      this.eventCallback?.(\"cross_cluster_processing_started\", {\n        activityId: activity.id,\n        clusterCount: clusters.length\n      });\n\n      const dependencyMap = new Map<string, string[]>();\n\n      // Build dependency map across clusters\n      for (const cluster of clusters) {\n        this.analyzeCrossClusterDependencies(cluster, dependencyMap);\n      }\n\n      // Process dependencies in correct order\n      const processOrder = this.resolveDependencyOrder(dependencyMap);\n\n      for (const clusterId of processOrder) {\n        const cluster = clusters.find(c => c.id === clusterId);\n        if (cluster) {\n          this.processClusterRollup(cluster);\n        }\n      }\n\n      this.eventCallback?.(\"cross_cluster_processing_completed\", {\n        activityId: activity.id,\n        processedClusters: processOrder.length,\n        dependencyMap: Array.from(dependencyMap.entries())\n      });\n    } catch (error) {\n      this.eventCallback?.(\"cross_cluster_processing_error\", {\n        activityId: activity.id,\n        error: error instanceof Error ? error.message : String(error)\n      });\n    }\n  }\n\n  // Helper Methods for Priority 5 Gap Implementation\n\n  /**\n   * Validate rollup state for a single activity\n   */\n  private validateActivityRollupState(activity: Activity, inconsistencies: string[]): void {\n    const activityId = activity.id;\n\n    // Check measure status consistency\n    if (activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure === null) {\n      inconsistencies.push(`Activity ${activityId}: measure status true but normalized measure is null`);\n    }\n\n    // Check satisfaction status consistency with measure (only when success status is known)\n    if (\n      activity.objectiveMeasureStatus &&\n      activity.scaledPassingScore !== null &&\n      activity.successStatus !== \"unknown\"\n    ) {\n      const expectedSatisfied = activity.objectiveNormalizedMeasure >= activity.scaledPassingScore;\n      if (activity.objectiveSatisfiedStatus !== expectedSatisfied) {\n        inconsistencies.push(`Activity ${activityId}: satisfaction status inconsistent with measure`);\n      }\n    }\n\n    // Check rollup controls consistency\n    const controls = activity.sequencingControls;\n    if (!controls.rollupObjectiveSatisfied && !controls.rollupProgressCompletion) {\n      // Activity doesn't contribute to rollup but has rollup data\n      if (activity.objectiveMeasureStatus || activity.completionStatus !== \"unknown\") {\n        inconsistencies.push(`Activity ${activityId}: has rollup data but rollup controls disabled`);\n      }\n    }\n\n    // Check children consistency\n    const children = activity.getAvailableChildren();\n    for (const child of children) {\n      this.validateActivityRollupState(child, inconsistencies);\n    }\n\n    // Log validation state\n    this.rollupStateLog.push({\n      activity: activityId,\n      timestamp: new Date().toISOString(),\n      state: {\n        measureStatus: activity.objectiveMeasureStatus,\n        measure: activity.objectiveNormalizedMeasure,\n        satisfiedStatus: activity.objectiveSatisfiedStatus,\n        completionStatus: activity.completionStatus\n      }\n    });\n  }\n\n  /**\n   * Synchronize global objectives with activity-specific objectives\n   */\n  private synchronizeGlobalObjectives(activity: Activity, globalObjectives: Map<string, any>): void {\n    // Implementation would depend on the specific objective model\n    // For now, we'll implement a basic synchronization framework\n\n    const activityObjectives = this.getActivityObjectives(activity);\n\n    for (const objectiveId of activityObjectives) {\n      if (globalObjectives.has(objectiveId)) {\n        const globalObjective = globalObjectives.get(objectiveId);\n        this.syncObjectiveState(activity, objectiveId, globalObjective);\n      } else {\n        // Register new global objective\n        const localObjective = this.getLocalObjectiveState(activity, objectiveId);\n        globalObjectives.set(objectiveId, localObjective);\n      }\n    }\n  }\n\n  /**\n   * Calculate adjusted weight for complex weighting scenarios\n   */\n  private calculateAdjustedWeight(child: Activity, baseWeight: number, enableBias: boolean = true): number {\n    let adjustedWeight = baseWeight;\n\n    // Factor in completion status\n    if (child.completionStatus !== \"completed\") {\n      adjustedWeight *= 0.8; // Reduce weight for incomplete activities\n    }\n\n    // Factor in attempt count (penalize multiple attempts)\n    if (child.attemptCount > 1) {\n      const attemptPenalty = Math.max(0.5, 1 - (child.attemptCount - 1) * 0.1);\n      adjustedWeight *= attemptPenalty;\n    }\n\n    // Factor in time limits if exceeded\n    if (child.hasAttemptLimitExceeded()) {\n      adjustedWeight *= 0.6; // Significant penalty for exceeding limits\n    }\n\n    // Bias by relation to passing threshold when available\n    if (enableBias && child.objectiveMeasureStatus) {\n      const threshold = child.scaledPassingScore ?? 0.7;\n      if (child.objectiveNormalizedMeasure >= threshold) {\n        adjustedWeight *= 1.05; // small boost for above-threshold performance\n      } else {\n        adjustedWeight *= 0.95; // small penalty for below-threshold performance\n      }\n    }\n\n    return Math.max(0, adjustedWeight); // Ensure non-negative weight\n  }\n\n  /**\n   * Analyze cross-cluster dependencies\n   */\n  private analyzeCrossClusterDependencies(cluster: Activity, dependencyMap: Map<string, string[]>): void {\n    // Build dependency relationships based on sequencing rules and prerequisites\n    const dependencies: string[] = [];\n\n    // Check sequencing rules for dependencies\n    const sequencingRules = cluster.sequencingRules;\n    // Implementation would analyze rules to identify dependencies\n\n    dependencyMap.set(cluster.id, dependencies);\n  }\n\n  /**\n   * Resolve dependency processing order\n   */\n  private resolveDependencyOrder(dependencyMap: Map<string, string[]>): string[] {\n    const resolved: string[] = [];\n    const resolving: Set<string> = new Set();\n\n    const resolve = (id: string): void => {\n      if (resolved.includes(id)) return;\n      if (resolving.has(id)) {\n        // Circular dependency detected - log warning and continue\n        this.eventCallback?.(\"circular_dependency_detected\", { activityId: id });\n        return;\n      }\n\n      resolving.add(id);\n      const dependencies = dependencyMap.get(id) || [];\n\n      for (const depId of dependencies) {\n        resolve(depId);\n      }\n\n      resolving.delete(id);\n      resolved.push(id);\n    };\n\n    for (const id of Array.from(dependencyMap.keys())) {\n      resolve(id);\n    }\n\n    return resolved;\n  }\n\n  /**\n   * Process rollup for a specific cluster\n   */\n  private processClusterRollup(cluster: Activity): void {\n    // Perform standard rollup process for the cluster\n    this.measureRollupProcess(cluster);\n\n    if (cluster.sequencingControls.rollupObjectiveSatisfied) {\n      this.objectiveRollupProcess(cluster);\n    }\n\n    if (cluster.sequencingControls.rollupProgressCompletion) {\n      this.activityProgressRollupProcess(cluster);\n    }\n  }\n\n  /**\n   * Get activity objectives (implementation depends on objective model)\n   */\n  private getActivityObjectives(activity: Activity): string[] {\n    // This would return the list of objective IDs associated with the activity\n    // For now, return a basic implementation\n    return [activity.id + \"_primary_objective\"];\n  }\n\n  /**\n   * Synchronize objective state between local and global according to SCORM 2004 specification\n   */\n  private syncObjectiveState(activity: Activity, objectiveId: string, globalObjective: any): void {\n    try {\n      // Get current local objective state\n      const localObjective = this.getLocalObjectiveState(activity, objectiveId);\n\n      // Perform bidirectional synchronization according to SCORM 2004 rules\n\n      // 1. Read from global to local (if readSatisfiedStatus is true)\n      if (globalObjective.readSatisfiedStatus && globalObjective.satisfiedStatusKnown) {\n        activity.objectiveSatisfiedStatus = globalObjective.satisfiedStatus;\n        activity.objectiveMeasureStatus = true; // Mark as known\n      }\n\n      // 2. Read normalized measure from global to local (if readNormalizedMeasure is true)\n      if (globalObjective.readNormalizedMeasure && globalObjective.normalizedMeasureKnown) {\n        activity.objectiveNormalizedMeasure = globalObjective.normalizedMeasure;\n        activity.objectiveMeasureStatus = true;\n\n        // Update satisfaction based on measure if satisfiedByMeasure is true\n        if (globalObjective.satisfiedByMeasure) {\n          const scaledPassingScore = activity.scaledPassingScore || 0.7; // Default to 0.7\n          activity.objectiveSatisfiedStatus = globalObjective.normalizedMeasure >= scaledPassingScore;\n        }\n      }\n\n      // 3. Write from local to global (if writeSatisfiedStatus is true)\n      if (globalObjective.writeSatisfiedStatus && activity.objectiveMeasureStatus) {\n        globalObjective.satisfiedStatus = activity.objectiveSatisfiedStatus;\n        globalObjective.satisfiedStatusKnown = true;\n      }\n\n      // 4. Write normalized measure from local to global (if writeNormalizedMeasure is true)\n      if (globalObjective.writeNormalizedMeasure && activity.objectiveMeasureStatus) {\n        globalObjective.normalizedMeasure = activity.objectiveNormalizedMeasure;\n        globalObjective.normalizedMeasureKnown = true;\n\n        // Update global satisfaction based on measure if satisfiedByMeasure is true\n        if (globalObjective.satisfiedByMeasure) {\n          const scaledPassingScore = activity.scaledPassingScore || 0.7;\n          globalObjective.satisfiedStatus = activity.objectiveNormalizedMeasure >= scaledPassingScore;\n          globalObjective.satisfiedStatusKnown = true;\n        }\n      }\n\n      // 5. Handle objective completion status synchronization\n      if (globalObjective.writeCompletionStatus && activity.completionStatus !== \"unknown\") {\n        globalObjective.completionStatus = activity.completionStatus;\n        globalObjective.completionStatusKnown = true;\n      }\n\n      if (globalObjective.readCompletionStatus && globalObjective.completionStatusKnown) {\n        activity.completionStatus = globalObjective.completionStatus;\n      }\n\n      // 6. Handle progress measure synchronization\n      if (globalObjective.writeProgressMeasure && activity.progressMeasureStatus) {\n        globalObjective.progressMeasure = activity.progressMeasure;\n        globalObjective.progressMeasureKnown = true;\n      }\n\n      if (globalObjective.readProgressMeasure && globalObjective.progressMeasureKnown) {\n        activity.progressMeasure = globalObjective.progressMeasure;\n        activity.progressMeasureStatus = true;\n      }\n\n      // 7. Update activity attempt data based on global state\n      if (globalObjective.updateAttemptData) {\n        this.updateActivityAttemptData(activity, globalObjective);\n      }\n\n      // 8. Fire synchronization event for monitoring/logging\n      this.eventCallback?.(\"objective_synchronized\", {\n        activityId: activity.id,\n        objectiveId,\n        localState: localObjective,\n        globalState: globalObjective,\n        synchronizationTime: new Date().toISOString()\n      });\n\n    } catch (error) {\n      // Log synchronization error but don't fail the rollup process\n      this.eventCallback?.(\"objective_sync_error\", {\n        activityId: activity.id,\n        objectiveId,\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: new Date().toISOString()\n      });\n    }\n  }\n\n  /**\n   * Update activity attempt data based on global objective state\n   */\n  private updateActivityAttemptData(activity: Activity, globalObjective: any): void {\n    try {\n      // Update attempt completion based on global objective satisfaction\n      if (globalObjective.satisfiedStatusKnown && globalObjective.satisfiedStatus) {\n        // If global objective is satisfied, update local completion data\n        if (activity.completionStatus === \"unknown\" || activity.completionStatus === \"incomplete\") {\n          activity.completionStatus = \"completed\";\n        }\n\n        // Update success status based on objective satisfaction\n        if (activity.successStatus === \"unknown\") {\n          activity.successStatus = \"passed\";\n        }\n      }\n\n      // Update attempt count if global objective indicates new attempt\n      if (globalObjective.attemptCount && globalObjective.attemptCount > activity.attemptCount) {\n        activity.attemptCount = globalObjective.attemptCount;\n      }\n\n      // Update completion amount based on progress measure\n      if (globalObjective.progressMeasureKnown && globalObjective.progressMeasure !== undefined) {\n        activity.attemptCompletionAmount = globalObjective.progressMeasure;\n      }\n\n      // Update absolute duration from global timing data\n      if (globalObjective.attemptAbsoluteDuration) {\n        activity.attemptAbsoluteDuration = globalObjective.attemptAbsoluteDuration;\n      }\n\n      if (globalObjective.attemptExperiencedDuration) {\n        activity.attemptExperiencedDuration = globalObjective.attemptExperiencedDuration;\n      }\n\n      // Update activity-level durations\n      if (globalObjective.activityAbsoluteDuration) {\n        activity.activityAbsoluteDuration = globalObjective.activityAbsoluteDuration;\n      }\n\n      if (globalObjective.activityExperiencedDuration) {\n        activity.activityExperiencedDuration = globalObjective.activityExperiencedDuration;\n      }\n\n      // Update location if provided by global state\n      if (globalObjective.location !== undefined) {\n        activity.location = globalObjective.location;\n      }\n\n      // Update suspension state based on global objective\n      if (globalObjective.suspendData !== undefined) {\n        activity.isSuspended = globalObjective.suspendData.length > 0;\n      }\n\n    } catch (error) {\n      // Log attempt data update error\n      this.eventCallback?.(\"attempt_data_update_error\", {\n        activityId: activity.id,\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: new Date().toISOString()\n      });\n    }\n  }\n\n  /**\n   * Get local objective state\n   */\n  private getLocalObjectiveState(activity: Activity, objectiveId: string): any {\n    // Return current local state for the objective\n    return {\n      id: objectiveId,\n      satisfiedStatus: activity.objectiveSatisfiedStatus,\n      measureStatus: activity.objectiveMeasureStatus,\n      normalizedMeasure: activity.objectiveNormalizedMeasure,\n      scaledPassingScore: activity.scaledPassingScore\n    };\n  }\n\n  /**\n   * INTEGRATION: Identify Activity Clusters\n   * Identifies clusters among child activities for cross-cluster dependency processing\n   * @param {Activity[]} children - Child activities to analyze\n   * @return {Activity[]} - Array of identified clusters\n   */\n  private identifyActivityClusters(children: Activity[]): Activity[] {\n    const clusters: Activity[] = [];\n\n    for (const child of children) {\n      // An activity is considered a cluster if it has children and flow controls\n      if (child.children.length > 0 && child.sequencingControls.flow) {\n        clusters.push(child);\n      }\n    }\n\n    return clusters;\n  }\n\n}\n","import { Activity } from \"./activity\";\nimport { SelectionTiming, RandomizationTiming } from \"./sequencing_controls\";\n\n/**\n * Class implementing SCORM 2004 Selection and Randomization processes (SR.1 and SR.2)\n */\nexport class SelectionRandomization {\n  /**\n   * Select Children Process (SR.1)\n   * Selects a subset of child activities based on selection controls\n   * @param {Activity} activity - The parent activity whose children need to be selected\n   * @return {Activity[]} - The selected child activities\n   */\n  public static selectChildrenProcess(activity: Activity): Activity[] {\n    const controls = activity.sequencingControls;\n    const children = [...activity.children]; // Create a copy to avoid mutating original\n\n    // Check if selection should occur\n    if (controls.selectionTiming === SelectionTiming.NEVER) {\n      return children;\n    }\n\n    // Check if selection has already been done (for ONCE timing)\n    if (\n      controls.selectionTiming === SelectionTiming.ONCE &&\n      controls.selectionCountStatus\n    ) {\n      return children;\n    }\n\n    // Check if we need to select children\n    const selectCount = controls.selectCount;\n    if (selectCount === null || selectCount >= children.length) {\n      // Mark selection as done if timing is ONCE\n      if (controls.selectionTiming === SelectionTiming.ONCE) {\n        controls.selectionCountStatus = true;\n      }\n      return children;\n    }\n\n    // Perform selection\n    const selectedChildren: Activity[] = [];\n    const availableIndices = children.map((_, index) => index);\n\n    // Randomly select children\n    for (let i = 0; i < selectCount; i++) {\n      if (availableIndices.length === 0) break;\n      \n      const randomIndex = Math.floor(Math.random() * availableIndices.length);\n      const childIndex = availableIndices[randomIndex];\n      if (childIndex !== undefined && children[childIndex]) {\n        selectedChildren.push(children[childIndex]);\n      }\n      \n      // Remove selected index from available indices\n      availableIndices.splice(randomIndex, 1);\n    }\n\n    // Mark selection as done only if timing is ONCE\n    if (controls.selectionTiming === SelectionTiming.ONCE) {\n      controls.selectionCountStatus = true;\n    }\n\n    // Hide non-selected children from choice\n    for (const child of children) {\n      if (!selectedChildren.includes(child)) {\n        child.isHiddenFromChoice = true;\n        child.isAvailable = false;\n      }\n    }\n\n    return selectedChildren;\n  }\n\n  /**\n   * Randomize Children Process (SR.2)\n   * Randomizes the order of child activities based on randomization controls\n   * @param {Activity} activity - The parent activity whose children need to be randomized\n   * @return {Activity[]} - The randomized child activities\n   */\n  public static randomizeChildrenProcess(activity: Activity): Activity[] {\n    const controls = activity.sequencingControls;\n    const children = [...activity.children]; // Create a copy to avoid mutating original\n\n    // Check if randomization should occur\n    if (controls.randomizationTiming === RandomizationTiming.NEVER) {\n      return children;\n    }\n\n    // Check if randomization has already been done (for ONCE timing)\n    if (\n      controls.randomizationTiming === RandomizationTiming.ONCE &&\n      controls.reorderChildren\n    ) {\n      return children;\n    }\n\n    // Check if we need to randomize\n    if (!controls.randomizeChildren) {\n      return children;\n    }\n\n    // Perform Fisher-Yates shuffle\n    const randomizedChildren = [...children];\n    for (let i = randomizedChildren.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const tempI = randomizedChildren[i];\n      const tempJ = randomizedChildren[j];\n      if (tempI && tempJ) {\n        randomizedChildren[i] = tempJ;\n        randomizedChildren[j] = tempI;\n      }\n    }\n\n    // Mark randomization as done only if timing is ONCE\n    if (controls.randomizationTiming === RandomizationTiming.ONCE) {\n      controls.reorderChildren = true;\n    }\n\n    // Update the activity's children array with the new order\n    activity.children.length = 0;\n    activity.children.push(...randomizedChildren);\n\n    return randomizedChildren;\n  }\n\n  /**\n   * Apply selection and randomization to an activity\n   * This combines both SR.1 and SR.2 processes\n   * @param {Activity} activity - The parent activity\n   * @param {boolean} isNewAttempt - Whether this is a new attempt on the activity\n   * @return {Activity[]} - The processed child activities\n   */\n  public static applySelectionAndRandomization(\n    activity: Activity,\n    isNewAttempt: boolean = false,\n  ): Activity[] {\n    const controls = activity.sequencingControls;\n\n    // Check if we should apply selection/randomization\n    let shouldApplySelection = false;\n    let shouldApplyRandomization = false;\n\n    // For ON_EACH_NEW_ATTEMPT timing, only apply on new attempts\n    if (controls.selectionTiming === SelectionTiming.ON_EACH_NEW_ATTEMPT) {\n      shouldApplySelection = isNewAttempt;\n      if (isNewAttempt) {\n        controls.selectionCountStatus = false;\n      }\n    } else if (controls.selectionTiming === SelectionTiming.ONCE) {\n      shouldApplySelection = !controls.selectionCountStatus;\n    }\n\n    if (controls.randomizationTiming === RandomizationTiming.ON_EACH_NEW_ATTEMPT) {\n      shouldApplyRandomization = isNewAttempt;\n      if (isNewAttempt) {\n        controls.reorderChildren = false;\n      }\n    } else if (controls.randomizationTiming === RandomizationTiming.ONCE) {\n      shouldApplyRandomization = !controls.reorderChildren;\n    }\n\n    // Apply selection first if needed\n    if (shouldApplySelection) {\n      this.selectChildrenProcess(activity);\n    }\n\n    // Then apply randomization if needed\n    if (shouldApplyRandomization) {\n      this.randomizeChildrenProcess(activity);\n    }\n\n    // Get the final processed children\n    const processedChildren = activity.children.filter(child => child.isAvailable);\n    \n    // Store the processed children on the activity\n    activity.setProcessedChildren(processedChildren);\n    \n    return processedChildren;\n  }\n\n  /**\n   * Check if selection is needed for an activity\n   * @param {Activity} activity - The activity to check\n   * @return {boolean} - True if selection is needed\n   */\n  public static isSelectionNeeded(activity: Activity): boolean {\n    const controls = activity.sequencingControls;\n    \n    if (controls.selectionTiming === SelectionTiming.NEVER) {\n      return false;\n    }\n\n    if (\n      controls.selectionTiming === SelectionTiming.ONCE &&\n      controls.selectionCountStatus\n    ) {\n      return false;\n    }\n\n    return controls.selectCount !== null && controls.selectCount < activity.children.length;\n  }\n\n  /**\n   * Check if randomization is needed for an activity\n   * @param {Activity} activity - The activity to check\n   * @return {boolean} - True if randomization is needed\n   */\n  public static isRandomizationNeeded(activity: Activity): boolean {\n    const controls = activity.sequencingControls;\n    \n    if (controls.randomizationTiming === RandomizationTiming.NEVER) {\n      return false;\n    }\n\n    if (\n      controls.randomizationTiming === RandomizationTiming.ONCE &&\n      controls.reorderChildren\n    ) {\n      return false;\n    }\n\n    return controls.randomizeChildren;\n  }\n}","import { Activity } from \"./activity\";\nimport { ActivityTree } from \"./activity_tree\";\nimport {\n  RuleActionType,\n  RuleConditionOperator,\n  SequencingRule,\n  SequencingRules\n} from \"./sequencing_rules\";\nimport { SequencingControls } from \"./sequencing_controls\";\nimport { ADLNav } from \"../adl\";\nimport { getDurationAsSeconds } from \"../../../utilities\";\nimport { scorm2004_regex } from \"../../../constants/regex\";\nimport { SelectionRandomization } from \"./selection_randomization\";\n\n/**\n * Enum for sequencing request types\n */\nexport enum SequencingRequestType {\n  START = \"start\",\n  RESUME_ALL = \"resumeAll\",\n  CONTINUE = \"continue\",\n  PREVIOUS = \"previous\",\n  CHOICE = \"choice\",\n  JUMP = \"jump\",\n  EXIT = \"exit\",\n  EXIT_ALL = \"exitAll\",\n  ABANDON = \"abandon\",\n  ABANDON_ALL = \"abandonAll\",\n  SUSPEND_ALL = \"suspendAll\",\n  RETRY = \"retry\",\n  RETRY_ALL = \"retryAll\",\n}\n\n/**\n * Enum for delivery request types\n */\nexport enum DeliveryRequestType {\n  DELIVER = \"deliver\",\n  DO_NOT_DELIVER = \"doNotDeliver\",\n}\n\n/**\n * Class representing the result of a sequencing process\n */\nexport class SequencingResult {\n  public deliveryRequest: DeliveryRequestType;\n  public targetActivity: Activity | null;\n  public exception: string | null;\n\n  constructor(\n    deliveryRequest: DeliveryRequestType = DeliveryRequestType.DO_NOT_DELIVER,\n    targetActivity: Activity | null = null,\n    exception: string | null = null\n  ) {\n    this.deliveryRequest = deliveryRequest;\n    this.targetActivity = targetActivity;\n    this.exception = exception;\n  }\n}\n\n/**\n * Class implementing SCORM 2004 sequencing processes\n */\nexport class SequencingProcess {\n  private activityTree: ActivityTree;\n  private sequencingRules: SequencingRules | null;\n  private sequencingControls: SequencingControls | null;\n  private adlNav: ADLNav | null;\n  private now: () => Date;\n  private getAttemptElapsedSecondsHook: ((activity: Activity) => number) | undefined;\n  private getActivityElapsedSecondsHook: ((activity: Activity) => number) | undefined;\n\n  constructor(\n    activityTree: ActivityTree,\n    sequencingRules?: SequencingRules | null,\n    sequencingControls?: SequencingControls | null,\n    adlNav: ADLNav | null = null,\n    options?: {\n      now?: () => Date;\n      getAttemptElapsedSeconds?: (activity: Activity) => number;\n      getActivityElapsedSeconds?: (activity: Activity) => number;\n    }\n  ) {\n    this.activityTree = activityTree;\n    this.sequencingRules = sequencingRules || null;\n    this.sequencingControls = sequencingControls || null;\n    this.adlNav = adlNav;\n    this.now = options?.now || (() => new Date());\n    this.getAttemptElapsedSecondsHook = (options?.getAttemptElapsedSeconds as\n      | ((activity: Activity) => number)\n      | undefined);\n    this.getActivityElapsedSecondsHook = (options?.getActivityElapsedSeconds as\n      | ((activity: Activity) => number)\n      | undefined);\n  }\n\n  /**\n   * Main Sequencing Request Process (SB.2.12)\n   * This is the main entry point for all navigation requests\n   * @param {SequencingRequestType} request - The sequencing request\n   * @param {string} targetActivityId - The target activity ID (for choice/jump)\n   * @return {SequencingResult} - The result of the sequencing process\n   */\n  public sequencingRequestProcess(\n    request: SequencingRequestType,\n    targetActivityId: string | null = null\n  ): SequencingResult {\n    // Initialize result\n    const result = new SequencingResult();\n\n    // Get current activity\n    const currentActivity = this.activityTree.currentActivity;\n    const suspendedActivity = this.activityTree.suspendedActivity;\n\n    // Process based on request type\n    switch (request) {\n      case SequencingRequestType.START:\n        return this.startSequencingRequestProcess();\n\n      case SequencingRequestType.RESUME_ALL:\n        return this.resumeAllSequencingRequestProcess();\n\n      case SequencingRequestType.CONTINUE:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.continueSequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.PREVIOUS:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.previousSequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.CHOICE:\n        if (!targetActivityId) {\n          result.exception = \"SB.2.12-5\"; // No target specified\n          return result;\n        }\n        return this.choiceSequencingRequestProcess(targetActivityId, currentActivity);\n\n      case SequencingRequestType.JUMP:\n        if (!targetActivityId) {\n          result.exception = \"SB.2.12-5\"; // No target specified\n          return result;\n        }\n        return this.jumpSequencingRequestProcess(targetActivityId);\n\n      case SequencingRequestType.EXIT:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.exitSequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.EXIT_ALL:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.exitAllSequencingRequestProcess();\n\n      case SequencingRequestType.ABANDON:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.abandonSequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.ABANDON_ALL:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.abandonAllSequencingRequestProcess();\n\n      case SequencingRequestType.SUSPEND_ALL:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.suspendAllSequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.RETRY:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.retrySequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.RETRY_ALL:\n        return this.retryAllSequencingRequestProcess();\n\n      default:\n        result.exception = \"SB.2.12-6\"; // Undefined sequencing request\n        return result;\n    }\n  }\n\n  /**\n   * Start Sequencing Request Process (SB.2.5)\n   * Determines the first activity to deliver when starting\n   * @return {SequencingResult}\n   */\n  private startSequencingRequestProcess(): SequencingResult {\n    const result = new SequencingResult();\n    const root = this.activityTree.root;\n\n    if (!root) {\n      result.exception = \"SB.2.5-1\"; // No activity tree\n      return result;\n    }\n\n    // Check if sequencing session has already begun\n    if (this.activityTree.currentActivity !== null) {\n      result.exception = \"SB.2.5-2\"; // Sequencing session already begun\n      return result;\n    }\n\n    // For START, we need to flow into the activity tree from the root\n    // Start with the root and find first deliverable leaf activity\n    const deliverableActivity = this.findFirstDeliverableActivity(root);\n\n    if (!deliverableActivity) {\n      result.exception = \"SB.2.5-3\"; // No activity available\n      return result;\n    }\n\n    // Deliver the identified activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = deliverableActivity;\n    return result;\n  }\n\n  /**\n   * Find First Deliverable Activity\n   * Recursively searches from the given activity to find the first deliverable leaf\n   * @param {Activity} activity - The activity to start searching from\n   * @return {Activity | null} - The first deliverable activity, or null if none found\n   */\n  private findFirstDeliverableActivity(activity: Activity): Activity | null {\n    // Check if this activity can be delivered (leaf activity)\n    if (activity.children.length === 0) {\n      // This is a leaf - check if it can be delivered\n      if (this.checkActivityProcess(activity)) {\n        return activity;\n      }\n      return null;\n    }\n\n    // This is a cluster - look through children for deliverable activity\n    this.ensureSelectionAndRandomization(activity);\n    const children = activity.getAvailableChildren();\n\n    for (const child of children) {\n      const deliverable = this.findFirstDeliverableActivity(child);\n      if (deliverable) {\n        return deliverable;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Resume All Sequencing Request Process (SB.2.6)\n   * Resumes a suspended session\n   * @return {SequencingResult}\n   */\n  private resumeAllSequencingRequestProcess(): SequencingResult {\n    const result = new SequencingResult();\n    const suspendedActivity = this.activityTree.suspendedActivity;\n\n    if (!suspendedActivity) {\n      result.exception = \"SB.2.6-1\"; // No suspended activity\n      return result;\n    }\n\n    if (this.activityTree.currentActivity !== null) {\n      result.exception = \"SB.2.6-2\"; // Current activity already defined\n      return result;\n    }\n\n    // Deliver the suspended activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = suspendedActivity;\n    return result;\n  }\n\n  /**\n   * Continue Sequencing Request Process (SB.2.7)\n   * Processes continue navigation request\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private continueSequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Check if the current activity has been terminated\n    if (currentActivity.isActive) {\n      result.exception = \"SB.2.7-1\"; // Current activity not terminated\n      return result;\n    }\n\n    // Check if flow is allowed from the current activity's parent\n    if (currentActivity.parent && !currentActivity.parent.sequencingControls.flow) {\n      result.exception = \"SB.2.7-2\"; // No activity available (flow disabled)\n      return result;\n    }\n\n    // Flow from current activity to find next using flow subprocess\n    const flowResult = this.flowSubprocess(currentActivity, FlowSubprocessMode.FORWARD);\n\n    if (!flowResult) {\n      result.exception = \"SB.2.7-2\"; // No activity available\n      return result;\n    }\n\n    // Deliver the identified activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = flowResult;\n    return result;\n  }\n\n  /**\n   * Previous Sequencing Request Process (SB.2.8)\n   * Processes previous navigation request\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private previousSequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Check if the current activity has been terminated\n    if (currentActivity.isActive) {\n      result.exception = \"SB.2.8-1\"; // Current activity not terminated\n      return result;\n    }\n\n    // Check if flow is allowed from the current activity's parent\n    if (currentActivity.parent && !currentActivity.parent.sequencingControls.flow) {\n      result.exception = \"SB.2.8-2\"; // No activity available (flow disabled)\n      return result;\n    }\n\n    // Check if backward flow is allowed (forwardOnly control)\n    if (currentActivity.parent && currentActivity.parent.sequencingControls.forwardOnly) {\n      result.exception = \"SB.2.8-2\"; // No activity available (backward flow disabled)\n      return result;\n    }\n\n    // Flow from current activity to find previous using flow subprocess\n    const flowResult = this.flowSubprocess(currentActivity, FlowSubprocessMode.BACKWARD);\n\n    if (!flowResult) {\n      result.exception = \"SB.2.8-2\"; // No activity available\n      return result;\n    }\n\n    // Deliver the identified activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = flowResult;\n    return result;\n  }\n\n  /**\n   * Choice Sequencing Request Process (SB.2.9)\n   * Processes choice navigation request\n   * @param {string} targetActivityId - The target activity ID\n   * @param {Activity | null} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private choiceSequencingRequestProcess(\n    targetActivityId: string,\n    currentActivity: Activity | null\n  ): SequencingResult {\n    const result = new SequencingResult();\n\n    // Find the target activity\n    let targetActivity = this.activityTree.getActivity(targetActivityId);\n    if (!targetActivity) {\n      result.exception = \"SB.2.9-1\"; // Target activity does not exist\n      return result;\n    }\n\n    // Check if target is in the activity tree\n    if (!this.isActivityInTree(targetActivity)) {\n      result.exception = \"SB.2.9-2\"; // Target activity not in tree\n      return result;\n    }\n\n    // Cannot choose the root activity\n    if (targetActivity === this.activityTree.root) {\n      result.exception = \"SB.2.9-3\"; // Cannot choose root\n      return result;\n    }\n\n    // Path to root validation\n    let activity: Activity | null = targetActivity;\n    while (activity) {\n      if (activity.isHiddenFromChoice) {\n        result.exception = \"SB.2.9-4\"; // Activity hidden from choice\n        return result;\n      }\n\n      // Check if choice control is constrained\n      if (activity.parent && !activity.parent.sequencingControls.choice) {\n        result.exception = \"SB.2.9-5\"; // Choice control is not allowed\n        return result;\n      }\n\n      activity = activity.parent;\n    }\n\n    // Check if current activity needs to be terminated\n    if (currentActivity && currentActivity.isActive) {\n      result.exception = \"SB.2.9-6\"; // Current activity not terminated\n      return result;\n    }\n\n    // Find common ancestor\n    const commonAncestor = this.findCommonAncestor(currentActivity, targetActivity);\n\n    // Terminate descendent attempts from common ancestor\n    if (currentActivity) {\n      this.terminateDescendentAttemptsProcess(commonAncestor || this.activityTree.root!);\n    }\n\n    // Form the activity path from target to common ancestor\n    const activityPath: Activity[] = [];\n    activity = targetActivity;\n    while (activity && activity !== commonAncestor) {\n      activityPath.unshift(activity);\n      activity = activity.parent;\n    }\n\n    // Evaluate each activity in the path\n    for (const pathActivity of activityPath) {\n      if (!this.checkActivityProcess(pathActivity)) {\n        // Sequencing ends with no delivery\n        return result;\n      }\n    }\n\n    // If target is not a leaf, flow forward to find a leaf\n    if (targetActivity.children.length > 0) {\n      this.ensureSelectionAndRandomization(targetActivity);\n      const availableChildren = targetActivity.getAvailableChildren();\n\n      const flowResult = this.flowActivityTraversalSubprocess(\n        targetActivity,\n        true, // direction forward\n        true, // consider children\n        FlowSubprocessMode.FORWARD\n      );\n\n      if (!flowResult) {\n        result.exception = \"SB.2.9-7\"; // No activity available from target\n        return result;\n      }\n\n      targetActivity = flowResult;\n    }\n\n    // Deliver the identified activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = targetActivity;\n    return result;\n  }\n\n  /**\n   * Jump Sequencing Request Process (SB.2.13)\n   * Processes jump navigation request - SCORM 2004 4th Edition\n   * @param {string} targetActivityId - The target activity ID\n   * @return {SequencingResult}\n   */\n  private jumpSequencingRequestProcess(targetActivityId: string): SequencingResult {\n    const result = new SequencingResult();\n\n    // Find the target activity\n    const targetActivity = this.activityTree.getActivity(targetActivityId);\n    if (!targetActivity) {\n      result.exception = \"SB.2.13-1\"; // Target activity does not exist\n      return result;\n    }\n\n    // Check if target is in the activity tree\n    if (!this.isActivityInTree(targetActivity)) {\n      result.exception = \"SB.2.13-2\"; // Target activity not in tree\n      return result;\n    }\n\n    // Check if target is available\n    if (!targetActivity.isAvailable) {\n      result.exception = \"SB.2.13-3\"; // Target not available\n      return result;\n    }\n\n    // Deliver the target activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = targetActivity;\n    return result;\n  }\n\n  /**\n   * Exit Sequencing Request Process\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private exitSequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Check if exit is allowed\n    if (!currentActivity.parent) {\n      result.exception = \"SB.2.11-1\"; // Exit not allowed - no parent\n      return result;\n    }\n\n    // Check parent's sequencing controls\n    if (!currentActivity.parent.sequencingControls.choiceExit) {\n      result.exception = \"SB.2.11-2\"; // Exit not allowed by sequencing controls\n      return result;\n    }\n\n    // Terminate current activity\n    this.terminateDescendentAttemptsProcess(currentActivity);\n\n    return result;\n  }\n\n  /**\n   * Exit All Sequencing Request Process\n   * @return {SequencingResult}\n   */\n  private exitAllSequencingRequestProcess(): SequencingResult {\n    const result = new SequencingResult();\n\n    // Terminate all activities\n    if (this.activityTree.root) {\n      this.terminateDescendentAttemptsProcess(this.activityTree.root);\n    }\n\n    return result;\n  }\n\n  /**\n   * Abandon Sequencing Request Process\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private abandonSequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Set current activity as abandoned\n    currentActivity.isActive = false;\n    this.activityTree.currentActivity = currentActivity.parent;\n\n    return result;\n  }\n\n  /**\n   * Abandon All Sequencing Request Process\n   * @return {SequencingResult}\n   */\n  private abandonAllSequencingRequestProcess(): SequencingResult {\n    const result = new SequencingResult();\n\n    // Abandon all activities\n    this.activityTree.currentActivity = null;\n\n    return result;\n  }\n\n  /**\n   * Suspend All Sequencing Request Process\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private suspendAllSequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Check if suspend is allowed\n    if (currentActivity !== this.activityTree.root) {\n      currentActivity.isSuspended = true;\n      this.activityTree.suspendedActivity = currentActivity;\n      this.activityTree.currentActivity = null;\n    } else {\n      result.exception = \"SB.2.15-1\"; // Cannot suspend root\n    }\n\n    return result;\n  }\n\n  /**\n   * Retry Sequencing Request Process\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private retrySequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Terminate current activity\n    this.terminateDescendentAttemptsProcess(currentActivity);\n\n    // Increment attempt count\n    currentActivity.incrementAttemptCount();\n\n    // Deliver the activity again\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = currentActivity;\n    return result;\n  }\n\n  /**\n   * Retry All Sequencing Request Process\n   * @return {SequencingResult}\n   */\n  private retryAllSequencingRequestProcess(): SequencingResult {\n    // Clear current activity to allow restart\n    this.activityTree.currentActivity = null;\n\n    // Restart from the root\n    return this.startSequencingRequestProcess();\n  }\n\n  /**\n   * Ensure selection and randomization is applied to an activity\n   * @param {Activity} activity - The activity to process\n   */\n  private ensureSelectionAndRandomization(activity: Activity): void {\n    // Check if processing is needed\n    if (activity.getAvailableChildren() === activity.children &&\n      (SelectionRandomization.isSelectionNeeded(activity) ||\n        SelectionRandomization.isRandomizationNeeded(activity))) {\n      SelectionRandomization.applySelectionAndRandomization(activity, activity.isNewAttempt);\n    }\n  }\n\n  /**\n   * Flow Activity Traversal Subprocess (SB.2.2)\n   * Checks if an activity can be delivered and flows into clusters if needed\n   */\n  private flowActivityTraversalSubprocess(\n    activity: Activity,\n    _direction: boolean,\n    considerChildren: boolean,\n    mode: FlowSubprocessMode\n  ): Activity | null {\n    // Check if the activity is available\n    if (!activity.isAvailable) {\n      return null;\n    }\n\n    // Check sequencing control modes\n    const parent = activity.parent;\n    if (parent && !parent.sequencingControls.flow) {\n      return null;\n    }\n\n    // Activity is a cluster, try to flow into it to find a deliverable leaf\n    if (considerChildren) {\n      this.ensureSelectionAndRandomization(activity);\n      const availableChildren = activity.getAvailableChildren();\n\n      for (const child of availableChildren) {\n        const deliverable = this.flowActivityTraversalSubprocess(\n          child,\n          mode === FlowSubprocessMode.FORWARD,\n          true,\n          mode\n        );\n        if (deliverable) {\n          return deliverable;\n        }\n      }\n    }\n\n    // If activity is a leaf (no children), check if it can be delivered\n    if (activity.children.length === 0) {\n      // Check if this activity was intended to be a cluster but is empty\n      // A cluster typically has flow control enabled\n      if (activity.sequencingControls.flow) {\n        // This appears to be an empty cluster, not a true leaf\n        return null;\n      }\n\n      if (this.checkActivityProcess(activity)) {\n        return activity;\n      }\n      return null;\n    }\n\n    return null;\n  }\n\n  /**\n   * Check Activity Process (SB.2.3)\n   * Validates if an activity can be delivered\n   */\n  private checkActivityProcess(activity: Activity): boolean {\n    // Check if activity is available\n    if (!activity.isAvailable) {\n      return false;\n    }\n\n    // Check limit conditions (UP.1)\n    if (this.limitConditionsCheckProcess(activity)) {\n      return false; // Activity violates limit conditions\n    }\n\n    // Check pre-condition rules using UP.2\n    const preConditionResult = this.sequencingRulesCheckProcess(\n      activity,\n      activity.sequencingRules.preConditionRules\n    );\n\n    return preConditionResult !== RuleActionType.SKIP &&\n      preConditionResult !== RuleActionType.DISABLED;\n  }\n\n  /**\n   * Terminate Descendent Attempts Process (SB.2.4)\n   * Ends attempts on an activity and its descendants\n   */\n  private terminateDescendentAttemptsProcess(activity: Activity, skipExitRules: boolean = false): void {\n    // Apply Exit Action Rules (TB.2.1) first to check for exit actions\n    let exitAction = null;\n    if (!skipExitRules) {\n      exitAction = this.exitActionRulesSubprocess(activity);\n    }\n\n    // End attempt on the activity\n    activity.isActive = false;\n\n    // Recursively terminate descendants\n    // Use all children here, not just available ones, since we need to terminate all\n    for (const child of activity.children) {\n      this.terminateDescendentAttemptsProcess(child, skipExitRules);\n    }\n\n    // Process deferred exit actions after termination to avoid recursion\n    if (exitAction && !skipExitRules) {\n      this.processDeferredExitAction(exitAction, activity);\n    }\n  }\n\n  /**\n   * Exit Action Rules Subprocess (TB.2.1)\n   * Evaluates the exit condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate exit rules for\n   * @return {RuleActionType | null} - The exit action to process, if any\n   * @private\n   */\n  private exitActionRulesSubprocess(activity: Activity): RuleActionType | null {\n    // Evaluate exit condition rules using UP.2\n    const exitAction = this.sequencingRulesCheckProcess(\n      activity,\n      activity.sequencingRules.exitConditionRules\n    );\n\n    // Only certain actions are valid for exit condition rules\n    if (exitAction === RuleActionType.EXIT ||\n      exitAction === RuleActionType.EXIT_PARENT ||\n      exitAction === RuleActionType.EXIT_ALL) {\n      return exitAction;\n    }\n\n    return null;\n  }\n\n  /**\n   * Process deferred exit action after termination\n   * @param {RuleActionType} exitAction - The exit action to process\n   * @param {Activity} activity - The activity that triggered the exit action\n   * @private\n   */\n  private processDeferredExitAction(exitAction: RuleActionType, activity: Activity): void {\n    switch (exitAction) {\n      case RuleActionType.EXIT:\n        // Exit terminates the current attempt on the activity\n        // Already handled by terminateDescendentAttemptsProcess\n        break;\n\n      case RuleActionType.EXIT_PARENT:\n        // Exit parent terminates the current attempt on the parent activity\n        if (activity.parent && activity.parent.isActive) {\n          this.terminateDescendentAttemptsProcess(activity.parent, true);\n        }\n        break;\n\n      case RuleActionType.EXIT_ALL:\n        // Exit all terminates all activities\n        if (this.activityTree.root && this.activityTree.root !== activity) {\n          // Only process if we haven't already terminated the root\n          const allActivities = this.activityTree.getAllActivities();\n          const anyActive = allActivities.some(a => a.isActive);\n          if (anyActive) {\n            this.terminateDescendentAttemptsProcess(this.activityTree.root, true);\n          }\n        }\n        break;\n    }\n  }\n\n  /**\n   * Post Condition Rules Subprocess (TB.2.2)\n   * Evaluates the post-condition rules for an activity after delivery\n   * @param {Activity} activity - The activity to evaluate post-condition rules for\n   * @return {RuleActionType | null} - The action to take, if any\n   * @private\n   */\n  private postConditionRulesSubprocess(activity: Activity): RuleActionType | null {\n    // Evaluate post-condition rules using UP.2\n    const postAction = this.sequencingRulesCheckProcess(\n      activity,\n      activity.sequencingRules.postConditionRules\n    );\n\n    // Only certain actions are valid for post-condition rules\n    const validActions = [\n      RuleActionType.EXIT_PARENT,\n      RuleActionType.EXIT_ALL,\n      RuleActionType.RETRY,\n      RuleActionType.RETRY_ALL,\n      RuleActionType.CONTINUE,\n      RuleActionType.PREVIOUS,\n      RuleActionType.STOP_FORWARD_TRAVERSAL,\n    ];\n\n    if (postAction && validActions.includes(postAction)) {\n      return postAction;\n    }\n\n    return null;\n  }\n\n  /**\n   * Validate Sequencing Request\n   * Priority 3 Gap: Comprehensive sequencing request validation\n   * @param {SequencingRequestType} request - The sequencing request\n   * @param {string | null} targetActivityId - Target activity ID\n   * @return {{valid: boolean, exception: string | null}} - Validation result\n   */\n  private validateSequencingRequest(request: SequencingRequestType, targetActivityId: string | null): {\n    valid: boolean,\n    exception: string | null\n  } {\n    // Validate request type\n    const validRequestTypes = Object.values(SequencingRequestType);\n    if (!validRequestTypes.includes(request)) {\n      return { valid: false, exception: \"SB.2.12-6\" };\n    }\n\n    // Validate target activity ID for choice and jump requests\n    if ((request === SequencingRequestType.CHOICE || request === SequencingRequestType.JUMP) && !targetActivityId) {\n      return { valid: false, exception: \"SB.2.12-5\" };\n    }\n\n    // Additional request-specific validation\n    const requestSpecificValidation = this.validateRequestSpecificConstraints(request, targetActivityId);\n    if (!requestSpecificValidation.valid) {\n      return requestSpecificValidation;\n    }\n\n    return { valid: true, exception: null };\n  }\n\n  /**\n   * Validate Request-Specific Constraints\n   * @param {SequencingRequestType} request - The sequencing request\n   * @param {string | null} targetActivityId - Target activity ID\n   * @return {{valid: boolean, exception: string | null}} - Validation result\n   */\n  private validateRequestSpecificConstraints(request: SequencingRequestType, targetActivityId: string | null): {\n    valid: boolean,\n    exception: string | null\n  } {\n    const currentActivity = this.activityTree.currentActivity;\n\n    switch (request) {\n      case SequencingRequestType.CONTINUE:\n      case SequencingRequestType.PREVIOUS:\n      case SequencingRequestType.EXIT:\n      case SequencingRequestType.EXIT_ALL:\n      case SequencingRequestType.ABANDON:\n      case SequencingRequestType.ABANDON_ALL:\n      case SequencingRequestType.SUSPEND_ALL:\n      case SequencingRequestType.RETRY:\n        if (!currentActivity) {\n          return { valid: false, exception: \"SB.2.12-1\" };\n        }\n        break;\n      case SequencingRequestType.CHOICE:\n        if (targetActivityId) {\n          const targetActivity = this.activityTree.getActivity(targetActivityId);\n          if (!targetActivity) {\n            return { valid: false, exception: \"SB.2.9-1\" };\n          }\n        }\n        break;\n      case SequencingRequestType.JUMP:\n        if (targetActivityId) {\n          const targetActivity = this.activityTree.getActivity(targetActivityId);\n          if (!targetActivity) {\n            return { valid: false, exception: \"SB.2.13-1\" };\n          }\n        }\n        break;\n    }\n\n    return { valid: true, exception: null };\n  }\n\n  /**\n   * Limit Conditions Check Process (UP.1)\n   * Checks if an activity has exceeded its limit conditions (attempt limit or duration limits)\n   * @param {Activity} activity - The activity to check\n   * @return {boolean} - True if limit conditions are violated, false otherwise\n   * @private\n   */\n  private limitConditionsCheckProcess(activity: Activity): boolean {\n    // Check attempt limit\n    if (activity.attemptLimit !== null && activity.attemptCount >= activity.attemptLimit) {\n      return true; // Attempt limit exceeded\n    }\n\n    // Check attempt absolute duration limit\n    if (activity.attemptAbsoluteDurationLimit !== null) {\n      const attemptDurationMs = this.parseISO8601Duration(activity.attemptExperiencedDuration);\n      const attemptLimitMs = this.parseISO8601Duration(activity.attemptAbsoluteDurationLimit);\n\n      if (attemptDurationMs >= attemptLimitMs) {\n        return true; // Attempt duration limit exceeded\n      }\n    }\n\n    // Check activity absolute duration limit\n    if (activity.activityAbsoluteDurationLimit !== null) {\n      const activityDurationMs = this.parseISO8601Duration(activity.activityExperiencedDuration);\n      const activityLimitMs = this.parseISO8601Duration(activity.activityAbsoluteDurationLimit);\n\n      if (activityDurationMs >= activityLimitMs) {\n        return true; // Activity duration limit exceeded\n      }\n    }\n\n    return false; // No limit conditions violated\n  }\n\n  /**\n   * Parse ISO 8601 duration to milliseconds\n   * @param {string} duration - ISO 8601 duration string\n   * @return {number} - Duration in milliseconds\n   * @private\n   */\n  private parseISO8601Duration(duration: string): number {\n    const regex = /PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?/;\n    const matches = duration.match(regex);\n\n    if (!matches) {\n      return 0;\n    }\n\n    const hours = parseInt(matches[1] || \"0\", 10);\n    const minutes = parseInt(matches[2] || \"0\", 10);\n    const seconds = parseFloat(matches[3] || \"0\");\n\n    return (hours * 3600 + minutes * 60 + seconds) * 1000;\n  }\n\n  /**\n   * Sequencing Rules Check Process (UP.2)\n   * General process for evaluating a set of sequencing rules\n   * @param {Activity} activity - The activity to evaluate rules for\n   * @param {SequencingRule[]} rules - The rules to evaluate\n   * @return {RuleActionType | null} - The action to take, or null if no rules apply\n   * @private\n   */\n  private sequencingRulesCheckProcess(activity: Activity, rules: SequencingRule[]): RuleActionType | null {\n    // Evaluate each rule in order\n    for (const rule of rules) {\n      // Use the Sequencing Rules Check Subprocess (UP.2.1) to evaluate\n      if (this.sequencingRulesCheckSubprocess(activity, rule)) {\n        // Rule condition(s) met, return the action\n        return rule.action;\n      }\n    }\n\n    // No rules applied\n    return null;\n  }\n\n  /**\n   * Sequencing Rules Check Subprocess (UP.2.1)\n   * Evaluates individual sequencing rule conditions\n   * @param {Activity} activity - The activity to evaluate the rule for\n   * @param {SequencingRule} rule - The rule to evaluate\n   * @return {boolean} - True if all rule conditions are met\n   * @private\n   */\n  private sequencingRulesCheckSubprocess(activity: Activity, rule: SequencingRule): boolean {\n    // If no conditions, the rule always applies\n    if (rule.conditions.length === 0) {\n      return true;\n    }\n\n    // Evaluate based on condition combination\n    const conditionCombination = rule.conditionCombination;\n\n    if (conditionCombination === \"all\" || conditionCombination === RuleConditionOperator.AND) {\n      // All conditions must be true\n      return rule.conditions.every((condition) => {\n        // Log evaluation for debugging\n        return condition.evaluate(activity);\n      });\n    } else if (conditionCombination === \"any\" || conditionCombination === RuleConditionOperator.OR) {\n      // At least one condition must be true\n      return rule.conditions.some((condition) => {\n        // Log evaluation for debugging\n        return condition.evaluate(activity);\n      });\n    }\n\n    // Unknown combination, default to false\n    return false;\n  }\n\n  /**\n   * Check if activity is in the activity tree\n   */\n  private isActivityInTree(activity: Activity): boolean {\n    return this.activityTree.getAllActivities().includes(activity);\n  }\n\n  /**\n   * Find common ancestor of two activities\n   */\n  private findCommonAncestor(activity1: Activity | null, activity2: Activity | null): Activity | null {\n    if (!activity1 || !activity2) {\n      return null;\n    }\n\n    // Get ancestors of activity1\n    const ancestors1: Activity[] = [];\n    let current: Activity | null = activity1;\n    while (current) {\n      ancestors1.push(current);\n      current = current.parent;\n    }\n\n    // Find first common ancestor\n    current = activity2;\n    while (current) {\n      if (ancestors1.includes(current)) {\n        return current;\n      }\n      current = current.parent;\n    }\n\n    return null;\n  }\n\n  /**\n   * Flow Subprocess (SB.2.3)\n   * Traverses the activity tree in the specified direction to find a deliverable activity\n   * @param {Activity} fromActivity - The activity to flow from\n   * @param {FlowSubprocessMode} direction - The flow direction\n   * @return {Activity | null} - The next deliverable activity, or null if none found\n   */\n  private flowSubprocess(fromActivity: Activity, direction: FlowSubprocessMode): Activity | null {\n    let candidateActivity: Activity | null = fromActivity;\n    let firstIteration = true;\n\n    // Keep traversing until we find a deliverable activity or run out of candidates\n    while (candidateActivity) {\n      // Get next candidate using flow tree traversal\n      // On first iteration, we want to skip the current activity's children\n      const nextCandidate = this.flowTreeTraversalSubprocess(\n        candidateActivity,\n        direction,\n        firstIteration\n      );\n\n      if (!nextCandidate) {\n        // No more candidates\n        return null;\n      }\n\n      // Check if this candidate can be delivered\n      const deliverable = this.flowActivityTraversalSubprocess(\n        nextCandidate,\n        direction === FlowSubprocessMode.FORWARD,\n        true, // consider children\n        direction\n      );\n\n      if (deliverable) {\n        return deliverable;\n      }\n\n      // Continue with next candidate\n      candidateActivity = nextCandidate;\n      firstIteration = false;\n    }\n\n    return null;\n  }\n\n\n  /**\n   * Flow Tree Traversal Subprocess (SB.2.1)\n   * Traverses the activity tree to find the next activity in the specified direction\n   * @param {Activity} fromActivity - The activity to traverse from\n   * @param {FlowSubprocessMode} direction - The traversal direction\n   * @param {boolean} skipChildren - Whether to skip checking children (for continuing from current)\n   * @return {Activity | null} - The next activity in the tree, or null if none\n   */\n  private flowTreeTraversalSubprocess(\n    fromActivity: Activity,\n    direction: FlowSubprocessMode,\n    skipChildren: boolean = false\n  ): Activity | null {\n    if (direction === FlowSubprocessMode.FORWARD) {\n      // First, check if activity has children (unless we're skipping them)\n      if (!skipChildren) {\n        this.ensureSelectionAndRandomization(fromActivity);\n        const children = fromActivity.getAvailableChildren();\n        if (children.length > 0) {\n          return children[0] || null;\n        }\n      }\n\n      // No children, try to get next sibling\n      let current: Activity | null = fromActivity;\n      while (current) {\n        const nextSibling = this.activityTree.getNextSibling(current);\n        if (nextSibling) {\n          return nextSibling;\n        }\n        // No next sibling, move up to parent\n        current = current.parent;\n      }\n    } else {\n      // Backward direction\n      // Try to get previous sibling\n      const previousSibling = this.activityTree.getPreviousSibling(fromActivity);\n      if (previousSibling) {\n        // If previous sibling has children, go to the last descendant\n        let lastDescendant = previousSibling;\n        while (true) {\n          this.ensureSelectionAndRandomization(lastDescendant);\n          const children = lastDescendant.getAvailableChildren();\n          if (children.length === 0) {\n            break;\n          }\n          const lastChild = children[children.length - 1];\n          if (!lastChild) break;\n          lastDescendant = lastChild;\n        }\n        return lastDescendant;\n      }\n\n      // No previous sibling at this level, try going up to parent and then its previous sibling\n      let current: Activity | null = fromActivity;\n      while (current && current.parent) {\n        const parentPreviousSibling = this.activityTree.getPreviousSibling(current.parent);\n        if (parentPreviousSibling) {\n          // Found a previous sibling of an ancestor, go to its last descendant\n          let lastDescendant = parentPreviousSibling;\n          while (true) {\n            this.ensureSelectionAndRandomization(lastDescendant);\n            const children = lastDescendant.getAvailableChildren();\n            if (children.length === 0) {\n              break;\n            }\n            const lastChild = children[children.length - 1];\n            if (!lastChild) break;\n            lastDescendant = lastChild;\n          }\n          return lastDescendant;\n        }\n        // Move up to grandparent\n        current = current.parent;\n      }\n\n      return null; // Reached beginning of tree\n    }\n\n    return null;\n  }\n\n  /**\n   * Choice Flow Subprocess (SB.2.9.1)\n   * Handles the flow logic specific to choice navigation requests\n   * @param {Activity} targetActivity - The target activity for the choice\n   * @param {Activity | null} commonAncestor - The common ancestor between current and target\n   * @return {Activity | null} - The activity to deliver, or null if flow fails\n   */\n  private choiceFlowSubprocess(\n    targetActivity: Activity,\n    commonAncestor: Activity | null\n  ): Activity | null {\n    // If target is a leaf, it's the delivery candidate\n    if (targetActivity.children.length === 0) {\n      return targetActivity;\n    }\n\n    // If target is a cluster, use choice flow tree traversal\n    return this.choiceFlowTreeTraversalSubprocess(targetActivity);\n  }\n\n  /**\n   * Enhanced Choice Flow Tree Traversal Subprocess (SB.2.9.2)\n   * Priority 3 Gap: Choice Flow Tree Traversal with complete constraint validation\n   * @param {Activity} fromActivity - The cluster activity to traverse from\n   * @return {Activity | null} - A leaf activity for delivery, or null if none found\n   */\n  private choiceFlowTreeTraversalSubprocess(fromActivity: Activity): Activity | null {\n    // Apply selection and randomization\n    this.ensureSelectionAndRandomization(fromActivity);\n    const children = fromActivity.getAvailableChildren();\n\n    // Enhanced constraint validation for choice flow tree traversal\n    const constraintValidation = this.validateChoiceFlowConstraints(fromActivity, children);\n    if (!constraintValidation.valid) {\n      return null;\n    }\n\n    // Find the first available child that can be delivered\n    for (const child of constraintValidation.validChildren) {\n      // Check if child can be delivered or traverse into it\n      const deliverable = this.enhancedChoiceActivityTraversalSubprocess(child);\n      if (deliverable) {\n        return deliverable;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Enhanced Choice Activity Traversal Subprocess (SB.2.4)\n   * Priority 3 Gap: Choice Activity Traversal with stopForwardTraversal and forwardOnly checks\n   * @param {Activity} activity - The activity to check and possibly traverse\n   * @return {Activity | null} - A deliverable activity, or null if none found\n   */\n  private enhancedChoiceActivityTraversalSubprocess(activity: Activity): Activity | null {\n    // Check if activity is available\n    if (!activity.isAvailable) {\n      return null;\n    }\n\n    // Check if activity is hidden from choice\n    if (activity.isHiddenFromChoice) {\n      return null;\n    }\n\n    // Enhanced constraint checks including stopForwardTraversal and forwardOnly\n    const traversalValidation = this.validateChoiceTraversalConstraints(activity);\n    if (!traversalValidation.canTraverse) {\n      return null;\n    }\n\n    // If it's a leaf, check if it can be delivered\n    if (activity.children.length === 0) {\n      if (this.checkActivityProcess(activity)) {\n        return activity;\n      }\n      return null;\n    }\n\n    // If it's a cluster, traverse into it with enhanced validation\n    if (traversalValidation.canTraverseInto) {\n      return this.choiceFlowTreeTraversalSubprocess(activity);\n    }\n\n    return null;\n  }\n\n  /**\n   * Original Choice Activity Traversal Subprocess for backwards compatibility\n   */\n  private choiceActivityTraversalSubprocess(activity: Activity): Activity | null {\n    return this.enhancedChoiceActivityTraversalSubprocess(activity);\n  }\n\n  /**\n   * Evaluate post-condition rules for the current activity\n   * This should be called after an activity has been delivered and the learner has interacted with it\n   * @param {Activity} activity - The activity to evaluate\n   * @return {SequencingRequestType | null} - The sequencing request to process, if any\n   */\n  public evaluatePostConditionRules(activity: Activity): SequencingRequestType | null {\n    const postAction = this.postConditionRulesSubprocess(activity);\n\n    if (!postAction) {\n      return null;\n    }\n\n    // Map post-condition actions to sequencing requests\n    switch (postAction) {\n      case RuleActionType.EXIT_PARENT:\n        // Exit parent will be handled by exit action rules\n        return SequencingRequestType.EXIT;\n\n      case RuleActionType.EXIT_ALL:\n        return SequencingRequestType.EXIT_ALL;\n\n      case RuleActionType.RETRY:\n        return SequencingRequestType.RETRY;\n\n      case RuleActionType.RETRY_ALL:\n        return SequencingRequestType.RETRY_ALL;\n\n      case RuleActionType.CONTINUE:\n        return SequencingRequestType.CONTINUE;\n\n      case RuleActionType.PREVIOUS:\n        return SequencingRequestType.PREVIOUS;\n\n      case RuleActionType.STOP_FORWARD_TRAVERSAL:\n        // Set traversal limiter on controls; not a navigation request\n        activity.sequencingControls.stopForwardTraversal = true;\n        return null;\n\n      default:\n        return null;\n    }\n  }\n\n  /**\n   * Validate Choice Flow Constraints\n   * Priority 3 Gap: Choice Flow Tree Traversal constraint validation\n   * @param {Activity} fromActivity - Activity to traverse from\n   * @param {Activity[]} children - Available children\n   * @return {{valid: boolean, validChildren: Activity[]}} - Validation result\n   */\n  private validateChoiceFlowConstraints(fromActivity: Activity, children: Activity[]): {\n    valid: boolean,\n    validChildren: Activity[]\n  } {\n    const validChildren: Activity[] = [];\n\n    for (const child of children) {\n      // Check if child meets all choice flow constraints\n      if (this.meetsChoiceFlowConstraints(child, fromActivity)) {\n        validChildren.push(child);\n      }\n    }\n\n    return {\n      valid: validChildren.length > 0,\n      validChildren\n    };\n  }\n\n  /**\n   * Check if activity meets choice flow constraints\n   * @param {Activity} activity - Activity to check\n   * @param {Activity} parent - Parent activity\n   * @return {boolean} - True if constraints are met\n   */\n  private meetsChoiceFlowConstraints(activity: Activity, parent: Activity): boolean {\n    // Check basic availability\n    if (!activity.isAvailable || activity.isHiddenFromChoice) {\n      return false;\n    }\n\n    // Check parent constraint controls\n    if (parent.sequencingControls.constrainChoice) {\n      // Apply constrain choice logic specific to flow\n      return this.validateConstrainChoiceForFlow(activity, parent);\n    }\n\n    return true;\n  }\n\n  /**\n   * Validate Choice Traversal Constraints\n   * Priority 3 Gap: stopForwardTraversal and forwardOnly checks\n   * @param {Activity} activity - Activity to validate\n   * @return {{canTraverse: boolean, canTraverseInto: boolean}} - Traversal permissions\n   */\n  private validateChoiceTraversalConstraints(activity: Activity): {\n    canTraverse: boolean,\n    canTraverseInto: boolean\n  } {\n    let canTraverse = true;\n    let canTraverseInto = true;\n\n    // Check constrain choice control\n    if (activity.parent?.sequencingControls.constrainChoice) {\n      // Apply constrainChoice logic that might prevent traversal\n      canTraverse = this.evaluateConstrainChoiceForTraversal(activity);\n    }\n\n    // Check stopForwardTraversal control (if implemented in sequencing controls)\n    if (activity.sequencingControls && activity.sequencingControls.stopForwardTraversal) {\n      canTraverseInto = false;\n    }\n\n    // Check forwardOnly control in parent context\n    if (activity.parent?.sequencingControls.forwardOnly) {\n      // forwardOnly might restrict certain types of choice traversal\n      // depending on the current position and target\n      canTraverseInto = this.evaluateForwardOnlyForChoice(activity);\n    }\n\n    return { canTraverse, canTraverseInto };\n  }\n\n  /**\n   * Validate Constrained Choice Boundaries\n   * Priority 3 Gap: Proper choice boundary checking\n   * @param {Activity | null} currentActivity - Current activity\n   * @param {Activity} targetActivity - Target activity\n   * @return {{valid: boolean, exception: string | null}} - Validation result\n   */\n  private validateConstrainedChoiceBoundaries(currentActivity: Activity | null, targetActivity: Activity): {\n    valid: boolean,\n    exception: string | null\n  } {\n    // Path to root validation with enhanced constraint checking\n    let activity: Activity | null = targetActivity;\n    while (activity) {\n      if (activity.isHiddenFromChoice) {\n        return { valid: false, exception: \"SB.2.9-4\" }; // Activity hidden from choice\n      }\n\n      // Enhanced choice control validation\n      if (activity.parent && !activity.parent.sequencingControls.choice) {\n        return { valid: false, exception: \"SB.2.9-5\" }; // Choice control is not allowed\n      }\n\n      // Check constrained choice boundaries\n      if (activity.parent?.sequencingControls.constrainChoice) {\n        const boundaryCheck = this.checkConstrainedChoiceBoundary(currentActivity, activity, activity.parent);\n        if (!boundaryCheck.valid) {\n          return boundaryCheck;\n        }\n      }\n\n      activity = activity.parent;\n    }\n\n    return { valid: true, exception: null };\n  }\n\n  /**\n   * Helper methods for enhanced choice processing\n   */\n  private validateConstrainChoiceForFlow(activity: Activity, parent: Activity): boolean {\n    // Implement specific constrainChoice logic for flow scenarios according to SCORM 2004\n\n    // If constrainChoice is false, no restrictions apply\n    if (!parent.sequencingControls || !parent.sequencingControls.constrainChoice) {\n      return true;\n    }\n\n    // When constrainChoice is true, choices are restricted based on flow direction\n    const children = parent.children;\n    if (!children || children.length === 0) {\n      return true;\n    }\n\n    const targetIndex = children.indexOf(activity);\n    if (targetIndex === -1) {\n      return false; // Activity not found in parent's children\n    }\n\n    // Get the current activity in the flow\n    const currentActivity = this.getCurrentActivity(parent);\n    if (!currentActivity) {\n      // No current activity, allow choice to first available activity\n      return this.isActivityAvailableForChoice(activity);\n    }\n\n    const currentIndex = children.indexOf(currentActivity);\n    if (currentIndex === -1) {\n      return false; // Current activity not found\n    }\n\n    // Check flow direction constraints\n    if (parent.sequencingControls.flow) {\n      // In forward flow mode with constrainChoice, only allow:\n      // 1. Next activity in sequence\n      // 2. Previously completed activities if forwardOnly is false\n\n      if (targetIndex === currentIndex + 1) {\n        // Next activity - allow if available\n        return this.isActivityAvailableForChoice(activity);\n      }\n\n      if (targetIndex < currentIndex && !parent.sequencingControls.forwardOnly) {\n        // Previous activity - allow if it was completed\n        return activity.completionStatus === \"completed\" ||\n          activity.completionStatus === \"passed\";\n      }\n\n      // All other choices are constrained\n      return false;\n    } else {\n      // Non-flow mode - constrainChoice limits to completed/available activities\n      return this.isActivityAvailableForChoice(activity) &&\n        (activity.completionStatus === \"completed\" ||\n          activity.completionStatus === \"unknown\" ||\n          activity.completionStatus === \"incomplete\");\n    }\n  }\n\n  private evaluateConstrainChoiceForTraversal(activity: Activity): boolean {\n    // Implement constrainChoice evaluation for traversal according to SCORM 2004\n\n    if (!activity.parent) {\n      return true; // Root activity has no traversal constraints\n    }\n\n    const parent = activity.parent;\n\n    // If constrainChoice is false, traversal is allowed\n    if (!parent.sequencingControls || !parent.sequencingControls.constrainChoice) {\n      return true;\n    }\n\n    // When constrainChoice is true, traversal must respect choice constraints\n    // This is evaluated during navigation request processing\n\n    const siblings = parent.children;\n    if (!siblings || siblings.length === 0) {\n      return true;\n    }\n\n    const activityIndex = siblings.indexOf(activity);\n    if (activityIndex === -1) {\n      return false; // Activity not found in siblings\n    }\n\n    // Check if this activity can be reached through constrained choice\n    // 1. Check if activity is available for choice\n    if (!this.isActivityAvailableForChoice(activity)) {\n      return false;\n    }\n\n    // 2. Check traversal path constraints\n    if (parent.sequencingControls.flow) {\n      // In flow mode, check if we can traverse to this activity\n      const currentActivity = this.getCurrentActivity(parent);\n      if (currentActivity) {\n        const currentIndex = siblings.indexOf(currentActivity);\n\n        // If forwardOnly is true, can only traverse forward\n        if (parent.sequencingControls.forwardOnly && activityIndex < currentIndex) {\n          return false;\n        }\n\n        // Check if there are any blocking activities between current and target\n        if (currentIndex < activityIndex) {\n          // Forward traversal - check for mandatory intermediate activities\n          for (let i = currentIndex + 1; i < activityIndex; i++) {\n            const intermediateActivity = siblings[i];\n            if (intermediateActivity &&\n              this.isActivityMandatory(intermediateActivity) &&\n              !this.isActivityCompleted(intermediateActivity)) {\n              return false; // Cannot skip mandatory incomplete activity\n            }\n          }\n        }\n      }\n    }\n\n    // 3. Check specific choice constraints based on activity state\n    return this.validateActivityChoiceState(activity);\n  }\n\n  private evaluateForwardOnlyForChoice(activity: Activity): boolean {\n    // Implement forwardOnly evaluation for choice scenarios according to SCORM 2004\n\n    if (!activity.parent) {\n      return true; // Root activity has no forwardOnly constraints\n    }\n\n    const parent = activity.parent;\n\n    // If forwardOnly is false, choice is allowed in any direction\n    if (!parent.sequencingControls || !parent.sequencingControls.forwardOnly) {\n      return true;\n    }\n\n    // When forwardOnly is true, restrict backward navigation choices\n    const siblings = parent.children;\n    if (!siblings || siblings.length === 0) {\n      return true;\n    }\n\n    const targetIndex = siblings.indexOf(activity);\n    if (targetIndex === -1) {\n      return false; // Activity not found in siblings\n    }\n\n    // Find the current activity to determine navigation direction\n    const currentActivity = this.getCurrentActivity(parent);\n    if (!currentActivity) {\n      // No current activity, allow choice to any available activity\n      return this.isActivityAvailableForChoice(activity);\n    }\n\n    const currentIndex = siblings.indexOf(currentActivity);\n    if (currentIndex === -1) {\n      return true; // Current activity not found, allow choice\n    }\n\n    // ForwardOnly constraint: only allow choice to activities at or after current position\n    if (targetIndex < currentIndex) {\n      // Backward choice - check for exceptions\n\n      // Exception 1: Allow choice to previously completed activities if they are choice-enabled\n      if (activity.completionStatus === \"completed\" ||\n        activity.completionStatus === \"passed\") {\n        // Check if the activity allows choice even in forwardOnly mode\n        if (activity.sequencingControls && activity.sequencingControls.choice) {\n          return true;\n        }\n      }\n\n      // Exception 2: Allow choice if there's a specific choice rule allowing backward navigation\n      if (this.hasBackwardChoiceException(activity, parent)) {\n        return true;\n      }\n\n      // Otherwise, forwardOnly constraint blocks backward choice\n      return false;\n    }\n\n    // Forward or current position choice - allowed\n    return this.isActivityAvailableForChoice(activity);\n  }\n\n  private checkConstrainedChoiceBoundary(currentActivity: Activity | null, activity: Activity, parent: Activity): {\n    valid: boolean,\n    exception: string | null\n  } {\n    // Implement boundary checking logic for constrained choice according to SCORM 2004\n\n    try {\n      // If no current activity, choice to any available activity is valid\n      if (!currentActivity) {\n        if (this.isActivityAvailableForChoice(activity)) {\n          return { valid: true, exception: null };\n        } else {\n          return { valid: false, exception: \"Activity not available for choice\" };\n        }\n      }\n\n      // Check if parent has constrainChoice enabled\n      if (!parent.sequencingControls || !parent.sequencingControls.constrainChoice) {\n        // No constraints - just check basic availability\n        if (this.isActivityAvailableForChoice(activity)) {\n          return { valid: true, exception: null };\n        } else {\n          return { valid: false, exception: \"Activity not available for choice\" };\n        }\n      }\n\n      const siblings = parent.children;\n      if (!siblings || siblings.length === 0) {\n        return { valid: true, exception: null };\n      }\n\n      const currentIndex = siblings.indexOf(currentActivity);\n      const targetIndex = siblings.indexOf(activity);\n\n      if (currentIndex === -1 || targetIndex === -1) {\n        return { valid: false, exception: \"Activity not found in parent structure\" };\n      }\n\n      // Check flow and forwardOnly constraints\n      if (parent.sequencingControls.flow) {\n        // Flow mode constraints\n        if (parent.sequencingControls.forwardOnly && targetIndex < currentIndex) {\n          // Backward navigation in forwardOnly flow\n          if (activity.completionStatus !== \"completed\" &&\n            activity.completionStatus !== \"passed\") {\n            return { valid: false, exception: \"Forward-only constraint violated\" };\n          }\n        }\n\n        // Check if we're skipping mandatory activities\n        if (targetIndex > currentIndex) {\n          for (let i = currentIndex + 1; i < targetIndex; i++) {\n            const intermediateActivity = siblings[i];\n            if (intermediateActivity &&\n              this.isActivityMandatory(intermediateActivity) &&\n              !this.isActivityCompleted(intermediateActivity)) {\n              return { valid: false, exception: \"Cannot skip mandatory incomplete activity\" };\n            }\n          }\n        }\n      }\n\n      // Check choice boundaries based on completion and availability\n      if (!this.isActivityAvailableForChoice(activity)) {\n        return { valid: false, exception: \"Activity not available for choice\" };\n      }\n\n      // Check for specific boundary violations\n      if (this.hasChoiceBoundaryViolation(currentActivity, activity, parent)) {\n        return { valid: false, exception: \"Choice boundary constraint violation\" };\n      }\n\n      // All boundary checks passed\n      return { valid: true, exception: null };\n\n    } catch (error) {\n      return { valid: false, exception: `Boundary check error: ${error}` };\n    }\n  }\n\n  /**\n   * Helper methods for constraint validation\n   */\n  private getCurrentActivity(parent: Activity): Activity | null {\n    // Find the currently active activity within the parent\n    if (parent.children) {\n      for (const child of parent.children) {\n        if (child.isActive) {\n          return child;\n        }\n      }\n    }\n    return null;\n  }\n\n  private isActivityAvailableForChoice(activity: Activity): boolean {\n    // Check if activity is available for choice according to SCORM 2004 rules\n    return activity.isVisible &&\n      !activity.isHiddenFromChoice &&\n      activity.isAvailable &&\n      (activity.sequencingControls ? activity.sequencingControls.choice : true);\n  }\n\n  private isActivityMandatory(activity: Activity): boolean {\n    // Check if activity is mandatory (cannot be skipped)\n    // In SCORM 2004, this is typically determined by sequencing rules\n    if (activity.sequencingRules && activity.sequencingRules.preConditionRules) {\n      for (const rule of activity.sequencingRules.preConditionRules) {\n        if (rule.action === \"skip\" && rule.conditions && rule.conditions.length === 0) {\n          return false; // Has unconditional skip rule, not mandatory\n        }\n      }\n    }\n\n    // Check for explicit mandatory flag or default to true for flow sequences\n    return (activity as any).mandatory !== false;\n  }\n\n  private isActivityCompleted(activity: Activity): boolean {\n    // Check if activity is completed\n    return activity.completionStatus === \"completed\" ||\n      activity.completionStatus === \"passed\" ||\n      activity.successStatus === \"passed\";\n  }\n\n  private validateActivityChoiceState(activity: Activity): boolean {\n    // Validate activity state for choice according to SCORM 2004\n\n    // Check basic availability\n    if (!this.isActivityAvailableForChoice(activity)) {\n      return false;\n    }\n\n    // Check pre-condition rules\n    if (activity.sequencingRules && activity.sequencingRules.preConditionRules) {\n      for (const rule of activity.sequencingRules.preConditionRules) {\n        if (rule.action === RuleActionType.DISABLED || rule.action === RuleActionType.HIDE_FROM_CHOICE) {\n          // Check if conditions are met for disabling/hiding\n          const combinationMode = (rule as any).conditionCombination || \"all\";\n          if (this.evaluateRuleConditions(rule.conditions || [], activity, combinationMode)) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n\n  private hasBackwardChoiceException(activity: Activity, parent: Activity): boolean {\n    // Check for exceptions that allow backward choice in forwardOnly mode\n\n    // Check for specific sequencing rules that allow backward navigation\n    if (parent.sequencingRules && parent.sequencingRules.preConditionRules) {\n      for (const rule of parent.sequencingRules.preConditionRules) {\n        if (rule.action === \"exitParent\" || rule.action === \"retry\") {\n          // These actions might allow backward navigation\n          const combinationMode = (rule as any).conditionCombination || \"all\";\n          return this.evaluateRuleConditions(rule.conditions || [], activity, combinationMode);\n        }\n      }\n    }\n\n    // Check for explicit backward navigation permissions\n    return (activity as any).allowBackwardChoice === true;\n  }\n\n  private hasChoiceBoundaryViolation(currentActivity: Activity, targetActivity: Activity, parent: Activity): boolean {\n    // Check for specific boundary violations\n\n    // Check for time-based constraints\n    if (targetActivity.timeLimitAction && targetActivity.beginTimeLimit) {\n      const now = new Date();\n      const beginTime = new Date(targetActivity.beginTimeLimit);\n      if (now < beginTime) {\n        return true; // Not yet available\n      }\n    }\n\n    if (targetActivity.endTimeLimit) {\n      const now = new Date();\n      const endTime = new Date(targetActivity.endTimeLimit);\n      if (now > endTime) {\n        return true; // No longer available\n      }\n    }\n\n    // Check for attempt limit violations\n    return !!(targetActivity.attemptLimit &&\n      targetActivity.attemptCount >= targetActivity.attemptLimit);\n  }\n\n  private evaluateRuleConditions(conditions: any[], activity: Activity, combinationMode: string = \"all\"): boolean {\n    // Full SCORM 2004 rule condition evaluation\n    if (conditions.length === 0) {\n      return true; // No conditions means always true\n    }\n\n    // Evaluate each condition and collect results\n    const conditionResults: boolean[] = [];\n    \n    for (const condition of conditions) {\n      const conditionType = condition.condition || condition.conditionType;\n      let result = false;\n\n      switch (conditionType) {\n        case \"always\":\n          result = true;\n          break;\n        case \"never\":\n          result = false;\n          break;\n        case \"activityAttempted\":\n        case \"attempted\":\n          result = activity.attemptCount > 0;\n          break;\n        case \"activityCompleted\":\n        case \"completed\":\n          result = this.isActivityCompleted(activity);\n          break;\n        case \"satisfied\":\n          result = activity.objectiveSatisfiedStatus === true;\n          break;\n        case \"objectiveStatusKnown\":\n          result = activity.objectiveMeasureStatus === true;\n          break;\n        case \"objectiveMeasureKnown\":\n          result = activity.objectiveMeasureStatus === true;\n          break;\n        case \"objectiveMeasureGreaterThan\":\n          if (activity.objectiveMeasureStatus) {\n            const threshold = condition.measureThreshold || 0;\n            result = activity.objectiveNormalizedMeasure > threshold;\n          }\n          break;\n        case \"objectiveMeasureLessThan\":\n          if (activity.objectiveMeasureStatus) {\n            const threshold = condition.measureThreshold || 0;\n            result = activity.objectiveNormalizedMeasure < threshold;\n          }\n          break;\n        case \"progressKnown\":\n          result = activity.completionStatus !== \"unknown\";\n          break;\n        case \"attemptLimitExceeded\":\n          result = activity.hasAttemptLimitExceeded();\n          break;\n        case \"timeLimitExceeded\": {\n          const limit = activity.timeLimitDuration;\n          if (!limit) {\n            result = false;\n            break;\n          }\n          const limitSeconds = getDurationAsSeconds(limit, scorm2004_regex.CMITimespan);\n          let elapsedSeconds = 0;\n          // Prefer LMS-provided hook\n          if (this.getAttemptElapsedSecondsHook) {\n            try {\n              elapsedSeconds = this.getAttemptElapsedSecondsHook(activity) || 0;\n            } catch (_) {\n              elapsedSeconds = 0;\n            }\n          } else if (activity.attemptAbsoluteStartTime) {\n            const start = new Date(activity.attemptAbsoluteStartTime).getTime();\n            const nowMs = this.now().getTime();\n            if (!Number.isNaN(start) && nowMs > start) {\n              elapsedSeconds = Math.max(0, (nowMs - start) / 1000);\n            }\n          }\n          result = elapsedSeconds > limitSeconds && limitSeconds > 0;\n          break;\n        }\n        case \"outsideAvailableTimeRange\":\n          // Check if current time is outside available time range\n          if (activity.beginTimeLimit || activity.endTimeLimit) {\n            const now = new Date();\n            if (activity.beginTimeLimit) {\n              const beginDate = new Date(activity.beginTimeLimit);\n              if (now < beginDate) result = true;\n            }\n            if (activity.endTimeLimit) {\n              const endDate = new Date(activity.endTimeLimit);\n              if (now > endDate) result = true;\n            }\n          }\n          break;\n        default:\n          // For unknown conditions, assume false for safety\n          result = false;\n          break;\n      }\n\n      // Apply NOT operator if present\n      if (condition.operator === \"not\" || condition.not === true) {\n        result = !result;\n      }\n\n      conditionResults.push(result);\n    }\n\n    // Combine results based on combination mode\n    if (combinationMode === \"all\" || combinationMode === \"and\") {\n      // All conditions must be true (AND logic)\n      return conditionResults.every(result => result);\n    } else if (combinationMode === \"any\" || combinationMode === \"or\") {\n      // At least one condition must be true (OR logic)\n      return conditionResults.some(result => result);\n    } else {\n      // Default to AND logic if combination mode is unknown\n      return conditionResults.every(result => result);\n    }\n  }\n\n  /**\n   * Get elapsed attempt seconds for an activity using hook or timestamps\n   */\n  private getAttemptElapsedSeconds(activity: Activity): number {\n    if (this.getAttemptElapsedSecondsHook) {\n      try { return this.getAttemptElapsedSecondsHook(activity) || 0; } catch { return 0; }\n    }\n    if (activity.attemptAbsoluteStartTime) {\n      const start = new Date(activity.attemptAbsoluteStartTime).getTime();\n      const nowMs = this.now().getTime();\n      if (!Number.isNaN(start) && nowMs > start) {\n        return Math.max(0, (nowMs - start) / 1000);\n      }\n    }\n    return 0;\n  }\n}\n\n/**\n * Enum for flow subprocess modes\n */\nenum FlowSubprocessMode {\n  FORWARD = \"forward\",\n  BACKWARD = \"backward\",\n}\n","import { Activity } from \"./activity\";\nimport { ActivityTree } from \"./activity_tree\";\nimport {\n  DeliveryRequestType,\n  SequencingProcess,\n  SequencingRequestType\n} from \"./sequencing_process\";\nimport { RollupProcess } from \"./rollup_process\";\nimport { ADLNav } from \"../adl\";\nimport { RuleActionType } from \"./sequencing_rules\";\nimport { getDurationAsSeconds } from \"../../../utilities\";\nimport { scorm2004_regex } from \"../../../constants/regex\";\n\n/**\n * Enum for navigation request types\n */\nexport enum NavigationRequestType {\n  START = \"start\",\n  RESUME_ALL = \"resumeAll\",\n  CONTINUE = \"continue\",\n  PREVIOUS = \"previous\",\n  CHOICE = \"choice\",\n  JUMP = \"jump\",\n  EXIT = \"exit\",\n  EXIT_ALL = \"exitAll\",\n  ABANDON = \"abandon\",\n  ABANDON_ALL = \"abandonAll\",\n  SUSPEND_ALL = \"suspendAll\",\n  NOT_VALID = \"_none_\"\n}\n\n/**\n * Class representing a navigation request result\n */\nexport class NavigationRequestResult {\n  public valid: boolean;\n  public terminationRequest: SequencingRequestType | null;\n  public sequencingRequest: SequencingRequestType | null;\n  public targetActivityId: string | null;\n  public exception: string | null;\n\n  constructor(\n    valid: boolean = false,\n    terminationRequest: SequencingRequestType | null = null,\n    sequencingRequest: SequencingRequestType | null = null,\n    targetActivityId: string | null = null,\n    exception: string | null = null\n  ) {\n    this.valid = valid;\n    this.terminationRequest = terminationRequest;\n    this.sequencingRequest = sequencingRequest;\n    this.targetActivityId = targetActivityId;\n    this.exception = exception;\n  }\n}\n\n/**\n * Class representing a delivery request\n */\nexport class DeliveryRequest {\n  public valid: boolean;\n  public targetActivity: Activity | null;\n  public exception: string | null;\n\n  constructor(\n    valid: boolean = false,\n    targetActivity: Activity | null = null,\n    exception: string | null = null\n  ) {\n    this.valid = valid;\n    this.targetActivity = targetActivity;\n    this.exception = exception;\n  }\n}\n\n/**\n * Overall Sequencing Process (OP.1)\n * Controls the overall execution of the sequencing loop\n */\nexport class OverallSequencingProcess {\n  private activityTree: ActivityTree;\n  private sequencingProcess: SequencingProcess;\n  private rollupProcess: RollupProcess;\n  private adlNav: ADLNav | null;\n  private contentDelivered: boolean = false;\n  private eventCallback: ((eventType: string, data?: any) => void) | null = null;\n  private globalObjectiveMap: Map<string, any> = new Map();\n  private now: () => Date;\n  private enhancedDeliveryValidation: boolean;\n\n  constructor(\n    activityTree: ActivityTree,\n    sequencingProcess: SequencingProcess,\n    rollupProcess: RollupProcess,\n    adlNav: ADLNav | null = null,\n    eventCallback: ((eventType: string, data?: any) => void) | null = null,\n    options?: { now?: () => Date; enhancedDeliveryValidation?: boolean }\n  ) {\n    this.activityTree = activityTree;\n    this.sequencingProcess = sequencingProcess;\n    this.rollupProcess = rollupProcess;\n    this.adlNav = adlNav;\n    this.eventCallback = eventCallback;\n    this.now = options?.now || (() => new Date());\n    this.enhancedDeliveryValidation = options?.enhancedDeliveryValidation === true;\n\n    // Initialize global objective map\n    this.initializeGlobalObjectiveMap();\n  }\n\n  /**\n   * Overall Sequencing Process (OP.1)\n   * Main entry point for processing navigation requests\n   * @param {NavigationRequestType} navigationRequest - The navigation request\n   * @param {string | null} targetActivityId - Target activity for choice/jump requests\n   * @return {DeliveryRequest} - The delivery request result\n   */\n  public processNavigationRequest(\n    navigationRequest: NavigationRequestType,\n    targetActivityId: string | null = null\n  ): DeliveryRequest {\n    // Step 1: Navigation Request Process (NB.2.1)\n    const navResult = this.navigationRequestProcess(navigationRequest, targetActivityId);\n\n    if (!navResult.valid) {\n      return new DeliveryRequest(false, null, navResult.exception);\n    }\n\n    // Step 2: Termination Request Process (TB.2.3) if needed\n    if (navResult.terminationRequest) {\n      const termResult = this.terminationRequestProcess(navResult.terminationRequest, !!navResult.sequencingRequest);\n      if (!termResult) {\n        return new DeliveryRequest(false, null, \"TB.2.3-1\");\n      }\n\n      // If this is a termination-only request (no sequencing request), return success\n      if (!navResult.sequencingRequest) {\n        return new DeliveryRequest(true, null);\n      }\n    }\n\n    // Step 3: Sequencing Request Process (SB.2.12)\n    if (navResult.sequencingRequest) {\n      const seqResult = this.sequencingProcess.sequencingRequestProcess(\n        navResult.sequencingRequest,\n        navResult.targetActivityId\n      );\n\n      if (seqResult.exception) {\n        return new DeliveryRequest(false, null, seqResult.exception);\n      }\n\n      if (seqResult.deliveryRequest === DeliveryRequestType.DELIVER && seqResult.targetActivity) {\n        // INTEGRATION: Validate rollup state consistency before delivery\n        if (this.activityTree.root && !this.rollupProcess.validateRollupStateConsistency(this.activityTree.root)) {\n          return new DeliveryRequest(false, null, \"OP.1-3\");\n        }\n\n        // INTEGRATION: Process global objective mapping before delivery\n        this.rollupProcess.processGlobalObjectiveMapping(seqResult.targetActivity, this.globalObjectiveMap);\n\n        // Step 4: Delivery Request Process (DB.1.1)\n        const deliveryResult = this.deliveryRequestProcess(seqResult.targetActivity);\n\n        if (deliveryResult.valid) {\n          // Step 5: Content Delivery Environment Process (DB.2)\n          this.contentDeliveryEnvironmentProcess(deliveryResult.targetActivity!);\n\n          // INTEGRATION: Validate rollup state consistency after delivery\n          if (this.activityTree.root) {\n            this.rollupProcess.validateRollupStateConsistency(this.activityTree.root);\n          }\n\n          return deliveryResult;\n        }\n\n        return deliveryResult;\n      }\n    }\n\n    return new DeliveryRequest(false, null, \"OP.1-1\");\n  }\n\n  /**\n   * Navigation Request Process (NB.2.1)\n   * Validates navigation requests and converts them to termination/sequencing requests\n   * @param {NavigationRequestType} request - The navigation request\n   * @param {string | null} targetActivityId - Target activity for choice/jump\n   * @return {NavigationRequestResult} - The validation result\n   */\n  private navigationRequestProcess(\n    request: NavigationRequestType,\n    targetActivityId: string | null = null\n  ): NavigationRequestResult {\n    // Enhanced logging for debugging\n    this.fireEvent(\"onNavigationRequestProcessing\", { request, targetActivityId });\n    const currentActivity = this.activityTree.currentActivity;\n\n    // Check if navigation request is valid\n    switch (request) {\n      case NavigationRequestType.START:\n        if (currentActivity !== null) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-1\");\n        }\n        return new NavigationRequestResult(\n          true,\n          null,\n          SequencingRequestType.START,\n          null\n        );\n\n      case NavigationRequestType.RESUME_ALL:\n        if (currentActivity !== null) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-2\");\n        }\n        if (this.activityTree.suspendedActivity === null) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-3\");\n        }\n        return new NavigationRequestResult(\n          true,\n          null,\n          SequencingRequestType.RESUME_ALL,\n          null\n        );\n\n      case NavigationRequestType.CONTINUE:\n        if (!currentActivity) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-4\");\n        }\n        if (!currentActivity.parent || !currentActivity.parent.sequencingControls.flow) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-5\");\n        }\n        return new NavigationRequestResult(\n          true,\n          SequencingRequestType.EXIT,\n          SequencingRequestType.CONTINUE,\n          null\n        );\n\n      case NavigationRequestType.PREVIOUS: {\n        if (!currentActivity) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-6\");\n        }\n        if (!currentActivity.parent || !currentActivity.parent.sequencingControls.flow) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-7\");\n        }\n\n        // Enhanced Forward-Only Navigation Constraints - Check at multiple cluster levels\n        const forwardOnlyValidation = this.validateForwardOnlyConstraints(currentActivity);\n        if (!forwardOnlyValidation.valid) {\n          return new NavigationRequestResult(false, null, null, null, forwardOnlyValidation.exception);\n        }\n\n        return new NavigationRequestResult(\n          true,\n          SequencingRequestType.EXIT,\n          SequencingRequestType.PREVIOUS,\n          null\n        );\n      }\n\n      case NavigationRequestType.CHOICE: {\n        if (!targetActivityId) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-9\");\n        }\n        const targetActivity = this.activityTree.getActivity(targetActivityId);\n        if (!targetActivity) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-10\");\n        }\n\n        // Enhanced Choice Path Validation\n        const choiceValidation = this.validateComplexChoicePath(currentActivity, targetActivity);\n        if (!choiceValidation.valid) {\n          return new NavigationRequestResult(false, null, null, null, choiceValidation.exception);\n        }\n\n        return new NavigationRequestResult(\n          true,\n          currentActivity ? SequencingRequestType.EXIT : null,\n          SequencingRequestType.CHOICE,\n          targetActivityId\n        );\n      }\n\n      case NavigationRequestType.JUMP:\n        if (!targetActivityId) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-12\");\n        }\n        return new NavigationRequestResult(\n          true,\n          null,\n          SequencingRequestType.JUMP,\n          targetActivityId\n        );\n\n      case NavigationRequestType.EXIT:\n        if (!currentActivity) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-13\");\n        }\n        if (currentActivity === this.activityTree.root) {\n          return new NavigationRequestResult(\n            true,\n            SequencingRequestType.EXIT_ALL,\n            null,\n            null\n          );\n        }\n        return new NavigationRequestResult(\n          true,\n          SequencingRequestType.EXIT,\n          null,\n          null\n        );\n\n      case NavigationRequestType.EXIT_ALL:\n        if (!currentActivity) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-14\");\n        }\n        return new NavigationRequestResult(\n          true,\n          SequencingRequestType.EXIT_ALL,\n          null,\n          null\n        );\n\n      case NavigationRequestType.ABANDON:\n        if (!currentActivity) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-15\");\n        }\n        return new NavigationRequestResult(\n          true,\n          SequencingRequestType.ABANDON,\n          null,\n          null\n        );\n\n      case NavigationRequestType.ABANDON_ALL:\n        if (!currentActivity) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-16\");\n        }\n        return new NavigationRequestResult(\n          true,\n          SequencingRequestType.ABANDON_ALL,\n          null,\n          null\n        );\n\n      case NavigationRequestType.SUSPEND_ALL:\n        if (!currentActivity) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-17\");\n        }\n        return new NavigationRequestResult(\n          true,\n          SequencingRequestType.SUSPEND_ALL,\n          null,\n          null\n        );\n\n      default:\n        return new NavigationRequestResult(false, null, null, null, \"NB.2.1-18\");\n    }\n  }\n\n  /**\n   * Enhanced Termination Request Process (TB.2.3)\n   * Processes termination requests with improved post-condition handling\n   * Priority 2 Gap: Post-Condition Rule Evaluation & Exit Action Rule Recursion\n   * @param {SequencingRequestType} request - The termination request\n   * @param {boolean} hasSequencingRequest - Whether a sequencing request follows\n   * @return {boolean} - True if termination was successful\n   */\n  private terminationRequestProcess(request: SequencingRequestType, hasSequencingRequest: boolean = false): boolean {\n    const currentActivity = this.activityTree.currentActivity;\n\n    if (!currentActivity) {\n      return false;\n    }\n\n    // Enhanced logging for debugging\n    this.fireEvent(\"onTerminationRequestProcessing\", {\n      request,\n      hasSequencingRequest,\n      currentActivity: currentActivity.id\n    });\n\n    // First, check exit action rules (TB.2.1) for EXIT request with recursion detection\n    if (request === SequencingRequestType.EXIT) {\n      const exitActionResult = this.enhancedExitActionRulesSubprocess(currentActivity);\n      if (exitActionResult.action) {\n        // Check for recursion to prevent infinite loops\n        if (exitActionResult.recursionDepth > 10) {\n          this.fireEvent(\"onSequencingError\", {\n            error: \"Exit action recursion detected\",\n            depth: exitActionResult.recursionDepth,\n            activity: currentActivity.id\n          });\n          return false;\n        }\n\n        switch (exitActionResult.action) {\n          case \"EXIT_PARENT\":\n            // Move up to parent and terminate from there\n            if (currentActivity.parent) {\n              this.activityTree.currentActivity = currentActivity.parent;\n              return this.terminationRequestProcess(request, hasSequencingRequest);\n            }\n            break;\n          case \"EXIT_ALL\":\n            // Convert to EXIT_ALL request\n            request = SequencingRequestType.EXIT_ALL;\n            break;\n        }\n      }\n    }\n\n    // For EXIT_ALL and ABANDON_ALL, terminate descendant attempts first\n    // For regular EXIT, also terminate descendants if current has children\n    if (request === SequencingRequestType.EXIT_ALL ||\n      request === SequencingRequestType.ABANDON_ALL ||\n      (request === SequencingRequestType.EXIT && currentActivity.children.length > 0)) {\n      this.terminateDescendentAttemptsProcess(currentActivity);\n    }\n\n    // For descendant activities in the tree, terminate them first\n    // For EXIT_ALL and ABANDON_ALL, also terminate descendants\n    // For regular EXIT, also terminate descendants if current has children\n    if (request === SequencingRequestType.EXIT_ALL ||\n      request === SequencingRequestType.ABANDON_ALL ||\n      (request === SequencingRequestType.EXIT && currentActivity.children.length > 0)) {\n      this.terminateDescendentAttemptsProcess(currentActivity);\n    }\n\n    // Enhanced termination processing with post-condition rule evaluation\n    const terminationResult = this.executeTermination(request, currentActivity, hasSequencingRequest);\n    if (!terminationResult.success) {\n      return false;\n    }\n\n    // Priority 2 Gap: Post-Condition Rule Evaluation Integration\n    // Evaluate post-condition rules after termination but before clearing current activity\n    if (terminationResult.shouldEvaluatePostConditions) {\n      const postConditionResult = this.integratePostConditionRulesSubprocess(currentActivity);\n      if (postConditionResult) {\n        // Post-condition rules triggered additional sequencing action\n        this.fireEvent(\"onPostConditionTriggered\", {\n          activity: currentActivity.id,\n          action: postConditionResult\n        });\n\n        // Handle post-condition sequencing request\n        // This might need to be processed by the sequencing engine\n        // but for termination we log it for now\n      }\n    }\n\n    // Priority 2 Gap: Complex Suspended Activity Cleanup\n    if (request === SequencingRequestType.EXIT_ALL || request === SequencingRequestType.ABANDON_ALL) {\n      this.performComplexSuspendedActivityCleanup();\n    }\n\n    return true;\n  }\n\n  /**\n   * Execute Termination\n   * Enhanced termination execution with proper state management\n   * @param {SequencingRequestType} request - Termination request\n   * @param {Activity} currentActivity - Current activity\n   * @param {boolean} hasSequencingRequest - Whether sequencing follows\n   * @return {{success: boolean, shouldEvaluatePostConditions: boolean}} - Termination result\n   */\n  private executeTermination(request: SequencingRequestType, currentActivity: Activity, hasSequencingRequest: boolean): {\n    success: boolean,\n    shouldEvaluatePostConditions: boolean\n  } {\n    let shouldEvaluatePostConditions = false;\n\n    try {\n      switch (request) {\n        case SequencingRequestType.EXIT:\n          // Terminate normally with post-condition evaluation\n          if (currentActivity.isActive) {\n            this.endAttemptProcess(currentActivity);\n            shouldEvaluatePostConditions = true;\n          }\n          // Move to parent only if no sequencing follows\n          if (!hasSequencingRequest) {\n            this.activityTree.currentActivity = currentActivity.parent;\n          }\n          break;\n\n        case SequencingRequestType.EXIT_ALL:\n          // Priority 2 Gap: Multi-Level Exit Actions\n          this.handleMultiLevelExitActions(this.activityTree.root!);\n          this.activityTree.currentActivity = null;\n          break;\n\n        case SequencingRequestType.ABANDON:\n          // Abandon without ending attempt\n          currentActivity.isActive = false;\n          // Move to parent only if no sequencing follows\n          if (!hasSequencingRequest) {\n            this.activityTree.currentActivity = currentActivity.parent;\n          }\n          break;\n\n        case SequencingRequestType.ABANDON_ALL:\n          // Abandon without ending attempt - clear current activity\n          currentActivity.isActive = false;\n          this.activityTree.currentActivity = null;\n          break;\n\n        case SequencingRequestType.SUSPEND_ALL:\n          // Suspend the current activity with enhanced cleanup\n          this.handleSuspendAllRequest(currentActivity);\n          break;\n\n        default:\n          return { success: false, shouldEvaluatePostConditions: false };\n      }\n\n      return { success: true, shouldEvaluatePostConditions };\n    } catch (error) {\n      this.fireEvent(\"onTerminationError\", {\n        error: error instanceof Error ? error.message : String(error),\n        request,\n        activity: currentActivity.id\n      });\n      return { success: false, shouldEvaluatePostConditions: false };\n    }\n  }\n\n  /**\n   * Enhanced Exit Action Rules Subprocess with recursion detection\n   * Priority 2 Gap: Exit Action Rule Recursion\n   * @param {Activity} activity - Activity to evaluate\n   * @param {number} recursionDepth - Current recursion depth\n   * @return {{action: string | null, recursionDepth: number}} - Exit action result\n   */\n  private enhancedExitActionRulesSubprocess(activity: Activity, recursionDepth: number = 0): {\n    action: string | null,\n    recursionDepth: number\n  } {\n    // Increment recursion depth to detect infinite loops\n    recursionDepth++;\n\n    // Check if activity has exit action rules\n    const exitRules = activity.sequencingRules.exitConditionRules;\n\n    for (const rule of exitRules) {\n      // Evaluate the rule conditions\n      let conditionsMet = true;\n\n      // Check rule condition combination\n      if (rule.conditionCombination === \"all\") {\n        conditionsMet = rule.conditions.every(condition => condition.evaluate(activity));\n      } else {\n        conditionsMet = rule.conditions.some(condition => condition.evaluate(activity));\n      }\n\n      if (conditionsMet) {\n        // Return the action to take with recursion tracking\n        if (rule.action === RuleActionType.EXIT_PARENT) {\n          return { action: \"EXIT_PARENT\", recursionDepth };\n        } else if (rule.action === RuleActionType.EXIT_ALL) {\n          return { action: \"EXIT_ALL\", recursionDepth };\n        }\n      }\n    }\n\n    return { action: null, recursionDepth };\n  }\n\n  /**\n   * Integrate Post-Condition Rules Subprocess\n   * Priority 2 Gap: Post-Condition Rule Evaluation Integration\n   * @param {Activity} activity - Activity to evaluate post-conditions for\n   * @return {string | null} - Post-condition action or null\n   */\n  private integratePostConditionRulesSubprocess(activity: Activity): string | null {\n    // Evaluate post-condition rules using the sequencing process\n    const postAction = this.sequencingProcess.evaluatePostConditionRules(activity);\n\n    if (postAction) {\n      // Log the post-condition action for tracking\n      this.fireEvent(\"onPostConditionEvaluated\", {\n        activity: activity.id,\n        action: postAction,\n        timestamp: new Date().toISOString()\n      });\n\n      return postAction;\n    }\n\n    return null;\n  }\n\n  /**\n   * Handle Multi-Level Exit Actions\n   * Priority 2 Gap: Multi-Level Exit Actions\n   * @param {Activity} rootActivity - Root activity to start from\n   */\n  private handleMultiLevelExitActions(rootActivity: Activity): void {\n    // Process exit actions at each level systematically\n    this.processExitActionsAtLevel(rootActivity, 0);\n\n    // Then terminate all activities\n    this.terminateAllActivities(rootActivity);\n  }\n\n  /**\n   * Process exit actions at specific level\n   * @param {Activity} activity - Activity to process\n   * @param {number} level - Current level in hierarchy\n   */\n  private processExitActionsAtLevel(activity: Activity, level: number): void {\n    // Process exit actions for this activity\n    const exitAction = this.enhancedExitActionRulesSubprocess(activity, 0);\n\n    if (exitAction.action) {\n      this.fireEvent(\"onMultiLevelExitAction\", {\n        activity: activity.id,\n        level,\n        action: exitAction.action\n      });\n    }\n\n    // Recursively process children\n    for (const child of activity.children) {\n      this.processExitActionsAtLevel(child, level + 1);\n    }\n  }\n\n  /**\n   * Perform Complex Suspended Activity Cleanup\n   * Priority 2 Gap: Complex Suspended Activity Cleanup\n   */\n  private performComplexSuspendedActivityCleanup(): void {\n    const suspendedActivity = this.activityTree.suspendedActivity;\n\n    if (suspendedActivity) {\n      // Clear suspended state from the activity and all its ancestors\n      let current: Activity | null = suspendedActivity;\n      const cleanedActivities: string[] = [];\n\n      while (current) {\n        if (current.isSuspended) {\n          current.isSuspended = false;\n          cleanedActivities.push(current.id);\n        }\n        current = current.parent;\n      }\n\n      // Clear suspended activity reference\n      this.activityTree.suspendedActivity = null;\n\n      // Fire cleanup event\n      this.fireEvent(\"onSuspendedActivityCleanup\", {\n        cleanedActivities,\n        originalSuspendedActivity: suspendedActivity.id\n      });\n    }\n  }\n\n  /**\n   * Handle Suspend All Request\n   * Enhanced suspend handling with proper state management\n   * @param {Activity} currentActivity - Current activity to suspend\n   */\n  private handleSuspendAllRequest(currentActivity: Activity): void {\n    // Suspend the current activity\n    currentActivity.isSuspended = true;\n    currentActivity.isActive = false;\n    this.activityTree.suspendedActivity = currentActivity;\n    this.activityTree.currentActivity = null;\n\n    // Log suspend event\n    this.fireEvent(\"onActivitySuspended\", {\n      activity: currentActivity.id,\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  /**\n   * Enhanced Delivery Request Process (DB.1.1)\n   * Priority 4 Gap: Comprehensive delivery validation with state consistency checks\n   * @param {Activity} activity - The activity to deliver\n   * @return {DeliveryRequest} - The delivery validation result\n   */\n  private deliveryRequestProcess(activity: Activity): DeliveryRequest {\n    // Enhanced logging for debugging\n    this.fireEvent(\"onDeliveryRequestProcessing\", {\n      activity: activity.id,\n      timestamp: new Date().toISOString()\n    });\n\n    if (this.enhancedDeliveryValidation) {\n      // Activity Tree State Consistency\n      const stateConsistencyCheck = this.validateActivityTreeStateConsistency(activity);\n      if (!stateConsistencyCheck.consistent) {\n        return new DeliveryRequest(false, null, stateConsistencyCheck.exception);\n      }\n    }\n\n    // Check if activity is a cluster (has children)\n    if (activity.children.length > 0) {\n      return new DeliveryRequest(false, null, \"DB.1.1-1\");\n    }\n\n    // Check if activity is an empty cluster (has flow control but no children)\n    // According to SCORM 2004, empty clusters should not be deliverable\n    if (activity.sequencingControls.flow && activity.children.length === 0) {\n      return new DeliveryRequest(false, null, \"DB.1.1-2\");\n    }\n\n    if (this.enhancedDeliveryValidation) {\n      const resourceConstraintCheck = this.validateResourceConstraints(activity);\n      if (!resourceConstraintCheck.available) {\n        return new DeliveryRequest(false, null, resourceConstraintCheck.exception);\n      }\n    }\n\n    if (this.enhancedDeliveryValidation) {\n      const concurrentDeliveryCheck = this.validateConcurrentDeliveryPrevention(activity);\n      if (!concurrentDeliveryCheck.allowed) {\n        return new DeliveryRequest(false, null, concurrentDeliveryCheck.exception);\n      }\n    }\n\n    if (this.enhancedDeliveryValidation) {\n      const dependencyCheck = this.validateActivityDependencies(activity);\n      if (!dependencyCheck.satisfied) {\n        return new DeliveryRequest(false, null, dependencyCheck.exception);\n      }\n    }\n\n    // Use Check Activity Process (UP.5) to validate if activity can be delivered\n    if (!this.checkActivityProcess(activity)) {\n      return new DeliveryRequest(false, null, \"DB.1.1-3\");\n    }\n\n    // Activity is a true leaf and passes all checks - can be delivered\n    return new DeliveryRequest(true, activity);\n  }\n\n  /**\n   * Content Delivery Environment Process (DB.2)\n   * Handles the delivery of content to the learner\n   * @param {Activity} activity - The activity to deliver\n   */\n  private contentDeliveryEnvironmentProcess(activity: Activity): void {\n    // Step 1: Clear Suspended Activity Subprocess (DB.2.1) if needed\n    if (this.activityTree.suspendedActivity &&\n      this.activityTree.suspendedActivity !== activity) {\n      this.clearSuspendedActivitySubprocess();\n    }\n\n    // Step 2: Set the activity as current and active\n    this.activityTree.currentActivity = activity;\n    activity.isActive = true;\n\n    // Step 3: Initialize attempt for the delivered activity (DB.2.2)\n    this.initializeActivityForDelivery(activity);\n\n    // Step 4: Set up activity attempt tracking information\n    this.setupActivityAttemptTracking(activity);\n\n    // Step 5: Mark that content has been delivered\n    this.contentDelivered = true;\n\n    // Step 6: Update navigation validity if ADL nav is available\n    if (this.adlNav) {\n      this.updateNavigationValidity();\n    }\n\n    // Step 7: Fire activity delivery event\n    this.fireActivityDeliveryEvent(activity);\n  }\n\n  /**\n   * Initialize Activity For Delivery (DB.2.2)\n   * Set up initial tracking states for a delivered activity\n   * @param {Activity} activity - The activity being delivered\n   */\n  private initializeActivityForDelivery(activity: Activity): void {\n    // Set initial attempt states if not already set\n    if (activity.completionStatus === \"unknown\") {\n      // For leaf activities, set to \"not attempted\" initially\n      if (activity.children.length === 0) {\n        activity.completionStatus = \"not attempted\";\n      }\n    }\n\n    // Initialize objective satisfied status if not set\n    if (activity.objectiveSatisfiedStatus === null) {\n      activity.objectiveSatisfiedStatus = false;\n    }\n\n    // Initialize progress measure status\n    if (activity.progressMeasure === null) {\n      activity.progressMeasure = 0.0;\n      activity.progressMeasureStatus = false;\n    }\n\n    // Initialize objective measure if not set\n    if (activity.objectiveNormalizedMeasure === null) {\n      activity.objectiveNormalizedMeasure = 0.0;\n      activity.objectiveMeasureStatus = false;\n    }\n\n    // Set up activity attempt information\n    activity.attemptAbsoluteDuration = \"PT0H0M0S\";\n    activity.attemptExperiencedDuration = \"PT0H0M0S\";\n\n    // Mark as available for sequencing\n    activity.isAvailable = true;\n  }\n\n  /**\n   * Setup Activity Attempt Tracking\n   * Initialize attempt tracking information per SCORM 2004 4th Edition\n   * @param {Activity} activity - The activity being delivered\n   */\n  private setupActivityAttemptTracking(activity: Activity): void {\n    // Initialize attempt counter if this is a new attempt\n    if (!activity.attemptCount || activity.attemptCount === 0) {\n      activity.attemptCount = 1;\n    }\n\n    // Set attempt start time (use injected clock)\n    activity.attemptAbsoluteStartTime = this.now().toISOString();\n\n    // Initialize location if not set\n    if (!activity.location) {\n      activity.location = \"\";\n    }\n\n    // Set up activity state\n    activity.activityAttemptActive = true;\n\n    // Initialize learner preferences if not set\n    if (!activity.learnerPrefs) {\n      activity.learnerPrefs = {\n        audioCaptioning: \"0\",\n        audioLevel: \"1\",\n        deliverySpeed: \"1\",\n        language: \"\"\n      };\n    }\n  }\n\n  /**\n   * Fire Activity Delivery Event\n   * Notify listeners that an activity has been delivered\n   * @param {Activity} activity - The activity that was delivered\n   */\n  private fireActivityDeliveryEvent(activity: Activity): void {\n    // Fire event through callback if available\n    try {\n      if (this.eventCallback) {\n        this.eventCallback(\"onActivityDelivery\", activity);\n      }\n      console.debug(`Activity delivered: ${activity.id} - ${activity.title}`);\n    } catch (error) {\n      // Silently handle event firing errors to not disrupt sequencing\n      console.warn(`Failed to fire activity delivery event: ${error}`);\n    }\n  }\n\n  /**\n   * Fire a sequencing event\n   * @param {string} eventType - The type of event\n   * @param {any} data - Event data\n   */\n  private fireEvent(eventType: string, data?: any): void {\n    try {\n      if (this.eventCallback) {\n        this.eventCallback(eventType, data);\n      }\n    } catch (error) {\n      console.warn(`Failed to fire sequencing event ${eventType}: ${error}`);\n    }\n  }\n\n  /**\n   * Clear Suspended Activity Subprocess (DB.2.1)\n   * Clears the suspended activity state\n   */\n  private clearSuspendedActivitySubprocess(): void {\n    if (this.activityTree.suspendedActivity) {\n      // Clear suspended state from the activity and all its ancestors\n      let current: Activity | null = this.activityTree.suspendedActivity;\n      while (current) {\n        current.isSuspended = false;\n        current = current.parent;\n      }\n      this.activityTree.suspendedActivity = null;\n    }\n  }\n\n  /**\n   * End Attempt Process (UP.4)\n   * Ends an attempt on an activity\n   * @param {Activity} activity - The activity to end attempt on\n   */\n  private endAttemptProcess(activity: Activity): void {\n    if (!activity.isActive) {\n      return;\n    }\n\n    // Set activity as inactive\n    activity.isActive = false;\n\n    // Update attempt completion status if not already set\n    if (activity.completionStatus === \"unknown\") {\n      activity.completionStatus = \"incomplete\";\n    }\n\n    // Update success status if needed\n    if (activity.successStatus === \"unknown\" && activity.objectiveSatisfiedStatus) {\n      activity.successStatus = activity.objectiveSatisfiedStatus ? \"passed\" : \"failed\";\n    }\n\n    // INTEGRATION: Process global objective mapping after activity completion\n    this.rollupProcess.processGlobalObjectiveMapping(activity, this.globalObjectiveMap);\n\n    // Trigger rollup from this activity\n    this.rollupProcess.overallRollupProcess(activity);\n\n    // INTEGRATION: Validate rollup state consistency after rollup\n    if (this.activityTree.root) {\n      this.rollupProcess.validateRollupStateConsistency(this.activityTree.root);\n    }\n  }\n\n  /**\n   * Update navigation validity in ADL nav\n   */\n  private updateNavigationValidity(): void {\n    if (!this.adlNav || !this.activityTree.currentActivity) {\n      return;\n    }\n\n    // Update continue validity\n    const continueResult = this.navigationRequestProcess(NavigationRequestType.CONTINUE);\n    try {\n      this.adlNav.request_valid.continue = continueResult.valid ? \"true\" : \"false\";\n    } catch (e) {\n      // Navigation validity might be read-only after init\n    }\n\n    // Update previous validity\n    const previousResult = this.navigationRequestProcess(NavigationRequestType.PREVIOUS);\n    try {\n      this.adlNav.request_valid.previous = previousResult.valid ? \"true\" : \"false\";\n    } catch (e) {\n      // Navigation validity might be read-only after init\n    }\n\n    // Compute per-target choice/jump validity and emit an event snapshot\n    const allActivities = this.activityTree.getAllActivities();\n    const choiceMap: { [key: string]: string } = {};\n    const jumpMap: { [key: string]: string } = {};\n    for (const act of allActivities) {\n      const choiceRes = this.navigationRequestProcess(NavigationRequestType.CHOICE, act.id);\n      choiceMap[act.id] = choiceRes.valid ? \"true\" : \"false\";\n      const jumpRes = this.navigationRequestProcess(NavigationRequestType.JUMP, act.id);\n      jumpMap[act.id] = jumpRes.valid ? \"true\" : \"false\";\n    }\n    // Best-effort update of adl.nav.request_valid maps (may be RO post-init)\n    try {\n      this.adlNav.request_valid.choice = choiceMap;\n    } catch (e) {\n      // Ignore read-only constraints on nav request_valid during runtime\n    }\n    try {\n      this.adlNav.request_valid.jump = jumpMap;\n    } catch (e) {\n      // Ignore read-only constraints on nav request_valid during runtime\n    }\n    // Notify listeners so LMS can update UI regardless of read-only state\n    this.fireEvent(\"onNavigationValidityUpdate\", {\n      continue: continueResult.valid,\n      previous: previousResult.valid,\n      choice: choiceMap,\n      jump: jumpMap,\n    });\n  }\n\n  /**\n   * Find common ancestor between two activities\n   */\n  private findCommonAncestor(activity1: Activity, activity2: Activity): Activity | null {\n    // Get ancestors of activity1\n    const ancestors1: Activity[] = [];\n    let current: Activity | null = activity1;\n    while (current) {\n      ancestors1.push(current);\n      current = current.parent;\n    }\n\n    // Find first common ancestor\n    current = activity2;\n    while (current) {\n      if (ancestors1.includes(current)) {\n        return current;\n      }\n      current = current.parent;\n    }\n\n    return null;\n  }\n\n  /**\n   * Check if content has been delivered\n   */\n  public hasContentBeenDelivered(): boolean {\n    return this.contentDelivered;\n  }\n\n  /**\n   * Reset content delivered flag\n   */\n  public resetContentDelivered(): void {\n    this.contentDelivered = false;\n  }\n\n  /**\n   * Exit Action Rules Subprocess (TB.2.1)\n   * Evaluates exit action rules for the current activity\n   * @param {Activity} activity - The activity to evaluate\n   * @return {string | null} - The exit action to take, or null if none\n   */\n  private exitActionRulesSubprocess(activity: Activity): string | null {\n    // Check if activity has exit action rules\n    const exitRules = activity.sequencingRules.exitConditionRules;\n\n    for (const rule of exitRules) {\n      // Evaluate the rule conditions\n      let conditionsMet = true;\n\n      // Check rule condition combination\n      if (rule.conditionCombination === \"all\") {\n        conditionsMet = rule.conditions.every(condition => condition.evaluate(activity));\n      } else {\n        conditionsMet = rule.conditions.some(condition => condition.evaluate(activity));\n      }\n\n      if (conditionsMet) {\n        // Return the action to take\n        if (rule.action === RuleActionType.EXIT_PARENT) {\n          return \"EXIT_PARENT\";\n        } else if (rule.action === RuleActionType.EXIT_ALL) {\n          return \"EXIT_ALL\";\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Terminate all activities in the tree\n   * @param {Activity} activity - The activity to start from (usually root)\n   */\n  private terminateAllActivities(activity: Activity): void {\n    // Recursively terminate all children first\n    for (const child of activity.children) {\n      this.terminateAllActivities(child);\n    }\n\n    // Then terminate this activity\n    if (activity.isActive) {\n      this.endAttemptProcess(activity);\n    }\n  }\n\n  /**\n   * Limit Conditions Check Process (UP.1)\n   * Checks if any limit conditions are violated for the activity\n   * @param {Activity} activity - The activity to check limit conditions for\n   * @return {boolean} - True if limit conditions are met, false if violated\n   */\n  private limitConditionsCheckProcess(activity: Activity): boolean {\n    let result = true;\n    let failureReason = \"\";\n\n    // Check attempt limit\n    if (activity.attemptLimit !== null && activity.attemptLimit > 0) {\n      if (activity.attemptCount >= activity.attemptLimit) {\n        result = false;\n        failureReason = \"Attempt limit exceeded\";\n      }\n    }\n\n    // Check attempt absolute duration limit\n    if (result && activity.attemptAbsoluteDurationLimit) {\n      const currentDuration = getDurationAsSeconds(activity.attemptAbsoluteDuration || \"PT0H0M0S\", scorm2004_regex.CMITimespan);\n      const limitDuration = getDurationAsSeconds(activity.attemptAbsoluteDurationLimit, scorm2004_regex.CMITimespan);\n      if (currentDuration >= limitDuration) {\n        result = false;\n        failureReason = \"Attempt duration limit exceeded\";\n      }\n    }\n\n    // Check activity absolute duration limit\n    if (result && activity.activityAbsoluteDurationLimit) {\n      const currentDuration = getDurationAsSeconds(activity.activityAbsoluteDuration || \"PT0H0M0S\", scorm2004_regex.CMITimespan);\n      const limitDuration = getDurationAsSeconds(activity.activityAbsoluteDurationLimit, scorm2004_regex.CMITimespan);\n      if (currentDuration >= limitDuration) {\n        result = false;\n        failureReason = \"Activity duration limit exceeded\";\n      }\n    }\n\n    // Check begin time limit\n    if (result && activity.beginTimeLimit) {\n      const currentTime = this.now();\n      const beginTime = new Date(activity.beginTimeLimit);\n      if (currentTime < beginTime) {\n        result = false;\n        failureReason = \"Not yet time to begin\";\n      }\n    }\n\n    // Check end time limit\n    if (result && activity.endTimeLimit) {\n      const currentTime = this.now();\n      const endTime = new Date(activity.endTimeLimit);\n      if (currentTime > endTime) {\n        result = false;\n        failureReason = \"Time limit expired\";\n      }\n    }\n\n    // Fire limit condition check event\n    this.fireEvent(\"onLimitConditionCheck\", {\n      activity: activity,\n      result: result,\n      failureReason: failureReason,\n      checks: {\n        attemptLimit: activity.attemptLimit,\n        attemptCount: activity.attemptCount,\n        attemptDurationLimit: activity.attemptAbsoluteDurationLimit,\n        activityDurationLimit: activity.activityAbsoluteDurationLimit,\n        beginTimeLimit: activity.beginTimeLimit,\n        endTimeLimit: activity.endTimeLimit\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Check Activity Process (UP.5)\n   * Validates if an activity can be delivered\n   * @param {Activity} activity - The activity to check\n   * @return {boolean} - True if activity can be delivered\n   */\n  private checkActivityProcess(activity: Activity): boolean {\n    // Check if activity is available\n    if (!activity.isAvailable) {\n      return false;\n    }\n\n    // Check if activity is hidden from choice (if this is a choice request)\n    if (activity.isHiddenFromChoice) {\n      // This would be false for choice navigation, but we need context\n      // For now, we'll allow it but this should be enhanced\n    }\n\n    // Check limit conditions (UP.1)\n    if (!this.limitConditionsCheckProcess(activity)) {\n      return false;\n    }\n\n    // Check if activity is a cluster that can't be delivered directly\n    if (activity.children.length > 0 && !activity.sequencingControls.flow) {\n      return false; // Clusters without flow can't be delivered\n    }\n\n    // Activity passes all checks\n    return true;\n  }\n\n  /**\n   * Terminate Descendent Attempts Process (UP.3)\n   * Recursively terminates all active descendant attempts\n   * @param {Activity} activity - The activity whose descendants to terminate\n   */\n  private terminateDescendentAttemptsProcess(activity: Activity): void {\n    // Process all children\n    for (const child of activity.children) {\n      // Recursively terminate descendants first\n      if (child.children.length > 0) {\n        this.terminateDescendentAttemptsProcess(child);\n      }\n\n      // Check exit rules for the child\n      const exitAction = this.exitActionRulesSubprocess(child);\n\n      // Terminate the child if it's active\n      if (child.isActive) {\n        // Apply exit action if any\n        if (exitAction === \"EXIT_ALL\") {\n          // Recursively terminate all descendants\n          this.terminateDescendentAttemptsProcess(child);\n        }\n\n        // End the attempt\n        this.endAttemptProcess(child);\n      }\n    }\n  }\n\n  /**\n   * Get Sequencing State for Persistence\n   * Returns the current state of the sequencing engine for multi-session support\n   * @return {object} - Serializable sequencing state\n   */\n  public getSequencingState(): any {\n    return {\n      version: \"1.0\",\n      timestamp: new Date().toISOString(),\n      contentDelivered: this.contentDelivered,\n      currentActivity: this.activityTree.currentActivity?.id || null,\n      suspendedActivity: this.activityTree.suspendedActivity?.id || null,\n      activityStates: this.serializeActivityStates(),\n      navigationState: this.getNavigationState()\n    };\n  }\n\n  /**\n   * Restore Sequencing State from Persistence\n   * Restores the sequencing engine state from a previous session\n   * @param {any} state - Previously saved sequencing state\n   * @return {boolean} - True if restoration was successful\n   */\n  public restoreSequencingState(state: any): boolean {\n    try {\n      if (!state || state.version !== \"1.0\") {\n        console.warn(\"Incompatible sequencing state version\");\n        return false;\n      }\n\n      // Restore basic flags\n      this.contentDelivered = state.contentDelivered || false;\n\n      // Restore activity states\n      if (state.activityStates) {\n        this.deserializeActivityStates(state.activityStates);\n      }\n\n      // Restore current activity\n      if (state.currentActivity) {\n        const currentActivity = this.activityTree.getActivity(state.currentActivity);\n        if (currentActivity) {\n          this.activityTree.currentActivity = currentActivity;\n          currentActivity.isActive = true;\n        }\n      }\n\n      // Restore suspended activity\n      if (state.suspendedActivity) {\n        const suspendedActivity = this.activityTree.getActivity(state.suspendedActivity);\n        if (suspendedActivity) {\n          this.activityTree.suspendedActivity = suspendedActivity;\n          suspendedActivity.isSuspended = true;\n        }\n      }\n\n      // Restore navigation state\n      if (state.navigationState) {\n        this.restoreNavigationState(state.navigationState);\n      }\n\n      console.debug(\"Sequencing state restored successfully\");\n      return true;\n    } catch (error) {\n      console.error(`Failed to restore sequencing state: ${error}`);\n      return false;\n    }\n  }\n\n  /**\n   * Serialize Activity States\n   * Creates a serializable representation of all activity states\n   * @return {object} - Serialized activity states\n   */\n  private serializeActivityStates(): any {\n    const states: any = {};\n\n    const serializeActivity = (activity: Activity) => {\n      states[activity.id] = {\n        id: activity.id,\n        title: activity.title,\n        isActive: activity.isActive,\n        isSuspended: activity.isSuspended,\n        isCompleted: activity.isCompleted,\n        completionStatus: activity.completionStatus,\n        successStatus: activity.successStatus,\n        attemptCount: activity.attemptCount,\n        attemptCompletionAmount: activity.attemptCompletionAmount,\n        attemptAbsoluteDuration: activity.attemptAbsoluteDuration,\n        attemptExperiencedDuration: activity.attemptExperiencedDuration,\n        activityAbsoluteDuration: activity.activityAbsoluteDuration,\n        activityExperiencedDuration: activity.activityExperiencedDuration,\n        objectiveSatisfiedStatus: activity.objectiveSatisfiedStatus,\n        objectiveMeasureStatus: activity.objectiveMeasureStatus,\n        objectiveNormalizedMeasure: activity.objectiveNormalizedMeasure,\n        progressMeasure: activity.progressMeasure,\n        progressMeasureStatus: activity.progressMeasureStatus,\n        isAvailable: activity.isAvailable,\n        location: activity.location,\n        attemptAbsoluteStartTime: activity.attemptAbsoluteStartTime\n      };\n\n      // Recursively serialize children\n      for (const child of activity.children) {\n        serializeActivity(child);\n      }\n    };\n\n    if (this.activityTree.root) {\n      serializeActivity(this.activityTree.root);\n    }\n\n    return states;\n  }\n\n  /**\n   * Deserialize Activity States\n   * Restores activity states from serialized data\n   * @param {any} states - Serialized activity states\n   */\n  private deserializeActivityStates(states: any): void {\n    const restoreActivity = (activity: Activity) => {\n      const state = states[activity.id];\n      if (state) {\n        activity.isActive = state.isActive || false;\n        activity.isSuspended = state.isSuspended || false;\n        activity.isCompleted = state.isCompleted || false;\n        activity.completionStatus = state.completionStatus || \"unknown\";\n        activity.successStatus = state.successStatus || \"unknown\";\n        activity.attemptCount = state.attemptCount || 0;\n        activity.attemptCompletionAmount = state.attemptCompletionAmount || 0;\n        activity.attemptAbsoluteDuration = state.attemptAbsoluteDuration || \"PT0H0M0S\";\n        activity.attemptExperiencedDuration = state.attemptExperiencedDuration || \"PT0H0M0S\";\n        activity.activityAbsoluteDuration = state.activityAbsoluteDuration || \"PT0H0M0S\";\n        activity.activityExperiencedDuration = state.activityExperiencedDuration || \"PT0H0M0S\";\n        activity.objectiveSatisfiedStatus = state.objectiveSatisfiedStatus || false;\n        activity.objectiveMeasureStatus = state.objectiveMeasureStatus || false;\n        activity.objectiveNormalizedMeasure = state.objectiveNormalizedMeasure || 0;\n        activity.progressMeasure = state.progressMeasure || null;\n        activity.progressMeasureStatus = state.progressMeasureStatus || false;\n        activity.isAvailable = state.isAvailable !== false; // Default to true\n        activity.location = state.location || \"\";\n        activity.attemptAbsoluteStartTime = state.attemptAbsoluteStartTime || null;\n      }\n\n      // Recursively restore children\n      for (const child of activity.children) {\n        restoreActivity(child);\n      }\n    };\n\n    if (this.activityTree.root) {\n      restoreActivity(this.activityTree.root);\n    }\n  }\n\n  /**\n   * Get Navigation State\n   * Returns current navigation validity and ADL nav state\n   * @return {any} - Navigation state\n   */\n  private getNavigationState(): any {\n    if (!this.adlNav) {\n      return null;\n    }\n\n    return {\n      request: this.adlNav.request || \"_none_\",\n      requestValid: {\n        continue: this.adlNav.request_valid?.continue || \"false\",\n        previous: this.adlNav.request_valid?.previous || \"false\",\n        choice: this.adlNav.request_valid?.choice || \"false\",\n        jump: this.adlNav.request_valid?.jump || \"false\",\n        exit: this.adlNav.request_valid?.exit || \"false\",\n        exitAll: this.adlNav.request_valid?.exitAll || \"false\",\n        abandon: this.adlNav.request_valid?.abandon || \"false\",\n        abandonAll: this.adlNav.request_valid?.abandonAll || \"false\",\n        suspendAll: this.adlNav.request_valid?.suspendAll || \"false\"\n      }\n    };\n  }\n\n  /**\n   * Restore Navigation State\n   * Restores ADL navigation state\n   * @param {any} navState - Navigation state to restore\n   */\n  private restoreNavigationState(navState: any): void {\n    if (!this.adlNav || !navState) {\n      return;\n    }\n\n    try {\n      // Restore navigation request validity\n      if (navState.requestValid) {\n        const requestValid = navState.requestValid;\n        this.adlNav.request_valid.continue = requestValid.continue || \"false\";\n        this.adlNav.request_valid.previous = requestValid.previous || \"false\";\n        this.adlNav.request_valid.choice = requestValid.choice || \"false\";\n        this.adlNav.request_valid.jump = requestValid.jump || \"false\";\n        this.adlNav.request_valid.exit = requestValid.exit || \"false\";\n        this.adlNav.request_valid.exitAll = requestValid.exitAll || \"false\";\n        this.adlNav.request_valid.abandon = requestValid.abandon || \"false\";\n        this.adlNav.request_valid.abandonAll = requestValid.abandonAll || \"false\";\n        this.adlNav.request_valid.suspendAll = requestValid.suspendAll || \"false\";\n      }\n    } catch (error) {\n      // Navigation properties might be read-only after initialization\n      console.warn(`Could not fully restore navigation state: ${error}`);\n    }\n  }\n\n  /**\n   * Enhanced Complex Choice Path Validation\n   * Implements comprehensive choice validation with nested hierarchy support\n   * Priority 1 Gap: Complex Choice Path Validation\n   * @param {Activity | null} currentActivity - Current activity\n   * @param {Activity} targetActivity - Target activity for choice\n   * @return {{valid: boolean, exception: string | null}} - Validation result\n   */\n  private validateComplexChoicePath(currentActivity: Activity | null, targetActivity: Activity): {\n    valid: boolean,\n    exception: string | null\n  } {\n    // Check if target is hidden from choice\n    if (targetActivity.isHiddenFromChoice) {\n      return { valid: false, exception: \"NB.2.1-11\" };\n    }\n\n    // Check if target is disabled\n    if (this.isActivityDisabled(targetActivity)) {\n      return { valid: false, exception: \"NB.2.1-11\" };\n    }\n\n    if (currentActivity) {\n      const commonAncestor = this.findCommonAncestor(currentActivity, targetActivity);\n      if (!commonAncestor) {\n        return { valid: false, exception: \"NB.2.1-11\" };\n      }\n\n      // Enhanced constrainChoice control validation in nested hierarchies\n      const constrainChoiceValidation = this.validateConstrainChoiceControls(currentActivity, targetActivity, commonAncestor);\n      if (!constrainChoiceValidation.valid) {\n        return constrainChoiceValidation;\n      }\n\n      // Validate choice sets with multiple targets\n      const choiceSetValidation = this.validateChoiceSetConstraints(currentActivity, targetActivity, commonAncestor);\n      if (!choiceSetValidation.valid) {\n        return choiceSetValidation;\n      }\n    }\n\n    // Path to root validation for choice control\n    let activity: Activity | null = targetActivity;\n    while (activity) {\n      if (activity.parent && !activity.parent.sequencingControls.choice) {\n        return { valid: false, exception: \"NB.2.1-11\" };\n      }\n      activity = activity.parent;\n    }\n\n    return { valid: true, exception: null };\n  }\n\n  /**\n   * Enhanced Forward-Only Navigation Constraints\n   * Handles forward-only constraints at different cluster levels\n   * Priority 1 Gap: Forward-Only Navigation Constraints\n   * @param {Activity} currentActivity - Current activity\n   * @return {{valid: boolean, exception: string | null}} - Validation result\n   */\n  private validateForwardOnlyConstraints(currentActivity: Activity): {\n    valid: boolean,\n    exception: string | null\n  } {\n    // Check forward-only constraint at immediate parent level\n    if (currentActivity.parent?.sequencingControls.forwardOnly) {\n      return { valid: false, exception: \"NB.2.1-8\" };\n    }\n\n    // Check forward-only constraints at higher cluster levels\n    let ancestor = currentActivity.parent?.parent;\n    while (ancestor) {\n      if (ancestor.sequencingControls.forwardOnly) {\n        // If any ancestor cluster has forwardOnly=true, previous navigation is blocked\n        return { valid: false, exception: \"NB.2.1-8\" };\n      }\n      ancestor = ancestor.parent;\n    }\n\n    return { valid: true, exception: null };\n  }\n\n  /**\n   * Enhanced constrainChoice Control Validation\n   * Implements proper constrainChoice validation in nested hierarchies\n   * Priority 1 Gap: constrainChoice control validation\n   * @param {Activity} currentActivity - Current activity\n   * @param {Activity} targetActivity - Target activity\n   * @param {Activity} commonAncestor - Common ancestor\n   * @return {{valid: boolean, exception: string | null}} - Validation result\n   */\n  private validateConstrainChoiceControls(currentActivity: Activity, targetActivity: Activity, commonAncestor: Activity): {\n    valid: boolean,\n    exception: string | null\n  } {\n    // Check constrainChoice at common ancestor level\n    if (commonAncestor.sequencingControls.constrainChoice) {\n      // Additional constraint validation for choice navigation\n      // This would include checking if the choice is within allowed boundaries\n      const currentIndex = commonAncestor.children.indexOf(this.findChildContaining(commonAncestor, currentActivity)!);\n      const targetIndex = commonAncestor.children.indexOf(this.findChildContaining(commonAncestor, targetActivity)!);\n\n      // Example constraint: constrainChoice might limit choices to adjacent activities only\n      if (Math.abs(currentIndex - targetIndex) > 1) {\n        return { valid: false, exception: \"NB.2.1-11\" };\n      }\n    }\n\n    // Check constrainChoice controls up the hierarchy\n    let ancestor = commonAncestor.parent;\n    while (ancestor) {\n      if (ancestor.sequencingControls.constrainChoice) {\n        // Apply ancestor-level constraints\n        const ancestorValidation = this.validateAncestorConstraints(ancestor, currentActivity, targetActivity);\n        if (!ancestorValidation.valid) {\n          return ancestorValidation;\n        }\n      }\n      ancestor = ancestor.parent;\n    }\n\n    return { valid: true, exception: null };\n  }\n\n  /**\n   * Validate Choice Set Constraints\n   * Validates choice sets with multiple targets\n   * Priority 1 Gap: Choice Set Constraints\n   * @param {Activity} currentActivity - Current activity\n   * @param {Activity} targetActivity - Target activity\n   * @param {Activity} commonAncestor - Common ancestor\n   * @return {{valid: boolean, exception: string | null}} - Validation result\n   */\n  private validateChoiceSetConstraints(currentActivity: Activity, targetActivity: Activity, commonAncestor: Activity): {\n    valid: boolean,\n    exception: string | null\n  } {\n    // Check if target is within the valid choice set\n    const validChoiceSet = this.getValidChoiceSet(commonAncestor, currentActivity);\n    if (!validChoiceSet.includes(targetActivity)) {\n      return { valid: false, exception: \"NB.2.1-11\" };\n    }\n\n    return { valid: true, exception: null };\n  }\n\n  /**\n   * Check if activity is disabled\n   * Priority 1 Gap: Disabled Activity Detection\n   * @param {Activity} activity - Activity to check\n   * @return {boolean} - True if disabled\n   */\n  private isActivityDisabled(activity: Activity): boolean {\n    // Check if activity is disabled through sequencing rules\n    const preConditionResult = this.evaluatePreConditionRulesForChoice(activity);\n    return preConditionResult === \"DISABLED\";\n  }\n\n  /**\n   * Find child activity that contains the target activity\n   * @param {Activity} parent - Parent activity\n   * @param {Activity} target - Target activity to find\n   * @return {Activity | null} - Child activity containing target\n   */\n  private findChildContaining(parent: Activity, target: Activity): Activity | null {\n    for (const child of parent.children) {\n      if (child === target) {\n        return child;\n      }\n      if (this.activityContains(child, target)) {\n        return child;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Check if an activity contains another activity in its hierarchy\n   * @param {Activity} container - Container activity\n   * @param {Activity} target - Target activity\n   * @return {boolean} - True if container contains target\n   */\n  private activityContains(container: Activity, target: Activity): boolean {\n    let current: Activity | null = target;\n    while (current) {\n      if (current === container) {\n        return true;\n      }\n      current = current.parent;\n    }\n    return false;\n  }\n\n  /**\n   * Validate ancestor-level constraints\n   * @param {Activity} ancestor - Ancestor activity\n   * @param {Activity} currentActivity - Current activity\n   * @param {Activity} targetActivity - Target activity\n   * @return {{valid: boolean, exception: string | null}} - Validation result\n   */\n  private validateAncestorConstraints(ancestor: Activity, currentActivity: Activity, targetActivity: Activity): {\n    valid: boolean,\n    exception: string | null\n  } {\n    // Enforce forwardOnly and mandatory activity constraints at ancestor level\n    const children = ancestor.children;\n    if (!children || children.length === 0) {\n      return { valid: true, exception: null };\n    }\n\n    const currentTop = this.findChildContaining(ancestor, currentActivity);\n    const targetTop = this.findChildContaining(ancestor, targetActivity);\n    if (!currentTop || !targetTop) {\n      return { valid: false, exception: \"NB.2.1-11\" };\n    }\n\n    const currentIndex = children.indexOf(currentTop);\n    const targetIndex = children.indexOf(targetTop);\n\n    // Forward-only prevents backwards choice under this ancestor\n    if (ancestor.sequencingControls.forwardOnly && targetIndex < currentIndex) {\n      return { valid: false, exception: \"NB.2.1-8\" };\n    }\n\n    // Do not skip mandatory incomplete siblings when moving forward\n    if (targetIndex > currentIndex) {\n      for (let i = currentIndex + 1; i < targetIndex; i++) {\n        const between = children[i];\n        if (between && this.helperIsActivityMandatory(between) && !this.helperIsActivityCompleted(between)) {\n          return { valid: false, exception: \"NB.2.1-11\" };\n        }\n      }\n    }\n\n    return { valid: true, exception: null };\n  }\n\n  /** Helper: mandatory activity detection (mirrors SequencingProcess behavior) */\n  private helperIsActivityMandatory(activity: Activity): boolean {\n    if (activity.sequencingRules && activity.sequencingRules.preConditionRules) {\n      for (const rule of activity.sequencingRules.preConditionRules) {\n        if ((rule as any).action === \"skip\" && (rule as any).conditions && (rule as any).conditions.length === 0) {\n          return false;\n        }\n      }\n    }\n    return (activity as any).mandatory !== false;\n  }\n\n  /** Helper: completed-state check (mirrors SequencingProcess behavior) */\n  private helperIsActivityCompleted(activity: Activity): boolean {\n    return (\n      activity.completionStatus === \"completed\" ||\n      (activity as any).successStatus === \"passed\" ||\n      activity.successStatus === \"passed\"\n    );\n  }\n\n  /**\n   * Get valid choice set for current activity\n   * @param {Activity} commonAncestor - Common ancestor\n   * @param {Activity} currentActivity - Current activity\n   * @return {Activity[]} - Array of valid choice activities\n   */\n  private getValidChoiceSet(commonAncestor: Activity, currentActivity: Activity): Activity[] {\n    const validChoices: Activity[] = [];\n\n    // Get all potential choice targets within the common ancestor\n    const allDescendants = this.getAllDescendants(commonAncestor);\n\n    for (const descendant of allDescendants) {\n      if (this.isValidChoiceTarget(descendant, currentActivity)) {\n        validChoices.push(descendant);\n      }\n    }\n\n    return validChoices;\n  }\n\n  /**\n   * Get all descendants of an activity\n   * @param {Activity} activity - Parent activity\n   * @return {Activity[]} - Array of all descendant activities\n   */\n  private getAllDescendants(activity: Activity): Activity[] {\n    const descendants: Activity[] = [];\n\n    for (const child of activity.children) {\n      descendants.push(child);\n      descendants.push(...this.getAllDescendants(child));\n    }\n\n    return descendants;\n  }\n\n  /**\n   * Check if activity is valid choice target\n   * @param {Activity} target - Target activity\n   * @param {Activity} currentActivity - Current activity\n   * @return {boolean} - True if valid choice target\n   */\n  private isValidChoiceTarget(target: Activity, currentActivity: Activity): boolean {\n    // Basic validation for choice target\n    if (target.isHiddenFromChoice) {\n      return false;\n    }\n\n    if (target === currentActivity) {\n      return false;\n    }\n\n    return !this.isActivityDisabled(target);\n  }\n\n  /**\n   * Evaluate pre-condition rules for choice navigation\n   * @param {Activity} activity - Activity to evaluate\n   * @return {string | null} - Rule result or null\n   */\n  private evaluatePreConditionRulesForChoice(activity: Activity): string | null {\n    // This would evaluate the activity's pre-condition rules\n    // and return \"DISABLED\", \"SKIP\", \"HIDDEN_FROM_CHOICE\", or null\n    const preRules = activity.sequencingRules.preConditionRules;\n\n    for (const rule of preRules) {\n      // Evaluate rule conditions\n      let conditionsMet = true;\n\n      if (rule.conditionCombination === \"all\") {\n        conditionsMet = rule.conditions.every(condition => condition.evaluate(activity));\n      } else {\n        conditionsMet = rule.conditions.some(condition => condition.evaluate(activity));\n      }\n\n      if (conditionsMet) {\n        // Return the action as string\n        switch (rule.action) {\n          case \"skip\":\n            return \"SKIP\";\n          case \"disabled\":\n            return \"DISABLED\";\n          case \"hideFromChoice\":\n            return \"HIDDEN_FROM_CHOICE\";\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Validate Activity Tree State Consistency\n   * Priority 4 Gap: Activity Tree State Consistency\n   * @param {Activity} activity - Activity to validate\n   * @return {{consistent: boolean, exception: string | null}} - Consistency result\n   */\n  private validateActivityTreeStateConsistency(activity: Activity): {\n    consistent: boolean,\n    exception: string | null\n  } {\n    // Check that the activity tree is in a consistent state for delivery\n    if (!this.activityTree.root) {\n      return { consistent: false, exception: \"DB.1.1-4\" }; // No activity tree\n    }\n\n    // Validate activity is part of the current tree\n    if (!this.isActivityPartOfTree(activity, this.activityTree.root)) {\n      return { consistent: false, exception: \"DB.1.1-5\" }; // Activity not in tree\n    }\n\n    // Check for conflicting active activities\n    const activeActivities = this.getActiveActivities();\n    if (activeActivities.length > 1) {\n      // Multiple active activities indicate inconsistent state\n      this.fireEvent(\"onStateInconsistency\", {\n        activeActivities: activeActivities.map(a => a.id),\n        targetActivity: activity.id\n      });\n      return { consistent: false, exception: \"DB.1.1-6\" }; // State inconsistency\n    }\n\n    // Validate parent-child relationships are intact\n    let current: Activity | null = activity;\n    while (current?.parent) {\n      if (!current.parent.children.includes(current)) {\n        return { consistent: false, exception: \"DB.1.1-7\" }; // Broken parent-child relationship\n      }\n      current = current.parent;\n    }\n\n    return { consistent: true, exception: null };\n  }\n\n  /**\n   * Validate Resource Constraints\n   * Priority 4 Gap: Resource Constraint Checking\n   * @param {Activity} activity - Activity to validate\n   * @return {{available: boolean, exception: string | null}} - Resource availability result\n   */\n  private validateResourceConstraints(activity: Activity): {\n    available: boolean,\n    exception: string | null\n  } {\n    // Check if required resources are available\n    // This could include checking for:\n    // - Required plugins or software components\n    // - Network connectivity for web-based resources\n    // - File system access for local resources\n    // - Memory and processing capacity\n\n    // Example resource validations (simplified):\n\n    // Check if activity requires specific resources that might not be available\n    const requiredResources = this.getActivityRequiredResources(activity);\n    for (const resource of requiredResources) {\n      if (!this.isResourceAvailable(resource)) {\n        return {\n          available: false,\n          exception: \"DB.1.1-8\" // Resource not available\n        };\n      }\n    }\n\n    // Check system resource limits\n    const systemResourceCheck = this.checkSystemResourceLimits();\n    if (!systemResourceCheck.adequate) {\n      return {\n        available: false,\n        exception: \"DB.1.1-9\" // Insufficient system resources\n      };\n    }\n\n    return { available: true, exception: null };\n  }\n\n  /**\n   * Validate Concurrent Delivery Prevention\n   * Priority 4 Gap: Prevent Multiple Simultaneous Deliveries\n   * @param {Activity} activity - Activity to validate\n   * @return {{allowed: boolean, exception: string | null}} - Concurrency check result\n   */\n  private validateConcurrentDeliveryPrevention(activity: Activity): {\n    allowed: boolean,\n    exception: string | null\n  } {\n    // Check if another delivery is currently in progress\n    if (this.contentDelivered && this.activityTree.currentActivity && this.activityTree.currentActivity !== activity) {\n      return {\n        allowed: false,\n        exception: \"DB.1.1-10\" // Another activity is currently being delivered\n      };\n    }\n\n    // Check for pending delivery requests in queue\n    if (this.hasPendingDeliveryRequests()) {\n      return {\n        allowed: false,\n        exception: \"DB.1.1-11\" // Delivery request already in queue\n      };\n    }\n\n    // Validate delivery lock status\n    if (this.isDeliveryLocked()) {\n      return {\n        allowed: false,\n        exception: \"DB.1.1-12\" // Delivery is currently locked\n      };\n    }\n\n    return { allowed: true, exception: null };\n  }\n\n  /**\n   * Validate Activity Dependencies\n   * Priority 4 Gap: Dependency Resolution\n   * @param {Activity} activity - Activity to validate\n   * @return {{satisfied: boolean, exception: string | null}} - Dependency check result\n   */\n  private validateActivityDependencies(activity: Activity): {\n    satisfied: boolean,\n    exception: string | null\n  } {\n    // Check prerequisite activities\n    const prerequisites = this.getActivityPrerequisites(activity);\n    for (const prerequisite of prerequisites) {\n      if (!this.isPrerequisiteSatisfied(prerequisite, activity)) {\n        return {\n          satisfied: false,\n          exception: \"DB.1.1-13\" // Prerequisites not satisfied\n        };\n      }\n    }\n\n    // Check objective dependencies\n    const objectiveDependencies = this.getObjectiveDependencies(activity);\n    for (const dependency of objectiveDependencies) {\n      if (!this.isObjectiveDependencySatisfied(dependency)) {\n        return {\n          satisfied: false,\n          exception: \"DB.1.1-14\" // Objective dependencies not met\n        };\n      }\n    }\n\n    // Check sequencing rule dependencies\n    const sequencingDependencies = this.getSequencingRuleDependencies(activity);\n    if (!sequencingDependencies.satisfied) {\n      return {\n        satisfied: false,\n        exception: \"DB.1.1-15\" // Sequencing dependencies not met\n      };\n    }\n\n    return { satisfied: true, exception: null };\n  }\n\n  /**\n   * Helper methods for delivery request validation\n   */\n  private isActivityPartOfTree(activity: Activity, root: Activity): boolean {\n    if (activity === root) {\n      return true;\n    }\n\n    for (const child of root.children) {\n      if (this.isActivityPartOfTree(activity, child)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private getActiveActivities(): Activity[] {\n    const activeActivities: Activity[] = [];\n    if (this.activityTree.root) {\n      this.collectActiveActivities(this.activityTree.root, activeActivities);\n    }\n    return activeActivities;\n  }\n\n  private collectActiveActivities(activity: Activity, activeActivities: Activity[]): void {\n    if (activity.isActive) {\n      activeActivities.push(activity);\n    }\n    for (const child of activity.children) {\n      this.collectActiveActivities(child, activeActivities);\n    }\n  }\n\n  private getActivityRequiredResources(activity: Activity): string[] {\n    // Parse activity metadata for resource requirements\n    // Check activity definition for required resources like bandwidth, plugins, etc.\n    const resources: string[] = [];\n\n    // Check for multimedia requirements based on activity title and location\n    const activityInfo = (activity.title + \" \" + activity.location).toLowerCase();\n    if (activityInfo.includes(\"video\") || activityInfo.includes(\"multimedia\")) {\n      resources.push(\"video-codec\");\n    }\n    if (activityInfo.includes(\"audio\") || activityInfo.includes(\"sound\")) {\n      resources.push(\"audio-codec\");\n    }\n\n    // Check for plugin requirements from activity location/title\n    if (activityInfo.includes(\"flash\") || activityInfo.includes(\".swf\")) {\n      resources.push(\"flash-plugin\");\n    }\n    if (activityInfo.includes(\"java\") || activityInfo.includes(\"applet\")) {\n      resources.push(\"java-runtime\");\n    }\n\n    // Check for bandwidth requirements based on activity type\n    if (activity.children && activity.children.length > 0) {\n      resources.push(\"high-bandwidth\"); // Container activities may need more bandwidth\n    }\n\n    // Check for storage requirements based on duration limits\n    if (activity.attemptAbsoluteDurationLimit &&\n      this.parseDurationToMinutes(activity.attemptAbsoluteDurationLimit) > 60) {\n      resources.push(\"extended-storage\"); // Long duration activities need more storage\n    }\n\n    // Check for specific SCORM requirements\n    if (activity.attemptLimit && activity.attemptLimit > 1) {\n      resources.push(\"persistent-storage\"); // Multiple attempts need storage\n    }\n\n    return resources;\n  }\n\n  private isResourceAvailable(resource: string): boolean {\n    // Check if the specified resource is available in the runtime environment\n    try {\n      switch (resource) {\n        case \"video-codec\":\n          // Check if HTML5 video is supported\n          return !!(document.createElement(\"video\").canPlayType);\n\n        case \"audio-codec\":\n          // Check if HTML5 audio is supported\n          return !!(document.createElement(\"audio\").canPlayType);\n\n        case \"flash-plugin\":\n          // Check for Flash plugin (legacy support)\n          return (navigator.plugins && Array.from(navigator.plugins).some(plugin => plugin.name === \"Shockwave Flash\"));\n\n        case \"java-runtime\":\n          // Check for Java support (mostly deprecated in modern browsers)\n          return (navigator.plugins && Array.from(navigator.plugins).some(plugin => plugin.name === \"Java\"));\n\n        case \"high-bandwidth\":\n          // Check network connection (basic heuristic)\n          if (\"connection\" in navigator) {\n            const connection = (navigator as any).connection;\n            return connection.effectiveType === \"4g\" || connection.downlink > 5;\n          }\n          return true; // Assume available if can't detect\n\n        case \"extended-storage\":\n          // Check for sufficient storage (estimate 100MB needed)\n          if (\"storage\" in navigator && \"estimate\" in navigator.storage) {\n            navigator.storage.estimate().then(estimate => {\n              return (estimate.quota || 0) > 100 * 1024 * 1024; // 100MB\n            });\n          }\n          return true; // Assume available if can't detect\n\n        case \"persistent-storage\":\n          // Check for persistent storage capabilities\n          return \"localStorage\" in window && \"sessionStorage\" in window;\n\n        default:\n          // Unknown resource, assume available\n          return true;\n      }\n    } catch (error) {\n      // If any check fails, assume resource is unavailable\n      return false;\n    }\n  }\n\n  private checkSystemResourceLimits(): { adequate: boolean } {\n    // Check system memory, CPU, and other resource constraints\n    try {\n      let adequate = true;\n\n      // Check memory usage if available (Chrome/Edge only)\n      if (\"memory\" in performance) {\n        const memory = (performance as any).memory;\n        const memoryUsagePercent = memory.usedJSHeapSize / memory.jsHeapSizeLimit;\n        if (memoryUsagePercent > 0.8) { // More than 80% memory used\n          adequate = false;\n        }\n      }\n\n      // Check for device memory hint (modern browsers)\n      if (\"deviceMemory\" in navigator) {\n        const deviceMemory = (navigator as any).deviceMemory;\n        if (deviceMemory < 2) { // Less than 2GB device memory\n          adequate = false;\n        }\n      }\n\n      // Check hardware concurrency (rough CPU check)\n      if (\"hardwareConcurrency\" in navigator) {\n        const cores = navigator.hardwareConcurrency;\n        if (cores < 2) { // Single core devices might struggle\n          adequate = false;\n        }\n      }\n\n      // Check connection quality for network-intensive activities\n      if (\"connection\" in navigator) {\n        const connection = (navigator as any).connection;\n        if (connection.saveData || connection.effectiveType === \"slow-2g\") {\n          adequate = false;\n        }\n      }\n\n      return { adequate };\n    } catch (error) {\n      // If checks fail, assume resources are adequate\n      return { adequate: true };\n    }\n  }\n\n  private hasPendingDeliveryRequests(): boolean {\n    // Check if there are pending delivery requests in the system\n    // This would track asynchronous operations like:\n    // - CMI data commits to LMS\n    // - Asset downloads\n    // - External service calls\n\n    // Check for pending async operations in the activity tree state\n    if (this.activityTree && (this.activityTree as any).pendingRequests) {\n      return (this.activityTree as any).pendingRequests.length > 0;\n    }\n\n    // Check for any pending fetch operations (if using fetch API)\n    if (typeof window !== \"undefined\" && (window as any).pendingScormRequests) {\n      return (window as any).pendingScormRequests > 0;\n    }\n\n    // Check event service for pending operations\n    if (this.eventCallback) {\n      // Fire event to check for pending operations\n      try {\n        this.eventCallback(\"check_pending_requests\", {});\n        // Implementation would depend on the event system returning status\n      } catch (error) {\n        // If event fails, assume no pending requests\n      }\n    }\n\n    return false;\n  }\n\n  private isDeliveryLocked(): boolean {\n    // Check if delivery is currently locked due to:\n    // - Active navigation request processing\n    // - Pending termination/suspension\n    // - Resource constraints\n    // - System maintenance mode\n\n    // Check for navigation lock\n    if (this.activityTree && (this.activityTree as any).navigationLocked) {\n      return true;\n    }\n\n    // Check for active termination process\n    if (this.activityTree && (this.activityTree as any).terminationInProgress) {\n      return true;\n    }\n\n    // Check system resource limits\n    const resourceCheck = this.checkSystemResourceLimits();\n    if (!resourceCheck.adequate) {\n      return true; // Lock delivery if resources are inadequate\n    }\n\n    // Check for maintenance mode (would be set by LMS)\n    return !!(typeof window !== \"undefined\" && (window as any).scormMaintenanceMode);\n  }\n\n  private getActivityPrerequisites(activity: Activity): string[] {\n    // Return list of prerequisite activity IDs based on SCORM 2004 sequencing rules\n    const prerequisites: string[] = [];\n\n    // Check for preCondition rules that reference other activities\n    if (activity.sequencingRules && activity.sequencingRules.preConditionRules) {\n      for (const rule of activity.sequencingRules.preConditionRules) {\n        if (rule.conditions && rule.conditions.length > 0) {\n          for (const condition of rule.conditions) {\n            // Look for objectiveStatusKnown, objectiveSatisfied, etc. conditions\n            // that reference global objectives which may be satisfied by other activities\n            if ((condition as any).referencedObjectiveID &&\n              (condition as any).referencedObjectiveID !== activity.id) {\n              prerequisites.push((condition as any).referencedObjectiveID);\n            }\n          }\n        }\n      }\n    }\n\n    // Check for sequencing control dependencies\n    // Activities with choiceExit=false may depend on completion of siblings\n    if (activity.parent && activity.sequencingControls &&\n      !activity.sequencingControls.choiceExit) {\n      const siblings = activity.parent.children;\n      if (siblings) {\n        const activityIndex = siblings.indexOf(activity);\n\n        // Add previous siblings as prerequisites for sequential flow\n        for (let i = 0; i < activityIndex; i++) {\n          const sibling = siblings[i];\n          if (sibling) {\n            prerequisites.push(sibling.id);\n          }\n        }\n      }\n    }\n\n    // Check for explicit prerequisite metadata (if defined in activity)\n    if ((activity as any).prerequisiteActivities) {\n      prerequisites.push(...(activity as any).prerequisiteActivities);\n    }\n\n    return Array.from(new Set(prerequisites)); // Remove duplicates\n  }\n\n  private isPrerequisiteSatisfied(prerequisiteId: string, _activity: Activity): boolean {\n    // Check if prerequisite is satisfied\n    const prerequisite = this.activityTree.getActivity(prerequisiteId);\n    if (!prerequisite) {\n      return false;\n    }\n\n    // Check if prerequisite is completed\n    return prerequisite.completionStatus === \"completed\";\n  }\n\n  private getObjectiveDependencies(activity: Activity): string[] {\n    // Return list of objective dependencies based on SCORM 2004 objective mapping\n    const dependencies: string[] = [];\n\n    // Check activity's objective mappings for global objective references\n    // Note: Activity class doesn't currently have objectives property - this is a future enhancement\n    const objectives = (activity as any).objectives;\n    if (objectives && objectives.length > 0) {\n      for (const objective of objectives) {\n        // Check for global objective mapping\n        if ((objective as any).globalObjectiveID) {\n          dependencies.push((objective as any).globalObjectiveID);\n        }\n\n        // Check for read/write objective mappings\n        if (!(objective as any).satisfiedByMeasure && (objective as any).readNormalizedMeasure) {\n          // This objective depends on external measure\n          dependencies.push(objective.id + \"_measure\");\n        }\n      }\n    }\n\n    // Check sequencing rules for objective references\n    if (activity.sequencingRules) {\n      const allRules = [\n        ...(activity.sequencingRules.preConditionRules || []),\n        ...(activity.sequencingRules.exitConditionRules || []),\n        ...(activity.sequencingRules.postConditionRules || [])\n      ];\n\n      for (const rule of allRules) {\n        if (rule.conditions && rule.conditions.length > 0) {\n          for (const condition of rule.conditions) {\n            if ((condition as any).objectiveReference &&\n              (condition as any).objectiveReference !== activity.id) {\n              dependencies.push((condition as any).objectiveReference);\n            }\n          }\n        }\n      }\n    }\n\n    return Array.from(new Set(dependencies)); // Remove duplicates\n  }\n\n  private isObjectiveDependencySatisfied(objectiveId: string): boolean {\n    // Check if objective dependency is satisfied according to SCORM 2004 rules\n\n    // Handle global objective references\n    if (this.activityTree && (this.activityTree as any).globalObjectives) {\n      const globalObjectives = (this.activityTree as any).globalObjectives;\n      const globalObjective = globalObjectives[objectiveId];\n\n      if (globalObjective) {\n        // Check if global objective is satisfied\n        return globalObjective.satisfied === true &&\n          globalObjective.statusKnown === true;\n      }\n    }\n\n    // Handle measure-based dependencies\n    if (objectiveId.endsWith(\"_measure\")) {\n      const baseObjectiveId = objectiveId.replace(\"_measure\", \"\");\n      if (this.activityTree && (this.activityTree as any).globalObjectives) {\n        const globalObjectives = (this.activityTree as any).globalObjectives;\n        const globalObjective = globalObjectives[baseObjectiveId];\n\n        if (globalObjective) {\n          // Check if measure is available and within acceptable range\n          return globalObjective.measureKnown === true &&\n            globalObjective.normalizedMeasure >= 0;\n        }\n      }\n    }\n\n    // Handle activity-specific objective references\n    const referencedActivity = this.activityTree.getActivity(objectiveId);\n    if (referencedActivity) {\n      return referencedActivity.objectiveSatisfiedStatus && referencedActivity.objectiveMeasureStatus;\n    }\n\n    // If objective is not found or cannot be evaluated, assume not satisfied\n    return false;\n  }\n\n  private getSequencingRuleDependencies(activity: Activity): { satisfied: boolean } {\n    // Check sequencing rule dependencies for SCORM 2004 compliance\n    let satisfied = true;\n\n    try {\n      // Check pre-condition rule dependencies\n      if (activity.sequencingRules && activity.sequencingRules.preConditionRules) {\n        for (const rule of activity.sequencingRules.preConditionRules) {\n          if (rule.conditions && rule.conditions.length > 0) {\n            for (const condition of rule.conditions) {\n              // Check condition-specific dependencies\n              const conditionType = (condition as any).conditionType || condition.condition;\n\n              switch (conditionType) {\n                case \"activityProgressKnown\":\n                  // Depends on activity progress tracking being available\n                  if (!activity.progressMeasureStatus) satisfied = false;\n                  break;\n\n                case \"objectiveStatusKnown\":\n                case \"objectiveSatisfied\": {\n                  // Depends on objective evaluation system\n                  const objectiveId = (condition as any).referencedObjectiveID || activity.id;\n                  if (!this.isObjectiveDependencySatisfied(objectiveId)) satisfied = false;\n                  break;\n                }\n\n                case \"attemptLimitExceeded\":\n                  // Depends on attempt tracking\n                  if (activity.attemptLimit === null) satisfied = false;\n                  break;\n\n                case \"timeLimitExceeded\":\n                  // Depends on time tracking\n                  if (!activity.attemptAbsoluteDurationLimit &&\n                    !activity.activityAbsoluteDurationLimit) satisfied = false;\n                  break;\n\n                case \"always\":\n                case \"never\":\n                  // These conditions have no dependencies\n                  break;\n\n                default:\n                  // Unknown condition type, assume dependency not satisfied\n                  satisfied = false;\n              }\n            }\n          }\n        }\n      }\n\n      // Check exit condition rule dependencies (similar logic)\n      if (activity.sequencingRules && activity.sequencingRules.exitConditionRules) {\n        for (const rule of activity.sequencingRules.exitConditionRules) {\n          if (rule.conditions && rule.conditions.length > 0) {\n            for (const condition of rule.conditions) {\n              const conditionType = (condition as any).conditionType || condition.condition;\n\n              // Similar dependency checks as pre-conditions\n              if ([\"objectiveStatusKnown\", \"objectiveSatisfied\"].includes(conditionType)) {\n                const objectiveId = (condition as any).referencedObjectiveID || activity.id;\n                if (!this.isObjectiveDependencySatisfied(objectiveId)) satisfied = false;\n              }\n            }\n          }\n        }\n      }\n\n      // Check rollup rule dependencies\n      if (activity.rollupRules && activity.rollupRules.rules) {\n        for (const rule of activity.rollupRules.rules) {\n          if (rule.conditions && rule.conditions.length > 0) {\n            // Rollup rules depend on child activity completion\n            if (activity.children && activity.children.length > 0) {\n              for (const child of activity.children) {\n                if (!child.isCompleted) {\n                  satisfied = false;\n                  break;\n                }\n              }\n            }\n          }\n        }\n      }\n\n    } catch (error) {\n      // If any error occurs during dependency check, mark as not satisfied\n      satisfied = false;\n    }\n\n    return { satisfied };\n  }\n\n  /**\n   * Helper method to parse ISO 8601 duration to minutes\n   */\n  private parseDurationToMinutes(duration: string): number {\n    return getDurationAsSeconds(duration, scorm2004_regex.CMITimespan) / 60; // Convert seconds to minutes\n  }\n\n  /**\n   * INTEGRATION: Initialize Global Objective Map\n   * Sets up the global objective map for cross-activity objective synchronization\n   */\n  private initializeGlobalObjectiveMap(): void {\n    try {\n      this.globalObjectiveMap.clear();\n\n      // Initialize global objectives from activity tree if available\n      if (this.activityTree.root) {\n        this.collectGlobalObjectives(this.activityTree.root);\n      }\n\n      this.fireEvent(\"onGlobalObjectiveMapInitialized\", {\n        objectiveCount: this.globalObjectiveMap.size,\n        timestamp: new Date().toISOString()\n      });\n    } catch (error) {\n      this.fireEvent(\"onGlobalObjectiveMapError\", {\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: new Date().toISOString()\n      });\n    }\n  }\n\n  /**\n   * INTEGRATION: Collect Global Objectives\n   * Recursively collects global objectives from the activity tree\n   * @param {Activity} activity - Activity to collect objectives from\n   */\n  private collectGlobalObjectives(activity: Activity): void {\n    // Create a default global objective for this activity\n    const globalObjectiveId = activity.id + \"_global\";\n    if (!this.globalObjectiveMap.has(globalObjectiveId)) {\n      this.globalObjectiveMap.set(globalObjectiveId, {\n        id: globalObjectiveId,\n        satisfiedStatus: activity.objectiveSatisfiedStatus,\n        satisfiedStatusKnown: activity.objectiveMeasureStatus,\n        normalizedMeasure: activity.objectiveNormalizedMeasure,\n        normalizedMeasureKnown: activity.objectiveMeasureStatus,\n        progressMeasure: activity.progressMeasure,\n        progressMeasureKnown: activity.progressMeasureStatus,\n        completionStatus: activity.completionStatus,\n        completionStatusKnown: activity.completionStatus !== \"unknown\",\n        readSatisfiedStatus: true,\n        writeSatisfiedStatus: true,\n        readNormalizedMeasure: true,\n        writeNormalizedMeasure: true,\n        readProgressMeasure: true,\n        writeProgressMeasure: true,\n        readCompletionStatus: true,\n        writeCompletionStatus: true,\n        satisfiedByMeasure: activity.scaledPassingScore !== null,\n        updateAttemptData: true\n      });\n    }\n\n    // Process children recursively\n    for (const child of activity.children) {\n      this.collectGlobalObjectives(child);\n    }\n  }\n\n  /**\n   * INTEGRATION: Get Global Objective Map\n   * Returns the current global objective map for external access\n   * @return {Map<string, any>} - Current global objective map\n   */\n  public getGlobalObjectiveMap(): Map<string, any> {\n    return this.globalObjectiveMap;\n  }\n\n  /**\n   * INTEGRATION: Update Global Objective\n   * Updates a specific global objective with new data\n   * @param {string} objectiveId - Objective ID to update\n   * @param {any} objectiveData - New objective data\n   */\n  public updateGlobalObjective(objectiveId: string, objectiveData: any): void {\n    try {\n      this.globalObjectiveMap.set(objectiveId, {\n        ...this.globalObjectiveMap.get(objectiveId),\n        ...objectiveData,\n        lastUpdated: new Date().toISOString()\n      });\n\n      this.fireEvent(\"onGlobalObjectiveUpdated\", {\n        objectiveId,\n        data: objectiveData,\n        timestamp: new Date().toISOString()\n      });\n    } catch (error) {\n      this.fireEvent(\"onGlobalObjectiveUpdateError\", {\n        objectiveId,\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: new Date().toISOString()\n      });\n    }\n  }\n}\n","import { Activity } from \"../cmi/scorm2004/sequencing/activity\";\nimport {\n  SequencingResult,\n  DeliveryRequestType,\n} from \"../cmi/scorm2004/sequencing/sequencing_process\";\nimport { EventService } from \"./EventService\";\nimport { LoggingService } from \"./LoggingService\";\nimport { IEventService, ILoggingService } from \"../interfaces/services\";\n\n/**\n * Interface for activity delivery callbacks\n */\nexport interface ActivityDeliveryCallbacks {\n  onDeliverActivity?: (activity: Activity) => void;\n  onUnloadActivity?: (activity: Activity) => void;\n  onSequencingComplete?: (result: SequencingResult) => void;\n  onSequencingError?: (error: string) => void;\n}\n\n/**\n * Service for managing activity delivery in SCORM 2004\n */\nexport class ActivityDeliveryService {\n  private eventService: IEventService;\n  private loggingService: ILoggingService;\n  private callbacks: ActivityDeliveryCallbacks;\n  private currentDeliveredActivity: Activity | null = null;\n  private pendingDelivery: Activity | null = null;\n\n  constructor(\n    eventService: IEventService,\n    loggingService: ILoggingService,\n    callbacks: ActivityDeliveryCallbacks = {},\n  ) {\n    this.eventService = eventService;\n    this.loggingService = loggingService;\n    this.callbacks = callbacks;\n  }\n\n  /**\n   * Process a sequencing result and handle activity delivery\n   * @param {SequencingResult} result - The sequencing result to process\n   */\n  public processSequencingResult(result: SequencingResult): void {\n    // Log the sequencing result\n    if (result.exception) {\n      this.loggingService.error(`Sequencing error: ${result.exception}`);\n      this.callbacks.onSequencingError?.(result.exception);\n      return;\n    }\n\n    // Handle delivery request\n    if (result.deliveryRequest === DeliveryRequestType.DELIVER && result.targetActivity) {\n      this.deliverActivity(result.targetActivity);\n    } else {\n      // No delivery requested\n      this.loggingService.info(\"Sequencing completed with no delivery request\");\n    }\n\n    // Notify sequencing complete\n    this.callbacks.onSequencingComplete?.(result);\n  }\n\n  /**\n   * Deliver an activity\n   * @param {Activity} activity - The activity to deliver\n   */\n  private deliverActivity(activity: Activity): void {\n    // If there's a currently delivered activity, unload it first\n    if (this.currentDeliveredActivity && this.currentDeliveredActivity !== activity) {\n      this.unloadActivity(this.currentDeliveredActivity);\n    }\n\n    // Mark the activity as pending delivery\n    this.pendingDelivery = activity;\n\n    // Log delivery\n    this.loggingService.info(`Delivering activity: ${activity.id} - ${activity.title}`);\n\n    // Fire delivery event\n    this.eventService.processListeners(\"ActivityDelivery\", activity.id, activity);\n\n    // Call delivery callback\n    this.callbacks.onDeliverActivity?.(activity);\n\n    // Update current delivered activity\n    this.currentDeliveredActivity = activity;\n    this.pendingDelivery = null;\n\n    // Mark activity as active\n    activity.isActive = true;\n  }\n\n  /**\n   * Unload an activity\n   * @param {Activity} activity - The activity to unload\n   */\n  private unloadActivity(activity: Activity): void {\n    // Log unload\n    this.loggingService.info(`Unloading activity: ${activity.id} - ${activity.title}`);\n\n    // Fire unload event\n    this.eventService.processListeners(\"ActivityUnload\", activity.id, activity);\n\n    // Call unload callback\n    this.callbacks.onUnloadActivity?.(activity);\n\n    // Mark activity as inactive\n    activity.isActive = false;\n  }\n\n  /**\n   * Get the currently delivered activity\n   * @return {Activity | null}\n   */\n  public getCurrentDeliveredActivity(): Activity | null {\n    return this.currentDeliveredActivity;\n  }\n\n  /**\n   * Get the pending delivery activity\n   * @return {Activity | null}\n   */\n  public getPendingDelivery(): Activity | null {\n    return this.pendingDelivery;\n  }\n\n  /**\n   * Update delivery callbacks\n   * @param {ActivityDeliveryCallbacks} callbacks - The new callbacks\n   */\n  public updateCallbacks(callbacks: ActivityDeliveryCallbacks): void {\n    this.callbacks = { ...this.callbacks, ...callbacks };\n  }\n\n  /**\n   * Reset the delivery service\n   */\n  public reset(): void {\n    if (this.currentDeliveredActivity) {\n      this.unloadActivity(this.currentDeliveredActivity);\n    }\n    this.currentDeliveredActivity = null;\n    this.pendingDelivery = null;\n  }\n}\n","import { Activity } from \"../cmi/scorm2004/sequencing/activity\";\nimport { Sequencing } from \"../cmi/scorm2004/sequencing/sequencing\";\nimport { RollupProcess } from \"../cmi/scorm2004/sequencing/rollup_process\";\nimport {\n  OverallSequencingProcess,\n  NavigationRequestType,\n  DeliveryRequest,\n} from \"../cmi/scorm2004/sequencing/overall_sequencing_process\";\nimport {\n  SequencingProcess,\n  SequencingResult,\n  DeliveryRequestType,\n} from \"../cmi/scorm2004/sequencing/sequencing_process\";\nimport { EventService } from \"./EventService\";\nimport { IEventService, ILoggingService } from \"../interfaces/services\";\nimport { LoggingService } from \"./LoggingService\";\nimport { ActivityDeliveryService, ActivityDeliveryCallbacks } from \"./ActivityDeliveryService\";\nimport { CMI } from \"../cmi/scorm2004/cmi\";\nimport { ADL } from \"../cmi/scorm2004/adl\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { RuleCondition } from \"../cmi/scorm2004/sequencing/sequencing_rules\";\n\n/**\n * Interface for sequencing event listeners\n */\nexport interface SequencingEventListeners {\n  onSequencingStart?: (activity: Activity) => void;\n  onSequencingEnd?: () => void;\n  onActivityDelivery?: (activity: Activity) => void;\n  onActivityUnload?: (activity: Activity) => void;\n  onNavigationRequest?: (request: string, target?: string) => void;\n  onRollupComplete?: (activity: Activity) => void;\n  onSequencingError?: (error: string, context?: string) => void;\n  // Enhanced debugging events\n  onSequencingDebug?: (event: string, data?: any) => void;\n  onActivityAttemptStart?: (activity: Activity) => void;\n  onActivityAttemptEnd?: (activity: Activity) => void;\n  onLimitConditionCheck?: (activity: Activity, result: boolean) => void;\n  onNavigationValidityUpdate?: (validity: any) => void;\n  onSequencingStateChange?: (state: any) => void;\n}\n\n/**\n * Interface for sequencing configuration\n */\nexport interface SequencingConfiguration {\n  autoRollupOnCMIChange?: boolean;\n  autoProgressOnCompletion?: boolean;\n  validateNavigationRequests?: boolean;\n  enableEventSystem?: boolean;\n  logLevel?: \"debug\" | \"info\" | \"warn\" | \"error\";\n  // Time providers/hooks (LMS can override)\n  now?: () => Date;\n  getAttemptElapsedSeconds?: (activity: Activity) => number;\n  getActivityElapsedSeconds?: (activity: Activity) => number;\n}\n\n/**\n * Comprehensive SCORM 2004 Sequencing Service\n * Handles all aspects of sequencing integration with runtime API calls\n */\nexport class SequencingService {\n  private sequencing: Sequencing;\n  private cmi: CMI;\n  private adl: ADL;\n  private eventService: IEventService;\n  private loggingService: ILoggingService;\n  private activityDeliveryService: ActivityDeliveryService;\n  private rollupProcess: RollupProcess;\n  private overallSequencingProcess: OverallSequencingProcess | null = null;\n  private sequencingProcess: SequencingProcess | null = null;\n\n  private eventListeners: SequencingEventListeners = {};\n  private configuration: SequencingConfiguration;\n  private isInitialized: boolean = false;\n  private isSequencingActive: boolean = false;\n  private lastCMIValues: Map<string, any> = new Map();\n  private lastSequencingResult: SequencingResult | null = null;\n\n  constructor(\n    sequencing: Sequencing,\n    cmi: CMI,\n    adl: ADL,\n    eventService: IEventService,\n    loggingService: ILoggingService,\n    configuration: SequencingConfiguration = {},\n  ) {\n    this.sequencing = sequencing;\n    this.cmi = cmi;\n    this.adl = adl;\n    this.eventService = eventService;\n    this.loggingService = loggingService;\n\n    // Default configuration\n    this.configuration = {\n      autoRollupOnCMIChange: true,\n      autoProgressOnCompletion: false,\n      validateNavigationRequests: true,\n      enableEventSystem: true,\n      logLevel: \"info\",\n      now: () => new Date(),\n      ...configuration,\n    };\n\n    // Create activity delivery service\n    const deliveryCallbacks: ActivityDeliveryCallbacks = {\n      onDeliverActivity: (activity) => this.handleActivityDelivery(activity),\n      onUnloadActivity: (activity) => this.handleActivityUnload(activity),\n      onSequencingComplete: (result) => this.handleSequencingComplete(result),\n      onSequencingError: (error) => this.handleSequencingError(error),\n    };\n\n    this.activityDeliveryService = new ActivityDeliveryService(\n      eventService,\n      loggingService,\n      deliveryCallbacks,\n    );\n\n    this.rollupProcess = new RollupProcess();\n    // Propagate time provider to rule evaluation (time-based conditions)\n    if (this.configuration.now) {\n      RuleCondition.setNowProvider(this.configuration.now);\n    }\n    this.setupCMIChangeWatchers();\n  }\n\n  /**\n   * Initialize the sequencing service\n   * Called when SCORM API Initialize() is called\n   */\n  public initialize(): string {\n    try {\n      this.log(\"info\", \"Initializing sequencing service\");\n\n      // Initialize sequencing components\n      if (!this.sequencing.initialized) {\n        this.sequencing.initialize();\n      }\n\n      // Set up ADL Nav connection\n      this.sequencing.adlNav = this.adl.nav;\n\n      // Create sequencing processes if we have an activity tree\n      if (this.sequencing.activityTree.root) {\n        const seqOptions: {\n          now?: () => Date;\n          getAttemptElapsedSeconds?: (a: Activity) => number;\n          getActivityElapsedSeconds?: (a: Activity) => number;\n        } = {};\n        if (this.configuration.now) seqOptions.now = this.configuration.now;\n        if (this.configuration.getAttemptElapsedSeconds)\n          seqOptions.getAttemptElapsedSeconds = this.configuration.getAttemptElapsedSeconds;\n        if (this.configuration.getActivityElapsedSeconds)\n          seqOptions.getActivityElapsedSeconds = this.configuration.getActivityElapsedSeconds;\n\n        this.sequencingProcess = new SequencingProcess(\n          this.sequencing.activityTree,\n          this.sequencing.sequencingRules,\n          this.sequencing.sequencingControls,\n          this.adl.nav,\n          seqOptions,\n        );\n\n        const overallOptions: { now?: () => Date } = {};\n        if (this.configuration.now) overallOptions.now = this.configuration.now;\n\n        this.overallSequencingProcess = new OverallSequencingProcess(\n          this.sequencing.activityTree,\n          this.sequencingProcess,\n          this.rollupProcess,\n          this.adl.nav,\n          (eventType: string, data?: any) => this.handleSequencingProcessEvent(eventType, data),\n          overallOptions,\n        );\n\n        this.log(\"info\", \"Sequencing processes created\");\n      }\n\n      // Start automatic sequencing if configured\n      if (this.shouldAutoStartSequencing()) {\n        this.startSequencing();\n      }\n\n      // Initialize CMI tracking\n      this.initializeCMITracking();\n\n      this.isInitialized = true;\n      this.fireEvent(\"onSequencingStart\", this.sequencing.getCurrentActivity());\n\n      this.log(\"info\", \"Sequencing service initialized successfully\");\n      return global_constants.SCORM_TRUE;\n    } catch (error) {\n      const errorMsg = `Failed to initialize sequencing service: ${error}`;\n      this.log(\"error\", errorMsg);\n      this.fireEvent(\"onSequencingError\", errorMsg, \"initialization\");\n      return global_constants.SCORM_FALSE;\n    }\n  }\n\n  /**\n   * Terminate the sequencing service\n   * Called when SCORM API Terminate() is called\n   */\n  public terminate(): string {\n    try {\n      this.log(\"info\", \"Terminating sequencing service\");\n\n      // Process any pending navigation requests\n      if (this.adl.nav.request !== \"_none_\") {\n        this.processNavigationRequest(this.adl.nav.request);\n      }\n\n      // Trigger final rollup\n      this.triggerFinalRollup();\n\n      // End sequencing session\n      this.endSequencing();\n\n      this.isInitialized = false;\n      this.fireEvent(\"onSequencingEnd\");\n\n      this.log(\"info\", \"Sequencing service terminated successfully\");\n      return global_constants.SCORM_TRUE;\n    } catch (error) {\n      const errorMsg = `Failed to terminate sequencing service: ${error}`;\n      this.log(\"error\", errorMsg);\n      this.fireEvent(\"onSequencingError\", errorMsg, \"termination\");\n      return global_constants.SCORM_FALSE;\n    }\n  }\n\n  /**\n   * Process a navigation request\n   * Implements the complete Overall Sequencing Process (OP.1)\n   */\n  public processNavigationRequest(request: string, targetActivityId?: string): boolean {\n    if (!this.isInitialized || !this.overallSequencingProcess) {\n      this.log(\"warn\", `Navigation request '${request}' ignored - sequencing not initialized`);\n      return false;\n    }\n\n    try {\n      this.log(\n        \"info\",\n        `Processing navigation request: ${request}${targetActivityId ? ` (target: ${targetActivityId})` : \"\"}`,\n      );\n\n      // Fire navigation request event\n      this.fireEvent(\"onNavigationRequest\", request, targetActivityId);\n\n      // Parse the request to NavigationRequestType\n      const navRequestType = this.parseNavigationRequest(request);\n      if (navRequestType === null) {\n        this.log(\"warn\", `Invalid navigation request: ${request}`);\n        return false;\n      }\n\n      // Process the navigation request through Overall Sequencing Process\n      const deliveryRequest: DeliveryRequest =\n        this.overallSequencingProcess.processNavigationRequest(\n          navRequestType,\n          targetActivityId || null,\n        );\n\n      // Handle the delivery request\n      if (deliveryRequest.valid && deliveryRequest.targetActivity) {\n        // Process delivery through activity delivery service\n        const sequencingResult: SequencingResult = {\n          deliveryRequest: deliveryRequest.valid\n            ? DeliveryRequestType.DELIVER\n            : DeliveryRequestType.DO_NOT_DELIVER,\n          targetActivity: deliveryRequest.targetActivity,\n          exception: deliveryRequest.exception || null,\n        };\n\n        // Store the result\n        this.lastSequencingResult = sequencingResult;\n        this.activityDeliveryService.processSequencingResult(sequencingResult);\n        this.log(\n          \"info\",\n          `Navigation request '${request}' resulted in activity delivery: ${deliveryRequest.targetActivity.id}`,\n        );\n        return true;\n      } else {\n        // No delivery requested or invalid\n        if (deliveryRequest.exception) {\n          this.log(\"warn\", `Navigation request '${request}' failed: ${deliveryRequest.exception}`);\n          this.fireEvent(\"onSequencingError\", deliveryRequest.exception, \"navigation\");\n        } else {\n          this.log(\"info\", `Navigation request '${request}' completed with no activity delivery`);\n        }\n        return deliveryRequest.valid;\n      }\n    } catch (error) {\n      const errorMsg = `Error processing navigation request '${request}': ${error}`;\n      this.log(\"error\", errorMsg);\n      this.fireEvent(\"onSequencingError\", errorMsg, \"navigation\");\n      return false;\n    }\n  }\n\n  /**\n   * Trigger rollup when CMI values change\n   * Called automatically when tracked CMI values are updated\n   */\n  public triggerRollupOnCMIChange(cmiElement: string, oldValue: any, newValue: any): void {\n    if (!this.configuration.autoRollupOnCMIChange || !this.isInitialized) {\n      return;\n    }\n\n    // Only trigger rollup for specific CMI elements that affect sequencing\n    const rollupTriggeringElements = [\n      \"cmi.completion_status\",\n      \"cmi.success_status\",\n      \"cmi.score.scaled\",\n      \"cmi.score.raw\",\n      \"cmi.score.min\",\n      \"cmi.score.max\",\n      \"cmi.progress_measure\",\n      \"cmi.objectives.n.success_status\",\n      \"cmi.objectives.n.completion_status\",\n      \"cmi.objectives.n.score.scaled\",\n    ];\n\n    if (!rollupTriggeringElements.some((element) => cmiElement.startsWith(element))) {\n      return;\n    }\n\n    try {\n      this.log(\n        \"debug\",\n        `Triggering rollup due to CMI change: ${cmiElement} = ${newValue} (was ${oldValue})`,\n      );\n\n      // Get current activity\n      const currentActivity = this.sequencing.getCurrentActivity();\n      if (!currentActivity) {\n        this.log(\"debug\", \"No current activity for rollup\");\n        return;\n      }\n\n      // Update activity status based on CMI changes\n      this.updateActivityFromCMI(currentActivity);\n\n      // Trigger rollup process\n      this.rollupProcess.overallRollupProcess(currentActivity);\n\n      this.fireEvent(\"onRollupComplete\", currentActivity);\n\n      this.log(\"debug\", `Rollup completed for activity: ${currentActivity.id}`);\n    } catch (error) {\n      const errorMsg = `Error during rollup on CMI change: ${error}`;\n      this.log(\"error\", errorMsg);\n      this.fireEvent(\"onSequencingError\", errorMsg, \"rollup\");\n    }\n  }\n\n  /**\n   * Set event listeners for sequencing events\n   */\n  public setEventListeners(listeners: SequencingEventListeners): void {\n    this.eventListeners = { ...this.eventListeners, ...listeners };\n    this.log(\"debug\", \"Sequencing event listeners updated\");\n  }\n\n  /**\n   * Update sequencing configuration\n   */\n  public updateConfiguration(config: Partial<SequencingConfiguration>): void {\n    this.configuration = { ...this.configuration, ...config };\n    this.log(\"debug\", \"Sequencing configuration updated\");\n  }\n\n  /**\n   * Get the current sequencing state\n   */\n  public getSequencingState(): {\n    isInitialized: boolean;\n    isActive: boolean;\n    currentActivity: Activity | null;\n    rootActivity: Activity | null;\n    lastSequencingResult: SequencingResult | null;\n  } {\n    return {\n      isInitialized: this.isInitialized,\n      isActive: this.isSequencingActive,\n      currentActivity: this.sequencing.getCurrentActivity(),\n      rootActivity: this.sequencing.getRootActivity(),\n      lastSequencingResult: this.lastSequencingResult,\n    };\n  }\n\n  /**\n   * Get the overall sequencing process instance\n   * @return {OverallSequencingProcess | null} The overall sequencing process or null if not initialized\n   */\n  public getOverallSequencingProcess(): OverallSequencingProcess | null {\n    return this.overallSequencingProcess;\n  }\n\n  // Private helper methods\n\n  /**\n   * Set up watchers for CMI value changes\n   */\n  private setupCMIChangeWatchers(): void {\n    // We'll hook into the setter methods to detect changes\n    // This would typically be done by modifying the CMI setters\n    // For now, we'll track changes when values are set\n  }\n\n  /**\n   * Initialize CMI tracking by storing current values\n   */\n  private initializeCMITracking(): void {\n    // Store initial CMI values for change detection\n    this.lastCMIValues.set(\"cmi.completion_status\", this.cmi.completion_status);\n    this.lastCMIValues.set(\"cmi.success_status\", this.cmi.success_status);\n    this.lastCMIValues.set(\"cmi.progress_measure\", this.cmi.progress_measure);\n\n    if (this.cmi.score) {\n      this.lastCMIValues.set(\"cmi.score.scaled\", this.cmi.score.scaled);\n      this.lastCMIValues.set(\"cmi.score.raw\", this.cmi.score.raw);\n    }\n  }\n\n  /**\n   * Check if sequencing should auto-start\n   */\n  private shouldAutoStartSequencing(): boolean {\n    // Auto-start if we have a root activity and no current activity\n    return !!(this.sequencing.activityTree.root && !this.sequencing.getCurrentActivity());\n  }\n\n  /**\n   * Start automatic sequencing\n   */\n  private startSequencing(): void {\n    if (!this.overallSequencingProcess) {\n      return;\n    }\n\n    try {\n      // Process a \"start\" navigation request to begin sequencing\n      const startResult = this.processNavigationRequest(\"start\");\n      if (startResult) {\n        this.isSequencingActive = true;\n        this.log(\"info\", \"Automatic sequencing started\");\n      }\n    } catch (error) {\n      this.log(\"error\", `Failed to start automatic sequencing: ${error}`);\n    }\n  }\n\n  /**\n   * End sequencing session\n   */\n  private endSequencing(): void {\n    this.isSequencingActive = false;\n    this.activityDeliveryService.reset();\n  }\n\n  /**\n   * Trigger final rollup on termination\n   */\n  private triggerFinalRollup(): void {\n    try {\n      const currentActivity = this.sequencing.getCurrentActivity();\n      if (currentActivity) {\n        // Update activity with final CMI values\n        this.updateActivityFromCMI(currentActivity);\n\n        // Trigger rollup\n        this.rollupProcess.overallRollupProcess(currentActivity);\n\n        this.log(\"info\", \"Final rollup completed\");\n      }\n    } catch (error) {\n      this.log(\"error\", `Error during final rollup: ${error}`);\n    }\n  }\n\n  /**\n   * Update activity properties from current CMI values\n   */\n  private updateActivityFromCMI(activity: Activity): void {\n    // Update completion status\n    if (this.cmi.completion_status !== \"unknown\") {\n      activity.completionStatus = this.cmi.completion_status as\n        | \"completed\"\n        | \"incomplete\"\n        | \"not attempted\"\n        | \"unknown\";\n    }\n\n    // Update success status\n    if (this.cmi.success_status !== \"unknown\") {\n      activity.successStatus = this.cmi.success_status as \"passed\" | \"failed\" | \"unknown\";\n      activity.objectiveSatisfiedStatus = this.cmi.success_status === \"passed\";\n    }\n\n    // Update progress measure\n    if (this.cmi.progress_measure !== \"\") {\n      const progressMeasure = parseFloat(this.cmi.progress_measure);\n      if (!isNaN(progressMeasure)) {\n        activity.progressMeasure = progressMeasure;\n        activity.progressMeasureStatus = true;\n      }\n    }\n\n    // Update score information\n    if (this.cmi.score && this.cmi.score.scaled !== \"\") {\n      const scaledScore = parseFloat(this.cmi.score.scaled);\n      if (!isNaN(scaledScore)) {\n        activity.objectiveNormalizedMeasure = scaledScore;\n        activity.objectiveMeasureStatus = true;\n      }\n    }\n  }\n\n  /**\n   * Parse navigation request string to NavigationRequestType\n   */\n  private parseNavigationRequest(request: string): NavigationRequestType | null {\n    // Handle choice and jump with targets\n    if (request.includes(\"choice\")) {\n      return NavigationRequestType.CHOICE;\n    }\n    if (request.includes(\"jump\")) {\n      return NavigationRequestType.JUMP;\n    }\n\n    // Handle standard navigation requests\n    switch (request) {\n      case \"start\":\n        return NavigationRequestType.START;\n      case \"resumeAll\":\n        return NavigationRequestType.RESUME_ALL;\n      case \"continue\":\n        return NavigationRequestType.CONTINUE;\n      case \"previous\":\n        return NavigationRequestType.PREVIOUS;\n      case \"exit\":\n        return NavigationRequestType.EXIT;\n      case \"exitAll\":\n        return NavigationRequestType.EXIT_ALL;\n      case \"abandon\":\n        return NavigationRequestType.ABANDON;\n      case \"abandonAll\":\n        return NavigationRequestType.ABANDON_ALL;\n      case \"suspendAll\":\n        return NavigationRequestType.SUSPEND_ALL;\n      case \"_none_\":\n        return NavigationRequestType.NOT_VALID;\n      default:\n        return null;\n    }\n  }\n\n  /**\n   * Handle activity delivery event\n   */\n  private handleActivityDelivery(activity: Activity): void {\n    this.log(\"info\", `Activity delivered: ${activity.id} - ${activity.title}`);\n    this.fireEvent(\"onActivityDelivery\", activity);\n  }\n\n  /**\n   * Handle activity unload event\n   */\n  private handleActivityUnload(activity: Activity): void {\n    this.log(\"info\", `Activity unloaded: ${activity.id} - ${activity.title}`);\n    this.fireEvent(\"onActivityUnload\", activity);\n  }\n\n  /**\n   * Handle sequencing completion event\n   */\n  private handleSequencingComplete(result: SequencingResult): void {\n    this.log(\"debug\", \"Sequencing completed\", result);\n  }\n\n  /**\n   * Handle sequencing error event\n   */\n  private handleSequencingError(error: string): void {\n    this.log(\"error\", `Sequencing error: ${error}`);\n    this.fireEvent(\"onSequencingError\", error, \"sequencing\");\n  }\n\n  /**\n   * Fire an event to registered listeners with enhanced error handling\n   */\n  private fireEvent(eventType: keyof SequencingEventListeners, ...args: any[]): void {\n    if (!this.configuration.enableEventSystem) {\n      return;\n    }\n\n    // Only fire debug event for non-debug events to prevent recursion\n    if (eventType !== \"onSequencingDebug\") {\n      this.fireDebugEvent(`${eventType} fired`, { eventType, argsLength: args.length });\n    }\n\n    try {\n      // Fire to internal listeners first\n      const listener = this.eventListeners[eventType];\n      if (listener && typeof listener === \"function\") {\n        try {\n          (listener as any)(...args);\n          this.log(\"debug\", `Internal listener for ${eventType} executed successfully`);\n        } catch (listenerError) {\n          this.log(\"error\", `Internal listener for ${eventType} failed: ${listenerError}`);\n          // Don't let listener errors stop event propagation\n        }\n      }\n\n      // Fire through the event service for broader integration\n      try {\n        this.eventService.processListeners(`Sequencing.${eventType}`, args[0], ...args.slice(1));\n        this.log(\"debug\", `Event service listeners for ${eventType} processed`);\n      } catch (eventServiceError) {\n        // Event service might not be properly initialized in test contexts\n        // This is not a critical error for sequencing functionality\n        this.log(\"warn\", `Event service failed for ${eventType}: ${eventServiceError}`);\n      }\n\n      // Fire to external global listeners if available\n      try {\n        if (typeof window !== \"undefined\" && (window as any).scormSequencingEvents) {\n          const globalListeners = (window as any).scormSequencingEvents;\n          if (globalListeners[eventType] && typeof globalListeners[eventType] === \"function\") {\n            globalListeners[eventType](...args);\n            this.log(\"debug\", `Global listener for ${eventType} executed`);\n          }\n        }\n      } catch (globalError) {\n        this.log(\"warn\", `Global listener for ${eventType} failed: ${globalError}`);\n      }\n    } catch (error) {\n      this.log(\"error\", `Critical error firing event ${eventType}: ${error}`);\n    }\n  }\n\n  /**\n   * Fire a debug event with detailed information\n   */\n  private fireDebugEvent(event: string, data?: any): void {\n    try {\n      // Direct execution to avoid recursion through fireEvent\n      const listener = this.eventListeners[\"onSequencingDebug\"];\n      if (listener && typeof listener === \"function\") {\n        listener(event, {\n          timestamp: new Date().toISOString(),\n          ...data,\n        });\n      }\n\n      // Also fire through event service directly\n      try {\n        this.eventService.processListeners(\"Sequencing.onSequencingDebug\", event, {\n          timestamp: new Date().toISOString(),\n          ...data,\n        });\n      } catch (eventServiceError) {\n        // Silent fail for event service debug events\n      }\n    } catch (error) {\n      // Silent fail for debug events to avoid recursion\n      console.debug(`Debug event failed: ${error}`);\n    }\n  }\n\n  /**\n   * Fire activity attempt start event\n   */\n  public fireActivityAttemptStart(activity: Activity): void {\n    this.fireEvent(\"onActivityAttemptStart\", activity);\n    this.fireDebugEvent(\"Activity attempt started\", {\n      activityId: activity.id,\n      title: activity.title,\n      attemptCount: activity.attemptCount,\n    });\n  }\n\n  /**\n   * Fire activity attempt end event\n   */\n  public fireActivityAttemptEnd(activity: Activity): void {\n    this.fireEvent(\"onActivityAttemptEnd\", activity);\n    this.fireDebugEvent(\"Activity attempt ended\", {\n      activityId: activity.id,\n      title: activity.title,\n      completionStatus: activity.completionStatus,\n      successStatus: activity.successStatus,\n    });\n  }\n\n  /**\n   * Fire limit condition check event\n   */\n  public fireLimitConditionCheck(activity: Activity, result: boolean): void {\n    this.fireEvent(\"onLimitConditionCheck\", activity, result);\n    this.fireDebugEvent(\"Limit condition check\", {\n      activityId: activity.id,\n      result,\n      attemptCount: activity.attemptCount,\n      attemptLimit: activity.attemptLimit,\n    });\n  }\n\n  /**\n   * Fire navigation validity update event\n   */\n  public fireNavigationValidityUpdate(validity: any): void {\n    this.fireEvent(\"onNavigationValidityUpdate\", validity);\n    this.fireDebugEvent(\"Navigation validity updated\", { validity });\n  }\n\n  /**\n   * Fire sequencing state change event\n   */\n  public fireSequencingStateChange(state: any): void {\n    this.fireEvent(\"onSequencingStateChange\", state);\n    this.fireDebugEvent(\"Sequencing state changed\", { stateKeys: Object.keys(state) });\n  }\n\n  /**\n   * Handle events from the sequencing process\n   */\n  private handleSequencingProcessEvent(eventType: string, data?: any): void {\n    try {\n      switch (eventType) {\n        case \"onActivityDelivery\":\n          this.fireEvent(\"onActivityDelivery\", data);\n          break;\n        case \"onLimitConditionCheck\":\n          this.fireLimitConditionCheck(data.activity, data.result);\n          break;\n        case \"onActivityAttemptStart\":\n          this.fireActivityAttemptStart(data);\n          break;\n        case \"onActivityAttemptEnd\":\n          this.fireActivityAttemptEnd(data);\n          break;\n        default:\n          // Pass through unknown events as debug events\n          this.fireDebugEvent(`Sequencing process event: ${eventType}`, data);\n      }\n    } catch (error) {\n      this.log(\"error\", `Error handling sequencing process event ${eventType}: ${error}`);\n    }\n  }\n\n  /**\n   * Log message with appropriate level\n   */\n  private log(level: \"debug\" | \"info\" | \"warn\" | \"error\", message: string, data?: any): void {\n    const logLevels = [\"debug\", \"info\", \"warn\", \"error\"];\n    const configLevel = this.configuration.logLevel || \"info\";\n\n    if (logLevels.indexOf(level) >= logLevels.indexOf(configLevel)) {\n      switch (level) {\n        case \"debug\":\n          this.loggingService.debug(\n            `[Sequencing] ${message}${data ? ` - ${JSON.stringify(data)}` : \"\"}`,\n          );\n          break;\n        case \"info\":\n          this.loggingService.info(\n            `[Sequencing] ${message}${data ? ` - ${JSON.stringify(data)}` : \"\"}`,\n          );\n          break;\n        case \"warn\":\n          this.loggingService.warn(\n            `[Sequencing] ${message}${data ? ` - ${JSON.stringify(data)}` : \"\"}`,\n          );\n          break;\n        case \"error\":\n          this.loggingService.error(\n            `[Sequencing] ${message}${data ? ` - ${JSON.stringify(data)}` : \"\"}`,\n          );\n          break;\n      }\n    }\n  }\n}\n","import BaseAPI from \"./BaseAPI\";\nimport { CMI } from \"./cmi/scorm2004/cmi\";\nimport * as Utilities from \"./utilities\";\nimport { StringKeyMap, stringMatches } from \"./utilities\";\nimport { global_constants, scorm2004_constants } from \"./constants/api_constants\";\nimport { scorm2004_errors } from \"./constants/error_codes\";\nimport { CMIObjectivesObject } from \"./cmi/scorm2004/objectives\";\nimport { ADL, ADLDataObject } from \"./cmi/scorm2004/adl\";\nimport {\n  CommitObject,\n  ResultObject,\n  ScoreObject,\n  Settings,\n  SequencingStateMetadata,\n} from \"./types/api_types\";\nimport {\n  ActivitySettings,\n  RollupRuleSettings,\n  RollupRulesSettings,\n  SequencingControlsSettings,\n  SequencingRuleSettings,\n  SequencingRulesSettings,\n  SequencingSettings,\n  SequencingEventListeners,\n} from \"./types/sequencing_types\";\nimport { RuleCondition, SequencingRule } from \"./cmi/scorm2004/sequencing/sequencing_rules\";\nimport { RollupCondition, RollupRule } from \"./cmi/scorm2004/sequencing/rollup_rules\";\nimport { scorm2004_regex } from \"./constants/regex\"; // Import functions from extracted modules\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport {\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n} from \"./cmi/scorm2004/interactions\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { CorrectResponses, ResponseType } from \"./constants/response_constants\";\nimport { CMICommentsObject } from \"./cmi/scorm2004/comments\";\nimport ValidLanguages from \"./constants/language_constants\";\nimport { CompletionStatus, SuccessStatus, LogLevelEnum } from \"./constants/enums\";\nimport { Sequencing } from \"./cmi/scorm2004/sequencing/sequencing\";\nimport { Activity } from \"./cmi/scorm2004/sequencing/activity\";\nimport { SequencingService, SequencingConfiguration } from \"./services/SequencingService\";\n\n/**\n * API class for SCORM 2004\n */\nclass Scorm2004API extends BaseAPI {\n  private _version: string = \"1.0\";\n  private _globalObjectives: CMIObjectivesObject[] = [];\n  private readonly _sequencing: Sequencing;\n  private _sequencingService: SequencingService | null = null;\n  private _extractedScoItemIds: string[] = [];\n\n  /**\n   * Constructor for SCORM 2004 API\n   * @param {Settings} settings\n   */\n  constructor(settings?: Settings) {\n    if (settings) {\n      if (settings.mastery_override === undefined) {\n        settings.mastery_override = false;\n      }\n    }\n\n    super(scorm2004_errors, settings);\n\n    this.cmi = new CMI();\n    this.adl = new ADL();\n    this._sequencing = new Sequencing();\n\n    // Connect the sequencing object to the ADL's sequencing property\n    // The Sequencing object is used for both configuration and runtime navigation processing\n    // It needs to be attached to the ADL object for runtime navigation requests (adl.nav.request)\n    this.adl.sequencing = this._sequencing;\n\n    // Configure sequencing if settings are provided\n    if (settings?.sequencing) {\n      this.configureSequencing(settings.sequencing);\n    }\n\n    // Initialize sequencing service\n    this.initializeSequencingService(settings);\n\n    // Rename functions to match 2004 Spec and expose to modules\n    this.Initialize = this.lmsInitialize;\n    this.Terminate = this.lmsFinish;\n    this.GetValue = this.lmsGetValue;\n    this.SetValue = this.lmsSetValue;\n    this.Commit = this.lmsCommit;\n    this.GetLastError = this.lmsGetLastError;\n    this.GetErrorString = this.lmsGetErrorString;\n    this.GetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  public cmi: CMI;\n  public adl: ADL;\n\n  public Initialize: () => string;\n  public Terminate: () => string;\n  public GetValue: (CMIElement: string) => string;\n  public SetValue: (CMIElement: string, value: any) => string;\n  public Commit: () => string;\n  public GetLastError: () => string;\n  public GetErrorString: (CMIErrorCode: string | number) => string;\n  public GetDiagnostic: (CMIErrorCode: string | number) => string;\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset(settings?: Settings) {\n    this.commonReset(settings);\n\n    this.cmi?.reset();\n    this.adl?.reset();\n    this._sequencing?.reset();\n  }\n\n  /**\n   * Getter for _version\n   * @return {string}\n   */\n  get version(): string {\n    return this._version;\n  }\n\n  /**\n   * Getter for _globalObjectives\n   */\n  get globalObjectives(): CMIObjectivesObject[] {\n    return this._globalObjectives;\n  }\n\n  /**\n   * Initialize function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize(): string {\n    this.cmi.initialize();\n    const result = this.initialize(\n      \"Initialize\",\n      \"LMS was already initialized!\",\n      \"LMS is already finished!\",\n    );\n\n    // Initialize sequencing service after successful API initialization\n    if (result === global_constants.SCORM_TRUE && this._sequencingService) {\n      this._sequencingService.initialize();\n    }\n\n    // Auto-load sequencing state after successful initialization if configured\n    if (result === global_constants.SCORM_TRUE && this.settings.sequencingStatePersistence) {\n      this.loadSequencingState().catch(() => {\n        this.apiLog(\"lmsInitialize\", \"Failed to auto-load sequencing state\", LogLevelEnum.WARN);\n      });\n    }\n\n    return result;\n  }\n\n  /**\n   * Terminate function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish(): string {\n    (async () => {\n      await this.internalFinish();\n    })();\n    return global_constants.SCORM_TRUE;\n  }\n\n  async internalFinish(): Promise<string> {\n    // Terminate sequencing service first (before normal termination)\n    if (this._sequencingService) {\n      this._sequencingService.terminate();\n    }\n\n    const result = await this.terminate(\"Terminate\", true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      // Handle navigation requests - first try sequencing service, then fall back to legacy\n      let navigationHandled = false;\n\n      if (this._sequencingService && this.adl.nav.request !== \"_none_\") {\n        try {\n          // Extract target for choice/jump requests\n          let target = \"\";\n          let request = this.adl.nav.request;\n          const choiceJumpRegex = new RegExp(scorm2004_regex.NAVEvent);\n          const matches = request.match(choiceJumpRegex);\n          if (matches) {\n            if (matches.groups?.choice_target) {\n              target = matches.groups?.choice_target;\n              request = \"choice\";\n            } else if (matches.groups?.jump_target) {\n              target = matches.groups?.jump_target;\n              request = \"jump\";\n            }\n          }\n\n          // Process navigation request through sequencing service\n          navigationHandled = this._sequencingService.processNavigationRequest(request, target);\n        } catch (error) {\n          // Fall back to legacy navigation handling if sequencing fails\n          navigationHandled = false;\n        }\n      }\n\n      // Legacy navigation handling (fallback)\n      if (!navigationHandled) {\n        if (this.adl.nav.request !== \"_none_\") {\n          const navActions: { [key: string]: string } = {\n            continue: \"SequenceNext\",\n            previous: \"SequencePrevious\",\n            choice: \"SequenceChoice\",\n            jump: \"SequenceJump\",\n            exit: \"SequenceExit\",\n            exitAll: \"SequenceExitAll\",\n            abandon: \"SequenceAbandon\",\n            abandonAll: \"SequenceAbandonAll\",\n          };\n\n          let request = this.adl.nav.request;\n          const choiceJumpRegex = new RegExp(scorm2004_regex.NAVEvent);\n          const matches = request.match(choiceJumpRegex);\n          let target = \"\";\n          if (matches) {\n            if (matches.groups?.choice_target) {\n              target = matches.groups?.choice_target;\n              request = \"choice\";\n            } else if (matches.groups?.jump_target) {\n              target = matches.groups?.jump_target;\n              request = \"jump\";\n            }\n          }\n          const action = navActions[request];\n          if (action) {\n            this.processListeners(action, \"adl.nav.request\", target);\n          }\n        } else if (this.settings.autoProgress) {\n          this.processListeners(\"SequenceNext\", undefined, \"next\");\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * GetValue function from SCORM 2004 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement: string): string {\n    const adlNavRequestRegex =\n      \"^adl\\\\.nav\\\\.request_valid\\\\.(choice|jump)\\\\.{target=\\\\S{0,}([a-zA-Z0-9-_]+)}$\";\n    if (stringMatches(CMIElement, adlNavRequestRegex)) {\n      const matches = CMIElement.match(adlNavRequestRegex);\n      if (matches) {\n        const request = matches[1];\n        const target = matches[2]?.replace(/{target=/g, \"\").replace(/}/g, \"\") || \"\";\n        if (request === \"choice\" || request === \"jump\") {\n          if (this.settings.scoItemIdValidator) {\n            return String(this.settings.scoItemIdValidator(target));\n          }\n          // If we have extracted IDs from sequencing, use those exclusively\n          if (this._extractedScoItemIds.length > 0) {\n            return String(this._extractedScoItemIds.includes(target));\n          }\n          // Otherwise use the scoItemIds from settings\n          return String(this.settings?.scoItemIds?.includes(target));\n        }\n      }\n    }\n    return this.getValue(\"GetValue\", true, CMIElement);\n  }\n\n  /**\n   * SetValue function from SCORM 2004 Spec\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement: string, value: any): string {\n    // Get old value for change detection with error handling\n    let oldValue: any = null;\n    try {\n      oldValue = this.getCMIValue(CMIElement);\n    } catch (error) {\n      // If getting the old value fails, proceed without change detection\n      // This prevents errors during normal operation when CMI elements don't exist yet\n      oldValue = null;\n    }\n\n    // Proceed with regular setting for non-objective elements or fallback behavior\n    const result = this.setValue(\"SetValue\", \"Commit\", true, CMIElement, value);\n\n    // If successful and sequencing service is available, trigger rollup on critical CMI changes\n    if (result === global_constants.SCORM_TRUE && this._sequencingService) {\n      try {\n        this._sequencingService.triggerRollupOnCMIChange(CMIElement, oldValue, value);\n      } catch (rollupError) {\n        // Log rollup error but don't fail the SetValue operation\n        console.warn(`Sequencing rollup failed for ${CMIElement}: ${rollupError}`);\n      }\n    }\n\n    // Auto-save sequencing state on critical CMI changes if configured\n    if (\n      result === global_constants.SCORM_TRUE &&\n      this.settings.sequencingStatePersistence?.autoSaveOn === \"setValue\"\n    ) {\n      const sequencingElements = [\n        \"cmi.completion_status\",\n        \"cmi.success_status\",\n        \"cmi.score.scaled\",\n        \"cmi.objectives\",\n        \"adl.nav.request\",\n      ];\n\n      if (sequencingElements.some((element) => CMIElement.startsWith(element))) {\n        this.saveSequencingState().catch(() => {\n          this.apiLog(\"lmsSetValue\", \"Failed to auto-save sequencing state\", LogLevelEnum.WARN);\n        });\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Commit function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit(): string {\n    if (this.settings.asyncCommit) {\n      this.scheduleCommit(500, \"Commit\");\n    } else {\n      (async () => {\n        const result = await this.commit(\"Commit\", false);\n\n        // Auto-save sequencing state after successful commit if configured\n        if (\n          result === global_constants.SCORM_TRUE &&\n          this.settings.sequencingStatePersistence?.autoSaveOn === \"commit\"\n        ) {\n          await this.saveSequencingState().catch(() => {\n            this.apiLog(\"lmsCommit\", \"Failed to auto-save sequencing state\", LogLevelEnum.WARN);\n          });\n        }\n      })();\n    }\n    return global_constants.SCORM_TRUE;\n  }\n\n  /**\n   * GetLastError function from SCORM 2004 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError(): string {\n    return this.getLastError(\"GetLastError\");\n  }\n\n  /**\n   * GetErrorString function from SCORM 2004 Spec\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode: string | number): string {\n    return this.getErrorString(\"GetErrorString\", CMIErrorCode);\n  }\n\n  /**\n   * GetDiagnostic function from SCORM 2004 Spec\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode: string | number): string {\n    return this.getDiagnostic(\"GetDiagnostic\", CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object - delegates to CMIValueHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  override setCMIValue(CMIElement: string, value: any): string {\n    // Check if we're updating a global or local objective\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      const parts = CMIElement.split(\".\");\n      const index = Number(parts[2]);\n      const element_base = `cmi.objectives.${index}`;\n\n      let objective_id;\n      const setting_id = stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\\\\.id\");\n\n      if (setting_id) {\n        // If we're setting the objective ID, capture it directly\n        objective_id = value;\n      } else {\n        // Find existing objective ID if available\n        const objective = this.cmi.objectives.findObjectiveByIndex(index);\n        objective_id = objective ? objective.id : undefined;\n      }\n\n      // Check if the objective ID matches a global objective\n      const is_global = objective_id && this.settings.globalObjectiveIds?.includes(objective_id);\n\n      if (is_global) {\n        // Locate or create an entry in _globalObjectives for the global objective\n        let global_index = this._globalObjectives.findIndex((obj) => obj.id === objective_id);\n\n        if (global_index === -1) {\n          global_index = this._globalObjectives.length;\n          const newGlobalObjective = new CMIObjectivesObject();\n          newGlobalObjective.id = objective_id;\n          this._globalObjectives.push(newGlobalObjective);\n        }\n\n        // Update the global objective\n        const global_element = CMIElement.replace(\n          element_base,\n          `_globalObjectives.${global_index}`,\n        );\n        this._commonSetCMIValue(\"SetGlobalObjectiveValue\", true, global_element, value);\n      }\n    }\n    return this._commonSetCMIValue(\"SetValue\", true, CMIElement, value);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array - delegates to CMIElementHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI|null}\n   */\n  getChildElement(CMIElement: string, value: any, foundFirstIndex: boolean): BaseCMI | null {\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      return new CMIObjectivesObject();\n    }\n\n    if (foundFirstIndex) {\n      if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+\")) {\n        return this.createCorrectResponsesObject(CMIElement, value);\n      } else if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+\")) {\n        return new CMIInteractionsObjectivesObject();\n      }\n    } else if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\")) {\n      return new CMIInteractionsObject();\n    }\n\n    if (stringMatches(CMIElement, \"cmi\\\\.comments_from_learner\\\\.\\\\d+\")) {\n      return new CMICommentsObject();\n    } else if (stringMatches(CMIElement, \"cmi\\\\.comments_from_lms\\\\.\\\\d+\")) {\n      return new CMICommentsObject(true);\n    }\n\n    if (stringMatches(CMIElement, \"adl\\\\.data\\\\.\\\\d+\")) {\n      return new ADLDataObject();\n    }\n\n    return null;\n  }\n\n  /**\n   * Creates a correct responses object for an interaction - delegates to CMIElementHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {BaseCMI|null}\n   */\n  private createCorrectResponsesObject(CMIElement: string, value: any): BaseCMI | null {\n    const parts = CMIElement.split(\".\");\n    const index = Number(parts[2]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    if (this.isInitialized()) {\n      if (typeof interaction === \"undefined\" || !interaction.type) {\n        this.throwSCORMError(CMIElement, scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED, CMIElement);\n        return null;\n      } else {\n        this.checkDuplicateChoiceResponse(CMIElement, interaction, value);\n        const response_type = CorrectResponses[interaction.type];\n        if (response_type) {\n          this.checkValidResponseType(CMIElement, response_type, value, interaction.type);\n        } else {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.GENERAL_SET_FAILURE,\n            `Incorrect Response Type: ${interaction.type}`,\n          );\n          return null;\n        }\n      }\n    }\n\n    if (this.lastErrorCode === \"0\") {\n      return new CMIInteractionsCorrectResponsesObject(interaction);\n    }\n\n    return null;\n  }\n\n  /**\n   * Checks for valid response types - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {ResponseType} response_type\n   * @param {any} value\n   * @param {string} interaction_type\n   */\n  checkValidResponseType(\n    CMIElement: string,\n    response_type: ResponseType,\n    value: any,\n    interaction_type: string,\n  ) {\n    let nodes = [];\n    if (response_type?.delimiter) {\n      nodes = String(value).split(response_type.delimiter);\n    } else {\n      nodes[0] = value;\n    }\n\n    if (nodes.length > 0 && nodes.length <= response_type.max) {\n      this.checkCorrectResponseValue(CMIElement, interaction_type, nodes, value);\n    } else if (nodes.length > response_type.max) {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.GENERAL_SET_FAILURE,\n        `Data Model Element Pattern Too Long: ${value}`,\n      );\n    }\n  }\n\n  /**\n   * Checks for duplicate 'choice' responses - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {CMIInteractionsObject} interaction\n   * @param {any} value\n   */\n  checkDuplicateChoiceResponse(CMIElement: string, interaction: CMIInteractionsObject, value: any) {\n    const interaction_count = interaction.correct_responses._count;\n    if (interaction.type === \"choice\") {\n      for (let i = 0; i < interaction_count && this.lastErrorCode === \"0\"; i++) {\n        const response = interaction.correct_responses.childArray[i];\n        if (response.pattern === value) {\n          this.throwSCORMError(CMIElement, scorm2004_errors.GENERAL_SET_FAILURE, `${value}`);\n        }\n      }\n    }\n  }\n\n  /**\n   * Validate correct response - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {*} value\n   */\n  validateCorrectResponse(CMIElement: string, value: any) {\n    const parts = CMIElement.split(\".\");\n    const index = Number(parts[2]);\n    const pattern_index = Number(parts[4]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    const interaction_count = interaction.correct_responses._count;\n    this.checkDuplicateChoiceResponse(CMIElement, interaction, value);\n\n    const response_type = CorrectResponses[interaction.type];\n    if (\n      response_type &&\n      (typeof response_type.limit === \"undefined\" || interaction_count <= response_type.limit)\n    ) {\n      this.checkValidResponseType(CMIElement, response_type, value, interaction.type);\n\n      if (\n        (this.lastErrorCode === \"0\" &&\n          (!response_type.duplicate ||\n            !this.checkDuplicatedPattern(interaction.correct_responses, pattern_index, value))) ||\n        (this.lastErrorCode === \"0\" && value === \"\")\n      ) {\n        // do nothing, we want the inverse\n      } else {\n        if (this.lastErrorCode === \"0\") {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.GENERAL_SET_FAILURE,\n            `Data Model Element Pattern Already Exists: ${CMIElement} - ${value}`,\n          );\n        }\n      }\n    } else {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.GENERAL_SET_FAILURE,\n        `Data Model Element Collection Limit Reached: ${CMIElement} - ${value}`,\n      );\n    }\n  }\n\n  /**\n   * Gets a value from the CMI Object - delegates to CMIValueHandlerModule\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  override getCMIValue(CMIElement: string): any {\n    return this._commonGetCMIValue(\"GetValue\", true, CMIElement);\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {(string|number)} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  override getLmsErrorMessageDetails(errorNumber: string | number, detail: boolean): string {\n    let basicMessage = \"\";\n    let detailMessage = \"\";\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    const errorDescription = scorm2004_constants.error_descriptions[errorNumber];\n    if (errorDescription) {\n      basicMessage = errorDescription.basicMessage;\n      detailMessage = errorDescription.detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Check to see if a correct_response value has been duplicated - delegates to ValidationModule\n   * @param {CMIArray} correct_response\n   * @param {number} current_index\n   * @param {*} value\n   * @return {boolean}\n   */\n  checkDuplicatedPattern(correct_response: CMIArray, current_index: number, value: any): boolean {\n    let found = false;\n    const count = correct_response._count;\n    for (let i = 0; i < count && !found; i++) {\n      if (i !== current_index && correct_response.childArray[i] === value) {\n        found = true;\n      }\n    }\n    return found;\n  }\n\n  /**\n   * Checks for a valid correct_response value - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {string} interaction_type\n   * @param {Array} nodes\n   * @param {*} value\n   */\n  checkCorrectResponseValue(\n    CMIElement: string,\n    interaction_type: string,\n    nodes: Array<any>,\n    value: any,\n  ) {\n    const response = CorrectResponses[interaction_type];\n    if (!response) {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.TYPE_MISMATCH,\n        `Incorrect Response Type: ${interaction_type}`,\n      );\n      return;\n    }\n    const formatRegex = new RegExp(response.format);\n    for (let i = 0; i < nodes.length && this.lastErrorCode === \"0\"; i++) {\n      if (interaction_type.match(\"^(fill-in|long-fill-in|matching|performance|sequencing)$\")) {\n        nodes[i] = this.removeCorrectResponsePrefixes(CMIElement, nodes[i]);\n      }\n\n      if (response?.delimiter2) {\n        const values = nodes[i].split(response.delimiter2);\n        if (values.length === 2) {\n          const matches = values[0].match(formatRegex);\n          if (!matches) {\n            this.throwSCORMError(\n              CMIElement,\n              scorm2004_errors.TYPE_MISMATCH,\n              `${interaction_type}: ${value}`,\n            );\n          } else {\n            if (!response.format2 || !values[1].match(new RegExp(response.format2))) {\n              this.throwSCORMError(\n                CMIElement,\n                scorm2004_errors.TYPE_MISMATCH,\n                `${interaction_type}: ${value}`,\n              );\n            }\n          }\n        } else {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.TYPE_MISMATCH,\n            `${interaction_type}: ${value}`,\n          );\n        }\n      } else {\n        const matches = nodes[i].match(formatRegex);\n        if ((!matches && value !== \"\") || (!matches && interaction_type === \"true-false\")) {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.TYPE_MISMATCH,\n            `${interaction_type}: ${value}`,\n          );\n        } else {\n          if (interaction_type === \"numeric\" && nodes.length > 1) {\n            if (Number(nodes[0]) > Number(nodes[1])) {\n              this.throwSCORMError(\n                CMIElement,\n                scorm2004_errors.TYPE_MISMATCH,\n                `${interaction_type}: ${value}`,\n              );\n            }\n          } else {\n            if (nodes[i] !== \"\" && response.unique) {\n              for (let j = 0; j < i && this.lastErrorCode === \"0\"; j++) {\n                if (nodes[i] === nodes[j]) {\n                  this.throwSCORMError(\n                    CMIElement,\n                    scorm2004_errors.TYPE_MISMATCH,\n                    `${interaction_type}: ${value}`,\n                  );\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove prefixes from correct_response - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {string} node\n   * @return {*}\n   */\n  removeCorrectResponsePrefixes(CMIElement: string, node: string): any {\n    let seenOrder = false;\n    let seenCase = false;\n    let seenLang = false;\n\n    const prefixRegex = new RegExp(\"^({(lang|case_matters|order_matters)=([^}]+)})\");\n    let matches = node.match(prefixRegex);\n    let langMatches = null;\n    while (matches) {\n      switch (matches[2]) {\n        case \"lang\":\n          langMatches = node.match(scorm2004_regex.CMILangcr);\n          if (langMatches) {\n            const lang = langMatches[3];\n            if (lang !== undefined && lang.length > 0) {\n              if (!ValidLanguages.includes(lang.toLowerCase())) {\n                this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n              }\n            }\n          }\n          seenLang = true;\n          break;\n        case \"case_matters\":\n          if (!seenLang && !seenOrder && !seenCase) {\n            if (matches[3] !== \"true\" && matches[3] !== \"false\") {\n              this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n            }\n          }\n\n          seenCase = true;\n          break;\n        case \"order_matters\":\n          if (!seenCase && !seenLang && !seenOrder) {\n            if (matches[3] !== \"true\" && matches[3] !== \"false\") {\n              this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n            }\n          }\n\n          seenOrder = true;\n          break;\n      }\n      node = node.substring(matches[1]?.length || 0);\n      matches = node.match(prefixRegex);\n    }\n\n    return node;\n  }\n\n  /**\n   * Replace the whole API with another\n   * @param {Scorm2004API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI: Scorm2004API) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.adl = newAPI.adl;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit - delegates to DataSerializationModule\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} includeTotalTime - Whether to include total time in the commit data\n   * @return {object|Array}\n   */\n  renderCommitCMI(\n    terminateCommit: boolean,\n    includeTotalTime: boolean = false,\n  ): StringKeyMap | Array<any> {\n    const cmiExport: StringKeyMap = this.renderCMIToJSONObject();\n\n    if (terminateCommit || includeTotalTime) {\n      (cmiExport.cmi as any).total_time = (this.cmi as any).getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened: StringKeyMap = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case \"flattened\":\n        return Utilities.flatten(cmiExport);\n      case \"params\":\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case \"json\":\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit - delegates to DataSerializationModule\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} includeTotalTime - Whether to include total time in the commit data\n   * @return {CommitObject}\n   */\n  renderCommitObject(terminateCommit: boolean, includeTotalTime: boolean = false): CommitObject {\n    const cmiExport = this.renderCommitCMI(terminateCommit, includeTotalTime);\n    const calculateTotalTime = terminateCommit || includeTotalTime;\n    const totalTimeDuration = calculateTotalTime ? this.cmi.getCurrentTotalTime() : \"\";\n    const totalTimeSeconds = Utilities.getDurationAsSeconds(\n      totalTimeDuration,\n      scorm2004_regex.CMITimespan,\n    );\n\n    let completionStatus = CompletionStatus.UNKNOWN;\n    let successStatus = SuccessStatus.UNKNOWN;\n    if (this.cmi.completion_status) {\n      if (this.cmi.completion_status === \"completed\") {\n        completionStatus = CompletionStatus.COMPLETED;\n      } else if (this.cmi.completion_status === \"incomplete\") {\n        completionStatus = CompletionStatus.INCOMPLETE;\n      }\n    }\n    if (this.cmi.success_status) {\n      if (this.cmi.success_status === \"passed\") {\n        successStatus = SuccessStatus.PASSED;\n      } else if (this.cmi.success_status === \"failed\") {\n        successStatus = SuccessStatus.FAILED;\n      }\n    }\n\n    const scoreObject: ScoreObject = this.cmi?.score?.getScoreObject() || {};\n    const commitObject: CommitObject = {\n      completionStatus: completionStatus,\n      successStatus: successStatus,\n      totalTimeSeconds: totalTimeSeconds,\n      runtimeData: cmiExport as StringKeyMap,\n    };\n    if (scoreObject) {\n      commitObject.score = scoreObject;\n    }\n    return commitObject;\n  }\n\n  /**\n   * Attempts to store the data to the LMS - delegates to DataSerializationModule\n   *\n   * @param {boolean} terminateCommit\n   * @return {ResultObject}\n   */\n  async storeData(terminateCommit: boolean): Promise<ResultObject> {\n    if (terminateCommit) {\n      if (this.cmi.mode === \"normal\") {\n        if (this.cmi.credit === \"credit\") {\n          if (this.cmi.completion_threshold && this.cmi.progress_measure) {\n            if (this.cmi.progress_measure >= this.cmi.completion_threshold) {\n              this.cmi.completion_status = \"completed\";\n            } else {\n              this.cmi.completion_status = \"incomplete\";\n            }\n          }\n          if (this.cmi.scaled_passing_score && this.cmi.score.scaled) {\n            if (this.cmi.score.scaled >= this.cmi.scaled_passing_score) {\n              this.cmi.success_status = \"passed\";\n            } else {\n              this.cmi.success_status = \"failed\";\n            }\n          }\n        }\n      }\n    }\n\n    let navRequest = false;\n    if (\n      this.adl.nav.request !==\n        ((this.startingData?.adl as StringKeyMap)?.nav as StringKeyMap)?.request &&\n      this.adl.nav.request !== \"_none_\"\n    ) {\n      navRequest = true;\n    }\n\n    const commitObject = this.getCommitObject(terminateCommit);\n    if (typeof this.settings.lmsCommitUrl === \"string\") {\n      const result = await this.processHttpRequest(\n        this.settings.lmsCommitUrl,\n        commitObject,\n        terminateCommit,\n      );\n\n      // Check if this is a sequencing call, and then call the necessary JS\n      if (\n        navRequest &&\n        result.navRequest !== undefined &&\n        result.navRequest !== \"\" &&\n        typeof result.navRequest === \"string\"\n      ) {\n        Function(`\"use strict\";(() => { ${result.navRequest} })()`)();\n      } else if (result?.navRequest && !navRequest) {\n        if (\n          typeof result.navRequest === \"object\" &&\n          Object.hasOwnProperty.call(result.navRequest, \"name\")\n        ) {\n          this.processListeners(result.navRequest.name as string, result.navRequest.data as string);\n        }\n      }\n\n      return result;\n    }\n\n    return {\n      result: global_constants.SCORM_TRUE,\n      errorCode: 0,\n    };\n  }\n\n  /**\n   * Configure sequencing based on provided settings\n   * @param {SequencingSettings} sequencingSettings - The sequencing settings\n   */\n  private configureSequencing(sequencingSettings: SequencingSettings): void {\n    // Configure activity tree\n    if (sequencingSettings.activityTree) {\n      this.configureActivityTree(sequencingSettings.activityTree);\n    }\n\n    // Configure sequencing rules\n    if (sequencingSettings.sequencingRules) {\n      this.configureSequencingRules(sequencingSettings.sequencingRules);\n    }\n\n    // Configure sequencing controls\n    if (sequencingSettings.sequencingControls) {\n      this.configureSequencingControls(sequencingSettings.sequencingControls);\n    }\n\n    // Configure rollup rules\n    if (sequencingSettings.rollupRules) {\n      this.configureRollupRules(sequencingSettings.rollupRules);\n    }\n  }\n\n  /**\n   * Configure activity tree based on provided settings\n   * @param {ActivitySettings} activityTreeSettings - The activity tree settings\n   */\n  private configureActivityTree(activityTreeSettings: ActivitySettings): void {\n    // Create root activity\n    const rootActivity = this.createActivity(activityTreeSettings);\n\n    // Create activity tree\n    const activityTree = this._sequencing.activityTree;\n    activityTree.root = rootActivity;\n\n    // Extract activity IDs for use as scoItemIds\n    this._extractedScoItemIds = this.extractActivityIds(rootActivity);\n  }\n\n  /**\n   * Extract all activity IDs from an activity and its children\n   * @param {Activity} activity - The activity to extract IDs from\n   * @return {string[]} - Array of activity IDs\n   */\n  private extractActivityIds(activity: Activity): string[] {\n    const ids = [activity.id];\n\n    // Recursively extract IDs from children\n    for (const child of activity.children) {\n      ids.push(...this.extractActivityIds(child));\n    }\n\n    return ids;\n  }\n\n  /**\n   * Create an activity from settings\n   * @param {ActivitySettings} activitySettings - The activity settings\n   * @return {Activity} - The created activity\n   */\n  private createActivity(activitySettings: ActivitySettings): Activity {\n    // Create activity\n    const activity = new Activity(activitySettings.id, activitySettings.title);\n\n    // Set activity properties\n    if (activitySettings.isVisible !== undefined) {\n      activity.isVisible = activitySettings.isVisible;\n    }\n    if (activitySettings.isActive !== undefined) {\n      activity.isActive = activitySettings.isActive;\n    }\n    if (activitySettings.isSuspended !== undefined) {\n      activity.isSuspended = activitySettings.isSuspended;\n    }\n    if (activitySettings.isCompleted !== undefined) {\n      activity.isCompleted = activitySettings.isCompleted;\n    }\n\n    // Create child activities\n    if (activitySettings.children) {\n      for (const childSettings of activitySettings.children) {\n        const childActivity = this.createActivity(childSettings);\n        activity.addChild(childActivity);\n      }\n    }\n    // Apply per-activity sequencing settings if provided\n    if (activitySettings.sequencingControls) {\n      const sc = activity.sequencingControls;\n      const c = activitySettings.sequencingControls;\n      if (c.enabled !== undefined) sc.enabled = c.enabled;\n      if (c.choiceExit !== undefined) sc.choiceExit = c.choiceExit;\n      if (c.flow !== undefined) sc.flow = c.flow;\n      if (c.forwardOnly !== undefined) sc.forwardOnly = c.forwardOnly;\n      if (c.useCurrentAttemptObjectiveInfo !== undefined)\n        sc.useCurrentAttemptObjectiveInfo = c.useCurrentAttemptObjectiveInfo;\n      if (c.useCurrentAttemptProgressInfo !== undefined)\n        sc.useCurrentAttemptProgressInfo = c.useCurrentAttemptProgressInfo;\n      if (c.preventActivation !== undefined) sc.preventActivation = c.preventActivation;\n      if (c.constrainChoice !== undefined) sc.constrainChoice = c.constrainChoice;\n      if (c.rollupObjectiveSatisfied !== undefined)\n        sc.rollupObjectiveSatisfied = c.rollupObjectiveSatisfied;\n      if (c.rollupProgressCompletion !== undefined)\n        sc.rollupProgressCompletion = c.rollupProgressCompletion;\n      if (c.objectiveMeasureWeight !== undefined)\n        sc.objectiveMeasureWeight = c.objectiveMeasureWeight;\n    }\n\n    if (activitySettings.sequencingRules) {\n      const rs = activitySettings.sequencingRules;\n      if (rs.preConditionRules) {\n        for (const ruleSettings of rs.preConditionRules) {\n          const rule = this.createSequencingRule(ruleSettings);\n          activity.sequencingRules.addPreConditionRule(rule);\n        }\n      }\n      if (rs.exitConditionRules) {\n        for (const ruleSettings of rs.exitConditionRules) {\n          const rule = this.createSequencingRule(ruleSettings);\n          activity.sequencingRules.addExitConditionRule(rule);\n        }\n      }\n      if (rs.postConditionRules) {\n        for (const ruleSettings of rs.postConditionRules) {\n          const rule = this.createSequencingRule(ruleSettings);\n          activity.sequencingRules.addPostConditionRule(rule);\n        }\n      }\n    }\n\n    if (activitySettings.rollupRules && activitySettings.rollupRules.rules) {\n      for (const ruleSettings of activitySettings.rollupRules.rules) {\n        const rule = this.createRollupRule(ruleSettings);\n        activity.rollupRules.addRule(rule);\n      }\n    }\n\n    return activity;\n  }\n\n  /**\n   * Configure sequencing rules based on provided settings\n   * @param {SequencingRulesSettings} sequencingRulesSettings - The sequencing rules settings\n   */\n  private configureSequencingRules(sequencingRulesSettings: SequencingRulesSettings): void {\n    const sequencingRules = this._sequencing.sequencingRules;\n\n    // Configure pre-condition rules\n    if (sequencingRulesSettings.preConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.preConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addPreConditionRule(rule);\n      }\n    }\n\n    // Configure exit condition rules\n    if (sequencingRulesSettings.exitConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.exitConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addExitConditionRule(rule);\n      }\n    }\n\n    // Configure post-condition rules\n    if (sequencingRulesSettings.postConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.postConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addPostConditionRule(rule);\n      }\n    }\n  }\n\n  /**\n   * Create a sequencing rule from settings\n   * @param {SequencingRuleSettings} ruleSettings - The sequencing rule settings\n   * @return {SequencingRule} - The created sequencing rule\n   */\n  private createSequencingRule(ruleSettings: SequencingRuleSettings): SequencingRule {\n    // Create rule\n    const rule = new SequencingRule(ruleSettings.action, ruleSettings.conditionCombination);\n\n    // Add conditions\n    for (const conditionSettings of ruleSettings.conditions) {\n      const condition = new RuleCondition(\n        conditionSettings.condition,\n        conditionSettings.operator,\n        new Map(Object.entries(conditionSettings.parameters || {})),\n      );\n      rule.addCondition(condition);\n    }\n\n    return rule;\n  }\n\n  /**\n   * Configure sequencing controls based on provided settings\n   * @param {SequencingControlsSettings} sequencingControlsSettings - The sequencing controls settings\n   */\n  private configureSequencingControls(\n    sequencingControlsSettings: SequencingControlsSettings,\n  ): void {\n    const sequencingControls = this._sequencing.sequencingControls;\n\n    // Set sequencing control properties\n    if (sequencingControlsSettings.enabled !== undefined) {\n      sequencingControls.enabled = sequencingControlsSettings.enabled;\n    }\n    if (sequencingControlsSettings.choiceExit !== undefined) {\n      sequencingControls.choiceExit = sequencingControlsSettings.choiceExit;\n    }\n    if (sequencingControlsSettings.flow !== undefined) {\n      sequencingControls.flow = sequencingControlsSettings.flow;\n    }\n    if (sequencingControlsSettings.forwardOnly !== undefined) {\n      sequencingControls.forwardOnly = sequencingControlsSettings.forwardOnly;\n    }\n    if (sequencingControlsSettings.useCurrentAttemptObjectiveInfo !== undefined) {\n      sequencingControls.useCurrentAttemptObjectiveInfo =\n        sequencingControlsSettings.useCurrentAttemptObjectiveInfo;\n    }\n    if (sequencingControlsSettings.useCurrentAttemptProgressInfo !== undefined) {\n      sequencingControls.useCurrentAttemptProgressInfo =\n        sequencingControlsSettings.useCurrentAttemptProgressInfo;\n    }\n    if (sequencingControlsSettings.preventActivation !== undefined) {\n      sequencingControls.preventActivation = sequencingControlsSettings.preventActivation;\n    }\n    if (sequencingControlsSettings.constrainChoice !== undefined) {\n      sequencingControls.constrainChoice = sequencingControlsSettings.constrainChoice;\n    }\n    if (sequencingControlsSettings.rollupObjectiveSatisfied !== undefined) {\n      sequencingControls.rollupObjectiveSatisfied =\n        sequencingControlsSettings.rollupObjectiveSatisfied;\n    }\n    if (sequencingControlsSettings.rollupProgressCompletion !== undefined) {\n      sequencingControls.rollupProgressCompletion =\n        sequencingControlsSettings.rollupProgressCompletion;\n    }\n    if (sequencingControlsSettings.objectiveMeasureWeight !== undefined) {\n      sequencingControls.objectiveMeasureWeight = sequencingControlsSettings.objectiveMeasureWeight;\n    }\n  }\n\n  /**\n   * Configure rollup rules based on provided settings\n   * @param {RollupRulesSettings} rollupRulesSettings - The rollup rules settings\n   */\n  private configureRollupRules(rollupRulesSettings: RollupRulesSettings): void {\n    const rollupRules = this._sequencing.rollupRules;\n\n    // Configure rollup rules\n    if (rollupRulesSettings.rules) {\n      for (const ruleSettings of rollupRulesSettings.rules) {\n        const rule = this.createRollupRule(ruleSettings);\n        rollupRules.addRule(rule);\n      }\n    }\n  }\n\n  /**\n   * Create a rollup rule from settings\n   * @param {RollupRuleSettings} ruleSettings - The rollup rule settings\n   * @return {RollupRule} - The created rollup rule\n   */\n  private createRollupRule(ruleSettings: RollupRuleSettings): RollupRule {\n    // Create rule\n    const rule = new RollupRule(\n      ruleSettings.action,\n      ruleSettings.consideration,\n      ruleSettings.minimumCount,\n      ruleSettings.minimumPercent,\n    );\n\n    // Add conditions\n    for (const conditionSettings of ruleSettings.conditions) {\n      const condition = new RollupCondition(\n        conditionSettings.condition,\n        new Map(Object.entries(conditionSettings.parameters || {})),\n      );\n      rule.addCondition(condition);\n    }\n\n    return rule;\n  }\n\n  /**\n   * Initialize the sequencing service\n   * @param {Settings} settings - API settings that may include sequencing configuration\n   */\n  private initializeSequencingService(settings?: Settings): void {\n    try {\n      // Create sequencing configuration from settings\n      const sequencingConfig: SequencingConfiguration = {\n        autoRollupOnCMIChange: settings?.sequencing?.autoRollupOnCMIChange ?? true,\n        autoProgressOnCompletion: settings?.sequencing?.autoProgressOnCompletion ?? false,\n        validateNavigationRequests: settings?.sequencing?.validateNavigationRequests ?? true,\n        enableEventSystem: settings?.sequencing?.enableEventSystem ?? true,\n        logLevel: settings?.sequencing?.logLevel ?? \"info\",\n      };\n\n      // Create the sequencing service\n      this._sequencingService = new SequencingService(\n        this._sequencing,\n        this.cmi,\n        this.adl,\n        this.eventService || this, // Use eventService if available, fallback to this\n        this.loggingService || (console as any), // Use loggingService if available, fallback to console\n        sequencingConfig,\n      );\n\n      // Set up event listeners if provided in settings\n      if (settings?.sequencing?.eventListeners) {\n        this._sequencingService.setEventListeners(settings.sequencing.eventListeners);\n      }\n    } catch (error) {\n      // If sequencing service initialization fails, log error but continue\n      console.warn(\"Failed to initialize sequencing service:\", error);\n      this._sequencingService = null;\n    }\n  }\n\n  /**\n   * Get the sequencing service (for advanced sequencing operations)\n   * @return {SequencingService | null}\n   */\n  public getSequencingService(): SequencingService | null {\n    return this._sequencingService;\n  }\n\n  /**\n   * Set sequencing event listeners\n   * @param {SequencingEventListeners} listeners - Event listeners for sequencing events\n   */\n  public setSequencingEventListeners(listeners: SequencingEventListeners): void {\n    if (this._sequencingService) {\n      this._sequencingService.setEventListeners(listeners);\n    }\n  }\n\n  /**\n   * Update sequencing configuration\n   * @param {SequencingConfiguration} config - New sequencing configuration\n   */\n  public updateSequencingConfiguration(config: SequencingConfiguration): void {\n    if (this._sequencingService) {\n      this._sequencingService.updateConfiguration(config);\n    }\n  }\n\n  /**\n   * Get current sequencing state information\n   * @return {object} Current sequencing state\n   */\n  public getSequencingState(): any {\n    if (this._sequencingService) {\n      return this._sequencingService.getSequencingState();\n    }\n    return {\n      isInitialized: false,\n      isActive: false,\n      currentActivity: null,\n      rootActivity: this._sequencing.getRootActivity(),\n      lastSequencingResult: null,\n    };\n  }\n\n  /**\n   * Process a navigation request directly (for advanced use)\n   * @param {string} request - Navigation request\n   * @param {string} targetActivityId - Target activity ID for choice/jump requests\n   * @return {boolean} True if request was processed successfully\n   */\n  public processNavigationRequest(request: string, targetActivityId?: string): boolean {\n    if (this._sequencingService) {\n      return this._sequencingService.processNavigationRequest(request, targetActivityId);\n    }\n    return false;\n  }\n\n  /**\n   * Save current sequencing state to persistent storage\n   * @param {Partial<SequencingStateMetadata>} metadata - Optional metadata override\n   * @return {Promise<boolean>} Promise resolving to success status\n   */\n  public async saveSequencingState(metadata?: Partial<SequencingStateMetadata>): Promise<boolean> {\n    if (!this.settings.sequencingStatePersistence) {\n      this.apiLog(\n        \"saveSequencingState\",\n        \"No persistence configuration provided\",\n        LogLevelEnum.WARN,\n      );\n      return false;\n    }\n\n    try {\n      const stateData = this.serializeSequencingState();\n      const fullMetadata: SequencingStateMetadata = {\n        learnerId: this.cmi.learner_id || \"unknown\",\n        courseId: this.settings.courseId || \"unknown\",\n        attemptNumber: 1,\n        lastUpdated: new Date().toISOString(),\n        version: this.settings.sequencingStatePersistence.stateVersion || \"1.0\",\n        ...metadata,\n      };\n\n      const config = this.settings.sequencingStatePersistence;\n      let dataToSave = stateData;\n\n      // Compress if enabled (using simple base64 encoding for now)\n      if (config.compress !== false) {\n        dataToSave = this.compressStateData(stateData);\n      }\n\n      // Check size limits\n      if (config.maxStateSize && dataToSave.length > config.maxStateSize) {\n        throw new Error(`State size ${dataToSave.length} exceeds limit ${config.maxStateSize}`);\n      }\n\n      const success = await config.persistence.saveState(dataToSave, fullMetadata);\n\n      if (config.debugPersistence) {\n        this.apiLog(\n          \"saveSequencingState\",\n          `State save ${success ? \"succeeded\" : \"failed\"}: size=${dataToSave.length}`,\n          success ? LogLevelEnum.INFO : LogLevelEnum.WARN,\n        );\n      }\n\n      return success;\n    } catch (error) {\n      this.apiLog(\n        \"saveSequencingState\",\n        `Error saving sequencing state: ${error instanceof Error ? error.message : String(error)}`,\n        LogLevelEnum.ERROR,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Load sequencing state from persistent storage\n   * @param {Partial<SequencingStateMetadata>} metadata - Optional metadata override\n   * @return {Promise<boolean>} Promise resolving to success status\n   */\n  public async loadSequencingState(metadata?: Partial<SequencingStateMetadata>): Promise<boolean> {\n    if (!this.settings.sequencingStatePersistence) {\n      this.apiLog(\n        \"loadSequencingState\",\n        \"No persistence configuration provided\",\n        LogLevelEnum.WARN,\n      );\n      return false;\n    }\n\n    try {\n      const fullMetadata: SequencingStateMetadata = {\n        learnerId: this.cmi.learner_id || \"unknown\",\n        courseId: this.settings.courseId || \"unknown\",\n        attemptNumber: 1,\n        version: this.settings.sequencingStatePersistence.stateVersion || \"1.0\",\n        ...metadata,\n      };\n\n      const config = this.settings.sequencingStatePersistence;\n      const stateData = await config.persistence.loadState(fullMetadata);\n\n      if (!stateData) {\n        if (config.debugPersistence) {\n          this.apiLog(\n            \"loadSequencingState\",\n            \"No sequencing state found to load\",\n            LogLevelEnum.INFO,\n          );\n        }\n        return false;\n      }\n\n      // Decompress if needed\n      let dataToLoad = stateData;\n      if (config.compress !== false) {\n        dataToLoad = this.decompressStateData(stateData);\n      }\n\n      const success = this.deserializeSequencingState(dataToLoad);\n\n      if (config.debugPersistence) {\n        this.apiLog(\n          \"loadSequencingState\",\n          `State load ${success ? \"succeeded\" : \"failed\"}: size=${stateData.length}`,\n          success ? LogLevelEnum.INFO : LogLevelEnum.WARN,\n        );\n      }\n\n      return success;\n    } catch (error) {\n      this.apiLog(\n        \"loadSequencingState\",\n        `Error loading sequencing state: ${error instanceof Error ? error.message : String(error)}`,\n        LogLevelEnum.ERROR,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Serialize current sequencing state to JSON string\n   * @return {string} Serialized state\n   */\n  private serializeSequencingState(): string {\n    const state: any = {\n      version: this.settings.sequencingStatePersistence?.stateVersion || \"1.0\",\n      timestamp: new Date().toISOString(),\n      sequencing: null,\n      currentActivityId: null,\n      globalObjectives: this._globalObjectives.map((obj) => obj.toJSON()),\n      adlNavState: {\n        request: this.adl.nav.request,\n        request_valid: this.adl.nav.request_valid,\n      },\n      contentDelivered: false,\n    };\n\n    // Get sequencing state from overall sequencing process if available\n    if (this._sequencingService) {\n      const overallProcess = this._sequencingService.getOverallSequencingProcess();\n      if (overallProcess) {\n        // Use the getSequencingState method from overall_sequencing_process\n        const sequencingState = overallProcess.getSequencingState();\n        state.sequencing = sequencingState;\n        state.contentDelivered = overallProcess.hasContentBeenDelivered();\n      }\n\n      // Get current activity\n      const currentActivity = this._sequencing.getCurrentActivity();\n      if (currentActivity) {\n        state.currentActivityId = currentActivity.id;\n      }\n    }\n\n    return JSON.stringify(state);\n  }\n\n  /**\n   * Deserialize sequencing state from JSON string\n   * @param {string} stateData - Serialized state data\n   * @return {boolean} Success status\n   */\n  private deserializeSequencingState(stateData: string): boolean {\n    try {\n      const state = JSON.parse(stateData);\n\n      // Version compatibility check\n      const expectedVersion = this.settings.sequencingStatePersistence?.stateVersion || \"1.0\";\n      if (state.version !== expectedVersion) {\n        this.apiLog(\n          \"deserializeSequencingState\",\n          `State version mismatch: ${state.version} vs expected ${expectedVersion}`,\n          LogLevelEnum.WARN,\n        );\n      }\n\n      // Restore sequencing state\n      if (state.sequencing && this._sequencingService) {\n        const overallProcess = this._sequencingService.getOverallSequencingProcess();\n        if (overallProcess) {\n          overallProcess.restoreSequencingState(state.sequencing);\n\n          // Restore content delivered flag\n          if (state.contentDelivered) {\n            // Mark content as delivered (there's no direct setter, so we'll need to add one)\n            // For now, we'll just log it\n            this.apiLog(\n              \"deserializeSequencingState\",\n              \"Content delivery state restored\",\n              LogLevelEnum.DEBUG,\n            );\n          }\n        }\n      }\n\n      // Restore global objectives\n      if (state.globalObjectives && Array.isArray(state.globalObjectives)) {\n        this._globalObjectives = state.globalObjectives.map((objData: any) => {\n          const obj = new CMIObjectivesObject();\n          // If available, populate from serialized data (method added on CMIObjectivesObject)\n          // Fallback to direct field assignment if fromJSON is unavailable at runtime\n          if ((obj as any).fromJSON) {\n            (obj as any).fromJSON(objData);\n          } else {\n            Object.assign(obj as any, objData);\n          }\n          return obj;\n        });\n      }\n\n      // Restore ADL nav state\n      if (state.adlNavState) {\n        this.adl.nav.request = state.adlNavState.request || \"_none_\";\n        this.adl.nav.request_valid = state.adlNavState.request_valid || {};\n      }\n\n      return true;\n    } catch (error) {\n      this.apiLog(\n        \"deserializeSequencingState\",\n        `Error deserializing sequencing state: ${error instanceof Error ? error.message : String(error)}`,\n        LogLevelEnum.ERROR,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Simple compression using base64 encoding\n   * @param {string} data - Data to compress\n   * @return {string} Compressed data\n   */\n  private compressStateData(data: string): string {\n    // For now, just use base64 encoding\n    // In a real implementation, you might use a library like lz-string\n    if (typeof btoa !== \"undefined\") {\n      return btoa(encodeURIComponent(data));\n    }\n    return data;\n  }\n\n  /**\n   * Simple decompression from base64\n   * @param {string} data - Data to decompress\n   * @return {string} Decompressed data\n   */\n  private decompressStateData(data: string): string {\n    // For now, just use base64 decoding\n    // In a real implementation, you might use a library like lz-string\n    if (typeof atob !== \"undefined\") {\n      try {\n        return decodeURIComponent(atob(data));\n      } catch {\n        return data;\n      }\n    }\n    return data;\n  }\n}\n\nexport default Scorm2004API;\n"],"names":["global_constants","SCORM_TRUE","SCORM_FALSE","STATE_NOT_INITIALIZED","STATE_INITIALIZED","STATE_TERMINATED","scorm12_constants","score_children","comments_children","error_descriptions","basicMessage","detailMessage","scorm2004_constants","cmi_children","objectives_children","correct_responses_children","student_data_children","student_preference_children","interactions_children","adl_data_children","SECONDS_PER_SECOND","SECONDS_PER_MINUTE","SECONDS_PER_HOUR","SECONDS_PER_DAY","designations","D","H","M","S","getSecondsAsISODuration","memoize","seconds","duration","remainder","designationEntries","Object","entries","forEach","_ref","designationsKey","current_seconds","value","Math","floor","countDecimals","Number","toFixed","needsTimeSeparator","indexOf","includes","getDurationAsSeconds","durationRegex","RegExp","match","years","_","days","hours","minutes","exec","result","durationStr","regexStr","toString","validateISO8601Duration","addTwoDurations","first","second","regex","flatten","data","recurse","cur","prop","Array","isArray","item","i","length","keys","filter","p","prototype","hasOwnProperty","call","isEmpty","unflatten","pattern","from","m","num","String","parts","split","formatMessage","functionName","message","CMIElement","baseLength","paddedFunction","padEnd","messageString","CMIElementBaseLength","stringMatches","str","tester","test","fn","keyFn","cache","Map","_len","arguments","args","_key","key","JSON","stringify","has","get","set","NAVBoolean","UNKNOWN","TRUE","FALSE","SuccessStatus","PASSED","FAILED","CompletionStatus","COMPLETED","INCOMPLETE","LogLevelEnum","DEBUG","INFO","WARN","ERROR","NONE","DefaultSettings","autocommit","autocommitSeconds","asyncCommit","sendFullCommit","lmsCommitUrl","dataCommitFormat","commitRequestDataType","autoProgress","logLevel","selfReportSessionTime","alwaysSendTotalTime","renderCommonCommitFields","strict_errors","xhrHeaders","xhrWithCredentials","fetchMode","useBeaconInsteadOfFetch","responseHandler","response","httpResult","json","text","responseText","parse","e","status","errorCode","requestHandler","commitObject","onLogMessage","defaultLogHandler","scoItemIds","scoItemIdValidator","globalObjectiveIds","enableOfflineSupport","courseId","syncOnInitialize","syncOnTerminate","maxSyncAttempts","messageLevel","logMessage","console","error","warn","info","debug","log","ScheduledCommit","constructor","API","when","callback","_cancelled","_API","_timeout","setTimeout","wrapper","bind","_callback","cancel","clearTimeout","isInitialized","commit","HttpService","settings","error_codes","processHttpRequest","url","params","immediate","undefined","apiLog","processListeners","genericError","GENERAL","_handleImmediateRequest","processedParams","performFetch","transformResponse","Error","stack","enhancedError","errorMessage","errorDetails","errorType","name","originalError","body","contentType","_prepareRequestBody","navigator","sendBeacon","Blob","type","then","catch","join","performBeacon","init","method","mode","headers","keepalive","credentials","fetch","beaconSuccess","Promise","resolve","ok","parseError","statusText","substring","_isSuccessResponse","updateSettings","EventService","listenerMap","listenerCount","parseListenerName","listenerName","listenerSplit","replace","on","listenerFunctions","listenerFunction","parsedListener","listeners","push","off","removeIndex","findIndex","obj","splice","delete","clear","newListeners","listener","listenerHasCMIElement","CMIElementsMatch","endsWith","prefix","slice","startsWith","reset","SerializationService","loadFromFlattenedJSON","setCMIValue","isNotInitialized","setStartingData","int_pattern","obj_pattern","interactions","objectives","others","intMatch","index","field","objMatch","sort","a","b","localeCompare","processItems","items","loadFromJSON","currentCMIElement","tempCMIElement","renderCMIToJSONString","cmi","k","v","renderCMIToJSONObject","getCommitObject","terminateCommit","renderCommitObject","renderCommitCMI","apiLogLevel","includeTotalTime","BaseScormValidationError","_errorCode","setPrototypeOf","ValidationError","detailedMessage","_detailedMessage","_errorMessage","LoggingService","_logLevel","_logHandler","getInstance","_instance","setLogLevel","level","getLogLevel","setLogHandler","handler","shouldLog","numericMessageLevel","getNumericLevel","numericLogLevel","getLoggingService","ErrorHandlingService","errorCodes","getLmsErrorMessageDetails","loggingService","_lastErrorCode","_errorCodes","_apiLog","_getLmsErrorMessageDetails","_loggingService","lastErrorCode","throwSCORMError","errorNumber","formattedMessage","clearSCORMError","success","handleValueAccessException","returnValue","validationError","stackTrace","jsonError","createErrorHandlingService","OfflineStorageService","storeName","syncQueue","isOnline","onLine","syncInProgress","window","addEventListener","handleOnlineStatusChange","wasOnline","syncOfflineData","storeOffline","commitData","queueItem","id","Date","now","random","timestamp","syncAttempts","currentQueue","getFromStorage","saveToStorage","getOfflineData","remainingQueue","syncResult","sendDataToLMS","processedData","isDeviceOnline","storedData","localStorage","getItem","setItem","hasPendingOfflineData","queue","some","BaseCMI","cmi_element","jsonString","_initialized","_cmi_element","initialized","initialize","BaseRootCMI","start_time","_start_time","setStartTime","getTime","global_errors","INITIALIZATION_FAILED","INITIALIZED","TERMINATED","TERMINATION_FAILURE","TERMINATION_BEFORE_INIT","MULTIPLE_TERMINATION","RETRIEVE_BEFORE_INIT","RETRIEVE_AFTER_TERM","STORE_BEFORE_INIT","STORE_AFTER_TERM","COMMIT_BEFORE_INIT","COMMIT_AFTER_TERM","ARGUMENT_ERROR","CHILDREN_ERROR","COUNT_ERROR","GENERAL_GET_FAILURE","GENERAL_SET_FAILURE","GENERAL_COMMIT_FAILURE","UNDEFINED_DATA_MODEL","UNIMPLEMENTED_ELEMENT","VALUE_NOT_INITIALIZED","INVALID_SET_VALUE","READ_ONLY_ELEMENT","WRITE_ONLY_ELEMENT","TYPE_MISMATCH","VALUE_OUT_OF_RANGE","DEPENDENCY_NOT_ESTABLISHED","scorm12_errors","scorm2004_errors","MULTIPLE_TERMINATIONS","CMIArray","__children","children","_errorClass","errorClass","childArray","wipe","_children","_count","toJSON","BaseAPI","httpService","eventService","serializationService","cmiDataService","errorHandlingService","offlineStorageService","_settings","_courseId","new","TypeError","currentState","_error_codes","_httpService","_eventService","element","_serializationService","_errorHandlingService","detail","_offlineStorageService","offlineData","runtimeData","commonReset","clearScheduledCommit","startingData","callbackName","initializeMessage","terminationMessage","isTerminated","hasPendingData","syncSuccess","previousSettings","terminate","checkTerminated","checkState","storeData","getValue","getCMIValue","setValue","commitCallback","scheduleCommit","getLastError","getErrorString","CMIErrorCode","getDiagnostic","beforeInitError","afterTermError","_errorNumber","_CMIElement","_value","_commonSetCMIValue","methodName","scorm2004","structure","refObject","foundFirstIndex","invalidErrorMessage","invalidErrorCode","idx","attribute","_checkObjectHasProperty","validateCorrectResponse","parseInt","isNaN","newChild","getChildElement","_commonGetCMIValue","uninitializedErrorMessage","_isTargetValid","target","getFlattenedCMI","Utilities","StringKeyMap","getOwnPropertyDescriptor","getPrototypeOf","Scorm2004ValidationError","checkValidFormat","regexPattern","allowEmptyString","formatRegex","matches","valueKey","checkValidRange","rangePattern","ranges","check2004ValidFormat","check2004ValidRange","scorm12_regex","CMIString256","CMIString4096","CMISInteger","CMIDecimal","CMIIdentifier","score_range","audio_range","speed_range","weighting_range","text_range","scorm2004_regex","CMIString200","CMIString250","CMIString1000","CMIString4000","CMIString64000","CMILang","CMILangString250","CMILangcr","CMILangString250cr","CMILangString4000","CMITime","CMITimespan","CMIInteger","CMIShortIdentifier","CMILongIdentifier","CMIFeedback","CMIIndex","CMIIndexStore","CMICStatus","CMISStatus","CMIExit","CMIType","CMIResult","NAVEvent","NAVTarget","scaled_range","progress_range","CMILearnerPreference","_audio_level","_language","_delivery_speed","_audio_captioning","audio_level","language","delivery_speed","audio_captioning","LearnerResponses","format","max","delimiter","unique","choice","matching","format2","delimiter2","performance","sequencing","likert","numeric","other","CorrectResponses","duplicate","limit","delimiter3","CMIInteractions","CMIInteractionsObject","_id","_type","_timestamp","_weighting","_learner_response","_result","_latency","_description","correct_responses","weighting","learner_response","nodes","response_type","values","j","latency","description","CMIInteractionsObjectivesObject","stripBrackets","delim","escapeRegex","s","splitUnescaped","reDelim","splitRe","unescapeRe","map","part","validatePattern","responseDef","trim","subDelim1","rawNodes","raw","delim1","seen","Set","size","fmt1","fmt2","checkSingle","checkPair","delimBracketed","n","node","numDelim","nums","allParts","part1","part2","CMIInteractionsCorrectResponsesObject","interactionType","_pattern","_interactionType","Scorm12ValidationError","check12ValidFormat","check12ValidRange","ValidationService","validateScore","decimalRegex","scoreRange","invalidTypeCode","invalidRangeCode","validateScorm12Audio","validateScorm12Language","validateScorm12Speed","validateScorm12Text","validateReadOnly","validationService","CMIScore","_raw","_min","__score_range","_max","__invalid_error_code","__invalid_type_code","__invalid_range_code","__decimal_regex","__error_class","min","getScoreObject","scoreObject","parseFloat","Scorm2004CMIScore","_scaled","scaled","CMICommentsFromLMS","CMICommentsFromLearner","CMICommentsObject","readOnlyAfterInit","_comment","_location","_readOnlyAfterInit","comment","location","CMIObjectives","findObjectiveById","find","objective","findObjectiveByIndex","setObjectiveByIndex","CMIObjectivesObject","_success_status","_completion_status","_progress_measure","score","success_status","completion_status","progress_measure","fromJSON","CMIMetadata","__version","_version","CMILearner","_learner_id","_learner_name","learner_id","learner_name","CMIStatus","CMISession","_entry","_exit","_session_time","_total_time","entry","exit","session_time","total_time","getCurrentTotalTime","sessionTime","Util","CMIContent","_launch_data","_suspend_data","launch_data","suspend_data","CMISettings","_credit","_mode","_time_limit_action","_max_time_allowed","credit","time_limit_action","max_time_allowed","CMIThresholds","_scaled_passing_score","_completion_threshold","scaled_passing_score","completion_threshold","CMI","metadata","learner","session","content","thresholds","learner_preference","comments_from_learner","comments_from_lms","ADL","ADLData","_sequencing","nav","ADLNav","adlNav","_request","request_valid","ADLNavRequestValid","request","ADLDataObject","_store","store","_continue","_previous","_choice","_jump","_exitAll","_abandon","_abandonAll","_suspendAll","continue","previous","jump","exitAll","abandon","abandonAll","suspendAll","RuleConditionOperator","RuleActionType","_RuleCondition","condition","operator","parameters","_condition","_operator","_parameters","setNowProvider","_now","evaluate","activity","successStatus","objectiveMeasureStatus","greaterThanValue","objectiveNormalizedMeasure","lessThanValue","isCompleted","completionStatus","attemptCount","attemptLimit","evaluateTimeLimitExceeded","evaluateOutsideAvailableTimeRange","timeLimitDuration","durationMs","parseISO8601Duration","attemptDuration","attemptExperiencedDuration","attemptDurationMs","beginTime","beginTimeLimit","endTime","endTimeLimit","beginDate","endDate","fromEntries","RuleCondition","SequencingRule","action","conditionCombination","_conditions","_action","_conditionCombination","conditions","addCondition","removeCondition","every","SequencingRules","_preConditionRules","_exitConditionRules","_postConditionRules","preConditionRules","addPreConditionRule","rule","exitConditionRules","addExitConditionRule","postConditionRules","addPostConditionRule","evaluatePreConditionRules","evaluateExitConditionRules","evaluatePostConditionRules","RollupActionType","RollupConsiderationType","RollupCondition","RollupRule","consideration","minimumCount","minimumPercent","_consideration","_minimumCount","_minimumPercent","matchingChildren","child","percent","RollupRules","_rules","rules","addRule","removeRule","processRollup","getAvailableChildren","completionRollup","successRollup","sequencingControls","rollupObjectiveSatisfied","measureRollupResult","_objectiveRollupUsingMeasure","_defaultCompletionRollup","_defaultSuccessRollup","allCompleted","anyIncomplete","objectiveMeasureWeight","totalWeight","weightedSum","hasValidMeasures","childWeight","normalizedMeasure","scaledPassingScore","objectiveSatisfiedStatus","allSatisfied","anyNotSatisfied","ValidLanguages","SelectionTiming","RandomizationTiming","SequencingControls","_enabled","_choiceExit","_flow","_forwardOnly","_useCurrentAttemptObjectiveInfo","_useCurrentAttemptProgressInfo","_preventActivation","_constrainChoice","_stopForwardTraversal","_rollupObjectiveSatisfied","_rollupProgressCompletion","_objectiveMeasureWeight","_selectionTiming","_selectCount","_selectionCountStatus","_randomizeChildren","_randomizationTiming","_reorderChildren","enabled","choiceExit","flow","forwardOnly","useCurrentAttemptObjectiveInfo","useCurrentAttemptProgressInfo","preventActivation","constrainChoice","stopForwardTraversal","rollupProgressCompletion","isChoiceNavigationAllowed","isFlowNavigationAllowed","isForwardNavigationAllowed","isBackwardNavigationAllowed","selectionTiming","selectCount","selectionCountStatus","randomizeChildren","randomizationTiming","reorderChildren","Activity","title","_title","_parent","_isVisible","_isActive","_isSuspended","_isCompleted","_completionStatus","_successStatus","_attemptCount","_attemptCompletionAmount","_attemptAbsoluteDuration","_attemptExperiencedDuration","_activityAbsoluteDuration","_activityExperiencedDuration","_objectiveSatisfiedStatus","_objectiveMeasureStatus","_objectiveNormalizedMeasure","_scaledPassingScore","_progressMeasure","_progressMeasureStatus","_attemptAbsoluteStartTime","_learnerPrefs","_activityAttemptActive","_isHiddenFromChoice","_isAvailable","_attemptLimit","_attemptAbsoluteDurationLimit","_activityAbsoluteDurationLimit","_timeLimitAction","_timeLimitDuration","_beginTimeLimit","_endTimeLimit","_processedChildren","_isNewAttempt","_sequencingControls","_sequencingRules","_rollupRules","addChild","removeChild","parent","isVisible","isActive","isSuspended","attemptCompletionAmount","incrementAttemptCount","controls","progressMeasure","progressMeasureStatus","attemptAbsoluteStartTime","learnerPrefs","activityAttemptActive","isHiddenFromChoice","isAvailable","hasAttemptLimitExceeded","timeLimitAction","attemptAbsoluteDurationLimit","activityAbsoluteDurationLimit","activityExperiencedDuration","attemptAbsoluteDuration","activityAbsoluteDuration","sequencingRules","rollupRules","setProcessedChildren","processedChildren","resetProcessedChildren","isNewAttempt","ActivityTree","root","_root","_currentActivity","_suspendedActivity","_activities","_addActivitiesToMap","currentActivity","suspendedActivity","getActivity","getAllActivities","getParent","getChildren","useAvailableChildren","getSiblings","getNextSibling","siblings","getPreviousSibling","getFirstChild","getLastChild","getCommonAncestor","activity1","activity2","path1","current","unshift","Sequencing","_adlNav","_activityTree","activityTree","_processRollupRecursive","getCurrentActivity","getRootActivity","RollupProcess","eventCallback","rollupStateLog","overallRollupProcess","measureRollupProcess","objectiveRollupProcess","activityProgressRollupProcess","c","checkChildForRollupSubprocess","complexWeightedMeasure","calculateComplexWeightedMeasure","enableThresholdBias","clusters","identifyActivityClusters","processCrossClusterDependencies","ruleResult","objectiveRollupUsingRules","measureResult","objectiveRollupUsingMeasure","objectiveRollupUsingDefault","satisfiedRules","SATISFIED","notSatisfiedRules","NOT_SATISFIED","evaluateRollupRule","completedRules","incompleteRules","rollupType","contributingChildren","satisfiedCount","contributes","evaluateRollupConditionsSubprocess","ALL","ANY","AT_LEAST_COUNT","AT_LEAST_PERCENT","validateRollupStateConsistency","rootActivity","activityId","toISOString","inconsistencies","validateActivityRollupState","count","processGlobalObjectiveMapping","globalObjectives","globalObjectiveCount","synchronizeGlobalObjectives","processedObjectives","options","totalWeightedMeasure","weightingLog","enableBias","baseWeight","adjustedWeight","calculateAdjustedWeight","contribution","childId","measure","weight","weightingDetails","clusterCount","dependencyMap","cluster","analyzeCrossClusterDependencies","processOrder","resolveDependencyOrder","clusterId","processClusterRollup","processedClusters","expectedSatisfied","state","measureStatus","satisfiedStatus","activityObjectives","getActivityObjectives","objectiveId","globalObjective","syncObjectiveState","localObjective","getLocalObjectiveState","attemptPenalty","threshold","dependencies","resolved","resolving","add","depId","readSatisfiedStatus","satisfiedStatusKnown","readNormalizedMeasure","normalizedMeasureKnown","satisfiedByMeasure","writeSatisfiedStatus","writeNormalizedMeasure","writeCompletionStatus","completionStatusKnown","readCompletionStatus","writeProgressMeasure","progressMeasureKnown","readProgressMeasure","updateAttemptData","updateActivityAttemptData","localState","globalState","synchronizationTime","suspendData","SelectionRandomization","selectChildrenProcess","NEVER","ONCE","selectedChildren","availableIndices","randomIndex","childIndex","randomizeChildrenProcess","randomizedChildren","tempI","tempJ","applySelectionAndRandomization","shouldApplySelection","shouldApplyRandomization","ON_EACH_NEW_ATTEMPT","isSelectionNeeded","isRandomizationNeeded","SequencingRequestType","DeliveryRequestType","SequencingResult","deliveryRequest","targetActivity","exception","SequencingProcess","getAttemptElapsedSecondsHook","getAttemptElapsedSeconds","getActivityElapsedSecondsHook","getActivityElapsedSeconds","sequencingRequestProcess","targetActivityId","startSequencingRequestProcess","resumeAllSequencingRequestProcess","continueSequencingRequestProcess","previousSequencingRequestProcess","choiceSequencingRequestProcess","jumpSequencingRequestProcess","exitSequencingRequestProcess","exitAllSequencingRequestProcess","abandonSequencingRequestProcess","abandonAllSequencingRequestProcess","suspendAllSequencingRequestProcess","retrySequencingRequestProcess","retryAllSequencingRequestProcess","deliverableActivity","findFirstDeliverableActivity","checkActivityProcess","ensureSelectionAndRandomization","deliverable","flowResult","flowSubprocess","isActivityInTree","commonAncestor","findCommonAncestor","terminateDescendentAttemptsProcess","activityPath","pathActivity","flowActivityTraversalSubprocess","_direction","considerChildren","availableChildren","limitConditionsCheckProcess","preConditionResult","sequencingRulesCheckProcess","SKIP","DISABLED","skipExitRules","exitAction","exitActionRulesSubprocess","processDeferredExitAction","EXIT","EXIT_PARENT","EXIT_ALL","allActivities","anyActive","postConditionRulesSubprocess","postAction","validActions","RETRY","RETRY_ALL","CONTINUE","PREVIOUS","STOP_FORWARD_TRAVERSAL","validateSequencingRequest","validRequestTypes","valid","requestSpecificValidation","validateRequestSpecificConstraints","attemptLimitMs","activityDurationMs","activityLimitMs","sequencingRulesCheckSubprocess","AND","OR","ancestors1","fromActivity","direction","candidateActivity","firstIteration","nextCandidate","flowTreeTraversalSubprocess","skipChildren","nextSibling","previousSibling","lastDescendant","lastChild","parentPreviousSibling","choiceFlowSubprocess","choiceFlowTreeTraversalSubprocess","constraintValidation","validateChoiceFlowConstraints","validChildren","enhancedChoiceActivityTraversalSubprocess","traversalValidation","validateChoiceTraversalConstraints","canTraverse","canTraverseInto","choiceActivityTraversalSubprocess","meetsChoiceFlowConstraints","validateConstrainChoiceForFlow","evaluateConstrainChoiceForTraversal","evaluateForwardOnlyForChoice","validateConstrainedChoiceBoundaries","boundaryCheck","checkConstrainedChoiceBoundary","targetIndex","isActivityAvailableForChoice","currentIndex","activityIndex","intermediateActivity","isActivityMandatory","isActivityCompleted","validateActivityChoiceState","hasBackwardChoiceException","hasChoiceBoundaryViolation","mandatory","HIDE_FROM_CHOICE","combinationMode","evaluateRuleConditions","allowBackwardChoice","conditionResults","conditionType","measureThreshold","limitSeconds","elapsedSeconds","start","nowMs","not","NavigationRequestType","NavigationRequestResult","terminationRequest","sequencingRequest","DeliveryRequest","OverallSequencingProcess","sequencingProcess","rollupProcess","contentDelivered","globalObjectiveMap","enhancedDeliveryValidation","initializeGlobalObjectiveMap","processNavigationRequest","navigationRequest","navResult","navigationRequestProcess","termResult","terminationRequestProcess","seqResult","DELIVER","deliveryResult","deliveryRequestProcess","contentDeliveryEnvironmentProcess","fireEvent","START","RESUME_ALL","forwardOnlyValidation","validateForwardOnlyConstraints","choiceValidation","validateComplexChoicePath","CHOICE","JUMP","ABANDON","ABANDON_ALL","SUSPEND_ALL","hasSequencingRequest","exitActionResult","enhancedExitActionRulesSubprocess","recursionDepth","depth","terminationResult","executeTermination","shouldEvaluatePostConditions","postConditionResult","integratePostConditionRulesSubprocess","performComplexSuspendedActivityCleanup","endAttemptProcess","handleMultiLevelExitActions","handleSuspendAllRequest","exitRules","conditionsMet","processExitActionsAtLevel","terminateAllActivities","cleanedActivities","originalSuspendedActivity","stateConsistencyCheck","validateActivityTreeStateConsistency","consistent","resourceConstraintCheck","validateResourceConstraints","available","concurrentDeliveryCheck","validateConcurrentDeliveryPrevention","allowed","dependencyCheck","validateActivityDependencies","satisfied","clearSuspendedActivitySubprocess","initializeActivityForDelivery","setupActivityAttemptTracking","updateNavigationValidity","fireActivityDeliveryEvent","audioCaptioning","audioLevel","deliverySpeed","eventType","continueResult","previousResult","choiceMap","jumpMap","act","choiceRes","jumpRes","hasContentBeenDelivered","resetContentDelivered","failureReason","currentDuration","limitDuration","currentTime","checks","attemptDurationLimit","activityDurationLimit","getSequencingState","version","activityStates","serializeActivityStates","navigationState","getNavigationState","restoreSequencingState","deserializeActivityStates","restoreNavigationState","states","serializeActivity","restoreActivity","requestValid","navState","isActivityDisabled","constrainChoiceValidation","validateConstrainChoiceControls","choiceSetValidation","validateChoiceSetConstraints","ancestor","findChildContaining","abs","ancestorValidation","validateAncestorConstraints","validChoiceSet","getValidChoiceSet","evaluatePreConditionRulesForChoice","activityContains","container","currentTop","targetTop","between","helperIsActivityMandatory","helperIsActivityCompleted","validChoices","allDescendants","getAllDescendants","descendant","isValidChoiceTarget","descendants","preRules","isActivityPartOfTree","activeActivities","getActiveActivities","requiredResources","getActivityRequiredResources","resource","isResourceAvailable","systemResourceCheck","checkSystemResourceLimits","adequate","hasPendingDeliveryRequests","isDeliveryLocked","prerequisites","getActivityPrerequisites","prerequisite","isPrerequisiteSatisfied","objectiveDependencies","getObjectiveDependencies","dependency","isObjectiveDependencySatisfied","sequencingDependencies","getSequencingRuleDependencies","collectActiveActivities","resources","activityInfo","toLowerCase","parseDurationToMinutes","document","createElement","canPlayType","plugins","plugin","connection","effectiveType","downlink","storage","estimate","quota","memory","memoryUsagePercent","usedJSHeapSize","jsHeapSizeLimit","deviceMemory","cores","hardwareConcurrency","saveData","pendingRequests","pendingScormRequests","navigationLocked","terminationInProgress","resourceCheck","scormMaintenanceMode","referencedObjectiveID","sibling","prerequisiteActivities","prerequisiteId","_activity","globalObjectiveID","allRules","objectiveReference","statusKnown","baseObjectiveId","measureKnown","referencedActivity","collectGlobalObjectives","objectiveCount","globalObjectiveId","getGlobalObjectiveMap","updateGlobalObjective","objectiveData","lastUpdated","ActivityDeliveryService","callbacks","currentDeliveredActivity","pendingDelivery","processSequencingResult","onSequencingError","deliverActivity","onSequencingComplete","unloadActivity","onDeliverActivity","onUnloadActivity","getCurrentDeliveredActivity","getPendingDelivery","updateCallbacks","SequencingService","adl","configuration","overallSequencingProcess","eventListeners","isSequencingActive","lastCMIValues","lastSequencingResult","autoRollupOnCMIChange","autoProgressOnCompletion","validateNavigationRequests","enableEventSystem","deliveryCallbacks","handleActivityDelivery","handleActivityUnload","handleSequencingComplete","handleSequencingError","activityDeliveryService","setupCMIChangeWatchers","seqOptions","overallOptions","handleSequencingProcessEvent","shouldAutoStartSequencing","startSequencing","initializeCMITracking","errorMsg","triggerFinalRollup","endSequencing","navRequestType","parseNavigationRequest","sequencingResult","DO_NOT_DELIVER","triggerRollupOnCMIChange","cmiElement","oldValue","newValue","rollupTriggeringElements","updateActivityFromCMI","setEventListeners","updateConfiguration","config","getOverallSequencingProcess","startResult","scaledScore","NOT_VALID","fireDebugEvent","argsLength","listenerError","eventServiceError","scormSequencingEvents","globalListeners","globalError","event","fireActivityAttemptStart","fireActivityAttemptEnd","fireLimitConditionCheck","fireNavigationValidityUpdate","validity","fireSequencingStateChange","stateKeys","logLevels","configLevel","Scorm2004API","mastery_override","_globalObjectives","_sequencingService","_extractedScoItemIds","configureSequencing","initializeSequencingService","Initialize","lmsInitialize","Terminate","lmsFinish","GetValue","lmsGetValue","SetValue","lmsSetValue","Commit","lmsCommit","GetLastError","lmsGetLastError","GetErrorString","lmsGetErrorString","GetDiagnostic","lmsGetDiagnostic","sequencingStatePersistence","loadSequencingState","internalFinish","navigationHandled","choiceJumpRegex","groups","choice_target","jump_target","navActions","adlNavRequestRegex","rollupError","autoSaveOn","sequencingElements","saveSequencingState","element_base","objective_id","setting_id","is_global","global_index","newGlobalObjective","global_element","createCorrectResponsesObject","interaction","checkDuplicateChoiceResponse","checkValidResponseType","interaction_type","checkCorrectResponseValue","interaction_count","pattern_index","checkDuplicatedPattern","errorDescription","correct_response","current_index","found","removeCorrectResponsePrefixes","seenOrder","seenCase","seenLang","prefixRegex","langMatches","lang","replaceWithAnotherScormAPI","newAPI","cmiExport","flattened","calculateTotalTime","totalTimeDuration","totalTimeSeconds","navRequest","Function","sequencingSettings","configureActivityTree","configureSequencingRules","configureSequencingControls","configureRollupRules","activityTreeSettings","createActivity","extractActivityIds","ids","activitySettings","childSettings","childActivity","sc","rs","ruleSettings","createSequencingRule","createRollupRule","sequencingRulesSettings","conditionSettings","sequencingControlsSettings","rollupRulesSettings","sequencingConfig","getSequencingService","setSequencingEventListeners","updateSequencingConfiguration","stateData","serializeSequencingState","fullMetadata","learnerId","attemptNumber","stateVersion","dataToSave","compress","compressStateData","maxStateSize","persistence","saveState","debugPersistence","loadState","dataToLoad","decompressStateData","deserializeSequencingState","currentActivityId","adlNavState","overallProcess","sequencingState","expectedVersion","objData","assign","btoa","encodeURIComponent","atob","decodeURIComponent"],"mappings":"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"}