this.CrossFrameAPI=function(){"use strict";return class{constructor(){let targetOrigin=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"*";return this._cache=new Map,this._lastError="0",this._pending=new Map,this._counter=0,this._handler={get:(target,prop,receiver)=>{if("string"!=typeof prop||prop in target){const v=Reflect.get(target,prop,receiver);return"function"==typeof v?v.bind(target):v}const methodName=prop,isGet=methodName.endsWith("GetValue"),isSet=methodName.startsWith("LMSSet")||methodName.endsWith("SetValue"),isInit="Initialize"===methodName||"LMSInitialize"===methodName,isFinish="Terminate"===methodName||"LMSFinish"===methodName,isCommit="Commit"===methodName||"LMSCommit"===methodName;return function(){for(var _len=arguments.length,args=Array(_len),_key=0;_len>_key;_key++)args[_key]=arguments[_key];if(isSet&&args.length>=2&&(target._cache.set(args[0],args[1]+""),target._lastError="0"),target._post(methodName,args).then((res=>{isGet&&args.length>=1&&(target._cache.set(args[0],res+""),target._lastError="0"),"GetLastError"!==methodName&&"LMSGetLastError"!==methodName||(target._lastError=res+"")})).catch((err=>target._capture(methodName,err))),isGet&&args.length>=1)return target._cache.get(args[0])??"";if(isInit||isFinish||isCommit||isSet){const result="true";return target._post("getFlattenedCMI",[]).then((all=>{Object.entries(all).forEach((_ref=>{let[key,val]=_ref;target._cache.set(key,val)})),target._lastError="0"})).catch((err=>target._capture("getFlattenedCMI",err))),result}return"GetLastError"===methodName||"LMSGetLastError"===methodName?target._lastError:""}}},this._origin=targetOrigin,window.addEventListener("message",this._onMessage.bind(this)),new Proxy(this,this._handler)}_post(method,params){const messageId=`cfapi-${Date.now()}-${this._counter++}`,safeParams=params.map((p=>{if("function"!=typeof p)return p;console.warn("Dropping function param when posting SCORM call:",method)}));return new Promise(((resolve,reject)=>{this._pending.set(messageId,{resolve:resolve,reject:reject}),window.parent.postMessage({messageId:messageId,method:method,params:safeParams},this._origin),setTimeout((()=>{this._pending.has(messageId)&&(this._pending.delete(messageId),reject(Error("Timeout calling "+method)))}),5e3)}))}_onMessage(ev){const data=ev.data;if(!data?.messageId)return;const pending=this._pending.get(data.messageId);pending&&(this._pending.delete(data.messageId),data.error?pending.reject(data.error):pending.resolve(data.result))}_capture(method,err){console.error(`CrossFrameAPI ${method} error:`,err);const code=(/(\d{3})/.exec(err.message)||[])[1]||101;this._lastError=code+"",this._cache.set("error_"+code,err.message)}}}();
//# sourceMappingURL=cross-frame-api.min.js.map
