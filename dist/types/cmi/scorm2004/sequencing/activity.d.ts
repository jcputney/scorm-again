import { BaseCMI } from "../../common/base_cmi";
import { CompletionStatus, SuccessStatus } from "../../../constants/enums";
import { SequencingControls } from "./sequencing_controls";
import { SequencingRules } from "./sequencing_rules";
import { RollupRules } from "./rollup_rules";
export declare class Activity extends BaseCMI {
    private _id;
    private _title;
    private _children;
    private _parent;
    private _isVisible;
    private _isActive;
    private _isSuspended;
    private _isCompleted;
    private _completionStatus;
    private _successStatus;
    private _attemptCount;
    private _attemptCompletionAmount;
    private _attemptAbsoluteDuration;
    private _attemptExperiencedDuration;
    private _activityAbsoluteDuration;
    private _activityExperiencedDuration;
    private _objectiveSatisfiedStatus;
    private _objectiveMeasureStatus;
    private _objectiveNormalizedMeasure;
    private _scaledPassingScore;
    private _progressMeasure;
    private _progressMeasureStatus;
    private _location;
    private _attemptAbsoluteStartTime;
    private _learnerPrefs;
    private _activityAttemptActive;
    private _isHiddenFromChoice;
    private _isAvailable;
    private _attemptLimit;
    private _attemptAbsoluteDurationLimit;
    private _activityAbsoluteDurationLimit;
    private _timeLimitAction;
    private _timeLimitDuration;
    private _beginTimeLimit;
    private _endTimeLimit;
    private _sequencingControls;
    private _sequencingRules;
    private _rollupRules;
    private _processedChildren;
    private _isNewAttempt;
    constructor(id?: string, title?: string);
    initialize(): void;
    reset(): void;
    get id(): string;
    set id(id: string);
    get title(): string;
    set title(title: string);
    get children(): Activity[];
    addChild(child: Activity): void;
    removeChild(child: Activity): boolean;
    get parent(): Activity | null;
    get isVisible(): boolean;
    set isVisible(isVisible: boolean);
    get isActive(): boolean;
    set isActive(isActive: boolean);
    get isSuspended(): boolean;
    set isSuspended(isSuspended: boolean);
    get isCompleted(): boolean;
    set isCompleted(isCompleted: boolean);
    get completionStatus(): CompletionStatus;
    set completionStatus(completionStatus: CompletionStatus);
    get successStatus(): SuccessStatus;
    set successStatus(successStatus: SuccessStatus);
    get attemptCount(): number;
    set attemptCount(value: number);
    get attemptCompletionAmount(): number;
    set attemptCompletionAmount(value: number);
    incrementAttemptCount(): void;
    get objectiveSatisfiedStatus(): boolean;
    set objectiveSatisfiedStatus(objectiveSatisfiedStatus: boolean);
    get objectiveMeasureStatus(): boolean;
    set objectiveMeasureStatus(objectiveMeasureStatus: boolean);
    get objectiveNormalizedMeasure(): number;
    set objectiveNormalizedMeasure(objectiveNormalizedMeasure: number);
    get scaledPassingScore(): number;
    set scaledPassingScore(scaledPassingScore: number);
    get progressMeasure(): number;
    set progressMeasure(progressMeasure: number);
    get progressMeasureStatus(): boolean;
    set progressMeasureStatus(progressMeasureStatus: boolean);
    get location(): string;
    set location(location: string);
    get attemptAbsoluteStartTime(): string;
    set attemptAbsoluteStartTime(attemptAbsoluteStartTime: string);
    get learnerPrefs(): any;
    set learnerPrefs(learnerPrefs: any);
    get activityAttemptActive(): boolean;
    set activityAttemptActive(activityAttemptActive: boolean);
    get isHiddenFromChoice(): boolean;
    set isHiddenFromChoice(isHiddenFromChoice: boolean);
    get isAvailable(): boolean;
    set isAvailable(isAvailable: boolean);
    get attemptLimit(): number | null;
    set attemptLimit(attemptLimit: number | null);
    hasAttemptLimitExceeded(): boolean;
    get timeLimitDuration(): string | null;
    set timeLimitDuration(timeLimitDuration: string | null);
    get timeLimitAction(): string | null;
    set timeLimitAction(timeLimitAction: string | null);
    get beginTimeLimit(): string | null;
    set beginTimeLimit(beginTimeLimit: string | null);
    get endTimeLimit(): string | null;
    set endTimeLimit(endTimeLimit: string | null);
    get attemptAbsoluteDurationLimit(): string | null;
    set attemptAbsoluteDurationLimit(attemptAbsoluteDurationLimit: string | null);
    get attemptExperiencedDuration(): string;
    set attemptExperiencedDuration(attemptExperiencedDuration: string);
    get activityAbsoluteDurationLimit(): string | null;
    set activityAbsoluteDurationLimit(activityAbsoluteDurationLimit: string | null);
    get activityExperiencedDuration(): string;
    set activityExperiencedDuration(activityExperiencedDuration: string);
    get attemptAbsoluteDuration(): string;
    set attemptAbsoluteDuration(duration: string);
    get activityAbsoluteDuration(): string;
    set activityAbsoluteDuration(duration: string);
    get sequencingControls(): SequencingControls;
    set sequencingControls(sequencingControls: SequencingControls);
    get sequencingRules(): SequencingRules;
    set sequencingRules(sequencingRules: SequencingRules);
    get rollupRules(): RollupRules;
    set rollupRules(rollupRules: RollupRules);
    getAvailableChildren(): Activity[];
    setProcessedChildren(processedChildren: Activity[]): void;
    resetProcessedChildren(): void;
    get isNewAttempt(): boolean;
    set isNewAttempt(isNewAttempt: boolean);
    toJSON(): object;
}
//# sourceMappingURL=activity.d.ts.map