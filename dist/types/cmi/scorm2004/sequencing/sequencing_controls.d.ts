import { BaseCMI } from "../../common/base_cmi";
export declare class SequencingControls extends BaseCMI {
    private _enabled;
    private _choiceExit;
    private _flow;
    private _forwardOnly;
    private _useCurrentAttemptObjectiveInfo;
    private _useCurrentAttemptProgressInfo;
    private _preventActivation;
    private _constrainChoice;
    private _rollupObjectiveSatisfied;
    private _rollupProgressCompletion;
    private _objectiveMeasureWeight;
    constructor();
    reset(): void;
    get enabled(): boolean;
    set enabled(enabled: boolean);
    get choiceExit(): boolean;
    set choiceExit(choiceExit: boolean);
    get flow(): boolean;
    set flow(flow: boolean);
    get forwardOnly(): boolean;
    set forwardOnly(forwardOnly: boolean);
    get useCurrentAttemptObjectiveInfo(): boolean;
    set useCurrentAttemptObjectiveInfo(useCurrentAttemptObjectiveInfo: boolean);
    get useCurrentAttemptProgressInfo(): boolean;
    set useCurrentAttemptProgressInfo(useCurrentAttemptProgressInfo: boolean);
    get preventActivation(): boolean;
    set preventActivation(preventActivation: boolean);
    get constrainChoice(): boolean;
    set constrainChoice(constrainChoice: boolean);
    get rollupObjectiveSatisfied(): boolean;
    set rollupObjectiveSatisfied(rollupObjectiveSatisfied: boolean);
    get rollupProgressCompletion(): boolean;
    set rollupProgressCompletion(rollupProgressCompletion: boolean);
    get objectiveMeasureWeight(): number;
    set objectiveMeasureWeight(objectiveMeasureWeight: number);
    isChoiceNavigationAllowed(): boolean;
    isFlowNavigationAllowed(): boolean;
    isForwardNavigationAllowed(): boolean;
    isBackwardNavigationAllowed(): boolean;
    toJSON(): object;
}
