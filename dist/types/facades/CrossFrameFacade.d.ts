import BaseAPI from "../BaseAPI";
export type MessageData = {
    messageId: string;
    method: string;
    params: unknown[];
    sab?: SharedArrayBuffer;
};
export type MessageResponse = {
    messageId: string;
    result?: unknown;
    error?: {
        message: string;
        stack?: string;
    };
    sab?: SharedArrayBuffer;
};
export interface ICrossFrameFacade {
    initialize(): Promise<boolean>;
    lmsInitialize(): string;
    Initialize(): Promise<boolean>;
    LMSInitialize(): string;
    terminate(): Promise<boolean>;
    lmsFinish(): string;
    Terminate(): Promise<boolean>;
    LMSFinish(): string;
    getValue(element: string): Promise<string>;
    lmsGetValue(element: string): string;
    GetValue(element: string): Promise<string>;
    LMSGetValue(element: string): string;
    setValue(element: string, value: string | number | boolean): Promise<boolean>;
    lmsSetValue(element: string, value: string | number | boolean): string;
    SetValue(element: string, value: string | number | boolean): Promise<boolean>;
    LMSSetValue(element: string, value: string | number | boolean): string;
    commit(): Promise<boolean>;
    lmsCommit(): string;
    Commit(): Promise<boolean>;
    LMSCommit(): string;
    getLastError(): Promise<string>;
    lmsGetLastError(): string;
    GetLastError(): Promise<string>;
    LMSGetLastError(): string;
    getErrorString(errorCode: string | number): Promise<string>;
    lmsGetErrorString(errorCode: string | number): string;
    GetErrorString(errorCode: string | number): Promise<string>;
    LMSGetErrorString(errorCode: string | number): string;
    getDiagnostic(errorCode: string | number): Promise<string>;
    lmsGetDiagnostic(errorCode: string | number): string;
    GetDiagnostic(errorCode: string | number): Promise<string>;
    LMSGetDiagnostic(errorCode: string | number): string;
    isInitialized(): Promise<boolean>;
    getIsInitialized(): boolean;
    on(event: string, callback: (...args: unknown[]) => void): void;
    off(event: string, callback: (...args: unknown[]) => void): void;
}
export declare class CrossFrameLMS {
    private readonly _api;
    private readonly _targetOrigin;
    constructor(api: BaseAPI, targetOrigin?: string);
    private _handleMessage;
    private _processMessage;
    private _setupEventForwarding;
}
export declare class CrossFrameAPI implements ICrossFrameFacade {
    private _targetOrigin;
    private _pendingRequests;
    private _eventListeners;
    private _messageIdCounter;
    private _childFrames;
    private _isInitialized;
    private _lastError;
    private _cache;
    private _sabBuffers;
    private _syncCall;
    constructor(targetOrigin?: string);
    private _handleMessage;
    private _handleMethodResponse;
    private _handleEvent;
    private _forwardEventToChildFrames;
    private _sendMessage;
    initialize(): Promise<boolean>;
    lmsInitialize(): string;
    Initialize(): Promise<boolean>;
    LMSInitialize(): string;
    terminate(): Promise<boolean>;
    lmsFinish(): string;
    Terminate(): Promise<boolean>;
    LMSFinish(): string;
    getValue(element: string): Promise<string>;
    lmsGetValue(element: string): string;
    GetValue(element: string): Promise<string>;
    LMSGetValue(element: string): string;
    setValue(element: string, value: string | number | boolean): Promise<boolean>;
    lmsSetValue(element: string, value: string | number | boolean): string;
    SetValue(element: string, value: string | number | boolean): Promise<boolean>;
    LMSSetValue(element: string, value: string | number | boolean): string;
    commit(): Promise<boolean>;
    lmsCommit(): string;
    Commit(): Promise<boolean>;
    LMSCommit(): string;
    getLastError(): Promise<string>;
    lmsGetLastError(): string;
    GetLastError(): Promise<string>;
    LMSGetLastError(): string;
    getErrorString(errorCode: string | number): Promise<string>;
    lmsGetErrorString(errorCode: string | number): string;
    GetErrorString(errorCode: string | number): Promise<string>;
    LMSGetErrorString(errorCode: string | number): string;
    getDiagnostic(errorCode: string | number): Promise<string>;
    lmsGetDiagnostic(errorCode: string | number): string;
    GetDiagnostic(errorCode: string | number): Promise<string>;
    LMSGetDiagnostic(errorCode: string | number): string;
    isInitialized(): Promise<boolean>;
    getIsInitialized(): boolean;
    on(event: string, callback: (...args: unknown[]) => void): void;
    off(event: string, callback: (...args: unknown[]) => void): void;
}
export declare function createCrossFrameServer(api: BaseAPI, targetOrigin?: string): CrossFrameLMS;
export declare function createCrossFrameClient(targetOrigin?: string): CrossFrameAPI;
