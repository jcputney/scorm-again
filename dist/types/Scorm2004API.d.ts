import BaseAPI from "./BaseAPI";
import { CMI } from "./cmi/scorm2004/cmi";
import { StringKeyMap } from "./utilities";
import { CMIObjectivesObject } from "./cmi/scorm2004/objectives";
import { ADL } from "./cmi/scorm2004/adl";
import { CommitObject, ResultObject, Settings } from "./types/api_types";
import { BaseCMI } from "./cmi/common/base_cmi";
import { CMIInteractionsObject } from "./cmi/scorm2004/interactions";
import { CMIArray } from "./cmi/common/array";
import { ResponseType } from "./constants/response_constants";
declare class Scorm2004API extends BaseAPI {
    private _version;
    private _globalObjectives;
    private readonly _sequencing;
    private _extractedScoItemIds;
    constructor(settings?: Settings);
    cmi: CMI;
    adl: ADL;
    Initialize: () => string;
    Terminate: () => string;
    GetValue: (CMIElement: string) => string;
    SetValue: (CMIElement: string, value: any) => string;
    Commit: () => string;
    GetLastError: () => string;
    GetErrorString: (CMIErrorCode: string | number) => string;
    GetDiagnostic: (CMIErrorCode: string | number) => string;
    reset(settings?: Settings): void;
    get version(): string;
    get globalObjectives(): CMIObjectivesObject[];
    lmsInitialize(): string;
    lmsFinish(): string;
    internalFinish(): Promise<string>;
    lmsGetValue(CMIElement: string): string;
    lmsSetValue(CMIElement: string, value: any): string;
    lmsCommit(): string;
    lmsGetLastError(): string;
    lmsGetErrorString(CMIErrorCode: string | number): string;
    lmsGetDiagnostic(CMIErrorCode: string | number): string;
    setCMIValue(CMIElement: string, value: any): string;
    getChildElement(CMIElement: string, value: any, foundFirstIndex: boolean): BaseCMI | null;
    private createCorrectResponsesObject;
    checkValidResponseType(CMIElement: string, response_type: ResponseType, value: any, interaction_type: string): void;
    checkDuplicateChoiceResponse(CMIElement: string, interaction: CMIInteractionsObject, value: any): void;
    validateCorrectResponse(CMIElement: string, value: any): void;
    getCMIValue(CMIElement: string): any;
    getLmsErrorMessageDetails(errorNumber: string | number, detail: boolean): string;
    checkDuplicatedPattern(correct_response: CMIArray, current_index: number, value: any): boolean;
    checkCorrectResponseValue(CMIElement: string, interaction_type: string, nodes: Array<any>, value: any): void;
    removeCorrectResponsePrefixes(CMIElement: string, node: string): any;
    replaceWithAnotherScormAPI(newAPI: Scorm2004API): void;
    renderCommitCMI(terminateCommit: boolean, includeTotalTime?: boolean): StringKeyMap | Array<any>;
    renderCommitObject(terminateCommit: boolean, includeTotalTime?: boolean): CommitObject;
    storeData(terminateCommit: boolean): Promise<ResultObject>;
    private configureSequencing;
    private configureActivityTree;
    private extractActivityIds;
    private createActivity;
    private configureSequencingRules;
    private createSequencingRule;
    private configureSequencingControls;
    private configureRollupRules;
    private createRollupRule;
}
export default Scorm2004API;
//# sourceMappingURL=Scorm2004API.d.ts.map