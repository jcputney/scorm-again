import { CMI } from "./cmi/scorm12/cmi";
import { BaseCMI } from "./cmi/common/base_cmi";
import { NAV } from "./cmi/scorm12/nav";
import { CommitObject, ResultObject, Settings } from "./types/api_types";
import BaseAPI from "./BaseAPI";
declare class Scorm12Impl extends BaseAPI {
    constructor(settings?: Settings);
    statusSetByModule: boolean;
    cmi: CMI;
    nav: NAV;
    LMSInitialize: () => string;
    LMSFinish: () => string;
    LMSGetValue: (CMIElement: string) => string;
    LMSSetValue: (CMIElement: string, value: any) => string;
    LMSCommit: () => string;
    LMSGetLastError: () => string;
    LMSGetErrorString: (CMIErrorCode: string) => string;
    LMSGetDiagnostic: (CMIErrorCode: string) => string;
    reset(settings?: Settings): void;
    lmsInitialize(): string;
    lmsFinish(): string;
    internalFinish(): Promise<string>;
    lmsGetValue(CMIElement: string): string;
    lmsSetValue(CMIElement: string, value: any): string;
    lmsCommit(): string;
    lmsGetLastError(): string;
    lmsGetErrorString(CMIErrorCode: string): string;
    lmsGetDiagnostic(CMIErrorCode: string): string;
    setCMIValue(CMIElement: string, value: any): string;
    getCMIValue(CMIElement: string): any;
    getChildElement(CMIElement: string, _value: any, foundFirstIndex: boolean): BaseCMI | null;
    validateCorrectResponse(_CMIElement: string, _value: any): void;
    getLmsErrorMessageDetails(errorNumber: number | string, detail: boolean): string;
    replaceWithAnotherScormAPI(newAPI: Scorm12Impl): void;
    renderCommitCMI(terminateCommit: boolean): object | Array<any>;
    renderCommitObject(terminateCommit: boolean): CommitObject;
    storeData(terminateCommit: boolean): Promise<ResultObject>;
}
export { Scorm12Impl as Scorm12API };
