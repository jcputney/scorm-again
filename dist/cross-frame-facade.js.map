{"version":3,"file":"cross-frame-facade.js","sources":["../src/facades/CrossFrameFacade.ts"],"sourcesContent":["/**\n * CrossFrameFacade.ts\n *\n * This file implements a cross-frame facade for the scorm-again API.\n * It allows communication between frames from different domains using the postMessage API.\n */\n\nimport BaseAPI from \"../BaseAPI\";\n\n/**\n * Type for the message data\n */\nexport type MessageData = {\n  messageId: string;\n  method: string;\n  params: unknown[];\n  sab?: SharedArrayBuffer;\n};\n\n/**\n * Type for the message response\n */\nexport type MessageResponse = {\n  messageId: string;\n  result?: unknown;\n  error?: {\n    message: string;\n    stack?: string;\n  };\n  sab?: SharedArrayBuffer;\n};\n\n/**\n * Interface for the CrossFrameFacade\n */\nexport interface ICrossFrameFacade {\n  /**\n   * Initialize the SCORM API (SCORM 1.2 style) - Asynchronous version\n   * @returns Promise that resolves to true if initialization was successful\n   */\n  initialize(): Promise<boolean>;\n\n  /**\n   * Initialize the SCORM API (SCORM 1.2 style) - Synchronous version\n   * @returns \"true\" if initialization was successful, \"false\" otherwise\n   */\n  lmsInitialize(): string;\n\n  /**\n   * Initialize the SCORM API (SCORM 2004 style) - Asynchronous version\n   * @returns Promise that resolves to true if initialization was successful\n   */\n  Initialize(): Promise<boolean>;\n\n  /**\n   * Initialize the SCORM API (SCORM 2004 style) - Synchronous version\n   * @returns \"true\" if initialization was successful, \"false\" otherwise\n   */\n  LMSInitialize(): string;\n\n  /**\n   * Terminate the SCORM API (SCORM 1.2 style) - Asynchronous version\n   * @returns Promise that resolves to true if termination was successful\n   */\n  terminate(): Promise<boolean>;\n\n  /**\n   * Terminate the SCORM API (SCORM 1.2 style) - Synchronous version\n   * @returns \"true\" if termination was successful, \"false\" otherwise\n   */\n  lmsFinish(): string;\n\n  /**\n   * Terminate the SCORM API (SCORM 2004 style) - Asynchronous version\n   * @returns Promise that resolves to true if termination was successful\n   */\n  Terminate(): Promise<boolean>;\n\n  /**\n   * Terminate the SCORM API (SCORM 2004 style) - Synchronous version\n   * @returns \"true\" if termination was successful, \"false\" otherwise\n   */\n  LMSFinish(): string;\n\n  /**\n   * Get a value from the SCORM API (SCORM 1.2 style) - Asynchronous version\n   * @param element The CMI element to get\n   * @returns Promise that resolves to the value of the CMI element\n   */\n  getValue(element: string): Promise<string>;\n\n  /**\n   * Get a value from the SCORM API (SCORM 1.2 style) - Synchronous version\n   * @param element The CMI element to get\n   * @returns The value of the CMI element\n   */\n  lmsGetValue(element: string): string;\n\n  /**\n   * Get a value from the SCORM API (SCORM 2004 style) - Asynchronous version\n   * @param element The CMI element to get\n   * @returns Promise that resolves to the value of the CMI element\n   */\n  GetValue(element: string): Promise<string>;\n\n  /**\n   * Get a value from the SCORM API (SCORM 2004 style) - Synchronous version\n   * @param element The CMI element to get\n   * @returns The value of the CMI element\n   */\n  LMSGetValue(element: string): string;\n\n  /**\n   * Set a value in the SCORM API (SCORM 1.2 style) - Asynchronous version\n   * @param element The CMI element to set\n   * @param value The value to set\n   * @returns Promise that resolves to true if the value was set successfully\n   */\n  setValue(element: string, value: string | number | boolean): Promise<boolean>;\n\n  /**\n   * Set a value in the SCORM API (SCORM 1.2 style) - Synchronous version\n   * @param element The CMI element to set\n   * @param value The value to set\n   * @returns \"true\" if the value was set successfully, \"false\" otherwise\n   */\n  lmsSetValue(element: string, value: string | number | boolean): string;\n\n  /**\n   * Set a value in the SCORM API (SCORM 2004 style) - Asynchronous version\n   * @param element The CMI element to set\n   * @param value The value to set\n   * @returns Promise that resolves to true if the value was set successfully\n   */\n  SetValue(element: string, value: string | number | boolean): Promise<boolean>;\n\n  /**\n   * Set a value in the SCORM API (SCORM 2004 style) - Synchronous version\n   * @param element The CMI element to set\n   * @param value The value to set\n   * @returns \"true\" if the value was set successfully, \"false\" otherwise\n   */\n  LMSSetValue(element: string, value: string | number | boolean): string;\n\n  /**\n   * Commit changes to the LMS (SCORM 1.2 style) - Asynchronous version\n   * @returns Promise that resolves to true if the commit was successful\n   */\n  commit(): Promise<boolean>;\n\n  /**\n   * Commit changes to the LMS (SCORM 1.2 style) - Synchronous version\n   * @returns \"true\" if the commit was successful, \"false\" otherwise\n   */\n  lmsCommit(): string;\n\n  /**\n   * Commit changes to the LMS (SCORM 2004 style) - Asynchronous version\n   * @returns Promise that resolves to true if the commit was successful\n   */\n  Commit(): Promise<boolean>;\n\n  /**\n   * Commit changes to the LMS (SCORM 2004 style) - Synchronous version\n   * @returns \"true\" if the commit was successful, \"false\" otherwise\n   */\n  LMSCommit(): string;\n\n  /**\n   * Get the last error code (SCORM 1.2 style) - Asynchronous version\n   * @returns Promise that resolves to the last error code as a string\n   */\n  getLastError(): Promise<string>;\n\n  /**\n   * Get the last error code (SCORM 1.2 style) - Synchronous version\n   * @returns The last error code as a string\n   */\n  lmsGetLastError(): string;\n\n  /**\n   * Get the last error code (SCORM 2004 style) - Asynchronous version\n   * @returns Promise that resolves to the last error code as a string\n   */\n  GetLastError(): Promise<string>;\n\n  /**\n   * Get the last error code (SCORM 2004 style) - Synchronous version\n   * @returns The last error code as a string\n   */\n  LMSGetLastError(): string;\n\n  /**\n   * Get the error string for an error code (SCORM 1.2 style) - Asynchronous version\n   * @param errorCode The error code\n   * @returns Promise that resolves to the error string\n   */\n  getErrorString(errorCode: string | number): Promise<string>;\n\n  /**\n   * Get the error string for an error code (SCORM 1.2 style) - Synchronous version\n   * @param errorCode The error code\n   * @returns The error string\n   */\n  lmsGetErrorString(errorCode: string | number): string;\n\n  /**\n   * Get the error string for an error code (SCORM 2004 style) - Asynchronous version\n   * @param errorCode The error code\n   * @returns Promise that resolves to the error string\n   */\n  GetErrorString(errorCode: string | number): Promise<string>;\n\n  /**\n   * Get the error string for an error code (SCORM 2004 style) - Synchronous version\n   * @param errorCode The error code\n   * @returns The error string\n   */\n  LMSGetErrorString(errorCode: string | number): string;\n\n  /**\n   * Get diagnostic information for an error code (SCORM 1.2 style) - Asynchronous version\n   * @param errorCode The error code\n   * @returns Promise that resolves to the diagnostic information\n   */\n  getDiagnostic(errorCode: string | number): Promise<string>;\n\n  /**\n   * Get diagnostic information for an error code (SCORM 1.2 style) - Synchronous version\n   * @param errorCode The error code\n   * @returns The diagnostic information\n   */\n  lmsGetDiagnostic(errorCode: string | number): string;\n\n  /**\n   * Get diagnostic information for an error code (SCORM 2004 style) - Asynchronous version\n   * @param errorCode The error code\n   * @returns Promise that resolves to the diagnostic information\n   */\n  GetDiagnostic(errorCode: string | number): Promise<string>;\n\n  /**\n   * Get diagnostic information for an error code (SCORM 2004 style) - Synchronous version\n   * @param errorCode The error code\n   * @returns The diagnostic information\n   */\n  LMSGetDiagnostic(errorCode: string | number): string;\n\n  /**\n   * Check if the API is currently initialized - Asynchronous version\n   * @returns Promise that resolves to true if the API is initialized\n   */\n  isInitialized(): Promise<boolean>;\n\n  /**\n   * Check if the API is currently initialized - Synchronous version\n   * @returns True if the API is initialized, false otherwise\n   */\n  getIsInitialized(): boolean;\n\n  /**\n   * Register an event listener\n   * @param event The event name\n   * @param callback The callback function\n   */\n  on(event: string, callback: (...args: unknown[]) => void): void;\n\n  /**\n   * Remove an event listener\n   * @param event The event name\n   * @param callback The callback function\n   */\n  off(event: string, callback: (...args: unknown[]) => void): void;\n}\n\n/**\n * Server-side facade that runs in the parent frame where the API is initialized.\n * This facade listens for messages from the client-side facade and proxies them to the actual API.\n */\nexport class CrossFrameLMS {\n  private readonly _api: BaseAPI;\n  private readonly _targetOrigin: string = \"*\";\n\n  /**\n   * Constructor\n   * @param {BaseAPI} api The API instance to use\n   * @param targetOrigin The target origin for postMessage (default: \"*\")\n   */\n  constructor(api: BaseAPI, targetOrigin?: string) {\n    this._api = api;\n\n    // Set target origin if provided\n    if (targetOrigin) {\n      this._targetOrigin = targetOrigin;\n    }\n\n    // Listen for messages from the client-side facade\n    window.addEventListener(\"message\", this._handleMessage.bind(this));\n\n    // Set up event forwarding\n    this._setupEventForwarding();\n  }\n\n  /**\n   * Handle messages from the client-side facade\n   * @param event The message event\n   */\n  private _handleMessage(event: MessageEvent) {\n    const data = event.data as MessageData;\n\n    // Ignore messages that don't have the expected format\n    if (!data || !data.messageId || !data.method) {\n      return;\n    }\n\n    // Process the message\n    this._processMessage(data, event.source as Window, event.origin);\n  }\n\n  /**\n   * Process a message from the client-side facade\n   * @param data The message data\n   * @param source The source window\n   * @param origin The origin of the message\n   */\n  private _processMessage(data: MessageData, source: Window, origin: string) {\n    const { messageId, method, params, sab } = data;\n    let result: any;\n    let error: any;\n\n    try {\n      // Call the appropriate method on the API\n      if (typeof (this._api as unknown as Record<string, Function>)[method] === \"function\") {\n        result = (this._api as unknown as Record<string, Function>)[method](...params);\n      } else {\n        throw new Error(`Method ${method} not found on API`);\n      }\n    } catch (e: unknown) {\n      if (e instanceof Error) {\n        error = {\n          message: e.message,\n          stack: e.stack,\n        };\n      } else {\n        error = {\n          message: String(e),\n        };\n      }\n    }\n\n    // Send the response back to the client-side facade\n    const response = {\n      messageId,\n      result,\n      error,\n      sab,\n    } as MessageResponse;\n\n    source.postMessage(response, this._targetOrigin, sab ? [sab] : undefined);\n  }\n\n  /**\n   * Set up event forwarding from the API to the client-side facade\n   */\n  private _setupEventForwarding() {\n    // Forward all events from the API to the client-side facades\n    this._api.on(\"*\", (event: string, ...args: any[]) => {\n      // Get all frames that might contain client-side facades\n      // We get the frames each time an event is triggered to ensure we have the latest frames\n      const frames = Array.from(document.querySelectorAll(\"iframe\"));\n\n      // Send the event to all frames\n      frames.forEach((frame) => {\n        if (frame.contentWindow) {\n          frame.contentWindow.postMessage(\n            {\n              event,\n              args,\n            },\n            this._targetOrigin,\n          );\n        }\n      });\n    });\n  }\n}\n\n/**\n * Client-side facade that runs in the child frame where the module is loaded.\n * This facade sends messages to the server-side facade and provides the same interface as the actual API.\n */\nexport class CrossFrameAPI implements ICrossFrameFacade {\n  private _targetOrigin: string = \"*\";\n  private _pendingRequests: Map<\n    string,\n    {\n      resolve: (value: unknown) => void;\n      reject: (reason?: unknown) => void;\n      source?: Window; // Source window for forwarding responses\n    }\n  > = new Map();\n  private _eventListeners: Map<string, Set<(...args: unknown[]) => void>> = new Map();\n  private _messageIdCounter: number = 0;\n  private _childFrames: Set<Window> = new Set(); // Track child frames that have sent messages\n  private _isInitialized: boolean = false;\n  private _lastError: string = \"0\";\n  private _cache: Map<string, string> = new Map(); // Cache for synchronous operations\n  private _sabBuffers: Map<string, SharedArrayBuffer> = new Map();\n\n  private _syncCall(method: string, params: any[], timeoutMs = 5000): any {\n    // In a test environment, this method might be mocked\n    // so we need to ensure it's testable\n    try {\n      const sab = new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT);\n      const int32 = new Int32Array(sab);\n      const messageId = `${Date.now()}-sync-${this._messageIdCounter++}`;\n      // store sab for matching responses\n      this._sabBuffers.set(messageId, sab);\n      // send the call, transferring sab\n      window.parent.postMessage({ messageId, method, params, sab }, this._targetOrigin, [sab]);\n      // block until notified\n      const status = Atomics.wait(int32, 0, 0, timeoutMs);\n      // cleanup\n      this._sabBuffers.delete(messageId);\n      const pending = this._pendingRequests.get(messageId) || {};\n      this._pendingRequests.delete(messageId);\n      if (status === \"timed-out\") {\n        throw new Error(`SCORM ${method} timeout after ${timeoutMs}ms`);\n      }\n      if ((pending as any).error) throw (pending as any).error;\n      return (pending as any).result;\n    } catch (e) {\n      // If SharedArrayBuffer or Atomics are not available (e.g., in test environment)\n      // or if there's any other error, rethrow it to be handled by the caller\n      if (e instanceof Error) {\n        console.error(`Error in synchronous call to ${method}:`, e);\n        this._lastError = \"101\"; // General exception\n      } else {\n        console.error(`Unknown error in synchronous call to ${method}:`, e);\n        this._lastError = \"101\"; // General exception\n      }\n      throw e;\n    }\n  }\n\n  /**\n   * Constructor\n   * @param targetOrigin The target origin for postMessage (default: \"*\")\n   */\n  constructor(targetOrigin?: string) {\n    // Set target origin if provided\n    if (targetOrigin) {\n      this._targetOrigin = targetOrigin;\n    }\n\n    // Listen for messages from the server-side facade and child frames\n    window.addEventListener(\"message\", this._handleMessage.bind(this));\n  }\n\n  /**\n   * Handle messages from the server-side facade and child frames\n   * @param event The message event\n   */\n  private _handleMessage(event: MessageEvent) {\n    const data = event.data;\n    const source = event.source as Window;\n\n    // Check if the message is from a child frame\n    const isFromChildFrame = source !== window.parent && source !== window;\n\n    // Handle method responses from parent frame\n    if (\n      data.messageId &&\n      (data.result !== undefined || data.error !== undefined) &&\n      !isFromChildFrame\n    ) {\n      this._handleMethodResponse(data);\n    }\n\n    // Handle method requests from child frames\n    if (data.messageId && data.method && isFromChildFrame) {\n      // Add the child frame to our set of known frames\n      this._childFrames.add(source);\n\n      // Forward the message to the parent frame, but keep track of the source\n      const { messageId, method, params } = data;\n      const forwardedMessageId = `forwarded-${messageId}`;\n\n      // Store the promise callbacks with the source window\n      this._pendingRequests.set(forwardedMessageId, {\n        resolve: (result) => {\n          // Forward the result back to the child frame\n          source.postMessage(\n            {\n              messageId,\n              result,\n            },\n            this._targetOrigin,\n          );\n        },\n        reject: (error) => {\n          // Forward the error back to the child frame\n          source.postMessage(\n            {\n              messageId,\n              error,\n            },\n            this._targetOrigin,\n          );\n        },\n        source,\n      });\n\n      // Forward the message to the parent frame\n      window.parent.postMessage(\n        {\n          messageId: forwardedMessageId,\n          method,\n          params,\n        },\n        this._targetOrigin,\n      );\n\n      // Set a timeout to clean up if no response is received\n      setTimeout(() => {\n        if (this._pendingRequests.has(forwardedMessageId)) {\n          const request = this._pendingRequests.get(forwardedMessageId);\n          this._pendingRequests.delete(forwardedMessageId);\n          if (request?.source) {\n            request.source.postMessage(\n              {\n                messageId,\n                error: {\n                  message: `Timeout waiting for response to method ${method}`,\n                },\n              },\n              this._targetOrigin,\n            );\n          }\n        }\n      }, 5000);\n    }\n\n    // Handle events from parent frame\n    if (data.event && !isFromChildFrame) {\n      this._handleEvent(data.event, ...(data.args || []));\n\n      // Forward events to child frames\n      this._forwardEventToChildFrames(data.event, data.args || []);\n    }\n  }\n\n  /**\n   * Handle a method response from the server-side facade\n   * @param data The response data\n   */\n  private _handleMethodResponse(data: MessageResponse) {\n    const { messageId, result, error } = data;\n    if (data.sab) {\n      const int32 = new Int32Array(data.sab);\n      Atomics.store(int32, 0, 1);\n      Atomics.notify(int32, 0);\n    }\n    const pendingRequest = this._pendingRequests.get(messageId);\n    if (pendingRequest) {\n      const { resolve, reject } = pendingRequest;\n      if (error) {\n        reject(error);\n      } else {\n        resolve(result);\n      }\n      this._pendingRequests.delete(messageId);\n    }\n  }\n\n  /**\n   * Handle an event from the server-side facade\n   * @param event The event name\n   * @param args The event arguments\n   */\n  private _handleEvent(event: string, ...args: any[]) {\n    const listeners = this._eventListeners.get(event);\n\n    if (listeners) {\n      listeners.forEach((listener) => {\n        try {\n          listener(...args);\n        } catch (e: unknown) {\n          console.error(\"Error in event listener for %s:\", String(event), e);\n        }\n      });\n    }\n\n    // Also trigger listeners for the \"*\" event\n    const allListeners = this._eventListeners.get(\"*\");\n\n    if (allListeners) {\n      allListeners.forEach((listener) => {\n        try {\n          listener(event, ...args);\n        } catch (e: unknown) {\n          console.error('Error in \"*\" event listener for %s:', event, e);\n        }\n      });\n    }\n  }\n\n  /**\n   * Forward an event to all child frames\n   * @param event The event name\n   * @param args The event arguments\n   */\n  private _forwardEventToChildFrames(event: string, args: unknown[]) {\n    // Send the event to all child frames\n    this._childFrames.forEach((frame) => {\n      try {\n        frame.postMessage(\n          {\n            event,\n            args,\n          },\n          this._targetOrigin,\n        );\n      } catch (e: unknown) {\n        console.error(`Error forwarding event to child frame:`, e);\n      }\n    });\n  }\n\n  /**\n   * Send a message to the server-side facade\n   * @param method The method to call\n   * @param params The parameters to pass to the method\n   * @returns A promise that resolves with the result of the method call\n   */\n  private _sendMessage(\n    method: string,\n    params: (string | number | boolean)[] = [],\n  ): Promise<unknown> {\n    // In test environments, we need to handle the case where window.parent.postMessage\n    // might not be properly mocked, which can lead to unhandled promise rejections\n    if (\n      typeof window === \"undefined\" ||\n      typeof window.parent === \"undefined\" ||\n      typeof window.parent.postMessage !== \"function\"\n    ) {\n      // Return a resolved promise with an empty string in test environments\n      return Promise.resolve(\"\");\n    }\n\n    return new Promise((resolve, reject) => {\n      const messageId = `${Date.now()}-${this._messageIdCounter++}`;\n\n      // Store the promise callbacks\n      this._pendingRequests.set(messageId, { resolve, reject });\n\n      try {\n        // Send the message to the parent frame\n        window.parent.postMessage(\n          {\n            messageId,\n            method,\n            params,\n          },\n          this._targetOrigin,\n        );\n\n        // Set a timeout to reject the promise if no response is received\n        setTimeout(() => {\n          if (this._pendingRequests.has(messageId)) {\n            this._pendingRequests.delete(messageId);\n            reject(new Error(`Timeout waiting for response to method ${method}`));\n          }\n        }, 5000);\n      } catch (e) {\n        // If there's an error sending the message, clean up and reject the promise\n        this._pendingRequests.delete(messageId);\n        reject(e);\n      }\n    });\n  }\n\n  /**\n   * Initialize the SCORM API (SCORM 1.2 style) - Asynchronous version\n   * @returns Promise that resolves to true if initialization was successful\n   */\n  async initialize(): Promise<boolean> {\n    const result = await this._sendMessage(\"lmsInitialize\");\n    this._isInitialized = result === \"true\";\n    return this._isInitialized;\n  }\n\n  /**\n   * Initialize the SCORM API (SCORM 1.2 style) - Synchronous version\n   * @returns \"true\" if initialization was successful, \"false\" otherwise\n   */\n  lmsInitialize(): string {\n    try {\n      return String(this._syncCall(\"lmsInitialize\", []));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"false\";\n    }\n  }\n\n  /**\n   * Initialize the SCORM API (SCORM 2004 style) - Asynchronous version\n   * @returns Promise that resolves to true if initialization was successful\n   */\n  async Initialize(): Promise<boolean> {\n    return this.initialize();\n  }\n\n  /**\n   * Initialize the SCORM API (SCORM 2004 style) - Synchronous version\n   * @returns \"true\" if initialization was successful, \"false\" otherwise\n   */\n  LMSInitialize(): string {\n    try {\n      return String(this._syncCall(\"LMSInitialize\", []));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"false\";\n    }\n  }\n\n  /**\n   * Terminate the SCORM API (SCORM 1.2 style) - Asynchronous version\n   * @returns Promise that resolves to true if termination was successful\n   */\n  async terminate(): Promise<boolean> {\n    const result = await this._sendMessage(\"lmsFinish\");\n    const success = result === \"true\";\n    if (success) {\n      this._isInitialized = false;\n    }\n    return success;\n  }\n\n  /**\n   * Terminate the SCORM API (SCORM 1.2 style) - Synchronous version\n   * @returns \"true\" if termination was successful, \"false\" otherwise\n   */\n  lmsFinish(): string {\n    try {\n      return String(this._syncCall(\"lmsFinish\", []));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"false\";\n    }\n  }\n\n  /**\n   * Terminate the SCORM API (SCORM 2004 style) - Asynchronous version\n   * @returns Promise that resolves to true if termination was successful\n   */\n  async Terminate(): Promise<boolean> {\n    return this.terminate();\n  }\n\n  /**\n   * Terminate the SCORM API (SCORM 2004 style) - Synchronous version\n   * @returns \"true\" if termination was successful, \"false\" otherwise\n   */\n  LMSFinish(): string {\n    try {\n      return String(this._syncCall(\"LMSFinish\", []));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"false\";\n    }\n  }\n\n  /**\n   * Get a value from the SCORM API (SCORM 1.2 style) - Asynchronous version\n   * @param element The CMI element to get\n   * @returns Promise that resolves to the value of the CMI element\n   */\n  async getValue(element: string): Promise<string> {\n    try {\n      const result = await this._sendMessage(\"lmsGetValue\", [element]);\n      const value = String(result);\n      // Cache the result for synchronous operations\n      this._cache.set(element, value);\n      return value;\n    } catch (e) {\n      this._lastError = \"101\"; // General exception\n      console.error(`Error in getValue(${element}):`, e);\n      return \"\";\n    }\n  }\n\n  /**\n   * Get a value from the SCORM API (SCORM 1.2 style) - Synchronous version\n   * @param element The CMI element to get\n   * @returns The value of the CMI element\n   */\n  lmsGetValue(element: string): string {\n    try {\n      return String(this._syncCall(\"lmsGetValue\", [element]));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"\";\n    }\n  }\n\n  /**\n   * Get a value from the SCORM API (SCORM 2004 style) - Asynchronous version\n   * @param element The CMI element to get\n   * @returns Promise that resolves to the value of the CMI element\n   */\n  async GetValue(element: string): Promise<string> {\n    return this.getValue(element);\n  }\n\n  /**\n   * Get a value from the SCORM API (SCORM 2004 style) - Synchronous version\n   * @param element The CMI element to get\n   * @returns The value of the CMI element\n   */\n  LMSGetValue(element: string): string {\n    try {\n      return String(this._syncCall(\"LMSGetValue\", [element]));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"\";\n    }\n  }\n\n  /**\n   * Set a value in the SCORM API (SCORM 1.2 style) - Asynchronous version\n   * @param element The CMI element to set\n   * @param value The value to set\n   * @returns Promise that resolves to true if the value was set successfully\n   */\n  async setValue(element: string, value: string | number | boolean): Promise<boolean> {\n    try {\n      const result = await this._sendMessage(\"lmsSetValue\", [element, value]);\n      const success = result === \"true\";\n      if (success) {\n        // Update the cache with the new value\n        this._cache.set(element, String(value));\n      }\n      return success;\n    } catch (e) {\n      this._lastError = \"101\"; // General exception\n      console.error(`Error in setValue(${element}, ${value}):`, e);\n      return false;\n    }\n  }\n\n  /**\n   * Set a value in the SCORM API (SCORM 1.2 style) - Synchronous version\n   * @param element The CMI element to set\n   * @param value The value to set\n   * @returns \"true\" if the value was set successfully, \"false\" otherwise\n   */\n  lmsSetValue(element: string, value: string | number | boolean): string {\n    try {\n      return String(this._syncCall(\"lmsSetValue\", [element, value]));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"false\";\n    }\n  }\n\n  /**\n   * Set a value in the SCORM API (SCORM 2004 style) - Asynchronous version\n   * @param element The CMI element to set\n   * @param value The value to set\n   * @returns Promise that resolves to true if the value was set successfully\n   */\n  async SetValue(element: string, value: string | number | boolean): Promise<boolean> {\n    return this.setValue(element, value);\n  }\n\n  /**\n   * Set a value in the SCORM API (SCORM 2004 style) - Synchronous version\n   * @param element The CMI element to set\n   * @param value The value to set\n   * @returns \"true\" if the value was set successfully, \"false\" otherwise\n   */\n  LMSSetValue(element: string, value: string | number | boolean): string {\n    try {\n      return String(this._syncCall(\"LMSSetValue\", [element, value]));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"false\";\n    }\n  }\n\n  /**\n   * Commit changes to the LMS (SCORM 1.2 style) - Asynchronous version\n   * @returns Promise that resolves to true if the commit was successful\n   */\n  async commit(): Promise<boolean> {\n    try {\n      const result = await this._sendMessage(\"lmsCommit\");\n      return result === \"true\";\n    } catch (e) {\n      this._lastError = \"101\"; // General exception\n      console.error(\"Error in commit:\", e);\n      return false;\n    }\n  }\n\n  /**\n   * Commit changes to the LMS (SCORM 1.2 style) - Synchronous version\n   * @returns \"true\" if the commit was successful, \"false\" otherwise\n   */\n  lmsCommit(): string {\n    try {\n      return String(this._syncCall(\"lmsCommit\", []));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"false\";\n    }\n  }\n\n  /**\n   * Commit changes to the LMS (SCORM 2004 style) - Asynchronous version\n   * @returns Promise that resolves to true if the commit was successful\n   */\n  async Commit(): Promise<boolean> {\n    return this.commit();\n  }\n\n  /**\n   * Commit changes to the LMS (SCORM 2004 style) - Synchronous version\n   * @returns \"true\" if the commit was successful, \"false\" otherwise\n   */\n  LMSCommit(): string {\n    try {\n      return String(this._syncCall(\"LMSCommit\", []));\n    } catch (e) {\n      this._lastError = \"101\";\n      return \"false\";\n    }\n  }\n\n  /**\n   * Get the last error code (SCORM 1.2 style) - Asynchronous version\n   * @returns Promise that resolves to the last error code as a string\n   */\n  async getLastError(): Promise<string> {\n    try {\n      const result = await this._sendMessage(\"lmsGetLastError\");\n      this._lastError = String(result);\n      return this._lastError;\n    } catch (e) {\n      console.error(\"Error in getLastError:\", e);\n      return \"101\"; // General exception\n    }\n  }\n\n  /**\n   * Get the last error code (SCORM 1.2 style) - Synchronous version\n   * @returns The last error code as a string\n   */\n  lmsGetLastError(): string {\n    try {\n      return String(this._syncCall(\"lmsGetLastError\", []));\n    } catch (e) {\n      return \"101\";\n    }\n  }\n\n  /**\n   * Get the last error code (SCORM 2004 style) - Asynchronous version\n   * @returns Promise that resolves to the last error code as a string\n   */\n  async GetLastError(): Promise<string> {\n    return this.getLastError();\n  }\n\n  /**\n   * Get the last error code (SCORM 2004 style) - Synchronous version\n   * @returns The last error code as a string\n   */\n  LMSGetLastError(): string {\n    try {\n      return String(this._syncCall(\"LMSGetLastError\", []));\n    } catch (e) {\n      return \"101\";\n    }\n  }\n\n  /**\n   * Get the error string for an error code (SCORM 1.2 style) - Asynchronous version\n   * @param errorCode The error code\n   * @returns Promise that resolves to the error string\n   */\n  async getErrorString(errorCode: string | number): Promise<string> {\n    try {\n      const result = await this._sendMessage(\"lmsGetErrorString\", [errorCode]);\n      const errorString = String(result);\n      // Cache the result for synchronous operations\n      this._cache.set(`error_${errorCode}`, errorString);\n      return errorString;\n    } catch (e) {\n      console.error(`Error in getErrorString(${errorCode}):`, e);\n      return \"\";\n    }\n  }\n\n  /**\n   * Get the error string for an error code (SCORM 1.2 style) - Synchronous version\n   * @param errorCode The error code\n   * @returns The error string\n   */\n  lmsGetErrorString(errorCode: string | number): string {\n    try {\n      return String(this._syncCall(\"lmsGetErrorString\", [errorCode]));\n    } catch (e) {\n      return \"No error\";\n    }\n  }\n\n  /**\n   * Get the error string for an error code (SCORM 2004 style) - Asynchronous version\n   * @param errorCode The error code\n   * @returns Promise that resolves to the error string\n   */\n  async GetErrorString(errorCode: string | number): Promise<string> {\n    return this.getErrorString(errorCode);\n  }\n\n  /**\n   * Get the error string for an error code (SCORM 2004 style) - Synchronous version\n   * @param errorCode The error code\n   * @returns The error string\n   */\n  LMSGetErrorString(errorCode: string | number): string {\n    try {\n      return String(this._syncCall(\"LMSGetErrorString\", [errorCode]));\n    } catch (e) {\n      return \"No error\";\n    }\n  }\n\n  /**\n   * Get diagnostic information for an error code (SCORM 1.2 style) - Asynchronous version\n   * @param errorCode The error code\n   * @returns Promise that resolves to the diagnostic information\n   */\n  async getDiagnostic(errorCode: string | number): Promise<string> {\n    try {\n      const result = await this._sendMessage(\"lmsGetDiagnostic\", [errorCode]);\n      const diagnostic = String(result);\n      // Cache the result for synchronous operations\n      this._cache.set(`diagnostic_${errorCode}`, diagnostic);\n      return diagnostic;\n    } catch (e) {\n      console.error(`Error in getDiagnostic(${errorCode}):`, e);\n      return \"\";\n    }\n  }\n\n  /**\n   * Get diagnostic information for an error code (SCORM 1.2 style) - Synchronous version\n   * @param errorCode The error code\n   * @returns The diagnostic information\n   */\n  lmsGetDiagnostic(errorCode: string | number): string {\n    try {\n      return String(this._syncCall(\"lmsGetDiagnostic\", [errorCode]));\n    } catch (e) {\n      return \"No diagnostic information available\";\n    }\n  }\n\n  /**\n   * Get diagnostic information for an error code (SCORM 2004 style) - Asynchronous version\n   * @param errorCode The error code\n   * @returns Promise that resolves to the diagnostic information\n   */\n  async GetDiagnostic(errorCode: string | number): Promise<string> {\n    return this.getDiagnostic(errorCode);\n  }\n\n  /**\n   * Get diagnostic information for an error code (SCORM 2004 style) - Synchronous version\n   * @param errorCode The error code\n   * @returns The diagnostic information\n   */\n  LMSGetDiagnostic(errorCode: string | number): string {\n    try {\n      return String(this._syncCall(\"LMSGetDiagnostic\", [errorCode]));\n    } catch (e) {\n      return \"No diagnostic information available\";\n    }\n  }\n\n  /**\n   * Check if the API is currently initialized - Asynchronous version\n   * @returns Promise that resolves to true if the API is initialized\n   */\n  async isInitialized(): Promise<boolean> {\n    try {\n      const result = await this._sendMessage(\"isInitialized\");\n      this._isInitialized = Boolean(result);\n      return this._isInitialized;\n    } catch (e) {\n      console.error(\"Error in isInitialized:\", e);\n      return this._isInitialized;\n    }\n  }\n\n  /**\n   * Check if the API is currently initialized - Synchronous version\n   * @returns True if the API is initialized, false otherwise\n   */\n  getIsInitialized(): boolean {\n    // In test environments, starting an async operation can cause issues\n    // with unhandled promise rejections, so we'll just return the current value\n    return this._isInitialized;\n  }\n\n  /**\n   * Register an event listener\n   * @param event The event name\n   * @param callback The callback function\n   */\n  on(event: string, callback: (...args: unknown[]) => void): void {\n    if (!this._eventListeners.has(event)) {\n      this._eventListeners.set(event, new Set());\n    }\n\n    const listeners = this._eventListeners.get(event);\n    if (listeners) {\n      listeners.add(callback);\n    }\n  }\n\n  /**\n   * Remove an event listener\n   * @param event The event name\n   * @param callback The callback function\n   */\n  off(event: string, callback: (...args: unknown[]) => void): void {\n    const listeners = this._eventListeners.get(event);\n\n    if (listeners) {\n      listeners.delete(callback);\n\n      if (listeners.size === 0) {\n        this._eventListeners.delete(event);\n      }\n    }\n  }\n}\n\n/**\n * Factory function to create a CrossFrameServer instance\n * @param {BaseAPI} api The API instance to use\n * @param targetOrigin The target origin for postMessage\n * @returns A CrossFrameServer instance\n */\nexport function createCrossFrameServer(api: BaseAPI, targetOrigin?: string): CrossFrameLMS {\n  return new CrossFrameLMS(api, targetOrigin);\n}\n\n/**\n * Factory function to create a CrossFrameClient instance\n * @param targetOrigin The target origin for postMessage\n * @returns A CrossFrameClient instance\n */\nexport function createCrossFrameClient(targetOrigin?: string): CrossFrameAPI {\n  return new CrossFrameAPI(targetOrigin);\n}\n"],"names":["CrossFrameLMS","constructor","api","targetOrigin","_targetOrigin","_api","window","addEventListener","_handleMessage","bind","_setupEventForwarding","event","data","messageId","method","_processMessage","source","origin","params","sab","result","error","Error","e","message","stack","String","response","postMessage","_this","on","_len","arguments","length","args","Array","_key","frames","from","document","querySelectorAll","forEach","frame","contentWindow","CrossFrameAPI","_pendingRequests","Map","_eventListeners","_messageIdCounter","_childFrames","Set","_isInitialized","_lastError","_cache","_sabBuffers","_syncCall","timeoutMs","undefined","SharedArrayBuffer","Int32Array","BYTES_PER_ELEMENT","int32","Date","now","set","parent","status","Atomics","wait","delete","pending","get","console","isFromChildFrame","_handleMethodResponse","add","forwardedMessageId","resolve","reject","setTimeout","has","request","_handleEvent","_forwardEventToChildFrames","store","notify","pendingRequest","_len2","_key2","listeners","listener","allListeners","_sendMessage","Promise","initialize","lmsInitialize","Initialize","LMSInitialize","terminate","success","lmsFinish","Terminate","LMSFinish","getValue","element","value","lmsGetValue","GetValue","LMSGetValue","setValue","lmsSetValue","SetValue","LMSSetValue","commit","lmsCommit","Commit","LMSCommit","getLastError","lmsGetLastError","GetLastError","LMSGetLastError","getErrorString","errorCode","errorString","lmsGetErrorString","GetErrorString","LMSGetErrorString","getDiagnostic","diagnostic","lmsGetDiagnostic","GetDiagnostic","LMSGetDiagnostic","isInitialized","Boolean","getIsInitialized","callback","off","size","createCrossFrameServer","createCrossFrameClient"],"mappings":";;;EAuRO,MAAMA,aAAc,CAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EASzBC,EAAAA,WAAAA,CAAYC,KAAcC,YAAuB,EAAA;MAPjD,IAAA,CAAiBC,aAAwB,GAAA,GAAA;MAQvC,IAAA,CAAKC,IAAO,GAAAH,GAAA;EAGZ,IAAA,IAAIC,YAAc,EAAA;QAChB,IAAA,CAAKC,aAAgB,GAAAD,YAAA;EACvB;EAGAG,IAAAA,MAAA,CAAOC,iBAAiB,SAAW,EAAA,IAAA,CAAKC,cAAe,CAAAC,IAAA,CAAK,IAAI,CAAC,CAAA;MAGjE,IAAA,CAAKC,qBAAsB,EAAA;EAC7B;EAAA;EAAA;EAAA;EAAA;IAMQF,eAAeG,KAAqB,EAAA;EAC1C,IAAA,MAAMC,OAAOD,KAAM,CAAAC,IAAA;EAGnB,IAAA,IAAI,CAACA,IAAQ,IAAA,CAACA,KAAKC,SAAa,IAAA,CAACD,KAAKE,MAAQ,EAAA;EAC5C,MAAA;EACF;EAGA,IAAA,IAAA,CAAKC,eAAgB,CAAAH,IAAA,EAAMD,KAAM,CAAAK,MAAA,EAAkBL,MAAMM,MAAM,CAAA;EACjE;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAQQF,EAAAA,eAAAA,CAAgBH,IAAmB,EAAAI,MAAA,EAAgBC,MAAgB,EAAA;MACzE,MAAM;QAAEJ,SAAA;QAAWC,MAAQ;QAAAI,MAAA;EAAQC,MAAAA;EAAI,KAAI,GAAAP,IAAA;EACvC,IAAA,IAAAQ,MAAA;EACA,IAAA,IAAAC,KAAA;MAEA,IAAA;QAEF,IAAI,OAAQ,IAAA,CAAKhB,IAA6C,CAAAS,MAAM,MAAM,UAAY,EAAA;UACpFM,MAAA,GAAU,IAAK,CAAAf,IAAA,CAA6CS,MAAM,CAAA,CAAE,GAAGI,MAAM,CAAA;EAC/E,OAAO,MAAA;EACL,QAAA,MAAM,IAAII,KAAA,CAAM,CAAUR,OAAAA,EAAAA,MAAM,mBAAmB,CAAA;EACrD;eACOS,CAAY,EAAA;QACnB,IAAIA,aAAaD,KAAO,EAAA;EACdD,QAAAA,KAAA,GAAA;YACNG,SAASD,CAAE,CAAAC,OAAA;YACXC,OAAOF,CAAE,CAAAE;WACX;EACF,OAAO,MAAA;EACGJ,QAAAA,KAAA,GAAA;YACNG,OAAA,EAASE,OAAOH,CAAC;WACnB;EACF;EACF;EAGA,IAAA,MAAMI,QAAW,GAAA;QACfd,SAAA;QACAO,MAAA;QACAC,KAAA;EACAF,MAAAA;OACF;EAEOH,IAAAA,MAAA,CAAAY,WAAA,CAAYD,UAAU,IAAK,CAAAvB,aAAA,EAAee,MAAM,CAACA,GAAG,IAAI,MAAS,CAAA;EAC1E;EAAA;EAAA;EAAA;EAKQT,EAAAA,qBAAwBA,GAAA;EAAA,IAAA,IAAAmB,KAAA,GAAA,IAAA;MAE9B,IAAA,CAAKxB,IAAK,CAAAyB,EAAA,CAAG,GAAK,EAAA,UAACnB,OAAkC;QAAA,KAAAoB,IAAAA,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAhBC,IAAgB,OAAAC,KAAA,CAAAJ,IAAA,GAAAA,CAAAA,GAAAA,IAAA,WAAAK,IAAA,GAAA,CAAA,EAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA,EAAA,EAAA;EAAhBF,QAAAA,IAAgB,CAAAE,IAAA,GAAAJ,CAAAA,CAAAA,GAAAA,SAAA,CAAAI,IAAA,CAAA;EAAA;EAGnD,MAAA,MAAMC,SAASF,KAAM,CAAAG,IAAA,CAAKC,QAAS,CAAAC,gBAAA,CAAiB,QAAQ,CAAC,CAAA;EAGtDH,MAAAA,MAAA,CAAAI,OAAA,CAASC,KAAU,IAAA;UACxB,IAAIA,MAAMC,aAAe,EAAA;EACvBD,UAAAA,KAAA,CAAMC,aAAc,CAAAf,WAAA,CAClB;cACEjB,KAAA;EACAuB,YAAAA;EACF,WAAA,EACAL,KAAK,CAAAzB,aACP,CAAA;EACF;EACF,OAAC,CAAA;EACH,KAAC,CAAA;EACH;EACF;EAMO,MAAMwC,aAA2C,CAAA;EAAA;EAAA;EAAA;EAAA;IA0DtD3C,YAAYE,YAAuB,EAAA;MAzDnC,IAAA,CAAQC,aAAwB,GAAA,GAAA;EACxB,IAAA,IAAA,CAAAyC,gBAAA,sBAOAC,GAAI,EAAA;EACJ,IAAA,IAAA,CAAAC,eAAA,sBAAsED,GAAI,EAAA;MAClF,IAAA,CAAQE,iBAA4B,GAAA,CAAA;EAC5B,IAAA,IAAA,CAAAC,YAAA,sBAAgCC,GAAI,EAAA;EAC5C;MAAA,IAAA,CAAQC,cAA0B,GAAA,KAAA;MAClC,IAAA,CAAQC,UAAqB,GAAA,GAAA;EACrB,IAAA,IAAA,CAAAC,MAAA,sBAAkCP,GAAI,EAAA;EAC9C;EAAQ,IAAA,IAAA,CAAAQ,WAAA,sBAAkDR,GAAI,EAAA;EA4C5D,IAAA,IAAI3C,YAAc,EAAA;QAChB,IAAA,CAAKC,aAAgB,GAAAD,YAAA;EACvB;EAGAG,IAAAA,MAAA,CAAOC,iBAAiB,SAAW,EAAA,IAAA,CAAKC,cAAe,CAAAC,IAAA,CAAK,IAAI,CAAC,CAAA;EACnE;EAhDQ8C,EAAAA,SAAUA,CAAAzC,MAAA,EAAgBI,MAAe,EAAuB;EAAA,IAAA,IAAvBsC,SAAA,GAAAxB,SAAA,CAAAC,MAAA,GAAA,CAAA,IAAAD,SAAA,CAAA,CAAA,CAAA,KAAAyB,SAAA,GAAAzB,SAAA,CAAA,CAAA,CAAA,GAAY,GAAW;MAGlE,IAAA;QACF,MAAMb,GAAM,GAAA,IAAIuC,iBAAkB,CAAAC,UAAA,CAAWC,iBAAiB,CAAA;EACxD,MAAA,MAAAC,KAAA,GAAQ,IAAIF,UAAA,CAAWxC,GAAG,CAAA;EAChC,MAAA,MAAMN,YAAY,CAAGiD,EAAAA,IAAA,CAAKC,KAAK,CAAS,MAAA,EAAA,KAAKf,iBAAmB,EAAA,CAAA,CAAA;QAE3D,IAAA,CAAAM,WAAA,CAAYU,GAAI,CAAAnD,SAAA,EAAWM,GAAG,CAAA;EAEnCb,MAAAA,MAAA,CAAO2D,MAAO,CAAArC,WAAA,CAAY;UAAEf,SAAA;UAAWC,MAAQ;UAAAI,MAAA;EAAQC,QAAAA;SAAI,EAAG,IAAK,CAAAf,aAAA,EAAe,CAACe,GAAG,CAAC,CAAA;EAEvF,MAAA,MAAM+C,SAASC,OAAQ,CAAAC,IAAA,CAAKP,KAAO,EAAA,CAAA,EAAG,GAAGL,SAAS,CAAA;EAE7C,MAAA,IAAA,CAAAF,WAAA,CAAYe,OAAOxD,SAAS,CAAA;EACjC,MAAA,MAAMyD,UAAU,IAAK,CAAAzB,gBAAA,CAAiB0B,GAAI,CAAA1D,SAAS,KAAK,EAAC;EACpD,MAAA,IAAA,CAAAgC,gBAAA,CAAiBwB,OAAOxD,SAAS,CAAA;QACtC,IAAIqD,WAAW,WAAa,EAAA;UAC1B,MAAM,IAAI5C,KAAM,CAAA,CAAA,MAAA,EAASR,MAAM,CAAkB0C,eAAAA,EAAAA,SAAS,IAAI,CAAA;EAChE;EACK,MAAA,IAAAc,OAAA,CAAgBjD,KAAO,EAAA,MAAOiD,OAAgB,CAAAjD,KAAA;QACnD,OAAQiD,OAAgB,CAAAlD,MAAA;eACjBG,CAAG,EAAA;QAGV,IAAIA,aAAaD,KAAO,EAAA;UACtBkD,OAAA,CAAQnD,KAAM,CAAA,CAAA,6BAAA,EAAgCP,MAAM,CAAA,CAAA,CAAA,EAAKS,CAAC,CAAA;UAC1D,IAAA,CAAK6B,UAAa,GAAA,KAAA;EACpB,OAAO,MAAA;UACLoB,OAAA,CAAQnD,KAAM,CAAA,CAAA,qCAAA,EAAwCP,MAAM,CAAA,CAAA,CAAA,EAAKS,CAAC,CAAA;UAClE,IAAA,CAAK6B,UAAa,GAAA,KAAA;EACpB;EACM,MAAA,MAAA7B,CAAA;EACR;EACF;EAAA;EAAA;EAAA;EAAA;IAoBQf,eAAeG,KAAqB,EAAA;EAC1C,IAAA,MAAMC,OAAOD,KAAM,CAAAC,IAAA;EACnB,IAAA,MAAMI,SAASL,KAAM,CAAAK,MAAA;MAGrB,MAAMyD,gBAAmB,GAAAzD,MAAA,KAAWV,MAAO,CAAA2D,MAAA,IAAUjD,MAAW,KAAAV,MAAA;MAI9D,IAAAM,IAAA,CAAKC,cACJD,IAAK,CAAAQ,MAAA,KAAW,UAAaR,IAAK,CAAAS,KAAA,KAAU,MAC7C,CAAA,IAAA,CAACoD,gBACD,EAAA;EACA,MAAA,IAAA,CAAKC,sBAAsB9D,IAAI,CAAA;EACjC;MAGA,IAAIA,IAAK,CAAAC,SAAA,IAAaD,IAAK,CAAAE,MAAA,IAAU2D,gBAAkB,EAAA;EAEhD,MAAA,IAAA,CAAAxB,YAAA,CAAa0B,IAAI3D,MAAM,CAAA;QAG5B,MAAM;UAAEH,SAAA;UAAWC,MAAQ;EAAAI,QAAAA;EAAO,OAAI,GAAAN,IAAA;EAChC,MAAA,MAAAgE,kBAAA,GAAqB,CAAa/D,UAAAA,EAAAA,SAAS,CAAA,CAAA;EAG5C,MAAA,IAAA,CAAAgC,gBAAA,CAAiBmB,IAAIY,kBAAoB,EAAA;UAC5CC,OAAA,EAAUzD,MAAW,IAAA;YAEZJ,MAAA,CAAAY,WAAA,CACL;cACEf,SAAA;EACAO,YAAAA;EACF,WAAA,EACA,IAAK,CAAAhB,aACP,CAAA;WACF;UACA0E,MAAA,EAASzD,KAAU,IAAA;YAEVL,MAAA,CAAAY,WAAA,CACL;cACEf,SAAA;EACAQ,YAAAA;EACF,WAAA,EACA,IAAK,CAAAjB,aACP,CAAA;WACF;EACAY,QAAAA;EACF,OAAC,CAAA;EAGDV,MAAAA,MAAA,CAAO2D,MAAO,CAAArC,WAAA,CACZ;EACEf,QAAAA,SAAW,EAAA+D,kBAAA;UACX9D,MAAA;EACAI,QAAAA;EACF,OAAA,EACA,IAAK,CAAAd,aACP,CAAA;EAGA2E,MAAAA,UAAA,CAAW,MAAM;UACf,IAAI,IAAK,CAAAlC,gBAAA,CAAiBmC,GAAI,CAAAJ,kBAAkB,CAAG,EAAA;YACjD,MAAMK,OAAU,GAAA,IAAA,CAAKpC,gBAAiB,CAAA0B,GAAA,CAAIK,kBAAkB,CAAA;EACvD,UAAA,IAAA,CAAA/B,gBAAA,CAAiBwB,OAAOO,kBAAkB,CAAA;YAC/C,IAAIK,SAASjE,MAAQ,EAAA;EACnBiE,YAAAA,OAAA,CAAQjE,MAAO,CAAAY,WAAA,CACb;gBACEf,SAAA;EACAQ,cAAAA,KAAO,EAAA;kBACLG,OAAA,EAAS,0CAA0CV,MAAM,CAAA;EAC3D;EACF,aAAA,EACA,IAAK,CAAAV,aACP,CAAA;EACF;EACF;WACC,GAAI,CAAA;EACT;EAGI,IAAA,IAAAQ,IAAA,CAAKD,KAAS,IAAA,CAAC8D,gBAAkB,EAAA;EACnC,MAAA,IAAA,CAAKS,aAAatE,IAAK,CAAAD,KAAA,EAAO,IAAIC,IAAK,CAAAsB,IAAA,IAAQ,EAAG,CAAA,CAAA;EAGlD,MAAA,IAAA,CAAKiD,2BAA2BvE,IAAK,CAAAD,KAAA,EAAOC,IAAK,CAAAsB,IAAA,IAAQ,EAAE,CAAA;EAC7D;EACF;EAAA;EAAA;EAAA;EAAA;IAMQwC,sBAAsB9D,IAAuB,EAAA;MACnD,MAAM;QAAEC,SAAA;QAAWO,MAAQ;EAAAC,MAAAA;EAAM,KAAI,GAAAT,IAAA;MACrC,IAAIA,KAAKO,GAAK,EAAA;QACZ,MAAM0C,KAAQ,GAAA,IAAIF,UAAW,CAAA/C,IAAA,CAAKO,GAAG,CAAA;QAC7BgD,OAAA,CAAAiB,KAAA,CAAMvB,KAAO,EAAA,CAAA,EAAG,CAAC,CAAA;EACjBM,MAAAA,OAAA,CAAAkB,MAAA,CAAOxB,OAAO,CAAC,CAAA;EACzB;MACA,MAAMyB,cAAiB,GAAA,IAAA,CAAKzC,gBAAiB,CAAA0B,GAAA,CAAI1D,SAAS,CAAA;EAC1D,IAAA,IAAIyE,cAAgB,EAAA;QACZ,MAAA;UAAET,OAAS;EAAAC,QAAAA;EAAO,OAAI,GAAAQ,cAAA;EAC5B,MAAA,IAAIjE,KAAO,EAAA;UACTyD,MAAA,CAAOzD,KAAK,CAAA;EACd,OAAO,MAAA;UACLwD,OAAA,CAAQzD,MAAM,CAAA;EAChB;EACK,MAAA,IAAA,CAAAyB,gBAAA,CAAiBwB,OAAOxD,SAAS,CAAA;EACxC;EACF;EAAA;EAAA;EAAA;EAAA;EAAA;IAOQqE,YAAAA,CAAavE,OAA+B;MAAA,KAAA4E,IAAAA,KAAA,GAAAvD,SAAA,CAAAC,MAAA,EAAbC,IAAa,OAAAC,KAAA,CAAAoD,KAAA,GAAAA,CAAAA,GAAAA,KAAA,WAAAC,KAAA,GAAA,CAAA,EAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA,EAAA,EAAA;EAAbtD,MAAAA,IAAa,CAAAsD,KAAA,GAAAxD,CAAAA,CAAAA,GAAAA,SAAA,CAAAwD,KAAA,CAAA;EAAA;MAClD,MAAMC,SAAY,GAAA,IAAA,CAAK1C,eAAgB,CAAAwB,GAAA,CAAI5D,KAAK,CAAA;EAEhD,IAAA,IAAI8E,SAAW,EAAA;EACHA,MAAAA,SAAA,CAAAhD,OAAA,CAASiD,QAAa,IAAA;UAC1B,IAAA;YACFA,QAAA,CAAS,GAAGxD,IAAI,CAAA;mBACTX,CAAY,EAAA;YACnBiD,OAAA,CAAQnD,KAAM,CAAA,iCAAA,EAAmCK,MAAO,CAAAf,KAAK,GAAGY,CAAC,CAAA;EACnE;EACF,OAAC,CAAA;EACH;MAGA,MAAMoE,YAAe,GAAA,IAAA,CAAK5C,eAAgB,CAAAwB,GAAA,CAAI,GAAG,CAAA;EAEjD,IAAA,IAAIoB,YAAc,EAAA;EACHA,MAAAA,YAAA,CAAAlD,OAAA,CAASiD,QAAa,IAAA;UAC7B,IAAA;EACOA,UAAAA,QAAA,CAAA/E,KAAA,EAAO,GAAGuB,IAAI,CAAA;mBAChBX,CAAY,EAAA;YACXiD,OAAA,CAAAnD,KAAA,CAAM,qCAAuC,EAAAV,KAAA,EAAOY,CAAC,CAAA;EAC/D;EACF,OAAC,CAAA;EACH;EACF;EAAA;EAAA;EAAA;EAAA;EAAA;EAOQ4D,EAAAA,0BAAAA,CAA2BxE,OAAeuB,IAAiB,EAAA;EAE5D,IAAA,IAAA,CAAAe,YAAA,CAAaR,OAAQ,CAACC,KAAU,IAAA;QAC/B,IAAA;UACIA,KAAA,CAAAd,WAAA,CACJ;YACEjB,KAAA;EACAuB,UAAAA;EACF,SAAA,EACA,IAAK,CAAA9B,aACP,CAAA;iBACOmB,CAAY,EAAA;EACXiD,QAAAA,OAAA,CAAAnD,KAAA,CAAM,0CAA0CE,CAAC,CAAA;EAC3D;EACF,KAAC,CAAA;EACH;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;IAQQqE,YACNA,CAAA9E,MAAA,EAEkB;EAAA,IAAA,IADlBI,MAAwC,GAAAc,SAAA,CAAAC,MAAA,GAAA,CAAA,IAAAD,SAAA,CAAA,CAAA,CAAA,KAAAyB,SAAA,GAAAzB,SAAA,CAAA,CAAA,CAAA,GAAA,EACtB;MAIhB,IAAA,OAAO1B,MAAW,KAAA,WAAA,IAClB,OAAOA,MAAA,CAAO2D,MAAW,KAAA,WAAA,IACzB,OAAO3D,MAAA,CAAO2D,MAAO,CAAArC,WAAA,KAAgB,UACrC,EAAA;EAEO,MAAA,OAAAiE,OAAA,CAAQhB,QAAQ,EAAE,CAAA;EAC3B;EAEA,IAAA,OAAO,IAAIgB,OAAA,CAAQ,CAAChB,OAAA,EAASC,MAAW,KAAA;EACtC,MAAA,MAAMjE,YAAY,CAAGiD,EAAAA,IAAA,CAAKC,KAAK,CAAI,CAAA,EAAA,KAAKf,iBAAmB,EAAA,CAAA,CAAA;EAG3D,MAAA,IAAA,CAAKH,iBAAiBmB,GAAI,CAAAnD,SAAA,EAAW;UAAEgE,OAAA;EAASC,QAAAA;EAAO,OAAC,CAAA;QAEpD,IAAA;EAEFxE,QAAAA,MAAA,CAAO2D,MAAO,CAAArC,WAAA,CACZ;YACEf,SAAA;YACAC,MAAA;EACAI,UAAAA;EACF,SAAA,EACA,IAAK,CAAAd,aACP,CAAA;EAGA2E,QAAAA,UAAA,CAAW,MAAM;YACf,IAAI,IAAK,CAAAlC,gBAAA,CAAiBmC,GAAI,CAAAnE,SAAS,CAAG,EAAA;EACnC,YAAA,IAAA,CAAAgC,gBAAA,CAAiBwB,OAAOxD,SAAS,CAAA;cACtCiE,MAAA,CAAO,IAAIxD,KAAA,CAAM,0CAA0CR,MAAM,CAAA,CAAE,CAAC,CAAA;EACtE;aACC,GAAI,CAAA;iBACAS,CAAG,EAAA;EAEL,QAAA,IAAA,CAAAsB,gBAAA,CAAiBwB,OAAOxD,SAAS,CAAA;UACtCiE,MAAA,CAAOvD,CAAC,CAAA;EACV;EACF,KAAC,CAAA;EACH;EAAA;EAAA;EAAA;EAAA;IAMA,MAAMuE,UAA+BA,GAAA;MACnC,MAAM1E,MAAS,GAAA,MAAM,IAAK,CAAAwE,YAAA,CAAa,eAAe,CAAA;EACtD,IAAA,IAAA,CAAKzC,iBAAiB/B,MAAW,KAAA,MAAA;MACjC,OAAO,IAAK,CAAA+B,cAAA;EACd;EAAA;EAAA;EAAA;EAAA;EAMA4C,EAAAA,aAAwBA,GAAA;MAClB,IAAA;QACF,OAAOrE,OAAO,IAAK,CAAA6B,SAAA,CAAU,eAAiB,EAAA,EAAE,CAAC,CAAA;eAC1ChC,CAAG,EAAA;QACV,IAAA,CAAK6B,UAAa,GAAA,KAAA;EACX,MAAA,OAAA,OAAA;EACT;EACF;EAAA;EAAA;EAAA;EAAA;IAMA,MAAM4C,UAA+BA,GAAA;EACnC,IAAA,OAAO,KAAKF,UAAW,EAAA;EACzB;EAAA;EAAA;EAAA;EAAA;EAMAG,EAAAA,aAAwBA,GAAA;MAClB,IAAA;QACF,OAAOvE,OAAO,IAAK,CAAA6B,SAAA,CAAU,eAAiB,EAAA,EAAE,CAAC,CAAA;eAC1ChC,CAAG,EAAA;QACV,IAAA,CAAK6B,UAAa,GAAA,KAAA;EACX,MAAA,OAAA,OAAA;EACT;EACF;EAAA;EAAA;EAAA;EAAA;IAMA,MAAM8C,SAA8BA,GAAA;MAClC,MAAM9E,MAAS,GAAA,MAAM,IAAK,CAAAwE,YAAA,CAAa,WAAW,CAAA;EAClD,IAAA,MAAMO,UAAU/E,MAAW,KAAA,MAAA;EAC3B,IAAA,IAAI+E,OAAS,EAAA;QACX,IAAA,CAAKhD,cAAiB,GAAA,KAAA;EACxB;EACO,IAAA,OAAAgD,OAAA;EACT;EAAA;EAAA;EAAA;EAAA;EAMAC,EAAAA,SAAoBA,GAAA;MACd,IAAA;QACF,OAAO1E,OAAO,IAAK,CAAA6B,SAAA,CAAU,WAAa,EAAA,EAAE,CAAC,CAAA;eACtChC,CAAG,EAAA;QACV,IAAA,CAAK6B,UAAa,GAAA,KAAA;EACX,MAAA,OAAA,OAAA;EACT;EACF;EAAA;EAAA;EAAA;EAAA;IAMA,MAAMiD,SAA8BA,GAAA;EAClC,IAAA,OAAO,KAAKH,SAAU,EAAA;EACxB;EAAA;EAAA;EAAA;EAAA;EAMAI,EAAAA,SAAoBA,GAAA;MACd,IAAA;QACF,OAAO5E,OAAO,IAAK,CAAA6B,SAAA,CAAU,WAAa,EAAA,EAAE,CAAC,CAAA;eACtChC,CAAG,EAAA;QACV,IAAA,CAAK6B,UAAa,GAAA,KAAA;EACX,MAAA,OAAA,OAAA;EACT;EACF;EAAA;EAAA;EAAA;EAAA;EAAA;IAOA,MAAMmD,SAASC,OAAkC,EAAA;MAC3C,IAAA;EACF,MAAA,MAAMpF,SAAS,MAAM,IAAA,CAAKwE,aAAa,aAAe,EAAA,CAACY,OAAO,CAAC,CAAA;EACzD,MAAA,MAAAC,KAAA,GAAQ/E,OAAON,MAAM,CAAA;QAEtB,IAAA,CAAAiC,MAAA,CAAOW,GAAI,CAAAwC,OAAA,EAASC,KAAK,CAAA;EACvB,MAAA,OAAAA,KAAA;eACAlF,CAAG,EAAA;QACV,IAAA,CAAK6B,UAAa,GAAA,KAAA;QAClBoB,OAAA,CAAQnD,KAAM,CAAA,CAAA,kBAAA,EAAqBmF,OAAO,CAAA,EAAA,CAAA,EAAMjF,CAAC,CAAA;EAC1C,MAAA,OAAA,EAAA;EACT;EACF;EAAA;EAAA;EAAA;EAAA;EAAA;IAOAmF,YAAYF,OAAyB,EAAA;MAC/B,IAAA;EACF,MAAA,OAAO9E,OAAO,IAAK,CAAA6B,SAAA,CAAU,eAAe,CAACiD,OAAO,CAAC,CAAC,CAAA;eAC/CjF,CAAG,EAAA;QACV,IAAA,CAAK6B,UAAa,GAAA,KAAA;EACX,MAAA,OAAA,EAAA;EACT;EACF;EAAA;EAAA;EAAA;EAAA;EAAA;IAOA,MAAMuD,SAASH,OAAkC,EAAA;EACxC,IAAA,OAAA,IAAA,CAAKD,SAASC,OAAO,CAAA;EAC9B;EAAA;EAAA;EAAA;EAAA;EAAA;IAOAI,YAAYJ,OAAyB,EAAA;MAC/B,IAAA;EACF,MAAA,OAAO9E,OAAO,IAAK,CAAA6B,SAAA,CAAU,eAAe,CAACiD,OAAO,CAAC,CAAC,CAAA;eAC/CjF,CAAG,EAAA;QACV,IAAA,CAAK6B,UAAa,GAAA,KAAA;EACX,MAAA,OAAA,EAAA;EACT;EACF;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAQA,EAAA,MAAMyD,QAASA,CAAAL,OAAA,EAAiBC,KAAoD,EAAA;MAC9E,IAAA;EACI,MAAA,MAAArF,MAAA,GAAS,MAAM,IAAK,CAAAwE,YAAA,CAAa,eAAe,CAACY,OAAA,EAASC,KAAK,CAAC,CAAA;EACtE,MAAA,MAAMN,UAAU/E,MAAW,KAAA,MAAA;EAC3B,MAAA,IAAI+E,OAAS,EAAA;UAEX,IAAA,CAAK9C,MAAO,CAAAW,GAAA,CAAIwC,OAAS,EAAA9E,MAAA,CAAO+E,KAAK,CAAC,CAAA;EACxC;EACO,MAAA,OAAAN,OAAA;eACA5E,CAAG,EAAA;QACV,IAAA,CAAK6B,UAAa,GAAA,KAAA;QAClBoB,OAAA,CAAQnD,MAAM,CAAqBmF,kBAAAA,EAAAA,OAAO,KAAKC,KAAK,CAAA,EAAA,GAAMlF,CAAC,CAAA;EACpD,MAAA,OAAA,KAAA;EACT;EACF;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAQAuF,EAAAA,WAAAA,CAAYN,SAAiBC,KAA0C,EAAA;MACjE,IAAA;EACK,MAAA,OAAA/E,MAAA,CAAO,KAAK6B,SAAU,CAAA,aAAA,EAAe,CAACiD,OAAS,EAAAC,KAAK,CAAC,CAAC,CAAA;eACtDlF,CAAG,EAAA;QACV,IAAA,CAAK6B,UAAa,GAAA,KAAA;EACX,MAAA,OAAA,OAAA;EACT;EACF;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAQA,EAAA,MAAM2D,QAASA,CAAAP,OAAA,EAAiBC,KAAoD,EAAA;EAC3E,IAAA,OAAA,IAAA,CAAKI,QAAS,CAAAL,OAAA,EAASC,KAAK,CAAA;EACrC;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAQAO,EAAAA,WAAAA,CAAYR,SAAiBC,KAA0C,EAAA;MACjE,IAAA;EACK,MAAA,OAAA/E,MAAA,CAAO,KAAK6B,SAAU,CAAA,aAAA,EAAe,CAACiD,OAAS,EAAAC,KAAK,CAAC,CAAC,CAAA;eACtDlF,CAAG,EAAA;QACV,IAAA,CAAK6B,UAAa,GAAA,KAAA;EACX,MAAA,OAAA,OAAA;EACT;EACF;EAAA;EAAA;EAAA;EAAA;IAMA,MAAM6D,MAA2BA,GAAA;MAC3B,IAAA;QACF,MAAM7F,MAAS,GAAA,MAAM,IAAK,CAAAwE,YAAA,CAAa,WAAW,CAAA;QAClD,OAAOxE,MAAW,KAAA,MAAA;eACXG,CAAG,EAAA;QACV,IAAA,CAAK6B,UAAa,GAAA,KAAA;EACVoB,MAAAA,OAAA,CAAAnD,KAAA,CAAM,oBAAoBE,CAAC,CAAA;EAC5B,MAAA,OAAA,KAAA;EACT;EACF;EAAA;EAAA;EAAA;EAAA;EAMA2F,EAAAA,SAAoBA,GAAA;MACd,IAAA;QACF,OAAOxF,OAAO,IAAK,CAAA6B,SAAA,CAAU,WAAa,EAAA,EAAE,CAAC,CAAA;eACtChC,CAAG,EAAA;QACV,IAAA,CAAK6B,UAAa,GAAA,KAAA;EACX,MAAA,OAAA,OAAA;EACT;EACF;EAAA;EAAA;EAAA;EAAA;IAMA,MAAM+D,MAA2BA,GAAA;EAC/B,IAAA,OAAO,KAAKF,MAAO,EAAA;EACrB;EAAA;EAAA;EAAA;EAAA;EAMAG,EAAAA,SAAoBA,GAAA;MACd,IAAA;QACF,OAAO1F,OAAO,IAAK,CAAA6B,SAAA,CAAU,WAAa,EAAA,EAAE,CAAC,CAAA;eACtChC,CAAG,EAAA;QACV,IAAA,CAAK6B,UAAa,GAAA,KAAA;EACX,MAAA,OAAA,OAAA;EACT;EACF;EAAA;EAAA;EAAA;EAAA;IAMA,MAAMiE,YAAgCA,GAAA;MAChC,IAAA;QACF,MAAMjG,MAAS,GAAA,MAAM,IAAK,CAAAwE,YAAA,CAAa,iBAAiB,CAAA;EACnD,MAAA,IAAA,CAAAxC,UAAA,GAAa1B,OAAON,MAAM,CAAA;QAC/B,OAAO,IAAK,CAAAgC,UAAA;eACL7B,CAAG,EAAA;EACFiD,MAAAA,OAAA,CAAAnD,KAAA,CAAM,0BAA0BE,CAAC,CAAA;EAClC,MAAA,OAAA,KAAA;EACT;EACF;EAAA;EAAA;EAAA;EAAA;EAMA+F,EAAAA,eAA0BA,GAAA;MACpB,IAAA;QACF,OAAO5F,OAAO,IAAK,CAAA6B,SAAA,CAAU,iBAAmB,EAAA,EAAE,CAAC,CAAA;eAC5ChC,CAAG,EAAA;EACH,MAAA,OAAA,KAAA;EACT;EACF;EAAA;EAAA;EAAA;EAAA;IAMA,MAAMgG,YAAgCA,GAAA;EACpC,IAAA,OAAO,KAAKF,YAAa,EAAA;EAC3B;EAAA;EAAA;EAAA;EAAA;EAMAG,EAAAA,eAA0BA,GAAA;MACpB,IAAA;QACF,OAAO9F,OAAO,IAAK,CAAA6B,SAAA,CAAU,iBAAmB,EAAA,EAAE,CAAC,CAAA;eAC5ChC,CAAG,EAAA;EACH,MAAA,OAAA,KAAA;EACT;EACF;EAAA;EAAA;EAAA;EAAA;EAAA;IAOA,MAAMkG,eAAeC,SAA6C,EAAA;MAC5D,IAAA;EACF,MAAA,MAAMtG,SAAS,MAAM,IAAA,CAAKwE,aAAa,mBAAqB,EAAA,CAAC8B,SAAS,CAAC,CAAA;EACjE,MAAA,MAAAC,WAAA,GAAcjG,OAAON,MAAM,CAAA;QAEjC,IAAA,CAAKiC,MAAO,CAAAW,GAAA,CAAI,SAAS0D,SAAS,CAAA,GAAIC,WAAW,CAAA;EAC1C,MAAA,OAAAA,WAAA;eACApG,CAAG,EAAA;QACViD,OAAA,CAAQnD,KAAM,CAAA,CAAA,wBAAA,EAA2BqG,SAAS,CAAA,EAAA,CAAA,EAAMnG,CAAC,CAAA;EAClD,MAAA,OAAA,EAAA;EACT;EACF;EAAA;EAAA;EAAA;EAAA;EAAA;IAOAqG,kBAAkBF,SAAoC,EAAA;MAChD,IAAA;EACF,MAAA,OAAOhG,OAAO,IAAK,CAAA6B,SAAA,CAAU,qBAAqB,CAACmE,SAAS,CAAC,CAAC,CAAA;eACvDnG,CAAG,EAAA;EACH,MAAA,OAAA,UAAA;EACT;EACF;EAAA;EAAA;EAAA;EAAA;EAAA;IAOA,MAAMsG,eAAeH,SAA6C,EAAA;EACzD,IAAA,OAAA,IAAA,CAAKD,eAAeC,SAAS,CAAA;EACtC;EAAA;EAAA;EAAA;EAAA;EAAA;IAOAI,kBAAkBJ,SAAoC,EAAA;MAChD,IAAA;EACF,MAAA,OAAOhG,OAAO,IAAK,CAAA6B,SAAA,CAAU,qBAAqB,CAACmE,SAAS,CAAC,CAAC,CAAA;eACvDnG,CAAG,EAAA;EACH,MAAA,OAAA,UAAA;EACT;EACF;EAAA;EAAA;EAAA;EAAA;EAAA;IAOA,MAAMwG,cAAcL,SAA6C,EAAA;MAC3D,IAAA;EACF,MAAA,MAAMtG,SAAS,MAAM,IAAA,CAAKwE,aAAa,kBAAoB,EAAA,CAAC8B,SAAS,CAAC,CAAA;EAChE,MAAA,MAAAM,UAAA,GAAatG,OAAON,MAAM,CAAA;QAEhC,IAAA,CAAKiC,MAAO,CAAAW,GAAA,CAAI,cAAc0D,SAAS,CAAA,GAAIM,UAAU,CAAA;EAC9C,MAAA,OAAAA,UAAA;eACAzG,CAAG,EAAA;QACViD,OAAA,CAAQnD,KAAM,CAAA,CAAA,uBAAA,EAA0BqG,SAAS,CAAA,EAAA,CAAA,EAAMnG,CAAC,CAAA;EACjD,MAAA,OAAA,EAAA;EACT;EACF;EAAA;EAAA;EAAA;EAAA;EAAA;IAOA0G,iBAAiBP,SAAoC,EAAA;MAC/C,IAAA;EACF,MAAA,OAAOhG,OAAO,IAAK,CAAA6B,SAAA,CAAU,oBAAoB,CAACmE,SAAS,CAAC,CAAC,CAAA;eACtDnG,CAAG,EAAA;EACH,MAAA,OAAA,qCAAA;EACT;EACF;EAAA;EAAA;EAAA;EAAA;EAAA;IAOA,MAAM2G,cAAcR,SAA6C,EAAA;EACxD,IAAA,OAAA,IAAA,CAAKK,cAAcL,SAAS,CAAA;EACrC;EAAA;EAAA;EAAA;EAAA;EAAA;IAOAS,iBAAiBT,SAAoC,EAAA;MAC/C,IAAA;EACF,MAAA,OAAOhG,OAAO,IAAK,CAAA6B,SAAA,CAAU,oBAAoB,CAACmE,SAAS,CAAC,CAAC,CAAA;eACtDnG,CAAG,EAAA;EACH,MAAA,OAAA,qCAAA;EACT;EACF;EAAA;EAAA;EAAA;EAAA;IAMA,MAAM6G,aAAkCA,GAAA;MAClC,IAAA;QACF,MAAMhH,MAAS,GAAA,MAAM,IAAK,CAAAwE,YAAA,CAAa,eAAe,CAAA;EACjD,MAAA,IAAA,CAAAzC,cAAA,GAAiBkF,QAAQjH,MAAM,CAAA;QACpC,OAAO,IAAK,CAAA+B,cAAA;eACL5B,CAAG,EAAA;EACFiD,MAAAA,OAAA,CAAAnD,KAAA,CAAM,2BAA2BE,CAAC,CAAA;QAC1C,OAAO,IAAK,CAAA4B,cAAA;EACd;EACF;EAAA;EAAA;EAAA;EAAA;EAMAmF,EAAAA,gBAA4BA,GAAA;MAG1B,OAAO,IAAK,CAAAnF,cAAA;EACd;EAAA;EAAA;EAAA;EAAA;EAAA;EAOArB,EAAAA,EAAAA,CAAGnB,OAAe4H,QAA8C,EAAA;MAC9D,IAAI,CAAC,IAAA,CAAKxF,eAAgB,CAAAiC,GAAA,CAAIrE,KAAK,CAAG,EAAA;EACpC,MAAA,IAAA,CAAKoC,eAAgB,CAAAiB,GAAA,CAAIrD,KAAO,iBAAA,IAAIuC,KAAK,CAAA;EAC3C;MAEA,MAAMuC,SAAY,GAAA,IAAA,CAAK1C,eAAgB,CAAAwB,GAAA,CAAI5D,KAAK,CAAA;EAChD,IAAA,IAAI8E,SAAW,EAAA;EACbA,MAAAA,SAAA,CAAUd,IAAI4D,QAAQ,CAAA;EACxB;EACF;EAAA;EAAA;EAAA;EAAA;EAAA;EAOAC,EAAAA,GAAAA,CAAI7H,OAAe4H,QAA8C,EAAA;MAC/D,MAAM9C,SAAY,GAAA,IAAA,CAAK1C,eAAgB,CAAAwB,GAAA,CAAI5D,KAAK,CAAA;EAEhD,IAAA,IAAI8E,SAAW,EAAA;EACbA,MAAAA,SAAA,CAAUpB,OAAOkE,QAAQ,CAAA;EAErB,MAAA,IAAA9C,SAAA,CAAUgD,SAAS,CAAG,EAAA;EACnB,QAAA,IAAA,CAAA1F,eAAA,CAAgBsB,OAAO1D,KAAK,CAAA;EACnC;EACF;EACF;EACF;EAQgB,SAAA+H,sBAAAA,CAAuBxI,KAAcC,YAAsC,EAAA;EAClF,EAAA,OAAA,IAAIH,aAAc,CAAAE,GAAA,EAAKC,YAAY,CAAA;EAC5C;EAOO,SAASwI,uBAAuBxI,YAAsC,EAAA;EACpE,EAAA,OAAA,IAAIyC,cAAczC,YAAY,CAAA;EACvC;;;;;;;;;;;"}