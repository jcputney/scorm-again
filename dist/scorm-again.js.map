{"version":3,"file":"scorm-again.js","sources":["../src/constants/api_constants.ts","../src/constants/error_codes.ts","../src/constants/regex.ts","../src/exceptions.ts","../src/exceptions/scorm12_exceptions.ts","../src/cmi/common/base_cmi.ts","../src/utilities.ts","../src/cmi/common/validation.ts","../src/cmi/scorm12/validation.ts","../src/services/ValidationService.ts","../src/cmi/common/score.ts","../src/cmi/aicc/core.ts","../src/cmi/common/array.ts","../src/cmi/scorm12/objectives.ts","../src/cmi/scorm12/student_data.ts","../src/cmi/scorm12/student_preference.ts","../src/cmi/scorm12/interactions.ts","../src/cmi/scorm12/cmi.ts","../src/cmi/scorm12/nav.ts","../src/constants/enums.ts","../src/constants/default_settings.ts","../src/helpers/scheduled_commit.ts","../src/services/HttpService.ts","../src/services/EventService.ts","../src/services/SerializationService.ts","../src/services/LoggingService.ts","../src/services/ErrorHandlingService.ts","../src/services/OfflineStorageService.ts","../src/BaseAPI.ts","../src/Scorm12API.ts","../src/exceptions/aicc_exceptions.ts","../src/cmi/aicc/validation.ts","../src/cmi/aicc/evaluation.ts","../src/cmi/aicc/student_preferences.ts","../src/cmi/aicc/student_demographics.ts","../src/cmi/aicc/tries.ts","../src/cmi/aicc/attempts.ts","../src/cmi/aicc/student_data.ts","../src/cmi/aicc/paths.ts","../src/cmi/aicc/cmi.ts","../src/AICC.ts","../src/exceptions/scorm2004_exceptions.ts","../src/cmi/scorm2004/validation.ts","../src/cmi/scorm2004/learner_preference.ts","../src/constants/response_constants.ts","../src/cmi/scorm2004/interactions.ts","../src/cmi/scorm2004/score.ts","../src/cmi/scorm2004/comments.ts","../src/cmi/scorm2004/objectives.ts","../src/cmi/scorm2004/metadata.ts","../src/cmi/scorm2004/learner.ts","../src/cmi/scorm2004/status.ts","../src/cmi/scorm2004/session.ts","../src/cmi/scorm2004/content.ts","../src/cmi/scorm2004/settings.ts","../src/cmi/scorm2004/thresholds.ts","../src/cmi/scorm2004/cmi.ts","../src/cmi/scorm2004/adl.ts","../src/cmi/scorm2004/sequencing/sequencing_rules.ts","../src/cmi/scorm2004/sequencing/rollup_rules.ts","../src/constants/language_constants.ts","../src/cmi/scorm2004/sequencing/activity.ts","../src/cmi/scorm2004/sequencing/activity_tree.ts","../src/cmi/scorm2004/sequencing/sequencing_controls.ts","../src/cmi/scorm2004/sequencing/sequencing.ts","../src/Scorm2004API.ts","../src/ScormAgain.ts"],"sourcesContent":["interface ErrorDescription {\n  basicMessage: string;\n  detailMessage: string;\n}\n\ninterface ErrorDescriptions {\n  [key: string]: ErrorDescription;\n}\n\ninterface ScormConstants {\n  cmi_children: string;\n  core_children: string;\n  score_children: string;\n  comments_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface AiccConstants extends ScormConstants {\n  student_demographics_children: string;\n  tries_children: string;\n  attempt_records_children: string;\n  paths_children: string;\n}\n\ninterface Scorm2004Constants {\n  cmi_children: string;\n  comments_children: string;\n  score_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  adl_data_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface GlobalConstants {\n  SCORM_TRUE: string;\n  SCORM_FALSE: string;\n  STATE_NOT_INITIALIZED: number;\n  STATE_INITIALIZED: number;\n  STATE_TERMINATED: number;\n}\n\nexport const global_constants: GlobalConstants = {\n  SCORM_TRUE: \"true\",\n  SCORM_FALSE: \"false\",\n  STATE_NOT_INITIALIZED: 0,\n  STATE_INITIALIZED: 1,\n  STATE_TERMINATED: 2,\n};\n\nexport const scorm12_constants: ScormConstants = {\n  // Children lists\n  cmi_children:\n    \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions\",\n  core_children:\n    \"student_id,student_name,lesson_location,credit,lesson_status,entry,score,total_time,lesson_mode,exit,session_time\",\n  score_children: \"raw,min,max\",\n  comments_children: \"content,location,time\",\n  objectives_children: \"id,score,status\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio,language,speed,text\",\n  interactions_children:\n    \"id,objectives,time,type,correct_responses,weighting,student_response,result,latency\",\n  error_descriptions: {\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage: \"No specific error code exists to describe the error.\",\n    },\n    \"201\": {\n      basicMessage: \"Invalid argument error\",\n      detailMessage:\n        \"Indicates that an argument represents an invalid data model element or is otherwise incorrect.\",\n    },\n    \"202\": {\n      basicMessage: \"Element cannot have children\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_children\" for a data model element that does not support the \"_children\" suffix.',\n    },\n    \"203\": {\n      basicMessage: \"Element not an array - cannot have count\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_count\" for a data model element that does not support the \"_count\" suffix.',\n    },\n    \"301\": {\n      basicMessage: \"Not initialized\",\n      detailMessage: \"Indicates that an API call was made before the call to lmsInitialize.\",\n    },\n    \"401\": {\n      basicMessage: \"Not implemented error\",\n      detailMessage:\n        \"The data model element indicated in a call to LMSGetValue or LMSSetValue is valid, but was not implemented by this LMS. SCORM 1.2 defines a set of data model elements as being optional for an LMS to implement.\",\n    },\n    \"402\": {\n      basicMessage: \"Invalid set value, element is a keyword\",\n      detailMessage:\n        'Indicates that LMSSetValue was called on a data model element that represents a keyword (elements that end in \"_children\" and \"_count\").',\n    },\n    \"403\": {\n      basicMessage: \"Element is read only\",\n      detailMessage: \"LMSSetValue was called with a data model element that can only be read.\",\n    },\n    \"404\": {\n      basicMessage: \"Element is write only\",\n      detailMessage: \"LMSGetValue was called on a data model element that can only be written to.\",\n    },\n    \"405\": {\n      basicMessage: \"Incorrect Data Type\",\n      detailMessage:\n        \"LMSSetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a LMSSetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\nexport const aicc_constants: AiccConstants = {\n  ...scorm12_constants,\n  ...{\n    cmi_children:\n      \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions,evaluation\",\n    student_preference_children:\n      \"audio,language,lesson_type,speed,text,text_color,text_location,text_size,video,windows\",\n    student_data_children: \"attempt_number,tries,mastery_score,max_time_allowed,time_limit_action\",\n    student_demographics_children:\n      \"city,class,company,country,experience,familiar_name,instructor_name,title,native_language,state,street_address,telephone,years_experience\",\n    tries_children: \"time,status,score\",\n    attempt_records_children: \"score,lesson_status\",\n    paths_children: \"location_id,date,time,status,why_left,time_in_element\",\n  },\n};\n\nexport const scorm2004_constants: Scorm2004Constants = {\n  // Children lists\n  cmi_children:\n    \"_version,comments_from_learner,comments_from_lms,completion_status,credit,entry,exit,interactions,launch_data,learner_id,learner_name,learner_preference,location,max_time_allowed,mode,objectives,progress_measure,scaled_passing_score,score,session_time,success_status,suspend_data,time_limit_action,total_time\",\n  comments_children: \"comment,timestamp,location\",\n  score_children: \"max,raw,scaled,min\",\n  objectives_children: \"progress_measure,completion_status,success_status,description,score,id\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio_level,audio_captioning,delivery_speed,language\",\n  interactions_children:\n    \"id,type,objectives,timestamp,correct_responses,weighting,learner_response,result,latency,description\",\n  adl_data_children: \"id,store\",\n  error_descriptions: {\n    \"0\": {\n      basicMessage: \"No Error\",\n      detailMessage: \"No error occurred, the previous API call was successful.\",\n    },\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage: \"No specific error code exists to describe the error.\",\n    },\n    \"102\": {\n      basicMessage: \"General Initialization Failure\",\n      detailMessage: \"Call to Initialize failed for an unknown reason.\",\n    },\n    \"103\": {\n      basicMessage: \"Already Initialized\",\n      detailMessage: \"Call to Initialize failed because Initialize was already called.\",\n    },\n    \"104\": {\n      basicMessage: \"Content Instance Terminated\",\n      detailMessage: \"Call to Initialize failed because Terminate was already called.\",\n    },\n    \"111\": {\n      basicMessage: \"General Termination Failure\",\n      detailMessage: \"Call to Terminate failed for an unknown reason.\",\n    },\n    \"112\": {\n      basicMessage: \"Termination Before Initialization\",\n      detailMessage: \"Call to Terminate failed because it was made before the call to Initialize.\",\n    },\n    \"113\": {\n      basicMessage: \"Termination After Termination\",\n      detailMessage: \"Call to Terminate failed because Terminate was already called.\",\n    },\n    \"122\": {\n      basicMessage: \"Retrieve Data Before Initialization\",\n      detailMessage: \"Call to GetValue failed because it was made before the call to Initialize.\",\n    },\n    \"123\": {\n      basicMessage: \"Retrieve Data After Termination\",\n      detailMessage: \"Call to GetValue failed because it was made after the call to Terminate.\",\n    },\n    \"132\": {\n      basicMessage: \"Store Data Before Initialization\",\n      detailMessage: \"Call to SetValue failed because it was made before the call to Initialize.\",\n    },\n    \"133\": {\n      basicMessage: \"Store Data After Termination\",\n      detailMessage: \"Call to SetValue failed because it was made after the call to Terminate.\",\n    },\n    \"142\": {\n      basicMessage: \"Commit Before Initialization\",\n      detailMessage: \"Call to Commit failed because it was made before the call to Initialize.\",\n    },\n    \"143\": {\n      basicMessage: \"Commit After Termination\",\n      detailMessage: \"Call to Commit failed because it was made after the call to Terminate.\",\n    },\n    \"201\": {\n      basicMessage: \"General Argument Error\",\n      detailMessage:\n        \"An invalid argument was passed to an API method (usually indicates that Initialize, Commit or Terminate did not receive the expected empty string argument.\",\n    },\n    \"301\": {\n      basicMessage: \"General Get Failure\",\n      detailMessage:\n        \"Indicates a failed GetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"351\": {\n      basicMessage: \"General Set Failure\",\n      detailMessage:\n        \"Indicates a failed SetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"391\": {\n      basicMessage: \"General Commit Failure\",\n      detailMessage:\n        \"Indicates a failed Commit call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"401\": {\n      basicMessage: \"Undefined Data Model Element\",\n      detailMessage:\n        \"The data model element name passed to GetValue or SetValue is not a valid SCORM data model element.\",\n    },\n    \"402\": {\n      basicMessage: \"Unimplemented Data Model Element\",\n      detailMessage:\n        \"The data model element indicated in a call to GetValue or SetValue is valid, but was not implemented by this LMS. In SCORM 2004, this error would indicate an LMS that is not fully SCORM conformant.\",\n    },\n    \"403\": {\n      basicMessage: \"Data Model Element Value Not Initialized\",\n      detailMessage:\n        \"Attempt to read a data model element that has not been initialized by the LMS or through a SetValue call. This error condition is often reached during normal execution of a SCO.\",\n    },\n    \"404\": {\n      basicMessage: \"Data Model Element Is Read Only\",\n      detailMessage: \"SetValue was called with a data model element that can only be read.\",\n    },\n    \"405\": {\n      basicMessage: \"Data Model Element Is Write Only\",\n      detailMessage: \"GetValue was called on a data model element that can only be written to.\",\n    },\n    \"406\": {\n      basicMessage: \"Data Model Element Type Mismatch\",\n      detailMessage:\n        \"SetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Data Model Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a SetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\n","export type ErrorCode = {\n  [key: string]: number;\n};\n\nexport const global_errors: ErrorCode = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nexport const scorm12_errors: ErrorCode = {\n  ...global_errors,\n  RETRIEVE_BEFORE_INIT: 301,\n  STORE_BEFORE_INIT: 301,\n  COMMIT_BEFORE_INIT: 301,\n  ARGUMENT_ERROR: 201,\n  CHILDREN_ERROR: 202,\n  COUNT_ERROR: 203,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 401,\n  VALUE_NOT_INITIALIZED: 301,\n  INVALID_SET_VALUE: 402,\n  READ_ONLY_ELEMENT: 403,\n  WRITE_ONLY_ELEMENT: 404,\n  TYPE_MISMATCH: 405,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n\nexport const scorm2004_errors: ErrorCode = {\n  ...global_errors,\n  INITIALIZATION_FAILED: 102,\n  INITIALIZED: 103,\n  TERMINATED: 104,\n  TERMINATION_FAILURE: 111,\n  TERMINATION_BEFORE_INIT: 112,\n  MULTIPLE_TERMINATIONS: 113,\n  RETRIEVE_BEFORE_INIT: 122,\n  RETRIEVE_AFTER_TERM: 123,\n  STORE_BEFORE_INIT: 132,\n  STORE_AFTER_TERM: 133,\n  COMMIT_BEFORE_INIT: 142,\n  COMMIT_AFTER_TERM: 143,\n  ARGUMENT_ERROR: 201,\n  GENERAL_GET_FAILURE: 301,\n  GENERAL_SET_FAILURE: 351,\n  GENERAL_COMMIT_FAILURE: 391,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 402,\n  VALUE_NOT_INITIALIZED: 403,\n  READ_ONLY_ELEMENT: 404,\n  WRITE_ONLY_ELEMENT: 405,\n  TYPE_MISMATCH: 406,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n","export const scorm12_regex = {\n  CMIString256: \"^.{0,255}$\",\n  CMIString4096: \"^.{0,4096}$\",\n  CMITime: \"^(?:[01]\\\\d|2[0123]):(?:[012345]\\\\d):(?:[012345]\\\\d)$\",\n  CMITimespan: \"^([0-9]{2,}):([0-9]{2}):([0-9]{2})(.[0-9]{1,2})?$\",\n\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{0,3})(.[0-9]*)?$\",\n\n  CMIIdentifier: \"^[\\\\u0021-\\\\u007E\\\\s]{0,255}$\",\n  CMIFeedback: \"^.{0,255}$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMIStatus: \"^(passed|completed|failed|incomplete|browsed)$\",\n  CMIStatus2: \"^(passed|completed|failed|incomplete|browsed|not attempted)$\",\n  CMIExit: \"^(time-out|suspend|logout|)$\",\n  CMIType: \"^(true-false|choice|fill-in|matching|performance|sequencing|likert|numeric)$\",\n  CMIResult: \"^(correct|wrong|unanticipated|neutral|([0-9]{0,3})?(\\\\.[0-9]*)?)$\",\n  NAVEvent: \"^(previous|continue)$\",\n  // Data ranges\n  score_range: \"0#100\",\n  audio_range: \"-1#100\",\n  speed_range: \"-100#100\",\n  weighting_range: \"-100#100\",\n  text_range: \"-1#1\",\n};\nexport const aicc_regex = {\n  ...scorm12_regex,\n  ...{\n    CMIIdentifier: \"^\\\\w{1,255}$\",\n  },\n};\nexport const scorm2004_regex = {\n  CMIString200: \"^[\\\\u0000-\\\\uFFFF]{0,200}$\",\n  CMIString250: \"^[\\\\u0000-\\\\uFFFF]{0,250}$\",\n  CMIString1000: \"^[\\\\u0000-\\\\uFFFF]{0,1000}$\",\n  CMIString4000: \"^[\\\\u0000-\\\\uFFFF]{0,4000}$\",\n  CMIString64000: \"^[\\\\u0000-\\\\uFFFF]{0,64000}$\",\n  CMILang: \"^([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?$|^$\",\n\n  CMILangString250: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,250}$)?$\",\n\n  CMILangcr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?}))(.*?)$\",\n\n  CMILangString250cr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?})?(.{0,250})?)?$\",\n\n  CMILangString4000: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,4000}$)?$\",\n\n  CMITime:\n    \"^(19[7-9]{1}[0-9]{1}|20[0-2]{1}[0-9]{1}|203[0-8]{1})((-(0[1-9]{1}|1[0-2]{1}))((-(0[1-9]{1}|[1-2]{1}[0-9]{1}|3[0-1]{1}))(T([0-1]{1}[0-9]{1}|2[0-3]{1})((:[0-5]{1}[0-9]{1})((:[0-5]{1}[0-9]{1})((\\\\.[0-9]{1,6})((Z|([+|-]([0-1]{1}[0-9]{1}|2[0-3]{1})))(:[0-5]{1}[0-9]{1})?)?)?)?)?)?)?)?$\",\n  CMITimespan:\n    \"^P(?:([.,\\\\d]+)Y)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)W)?(?:([.,\\\\d]+)D)?(?:T?(?:([.,\\\\d]+)H)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)S)?)?$\",\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{1,5})(\\\\.[0-9]{1,18})?$\",\n  CMIIdentifier: \"^\\\\S{1,250}[a-zA-Z0-9]$\",\n  CMIShortIdentifier: \"^[\\\\w\\\\.\\\\-\\\\_]{1,250}$\",\n  CMILongIdentifier: \"^(?:(?!urn:)\\\\S{1,4000}|urn:[A-Za-z0-9-]{1,31}:\\\\S{1,4000}|.{1,4000})$\",\n  // need to re-examine this\n  CMIFeedback: \"^.*$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  CMIIndexStore: \".N(\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMICStatus: \"^(completed|incomplete|not attempted|unknown)$\",\n  CMISStatus: \"^(passed|failed|unknown)$\",\n  CMIExit: \"^(time-out|suspend|logout|normal)$\",\n  CMIType:\n    \"^(true-false|choice|fill-in|long-fill-in|matching|performance|sequencing|likert|numeric|other)$\",\n  CMIResult: \"^(correct|incorrect|unanticipated|neutral|-?([0-9]{1,4})(\\\\.[0-9]{1,18})?)$\",\n  NAVEvent:\n    \"^(previous|continue|exit|exitAll|abandon|abandonAll|suspendAll|_none_|(\\\\{target=(?<choice_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?choice|(\\\\{target=(?<jump_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?jump)$\",\n\n  NAVBoolean: \"^(unknown|true|false$)\",\n  NAVTarget: \"^{target=\\\\S{0,}[a-zA-Z0-9-_]+}$\",\n  // Data ranges\n  scaled_range: \"-1#1\",\n  audio_range: \"0#999.9999999\",\n  speed_range: \"0#999.9999999\",\n  text_range: \"-1#1\",\n  progress_range: \"0#1\",\n};\n","type APIError = {\n  errorCode: number;\n  errorMessage: string;\n  detailedMessage: string;\n};\n\nexport class BaseScormValidationError extends Error {\n  constructor(CMIElement: string, errorCode: number) {\n    super(`${CMIElement} : ${errorCode.toString()}`);\n    this._errorCode = errorCode;\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, BaseScormValidationError.prototype);\n  }\n\n  private readonly _errorCode: number;\n\n  /**\n   * Getter for _errorCode\n   * @return {number}\n   */\n  get errorCode(): number {\n    return this._errorCode;\n  }\n}\n\n/**\n * Base Validation Exception\n */\nexport class ValidationError extends BaseScormValidationError implements APIError {\n  /**\n   * Constructor to take in an error message and code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   * @param {string} errorMessage\n   * @param {string} detailedMessage\n   */\n  constructor(\n    CMIElement: string,\n    errorCode: number,\n    errorMessage: string,\n    detailedMessage?: string,\n  ) {\n    super(CMIElement, errorCode);\n    this.message = `${CMIElement} : ${errorMessage}`;\n    this._errorMessage = errorMessage;\n    if (detailedMessage) {\n      this._detailedMessage = detailedMessage;\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  private readonly _errorMessage: string;\n  private readonly _detailedMessage: string = \"\";\n\n  /**\n   * Getter for _errorMessage\n   * @return {string}\n   */\n  get errorMessage(): string {\n    return this._errorMessage;\n  }\n\n  /**\n   * Getter for _detailedMessage\n   * @return {string}\n   */\n  get detailedMessage(): string {\n    return this._detailedMessage;\n  }\n}\n","import { ValidationError } from \"../exceptions\";\nimport { scorm12_constants } from \"../constants/api_constants\";\n\nconst scorm12_errors = scorm12_constants.error_descriptions;\n\n/**\n * SCORM 1.2 Validation Error\n */\nexport class Scorm12ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm12_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm12_errors[String(errorCode)].basicMessage,\n        scorm12_errors[String(errorCode)].detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm12_errors[\"101\"].basicMessage,\n        scorm12_errors[\"101\"].detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm12ValidationError.prototype);\n  }\n}\n","/**\n * Base class for API cmi objects\n */\nexport abstract class BaseCMI {\n  jsonString = false;\n  protected readonly _cmi_element: string;\n  protected _initialized = false;\n  private _start_time: number | undefined;\n\n  /**\n   * Constructor for BaseCMI\n   * @param {string} cmi_element\n   */\n  constructor(cmi_element: string) {\n    this._cmi_element = cmi_element;\n  }\n\n  /**\n   * Getter for _initialized\n   * @return {boolean}\n   */\n  get initialized(): boolean {\n    return this._initialized;\n  }\n\n  /**\n   * Getter for _start_time\n   * @return {number | undefined}\n   */\n  get start_time(): number | undefined {\n    return this._start_time;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize(): void {\n    this._initialized = true;\n  }\n\n  /**\n   * Called when the player should override the 'session_time' provided by\n   * the module\n   */\n  setStartTime(): void {\n    this._start_time = new Date().getTime();\n  }\n\n  abstract reset(): void;\n}\n\n/**\n * Base class for cmi root objects\n */\nexport abstract class BaseRootCMI extends BaseCMI {\n  abstract getCurrentTotalTime(): string;\n}\n","/**\n * Constants for time conversion calculations.\n * These are used throughout the codebase for converting between different time formats.\n */\nexport const SECONDS_PER_SECOND = 1.0;\nexport const SECONDS_PER_MINUTE = 60;\nexport const SECONDS_PER_HOUR = 60 * SECONDS_PER_MINUTE;\nexport const SECONDS_PER_DAY = 24 * SECONDS_PER_HOUR;\n\ntype Designation = {\n  [key: string]: number;\n};\n\n/**\n * A record with string keys and unknown values.\n * This is a more type-safe alternative to using `any`.\n */\nexport type StringKeyMap = Record<string, unknown>;\n\nconst designations: Designation = {\n  D: SECONDS_PER_DAY,\n  H: SECONDS_PER_HOUR,\n  M: SECONDS_PER_MINUTE,\n  S: SECONDS_PER_SECOND,\n};\n\n/**\n * Converts a number of seconds to a formatted time string in HH:MM:SS format.\n * This function handles decimal seconds and ensures proper formatting with leading zeros.\n *\n * @param {number|null} totalSeconds - The total number of seconds to convert. If null or negative, returns \"00:00:00\".\n * @return {string} A formatted time string in HH:MM:SS format, with up to 2 decimal places for seconds if applicable.\n *\n * @example\n * // Returns \"01:30:45\"\n * getSecondsAsHHMMSS(5445);\n *\n * @example\n * // Returns \"00:00:30.5\"\n * getSecondsAsHHMMSS(30.5);\n *\n * @example\n * // Returns \"00:00:00\"\n * getSecondsAsHHMMSS(null);\n */\nexport const getSecondsAsHHMMSS = memoize((totalSeconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!totalSeconds || totalSeconds <= 0) {\n    return \"00:00:00\";\n  }\n\n  const hours = Math.floor(totalSeconds / SECONDS_PER_HOUR);\n  const dateObj = new Date(totalSeconds * 1000);\n  const minutes = dateObj.getUTCMinutes();\n  // make sure we add any possible decimal value\n  const seconds = dateObj.getSeconds();\n  const ms = totalSeconds % 1.0;\n  let msStr = \"\";\n\n  if (countDecimals(ms) > 0) {\n    if (countDecimals(ms) > 2) {\n      msStr = ms.toFixed(2);\n    } else {\n      msStr = String(ms);\n    }\n\n    msStr = \".\" + msStr.split(\".\")[1];\n  }\n\n  return (hours + \":\" + minutes + \":\" + seconds).replace(/\\b\\d\\b/g, \"0$&\") + msStr;\n});\n\n/**\n * Converts a number of seconds to an ISO 8601 duration string (e.g., \"PT1H30M45S\").\n * This function handles the complexity of formatting according to the ISO 8601 standard,\n * including the proper placement of the \"T\" separator for time components.\n *\n * @param {number|null} seconds - The number of seconds to convert. If null or negative, returns \"PT0S\".\n * @return {string} An ISO 8601 formatted duration string.\n *\n * @example\n * // Returns \"PT1H30M45S\" (1 hour, 30 minutes, 45 seconds)\n * getSecondsAsISODuration(5445);\n *\n * @example\n * // Returns \"PT30.5S\" (30.5 seconds)\n * getSecondsAsISODuration(30.5);\n *\n * @example\n * // Returns \"P1DT1H\" (1 day, 1 hour)\n * getSecondsAsISODuration(90000);\n *\n * @example\n * // Returns \"PT0S\" (0 seconds)\n * getSecondsAsISODuration(null);\n */\nexport const getSecondsAsISODuration = memoize((seconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!seconds || seconds <= 0) {\n    return \"PT0S\";\n  }\n\n  let duration = \"P\";\n  let remainder = seconds;\n\n  // Convert to array of entries and use functional methods\n  const designationEntries = Object.entries(designations);\n\n  // Process each time designation\n  designationEntries.forEach(([designationsKey, current_seconds]) => {\n    let value = Math.floor(remainder / current_seconds);\n    remainder = remainder % current_seconds;\n\n    // Limit decimal places\n    if (countDecimals(remainder) > 2) {\n      remainder = Number(Number(remainder).toFixed(2));\n    }\n\n    // If we have anything left in the remainder, and we're currently adding\n    // seconds to the duration, go ahead and add the decimal to the seconds\n    if (designationsKey === \"S\" && remainder > 0) {\n      value += remainder;\n    }\n\n    if (value) {\n      // Add the 'T' separator for time components if needed\n      const needsTimeSeparator =\n        (duration.indexOf(\"D\") > 0 || [\"H\", \"M\", \"S\"].includes(designationsKey)) &&\n        duration.indexOf(\"T\") === -1;\n\n      if (needsTimeSeparator) {\n        duration += \"T\";\n      }\n\n      duration += `${value}${designationsKey}`;\n    }\n  });\n\n  return duration;\n});\n\n/**\n * Converts a time string in HH:MM:SS format to the equivalent number of seconds.\n * This function is flexible and can handle various input types, converting them to strings as needed.\n *\n * @param {string|number|boolean|null} timeString - The time string to convert, typically in HH:MM:SS format.\n *                                                 If not a string, it will be converted to one.\n *                                                 If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} timeRegex - The regular expression used to validate the time string format.\n *                                    If a string is provided, it will be converted to a RegExp.\n * @return {number} The total number of seconds represented by the time string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getTimeAsSeconds(\"01:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getTimeAsSeconds(\"invalid\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 30 (converts number to string \"30\" then parses as 0:0:30)\n * getTimeAsSeconds(30, /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport const getTimeAsSeconds = memoize(\n  (timeString: string | number | boolean | null, timeRegex: RegExp | string): number => {\n    if (typeof timeString === \"number\" || typeof timeString === \"boolean\") {\n      timeString = String(timeString);\n    }\n    if (typeof timeRegex === \"string\") {\n      timeRegex = new RegExp(timeRegex);\n    }\n    if (!timeString || !timeString?.match?.(timeRegex)) {\n      return 0;\n    }\n\n    const parts = timeString.split(\":\");\n    const hours = Number(parts[0]);\n    const minutes = Number(parts[1]);\n    const seconds = Number(parts[2]);\n    return hours * 3600 + minutes * 60 + seconds;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (timeString, timeRegex) => {\n    const timeStr = typeof timeString === \"string\" ? timeString : String(timeString ?? \"\");\n    const regexStr = typeof timeRegex === \"string\" ? timeRegex : (timeRegex?.toString() ?? \"\");\n    return `${timeStr}:${regexStr}`;\n  },\n);\n\n/**\n * Converts an ISO 8601 duration string (e.g., \"PT1H30M45S\") to the equivalent number of seconds.\n * This function parses the duration string using a regular expression to extract years, days,\n * hours, minutes, and seconds components.\n *\n * @param {string|null} duration - The ISO 8601 duration string to convert.\n *                                If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n *                                       The regex should have capture groups for years, days, hours, minutes, and seconds.\n * @return {number} The total number of seconds represented by the duration string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getDurationAsSeconds(\"PT1H30M45S\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 90000 (1 day, 1 hour)\n * getDurationAsSeconds(\"P1DT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getDurationAsSeconds(\"invalid\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport const getDurationAsSeconds = memoize(\n  (duration: string | null, durationRegex: RegExp | string): number => {\n    if (typeof durationRegex === \"string\") {\n      durationRegex = new RegExp(durationRegex);\n    }\n\n    if (!duration || !duration?.match?.(durationRegex)) {\n      return 0;\n    }\n\n    const [, years, _, , days, hours, minutes, seconds] =\n      new RegExp(durationRegex).exec?.(duration) ?? [];\n    let result = 0.0;\n    result += Number(seconds) || 0.0;\n    result += Number(minutes) * 60.0 || 0.0;\n    result += Number(hours) * 3600.0 || 0.0;\n    result += Number(days) * (60 * 60 * 24.0) || 0.0;\n    result += Number(years) * (60 * 60 * 24 * 365.0) || 0.0;\n    return result;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (duration, durationRegex) => {\n    const durationStr = duration ?? \"\";\n    const regexStr =\n      typeof durationRegex === \"string\" ? durationRegex : (durationRegex?.toString() ?? \"\");\n    return `${durationStr}:${regexStr}`;\n  },\n);\n\n/**\n * Adds together two ISO 8601 duration strings and returns the result as a new ISO 8601 duration string.\n * This function works by converting both durations to seconds, adding them together, and then\n * converting the result back to an ISO 8601 duration string.\n *\n * @param {string} first - The first ISO 8601 duration string.\n * @param {string} second - The second ISO 8601 duration string.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n * @return {string} A new ISO 8601 duration string representing the sum of the two input durations.\n *\n * @example\n * // Returns \"PT2H\" (1 hour + 1 hour = 2 hours)\n * addTwoDurations(\"PT1H\", \"PT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"PT1H30M\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addTwoDurations(\"PT1H\", \"PT30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"P1DT1H30M\" (1 day + 1 hour and 30 minutes = 1 day, 1 hour, and 30 minutes)\n * addTwoDurations(\"P1D\", \"PT1H30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport function addTwoDurations(\n  first: string,\n  second: string,\n  durationRegex: RegExp | string,\n): string {\n  const regex: RegExp =\n    typeof durationRegex === \"string\" ? new RegExp(durationRegex) : durationRegex;\n  return getSecondsAsISODuration(\n    getDurationAsSeconds(first, regex) + getDurationAsSeconds(second, regex),\n  );\n}\n\n/**\n * Adds together two time strings in HH:MM:SS format and returns the result as a new time string.\n * This function works by converting both time strings to seconds, adding them together, and then\n * converting the result back to an HH:MM:SS format.\n *\n * @param {string} first - The first time string in HH:MM:SS format.\n * @param {string} second - The second time string in HH:MM:SS format.\n * @param {RegExp|string} timeRegex - The regular expression used to validate and parse the time strings.\n *                                   If a string is provided, it will be converted to a RegExp.\n * @return {string} A new time string in HH:MM:SS format representing the sum of the two input times.\n *\n * @example\n * // Returns \"02:00:00\" (1 hour + 1 hour = 2 hours)\n * addHHMMSSTimeStrings(\"01:00:00\", \"01:00:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:00\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:45\" (1 hour + 30 minutes and 45 seconds = 1 hour, 30 minutes, and 45 seconds)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport function addHHMMSSTimeStrings(\n  first: string,\n  second: string,\n  timeRegex: RegExp | string,\n): string {\n  if (typeof timeRegex === \"string\") {\n    timeRegex = new RegExp(timeRegex);\n  }\n  return getSecondsAsHHMMSS(\n    getTimeAsSeconds(first, timeRegex) + getTimeAsSeconds(second, timeRegex),\n  );\n}\n\n/**\n * Flattens a nested JSON object into a flat object with dot notation for nested properties.\n * This function recursively traverses the object and creates new keys using dot notation\n * for nested objects and bracket notation for arrays.\n *\n * @param {StringKeyMap} data - The nested object to flatten.\n * @return {StringKeyMap} A flattened object where nested properties are represented with dot notation.\n *\n * @example\n * // Returns { \"a\": 1, \"b.c\": 2, \"b.d\": 3, \"e[0]\": 4, \"e[1]\": 5 }\n * flatten({\n *   a: 1,\n *   b: { c: 2, d: 3 },\n *   e: [4, 5]\n * });\n *\n * @example\n * // Returns { \"\": [] } for an empty array\n * flatten([]);\n *\n * @example\n * // Returns { \"\": {} } for an empty object\n * flatten({});\n */\nexport function flatten(data: StringKeyMap): StringKeyMap {\n  const result: StringKeyMap = {};\n\n  /**\n   * Recurse through the object\n   * @param {*} cur\n   * @param {*} prop\n   */\n  function recurse(cur: any, prop: any) {\n    if (Object(cur) !== cur) {\n      result[prop] = cur;\n    } else if (Array.isArray(cur)) {\n      // Use forEach instead of for loop\n      cur.forEach((item, i) => {\n        recurse(item, `${prop}[${i}]`);\n      });\n\n      if (cur.length === 0) result[prop] = [];\n    } else {\n      const keys = Object.keys(cur).filter((p) => Object.prototype.hasOwnProperty.call(cur, p));\n\n      const isEmpty = keys.length === 0;\n\n      // Use forEach instead of for...in loop\n      keys.forEach((p) => {\n        recurse(cur[p], prop ? `${prop}.${p}` : p);\n      });\n\n      if (isEmpty && prop) result[prop] = {};\n    }\n  }\n\n  recurse(data, \"\");\n  return result;\n}\n\n/**\n * Converts a flattened object back into a nested object structure.\n * This function is the inverse of `flatten()`. It parses dot notation and bracket notation\n * in property names to recreate the original nested structure.\n *\n * @param {StringKeyMap} data - The flattened object to unflatten.\n * @return {object} A nested object recreated from the flattened structure.\n *\n * @example\n * // Returns { a: 1, b: { c: 2, d: 3 }, e: [4, 5] }\n * unflatten({\n *   \"a\": 1,\n *   \"b.c\": 2,\n *   \"b.d\": 3,\n *   \"e[0]\": 4,\n *   \"e[1]\": 5\n * });\n *\n * @example\n * // Handles array indices correctly\n * unflatten({\n *   \"users[0].name\": \"John\",\n *   \"users[0].email\": \"john@example.com\",\n *   \"users[1].name\": \"Jane\",\n *   \"users[1].email\": \"jane@example.com\"\n * });\n * // Returns:\n * // {\n * //   users: [\n * //     { name: \"John\", email: \"john@example.com\" },\n * //     { name: \"Jane\", email: \"jane@example.com\" }\n * //   ]\n * // }\n */\nexport function unflatten(data: StringKeyMap): object {\n  \"use strict\";\n\n  if (Object(data) !== data || Array.isArray(data)) return data;\n  const result: StringKeyMap = {};\n\n  // Regex pattern for parsing property paths\n  const pattern = /\\.?([^.[\\]]+)|\\[(\\d+)]/g;\n\n  // Get all own properties and process them\n  Object.keys(data)\n    .filter((p) => Object.prototype.hasOwnProperty.call(data, p))\n    .forEach((p) => {\n      let cur = result;\n      let prop = \"\";\n\n      // Create a new regex instance for each property to reset lastIndex\n      const regex = new RegExp(pattern);\n\n      // Process all matches in the property path\n      Array.from({ length: p.match(new RegExp(pattern, \"g\"))?.length ?? 0 }, () =>\n        regex.exec(p),\n      ).forEach((m) => {\n        if (m) {\n          // Create array or object as needed\n          cur = (cur[prop] ?? (cur[prop] = m[2] ? [] : ({} as StringKeyMap))) as StringKeyMap;\n          prop = m[2] || m[1];\n        }\n      });\n\n      cur[prop] = data[p];\n    });\n\n  return (result[\"\"] ?? result) as object;\n}\n\n/**\n * Counts the number of decimal places in a number.\n * This function handles both integer and floating-point numbers.\n *\n * @param {number} num - The number to analyze.\n * @return {number} The number of decimal places. Returns 0 for integers or if the number doesn't have a decimal point.\n *\n * @example\n * // Returns 0\n * countDecimals(42);\n *\n * @example\n * // Returns 2\n * countDecimals(3.14);\n *\n * @example\n * // Returns 5\n * countDecimals(1.23456);\n */\nexport function countDecimals(num: number): number {\n  if (Math.floor(num) === num || String(num)?.indexOf?.(\".\") < 0) return 0;\n  const parts = num.toString().split(\".\")?.[1];\n  return parts?.length ?? 0;\n}\n\n/**\n * Formats SCORM messages for consistent and readable logging.\n * This function pads the function name and CMI element to create aligned log messages\n * that are easier to read in log files or console output.\n *\n * @param {string} functionName - The name of the function that generated the message.\n * @param {string} message - The message content to be logged.\n * @param {string} [CMIElement] - Optional. The CMI element related to the message.\n * @return {string} A formatted message string with consistent padding.\n *\n * @example\n * // Returns \"initialize          : Successfully initialized\"\n * formatMessage(\"initialize\", \"Successfully initialized\");\n *\n * @example\n * // Returns \"getValue            : cmi.core.student_id                                             : 12345\"\n * formatMessage(\"getValue\", \"12345\", \"cmi.core.student_id\");\n *\n * @example\n * // Returns \"setValue            : cmi.core.lesson_status                                          : completed\"\n * formatMessage(\"setValue\", \"completed\", \"cmi.core.lesson_status\");\n */\nexport function formatMessage(functionName: string, message: string, CMIElement?: string): string {\n  const baseLength = 20;\n\n  // Use string padding instead of loops\n  const paddedFunction = functionName.padEnd(baseLength);\n  let messageString = `${paddedFunction}: `;\n\n  if (CMIElement) {\n    const CMIElementBaseLength = 70;\n    // Add CMIElement and pad to the required length\n    messageString += CMIElement;\n    messageString = messageString.padEnd(CMIElementBaseLength);\n  }\n\n  // Add the message (or empty string if null/undefined)\n  messageString += message ?? \"\";\n\n  return messageString;\n}\n\n/**\n * Checks if a string contains a specific pattern using regular expression matching.\n * This function is a wrapper around JavaScript's String.match() method that handles\n * null/undefined values gracefully.\n *\n * @param {string} str - The string to search within. If null or undefined, returns false.\n * @param {string} tester - The pattern to search for. Can be a regular expression pattern.\n * @return {boolean} True if the pattern is found in the string, false otherwise.\n *\n * @example\n * // Returns true\n * stringMatches(\"Hello, world!\", \"world\");\n *\n * @example\n * // Returns true\n * stringMatches(\"The quick brown fox\", \"\\\\w+\\\\s+\\\\w+\");\n *\n * @example\n * // Returns false\n * stringMatches(\"Hello, world!\", \"universe\");\n *\n * @example\n * // Returns false (handles null gracefully)\n * stringMatches(null, \"test\");\n */\nexport function stringMatches(str: string, tester: string): boolean {\n  return str?.match(tester) !== null;\n}\n\n/**\n * Creates a memoized (cached) version of a function for performance optimization.\n * This function caches the results of previous calls with the same arguments,\n * avoiding redundant calculations for repeated calls with the same input.\n *\n * @template T - The type of the function to memoize\n * @param {T} fn - The function to memoize\n * @param {Function} [keyFn] - Optional function to generate a custom cache key.\n *                           Useful for functions with complex arguments that can't be serialized.\n * @return {T} A memoized version of the input function with the same signature\n *\n * @example\n * // Basic usage with a simple function\n * const memoizedAdd = memoize((a, b) => {\n *   console.log('Calculating...');\n *   return a + b;\n * });\n *\n * memoizedAdd(1, 2); // Logs \"Calculating...\" and returns 3\n * memoizedAdd(1, 2); // Returns 3 without logging (uses cached result)\n *\n * @example\n * // Using a custom key function for objects that can't be serialized\n * const memoizedProcessUser = memoize(\n *   (user) => {\n *     console.log('Processing user...');\n *     return { ...user, processed: true };\n *   },\n *   (user) => user.id // Use user.id as the cache key\n * );\n *\n * memoizedProcessUser({ id: 123, name: 'John' }); // Logs and processes\n * memoizedProcessUser({ id: 123, name: 'John' }); // Uses cached result\n */\nexport function memoize<T extends (...args: any[]) => any>(\n  fn: T,\n  keyFn?: (...args: Parameters<T>) => string,\n): T {\n  const cache = new Map<string, ReturnType<T>>();\n\n  return ((...args: Parameters<T>): ReturnType<T> => {\n    const key = keyFn ? keyFn(...args) : JSON.stringify(args);\n\n    return cache.has(key)\n      ? (cache.get(key) as ReturnType<T>)\n      : (() => {\n          const result = fn(...args);\n          cache.set(key, result);\n          return result;\n        })();\n  }) as T;\n}\n","import { BaseScormValidationError } from \"../../exceptions\";\nimport { memoize } from \"../../utilities\";\n\n/**\n * Check if the value matches the proper format. If not, throw proper error code.\n *\n * @param {string} value\n * @param {string} regexPattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @param {boolean} [allowEmptyString]\n * @return {boolean}\n */\nexport const checkValidFormat = memoize(\n  (\n    CMIElement: string,\n    value: string,\n    regexPattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n    allowEmptyString?: boolean,\n  ): boolean => {\n    if (typeof value !== \"string\") {\n      return false;\n    }\n    const formatRegex = new RegExp(regexPattern);\n    const matches = value.match(formatRegex);\n    if (allowEmptyString && value === \"\") {\n      return true;\n    }\n    if (value === undefined || !matches || matches[0] === \"\") {\n      throw new errorClass(CMIElement, errorCode);\n    }\n    return true;\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, regexPattern, errorCode, _errorClass, allowEmptyString) => {\n    // Use typeof for non-string values to ensure consistent cache keys\n    const valueKey = typeof value === \"string\" ? value : `[${typeof value}]`;\n    return `${CMIElement}:${valueKey}:${regexPattern}:${errorCode}:${allowEmptyString || false}`;\n  },\n);\n\n/**\n * Check if the value matches the proper range. If not, throw proper error code.\n *\n * @param {any} value\n * @param {string} rangePattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @return {boolean}\n */\nexport const checkValidRange = memoize(\n  (\n    CMIElement: string,\n    value: any,\n    rangePattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean => {\n    const ranges = rangePattern.split(\"#\");\n    value = value * 1.0;\n    if (value >= ranges[0]) {\n      if (ranges[1] === \"*\" || value <= ranges[1]) {\n        return true;\n      } else {\n        throw new errorClass(CMIElement, errorCode);\n      }\n    } else {\n      throw new errorClass(CMIElement, errorCode);\n    }\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, rangePattern, errorCode, _errorClass) =>\n    `${CMIElement}:${value}:${rangePattern}:${errorCode}`,\n);\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm12_errors.TYPE_MISMATCH,\n    Scorm12ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidRange(\n  CMIElement: string,\n  value: any,\n  rangePattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  if (!allowEmptyString && value === \"\") {\n    throw new Scorm12ValidationError(CMIElement, scorm12_errors.VALUE_OUT_OF_RANGE);\n  }\n\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm12_errors.VALUE_OUT_OF_RANGE,\n    Scorm12ValidationError,\n  );\n}\n","import { BaseScormValidationError } from \"../exceptions\";\nimport { checkValidFormat, checkValidRange } from \"../cmi/common/validation\";\nimport { check12ValidFormat, check12ValidRange } from \"../cmi/scorm12/validation\";\nimport { scorm12_regex } from \"../constants/regex\";\nimport { scorm12_errors } from \"../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../exceptions/scorm12_exceptions\";\n\n/**\n * Service for validating CMI data model properties\n */\nexport class ValidationService {\n  /**\n   * Validates a score property (raw, min, max)\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @param {string} decimalRegex - The regex pattern for decimal validation\n   * @param {string | false} scoreRange - The range pattern for score validation, or false if no range validation is needed\n   * @param {number} invalidTypeCode - The error code for invalid type\n   * @param {number} invalidRangeCode - The error code for invalid range\n   * @param {typeof BaseScormValidationError} errorClass - The error class to use for validation errors\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScore(\n    CMIElement: string,\n    value: string,\n    decimalRegex: string,\n    scoreRange: string | false,\n    invalidTypeCode: number,\n    invalidRangeCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean {\n    return (\n      checkValidFormat(CMIElement, value, decimalRegex, invalidTypeCode, errorClass) &&\n      (!scoreRange || checkValidRange(CMIElement, value, scoreRange, invalidRangeCode, errorClass))\n    );\n    // This line should never be reached due to exceptions being thrown\n  }\n\n  /**\n   * Validates a SCORM 1.2 audio property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Audio(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.audio_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 language property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Language(CMIElement: string, value: string): boolean {\n    return check12ValidFormat(CMIElement, value, scorm12_regex.CMIString256);\n  }\n\n  /**\n   * Validates a SCORM 1.2 speed property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Speed(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.speed_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 text property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Text(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.text_range)\n    );\n  }\n\n  /**\n   * Validates if a property is read-only\n   *\n   * @param {string} CMIElement\n   * @param {boolean} initialized - Whether the object is initialized\n   * @throws {BaseScormValidationError} - Throws an error if the object is initialized\n   */\n  validateReadOnly(CMIElement: string, initialized: boolean): void {\n    if (initialized) {\n      throw new Scorm12ValidationError(CMIElement, scorm12_errors.READ_ONLY_ELEMENT);\n    }\n  }\n}\n\n// Export a singleton instance of the ValidationService\nexport const validationService = new ValidationService();\n","import { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"./base_cmi\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { validationService } from \"../../services/ValidationService\";\n\n/**\n * Base class for cmi *.score objects\n */\nexport class CMIScore extends BaseCMI {\n  private readonly __children: string;\n  private readonly __score_range: string | false;\n  private readonly __invalid_error_code: number;\n  private readonly __invalid_type_code: number;\n  private readonly __invalid_range_code: number;\n  private readonly __decimal_regex: string;\n  private readonly __error_class: typeof BaseScormValidationError;\n  protected _raw = \"\";\n  protected _min = \"\";\n  protected _max: string;\n\n  /**\n   * Constructor for *.score\n   * @param {\n   *     score_children: string,\n   *     score_range: string,\n   *     max: string,\n   *     invalidErrorCode: number,\n   *     invalidTypeCode: number,\n   *     invalidRangeCode: number,\n   *     decimalRegex: string,\n   *     errorClass: typeof BaseScormValidationError\n   * } params\n   */\n  constructor(params: {\n    CMIElement: string;\n    score_children?: string;\n    score_range?: string;\n    max?: string;\n    invalidErrorCode?: number;\n    invalidTypeCode?: number;\n    invalidRangeCode?: number;\n    decimalRegex?: string;\n    errorClass: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n\n    this.__children = params.score_children || scorm12_constants.score_children;\n    this.__score_range = !params.score_range ? false : scorm12_regex.score_range;\n    this._max = params.max || params.max === \"\" ? params.max : \"100\";\n    this.__invalid_error_code = params.invalidErrorCode || scorm12_errors.INVALID_SET_VALUE;\n    this.__invalid_type_code = params.invalidTypeCode || scorm12_errors.TYPE_MISMATCH;\n    this.__invalid_range_code = params.invalidRangeCode || scorm12_errors.VALUE_OUT_OF_RANGE;\n    this.__decimal_regex = params.decimalRegex || scorm12_regex.CMIDecimal;\n    this.__error_class = params.errorClass;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this.__error_class(this._cmi_element + \"._children\", this.__invalid_error_code);\n  }\n\n  /**\n   * Getter for _raw\n   * @return {string}\n   */\n  get raw(): string {\n    return this._raw;\n  }\n\n  /**\n   * Setter for _raw\n   * @param {string} raw\n   */\n  set raw(raw: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".raw\",\n        raw,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._raw = raw;\n    }\n  }\n\n  /**\n   * Getter for _min\n   * @return {string}\n   */\n  get min(): string {\n    return this._min;\n  }\n\n  /**\n   * Setter for _min\n   * @param {string} min\n   */\n  set min(min: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".min\",\n        min,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._min = min;\n    }\n  }\n\n  /**\n   * Getter for _max\n   * @return {string}\n   */\n  get max(): string {\n    return this._max;\n  }\n\n  /**\n   * Setter for _max\n   * @param {string} max\n   */\n  set max(max: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".max\",\n        max,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._max = max;\n    }\n  }\n\n  /**\n   * toJSON for *.score\n   * @return {\n   *    {\n   *      min: string,\n   *      max: string,\n   *      raw: string\n   *    }\n   *    }\n   */\n  toJSON(): {\n    min: string;\n    max: string;\n    raw: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { check12ValidFormat } from \"../scorm12/validation\";\nimport * as Util from \"../../utilities\";\n\n/**\n * Class representing the `cmi.core` object\n * @extends BaseCMI\n */\nexport class CMICore extends BaseCMI {\n  /**\n   * Constructor for `cmi.core`\n   */\n  constructor() {\n    super(\"cmi.core\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.core.score\",\n      score_children: scorm12_constants.score_children,\n      score_range: scorm12_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n\n  public readonly score: CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  private __children = scorm12_constants.core_children;\n  private _student_id = \"\";\n  private _student_name = \"\";\n  private _lesson_location = \"\";\n  private _credit = \"\";\n  private _lesson_status = \"not attempted\";\n  private _entry = \"\";\n  private _total_time = \"\";\n  private _lesson_mode = \"normal\";\n  private _exit = \"\";\n  private _session_time = \"00:00:00\";\n  private _suspend_data = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._exit = \"\";\n    this._entry = \"\";\n\n    /**\n     * Resetting ensures we accurately track the time spent on each individual SCO session independently. Each new\n     * session should start from zero, so we can reset cmi.core.session_time at the beginning of each session.\n     */\n    this._session_time = \"00:00:00\";\n\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for _student_id\n   * @return {string}\n   */\n  get student_id(): string {\n    return this._student_id;\n  }\n\n  /**\n   * Setter for _student_id. Can only be called before  initialization.\n   * @param {string} student_id\n   */\n  set student_id(student_id: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".student_id\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._student_id = student_id;\n    }\n  }\n\n  /**\n   * Getter for _student_name\n   * @return {string}\n   */\n  get student_name(): string {\n    return this._student_name;\n  }\n\n  /**\n   * Setter for _student_name. Can only be called before  initialization.\n   * @param {string} student_name\n   */\n  set student_name(student_name: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".student_name\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._student_name = student_name;\n    }\n  }\n\n  /**\n   * Getter for _lesson_location\n   * @return {string}\n   */\n  get lesson_location(): string {\n    return this._lesson_location;\n  }\n\n  /**\n   * Setter for _lesson_location\n   * @param {string} lesson_location\n   */\n  set lesson_location(lesson_location: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".lesson_location\",\n        lesson_location,\n        scorm12_regex.CMIString256,\n        true,\n      )\n    ) {\n      this._lesson_location = lesson_location;\n    }\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this._credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before  initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".credit\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._credit = credit;\n    }\n  }\n\n  /**\n   * Getter for _lesson_status\n   * @return {string}\n   */\n  get lesson_status(): string {\n    return this._lesson_status;\n  }\n\n  /**\n   * Setter for _lesson_status\n   * @param {string} lesson_status\n   */\n  set lesson_status(lesson_status: string) {\n    if (this.initialized) {\n      if (\n        check12ValidFormat(\n          this._cmi_element + \".lesson_status\",\n          lesson_status,\n          scorm12_regex.CMIStatus,\n        )\n      ) {\n        this._lesson_status = lesson_status;\n      }\n    } else {\n      if (\n        check12ValidFormat(\n          this._cmi_element + \".lesson_status\",\n          lesson_status,\n          scorm12_regex.CMIStatus2,\n        )\n      ) {\n        this._lesson_status = lesson_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this._entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before  initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".entry\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._entry = entry;\n    }\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this._total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before  initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".total_time\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._total_time = total_time;\n    }\n  }\n\n  /**\n   * Getter for _lesson_mode\n   * @return {string}\n   */\n  get lesson_mode(): string {\n    return this._lesson_mode;\n  }\n\n  /**\n   * Setter for _lesson_mode. Can only be called before  initialization.\n   * @param {string} lesson_mode\n   */\n  set lesson_mode(lesson_mode: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".lesson_mode\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._lesson_mode = lesson_mode;\n    }\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".exit\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    if (check12ValidFormat(this._cmi_element + \".exit\", exit, scorm12_regex.CMIExit, true)) {\n      this._exit = exit;\n    }\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".session_time\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".session_time\",\n        session_time,\n        scorm12_regex.CMITimespan,\n      )\n    ) {\n      this._session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this._suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".suspend_data\",\n        suspend_data,\n        scorm12_regex.CMIString4096,\n        true,\n      )\n    ) {\n      this._suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   * @param {number} start_time\n   * @return {string}\n   */\n  getCurrentTotalTime(start_time: number | undefined): string {\n    let sessionTime = this._session_time;\n    const startTime = start_time;\n\n    if (typeof startTime !== \"undefined\" && startTime !== null) {\n      const seconds = new Date().getTime() - startTime;\n      sessionTime = Util.getSecondsAsHHMMSS(seconds / 1000);\n    }\n\n    return Util.addHHMMSSTimeStrings(\n      this._total_time,\n      sessionTime,\n      new RegExp(scorm12_regex.CMITimespan),\n    );\n  }\n\n  /**\n   * toJSON for cmi.core\n   *\n   * @return {\n   *    {\n   *      student_name: string,\n   *      entry: string,\n   *      exit: string,\n   *      score: CMIScore,\n   *      student_id: string,\n   *      lesson_mode: string,\n   *      lesson_location: string,\n   *      lesson_status: string,\n   *      credit: string,\n   *      session_time: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    student_name: string;\n    entry: string;\n    exit: string;\n    score: CMIScore;\n    student_id: string;\n    lesson_mode: string;\n    lesson_location: string;\n    lesson_status: string;\n    credit: string;\n    session_time: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      student_id: this.student_id,\n      student_name: this.student_name,\n      lesson_location: this.lesson_location,\n      credit: this.credit,\n      lesson_status: this.lesson_status,\n      entry: this.entry,\n      lesson_mode: this.lesson_mode,\n      exit: this.exit,\n      session_time: this.session_time,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"./base_cmi\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Base class for cmi *.n objects\n */\nexport class CMIArray extends BaseCMI {\n  private readonly _errorCode: number;\n  private readonly _errorClass: typeof BaseScormValidationError;\n  private readonly __children: string;\n  public childArray: any[];\n\n  /**\n   * Constructor cmi *.n arrays\n   * @param {object} params\n   */\n  constructor(params: {\n    CMIElement: string;\n    children: string;\n    errorCode?: number;\n    errorClass?: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n    this.__children = params.children;\n    this._errorCode = params.errorCode || scorm12_errors.GENERAL;\n    this._errorClass = params.errorClass || BaseScormValidationError;\n    this.childArray = [];\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(wipe: boolean = false): void {\n    this._initialized = false;\n    if (wipe) {\n      this.childArray = [];\n    } else {\n      // Reset all children\n      for (let i = 0; i < this.childArray.length; i++) {\n        this.childArray[i].reset();\n      }\n    }\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this._errorClass(this._cmi_element + \"._children\", this._errorCode);\n  }\n\n  /**\n   * Getter for _count\n   * @return {number}\n   */\n  get _count(): number {\n    return this.childArray.length;\n  }\n\n  /**\n   * Setter for _count. Just throws an error.\n   * @param {number} _count\n   */\n  set _count(_count: number) {\n    throw new this._errorClass(this._cmi_element + \"._count\", this._errorCode);\n  }\n\n  /**\n   * toJSON for *.n arrays\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result: { [key: string]: any } = {};\n    for (let i = 0; i < this.childArray.length; i++) {\n      result[i + \"\"] = this.childArray[i];\n    }\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { check12ValidFormat } from \"./validation\";\nimport { CMIArray } from \"../common/array\";\n\n/**\n * Class representing SCORM 1.2's `cmi.objectives` object\n * @extends CMIArray\n */\nexport class CMIObjectives extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives`\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.objectives\",\n      children: scorm12_constants.objectives_children,\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super(\"cmi.objectives.n\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.objectives.n.score\",\n      score_children: scorm12_constants.score_children,\n      score_range: scorm12_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n\n  public readonly score: CMIScore;\n\n  private _id = \"\";\n  private _status = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._id = \"\";\n    this._status = \"\";\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check12ValidFormat(this._cmi_element + \".id\", id, scorm12_regex.CMIIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _status\n   * @return {string}\n   */\n  get status(): string {\n    return this._status;\n  }\n\n  /**\n   * Setter for _status\n   * @param {string} status\n   */\n  set status(status: string) {\n    if (check12ValidFormat(this._cmi_element + \".status\", status, scorm12_regex.CMIStatus2)) {\n      this._status = status;\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   * @return {\n   *    {\n   *      id: string,\n   *      status: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    status: string;\n    score: CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      status: this.status,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { validationService } from \"../../services/ValidationService\";\n\n/**\n * Class representing the SCORM 1.2 cmi.student_data object\n * @extends BaseCMI\n */\nexport class CMIStudentData extends BaseCMI {\n  private readonly __children;\n  private _mastery_score = \"\";\n  private _max_time_allowed = \"\";\n  private _time_limit_action = \"\";\n\n  /**\n   * Constructor for cmi.student_data\n   * @param {string} student_data_children\n   */\n  constructor(student_data_children?: string) {\n    super(\"cmi.student_data\");\n    this.__children = student_data_children\n      ? student_data_children\n      : scorm12_constants.student_data_children;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for _master_score\n   * @return {string}\n   */\n  get mastery_score(): string {\n    return this._mastery_score;\n  }\n\n  /**\n   * Setter for _master_score. Can only be called before  initialization.\n   * @param {string} mastery_score\n   */\n  set mastery_score(mastery_score: string) {\n    validationService.validateReadOnly(this._cmi_element + \".mastery_score\", this.initialized);\n    this._mastery_score = mastery_score;\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this._max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before  initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    validationService.validateReadOnly(this._cmi_element + \".max_time_allowed\", this.initialized);\n    this._max_time_allowed = max_time_allowed;\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this._time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before  initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    validationService.validateReadOnly(this._cmi_element + \".time_limit_action\", this.initialized);\n    this._time_limit_action = time_limit_action;\n  }\n\n  /**\n   * toJSON for cmi.student_data\n   *\n   * @return {\n   *    {\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      mastery_score: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    mastery_score: string;\n    max_time_allowed: string;\n    time_limit_action: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      mastery_score: this.mastery_score,\n      max_time_allowed: this.max_time_allowed,\n      time_limit_action: this.time_limit_action,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { validationService } from \"../../services/ValidationService\";\n\n/**\n * Class representing the SCORM 1.2 cmi.student_preference object\n * @extends BaseCMI\n */\nexport class CMIStudentPreference extends BaseCMI {\n  private readonly __children;\n\n  /**\n   * Constructor for cmi.student_preference\n   * @param {string} student_preference_children\n   */\n  constructor(student_preference_children?: string) {\n    super(\"cmi.student_preference\");\n    this.__children = student_preference_children\n      ? student_preference_children\n      : scorm12_constants.student_preference_children;\n  }\n\n  private _audio = \"\";\n  private _language = \"\";\n  private _speed = \"\";\n  private _text = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for _audio\n   * @return {string}\n   */\n  get audio(): string {\n    return this._audio;\n  }\n\n  /**\n   * Setter for _audio\n   * @param {string} audio\n   */\n  set audio(audio: string) {\n    if (validationService.validateScorm12Audio(this._cmi_element + \".audio\", audio)) {\n      this._audio = audio;\n    }\n  }\n\n  /**\n   * Getter for _language\n   * @return {string}\n   */\n  get language(): string {\n    return this._language;\n  }\n\n  /**\n   * Setter for _language\n   * @param {string} language\n   */\n  set language(language: string) {\n    if (validationService.validateScorm12Language(this._cmi_element + \".language\", language)) {\n      this._language = language;\n    }\n  }\n\n  /**\n   * Getter for _speed\n   * @return {string}\n   */\n  get speed(): string {\n    return this._speed;\n  }\n\n  /**\n   * Setter for _speed\n   * @param {string} speed\n   */\n  set speed(speed: string) {\n    if (validationService.validateScorm12Speed(this._cmi_element + \".speed\", speed)) {\n      this._speed = speed;\n    }\n  }\n\n  /**\n   * Getter for _text\n   * @return {string}\n   */\n  get text(): string {\n    return this._text;\n  }\n\n  /**\n   * Setter for _text\n   * @param {string} text\n   */\n  set text(text: string) {\n    if (validationService.validateScorm12Text(this._cmi_element + \".text\", text)) {\n      this._text = text;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_preference\n   *\n   * @return {\n   *    {\n   *      audio: string,\n   *      language: string,\n   *      speed: string,\n   *      text: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    audio: string;\n    language: string;\n    speed: string;\n    text: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio: this.audio,\n      language: this.language,\n      speed: this.speed,\n      text: this.text,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check12ValidFormat, check12ValidRange } from \"./validation\";\nimport { scorm12_regex } from \"../../constants/regex\";\n\n/**\n * Class representing the SCORM 1.2 `cmi.interactions`\n * @extends CMIArray\n */\nexport class CMIInteractions extends CMIArray {\n  /**\n   * Constructor for `cmi.interactions`\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.interactions\",\n      children: scorm12_constants.interactions_children,\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n object\n   */\n  constructor() {\n    super(\"cmi.interactions.n\");\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: Scorm12ValidationError,\n      children: scorm12_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.correct_responses\",\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: Scorm12ValidationError,\n      children: scorm12_constants.correct_responses_children,\n    });\n  }\n\n  public readonly objectives: CMIArray;\n  public readonly correct_responses: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  private _id = \"\";\n  private _time = \"\";\n  private _type = \"\";\n  private _weighting = \"\";\n  private _student_response = \"\";\n  private _result = \"\";\n  private _latency = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n\n    this._id = \"\";\n    this._time = \"\";\n    this._type = \"\";\n    this._weighting = \"\";\n    this._student_response = \"\";\n    this._result = \"\";\n    this._latency = \"\";\n\n    this.objectives?.reset();\n    this.correct_responses?.reset();\n  }\n\n  /**\n   * Getter for _id. Should only be called during JSON export.\n   * @return {string}\n   */\n  get id(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".id\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check12ValidFormat(this._cmi_element + \".id\", id, scorm12_regex.CMIIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get time(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".time\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._time;\n  }\n\n  /**\n   * Setter for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (check12ValidFormat(this._cmi_element + \".time\", time, scorm12_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * Getter for _type. Should only be called during JSON export.\n   * @return {string}\n   */\n  get type(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".type\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._type;\n  }\n\n  /**\n   * Setter for _type\n   * @param {string} type\n   */\n  set type(type: string) {\n    if (check12ValidFormat(this._cmi_element + \".type\", type, scorm12_regex.CMIType)) {\n      this._type = type;\n    }\n  }\n\n  /**\n   * Getter for _weighting. Should only be called during JSON export.\n   * @return {string}\n   */\n  get weighting(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".weighting\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._weighting;\n  }\n\n  /**\n   * Setter for _weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting: string) {\n    if (\n      check12ValidFormat(this._cmi_element + \".weighting\", weighting, scorm12_regex.CMIDecimal) &&\n      check12ValidRange(this._cmi_element + \".weighting\", weighting, scorm12_regex.weighting_range)\n    ) {\n      this._weighting = weighting;\n    }\n  }\n\n  /**\n   * Getter for _student_response. Should only be called during JSON export.\n   * @return {string}\n   */\n  get student_response(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".student_response\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._student_response;\n  }\n\n  /**\n   * Setter for _student_response\n   * @param {string} student_response\n   */\n  set student_response(student_response: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".student_response\",\n        student_response,\n        scorm12_regex.CMIFeedback,\n        true,\n      )\n    ) {\n      this._student_response = student_response;\n    }\n  }\n\n  /**\n   * Getter for _result. Should only be called during JSON export.\n   * @return {string}\n   */\n  get result(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".result\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._result;\n  }\n\n  /**\n   * Setter for _result\n   * @param {string} result\n   */\n  set result(result: string) {\n    if (check12ValidFormat(this._cmi_element + \".result\", result, scorm12_regex.CMIResult)) {\n      this._result = result;\n    }\n  }\n\n  /**\n   * Getter for _latency. Should only be called during JSON export.\n   * @return {string}\n   */\n  get latency(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".latency\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._latency;\n  }\n\n  /**\n   * Setter for _latency\n   * @param {string} latency\n   */\n  set latency(latency: string) {\n    if (check12ValidFormat(this._cmi_element + \".latency\", latency, scorm12_regex.CMITimespan)) {\n      this._latency = latency;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      time: string,\n   *      type: string,\n   *      weighting: string,\n   *      student_response: string,\n   *      result: string,\n   *      latency: string,\n   *      objectives: CMIArray,\n   *      correct_responses: CMIArray\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    time: string;\n    type: string;\n    weighting: string;\n    student_response: string;\n    result: string;\n    latency: string;\n    objectives: CMIArray;\n    correct_responses: CMIArray;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      time: this.time,\n      type: this.type,\n      weighting: this.weighting,\n      student_response: this.student_response,\n      result: this.result,\n      latency: this.latency,\n      objectives: this.objectives,\n      correct_responses: this.correct_responses,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n.objectives.n\");\n  }\n\n  private _id = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._id = \"\";\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check12ValidFormat(this._cmi_element + \".id\", id, scorm12_regex.CMIIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.correct_responses.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.correct_responses.n\n   */\n  constructor() {\n    super(\"cmi.interactions.correct_responses.n\");\n  }\n\n  private _pattern = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._pattern = \"\";\n  }\n\n  /**\n   * Getter for _pattern\n   * @return {string}\n   */\n  get pattern(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".pattern\",\n        scorm12_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._pattern;\n  }\n\n  /**\n   * Setter for _pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern: string) {\n    if (\n      check12ValidFormat(this._cmi_element + \".pattern\", pattern, scorm12_regex.CMIFeedback, true)\n    ) {\n      this._pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.correct_responses.n\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    pattern: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      pattern: this._pattern,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { BaseRootCMI } from \"../common/base_cmi\";\nimport { check12ValidFormat } from \"./validation\";\nimport { CMICore } from \"../aicc/core\";\nimport { CMIObjectives } from \"./objectives\";\nimport { CMIStudentData } from \"./student_data\";\nimport { CMIStudentPreference } from \"./student_preference\";\nimport { CMIInteractions } from \"./interactions\";\n\n/**\n * Class representing the cmi object for SCORM 1.2\n */\nexport class CMI extends BaseRootCMI {\n  private readonly __children: string = \"\";\n  private __version: string = \"3.4\";\n  private _launch_data: string = \"\";\n  private _comments: string = \"\";\n  private _comments_from_lms: string = \"\";\n\n  /**\n   * Constructor for the SCORM 1.2 cmi object\n   * @param {string} cmi_children\n   * @param {(CMIStudentData|AICCCMIStudentData)} student_data\n   * @param {boolean} initialized\n   */\n  constructor(cmi_children?: string, student_data?: CMIStudentData, initialized?: boolean) {\n    super(\"cmi\");\n    if (initialized) this.initialize();\n    this.__children = cmi_children ? cmi_children : scorm12_constants.cmi_children;\n    this.core = new CMICore();\n    this.objectives = new CMIObjectives();\n    this.student_data = student_data ? student_data : new CMIStudentData();\n    this.student_preference = new CMIStudentPreference();\n    this.interactions = new CMIInteractions();\n  }\n\n  public core: CMICore;\n  public objectives: CMIObjectives;\n  public student_data: CMIStudentData;\n  public student_preference: CMIStudentPreference;\n  public interactions: CMIInteractions;\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._launch_data = \"\";\n    this._comments = \"\";\n    this.core?.reset();\n    this.objectives = new CMIObjectives();\n    this.interactions = new CMIInteractions();\n    this.student_data?.reset();\n    this.student_preference?.reset();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.core?.initialize();\n    this.objectives?.initialize();\n    this.student_data?.initialize();\n    this.student_preference?.initialize();\n    this.interactions?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions\n   *    }\n   *  }\n   */\n  toJSON(): {\n    suspend_data: string;\n    launch_data: string;\n    comments: string;\n    comments_from_lms: string;\n    core: CMICore;\n    objectives: CMIObjectives;\n    student_data: CMIStudentData;\n    student_preference: CMIStudentPreference;\n    interactions: CMIInteractions;\n  } {\n    this.jsonString = true;\n    const result = {\n      suspend_data: this.suspend_data,\n      launch_data: this.launch_data,\n      comments: this.comments,\n      comments_from_lms: this.comments_from_lms,\n      core: this.core,\n      objectives: this.objectives,\n      student_data: this.student_data,\n      student_preference: this.student_preference,\n      interactions: this.interactions,\n    };\n    this.jsonString = false;\n    return result;\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   */\n  get _version(): string {\n    return this.__version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._version\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE,\n    );\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this.core?.suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (this.core) {\n      this.core.suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this._launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before  initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".launch_data\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._launch_data = launch_data;\n    }\n  }\n\n  /**\n   * Getter for _comments\n   * @return {string}\n   */\n  get comments(): string {\n    return this._comments;\n  }\n\n  /**\n   * Setter for _comments\n   * @param {string} comments\n   */\n  set comments(comments: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".comments\",\n        comments,\n        scorm12_regex.CMIString4096,\n        true,\n      )\n    ) {\n      this._comments = comments;\n    }\n  }\n\n  /**\n   * Getter for _comments_from_lms\n   * @return {string}\n   */\n  get comments_from_lms(): string {\n    return this._comments_from_lms;\n  }\n\n  /**\n   * Setter for _comments_from_lms. Can only be called before  initialization.\n   * @param {string} comments_from_lms\n   */\n  set comments_from_lms(comments_from_lms: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".comments_from_lms\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._comments_from_lms = comments_from_lms;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string}\n   */\n  getCurrentTotalTime(): string {\n    return this.core.getCurrentTotalTime(this.start_time);\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { check12ValidFormat } from \"./validation\";\nimport { scorm12_regex } from \"../../constants/regex\";\n\n/**\n * Class for AICC Navigation object\n */\nexport class NAV extends BaseCMI {\n  /**\n   * Constructor for NAV object\n   */\n  constructor() {\n    super(\"cmi.nav\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._event = \"\";\n    this._initialized = false;\n  }\n\n  private _event = \"\";\n\n  /**\n   * Getter for _event\n   * @return {string}\n   */\n  get event(): string {\n    return this._event;\n  }\n\n  /**\n   * Setter for _event\n   * @param {string} event\n   */\n  set event(event: string) {\n    if (\n      event === \"\" ||\n      check12ValidFormat(this._cmi_element + \".event\", event, scorm12_regex.NAVEvent)\n    ) {\n      this._event = event;\n    }\n  }\n\n  /**\n   * toJSON for nav object\n   * @return {\n   *    {\n   *      event: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    event: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      event: this.event,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","// Using plain objects instead of enums for better compatibility with strip-only mode\n// This approach avoids TypeScript enum runtime code while maintaining the same API\n\n// NAVBoolean values\nexport const NAVBoolean = {\n  UNKNOWN: \"unknown\",\n  TRUE: \"true\",\n  FALSE: \"false\",\n};\n\n// Type for NAVBoolean values\nexport type NAVBoolean = (typeof NAVBoolean)[keyof typeof NAVBoolean];\n\n// SuccessStatus values\nexport const SuccessStatus = {\n  PASSED: \"passed\",\n  FAILED: \"failed\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for SuccessStatus values\nexport type SuccessStatus = (typeof SuccessStatus)[keyof typeof SuccessStatus];\n\n// CompletionStatus values\nexport const CompletionStatus = {\n  COMPLETED: \"completed\",\n  INCOMPLETE: \"incomplete\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for CompletionStatus values\nexport type CompletionStatus = (typeof CompletionStatus)[keyof typeof CompletionStatus];\n\n// LogLevelEnum values\nexport const LogLevelEnum = {\n  _: 0,\n  DEBUG: 1,\n  INFO: 2,\n  WARN: 3,\n  ERROR: 4,\n  NONE: 5,\n};\n\n// Type for LogLevelEnum values\nexport type LogLevelEnum = (typeof LogLevelEnum)[keyof typeof LogLevelEnum];\n","import { InternalSettings, LogLevel, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"./api_constants\";\nimport { LogLevelEnum } from \"./enums\";\n\n/**\n * Default settings for the SCORM API\n */\nexport const DefaultSettings: InternalSettings = {\n  autocommit: false,\n  autocommitSeconds: 10,\n  asyncCommit: false,\n  sendFullCommit: true,\n  lmsCommitUrl: false,\n  dataCommitFormat: \"json\",\n  commitRequestDataType: \"application/json;charset=UTF-8\",\n  autoProgress: false,\n  logLevel: LogLevelEnum.ERROR,\n  selfReportSessionTime: false,\n  alwaysSendTotalTime: false,\n  renderCommonCommitFields: false,\n  strict_errors: true,\n  xhrHeaders: {},\n  xhrWithCredentials: false,\n  fetchMode: \"cors\",\n  useBeaconInsteadOfFetch: \"never\",\n  responseHandler: async function (response: Response): Promise<ResultObject> {\n    if (typeof response !== \"undefined\") {\n      let httpResult = null;\n\n      // Handle both text() and json() response methods\n      try {\n        if (typeof response.json === \"function\") {\n          // Try to get JSON directly if the method exists\n          httpResult = await response.json();\n        } else if (typeof response.text === \"function\") {\n          // Fall back to text() if json() is not available\n          const responseText = await response.text();\n          if (responseText) {\n            httpResult = JSON.parse(responseText);\n          }\n        }\n      } catch (e) {\n        // If parsing fails, continue with null httpResult\n      }\n\n      if (httpResult === null || !{}.hasOwnProperty.call(httpResult, \"result\")) {\n        if (response.status === 200) {\n          return {\n            result: global_constants.SCORM_TRUE,\n            errorCode: 0,\n          };\n        } else {\n          return {\n            result: global_constants.SCORM_FALSE,\n            errorCode: 101,\n          };\n        }\n      } else {\n        return {\n          result: httpResult.result,\n          errorCode: httpResult.errorCode\n            ? httpResult.errorCode\n            : httpResult.result === global_constants.SCORM_TRUE\n              ? 0\n              : 101,\n        };\n      }\n    }\n    return {\n      result: global_constants.SCORM_FALSE,\n      errorCode: 101,\n    };\n  },\n  requestHandler: function (commitObject) {\n    return commitObject;\n  },\n  onLogMessage: defaultLogHandler,\n  scoItemIds: [],\n  scoItemIdValidator: false,\n  globalObjectiveIds: [],\n\n  // Offline support settings\n  enableOfflineSupport: false,\n  courseId: \"\",\n  syncOnInitialize: true,\n  syncOnTerminate: true,\n  maxSyncAttempts: 5,\n};\n\nexport function defaultLogHandler(messageLevel: LogLevel, logMessage: string): void {\n  switch (messageLevel) {\n    case \"4\":\n    case 4:\n    case \"ERROR\":\n    case LogLevelEnum.ERROR:\n      console.error(logMessage);\n      break;\n    case \"3\":\n    case 3:\n    case \"WARN\":\n    case LogLevelEnum.WARN:\n      console.warn(logMessage);\n      break;\n    case \"2\":\n    case 2:\n    case \"INFO\":\n    case LogLevelEnum.INFO:\n      console.info(logMessage);\n      break;\n    case \"1\":\n    case 1:\n    case \"DEBUG\":\n    case LogLevelEnum.DEBUG:\n      if (console.debug) {\n        console.debug(logMessage);\n      } else {\n        console.log(logMessage);\n      }\n      break;\n  }\n}\n","import BaseAPI from \"../BaseAPI\";\n\n/**\n * Private class that wraps a timeout call to the commit() function\n */\nexport class ScheduledCommit {\n  private _API;\n  private _cancelled = false;\n  private readonly _timeout;\n  private readonly _callback;\n\n  /**\n   * Constructor for ScheduledCommit\n   * @param {BaseAPI} API\n   * @param {number} when\n   * @param {string} callback\n   */\n  constructor(API: BaseAPI, when: number, callback: string) {\n    this._API = API;\n    this._timeout = setTimeout(this.wrapper.bind(this), when);\n    this._callback = callback;\n  }\n\n  /**\n   * Cancel any currently scheduled commit\n   */\n  cancel() {\n    this._cancelled = true;\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n  }\n\n  /**\n   * Wrap the API commit call to check if the call has already been cancelled\n   */\n  wrapper() {\n    if (!this._cancelled) {\n      (async () => await this._API.commit(this._callback))();\n    }\n  }\n}\n","import { CommitObject, InternalSettings, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { IHttpService } from \"../interfaces/services\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { StringKeyMap } from \"../utilities\";\n\n/**\n * Service for handling HTTP communication with the LMS\n */\nexport class HttpService implements IHttpService {\n  private settings: InternalSettings;\n  private error_codes: ErrorCode;\n\n  /**\n   * Constructor for HttpService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   */\n  constructor(settings: InternalSettings, error_codes: ErrorCode) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n  }\n\n  /**\n   * Sends HTTP requests to the LMS with special handling for immediate and standard requests.\n   *\n   * This method handles communication with the LMS server, implementing two distinct\n   * request handling strategies based on the context:\n   *\n   * 1. Immediate Mode (used during termination):\n   *    When immediate=true, the method:\n   *    - Initiates the fetch request but doesn't wait for it to complete\n   *    - Returns a success result immediately\n   *    - Processes the response asynchronously when it arrives\n   *\n   *    This is critical for browser compatibility during page unload/termination,\n   *    as some browsers (especially Chrome) may cancel synchronous or awaited\n   *    requests when a page is closing.\n   *\n   * 2. Standard Mode (normal operation):\n   *    When immediate=false, the method:\n   *    - Processes the request parameters through the configured requestHandler\n   *    - Awaits the fetch response completely\n   *    - Transforms the response using the configured responseHandler\n   *    - Triggers appropriate event listeners based on success/failure\n   *    - Returns the complete result with appropriate error codes\n   *\n   * The method also includes error handling to catch network failures or other\n   * exceptions that might occur during the request process.\n   *\n   * @param {string} url - The URL endpoint to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The data to send to the LMS\n   * @param {boolean} immediate - Whether to send the request immediately without waiting (true) or process normally (false)\n   * @param {Function} apiLog - Function to log API messages with appropriate levels\n   * @param {Function} processListeners - Function to trigger event listeners for commit events\n   * @return {Promise<ResultObject>} - A promise that resolves with the result of the request\n   *\n   * @example\n   * // Standard request (waits for response)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   false,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   *\n   * @example\n   * // Immediate request (for termination)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   true,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   * // result will be success immediately, regardless of actual HTTP result\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n    apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    const genericError: ResultObject = {\n      result: global_constants.SCORM_FALSE,\n      errorCode: this.error_codes.GENERAL,\n    };\n\n    // if we are terminating the module or closing the browser window/tab, we need to make this fetch ASAP.\n    // Some browsers, especially Chrome, do not like synchronous requests to be made when the window is closing.\n    if (immediate) {\n      // Use Beacon API for final commit if specified in settings\n      if (this.settings.useBeaconInsteadOfFetch !== \"never\") {\n        const body = params instanceof Array ? params.join(\"&\") : JSON.stringify(params);\n        const contentType =\n          params instanceof Array\n            ? \"application/x-www-form-urlencoded\"\n            : this.settings.commitRequestDataType;\n\n        // Send the beacon request directly without waiting for response\n        navigator.sendBeacon(url, new Blob([body], { type: contentType }));\n      } else {\n        // Use regular fetch with keepalive\n        this.performFetch(url, params).then(async (response) => {\n          await this.transformResponse(response, processListeners);\n        });\n      }\n\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    }\n\n    const process = async (\n      url: string,\n      params: CommitObject | StringKeyMap | Array<any>,\n      settings: InternalSettings,\n    ): Promise<ResultObject> => {\n      try {\n        params = settings.requestHandler(params) as CommitObject | StringKeyMap | Array<any>;\n        const response = await this.performFetch(url, params);\n\n        return this.transformResponse(response, processListeners);\n      } catch (e) {\n        apiLog(\"processHttpRequest\", e, LogLevelEnum.ERROR);\n        processListeners(\"CommitError\");\n        return genericError;\n      }\n    };\n\n    return await process(url, params, this.settings);\n  }\n\n  /**\n   * Perform the fetch request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - The response from the LMS\n   * @private\n   */\n  private async performFetch(url: string, params: StringKeyMap | Array<any>): Promise<Response> {\n    // Use Beacon API if specified in settings\n    if (this.settings.useBeaconInsteadOfFetch === \"always\") {\n      return this.performBeacon(url, params);\n    }\n\n    const init = {\n      method: \"POST\",\n      mode: this.settings.fetchMode,\n      body: params instanceof Array ? params.join(\"&\") : JSON.stringify(params),\n      headers: {\n        ...this.settings.xhrHeaders,\n        \"Content-Type\": this.settings.commitRequestDataType,\n      },\n      keepalive: true,\n    } as RequestInit;\n\n    if (this.settings.xhrWithCredentials) {\n      init.credentials = \"include\";\n    }\n\n    return fetch(url, init);\n  }\n\n  /**\n   * Perform the beacon request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - A promise that resolves with a mock Response object\n   * @private\n   */\n  private async performBeacon(url: string, params: StringKeyMap | Array<any>): Promise<Response> {\n    const body = params instanceof Array ? params.join(\"&\") : JSON.stringify(params);\n    const contentType =\n      params instanceof Array\n        ? \"application/x-www-form-urlencoded\"\n        : this.settings.commitRequestDataType;\n\n    // Send the beacon request\n    const beaconSuccess = navigator.sendBeacon(url, new Blob([body], { type: contentType }));\n\n    // Create a mock Response object since sendBeacon doesn't return a Response\n    return Promise.resolve({\n      status: beaconSuccess ? 200 : 0,\n      ok: beaconSuccess,\n      json: async () => ({\n        result: beaconSuccess ? \"true\" : \"false\",\n        errorCode: beaconSuccess ? 0 : this.error_codes.GENERAL,\n      }),\n      text: async () =>\n        JSON.stringify({\n          result: beaconSuccess ? \"true\" : \"false\",\n          errorCode: beaconSuccess ? 0 : this.error_codes.GENERAL,\n        }),\n    } as Response);\n  }\n\n  /**\n   * Transforms the response from the LMS to a ResultObject\n   * @param {Response} response - The response from the LMS\n   * @param {Function} processListeners - Function to process event listeners\n   * @return {Promise<ResultObject>} - The transformed response\n   * @private\n   */\n  private async transformResponse(\n    response: Response,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    const result =\n      typeof this.settings.responseHandler === \"function\"\n        ? await this.settings.responseHandler(response)\n        : await response.json();\n\n    if (\n      response.status >= 200 &&\n      response.status <= 299 &&\n      (result.result === true || result.result === global_constants.SCORM_TRUE)\n    ) {\n      processListeners(\"CommitSuccess\");\n      if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n        result.errorCode = 0;\n      }\n    } else {\n      if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n        result.errorCode = this.error_codes.GENERAL;\n      }\n      processListeners(\"CommitError\", undefined, result.errorCode);\n    }\n    return result;\n  }\n\n  /**\n   * Updates the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: InternalSettings): void {\n    this.settings = settings;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { stringMatches } from \"../utilities\";\nimport { IEventService } from \"../interfaces/services\";\n\n/**\n * Interface for a listener object\n */\ninterface Listener {\n  functionName: string;\n  CMIElement: string | null;\n  callback: Function;\n}\n\n/**\n * Type for parsed listener information\n */\ninterface ParsedListener {\n  functionName: string;\n  CMIElement: string | null;\n}\n\n/**\n * Service for handling event listeners and event processing\n */\nexport class EventService implements IEventService {\n  // Map of function names to listeners for faster lookups\n  private listenerMap: Map<string, Listener[]> = new Map();\n  // Total count of listeners for logging\n  private listenerCount = 0;\n  // Function to log API messages\n  private readonly apiLog: (\n    functionName: string,\n    message: string,\n    messageLevel: LogLevel,\n    CMIElement?: string,\n  ) => void;\n\n  /**\n   * Constructor for EventService\n   * @param {Function} apiLog - Function to log API messages\n   */\n  constructor(\n    apiLog: (\n      functionName: string,\n      message: string,\n      messageLevel: LogLevel,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.apiLog = apiLog;\n  }\n\n  /**\n   * Parses a listener name into its components\n   *\n   * @param {string} listenerName - The name of the listener\n   * @returns {ParsedListener|null} - The parsed listener information or null if invalid\n   */\n  private parseListenerName(listenerName: string): ParsedListener | null {\n    const listenerSplit = listenerName.split(\".\");\n    if (listenerSplit.length === 0) return null;\n\n    const functionName = listenerSplit[0];\n    let CMIElement = null;\n\n    if (listenerSplit.length > 1) {\n      CMIElement = listenerName.replace(`${functionName}.`, \"\");\n    }\n\n    return { functionName, CMIElement };\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener\n   * @param {Function} callback - The callback function to execute when the event occurs\n   */\n  on(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get or create the array for this function name\n      const listeners = this.listenerMap.get(functionName) ?? [];\n\n      // Add the new listener\n      listeners.push({\n        functionName,\n        CMIElement,\n        callback,\n      });\n\n      // Update the map and count\n      this.listenerMap.set(functionName, listeners);\n      this.listenerCount++;\n\n      this.apiLog(\n        \"on\",\n        `Added event listener: ${this.listenerCount}`,\n        LogLevelEnum.INFO,\n        functionName,\n      );\n    }\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener\n   *\n   * @param {string} listenerName - The name of the listener to remove\n   * @param {Function} callback - The callback function to remove\n   */\n  off(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get the listeners for this function name\n      const listeners = this.listenerMap.get(functionName);\n      if (!listeners) continue;\n\n      // Find the index of the listener to remove\n      const removeIndex = listeners.findIndex(\n        (obj) => obj.CMIElement === CMIElement && obj.callback === callback,\n      );\n\n      if (removeIndex !== -1) {\n        // Remove the listener\n        listeners.splice(removeIndex, 1);\n        this.listenerCount--;\n\n        // Update the map or remove the entry if empty\n        if (listeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, listeners);\n        }\n\n        this.apiLog(\n          \"off\",\n          `Removed event listener: ${this.listenerCount}`,\n          LogLevelEnum.INFO,\n          functionName,\n        );\n      }\n    }\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener to clear\n   */\n  clear(listenerName: string) {\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // If we have listeners for this function name\n      if (this.listenerMap.has(functionName)) {\n        const listeners = this.listenerMap.get(functionName)!;\n\n        // Filter out listeners that match the criteria\n        const newListeners = listeners.filter((obj) => obj.CMIElement !== CMIElement);\n\n        // Update the count and map\n        this.listenerCount -= listeners.length - newListeners.length;\n\n        if (newListeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, newListeners);\n        }\n      }\n    }\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created\n   *\n   * @param {string} functionName - The name of the function that triggered the event\n   * @param {string} CMIElement - The CMI element that was affected\n   * @param {any} value - The value that was set\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this.apiLog(functionName, value, LogLevelEnum.INFO, CMIElement);\n\n    // Get listeners for this function name\n    const listeners = this.listenerMap.get(functionName);\n    if (!listeners) return;\n\n    for (const listener of listeners) {\n      const listenerHasCMIElement = !!listener.CMIElement;\n      let CMIElementsMatch = false;\n\n      // Check if CMI elements match\n      if (CMIElement && listener.CMIElement) {\n        if (listener.CMIElement.endsWith(\"*\")) {\n          // For wildcard matches, check if the CMI element starts with the prefix\n          const prefix = listener.CMIElement.slice(0, -1);\n          CMIElementsMatch = CMIElement.startsWith(prefix);\n        } else {\n          // For exact matches, compare the strings directly\n          CMIElementsMatch = listener.CMIElement === CMIElement;\n        }\n      }\n\n      // If the listener matches, call the callback\n      if (!listenerHasCMIElement || CMIElementsMatch) {\n        this.apiLog(\n          \"processListeners\",\n          `Processing listener: ${listener.functionName}`,\n          LogLevelEnum.DEBUG,\n          CMIElement,\n        );\n\n        // Handle special event types\n        if (functionName.startsWith(\"Sequence\")) {\n          // For sequence events, pass the target as the first argument\n          listener.callback(value);\n        } else if (functionName === \"CommitError\") {\n          // For commit error events, pass the error code\n          listener.callback(value);\n        } else if (functionName === \"CommitSuccess\") {\n          // For commit success events, pass no arguments\n          listener.callback();\n        } else {\n          // For regular events, pass CMIElement and value\n          listener.callback(CMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Resets the event service by clearing all listeners\n   */\n  reset() {\n    this.listenerMap.clear();\n    this.listenerCount = 0;\n  }\n}\n","import { CommitObject, LogLevel } from \"../types/api_types\";\nimport { StringKeyMap, unflatten } from \"../utilities\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { BaseCMI } from \"../cmi/common/base_cmi\";\nimport { ISerializationService } from \"../interfaces/services\";\n\n/**\n * Service for handling data serialization and deserialization in scorm-again\n */\nexport class SerializationService implements ISerializationService {\n  /**\n   * Loads CMI data from a flattened JSON object with special handling for arrays and ordering.\n   *\n   * This method implements a complex algorithm for loading flattened JSON data into the CMI\n   * object structure. It handles several key challenges:\n   *\n   * 1. Ordering dependencies: Some CMI elements (like interactions and objectives) must be\n   *    loaded in a specific order to ensure proper initialization.\n   *\n   * 2. Array handling: Interactions and objectives are stored as arrays, and their properties\n   *    must be loaded in the correct order (e.g., 'id' and 'type' must be set before other properties).\n   *\n   * 3. Unflattening: The method converts flattened dot notation (e.g., \"cmi.objectives.0.id\")\n   *    back into nested objects before loading.\n   *\n   * The algorithm works by:\n   * - Categorizing keys into interactions, objectives, and other properties\n   * - Sorting interactions to prioritize 'id' and 'type' fields within each index\n   * - Sorting objectives to prioritize 'id' fields within each index\n   * - Processing each category in order: interactions, objectives, then other properties\n   *\n   * @param {StringKeyMap} json - The flattened JSON object with dot notation keys\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   *\n   * @param setStartingData\n   * @example\n   * // Example of flattened JSON input:\n   * // {\n   * //   \"cmi.objectives.0.id\": \"obj1\",\n   * //   \"cmi.objectives.0.score.raw\": \"80\",\n   * //   \"cmi.interactions.0.id\": \"int1\",\n   * //   \"cmi.interactions.0.type\": \"choice\",\n   * //   \"cmi.interactions.0.result\": \"correct\"\n   * // }\n   */\n  loadFromFlattenedJSON(\n    json: StringKeyMap,\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromFlattenedJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    const int_pattern = /^(cmi\\.interactions\\.)(\\d+)\\.(.*)$/;\n    const obj_pattern = /^(cmi\\.objectives\\.)(\\d+)\\.(.*)$/;\n\n    // Extract and categorize keys for better sorting\n    const interactions: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const objectives: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const others: { key: string; value: any }[] = [];\n\n    // Categorize keys\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key)) {\n        const intMatch = key.match(int_pattern);\n        if (intMatch) {\n          interactions.push({\n            key,\n            value: json[key],\n            index: Number(intMatch[2]),\n            field: intMatch[3],\n          });\n          continue;\n        }\n\n        const objMatch = key.match(obj_pattern);\n        if (objMatch) {\n          objectives.push({\n            key,\n            value: json[key],\n            index: Number(objMatch[2]),\n            field: objMatch[3],\n          });\n          continue;\n        }\n\n        others.push({ key, value: json[key] });\n      }\n    }\n\n    // Sort interactions: first by index, then prioritize 'id' and 'type' fields\n    interactions.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id and type\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n      if (a.field === \"type\") return -1;\n      if (b.field === \"type\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort objectives: first by index, then prioritize 'id' field\n    objectives.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort other keys alphabetically\n    others.sort((a, b) => a.key.localeCompare(b.key));\n\n    // Process all items in the correct order\n    const processItems = (items: { key: string; value: any }[]) => {\n      items.forEach((item) => {\n        const obj: StringKeyMap = {};\n        obj[item.key] = item.value;\n        this.loadFromJSON(\n          unflatten(obj) as StringKeyMap,\n          CMIElement,\n          setCMIValue,\n          isNotInitialized,\n          setStartingData,\n        );\n      });\n    };\n\n    // Process in order: interactions, objectives, others\n    processItems(interactions);\n    processItems(objectives);\n    processItems(others);\n  }\n\n  /**\n   * Loads CMI data from a nested JSON object with recursive traversal.\n   *\n   * This method implements a recursive algorithm for loading nested JSON data into the CMI\n   * object structure. It handles several key aspects:\n   *\n   * 1. Recursive traversal: The method recursively traverses the nested JSON structure,\n   *    building CMI element paths as it goes (e.g., \"cmi.core.student_id\").\n   *\n   * 2. Type-specific handling: Different data types are handled differently:\n   *    - Arrays: Each array element is processed individually with its index in the path\n   *    - Objects: Recursively processed with updated path\n   *    - Primitives: Set directly using setCMIValue\n   *\n   * 3. Initialization check: Ensures the method is only called before API initialization\n   *\n   * 4. Starting data storage: Stores the original JSON data for potential future use\n   *\n   * The algorithm works by:\n   * - First storing the complete JSON object via setStartingData\n   * - Iterating through each property in the JSON object\n   * - For each property, determining its type and handling it accordingly\n   * - Building the CMI element path as it traverses the structure\n   * - Setting values at the appropriate paths using setCMIValue\n   *\n   * @param {{[key: string]: any}} json - The nested JSON object to load\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value at a specific path\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   * @param {Function} setStartingData - Function to store the original JSON data\n   *\n   * @example\n   * // Example of nested JSON input:\n   * // {\n   * //   \"core\": {\n   * //     \"student_id\": \"12345\",\n   * //     \"student_name\": \"John Doe\"\n   * //   },\n   * //   \"objectives\": [\n   * //     { \"id\": \"obj1\", \"score\": { \"raw\": 80 } },\n   * //     { \"id\": \"obj2\", \"score\": { \"raw\": 90 } }\n   * //   ]\n   * // }\n   */\n  loadFromJSON(\n    json: { [key: string]: any },\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    CMIElement = CMIElement !== undefined ? CMIElement : \"cmi\";\n\n    setStartingData(json);\n\n    // could this be refactored down to flatten(json) then setCMIValue on each?\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key) && json[key]) {\n        const currentCMIElement = (CMIElement ? CMIElement + \".\" : \"\") + key;\n        const value = json[key];\n\n        if (value.constructor === Array) {\n          for (let i = 0; i < value.length; i++) {\n            if (value[i]) {\n              const item = value[i];\n              const tempCMIElement = `${currentCMIElement}.${i}`;\n\n              if (item.constructor === Object) {\n                this.loadFromJSON(\n                  item,\n                  tempCMIElement,\n                  setCMIValue,\n                  isNotInitialized,\n                  setStartingData,\n                );\n              } else {\n                setCMIValue(tempCMIElement, item);\n              }\n            }\n          }\n        } else if (value.constructor === Object) {\n          this.loadFromJSON(\n            value,\n            currentCMIElement,\n            setCMIValue,\n            isNotInitialized,\n            setStartingData,\n          );\n        } else {\n          setCMIValue(currentCMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Render the CMI object to JSON for sending to an LMS.\n   *\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {string}\n   */\n  renderCMIToJSONString(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): string {\n    // Do we want/need to return fields that have no set value?\n    if (sendFullCommit) {\n      return JSON.stringify({ cmi });\n    }\n    return JSON.stringify({ cmi }, (k, v) => (v === undefined ? null : v), 2);\n  }\n\n  /**\n   * Returns a JS object representing the current cmi\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {object}\n   */\n  renderCMIToJSONObject(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): StringKeyMap {\n    // Revert to the original implementation to maintain compatibility with tests\n    return JSON.parse(this.renderCMIToJSONString(cmi, sendFullCommit));\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} alwaysSendTotalTime - Whether to always send total time\n   * @param {boolean|Function} renderCommonCommitFields - Whether to render common commit fields\n   * @param {Function} renderCommitObject - Function to render commit object\n   * @param {Function} renderCommitCMI - Function to render commit CMI\n   * @param {LogLevel} apiLogLevel - The API log level\n   * @return {CommitObject|StringKeyMap|Array<any>}\n   */\n  getCommitObject(\n    terminateCommit: boolean,\n    alwaysSendTotalTime: boolean,\n    renderCommonCommitFields: boolean | ((commitObject: CommitObject) => boolean),\n    renderCommitObject: (terminateCommit: boolean) => CommitObject,\n    renderCommitCMI: (terminateCommit: boolean) => StringKeyMap | Array<any>,\n    apiLogLevel: LogLevel,\n  ): CommitObject | StringKeyMap | Array<any> {\n    const shouldTerminateCommit = terminateCommit || alwaysSendTotalTime;\n    const commitObject = renderCommonCommitFields\n      ? renderCommitObject(shouldTerminateCommit)\n      : renderCommitCMI(shouldTerminateCommit);\n\n    if ([LogLevelEnum.DEBUG, \"1\", 1, \"DEBUG\"].includes(apiLogLevel)) {\n      console.debug(\"Commit (terminated: \" + (terminateCommit ? \"yes\" : \"no\") + \"): \");\n      console.debug(commitObject);\n    }\n    return commitObject;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ILoggingService } from \"../interfaces/services\";\nimport { defaultLogHandler } from \"../constants/default_settings\";\n\n/**\n * Centralized logging service implemented as a singleton\n * Provides methods for logging at different levels and configuring the log level\n */\nexport class LoggingService implements ILoggingService {\n  private static _instance: LoggingService;\n  private _logLevel: LogLevel = LogLevelEnum.ERROR;\n  private _logHandler: (messageLevel: LogLevel, logMessage: string) => void;\n\n  /**\n   * Private constructor to prevent direct instantiation\n   */\n  private constructor() {\n    // Default log handler uses console methods based on log level\n    this._logHandler = defaultLogHandler;\n  }\n\n  /**\n   * Get the singleton instance of LoggingService\n   *\n   * @returns {LoggingService} The singleton instance\n   */\n  public static getInstance(): LoggingService {\n    if (!LoggingService._instance) {\n      LoggingService._instance = new LoggingService();\n    }\n    return LoggingService._instance;\n  }\n\n  /**\n   * Set the log level\n   *\n   * @param {LogLevel} level - The log level to set\n   */\n  public setLogLevel(level: LogLevel): void {\n    this._logLevel = level;\n  }\n\n  /**\n   * Get the current log level\n   *\n   * @returns {LogLevel} The current log level\n   */\n  public getLogLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  /**\n   * Set a custom log handler\n   *\n   * @param {Function} handler - The function to handle log messages\n   */\n  public setLogHandler(handler: (messageLevel: LogLevel, logMessage: string) => void): void {\n    this._logHandler = handler;\n  }\n\n  /**\n   * Log a message if the message level is greater than or equal to the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @param {string} logMessage - The message to log\n   */\n  public log(messageLevel: LogLevel, logMessage: string): void {\n    if (this.shouldLog(messageLevel)) {\n      this._logHandler(messageLevel, logMessage);\n    }\n  }\n\n  /**\n   * Log a message at ERROR level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public error(logMessage: string): void {\n    this.log(LogLevelEnum.ERROR, logMessage);\n  }\n\n  /**\n   * Log a message at WARN level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public warn(logMessage: string): void {\n    this.log(LogLevelEnum.WARN, logMessage);\n  }\n\n  /**\n   * Log a message at INFO level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public info(logMessage: string): void {\n    this.log(LogLevelEnum.INFO, logMessage);\n  }\n\n  /**\n   * Log a message at DEBUG level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public debug(logMessage: string): void {\n    this.log(LogLevelEnum.DEBUG, logMessage);\n  }\n\n  /**\n   * Determine if a message should be logged based on its level and the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @returns {boolean} Whether the message should be logged\n   */\n  private shouldLog(messageLevel: LogLevel): boolean {\n    // Convert string levels to numbers for comparison\n    const numericMessageLevel = this.getNumericLevel(messageLevel);\n    const numericLogLevel = this.getNumericLevel(this._logLevel);\n\n    return numericMessageLevel >= numericLogLevel;\n  }\n\n  /**\n   * Convert a log level to its numeric value\n   *\n   * @param {LogLevel} level - The log level to convert\n   * @returns {number} The numeric value of the log level\n   */\n  private getNumericLevel(level: LogLevel): number {\n    if (level === undefined) return LogLevelEnum.NONE;\n\n    if (typeof level === \"number\") return level;\n\n    switch (level) {\n      case \"1\":\n      case \"DEBUG\":\n        return LogLevelEnum.DEBUG;\n      case \"2\":\n      case \"INFO\":\n        return LogLevelEnum.INFO;\n      case \"3\":\n      case \"WARN\":\n        return LogLevelEnum.WARN;\n      case \"4\":\n      case \"ERROR\":\n        return LogLevelEnum.ERROR;\n      case \"5\":\n      case \"NONE\":\n        return LogLevelEnum.NONE;\n      default:\n        return LogLevelEnum.ERROR; // Default to ERROR if unknown\n    }\n  }\n}\n\n// Export a function to get the singleton instance\nexport function getLoggingService(): LoggingService {\n  return LoggingService.getInstance();\n}\n","import { LogLevelEnum } from \"../constants/enums\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { ValidationError } from \"../exceptions\";\nimport { IErrorHandlingService, ILoggingService } from \"../interfaces/services\";\nimport { getLoggingService } from \"./LoggingService\";\n\n/**\n * Service for handling SCORM errors\n */\nexport class ErrorHandlingService implements IErrorHandlingService {\n  private _lastErrorCode: string = \"0\";\n  private readonly _errorCodes: ErrorCode;\n  private readonly _apiLog: (\n    functionName: string,\n    message: string,\n    logLevel?: LogLevelEnum,\n    CMIElement?: string,\n  ) => void;\n  private readonly _getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string;\n  private readonly _loggingService: ILoggingService;\n\n  /**\n   * Constructor for ErrorHandlingService\n   *\n   * @param {ErrorCode} errorCodes - The error codes object\n   * @param {Function} apiLog - Function for logging API calls\n   * @param {Function} getLmsErrorMessageDetails - Function for getting error message details\n   * @param {ILoggingService} loggingService - Optional logging service instance\n   */\n  constructor(\n    errorCodes: ErrorCode,\n    apiLog: (\n      functionName: string,\n      message: string,\n      logLevel?: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n    loggingService?: ILoggingService,\n  ) {\n    this._errorCodes = errorCodes;\n    this._apiLog = apiLog;\n    this._getLmsErrorMessageDetails = getLmsErrorMessageDetails;\n    this._loggingService = loggingService || getLoggingService();\n  }\n\n  /**\n   * Get the last error code\n   *\n   * @return {string} - The last error code\n   */\n  get lastErrorCode(): string {\n    return this._lastErrorCode;\n  }\n\n  /**\n   * Set the last error code\n   *\n   * @param {string} errorCode - The error code to set\n   */\n  set lastErrorCode(errorCode: string) {\n    this._lastErrorCode = errorCode;\n  }\n\n  /**\n   * Throws a SCORM error\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The error number\n   * @param {string} message - The error message\n   * @throws {ValidationError} - If throwException is true, throws a ValidationError\n   */\n  throwSCORMError(CMIElement: string, errorNumber: number, message?: string): void {\n    if (!message) {\n      message = this._getLmsErrorMessageDetails(errorNumber, true);\n    }\n\n    // Format a more descriptive error message with context\n    const formattedMessage = `SCORM Error ${errorNumber}: ${message}${CMIElement ? ` [Element: ${CMIElement}]` : \"\"}`;\n\n    // Log using both the API log and the logging service for consistency\n    this._apiLog(\"throwSCORMError\", errorNumber + \": \" + message, LogLevelEnum.ERROR, CMIElement);\n    this._loggingService.error(formattedMessage);\n\n    this._lastErrorCode = String(errorNumber);\n  }\n\n  /**\n   * Clears the last SCORM error code on success.\n   *\n   * @param {string} success - Whether the operation was successful\n   */\n  clearSCORMError(success: string): void {\n    if (success !== undefined && success !== global_constants.SCORM_FALSE) {\n      this._lastErrorCode = \"0\";\n    }\n  }\n\n  /**\n   * Handles exceptions that occur when accessing or setting CMI values.\n   *\n   * This method provides centralized error handling for exceptions that occur during\n   * CMI data operations. It differentiates between different types of errors and\n   * handles them appropriately:\n   *\n   * 1. ValidationError: These are expected errors from the validation system that\n   *    indicate a specific SCORM error condition (like invalid data format or range).\n   *    For these errors, the method:\n   *    - Sets the lastErrorCode to the error code from the ValidationError\n   *    - Returns SCORM_FALSE to indicate failure to the caller\n   *\n   * 2. Standard JavaScript Error: For general JavaScript errors (like TypeError,\n   *    ReferenceError, etc.), the method:\n   *    - Logs the error message with stack trace to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * 3. Unknown exceptions: For any other type of exception that doesn't match the\n   *    above categories, the method:\n   *    - Logs the entire exception object to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * This method is critical for maintaining SCORM compliance by ensuring that\n   * all errors are properly translated into the appropriate SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {ValidationError|Error|unknown} e - The exception that was thrown\n   * @param {string} returnValue - The default return value (typically an empty string)\n   * @return {string} - Either the original returnValue or SCORM_FALSE if an error occurred\n   *\n   * @example\n   * try {\n   *   const value = getCMIValue(\"cmi.core.score.raw\");\n   *   return value;\n   * } catch (e) {\n   *   return handleValueAccessException(e, \"\");\n   * }\n   */\n  handleValueAccessException(\n    CMIElement: string,\n    e: Error | ValidationError | unknown,\n    returnValue: string,\n  ): string {\n    if (e instanceof ValidationError) {\n      const validationError = e as ValidationError;\n      this._lastErrorCode = String(validationError.errorCode);\n\n      // Log validation errors at WARN level with context\n      const errorMessage = `Validation Error ${validationError.errorCode}: ${validationError.message} [Element: ${CMIElement}]`;\n      this._loggingService.warn(errorMessage);\n\n      returnValue = global_constants.SCORM_FALSE;\n    } else if (e instanceof Error) {\n      // For standard JS errors, include the stack trace and error type\n      const errorType = e.constructor.name; // Gets the error type (e.g., TypeError, ReferenceError)\n      const errorMessage = `${errorType}: ${e.message} [Element: ${CMIElement}]`;\n      const stackTrace = e.stack || \"\";\n\n      // Log the detailed error with stack trace\n      this._loggingService.error(`${errorMessage}\\n${stackTrace}`);\n\n      this.throwSCORMError(CMIElement, this._errorCodes.GENERAL, `${errorType}: ${e.message}`);\n    } else {\n      // For unknown errors, provide as much context as possible\n      const errorMessage = `Unknown error occurred while accessing [Element: ${CMIElement}]`;\n\n      this._loggingService.error(errorMessage);\n\n      try {\n        // Try to stringify the error object for more details\n        const errorDetails = JSON.stringify(e);\n        this._loggingService.error(`Error details: ${errorDetails}`);\n      } catch (jsonError) {\n        // If stringify fails, log that we couldn't get more details\n        this._loggingService.error(\"Could not stringify error object for details\");\n      }\n\n      this.throwSCORMError(CMIElement, this._errorCodes.GENERAL, \"Unknown error\");\n    }\n    return returnValue;\n  }\n\n  /**\n   * Get the error codes object\n   *\n   * @return {ErrorCode} - The error codes object\n   */\n  get errorCodes(): ErrorCode {\n    return this._errorCodes;\n  }\n}\n\n// Export a factory function to create the service\nexport function createErrorHandlingService(\n  errorCodes: ErrorCode,\n  apiLog: (\n    functionName: string,\n    message: string,\n    logLevel: LogLevelEnum,\n    CMIElement?: string,\n  ) => void,\n  getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n  loggingService?: ILoggingService,\n): ErrorHandlingService {\n  return new ErrorHandlingService(errorCodes, apiLog, getLmsErrorMessageDetails, loggingService);\n}\n","import { CommitObject, InternalSettings, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ErrorCode } from \"../constants/error_codes\";\n\n/**\n * Interface for sync queue item\n */\ninterface SyncQueueItem {\n  id: string;\n  courseId: string;\n  timestamp: number;\n  data: CommitObject;\n  syncAttempts: number;\n}\n\n/**\n * Service for handling offline storage and synchronization of SCORM data\n */\nexport class OfflineStorageService {\n  private settings: InternalSettings;\n  private error_codes: ErrorCode;\n  private storeName: string = \"scorm_again_offline_data\";\n  private syncQueue: string = \"scorm_again_sync_queue\";\n  private isOnline: boolean = navigator.onLine;\n  private syncInProgress: boolean = false;\n\n  /**\n   * Constructor for OfflineStorageService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Function} apiLog - The logging function\n   */\n  constructor(\n    settings: InternalSettings,\n    error_codes: ErrorCode,\n    private apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n\n    // Initialize listeners for online/offline events\n    window.addEventListener(\"online\", this.handleOnlineStatusChange.bind(this));\n    window.addEventListener(\"offline\", this.handleOnlineStatusChange.bind(this));\n  }\n\n  /**\n   * Handle changes in online status\n   */\n  private handleOnlineStatusChange() {\n    const wasOnline = this.isOnline;\n    this.isOnline = navigator.onLine;\n\n    // If we've come back online, trigger sync process\n    if (!wasOnline && this.isOnline) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        \"Device is back online, attempting to sync...\",\n        LogLevelEnum.INFO,\n      );\n      this.syncOfflineData();\n    } else if (wasOnline && !this.isOnline) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        \"Device is offline, data will be stored locally\",\n        LogLevelEnum.INFO,\n      );\n    }\n  }\n\n  /**\n   * Store commit data offline\n   * @param {string} courseId - Identifier for the course\n   * @param {CommitObject} commitData - The data to store offline\n   * @returns {Promise<ResultObject>} - Result of the storage operation\n   */\n  async storeOffline(courseId: string, commitData: CommitObject): Promise<ResultObject> {\n    try {\n      // Store the data in the sync queue with timestamp and unique ID\n      const queueItem: SyncQueueItem = {\n        id: `${courseId}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        courseId,\n        timestamp: Date.now(),\n        data: commitData,\n        syncAttempts: 0,\n      };\n\n      // Get current queue\n      const currentQueue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n      currentQueue.push(queueItem);\n\n      // Save updated queue\n      await this.saveToStorage(this.syncQueue, currentQueue);\n\n      // Also update the current state in the main storage (latest known state)\n      await this.saveToStorage(`${this.storeName}_${courseId}`, commitData);\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Stored data offline for course ${courseId}`,\n        LogLevelEnum.INFO,\n      );\n\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error storing offline data: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL,\n      };\n    }\n  }\n\n  /**\n   * Get the stored offline data for a course\n   * @param {string} courseId - Identifier for the course\n   * @returns {Promise<CommitObject|null>} - The stored data or null if not found\n   */\n  async getOfflineData(courseId: string): Promise<CommitObject | null> {\n    try {\n      const data = await this.getFromStorage<CommitObject>(`${this.storeName}_${courseId}`);\n      return data || null;\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error retrieving offline data: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return null;\n    }\n  }\n\n  /**\n   * Synchronize offline data with the LMS when connection is available\n   * @returns {Promise<boolean>} - Success status of synchronization\n   */\n  async syncOfflineData(): Promise<boolean> {\n    // Don't run multiple sync processes at once\n    if (this.syncInProgress || !this.isOnline) {\n      return false;\n    }\n\n    this.syncInProgress = true;\n\n    try {\n      // Get the queue of items to sync\n      const syncQueue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n\n      if (syncQueue.length === 0) {\n        this.syncInProgress = false;\n        return true;\n      }\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Found ${syncQueue.length} items to sync`,\n        LogLevelEnum.INFO,\n      );\n\n      // Keep track of successful and failed sync attempts\n      const remainingQueue: SyncQueueItem[] = [];\n\n      // Process each queue item\n      for (const item of syncQueue) {\n        // Skip items that have been attempted too many times\n        if (item.syncAttempts >= 5) {\n          this.apiLog(\n            \"OfflineStorageService\",\n            `Skipping item ${item.id} after 5 failed attempts`,\n            LogLevelEnum.WARN,\n          );\n          continue;\n        }\n\n        try {\n          // Attempt to sync this item\n          const syncResult = await this.sendDataToLMS(item.data);\n\n          if (syncResult.result === global_constants.SCORM_TRUE) {\n            // Sync was successful, no need to keep this item\n            this.apiLog(\n              \"OfflineStorageService\",\n              `Successfully synced item ${item.id}`,\n              LogLevelEnum.INFO,\n            );\n          } else {\n            // Sync failed, increment attempts and keep in queue\n            item.syncAttempts++;\n            remainingQueue.push(item);\n            this.apiLog(\n              \"OfflineStorageService\",\n              `Failed to sync item ${item.id}, attempt #${item.syncAttempts}`,\n              LogLevelEnum.WARN,\n            );\n          }\n        } catch (error) {\n          // On error, increment attempts and keep in queue\n          item.syncAttempts++;\n          remainingQueue.push(item);\n          this.apiLog(\n            \"OfflineStorageService\",\n            `Error syncing item ${item.id}: ${error}`,\n            LogLevelEnum.ERROR,\n          );\n        }\n      }\n\n      // Update the queue with remaining items\n      await this.saveToStorage(this.syncQueue, remainingQueue);\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Sync completed. ${syncQueue.length - remainingQueue.length} items synced, ${remainingQueue.length} items remaining`,\n        LogLevelEnum.INFO,\n      );\n\n      this.syncInProgress = false;\n      return true;\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error during sync process: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      this.syncInProgress = false;\n      return false;\n    }\n  }\n\n  /**\n   * Send data to the LMS when online\n   * @param {CommitObject} data - The data to send to the LMS\n   * @returns {Promise<ResultObject>} - Result of the sync operation\n   */\n  private async sendDataToLMS(data: CommitObject): Promise<ResultObject> {\n    if (!this.settings.lmsCommitUrl) {\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL,\n      };\n    }\n\n    try {\n      // Apply request handler if configured\n      const processedData = this.settings.requestHandler(data);\n\n      // Send the data to the LMS\n      const init = {\n        method: \"POST\",\n        mode: this.settings.fetchMode,\n        body: JSON.stringify(processedData),\n        headers: {\n          ...this.settings.xhrHeaders,\n          \"Content-Type\": this.settings.commitRequestDataType,\n        },\n      } as RequestInit;\n\n      if (this.settings.xhrWithCredentials) {\n        init.credentials = \"include\";\n      }\n\n      const response = await fetch(this.settings.lmsCommitUrl as string, init);\n\n      // Process the response using the configured handler\n      const result =\n        typeof this.settings.responseHandler === \"function\"\n          ? await this.settings.responseHandler(response)\n          : await response.json();\n\n      if (\n        response.status >= 200 &&\n        response.status <= 299 &&\n        (result.result === true || result.result === global_constants.SCORM_TRUE)\n      ) {\n        if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n          result.errorCode = 0;\n        }\n        return result;\n      } else {\n        if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n          result.errorCode = this.error_codes.GENERAL;\n        }\n        return result;\n      }\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error sending data to LMS: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL,\n      };\n    }\n  }\n\n  /**\n   * Check if the device is currently online\n   * @returns {boolean} - Online status\n   */\n  isDeviceOnline(): boolean {\n    return this.isOnline;\n  }\n\n  /**\n   * Get item from localStorage\n   * @param {string} key - The key to retrieve\n   * @returns {Promise<T|null>} - The retrieved data\n   */\n  private async getFromStorage<T>(key: string): Promise<T | null> {\n    const storedData = localStorage.getItem(key);\n    if (storedData) {\n      try {\n        return JSON.parse(storedData) as T;\n      } catch (e) {\n        return null;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Save item to localStorage\n   * @param {string} key - The key to store under\n   * @param {any} data - The data to store\n   * @returns {Promise<void>}\n   */\n  private async saveToStorage(key: string, data: any): Promise<void> {\n    localStorage.setItem(key, JSON.stringify(data));\n  }\n\n  /**\n   * Check if there is pending offline data for a course\n   * @param {string} courseId - Identifier for the course\n   * @returns {Promise<boolean>} - Whether there is pending data\n   */\n  async hasPendingOfflineData(courseId: string): Promise<boolean> {\n    const queue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n    return queue.some((item) => item.courseId === courseId);\n  }\n\n  /**\n   * Update the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: InternalSettings): void {\n    this.settings = settings;\n  }\n}\n","import { ErrorCode } from \"./constants/error_codes\";\nimport { global_constants } from \"./constants/api_constants\";\nimport * as Utilities from \"./utilities\";\nimport { formatMessage, StringKeyMap, stringMatches } from \"./utilities\";\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport { CommitObject, InternalSettings, LogLevel, ResultObject, Settings } from \"./types/api_types\";\nimport { DefaultSettings } from \"./constants/default_settings\";\nimport { IBaseAPI } from \"./interfaces/IBaseAPI\";\nimport { ScheduledCommit } from \"./helpers/scheduled_commit\";\nimport { LogLevelEnum } from \"./constants/enums\";\nimport { HttpService } from \"./services/HttpService\";\nimport { EventService } from \"./services/EventService\";\nimport { SerializationService } from \"./services/SerializationService\";\nimport { createErrorHandlingService } from \"./services/ErrorHandlingService\";\nimport { getLoggingService } from \"./services/LoggingService\";\nimport { OfflineStorageService } from \"./services/OfflineStorageService\";\nimport {\n  ICMIDataService,\n  IErrorHandlingService,\n  IEventService,\n  IHttpService,\n  ILoggingService,\n  IOfflineStorageService,\n  ISerializationService\n} from \"./interfaces/services\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { ValidationError } from \"./exceptions\";\n\n/**\n * Base API class for AICC, SCORM 1.2, and SCORM 2004. Should be considered\n * abstract, and never initialized on its own.\n */\nexport default abstract class BaseAPI implements IBaseAPI {\n  private _timeout?: ScheduledCommit | undefined;\n  private readonly _error_codes: ErrorCode;\n  private _settings: InternalSettings = DefaultSettings;\n  private readonly _httpService: IHttpService;\n  private _eventService: IEventService;\n  private _serializationService: ISerializationService;\n  private readonly _errorHandlingService: IErrorHandlingService;\n  private readonly _loggingService: ILoggingService;\n  private _offlineStorageService?: IOfflineStorageService;\n  private _courseId: string = \"\";\n\n  /**\n   * Constructor for Base API class. Sets some shared API fields, as well as\n   * sets up options for the API.\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Settings} settings - Optional settings for the API\n   * @param {IHttpService} httpService - Optional HTTP service instance\n   * @param {IEventService} eventService - Optional Event service instance\n   * @param {ISerializationService} serializationService - Optional Serialization service instance\n   * @param {ICMIDataService} cmiDataService - Optional CMI Data service instance\n   * @param {IErrorHandlingService} errorHandlingService - Optional Error Handling service instance\n   * @param {ILoggingService} loggingService - Optional Logging service instance\n   * @param {IOfflineStorageService} offlineStorageService - Optional Offline Storage service instance\n   */\n  protected constructor(\n    error_codes: ErrorCode,\n    settings?: Settings,\n    httpService?: IHttpService,\n    eventService?: IEventService,\n    serializationService?: ISerializationService,\n    cmiDataService?: ICMIDataService,\n    errorHandlingService?: IErrorHandlingService,\n    loggingService?: ILoggingService,\n    offlineStorageService?: IOfflineStorageService,\n  ) {\n    if (new.target === BaseAPI) {\n      throw new TypeError(\"Cannot construct BaseAPI instances directly\");\n    }\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n\n    this._error_codes = error_codes;\n\n    if (settings) {\n      this.settings = {\n        ...DefaultSettings,\n        ...settings,\n      } as InternalSettings;\n    }\n\n    // Initialize and configure LoggingService\n    this._loggingService = loggingService || getLoggingService();\n    this._loggingService.setLogLevel(this.apiLogLevel);\n\n    // If settings include a custom onLogMessage function, use it as the log handler\n    if (this.settings.onLogMessage) {\n      this._loggingService.setLogHandler(this.settings.onLogMessage);\n    }\n\n    // Initialize HTTP service\n    this._httpService = httpService || new HttpService(this.settings, this._error_codes);\n\n    // Initialize Event service\n    this._eventService =\n      eventService ||\n      new EventService((functionName, message, level, element) =>\n        this.apiLog(functionName, message, level, element),\n      );\n\n    // Initialize Serialization service\n    this._serializationService = serializationService || new SerializationService();\n\n    // Initialize Error Handling service\n    this._errorHandlingService =\n      errorHandlingService ||\n      createErrorHandlingService(\n        this._error_codes,\n        (functionName, message, level, element) =>\n          this.apiLog(functionName, message, level, element),\n        (errorNumber, detail) => this.getLmsErrorMessageDetails(errorNumber, detail),\n      );\n\n    // Initialize Offline Storage service if enabled\n    if (this.settings.enableOfflineSupport) {\n      this._offlineStorageService =\n        offlineStorageService ||\n        new OfflineStorageService(\n          this.settings,\n          this._error_codes,\n          (functionName, message, level, element) =>\n            this.apiLog(functionName, message, level, element),\n        );\n\n      if (this.settings.courseId) {\n        this._courseId = this.settings.courseId;\n      }\n\n      // Check for offline data to restore on initialization\n      if (this._offlineStorageService && this._courseId) {\n        this._offlineStorageService\n          .getOfflineData(this._courseId)\n          .then((offlineData) => {\n            if (offlineData) {\n              this.apiLog(\"constructor\", \"Found offline data to restore\", LogLevelEnum.INFO);\n              // Restore data from offline storage\n              this.loadFromJSON(offlineData.runtimeData);\n            }\n          })\n          .catch((error) => {\n            this.apiLog(\n              \"constructor\",\n              `Error retrieving offline data: ${error}`,\n              LogLevelEnum.ERROR,\n            );\n          });\n      }\n    }\n  }\n\n  public abstract cmi: BaseCMI;\n  public startingData?: StringKeyMap;\n\n  public currentState: number;\n  public apiLogLevel: LogLevel;\n  public selfReportSessionTime: boolean;\n\n  /**\n   * Get the last error code\n   * @return {string}\n   */\n  get lastErrorCode(): string {\n    return this._errorHandlingService?.lastErrorCode ?? \"0\";\n  }\n\n  /**\n   * Set the last error code\n   * @param {string} errorCode\n   */\n  set lastErrorCode(errorCode: string) {\n    if (this._errorHandlingService) {\n      this._errorHandlingService.lastErrorCode = errorCode;\n    }\n  }\n\n  /**\n   * Reset the API to its initial state.\n   * This method clears all current data and resets the API to an uninitialized state.\n   * It can optionally accept new settings to configure the API after reset.\n   *\n   * @param {Settings} settings - Optional new settings to apply after reset\n   */\n  abstract reset(settings?: Settings): void;\n\n  /**\n   * Common reset method for all APIs. New settings are merged with the existing settings.\n   * @param {Settings} settings\n   * @protected\n   */\n  commonReset(settings?: Settings): void {\n    this.apiLog(\"reset\", \"Called\", LogLevelEnum.INFO);\n\n    this.settings = { ...this.settings, ...settings };\n\n    this.clearScheduledCommit();\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n    this.lastErrorCode = \"0\";\n    this._eventService.reset();\n    this.startingData = {};\n\n    // Update offline storage service with new settings if it exists\n    if (this._offlineStorageService) {\n      this._offlineStorageService.updateSettings(this.settings);\n\n      if (settings?.courseId) {\n        this._courseId = settings.courseId;\n      }\n    }\n  }\n\n  /**\n   * Initialize the API\n   * @param {string} callbackName\n   * @param {string} initializeMessage\n   * @param {string} terminationMessage\n   * @return {string}\n   */\n  initialize(\n    callbackName: string,\n    initializeMessage?: string,\n    terminationMessage?: string,\n  ): string {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.isInitialized()) {\n      this.throwSCORMError(\"api\", this._error_codes.INITIALIZED, initializeMessage);\n    } else if (this.isTerminated()) {\n      this.throwSCORMError(\"api\", this._error_codes.TERMINATED, terminationMessage);\n    } else {\n      if (this.selfReportSessionTime) {\n        this.cmi.setStartTime();\n      }\n\n      this.currentState = global_constants.STATE_INITIALIZED;\n      this.lastErrorCode = \"0\";\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n\n      // If enabled, attempt to sync offline data on initialization\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._courseId &&\n        this.settings.syncOnInitialize &&\n        this._offlineStorageService.isDeviceOnline()\n      ) {\n        this._offlineStorageService.hasPendingOfflineData(this._courseId).then((hasPendingData) => {\n          if (hasPendingData) {\n            this.apiLog(\n              callbackName,\n              \"Syncing pending offline data on initialization\",\n              LogLevelEnum.INFO,\n            );\n            this._offlineStorageService?.syncOfflineData().then((syncSuccess) => {\n              if (syncSuccess) {\n                this.apiLog(callbackName, \"Successfully synced offline data\", LogLevelEnum.INFO);\n                this.processListeners(\"OfflineDataSynced\");\n              }\n            });\n          }\n        });\n      }\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Initialize the LMS API\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsInitialize(): string;\n\n  /**\n   * Finish the current LMS API session\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsFinish(): string;\n\n  /**\n   * Get the value of a CMI element from the LMS\n   * @param {string} CMIElement - The CMI element to get the value of\n   * @return {string} The value of the CMI element\n   */\n  abstract lmsGetValue(CMIElement: string): string;\n\n  /**\n   * Set the value of a CMI element in the LMS\n   * @param {string} CMIElement - The CMI element to set the value of\n   * @param {any} value - The value to set\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsSetValue(CMIElement: string, value: any): string;\n\n  /**\n   * Commit the current data to the LMS\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsCommit(): string;\n\n  /**\n   * Get the last error code from the LMS\n   * @return {string} The last error code\n   */\n  abstract lmsGetLastError(): string;\n\n  /**\n   * Get the error string for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get the string for\n   * @return {string} The error string\n   */\n  abstract lmsGetErrorString(CMIErrorCode: string | number): string;\n\n  /**\n   * Get diagnostic information for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get diagnostic information for\n   * @return {string} The diagnostic information\n   */\n  abstract lmsGetDiagnostic(CMIErrorCode: string | number): string;\n\n  /**\n   * Abstract method for validating that a response is correct.\n   * This method is used to validate the format and content of a response\n   * before it is set in the CMI data model.\n   *\n   * @param {string} _CMIElement - The CMI element path to validate\n   * @param {any} _value - The value to validate\n   * @throws {Error} If the response format is invalid\n   */\n  abstract validateCorrectResponse(_CMIElement: string, _value: any): void;\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   * APIs that inherit BaseAPI should override this method.\n   *\n   * @param {string} _CMIElement - unused\n   * @param {*} _value - unused\n   * @param {boolean} _foundFirstIndex - unused\n   * @return {BaseCMI|null}\n   * @abstract\n   */\n  abstract getChildElement(\n    _CMIElement: string,\n    _value: any,\n    _foundFirstIndex: boolean,\n  ): BaseCMI | null;\n\n  /**\n   * Attempts to store the data to the LMS, logs data if no LMS configured\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _calculateTotalTime\n   * @return {ResultObject}\n   * @abstract\n   */\n  abstract storeData(_calculateTotalTime: boolean): Promise<ResultObject>;\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _terminateCommit\n   * @return {StringKeyMap|Array}\n   * @abstract\n   */\n  abstract renderCommitCMI(_terminateCommit: boolean): StringKeyMap | Array<string>;\n\n  /**\n   * Render the commit object to the shortened format for LMS commit.\n   * This method transforms the CMI data into a format suitable for sending to the LMS.\n   * It is called during the commit process to prepare the data for transmission.\n   *\n   * @param {boolean} _terminateCommit - Whether this commit is part of the termination process\n   * @return {CommitObject} A formatted object containing the data to be sent to the LMS\n   * @example\n   * // Example of a commit object structure\n   * {\n   *   method: \"POST\",\n   *   params: {\n   *     cmi: { ... },\n   *     finishState: \"COMPLETED\"\n   *   }\n   * }\n   */\n  abstract renderCommitObject(_terminateCommit: boolean): CommitObject;\n\n  /**\n   * Logging for all SCORM actions\n   *\n   * @param {string} functionName\n   * @param {string} logMessage\n   * @param {number} messageLevel\n   * @param {string} CMIElement\n   */\n  apiLog(functionName: string, logMessage: string, messageLevel: LogLevel, CMIElement?: string) {\n    logMessage = formatMessage(functionName, logMessage, CMIElement);\n\n    if (messageLevel >= this.apiLogLevel) {\n      // Use the injected LoggingService\n      this._loggingService.log(messageLevel, logMessage);\n    }\n  }\n\n  /**\n   * Getter for _error_codes\n   * @return {ErrorCode}\n   */\n  get error_codes(): ErrorCode {\n    return this._error_codes;\n  }\n\n  /**\n   * Getter for _settings\n   * @return {Settings}\n   */\n  get settings(): InternalSettings {\n    return this._settings;\n  }\n\n  /**\n   * Setter for _settings\n   * @param {Settings} settings\n   */\n  set settings(settings: Settings) {\n    const previousSettings = this._settings;\n    this._settings = { ...this._settings, ...settings };\n\n    // Update HTTP service settings\n    this._httpService?.updateSettings(this._settings);\n\n    // Update log level if it changed\n    if (settings.logLevel !== undefined && settings.logLevel !== previousSettings.logLevel) {\n      this.apiLogLevel = settings.logLevel;\n      this._loggingService?.setLogLevel(settings.logLevel);\n    }\n\n    // Update log handler if onLogMessage changed\n    if (\n      settings.onLogMessage !== undefined &&\n      settings.onLogMessage !== previousSettings.onLogMessage\n    ) {\n      this._loggingService?.setLogHandler(settings.onLogMessage);\n    }\n  }\n\n  /**\n   * Terminates the current run of the API\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async terminate(callbackName: string, checkTerminated: boolean): Promise<string> {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.TERMINATION_BEFORE_INIT,\n        this._error_codes.MULTIPLE_TERMINATION,\n      )\n    ) {\n      this.currentState = global_constants.STATE_TERMINATED;\n      // If enabled, attempt to sync offline data before termination\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._courseId &&\n        this.settings.syncOnTerminate &&\n        this._offlineStorageService.isDeviceOnline()\n      ) {\n        const hasPendingData = await this._offlineStorageService.hasPendingOfflineData(\n          this._courseId,\n        );\n        if (hasPendingData) {\n          this.apiLog(\n            callbackName,\n            \"Syncing pending offline data before termination\",\n            LogLevelEnum.INFO,\n          );\n          await this._offlineStorageService.syncOfflineData();\n        }\n      }\n\n      const result: ResultObject = await this.storeData(true);\n      if ((result.errorCode ?? 0) > 0) {\n        this.throwSCORMError(\"api\", result.errorCode);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Get the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  getValue(callbackName: string, checkTerminated: boolean, CMIElement: string): string {\n    let returnValue: string = \"\";\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.RETRIEVE_BEFORE_INIT,\n        this._error_codes.RETRIEVE_AFTER_TERM,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.getCMIValue(CMIElement);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement);\n    }\n\n    this.apiLog(callbackName, \": returned: \" + returnValue, LogLevelEnum.INFO, CMIElement);\n\n    if (returnValue === undefined) {\n      return \"\";\n    }\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Sets the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {string} commitCallback\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  setValue(\n    callbackName: string,\n    commitCallback: string,\n    checkTerminated: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (value !== undefined) {\n      value = String(value);\n    }\n    let returnValue: string = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.STORE_BEFORE_INIT,\n        this._error_codes.STORE_AFTER_TERM,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.setCMIValue(CMIElement, value);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement, value);\n    }\n\n    if (returnValue === undefined) {\n      returnValue = global_constants.SCORM_FALSE;\n    }\n\n    // If we didn't have any errors while setting the data, go ahead and\n    // schedule a commit, if autocommit is turned on\n    if (String(this.lastErrorCode) === \"0\") {\n      if (this.settings.autocommit) {\n        this.scheduleCommit(this.settings.autocommitSeconds * 1000, commitCallback);\n      }\n    }\n\n    this.apiLog(\n      callbackName,\n      \": \" + value + \": result: \" + returnValue,\n      LogLevelEnum.INFO,\n      CMIElement,\n    );\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async commit(callbackName: string, checkTerminated: boolean = false): Promise<string> {\n    this.clearScheduledCommit();\n\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.COMMIT_BEFORE_INIT,\n        this._error_codes.COMMIT_AFTER_TERM,\n      )\n    ) {\n      const result = await this.storeData(false);\n      if ((result.errorCode ?? 0) > 0) {\n        this.throwSCORMError(\"api\", result.errorCode);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      this.apiLog(callbackName, \" Result: \" + returnValue, LogLevelEnum.DEBUG, \"HttpRequest\");\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      this.processListeners(callbackName);\n\n      // If online and there is offline data pending, attempt to sync it\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._offlineStorageService.isDeviceOnline() &&\n        this._courseId\n      ) {\n        this._offlineStorageService.hasPendingOfflineData(this._courseId).then((hasPendingData) => {\n          if (hasPendingData) {\n            this.apiLog(callbackName, \"Syncing pending offline data\", LogLevelEnum.INFO);\n            this._offlineStorageService?.syncOfflineData().then((syncSuccess) => {\n              if (syncSuccess) {\n                this.apiLog(callbackName, \"Successfully synced offline data\", LogLevelEnum.INFO);\n                this.processListeners(\"OfflineDataSynced\");\n              } else {\n                this.apiLog(callbackName, \"Failed to sync some offline data\", LogLevelEnum.WARN);\n              }\n            });\n          }\n        });\n      }\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Returns last error code\n   * @param {string} callbackName\n   * @return {string}\n   */\n  getLastError(callbackName: string): string {\n    const returnValue = String(this.lastErrorCode);\n\n    this.processListeners(callbackName);\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getErrorString(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getDiagnostic(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode, true);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Checks the LMS state and ensures it has been initialized.\n   *\n   * @param {boolean} checkTerminated\n   * @param {number} beforeInitError\n   * @param {number} afterTermError\n   * @return {boolean}\n   */\n  checkState(checkTerminated: boolean, beforeInitError: number, afterTermError: number): boolean {\n    if (this.isNotInitialized()) {\n      this.throwSCORMError(\"api\", beforeInitError);\n      return false;\n    } else if (checkTerminated && this.isTerminated()) {\n      this.throwSCORMError(\"api\", afterTermError);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {(string|number)} _errorNumber\n   * @param {boolean} _detail\n   * @return {string}\n   * @abstract\n   */\n  getLmsErrorMessageDetails(_errorNumber: string | number, _detail: boolean = false): string {\n    throw new Error(\"The getLmsErrorMessageDetails method has not been implemented\");\n  }\n\n  /**\n   * Gets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @return {string}\n   * @abstract\n   */\n  getCMIValue(_CMIElement: string): string {\n    throw new Error(\"The getCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Sets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @param {any} _value\n   * @return {string}\n   * @abstract\n   */\n  setCMIValue(_CMIElement: string, _value: any): string {\n    throw new Error(\"The setCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Shared API method to set a valid for a given element.\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  _commonSetCMIValue(\n    methodName: string,\n    scorm2004: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (!CMIElement || CMIElement === \"\") {\n      return global_constants.SCORM_FALSE;\n    }\n\n    this.lastErrorCode = \"0\";\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap | BaseCMI = this as StringKeyMap;\n    let returnValue = global_constants.SCORM_FALSE;\n    let foundFirstIndex = false;\n\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      const attribute = structure[idx];\n\n      if (idx === structure.length - 1) {\n        if (scorm2004 && attribute.substring(0, 8) === \"{target=\") {\n          if (this.isInitialized()) {\n            this.throwSCORMError(CMIElement, this._error_codes.READ_ONLY_ELEMENT);\n            break;\n          } else {\n            refObject = {\n              ...refObject,\n              attribute: value,\n            };\n          }\n        } else if (!this._checkObjectHasProperty(refObject as StringKeyMap, attribute)) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        } else {\n          if (\n            stringMatches(CMIElement, \"\\\\.correct_responses\\\\.\\\\d+$\") &&\n            this.isInitialized() &&\n            attribute !== \"pattern\"\n          ) {\n            this.validateCorrectResponse(CMIElement, value);\n            if (this.lastErrorCode !== \"0\") {\n              this.throwSCORMError(CMIElement, this._error_codes.TYPE_MISMATCH);\n              break;\n            }\n          }\n\n          if (!scorm2004 || this._errorHandlingService.lastErrorCode === \"0\") {\n            if (attribute === \"__proto__\" || attribute === \"constructor\") {\n              this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n              break;\n            }\n            (refObject as StringKeyMap)[attribute] = value;\n            returnValue = global_constants.SCORM_TRUE;\n          }\n        }\n      } else {\n        refObject = (refObject as StringKeyMap)[attribute] as StringKeyMap;\n        if (!refObject) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n\n        if (refObject instanceof CMIArray) {\n          const index = parseInt(structure[idx + 1], 10);\n\n          // SCO is trying to set an item on an array\n          if (!isNaN(index)) {\n            const item = refObject.childArray[index];\n\n            if (item) {\n              refObject = item;\n              foundFirstIndex = true;\n            } else {\n              const newChild = this.getChildElement(CMIElement, value, foundFirstIndex);\n              foundFirstIndex = true;\n\n              if (!newChild) {\n                if (this.lastErrorCode === \"0\") {\n                  this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n                }\n                break;\n              } else {\n                if (refObject.initialized) newChild.initialize();\n                refObject.childArray[index] = newChild;\n                refObject = newChild;\n              }\n            }\n\n            // Have to update idx value to skip the array position\n            idx++;\n          }\n        }\n      }\n    }\n\n    if (returnValue === global_constants.SCORM_FALSE) {\n      this.apiLog(\n        methodName,\n        `There was an error setting the value for: ${CMIElement}, value of: ${value}`,\n        LogLevelEnum.WARN,\n      );\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @return {any}\n   */\n  _commonGetCMIValue(methodName: string, scorm2004: boolean, CMIElement: string): any {\n    if (!CMIElement || CMIElement === \"\") {\n      return \"\";\n    }\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap = this as StringKeyMap;\n    let attribute = null;\n\n    const uninitializedErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) has not been initialized.`;\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      attribute = structure[idx];\n\n      if (!scorm2004) {\n        if (idx === structure.length - 1) {\n          if (!this._checkObjectHasProperty(refObject, attribute)) {\n            this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n            return;\n          }\n        }\n      } else {\n        if (\n          String(attribute).substring(0, 8) === \"{target=\" &&\n          typeof refObject._isTargetValid == \"function\"\n        ) {\n          const target = String(attribute).substring(8, String(attribute).length - 9);\n          return refObject._isTargetValid(target);\n        } else if (!this._checkObjectHasProperty(refObject, attribute)) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          return;\n        }\n      }\n\n      refObject = refObject[attribute] as StringKeyMap;\n      if (refObject === undefined) {\n        this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n        break;\n      }\n\n      if (refObject instanceof CMIArray) {\n        const index = parseInt(structure[idx + 1], 10);\n\n        // SCO is trying to set an item on an array\n        if (!isNaN(index)) {\n          const item = refObject.childArray[index];\n\n          if (item) {\n            refObject = item;\n          } else {\n            this.throwSCORMError(\n              CMIElement,\n              this._error_codes.VALUE_NOT_INITIALIZED,\n              uninitializedErrorMessage,\n            );\n            break;\n          }\n\n          // Have to update idx value to skip the array position\n          idx++;\n        }\n      }\n    }\n\n    if (refObject === null || refObject === undefined) {\n      if (!scorm2004) {\n        if (attribute === \"_children\") {\n          this.throwSCORMError(CMIElement, this._error_codes.CHILDREN_ERROR, undefined);\n        } else if (attribute === \"_count\") {\n          this.throwSCORMError(CMIElement, this._error_codes.COUNT_ERROR, undefined);\n        }\n      }\n    } else {\n      return refObject;\n    }\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isInitialized(): boolean {\n    return this.currentState === global_constants.STATE_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_NOT_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isNotInitialized(): boolean {\n    return this.currentState === global_constants.STATE_NOT_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_TERMINATED\n   *\n   * @return {boolean}\n   */\n  isTerminated(): boolean {\n    return this.currentState === global_constants.STATE_TERMINATED;\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event.\n   * This method allows you to register a callback function that will be executed\n   * when the specified event occurs.\n   *\n   * @param {string} listenerName - The name of the event to listen for (e.g., \"Initialize\", \"Terminate\", \"GetValue\", \"SetValue\", \"Commit\")\n   * @param {function} callback - The function to execute when the event occurs. The callback will receive relevant event data.\n   * @example\n   * // Listen for Initialize events\n   * api.on(\"Initialize\", function() {\n   *   console.log(\"API has been initialized\");\n   * });\n   *\n   * // Listen for SetValue events\n   * api.on(\"SetValue\", function(element, value) {\n   *   console.log(\"Setting \" + element + \" to \" + value);\n   * });\n   */\n  on(listenerName: string, callback: Function) {\n    this._eventService.on(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener.\n   * This method removes a previously registered callback for an event.\n   * Both the event name and the callback reference must match what was used in the 'on' method.\n   *\n   * @param {string} listenerName - The name of the event to stop listening for\n   * @param {function} callback - The callback function to remove\n   * @example\n   * // Remove a specific listener\n   * const myCallback = function() { console.log(\"API initialized\"); };\n   * api.on(\"Initialize\", myCallback);\n   * // Later, when you want to remove it:\n   * api.off(\"Initialize\", myCallback);\n   */\n  off(listenerName: string, callback: Function) {\n    this._eventService.off(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event.\n   * This method removes all callbacks registered for the specified event.\n   *\n   * @param {string} listenerName - The name of the event to clear all listeners for\n   * @example\n   * // Remove all listeners for the Initialize event\n   * api.clear(\"Initialize\");\n   */\n  clear(listenerName: string) {\n    this._eventService.clear(listenerName);\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created for a specific event.\n   * This method is called internally when SCORM events occur to notify all registered listeners.\n   * It triggers all callback functions registered for the specified event.\n   *\n   * @param {string} functionName - The name of the function/event that occurred\n   * @param {string} CMIElement - Optional CMI element involved in the event\n   * @param {any} value - Optional value associated with the event\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this._eventService.processListeners(functionName, CMIElement, value);\n  }\n\n  /**\n   * Throws a SCORM error with the specified error number and optional message.\n   * This method sets the last error code and can be used to indicate that an operation failed.\n   * The error number should correspond to one of the standard SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The SCORM error code to set\n   * @param {string} message - Optional custom error message to provide additional context\n   * @example\n   * // Throw a \"not initialized\" error\n   * this.throwSCORMError(301, \"The API must be initialized before calling GetValue\");\n   */\n  throwSCORMError(CMIElement: string, errorNumber: number, message?: string) {\n    this._errorHandlingService.throwSCORMError(CMIElement, errorNumber, message);\n  }\n\n  /**\n   * Clears the last SCORM error code when an operation succeeds.\n   * This method is typically called after successful API operations to reset the error state.\n   * It only clears the error if the success parameter is \"true\".\n   *\n   * @param {string} success - A string indicating whether the operation succeeded (\"true\" or \"false\")\n   * @example\n   * // Clear error after successful operation\n   * this.clearSCORMError(\"true\");\n   */\n  clearSCORMError(success: string) {\n    this._errorHandlingService.clearSCORMError(success);\n  }\n\n  /**\n   * Load the CMI from a flattened JSON object.\n   * This method populates the CMI data model from a flattened JSON structure\n   * where keys represent CMI element paths (e.g., \"cmi.core.student_id\").\n   *\n   * @param {StringKeyMap} json - The flattened JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a flattened JSON structure\n   * api.loadFromFlattenedJSON({\n   *   \"cmi.core.student_id\": \"12345\",\n   *   \"cmi.core.student_name\": \"John Doe\",\n   *   \"cmi.core.lesson_status\": \"incomplete\"\n   * });\n   */\n  loadFromFlattenedJSON(json: StringKeyMap, CMIElement?: string) {\n    if (!CMIElement) {\n      // by default, we start from a blank string because we're expecting each element to start with `cmi`\n      CMIElement = \"\";\n    }\n\n    this._serializationService.loadFromFlattenedJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Returns a flattened JSON object representing the current CMI data.\n   */\n  getFlattenedCMI(): StringKeyMap {\n    return Utilities.flatten(this.renderCMIToJSONObject());\n  }\n\n  /**\n   * Loads CMI data from a hierarchical JSON object.\n   * This method populates the CMI data model from a nested JSON structure\n   * that mirrors the CMI object hierarchy.\n   *\n   * @param {StringKeyMap} json - The hierarchical JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a hierarchical JSON structure\n   * api.loadFromJSON({\n   *   core: {\n   *     student_id: \"12345\",\n   *     student_name: \"John Doe\",\n   *     lesson_status: \"incomplete\"\n   *   },\n   *   objectives: [\n   *     { id: \"obj1\", score: { raw: 85 } }\n   *   ]\n   * });\n   */\n  loadFromJSON(json: StringKeyMap, CMIElement: string = \"\") {\n    if (\n      (!CMIElement || CMIElement === \"\") &&\n      !Object.hasOwnProperty.call(json, \"cmi\") &&\n      !Object.hasOwnProperty.call(json, \"adl\")\n    ) {\n      // providing a backward compatibility for the old v1 API\n      CMIElement = \"cmi\";\n    }\n    this._serializationService.loadFromJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Render the CMI object to a JSON string for sending to an LMS.\n   * This method serializes the current CMI data model to a JSON string.\n   * The output format is controlled by the sendFullCommit setting.\n   *\n   * @return {string} A JSON string representation of the CMI data\n   * @example\n   * // Get the current CMI data as a JSON string\n   * const jsonString = api.renderCMIToJSONString();\n   * console.log(jsonString); // '{\"core\":{\"student_id\":\"12345\",...}}'\n   */\n  renderCMIToJSONString(): string {\n    return this._serializationService.renderCMIToJSONString(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Returns a JavaScript object representing the current CMI data.\n   * This method creates a plain JavaScript object that mirrors the\n   * structure of the CMI data model, suitable for further processing.\n   *\n   * @return {StringKeyMap} A JavaScript object representing the CMI data\n   * @example\n   * // Get the current CMI data as a JavaScript object\n   * const cmiObject = api.renderCMIToJSONObject();\n   * console.log(cmiObject.core.student_id); // \"12345\"\n   */\n  renderCMIToJSONObject(): StringKeyMap {\n    return this._serializationService.renderCMIToJSONObject(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Process an HTTP request\n   *\n   * @param {string} url - The URL to send the request to\n   * @param {CommitObject | StringKeyMap | Array<any>} params - The parameters to send\n   * @param {boolean} immediate - Whether to send the request immediately without waiting\n   * @returns {Promise<ResultObject>} - The result of the request\n   * @async\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n  ): Promise<ResultObject> {\n    // If offline support is enabled and device is offline, store data locally instead of sending\n    if (\n      this.settings.enableOfflineSupport &&\n      this._offlineStorageService &&\n      !this._offlineStorageService.isDeviceOnline() &&\n      this._courseId\n    ) {\n      this.apiLog(\n        \"processHttpRequest\",\n        \"Device is offline, storing data locally\",\n        LogLevelEnum.INFO,\n      );\n\n      if (params && typeof params === \"object\" && \"cmi\" in params) {\n        return await this._offlineStorageService.storeOffline(\n          this._courseId,\n          params as CommitObject,\n        );\n      } else {\n        this.apiLog(\n          \"processHttpRequest\",\n          \"Invalid commit data format for offline storage\",\n          LogLevelEnum.ERROR,\n        );\n        return {\n          result: global_constants.SCORM_FALSE,\n          errorCode: this._error_codes.GENERAL,\n        };\n      }\n    }\n\n    // Otherwise, proceed with normal HTTP request\n    return await this._httpService.processHttpRequest(\n      url,\n      params,\n      immediate,\n      (functionName, message, level, element) => this.apiLog(functionName, message, level, element),\n      (functionName, CMIElement, value) => this.processListeners(functionName, CMIElement, value),\n    );\n  }\n\n  /**\n   * Schedules a commit operation to occur after a specified delay.\n   * This method is used to implement auto-commit functionality, where data\n   * is periodically sent to the LMS without requiring explicit commit calls.\n   *\n   * @param {number} when - The number of milliseconds to wait before committing\n   * @param {string} callback - The name of the commit event callback\n   * @example\n   * // Schedule a commit to happen in 60 seconds\n   * api.scheduleCommit(60000, \"commit\");\n   */\n  scheduleCommit(when: number, callback: string) {\n    if (!this._timeout) {\n      this._timeout = new ScheduledCommit(this, when, callback);\n      this.apiLog(\"scheduleCommit\", \"scheduled\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Clears and cancels any currently scheduled commits.\n   * This method is typically called when an explicit commit is performed\n   * or when the API is terminated, to prevent redundant commits.\n   *\n   * @example\n   * // Cancel any pending scheduled commits\n   * api.clearScheduledCommit();\n   */\n  clearScheduledCommit() {\n    if (this._timeout) {\n      this._timeout.cancel();\n      this._timeout = undefined;\n      this.apiLog(\"clearScheduledCommit\", \"cleared\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Checks if an object has a specific property, using multiple detection methods.\n   * This method performs a thorough check for property existence by:\n   * 1. Checking if it's an own property using Object.hasOwnProperty\n   * 2. Checking if it's defined in the prototype with a property descriptor\n   * 3. Checking if it's accessible via the 'in' operator (includes inherited properties)\n   *\n   * @param {StringKeyMap} StringKeyMap - The object to check for the property\n   * @param {string} attribute - The property name to look for\n   * @return {boolean} True if the property exists on the object or its prototype chain\n   * @private\n   *\n   * @example\n   * // Check for an own property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"name\"); // Returns true\n   *\n   * @example\n   * // Check for an inherited property\n   * class Parent { get type() { return \"parent\"; } }\n   * const child = Object.create(new Parent());\n   * this._checkObjectHasProperty(child, \"type\"); // Returns true\n   *\n   * @example\n   * // Check for a non-existent property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"age\"); // Returns false\n   */\n  private _checkObjectHasProperty(StringKeyMap: StringKeyMap, attribute: string): boolean {\n    return (\n      Object.hasOwnProperty.call(StringKeyMap, attribute) ||\n      Object.getOwnPropertyDescriptor(Object.getPrototypeOf(StringKeyMap), attribute) != null ||\n      attribute in StringKeyMap\n    );\n  }\n\n  /**\n   * Handles exceptions that occur when accessing CMI values.\n   * This method delegates to the ErrorHandlingService to process exceptions\n   * that occur during CMI data operations, ensuring consistent error handling\n   * throughout the API.\n   *\n   * @param {string} CMIElement\n   * @param {any} e - The exception that was thrown\n   * @param {string} returnValue - The default return value to use if an error occurs\n   * @return {string} Either the original returnValue or SCORM_FALSE if an error occurred\n   * @private\n   *\n   * @example\n   * // Handle a validation error when getting a CMI value\n   * try {\n   *   return this.getCMIValue(\"cmi.core.score.raw\");\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"\");\n   * }\n   *\n   * @example\n   * // Handle a general error when setting a CMI value\n   * try {\n   *   this.setCMIValue(\"cmi.core.lesson_status\", \"completed\");\n   *   return \"true\";\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"false\");\n   * }\n   */\n  private handleValueAccessException(CMIElement: string, e: any, returnValue: string): string {\n    if (e instanceof ValidationError) {\n      this.lastErrorCode = String(e.errorCode);\n      returnValue = global_constants.SCORM_FALSE;\n      this.throwSCORMError(CMIElement, e.errorCode, e.errorMessage);\n    } else {\n      if (e instanceof Error && e.message) {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, e.message);\n      } else {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, \"Unknown error\");\n      }\n    }\n    return returnValue;\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS.\n   * This method delegates to the SerializationService to create a properly\n   * formatted object containing the CMI data that needs to be sent to the LMS.\n   * The format and content of the commit object depend on whether this is a\n   * regular commit or a termination commit.\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @return {CommitObject|StringKeyMap|Array} The formatted commit object\n   * @protected\n   *\n   * @example\n   * // Create a regular commit object\n   * const regularCommit = this.getCommitObject(false);\n   * // Result might be: { cmi: { core: { lesson_status: \"incomplete\" } } }\n   *\n   * @example\n   * // Create a termination commit object (includes total_time)\n   * const terminationCommit = this.getCommitObject(true);\n   * // Result might be: { cmi: { core: { lesson_status: \"completed\", total_time: \"PT1H30M\" } } }\n   */\n  protected getCommitObject(terminateCommit: boolean): CommitObject | StringKeyMap | Array<any> {\n    return this._serializationService.getCommitObject(\n      terminateCommit,\n      this.settings.alwaysSendTotalTime,\n      this.settings.renderCommonCommitFields,\n      (terminateCommit) => this.renderCommitObject(terminateCommit),\n      (terminateCommit) => this.renderCommitCMI(terminateCommit),\n      this.apiLogLevel,\n    );\n  }\n}\n","import { CMI } from \"./cmi/scorm12/cmi\";\nimport * as Utilities from \"./utilities\";\nimport { StringKeyMap, stringMatches } from \"./utilities\";\nimport { global_constants, scorm12_constants } from \"./constants/api_constants\";\nimport { scorm12_errors } from \"./constants/error_codes\";\n\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport { CMIObjectivesObject } from \"./cmi/scorm12/objectives\";\nimport {\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n} from \"./cmi/scorm12/interactions\";\nimport { NAV } from \"./cmi/scorm12/nav\";\nimport { CommitObject, ResultObject, ScoreObject, Settings } from \"./types/api_types\";\nimport { CompletionStatus, SuccessStatus } from \"./constants/enums\";\nimport BaseAPI from \"./BaseAPI\";\nimport { scorm12_regex } from \"./constants/regex\";\n\n/**\n * API class for SCORM 1.2\n */\nclass Scorm12API extends BaseAPI {\n  /**\n   * Constructor for SCORM 1.2 API\n   * @param {object} settings\n   */\n  constructor(settings?: Settings) {\n    if (settings) {\n      if (settings.mastery_override === undefined) {\n        settings.mastery_override = false;\n      }\n    }\n\n    super(scorm12_errors, settings);\n\n    this.cmi = new CMI();\n    this.nav = new NAV();\n\n    // Rename functions to match 1.2 Spec and expose to modules\n    this.LMSInitialize = this.lmsInitialize;\n    this.LMSFinish = this.lmsFinish;\n    this.LMSGetValue = this.lmsGetValue;\n    this.LMSSetValue = this.lmsSetValue;\n    this.LMSCommit = this.lmsCommit;\n    this.LMSGetLastError = this.lmsGetLastError;\n    this.LMSGetErrorString = this.lmsGetErrorString;\n    this.LMSGetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  public statusSetByModule = false;\n\n  cmi: CMI;\n  nav: NAV;\n\n  LMSInitialize: () => string;\n  LMSFinish: () => string;\n  LMSGetValue: (CMIElement: string) => string;\n  LMSSetValue: (CMIElement: string, value: any) => string;\n  LMSCommit: () => string;\n  LMSGetLastError: () => string;\n  LMSGetErrorString: (CMIErrorCode: string) => string;\n  LMSGetDiagnostic: (CMIErrorCode: string) => string;\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset(settings?: Settings) {\n    this.commonReset(settings);\n\n    this.cmi?.reset();\n    this.nav?.reset();\n  }\n\n  /**\n   * lmsInitialize function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize(): string {\n    this.cmi.initialize();\n    if (this.cmi.core.lesson_status) {\n      this.statusSetByModule = true;\n    } else {\n      this.cmi.core.lesson_status = \"not attempted\";\n    }\n    return this.initialize(\n      \"LMSInitialize\",\n      \"LMS was already initialized!\",\n      \"LMS is already finished!\",\n    );\n  }\n\n  /**\n   * LMSFinish function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish(): string {\n    (async () => {\n      await this.internalFinish();\n    })();\n    return global_constants.SCORM_TRUE;\n  }\n\n  async internalFinish(): Promise<string> {\n    const result = await this.terminate(\"LMSFinish\", true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      if (this.nav.event !== \"\") {\n        if (this.nav.event === \"continue\") {\n          this.processListeners(\"SequenceNext\");\n        } else {\n          this.processListeners(\"SequencePrevious\");\n        }\n      } else if (this.settings.autoProgress) {\n        this.processListeners(\"SequenceNext\");\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * LMSGetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement: string): string {\n    return this.getValue(\"LMSGetValue\", false, CMIElement);\n  }\n\n  /**\n   * LMSSetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement: string, value: any): string {\n    if (CMIElement === \"cmi.core.lesson_status\") {\n      this.statusSetByModule = true;\n    }\n    return this.setValue(\"LMSSetValue\", \"LMSCommit\", false, CMIElement, value);\n  }\n\n  /**\n   * LMSCommit function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit(): string {\n    if (this.settings.asyncCommit) {\n      this.scheduleCommit(500, \"LMSCommit\");\n    } else {\n      (async () => {\n        await this.commit(\"LMSCommit\", false);\n      })();\n    }\n    return global_constants.SCORM_TRUE;\n  }\n\n  /**\n   * LMSGetLastError function from SCORM 1.2 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError(): string {\n    return this.getLastError(\"LMSGetLastError\");\n  }\n\n  /**\n   * LMSGetErrorString function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode: string): string {\n    return this.getErrorString(\"LMSGetErrorString\", CMIErrorCode);\n  }\n\n  /**\n   * LMSGetDiagnostic function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode: string): string {\n    return this.getDiagnostic(\"LMSGetDiagnostic\", CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  override setCMIValue(CMIElement: string, value: any): string {\n    return this._commonSetCMIValue(\"LMSSetValue\", false, CMIElement, value);\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  override getCMIValue(CMIElement: string): any {\n    return this._commonGetCMIValue(\"getCMIValue\", false, CMIElement);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {*} _value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI|null}\n   */\n  getChildElement(CMIElement: string, _value: any, foundFirstIndex: boolean): BaseCMI | null {\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      return new CMIObjectivesObject();\n    } else if (\n      foundFirstIndex &&\n      stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+\")\n    ) {\n      return new CMIInteractionsCorrectResponsesObject();\n    } else if (\n      foundFirstIndex &&\n      stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+\")\n    ) {\n      return new CMIInteractionsObjectivesObject();\n    } else if (!foundFirstIndex && stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\")) {\n      return new CMIInteractionsObject();\n    }\n\n    return null;\n  }\n\n  /**\n   * Validates Correct Response values\n   *\n   * @param {string} _CMIElement\n   * @param {*} _value\n   */\n  validateCorrectResponse(_CMIElement: string, _value: any) {\n    // do nothing\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {number|string} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  override getLmsErrorMessageDetails(errorNumber: number | string, detail: boolean): string {\n    let basicMessage = \"No Error\";\n    let detailMessage = \"No Error\";\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (scorm12_constants.error_descriptions[errorNumber]) {\n      basicMessage = scorm12_constants.error_descriptions[errorNumber].basicMessage;\n      detailMessage = scorm12_constants.error_descriptions[errorNumber].detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {Scorm12API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI: Scorm12API) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   *\n   * @param {boolean} terminateCommit\n   * @return {object|Array}\n   */\n  renderCommitCMI(terminateCommit: boolean): StringKeyMap | Array<string> {\n    const cmiExport: StringKeyMap = this.renderCMIToJSONObject();\n\n    if (terminateCommit) {\n      (cmiExport.cmi as any).core.total_time = this.cmi.getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened: StringKeyMap = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case \"flattened\":\n        return Utilities.flatten(cmiExport);\n      case \"params\":\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case \"json\":\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   * @param {boolean} terminateCommit\n   * @return {CommitObject}\n   */\n  renderCommitObject(terminateCommit: boolean): CommitObject {\n    const cmiExport = this.renderCommitCMI(terminateCommit);\n    const totalTimeHHMMSS = this.cmi.getCurrentTotalTime();\n    const totalTimeSeconds = Utilities.getTimeAsSeconds(totalTimeHHMMSS, scorm12_regex.CMITimespan);\n    const lessonStatus = this.cmi.core.lesson_status;\n    let completionStatus = CompletionStatus.UNKNOWN;\n    let successStatus = SuccessStatus.UNKNOWN;\n    if (lessonStatus) {\n      completionStatus =\n        lessonStatus === \"completed\" || lessonStatus === \"passed\"\n          ? CompletionStatus.COMPLETED\n          : CompletionStatus.INCOMPLETE;\n      if (lessonStatus === \"passed\") {\n        successStatus = SuccessStatus.PASSED;\n      } else if (lessonStatus === \"failed\") {\n        successStatus = SuccessStatus.FAILED;\n      }\n    }\n\n    const score = this.cmi.core.score;\n    const scoreObject: ScoreObject = {};\n    if (score) {\n      if (!Number.isNaN(Number.parseFloat(score.raw))) {\n        scoreObject.raw = Number.parseFloat(score.raw);\n      }\n      if (!Number.isNaN(Number.parseFloat(score.min))) {\n        scoreObject.min = Number.parseFloat(score.min);\n      }\n      if (!Number.isNaN(Number.parseFloat(score.max))) {\n        scoreObject.max = Number.parseFloat(score.max);\n      }\n    }\n\n    const commitObject: CommitObject = {\n      successStatus: successStatus,\n      completionStatus: completionStatus,\n      runtimeData: cmiExport as StringKeyMap,\n      totalTimeSeconds: totalTimeSeconds,\n    };\n    if (scoreObject) {\n      commitObject.score = scoreObject;\n    }\n    return commitObject;\n  }\n\n  /**\n   * Attempts to store the data to the LMS\n   *\n   * @param {boolean} terminateCommit\n   * @return {ResultObject}\n   */\n  async storeData(terminateCommit: boolean): Promise<ResultObject> {\n    if (terminateCommit) {\n      const originalStatus = this.cmi.core.lesson_status;\n      if (\n        !this.cmi.core.lesson_status ||\n        (!this.statusSetByModule && this.cmi.core.lesson_status === \"not attempted\")\n      ) {\n        this.cmi.core.lesson_status = \"completed\";\n      }\n\n      if (this.cmi.core.lesson_mode === \"normal\") {\n        if (this.cmi.core.credit === \"credit\") {\n          if (\n            this.settings.mastery_override &&\n            this.cmi.student_data.mastery_score !== \"\" &&\n            this.cmi.core.score.raw !== \"\"\n          ) {\n            this.cmi.core.lesson_status =\n              parseFloat(this.cmi.core.score.raw) >= parseFloat(this.cmi.student_data.mastery_score)\n                ? \"passed\"\n                : \"failed\";\n          }\n        }\n      } else if (this.cmi.core.lesson_mode === \"browse\") {\n        if (\n          ((this.startingData?.cmi as any)?.core?.lesson_status || \"\") === \"\" &&\n          originalStatus === \"not attempted\"\n        ) {\n          this.cmi.core.lesson_status = \"browsed\";\n        }\n      }\n    }\n\n    const commitObject = this.getCommitObject(terminateCommit);\n    if (typeof this.settings.lmsCommitUrl === \"string\") {\n      return await this.processHttpRequest(\n        this.settings.lmsCommitUrl,\n        commitObject,\n        terminateCommit,\n      );\n    } else {\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    }\n  }\n}\n\nexport default Scorm12API;\n","import { ValidationError } from \"../exceptions\";\nimport { aicc_constants } from \"../constants/api_constants\";\n\nconst aicc_errors = aicc_constants.error_descriptions;\n\n/**\n * AICC Validation Error\n */\nexport class AICCValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(aicc_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        aicc_errors[String(errorCode)].basicMessage,\n        aicc_errors[String(errorCode)].detailMessage,\n      );\n    } else {\n      super(CMIElement, 101, aicc_errors[\"101\"].basicMessage, aicc_errors[\"101\"].detailMessage);\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, AICCValidationError.prototype);\n  }\n}\n","import { checkValidFormat } from \"../common/validation\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function checkAICCValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm12_errors.TYPE_MISMATCH,\n    AICCValidationError,\n    allowEmptyString,\n  );\n}\n","import { CMIArray } from \"../common/array\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { aicc_regex } from \"../../constants/regex\";\n\n/**\n * AICC Evaluation object\n */\nexport class CMIEvaluation extends BaseCMI {\n  /**\n   * Constructor for AICC Evaluation object\n   */\n  constructor() {\n    super(\"cmi.evaluation\");\n    this.comments = new CMIEvaluationComments();\n  }\n\n  public comments: CMIEvaluationComments;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.comments?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this.comments?.reset();\n  }\n\n  /**\n   * toJSON for cmi.evaluation object\n   * @return {{comments: CMIEvaluationComments}}\n   */\n  toJSON(): {\n    comments: CMIEvaluationComments;\n  } {\n    this.jsonString = true;\n    const result = {\n      comments: this.comments,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing AICC's cmi.evaluation.comments object\n */\n\nclass CMIEvaluationComments extends CMIArray {\n  /**\n   * Constructor for AICC Evaluation Comments object\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.evaluation.comments\",\n      children: aicc_constants.comments_children,\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: AICCValidationError,\n    });\n  }\n}\n\n/**\n * Class for AICC Evaluation Comments\n */\nexport class CMIEvaluationCommentsObject extends BaseCMI {\n  private _content = \"\";\n  private _location = \"\";\n  private _time = \"\";\n\n  /**\n   * Constructor for Evaluation Comments\n   */\n  constructor() {\n    super(\"cmi.evaluation.comments.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._content = \"\";\n    this._location = \"\";\n    this._time = \"\";\n  }\n\n  /**\n   * Getter for _content\n   * @return {string}\n   */\n  get content(): string {\n    return this._content;\n  }\n\n  /**\n   * Setter for _content\n   * @param {string} content\n   */\n  set content(content: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".content\", content, aicc_regex.CMIString256)) {\n      this._content = content;\n    }\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".location\", location, aicc_regex.CMIString256)) {\n      this._location = location;\n    }\n  }\n\n  /**\n   * Getter for _time\n   * @return {string}\n   */\n  get time(): string {\n    return this._time;\n  }\n\n  /**\n   * Setting for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".time\", time, aicc_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.evaluation.comments.n object\n   * @return {\n   *    {\n   *      content: string,\n   *      location: string,\n   *      time: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    content: string;\n    location: string;\n    time: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      content: this.content,\n      location: this.location,\n      time: this.time,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { CMIStudentPreference } from \"../scorm12/student_preference\";\n\n/**\n * StudentPreferences class for AICC\n */\nexport class AICCStudentPreferences extends CMIStudentPreference {\n  /**\n   * Constructor for AICC Student Preferences object\n   */\n  constructor() {\n    super(aicc_constants.student_preference_children);\n    this.windows = new CMIArray({\n      CMIElement: \"cmi.student_preference.windows\",\n      errorCode: scorm12_errors.INVALID_SET_VALUE,\n      errorClass: AICCValidationError,\n      children: \"\",\n    });\n  }\n\n  public windows: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.windows?.initialize();\n  }\n\n  private _lesson_type = \"\";\n  private _text_color = \"\";\n  private _text_location = \"\";\n  private _text_size = \"\";\n  private _video = \"\";\n\n  /**\n   * Getter for _lesson_type\n   * @return {string}\n   */\n  get lesson_type(): string {\n    return this._lesson_type;\n  }\n\n  /**\n   * Setter for _lesson_type\n   * @param {string} lesson_type\n   */\n  set lesson_type(lesson_type: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".lesson_type\", lesson_type, aicc_regex.CMIString256)\n    ) {\n      this._lesson_type = lesson_type;\n    }\n  }\n\n  /**\n   * Getter for _text_color\n   * @return {string}\n   */\n  get text_color(): string {\n    return this._text_color;\n  }\n\n  /**\n   * Setter for _text_color\n   * @param {string} text_color\n   */\n  set text_color(text_color: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".text_color\", text_color, aicc_regex.CMIString256)\n    ) {\n      this._text_color = text_color;\n    }\n  }\n\n  /**\n   * Getter for _text_location\n   * @return {string}\n   */\n  get text_location(): string {\n    return this._text_location;\n  }\n\n  /**\n   * Setter for _text_location\n   * @param {string} text_location\n   */\n  set text_location(text_location: string) {\n    if (\n      checkAICCValidFormat(\n        this._cmi_element + \".text_location\",\n        text_location,\n        aicc_regex.CMIString256,\n      )\n    ) {\n      this._text_location = text_location;\n    }\n  }\n\n  /**\n   * Getter for _text_size\n   * @return {string}\n   */\n  get text_size(): string {\n    return this._text_size;\n  }\n\n  /**\n   * Setter for _text_size\n   * @param {string} text_size\n   */\n  set text_size(text_size: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".text_size\", text_size, aicc_regex.CMIString256)\n    ) {\n      this._text_size = text_size;\n    }\n  }\n\n  /**\n   * Getter for _video\n   * @return {string}\n   */\n  get video(): string {\n    return this._video;\n  }\n\n  /**\n   * Setter for _video\n   * @param {string} video\n   */\n  set video(video: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".video\", video, aicc_regex.CMIString256)) {\n      this._video = video;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_preference\n   *\n   * @return {\n   *    {\n   *      audio: string,\n   *      language: string,\n   *      speed: string,\n   *      text: string,\n   *      text_color: string,\n   *      text_location: string,\n   *      text_size: string,\n   *      video: string,\n   *      windows: CMIArray\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    audio: string;\n    language: string;\n    lesson_type: string;\n    speed: string;\n    text: string;\n    text_color: string;\n    text_location: string;\n    text_size: string;\n    video: string;\n    windows: CMIArray;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio: this.audio,\n      language: this.language,\n      lesson_type: this.lesson_type,\n      speed: this.speed,\n      text: this.text,\n      text_color: this.text_color,\n      text_location: this.text_location,\n      text_size: this.text_size,\n      video: this.video,\n      windows: this.windows,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Class representing the AICC cmi.student_demographics object\n */\nexport class CMIStudentDemographics extends BaseCMI {\n  private __children = aicc_constants.student_demographics_children;\n  private _city = \"\";\n  private _class = \"\";\n  private _company = \"\";\n  private _country = \"\";\n  private _experience = \"\";\n  private _familiar_name = \"\";\n  private _instructor_name = \"\";\n  private _title = \"\";\n  private _native_language = \"\";\n  private _state = \"\";\n  private _street_address = \"\";\n  private _telephone = \"\";\n  private _years_experience = \"\";\n\n  /**\n   * Constructor for AICC StudentDemographics object\n   */\n  constructor() {\n    super(\"cmi.student_demographics\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Getter for city\n   * @return {string}\n   */\n  get city(): string {\n    return this._city;\n  }\n\n  /**\n   * Setter for _city. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} city\n   */\n  set city(city: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.city\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._city = city;\n    }\n  }\n\n  /**\n   * Getter for class\n   * @return {string}\n   */\n  get class(): string {\n    return this._class;\n  }\n\n  /**\n   * Setter for _class. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} clazz\n   */\n  set class(clazz: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.class\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._class = clazz;\n    }\n  }\n\n  /**\n   * Getter for company\n   * @return {string}\n   */\n  get company(): string {\n    return this._company;\n  }\n\n  /**\n   * Setter for _company. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} company\n   */\n  set company(company: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.company\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._company = company;\n    }\n  }\n\n  /**\n   * Getter for country\n   * @return {string}\n   */\n  get country(): string {\n    return this._country;\n  }\n\n  /**\n   * Setter for _country. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} country\n   */\n  set country(country: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.country\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._country = country;\n    }\n  }\n\n  /**\n   * Getter for experience\n   * @return {string}\n   */\n  get experience(): string {\n    return this._experience;\n  }\n\n  /**\n   * Setter for _experience. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} experience\n   */\n  set experience(experience: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.experience\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._experience = experience;\n    }\n  }\n\n  /**\n   * Getter for familiar_name\n   * @return {string}\n   */\n  get familiar_name(): string {\n    return this._familiar_name;\n  }\n\n  /**\n   * Setter for _familiar_name. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} familiar_name\n   */\n  set familiar_name(familiar_name: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.familiar_name\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._familiar_name = familiar_name;\n    }\n  }\n\n  /**\n   * Getter for instructor_name\n   * @return {string}\n   */\n  get instructor_name(): string {\n    return this._instructor_name;\n  }\n\n  /**\n   * Setter for _instructor_name. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} instructor_name\n   */\n  set instructor_name(instructor_name: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.instructor_name\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._instructor_name = instructor_name;\n    }\n  }\n\n  /**\n   * Getter for title\n   * @return {string}\n   */\n  get title(): string {\n    return this._title;\n  }\n\n  /**\n   * Setter for _title. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} title\n   */\n  set title(title: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.title\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._title = title;\n    }\n  }\n\n  /**\n   * Getter for native_language\n   * @return {string}\n   */\n  get native_language(): string {\n    return this._native_language;\n  }\n\n  /**\n   * Setter for _native_language. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} native_language\n   */\n  set native_language(native_language: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.native_language\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._native_language = native_language;\n    }\n  }\n\n  /**\n   * Getter for state\n   * @return {string}\n   */\n  get state(): string {\n    return this._state;\n  }\n\n  /**\n   * Setter for _state. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} state\n   */\n  set state(state: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.state\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._state = state;\n    }\n  }\n\n  /**\n   * Getter for street_address\n   * @return {string}\n   */\n  get street_address(): string {\n    return this._street_address;\n  }\n\n  /**\n   * Setter for _street_address. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} street_address\n   */\n  set street_address(street_address: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.street_address\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._street_address = street_address;\n    }\n  }\n\n  /**\n   * Getter for telephone\n   * @return {string}\n   */\n  get telephone(): string {\n    return this._telephone;\n  }\n\n  /**\n   * Setter for _telephone. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} telephone\n   */\n  set telephone(telephone: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.telephone\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._telephone = telephone;\n    }\n  }\n\n  /**\n   * Getter for years_experience\n   * @return {string}\n   */\n  get years_experience(): string {\n    return this._years_experience;\n  }\n\n  /**\n   * Setter for _years_experience. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} years_experience\n   */\n  set years_experience(years_experience: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.years_experience\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._years_experience = years_experience;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_demographics object\n   * @return {\n   *      {\n   *        city: string,\n   *        class: string,\n   *        company: string,\n   *        country: string,\n   *        experience: string,\n   *        familiar_name: string,\n   *        instructor_name: string,\n   *        title: string,\n   *        native_language: string,\n   *        state: string,\n   *        street_address: string,\n   *        telephone: string,\n   *        years_experience: string\n   *      }\n   *    }\n   */\n  toJSON(): {\n    city: string;\n    class: string;\n    company: string;\n    country: string;\n    experience: string;\n    familiar_name: string;\n    instructor_name: string;\n    title: string;\n    native_language: string;\n    state: string;\n    street_address: string;\n    telephone: string;\n    years_experience: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      city: this.city,\n      class: this.class,\n      company: this.company,\n      country: this.country,\n      experience: this.experience,\n      familiar_name: this.familiar_name,\n      instructor_name: this.instructor_name,\n      title: this.title,\n      native_language: this.native_language,\n      state: this.state,\n      street_address: this.street_address,\n      telephone: this.telephone,\n      years_experience: this.years_experience,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { checkAICCValidFormat } from \"./validation\";\n\n/**\n * Class representing the AICC cmi.student_data.tries object\n */\nexport class CMITries extends CMIArray {\n  /**\n   * Constructor for inline Tries Array class\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.student_data.tries\",\n      children: aicc_constants.tries_children,\n    });\n  }\n}\n\n/**\n * Class for AICC Tries\n */\nexport class CMITriesObject extends BaseCMI {\n  private _status = \"\";\n  private _time = \"\";\n\n  /**\n   * Constructor for AICC Tries object\n   */\n  constructor() {\n    super(\"cmi.student_data.tries.n\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.student_data.tries.n.score\",\n      score_children: aicc_constants.score_children,\n      score_range: aicc_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE,\n      errorClass: AICCValidationError,\n    });\n  }\n\n  public score: CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._status = \"\";\n    this._time = \"\";\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for _status\n   * @return {string}\n   */\n  get status(): string {\n    return this._status;\n  }\n\n  /**\n   * Setter for _status\n   * @param {string} status\n   */\n  set status(status: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".status\", status, aicc_regex.CMIStatus2)) {\n      this._status = status;\n    }\n  }\n\n  /**\n   * Getter for _time\n   * @return {string}\n   */\n  get time(): string {\n    return this._time;\n  }\n\n  /**\n   * Setter for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".time\", time, aicc_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data.tries.n object\n   * @return {\n   *    {\n   *      status: string,\n   *      time: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    status: string;\n    time: string;\n    score: CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      status: this.status,\n      time: this.time,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { CMIArray } from \"../common/array\";\n\n/**\n * Class for cmi.student_data.attempt_records array\n */\nexport class CMIAttemptRecords extends CMIArray {\n  /**\n   * Constructor for inline Tries Array class\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.student_data.attempt_records\",\n      children: aicc_constants.attempt_records_children,\n    });\n  }\n}\n\n/**\n * Class for AICC Attempt Records\n */\nexport class CMIAttemptRecordsObject extends BaseCMI {\n  private _lesson_status = \"\";\n\n  /**\n   * Constructor for AICC Attempt Records object\n   */\n  constructor() {\n    super(\"cmi.student_data.attempt_records.n\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.student_data.attempt_records.n.score\",\n      score_children: aicc_constants.score_children,\n      score_range: aicc_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE,\n      errorClass: AICCValidationError,\n    });\n  }\n\n  public score: CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n\n    this._lesson_status = \"\";\n    this.score?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for _lesson_status\n   * @return {string}\n   */\n  get lesson_status(): string {\n    return this._lesson_status;\n  }\n\n  /**\n   * Setter for _lesson_status\n   * @param {string} lesson_status\n   */\n  set lesson_status(lesson_status: string) {\n    if (\n      checkAICCValidFormat(\n        this._cmi_element + \".lesson_status\",\n        lesson_status,\n        aicc_regex.CMIStatus2,\n      )\n    ) {\n      this._lesson_status = lesson_status;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data.attempt_records.n object\n   * @return {\n   *    {\n   *         lesson_status: string,\n   *         score: CMIScore\n   *     }\n   *  }\n   */\n  toJSON(): {\n    lesson_status: string;\n    score: CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      lesson_status: this.lesson_status,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { CMITries } from \"./tries\";\nimport { CMIStudentData } from \"../scorm12/student_data\";\nimport { CMIAttemptRecords } from \"./attempts\";\n\n/**\n * StudentData class for AICC\n */\nexport class AICCCMIStudentData extends CMIStudentData {\n  /**\n   * Constructor for AICC StudentData object\n   */\n  constructor() {\n    super(aicc_constants.student_data_children);\n    this.tries = new CMITries();\n    this.attempt_records = new CMIAttemptRecords();\n  }\n\n  public tries: CMITries;\n  public attempt_records: CMIAttemptRecords;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.tries?.initialize();\n    this.attempt_records?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n    this.tries?.reset(true);\n    this.attempt_records?.reset(true);\n  }\n\n  private _tries_during_lesson = \"\";\n\n  /**\n   * Getter for tries_during_lesson\n   * @return {string}\n   */\n  get tries_during_lesson(): string {\n    return this._tries_during_lesson;\n  }\n\n  /**\n   * Setter for _tries_during_lesson. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} tries_during_lesson\n   */\n  set tries_during_lesson(tries_during_lesson: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_data.tries_during_lesson\",\n        scorm12_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._tries_during_lesson = tries_during_lesson;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data object\n   * @return {\n   *    {\n   *      mastery_score: string,\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      tries: CMITries,\n   *      attempt_records: CMIAttemptRecords\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    mastery_score: string;\n    max_time_allowed: string;\n    time_limit_action: string;\n    tries: CMITries;\n    attempt_records: CMIAttemptRecords;\n  } {\n    this.jsonString = true;\n    const result = {\n      mastery_score: this.mastery_score,\n      max_time_allowed: this.max_time_allowed,\n      time_limit_action: this.time_limit_action,\n      tries: this.tries,\n      attempt_records: this.attempt_records,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { CMIArray } from \"../common/array\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { aicc_constants } from \"../../constants/api_constants\";\n\n/**\n * Class representing the AICC `cmi.paths` object\n */\nexport class CMIPaths extends CMIArray {\n  /**\n   * Constructor for inline Paths Array class\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.paths\",\n      children: aicc_constants.paths_children,\n    });\n  }\n}\n\n/**\n * Class for AICC Paths\n */\nexport class CMIPathsObject extends BaseCMI {\n  private _location_id = \"\";\n  private _date = \"\";\n  private _time = \"\";\n  private _status = \"\";\n  private _why_left = \"\";\n  private _time_in_element = \"\";\n\n  /**\n   * Constructor for AICC Paths objects\n   */\n  constructor() {\n    super(\"cmi.paths.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._location_id = \"\";\n    this._date = \"\";\n    this._time = \"\";\n    this._status = \"\";\n    this._why_left = \"\";\n    this._time_in_element = \"\";\n  }\n\n  /**\n   * Getter for _location_id\n   * @return {string}\n   */\n  get location_id(): string {\n    return this._location_id;\n  }\n\n  /**\n   * Setter for _location_id\n   * @param {string} location_id\n   */\n  set location_id(location_id: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".location_id\", location_id, aicc_regex.CMIString256)\n    ) {\n      this._location_id = location_id;\n    }\n  }\n\n  /**\n   * Getter for _date\n   * @return {string}\n   */\n  get date(): string {\n    return this._date;\n  }\n\n  /**\n   * Setter for _date\n   * @param {string} date\n   */\n  set date(date: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".date\", date, aicc_regex.CMIString256)) {\n      this._date = date;\n    }\n  }\n\n  /**\n   * Getter for _time\n   * @return {string}\n   */\n  get time(): string {\n    return this._time;\n  }\n\n  /**\n   * Setter for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".time\", time, aicc_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * Getter for _status\n   * @return {string}\n   */\n  get status(): string {\n    return this._status;\n  }\n\n  /**\n   * Setter for _status\n   * @param {string} status\n   */\n  set status(status: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".status\", status, aicc_regex.CMIStatus2)) {\n      this._status = status;\n    }\n  }\n\n  /**\n   * Getter for _why_left\n   * @return {string}\n   */\n  get why_left(): string {\n    return this._why_left;\n  }\n\n  /**\n   * Setter for _why_left\n   * @param {string} why_left\n   */\n  set why_left(why_left: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".why_left\", why_left, aicc_regex.CMIString256)) {\n      this._why_left = why_left;\n    }\n  }\n\n  /**\n   * Getter for _time_in_element\n   * @return {string}\n   */\n  get time_in_element(): string {\n    return this._time_in_element;\n  }\n\n  /**\n   * Setter for _time_in_element\n   * @param {string} time_in_element\n   */\n  set time_in_element(time_in_element: string) {\n    if (\n      checkAICCValidFormat(\n        this._cmi_element + \".time_in_element\",\n        time_in_element,\n        aicc_regex.CMITime,\n      )\n    ) {\n      this._time_in_element = time_in_element;\n    }\n  }\n\n  /**\n   * toJSON for cmi.paths.n object\n   * @return {\n   *    {\n   *      location_id: string,\n   *      date: string,\n   *      time: string,\n   *      status: string,\n   *      why_left: string,\n   *      time_in_element: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    location_id: string;\n    date: string;\n    time: string;\n    status: string;\n    why_left: string;\n    time_in_element: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      location_id: this.location_id,\n      date: this.date,\n      time: this.time,\n      status: this.status,\n      why_left: this.why_left,\n      time_in_element: this.time_in_element,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import * as Scorm12CMI from \"../scorm12/cmi\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { CMIEvaluation } from \"./evaluation\";\nimport { AICCStudentPreferences } from \"./student_preferences\";\nimport { CMIStudentDemographics } from \"./student_demographics\";\nimport { AICCCMIStudentData } from \"./student_data\";\nimport { CMIPaths } from \"./paths\";\nimport { CMICore } from \"./core\";\nimport { CMIObjectives } from \"../scorm12/objectives\";\nimport { CMIStudentData } from \"../scorm12/student_data\";\nimport { CMIStudentPreference } from \"../scorm12/student_preference\";\nimport { CMIInteractions } from \"../scorm12/interactions\";\n\n/**\n * CMI Class for AICC\n */\nexport class CMI extends Scorm12CMI.CMI {\n  /**\n   * Constructor for AICC CMI object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean = false) {\n    super(aicc_constants.cmi_children);\n    if (initialized) this.initialize();\n    this.student_preference = new AICCStudentPreferences();\n    this.student_data = new AICCCMIStudentData();\n    this.student_demographics = new CMIStudentDemographics();\n    this.evaluation = new CMIEvaluation();\n    this.paths = new CMIPaths();\n  }\n\n  public override student_data: AICCCMIStudentData;\n  public override student_preference: AICCStudentPreferences;\n  public student_demographics: CMIStudentDemographics;\n  public evaluation: CMIEvaluation;\n  public paths: CMIPaths;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.student_preference?.initialize();\n    this.student_data?.initialize();\n    this.student_demographics?.initialize();\n    this.evaluation?.initialize();\n    this.paths?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions,\n   *      paths: CMIPaths\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    suspend_data: string;\n    launch_data: string;\n    comments: string;\n    comments_from_lms: string;\n    core: CMICore;\n    objectives: CMIObjectives;\n    student_data: CMIStudentData;\n    student_preference: CMIStudentPreference;\n    student_demographics: CMIStudentDemographics;\n    interactions: CMIInteractions;\n    evaluation: CMIEvaluation;\n    paths: CMIPaths;\n  } {\n    this.jsonString = true;\n    const result = {\n      suspend_data: this.suspend_data,\n      launch_data: this.launch_data,\n      comments: this.comments,\n      comments_from_lms: this.comments_from_lms,\n      core: this.core,\n      objectives: this.objectives,\n      student_data: this.student_data,\n      student_preference: this.student_preference,\n      student_demographics: this.student_demographics,\n      interactions: this.interactions,\n      evaluation: this.evaluation,\n      paths: this.paths,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import Scorm12API from \"./Scorm12API\";\nimport { CMI } from \"./cmi/aicc/cmi\";\n\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport { CMITriesObject } from \"./cmi/aicc/tries\";\nimport { CMIAttemptRecordsObject } from \"./cmi/aicc/attempts\";\nimport { CMIEvaluationCommentsObject } from \"./cmi/aicc/evaluation\";\nimport { NAV } from \"./cmi/scorm12/nav\";\nimport { CMIPathsObject } from \"./cmi/aicc/paths\";\nimport { Settings } from \"./types/api_types\";\nimport { stringMatches } from \"./utilities\";\n\n/**\n * The AICC API class\n */\nclass AICC extends Scorm12API {\n  /**\n   * Constructor to create AICC API object\n   * @param {Settings} settings\n   */\n  constructor(settings?: Settings) {\n    super(settings);\n\n    this.cmi = new CMI();\n    this.nav = new NAV();\n  }\n\n  override cmi: CMI;\n  override nav: NAV;\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI | null}\n   */\n  override getChildElement(\n    CMIElement: string,\n    value: any,\n    foundFirstIndex: boolean,\n  ): BaseCMI | null {\n    let newChild = super.getChildElement(CMIElement, value, foundFirstIndex);\n\n    if (!newChild) {\n      if (stringMatches(CMIElement, \"cmi\\\\.evaluation\\\\.comments\\\\.\\\\d+\")) {\n        newChild = new CMIEvaluationCommentsObject();\n      } else if (stringMatches(CMIElement, \"cmi\\\\.student_data\\\\.tries\\\\.\\\\d+\")) {\n        newChild = new CMITriesObject();\n      } else if (stringMatches(CMIElement, \"cmi\\\\.student_data\\\\.attempt_records\\\\.\\\\d+\")) {\n        newChild = new CMIAttemptRecordsObject();\n      } else if (stringMatches(CMIElement, \"cmi\\\\.paths\\\\.\\\\d+\")) {\n        newChild = new CMIPathsObject();\n      }\n    }\n\n    return newChild;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {AICC} newAPI\n   */\n  override replaceWithAnotherScormAPI(newAPI: AICC) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.nav = newAPI.nav;\n  }\n}\n\nexport default AICC;\n","import { ValidationError } from \"../exceptions\";\nimport { scorm2004_constants } from \"../constants/api_constants\";\n\nconst scorm2004_errors = scorm2004_constants.error_descriptions;\n\n/**\n * SCORM 2004 Validation Error\n */\nexport class Scorm2004ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm2004_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm2004_errors[String(errorCode)].basicMessage,\n        scorm2004_errors[String(errorCode)].detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm2004_errors[\"101\"].basicMessage,\n        scorm2004_errors[\"101\"].detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm2004ValidationError.prototype);\n  }\n}\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check2004ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm2004_errors.TYPE_MISMATCH,\n    Scorm2004ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @return {boolean}\n */\nexport function check2004ValidRange(\n  CMIElement: string,\n  value: string,\n  rangePattern: string,\n): boolean {\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm2004_errors.VALUE_OUT_OF_RANGE,\n    Scorm2004ValidationError,\n  );\n}\n","/**\n * Class for SCORM 2004's cmi.learner_preference object\n */\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\n\nexport class CMILearnerPreference extends BaseCMI {\n  private __children = scorm2004_constants.student_preference_children;\n  private _audio_level = \"1\";\n  private _language = \"\";\n  private _delivery_speed = \"1\";\n  private _audio_captioning = \"0\";\n\n  /**\n   * Constructor for cmi.learner_preference\n   */\n  constructor() {\n    super(\"cmi.learner_preference\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._children\",\n      scorm2004_errors.READ_ONLY_ELEMENT,\n    );\n  }\n\n  /**\n   * Getter for _audio_level\n   * @return {string}\n   */\n  get audio_level(): string {\n    return this._audio_level;\n  }\n\n  /**\n   * Setter for _audio_level\n   * @param {string} audio_level\n   */\n  set audio_level(audio_level: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".audio_level\",\n        audio_level,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".audio_level\",\n        audio_level,\n        scorm2004_regex.audio_range,\n      )\n    ) {\n      this._audio_level = audio_level;\n    }\n  }\n\n  /**\n   * Getter for _language\n   * @return {string}\n   */\n  get language(): string {\n    return this._language;\n  }\n\n  /**\n   * Setter for _language\n   * @param {string} language\n   */\n  set language(language: string) {\n    if (check2004ValidFormat(this._cmi_element + \".language\", language, scorm2004_regex.CMILang)) {\n      this._language = language;\n    }\n  }\n\n  /**\n   * Getter for _delivery_speed\n   * @return {string}\n   */\n  get delivery_speed(): string {\n    return this._delivery_speed;\n  }\n\n  /**\n   * Setter for _delivery_speed\n   * @param {string} delivery_speed\n   */\n  set delivery_speed(delivery_speed: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".delivery_speed\",\n        delivery_speed,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".delivery_speed\",\n        delivery_speed,\n        scorm2004_regex.speed_range,\n      )\n    ) {\n      this._delivery_speed = delivery_speed;\n    }\n  }\n\n  /**\n   * Getter for _audio_captioning\n   * @return {string}\n   */\n  get audio_captioning(): string {\n    return this._audio_captioning;\n  }\n\n  /**\n   * Setter for _audio_captioning\n   * @param {string} audio_captioning\n   */\n  set audio_captioning(audio_captioning: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".audio_captioning\",\n        audio_captioning,\n        scorm2004_regex.CMISInteger,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".audio_captioning\",\n        audio_captioning,\n        scorm2004_regex.text_range,\n      )\n    ) {\n      this._audio_captioning = audio_captioning;\n    }\n  }\n\n  /**\n   * toJSON for cmi.learner_preference\n   *\n   * @return {\n   *    {\n   *      audio_level: string,\n   *      language: string,\n   *      delivery_speed: string,\n   *      audio_captioning: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    audio_level: string;\n    language: string;\n    delivery_speed: string;\n    audio_captioning: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio_level: this.audio_level,\n      language: this.language,\n      delivery_speed: this.delivery_speed,\n      audio_captioning: this.audio_captioning,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { scorm2004_regex } from \"./regex\";\n\nexport const LearnerResponses: Responses = {\n  \"true-false\": {\n    format: \"^true$|^false$\",\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  choice: {\n    format: scorm2004_regex.CMILongIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    unique: true,\n  },\n  \"fill-in\": {\n    format: scorm2004_regex.CMILangString250,\n    max: 10,\n    delimiter: \"[,]\",\n    unique: false,\n  },\n  \"long-fill-in\": {\n    format: scorm2004_regex.CMILangString4000,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  matching: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n  },\n  performance: {\n    format: \"^$|\" + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + \"|^$|\" + scorm2004_regex.CMIShortIdentifier,\n    max: 250,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n  },\n  sequencing: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    unique: false,\n  },\n  likert: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  numeric: {\n    format: scorm2004_regex.CMIDecimal,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  other: {\n    format: scorm2004_regex.CMIString4000,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n};\nexport const CorrectResponses: Responses = {\n  \"true-false\": {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: \"^true$|^false$\",\n    limit: 1,\n  },\n  choice: {\n    max: 36,\n    delimiter: \"[,]\",\n    unique: true,\n    duplicate: false,\n    format: scorm2004_regex.CMILongIdentifier,\n  },\n  \"fill-in\": {\n    max: 10,\n    delimiter: \"[,]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMILangString250cr,\n  },\n  \"long-fill-in\": {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: true,\n    format: scorm2004_regex.CMILangString4000,\n  },\n  matching: {\n    max: 36,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n  },\n  performance: {\n    max: 250,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    delimiter3: \"[:]\",\n    unique: false,\n    duplicate: false,\n    format: \"^$|\" + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + \"|^$|\" + scorm2004_regex.CMIShortIdentifier,\n  },\n  sequencing: {\n    max: 36,\n    delimiter: \"[,]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n  },\n  likert: {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    limit: 1,\n  },\n  numeric: {\n    max: 2,\n    delimiter: \"[:]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIDecimal,\n    limit: 1,\n  },\n  other: {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIString4000,\n    limit: 1,\n  },\n};\n\nexport type ResponseType = {\n  format: string;\n  max: number;\n  delimiter: string;\n  unique: boolean;\n  duplicate?: boolean;\n  format2?: string;\n  delimiter2?: string;\n  limit?: number;\n  delimiter3?: string;\n};\n\nexport type Responses = {\n  [key: string]: ResponseType;\n};\n","/**\n * Class representing SCORM 2004's `cmi.interactions` object\n */\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { CMIArray } from \"../common/array\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { CorrectResponses, LearnerResponses } from \"../../constants/response_constants\";\n\nexport class CMIInteractions extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives` Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.interactions\",\n      children: scorm2004_constants.interactions_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.interaction.n object\n */\n\nexport class CMIInteractionsObject extends BaseCMI {\n  private _id = \"\";\n  private _type = \"\";\n  private _timestamp = \"\";\n  private _weighting = \"\";\n  private _learner_response = \"\";\n  private _result = \"\";\n  private _latency = \"\";\n  private _description = \"\";\n\n  /**\n   * Constructor for cmi.interaction.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n\");\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.n.correct_responses\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  public objectives: CMIArray;\n  public correct_responses: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._id = \"\";\n    this._type = \"\";\n    this._timestamp = \"\";\n    this._weighting = \"\";\n    this._learner_response = \"\";\n    this._result = \"\";\n    this._latency = \"\";\n    this._description = \"\";\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.n.correct_responses\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _type\n   * @return {string}\n   */\n  get type(): string {\n    return this._type;\n  }\n\n  /**\n   * Setter for _type\n   * @param {string} type\n   */\n  set type(type: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".type\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (check2004ValidFormat(this._cmi_element + \".type\", type, scorm2004_regex.CMIType)) {\n        this._type = type;\n      }\n    }\n  }\n\n  /**\n   * Getter for _timestamp\n   * @return {string}\n   */\n  get timestamp(): string {\n    return this._timestamp;\n  }\n\n  /**\n   * Setter for _timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".timestamp\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".timestamp\", timestamp, scorm2004_regex.CMITime)\n      ) {\n        this._timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * Getter for _weighting\n   * @return {string}\n   */\n  get weighting(): string {\n    return this._weighting;\n  }\n\n  /**\n   * Setter for _weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".weighting\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".weighting\",\n          weighting,\n          scorm2004_regex.CMIDecimal,\n        )\n      ) {\n        this._weighting = weighting;\n      }\n    }\n  }\n\n  /**\n   * Getter for _learner_response\n   * @return {string}\n   */\n  get learner_response(): string {\n    return this._learner_response;\n  }\n\n  /**\n   * Setter for _learner_response. Does type validation to make sure response\n   * matches SCORM 2004's spec\n   * @param {string} learner_response\n   */\n  set learner_response(learner_response: string) {\n    if (this.initialized && (this._type === \"\" || this._id === \"\")) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_response\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      let nodes = [];\n      const response_type = LearnerResponses[this.type];\n\n      if (response_type) {\n        if (response_type?.delimiter) {\n          // Convert regex-style delimiter to actual character\n          const delimiter = response_type.delimiter === \"[,]\" ? \",\" : response_type.delimiter;\n          nodes = learner_response.split(delimiter);\n        } else {\n          nodes[0] = learner_response;\n        }\n\n        if (nodes.length > 0 && nodes.length <= response_type.max) {\n          const formatRegex = new RegExp(response_type.format);\n\n          for (let i = 0; i < nodes.length; i++) {\n            if (response_type?.delimiter2) {\n              // Convert regex-style delimiter to actual character\n              const delimiter2 =\n                response_type.delimiter2 === \"[.]\" ? \".\" : response_type.delimiter2;\n              const values = nodes[i].split(delimiter2);\n\n              if (values.length === 2) {\n                if (!values[0].match(formatRegex)) {\n                  throw new Scorm2004ValidationError(\n                    this._cmi_element + \".learner_response\",\n                    scorm2004_errors.TYPE_MISMATCH,\n                  );\n                } else {\n                  if (\n                    !response_type.format2 ||\n                    !values[1].match(new RegExp(response_type.format2))\n                  ) {\n                    throw new Scorm2004ValidationError(\n                      this._cmi_element + \".learner_response\",\n                      scorm2004_errors.TYPE_MISMATCH,\n                    );\n                  }\n                }\n              } else {\n                throw new Scorm2004ValidationError(\n                  this._cmi_element + \".learner_response\",\n                  scorm2004_errors.TYPE_MISMATCH,\n                );\n              }\n            } else {\n              if (!nodes[i].match(formatRegex)) {\n                throw new Scorm2004ValidationError(\n                  this._cmi_element + \".learner_response\",\n                  scorm2004_errors.TYPE_MISMATCH,\n                );\n              } else {\n                if (nodes[i] !== \"\" && response_type.unique) {\n                  for (let j = 0; j < i; j++) {\n                    if (nodes[i] === nodes[j]) {\n                      throw new Scorm2004ValidationError(\n                        this._cmi_element + \".learner_response\",\n                        scorm2004_errors.TYPE_MISMATCH,\n                      );\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          throw new Scorm2004ValidationError(\n            this._cmi_element + \".learner_response\",\n            scorm2004_errors.GENERAL_SET_FAILURE,\n          );\n        }\n\n        this._learner_response = learner_response;\n      } else {\n        throw new Scorm2004ValidationError(\n          this._cmi_element + \".learner_response\",\n          scorm2004_errors.TYPE_MISMATCH,\n        );\n      }\n    }\n  }\n\n  /**\n   * Getter for _result\n   * @return {string}\n   */\n  get result(): string {\n    return this._result;\n  }\n\n  /**\n   * Setter for _result\n   * @param {string} result\n   */\n  set result(result: string) {\n    if (check2004ValidFormat(this._cmi_element + \".result\", result, scorm2004_regex.CMIResult)) {\n      this._result = result;\n    }\n  }\n\n  /**\n   * Getter for _latency\n   * @return {string}\n   */\n  get latency(): string {\n    return this._latency;\n  }\n\n  /**\n   * Setter for _latency\n   * @param {string} latency\n   */\n  set latency(latency: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".latency\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".latency\", latency, scorm2004_regex.CMITimespan)\n      ) {\n        this._latency = latency;\n      }\n    }\n  }\n\n  /**\n   * Getter for _description\n   * @return {string}\n   */\n  get description(): string {\n    return this._description;\n  }\n\n  /**\n   * Setter for _description\n   * @param {string} description\n   */\n  set description(description: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".description\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".description\",\n          description,\n          scorm2004_regex.CMILangString250,\n          true,\n        )\n      ) {\n        this._description = description;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      type: string,\n   *      objectives: CMIArray,\n   *      timestamp: string,\n   *      correct_responses: CMIArray,\n   *      weighting: string,\n   *      learner_response: string,\n   *      result: string,\n   *      latency: string,\n   *      description: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    type: string;\n    objectives: CMIArray;\n    timestamp: string;\n    correct_responses: CMIArray;\n    weighting: string;\n    learner_response: string;\n    result: string;\n    latency: string;\n    description: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      type: this.type,\n      objectives: this.objectives,\n      timestamp: this.timestamp,\n      weighting: this.weighting,\n      learner_response: this.learner_response,\n      result: this.result,\n      latency: this.latency,\n      description: this.description,\n      correct_responses: this.correct_responses,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.objectives.n object\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  private _id = \"\";\n\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n.objectives.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._id = \"\";\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.correct_responses.n object\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  private _pattern = \"\";\n  private _parent?: CMIInteractionsObject | undefined;\n\n  /**\n   * Constructor for cmi.interactions.n.correct_responses.n\n   * @param {CMIInteractionsObject} parent - The parent interaction object\n   */\n  constructor(parent?: CMIInteractionsObject) {\n    super(\"cmi.interactions.n.correct_responses.n\");\n    this._parent = parent;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._pattern = \"\";\n  }\n\n  /**\n   * Getter for _pattern\n   * @return {string}\n   */\n  get pattern(): string {\n    return this._pattern;\n  }\n\n  /**\n   * Setter for _pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern: string) {\n    // First do basic format validation\n    if (\n      check2004ValidFormat(this._cmi_element + \".pattern\", pattern, scorm2004_regex.CMIFeedback)\n    ) {\n      // If we have a parent interaction, validate the pattern against the interaction type\n      if (this._parent && this._parent.type) {\n        const interactionType = this._parent.type;\n        const response = CorrectResponses[interactionType];\n\n        if (response) {\n          // Validate the pattern against the interaction type\n          let isValid = true;\n          let nodes = [];\n\n          if (response?.delimiter) {\n            nodes = String(pattern).split(response.delimiter);\n          } else {\n            nodes[0] = pattern;\n          }\n\n          if (nodes.length > 0 && nodes.length <= response.max) {\n            const formatRegex = new RegExp(response.format);\n\n            for (let i = 0; i < nodes.length && isValid; i++) {\n              if (response?.delimiter2) {\n                const values = nodes[i].split(response.delimiter2);\n                if (values.length === 2) {\n                  const matches = values[0].match(formatRegex);\n                  if (!matches) {\n                    isValid = false;\n                  } else if (!response.format2 || !values[1].match(new RegExp(response.format2))) {\n                    isValid = false;\n                  }\n                } else {\n                  isValid = false;\n                }\n              } else {\n                const matches = nodes[i].match(formatRegex);\n                if (\n                  (!matches && pattern !== \"\") ||\n                  (!matches && interactionType === \"true-false\")\n                ) {\n                  isValid = false;\n                }\n              }\n            }\n          } else if (nodes.length > response.max) {\n            isValid = false;\n          }\n\n          if (!isValid) {\n            throw new Scorm2004ValidationError(\n              this._cmi_element + \".pattern\",\n              scorm2004_errors.TYPE_MISMATCH,\n            );\n          }\n        }\n      }\n\n      this._pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON cmi.interactions.n.correct_responses.n object\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    pattern: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      pattern: this.pattern,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","/**\n * Class for SCORM 2004's cmi *.score object\n */\nimport { CMIScore } from \"../common/score\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\n\nexport class Scorm2004CMIScore extends CMIScore {\n  private _scaled = \"\";\n\n  /**\n   * Constructor for cmi *.score\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.score\",\n      score_children: scorm2004_constants.score_children,\n      max: \"\",\n      invalidErrorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      invalidTypeCode: scorm2004_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm2004_errors.VALUE_OUT_OF_RANGE,\n      decimalRegex: scorm2004_regex.CMIDecimal,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n    this._scaled = \"\";\n    this._raw = \"\";\n    this._min = \"\";\n    this._max = \"\";\n  }\n\n  /**\n   * Getter for _scaled\n   * @return {string}\n   */\n  get scaled(): string {\n    return this._scaled;\n  }\n\n  /**\n   * Setter for _scaled\n   * @param {string} scaled\n   */\n  set scaled(scaled: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".scaled\", scaled, scorm2004_regex.CMIDecimal) &&\n      check2004ValidRange(this._cmi_element + \".scaled\", scaled, scorm2004_regex.scaled_range)\n    ) {\n      this._scaled = scaled;\n    }\n  }\n\n  /**\n   * toJSON for cmi *.score\n   *\n   * @return {\n   *    {\n   *      scaled: string,\n   *      raw: string,\n   *      min: string,\n   *      max: string\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    scaled: string;\n    raw: string;\n    min: string;\n    max: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      scaled: this.scaled,\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_lms object\n * @extends CMIArray\n */\nexport class CMICommentsFromLMS extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_lms Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.comments_from_lms\",\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner object\n */\n\nexport class CMICommentsFromLearner extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_learner Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.comments_from_learner\",\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner.n and cmi.comments_from_lms.n object\n */\n\nexport class CMICommentsObject extends BaseCMI {\n  private _comment = \"\";\n  private _location = \"\";\n  private _timestamp = \"\";\n  private readonly _readOnlyAfterInit: boolean;\n\n  /**\n   * Constructor for cmi.comments_from_learner.n and cmi.comments_from_lms.n\n   * @param {boolean} readOnlyAfterInit\n   */\n  constructor(readOnlyAfterInit: boolean = false) {\n    super(\"cmi.comments_from_learner.n\");\n    this._comment = \"\";\n    this._location = \"\";\n    this._timestamp = \"\";\n    this._readOnlyAfterInit = readOnlyAfterInit;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _comment\n   * @return {string}\n   */\n  get comment(): string {\n    return this._comment;\n  }\n\n  /**\n   * Setter for _comment\n   * @param {string} comment\n   */\n  set comment(comment: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".comment\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".comment\",\n          comment,\n          scorm2004_regex.CMILangString4000,\n          true,\n        )\n      ) {\n        this._comment = comment;\n      }\n    }\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".location\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".location\",\n          location,\n          scorm2004_regex.CMIString250,\n        )\n      ) {\n        this._location = location;\n      }\n    }\n  }\n\n  /**\n   * Getter for _timestamp\n   * @return {string}\n   */\n  get timestamp(): string {\n    return this._timestamp;\n  }\n\n  /**\n   * Setter for _timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".timestamp\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".timestamp\", timestamp, scorm2004_regex.CMITime)\n      ) {\n        this._timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.comments_from_learner.n object\n   * @return {\n   *    {\n   *      comment: string,\n   *      location: string,\n   *      timestamp: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    comment: string;\n    location: string;\n    timestamp: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      comment: this.comment,\n      location: this.location,\n      timestamp: this.timestamp,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { Scorm2004CMIScore } from \"./score\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\n\n/**\n * Class representing SCORM 2004's `cmi.objectives` object\n * @extends CMIArray\n */\nexport class CMIObjectives extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives` Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.objectives\",\n      children: scorm2004_constants.objectives_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n\n  /**\n   * Find an objective by its ID\n   */\n  public findObjectiveById(id: string): CMIObjectivesObject | undefined {\n    return this.childArray.find((objective) => objective.id === id);\n  }\n\n  /**\n   * Find objective by its index\n   */\n  public findObjectiveByIndex(index: number): CMIObjectivesObject {\n    return this.childArray[index];\n  }\n\n  /**\n   * Set an objective at the given index\n   */\n  public setObjectiveByIndex(index: number, objective: CMIObjectivesObject) {\n    this.childArray[index] = objective;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.objectives.n object\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  private _id = \"\";\n  private _success_status = \"unknown\";\n  private _completion_status = \"unknown\";\n  private _progress_measure = \"\";\n  private _description = \"\";\n\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super(\"cmi.objectives.n\");\n    this.score = new Scorm2004CMIScore();\n  }\n\n  override reset() {\n    this._initialized = false;\n  }\n\n  public score: Scorm2004CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this._success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".success_status\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".success_status\",\n          success_status,\n          scorm2004_regex.CMISStatus,\n        )\n      ) {\n        this._success_status = success_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this._completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".completion_status\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".completion_status\",\n          completion_status,\n          scorm2004_regex.CMICStatus,\n        )\n      ) {\n        this._completion_status = completion_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this._progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".progress_measure\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".progress_measure\",\n          progress_measure,\n          scorm2004_regex.CMIDecimal,\n        ) &&\n        check2004ValidRange(\n          this._cmi_element + \".progress_measure\",\n          progress_measure,\n          scorm2004_regex.progress_range,\n        )\n      ) {\n        this._progress_measure = progress_measure;\n      }\n    }\n  }\n\n  /**\n   * Getter for _description\n   * @return {string}\n   */\n  get description(): string {\n    return this._description;\n  }\n\n  /**\n   * Setter for _description\n   * @param {string} description\n   */\n  set description(description: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".description\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".description\",\n          description,\n          scorm2004_regex.CMILangString250,\n          true,\n        )\n      ) {\n        this._description = description;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      success_status: string,\n   *      completion_status: string,\n   *      progress_measure: string,\n   *      description: string,\n   *      score: Scorm2004CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    success_status: string;\n    completion_status: string;\n    progress_measure: string;\n    description: string;\n    score: Scorm2004CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      success_status: this.success_status,\n      completion_status: this.completion_status,\n      progress_measure: this.progress_measure,\n      description: this.description,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","/**\n * Class representing metadata properties for SCORM 2004's cmi object\n */\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing metadata properties for SCORM 2004's cmi object\n */\nexport class CMIMetadata extends BaseCMI {\n  private __version = \"1.0\";\n  private __children = scorm2004_constants.cmi_children;\n\n  /**\n   * Constructor for CMIMetadata\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   */\n  get _version(): string {\n    return this.__version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version: string) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._version\",\n      scorm2004_errors.READ_ONLY_ELEMENT,\n    );\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {number} _children\n   */\n  set _children(_children: number) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._children\",\n      scorm2004_errors.READ_ONLY_ELEMENT,\n    );\n  }\n\n  /**\n   * Reset the metadata properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // No need to reset __version and __children as they are constants\n  }\n}\n","/**\n * Class representing learner properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing learner properties for SCORM 2004's cmi object\n */\nexport class CMILearner extends BaseCMI {\n  private _learner_id = \"\";\n  private _learner_name = \"\";\n\n  /**\n   * Constructor for CMILearner\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _learner_id\n   * @return {string}\n   */\n  get learner_id(): string {\n    return this._learner_id;\n  }\n\n  /**\n   * Setter for _learner_id. Can only be called before initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_id\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._learner_id = learner_id;\n    }\n  }\n\n  /**\n   * Getter for _learner_name\n   * @return {string}\n   */\n  get learner_name(): string {\n    return this._learner_name;\n  }\n\n  /**\n   * Setter for _learner_name. Can only be called before initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_name\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._learner_name = learner_name;\n    }\n  }\n\n  /**\n   * Reset the learner properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset learner_id and learner_name as they are read-only after initialization\n  }\n}\n","/**\n * Class representing status properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\n\n/**\n * Class representing status properties for SCORM 2004's cmi object\n */\nexport class CMIStatus extends BaseCMI {\n  private _completion_status = \"unknown\";\n  private _success_status = \"unknown\";\n  private _progress_measure = \"\";\n\n  /**\n   * Constructor for CMIStatus\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this._completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".completion_status\",\n        completion_status,\n        scorm2004_regex.CMICStatus,\n      )\n    ) {\n      this._completion_status = completion_status;\n    }\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this._success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".success_status\",\n        success_status,\n        scorm2004_regex.CMISStatus,\n      )\n    ) {\n      this._success_status = success_status;\n    }\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this._progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".progress_measure\",\n        progress_measure,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".progress_measure\",\n        progress_measure,\n        scorm2004_regex.progress_range,\n      )\n    ) {\n      this._progress_measure = progress_measure;\n    }\n  }\n\n  /**\n   * Reset the status properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._completion_status = \"unknown\";\n    this._success_status = \"unknown\";\n    this._progress_measure = \"\";\n  }\n}\n","/**\n * Class representing session properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\nimport * as Util from \"../../utilities\";\n\n/**\n * Class representing session properties for SCORM 2004's cmi object\n */\nexport class CMISession extends BaseCMI {\n  private _entry = \"\";\n  private _exit = \"\";\n  private _session_time = \"PT0H0M0S\";\n  private _total_time = \"\";\n\n  /**\n   * Constructor for CMISession\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this._entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".entry\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._entry = entry;\n    }\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    if (!this.jsonString) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exit\",\n        scorm2004_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    if (check2004ValidFormat(this._cmi_element + \".exit\", exit, scorm2004_regex.CMIExit, true)) {\n      this._exit = exit;\n    }\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    if (!this.jsonString) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".session_time\",\n        scorm2004_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".session_time\",\n        session_time,\n        scorm2004_regex.CMITimespan,\n      )\n    ) {\n      this._session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this._total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".total_time\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._total_time = total_time;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime(): string {\n    let sessionTime = this._session_time;\n    const startTime = this.start_time;\n\n    if (typeof startTime !== \"undefined\" && startTime !== null) {\n      const seconds = new Date().getTime() - startTime;\n      sessionTime = Util.getSecondsAsISODuration(seconds / 1000);\n    }\n\n    return Util.addTwoDurations(this._total_time, sessionTime, scorm2004_regex.CMITimespan);\n  }\n\n  /**\n   * Reset the session properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._entry = \"\";\n    this._exit = \"\";\n    this._session_time = \"PT0H0M0S\";\n    // Don't reset total_time as it's read-only after initialization\n  }\n}\n","/**\n * Class representing content properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\n\n/**\n * Class representing content properties for SCORM 2004's cmi object\n */\nexport class CMIContent extends BaseCMI {\n  private _location = \"\";\n  private _launch_data = \"\";\n  private _suspend_data = \"\";\n\n  /**\n   * Constructor for CMIContent\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".location\", location, scorm2004_regex.CMIString1000)\n    ) {\n      this._location = location;\n    }\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this._launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".launch_data\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._launch_data = launch_data;\n    }\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this._suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".suspend_data\",\n        suspend_data,\n        scorm2004_regex.CMIString64000,\n        true,\n      )\n    ) {\n      this._suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Reset the content properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._location = \"\";\n    // Don't reset launch_data as it's read-only after initialization\n    this._suspend_data = \"\";\n  }\n}\n","/**\n * Class representing settings properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing settings properties for SCORM 2004's cmi object\n */\nexport class CMISettings extends BaseCMI {\n  private _credit = \"credit\";\n  private _mode = \"normal\";\n  private _time_limit_action = \"continue,no message\";\n  private _max_time_allowed = \"\";\n\n  /**\n   * Constructor for CMISettings\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this._credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".credit\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._credit = credit;\n    }\n  }\n\n  /**\n   * Getter for _mode\n   * @return {string}\n   */\n  get mode(): string {\n    return this._mode;\n  }\n\n  /**\n   * Setter for _mode. Can only be called before initialization.\n   * @param {string} mode\n   */\n  set mode(mode: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".mode\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._mode = mode;\n    }\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this._time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".time_limit_action\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._time_limit_action = time_limit_action;\n    }\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this._max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".max_time_allowed\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._max_time_allowed = max_time_allowed;\n    }\n  }\n\n  /**\n   * Reset the settings properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset these properties as they are read-only after initialization\n  }\n}\n","/**\n * Class representing threshold properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing threshold properties for SCORM 2004's cmi object\n */\nexport class CMIThresholds extends BaseCMI {\n  private _scaled_passing_score = \"\";\n  private _completion_threshold = \"\";\n\n  /**\n   * Constructor for CMIThresholds\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score(): string {\n    return this._scaled_passing_score;\n  }\n\n  /**\n   * Setter for _scaled_passing_score. Can only be called before initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".scaled_passing_score\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._scaled_passing_score = scaled_passing_score;\n    }\n  }\n\n  /**\n   * Getter for _completion_threshold\n   * @return {string}\n   */\n  get completion_threshold(): string {\n    return this._completion_threshold;\n  }\n\n  /**\n   * Setter for _completion_threshold. Can only be called before initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".completion_threshold\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._completion_threshold = completion_threshold;\n    }\n  }\n\n  /**\n   * Reset the threshold properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset these properties as they are read-only after initialization\n  }\n}\n","import { BaseRootCMI } from \"../common/base_cmi\";\nimport { CMILearnerPreference } from \"./learner_preference\";\nimport { CMIInteractions } from \"./interactions\";\nimport { Scorm2004CMIScore } from \"./score\";\nimport { CMICommentsFromLearner, CMICommentsFromLMS } from \"./comments\";\nimport { CMIObjectives } from \"./objectives\";\nimport { CMIMetadata } from \"./metadata\";\nimport { CMILearner } from \"./learner\";\nimport { CMIStatus } from \"./status\";\nimport { CMISession } from \"./session\";\nimport { CMIContent } from \"./content\";\nimport { CMISettings } from \"./settings\";\nimport { CMIThresholds } from \"./thresholds\";\n\n/**\n * Class representing cmi object for SCORM 2004\n */\nexport class CMI extends BaseRootCMI {\n  /**\n   * Constructor for the SCORM 2004 cmi object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean = false) {\n    super(\"cmi\");\n    this.metadata = new CMIMetadata();\n    this.learner = new CMILearner();\n    this.status = new CMIStatus();\n    this.session = new CMISession();\n    this.content = new CMIContent();\n    this.settings = new CMISettings();\n    this.thresholds = new CMIThresholds();\n    this.learner_preference = new CMILearnerPreference();\n    this.score = new Scorm2004CMIScore();\n    this.comments_from_learner = new CMICommentsFromLearner();\n    this.comments_from_lms = new CMICommentsFromLMS();\n    this.interactions = new CMIInteractions();\n    this.objectives = new CMIObjectives();\n    if (initialized) this.initialize();\n  }\n\n  // New component classes\n  private metadata: CMIMetadata;\n  private learner: CMILearner;\n  private status: CMIStatus;\n  private session: CMISession;\n  private content: CMIContent;\n  private settings: CMISettings;\n  private thresholds: CMIThresholds;\n\n  // Original complex objects\n  public learner_preference: CMILearnerPreference;\n  public score: Scorm2004CMIScore;\n  public comments_from_learner: CMICommentsFromLearner;\n  public comments_from_lms: CMICommentsFromLMS;\n  public interactions: CMIInteractions;\n  public objectives: CMIObjectives;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    // Initialize new component classes\n    this.metadata?.initialize();\n    this.learner?.initialize();\n    this.status?.initialize();\n    this.session?.initialize();\n    this.content?.initialize();\n    this.settings?.initialize();\n    this.thresholds?.initialize();\n\n    // Initialize original complex objects\n    this.learner_preference?.initialize();\n    this.score?.initialize();\n    this.comments_from_learner?.initialize();\n    this.comments_from_lms?.initialize();\n    this.interactions?.initialize();\n    this.objectives?.initialize();\n  }\n\n  /**\n   * Called when API is moving to another SCO\n   */\n  reset() {\n    this._initialized = false;\n\n    // Reset new component classes\n    this.metadata?.reset();\n    this.learner?.reset();\n    this.status?.reset();\n    this.session?.reset();\n    this.content?.reset();\n    this.settings?.reset();\n    this.thresholds?.reset();\n\n    // Reset original complex objects\n    this.objectives?.reset(false);\n    this.interactions?.reset(true);\n    this.score?.reset();\n    this.comments_from_learner?.reset();\n    this.comments_from_lms?.reset();\n    this.learner_preference?.reset();\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   * @private\n   */\n  get _version(): string {\n    return this.metadata._version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   * @private\n   */\n  set _version(_version: string) {\n    this.metadata._version = _version;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.metadata._children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {number} _children\n   * @private\n   */\n  set _children(_children: number) {\n    this.metadata._children = _children;\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this.status.completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    this.status.completion_status = completion_status;\n  }\n\n  /**\n   * Getter for _completion_threshold\n   * @return {string}\n   */\n  get completion_threshold(): string {\n    return this.thresholds.completion_threshold;\n  }\n\n  /**\n   * Setter for _completion_threshold. Can only be called before initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold: string) {\n    this.thresholds.completion_threshold = completion_threshold;\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this.settings.credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    this.settings.credit = credit;\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this.session.entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    this.session.entry = entry;\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    this.session.jsonString = this.jsonString;\n    return this.session.exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    this.session.exit = exit;\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this.content.launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    this.content.launch_data = launch_data;\n  }\n\n  /**\n   * Getter for _learner_id\n   * @return {string}\n   */\n  get learner_id(): string {\n    return this.learner.learner_id;\n  }\n\n  /**\n   * Setter for _learner_id. Can only be called before initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id: string) {\n    this.learner.learner_id = learner_id;\n  }\n\n  /**\n   * Getter for _learner_name\n   * @return {string}\n   */\n  get learner_name(): string {\n    return this.learner.learner_name;\n  }\n\n  /**\n   * Setter for _learner_name. Can only be called before initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name: string) {\n    this.learner.learner_name = learner_name;\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this.content.location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    this.content.location = location;\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this.settings.max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    this.settings.max_time_allowed = max_time_allowed;\n  }\n\n  /**\n   * Getter for _mode\n   * @return {string}\n   */\n  get mode(): string {\n    return this.settings.mode;\n  }\n\n  /**\n   * Setter for _mode. Can only be called before initialization.\n   * @param {string} mode\n   */\n  set mode(mode: string) {\n    this.settings.mode = mode;\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this.status.progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    this.status.progress_measure = progress_measure;\n  }\n\n  /**\n   * Getter for _scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score(): string {\n    return this.thresholds.scaled_passing_score;\n  }\n\n  /**\n   * Setter for _scaled_passing_score. Can only be called before initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score: string) {\n    this.thresholds.scaled_passing_score = scaled_passing_score;\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    this.session.jsonString = this.jsonString;\n    return this.session.session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    this.session.session_time = session_time;\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this.status.success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    this.status.success_status = success_status;\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this.content.suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    this.content.suspend_data = suspend_data;\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this.settings.time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    this.settings.time_limit_action = time_limit_action;\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this.session.total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    this.session.total_time = total_time;\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime(): string {\n    return this.session.getCurrentTotalTime();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      comments_from_learner: CMICommentsFromLearner,\n   *      comments_from_lms: CMICommentsFromLMS,\n   *      completion_status: string,\n   *      completion_threshold: string,\n   *      credit: string,\n   *      entry: string,\n   *      exit: string,\n   *      interactions: CMIInteractions,\n   *      launch_data: string,\n   *      learner_id: string,\n   *      learner_name: string,\n   *      learner_preference: CMILearnerPreference,\n   *      location: string,\n   *      max_time_allowed: string,\n   *      mode: string,\n   *      objectives: CMIObjectives,\n   *      progress_measure: string,\n   *      scaled_passing_score: string,\n   *      score: Scorm2004CMIScore,\n   *      session_time: string,\n   *      success_status: string,\n   *      suspend_data: string,\n   *      time_limit_action: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    comments_from_learner: CMICommentsFromLearner;\n    comments_from_lms: CMICommentsFromLMS;\n    completion_status: string;\n    completion_threshold: string;\n    credit: string;\n    entry: string;\n    exit: string;\n    interactions: CMIInteractions;\n    launch_data: string;\n    learner_id: string;\n    learner_name: string;\n    learner_preference: CMILearnerPreference;\n    location: string;\n    max_time_allowed: string;\n    mode: string;\n    objectives: CMIObjectives;\n    progress_measure: string;\n    scaled_passing_score: string;\n    score: Scorm2004CMIScore;\n    session_time: string;\n    success_status: string;\n    suspend_data: string;\n    time_limit_action: string;\n  } {\n    this.jsonString = true;\n\n    // Set jsonString flag on component classes that need it\n    this.session.jsonString = true;\n\n    const result = {\n      comments_from_learner: this.comments_from_learner,\n      comments_from_lms: this.comments_from_lms,\n      completion_status: this.completion_status,\n      completion_threshold: this.completion_threshold,\n      credit: this.credit,\n      entry: this.entry,\n      exit: this.exit,\n      interactions: this.interactions,\n      launch_data: this.launch_data,\n      learner_id: this.learner_id,\n      learner_name: this.learner_name,\n      learner_preference: this.learner_preference,\n      location: this.location,\n      max_time_allowed: this.max_time_allowed,\n      mode: this.mode,\n      objectives: this.objectives,\n      progress_measure: this.progress_measure,\n      scaled_passing_score: this.scaled_passing_score,\n      score: this.score,\n      session_time: this.session_time,\n      success_status: this.success_status,\n      suspend_data: this.suspend_data,\n      time_limit_action: this.time_limit_action,\n    };\n\n    // Clean up jsonString flags\n    this.jsonString = false;\n    this.session.jsonString = false;\n\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { NAVBoolean } from \"../../constants/enums\";\nimport { CMIArray } from \"../common/array\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Sequencing } from \"./sequencing/sequencing\";\n\n/**\n * Class representing SCORM 2004's adl object\n */\nexport class ADL extends BaseCMI {\n  /**\n   * Constructor for adl\n   */\n  constructor() {\n    super(\"adl\");\n    this.nav = new ADLNav();\n    this.data = new ADLData();\n  }\n\n  public nav: ADLNav;\n  public data = new ADLData();\n  private _sequencing: Sequencing | null = null;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.nav?.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this.nav?.reset();\n  }\n\n  /**\n   * Getter for sequencing\n   * @return {Sequencing | null}\n   */\n  get sequencing(): Sequencing | null {\n    return this._sequencing;\n  }\n\n  /**\n   * Setter for sequencing\n   * @param {Sequencing | null} sequencing\n   */\n  set sequencing(sequencing: Sequencing | null) {\n    this._sequencing = sequencing;\n    if (sequencing) {\n      sequencing.adlNav = this.nav;\n      this.nav.sequencing = sequencing;\n    }\n  }\n\n  /**\n   * toJSON for adl\n   * @return {\n   *    {\n   *      nav: ADLNav,\n   *      data: ADLData\n   *    }\n   *  }\n   */\n  toJSON(): {\n    nav: ADLNav;\n    data: ADLData;\n  } {\n    this.jsonString = true;\n    const result = {\n      nav: this.nav,\n      data: this.data,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's `adl.nav` object\n */\n\nexport class ADLNav extends BaseCMI {\n  private _request = \"_none_\";\n  private _sequencing: Sequencing | null = null;\n\n  /**\n   * Constructor for `adl.nav`\n   */\n  constructor() {\n    super(\"adl.nav\");\n    this.request_valid = new ADLNavRequestValid();\n  }\n\n  public request_valid: ADLNavRequestValid;\n\n  /**\n   * Getter for sequencing\n   * @return {Sequencing | null}\n   */\n  get sequencing(): Sequencing | null {\n    return this._sequencing;\n  }\n\n  /**\n   * Setter for sequencing\n   * @param {Sequencing | null} sequencing\n   */\n  set sequencing(sequencing: Sequencing | null) {\n    this._sequencing = sequencing;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.request_valid?.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._request = \"_none_\";\n    this._sequencing = null;\n    this.request_valid?.reset();\n  }\n\n  /**\n   * Getter for _request\n   * @return {string}\n   */\n  get request(): string {\n    return this._request;\n  }\n\n  /**\n   * Setter for _request\n   * @param {string} request\n   */\n  set request(request: string) {\n    if (check2004ValidFormat(this._cmi_element + \".request\", request, scorm2004_regex.NAVEvent)) {\n      // Only process if the request is different from the current request\n      if (this._request !== request) {\n        this._request = request;\n\n        // Process the navigation request using the sequencing implementation\n        if (this._sequencing) {\n          this._sequencing.processNavigationRequest(request);\n        }\n      }\n    }\n  }\n\n  /**\n   * toJSON for adl.nav\n   *\n   * @return {\n   *    {\n   *      request: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    request: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      request: this.request,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's `adl.data` object\n */\nexport class ADLData extends CMIArray {\n  constructor() {\n    super({\n      CMIElement: \"adl.data\",\n      children: scorm2004_constants.adl_data_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's adl.data.n object\n */\nexport class ADLDataObject extends BaseCMI {\n  private _id = \"\";\n  private _store = \"\";\n\n  constructor() {\n    super(\"adl.data.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _store\n   * @return {string}\n   */\n  get store(): string {\n    return this._store;\n  }\n\n  /**\n   * Setter for _store\n   * @param {string} store\n   */\n  set store(store: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".store\", store, scorm2004_regex.CMILangString4000)\n    ) {\n      this._store = store;\n    }\n  }\n\n  /**\n   * toJSON for adl.data.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      store: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    store: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this._id,\n      store: this._store,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl.nav.request_valid object\n */\n\nexport class ADLNavRequestValid extends BaseCMI {\n  private _continue = \"unknown\";\n  private _previous = \"unknown\";\n  private _choice: {\n    [key: string]: NAVBoolean;\n  } = {};\n  private _jump: {\n    [key: string]: NAVBoolean;\n  } = {};\n\n  /**\n   * Constructor for adl.nav.request_valid\n   */\n  constructor() {\n    super(\"adl.nav.request_valid\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._continue = \"unknown\";\n    this._previous = \"unknown\";\n  }\n\n  /**\n   * Getter for _continue\n   * @return {string}\n   */\n  get continue(): string {\n    return this._continue;\n  }\n\n  /**\n   * Setter for _continue. Just throws an error.\n   * @param {string} _continue\n   */\n  set continue(_continue: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".continue\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".continue\", _continue, scorm2004_regex.NAVBoolean)\n    ) {\n      this._continue = _continue;\n    }\n  }\n\n  /**\n   * Getter for _previous\n   * @return {string}\n   */\n  get previous(): string {\n    return this._previous;\n  }\n\n  /**\n   * Setter for _previous. Just throws an error.\n   * @param {string} _previous\n   */\n  set previous(_previous: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".previous\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".previous\", _previous, scorm2004_regex.NAVBoolean)\n    ) {\n      this._previous = _previous;\n    }\n  }\n\n  /**\n   * Getter for _choice\n   * @return {{ [key: string]: NAVBoolean }}\n   */\n  get choice(): { [key: string]: NAVBoolean } {\n    return this._choice;\n  }\n\n  /**\n   * Setter for _choice\n   * @param {{ [key: string]: string }} choice\n   */\n  set choice(choice: { [key: string]: string }) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".choice\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (typeof choice !== \"object\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".choice\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    for (const key in choice) {\n      if ({}.hasOwnProperty.call(choice, key)) {\n        if (\n          check2004ValidFormat(\n            this._cmi_element + \".choice.\" + key,\n            choice[key],\n            scorm2004_regex.NAVBoolean,\n          ) &&\n          check2004ValidFormat(this._cmi_element + \".choice.\" + key, key, scorm2004_regex.NAVTarget)\n        ) {\n          // Convert string value to NAVBoolean enum value\n          const value = choice[key];\n          if (value === \"true\") {\n            this._choice[key] = NAVBoolean.TRUE;\n          } else if (value === \"false\") {\n            this._choice[key] = NAVBoolean.FALSE;\n          } else if (value === \"unknown\") {\n            this._choice[key] = NAVBoolean.UNKNOWN;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Getter for _jump\n   * @return {{ [key: string]: NAVBoolean }}\n   */\n  get jump(): { [key: string]: NAVBoolean } {\n    return this._jump;\n  }\n\n  /**\n   * Setter for _jump\n   * @param {{ [key: string]: string }} jump\n   */\n  set jump(jump: { [key: string]: string }) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".jump\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (typeof jump !== \"object\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".jump\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    for (const key in jump) {\n      if ({}.hasOwnProperty.call(jump, key)) {\n        if (\n          check2004ValidFormat(\n            this._cmi_element + \".jump.\" + key,\n            jump[key],\n            scorm2004_regex.NAVBoolean,\n          ) &&\n          check2004ValidFormat(this._cmi_element + \".jump.\" + key, key, scorm2004_regex.NAVTarget)\n        ) {\n          // Convert string value to NAVBoolean enum value\n          const value = jump[key];\n          if (value === \"true\") {\n            this._jump[key] = NAVBoolean.TRUE;\n          } else if (value === \"false\") {\n            this._jump[key] = NAVBoolean.FALSE;\n          } else if (value === \"unknown\") {\n            this._jump[key] = NAVBoolean.UNKNOWN;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * toJSON for adl.nav.request_valid\n   *\n   * @return {\n   *    {\n   *      previous: string,\n   *      continue: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    previous: string;\n    continue: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      previous: this._previous,\n      continue: this._continue,\n      choice: this._choice,\n      jump: this._jump,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Enum for rule condition operators\n */\nexport enum RuleConditionOperator {\n  NOT = \"not\",\n  AND = \"and\",\n  OR = \"or\",\n}\n\n/**\n * Enum for rule condition types\n */\nexport enum RuleConditionType {\n  SATISFIED = \"satisfied\",\n  OBJECTIVE_STATUS_KNOWN = \"objectiveStatusKnown\",\n  OBJECTIVE_MEASURE_KNOWN = \"objectiveMeasureKnown\",\n  OBJECTIVE_MEASURE_GREATER_THAN = \"objectiveMeasureGreaterThan\",\n  OBJECTIVE_MEASURE_LESS_THAN = \"objectiveMeasureLessThan\",\n  COMPLETED = \"completed\",\n  PROGRESS_KNOWN = \"progressKnown\",\n  ATTEMPTED = \"attempted\",\n  ATTEMPT_LIMIT_EXCEEDED = \"attemptLimitExceeded\",\n  TIME_LIMIT_EXCEEDED = \"timeLimitExceeded\",\n  OUTSIDE_AVAILABLE_TIME_RANGE = \"outsideAvailableTimeRange\",\n  ALWAYS = \"always\",\n}\n\n/**\n * Enum for rule action types\n */\nexport enum RuleActionType {\n  SKIP = \"skip\",\n  DISABLED = \"disabled\",\n  HIDE_FROM_CHOICE = \"hideFromChoice\",\n  STOP_FORWARD_TRAVERSAL = \"stopForwardTraversal\",\n  EXIT_PARENT = \"exitParent\",\n  EXIT_ALL = \"exitAll\",\n  RETRY = \"retry\",\n  RETRY_ALL = \"retryAll\",\n  CONTINUE = \"continue\",\n  PREVIOUS = \"previous\",\n  EXIT = \"exit\",\n}\n\n/**\n * Class representing a sequencing rule condition\n */\nexport class RuleCondition extends BaseCMI {\n  private _condition: RuleConditionType = RuleConditionType.ALWAYS;\n  private _operator: RuleConditionOperator | null = null;\n  private _parameters: Map<string, any> = new Map();\n\n  /**\n   * Constructor for RuleCondition\n   * @param {RuleConditionType} condition - The condition type\n   * @param {RuleConditionOperator | null} operator - The operator (null for no operator)\n   * @param {Map<string, any>} parameters - Additional parameters for the condition\n   */\n  constructor(\n    condition: RuleConditionType = RuleConditionType.ALWAYS,\n    operator: RuleConditionOperator | null = null,\n    parameters: Map<string, any> = new Map(),\n  ) {\n    super(\"ruleCondition\");\n    this._condition = condition;\n    this._operator = operator;\n    this._parameters = parameters;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for condition\n   * @return {RuleConditionType}\n   */\n  get condition(): RuleConditionType {\n    return this._condition;\n  }\n\n  /**\n   * Setter for condition\n   * @param {RuleConditionType} condition\n   */\n  set condition(condition: RuleConditionType) {\n    this._condition = condition;\n  }\n\n  /**\n   * Getter for operator\n   * @return {RuleConditionOperator | null}\n   */\n  get operator(): RuleConditionOperator | null {\n    return this._operator;\n  }\n\n  /**\n   * Setter for operator\n   * @param {RuleConditionOperator | null} operator\n   */\n  set operator(operator: RuleConditionOperator | null) {\n    this._operator = operator;\n  }\n\n  /**\n   * Getter for parameters\n   * @return {Map<string, any>}\n   */\n  get parameters(): Map<string, any> {\n    return this._parameters;\n  }\n\n  /**\n   * Setter for parameters\n   * @param {Map<string, any>} parameters\n   */\n  set parameters(parameters: Map<string, any>) {\n    this._parameters = parameters;\n  }\n\n  /**\n   * Evaluate the condition for an activity\n   * @param {Activity} activity - The activity to evaluate the condition for\n   * @return {boolean} - True if the condition is met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    switch (this._condition) {\n      case RuleConditionType.SATISFIED:\n        return activity.successStatus === SuccessStatus.PASSED;\n      case RuleConditionType.OBJECTIVE_STATUS_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RuleConditionType.OBJECTIVE_MEASURE_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RuleConditionType.OBJECTIVE_MEASURE_GREATER_THAN: {\n        const greaterThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure > greaterThanValue\n        );\n      }\n      case RuleConditionType.OBJECTIVE_MEASURE_LESS_THAN: {\n        const lessThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure < lessThanValue\n        );\n      }\n      case RuleConditionType.COMPLETED:\n        return activity.isCompleted;\n      case RuleConditionType.PROGRESS_KNOWN:\n        return activity.completionStatus !== \"unknown\";\n      case RuleConditionType.ATTEMPTED:\n        return activity.attemptCount > 0;\n      case RuleConditionType.ATTEMPT_LIMIT_EXCEEDED: {\n        const attemptLimit = this._parameters.get(\"attemptLimit\") || 0;\n        return attemptLimit > 0 && activity.attemptCount >= attemptLimit;\n      }\n      case RuleConditionType.TIME_LIMIT_EXCEEDED:\n        // Time limit exceeded would require additional tracking\n        return false;\n      case RuleConditionType.OUTSIDE_AVAILABLE_TIME_RANGE:\n        // Outside available time range would require additional tracking\n        return false;\n      case RuleConditionType.ALWAYS:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RuleCondition\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      condition: this._condition,\n      operator: this._operator,\n      parameters: Object.fromEntries(this._parameters),\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a sequencing rule\n */\nexport class SequencingRule extends BaseCMI {\n  private _conditions: RuleCondition[] = [];\n  private _action: RuleActionType = RuleActionType.SKIP;\n  private _conditionCombination: RuleConditionOperator = RuleConditionOperator.AND;\n\n  /**\n   * Constructor for SequencingRule\n   * @param {RuleActionType} action - The action to take when the rule conditions are met\n   * @param {RuleConditionOperator} conditionCombination - How to combine multiple conditions\n   */\n  constructor(\n    action: RuleActionType = RuleActionType.SKIP,\n    conditionCombination: RuleConditionOperator = RuleConditionOperator.AND,\n  ) {\n    super(\"sequencingRule\");\n    this._action = action;\n    this._conditionCombination = conditionCombination;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._conditions = [];\n  }\n\n  /**\n   * Getter for conditions\n   * @return {RuleCondition[]}\n   */\n  get conditions(): RuleCondition[] {\n    return this._conditions;\n  }\n\n  /**\n   * Add a condition to the rule\n   * @param {RuleCondition} condition - The condition to add\n   */\n  addCondition(condition: RuleCondition): void {\n    if (!(condition instanceof RuleCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._conditions.push(condition);\n  }\n\n  /**\n   * Remove a condition from the rule\n   * @param {RuleCondition} condition - The condition to remove\n   * @return {boolean} - True if the condition was removed, false otherwise\n   */\n  removeCondition(condition: RuleCondition): boolean {\n    const index = this._conditions.indexOf(condition);\n    if (index !== -1) {\n      this._conditions.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for action\n   * @return {RuleActionType}\n   */\n  get action(): RuleActionType {\n    return this._action;\n  }\n\n  /**\n   * Setter for action\n   * @param {RuleActionType} action\n   */\n  set action(action: RuleActionType) {\n    this._action = action;\n  }\n\n  /**\n   * Getter for conditionCombination\n   * @return {RuleConditionOperator}\n   */\n  get conditionCombination(): RuleConditionOperator {\n    return this._conditionCombination;\n  }\n\n  /**\n   * Setter for conditionCombination\n   * @param {RuleConditionOperator} conditionCombination\n   */\n  set conditionCombination(conditionCombination: RuleConditionOperator) {\n    this._conditionCombination = conditionCombination;\n  }\n\n  /**\n   * Evaluate the rule for an activity\n   * @param {Activity} activity - The activity to evaluate the rule for\n   * @return {boolean} - True if the rule conditions are met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    if (this._conditions.length === 0) {\n      return true;\n    }\n\n    if (this._conditionCombination === RuleConditionOperator.AND) {\n      return this._conditions.every((condition) => condition.evaluate(activity));\n    } else if (this._conditionCombination === RuleConditionOperator.OR) {\n      return this._conditions.some((condition) => condition.evaluate(activity));\n    }\n\n    return false;\n  }\n\n  /**\n   * toJSON for SequencingRule\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      conditions: this._conditions,\n      action: this._action,\n      conditionCombination: this._conditionCombination,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a collection of sequencing rules\n */\nexport class SequencingRules extends BaseCMI {\n  private _preConditionRules: SequencingRule[] = [];\n  private _exitConditionRules: SequencingRule[] = [];\n  private _postConditionRules: SequencingRule[] = [];\n\n  /**\n   * Constructor for SequencingRules\n   */\n  constructor() {\n    super(\"sequencingRules\");\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._preConditionRules = [];\n    this._exitConditionRules = [];\n    this._postConditionRules = [];\n  }\n\n  /**\n   * Getter for preConditionRules\n   * @return {SequencingRule[]}\n   */\n  get preConditionRules(): SequencingRule[] {\n    return this._preConditionRules;\n  }\n\n  /**\n   * Add a pre-condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addPreConditionRule(rule: SequencingRule): void {\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".preConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._preConditionRules.push(rule);\n  }\n\n  /**\n   * Getter for exitConditionRules\n   * @return {SequencingRule[]}\n   */\n  get exitConditionRules(): SequencingRule[] {\n    return this._exitConditionRules;\n  }\n\n  /**\n   * Add an exit condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addExitConditionRule(rule: SequencingRule): void {\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exitConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._exitConditionRules.push(rule);\n  }\n\n  /**\n   * Getter for postConditionRules\n   * @return {SequencingRule[]}\n   */\n  get postConditionRules(): SequencingRule[] {\n    return this._postConditionRules;\n  }\n\n  /**\n   * Add a post-condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addPostConditionRule(rule: SequencingRule): void {\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".postConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._postConditionRules.push(rule);\n  }\n\n  /**\n   * Evaluate pre-condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluatePreConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._preConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Evaluate exit condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluateExitConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._exitConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Evaluate post-condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluatePostConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._postConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * toJSON for SequencingRules\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      preConditionRules: this._preConditionRules,\n      exitConditionRules: this._exitConditionRules,\n      postConditionRules: this._postConditionRules,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { CompletionStatus, SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Enum for rollup action types\n */\nexport enum RollupActionType {\n  SATISFIED = \"satisfied\",\n  NOT_SATISFIED = \"notSatisfied\",\n  COMPLETED = \"completed\",\n  INCOMPLETE = \"incomplete\",\n}\n\n/**\n * Enum for rollup condition types\n */\nexport enum RollupConditionType {\n  SATISFIED = \"satisfied\",\n  OBJECTIVE_STATUS_KNOWN = \"objectiveStatusKnown\",\n  OBJECTIVE_MEASURE_KNOWN = \"objectiveMeasureKnown\",\n  OBJECTIVE_MEASURE_GREATER_THAN = \"objectiveMeasureGreaterThan\",\n  OBJECTIVE_MEASURE_LESS_THAN = \"objectiveMeasureLessThan\",\n  COMPLETED = \"completed\",\n  PROGRESS_KNOWN = \"progressKnown\",\n  ATTEMPTED = \"attempted\",\n  NOT_ATTEMPTED = \"notAttempted\",\n  ALWAYS = \"always\",\n}\n\n/**\n * Enum for rollup consideration types\n */\nexport enum RollupConsiderationType {\n  ALL = \"all\",\n  ANY = \"any\",\n  NONE = \"none\",\n  AT_LEAST_COUNT = \"atLeastCount\",\n  AT_LEAST_PERCENT = \"atLeastPercent\",\n}\n\n/**\n * Class representing a rollup condition\n */\nexport class RollupCondition extends BaseCMI {\n  private _condition: RollupConditionType = RollupConditionType.ALWAYS;\n  private _parameters: Map<string, any> = new Map();\n\n  /**\n   * Constructor for RollupCondition\n   * @param {RollupConditionType} condition - The condition type\n   * @param {Map<string, any>} parameters - Additional parameters for the condition\n   */\n  constructor(\n    condition: RollupConditionType = RollupConditionType.ALWAYS,\n    parameters: Map<string, any> = new Map(),\n  ) {\n    super(\"rollupCondition\");\n    this._condition = condition;\n    this._parameters = parameters;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for condition\n   * @return {RollupConditionType}\n   */\n  get condition(): RollupConditionType {\n    return this._condition;\n  }\n\n  /**\n   * Setter for condition\n   * @param {RollupConditionType} condition\n   */\n  set condition(condition: RollupConditionType) {\n    this._condition = condition;\n  }\n\n  /**\n   * Getter for parameters\n   * @return {Map<string, any>}\n   */\n  get parameters(): Map<string, any> {\n    return this._parameters;\n  }\n\n  /**\n   * Setter for parameters\n   * @param {Map<string, any>} parameters\n   */\n  set parameters(parameters: Map<string, any>) {\n    this._parameters = parameters;\n  }\n\n  /**\n   * Evaluate the condition for an activity\n   * @param {Activity} activity - The activity to evaluate the condition for\n   * @return {boolean} - True if the condition is met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    switch (this._condition) {\n      case RollupConditionType.SATISFIED:\n        return activity.successStatus === SuccessStatus.PASSED;\n      case RollupConditionType.OBJECTIVE_STATUS_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RollupConditionType.OBJECTIVE_MEASURE_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RollupConditionType.OBJECTIVE_MEASURE_GREATER_THAN: {\n        const greaterThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure > greaterThanValue\n        );\n      }\n      case RollupConditionType.OBJECTIVE_MEASURE_LESS_THAN: {\n        const lessThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure < lessThanValue\n        );\n      }\n      case RollupConditionType.COMPLETED:\n        return activity.isCompleted;\n      case RollupConditionType.PROGRESS_KNOWN:\n        return activity.completionStatus !== CompletionStatus.UNKNOWN;\n      case RollupConditionType.ATTEMPTED:\n        return activity.attemptCount > 0;\n      case RollupConditionType.NOT_ATTEMPTED:\n        return activity.attemptCount === 0;\n      case RollupConditionType.ALWAYS:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RollupCondition\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      condition: this._condition,\n      parameters: Object.fromEntries(this._parameters),\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a rollup rule\n */\nexport class RollupRule extends BaseCMI {\n  private _conditions: RollupCondition[] = [];\n  private _action: RollupActionType = RollupActionType.SATISFIED;\n  private _consideration: RollupConsiderationType = RollupConsiderationType.ALL;\n  private _minimumCount: number = 0;\n  private _minimumPercent: number = 0;\n\n  /**\n   * Constructor for RollupRule\n   * @param {RollupActionType} action - The action to take when the rule conditions are met\n   * @param {RollupConsiderationType} consideration - How to consider child activities\n   * @param {number} minimumCount - The minimum count for AT_LEAST_COUNT consideration\n   * @param {number} minimumPercent - The minimum percent for AT_LEAST_PERCENT consideration\n   */\n  constructor(\n    action: RollupActionType = RollupActionType.SATISFIED,\n    consideration: RollupConsiderationType = RollupConsiderationType.ALL,\n    minimumCount: number = 0,\n    minimumPercent: number = 0,\n  ) {\n    super(\"rollupRule\");\n    this._action = action;\n    this._consideration = consideration;\n    this._minimumCount = minimumCount;\n    this._minimumPercent = minimumPercent;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._conditions = [];\n  }\n\n  /**\n   * Getter for conditions\n   * @return {RollupCondition[]}\n   */\n  get conditions(): RollupCondition[] {\n    return this._conditions;\n  }\n\n  /**\n   * Add a condition to the rule\n   * @param {RollupCondition} condition - The condition to add\n   */\n  addCondition(condition: RollupCondition): void {\n    if (!(condition instanceof RollupCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._conditions.push(condition);\n  }\n\n  /**\n   * Remove a condition from the rule\n   * @param {RollupCondition} condition - The condition to remove\n   * @return {boolean} - True if the condition was removed, false otherwise\n   */\n  removeCondition(condition: RollupCondition): boolean {\n    const index = this._conditions.indexOf(condition);\n    if (index !== -1) {\n      this._conditions.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for action\n   * @return {RollupActionType}\n   */\n  get action(): RollupActionType {\n    return this._action;\n  }\n\n  /**\n   * Setter for action\n   * @param {RollupActionType} action\n   */\n  set action(action: RollupActionType) {\n    this._action = action;\n  }\n\n  /**\n   * Getter for consideration\n   * @return {RollupConsiderationType}\n   */\n  get consideration(): RollupConsiderationType {\n    return this._consideration;\n  }\n\n  /**\n   * Setter for consideration\n   * @param {RollupConsiderationType} consideration\n   */\n  set consideration(consideration: RollupConsiderationType) {\n    this._consideration = consideration;\n  }\n\n  /**\n   * Getter for minimumCount\n   * @return {number}\n   */\n  get minimumCount(): number {\n    return this._minimumCount;\n  }\n\n  /**\n   * Setter for minimumCount\n   * @param {number} minimumCount\n   */\n  set minimumCount(minimumCount: number) {\n    if (minimumCount >= 0) {\n      this._minimumCount = minimumCount;\n    }\n  }\n\n  /**\n   * Getter for minimumPercent\n   * @return {number}\n   */\n  get minimumPercent(): number {\n    return this._minimumPercent;\n  }\n\n  /**\n   * Setter for minimumPercent\n   * @param {number} minimumPercent\n   */\n  set minimumPercent(minimumPercent: number) {\n    if (minimumPercent >= 0 && minimumPercent <= 100) {\n      this._minimumPercent = minimumPercent;\n    }\n  }\n\n  /**\n   * Evaluate the rule for a set of child activities\n   * @param {Activity[]} children - The child activities to evaluate the rule for\n   * @return {boolean} - True if the rule conditions are met, false otherwise\n   */\n  evaluate(children: Activity[]): boolean {\n    if (children.length === 0) {\n      return false;\n    }\n\n    // Filter children that meet all conditions\n    const matchingChildren = children.filter((child) => {\n      return this._conditions.every((condition) => condition.evaluate(child));\n    });\n\n    // Apply consideration\n    switch (this._consideration) {\n      case RollupConsiderationType.ALL:\n        return matchingChildren.length === children.length;\n      case RollupConsiderationType.ANY:\n        return matchingChildren.length > 0;\n      case RollupConsiderationType.NONE:\n        return matchingChildren.length === 0;\n      case RollupConsiderationType.AT_LEAST_COUNT:\n        return matchingChildren.length >= this._minimumCount;\n      case RollupConsiderationType.AT_LEAST_PERCENT: {\n        const percent = (matchingChildren.length / children.length) * 100;\n        return percent >= this._minimumPercent;\n      }\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RollupRule\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      conditions: this._conditions,\n      action: this._action,\n      consideration: this._consideration,\n      minimumCount: this._minimumCount,\n      minimumPercent: this._minimumPercent,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a collection of rollup rules\n */\nexport class RollupRules extends BaseCMI {\n  private _rules: RollupRule[] = [];\n\n  /**\n   * Constructor for RollupRules\n   */\n  constructor() {\n    super(\"rollupRules\");\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._rules = [];\n  }\n\n  /**\n   * Getter for rules\n   * @return {RollupRule[]}\n   */\n  get rules(): RollupRule[] {\n    return this._rules;\n  }\n\n  /**\n   * Add a rule\n   * @param {RollupRule} rule - The rule to add\n   */\n  addRule(rule: RollupRule): void {\n    if (!(rule instanceof RollupRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".rules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._rules.push(rule);\n  }\n\n  /**\n   * Remove a rule\n   * @param {RollupRule} rule - The rule to remove\n   * @return {boolean} - True if the rule was removed, false otherwise\n   */\n  removeRule(rule: RollupRule): boolean {\n    const index = this._rules.indexOf(rule);\n    if (index !== -1) {\n      this._rules.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Process rollup for an activity\n   * @param {Activity} activity - The activity to process rollup for\n   */\n  processRollup(activity: Activity): void {\n    if (!activity || activity.children.length === 0) {\n      return;\n    }\n\n    const children = activity.children;\n    let completionRollup = false;\n    let successRollup = false;\n\n    // Process each rule\n    for (const rule of this._rules) {\n      if (rule.evaluate(children)) {\n        switch (rule.action) {\n          case RollupActionType.SATISFIED:\n            activity.successStatus = SuccessStatus.PASSED;\n            successRollup = true;\n            break;\n          case RollupActionType.NOT_SATISFIED:\n            activity.successStatus = SuccessStatus.FAILED;\n            successRollup = true;\n            break;\n          case RollupActionType.COMPLETED:\n            activity.completionStatus = CompletionStatus.COMPLETED;\n            activity.isCompleted = true;\n            completionRollup = true;\n            break;\n          case RollupActionType.INCOMPLETE:\n            activity.completionStatus = CompletionStatus.INCOMPLETE;\n            activity.isCompleted = false;\n            completionRollup = true;\n            break;\n        }\n      }\n    }\n\n    // If no rules applied for completion, use default rollup\n    if (!completionRollup) {\n      this._defaultCompletionRollup(activity, children);\n    }\n\n    // If no rules applied for success, use default rollup\n    if (!successRollup) {\n      this._defaultSuccessRollup(activity, children);\n    }\n  }\n\n  /**\n   * Default completion rollup\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @private\n   */\n  private _defaultCompletionRollup(activity: Activity, children: Activity[]): void {\n    // If all children are completed, mark the parent as completed\n    const allCompleted = children.every((child) => child.isCompleted);\n    if (allCompleted) {\n      activity.completionStatus = CompletionStatus.COMPLETED;\n      activity.isCompleted = true;\n    } else {\n      // If any child is incomplete, mark the parent as incomplete\n      const anyIncomplete = children.some(\n        (child) => child.completionStatus === CompletionStatus.INCOMPLETE,\n      );\n      if (anyIncomplete) {\n        activity.completionStatus = CompletionStatus.INCOMPLETE;\n        activity.isCompleted = false;\n      }\n    }\n  }\n\n  /**\n   * Default success rollup\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @private\n   */\n  private _defaultSuccessRollup(activity: Activity, children: Activity[]): void {\n    // If all children are satisfied, mark the parent as satisfied\n    const allSatisfied = children.every((child) => child.successStatus === SuccessStatus.PASSED);\n    if (allSatisfied) {\n      activity.successStatus = SuccessStatus.PASSED;\n    } else {\n      // If any child is not satisfied, mark the parent as not satisfied\n      const anyNotSatisfied = children.some(\n        (child) => child.successStatus === SuccessStatus.FAILED,\n      );\n      if (anyNotSatisfied) {\n        activity.successStatus = SuccessStatus.FAILED;\n      }\n    }\n  }\n\n  /**\n   * toJSON for RollupRules\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      rules: this._rules,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","const ValidLanguages: string[] = [\n  \"aa\",\n  \"ab\",\n  \"ae\",\n  \"af\",\n  \"ak\",\n  \"am\",\n  \"an\",\n  \"ar\",\n  \"as\",\n  \"av\",\n  \"ay\",\n  \"az\",\n  \"ba\",\n  \"be\",\n  \"bg\",\n  \"bh\",\n  \"bi\",\n  \"bm\",\n  \"bn\",\n  \"bo\",\n  \"br\",\n  \"bs\",\n  \"ca\",\n  \"ce\",\n  \"ch\",\n  \"co\",\n  \"cr\",\n  \"cs\",\n  \"cu\",\n  \"cv\",\n  \"cy\",\n  \"da\",\n  \"de\",\n  \"dv\",\n  \"dz\",\n  \"ee\",\n  \"el\",\n  \"en\",\n  \"eo\",\n  \"es\",\n  \"et\",\n  \"eu\",\n  \"fa\",\n  \"ff\",\n  \"fi\",\n  \"fj\",\n  \"fo\",\n  \"fr\",\n  \"fy\",\n  \"ga\",\n  \"gd\",\n  \"gl\",\n  \"gn\",\n  \"gu\",\n  \"gv\",\n  \"ha\",\n  \"he\",\n  \"hi\",\n  \"ho\",\n  \"hr\",\n  \"ht\",\n  \"hu\",\n  \"hy\",\n  \"hz\",\n  \"ia\",\n  \"id\",\n  \"ie\",\n  \"ig\",\n  \"ii\",\n  \"ik\",\n  \"io\",\n  \"is\",\n  \"it\",\n  \"iu\",\n  \"ja\",\n  \"jv\",\n  \"ka\",\n  \"kg\",\n  \"ki\",\n  \"kj\",\n  \"kk\",\n  \"kl\",\n  \"km\",\n  \"kn\",\n  \"ko\",\n  \"kr\",\n  \"ks\",\n  \"ku\",\n  \"kv\",\n  \"kw\",\n  \"ky\",\n  \"la\",\n  \"lb\",\n  \"lg\",\n  \"li\",\n  \"ln\",\n  \"lo\",\n  \"lt\",\n  \"lu\",\n  \"lv\",\n  \"mg\",\n  \"mh\",\n  \"mi\",\n  \"mk\",\n  \"ml\",\n  \"mn\",\n  \"mo\",\n  \"mr\",\n  \"ms\",\n  \"mt\",\n  \"my\",\n  \"na\",\n  \"nb\",\n  \"nd\",\n  \"ne\",\n  \"ng\",\n  \"nl\",\n  \"nn\",\n  \"no\",\n  \"nr\",\n  \"nv\",\n  \"ny\",\n  \"oc\",\n  \"oj\",\n  \"om\",\n  \"or\",\n  \"os\",\n  \"pa\",\n  \"pi\",\n  \"pl\",\n  \"ps\",\n  \"pt\",\n  \"qu\",\n  \"rm\",\n  \"rn\",\n  \"ro\",\n  \"ru\",\n  \"rw\",\n  \"sa\",\n  \"sc\",\n  \"sd\",\n  \"se\",\n  \"sg\",\n  \"sh\",\n  \"si\",\n  \"sk\",\n  \"sl\",\n  \"sm\",\n  \"sn\",\n  \"so\",\n  \"sq\",\n  \"sr\",\n  \"ss\",\n  \"st\",\n  \"su\",\n  \"sv\",\n  \"sw\",\n  \"ta\",\n  \"te\",\n  \"tg\",\n  \"th\",\n  \"ti\",\n  \"tk\",\n  \"tl\",\n  \"tn\",\n  \"to\",\n  \"tr\",\n  \"ts\",\n  \"tt\",\n  \"tw\",\n  \"ty\",\n  \"ug\",\n  \"uk\",\n  \"ur\",\n  \"uz\",\n  \"ve\",\n  \"vi\",\n  \"vo\",\n  \"wa\",\n  \"wo\",\n  \"xh\",\n  \"yi\",\n  \"yo\",\n  \"za\",\n  \"zh\",\n  \"zu\",\n  \"aar\",\n  \"abk\",\n  \"ave\",\n  \"afr\",\n  \"aka\",\n  \"amh\",\n  \"arg\",\n  \"ara\",\n  \"asm\",\n  \"ava\",\n  \"aym\",\n  \"aze\",\n  \"bak\",\n  \"bel\",\n  \"bul\",\n  \"bih\",\n  \"bis\",\n  \"bam\",\n  \"ben\",\n  \"tib\",\n  \"bod\",\n  \"bre\",\n  \"bos\",\n  \"cat\",\n  \"che\",\n  \"cha\",\n  \"cos\",\n  \"cre\",\n  \"cze\",\n  \"ces\",\n  \"chu\",\n  \"chv\",\n  \"wel\",\n  \"cym\",\n  \"dan\",\n  \"ger\",\n  \"deu\",\n  \"div\",\n  \"dzo\",\n  \"ewe\",\n  \"gre\",\n  \"ell\",\n  \"eng\",\n  \"epo\",\n  \"spa\",\n  \"est\",\n  \"baq\",\n  \"eus\",\n  \"per\",\n  \"fas\",\n  \"ful\",\n  \"fin\",\n  \"fij\",\n  \"fao\",\n  \"fre\",\n  \"fra\",\n  \"fry\",\n  \"gle\",\n  \"gla\",\n  \"glg\",\n  \"grn\",\n  \"guj\",\n  \"glv\",\n  \"hau\",\n  \"heb\",\n  \"hin\",\n  \"hmo\",\n  \"hrv\",\n  \"hat\",\n  \"hun\",\n  \"arm\",\n  \"hye\",\n  \"her\",\n  \"ina\",\n  \"ind\",\n  \"ile\",\n  \"ibo\",\n  \"iii\",\n  \"ipk\",\n  \"ido\",\n  \"ice\",\n  \"isl\",\n  \"ita\",\n  \"iku\",\n  \"jpn\",\n  \"jav\",\n  \"geo\",\n  \"kat\",\n  \"kon\",\n  \"kik\",\n  \"kua\",\n  \"kaz\",\n  \"kal\",\n  \"khm\",\n  \"kan\",\n  \"kor\",\n  \"kau\",\n  \"kas\",\n  \"kur\",\n  \"kom\",\n  \"cor\",\n  \"kir\",\n  \"lat\",\n  \"ltz\",\n  \"lug\",\n  \"lim\",\n  \"lin\",\n  \"lao\",\n  \"lit\",\n  \"lub\",\n  \"lav\",\n  \"mlg\",\n  \"mah\",\n  \"mao\",\n  \"mri\",\n  \"mac\",\n  \"mkd\",\n  \"mal\",\n  \"mon\",\n  \"mol\",\n  \"mar\",\n  \"may\",\n  \"msa\",\n  \"mlt\",\n  \"bur\",\n  \"mya\",\n  \"nau\",\n  \"nob\",\n  \"nde\",\n  \"nep\",\n  \"ndo\",\n  \"dut\",\n  \"nld\",\n  \"nno\",\n  \"nor\",\n  \"nbl\",\n  \"nav\",\n  \"nya\",\n  \"oci\",\n  \"oji\",\n  \"orm\",\n  \"ori\",\n  \"oss\",\n  \"pan\",\n  \"pli\",\n  \"pol\",\n  \"pus\",\n  \"por\",\n  \"que\",\n  \"roh\",\n  \"run\",\n  \"rum\",\n  \"ron\",\n  \"rus\",\n  \"kin\",\n  \"san\",\n  \"srd\",\n  \"snd\",\n  \"sme\",\n  \"sag\",\n  \"slo\",\n  \"sin\",\n  \"slk\",\n  \"slv\",\n  \"smo\",\n  \"sna\",\n  \"som\",\n  \"alb\",\n  \"sqi\",\n  \"srp\",\n  \"ssw\",\n  \"sot\",\n  \"sun\",\n  \"swe\",\n  \"swa\",\n  \"tam\",\n  \"tel\",\n  \"tgk\",\n  \"tha\",\n  \"tir\",\n  \"tuk\",\n  \"tgl\",\n  \"tsn\",\n  \"ton\",\n  \"tur\",\n  \"tso\",\n  \"tat\",\n  \"twi\",\n  \"tah\",\n  \"uig\",\n  \"ukr\",\n  \"urd\",\n  \"uzb\",\n  \"ven\",\n  \"vie\",\n  \"vol\",\n  \"wln\",\n  \"wol\",\n  \"xho\",\n  \"yid\",\n  \"yor\",\n  \"zha\",\n  \"chi\",\n  \"zho\",\n  \"zul\",\n];\nexport default ValidLanguages;\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { scorm2004_regex } from \"../../../constants/regex\";\nimport { check2004ValidFormat } from \"../validation\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { CompletionStatus, SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Class representing a single activity in the SCORM 2004 activity tree\n */\nexport class Activity extends BaseCMI {\n  private _id: string = \"\";\n  private _title: string = \"\";\n  private _children: Activity[] = [];\n  private _parent: Activity | null = null;\n  private _isVisible: boolean = true;\n  private _isActive: boolean = false;\n  private _isSuspended: boolean = false;\n  private _isCompleted: boolean = false;\n  private _completionStatus: CompletionStatus = CompletionStatus.UNKNOWN;\n  private _successStatus: SuccessStatus = SuccessStatus.UNKNOWN;\n  private _attemptCount: number = 0;\n  private _attemptCompletionAmount: number = 0;\n  private _attemptAbsoluteDuration: string = \"PT0H0M0S\";\n  private _attemptExperiencedDuration: string = \"PT0H0M0S\";\n  private _activityAbsoluteDuration: string = \"PT0H0M0S\";\n  private _activityExperiencedDuration: string = \"PT0H0M0S\";\n  private _objectiveSatisfiedStatus: boolean = false;\n  private _objectiveMeasureStatus: boolean = false;\n  private _objectiveNormalizedMeasure: number = 0;\n\n  /**\n   * Constructor for Activity\n   * @param {string} id - The unique identifier for this activity\n   * @param {string} title - The title of this activity\n   */\n  constructor(id: string = \"\", title: string = \"\") {\n    super(\"activity\");\n    this._id = id;\n    this._title = title;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    // Initialize children\n    for (const child of this._children) {\n      child.initialize();\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._isActive = false;\n    this._isSuspended = false;\n    this._isCompleted = false;\n    this._completionStatus = CompletionStatus.UNKNOWN;\n    this._successStatus = SuccessStatus.UNKNOWN;\n    this._attemptCount = 0;\n    this._attemptCompletionAmount = 0;\n    this._attemptAbsoluteDuration = \"PT0H0M0S\";\n    this._attemptExperiencedDuration = \"PT0H0M0S\";\n    this._activityAbsoluteDuration = \"PT0H0M0S\";\n    this._activityExperiencedDuration = \"PT0H0M0S\";\n    this._objectiveSatisfiedStatus = false;\n    this._objectiveMeasureStatus = false;\n    this._objectiveNormalizedMeasure = 0;\n\n    // Reset children\n    for (const child of this._children) {\n      child.reset();\n    }\n  }\n\n  /**\n   * Getter for id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for title\n   * @return {string}\n   */\n  get title(): string {\n    return this._title;\n  }\n\n  /**\n   * Setter for title\n   * @param {string} title\n   */\n  set title(title: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".title\", title, scorm2004_regex.CMILangString250)\n    ) {\n      this._title = title;\n    }\n  }\n\n  /**\n   * Getter for children\n   * @return {Activity[]}\n   */\n  get children(): Activity[] {\n    return this._children;\n  }\n\n  /**\n   * Add a child activity to this activity\n   * @param {Activity} child - The child activity to add\n   */\n  addChild(child: Activity): void {\n    if (!(child instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".children\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    child._parent = this;\n    this._children.push(child);\n  }\n\n  /**\n   * Remove a child activity from this activity\n   * @param {Activity} child - The child activity to remove\n   * @return {boolean} - True if the child was removed, false otherwise\n   */\n  removeChild(child: Activity): boolean {\n    const index = this._children.indexOf(child);\n    if (index !== -1) {\n      this._children.splice(index, 1);\n      child._parent = null;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for parent\n   * @return {Activity | null}\n   */\n  get parent(): Activity | null {\n    return this._parent;\n  }\n\n  /**\n   * Getter for isVisible\n   * @return {boolean}\n   */\n  get isVisible(): boolean {\n    return this._isVisible;\n  }\n\n  /**\n   * Setter for isVisible\n   * @param {boolean} isVisible\n   */\n  set isVisible(isVisible: boolean) {\n    this._isVisible = isVisible;\n  }\n\n  /**\n   * Getter for isActive\n   * @return {boolean}\n   */\n  get isActive(): boolean {\n    return this._isActive;\n  }\n\n  /**\n   * Setter for isActive\n   * @param {boolean} isActive\n   */\n  set isActive(isActive: boolean) {\n    this._isActive = isActive;\n  }\n\n  /**\n   * Getter for isSuspended\n   * @return {boolean}\n   */\n  get isSuspended(): boolean {\n    return this._isSuspended;\n  }\n\n  /**\n   * Setter for isSuspended\n   * @param {boolean} isSuspended\n   */\n  set isSuspended(isSuspended: boolean) {\n    this._isSuspended = isSuspended;\n  }\n\n  /**\n   * Getter for isCompleted\n   * @return {boolean}\n   */\n  get isCompleted(): boolean {\n    return this._isCompleted;\n  }\n\n  /**\n   * Setter for isCompleted\n   * @param {boolean} isCompleted\n   */\n  set isCompleted(isCompleted: boolean) {\n    this._isCompleted = isCompleted;\n  }\n\n  /**\n   * Getter for completionStatus\n   * @return {CompletionStatus}\n   */\n  get completionStatus(): CompletionStatus {\n    return this._completionStatus;\n  }\n\n  /**\n   * Setter for completionStatus\n   * @param {CompletionStatus} completionStatus\n   */\n  set completionStatus(completionStatus: CompletionStatus) {\n    this._completionStatus = completionStatus;\n    this._isCompleted = completionStatus === CompletionStatus.COMPLETED;\n  }\n\n  /**\n   * Getter for successStatus\n   * @return {SuccessStatus}\n   */\n  get successStatus(): SuccessStatus {\n    return this._successStatus;\n  }\n\n  /**\n   * Setter for successStatus\n   * @param {SuccessStatus} successStatus\n   */\n  set successStatus(successStatus: SuccessStatus) {\n    this._successStatus = successStatus;\n  }\n\n  /**\n   * Getter for attemptCount\n   * @return {number}\n   */\n  get attemptCount(): number {\n    return this._attemptCount;\n  }\n\n  /**\n   * Increment the attempt count\n   */\n  incrementAttemptCount(): void {\n    this._attemptCount++;\n  }\n\n  /**\n   * Getter for objectiveMeasureStatus\n   * @return {boolean}\n   */\n  get objectiveMeasureStatus(): boolean {\n    return this._objectiveMeasureStatus;\n  }\n\n  /**\n   * Setter for objectiveMeasureStatus\n   * @param {boolean} objectiveMeasureStatus\n   */\n  set objectiveMeasureStatus(objectiveMeasureStatus: boolean) {\n    this._objectiveMeasureStatus = objectiveMeasureStatus;\n  }\n\n  /**\n   * Getter for objectiveNormalizedMeasure\n   * @return {number}\n   */\n  get objectiveNormalizedMeasure(): number {\n    return this._objectiveNormalizedMeasure;\n  }\n\n  /**\n   * Setter for objectiveNormalizedMeasure\n   * @param {number} objectiveNormalizedMeasure\n   */\n  set objectiveNormalizedMeasure(objectiveNormalizedMeasure: number) {\n    this._objectiveNormalizedMeasure = objectiveNormalizedMeasure;\n  }\n\n  /**\n   * toJSON for Activity\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      id: this._id,\n      title: this._title,\n      isVisible: this._isVisible,\n      isActive: this._isActive,\n      isSuspended: this._isSuspended,\n      isCompleted: this._isCompleted,\n      completionStatus: this._completionStatus,\n      successStatus: this._successStatus,\n      attemptCount: this._attemptCount,\n      attemptCompletionAmount: this._attemptCompletionAmount,\n      attemptAbsoluteDuration: this._attemptAbsoluteDuration,\n      attemptExperiencedDuration: this._attemptExperiencedDuration,\n      activityAbsoluteDuration: this._activityAbsoluteDuration,\n      activityExperiencedDuration: this._activityExperiencedDuration,\n      objectiveSatisfiedStatus: this._objectiveSatisfiedStatus,\n      objectiveMeasureStatus: this._objectiveMeasureStatus,\n      objectiveNormalizedMeasure: this._objectiveNormalizedMeasure,\n      children: this._children.map((child) => child.toJSON()),\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\n\n/**\n * Class representing the SCORM 2004 activity tree\n */\nexport class ActivityTree extends BaseCMI {\n  private _root: Activity | null = null;\n  private _currentActivity: Activity | null = null;\n  private _suspendedActivity: Activity | null = null;\n  private _activities: Map<string, Activity> = new Map();\n\n  /**\n   * Constructor for ActivityTree\n   */\n  constructor() {\n    super(\"activityTree\");\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    if (this._root) {\n      this._root.initialize();\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._currentActivity = null;\n    this._suspendedActivity = null;\n    if (this._root) {\n      this._root.reset();\n    }\n  }\n\n  /**\n   * Getter for root\n   * @return {Activity | null}\n   */\n  get root(): Activity | null {\n    return this._root;\n  }\n\n  /**\n   * Setter for root\n   * @param {Activity} root\n   */\n  set root(root: Activity | null) {\n    if (root !== null && !(root instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".root\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._root = root;\n    if (root) {\n      this._activities.set(root.id, root);\n      this._addActivitiesToMap(root);\n    }\n  }\n\n  /**\n   * Recursively add activities to the activities map\n   * @param {Activity} activity\n   * @private\n   */\n  private _addActivitiesToMap(activity: Activity): void {\n    for (const child of activity.children) {\n      this._activities.set(child.id, child);\n      this._addActivitiesToMap(child);\n    }\n  }\n\n  /**\n   * Getter for currentActivity\n   * @return {Activity | null}\n   */\n  get currentActivity(): Activity | null {\n    return this._currentActivity;\n  }\n\n  /**\n   * Setter for currentActivity\n   * @param {Activity | null} activity\n   */\n  set currentActivity(activity: Activity | null) {\n    if (activity !== null && !(activity instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".currentActivity\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n\n    // If there's already a current activity, deactivate it\n    if (this._currentActivity) {\n      this._currentActivity.isActive = false;\n    }\n\n    // Set the new current activity and activate it\n    this._currentActivity = activity;\n    if (activity) {\n      activity.isActive = true;\n    }\n  }\n\n  /**\n   * Getter for suspendedActivity\n   * @return {Activity | null}\n   */\n  get suspendedActivity(): Activity | null {\n    return this._suspendedActivity;\n  }\n\n  /**\n   * Setter for suspendedActivity\n   * @param {Activity | null} activity\n   */\n  set suspendedActivity(activity: Activity | null) {\n    if (activity !== null && !(activity instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".suspendedActivity\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n\n    // If there's already a suspended activity, unsuspend it\n    if (this._suspendedActivity) {\n      this._suspendedActivity.isSuspended = false;\n    }\n\n    // Set the new suspended activity and mark it as suspended\n    this._suspendedActivity = activity;\n    if (activity) {\n      activity.isSuspended = true;\n    }\n  }\n\n  /**\n   * Get an activity by ID\n   * @param {string} id - The ID of the activity to get\n   * @return {Activity | undefined} - The activity with the given ID, or undefined if not found\n   */\n  getActivity(id: string): Activity | undefined {\n    return this._activities.get(id);\n  }\n\n  /**\n   * Get all activities in the tree\n   * @return {Activity[]} - An array of all activities in the tree\n   */\n  getAllActivities(): Activity[] {\n    return Array.from(this._activities.values());\n  }\n\n  /**\n   * Get the parent of an activity\n   * @param {Activity} activity - The activity to get the parent of\n   * @return {Activity | null} - The parent of the activity, or null if it has no parent\n   */\n  getParent(activity: Activity): Activity | null {\n    return activity.parent;\n  }\n\n  /**\n   * Get the children of an activity\n   * @param {Activity} activity - The activity to get the children of\n   * @return {Activity[]} - An array of the activity's children\n   */\n  getChildren(activity: Activity): Activity[] {\n    return activity.children;\n  }\n\n  /**\n   * Get the siblings of an activity\n   * @param {Activity} activity - The activity to get the siblings of\n   * @return {Activity[]} - An array of the activity's siblings\n   */\n  getSiblings(activity: Activity): Activity[] {\n    if (!activity.parent) {\n      return [];\n    }\n    return activity.parent.children.filter((child) => child !== activity);\n  }\n\n  /**\n   * Get the next sibling of an activity\n   * @param {Activity} activity - The activity to get the next sibling of\n   * @return {Activity | null} - The next sibling of the activity, or null if it has no next sibling\n   */\n  getNextSibling(activity: Activity): Activity | null {\n    if (!activity.parent) {\n      return null;\n    }\n    const siblings = activity.parent.children;\n    const index = siblings.indexOf(activity);\n    if (index === -1 || index === siblings.length - 1) {\n      return null;\n    }\n    return siblings[index + 1];\n  }\n\n  /**\n   * Get the previous sibling of an activity\n   * @param {Activity} activity - The activity to get the previous sibling of\n   * @return {Activity | null} - The previous sibling of the activity, or null if it has no previous sibling\n   */\n  getPreviousSibling(activity: Activity): Activity | null {\n    if (!activity.parent) {\n      return null;\n    }\n    const siblings = activity.parent.children;\n    const index = siblings.indexOf(activity);\n    if (index <= 0) {\n      return null;\n    }\n    return siblings[index - 1];\n  }\n\n  /**\n   * Get the first child of an activity\n   * @param {Activity} activity - The activity to get the first child of\n   * @return {Activity | null} - The first child of the activity, or null if it has no children\n   */\n  getFirstChild(activity: Activity): Activity | null {\n    if (activity.children.length === 0) {\n      return null;\n    }\n    return activity.children[0];\n  }\n\n  /**\n   * Get the last child of an activity\n   * @param {Activity} activity - The activity to get the last child of\n   * @return {Activity | null} - The last child of the activity, or null if it has no children\n   */\n  getLastChild(activity: Activity): Activity | null {\n    if (activity.children.length === 0) {\n      return null;\n    }\n    return activity.children[activity.children.length - 1];\n  }\n\n  /**\n   * Get the common ancestor of two activities\n   * @param {Activity} activity1 - The first activity\n   * @param {Activity} activity2 - The second activity\n   * @return {Activity | null} - The common ancestor of the two activities, or null if they have no common ancestor\n   */\n  getCommonAncestor(activity1: Activity, activity2: Activity): Activity | null {\n    // Get the path from the root to activity1\n    const path1: Activity[] = [];\n    let current: Activity | null = activity1;\n    while (current) {\n      path1.unshift(current);\n      current = current.parent;\n    }\n\n    // Check if activity2 is in the path from the root to activity1\n    current = activity2;\n    while (current) {\n      if (path1.includes(current)) {\n        return current;\n      }\n      current = current.parent;\n    }\n\n    return null;\n  }\n\n  /**\n   * toJSON for ActivityTree\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      root: this._root,\n      currentActivity: this._currentActivity ? this._currentActivity.id : null,\n      suspendedActivity: this._suspendedActivity ? this._suspendedActivity.id : null,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\n\n/**\n * Class representing SCORM 2004 sequencing controls\n */\nexport class SequencingControls extends BaseCMI {\n  // Sequencing Control Modes\n  private _enabled: boolean = true;\n  private _choiceExit: boolean = true;\n  private _flow: boolean = false;\n  private _forwardOnly: boolean = false;\n  private _useCurrentAttemptObjectiveInfo: boolean = true;\n  private _useCurrentAttemptProgressInfo: boolean = true;\n\n  // Constrain Choice Controls\n  private _preventActivation: boolean = false;\n  private _constrainChoice: boolean = false;\n\n  // Rollup Controls\n  private _rollupObjectiveSatisfied: boolean = true;\n  private _rollupProgressCompletion: boolean = true;\n  private _objectiveMeasureWeight: number = 1.0;\n\n  /**\n   * Constructor for SequencingControls\n   */\n  constructor() {\n    super(\"sequencingControls\");\n  }\n\n  /**\n   * Reset the sequencing controls to their default values\n   */\n  reset() {\n    this._initialized = false;\n    this._enabled = true;\n    this._choiceExit = true;\n    this._flow = false;\n    this._forwardOnly = false;\n    this._useCurrentAttemptObjectiveInfo = true;\n    this._useCurrentAttemptProgressInfo = true;\n    this._preventActivation = false;\n    this._constrainChoice = false;\n    this._rollupObjectiveSatisfied = true;\n    this._rollupProgressCompletion = true;\n    this._objectiveMeasureWeight = 1.0;\n  }\n\n  /**\n   * Getter for enabled\n   * @return {boolean}\n   */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  /**\n   * Setter for enabled\n   * @param {boolean} enabled\n   */\n  set enabled(enabled: boolean) {\n    this._enabled = enabled;\n  }\n\n  /**\n   * Getter for choiceExit\n   * @return {boolean}\n   */\n  get choiceExit(): boolean {\n    return this._choiceExit;\n  }\n\n  /**\n   * Setter for choiceExit\n   * @param {boolean} choiceExit\n   */\n  set choiceExit(choiceExit: boolean) {\n    this._choiceExit = choiceExit;\n  }\n\n  /**\n   * Getter for flow\n   * @return {boolean}\n   */\n  get flow(): boolean {\n    return this._flow;\n  }\n\n  /**\n   * Setter for flow\n   * @param {boolean} flow\n   */\n  set flow(flow: boolean) {\n    this._flow = flow;\n  }\n\n  /**\n   * Getter for forwardOnly\n   * @return {boolean}\n   */\n  get forwardOnly(): boolean {\n    return this._forwardOnly;\n  }\n\n  /**\n   * Setter for forwardOnly\n   * @param {boolean} forwardOnly\n   */\n  set forwardOnly(forwardOnly: boolean) {\n    this._forwardOnly = forwardOnly;\n  }\n\n  /**\n   * Getter for useCurrentAttemptObjectiveInfo\n   * @return {boolean}\n   */\n  get useCurrentAttemptObjectiveInfo(): boolean {\n    return this._useCurrentAttemptObjectiveInfo;\n  }\n\n  /**\n   * Setter for useCurrentAttemptObjectiveInfo\n   * @param {boolean} useCurrentAttemptObjectiveInfo\n   */\n  set useCurrentAttemptObjectiveInfo(useCurrentAttemptObjectiveInfo: boolean) {\n    this._useCurrentAttemptObjectiveInfo = useCurrentAttemptObjectiveInfo;\n  }\n\n  /**\n   * Getter for useCurrentAttemptProgressInfo\n   * @return {boolean}\n   */\n  get useCurrentAttemptProgressInfo(): boolean {\n    return this._useCurrentAttemptProgressInfo;\n  }\n\n  /**\n   * Setter for useCurrentAttemptProgressInfo\n   * @param {boolean} useCurrentAttemptProgressInfo\n   */\n  set useCurrentAttemptProgressInfo(useCurrentAttemptProgressInfo: boolean) {\n    this._useCurrentAttemptProgressInfo = useCurrentAttemptProgressInfo;\n  }\n\n  /**\n   * Getter for preventActivation\n   * @return {boolean}\n   */\n  get preventActivation(): boolean {\n    return this._preventActivation;\n  }\n\n  /**\n   * Setter for preventActivation\n   * @param {boolean} preventActivation\n   */\n  set preventActivation(preventActivation: boolean) {\n    this._preventActivation = preventActivation;\n  }\n\n  /**\n   * Getter for constrainChoice\n   * @return {boolean}\n   */\n  get constrainChoice(): boolean {\n    return this._constrainChoice;\n  }\n\n  /**\n   * Setter for constrainChoice\n   * @param {boolean} constrainChoice\n   */\n  set constrainChoice(constrainChoice: boolean) {\n    this._constrainChoice = constrainChoice;\n  }\n\n  /**\n   * Getter for rollupObjectiveSatisfied\n   * @return {boolean}\n   */\n  get rollupObjectiveSatisfied(): boolean {\n    return this._rollupObjectiveSatisfied;\n  }\n\n  /**\n   * Setter for rollupObjectiveSatisfied\n   * @param {boolean} rollupObjectiveSatisfied\n   */\n  set rollupObjectiveSatisfied(rollupObjectiveSatisfied: boolean) {\n    this._rollupObjectiveSatisfied = rollupObjectiveSatisfied;\n  }\n\n  /**\n   * Getter for rollupProgressCompletion\n   * @return {boolean}\n   */\n  get rollupProgressCompletion(): boolean {\n    return this._rollupProgressCompletion;\n  }\n\n  /**\n   * Setter for rollupProgressCompletion\n   * @param {boolean} rollupProgressCompletion\n   */\n  set rollupProgressCompletion(rollupProgressCompletion: boolean) {\n    this._rollupProgressCompletion = rollupProgressCompletion;\n  }\n\n  /**\n   * Getter for objectiveMeasureWeight\n   * @return {number}\n   */\n  get objectiveMeasureWeight(): number {\n    return this._objectiveMeasureWeight;\n  }\n\n  /**\n   * Setter for objectiveMeasureWeight\n   * @param {number} objectiveMeasureWeight\n   */\n  set objectiveMeasureWeight(objectiveMeasureWeight: number) {\n    if (objectiveMeasureWeight >= 0 && objectiveMeasureWeight <= 1) {\n      this._objectiveMeasureWeight = objectiveMeasureWeight;\n    }\n  }\n\n  /**\n   * Check if choice navigation is allowed\n   * @return {boolean} - True if choice navigation is allowed, false otherwise\n   */\n  isChoiceNavigationAllowed(): boolean {\n    return this._enabled && !this._constrainChoice;\n  }\n\n  /**\n   * Check if flow navigation is allowed\n   * @return {boolean} - True if flow navigation is allowed, false otherwise\n   */\n  isFlowNavigationAllowed(): boolean {\n    return this._enabled && this._flow;\n  }\n\n  /**\n   * Check if forward navigation is allowed\n   * @return {boolean} - True if forward navigation is allowed, false otherwise\n   */\n  isForwardNavigationAllowed(): boolean {\n    return this._enabled && (!this._forwardOnly || this._flow);\n  }\n\n  /**\n   * Check if backward navigation is allowed\n   * @return {boolean} - True if backward navigation is allowed, false otherwise\n   */\n  isBackwardNavigationAllowed(): boolean {\n    return this._enabled && !this._forwardOnly;\n  }\n\n  /**\n   * toJSON for SequencingControls\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      enabled: this._enabled,\n      choiceExit: this._choiceExit,\n      flow: this._flow,\n      forwardOnly: this._forwardOnly,\n      useCurrentAttemptObjectiveInfo: this._useCurrentAttemptObjectiveInfo,\n      useCurrentAttemptProgressInfo: this._useCurrentAttemptProgressInfo,\n      preventActivation: this._preventActivation,\n      constrainChoice: this._constrainChoice,\n      rollupObjectiveSatisfied: this._rollupObjectiveSatisfied,\n      rollupProgressCompletion: this._rollupProgressCompletion,\n      objectiveMeasureWeight: this._objectiveMeasureWeight,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { ActivityTree } from \"./activity_tree\";\nimport { RuleActionType, SequencingRules } from \"./sequencing_rules\";\nimport { SequencingControls } from \"./sequencing_controls\";\nimport { RollupRules } from \"./rollup_rules\";\nimport { ADLNav } from \"../adl\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\n\n/**\n * Class representing SCORM 2004 sequencing\n */\nexport class Sequencing extends BaseCMI {\n  private _activityTree: ActivityTree;\n  private _sequencingRules: SequencingRules;\n  private _sequencingControls: SequencingControls;\n  private _rollupRules: RollupRules;\n  private _adlNav: ADLNav | null = null;\n\n  /**\n   * Constructor for Sequencing\n   */\n  constructor() {\n    super(\"sequencing\");\n    this._activityTree = new ActivityTree();\n    this._sequencingRules = new SequencingRules();\n    this._sequencingControls = new SequencingControls();\n    this._rollupRules = new RollupRules();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this._activityTree.initialize();\n    this._sequencingRules.initialize();\n    this._sequencingControls.initialize();\n    this._rollupRules.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._activityTree.reset();\n    this._sequencingRules.reset();\n    this._sequencingControls.reset();\n    this._rollupRules.reset();\n  }\n\n  /**\n   * Getter for activityTree\n   * @return {ActivityTree}\n   */\n  get activityTree(): ActivityTree {\n    return this._activityTree;\n  }\n\n  /**\n   * Setter for activityTree\n   * @param {ActivityTree} activityTree\n   */\n  set activityTree(activityTree: ActivityTree) {\n    if (!(activityTree instanceof ActivityTree)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".activityTree\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._activityTree = activityTree;\n  }\n\n  /**\n   * Getter for sequencingRules\n   * @return {SequencingRules}\n   */\n  get sequencingRules(): SequencingRules {\n    return this._sequencingRules;\n  }\n\n  /**\n   * Setter for sequencingRules\n   * @param {SequencingRules} sequencingRules\n   */\n  set sequencingRules(sequencingRules: SequencingRules) {\n    if (!(sequencingRules instanceof SequencingRules)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".sequencingRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._sequencingRules = sequencingRules;\n  }\n\n  /**\n   * Getter for sequencingControls\n   * @return {SequencingControls}\n   */\n  get sequencingControls(): SequencingControls {\n    return this._sequencingControls;\n  }\n\n  /**\n   * Setter for sequencingControls\n   * @param {SequencingControls} sequencingControls\n   */\n  set sequencingControls(sequencingControls: SequencingControls) {\n    if (!(sequencingControls instanceof SequencingControls)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".sequencingControls\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._sequencingControls = sequencingControls;\n  }\n\n  /**\n   * Getter for rollupRules\n   * @return {RollupRules}\n   */\n  get rollupRules(): RollupRules {\n    return this._rollupRules;\n  }\n\n  /**\n   * Setter for rollupRules\n   * @param {RollupRules} rollupRules\n   */\n  set rollupRules(rollupRules: RollupRules) {\n    if (!(rollupRules instanceof RollupRules)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".rollupRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._rollupRules = rollupRules;\n  }\n\n  /**\n   * Getter for adlNav\n   * @return {ADLNav | null}\n   */\n  get adlNav(): ADLNav | null {\n    return this._adlNav;\n  }\n\n  /**\n   * Setter for adlNav\n   * @param {ADLNav | null} adlNav\n   */\n  set adlNav(adlNav: ADLNav | null) {\n    this._adlNav = adlNav;\n  }\n\n  /**\n   * Process navigation request\n   * @param {string} request - The navigation request\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processNavigationRequest(request: string): boolean {\n    if (!this._adlNav) {\n      return false;\n    }\n\n    // Set the navigation request\n    this._adlNav.request = request;\n\n    // Get the current activity\n    const currentActivity = this._activityTree.currentActivity;\n    if (!currentActivity) {\n      return false;\n    }\n\n    // Evaluate pre-condition rules\n    const preConditionAction = this._sequencingRules.evaluatePreConditionRules(currentActivity);\n    if (preConditionAction) {\n      // Handle pre-condition action\n      switch (preConditionAction) {\n        case RuleActionType.SKIP:\n          // Skip this activity\n          return false;\n        case RuleActionType.DISABLED:\n          // Disable this activity\n          return false;\n        case RuleActionType.HIDE_FROM_CHOICE:\n          // Hide this activity from choice\n          return false;\n        case RuleActionType.STOP_FORWARD_TRAVERSAL:\n          // Stop forward traversal\n          return false;\n        default:\n          break;\n      }\n    }\n\n    // Process the navigation request based on the request type\n    switch (request) {\n      case \"continue\":\n        return this.processContinueRequest(currentActivity);\n      case \"previous\":\n        return this.processPreviousRequest(currentActivity);\n      case \"choice\":\n        // Choice navigation would require additional parameters\n        return false;\n      case \"exit\":\n        return this.processExitRequest(currentActivity);\n      case \"exitAll\":\n        return this.processExitAllRequest();\n      case \"abandon\":\n        return this.processAbandonRequest(currentActivity);\n      case \"abandonAll\":\n        return this.processAbandonAllRequest();\n      case \"suspendAll\":\n        return this.processSuspendAllRequest(currentActivity);\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Process continue request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processContinueRequest(currentActivity: Activity): boolean {\n    // Check if continue is allowed\n    if (!this._sequencingControls.isForwardNavigationAllowed()) {\n      return false;\n    }\n\n    // Get the next activity\n    const nextActivity = this._activityTree.getNextSibling(currentActivity);\n    if (!nextActivity) {\n      return false;\n    }\n\n    // Evaluate exit condition rules\n    const exitConditionAction = this._sequencingRules.evaluateExitConditionRules(currentActivity);\n    if (exitConditionAction) {\n      // Handle exit condition action\n      switch (exitConditionAction) {\n        case RuleActionType.EXIT_PARENT: {\n          // Exit to parent\n          const parent = currentActivity.parent;\n          if (parent) {\n            this._activityTree.currentActivity = parent;\n            return true;\n          }\n          return false;\n        }\n        case RuleActionType.EXIT_ALL:\n          // Exit all\n          this._activityTree.currentActivity = null;\n          return true;\n        default:\n          break;\n      }\n    }\n\n    // Set the next activity as current\n    this._activityTree.currentActivity = nextActivity;\n\n    // Evaluate post-condition rules\n    const postConditionAction = this._sequencingRules.evaluatePostConditionRules(nextActivity);\n    if (postConditionAction) {\n      // Handle post-condition action\n      switch (postConditionAction) {\n        case RuleActionType.RETRY:\n          // Retry this activity\n          nextActivity.incrementAttemptCount();\n          return true;\n        case RuleActionType.RETRY_ALL:\n          // Retry all activities\n          this._activityTree.getAllActivities().forEach((activity) => {\n            activity.incrementAttemptCount();\n          });\n          return true;\n        case RuleActionType.CONTINUE:\n          // Continue to next activity\n          return this.processContinueRequest(nextActivity);\n        case RuleActionType.PREVIOUS:\n          // Go to previous activity\n          return this.processPreviousRequest(nextActivity);\n        case RuleActionType.EXIT:\n          // Exit this activity\n          this._activityTree.currentActivity = currentActivity;\n          return true;\n        default:\n          break;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Process previous request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processPreviousRequest(currentActivity: Activity): boolean {\n    // Check if backward navigation is allowed\n    if (!this._sequencingControls.isBackwardNavigationAllowed()) {\n      return false;\n    }\n\n    // Get the previous activity\n    const previousActivity = this._activityTree.getPreviousSibling(currentActivity);\n    if (!previousActivity) {\n      return false;\n    }\n\n    // Evaluate exit condition rules\n    const exitConditionAction = this._sequencingRules.evaluateExitConditionRules(currentActivity);\n    if (exitConditionAction) {\n      // Handle exit condition action\n      switch (exitConditionAction) {\n        case RuleActionType.EXIT_PARENT: {\n          // Exit to parent\n          const parent = currentActivity.parent;\n          if (parent) {\n            this._activityTree.currentActivity = parent;\n            return true;\n          }\n          return false;\n        }\n        case RuleActionType.EXIT_ALL:\n          // Exit all\n          this._activityTree.currentActivity = null;\n          return true;\n        default:\n          break;\n      }\n    }\n\n    // Set the previous activity as current\n    this._activityTree.currentActivity = previousActivity;\n\n    // Evaluate post-condition rules\n    const postConditionAction = this._sequencingRules.evaluatePostConditionRules(previousActivity);\n    if (postConditionAction) {\n      // Handle post-condition action\n      switch (postConditionAction) {\n        case RuleActionType.RETRY:\n          // Retry this activity\n          previousActivity.incrementAttemptCount();\n          return true;\n        case RuleActionType.RETRY_ALL:\n          // Retry all activities\n          this._activityTree.getAllActivities().forEach((activity) => {\n            activity.incrementAttemptCount();\n          });\n          return true;\n        case RuleActionType.CONTINUE:\n          // Continue to next activity\n          return this.processContinueRequest(previousActivity);\n        case RuleActionType.PREVIOUS:\n          // Go to previous activity\n          return this.processPreviousRequest(previousActivity);\n        case RuleActionType.EXIT:\n          // Exit this activity\n          this._activityTree.currentActivity = currentActivity;\n          return true;\n        default:\n          break;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Process exit request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processExitRequest(currentActivity: Activity): boolean {\n    // Check if exit is allowed\n    if (!this._sequencingControls.choiceExit) {\n      return false;\n    }\n\n    // Get the parent activity\n    const parent = currentActivity.parent;\n    if (!parent) {\n      return false;\n    }\n\n    // Set the parent activity as current\n    this._activityTree.currentActivity = parent;\n\n    return true;\n  }\n\n  /**\n   * Process exit all request\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processExitAllRequest(): boolean {\n    // Check if exit is allowed\n    if (!this._sequencingControls.choiceExit) {\n      return false;\n    }\n\n    // Set no activity as current\n    this._activityTree.currentActivity = null;\n\n    return true;\n  }\n\n  /**\n   * Process abandon request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processAbandonRequest(currentActivity: Activity): boolean {\n    // Get the parent activity\n    const parent = currentActivity.parent;\n    if (!parent) {\n      return false;\n    }\n\n    // Set the parent activity as current without processing exit rules\n    this._activityTree.currentActivity = parent;\n\n    return true;\n  }\n\n  /**\n   * Process abandon all request\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processAbandonAllRequest(): boolean {\n    // Set no activity as current without processing exit rules\n    this._activityTree.currentActivity = null;\n\n    return true;\n  }\n\n  /**\n   * Process suspend all request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processSuspendAllRequest(currentActivity: Activity): boolean {\n    // Set the current activity as suspended\n    this._activityTree.suspendedActivity = currentActivity;\n    this._activityTree.currentActivity = null;\n\n    return true;\n  }\n\n  /**\n   * Process rollup for the entire activity tree\n   */\n  processRollup(): void {\n    // Get the root activity\n    const root = this._activityTree.root;\n    if (!root) {\n      return;\n    }\n\n    // Process rollup from the bottom up\n    this._processRollupRecursive(root);\n  }\n\n  /**\n   * Process rollup recursively\n   * @param {Activity} activity - The activity to process rollup for\n   * @private\n   */\n  private _processRollupRecursive(activity: Activity): void {\n    // Process rollup for children first\n    for (const child of activity.children) {\n      this._processRollupRecursive(child);\n    }\n\n    // Process rollup for this activity\n    this._rollupRules.processRollup(activity);\n  }\n\n  /**\n   * toJSON for Sequencing\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      activityTree: this._activityTree,\n      sequencingRules: this._sequencingRules,\n      sequencingControls: this._sequencingControls,\n      rollupRules: this._rollupRules,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import BaseAPI from \"./BaseAPI\";\nimport { CMI } from \"./cmi/scorm2004/cmi\";\nimport * as Utilities from \"./utilities\";\nimport { StringKeyMap, stringMatches } from \"./utilities\";\nimport { global_constants, scorm2004_constants } from \"./constants/api_constants\";\nimport { scorm2004_errors } from \"./constants/error_codes\";\nimport { CMIObjectivesObject } from \"./cmi/scorm2004/objectives\";\nimport { ADL, ADLDataObject } from \"./cmi/scorm2004/adl\";\nimport { CommitObject, ResultObject, ScoreObject, Settings } from \"./types/api_types\";\nimport {\n  ActivitySettings,\n  RollupRuleSettings,\n  RollupRulesSettings,\n  SequencingControlsSettings,\n  SequencingRuleSettings,\n  SequencingRulesSettings,\n  SequencingSettings,\n} from \"./types/sequencing_types\";\nimport { RuleCondition, SequencingRule } from \"./cmi/scorm2004/sequencing/sequencing_rules\";\nimport { RollupCondition, RollupRule } from \"./cmi/scorm2004/sequencing/rollup_rules\";\nimport { scorm2004_regex } from \"./constants/regex\"; // Import functions from extracted modules\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport {\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n} from \"./cmi/scorm2004/interactions\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { CorrectResponses, ResponseType } from \"./constants/response_constants\";\nimport { CMICommentsObject } from \"./cmi/scorm2004/comments\";\nimport ValidLanguages from \"./constants/language_constants\";\nimport { CompletionStatus, SuccessStatus } from \"./constants/enums\";\nimport { Sequencing } from \"./cmi/scorm2004/sequencing/sequencing\";\nimport { Activity } from \"./cmi/scorm2004/sequencing/activity\";\n\n/**\n * API class for SCORM 2004\n */\nclass Scorm2004API extends BaseAPI {\n  private _version: string = \"1.0\";\n  private _globalObjectives: CMIObjectivesObject[] = [];\n  private _sequencing: Sequencing;\n  private _extractedScoItemIds: string[] = [];\n\n  /**\n   * Constructor for SCORM 2004 API\n   * @param {Settings} settings\n   */\n  constructor(settings?: Settings) {\n    if (settings) {\n      if (settings.mastery_override === undefined) {\n        settings.mastery_override = false;\n      }\n    }\n\n    super(scorm2004_errors, settings);\n\n    this.cmi = new CMI();\n    this.adl = new ADL();\n    this._sequencing = new Sequencing();\n\n    // Connect the sequencing object to the ADL's sequencing property\n    // The Sequencing object is used for both configuration and runtime navigation processing\n    // It needs to be attached to the ADL object for runtime navigation requests (adl.nav.request)\n    this.adl.sequencing = this._sequencing;\n\n    // Configure sequencing if settings are provided\n    if (settings?.sequencing) {\n      this.configureSequencing(settings.sequencing);\n    }\n\n    // Rename functions to match 2004 Spec and expose to modules\n    this.Initialize = this.lmsInitialize;\n    this.Terminate = this.lmsFinish;\n    this.GetValue = this.lmsGetValue;\n    this.SetValue = this.lmsSetValue;\n    this.Commit = this.lmsCommit;\n    this.GetLastError = this.lmsGetLastError;\n    this.GetErrorString = this.lmsGetErrorString;\n    this.GetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  public cmi: CMI;\n  public adl: ADL;\n\n  public Initialize: () => string;\n  public Terminate: () => string;\n  public GetValue: (CMIElement: string) => string;\n  public SetValue: (CMIElement: string, value: any) => string;\n  public Commit: () => string;\n  public GetLastError: () => string;\n  public GetErrorString: (CMIErrorCode: string | number) => string;\n  public GetDiagnostic: (CMIErrorCode: string | number) => string;\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset(settings?: Settings) {\n    this.commonReset(settings);\n\n    this.cmi?.reset();\n    this.adl?.reset();\n    this._sequencing?.reset();\n  }\n\n  /**\n   * Getter for _version\n   * @return {string}\n   */\n  get version(): string {\n    return this._version;\n  }\n\n  /**\n   * Getter for _globalObjectives\n   */\n  get globalObjectives(): CMIObjectivesObject[] {\n    return this._globalObjectives;\n  }\n\n  /**\n   * Initialize function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize(): string {\n    this.cmi.initialize();\n    return this.initialize(\n      \"Initialize\",\n      \"LMS was already initialized!\",\n      \"LMS is already finished!\",\n    );\n  }\n\n  /**\n   * Terminate function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish(): string {\n    (async () => {\n      await this.internalFinish();\n    })();\n    return global_constants.SCORM_TRUE;\n  }\n\n  async internalFinish(): Promise<string> {\n    const result = await this.terminate(\"Terminate\", true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      if (this.adl.nav.request !== \"_none_\") {\n        const navActions: { [key: string]: string } = {\n          continue: \"SequenceNext\",\n          previous: \"SequencePrevious\",\n          choice: \"SequenceChoice\",\n          jump: \"SequenceJump\",\n          exit: \"SequenceExit\",\n          exitAll: \"SequenceExitAll\",\n          abandon: \"SequenceAbandon\",\n          abandonAll: \"SequenceAbandonAll\",\n        };\n\n        let request = this.adl.nav.request;\n        const choiceJumpRegex = new RegExp(scorm2004_regex.NAVEvent);\n        const matches = request.match(choiceJumpRegex);\n        let target = \"\";\n        if (matches) {\n          if (matches.groups?.choice_target) {\n            target = matches.groups?.choice_target;\n            request = \"choice\";\n          } else if (matches.groups?.jump_target) {\n            target = matches.groups?.jump_target;\n            request = \"jump\";\n          }\n        }\n        const action = navActions[request];\n        if (action) {\n          this.processListeners(action, \"adl.nav.request\", target);\n        }\n      } else if (this.settings.autoProgress) {\n        this.processListeners(\"SequenceNext\", undefined, \"next\");\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * GetValue function from SCORM 2004 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement: string): string {\n    const adlNavRequestRegex =\n      \"^adl\\\\.nav\\\\.request_valid\\\\.(choice|jump)\\\\.{target=\\\\S{0,}([a-zA-Z0-9-_]+)}$\";\n    if (stringMatches(CMIElement, adlNavRequestRegex)) {\n      const matches = CMIElement.match(adlNavRequestRegex);\n      if (matches) {\n        const request = matches[1];\n        const target = matches[2].replace(/{target=/g, \"\").replace(/}/g, \"\");\n        if (request === \"choice\" || request === \"jump\") {\n          if (this.settings.scoItemIdValidator) {\n            return String(this.settings.scoItemIdValidator(target));\n          }\n          // If we have extracted IDs from sequencing, use those exclusively\n          if (this._extractedScoItemIds.length > 0) {\n            return String(this._extractedScoItemIds.includes(target));\n          }\n          // Otherwise use the scoItemIds from settings\n          return String(this.settings?.scoItemIds?.includes(target));\n        }\n      }\n    }\n    return this.getValue(\"GetValue\", true, CMIElement);\n  }\n\n  /**\n   * SetValue function from SCORM 2004 Spec\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement: string, value: any): string {\n    // Proceed with regular setting for non-objective elements or fallback behavior\n    return this.setValue(\"SetValue\", \"Commit\", true, CMIElement, value);\n  }\n\n  /**\n   * Commit function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit(): string {\n    if (this.settings.asyncCommit) {\n      this.scheduleCommit(500, \"Commit\");\n    } else {\n      (async () => {\n        await this.commit(\"Commit\", false);\n      })();\n    }\n    return global_constants.SCORM_TRUE;\n  }\n\n  /**\n   * GetLastError function from SCORM 2004 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError(): string {\n    return this.getLastError(\"GetLastError\");\n  }\n\n  /**\n   * GetErrorString function from SCORM 2004 Spec\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode: string | number): string {\n    return this.getErrorString(\"GetErrorString\", CMIErrorCode);\n  }\n\n  /**\n   * GetDiagnostic function from SCORM 2004 Spec\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode: string | number): string {\n    return this.getDiagnostic(\"GetDiagnostic\", CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object - delegates to CMIValueHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  override setCMIValue(CMIElement: string, value: any): string {\n    // Check if we're updating a global or local objective\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      const parts = CMIElement.split(\".\");\n      const index = Number(parts[2]);\n      const element_base = `cmi.objectives.${index}`;\n\n      let objective_id;\n      const setting_id = stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\\\\.id\");\n\n      if (setting_id) {\n        // If we're setting the objective ID, capture it directly\n        objective_id = value;\n      } else {\n        // Find existing objective ID if available\n        const objective = this.cmi.objectives.findObjectiveByIndex(index);\n        objective_id = objective ? objective.id : undefined;\n      }\n\n      // Check if the objective ID matches a global objective\n      const is_global = objective_id && this.settings.globalObjectiveIds?.includes(objective_id);\n\n      if (is_global) {\n        // Locate or create an entry in _globalObjectives for the global objective\n        let global_index = this._globalObjectives.findIndex((obj) => obj.id === objective_id);\n\n        if (global_index === -1) {\n          global_index = this._globalObjectives.length;\n          const newGlobalObjective = new CMIObjectivesObject();\n          newGlobalObjective.id = objective_id;\n          this._globalObjectives.push(newGlobalObjective);\n        }\n\n        // Update the global objective\n        const global_element = CMIElement.replace(\n          element_base,\n          `_globalObjectives.${global_index}`,\n        );\n        this._commonSetCMIValue(\"SetGlobalObjectiveValue\", true, global_element, value);\n      }\n    }\n    return this._commonSetCMIValue(\"SetValue\", true, CMIElement, value);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array - delegates to CMIElementHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI|null}\n   */\n  getChildElement(CMIElement: string, value: any, foundFirstIndex: boolean): BaseCMI | null {\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      return new CMIObjectivesObject();\n    }\n\n    if (foundFirstIndex) {\n      if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+\")) {\n        return this.createCorrectResponsesObject(CMIElement, value);\n      } else if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+\")) {\n        return new CMIInteractionsObjectivesObject();\n      }\n    } else if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\")) {\n      return new CMIInteractionsObject();\n    }\n\n    if (stringMatches(CMIElement, \"cmi\\\\.comments_from_learner\\\\.\\\\d+\")) {\n      return new CMICommentsObject();\n    } else if (stringMatches(CMIElement, \"cmi\\\\.comments_from_lms\\\\.\\\\d+\")) {\n      return new CMICommentsObject(true);\n    }\n\n    if (stringMatches(CMIElement, \"adl\\\\.data\\\\.\\\\d+\")) {\n      return new ADLDataObject();\n    }\n\n    return null;\n  }\n\n  /**\n   * Creates a correct responses object for an interaction - delegates to CMIElementHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {BaseCMI|null}\n   */\n  private createCorrectResponsesObject(CMIElement: string, value: any): BaseCMI | null {\n    const parts = CMIElement.split(\".\");\n    const index = Number(parts[2]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    if (this.isInitialized()) {\n      if (typeof interaction === \"undefined\" || !interaction.type) {\n        this.throwSCORMError(CMIElement, scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED, CMIElement);\n        return null;\n      } else {\n        this.checkDuplicateChoiceResponse(CMIElement, interaction, value);\n        const response_type = CorrectResponses[interaction.type];\n        if (response_type) {\n          this.checkValidResponseType(CMIElement, response_type, value, interaction.type);\n        } else {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.GENERAL_SET_FAILURE,\n            `Incorrect Response Type: ${interaction.type}`,\n          );\n          return null;\n        }\n      }\n    }\n\n    if (this.lastErrorCode === \"0\") {\n      return new CMIInteractionsCorrectResponsesObject(interaction);\n    }\n\n    return null;\n  }\n\n  /**\n   * Checks for valid response types - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {ResponseType} response_type\n   * @param {any} value\n   * @param {string} interaction_type\n   */\n  checkValidResponseType(\n    CMIElement: string,\n    response_type: ResponseType,\n    value: any,\n    interaction_type: string,\n  ) {\n    let nodes = [];\n    if (response_type?.delimiter) {\n      nodes = String(value).split(response_type.delimiter);\n    } else {\n      nodes[0] = value;\n    }\n\n    if (nodes.length > 0 && nodes.length <= response_type.max) {\n      this.checkCorrectResponseValue(CMIElement, interaction_type, nodes, value);\n    } else if (nodes.length > response_type.max) {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.GENERAL_SET_FAILURE,\n        `Data Model Element Pattern Too Long: ${value}`,\n      );\n    }\n  }\n\n  /**\n   * Checks for duplicate 'choice' responses - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {CMIInteractionsObject} interaction\n   * @param {any} value\n   */\n  checkDuplicateChoiceResponse(CMIElement: string, interaction: CMIInteractionsObject, value: any) {\n    const interaction_count = interaction.correct_responses._count;\n    if (interaction.type === \"choice\") {\n      for (let i = 0; i < interaction_count && this.lastErrorCode === \"0\"; i++) {\n        const response = interaction.correct_responses.childArray[i];\n        if (response.pattern === value) {\n          this.throwSCORMError(CMIElement, scorm2004_errors.GENERAL_SET_FAILURE, `${value}`);\n        }\n      }\n    }\n  }\n\n  /**\n   * Validate correct response - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {*} value\n   */\n  validateCorrectResponse(CMIElement: string, value: any) {\n    const parts = CMIElement.split(\".\");\n    const index = Number(parts[2]);\n    const pattern_index = Number(parts[4]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    const interaction_count = interaction.correct_responses._count;\n    this.checkDuplicateChoiceResponse(CMIElement, interaction, value);\n\n    const response_type = CorrectResponses[interaction.type];\n    if (typeof response_type.limit === \"undefined\" || interaction_count <= response_type.limit) {\n      this.checkValidResponseType(CMIElement, response_type, value, interaction.type);\n\n      if (\n        (this.lastErrorCode === \"0\" &&\n          (!response_type.duplicate ||\n            !this.checkDuplicatedPattern(interaction.correct_responses, pattern_index, value))) ||\n        (this.lastErrorCode === \"0\" && value === \"\")\n      ) {\n        // do nothing, we want the inverse\n      } else {\n        if (this.lastErrorCode === \"0\") {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.GENERAL_SET_FAILURE,\n            `Data Model Element Pattern Already Exists: ${CMIElement} - ${value}`,\n          );\n        }\n      }\n    } else {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.GENERAL_SET_FAILURE,\n        `Data Model Element Collection Limit Reached: ${CMIElement} - ${value}`,\n      );\n    }\n  }\n\n  /**\n   * Gets a value from the CMI Object - delegates to CMIValueHandlerModule\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  override getCMIValue(CMIElement: string): any {\n    return this._commonGetCMIValue(\"GetValue\", true, CMIElement);\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {(string|number)} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  override getLmsErrorMessageDetails(errorNumber: string | number, detail: boolean): string {\n    let basicMessage = \"\";\n    let detailMessage = \"\";\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (scorm2004_constants.error_descriptions[errorNumber]) {\n      basicMessage = scorm2004_constants.error_descriptions[errorNumber].basicMessage;\n      detailMessage = scorm2004_constants.error_descriptions[errorNumber].detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Check to see if a correct_response value has been duplicated - delegates to ValidationModule\n   * @param {CMIArray} correct_response\n   * @param {number} current_index\n   * @param {*} value\n   * @return {boolean}\n   */\n  checkDuplicatedPattern(correct_response: CMIArray, current_index: number, value: any): boolean {\n    let found = false;\n    const count = correct_response._count;\n    for (let i = 0; i < count && !found; i++) {\n      if (i !== current_index && correct_response.childArray[i] === value) {\n        found = true;\n      }\n    }\n    return found;\n  }\n\n  /**\n   * Checks for a valid correct_response value - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {string} interaction_type\n   * @param {Array} nodes\n   * @param {*} value\n   */\n  checkCorrectResponseValue(\n    CMIElement: string,\n    interaction_type: string,\n    nodes: Array<any>,\n    value: any,\n  ) {\n    const response = CorrectResponses[interaction_type];\n    if (!response) {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.TYPE_MISMATCH,\n        `Incorrect Response Type: ${interaction_type}`,\n      );\n      return;\n    }\n    const formatRegex = new RegExp(response.format);\n    for (let i = 0; i < nodes.length && this.lastErrorCode === \"0\"; i++) {\n      if (interaction_type.match(\"^(fill-in|long-fill-in|matching|performance|sequencing)$\")) {\n        nodes[i] = this.removeCorrectResponsePrefixes(CMIElement, nodes[i]);\n      }\n\n      if (response?.delimiter2) {\n        const values = nodes[i].split(response.delimiter2);\n        if (values.length === 2) {\n          const matches = values[0].match(formatRegex);\n          if (!matches) {\n            this.throwSCORMError(\n              CMIElement,\n              scorm2004_errors.TYPE_MISMATCH,\n              `${interaction_type}: ${value}`,\n            );\n          } else {\n            if (!response.format2 || !values[1].match(new RegExp(response.format2))) {\n              this.throwSCORMError(\n                CMIElement,\n                scorm2004_errors.TYPE_MISMATCH,\n                `${interaction_type}: ${value}`,\n              );\n            }\n          }\n        } else {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.TYPE_MISMATCH,\n            `${interaction_type}: ${value}`,\n          );\n        }\n      } else {\n        const matches = nodes[i].match(formatRegex);\n        if ((!matches && value !== \"\") || (!matches && interaction_type === \"true-false\")) {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.TYPE_MISMATCH,\n            `${interaction_type}: ${value}`,\n          );\n        } else {\n          if (interaction_type === \"numeric\" && nodes.length > 1) {\n            if (Number(nodes[0]) > Number(nodes[1])) {\n              this.throwSCORMError(\n                CMIElement,\n                scorm2004_errors.TYPE_MISMATCH,\n                `${interaction_type}: ${value}`,\n              );\n            }\n          } else {\n            if (nodes[i] !== \"\" && response.unique) {\n              for (let j = 0; j < i && this.lastErrorCode === \"0\"; j++) {\n                if (nodes[i] === nodes[j]) {\n                  this.throwSCORMError(\n                    CMIElement,\n                    scorm2004_errors.TYPE_MISMATCH,\n                    `${interaction_type}: ${value}`,\n                  );\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove prefixes from correct_response - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {string} node\n   * @return {*}\n   */\n  removeCorrectResponsePrefixes(CMIElement: string, node: string): any {\n    let seenOrder = false;\n    let seenCase = false;\n    let seenLang = false;\n\n    const prefixRegex = new RegExp(\"^({(lang|case_matters|order_matters)=([^}]+)})\");\n    let matches = node.match(prefixRegex);\n    let langMatches = null;\n    while (matches) {\n      switch (matches[2]) {\n        case \"lang\":\n          langMatches = node.match(scorm2004_regex.CMILangcr);\n          if (langMatches) {\n            const lang = langMatches[3];\n            if (lang !== undefined && lang.length > 0) {\n              if (!ValidLanguages.includes(lang.toLowerCase())) {\n                this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n              }\n            }\n          }\n          seenLang = true;\n          break;\n        case \"case_matters\":\n          if (!seenLang && !seenOrder && !seenCase) {\n            if (matches[3] !== \"true\" && matches[3] !== \"false\") {\n              this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n            }\n          }\n\n          seenCase = true;\n          break;\n        case \"order_matters\":\n          if (!seenCase && !seenLang && !seenOrder) {\n            if (matches[3] !== \"true\" && matches[3] !== \"false\") {\n              this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n            }\n          }\n\n          seenOrder = true;\n          break;\n      }\n      node = node.substring(matches[1].length);\n      matches = node.match(prefixRegex);\n    }\n\n    return node;\n  }\n\n  /**\n   * Replace the whole API with another\n   * @param {Scorm2004API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI: Scorm2004API) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.adl = newAPI.adl;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit - delegates to DataSerializationModule\n   *\n   * @param {boolean} terminateCommit\n   * @return {object|Array}\n   */\n  renderCommitCMI(terminateCommit: boolean): StringKeyMap | Array<any> {\n    const cmiExport: StringKeyMap = this.renderCMIToJSONObject();\n\n    if (terminateCommit) {\n      (cmiExport.cmi as any).total_time = (this.cmi as any).getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened: StringKeyMap = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case \"flattened\":\n        return Utilities.flatten(cmiExport);\n      case \"params\":\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case \"json\":\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit - delegates to DataSerializationModule\n   * @param {boolean} terminateCommit\n   * @return {CommitObject}\n   */\n  renderCommitObject(terminateCommit: boolean): CommitObject {\n    const cmiExport = this.renderCommitCMI(terminateCommit);\n    const totalTimeDuration = this.cmi.getCurrentTotalTime();\n    const totalTimeSeconds = Utilities.getDurationAsSeconds(\n      totalTimeDuration,\n      scorm2004_regex.CMITimespan,\n    );\n\n    let completionStatus = CompletionStatus.UNKNOWN;\n    let successStatus = SuccessStatus.UNKNOWN;\n    if (this.cmi.completion_status) {\n      if (this.cmi.completion_status === \"completed\") {\n        completionStatus = CompletionStatus.COMPLETED;\n      } else if (this.cmi.completion_status === \"incomplete\") {\n        completionStatus = CompletionStatus.INCOMPLETE;\n      }\n    }\n    if (this.cmi.success_status) {\n      if (this.cmi.success_status === \"passed\") {\n        successStatus = SuccessStatus.PASSED;\n      } else if (this.cmi.success_status === \"failed\") {\n        successStatus = SuccessStatus.FAILED;\n      }\n    }\n\n    const score = this.cmi.score;\n    const scoreObject: ScoreObject = {};\n    if (score) {\n      if (!Number.isNaN(Number.parseFloat(score.raw))) {\n        scoreObject.raw = Number.parseFloat(score.raw);\n      }\n      if (!Number.isNaN(Number.parseFloat(score.min))) {\n        scoreObject.min = Number.parseFloat(score.min);\n      }\n      if (!Number.isNaN(Number.parseFloat(score.max))) {\n        scoreObject.max = Number.parseFloat(score.max);\n      }\n      if (!Number.isNaN(Number.parseFloat(score.scaled))) {\n        scoreObject.scaled = Number.parseFloat(score.scaled);\n      }\n    }\n\n    const commitObject: CommitObject = {\n      completionStatus: completionStatus,\n      successStatus: successStatus,\n      totalTimeSeconds: totalTimeSeconds,\n      runtimeData: cmiExport as StringKeyMap,\n    };\n    if (scoreObject) {\n      commitObject.score = scoreObject;\n    }\n    return commitObject;\n  }\n\n  /**\n   * Attempts to store the data to the LMS - delegates to DataSerializationModule\n   *\n   * @param {boolean} terminateCommit\n   * @return {ResultObject}\n   */\n  async storeData(terminateCommit: boolean): Promise<ResultObject> {\n    if (terminateCommit) {\n      if (this.cmi.mode === \"normal\") {\n        if (this.cmi.credit === \"credit\") {\n          if (this.cmi.completion_threshold && this.cmi.progress_measure) {\n            if (this.cmi.progress_measure >= this.cmi.completion_threshold) {\n              this.cmi.completion_status = \"completed\";\n            } else {\n              this.cmi.completion_status = \"incomplete\";\n            }\n          }\n          if (this.cmi.scaled_passing_score && this.cmi.score.scaled) {\n            if (this.cmi.score.scaled >= this.cmi.scaled_passing_score) {\n              this.cmi.success_status = \"passed\";\n            } else {\n              this.cmi.success_status = \"failed\";\n            }\n          }\n        }\n      }\n    }\n\n    let navRequest = false;\n    if (\n      this.adl.nav.request !==\n        ((this.startingData?.adl as StringKeyMap)?.nav as StringKeyMap)?.request &&\n      this.adl.nav.request !== \"_none_\"\n    ) {\n      navRequest = true;\n    }\n\n    const commitObject = this.getCommitObject(terminateCommit);\n    if (typeof this.settings.lmsCommitUrl === \"string\") {\n      const result = await this.processHttpRequest(\n        this.settings.lmsCommitUrl,\n        {\n          commitObject: commitObject,\n        },\n        terminateCommit,\n      );\n\n      // Check if this is a sequencing call, and then call the necessary JS\n      if (\n        navRequest &&\n        result.navRequest !== undefined &&\n        result.navRequest !== \"\" &&\n        typeof result.navRequest === \"string\"\n      ) {\n        Function(`\"use strict\";(() => { ${result.navRequest} })()`)();\n      } else if (result?.navRequest && !navRequest) {\n        if (\n          typeof result.navRequest === \"object\" &&\n          Object.hasOwnProperty.call(result.navRequest, \"name\")\n        ) {\n          this.processListeners(result.navRequest.name as string, result.navRequest.data as string);\n        }\n      }\n\n      return result;\n    }\n\n    return {\n      result: \"true\",\n      errorCode: 0,\n    };\n  }\n\n  /**\n   * Configure sequencing based on provided settings\n   * @param {SequencingSettings} sequencingSettings - The sequencing settings\n   */\n  private configureSequencing(sequencingSettings: SequencingSettings): void {\n    // Configure activity tree\n    if (sequencingSettings.activityTree) {\n      this.configureActivityTree(sequencingSettings.activityTree);\n    }\n\n    // Configure sequencing rules\n    if (sequencingSettings.sequencingRules) {\n      this.configureSequencingRules(sequencingSettings.sequencingRules);\n    }\n\n    // Configure sequencing controls\n    if (sequencingSettings.sequencingControls) {\n      this.configureSequencingControls(sequencingSettings.sequencingControls);\n    }\n\n    // Configure rollup rules\n    if (sequencingSettings.rollupRules) {\n      this.configureRollupRules(sequencingSettings.rollupRules);\n    }\n  }\n\n  /**\n   * Configure activity tree based on provided settings\n   * @param {ActivitySettings} activityTreeSettings - The activity tree settings\n   */\n  private configureActivityTree(activityTreeSettings: ActivitySettings): void {\n    // Create root activity\n    const rootActivity = this.createActivity(activityTreeSettings);\n\n    // Create activity tree\n    const activityTree = this._sequencing.activityTree;\n    activityTree.root = rootActivity;\n\n    // Extract activity IDs for use as scoItemIds\n    this._extractedScoItemIds = this.extractActivityIds(rootActivity);\n  }\n\n  /**\n   * Extract all activity IDs from an activity and its children\n   * @param {Activity} activity - The activity to extract IDs from\n   * @return {string[]} - Array of activity IDs\n   */\n  private extractActivityIds(activity: Activity): string[] {\n    const ids = [activity.id];\n\n    // Recursively extract IDs from children\n    for (const child of activity.children) {\n      ids.push(...this.extractActivityIds(child));\n    }\n\n    return ids;\n  }\n\n  /**\n   * Create an activity from settings\n   * @param {ActivitySettings} activitySettings - The activity settings\n   * @return {Activity} - The created activity\n   */\n  private createActivity(activitySettings: ActivitySettings): Activity {\n    // Create activity\n    const activity = new Activity(activitySettings.id, activitySettings.title);\n\n    // Set activity properties\n    if (activitySettings.isVisible !== undefined) {\n      activity.isVisible = activitySettings.isVisible;\n    }\n    if (activitySettings.isActive !== undefined) {\n      activity.isActive = activitySettings.isActive;\n    }\n    if (activitySettings.isSuspended !== undefined) {\n      activity.isSuspended = activitySettings.isSuspended;\n    }\n    if (activitySettings.isCompleted !== undefined) {\n      activity.isCompleted = activitySettings.isCompleted;\n    }\n\n    // Create child activities\n    if (activitySettings.children) {\n      for (const childSettings of activitySettings.children) {\n        const childActivity = this.createActivity(childSettings);\n        activity.addChild(childActivity);\n      }\n    }\n\n    return activity;\n  }\n\n  /**\n   * Configure sequencing rules based on provided settings\n   * @param {SequencingRulesSettings} sequencingRulesSettings - The sequencing rules settings\n   */\n  private configureSequencingRules(sequencingRulesSettings: SequencingRulesSettings): void {\n    const sequencingRules = this._sequencing.sequencingRules;\n\n    // Configure pre-condition rules\n    if (sequencingRulesSettings.preConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.preConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addPreConditionRule(rule);\n      }\n    }\n\n    // Configure exit condition rules\n    if (sequencingRulesSettings.exitConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.exitConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addExitConditionRule(rule);\n      }\n    }\n\n    // Configure post-condition rules\n    if (sequencingRulesSettings.postConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.postConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addPostConditionRule(rule);\n      }\n    }\n  }\n\n  /**\n   * Create a sequencing rule from settings\n   * @param {SequencingRuleSettings} ruleSettings - The sequencing rule settings\n   * @return {SequencingRule} - The created sequencing rule\n   */\n  private createSequencingRule(ruleSettings: SequencingRuleSettings): SequencingRule {\n    // Create rule\n    const rule = new SequencingRule(ruleSettings.action, ruleSettings.conditionCombination);\n\n    // Add conditions\n    for (const conditionSettings of ruleSettings.conditions) {\n      const condition = new RuleCondition(\n        conditionSettings.condition,\n        conditionSettings.operator,\n        new Map(Object.entries(conditionSettings.parameters || {})),\n      );\n      rule.addCondition(condition);\n    }\n\n    return rule;\n  }\n\n  /**\n   * Configure sequencing controls based on provided settings\n   * @param {SequencingControlsSettings} sequencingControlsSettings - The sequencing controls settings\n   */\n  private configureSequencingControls(\n    sequencingControlsSettings: SequencingControlsSettings,\n  ): void {\n    const sequencingControls = this._sequencing.sequencingControls;\n\n    // Set sequencing control properties\n    if (sequencingControlsSettings.enabled !== undefined) {\n      sequencingControls.enabled = sequencingControlsSettings.enabled;\n    }\n    if (sequencingControlsSettings.choiceExit !== undefined) {\n      sequencingControls.choiceExit = sequencingControlsSettings.choiceExit;\n    }\n    if (sequencingControlsSettings.flow !== undefined) {\n      sequencingControls.flow = sequencingControlsSettings.flow;\n    }\n    if (sequencingControlsSettings.forwardOnly !== undefined) {\n      sequencingControls.forwardOnly = sequencingControlsSettings.forwardOnly;\n    }\n    if (sequencingControlsSettings.useCurrentAttemptObjectiveInfo !== undefined) {\n      sequencingControls.useCurrentAttemptObjectiveInfo =\n        sequencingControlsSettings.useCurrentAttemptObjectiveInfo;\n    }\n    if (sequencingControlsSettings.useCurrentAttemptProgressInfo !== undefined) {\n      sequencingControls.useCurrentAttemptProgressInfo =\n        sequencingControlsSettings.useCurrentAttemptProgressInfo;\n    }\n    if (sequencingControlsSettings.preventActivation !== undefined) {\n      sequencingControls.preventActivation = sequencingControlsSettings.preventActivation;\n    }\n    if (sequencingControlsSettings.constrainChoice !== undefined) {\n      sequencingControls.constrainChoice = sequencingControlsSettings.constrainChoice;\n    }\n    if (sequencingControlsSettings.rollupObjectiveSatisfied !== undefined) {\n      sequencingControls.rollupObjectiveSatisfied =\n        sequencingControlsSettings.rollupObjectiveSatisfied;\n    }\n    if (sequencingControlsSettings.rollupProgressCompletion !== undefined) {\n      sequencingControls.rollupProgressCompletion =\n        sequencingControlsSettings.rollupProgressCompletion;\n    }\n    if (sequencingControlsSettings.objectiveMeasureWeight !== undefined) {\n      sequencingControls.objectiveMeasureWeight = sequencingControlsSettings.objectiveMeasureWeight;\n    }\n  }\n\n  /**\n   * Configure rollup rules based on provided settings\n   * @param {RollupRulesSettings} rollupRulesSettings - The rollup rules settings\n   */\n  private configureRollupRules(rollupRulesSettings: RollupRulesSettings): void {\n    const rollupRules = this._sequencing.rollupRules;\n\n    // Configure rollup rules\n    if (rollupRulesSettings.rules) {\n      for (const ruleSettings of rollupRulesSettings.rules) {\n        const rule = this.createRollupRule(ruleSettings);\n        rollupRules.addRule(rule);\n      }\n    }\n  }\n\n  /**\n   * Create a rollup rule from settings\n   * @param {RollupRuleSettings} ruleSettings - The rollup rule settings\n   * @return {RollupRule} - The created rollup rule\n   */\n  private createRollupRule(ruleSettings: RollupRuleSettings): RollupRule {\n    // Create rule\n    const rule = new RollupRule(\n      ruleSettings.action,\n      ruleSettings.consideration,\n      ruleSettings.minimumCount,\n      ruleSettings.minimumPercent,\n    );\n\n    // Add conditions\n    for (const conditionSettings of ruleSettings.conditions) {\n      const condition = new RollupCondition(\n        conditionSettings.condition,\n        new Map(Object.entries(conditionSettings.parameters || {})),\n      );\n      rule.addCondition(condition);\n    }\n\n    return rule;\n  }\n}\n\nexport default Scorm2004API;\n","import AICC from \"./AICC\";\nimport Scorm12API from \"./Scorm12API\";\nimport Scorm2004API from \"./Scorm2004API\";\n\n// Explicitly assign to window for global usage\nif (typeof window !== \"undefined\") {\n  window.AICC = AICC;\n  window.Scorm12API = Scorm12API;\n  window.Scorm2004API = Scorm2004API;\n}\n"],"names":["global_constants","SCORM_TRUE","SCORM_FALSE","STATE_NOT_INITIALIZED","STATE_INITIALIZED","STATE_TERMINATED","scorm12_constants","cmi_children","core_children","score_children","comments_children","objectives_children","correct_responses_children","student_data_children","student_preference_children","interactions_children","error_descriptions","basicMessage","detailMessage","aicc_constants","student_demographics_children","tries_children","attempt_records_children","paths_children","scorm2004_constants","adl_data_children","global_errors","GENERAL","INITIALIZATION_FAILED","INITIALIZED","TERMINATED","TERMINATION_FAILURE","TERMINATION_BEFORE_INIT","MULTIPLE_TERMINATION","RETRIEVE_BEFORE_INIT","RETRIEVE_AFTER_TERM","STORE_BEFORE_INIT","STORE_AFTER_TERM","COMMIT_BEFORE_INIT","COMMIT_AFTER_TERM","ARGUMENT_ERROR","CHILDREN_ERROR","COUNT_ERROR","GENERAL_GET_FAILURE","GENERAL_SET_FAILURE","GENERAL_COMMIT_FAILURE","UNDEFINED_DATA_MODEL","UNIMPLEMENTED_ELEMENT","VALUE_NOT_INITIALIZED","INVALID_SET_VALUE","READ_ONLY_ELEMENT","WRITE_ONLY_ELEMENT","TYPE_MISMATCH","VALUE_OUT_OF_RANGE","DEPENDENCY_NOT_ESTABLISHED","scorm12_errors","scorm2004_errors","MULTIPLE_TERMINATIONS","scorm12_regex","CMIString256","CMIString4096","CMITime","CMITimespan","CMIInteger","CMISInteger","CMIDecimal","CMIIdentifier","CMIFeedback","CMIIndex","CMIStatus","CMIStatus2","CMIExit","CMIType","CMIResult","NAVEvent","score_range","audio_range","speed_range","weighting_range","text_range","aicc_regex","scorm2004_regex","CMIString200","CMIString250","CMIString1000","CMIString4000","CMIString64000","CMILang","CMILangString250","CMILangcr","CMILangString250cr","CMILangString4000","CMIShortIdentifier","CMILongIdentifier","CMICStatus","CMISStatus","NAVBoolean","NAVTarget","scaled_range","progress_range","BaseScormValidationError","Error","constructor","CMIElement","errorCode","toString","_errorCode","Object","setPrototypeOf","prototype","ValidationError","errorMessage","detailedMessage","_detailedMessage","message","_errorMessage","Scorm12ValidationError","hasOwnProperty","call","String","BaseCMI","cmi_element","jsonString","_initialized","_cmi_element","initialized","start_time","_start_time","initialize","setStartTime","Date","getTime","BaseRootCMI","SECONDS_PER_SECOND","SECONDS_PER_MINUTE","SECONDS_PER_HOUR","SECONDS_PER_DAY","designations","D","H","M","S","getSecondsAsHHMMSS","memoize","totalSeconds","hours","Math","floor","dateObj","minutes","getUTCMinutes","seconds","getSeconds","ms","msStr","countDecimals","toFixed","split","replace","getSecondsAsISODuration","duration","remainder","designationEntries","entries","forEach","_ref","designationsKey","current_seconds","value","Number","needsTimeSeparator","indexOf","includes","getTimeAsSeconds","timeString","timeRegex","RegExp","match","parts","timeStr","regexStr","getDurationAsSeconds","durationRegex","years","_","days","exec","result","durationStr","addTwoDurations","first","second","regex","addHHMMSSTimeStrings","flatten","data","recurse","cur","prop","Array","isArray","item","i","length","keys","filter","p","isEmpty","unflatten","pattern","from","m","num","formatMessage","functionName","baseLength","paddedFunction","padEnd","messageString","CMIElementBaseLength","stringMatches","str","tester","fn","keyFn","cache","Map","_len","arguments","args","_key","key","JSON","stringify","has","get","set","checkValidFormat","regexPattern","errorClass","allowEmptyString","formatRegex","matches","_errorClass","valueKey","checkValidRange","rangePattern","ranges","check12ValidFormat","check12ValidRange","ValidationService","validateScore","decimalRegex","scoreRange","invalidTypeCode","invalidRangeCode","validateScorm12Audio","validateScorm12Language","validateScorm12Speed","validateScorm12Text","validateReadOnly","validationService","CMIScore","params","_raw","_min","__children","__score_range","_max","max","__invalid_error_code","invalidErrorCode","__invalid_type_code","__invalid_range_code","__decimal_regex","__error_class","reset","_children","raw","min","toJSON","CMICore","_student_id","_student_name","_lesson_location","_credit","_lesson_status","_entry","_total_time","_lesson_mode","_exit","_session_time","_suspend_data","score","student_id","student_name","lesson_location","credit","lesson_status","entry","total_time","lesson_mode","exit","session_time","suspend_data","getCurrentTotalTime","sessionTime","startTime","Util","CMIArray","children","childArray","wipe","_count","CMIObjectives","CMIObjectivesObject","_id","_status","id","status","CMIStudentData","_mastery_score","_max_time_allowed","_time_limit_action","mastery_score","max_time_allowed","time_limit_action","CMIStudentPreference","_audio","_language","_speed","_text","audio","language","speed","text","CMIInteractions","CMIInteractionsObject","_time","_type","_weighting","_student_response","_result","_latency","objectives","correct_responses","time","type","weighting","student_response","latency","CMIInteractionsObjectivesObject","CMIInteractionsCorrectResponsesObject","_pattern","CMI","student_data","__version","_launch_data","_comments","_comments_from_lms","core","student_preference","interactions","launch_data","comments","comments_from_lms","_version","NAV","_event","event","UNKNOWN","TRUE","FALSE","SuccessStatus","PASSED","FAILED","CompletionStatus","COMPLETED","INCOMPLETE","LogLevelEnum","DEBUG","INFO","WARN","ERROR","NONE","DefaultSettings","autocommit","autocommitSeconds","asyncCommit","sendFullCommit","lmsCommitUrl","dataCommitFormat","commitRequestDataType","autoProgress","logLevel","selfReportSessionTime","alwaysSendTotalTime","renderCommonCommitFields","strict_errors","xhrHeaders","xhrWithCredentials","fetchMode","useBeaconInsteadOfFetch","responseHandler","response","httpResult","json","responseText","parse","e","requestHandler","commitObject","onLogMessage","defaultLogHandler","scoItemIds","scoItemIdValidator","globalObjectiveIds","enableOfflineSupport","courseId","syncOnInitialize","syncOnTerminate","maxSyncAttempts","messageLevel","logMessage","console","error","warn","info","debug","log","ScheduledCommit","API","when","callback","_cancelled","_API","_timeout","setTimeout","wrapper","bind","_callback","cancel","clearTimeout","commit","HttpService","settings","error_codes","processHttpRequest","url","immediate","undefined","apiLog","processListeners","genericError","body","join","contentType","navigator","sendBeacon","Blob","performFetch","then","transformResponse","process","performBeacon","init","method","mode","headers","keepalive","credentials","fetch","beaconSuccess","Promise","resolve","ok","updateSettings","EventService","listenerMap","listenerCount","parseListenerName","listenerName","listenerSplit","on","listenerFunctions","listenerFunction","parsedListener","listeners","push","off","removeIndex","findIndex","obj","splice","delete","clear","newListeners","listener","listenerHasCMIElement","CMIElementsMatch","endsWith","prefix","slice","startsWith","SerializationService","loadFromFlattenedJSON","setCMIValue","isNotInitialized","setStartingData","int_pattern","obj_pattern","others","intMatch","index","field","objMatch","sort","a","b","localeCompare","processItems","items","loadFromJSON","currentCMIElement","tempCMIElement","renderCMIToJSONString","cmi","k","v","renderCMIToJSONObject","getCommitObject","terminateCommit","renderCommitObject","renderCommitCMI","apiLogLevel","shouldTerminateCommit","LoggingService","_logLevel","_logHandler","getInstance","_instance","setLogLevel","level","getLogLevel","setLogHandler","handler","shouldLog","numericMessageLevel","getNumericLevel","numericLogLevel","getLoggingService","ErrorHandlingService","errorCodes","getLmsErrorMessageDetails","loggingService","_lastErrorCode","_errorCodes","_apiLog","_getLmsErrorMessageDetails","_loggingService","lastErrorCode","throwSCORMError","errorNumber","formattedMessage","clearSCORMError","success","handleValueAccessException","returnValue","validationError","errorType","name","stackTrace","stack","errorDetails","jsonError","createErrorHandlingService","OfflineStorageService","storeName","syncQueue","isOnline","onLine","syncInProgress","window","addEventListener","handleOnlineStatusChange","wasOnline","syncOfflineData","storeOffline","commitData","queueItem","now","random","substr","timestamp","syncAttempts","currentQueue","getFromStorage","saveToStorage","getOfflineData","remainingQueue","syncResult","sendDataToLMS","processedData","isDeviceOnline","storedData","localStorage","getItem","setItem","hasPendingOfflineData","queue","some","BaseAPI","httpService","eventService","serializationService","cmiDataService","errorHandlingService","offlineStorageService","_settings","_courseId","new","TypeError","currentState","_error_codes","_httpService","_eventService","element","_serializationService","_errorHandlingService","detail","_offlineStorageService","offlineData","runtimeData","catch","commonReset","clearScheduledCommit","startingData","callbackName","initializeMessage","terminationMessage","isInitialized","isTerminated","hasPendingData","syncSuccess","previousSettings","terminate","checkTerminated","checkState","storeData","getValue","getCMIValue","setValue","commitCallback","scheduleCommit","getLastError","getErrorString","CMIErrorCode","getDiagnostic","beforeInitError","afterTermError","_errorNumber","_CMIElement","_value","_commonSetCMIValue","methodName","scorm2004","structure","refObject","foundFirstIndex","invalidErrorMessage","idx","attribute","substring","_checkObjectHasProperty","validateCorrectResponse","parseInt","isNaN","newChild","getChildElement","_commonGetCMIValue","uninitializedErrorMessage","_isTargetValid","target","getFlattenedCMI","Utilities","StringKeyMap","getOwnPropertyDescriptor","getPrototypeOf","Scorm12API","mastery_override","statusSetByModule","nav","LMSInitialize","lmsInitialize","LMSFinish","lmsFinish","LMSGetValue","lmsGetValue","LMSSetValue","lmsSetValue","LMSCommit","lmsCommit","LMSGetLastError","lmsGetLastError","LMSGetErrorString","lmsGetErrorString","LMSGetDiagnostic","lmsGetDiagnostic","internalFinish","replaceWithAnotherScormAPI","newAPI","cmiExport","flattened","totalTimeHHMMSS","totalTimeSeconds","lessonStatus","completionStatus","successStatus","scoreObject","parseFloat","originalStatus","aicc_errors","AICCValidationError","checkAICCValidFormat","CMIEvaluation","CMIEvaluationComments","CMIEvaluationCommentsObject","_content","_location","content","location","AICCStudentPreferences","_lesson_type","_text_color","_text_location","_text_size","_video","windows","lesson_type","text_color","text_location","text_size","video","CMIStudentDemographics","_city","_class","_company","_country","_experience","_familiar_name","_instructor_name","_title","_native_language","_state","_street_address","_telephone","_years_experience","city","class","clazz","company","country","experience","familiar_name","instructor_name","title","native_language","state","street_address","telephone","years_experience","CMITries","CMITriesObject","CMIAttemptRecords","CMIAttemptRecordsObject","AICCCMIStudentData","_tries_during_lesson","tries","attempt_records","tries_during_lesson","CMIPaths","CMIPathsObject","_location_id","_date","_why_left","_time_in_element","location_id","date","why_left","time_in_element","Scorm12CMI","student_demographics","evaluation","paths","AICC","Scorm2004ValidationError","check2004ValidFormat","check2004ValidRange","CMILearnerPreference","_audio_level","_delivery_speed","_audio_captioning","audio_level","delivery_speed","audio_captioning","LearnerResponses","format","delimiter","unique","choice","matching","format2","delimiter2","performance","sequencing","likert","numeric","other","CorrectResponses","duplicate","limit","delimiter3","_timestamp","_learner_response","_description","learner_response","nodes","response_type","values","j","description","parent","_parent","interactionType","isValid","Scorm2004CMIScore","_scaled","scaled","CMICommentsFromLMS","CMICommentsFromLearner","CMICommentsObject","readOnlyAfterInit","_comment","_readOnlyAfterInit","comment","findObjectiveById","find","objective","findObjectiveByIndex","setObjectiveByIndex","_success_status","_completion_status","_progress_measure","success_status","completion_status","progress_measure","CMIMetadata","CMILearner","_learner_id","_learner_name","learner_id","learner_name","CMISession","CMIContent","CMISettings","_mode","CMIThresholds","_scaled_passing_score","_completion_threshold","scaled_passing_score","completion_threshold","metadata","learner","session","thresholds","learner_preference","comments_from_learner","ADL","ADLData","_sequencing","ADLNav","adlNav","_request","request_valid","ADLNavRequestValid","request","processNavigationRequest","ADLDataObject","_store","store","_continue","_previous","_choice","_jump","continue","previous","jump","RuleActionType","RuleCondition","condition","operator","parameters","_condition","_operator","_parameters","evaluate","activity","objectiveMeasureStatus","greaterThanValue","objectiveNormalizedMeasure","lessThanValue","isCompleted","attemptCount","attemptLimit","fromEntries","SequencingRule","action","conditionCombination","_conditions","_action","_conditionCombination","conditions","addCondition","removeCondition","every","SequencingRules","_preConditionRules","_exitConditionRules","_postConditionRules","preConditionRules","addPreConditionRule","rule","exitConditionRules","addExitConditionRule","postConditionRules","addPostConditionRule","evaluatePreConditionRules","evaluateExitConditionRules","evaluatePostConditionRules","RollupCondition","RollupRule","consideration","minimumCount","minimumPercent","_consideration","_minimumCount","_minimumPercent","matchingChildren","child","percent","RollupRules","_rules","rules","addRule","removeRule","processRollup","completionRollup","successRollup","_defaultCompletionRollup","_defaultSuccessRollup","allCompleted","anyIncomplete","allSatisfied","anyNotSatisfied","ValidLanguages","Activity","_isVisible","_isActive","_isSuspended","_isCompleted","_completionStatus","_successStatus","_attemptCount","_attemptCompletionAmount","_attemptAbsoluteDuration","_attemptExperiencedDuration","_activityAbsoluteDuration","_activityExperiencedDuration","_objectiveSatisfiedStatus","_objectiveMeasureStatus","_objectiveNormalizedMeasure","addChild","removeChild","isVisible","isActive","isSuspended","incrementAttemptCount","attemptCompletionAmount","attemptAbsoluteDuration","attemptExperiencedDuration","activityAbsoluteDuration","activityExperiencedDuration","objectiveSatisfiedStatus","map","ActivityTree","_root","_currentActivity","_suspendedActivity","_activities","root","_addActivitiesToMap","currentActivity","suspendedActivity","getActivity","getAllActivities","getParent","getChildren","getSiblings","getNextSibling","siblings","getPreviousSibling","getFirstChild","getLastChild","getCommonAncestor","activity1","activity2","path1","current","unshift","SequencingControls","_enabled","_choiceExit","_flow","_forwardOnly","_useCurrentAttemptObjectiveInfo","_useCurrentAttemptProgressInfo","_preventActivation","_constrainChoice","_rollupObjectiveSatisfied","_rollupProgressCompletion","_objectiveMeasureWeight","enabled","choiceExit","flow","forwardOnly","useCurrentAttemptObjectiveInfo","useCurrentAttemptProgressInfo","preventActivation","constrainChoice","rollupObjectiveSatisfied","rollupProgressCompletion","objectiveMeasureWeight","isChoiceNavigationAllowed","isFlowNavigationAllowed","isForwardNavigationAllowed","isBackwardNavigationAllowed","Sequencing","_adlNav","_activityTree","_sequencingRules","_sequencingControls","_rollupRules","activityTree","sequencingRules","sequencingControls","rollupRules","preConditionAction","SKIP","DISABLED","HIDE_FROM_CHOICE","STOP_FORWARD_TRAVERSAL","processContinueRequest","processPreviousRequest","processExitRequest","processExitAllRequest","processAbandonRequest","processAbandonAllRequest","processSuspendAllRequest","nextActivity","exitConditionAction","EXIT_PARENT","EXIT_ALL","postConditionAction","RETRY","RETRY_ALL","CONTINUE","PREVIOUS","EXIT","previousActivity","_processRollupRecursive","Scorm2004API","_globalObjectives","_extractedScoItemIds","adl","configureSequencing","Initialize","Terminate","GetValue","SetValue","Commit","GetLastError","GetErrorString","GetDiagnostic","version","globalObjectives","navActions","exitAll","abandon","abandonAll","choiceJumpRegex","groups","choice_target","jump_target","adlNavRequestRegex","element_base","objective_id","setting_id","is_global","global_index","newGlobalObjective","global_element","createCorrectResponsesObject","interaction","checkDuplicateChoiceResponse","checkValidResponseType","interaction_type","checkCorrectResponseValue","interaction_count","pattern_index","checkDuplicatedPattern","correct_response","current_index","found","count","removeCorrectResponsePrefixes","node","seenOrder","seenCase","seenLang","prefixRegex","langMatches","lang","toLowerCase","totalTimeDuration","navRequest","Function","sequencingSettings","configureActivityTree","configureSequencingRules","configureSequencingControls","configureRollupRules","activityTreeSettings","rootActivity","createActivity","extractActivityIds","ids","activitySettings","childSettings","childActivity","sequencingRulesSettings","ruleSettings","createSequencingRule","conditionSettings","sequencingControlsSettings","rollupRulesSettings","createRollupRule"],"mappings":"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"}