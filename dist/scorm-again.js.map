{"version":3,"file":"scorm-again.js","sources":["../src/constants/api_constants.ts","../src/constants/error_codes.ts","../src/constants/regex.ts","../src/exceptions.ts","../src/exceptions/scorm12_exceptions.ts","../src/cmi/common/base_cmi.ts","../src/utilities.ts","../src/cmi/common/validation.ts","../src/cmi/scorm12/validation.ts","../src/services/ValidationService.ts","../src/cmi/common/score.ts","../src/cmi/aicc/core.ts","../src/cmi/common/array.ts","../src/cmi/scorm12/objectives.ts","../src/cmi/scorm12/student_data.ts","../src/cmi/scorm12/student_preference.ts","../src/cmi/scorm12/interactions.ts","../src/cmi/scorm12/cmi.ts","../src/cmi/scorm12/nav.ts","../src/constants/enums.ts","../src/constants/default_settings.ts","../src/types/scheduled_commit.ts","../src/services/HttpService.ts","../src/services/EventService.ts","../src/services/SerializationService.ts","../src/services/LoggingService.ts","../src/services/ErrorHandlingService.ts","../src/services/OfflineStorageService.ts","../src/BaseAPI.ts","../src/Scorm12API.ts","../src/exceptions/aicc_exceptions.ts","../src/cmi/aicc/validation.ts","../src/cmi/aicc/evaluation.ts","../src/cmi/aicc/student_preferences.ts","../src/cmi/aicc/student_demographics.ts","../src/cmi/aicc/tries.ts","../src/cmi/aicc/attempts.ts","../src/cmi/aicc/student_data.ts","../src/cmi/aicc/paths.ts","../src/cmi/aicc/cmi.ts","../src/AICC.ts","../src/exceptions/scorm2004_exceptions.ts","../src/cmi/scorm2004/validation.ts","../src/cmi/scorm2004/learner_preference.ts","../src/constants/response_constants.ts","../src/cmi/scorm2004/interactions.ts","../src/cmi/scorm2004/score.ts","../src/cmi/scorm2004/comments.ts","../src/cmi/scorm2004/objectives.ts","../src/cmi/scorm2004/metadata.ts","../src/cmi/scorm2004/learner.ts","../src/cmi/scorm2004/status.ts","../src/cmi/scorm2004/session.ts","../src/cmi/scorm2004/content.ts","../src/cmi/scorm2004/settings.ts","../src/cmi/scorm2004/thresholds.ts","../src/cmi/scorm2004/cmi.ts","../src/cmi/scorm2004/adl.ts","../src/cmi/scorm2004/sequencing/sequencing_rules.ts","../src/cmi/scorm2004/sequencing/rollup_rules.ts","../src/constants/language_constants.ts","../src/cmi/scorm2004/sequencing/sequencing_controls.ts","../src/cmi/scorm2004/sequencing/activity.ts","../src/cmi/scorm2004/sequencing/activity_tree.ts","../src/cmi/scorm2004/sequencing/selection_randomization.ts","../src/cmi/scorm2004/sequencing/sequencing_process.ts","../src/cmi/scorm2004/sequencing/sequencing.ts","../src/Scorm2004API.ts","../src/ScormAgain.ts"],"sourcesContent":["interface ErrorDescription {\n  basicMessage: string;\n  detailMessage: string;\n}\n\ninterface ErrorDescriptions {\n  [key: string]: ErrorDescription;\n}\n\ninterface ScormConstants {\n  cmi_children: string;\n  core_children: string;\n  score_children: string;\n  comments_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface AiccConstants extends ScormConstants {\n  student_demographics_children: string;\n  tries_children: string;\n  attempt_records_children: string;\n  paths_children: string;\n}\n\ninterface Scorm2004Constants {\n  cmi_children: string;\n  comments_children: string;\n  score_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  adl_data_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface GlobalConstants {\n  SCORM_TRUE: string;\n  SCORM_FALSE: string;\n  STATE_NOT_INITIALIZED: number;\n  STATE_INITIALIZED: number;\n  STATE_TERMINATED: number;\n}\n\nexport const global_constants: GlobalConstants = {\n  SCORM_TRUE: \"true\",\n  SCORM_FALSE: \"false\",\n  STATE_NOT_INITIALIZED: 0,\n  STATE_INITIALIZED: 1,\n  STATE_TERMINATED: 2,\n};\n\nexport const scorm12_constants: ScormConstants = {\n  // Children lists\n  cmi_children:\n    \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions\",\n  core_children:\n    \"student_id,student_name,lesson_location,credit,lesson_status,entry,score,total_time,lesson_mode,exit,session_time\",\n  score_children: \"raw,min,max\",\n  comments_children: \"content,location,time\",\n  objectives_children: \"id,score,status\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio,language,speed,text\",\n  interactions_children:\n    \"id,objectives,time,type,correct_responses,weighting,student_response,result,latency\",\n  error_descriptions: {\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage: \"No specific error code exists to describe the error.\",\n    },\n    \"201\": {\n      basicMessage: \"Invalid argument error\",\n      detailMessage:\n        \"Indicates that an argument represents an invalid data model element or is otherwise incorrect.\",\n    },\n    \"202\": {\n      basicMessage: \"Element cannot have children\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_children\" for a data model element that does not support the \"_children\" suffix.',\n    },\n    \"203\": {\n      basicMessage: \"Element not an array - cannot have count\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_count\" for a data model element that does not support the \"_count\" suffix.',\n    },\n    \"301\": {\n      basicMessage: \"Not initialized\",\n      detailMessage: \"Indicates that an API call was made before the call to lmsInitialize.\",\n    },\n    \"401\": {\n      basicMessage: \"Not implemented error\",\n      detailMessage:\n        \"The data model element indicated in a call to LMSGetValue or LMSSetValue is valid, but was not implemented by this LMS. SCORM 1.2 defines a set of data model elements as being optional for an LMS to implement.\",\n    },\n    \"402\": {\n      basicMessage: \"Invalid set value, element is a keyword\",\n      detailMessage:\n        'Indicates that LMSSetValue was called on a data model element that represents a keyword (elements that end in \"_children\" and \"_count\").',\n    },\n    \"403\": {\n      basicMessage: \"Element is read only\",\n      detailMessage: \"LMSSetValue was called with a data model element that can only be read.\",\n    },\n    \"404\": {\n      basicMessage: \"Element is write only\",\n      detailMessage: \"LMSGetValue was called on a data model element that can only be written to.\",\n    },\n    \"405\": {\n      basicMessage: \"Incorrect Data Type\",\n      detailMessage:\n        \"LMSSetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a LMSSetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\nexport const aicc_constants: AiccConstants = {\n  ...scorm12_constants,\n  ...{\n    cmi_children:\n      \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions,evaluation\",\n    student_preference_children:\n      \"audio,language,lesson_type,speed,text,text_color,text_location,text_size,video,windows\",\n    student_data_children: \"attempt_number,tries,mastery_score,max_time_allowed,time_limit_action\",\n    student_demographics_children:\n      \"city,class,company,country,experience,familiar_name,instructor_name,title,native_language,state,street_address,telephone,years_experience\",\n    tries_children: \"time,status,score\",\n    attempt_records_children: \"score,lesson_status\",\n    paths_children: \"location_id,date,time,status,why_left,time_in_element\",\n  },\n};\n\nexport const scorm2004_constants: Scorm2004Constants = {\n  // Children lists\n  cmi_children:\n    \"_version,comments_from_learner,comments_from_lms,completion_status,credit,entry,exit,interactions,launch_data,learner_id,learner_name,learner_preference,location,max_time_allowed,mode,objectives,progress_measure,scaled_passing_score,score,session_time,success_status,suspend_data,time_limit_action,total_time\",\n  comments_children: \"comment,timestamp,location\",\n  score_children: \"max,raw,scaled,min\",\n  objectives_children: \"progress_measure,completion_status,success_status,description,score,id\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio_level,audio_captioning,delivery_speed,language\",\n  interactions_children:\n    \"id,type,objectives,timestamp,correct_responses,weighting,learner_response,result,latency,description\",\n  adl_data_children: \"id,store\",\n  error_descriptions: {\n    \"0\": {\n      basicMessage: \"No Error\",\n      detailMessage: \"No error occurred, the previous API call was successful.\",\n    },\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage: \"No specific error code exists to describe the error.\",\n    },\n    \"102\": {\n      basicMessage: \"General Initialization Failure\",\n      detailMessage: \"Call to Initialize failed for an unknown reason.\",\n    },\n    \"103\": {\n      basicMessage: \"Already Initialized\",\n      detailMessage: \"Call to Initialize failed because Initialize was already called.\",\n    },\n    \"104\": {\n      basicMessage: \"Content Instance Terminated\",\n      detailMessage: \"Call to Initialize failed because Terminate was already called.\",\n    },\n    \"111\": {\n      basicMessage: \"General Termination Failure\",\n      detailMessage: \"Call to Terminate failed for an unknown reason.\",\n    },\n    \"112\": {\n      basicMessage: \"Termination Before Initialization\",\n      detailMessage: \"Call to Terminate failed because it was made before the call to Initialize.\",\n    },\n    \"113\": {\n      basicMessage: \"Termination After Termination\",\n      detailMessage: \"Call to Terminate failed because Terminate was already called.\",\n    },\n    \"122\": {\n      basicMessage: \"Retrieve Data Before Initialization\",\n      detailMessage: \"Call to GetValue failed because it was made before the call to Initialize.\",\n    },\n    \"123\": {\n      basicMessage: \"Retrieve Data After Termination\",\n      detailMessage: \"Call to GetValue failed because it was made after the call to Terminate.\",\n    },\n    \"132\": {\n      basicMessage: \"Store Data Before Initialization\",\n      detailMessage: \"Call to SetValue failed because it was made before the call to Initialize.\",\n    },\n    \"133\": {\n      basicMessage: \"Store Data After Termination\",\n      detailMessage: \"Call to SetValue failed because it was made after the call to Terminate.\",\n    },\n    \"142\": {\n      basicMessage: \"Commit Before Initialization\",\n      detailMessage: \"Call to Commit failed because it was made before the call to Initialize.\",\n    },\n    \"143\": {\n      basicMessage: \"Commit After Termination\",\n      detailMessage: \"Call to Commit failed because it was made after the call to Terminate.\",\n    },\n    \"201\": {\n      basicMessage: \"General Argument Error\",\n      detailMessage:\n        \"An invalid argument was passed to an API method (usually indicates that Initialize, Commit or Terminate did not receive the expected empty string argument.\",\n    },\n    \"301\": {\n      basicMessage: \"General Get Failure\",\n      detailMessage:\n        \"Indicates a failed GetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"351\": {\n      basicMessage: \"General Set Failure\",\n      detailMessage:\n        \"Indicates a failed SetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"391\": {\n      basicMessage: \"General Commit Failure\",\n      detailMessage:\n        \"Indicates a failed Commit call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"401\": {\n      basicMessage: \"Undefined Data Model Element\",\n      detailMessage:\n        \"The data model element name passed to GetValue or SetValue is not a valid SCORM data model element.\",\n    },\n    \"402\": {\n      basicMessage: \"Unimplemented Data Model Element\",\n      detailMessage:\n        \"The data model element indicated in a call to GetValue or SetValue is valid, but was not implemented by this LMS. In SCORM 2004, this error would indicate an LMS that is not fully SCORM conformant.\",\n    },\n    \"403\": {\n      basicMessage: \"Data Model Element Value Not Initialized\",\n      detailMessage:\n        \"Attempt to read a data model element that has not been initialized by the LMS or through a SetValue call. This error condition is often reached during normal execution of a SCO.\",\n    },\n    \"404\": {\n      basicMessage: \"Data Model Element Is Read Only\",\n      detailMessage: \"SetValue was called with a data model element that can only be read.\",\n    },\n    \"405\": {\n      basicMessage: \"Data Model Element Is Write Only\",\n      detailMessage: \"GetValue was called on a data model element that can only be written to.\",\n    },\n    \"406\": {\n      basicMessage: \"Data Model Element Type Mismatch\",\n      detailMessage:\n        \"SetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Data Model Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a SetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\n","export type ErrorCode = {\n  [key: string]: number;\n};\n\nexport const global_errors: ErrorCode = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nexport const scorm12_errors: ErrorCode = {\n  ...global_errors,\n  RETRIEVE_BEFORE_INIT: 301,\n  STORE_BEFORE_INIT: 301,\n  COMMIT_BEFORE_INIT: 301,\n  ARGUMENT_ERROR: 201,\n  CHILDREN_ERROR: 202,\n  COUNT_ERROR: 203,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 401,\n  VALUE_NOT_INITIALIZED: 301,\n  INVALID_SET_VALUE: 402,\n  READ_ONLY_ELEMENT: 403,\n  WRITE_ONLY_ELEMENT: 404,\n  TYPE_MISMATCH: 405,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n\nexport const scorm2004_errors: ErrorCode = {\n  ...global_errors,\n  INITIALIZATION_FAILED: 102,\n  INITIALIZED: 103,\n  TERMINATED: 104,\n  TERMINATION_FAILURE: 111,\n  TERMINATION_BEFORE_INIT: 112,\n  MULTIPLE_TERMINATION: 113,\n  MULTIPLE_TERMINATIONS: 113,\n  RETRIEVE_BEFORE_INIT: 122,\n  RETRIEVE_AFTER_TERM: 123,\n  STORE_BEFORE_INIT: 132,\n  STORE_AFTER_TERM: 133,\n  COMMIT_BEFORE_INIT: 142,\n  COMMIT_AFTER_TERM: 143,\n  ARGUMENT_ERROR: 201,\n  GENERAL_GET_FAILURE: 301,\n  GENERAL_SET_FAILURE: 351,\n  GENERAL_COMMIT_FAILURE: 391,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 402,\n  VALUE_NOT_INITIALIZED: 403,\n  READ_ONLY_ELEMENT: 404,\n  WRITE_ONLY_ELEMENT: 405,\n  TYPE_MISMATCH: 406,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n","export const scorm12_regex = {\n  CMIString256: \"^.{0,255}$\",\n  CMIString4096: \"^.{0,4096}$\",\n  CMITime: \"^(?:[01]\\\\d|2[0123]):(?:[012345]\\\\d):(?:[012345]\\\\d)$\",\n  CMITimespan: \"^([0-9]{2,}):([0-9]{2}):([0-9]{2})(.[0-9]{1,2})?$\",\n\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{0,3})(\\\\.[0-9]*)?$\",\n\n  CMIIdentifier: \"^[\\\\u0021-\\\\u007E\\\\s]{0,255}$\",\n  // Allow storing larger responses for interactions\n  // Some content packages may exceed the 255 character limit\n  // defined in the SCORM 1.2 specification.  The previous\n  // expression truncated these values which resulted in\n  // a \"101: General Exception\" being thrown when long\n  // answers were supplied.  To support these packages we\n  // relax the limitation and accept any length string.\n  CMIFeedback: \"^.*$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMIStatus: \"^(passed|completed|failed|incomplete|browsed)$\",\n  CMIStatus2: \"^(passed|completed|failed|incomplete|browsed|not attempted)$\",\n  CMIExit: \"^(time-out|suspend|logout|)$\",\n  CMIType: \"^(true-false|choice|fill-in|matching|performance|sequencing|likert|numeric)$\",\n  CMIResult: \"^(correct|wrong|unanticipated|neutral|([0-9]{0,3})?(\\\\.[0-9]*)?)$\",\n  NAVEvent:\n    \"^(previous|continue|start|resumeAll|choice|jump|exit|exitAll|abandon|abandonAll|suspendAll|retry|retryAll|_none_)$\",\n  // Data ranges\n  score_range: \"0#100\",\n  audio_range: \"-1#100\",\n  speed_range: \"-100#100\",\n  weighting_range: \"-100#100\",\n  text_range: \"-1#1\",\n};\nexport const aicc_regex = {\n  ...scorm12_regex,\n  ...{\n    // AICC identifiers may contain letters, numbers, underscores,\n    // periods, and hyphens up to 255 characters in length.\n    // The previous expression only allowed \"\\w\" characters which\n    // excluded periods and hyphens.\n    CMIIdentifier: \"^[A-Za-z0-9._-]{1,255}$\",\n  },\n};\nexport const scorm2004_regex = {\n  CMIString200: \"^[\\\\u0000-\\\\uFFFF]{0,200}$\",\n  CMIString250: \"^[\\\\u0000-\\\\uFFFF]{0,250}$\",\n  CMIString1000: \"^[\\\\u0000-\\\\uFFFF]{0,1000}$\",\n  CMIString4000: \"^[\\\\u0000-\\\\uFFFF]{0,4000}$\",\n  CMIString64000: \"^[\\\\u0000-\\\\uFFFF]{0,64000}$\",\n  CMILang: \"^([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?$|^$\",\n\n  CMILangString250: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,250}$)?$\",\n\n  CMILangcr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?}))(.*?)$\",\n\n  CMILangString250cr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?})?(.{0,250})?)?$\",\n\n  CMILangString4000: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,4000}$)?$\",\n\n  CMITime:\n    \"^(19[7-9]{1}[0-9]{1}|20[0-2]{1}[0-9]{1}|203[0-8]{1})((-(0[1-9]{1}|1[0-2]{1}))((-(0[1-9]{1}|[1-2]{1}[0-9]{1}|3[0-1]{1}))(T([0-1]{1}[0-9]{1}|2[0-3]{1})((:[0-5]{1}[0-9]{1})((:[0-5]{1}[0-9]{1})((\\\\.[0-9]{1,6})((Z|([+|-]([0-1]{1}[0-9]{1}|2[0-3]{1})))(:[0-5]{1}[0-9]{1})?)?)?)?)?)?)?)?$\",\n  CMITimespan:\n    \"^P(?:([.,\\\\d]+)Y)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)W)?(?:([.,\\\\d]+)D)?(?:T?(?:([.,\\\\d]+)H)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)S)?)?$\",\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{1,5})(\\\\.[0-9]{1,18})?$\",\n  CMIIdentifier: \"^\\\\S{1,250}[a-zA-Z0-9]$\",\n  CMIShortIdentifier: \"^[\\\\w\\\\.\\\\-\\\\_]{1,250}$\",\n  CMILongIdentifier: \"^(?:(?!urn:)\\\\S{1,4000}|urn:[A-Za-z0-9-]{1,31}:\\\\S{1,4000}|.{1,4000})$\",\n  // need to re-examine this\n  CMIFeedback: \"^.*$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  CMIIndexStore: \".N(\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMICStatus: \"^(completed|incomplete|not attempted|unknown)$\",\n  CMISStatus: \"^(passed|failed|unknown)$\",\n  CMIExit: \"^(time-out|suspend|logout|normal)$\",\n  CMIType:\n    \"^(true-false|choice|fill-in|long-fill-in|matching|performance|sequencing|likert|numeric|other)$\",\n  CMIResult: \"^(correct|incorrect|unanticipated|neutral|-?([0-9]{1,4})(\\\\.[0-9]{1,18})?)$\",\n  NAVEvent:\n    \"^(start|resumeAll|previous|continue|exit|exitAll|abandon|abandonAll|suspendAll|retry|retryAll|_none_|(\\\\{target=(?<choice_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?choice|(\\\\{target=(?<jump_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?jump)$\",\n\n  NAVBoolean: \"^(unknown|true|false)$\",\n  NAVTarget: \"^{target=\\\\S{0,}[a-zA-Z0-9-_]+}$\",\n  // Data ranges\n  scaled_range: \"-1#1\",\n  audio_range: \"0#999.9999999\",\n  speed_range: \"0#999.9999999\",\n  text_range: \"-1#1\",\n  progress_range: \"0#1\",\n};\n","type APIError = {\n  errorCode: number;\n  errorMessage: string;\n  detailedMessage: string;\n};\n\nexport class BaseScormValidationError extends Error {\n  constructor(CMIElement: string, errorCode: number) {\n    super(`${CMIElement} : ${errorCode.toString()}`);\n    this._errorCode = errorCode;\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, BaseScormValidationError.prototype);\n  }\n\n  private readonly _errorCode: number;\n\n  /**\n   * Getter for _errorCode\n   * @return {number}\n   */\n  get errorCode(): number {\n    return this._errorCode;\n  }\n}\n\n/**\n * Base Validation Exception\n */\nexport class ValidationError extends BaseScormValidationError implements APIError {\n  /**\n   * Constructor to take in an error message and code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   * @param {string} errorMessage\n   * @param {string} detailedMessage\n   */\n  constructor(\n    CMIElement: string,\n    errorCode: number,\n    errorMessage: string,\n    detailedMessage?: string,\n  ) {\n    super(CMIElement, errorCode);\n    this.message = `${CMIElement} : ${errorMessage}`;\n    this._errorMessage = errorMessage;\n    if (detailedMessage) {\n      this._detailedMessage = detailedMessage;\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  private readonly _errorMessage: string;\n  private readonly _detailedMessage: string = \"\";\n\n  /**\n   * Getter for _errorMessage\n   * @return {string}\n   */\n  get errorMessage(): string {\n    return this._errorMessage;\n  }\n\n  /**\n   * Getter for _detailedMessage\n   * @return {string}\n   */\n  get detailedMessage(): string {\n    return this._detailedMessage;\n  }\n}\n","import { ValidationError } from \"../exceptions\";\nimport { scorm12_constants } from \"../constants/api_constants\";\n\nconst scorm12_errors = scorm12_constants.error_descriptions;\n\n/**\n * SCORM 1.2 Validation Error\n */\nexport class Scorm12ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm12_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm12_errors[String(errorCode)]?.basicMessage || \"Unknown error\",\n        scorm12_errors[String(errorCode)]?.detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm12_errors[\"101\"]?.basicMessage ?? \"General error\",\n        scorm12_errors[\"101\"]?.detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm12ValidationError.prototype);\n  }\n}\n","/**\n * Base class for API cmi objects\n */\nexport abstract class BaseCMI {\n  jsonString = false;\n  protected readonly _cmi_element: string;\n  protected _initialized = false;\n\n  /**\n   * Constructor for BaseCMI\n   * @param {string} cmi_element\n   */\n  constructor(cmi_element: string) {\n    this._cmi_element = cmi_element;\n  }\n\n  /**\n   * Getter for _initialized\n   * @return {boolean}\n   */\n  get initialized(): boolean {\n    return this._initialized;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize(): void {\n    this._initialized = true;\n  }\n\n  abstract reset(): void;\n}\n\n/**\n * Base class for cmi root objects\n */\nexport abstract class BaseRootCMI extends BaseCMI {\n  protected _start_time: number | undefined;\n\n  /**\n   * Start time of the course\n   * @type {number | undefined}\n   * @protected\n   */\n  get start_time(): number | undefined {\n    return this._start_time;\n  }\n\n  /**\n   * Setter for start_time. Can only be called once.\n   */\n  setStartTime(): void {\n    if (this._start_time === undefined) {\n      this._start_time = new Date().getTime();\n    } else {\n      throw new Error(\"Start time has already been set.\");\n    }\n  }\n\n  abstract getCurrentTotalTime(): string;\n}\n","/**\n * Constants for time conversion calculations.\n * These are used throughout the codebase for converting between different time formats.\n */\nexport const SECONDS_PER_SECOND = 1.0;\nexport const SECONDS_PER_MINUTE = 60;\nexport const SECONDS_PER_HOUR = 60 * SECONDS_PER_MINUTE;\nexport const SECONDS_PER_DAY = 24 * SECONDS_PER_HOUR;\n\ntype Designation = {\n  [key: string]: number;\n};\n\n/**\n * A record with string keys and unknown values.\n * This is a more type-safe alternative to using `any`.\n */\nexport type StringKeyMap = Record<string, unknown>;\n\nconst designations: Designation = {\n  D: SECONDS_PER_DAY,\n  H: SECONDS_PER_HOUR,\n  M: SECONDS_PER_MINUTE,\n  S: SECONDS_PER_SECOND,\n};\n\n/**\n * Converts a number of seconds to a formatted time string in HH:MM:SS format.\n * This function handles decimal seconds and ensures proper formatting with leading zeros.\n *\n * @param {number|null} totalSeconds - The total number of seconds to convert. If null or negative, returns \"00:00:00\".\n * @return {string} A formatted time string in HH:MM:SS format, with up to 2 decimal places for seconds if applicable.\n *\n * @example\n * // Returns \"01:30:45\"\n * getSecondsAsHHMMSS(5445);\n *\n * @example\n * // Returns \"00:00:30.5\"\n * getSecondsAsHHMMSS(30.5);\n *\n * @example\n * // Returns \"00:00:00\"\n * getSecondsAsHHMMSS(null);\n */\nexport const getSecondsAsHHMMSS = memoize((totalSeconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!totalSeconds || totalSeconds <= 0) {\n    return \"00:00:00\";\n  }\n\n  const hours = Math.floor(totalSeconds / SECONDS_PER_HOUR);\n  const dateObj = new Date(totalSeconds * 1000);\n  const minutes = dateObj.getUTCMinutes();\n  // make sure we add any possible decimal value\n  const seconds = dateObj.getSeconds();\n  const ms = totalSeconds % 1.0;\n  let msStr = \"\";\n\n  if (countDecimals(ms) > 0) {\n    if (countDecimals(ms) > 2) {\n      msStr = ms.toFixed(2);\n    } else {\n      msStr = String(ms);\n    }\n\n    msStr = \".\" + msStr.split(\".\")[1];\n  }\n\n  return (hours + \":\" + minutes + \":\" + seconds).replace(/\\b\\d\\b/g, \"0$&\") + msStr;\n});\n\n/**\n * Converts a number of seconds to an ISO 8601 duration string (e.g., \"PT1H30M45S\").\n * This function handles the complexity of formatting according to the ISO 8601 standard,\n * including the proper placement of the \"T\" separator for time components.\n *\n * @param {number|null} seconds - The number of seconds to convert. If null or negative, returns \"PT0S\".\n * @return {string} An ISO 8601 formatted duration string.\n *\n * @example\n * // Returns \"PT1H30M45S\" (1 hour, 30 minutes, 45 seconds)\n * getSecondsAsISODuration(5445);\n *\n * @example\n * // Returns \"PT30.5S\" (30.5 seconds)\n * getSecondsAsISODuration(30.5);\n *\n * @example\n * // Returns \"P1DT1H\" (1 day, 1 hour)\n * getSecondsAsISODuration(90000);\n *\n * @example\n * // Returns \"PT0S\" (0 seconds)\n * getSecondsAsISODuration(null);\n */\nexport const getSecondsAsISODuration = memoize((seconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!seconds || seconds <= 0) {\n    return \"PT0S\";\n  }\n\n  let duration = \"P\";\n  let remainder = seconds;\n\n  // Convert to array of entries and use functional methods\n  const designationEntries = Object.entries(designations);\n\n  // Process each time designation\n  designationEntries.forEach(([designationsKey, current_seconds]) => {\n    let value = Math.floor(remainder / current_seconds);\n    remainder = remainder % current_seconds;\n\n    // Limit decimal places\n    if (countDecimals(remainder) > 2) {\n      remainder = Number(Number(remainder).toFixed(2));\n    }\n\n    // If we have anything left in the remainder, and we're currently adding\n    // seconds to the duration, go ahead and add the decimal to the seconds\n    if (designationsKey === \"S\" && remainder > 0) {\n      value += remainder;\n    }\n\n    if (value) {\n      // Add the 'T' separator for time components if needed\n      const needsTimeSeparator =\n        (duration.indexOf(\"D\") > 0 || [\"H\", \"M\", \"S\"].includes(designationsKey)) &&\n        duration.indexOf(\"T\") === -1;\n\n      if (needsTimeSeparator) {\n        duration += \"T\";\n      }\n\n      duration += `${value}${designationsKey}`;\n    }\n  });\n\n  return duration;\n});\n\n/**\n * Converts a time string in HH:MM:SS format to the equivalent number of seconds.\n * This function is flexible and can handle various input types, converting them to strings as needed.\n *\n * @param {string|number|boolean|null} timeString - The time string to convert, typically in HH:MM:SS format.\n *                                                 If not a string, it will be converted to one.\n *                                                 If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} timeRegex - The regular expression used to validate the time string format.\n *                                    If a string is provided, it will be converted to a RegExp.\n * @return {number} The total number of seconds represented by the time string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getTimeAsSeconds(\"01:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getTimeAsSeconds(\"invalid\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 30 (converts number to string \"30\" then parses as 0:0:30)\n * getTimeAsSeconds(30, /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport const getTimeAsSeconds = memoize(\n  (timeString: string | number | boolean | null, timeRegex: RegExp | string): number => {\n    if (typeof timeString === \"number\" || typeof timeString === \"boolean\") {\n      timeString = String(timeString);\n    }\n    if (typeof timeRegex === \"string\") {\n      timeRegex = new RegExp(timeRegex);\n    }\n    if (!timeString) {\n      return 0;\n    }\n\n    if (!timeString.match(timeRegex)) {\n      // If the string represents a simple number, treat it as seconds\n      if (/^\\d+(?:\\.\\d+)?$/.test(timeString)) {\n        return Number(timeString);\n      }\n      return 0;\n    }\n\n    const parts = timeString.split(\":\");\n    const hours = Number(parts[0]);\n    const minutes = Number(parts[1]);\n    const seconds = Number(parts[2]);\n    return hours * 3600 + minutes * 60 + seconds;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (timeString, timeRegex) => {\n    const timeStr = typeof timeString === \"string\" ? timeString : String(timeString ?? \"\");\n    const regexStr = typeof timeRegex === \"string\" ? timeRegex : (timeRegex?.toString() ?? \"\");\n    return `${timeStr}:${regexStr}`;\n  },\n);\n\n/**\n * Converts an ISO 8601 duration string (e.g., \"PT1H30M45S\") to the equivalent number of seconds.\n * This function parses the duration string using a regular expression to extract years, days,\n * hours, minutes, and seconds components.\n *\n * @param {string|null} duration - The ISO 8601 duration string to convert.\n *                                If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n *                                       The regex should have capture groups for years, days, hours, minutes, and seconds.\n * @return {number} The total number of seconds represented by the duration string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getDurationAsSeconds(\"PT1H30M45S\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 90000 (1 day, 1 hour)\n * getDurationAsSeconds(\"P1DT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getDurationAsSeconds(\"invalid\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport const getDurationAsSeconds = memoize(\n  (duration: string | null, durationRegex: RegExp | string): number => {\n    if (typeof durationRegex === \"string\") {\n      durationRegex = new RegExp(durationRegex);\n    }\n\n    if (!duration || !duration?.match?.(durationRegex)) {\n      return 0;\n    }\n\n    const [, years, _, , days, hours, minutes, seconds] =\n      new RegExp(durationRegex).exec?.(duration) ?? [];\n    let result = 0.0;\n    result += Number(seconds) || 0.0;\n    result += Number(minutes) * 60.0 || 0.0;\n    result += Number(hours) * 3600.0 || 0.0;\n    result += Number(days) * (60 * 60 * 24.0) || 0.0;\n    result += Number(years) * (60 * 60 * 24 * 365.0) || 0.0;\n    return result;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (duration, durationRegex) => {\n    const durationStr = duration ?? \"\";\n    const regexStr =\n      typeof durationRegex === \"string\" ? durationRegex : (durationRegex?.toString() ?? \"\");\n    return `${durationStr}:${regexStr}`;\n  },\n);\n\n/**\n * Adds together two ISO 8601 duration strings and returns the result as a new ISO 8601 duration string.\n * This function works by converting both durations to seconds, adding them together, and then\n * converting the result back to an ISO 8601 duration string.\n *\n * @param {string} first - The first ISO 8601 duration string.\n * @param {string} second - The second ISO 8601 duration string.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n * @return {string} A new ISO 8601 duration string representing the sum of the two input durations.\n *\n * @example\n * // Returns \"PT2H\" (1 hour + 1 hour = 2 hours)\n * addTwoDurations(\"PT1H\", \"PT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"PT1H30M\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addTwoDurations(\"PT1H\", \"PT30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"P1DT1H30M\" (1 day + 1 hour and 30 minutes = 1 day, 1 hour, and 30 minutes)\n * addTwoDurations(\"P1D\", \"PT1H30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport function addTwoDurations(\n  first: string,\n  second: string,\n  durationRegex: RegExp | string,\n): string {\n  const regex: RegExp =\n    typeof durationRegex === \"string\" ? new RegExp(durationRegex) : durationRegex;\n  return getSecondsAsISODuration(\n    getDurationAsSeconds(first, regex) + getDurationAsSeconds(second, regex),\n  );\n}\n\n/**\n * Adds together two time strings in HH:MM:SS format and returns the result as a new time string.\n * This function works by converting both time strings to seconds, adding them together, and then\n * converting the result back to an HH:MM:SS format.\n *\n * @param {string} first - The first time string in HH:MM:SS format.\n * @param {string} second - The second time string in HH:MM:SS format.\n * @param {RegExp|string} timeRegex - The regular expression used to validate and parse the time strings.\n *                                   If a string is provided, it will be converted to a RegExp.\n * @return {string} A new time string in HH:MM:SS format representing the sum of the two input times.\n *\n * @example\n * // Returns \"02:00:00\" (1 hour + 1 hour = 2 hours)\n * addHHMMSSTimeStrings(\"01:00:00\", \"01:00:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:00\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:45\" (1 hour + 30 minutes and 45 seconds = 1 hour, 30 minutes, and 45 seconds)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport function addHHMMSSTimeStrings(\n  first: string,\n  second: string,\n  timeRegex: RegExp | string,\n): string {\n  if (typeof timeRegex === \"string\") {\n    timeRegex = new RegExp(timeRegex);\n  }\n  return getSecondsAsHHMMSS(\n    getTimeAsSeconds(first, timeRegex) + getTimeAsSeconds(second, timeRegex),\n  );\n}\n\n/**\n * Flattens a nested JSON object into a flat object with dot notation for nested properties.\n * This function recursively traverses the object and creates new keys using dot notation\n * for nested objects and bracket notation for arrays.\n *\n * @param {StringKeyMap} data - The nested object to flatten.\n * @return {StringKeyMap} A flattened object where nested properties are represented with dot notation.\n *\n * @example\n * // Returns { \"a\": 1, \"b.c\": 2, \"b.d\": 3, \"e[0]\": 4, \"e[1]\": 5 }\n * flatten({\n *   a: 1,\n *   b: { c: 2, d: 3 },\n *   e: [4, 5]\n * });\n *\n * @example\n * // Returns { \"\": [] } for an empty array\n * flatten([]);\n *\n * @example\n * // Returns { \"\": {} } for an empty object\n * flatten({});\n */\nexport function flatten(data: StringKeyMap): StringKeyMap {\n  const result: StringKeyMap = {};\n\n  /**\n   * Recurse through the object\n   * @param {*} cur\n   * @param {*} prop\n   */\n  function recurse(cur: any, prop: any) {\n    if (Object(cur) !== cur) {\n      result[prop] = cur;\n    } else if (Array.isArray(cur)) {\n      // Use forEach instead of for loop\n      cur.forEach((item, i) => {\n        recurse(item, `${prop}[${i}]`);\n      });\n\n      if (cur.length === 0) result[prop] = [];\n    } else {\n      const keys = Object.keys(cur).filter((p) => Object.prototype.hasOwnProperty.call(cur, p));\n\n      const isEmpty = keys.length === 0;\n\n      // Use forEach instead of for...in loop\n      keys.forEach((p) => {\n        recurse(cur[p], prop ? `${prop}.${p}` : p);\n      });\n\n      if (isEmpty && prop) result[prop] = {};\n    }\n  }\n\n  recurse(data, \"\");\n  return result;\n}\n\n/**\n * Converts a flattened object back into a nested object structure.\n * This function is the inverse of `flatten()`. It parses dot notation and bracket notation\n * in property names to recreate the original nested structure.\n *\n * @param {StringKeyMap} data - The flattened object to unflatten.\n * @return {object} A nested object recreated from the flattened structure.\n *\n * @example\n * // Returns { a: 1, b: { c: 2, d: 3 }, e: [4, 5] }\n * unflatten({\n *   \"a\": 1,\n *   \"b.c\": 2,\n *   \"b.d\": 3,\n *   \"e[0]\": 4,\n *   \"e[1]\": 5\n * });\n *\n * @example\n * // Handles array indices correctly\n * unflatten({\n *   \"users[0].name\": \"John\",\n *   \"users[0].email\": \"john@example.com\",\n *   \"users[1].name\": \"Jane\",\n *   \"users[1].email\": \"jane@example.com\"\n * });\n * // Returns:\n * // {\n * //   users: [\n * //     { name: \"John\", email: \"john@example.com\" },\n * //     { name: \"Jane\", email: \"jane@example.com\" }\n * //   ]\n * // }\n */\nexport function unflatten(data: StringKeyMap): object {\n  \"use strict\";\n\n  if (Object(data) !== data || Array.isArray(data)) return data;\n  const result: StringKeyMap = {};\n\n  // Regex pattern for parsing property paths\n  const pattern = /\\.?([^.[\\]]+)|\\[(\\d+)]/g;\n\n  // Get all own properties and process them\n  Object.keys(data)\n    .filter((p) => Object.prototype.hasOwnProperty.call(data, p))\n    .forEach((p) => {\n      let cur = result;\n      let prop = \"\";\n\n      // Create a new regex instance for each property to reset lastIndex\n      const regex = new RegExp(pattern);\n\n      // Process all matches in the property path\n      Array.from({ length: p.match(new RegExp(pattern, \"g\"))?.length ?? 0 }, () =>\n        regex.exec(p),\n      ).forEach((m) => {\n        if (m) {\n          // Create array or object as needed\n          cur = (cur[prop] ?? (cur[prop] = m[2] ? [] : ({} as StringKeyMap))) as StringKeyMap;\n          prop = m[2] || m[1] || \"\";\n        }\n      });\n\n      cur[prop] = data[p];\n    });\n\n  return (result[\"\"] ?? result) as object;\n}\n\n/**\n * Counts the number of decimal places in a number.\n * This function handles both integer and floating-point numbers.\n *\n * @param {number} num - The number to analyze.\n * @return {number} The number of decimal places. Returns 0 for integers or if the number doesn't have a decimal point.\n *\n * @example\n * // Returns 0\n * countDecimals(42);\n *\n * @example\n * // Returns 2\n * countDecimals(3.14);\n *\n * @example\n * // Returns 5\n * countDecimals(1.23456);\n */\nexport function countDecimals(num: number): number {\n  if (Math.floor(num) === num || String(num)?.indexOf?.(\".\") < 0) return 0;\n  const parts = num.toString().split(\".\")?.[1];\n  return parts?.length ?? 0;\n}\n\n/**\n * Formats SCORM messages for consistent and readable logging.\n * This function pads the function name and CMI element to create aligned log messages\n * that are easier to read in log files or console output.\n *\n * @param {string} functionName - The name of the function that generated the message.\n * @param {string} message - The message content to be logged.\n * @param {string} [CMIElement] - Optional. The CMI element related to the message.\n * @return {string} A formatted message string with consistent padding.\n *\n * @example\n * // Returns \"initialize          : Successfully initialized\"\n * formatMessage(\"initialize\", \"Successfully initialized\");\n *\n * @example\n * // Returns \"getValue            : cmi.core.student_id                                             : 12345\"\n * formatMessage(\"getValue\", \"12345\", \"cmi.core.student_id\");\n *\n * @example\n * // Returns \"setValue            : cmi.core.lesson_status                                          : completed\"\n * formatMessage(\"setValue\", \"completed\", \"cmi.core.lesson_status\");\n */\nexport function formatMessage(functionName: string, message: string, CMIElement?: string): string {\n  const baseLength = 20;\n\n  // Use string padding instead of loops\n  const paddedFunction = functionName.padEnd(baseLength);\n  let messageString = `${paddedFunction}: `;\n\n  if (CMIElement) {\n    const CMIElementBaseLength = 70;\n    // Add CMIElement and pad to the required length\n    messageString += CMIElement;\n    messageString = messageString.padEnd(CMIElementBaseLength);\n  }\n\n  // Add the message (or empty string if null/undefined)\n  messageString += message ?? \"\";\n\n  return messageString;\n}\n\n/**\n * Checks if a string contains a specific pattern using regular expression matching.\n * This function is a wrapper around JavaScript's String.match() method that handles\n * null/undefined values gracefully.\n *\n * @param {string} str - The string to search within. If null or undefined, returns false.\n * @param {string} tester - The pattern to search for. Can be a regular expression pattern.\n * @return {boolean} True if the pattern is found in the string, false otherwise.\n *\n * @example\n * // Returns true\n * stringMatches(\"Hello, world!\", \"world\");\n *\n * @example\n * // Returns true\n * stringMatches(\"The quick brown fox\", \"\\\\w+\\\\s+\\\\w+\");\n *\n * @example\n * // Returns false\n * stringMatches(\"Hello, world!\", \"universe\");\n *\n * @example\n * // Returns false (handles null gracefully)\n * stringMatches(null, \"test\");\n */\nexport function stringMatches(str: string | null | undefined, tester: string): boolean {\n  if (typeof str !== \"string\") {\n    return false;\n  }\n  return new RegExp(tester).test(str);\n}\n\n/**\n * Creates a memoized (cached) version of a function for performance optimization.\n * This function caches the results of previous calls with the same arguments,\n * avoiding redundant calculations for repeated calls with the same input.\n *\n * @template T - The type of the function to memoize\n * @param {T} fn - The function to memoize\n * @param {Function} [keyFn] - Optional function to generate a custom cache key.\n *                           Useful for functions with complex arguments that can't be serialized.\n * @return {T} A memoized version of the input function with the same signature\n *\n * @example\n * // Basic usage with a simple function\n * const memoizedAdd = memoize((a, b) => {\n *   console.log('Calculating...');\n *   return a + b;\n * });\n *\n * memoizedAdd(1, 2); // Logs \"Calculating...\" and returns 3\n * memoizedAdd(1, 2); // Returns 3 without logging (uses cached result)\n *\n * @example\n * // Using a custom key function for objects that can't be serialized\n * const memoizedProcessUser = memoize(\n *   (user) => {\n *     console.log('Processing user...');\n *     return { ...user, processed: true };\n *   },\n *   (user) => user.id // Use user.id as the cache key\n * );\n *\n * memoizedProcessUser({ id: 123, name: 'John' }); // Logs and processes\n * memoizedProcessUser({ id: 123, name: 'John' }); // Uses cached result\n */\nexport function memoize<T extends (...args: any[]) => any>(\n  fn: T,\n  keyFn?: (...args: Parameters<T>) => string,\n): T {\n  const cache = new Map<string, ReturnType<T>>();\n\n  return ((...args: Parameters<T>): ReturnType<T> => {\n    const key = keyFn ? keyFn(...args) : JSON.stringify(args);\n\n    return cache.has(key)\n      ? (cache.get(key) as ReturnType<T>)\n      : (() => {\n          const result = fn(...args);\n          cache.set(key, result);\n          return result;\n        })();\n  }) as T;\n}\n","import { BaseScormValidationError } from \"../../exceptions\";\nimport { memoize } from \"../../utilities\";\n\n/**\n * Check if the value matches the proper format. If not, throw proper error code.\n *\n * @param {string} value\n * @param {string} regexPattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @param {boolean} [allowEmptyString]\n * @return {boolean}\n */\nexport const checkValidFormat = memoize(\n  (\n    CMIElement: string,\n    value: string,\n    regexPattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n    allowEmptyString?: boolean,\n  ): boolean => {\n    // noinspection SuspiciousTypeOfGuard\n    if (typeof value !== \"string\") {\n      return false;\n    }\n    const formatRegex = new RegExp(regexPattern);\n    const matches = value.match(formatRegex);\n    if (allowEmptyString && value === \"\") {\n      return true;\n    }\n    if (value === undefined || !matches || matches[0] === \"\") {\n      throw new errorClass(CMIElement, errorCode);\n    }\n    return true;\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, regexPattern, errorCode, _errorClass, allowEmptyString) => {\n    // Use typeof for non-string values to ensure consistent cache keys\n    // noinspection SuspiciousTypeOfGuard\n    const valueKey = typeof value === \"string\" ? value : `[${typeof value}]`;\n    return `${CMIElement}:${valueKey}:${regexPattern}:${errorCode}:${allowEmptyString || false}`;\n  },\n);\n\n/**\n * Check if the value matches the proper range. If not, throw proper error code.\n *\n * @param {any} value\n * @param {string} rangePattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @return {boolean}\n */\nexport const checkValidRange = memoize(\n  (\n    CMIElement: string,\n    value: any,\n    rangePattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean => {\n    const ranges = rangePattern.split(\"#\");\n    value = value * 1.0;\n    if (ranges[0] && value >= ranges[0]) {\n      if (ranges[1] && (ranges[1] === \"*\" || value <= ranges[1])) {\n        return true;\n      } else {\n        throw new errorClass(CMIElement, errorCode);\n      }\n    } else {\n      throw new errorClass(CMIElement, errorCode);\n    }\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, rangePattern, errorCode, _errorClass) =>\n    `${CMIElement}:${value}:${rangePattern}:${errorCode}`,\n);\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm12_errors.TYPE_MISMATCH as number,\n    Scorm12ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidRange(\n  CMIElement: string,\n  value: any,\n  rangePattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  if (!allowEmptyString && value === \"\") {\n    throw new Scorm12ValidationError(CMIElement, scorm12_errors.VALUE_OUT_OF_RANGE as number);\n  }\n\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm12_errors.VALUE_OUT_OF_RANGE as number,\n    Scorm12ValidationError,\n  );\n}\n","import { BaseScormValidationError } from \"../exceptions\";\nimport { checkValidFormat, checkValidRange } from \"../cmi/common/validation\";\nimport { check12ValidFormat, check12ValidRange } from \"../cmi/scorm12/validation\";\nimport { scorm12_regex } from \"../constants/regex\";\nimport { scorm12_errors } from \"../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../exceptions/scorm12_exceptions\";\n\n/**\n * Service for validating CMI data model properties\n */\nexport class ValidationService {\n  /**\n   * Validates a score property (raw, min, max)\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @param {string} decimalRegex - The regex pattern for decimal validation\n   * @param {string | false} scoreRange - The range pattern for score validation, or false if no range validation is needed\n   * @param {number} invalidTypeCode - The error code for invalid type\n   * @param {number} invalidRangeCode - The error code for invalid range\n   * @param {typeof BaseScormValidationError} errorClass - The error class to use for validation errors\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScore(\n    CMIElement: string,\n    value: string,\n    decimalRegex: string,\n    scoreRange: string | false,\n    invalidTypeCode: number,\n    invalidRangeCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean {\n    return (\n      checkValidFormat(CMIElement, value, decimalRegex, invalidTypeCode, errorClass) &&\n      (!scoreRange || checkValidRange(CMIElement, value, scoreRange, invalidRangeCode, errorClass))\n    );\n    // This line should never be reached due to exceptions being thrown\n  }\n\n  /**\n   * Validates a SCORM 1.2 audio property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Audio(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.audio_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 language property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Language(CMIElement: string, value: string): boolean {\n    return check12ValidFormat(CMIElement, value, scorm12_regex.CMIString256);\n  }\n\n  /**\n   * Validates a SCORM 1.2 speed property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Speed(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.speed_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 text property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Text(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.text_range)\n    );\n  }\n\n  /**\n   * Validates if a property is read-only\n   *\n   * @param {string} CMIElement\n   * @param {boolean} initialized - Whether the object is initialized\n   * @throws {BaseScormValidationError} - Throws an error if the object is initialized\n   */\n  validateReadOnly(CMIElement: string, initialized: boolean): void {\n    if (initialized) {\n      throw new Scorm12ValidationError(CMIElement, scorm12_errors.READ_ONLY_ELEMENT as number);\n    }\n  }\n}\n\n// Export a singleton instance of the ValidationService\nexport const validationService = new ValidationService();\n","import { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"./base_cmi\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { validationService } from \"../../services/ValidationService\";\nimport { ScoreObject } from \"../../types/api_types\";\n\n/**\n * Base class for cmi *.score objects\n */\nexport class CMIScore extends BaseCMI {\n  private readonly __children: string;\n  private readonly __score_range: string | false;\n  private readonly __invalid_error_code: number;\n  private readonly __invalid_type_code: number;\n  private readonly __invalid_range_code: number;\n  private readonly __decimal_regex: string;\n  private readonly __error_class: typeof BaseScormValidationError;\n  protected _raw = \"\";\n  protected _min = \"\";\n  protected _max: string;\n\n  /**\n   * Constructor for *.score\n   * @param {\n   *     score_children: string,\n   *     score_range: string,\n   *     max: string,\n   *     invalidErrorCode: number,\n   *     invalidTypeCode: number,\n   *     invalidRangeCode: number,\n   *     decimalRegex: string,\n   *     errorClass: typeof BaseScormValidationError\n   * } params\n   */\n  constructor(params: {\n    CMIElement: string;\n    score_children?: string;\n    score_range?: string;\n    max?: string;\n    invalidErrorCode?: number;\n    invalidTypeCode?: number;\n    invalidRangeCode?: number;\n    decimalRegex?: string;\n    errorClass: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n\n    this.__children = params.score_children || scorm12_constants.score_children;\n    this.__score_range = !params.score_range ? false : scorm12_regex.score_range;\n    this._max = params.max || params.max === \"\" ? params.max : \"100\";\n    this.__invalid_error_code =\n      params.invalidErrorCode || (scorm12_errors.INVALID_SET_VALUE as number);\n    this.__invalid_type_code = params.invalidTypeCode || (scorm12_errors.TYPE_MISMATCH as number);\n    this.__invalid_range_code =\n      params.invalidRangeCode || (scorm12_errors.VALUE_OUT_OF_RANGE as number);\n    this.__decimal_regex = params.decimalRegex || scorm12_regex.CMIDecimal;\n    this.__error_class = params.errorClass;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this.__error_class(this._cmi_element + \"._children\", this.__invalid_error_code);\n  }\n\n  /**\n   * Getter for _raw\n   * @return {string}\n   */\n  get raw(): string {\n    return this._raw;\n  }\n\n  /**\n   * Setter for _raw\n   * @param {string} raw\n   */\n  set raw(raw: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".raw\",\n        raw,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._raw = raw;\n    }\n  }\n\n  /**\n   * Getter for _min\n   * @return {string}\n   */\n  get min(): string {\n    return this._min;\n  }\n\n  /**\n   * Setter for _min\n   * @param {string} min\n   */\n  set min(min: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".min\",\n        min,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._min = min;\n    }\n  }\n\n  /**\n   * Getter for _max\n   * @return {string}\n   */\n  get max(): string {\n    return this._max;\n  }\n\n  /**\n   * Setter for _max\n   * @param {string} max\n   */\n  set max(max: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".max\",\n        max,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._max = max;\n    }\n  }\n\n  /**\n   * Getter for _score_range\n   * @return {string | false}\n   */\n  public getScoreObject(): ScoreObject {\n    const scoreObject: ScoreObject = {};\n    if (!Number.isNaN(Number.parseFloat(this.raw))) {\n      scoreObject.raw = Number.parseFloat(this.raw);\n    }\n    if (!Number.isNaN(Number.parseFloat(this.min))) {\n      scoreObject.min = Number.parseFloat(this.min);\n    }\n    if (!Number.isNaN(Number.parseFloat(this.max))) {\n      scoreObject.max = Number.parseFloat(this.max);\n    }\n    return scoreObject;\n  }\n\n  /**\n   * toJSON for *.score\n   * @return {\n   *    {\n   *      min: string,\n   *      max: string,\n   *      raw: string\n   *    }\n   *    }\n   */\n  toJSON(): {\n    min: string;\n    max: string;\n    raw: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { check12ValidFormat } from \"../scorm12/validation\";\nimport * as Util from \"../../utilities\";\n\n/**\n * Class representing the `cmi.core` object\n * @extends BaseCMI\n */\nexport class CMICore extends BaseCMI {\n  /**\n   * Constructor for `cmi.core`\n   */\n  constructor() {\n    super(\"cmi.core\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.core.score\",\n      score_children: scorm12_constants.score_children,\n      score_range: scorm12_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE as number,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH as number,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE as number,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n\n  public readonly score: CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  private readonly __children = scorm12_constants.core_children;\n  private _student_id = \"\";\n  private _student_name = \"\";\n  private _lesson_location = \"\";\n  private _credit = \"\";\n  private _lesson_status = \"not attempted\";\n  private _entry = \"\";\n  private _total_time = \"\";\n  private _lesson_mode = \"normal\";\n  private _exit = \"\";\n  private _session_time = \"00:00:00\";\n  private _suspend_data = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._exit = \"\";\n    this._entry = \"\";\n\n    /**\n     * Resetting ensures we accurately track the time spent on each SCO session independently.\n     * Each new session should start from zero, so we can reset cmi.core.session_time at the beginning of each session.\n     */\n    this._session_time = \"00:00:00\";\n\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE as number,\n    );\n  }\n\n  /**\n   * Getter for _student_id\n   * @return {string}\n   */\n  get student_id(): string {\n    return this._student_id;\n  }\n\n  /**\n   * Setter for _student_id. Can only be called before  initialization.\n   * @param {string} student_id\n   */\n  set student_id(student_id: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".student_id\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._student_id = student_id;\n    }\n  }\n\n  /**\n   * Getter for _student_name\n   * @return {string}\n   */\n  get student_name(): string {\n    return this._student_name;\n  }\n\n  /**\n   * Setter for _student_name. Can only be called before  initialization.\n   * @param {string} student_name\n   */\n  set student_name(student_name: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".student_name\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._student_name = student_name;\n    }\n  }\n\n  /**\n   * Getter for _lesson_location\n   * @return {string}\n   */\n  get lesson_location(): string {\n    return this._lesson_location;\n  }\n\n  /**\n   * Setter for _lesson_location\n   * @param {string} lesson_location\n   */\n  set lesson_location(lesson_location: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".lesson_location\",\n        lesson_location,\n        scorm12_regex.CMIString256,\n        true,\n      )\n    ) {\n      this._lesson_location = lesson_location;\n    }\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this._credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before  initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".credit\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._credit = credit;\n    }\n  }\n\n  /**\n   * Getter for _lesson_status\n   * @return {string}\n   */\n  get lesson_status(): string {\n    return this._lesson_status;\n  }\n\n  /**\n   * Setter for _lesson_status\n   * @param {string} lesson_status\n   */\n  set lesson_status(lesson_status: string) {\n    if (this.initialized) {\n      if (\n        check12ValidFormat(\n          this._cmi_element + \".lesson_status\",\n          lesson_status,\n          scorm12_regex.CMIStatus,\n        )\n      ) {\n        this._lesson_status = lesson_status;\n      }\n    } else {\n      if (\n        check12ValidFormat(\n          this._cmi_element + \".lesson_status\",\n          lesson_status,\n          scorm12_regex.CMIStatus2,\n        )\n      ) {\n        this._lesson_status = lesson_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this._entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before  initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".entry\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._entry = entry;\n    }\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this._total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before  initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".total_time\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._total_time = total_time;\n    }\n  }\n\n  /**\n   * Getter for _lesson_mode\n   * @return {string}\n   */\n  get lesson_mode(): string {\n    return this._lesson_mode;\n  }\n\n  /**\n   * Setter for _lesson_mode. Can only be called before  initialization.\n   * @param {string} lesson_mode\n   */\n  set lesson_mode(lesson_mode: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".lesson_mode\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._lesson_mode = lesson_mode;\n    }\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".exit\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    if (check12ValidFormat(this._cmi_element + \".exit\", exit, scorm12_regex.CMIExit, true)) {\n      this._exit = exit;\n    }\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".session_time\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".session_time\",\n        session_time,\n        scorm12_regex.CMITimespan,\n      )\n    ) {\n      this._session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this._suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".suspend_data\",\n        suspend_data,\n        scorm12_regex.CMIString4096,\n        true,\n      )\n    ) {\n      this._suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   * @param {number} start_time\n   * @return {string}\n   */\n  getCurrentTotalTime(start_time: number | undefined): string {\n    let sessionTime = this._session_time;\n    if (typeof start_time !== \"undefined\" && start_time !== null) {\n      const seconds = new Date().getTime() - start_time;\n      sessionTime = Util.getSecondsAsHHMMSS(seconds / 1000);\n    }\n\n    return Util.addHHMMSSTimeStrings(\n      this._total_time,\n      sessionTime,\n      new RegExp(scorm12_regex.CMITimespan),\n    );\n  }\n\n  /**\n   * toJSON for cmi.core\n   *\n   * @return {\n   *    {\n   *      student_name: string,\n   *      entry: string,\n   *      exit: string,\n   *      score: CMIScore,\n   *      student_id: string,\n   *      lesson_mode: string,\n   *      lesson_location: string,\n   *      lesson_status: string,\n   *      credit: string,\n   *      session_time: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    student_name: string;\n    entry: string;\n    exit: string;\n    score: CMIScore;\n    student_id: string;\n    lesson_mode: string;\n    lesson_location: string;\n    lesson_status: string;\n    credit: string;\n    session_time: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      student_id: this.student_id,\n      student_name: this.student_name,\n      lesson_location: this.lesson_location,\n      credit: this.credit,\n      lesson_status: this.lesson_status,\n      entry: this.entry,\n      lesson_mode: this.lesson_mode,\n      exit: this.exit,\n      session_time: this.session_time,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"./base_cmi\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Base class for cmi *.n objects\n */\nexport class CMIArray extends BaseCMI {\n  private readonly _errorCode: number;\n  private readonly _errorClass: typeof BaseScormValidationError;\n  private readonly __children: string;\n  public childArray: any[];\n\n  /**\n   * Constructor cmi *.n arrays\n   * @param {object} params\n   */\n  constructor(params: {\n    CMIElement: string;\n    children: string;\n    errorCode?: number;\n    errorClass?: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n    this.__children = params.children;\n    this._errorCode = params.errorCode || (scorm12_errors.GENERAL as number);\n    this._errorClass = params.errorClass || BaseScormValidationError;\n    this.childArray = [];\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(wipe: boolean = false): void {\n    this._initialized = false;\n    if (wipe) {\n      this.childArray = [];\n    } else {\n      // Reset all children\n      for (let i = 0; i < this.childArray.length; i++) {\n        this.childArray[i].reset();\n      }\n    }\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this._errorClass(this._cmi_element + \"._children\", this._errorCode);\n  }\n\n  /**\n   * Getter for _count\n   * @return {number}\n   */\n  get _count(): number {\n    return this.childArray.length;\n  }\n\n  /**\n   * Setter for _count. Just throws an error.\n   * @param {number} _count\n   */\n  set _count(_count: number) {\n    throw new this._errorClass(this._cmi_element + \"._count\", this._errorCode);\n  }\n\n  /**\n   * toJSON for *.n arrays\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result: { [key: string]: any } = {};\n    for (let i = 0; i < this.childArray.length; i++) {\n      result[i + \"\"] = this.childArray[i];\n    }\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { check12ValidFormat } from \"./validation\";\nimport { CMIArray } from \"../common/array\";\n\n/**\n * Class representing SCORM 1.2's `cmi.objectives` object\n * @extends CMIArray\n */\nexport class CMIObjectives extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives`\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.objectives\",\n      children: scorm12_constants.objectives_children,\n      errorCode: scorm12_errors.INVALID_SET_VALUE as number,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super(\"cmi.objectives.n\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.objectives.n.score\",\n      score_children: scorm12_constants.score_children,\n      score_range: scorm12_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE as number,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH as number,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE as number,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n\n  public readonly score: CMIScore;\n\n  private _id = \"\";\n  private _status = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._id = \"\";\n    this._status = \"\";\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check12ValidFormat(this._cmi_element + \".id\", id, scorm12_regex.CMIIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _status\n   * @return {string}\n   */\n  get status(): string {\n    return this._status;\n  }\n\n  /**\n   * Setter for _status\n   * @param {string} status\n   */\n  set status(status: string) {\n    if (check12ValidFormat(this._cmi_element + \".status\", status, scorm12_regex.CMIStatus2)) {\n      this._status = status;\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   * @return {\n   *    {\n   *      id: string,\n   *      status: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    status: string;\n    score: CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      status: this.status,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { validationService } from \"../../services/ValidationService\";\n\n/**\n * Class representing the SCORM 1.2 cmi.student_data object\n * @extends BaseCMI\n */\nexport class CMIStudentData extends BaseCMI {\n  private readonly __children;\n  private _mastery_score = \"\";\n  private _max_time_allowed = \"\";\n  private _time_limit_action = \"\";\n\n  /**\n   * Constructor for cmi.student_data\n   * @param {string} student_data_children\n   */\n  constructor(student_data_children?: string) {\n    super(\"cmi.student_data\");\n    this.__children = student_data_children\n      ? student_data_children\n      : scorm12_constants.student_data_children;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE as number,\n    );\n  }\n\n  /**\n   * Getter for _master_score\n   * @return {string}\n   */\n  get mastery_score(): string {\n    return this._mastery_score;\n  }\n\n  /**\n   * Setter for _master_score. Can only be called before  initialization.\n   * @param {string} mastery_score\n   */\n  set mastery_score(mastery_score: string) {\n    validationService.validateReadOnly(this._cmi_element + \".mastery_score\", this.initialized);\n    this._mastery_score = mastery_score;\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this._max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before  initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    validationService.validateReadOnly(this._cmi_element + \".max_time_allowed\", this.initialized);\n    this._max_time_allowed = max_time_allowed;\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this._time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before  initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    validationService.validateReadOnly(this._cmi_element + \".time_limit_action\", this.initialized);\n    this._time_limit_action = time_limit_action;\n  }\n\n  /**\n   * toJSON for cmi.student_data\n   *\n   * @return {\n   *    {\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      mastery_score: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    mastery_score: string;\n    max_time_allowed: string;\n    time_limit_action: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      mastery_score: this.mastery_score,\n      max_time_allowed: this.max_time_allowed,\n      time_limit_action: this.time_limit_action,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { validationService } from \"../../services/ValidationService\";\n\n/**\n * Class representing the SCORM 1.2 cmi.student_preference object\n * @extends BaseCMI\n */\nexport class CMIStudentPreference extends BaseCMI {\n  private readonly __children;\n\n  /**\n   * Constructor for cmi.student_preference\n   * @param {string} student_preference_children\n   */\n  constructor(student_preference_children?: string) {\n    super(\"cmi.student_preference\");\n    this.__children = student_preference_children\n      ? student_preference_children\n      : scorm12_constants.student_preference_children;\n  }\n\n  private _audio = \"\";\n  private _language = \"\";\n  private _speed = \"\";\n  private _text = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE as number,\n    );\n  }\n\n  /**\n   * Getter for _audio\n   * @return {string}\n   */\n  get audio(): string {\n    return this._audio;\n  }\n\n  /**\n   * Setter for _audio\n   * @param {string} audio\n   */\n  set audio(audio: string) {\n    if (validationService.validateScorm12Audio(this._cmi_element + \".audio\", audio)) {\n      this._audio = audio;\n    }\n  }\n\n  /**\n   * Getter for _language\n   * @return {string}\n   */\n  get language(): string {\n    return this._language;\n  }\n\n  /**\n   * Setter for _language\n   * @param {string} language\n   */\n  set language(language: string) {\n    if (validationService.validateScorm12Language(this._cmi_element + \".language\", language)) {\n      this._language = language;\n    }\n  }\n\n  /**\n   * Getter for _speed\n   * @return {string}\n   */\n  get speed(): string {\n    return this._speed;\n  }\n\n  /**\n   * Setter for _speed\n   * @param {string} speed\n   */\n  set speed(speed: string) {\n    if (validationService.validateScorm12Speed(this._cmi_element + \".speed\", speed)) {\n      this._speed = speed;\n    }\n  }\n\n  /**\n   * Getter for _text\n   * @return {string}\n   */\n  get text(): string {\n    return this._text;\n  }\n\n  /**\n   * Setter for _text\n   * @param {string} text\n   */\n  set text(text: string) {\n    if (validationService.validateScorm12Text(this._cmi_element + \".text\", text)) {\n      this._text = text;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_preference\n   *\n   * @return {\n   *    {\n   *      audio: string,\n   *      language: string,\n   *      speed: string,\n   *      text: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    audio: string;\n    language: string;\n    speed: string;\n    text: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio: this.audio,\n      language: this.language,\n      speed: this.speed,\n      text: this.text,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check12ValidFormat, check12ValidRange } from \"./validation\";\nimport { scorm12_regex } from \"../../constants/regex\";\n\n/**\n * Class representing the SCORM 1.2 `cmi.interactions`\n * @extends CMIArray\n */\nexport class CMIInteractions extends CMIArray {\n  /**\n   * Constructor for `cmi.interactions`\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.interactions\",\n      children: scorm12_constants.interactions_children,\n      errorCode: scorm12_errors.INVALID_SET_VALUE as number,\n      errorClass: Scorm12ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n object\n   */\n  constructor() {\n    super(\"cmi.interactions.n\");\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm12_errors.INVALID_SET_VALUE as number,\n      errorClass: Scorm12ValidationError,\n      children: scorm12_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.correct_responses\",\n      errorCode: scorm12_errors.INVALID_SET_VALUE as number,\n      errorClass: Scorm12ValidationError,\n      children: scorm12_constants.correct_responses_children,\n    });\n  }\n\n  public readonly objectives: CMIArray;\n  public readonly correct_responses: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  private _id = \"\";\n  private _time = \"\";\n  private _type = \"\";\n  private _weighting = \"\";\n  private _student_response = \"\";\n  private _result = \"\";\n  private _latency = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n\n    this._id = \"\";\n    this._time = \"\";\n    this._type = \"\";\n    this._weighting = \"\";\n    this._student_response = \"\";\n    this._result = \"\";\n    this._latency = \"\";\n\n    this.objectives?.reset();\n    this.correct_responses?.reset();\n  }\n\n  /**\n   * Getter for _id. Should only be called during JSON export.\n   * @return {string}\n   */\n  get id(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".id\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check12ValidFormat(this._cmi_element + \".id\", id, scorm12_regex.CMIIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get time(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".time\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._time;\n  }\n\n  /**\n   * Setter for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (check12ValidFormat(this._cmi_element + \".time\", time, scorm12_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * Getter for _type. Should only be called during JSON export.\n   * @return {string}\n   */\n  get type(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".type\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._type;\n  }\n\n  /**\n   * Setter for _type\n   * @param {string} type\n   */\n  set type(type: string) {\n    if (check12ValidFormat(this._cmi_element + \".type\", type, scorm12_regex.CMIType)) {\n      this._type = type;\n    }\n  }\n\n  /**\n   * Getter for _weighting. Should only be called during JSON export.\n   * @return {string}\n   */\n  get weighting(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".weighting\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._weighting;\n  }\n\n  /**\n   * Setter for _weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting: string) {\n    if (\n      check12ValidFormat(this._cmi_element + \".weighting\", weighting, scorm12_regex.CMIDecimal) &&\n      check12ValidRange(this._cmi_element + \".weighting\", weighting, scorm12_regex.weighting_range)\n    ) {\n      this._weighting = weighting;\n    }\n  }\n\n  /**\n   * Getter for _student_response. Should only be called during JSON export.\n   * @return {string}\n   */\n  get student_response(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".student_response\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._student_response;\n  }\n\n  /**\n   * Setter for _student_response\n   * @param {string} student_response\n   */\n  set student_response(student_response: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".student_response\",\n        student_response,\n        scorm12_regex.CMIFeedback,\n        true,\n      )\n    ) {\n      this._student_response = student_response;\n    }\n  }\n\n  /**\n   * Getter for _result. Should only be called during JSON export.\n   * @return {string}\n   */\n  get result(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".result\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._result;\n  }\n\n  /**\n   * Setter for _result\n   * @param {string} result\n   */\n  set result(result: string) {\n    if (check12ValidFormat(this._cmi_element + \".result\", result, scorm12_regex.CMIResult)) {\n      this._result = result;\n    }\n  }\n\n  /**\n   * Getter for _latency. Should only be called during JSON export.\n   * @return {string}\n   */\n  get latency(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".latency\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._latency;\n  }\n\n  /**\n   * Setter for _latency\n   * @param {string} latency\n   */\n  set latency(latency: string) {\n    if (check12ValidFormat(this._cmi_element + \".latency\", latency, scorm12_regex.CMITimespan)) {\n      this._latency = latency;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      time: string,\n   *      type: string,\n   *      weighting: string,\n   *      student_response: string,\n   *      result: string,\n   *      latency: string,\n   *      objectives: CMIArray,\n   *      correct_responses: CMIArray\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    time: string;\n    type: string;\n    weighting: string;\n    student_response: string;\n    result: string;\n    latency: string;\n    objectives: CMIArray;\n    correct_responses: CMIArray;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      time: this.time,\n      type: this.type,\n      weighting: this.weighting,\n      student_response: this.student_response,\n      result: this.result,\n      latency: this.latency,\n      objectives: this.objectives,\n      correct_responses: this.correct_responses,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n.objectives.n\");\n  }\n\n  private _id = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._id = \"\";\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check12ValidFormat(this._cmi_element + \".id\", id, scorm12_regex.CMIIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.correct_responses.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.correct_responses.n\n   */\n  constructor() {\n    super(\"cmi.interactions.correct_responses.n\");\n  }\n\n  private _pattern = \"\";\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._pattern = \"\";\n  }\n\n  /**\n   * Getter for _pattern\n   * @return {string}\n   */\n  get pattern(): string {\n    if (!this.jsonString) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".pattern\",\n        scorm12_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._pattern;\n  }\n\n  /**\n   * Setter for _pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern: string) {\n    if (\n      check12ValidFormat(this._cmi_element + \".pattern\", pattern, scorm12_regex.CMIFeedback, true)\n    ) {\n      this._pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.correct_responses.n\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    pattern: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      pattern: this._pattern,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\nimport { BaseRootCMI } from \"../common/base_cmi\";\nimport { check12ValidFormat } from \"./validation\";\nimport { CMICore } from \"../aicc/core\";\nimport { CMIObjectives } from \"./objectives\";\nimport { CMIStudentData } from \"./student_data\";\nimport { CMIStudentPreference } from \"./student_preference\";\nimport { CMIInteractions } from \"./interactions\";\n\n/**\n * Class representing the cmi object for SCORM 1.2\n */\nexport class CMI extends BaseRootCMI {\n  private readonly __children: string = \"\";\n  private __version: string = \"3.4\";\n  private _launch_data: string = \"\";\n  private _comments: string = \"\";\n  private _comments_from_lms: string = \"\";\n\n  /**\n   * Constructor for the SCORM 1.2 cmi object\n   * @param {string} cmi_children\n   * @param {(CMIStudentData|AICCCMIStudentData)} student_data\n   * @param {boolean} initialized\n   */\n  constructor(cmi_children?: string, student_data?: CMIStudentData, initialized?: boolean) {\n    super(\"cmi\");\n    if (initialized) this.initialize();\n    this.__children = cmi_children ? cmi_children : scorm12_constants.cmi_children;\n    this.core = new CMICore();\n    this.objectives = new CMIObjectives();\n    this.student_data = student_data ? student_data : new CMIStudentData();\n    this.student_preference = new CMIStudentPreference();\n    this.interactions = new CMIInteractions();\n  }\n\n  public core: CMICore;\n  public objectives: CMIObjectives;\n  public student_data: CMIStudentData;\n  public student_preference: CMIStudentPreference;\n  public interactions: CMIInteractions;\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._launch_data = \"\";\n    this._comments = \"\";\n    this.core?.reset();\n    this.objectives = new CMIObjectives();\n    this.interactions = new CMIInteractions();\n    this.student_data?.reset();\n    this.student_preference?.reset();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.core?.initialize();\n    this.objectives?.initialize();\n    this.student_data?.initialize();\n    this.student_preference?.initialize();\n    this.interactions?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions\n   *    }\n   *  }\n   */\n  toJSON(): {\n    suspend_data: string;\n    launch_data: string;\n    comments: string;\n    comments_from_lms: string;\n    core: CMICore;\n    objectives: CMIObjectives;\n    student_data: CMIStudentData;\n    student_preference: CMIStudentPreference;\n    interactions: CMIInteractions;\n  } {\n    this.jsonString = true;\n    const result = {\n      suspend_data: this.suspend_data,\n      launch_data: this.launch_data,\n      comments: this.comments,\n      comments_from_lms: this.comments_from_lms,\n      core: this.core,\n      objectives: this.objectives,\n      student_data: this.student_data,\n      student_preference: this.student_preference,\n      interactions: this.interactions,\n    };\n    this.jsonString = false;\n    return result;\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   */\n  get _version(): string {\n    return this.__version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._version\",\n      scorm12_errors.INVALID_SET_VALUE as number,\n    );\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new Scorm12ValidationError(\n      this._cmi_element + \"._children\",\n      scorm12_errors.INVALID_SET_VALUE as number,\n    );\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this.core?.suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (this.core) {\n      this.core.suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this._launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before  initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".launch_data\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._launch_data = launch_data;\n    }\n  }\n\n  /**\n   * Getter for _comments\n   * @return {string}\n   */\n  get comments(): string {\n    return this._comments;\n  }\n\n  /**\n   * Setter for _comments\n   * @param {string} comments\n   */\n  set comments(comments: string) {\n    if (\n      check12ValidFormat(\n        this._cmi_element + \".comments\",\n        comments,\n        scorm12_regex.CMIString4096,\n        true,\n      )\n    ) {\n      this._comments = comments;\n    }\n  }\n\n  /**\n   * Getter for _comments_from_lms\n   * @return {string}\n   */\n  get comments_from_lms(): string {\n    return this._comments_from_lms;\n  }\n\n  /**\n   * Setter for _comments_from_lms. Can only be called before  initialization.\n   * @param {string} comments_from_lms\n   */\n  set comments_from_lms(comments_from_lms: string) {\n    if (this.initialized) {\n      throw new Scorm12ValidationError(\n        this._cmi_element + \".comments_from_lms\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._comments_from_lms = comments_from_lms;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string}\n   */\n  getCurrentTotalTime(): string {\n    return this.core.getCurrentTotalTime(this.start_time);\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { check12ValidFormat } from \"./validation\";\nimport { scorm12_regex } from \"../../constants/regex\";\n\n/**\n * Class for AICC Navigation object\n */\nexport class NAV extends BaseCMI {\n  /**\n   * Constructor for NAV object\n   */\n  constructor() {\n    super(\"cmi.nav\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._event = \"\";\n    this._initialized = false;\n  }\n\n  private _event = \"\";\n\n  /**\n   * Getter for _event\n   * @return {string}\n   */\n  get event(): string {\n    return this._event;\n  }\n\n  /**\n   * Setter for _event\n   * @param {string} event\n   */\n  set event(event: string) {\n    if (\n      event === \"\" ||\n      check12ValidFormat(this._cmi_element + \".event\", event, scorm12_regex.NAVEvent)\n    ) {\n      this._event = event;\n    }\n  }\n\n  /**\n   * toJSON for nav object\n   * @return {\n   *    {\n   *      event: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    event: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      event: this.event,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","// Using plain objects instead of enums for better compatibility with strip-only mode\n// This approach avoids TypeScript enum runtime code while maintaining the same API\n\n// NAVBoolean values\nexport const NAVBoolean = {\n  UNKNOWN: \"unknown\",\n  TRUE: \"true\",\n  FALSE: \"false\",\n};\n\n// Type for NAVBoolean values\nexport type NAVBoolean = (typeof NAVBoolean)[keyof typeof NAVBoolean];\n\n// SuccessStatus values\nexport const SuccessStatus = {\n  PASSED: \"passed\",\n  FAILED: \"failed\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for SuccessStatus values\nexport type SuccessStatus = (typeof SuccessStatus)[keyof typeof SuccessStatus];\n\n// CompletionStatus values\nexport const CompletionStatus = {\n  COMPLETED: \"completed\",\n  INCOMPLETE: \"incomplete\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for CompletionStatus values\nexport type CompletionStatus = (typeof CompletionStatus)[keyof typeof CompletionStatus];\n\n// LogLevelEnum values\nexport const LogLevelEnum = {\n  _: 0,\n  DEBUG: 1,\n  INFO: 2,\n  WARN: 3,\n  ERROR: 4,\n  NONE: 5,\n};\n\n// Type for LogLevelEnum values\nexport type LogLevelEnum = (typeof LogLevelEnum)[keyof typeof LogLevelEnum];\n","import { InternalSettings, LogLevel, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"./api_constants\";\nimport { LogLevelEnum } from \"./enums\";\n\n/**\n * Default settings for the SCORM API\n */\nexport const DefaultSettings: InternalSettings = {\n  autocommit: false,\n  autocommitSeconds: 10,\n  asyncCommit: false,\n  sendFullCommit: true,\n  lmsCommitUrl: false,\n  dataCommitFormat: \"json\",\n  commitRequestDataType: \"application/json;charset=UTF-8\",\n  autoProgress: false,\n  logLevel: LogLevelEnum.ERROR,\n  selfReportSessionTime: false,\n  alwaysSendTotalTime: false,\n  renderCommonCommitFields: false,\n  strict_errors: true,\n  xhrHeaders: {},\n  xhrWithCredentials: false,\n  fetchMode: \"cors\",\n  useBeaconInsteadOfFetch: \"never\",\n  responseHandler: async function (response: Response): Promise<ResultObject> {\n    if (typeof response !== \"undefined\") {\n      let httpResult = null;\n\n      // Handle both text() and json() response methods\n      try {\n        if (typeof response.json === \"function\") {\n          // Try to get JSON directly if the method exists\n          httpResult = await response.json();\n        } else if (typeof response.text === \"function\") {\n          // Fall back to text() if json() is not available\n          const responseText = await response.text();\n          if (responseText) {\n            httpResult = JSON.parse(responseText);\n          }\n        }\n      } catch (e) {\n        // If parsing fails, continue with null httpResult\n      }\n\n      if (httpResult === null || !{}.hasOwnProperty.call(httpResult, \"result\")) {\n        if (response.status === 200) {\n          return {\n            result: global_constants.SCORM_TRUE,\n            errorCode: 0,\n          };\n        } else {\n          return {\n            result: global_constants.SCORM_FALSE,\n            errorCode: 101,\n          };\n        }\n      } else {\n        return {\n          result: httpResult.result,\n          errorCode: httpResult.errorCode\n            ? httpResult.errorCode\n            : httpResult.result === global_constants.SCORM_TRUE\n              ? 0\n              : 101,\n        };\n      }\n    }\n    return {\n      result: global_constants.SCORM_FALSE,\n      errorCode: 101,\n    };\n  },\n  requestHandler: function (commitObject) {\n    return commitObject;\n  },\n  onLogMessage: defaultLogHandler,\n  scoItemIds: [],\n  scoItemIdValidator: false,\n  globalObjectiveIds: [],\n\n  // Offline support settings\n  enableOfflineSupport: false,\n  courseId: \"\",\n  syncOnInitialize: true,\n  syncOnTerminate: true,\n  maxSyncAttempts: 5,\n};\n\nexport function defaultLogHandler(messageLevel: LogLevel, logMessage: string): void {\n  switch (messageLevel) {\n    case \"4\":\n    case 4:\n    case \"ERROR\":\n    case LogLevelEnum.ERROR:\n      console.error(logMessage);\n      break;\n    case \"3\":\n    case 3:\n    case \"WARN\":\n    case LogLevelEnum.WARN:\n      console.warn(logMessage);\n      break;\n    case \"2\":\n    case 2:\n    case \"INFO\":\n    case LogLevelEnum.INFO:\n      console.info(logMessage);\n      break;\n    case \"1\":\n    case 1:\n    case \"DEBUG\":\n    case LogLevelEnum.DEBUG:\n      if (console.debug) {\n        console.debug(logMessage);\n      } else {\n        console.log(logMessage);\n      }\n      break;\n  }\n}\n","import BaseAPI from \"../BaseAPI\";\n\n/**\n * Private class that wraps a timeout call to the commit() function\n */\nexport class ScheduledCommit {\n  private _API;\n  private _cancelled = false;\n  private readonly _timeout;\n  private readonly _callback;\n\n  /**\n   * Constructor for ScheduledCommit\n   * @param {BaseAPI} API\n   * @param {number} when\n   * @param {string} callback\n   */\n  constructor(API: BaseAPI, when: number, callback: string) {\n    this._API = API;\n    this._timeout = setTimeout(this.wrapper.bind(this), when);\n    this._callback = callback;\n  }\n\n  /**\n   * Cancel any currently scheduled commit\n   */\n  cancel() {\n    this._cancelled = true;\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n  }\n\n  /**\n   * Wrap the API commit call to check if the call has already been canceled\n   */\n  wrapper() {\n    if (!this._cancelled) {\n      // Only proceed with scheduled commit if API is properly initialized\n      if (this._API.isInitialized()) {\n        (async () => await this._API.commit(this._callback))();\n      }\n    }\n  }\n}\n","import { CommitObject, InternalSettings, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { IHttpService } from \"../interfaces/services\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { StringKeyMap } from \"../utilities\";\n\n/**\n * Service for handling HTTP communication with the LMS\n */\nexport class HttpService implements IHttpService {\n  private settings: InternalSettings;\n  private error_codes: ErrorCode;\n\n  /**\n   * Constructor for HttpService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   */\n  constructor(settings: InternalSettings, error_codes: ErrorCode) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n  }\n\n  /**\n   * Sends HTTP requests to the LMS with special handling for immediate and standard requests.\n   *\n   * This method handles communication with the LMS server, implementing two distinct\n   * request handling strategies based on the context:\n   *\n   * 1. Immediate Mode (used during termination):\n   *    When immediate=true, the method:\n   *    - Initiates the fetch request but doesn't wait for it to complete\n   *    - Returns a success result immediately\n   *    - Processes the response asynchronously when it arrives\n   *\n   *    This is critical for browser compatibility during page unload/termination,\n   *    as some browsers (especially Chrome) may cancel synchronous or awaited\n   *    requests when a page is closing.\n   *\n   * 2. Standard Mode (normal operation):\n   *    When immediate=false, the method:\n   *    - Processes the request parameters through the configured requestHandler\n   *    - Awaits the fetch response completely\n   *    - Transforms the response using the configured responseHandler\n   *    - Triggers appropriate event listeners based on success/failure\n   *    - Returns the complete result with appropriate error codes\n   *\n   * The method also includes error handling to catch network failures or other\n   * exceptions that might occur during the request process.\n   *\n   * @param {string} url - The URL endpoint to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The data to send to the LMS\n   * @param {boolean} immediate - Whether to send the request immediately without waiting (true) or process normally (false)\n   * @param {Function} apiLog - Function to log API messages with appropriate levels\n   * @param {Function} processListeners - Function to trigger event listeners for commit events\n   * @return {Promise<ResultObject>} - A promise that resolves with the result of the request\n   *\n   * @example\n   * // Standard request (waits for response)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   false,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   *\n   * @example\n   * // Immediate request (for termination)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   true,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   * // result will be success immediately, regardless of actual HTTP result\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n    apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    const genericError: ResultObject = {\n      result: global_constants.SCORM_FALSE,\n      errorCode: this.error_codes.GENERAL || 101,\n    };\n\n    // If immediate mode (for termination), handle differently\n    if (immediate) {\n      return this._handleImmediateRequest(url, params, apiLog, processListeners);\n    }\n\n    // Standard request processing\n    try {\n      const processedParams = this.settings.requestHandler(params) as\n        | CommitObject\n        | StringKeyMap\n        | Array<any>;\n      const response = await this.performFetch(url, processedParams);\n      return this.transformResponse(response, processListeners);\n    } catch (e: unknown) {\n      const message = e instanceof Error ? e.message : String(e);\n\n      // Enhanced error logging with more context\n      apiLog(\"processHttpRequest\", `HTTP request failed to ${url}: ${message}`, LogLevelEnum.ERROR);\n\n      if (e instanceof Error && e.stack) {\n        apiLog(\"processHttpRequest\", `Stack trace: ${e.stack}`, LogLevelEnum.DEBUG);\n      }\n\n      // Create enhanced error object with more details\n      const enhancedError: ResultObject = {\n        ...genericError,\n        errorMessage: message,\n        errorDetails: JSON.stringify({\n          url,\n          errorType: e instanceof Error ? e.constructor.name : typeof e,\n          originalError: message,\n        }),\n      };\n\n      processListeners(\"CommitError\");\n      return enhancedError;\n    }\n  }\n\n  /**\n   * Handles an immediate request (used during termination)\n   * @param {string} url - The URL to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The parameters to include in the request\n   * @param {Function} processListeners - Function to process event listeners\n   * @return {ResultObject} - A success result object\n   * @private\n   */\n  private _handleImmediateRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): ResultObject {\n    // Use Beacon API for final commit if specified in settings\n    if (this.settings.useBeaconInsteadOfFetch !== \"never\") {\n      const { body, contentType } = this._prepareRequestBody(params);\n      navigator.sendBeacon(url, new Blob([body], { type: contentType }));\n    } else {\n      // Use regular fetch with keepalive\n      this.performFetch(url, params)\n        .then(async (response) => {\n          await this.transformResponse(response, processListeners);\n        })\n        .catch((e: unknown) => {\n          const message = e instanceof Error ? e.message : String(e);\n          apiLog(\"processHttpRequest\", message, LogLevelEnum.ERROR);\n          processListeners(\"CommitError\");\n        });\n    }\n\n    // Return success immediately without waiting for response\n    return {\n      result: global_constants.SCORM_TRUE,\n      errorCode: 0,\n    };\n  }\n\n  /**\n   * Prepares the request body and content type based on params type\n   * @param {CommitObject|StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Object} - Object containing body and contentType\n   * @private\n   */\n  private _prepareRequestBody(params: CommitObject | StringKeyMap | Array<any>): {\n    body: string;\n    contentType: string;\n  } {\n    const body = params instanceof Array ? params.join(\"&\") : JSON.stringify(params);\n    const contentType =\n      params instanceof Array\n        ? \"application/x-www-form-urlencoded\"\n        : this.settings.commitRequestDataType;\n\n    return { body, contentType };\n  }\n\n  /**\n   * Perform the fetch request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - The response from the LMS\n   * @private\n   */\n  private async performFetch(url: string, params: StringKeyMap | Array<any>): Promise<Response> {\n    // Use Beacon API if specified in settings\n    if (this.settings.useBeaconInsteadOfFetch === \"always\") {\n      return this.performBeacon(url, params);\n    }\n\n    const { body, contentType } = this._prepareRequestBody(params);\n    const init = {\n      method: \"POST\",\n      mode: this.settings.fetchMode,\n      body,\n      headers: {\n        ...this.settings.xhrHeaders,\n        \"Content-Type\": contentType,\n      },\n      keepalive: true,\n    } as RequestInit;\n\n    if (this.settings.xhrWithCredentials) {\n      init.credentials = \"include\";\n    }\n\n    return fetch(url, init);\n  }\n\n  /**\n   * Perform the beacon request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - A promise that resolves with a mock Response object\n   * @private\n   */\n  private async performBeacon(url: string, params: StringKeyMap | Array<any>): Promise<Response> {\n    const { body, contentType } = this._prepareRequestBody(params);\n\n    // Send the beacon request\n    const beaconSuccess = navigator.sendBeacon(url, new Blob([body], { type: contentType }));\n\n    // Create a mock Response object since sendBeacon doesn't return a Response\n    return Promise.resolve({\n      status: beaconSuccess ? 200 : 0,\n      ok: beaconSuccess,\n      json: async () => ({\n        result: beaconSuccess ? \"true\" : \"false\",\n        errorCode: beaconSuccess ? 0 : this.error_codes.GENERAL,\n      }),\n      text: async () =>\n        JSON.stringify({\n          result: beaconSuccess ? \"true\" : \"false\",\n          errorCode: beaconSuccess ? 0 : this.error_codes.GENERAL,\n        }),\n    } as Response);\n  }\n\n  /**\n   * Transforms the response from the LMS to a ResultObject\n   * @param {Response} response - The response from the LMS\n   * @param {Function} processListeners - Function to process event listeners\n   * @return {Promise<ResultObject>} - The transformed response\n   * @private\n   */\n  private async transformResponse(\n    response: Response,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    let result: any;\n\n    try {\n      // Parse the response using the configured handler or default to json\n      result =\n        typeof this.settings.responseHandler === \"function\"\n          ? await this.settings.responseHandler(response)\n          : await response.json();\n    } catch (parseError) {\n      // If we can't parse the response, log the raw response for debugging\n      const responseText = await response.text().catch(() => \"Unable to read response text\");\n\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL || 101,\n        errorMessage: `Failed to parse LMS response: ${parseError instanceof Error ? parseError.message : String(parseError)}`,\n        errorDetails: JSON.stringify({\n          status: response.status,\n          statusText: response.statusText,\n          url: response.url,\n          responseText: responseText.substring(0, 500), // Limit response text to avoid huge logs\n          parseError: parseError instanceof Error ? parseError.message : String(parseError),\n        }),\n      };\n    }\n\n    // Ensure result has an errorCode property\n    if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n      result.errorCode = this._isSuccessResponse(response, result) ? 0 : this.error_codes.GENERAL;\n    }\n\n    // Add response details for failed requests\n    if (!this._isSuccessResponse(response, result)) {\n      result.errorDetails = {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n        ...result.errorDetails, // Preserve any existing error details\n      };\n    }\n\n    // Trigger appropriate event based on success/failure\n    if (this._isSuccessResponse(response, result)) {\n      processListeners(\"CommitSuccess\");\n    } else {\n      processListeners(\"CommitError\", undefined, result.errorCode);\n    }\n\n    return result;\n  }\n\n  /**\n   * Determines if a response is successful based on status code and result\n   * @param {Response} response - The HTTP response\n   * @param {ResultObject} result - The parsed result object\n   * @return {boolean} - Whether the response is successful\n   * @private\n   */\n  private _isSuccessResponse(response: Response, result: ResultObject): boolean {\n    const value = (result as any).result;\n    return (\n      response.status >= 200 &&\n      response.status <= 299 &&\n      (value === true || value === \"true\" || value === global_constants.SCORM_TRUE)\n    );\n  }\n\n  /**\n   * Updates the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: InternalSettings): void {\n    this.settings = settings;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { IEventService } from \"../interfaces/services\";\n\n/**\n * Interface for a listener object\n */\ninterface Listener {\n  functionName: string;\n  CMIElement: string | null;\n  callback: Function;\n}\n\n/**\n * Type for parsed listener information\n */\ninterface ParsedListener {\n  functionName: string;\n  CMIElement: string | null;\n}\n\n/**\n * Service for handling event listeners and event processing\n */\nexport class EventService implements IEventService {\n  // Map of function names to listeners for faster lookups\n  private listenerMap: Map<string, Listener[]> = new Map();\n  // Total count of listeners for logging\n  private listenerCount = 0;\n  // Function to log API messages\n  private readonly apiLog: (\n    functionName: string,\n    message: string,\n    messageLevel: LogLevel,\n    CMIElement?: string,\n  ) => void;\n\n  /**\n   * Constructor for EventService\n   * @param {Function} apiLog - Function to log API messages\n   */\n  constructor(\n    apiLog: (\n      functionName: string,\n      message: string,\n      messageLevel: LogLevel,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.apiLog = apiLog;\n  }\n\n  /**\n   * Parses a listener name into its components\n   *\n   * @param {string} listenerName - The name of the listener\n   * @returns {ParsedListener|null} - The parsed listener information or null if invalid\n   */\n  private parseListenerName(listenerName: string): ParsedListener | null {\n    const listenerSplit = listenerName.split(\".\");\n    if (listenerSplit.length === 0) return null;\n\n    const functionName = listenerSplit[0];\n    let CMIElement: string | null = null;\n\n    if (listenerSplit.length > 1) {\n      CMIElement = listenerName.replace(`${functionName}.`, \"\");\n    }\n\n    return { functionName: functionName ?? listenerName, CMIElement };\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener\n   * @param {Function} callback - The callback function to execute when the event occurs\n   */\n  on(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get or create the array for this function name\n      const listeners = this.listenerMap.get(functionName) ?? [];\n\n      // Add the new listener\n      listeners.push({\n        functionName,\n        CMIElement,\n        callback,\n      });\n\n      // Update the map and count\n      this.listenerMap.set(functionName, listeners);\n      this.listenerCount++;\n\n      this.apiLog(\n        \"on\",\n        `Added event listener: ${this.listenerCount}`,\n        LogLevelEnum.INFO,\n        functionName,\n      );\n    }\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener\n   *\n   * @param {string} listenerName - The name of the listener to remove\n   * @param {Function} callback - The callback function to remove\n   */\n  off(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get the listeners for this function name\n      const listeners = this.listenerMap.get(functionName);\n      if (!listeners) continue;\n\n      // Find the index of the listener to remove\n      const removeIndex = listeners.findIndex(\n        (obj) => obj.CMIElement === CMIElement && obj.callback === callback,\n      );\n\n      if (removeIndex !== -1) {\n        // Remove the listener\n        listeners.splice(removeIndex, 1);\n        this.listenerCount--;\n\n        // Update the map or remove the entry if empty\n        if (listeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, listeners);\n        }\n\n        this.apiLog(\n          \"off\",\n          `Removed event listener: ${this.listenerCount}`,\n          LogLevelEnum.INFO,\n          functionName,\n        );\n      }\n    }\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener to clear\n   */\n  clear(listenerName: string) {\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // If we have listeners for this function name\n      if (this.listenerMap.has(functionName)) {\n        const listeners = this.listenerMap.get(functionName)!;\n\n        // Filter out listeners that match the criteria\n        const newListeners = listeners.filter((obj) => obj.CMIElement !== CMIElement);\n\n        // Update the count and map\n        this.listenerCount -= listeners.length - newListeners.length;\n\n        if (newListeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, newListeners);\n        }\n      }\n    }\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created\n   *\n   * @param {string} functionName - The name of the function that triggered the event\n   * @param {string} CMIElement - The CMI element that was affected\n   * @param {any} value - The value that was set\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this.apiLog(functionName, value, LogLevelEnum.INFO, CMIElement);\n\n    // Get listeners for this function name\n    const listeners = this.listenerMap.get(functionName);\n    if (!listeners) return;\n\n    for (const listener of listeners) {\n      const listenerHasCMIElement = !!listener.CMIElement;\n      let CMIElementsMatch = false;\n\n      // Check if CMI elements match\n      if (CMIElement && listener.CMIElement) {\n        if (listener.CMIElement.endsWith(\"*\")) {\n          // For wildcard matches, check if the CMI element starts with the prefix\n          const prefix = listener.CMIElement.slice(0, -1);\n          CMIElementsMatch = CMIElement.startsWith(prefix);\n        } else {\n          // For exact matches, compare the strings directly\n          CMIElementsMatch = listener.CMIElement === CMIElement;\n        }\n      }\n\n      // If the listener matches, call the callback\n      if (!listenerHasCMIElement || CMIElementsMatch) {\n        this.apiLog(\n          \"processListeners\",\n          `Processing listener: ${listener.functionName}`,\n          LogLevelEnum.DEBUG,\n          CMIElement,\n        );\n\n        // Handle special event types\n        if (functionName.startsWith(\"Sequence\")) {\n          // For sequence events, pass the target as the first argument\n          listener.callback(value);\n        } else if (functionName === \"CommitError\") {\n          // For commit error events, pass the error code\n          listener.callback(value);\n        } else if (functionName === \"CommitSuccess\") {\n          // For commit success events, pass no arguments\n          listener.callback();\n        } else {\n          // For regular events, pass CMIElement and value\n          listener.callback(CMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Resets the event service by clearing all listeners\n   */\n  reset() {\n    this.listenerMap.clear();\n    this.listenerCount = 0;\n  }\n}\n","import { CommitObject, LogLevel } from \"../types/api_types\";\nimport { StringKeyMap, unflatten } from \"../utilities\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { BaseCMI } from \"../cmi/common/base_cmi\";\nimport { ISerializationService } from \"../interfaces/services\";\n\n/**\n * Service for handling data serialization and deserialization in scorm-again\n */\nexport class SerializationService implements ISerializationService {\n  /**\n   * Loads CMI data from a flattened JSON object with special handling for arrays and ordering.\n   *\n   * This method implements a complex algorithm for loading flattened JSON data into the CMI\n   * object structure. It handles several key challenges:\n   *\n   * 1. Ordering dependencies: Some CMI elements (like interactions and objectives) must be\n   *    loaded in a specific order to ensure proper initialization.\n   *\n   * 2. Array handling: Interactions and objectives are stored as arrays, and their properties\n   *    must be loaded in the correct order (e.g., 'id' and 'type' must be set before other properties).\n   *\n   * 3. Unflattening: The method converts flattened dot notation (e.g., \"cmi.objectives.0.id\")\n   *    back into nested objects before loading.\n   *\n   * The algorithm works by:\n   * - Categorizing keys into interactions, objectives, and other properties\n   * - Sorting interactions to prioritize 'id' and 'type' fields within each index\n   * - Sorting objectives to prioritize 'id' fields within each index\n   * - Processing each category in order: interactions, objectives, then other properties\n   *\n   * @param {StringKeyMap} json - The flattened JSON object with dot notation keys\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   *\n   * @param setStartingData\n   * @example\n   * // Example of flattened JSON input:\n   * // {\n   * //   \"cmi.objectives.0.id\": \"obj1\",\n   * //   \"cmi.objectives.0.score.raw\": \"80\",\n   * //   \"cmi.interactions.0.id\": \"int1\",\n   * //   \"cmi.interactions.0.type\": \"choice\",\n   * //   \"cmi.interactions.0.result\": \"correct\"\n   * // }\n   */\n  loadFromFlattenedJSON(\n    json: StringKeyMap,\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromFlattenedJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    const int_pattern = /^(cmi\\.interactions\\.)(\\d+)\\.(.*)$/;\n    const obj_pattern = /^(cmi\\.objectives\\.)(\\d+)\\.(.*)$/;\n\n    // Extract and categorize keys for better sorting\n    const interactions: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const objectives: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const others: { key: string; value: any }[] = [];\n\n    // Categorize keys\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key)) {\n        const intMatch = key.match(int_pattern);\n        if (intMatch) {\n          interactions.push({\n            key,\n            value: json[key],\n            index: Number(intMatch[2]),\n            field: intMatch[3] || \"\",\n          });\n          continue;\n        }\n\n        const objMatch = key.match(obj_pattern);\n        if (objMatch) {\n          objectives.push({\n            key,\n            value: json[key],\n            index: Number(objMatch[2]),\n            field: objMatch[3] || \"\",\n          });\n          continue;\n        }\n\n        others.push({ key, value: json[key] });\n      }\n    }\n\n    // Sort interactions: first by index, then prioritize 'id' and 'type' fields\n    interactions.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id and type\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n      if (a.field === \"type\") return -1;\n      if (b.field === \"type\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort objectives: first by index, then prioritize 'id' field\n    objectives.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort other keys alphabetically\n    others.sort((a, b) => a.key.localeCompare(b.key));\n\n    // Process all items in the correct order\n    const processItems = (items: { key: string; value: any }[]) => {\n      items.forEach((item) => {\n        const obj: StringKeyMap = {};\n        obj[item.key] = item.value;\n        this.loadFromJSON(\n          unflatten(obj) as StringKeyMap,\n          CMIElement,\n          setCMIValue,\n          isNotInitialized,\n          setStartingData,\n        );\n      });\n    };\n\n    // Process in order: interactions, objectives, others\n    processItems(interactions);\n    processItems(objectives);\n    processItems(others);\n  }\n\n  /**\n   * Loads CMI data from a nested JSON object with recursive traversal.\n   *\n   * This method implements a recursive algorithm for loading nested JSON data into the CMI\n   * object structure. It handles several key aspects:\n   *\n   * 1. Recursive traversal: The method recursively traverses the nested JSON structure,\n   *    building CMI element paths as it goes (e.g., \"cmi.core.student_id\").\n   *\n   * 2. Type-specific handling: Different data types are handled differently:\n   *    - Arrays: Each array element is processed individually with its index in the path\n   *    - Objects: Recursively processed with updated path\n   *    - Primitives: Set directly using setCMIValue\n   *\n   * 3. Initialization check: Ensures the method is only called before API initialization\n   *\n   * 4. Starting data storage: Stores the original JSON data for potential future use\n   *\n   * The algorithm works by:\n   * - First storing the complete JSON object via setStartingData\n   * - Iterating through each property in the JSON object\n   * - For each property, determining its type and handling it accordingly\n   * - Building the CMI element path as it traverses the structure\n   * - Setting values at the appropriate paths using setCMIValue\n   *\n   * @param {{[key: string]: any}} json - The nested JSON object to load\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value at a specific path\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   * @param {Function} setStartingData - Function to store the original JSON data\n   *\n   * @example\n   * // Example of nested JSON input:\n   * // {\n   * //   \"core\": {\n   * //     \"student_id\": \"12345\",\n   * //     \"student_name\": \"John Doe\"\n   * //   },\n   * //   \"objectives\": [\n   * //     { \"id\": \"obj1\", \"score\": { \"raw\": 80 } },\n   * //     { \"id\": \"obj2\", \"score\": { \"raw\": 90 } }\n   * //   ]\n   * // }\n   */\n  loadFromJSON(\n    json: { [key: string]: any },\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    CMIElement = CMIElement !== undefined ? CMIElement : \"cmi\";\n\n    setStartingData(json);\n\n    // could this be refactored down to flatten(json) then setCMIValue on each?\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key) && json[key]) {\n        const currentCMIElement = (CMIElement ? CMIElement + \".\" : \"\") + key;\n        const value = json[key];\n\n        if (value.constructor === Array) {\n          for (let i = 0; i < value.length; i++) {\n            if (value[i]) {\n              const item = value[i];\n              const tempCMIElement = `${currentCMIElement}.${i}`;\n\n              if (item.constructor === Object) {\n                this.loadFromJSON(\n                  item,\n                  tempCMIElement,\n                  setCMIValue,\n                  isNotInitialized,\n                  setStartingData,\n                );\n              } else {\n                setCMIValue(tempCMIElement, item);\n              }\n            }\n          }\n        } else if (value.constructor === Object) {\n          this.loadFromJSON(\n            value,\n            currentCMIElement,\n            setCMIValue,\n            isNotInitialized,\n            setStartingData,\n          );\n        } else {\n          setCMIValue(currentCMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Render the CMI object to JSON for sending to an LMS.\n   *\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {string}\n   */\n  renderCMIToJSONString(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): string {\n    // Do we want/need to return fields that have no set value?\n    if (sendFullCommit) {\n      return JSON.stringify({ cmi });\n    }\n    return JSON.stringify({ cmi }, (k, v) => (v === undefined ? null : v), 2);\n  }\n\n  /**\n   * Returns a JS object representing the current cmi\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {object}\n   */\n  renderCMIToJSONObject(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): StringKeyMap {\n    // Revert to the original implementation to maintain compatibility with tests\n    return JSON.parse(this.renderCMIToJSONString(cmi, sendFullCommit));\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} alwaysSendTotalTime - Whether to always send total time\n   * @param {boolean|Function} renderCommonCommitFields - Whether to render common commit fields\n   * @param {Function} renderCommitObject - Function to render commit object\n   * @param {Function} renderCommitCMI - Function to render commit CMI\n   * @param {LogLevel} apiLogLevel - The API log level\n   * @return {CommitObject|StringKeyMap|Array<any>}\n   */\n  getCommitObject(\n    terminateCommit: boolean,\n    alwaysSendTotalTime: boolean,\n    renderCommonCommitFields: boolean | ((commitObject: CommitObject) => boolean),\n    renderCommitObject: (terminateCommit: boolean, includeTotalTime?: boolean) => CommitObject,\n    renderCommitCMI: (\n      terminateCommit: boolean,\n      includeTotalTime?: boolean,\n    ) => StringKeyMap | Array<any>,\n    apiLogLevel: LogLevel,\n  ): CommitObject | StringKeyMap | Array<any> {\n    // Fix for issue: total time is being calculated incorrectly across multiple sessions\n    // when selfReportSessionTime and alwaysSendTotalTime are enabled.\n    //\n    // Previously, we were using a single variable (shouldTerminateCommit) that combined\n    // both concerns: whether this is a termination commit and whether to include total time.\n    // This caused the total time to be calculated as if every commit was a terminate commit\n    // when alwaysSendTotalTime was true, leading to incorrect time calculations.\n    //\n    // Now we pass the actual terminateCommit value and a separate parameter for whether\n    // to include total time, allowing the rendering functions to handle these concerns separately.\n    const includeTotalTime = alwaysSendTotalTime || terminateCommit;\n\n    const commitObject = renderCommonCommitFields\n      ? renderCommitObject(terminateCommit, includeTotalTime)\n      : renderCommitCMI(terminateCommit, includeTotalTime);\n\n    if ([LogLevelEnum.DEBUG, \"1\", 1, \"DEBUG\"].includes(apiLogLevel)) {\n      console.debug(\"Commit (terminated: \" + (terminateCommit ? \"yes\" : \"no\") + \"): \");\n      console.debug(commitObject);\n    }\n    return commitObject;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ILoggingService } from \"../interfaces/services\";\nimport { defaultLogHandler } from \"../constants/default_settings\";\n\n/**\n * Centralized logging service implemented as a singleton\n * Provides methods for logging at different levels and configuring the log level\n */\nexport class LoggingService implements ILoggingService {\n  private static _instance: LoggingService;\n  private _logLevel: LogLevel = LogLevelEnum.ERROR;\n  private _logHandler: (messageLevel: LogLevel, logMessage: string) => void;\n\n  /**\n   * Private constructor to prevent direct instantiation\n   */\n  private constructor() {\n    // Default log handler uses console methods based on log level\n    this._logHandler = defaultLogHandler;\n  }\n\n  /**\n   * Get the singleton instance of LoggingService\n   *\n   * @returns {LoggingService} The singleton instance\n   */\n  public static getInstance(): LoggingService {\n    if (!LoggingService._instance) {\n      LoggingService._instance = new LoggingService();\n    }\n    return LoggingService._instance;\n  }\n\n  /**\n   * Set the log level\n   *\n   * @param {LogLevel} level - The log level to set\n   */\n  public setLogLevel(level: LogLevel): void {\n    this._logLevel = level;\n  }\n\n  /**\n   * Get the current log level\n   *\n   * @returns {LogLevel} The current log level\n   */\n  public getLogLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  /**\n   * Set a custom log handler\n   *\n   * @param {Function} handler - The function to handle log messages\n   */\n  public setLogHandler(handler: (messageLevel: LogLevel, logMessage: string) => void): void {\n    this._logHandler = handler;\n  }\n\n  /**\n   * Log a message if the message level is greater than or equal to the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @param {string} logMessage - The message to log\n   */\n  public log(messageLevel: LogLevel, logMessage: string): void {\n    if (this.shouldLog(messageLevel)) {\n      this._logHandler(messageLevel, logMessage);\n    }\n  }\n\n  /**\n   * Log a message at ERROR level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public error(logMessage: string): void {\n    this.log(LogLevelEnum.ERROR, logMessage);\n  }\n\n  /**\n   * Log a message at WARN level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public warn(logMessage: string): void {\n    this.log(LogLevelEnum.WARN, logMessage);\n  }\n\n  /**\n   * Log a message at INFO level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public info(logMessage: string): void {\n    this.log(LogLevelEnum.INFO, logMessage);\n  }\n\n  /**\n   * Log a message at DEBUG level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public debug(logMessage: string): void {\n    this.log(LogLevelEnum.DEBUG, logMessage);\n  }\n\n  /**\n   * Determine if a message should be logged based on its level and the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @returns {boolean} Whether the message should be logged\n   */\n  private shouldLog(messageLevel: LogLevel): boolean {\n    // Convert string levels to numbers for comparison\n    const numericMessageLevel = this.getNumericLevel(messageLevel);\n    const numericLogLevel = this.getNumericLevel(this._logLevel);\n\n    return numericMessageLevel >= numericLogLevel;\n  }\n\n  /**\n   * Convert a log level to its numeric value\n   *\n   * @param {LogLevel} level - The log level to convert\n   * @returns {number} The numeric value of the log level\n   */\n  private getNumericLevel(level: LogLevel): number {\n    if (level === undefined) return LogLevelEnum.NONE;\n\n    if (typeof level === \"number\") return level;\n\n    switch (level) {\n      case \"1\":\n      case \"DEBUG\":\n        return LogLevelEnum.DEBUG;\n      case \"2\":\n      case \"INFO\":\n        return LogLevelEnum.INFO;\n      case \"3\":\n      case \"WARN\":\n        return LogLevelEnum.WARN;\n      case \"4\":\n      case \"ERROR\":\n        return LogLevelEnum.ERROR;\n      case \"5\":\n      case \"NONE\":\n        return LogLevelEnum.NONE;\n      default:\n        return LogLevelEnum.ERROR; // Default to ERROR if unknown\n    }\n  }\n}\n\n// Export a function to get the singleton instance\nexport function getLoggingService(): LoggingService {\n  return LoggingService.getInstance();\n}\n","import { LogLevelEnum } from \"../constants/enums\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { ValidationError } from \"../exceptions\";\nimport { IErrorHandlingService, ILoggingService } from \"../interfaces/services\";\nimport { getLoggingService } from \"./LoggingService\";\n\n/**\n * Service for handling SCORM errors\n */\nexport class ErrorHandlingService implements IErrorHandlingService {\n  private _lastErrorCode: string = \"0\";\n  private readonly _errorCodes: ErrorCode;\n  private readonly _apiLog: (\n    functionName: string,\n    message: string,\n    logLevel?: LogLevelEnum,\n    CMIElement?: string,\n  ) => void;\n  private readonly _getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string;\n  private readonly _loggingService: ILoggingService;\n\n  /**\n   * Constructor for ErrorHandlingService\n   *\n   * @param {ErrorCode} errorCodes - The error codes object\n   * @param {Function} apiLog - Function for logging API calls\n   * @param {Function} getLmsErrorMessageDetails - Function for getting error message details\n   * @param {ILoggingService} loggingService - Optional logging service instance\n   */\n  constructor(\n    errorCodes: ErrorCode,\n    apiLog: (\n      functionName: string,\n      message: string,\n      logLevel?: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n    loggingService?: ILoggingService,\n  ) {\n    this._errorCodes = errorCodes;\n    this._apiLog = apiLog;\n    this._getLmsErrorMessageDetails = getLmsErrorMessageDetails;\n    this._loggingService = loggingService || getLoggingService();\n  }\n\n  /**\n   * Get the last error code\n   *\n   * @return {string} - The last error code\n   */\n  get lastErrorCode(): string {\n    return this._lastErrorCode;\n  }\n\n  /**\n   * Set the last error code\n   *\n   * @param {string} errorCode - The error code to set\n   */\n  set lastErrorCode(errorCode: string) {\n    this._lastErrorCode = errorCode;\n  }\n\n  /**\n   * Throws a SCORM error\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The error number\n   * @param {string} message - The error message\n   * @throws {ValidationError} - If throwException is true, throws a ValidationError\n   */\n  throwSCORMError(CMIElement: string, errorNumber: number, message?: string): void {\n    if (!message) {\n      message = this._getLmsErrorMessageDetails(errorNumber, true);\n    }\n\n    // Format a more descriptive error message with context\n    const formattedMessage = `SCORM Error ${errorNumber}: ${message}${CMIElement ? ` [Element: ${CMIElement}]` : \"\"}`;\n\n    // Log using both the API log and the logging service for consistency\n    this._apiLog(\"throwSCORMError\", errorNumber + \": \" + message, LogLevelEnum.ERROR, CMIElement);\n    this._loggingService.error(formattedMessage);\n\n    this._lastErrorCode = String(errorNumber);\n  }\n\n  /**\n   * Clears the last SCORM error code on success.\n   *\n   * @param {string} success - Whether the operation was successful\n   */\n  clearSCORMError(success: string): void {\n    if (success !== undefined && success !== global_constants.SCORM_FALSE) {\n      this._lastErrorCode = \"0\";\n    }\n  }\n\n  /**\n   * Handles exceptions that occur when accessing or setting CMI values.\n   *\n   * This method provides centralized error handling for exceptions that occur during\n   * CMI data operations. It differentiates between different types of errors and\n   * handles them appropriately:\n   *\n   * 1. ValidationError: These are expected errors from the validation system that\n   *    indicate a specific SCORM error condition (like invalid data format or range).\n   *    For these errors, the method:\n   *    - Sets the lastErrorCode to the error code from the ValidationError\n   *    - Returns SCORM_FALSE to indicate failure to the caller\n   *\n   * 2. Standard JavaScript Error: For general JavaScript errors (like TypeError,\n   *    ReferenceError, etc.), the method:\n   *    - Logs the error message with stack trace to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * 3. Unknown exceptions: For any other type of exception that doesn't match the\n   *    above categories, the method:\n   *    - Logs the entire exception object to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * This method is critical for maintaining SCORM compliance by ensuring that\n   * all errors are properly translated into the appropriate SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {ValidationError|Error|unknown} e - The exception that was thrown\n   * @param {string} returnValue - The default return value (typically an empty string)\n   * @return {string} - Either the original returnValue or SCORM_FALSE if an error occurred\n   *\n   * @example\n   * try {\n   *   const value = getCMIValue(\"cmi.core.score.raw\");\n   *   return value;\n   * } catch (e) {\n   *   return handleValueAccessException(e, \"\");\n   * }\n   */\n  handleValueAccessException(\n    CMIElement: string,\n    e: Error | ValidationError | unknown,\n    returnValue: string,\n  ): string {\n    if (e instanceof ValidationError) {\n      const validationError = e as ValidationError;\n      this._lastErrorCode = String(validationError.errorCode);\n\n      // Log validation errors at WARN level with context\n      const errorMessage = `Validation Error ${validationError.errorCode}: ${validationError.message} [Element: ${CMIElement}]`;\n      this._loggingService.warn(errorMessage);\n\n      returnValue = global_constants.SCORM_FALSE;\n    } else if (e instanceof Error) {\n      // For standard JS errors, include the stack trace and error type\n      const errorType = e.constructor.name; // Gets the error type (e.g., TypeError, ReferenceError)\n      const errorMessage = `${errorType}: ${e.message} [Element: ${CMIElement}]`;\n      const stackTrace = e.stack || \"\";\n\n      // Log the detailed error with stack trace\n      this._loggingService.error(`${errorMessage}\\n${stackTrace}`);\n\n      this.throwSCORMError(\n        CMIElement,\n        this._errorCodes.GENERAL as number,\n        `${errorType}: ${e.message}`,\n      );\n    } else {\n      // For unknown errors, provide as much context as possible\n      const errorMessage = `Unknown error occurred while accessing [Element: ${CMIElement}]`;\n\n      this._loggingService.error(errorMessage);\n\n      try {\n        // Try to stringify the error object for more details\n        const errorDetails = JSON.stringify(e);\n        this._loggingService.error(`Error details: ${errorDetails}`);\n      } catch (jsonError) {\n        // If stringify fails, log that we couldn't get more details\n        this._loggingService.error(\"Could not stringify error object for details\");\n      }\n\n      this.throwSCORMError(CMIElement, this._errorCodes.GENERAL as number, \"Unknown error\");\n    }\n    return returnValue;\n  }\n\n  /**\n   * Get the error codes object\n   *\n   * @return {ErrorCode} - The error codes object\n   */\n  get errorCodes(): ErrorCode {\n    return this._errorCodes;\n  }\n}\n\n// Export a factory function to create the service\nexport function createErrorHandlingService(\n  errorCodes: ErrorCode,\n  apiLog: (\n    functionName: string,\n    message: string,\n    logLevel: LogLevelEnum,\n    CMIElement?: string,\n  ) => void,\n  getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n  loggingService?: ILoggingService,\n): ErrorHandlingService {\n  return new ErrorHandlingService(errorCodes, apiLog, getLmsErrorMessageDetails, loggingService);\n}\n","import { CommitObject, InternalSettings, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ErrorCode } from \"../constants/error_codes\";\n\n/**\n * Interface for sync queue item\n */\ninterface SyncQueueItem {\n  id: string;\n  courseId: string;\n  timestamp: number;\n  data: CommitObject;\n  syncAttempts: number;\n}\n\n/**\n * Service for handling offline storage and synchronization of SCORM data\n */\nexport class OfflineStorageService {\n  private settings: InternalSettings;\n  private error_codes: ErrorCode;\n  private storeName: string = \"scorm_again_offline_data\";\n  private syncQueue: string = \"scorm_again_sync_queue\";\n  private isOnline: boolean = navigator.onLine;\n  private syncInProgress: boolean = false;\n\n  /**\n   * Constructor for OfflineStorageService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Function} apiLog - The logging function\n   */\n  constructor(\n    settings: InternalSettings,\n    error_codes: ErrorCode,\n    private apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n\n    // Initialize listeners for online/offline events\n    window.addEventListener(\"online\", this.handleOnlineStatusChange.bind(this));\n    window.addEventListener(\"offline\", this.handleOnlineStatusChange.bind(this));\n  }\n\n  /**\n   * Handle changes in online status\n   */\n  private handleOnlineStatusChange() {\n    const wasOnline = this.isOnline;\n    this.isOnline = navigator.onLine;\n\n    // If we've come back online, trigger sync process\n    if (!wasOnline && this.isOnline) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        \"Device is back online, attempting to sync...\",\n        LogLevelEnum.INFO,\n      );\n      this.syncOfflineData().then(\n        (success) => {\n          if (success) {\n            this.apiLog(\"OfflineStorageService\", \"Sync completed successfully\", LogLevelEnum.INFO);\n          } else {\n            this.apiLog(\"OfflineStorageService\", \"Sync failed\", LogLevelEnum.ERROR);\n          }\n        },\n        (error) => {\n          this.apiLog(\"OfflineStorageService\", `Error during sync: ${error}`, LogLevelEnum.ERROR);\n        },\n      );\n    } else if (wasOnline && !this.isOnline) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        \"Device is offline, data will be stored locally\",\n        LogLevelEnum.INFO,\n      );\n    }\n  }\n\n  /**\n   * Store commit data offline\n   * @param {string} courseId - Identifier for the course\n   * @param {CommitObject} commitData - The data to store offline\n   * @returns {Promise<ResultObject>} - Result of the storage operation\n   */\n  async storeOffline(courseId: string, commitData: CommitObject): Promise<ResultObject> {\n    try {\n      // Store the data in the sync queue with timestamp and unique ID\n      const queueItem: SyncQueueItem = {\n        id: `${courseId}_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`,\n        courseId,\n        timestamp: Date.now(),\n        data: commitData,\n        syncAttempts: 0,\n      };\n\n      // Get current queue\n      const currentQueue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n      currentQueue.push(queueItem);\n\n      // Save updated queue\n      await this.saveToStorage(this.syncQueue, currentQueue);\n\n      // Also update the current state in the main storage (latest known state)\n      await this.saveToStorage(`${this.storeName}_${courseId}`, commitData);\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Stored data offline for course ${courseId}`,\n        LogLevelEnum.INFO,\n      );\n\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error storing offline data: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL ?? 0,\n      };\n    }\n  }\n\n  /**\n   * Get the stored offline data for a course\n   * @param {string} courseId - Identifier for the course\n   * @returns {Promise<CommitObject|null>} - The stored data or null if not found\n   */\n  async getOfflineData(courseId: string): Promise<CommitObject | null> {\n    try {\n      const data = await this.getFromStorage<CommitObject>(`${this.storeName}_${courseId}`);\n      return data || null;\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error retrieving offline data: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return null;\n    }\n  }\n\n  /**\n   * Synchronize offline data with the LMS when connection is available\n   * @returns {Promise<boolean>} - Success status of synchronization\n   */\n  async syncOfflineData(): Promise<boolean> {\n    // Don't run multiple sync processes at once\n    if (this.syncInProgress || !this.isOnline) {\n      return false;\n    }\n\n    this.syncInProgress = true;\n\n    try {\n      // Get the queue of items to sync\n      const syncQueue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n\n      if (syncQueue.length === 0) {\n        this.syncInProgress = false;\n        return true;\n      }\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Found ${syncQueue.length} items to sync`,\n        LogLevelEnum.INFO,\n      );\n\n      // Keep track of successful and failed sync attempts\n      const remainingQueue: SyncQueueItem[] = [];\n\n      // Process each queue item\n      for (const item of syncQueue) {\n        // Skip items that have been attempted too many times\n        if (item.syncAttempts >= 5) {\n          this.apiLog(\n            \"OfflineStorageService\",\n            `Skipping item ${item.id} after 5 failed attempts`,\n            LogLevelEnum.WARN,\n          );\n          continue;\n        }\n\n        try {\n          // Attempt to sync this item\n          const syncResult = await this.sendDataToLMS(item.data);\n\n          if (syncResult.result === global_constants.SCORM_TRUE) {\n            // Sync was successful, no need to keep this item\n            this.apiLog(\n              \"OfflineStorageService\",\n              `Successfully synced item ${item.id}`,\n              LogLevelEnum.INFO,\n            );\n          } else {\n            // Sync failed, increment attempts and keep in queue\n            item.syncAttempts++;\n            remainingQueue.push(item);\n            this.apiLog(\n              \"OfflineStorageService\",\n              `Failed to sync item ${item.id}, attempt #${item.syncAttempts}`,\n              LogLevelEnum.WARN,\n            );\n          }\n        } catch (error) {\n          // On error, increment attempts and keep in queue\n          item.syncAttempts++;\n          remainingQueue.push(item);\n          this.apiLog(\n            \"OfflineStorageService\",\n            `Error syncing item ${item.id}: ${error}`,\n            LogLevelEnum.ERROR,\n          );\n        }\n      }\n\n      // Update the queue with remaining items\n      await this.saveToStorage(this.syncQueue, remainingQueue);\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Sync completed. ${syncQueue.length - remainingQueue.length} items synced, ${remainingQueue.length} items remaining`,\n        LogLevelEnum.INFO,\n      );\n\n      this.syncInProgress = false;\n      return true;\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error during sync process: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      this.syncInProgress = false;\n      return false;\n    }\n  }\n\n  /**\n   * Send data to the LMS when online\n   * @param {CommitObject} data - The data to send to the LMS\n   * @returns {Promise<ResultObject>} - Result of the sync operation\n   */\n  private async sendDataToLMS(data: CommitObject): Promise<ResultObject> {\n    if (!this.settings.lmsCommitUrl) {\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL || 101,\n      };\n    }\n\n    try {\n      // Apply request handler if configured\n      const processedData = this.settings.requestHandler(data);\n\n      // Send the data to the LMS\n      const init = {\n        method: \"POST\",\n        mode: this.settings.fetchMode,\n        body: JSON.stringify(processedData),\n        headers: {\n          ...this.settings.xhrHeaders,\n          \"Content-Type\": this.settings.commitRequestDataType,\n        },\n      } as RequestInit;\n\n      if (this.settings.xhrWithCredentials) {\n        init.credentials = \"include\";\n      }\n\n      const response = await fetch(this.settings.lmsCommitUrl as string, init);\n\n      // Process the response using the configured handler\n      const result =\n        typeof this.settings.responseHandler === \"function\"\n          ? await this.settings.responseHandler(response)\n          : await response.json();\n\n      if (\n        response.status >= 200 &&\n        response.status <= 299 &&\n        (result.result === true || result.result === global_constants.SCORM_TRUE)\n      ) {\n        if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n          result.errorCode = 0;\n        }\n        return result;\n      } else {\n        if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n          result.errorCode = this.error_codes.GENERAL;\n        }\n        return result;\n      }\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error sending data to LMS: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL || 101,\n      };\n    }\n  }\n\n  /**\n   * Check if the device is currently online\n   * @returns {boolean} - Online status\n   */\n  isDeviceOnline(): boolean {\n    return this.isOnline;\n  }\n\n  // noinspection JSValidateJSDoc\n  /**\n   * Get item from localStorage\n   * @param {string} key - The key to retrieve\n   * @returns {Promise<T|null>} - The retrieved data\n   */\n  private async getFromStorage<T>(key: string): Promise<T | null> {\n    const storedData = localStorage.getItem(key);\n    if (storedData) {\n      try {\n        return JSON.parse(storedData) as T;\n      } catch (e) {\n        return null;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Save item to localStorage\n   * @param {string} key - The key to store under\n   * @param {any} data - The data to store\n   * @returns {Promise<void>}\n   */\n  private async saveToStorage(key: string, data: any): Promise<void> {\n    localStorage.setItem(key, JSON.stringify(data));\n  }\n\n  /**\n   * Check if there is pending offline data for a course\n   * @param {string} courseId - Identifier for the course\n   * @returns {Promise<boolean>} - Whether there is pending data\n   */\n  async hasPendingOfflineData(courseId: string): Promise<boolean> {\n    const queue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n    return queue.some((item) => item.courseId === courseId);\n  }\n\n  /**\n   * Update the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: InternalSettings): void {\n    this.settings = settings;\n  }\n}\n","import { ErrorCode } from \"./constants/error_codes\";\nimport { global_constants } from \"./constants/api_constants\";\nimport * as Utilities from \"./utilities\";\nimport { formatMessage, StringKeyMap, stringMatches } from \"./utilities\";\nimport { BaseCMI, BaseRootCMI } from \"./cmi/common/base_cmi\";\nimport {\n  CommitObject,\n  InternalSettings,\n  LogLevel,\n  ResultObject,\n  Settings\n} from \"./types/api_types\";\nimport { defaultLogHandler, DefaultSettings } from \"./constants/default_settings\";\nimport { IBaseAPI } from \"./interfaces/IBaseAPI\";\nimport { ScheduledCommit } from \"./types/scheduled_commit\";\nimport { LogLevelEnum } from \"./constants/enums\";\nimport { HttpService } from \"./services/HttpService\";\nimport { EventService } from \"./services/EventService\";\nimport { SerializationService } from \"./services/SerializationService\";\nimport { createErrorHandlingService } from \"./services/ErrorHandlingService\";\nimport { getLoggingService } from \"./services/LoggingService\";\nimport { OfflineStorageService } from \"./services/OfflineStorageService\";\nimport {\n  ICMIDataService,\n  IErrorHandlingService,\n  IEventService,\n  IHttpService,\n  ILoggingService,\n  IOfflineStorageService,\n  ISerializationService\n} from \"./interfaces/services\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { ValidationError } from \"./exceptions\";\n\n/**\n * Base API class for AICC, SCORM 1.2, and SCORM 2004. Should be considered\n * abstract, and never initialized on its own.\n */\nexport default abstract class BaseAPI implements IBaseAPI {\n  private _timeout?: ScheduledCommit | undefined;\n  private readonly _error_codes: ErrorCode;\n  private _settings: InternalSettings = DefaultSettings;\n  private readonly _httpService: IHttpService;\n  private _eventService: IEventService;\n  private _serializationService: ISerializationService;\n  private readonly _errorHandlingService: IErrorHandlingService;\n  private readonly _loggingService: ILoggingService;\n  private readonly _offlineStorageService?: IOfflineStorageService;\n  private _courseId: string = \"\";\n\n  /**\n   * Constructor for Base API class. Sets some shared API fields, as well as\n   * sets up options for the API.\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Settings} settings - Optional settings for the API\n   * @param {IHttpService} httpService - Optional HTTP service instance\n   * @param {IEventService} eventService - Optional Event service instance\n   * @param {ISerializationService} serializationService - Optional Serialization service instance\n   * @param {ICMIDataService} cmiDataService - Optional CMI Data service instance\n   * @param {IErrorHandlingService} errorHandlingService - Optional Error Handling service instance\n   * @param {ILoggingService} loggingService - Optional Logging service instance\n   * @param {IOfflineStorageService} offlineStorageService - Optional Offline Storage service instance\n   */\n  protected constructor(\n    error_codes: ErrorCode,\n    settings?: Settings,\n    httpService?: IHttpService,\n    eventService?: IEventService,\n    serializationService?: ISerializationService,\n    cmiDataService?: ICMIDataService,\n    errorHandlingService?: IErrorHandlingService,\n    loggingService?: ILoggingService,\n    offlineStorageService?: IOfflineStorageService\n  ) {\n    if (new.target === BaseAPI) {\n      throw new TypeError(\"Cannot construct BaseAPI instances directly\");\n    }\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n\n    this._error_codes = error_codes;\n\n    if (settings) {\n      this.settings = {\n        ...DefaultSettings,\n        ...settings\n      } as InternalSettings;\n    }\n\n    // Initialize and configure LoggingService\n    this._loggingService = loggingService || getLoggingService();\n    this._loggingService.setLogLevel(this.settings.logLevel);\n\n    // If settings include a custom onLogMessage function, use it as the log handler\n    if (this.settings.onLogMessage) {\n      this._loggingService.setLogHandler(this.settings.onLogMessage);\n    } else {\n      this._loggingService.setLogHandler(defaultLogHandler);\n    }\n\n    // Initialize HTTP service\n    this._httpService = httpService || new HttpService(this.settings, this._error_codes);\n\n    // Initialize Event service\n    this._eventService =\n      eventService ||\n      new EventService((functionName, message, level, element) =>\n        this.apiLog(functionName, message, level, element)\n      );\n\n    // Initialize Serialization service\n    this._serializationService = serializationService || new SerializationService();\n\n    // Initialize Error Handling service\n    this._errorHandlingService =\n      errorHandlingService ||\n      createErrorHandlingService(\n        this._error_codes,\n        (functionName, message, level, element) =>\n          this.apiLog(functionName, message, level, element),\n        (errorNumber, detail) => this.getLmsErrorMessageDetails(errorNumber, detail)\n      );\n\n    // Initialize Offline Storage service if enabled\n    if (this.settings.enableOfflineSupport) {\n      this._offlineStorageService =\n        offlineStorageService ||\n        new OfflineStorageService(\n          this.settings,\n          this._error_codes,\n          (functionName, message, level, element) =>\n            this.apiLog(functionName, message, level, element)\n        );\n\n      if (this.settings.courseId) {\n        this._courseId = this.settings.courseId;\n      }\n\n      // Check for offline data to restore on initialization\n      if (this._offlineStorageService && this._courseId) {\n        this._offlineStorageService\n          .getOfflineData(this._courseId)\n          .then((offlineData) => {\n            if (offlineData) {\n              this.apiLog(\"constructor\", \"Found offline data to restore\", LogLevelEnum.INFO);\n              // Restore data from offline storage\n              this.loadFromJSON(offlineData.runtimeData);\n            }\n          })\n          .catch((error) => {\n            this.apiLog(\n              \"constructor\",\n              `Error retrieving offline data: ${error}`,\n              LogLevelEnum.ERROR\n            );\n          });\n      }\n    }\n  }\n\n  public abstract cmi: BaseCMI;\n  public startingData?: StringKeyMap;\n\n  public currentState: number;\n\n  /**\n   * Get the last error code\n   * @return {string}\n   */\n  get lastErrorCode(): string {\n    return this._errorHandlingService?.lastErrorCode ?? \"0\";\n  }\n\n  /**\n   * Set the last error code\n   * @param {string} errorCode\n   */\n  set lastErrorCode(errorCode: string) {\n    if (this._errorHandlingService) {\n      this._errorHandlingService.lastErrorCode = errorCode;\n    }\n  }\n\n  /**\n   * Reset the API to its initial state.\n   * This method clears all current data and resets the API to an uninitialized state.\n   * It can optionally accept new settings to configure the API after reset.\n   *\n   * @param {Settings} settings - Optional new settings to apply after reset\n   */\n  abstract reset(settings?: Settings): void;\n\n  /**\n   * Common reset method for all APIs. New settings are merged with the existing settings.\n   * @param {Settings} settings\n   * @protected\n   */\n  commonReset(settings?: Settings): void {\n    this.apiLog(\"reset\", \"Called\", LogLevelEnum.INFO);\n\n    this.settings = { ...this.settings, ...settings };\n\n    this.clearScheduledCommit();\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n    this.lastErrorCode = \"0\";\n    this._eventService.reset();\n    this.startingData = {};\n\n    // Update offline storage service with new settings if it exists\n    if (this._offlineStorageService) {\n      this._offlineStorageService.updateSettings(this.settings);\n\n      if (settings?.courseId) {\n        this._courseId = settings.courseId;\n      }\n    }\n  }\n\n  /**\n   * Initialize the API\n   * @param {string} callbackName\n   * @param {string} initializeMessage\n   * @param {string} terminationMessage\n   * @return {string}\n   */\n  initialize(\n    callbackName: string,\n    initializeMessage?: string,\n    terminationMessage?: string\n  ): string {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.isInitialized()) {\n      this.throwSCORMError(\"api\", this._error_codes.INITIALIZED, initializeMessage);\n    } else if (this.isTerminated()) {\n      this.throwSCORMError(\"api\", this._error_codes.TERMINATED, terminationMessage);\n    } else {\n      if (this.settings.selfReportSessionTime) {\n        (this.cmi as BaseRootCMI).setStartTime();\n      }\n\n      this.currentState = global_constants.STATE_INITIALIZED;\n      this.lastErrorCode = \"0\";\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n\n      // If enabled, attempt to sync offline data on initialization\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._courseId &&\n        this.settings.syncOnInitialize &&\n        this._offlineStorageService.isDeviceOnline()\n      ) {\n        this._offlineStorageService.hasPendingOfflineData(this._courseId).then((hasPendingData) => {\n          if (hasPendingData) {\n            this.apiLog(\n              callbackName,\n              \"Syncing pending offline data on initialization\",\n              LogLevelEnum.INFO\n            );\n            this._offlineStorageService?.syncOfflineData().then((syncSuccess) => {\n              if (syncSuccess) {\n                this.apiLog(callbackName, \"Successfully synced offline data\", LogLevelEnum.INFO);\n                this.processListeners(\"OfflineDataSynced\");\n              }\n            });\n          }\n        });\n      }\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Initialize the LMS API\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsInitialize(): string;\n\n  /**\n   * Finish the current LMS API session\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsFinish(): string;\n\n  /**\n   * Get the value of a CMI element from the LMS\n   * @param {string} CMIElement - The CMI element to get the value of\n   * @return {string} The value of the CMI element\n   */\n  abstract lmsGetValue(CMIElement: string): string;\n\n  /**\n   * Set the value of a CMI element in the LMS\n   * @param {string} CMIElement - The CMI element to set the value of\n   * @param {any} value - The value to set\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsSetValue(CMIElement: string, value: any): string;\n\n  /**\n   * Commit the current data to the LMS\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsCommit(): string;\n\n  /**\n   * Get the last error code from the LMS\n   * @return {string} The last error code\n   */\n  abstract lmsGetLastError(): string;\n\n  /**\n   * Get the error string for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get the string for\n   * @return {string} The error string\n   */\n  abstract lmsGetErrorString(CMIErrorCode: string | number): string;\n\n  /**\n   * Get diagnostic information for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get diagnostic information for\n   * @return {string} The diagnostic information\n   */\n  abstract lmsGetDiagnostic(CMIErrorCode: string | number): string;\n\n  /**\n   * Abstract method for validating that a response is correct.\n   * This method is used to validate the format and content of a response\n   * before it is set in the CMI data model.\n   *\n   * @param {string} _CMIElement - The CMI element path to validate\n   * @param {any} _value - The value to validate\n   * @throws {Error} If the response format is invalid\n   */\n  abstract validateCorrectResponse(_CMIElement: string, _value: any): void;\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   * APIs that inherit BaseAPI should override this method.\n   *\n   * @param {string} _CMIElement - unused\n   * @param {*} _value - unused\n   * @param {boolean} _foundFirstIndex - unused\n   * @return {BaseCMI|null}\n   * @abstract\n   */\n  abstract getChildElement(\n    _CMIElement: string,\n    _value: any,\n    _foundFirstIndex: boolean\n  ): BaseCMI | null;\n\n  /**\n   * Attempts to store the data to the LMS, logs data if no LMS configured\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _calculateTotalTime\n   * @return {ResultObject}\n   * @abstract\n   */\n  abstract storeData(_calculateTotalTime: boolean): Promise<ResultObject>;\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   *\n   * @param {boolean} _terminateCommit - Whether this commit is part of the termination process\n   * @param {boolean} [_includeTotalTime] - Whether to include total time in the commit data\n   * @return {StringKeyMap|Array}\n   * @abstract\n   */\n  abstract renderCommitCMI(\n    _terminateCommit: boolean,\n    _includeTotalTime?: boolean\n  ): StringKeyMap | Array<string>;\n\n  /**\n   * Render the commit object to the shortened format for LMS commit.\n   * This method transforms the CMI data into a format suitable for sending to the LMS.\n   * It is called during the commit process to prepare the data for transmission.\n   *\n   * @param {boolean} _terminateCommit - Whether this commit is part of the termination process\n   * @param {boolean} [_includeTotalTime] - Whether to include total time in the commit data\n   * @return {CommitObject} A formatted object containing the data to be sent to the LMS\n   * @example\n   * // Example of a commit object structure\n   * {\n   *   method: \"POST\",\n   *   params: {\n   *     cmi: { ... },\n   *     finishState: \"COMPLETED\"\n   *   }\n   * }\n   */\n  abstract renderCommitObject(_terminateCommit: boolean, _includeTotalTime?: boolean): CommitObject;\n\n  /**\n   * Logging for all SCORM actions\n   *\n   * @param {string} functionName\n   * @param {string} logMessage\n   * @param {number} messageLevel\n   * @param {string} CMIElement\n   */\n  apiLog(functionName: string, logMessage: string, messageLevel: LogLevel, CMIElement?: string) {\n    logMessage = formatMessage(functionName, logMessage, CMIElement);\n\n    // Delegate to LoggingService which handles log level comparison properly\n    this._loggingService.log(messageLevel, logMessage);\n  }\n\n  /**\n   * Getter for _settings\n   * @return {InternalSettings}\n   */\n  get settings(): InternalSettings {\n    return this._settings;\n  }\n\n  /**\n   * Setter for _settings\n   * @param {Settings} settings\n   */\n  set settings(settings: Settings) {\n    const previousSettings = this._settings;\n    // Merge the incoming settings with the existing settings\n    this._settings = { ...this._settings, ...settings } as InternalSettings;\n\n    // Update HTTP service settings\n    this._httpService?.updateSettings(this._settings);\n\n    // The following properties are duplicated as class properties for easier access\n    // and need to be manually updated to stay in sync with the settings object\n\n    // Update log level if it changed\n    if (settings.logLevel !== undefined && settings.logLevel !== previousSettings.logLevel) {\n      this._loggingService?.setLogLevel(settings.logLevel);\n    }\n\n    // Update log handler if onLogMessage changed\n    if (\n      settings.onLogMessage !== undefined &&\n      settings.onLogMessage !== previousSettings.onLogMessage\n    ) {\n      this._loggingService?.setLogHandler(settings.onLogMessage);\n    }\n  }\n\n  /**\n   * Terminates the current run of the API\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async terminate(callbackName: string, checkTerminated: boolean): Promise<string> {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.TERMINATION_BEFORE_INIT ?? 0,\n        this._error_codes.MULTIPLE_TERMINATION ?? 0\n      )\n    ) {\n      this.currentState = global_constants.STATE_TERMINATED;\n      // If enabled, attempt to sync offline data before termination\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._courseId &&\n        this.settings.syncOnTerminate &&\n        this._offlineStorageService.isDeviceOnline()\n      ) {\n        const hasPendingData = await this._offlineStorageService.hasPendingOfflineData(\n          this._courseId\n        );\n        if (hasPendingData) {\n          this.apiLog(\n            callbackName,\n            \"Syncing pending offline data before termination\",\n            LogLevelEnum.INFO\n          );\n          await this._offlineStorageService.syncOfflineData();\n        }\n      }\n\n      const result: ResultObject = await this.storeData(true);\n      if ((result.errorCode ?? 0) > 0) {\n        // Log detailed error information before throwing SCORM error\n        if (result.errorMessage) {\n          this.apiLog(\n            \"terminate\",\n            `Terminate failed with error: ${result.errorMessage}`,\n            LogLevelEnum.ERROR\n          );\n        }\n        if (result.errorDetails) {\n          this.apiLog(\n            \"terminate\",\n            `Error details: ${JSON.stringify(result.errorDetails)}`,\n            LogLevelEnum.DEBUG\n          );\n        }\n        this.throwSCORMError(\"api\", result.errorCode ?? 0);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Get the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  getValue(callbackName: string, checkTerminated: boolean, CMIElement: string): string {\n    let returnValue: string = \"\";\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.RETRIEVE_BEFORE_INIT ?? 0,\n        this._error_codes.RETRIEVE_AFTER_TERM ?? 0\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.getCMIValue(CMIElement);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement);\n    }\n\n    this.apiLog(callbackName, \": returned: \" + returnValue, LogLevelEnum.INFO, CMIElement);\n\n    if (returnValue === undefined) {\n      return \"\";\n    }\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Sets the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {string} commitCallback\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  setValue(\n    callbackName: string,\n    commitCallback: string,\n    checkTerminated: boolean,\n    CMIElement: string,\n    value: any\n  ): string {\n    if (value !== undefined) {\n      value = String(value);\n    }\n    let returnValue: string = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.STORE_BEFORE_INIT ?? 0,\n        this._error_codes.STORE_AFTER_TERM ?? 0\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.setCMIValue(CMIElement, value);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement, value);\n    }\n\n    if (returnValue === undefined) {\n      returnValue = global_constants.SCORM_FALSE;\n    }\n\n    // If we didn't have any errors while setting the data, go ahead and\n    // schedule a commit, if autocommit is turned on\n    if (String(this.lastErrorCode) === \"0\") {\n      if (this.settings.autocommit) {\n        this.scheduleCommit(this.settings.autocommitSeconds * 1000, commitCallback);\n      }\n    }\n\n    this.apiLog(\n      callbackName,\n      \": \" + value + \": result: \" + returnValue,\n      LogLevelEnum.INFO,\n      CMIElement\n    );\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async commit(callbackName: string, checkTerminated: boolean = false): Promise<string> {\n    this.clearScheduledCommit();\n\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.COMMIT_BEFORE_INIT ?? 0,\n        this._error_codes.COMMIT_AFTER_TERM ?? 0\n      )\n    ) {\n      const result = await this.storeData(false);\n      if ((result.errorCode ?? 0) > 0) {\n        // Log detailed error information before throwing SCORM error\n        if (result.errorMessage) {\n          this.apiLog(\n            \"commit\",\n            `Commit failed with error: ${result.errorMessage}`,\n            LogLevelEnum.ERROR\n          );\n        }\n        if (result.errorDetails) {\n          this.apiLog(\n            \"commit\",\n            `Error details: ${JSON.stringify(result.errorDetails)}`,\n            LogLevelEnum.DEBUG\n          );\n        }\n        this.throwSCORMError(\"api\", result.errorCode);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      this.apiLog(callbackName, \" Result: \" + returnValue, LogLevelEnum.DEBUG, \"HttpRequest\");\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      this.processListeners(callbackName);\n\n      // If online and there is offline data pending, attempt to sync it\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._offlineStorageService.isDeviceOnline() &&\n        this._courseId\n      ) {\n        this._offlineStorageService.hasPendingOfflineData(this._courseId).then((hasPendingData) => {\n          if (hasPendingData) {\n            this.apiLog(callbackName, \"Syncing pending offline data\", LogLevelEnum.INFO);\n            this._offlineStorageService?.syncOfflineData().then((syncSuccess) => {\n              if (syncSuccess) {\n                this.apiLog(callbackName, \"Successfully synced offline data\", LogLevelEnum.INFO);\n                this.processListeners(\"OfflineDataSynced\");\n              } else {\n                this.apiLog(callbackName, \"Failed to sync some offline data\", LogLevelEnum.WARN);\n              }\n            });\n          }\n        });\n      }\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Returns last error code\n   * @param {string} callbackName\n   * @return {string}\n   */\n  getLastError(callbackName: string): string {\n    const returnValue = String(this.lastErrorCode);\n\n    this.processListeners(callbackName);\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getErrorString(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getDiagnostic(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode, true);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Checks the LMS state and ensures it has been initialized.\n   *\n   * @param {boolean} checkTerminated\n   * @param {number} beforeInitError\n   * @param {number} afterTermError\n   * @return {boolean}\n   */\n  checkState(checkTerminated: boolean, beforeInitError: number, afterTermError: number): boolean {\n    if (this.isNotInitialized()) {\n      this.throwSCORMError(\"api\", beforeInitError);\n      return false;\n    } else if (checkTerminated && this.isTerminated()) {\n      this.throwSCORMError(\"api\", afterTermError);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {(string|number)} _errorNumber\n   * @param {boolean} _detail\n   * @return {string}\n   * @abstract\n   */\n  getLmsErrorMessageDetails(_errorNumber: string | number, _detail: boolean = false): string {\n    throw new Error(\"The getLmsErrorMessageDetails method has not been implemented\");\n  }\n\n  /**\n   * Gets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @return {string}\n   * @abstract\n   */\n  getCMIValue(_CMIElement: string): string {\n    throw new Error(\"The getCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Sets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @param {any} _value\n   * @return {string}\n   * @abstract\n   */\n  setCMIValue(_CMIElement: string, _value: any): string {\n    throw new Error(\"The setCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Shared API method to set a valid for a given element.\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  _commonSetCMIValue(\n    methodName: string,\n    scorm2004: boolean,\n    CMIElement: string,\n    value: any\n  ): string {\n    if (!CMIElement || CMIElement === \"\") {\n      return global_constants.SCORM_FALSE;\n    }\n\n    this.lastErrorCode = \"0\";\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap | BaseCMI = this as StringKeyMap;\n    let returnValue = global_constants.SCORM_FALSE;\n    let foundFirstIndex = false;\n\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      const attribute = structure[idx];\n\n      if (idx === structure.length - 1) {\n        if (scorm2004 && attribute && attribute.substring(0, 8) === \"{target=\") {\n          if (this.isInitialized()) {\n            this.throwSCORMError(CMIElement, this._error_codes.READ_ONLY_ELEMENT);\n            break;\n          } else {\n            refObject = {\n              ...refObject,\n              attribute: value\n            };\n          }\n        } else if (\n          typeof attribute === \"undefined\" ||\n          !this._checkObjectHasProperty(refObject as StringKeyMap, attribute)\n        ) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        } else {\n          if (\n            stringMatches(CMIElement, \"\\\\.correct_responses\\\\.\\\\d+$\") &&\n            this.isInitialized() &&\n            attribute !== \"pattern\"\n          ) {\n            this.validateCorrectResponse(CMIElement, value);\n            if (this.lastErrorCode !== \"0\") {\n              this.throwSCORMError(CMIElement, this._error_codes.TYPE_MISMATCH);\n              break;\n            }\n          }\n\n          if (!scorm2004 || this._errorHandlingService.lastErrorCode === \"0\") {\n            if (\n              typeof attribute === \"undefined\" ||\n              attribute === \"__proto__\" ||\n              attribute === \"constructor\"\n            ) {\n              this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n              break;\n            }\n            (refObject as StringKeyMap)[attribute] = value;\n            returnValue = global_constants.SCORM_TRUE;\n          }\n        }\n      } else {\n        if (\n          typeof attribute === \"undefined\" ||\n          !this._checkObjectHasProperty(refObject as StringKeyMap, attribute)\n        ) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n        refObject = (refObject as StringKeyMap)[attribute] as StringKeyMap;\n        if (!refObject) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n\n        if (refObject instanceof CMIArray) {\n          const index = parseInt(structure[idx + 1] || \"0\", 10);\n\n          // SCO is trying to set an item on an array\n          if (!isNaN(index)) {\n            const item = refObject.childArray[index];\n\n            if (item) {\n              refObject = item;\n              foundFirstIndex = true;\n            } else {\n              const newChild = this.getChildElement(CMIElement, value, foundFirstIndex);\n              foundFirstIndex = true;\n\n              if (!newChild) {\n                if (this.lastErrorCode === \"0\") {\n                  this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n                }\n                break;\n              } else {\n                if (refObject.initialized) newChild.initialize();\n                refObject.childArray[index] = newChild;\n                refObject = newChild;\n              }\n            }\n\n            // Have to update idx value to skip the array position\n            idx++;\n          }\n        }\n      }\n    }\n\n    if (returnValue === global_constants.SCORM_FALSE) {\n      this.apiLog(\n        methodName,\n        `There was an error setting the value for: ${CMIElement}, value of: ${value}`,\n        LogLevelEnum.WARN\n      );\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @return {any}\n   */\n  _commonGetCMIValue(methodName: string, scorm2004: boolean, CMIElement: string): any {\n    if (!CMIElement || CMIElement === \"\") {\n      return \"\";\n    }\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap = this as StringKeyMap;\n    let attribute = null;\n\n    const uninitializedErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) has not been initialized.`;\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      attribute = structure[idx];\n\n      if (!scorm2004) {\n        if (idx === structure.length - 1) {\n          if (\n            typeof attribute === \"undefined\" ||\n            !this._checkObjectHasProperty(refObject, attribute)\n          ) {\n            this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n            return;\n          }\n        }\n      } else {\n        if (\n          String(attribute).substring(0, 8) === \"{target=\" &&\n          typeof refObject._isTargetValid == \"function\"\n        ) {\n          const target = String(attribute).substring(8, String(attribute).length - 9);\n          return refObject._isTargetValid(target);\n        } else if (\n          typeof attribute === \"undefined\" ||\n          !this._checkObjectHasProperty(refObject, attribute)\n        ) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          return;\n        }\n      }\n\n      if (attribute !== undefined && attribute !== null) {\n        refObject = refObject[attribute] as StringKeyMap;\n        if (refObject === undefined) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n      } else {\n        this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n        break;\n      }\n\n      if (refObject instanceof CMIArray) {\n        const index = parseInt(structure[idx + 1] || \"\", 10);\n\n        // SCO is trying to set an item on an array\n        if (!isNaN(index)) {\n          const item = refObject.childArray[index];\n\n          if (item) {\n            refObject = item;\n          } else {\n            this.throwSCORMError(\n              CMIElement,\n              this._error_codes.VALUE_NOT_INITIALIZED,\n              uninitializedErrorMessage\n            );\n            break;\n          }\n\n          // Have to update idx value to skip the array position\n          idx++;\n        }\n      }\n    }\n\n    if (refObject === null || refObject === undefined) {\n      if (!scorm2004) {\n        if (attribute === \"_children\") {\n          this.throwSCORMError(CMIElement, this._error_codes.CHILDREN_ERROR, undefined);\n        } else if (attribute === \"_count\") {\n          this.throwSCORMError(CMIElement, this._error_codes.COUNT_ERROR, undefined);\n        }\n      }\n    } else {\n      return refObject;\n    }\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isInitialized(): boolean {\n    return this.currentState === global_constants.STATE_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_NOT_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isNotInitialized(): boolean {\n    return this.currentState === global_constants.STATE_NOT_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_TERMINATED\n   *\n   * @return {boolean}\n   */\n  isTerminated(): boolean {\n    return this.currentState === global_constants.STATE_TERMINATED;\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event.\n   * This method allows you to register a callback function that will be executed\n   * when the specified event occurs.\n   *\n   * @param {string} listenerName - The name of the event to listen for (e.g., \"Initialize\", \"Terminate\", \"GetValue\", \"SetValue\", \"Commit\")\n   * @param {function} callback - The function to execute when the event occurs. The callback will receive relevant event data.\n   * @example\n   * // Listen for Initialize events\n   * api.on(\"Initialize\", function() {\n   *   console.log(\"API has been initialized\");\n   * });\n   *\n   * // Listen for SetValue events\n   * api.on(\"SetValue\", function(element, value) {\n   *   console.log(\"Setting \" + element + \" to \" + value);\n   * });\n   */\n  on(listenerName: string, callback: Function) {\n    this._eventService.on(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener.\n   * This method removes a previously registered callback for an event.\n   * Both the event name and the callback reference must match what was used in the 'on' method.\n   *\n   * @param {string} listenerName - The name of the event to stop listening for\n   * @param {function} callback - The callback function to remove\n   * @example\n   * // Remove a specific listener\n   * const myCallback = function() { console.log(\"API initialized\"); };\n   * api.on(\"Initialize\", myCallback);\n   * // Later, when you want to remove it:\n   * api.off(\"Initialize\", myCallback);\n   */\n  off(listenerName: string, callback: Function) {\n    this._eventService.off(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event.\n   * This method removes all callbacks registered for the specified event.\n   *\n   * @param {string} listenerName - The name of the event to clear all listeners for\n   * @example\n   * // Remove all listeners for the Initialize event\n   * api.clear(\"Initialize\");\n   */\n  clear(listenerName: string) {\n    this._eventService.clear(listenerName);\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created for a specific event.\n   * This method is called internally when SCORM events occur to notify all registered listeners.\n   * It triggers all callback functions registered for the specified event.\n   *\n   * @param {string} functionName - The name of the function/event that occurred\n   * @param {string} CMIElement - Optional CMI element involved in the event\n   * @param {any} value - Optional value associated with the event\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this._eventService.processListeners(functionName, CMIElement, value);\n  }\n\n  /**\n   * Throws a SCORM error with the specified error number and optional message.\n   * This method sets the last error code and can be used to indicate that an operation failed.\n   * The error number should correspond to one of the standard SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The SCORM error code to set\n   * @param {string} message - Optional custom error message to provide additional context\n   * @example\n   * // Throw a \"not initialized\" error\n   * this.throwSCORMError(301, \"The API must be initialized before calling GetValue\");\n   */\n  throwSCORMError(\n    CMIElement: string | undefined,\n    errorNumber: number | undefined,\n    message?: string\n  ) {\n    this._errorHandlingService.throwSCORMError(CMIElement, errorNumber ?? 0, message);\n  }\n\n  /**\n   * Clears the last SCORM error code when an operation succeeds.\n   * This method is typically called after successful API operations to reset the error state.\n   * It only clears the error if the success parameter is \"true\".\n   *\n   * @param {string} success - A string indicating whether the operation succeeded (\"true\" or \"false\")\n   * @example\n   * // Clear error after successful operation\n   * this.clearSCORMError(\"true\");\n   */\n  clearSCORMError(success: string) {\n    this._errorHandlingService.clearSCORMError(success);\n  }\n\n  /**\n   * Load the CMI from a flattened JSON object.\n   * This method populates the CMI data model from a flattened JSON structure\n   * where keys represent CMI element paths (e.g., \"cmi.core.student_id\").\n   *\n   * @param {StringKeyMap} json - The flattened JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a flattened JSON structure\n   * api.loadFromFlattenedJSON({\n   *   \"cmi.core.student_id\": \"12345\",\n   *   \"cmi.core.student_name\": \"John Doe\",\n   *   \"cmi.core.lesson_status\": \"incomplete\"\n   * });\n   */\n  loadFromFlattenedJSON(json: StringKeyMap, CMIElement?: string) {\n    if (!CMIElement) {\n      // by default, we start from a blank string because we're expecting each element to start with `cmi`\n      CMIElement = \"\";\n    }\n\n    this._serializationService.loadFromFlattenedJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      }\n    );\n  }\n\n  /**\n   * Returns a flattened JSON object representing the current CMI data.\n   */\n  getFlattenedCMI(): StringKeyMap {\n    return Utilities.flatten(this.renderCMIToJSONObject());\n  }\n\n  /**\n   * Loads CMI data from a hierarchical JSON object.\n   * This method populates the CMI data model from a nested JSON structure\n   * that mirrors the CMI object hierarchy.\n   *\n   * @param {StringKeyMap} json - The hierarchical JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a hierarchical JSON structure\n   * api.loadFromJSON({\n   *   core: {\n   *     student_id: \"12345\",\n   *     student_name: \"John Doe\",\n   *     lesson_status: \"incomplete\"\n   *   },\n   *   objectives: [\n   *     { id: \"obj1\", score: { raw: 85 } }\n   *   ]\n   * });\n   */\n  loadFromJSON(json: StringKeyMap, CMIElement: string = \"\") {\n    if (\n      (!CMIElement || CMIElement === \"\") &&\n      !Object.hasOwnProperty.call(json, \"cmi\") &&\n      !Object.hasOwnProperty.call(json, \"adl\")\n    ) {\n      // providing a backward compatibility for the old v1 API\n      CMIElement = \"cmi\";\n    }\n    this._serializationService.loadFromJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      }\n    );\n  }\n\n  /**\n   * Render the CMI object to a JSON string for sending to an LMS.\n   * This method serializes the current CMI data model to a JSON string.\n   * The output format is controlled by the sendFullCommit setting.\n   *\n   * @return {string} A JSON string representation of the CMI data\n   * @example\n   * // Get the current CMI data as a JSON string\n   * const jsonString = api.renderCMIToJSONString();\n   * console.log(jsonString); // '{\"core\":{\"student_id\":\"12345\",...}}'\n   */\n  renderCMIToJSONString(): string {\n    return this._serializationService.renderCMIToJSONString(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Returns a JavaScript object representing the current CMI data.\n   * This method creates a plain JavaScript object that mirrors the\n   * structure of the CMI data model, suitable for further processing.\n   *\n   * @return {StringKeyMap} A JavaScript object representing the CMI data\n   * @example\n   * // Get the current CMI data as a JavaScript object\n   * const cmiObject = api.renderCMIToJSONObject();\n   * console.log(cmiObject.core.student_id); // \"12345\"\n   */\n  renderCMIToJSONObject(): StringKeyMap {\n    return this._serializationService.renderCMIToJSONObject(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Process an HTTP request\n   *\n   * @param {string} url - The URL to send the request to\n   * @param {CommitObject | StringKeyMap | Array<any>} params - The parameters to send\n   * @param {boolean} immediate - Whether to send the request immediately without waiting\n   * @returns {Promise<ResultObject>} - The result of the request\n   * @async\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false\n  ): Promise<ResultObject> {\n    // If offline support is enabled and device is offline, store data locally instead of sending\n    if (\n      this.settings.enableOfflineSupport &&\n      this._offlineStorageService &&\n      !this._offlineStorageService.isDeviceOnline() &&\n      this._courseId\n    ) {\n      this.apiLog(\n        \"processHttpRequest\",\n        \"Device is offline, storing data locally\",\n        LogLevelEnum.INFO\n      );\n\n      if (params && typeof params === \"object\" && \"cmi\" in params) {\n        return await this._offlineStorageService.storeOffline(\n          this._courseId,\n          params as CommitObject\n        );\n      } else {\n        this.apiLog(\n          \"processHttpRequest\",\n          \"Invalid commit data format for offline storage\",\n          LogLevelEnum.ERROR\n        );\n        return {\n          result: global_constants.SCORM_FALSE,\n          errorCode: this._error_codes.GENERAL ?? 101 // Fallback to a default error code if GENERAL is undefined\n        };\n      }\n    }\n\n    // Otherwise, proceed with normal HTTP request\n    return await this._httpService.processHttpRequest(\n      url,\n      params,\n      immediate,\n      (functionName, message, level, element) => this.apiLog(functionName, message, level, element),\n      (functionName, CMIElement, value) => this.processListeners(functionName, CMIElement, value)\n    );\n  }\n\n  /**\n   * Schedules a commit operation to occur after a specified delay.\n   * This method is used to implement auto-commit functionality, where data\n   * is periodically sent to the LMS without requiring explicit commit calls.\n   *\n   * @param {number} when - The number of milliseconds to wait before committing\n   * @param {string} callback - The name of the commit event callback\n   * @example\n   * // Schedule a commit to happen in 60 seconds\n   * api.scheduleCommit(60000, \"commit\");\n   */\n  scheduleCommit(when: number, callback: string) {\n    if (!this._timeout) {\n      this._timeout = new ScheduledCommit(this, when, callback);\n      this.apiLog(\"scheduleCommit\", \"scheduled\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Clears and cancels any currently scheduled commits.\n   * This method is typically called when an explicit commit is performed\n   * or when the API is terminated, to prevent redundant commits.\n   *\n   * @example\n   * // Cancel any pending scheduled commits\n   * api.clearScheduledCommit();\n   */\n  clearScheduledCommit() {\n    if (this._timeout) {\n      this._timeout.cancel();\n      this._timeout = undefined;\n      this.apiLog(\"clearScheduledCommit\", \"cleared\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Checks if an object has a specific property, using multiple detection methods.\n   * This method performs a thorough check for property existence by:\n   * 1. Checking if it's an own property using Object.hasOwnProperty\n   * 2. Checking if it's defined in the prototype with a property descriptor\n   * 3. Checking if it's accessible via the 'in' operator (includes inherited properties)\n   *\n   * @param {StringKeyMap} StringKeyMap - The object to check for the property\n   * @param {string} attribute - The property name to look for\n   * @return {boolean} True if the property exists on the object or its prototype chain\n   * @private\n   *\n   * @example\n   * // Check for an own property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"name\"); // Returns true\n   *\n   * @example\n   * // Check for an inherited property\n   * class Parent { get type() { return \"parent\"; } }\n   * const child = Object.create(new Parent());\n   * this._checkObjectHasProperty(child, \"type\"); // Returns true\n   *\n   * @example\n   * // Check for a non-existent property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"age\"); // Returns false\n   */\n  private _checkObjectHasProperty(StringKeyMap: StringKeyMap, attribute: string): boolean {\n    return (\n      Object.hasOwnProperty.call(StringKeyMap, attribute) ||\n      Object.getOwnPropertyDescriptor(Object.getPrototypeOf(StringKeyMap), attribute) != null ||\n      attribute in StringKeyMap\n    );\n  }\n\n  /**\n   * Handles exceptions that occur when accessing CMI values.\n   * This method delegates to the ErrorHandlingService to process exceptions\n   * that occur during CMI data operations, ensuring consistent error handling\n   * throughout the API.\n   *\n   * @param {string} CMIElement\n   * @param {any} e - The exception that was thrown\n   * @param {string} returnValue - The default return value to use if an error occurs\n   * @return {string} Either the original returnValue or SCORM_FALSE if an error occurred\n   * @private\n   *\n   * @example\n   * // Handle a validation error when getting a CMI value\n   * try {\n   *   return this.getCMIValue(\"cmi.core.score.raw\");\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"\");\n   * }\n   *\n   * @example\n   * // Handle a general error when setting a CMI value\n   * try {\n   *   this.setCMIValue(\"cmi.core.lesson_status\", \"completed\");\n   *   return \"true\";\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"false\");\n   * }\n   */\n  private handleValueAccessException(CMIElement: string, e: any, returnValue: string): string {\n    if (e instanceof ValidationError) {\n      this.lastErrorCode = String(e.errorCode);\n      returnValue = global_constants.SCORM_FALSE;\n      this.throwSCORMError(CMIElement, e.errorCode, e.errorMessage);\n    } else {\n      if (e instanceof Error && e.message) {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, e.message);\n      } else {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, \"Unknown error\");\n      }\n    }\n    return returnValue;\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS.\n   * This method delegates to the SerializationService to create a properly\n   * formatted object containing the CMI data that needs to be sent to the LMS.\n   * The format and content of the commit object depend on whether this is a\n   * regular commit or a termination commit.\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @return {CommitObject|StringKeyMap|Array} The formatted commit object\n   * @protected\n   *\n   * @example\n   * // Create a regular commit object\n   * const regularCommit = this.getCommitObject(false);\n   * // Result might be: { cmi: { core: { lesson_status: \"incomplete\" } } }\n   *\n   * @example\n   * // Create a termination commit object (includes total_time)\n   * const terminationCommit = this.getCommitObject(true);\n   * // Result might be: { cmi: { core: { lesson_status: \"completed\", total_time: \"PT1H30M\" } } }\n   */\n  protected getCommitObject(terminateCommit: boolean): CommitObject | StringKeyMap | Array<any> {\n    return this._serializationService.getCommitObject(\n      terminateCommit,\n      this.settings.alwaysSendTotalTime,\n      this.settings.renderCommonCommitFields,\n      (terminateCommit: boolean, includeTotalTime?: boolean) =>\n        this.renderCommitObject(terminateCommit, includeTotalTime),\n      (terminateCommit: boolean, includeTotalTime?: boolean) =>\n        this.renderCommitCMI(terminateCommit, includeTotalTime),\n      this.settings.logLevel\n    );\n  }\n}\n","import { CMI } from \"./cmi/scorm12/cmi\";\nimport * as Utilities from \"./utilities\";\nimport { StringKeyMap, stringMatches } from \"./utilities\";\nimport { global_constants, scorm12_constants } from \"./constants/api_constants\";\nimport { scorm12_errors } from \"./constants/error_codes\";\n\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport { CMIObjectivesObject } from \"./cmi/scorm12/objectives\";\nimport {\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n} from \"./cmi/scorm12/interactions\";\nimport { NAV } from \"./cmi/scorm12/nav\";\nimport { CommitObject, ResultObject, ScoreObject, Settings } from \"./types/api_types\";\nimport { CompletionStatus, SuccessStatus } from \"./constants/enums\";\nimport BaseAPI from \"./BaseAPI\";\nimport { scorm12_regex } from \"./constants/regex\";\n\n/**\n * API class for SCORM 1.2\n */\nclass Scorm12API extends BaseAPI {\n  /**\n   * Constructor for SCORM 1.2 API\n   * @param {object} settings\n   */\n  constructor(settings?: Settings) {\n    if (settings) {\n      if (settings.mastery_override === undefined) {\n        settings.mastery_override = false;\n      }\n    }\n\n    super(scorm12_errors, settings);\n\n    this.cmi = new CMI();\n    this.nav = new NAV();\n\n    // Rename functions to match 1.2 Spec and expose to modules\n    this.LMSInitialize = this.lmsInitialize;\n    this.LMSFinish = this.lmsFinish;\n    this.LMSGetValue = this.lmsGetValue;\n    this.LMSSetValue = this.lmsSetValue;\n    this.LMSCommit = this.lmsCommit;\n    this.LMSGetLastError = this.lmsGetLastError;\n    this.LMSGetErrorString = this.lmsGetErrorString;\n    this.LMSGetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  public statusSetByModule = false;\n\n  cmi: CMI;\n  nav: NAV;\n\n  LMSInitialize: () => string;\n  LMSFinish: () => string;\n  LMSGetValue: (CMIElement: string) => string;\n  LMSSetValue: (CMIElement: string, value: any) => string;\n  LMSCommit: () => string;\n  LMSGetLastError: () => string;\n  LMSGetErrorString: (CMIErrorCode: string) => string;\n  LMSGetDiagnostic: (CMIErrorCode: string) => string;\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset(settings?: Settings) {\n    this.commonReset(settings);\n\n    this.cmi?.reset();\n    this.nav?.reset();\n  }\n\n  /**\n   * lmsInitialize function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize(): string {\n    this.cmi.initialize();\n    if (this.cmi.core.lesson_status) {\n      this.statusSetByModule = true;\n    } else {\n      this.cmi.core.lesson_status = \"not attempted\";\n    }\n    return this.initialize(\n      \"LMSInitialize\",\n      \"LMS was already initialized!\",\n      \"LMS is already finished!\",\n    );\n  }\n\n  /**\n   * LMSFinish function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish(): string {\n    (async () => {\n      await this.internalFinish();\n    })();\n    return global_constants.SCORM_TRUE;\n  }\n\n  async internalFinish(): Promise<string> {\n    const result = await this.terminate(\"LMSFinish\", true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      if (this.nav.event !== \"\") {\n        if (this.nav.event === \"continue\") {\n          this.processListeners(\"SequenceNext\");\n        } else {\n          this.processListeners(\"SequencePrevious\");\n        }\n      } else if (this.settings.autoProgress) {\n        this.processListeners(\"SequenceNext\");\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * LMSGetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement: string): string {\n    return this.getValue(\"LMSGetValue\", false, CMIElement);\n  }\n\n  /**\n   * LMSSetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement: string, value: any): string {\n    if (CMIElement === \"cmi.core.lesson_status\") {\n      this.statusSetByModule = true;\n    }\n    return this.setValue(\"LMSSetValue\", \"LMSCommit\", false, CMIElement, value);\n  }\n\n  /**\n   * LMSCommit function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit(): string {\n    if (this.settings.asyncCommit) {\n      this.scheduleCommit(500, \"LMSCommit\");\n    } else {\n      (async () => {\n        await this.commit(\"LMSCommit\", false);\n      })();\n    }\n    return global_constants.SCORM_TRUE;\n  }\n\n  /**\n   * LMSGetLastError function from SCORM 1.2 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError(): string {\n    return this.getLastError(\"LMSGetLastError\");\n  }\n\n  /**\n   * LMSGetErrorString function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode: string): string {\n    return this.getErrorString(\"LMSGetErrorString\", CMIErrorCode);\n  }\n\n  /**\n   * LMSGetDiagnostic function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode: string): string {\n    return this.getDiagnostic(\"LMSGetDiagnostic\", CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  override setCMIValue(CMIElement: string, value: any): string {\n    return this._commonSetCMIValue(\"LMSSetValue\", false, CMIElement, value);\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  override getCMIValue(CMIElement: string): any {\n    return this._commonGetCMIValue(\"getCMIValue\", false, CMIElement);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {*} _value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI|null}\n   */\n  getChildElement(CMIElement: string, _value: any, foundFirstIndex: boolean): BaseCMI | null {\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      return new CMIObjectivesObject();\n    } else if (\n      foundFirstIndex &&\n      stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+\")\n    ) {\n      return new CMIInteractionsCorrectResponsesObject();\n    } else if (\n      foundFirstIndex &&\n      stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+\")\n    ) {\n      return new CMIInteractionsObjectivesObject();\n    } else if (!foundFirstIndex && stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\")) {\n      return new CMIInteractionsObject();\n    }\n\n    return null;\n  }\n\n  /**\n   * Validates Correct Response values\n   *\n   * @param {string} _CMIElement\n   * @param {*} _value\n   */\n  validateCorrectResponse(_CMIElement: string, _value: any) {\n    // do nothing\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {number|string} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  override getLmsErrorMessageDetails(errorNumber: number | string, detail: boolean): string {\n    let basicMessage = \"No Error\";\n    let detailMessage = \"No Error\";\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (scorm12_constants.error_descriptions[errorNumber]) {\n      basicMessage =\n        scorm12_constants.error_descriptions[errorNumber]?.basicMessage || basicMessage;\n      detailMessage =\n        scorm12_constants.error_descriptions[errorNumber]?.detailMessage || detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {Scorm12API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI: Scorm12API) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} includeTotalTime - Whether to include total time in the commit data\n   * @return {object|Array}\n   */\n  renderCommitCMI(\n    terminateCommit: boolean,\n    includeTotalTime: boolean = false,\n  ): StringKeyMap | Array<string> {\n    const cmiExport: StringKeyMap = this.renderCMIToJSONObject();\n\n    if (terminateCommit || includeTotalTime) {\n      (cmiExport.cmi as any).core.total_time = this.cmi.getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened: StringKeyMap = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case \"flattened\":\n        return Utilities.flatten(cmiExport);\n      case \"params\":\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case \"json\":\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} includeTotalTime - Whether to include total time in the commit data\n   * @return {CommitObject}\n   */\n  renderCommitObject(terminateCommit: boolean, includeTotalTime: boolean = false): CommitObject {\n    const cmiExport = this.renderCommitCMI(terminateCommit, includeTotalTime);\n    const calculateTotalTime = terminateCommit || includeTotalTime;\n    const totalTimeHHMMSS = calculateTotalTime ? this.cmi.getCurrentTotalTime() : \"\";\n    const totalTimeSeconds = Utilities.getTimeAsSeconds(totalTimeHHMMSS, scorm12_regex.CMITimespan);\n    const lessonStatus = this.cmi.core.lesson_status;\n    let completionStatus = CompletionStatus.UNKNOWN;\n    let successStatus = SuccessStatus.UNKNOWN;\n    if (lessonStatus) {\n      completionStatus =\n        lessonStatus === \"completed\" || lessonStatus === \"passed\"\n          ? CompletionStatus.COMPLETED\n          : CompletionStatus.INCOMPLETE;\n      if (lessonStatus === \"passed\") {\n        successStatus = SuccessStatus.PASSED;\n      } else if (lessonStatus === \"failed\") {\n        successStatus = SuccessStatus.FAILED;\n      }\n    }\n\n    const scoreObject: ScoreObject = this.cmi?.core?.score?.getScoreObject() || {};\n    const commitObject: CommitObject = {\n      successStatus: successStatus,\n      completionStatus: completionStatus,\n      runtimeData: cmiExport as StringKeyMap,\n      totalTimeSeconds: totalTimeSeconds,\n    };\n    if (scoreObject) {\n      commitObject.score = scoreObject;\n    }\n    return commitObject;\n  }\n\n  /**\n   * Attempts to store the data to the LMS\n   *\n   * @param {boolean} terminateCommit\n   * @return {ResultObject}\n   */\n  async storeData(terminateCommit: boolean): Promise<ResultObject> {\n    if (terminateCommit) {\n      const originalStatus = this.cmi.core.lesson_status;\n      if (\n        !this.cmi.core.lesson_status ||\n        (!this.statusSetByModule && this.cmi.core.lesson_status === \"not attempted\")\n      ) {\n        this.cmi.core.lesson_status = \"completed\";\n      }\n\n      if (this.cmi.core.lesson_mode === \"normal\") {\n        if (this.cmi.core.credit === \"credit\") {\n          if (\n            this.settings.mastery_override &&\n            this.cmi.student_data.mastery_score !== \"\" &&\n            this.cmi.core.score.raw !== \"\"\n          ) {\n            this.cmi.core.lesson_status =\n              parseFloat(this.cmi.core.score.raw) >= parseFloat(this.cmi.student_data.mastery_score)\n                ? \"passed\"\n                : \"failed\";\n          }\n        }\n      } else if (this.cmi.core.lesson_mode === \"browse\") {\n        if (\n          ((this.startingData?.cmi as any)?.core?.lesson_status || \"\") === \"\" &&\n          originalStatus === \"not attempted\"\n        ) {\n          this.cmi.core.lesson_status = \"browsed\";\n        }\n      }\n    }\n\n    const commitObject = this.getCommitObject(terminateCommit);\n    if (typeof this.settings.lmsCommitUrl === \"string\") {\n      return await this.processHttpRequest(\n        this.settings.lmsCommitUrl,\n        commitObject,\n        terminateCommit,\n      );\n    } else {\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    }\n  }\n}\n\nexport default Scorm12API;\n","import { ValidationError } from \"../exceptions\";\nimport { aicc_constants } from \"../constants/api_constants\";\n\nconst aicc_errors = aicc_constants.error_descriptions;\n\n/**\n * AICC Validation Error\n */\nexport class AICCValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(aicc_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        aicc_errors[String(errorCode)]?.basicMessage || \"Unknown error\",\n        aicc_errors[String(errorCode)]?.detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        aicc_errors[\"101\"]?.basicMessage || \"General error\",\n        aicc_errors[\"101\"]?.detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, AICCValidationError.prototype);\n  }\n}\n","import { checkValidFormat } from \"../common/validation\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function checkAICCValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm12_errors.TYPE_MISMATCH as number,\n    AICCValidationError,\n    allowEmptyString,\n  );\n}\n","import { CMIArray } from \"../common/array\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { aicc_regex } from \"../../constants/regex\";\n\n/**\n * AICC Evaluation object\n */\nexport class CMIEvaluation extends BaseCMI {\n  /**\n   * Constructor for AICC Evaluation object\n   */\n  constructor() {\n    super(\"cmi.evaluation\");\n    this.comments = new CMIEvaluationComments();\n  }\n\n  public comments: CMIEvaluationComments;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.comments?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this.comments?.reset();\n  }\n\n  /**\n   * toJSON for cmi.evaluation object\n   * @return {{comments: CMIEvaluationComments}}\n   */\n  toJSON(): {\n    comments: CMIEvaluationComments;\n  } {\n    this.jsonString = true;\n    const result = {\n      comments: this.comments,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing AICC's cmi.evaluation.comments object\n */\n\nclass CMIEvaluationComments extends CMIArray {\n  /**\n   * Constructor for AICC Evaluation Comments object\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.evaluation.comments\",\n      children: aicc_constants.comments_children,\n      errorCode: scorm12_errors.INVALID_SET_VALUE as number,\n      errorClass: AICCValidationError,\n    });\n  }\n}\n\n/**\n * Class for AICC Evaluation Comments\n */\nexport class CMIEvaluationCommentsObject extends BaseCMI {\n  private _content = \"\";\n  private _location = \"\";\n  private _time = \"\";\n\n  /**\n   * Constructor for Evaluation Comments\n   */\n  constructor() {\n    super(\"cmi.evaluation.comments.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._content = \"\";\n    this._location = \"\";\n    this._time = \"\";\n  }\n\n  /**\n   * Getter for _content\n   * @return {string}\n   */\n  get content(): string {\n    return this._content;\n  }\n\n  /**\n   * Setter for _content\n   * @param {string} content\n   */\n  set content(content: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".content\", content, aicc_regex.CMIString256)) {\n      this._content = content;\n    }\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".location\", location, aicc_regex.CMIString256)) {\n      this._location = location;\n    }\n  }\n\n  /**\n   * Getter for _time\n   * @return {string}\n   */\n  get time(): string {\n    return this._time;\n  }\n\n  /**\n   * Setting for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".time\", time, aicc_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.evaluation.comments.n object\n   * @return {\n   *    {\n   *      content: string,\n   *      location: string,\n   *      time: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    content: string;\n    location: string;\n    time: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      content: this.content,\n      location: this.location,\n      time: this.time,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { CMIStudentPreference } from \"../scorm12/student_preference\";\n\n/**\n * StudentPreferences class for AICC\n */\nexport class AICCStudentPreferences extends CMIStudentPreference {\n  /**\n   * Constructor for AICC Student Preferences object\n   */\n  constructor() {\n    super(aicc_constants.student_preference_children);\n    this.windows = new CMIArray({\n      CMIElement: \"cmi.student_preference.windows\",\n      errorCode: scorm12_errors.INVALID_SET_VALUE as number,\n      errorClass: AICCValidationError,\n      children: \"\",\n    });\n  }\n\n  public windows: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.windows?.initialize();\n  }\n\n  private _lesson_type = \"\";\n  private _text_color = \"\";\n  private _text_location = \"\";\n  private _text_size = \"\";\n  private _video = \"\";\n\n  /**\n   * Getter for _lesson_type\n   * @return {string}\n   */\n  get lesson_type(): string {\n    return this._lesson_type;\n  }\n\n  /**\n   * Setter for _lesson_type\n   * @param {string} lesson_type\n   */\n  set lesson_type(lesson_type: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".lesson_type\", lesson_type, aicc_regex.CMIString256)\n    ) {\n      this._lesson_type = lesson_type;\n    }\n  }\n\n  /**\n   * Getter for _text_color\n   * @return {string}\n   */\n  get text_color(): string {\n    return this._text_color;\n  }\n\n  /**\n   * Setter for _text_color\n   * @param {string} text_color\n   */\n  set text_color(text_color: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".text_color\", text_color, aicc_regex.CMIString256)\n    ) {\n      this._text_color = text_color;\n    }\n  }\n\n  /**\n   * Getter for _text_location\n   * @return {string}\n   */\n  get text_location(): string {\n    return this._text_location;\n  }\n\n  /**\n   * Setter for _text_location\n   * @param {string} text_location\n   */\n  set text_location(text_location: string) {\n    if (\n      checkAICCValidFormat(\n        this._cmi_element + \".text_location\",\n        text_location,\n        aicc_regex.CMIString256,\n      )\n    ) {\n      this._text_location = text_location;\n    }\n  }\n\n  /**\n   * Getter for _text_size\n   * @return {string}\n   */\n  get text_size(): string {\n    return this._text_size;\n  }\n\n  /**\n   * Setter for _text_size\n   * @param {string} text_size\n   */\n  set text_size(text_size: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".text_size\", text_size, aicc_regex.CMIString256)\n    ) {\n      this._text_size = text_size;\n    }\n  }\n\n  /**\n   * Getter for _video\n   * @return {string}\n   */\n  get video(): string {\n    return this._video;\n  }\n\n  /**\n   * Setter for _video\n   * @param {string} video\n   */\n  set video(video: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".video\", video, aicc_regex.CMIString256)) {\n      this._video = video;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_preference\n   *\n   * @return {\n   *    {\n   *      audio: string,\n   *      language: string,\n   *      speed: string,\n   *      text: string,\n   *      text_color: string,\n   *      text_location: string,\n   *      text_size: string,\n   *      video: string,\n   *      windows: CMIArray\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    audio: string;\n    language: string;\n    lesson_type: string;\n    speed: string;\n    text: string;\n    text_color: string;\n    text_location: string;\n    text_size: string;\n    video: string;\n    windows: CMIArray;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio: this.audio,\n      language: this.language,\n      lesson_type: this.lesson_type,\n      speed: this.speed,\n      text: this.text,\n      text_color: this.text_color,\n      text_location: this.text_location,\n      text_size: this.text_size,\n      video: this.video,\n      windows: this.windows,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Class representing the AICC cmi.student_demographics object\n */\nexport class CMIStudentDemographics extends BaseCMI {\n  private __children = aicc_constants.student_demographics_children;\n  private _city = \"\";\n  private _class = \"\";\n  private _company = \"\";\n  private _country = \"\";\n  private _experience = \"\";\n  private _familiar_name = \"\";\n  private _instructor_name = \"\";\n  private _title = \"\";\n  private _native_language = \"\";\n  private _state = \"\";\n  private _street_address = \"\";\n  private _telephone = \"\";\n  private _years_experience = \"\";\n\n  /**\n   * Constructor for AICC StudentDemographics object\n   */\n  constructor() {\n    super(\"cmi.student_demographics\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Getter for city\n   * @return {string}\n   */\n  get city(): string {\n    return this._city;\n  }\n\n  /**\n   * Setter for _city. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} city\n   */\n  set city(city: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.city\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._city = city;\n    }\n  }\n\n  /**\n   * Getter for class\n   * @return {string}\n   */\n  get class(): string {\n    return this._class;\n  }\n\n  /**\n   * Setter for _class. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} clazz\n   */\n  set class(clazz: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.class\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._class = clazz;\n    }\n  }\n\n  /**\n   * Getter for company\n   * @return {string}\n   */\n  get company(): string {\n    return this._company;\n  }\n\n  /**\n   * Setter for _company. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} company\n   */\n  set company(company: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.company\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._company = company;\n    }\n  }\n\n  /**\n   * Getter for country\n   * @return {string}\n   */\n  get country(): string {\n    return this._country;\n  }\n\n  /**\n   * Setter for _country. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} country\n   */\n  set country(country: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.country\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._country = country;\n    }\n  }\n\n  /**\n   * Getter for experience\n   * @return {string}\n   */\n  get experience(): string {\n    return this._experience;\n  }\n\n  /**\n   * Setter for _experience. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} experience\n   */\n  set experience(experience: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.experience\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._experience = experience;\n    }\n  }\n\n  /**\n   * Getter for familiar_name\n   * @return {string}\n   */\n  get familiar_name(): string {\n    return this._familiar_name;\n  }\n\n  /**\n   * Setter for _familiar_name. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} familiar_name\n   */\n  set familiar_name(familiar_name: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.familiar_name\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._familiar_name = familiar_name;\n    }\n  }\n\n  /**\n   * Getter for instructor_name\n   * @return {string}\n   */\n  get instructor_name(): string {\n    return this._instructor_name;\n  }\n\n  /**\n   * Setter for _instructor_name. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} instructor_name\n   */\n  set instructor_name(instructor_name: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.instructor_name\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._instructor_name = instructor_name;\n    }\n  }\n\n  /**\n   * Getter for title\n   * @return {string}\n   */\n  get title(): string {\n    return this._title;\n  }\n\n  /**\n   * Setter for _title. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} title\n   */\n  set title(title: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.title\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._title = title;\n    }\n  }\n\n  /**\n   * Getter for native_language\n   * @return {string}\n   */\n  get native_language(): string {\n    return this._native_language;\n  }\n\n  /**\n   * Setter for _native_language. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} native_language\n   */\n  set native_language(native_language: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.native_language\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._native_language = native_language;\n    }\n  }\n\n  /**\n   * Getter for state\n   * @return {string}\n   */\n  get state(): string {\n    return this._state;\n  }\n\n  /**\n   * Setter for _state. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} state\n   */\n  set state(state: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.state\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._state = state;\n    }\n  }\n\n  /**\n   * Getter for street_address\n   * @return {string}\n   */\n  get street_address(): string {\n    return this._street_address;\n  }\n\n  /**\n   * Setter for _street_address. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} street_address\n   */\n  set street_address(street_address: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.street_address\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._street_address = street_address;\n    }\n  }\n\n  /**\n   * Getter for telephone\n   * @return {string}\n   */\n  get telephone(): string {\n    return this._telephone;\n  }\n\n  /**\n   * Setter for _telephone. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} telephone\n   */\n  set telephone(telephone: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.telephone\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._telephone = telephone;\n    }\n  }\n\n  /**\n   * Getter for years_experience\n   * @return {string}\n   */\n  get years_experience(): string {\n    return this._years_experience;\n  }\n\n  /**\n   * Setter for _years_experience. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} years_experience\n   */\n  set years_experience(years_experience: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_demographics.years_experience\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._years_experience = years_experience;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_demographics object\n   * @return {\n   *      {\n   *        city: string,\n   *        class: string,\n   *        company: string,\n   *        country: string,\n   *        experience: string,\n   *        familiar_name: string,\n   *        instructor_name: string,\n   *        title: string,\n   *        native_language: string,\n   *        state: string,\n   *        street_address: string,\n   *        telephone: string,\n   *        years_experience: string\n   *      }\n   *    }\n   */\n  toJSON(): {\n    city: string;\n    class: string;\n    company: string;\n    country: string;\n    experience: string;\n    familiar_name: string;\n    instructor_name: string;\n    title: string;\n    native_language: string;\n    state: string;\n    street_address: string;\n    telephone: string;\n    years_experience: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      city: this.city,\n      class: this.class,\n      company: this.company,\n      country: this.country,\n      experience: this.experience,\n      familiar_name: this.familiar_name,\n      instructor_name: this.instructor_name,\n      title: this.title,\n      native_language: this.native_language,\n      state: this.state,\n      street_address: this.street_address,\n      telephone: this.telephone,\n      years_experience: this.years_experience,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { checkAICCValidFormat } from \"./validation\";\n\n/**\n * Class representing the AICC cmi.student_data.tries object\n */\nexport class CMITries extends CMIArray {\n  /**\n   * Constructor for inline Tries Array class\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.student_data.tries\",\n      children: aicc_constants.tries_children,\n    });\n  }\n}\n\n/**\n * Class for AICC Tries\n */\nexport class CMITriesObject extends BaseCMI {\n  private _status = \"\";\n  private _time = \"\";\n\n  /**\n   * Constructor for AICC Tries object\n   */\n  constructor() {\n    super(\"cmi.student_data.tries.n\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.student_data.tries.n.score\",\n      score_children: aicc_constants.score_children,\n      score_range: aicc_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE as number,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH as number,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE as number,\n      errorClass: AICCValidationError,\n    });\n  }\n\n  public score: CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this._status = \"\";\n    this._time = \"\";\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for _status\n   * @return {string}\n   */\n  get status(): string {\n    return this._status;\n  }\n\n  /**\n   * Setter for _status\n   * @param {string} status\n   */\n  set status(status: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".status\", status, aicc_regex.CMIStatus2)) {\n      this._status = status;\n    }\n  }\n\n  /**\n   * Getter for _time\n   * @return {string}\n   */\n  get time(): string {\n    return this._time;\n  }\n\n  /**\n   * Setter for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".time\", time, aicc_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data.tries.n object\n   * @return {\n   *    {\n   *      status: string,\n   *      time: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    status: string;\n    time: string;\n    score: CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      status: this.status,\n      time: this.time,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { CMIScore } from \"../common/score\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { CMIArray } from \"../common/array\";\n\n/**\n * Class for cmi.student_data.attempt_records array\n */\nexport class CMIAttemptRecords extends CMIArray {\n  /**\n   * Constructor for inline Tries Array class\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.student_data.attempt_records\",\n      children: aicc_constants.attempt_records_children,\n    });\n  }\n}\n\n/**\n * Class for AICC Attempt Records\n */\nexport class CMIAttemptRecordsObject extends BaseCMI {\n  private _lesson_status = \"\";\n\n  /**\n   * Constructor for AICC Attempt Records object\n   */\n  constructor() {\n    super(\"cmi.student_data.attempt_records.n\");\n    this.score = new CMIScore({\n      CMIElement: \"cmi.student_data.attempt_records.n.score\",\n      score_children: aicc_constants.score_children,\n      score_range: aicc_regex.score_range,\n      invalidErrorCode: scorm12_errors.INVALID_SET_VALUE as number,\n      invalidTypeCode: scorm12_errors.TYPE_MISMATCH as number,\n      invalidRangeCode: scorm12_errors.VALUE_OUT_OF_RANGE as number,\n      errorClass: AICCValidationError,\n    });\n  }\n\n  public score: CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n\n    this._lesson_status = \"\";\n    this.score?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n    this.score?.reset();\n  }\n\n  /**\n   * Getter for _lesson_status\n   * @return {string}\n   */\n  get lesson_status(): string {\n    return this._lesson_status;\n  }\n\n  /**\n   * Setter for _lesson_status\n   * @param {string} lesson_status\n   */\n  set lesson_status(lesson_status: string) {\n    if (\n      checkAICCValidFormat(\n        this._cmi_element + \".lesson_status\",\n        lesson_status,\n        aicc_regex.CMIStatus2,\n      )\n    ) {\n      this._lesson_status = lesson_status;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data.attempt_records.n object\n   * @return {\n   *    {\n   *         lesson_status: string,\n   *         score: CMIScore\n   *     }\n   *  }\n   */\n  toJSON(): {\n    lesson_status: string;\n    score: CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      lesson_status: this.lesson_status,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { AICCValidationError } from \"../../exceptions/aicc_exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { CMITries } from \"./tries\";\nimport { CMIStudentData } from \"../scorm12/student_data\";\nimport { CMIAttemptRecords } from \"./attempts\";\n\n/**\n * StudentData class for AICC\n */\nexport class AICCCMIStudentData extends CMIStudentData {\n  /**\n   * Constructor for AICC StudentData object\n   */\n  constructor() {\n    super(aicc_constants.student_data_children);\n    this.tries = new CMITries();\n    this.attempt_records = new CMIAttemptRecords();\n  }\n\n  public tries: CMITries;\n  public attempt_records: CMIAttemptRecords;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.tries?.initialize();\n    this.attempt_records?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n    this.tries?.reset(true);\n    this.attempt_records?.reset(true);\n  }\n\n  private _tries_during_lesson = \"\";\n\n  /**\n   * Getter for tries_during_lesson\n   * @return {string}\n   */\n  get tries_during_lesson(): string {\n    return this._tries_during_lesson;\n  }\n\n  /**\n   * Setter for _tries_during_lesson. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} tries_during_lesson\n   */\n  set tries_during_lesson(tries_during_lesson: string) {\n    if (this.initialized) {\n      throw new AICCValidationError(\n        \"cmi.student_data.tries_during_lesson\",\n        scorm12_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._tries_during_lesson = tries_during_lesson;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data object\n   * @return {\n   *    {\n   *      mastery_score: string,\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      tries: CMITries,\n   *      attempt_records: CMIAttemptRecords\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    mastery_score: string;\n    max_time_allowed: string;\n    time_limit_action: string;\n    tries: CMITries;\n    attempt_records: CMIAttemptRecords;\n  } {\n    this.jsonString = true;\n    const result = {\n      mastery_score: this.mastery_score,\n      max_time_allowed: this.max_time_allowed,\n      time_limit_action: this.time_limit_action,\n      tries: this.tries,\n      attempt_records: this.attempt_records,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { checkAICCValidFormat } from \"./validation\";\nimport { CMIArray } from \"../common/array\";\nimport { aicc_regex } from \"../../constants/regex\";\nimport { aicc_constants } from \"../../constants/api_constants\";\n\n/**\n * Class representing the AICC `cmi.paths` object\n */\nexport class CMIPaths extends CMIArray {\n  /**\n   * Constructor for inline Paths Array class\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.paths\",\n      children: aicc_constants.paths_children,\n    });\n  }\n}\n\n/**\n * Class for AICC Paths\n */\nexport class CMIPathsObject extends BaseCMI {\n  private _location_id = \"\";\n  private _date = \"\";\n  private _time = \"\";\n  private _status = \"\";\n  private _why_left = \"\";\n  private _time_in_element = \"\";\n\n  /**\n   * Constructor for AICC Paths objects\n   */\n  constructor() {\n    super(\"cmi.paths.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n\n    this._location_id = \"\";\n    this._date = \"\";\n    this._time = \"\";\n    this._status = \"\";\n    this._why_left = \"\";\n    this._time_in_element = \"\";\n  }\n\n  /**\n   * Getter for _location_id\n   * @return {string}\n   */\n  get location_id(): string {\n    return this._location_id;\n  }\n\n  /**\n   * Setter for _location_id\n   * @param {string} location_id\n   */\n  set location_id(location_id: string) {\n    if (\n      checkAICCValidFormat(this._cmi_element + \".location_id\", location_id, aicc_regex.CMIString256)\n    ) {\n      this._location_id = location_id;\n    }\n  }\n\n  /**\n   * Getter for _date\n   * @return {string}\n   */\n  get date(): string {\n    return this._date;\n  }\n\n  /**\n   * Setter for _date\n   * @param {string} date\n   */\n  set date(date: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".date\", date, aicc_regex.CMIString256)) {\n      this._date = date;\n    }\n  }\n\n  /**\n   * Getter for _time\n   * @return {string}\n   */\n  get time(): string {\n    return this._time;\n  }\n\n  /**\n   * Setter for _time\n   * @param {string} time\n   */\n  set time(time: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".time\", time, aicc_regex.CMITime)) {\n      this._time = time;\n    }\n  }\n\n  /**\n   * Getter for _status\n   * @return {string}\n   */\n  get status(): string {\n    return this._status;\n  }\n\n  /**\n   * Setter for _status\n   * @param {string} status\n   */\n  set status(status: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".status\", status, aicc_regex.CMIStatus2)) {\n      this._status = status;\n    }\n  }\n\n  /**\n   * Getter for _why_left\n   * @return {string}\n   */\n  get why_left(): string {\n    return this._why_left;\n  }\n\n  /**\n   * Setter for _why_left\n   * @param {string} why_left\n   */\n  set why_left(why_left: string) {\n    if (checkAICCValidFormat(this._cmi_element + \".why_left\", why_left, aicc_regex.CMIString256)) {\n      this._why_left = why_left;\n    }\n  }\n\n  /**\n   * Getter for _time_in_element\n   * @return {string}\n   */\n  get time_in_element(): string {\n    return this._time_in_element;\n  }\n\n  /**\n   * Setter for _time_in_element\n   * @param {string} time_in_element\n   */\n  set time_in_element(time_in_element: string) {\n    if (\n      checkAICCValidFormat(\n        this._cmi_element + \".time_in_element\",\n        time_in_element,\n        aicc_regex.CMITime,\n      )\n    ) {\n      this._time_in_element = time_in_element;\n    }\n  }\n\n  /**\n   * toJSON for cmi.paths.n object\n   * @return {\n   *    {\n   *      location_id: string,\n   *      date: string,\n   *      time: string,\n   *      status: string,\n   *      why_left: string,\n   *      time_in_element: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    location_id: string;\n    date: string;\n    time: string;\n    status: string;\n    why_left: string;\n    time_in_element: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      location_id: this.location_id,\n      date: this.date,\n      time: this.time,\n      status: this.status,\n      why_left: this.why_left,\n      time_in_element: this.time_in_element,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import * as Scorm12CMI from \"../scorm12/cmi\";\nimport { aicc_constants } from \"../../constants/api_constants\";\nimport { CMIEvaluation } from \"./evaluation\";\nimport { AICCStudentPreferences } from \"./student_preferences\";\nimport { CMIStudentDemographics } from \"./student_demographics\";\nimport { AICCCMIStudentData } from \"./student_data\";\nimport { CMIPaths } from \"./paths\";\nimport { CMICore } from \"./core\";\nimport { CMIObjectives } from \"../scorm12/objectives\";\nimport { CMIStudentData } from \"../scorm12/student_data\";\nimport { CMIStudentPreference } from \"../scorm12/student_preference\";\nimport { CMIInteractions } from \"../scorm12/interactions\";\n\n/**\n * CMI Class for AICC\n */\nexport class CMI extends Scorm12CMI.CMI {\n  /**\n   * Constructor for AICC CMI object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean = false) {\n    super(aicc_constants.cmi_children);\n    if (initialized) this.initialize();\n    this.student_preference = new AICCStudentPreferences();\n    this.student_data = new AICCCMIStudentData();\n    this.student_demographics = new CMIStudentDemographics();\n    this.evaluation = new CMIEvaluation();\n    this.paths = new CMIPaths();\n  }\n\n  public override student_data: AICCCMIStudentData;\n  public override student_preference: AICCStudentPreferences;\n  public student_demographics: CMIStudentDemographics;\n  public evaluation: CMIEvaluation;\n  public paths: CMIPaths;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.student_preference?.initialize();\n    this.student_data?.initialize();\n    this.student_demographics?.initialize();\n    this.evaluation?.initialize();\n    this.paths?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions,\n   *      paths: CMIPaths\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    suspend_data: string;\n    launch_data: string;\n    comments: string;\n    comments_from_lms: string;\n    core: CMICore;\n    objectives: CMIObjectives;\n    student_data: CMIStudentData;\n    student_preference: CMIStudentPreference;\n    student_demographics: CMIStudentDemographics;\n    interactions: CMIInteractions;\n    evaluation: CMIEvaluation;\n    paths: CMIPaths;\n  } {\n    this.jsonString = true;\n    const result = {\n      suspend_data: this.suspend_data,\n      launch_data: this.launch_data,\n      comments: this.comments,\n      comments_from_lms: this.comments_from_lms,\n      core: this.core,\n      objectives: this.objectives,\n      student_data: this.student_data,\n      student_preference: this.student_preference,\n      student_demographics: this.student_demographics,\n      interactions: this.interactions,\n      evaluation: this.evaluation,\n      paths: this.paths,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import Scorm12API from \"./Scorm12API\";\nimport { CMI } from \"./cmi/aicc/cmi\";\n\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport { CMITriesObject } from \"./cmi/aicc/tries\";\nimport { CMIAttemptRecordsObject } from \"./cmi/aicc/attempts\";\nimport { CMIEvaluationCommentsObject } from \"./cmi/aicc/evaluation\";\nimport { NAV } from \"./cmi/scorm12/nav\";\nimport { CMIPathsObject } from \"./cmi/aicc/paths\";\nimport { Settings } from \"./types/api_types\";\nimport { stringMatches } from \"./utilities\";\n\n/**\n * The AICC API class\n */\nclass AICC extends Scorm12API {\n  /**\n   * Constructor to create AICC API object\n   * @param {Settings} settings\n   */\n  constructor(settings?: Settings) {\n    super(settings);\n\n    this.cmi = new CMI();\n    this.nav = new NAV();\n  }\n\n  override cmi: CMI;\n  override nav: NAV;\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI | null}\n   */\n  override getChildElement(\n    CMIElement: string,\n    value: any,\n    foundFirstIndex: boolean,\n  ): BaseCMI | null {\n    let newChild = super.getChildElement(CMIElement, value, foundFirstIndex);\n\n    if (!newChild) {\n      if (stringMatches(CMIElement, \"cmi\\\\.evaluation\\\\.comments\\\\.\\\\d+\")) {\n        newChild = new CMIEvaluationCommentsObject();\n      } else if (stringMatches(CMIElement, \"cmi\\\\.student_data\\\\.tries\\\\.\\\\d+\")) {\n        newChild = new CMITriesObject();\n      } else if (stringMatches(CMIElement, \"cmi\\\\.student_data\\\\.attempt_records\\\\.\\\\d+\")) {\n        newChild = new CMIAttemptRecordsObject();\n      } else if (stringMatches(CMIElement, \"cmi\\\\.paths\\\\.\\\\d+\")) {\n        newChild = new CMIPathsObject();\n      }\n    }\n\n    return newChild;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {AICC} newAPI\n   */\n  override replaceWithAnotherScormAPI(newAPI: AICC) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.nav = newAPI.nav;\n  }\n}\n\nexport default AICC;\n","import { ValidationError } from \"../exceptions\";\nimport { scorm2004_constants } from \"../constants/api_constants\";\n\nconst scorm2004_errors = scorm2004_constants.error_descriptions;\n\n/**\n * SCORM 2004 Validation Error\n */\nexport class Scorm2004ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm2004_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm2004_errors[String(errorCode)]?.basicMessage || \"Unknown error\",\n        scorm2004_errors[String(errorCode)]?.detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm2004_errors[\"101\"]?.basicMessage || \"General error\",\n        scorm2004_errors[\"101\"]?.detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm2004ValidationError.prototype);\n  }\n}\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check2004ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm2004_errors.TYPE_MISMATCH as number,\n    Scorm2004ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @return {boolean}\n */\nexport function check2004ValidRange(\n  CMIElement: string,\n  value: string,\n  rangePattern: string,\n): boolean {\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm2004_errors.VALUE_OUT_OF_RANGE as number,\n    Scorm2004ValidationError,\n  );\n}\n","/**\n * Class for SCORM 2004's cmi.learner_preference object\n */\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\n\nexport class CMILearnerPreference extends BaseCMI {\n  private __children = scorm2004_constants.student_preference_children;\n  private _audio_level = \"1\";\n  private _language = \"\";\n  private _delivery_speed = \"1\";\n  private _audio_captioning = \"0\";\n\n  /**\n   * Constructor for cmi.learner_preference\n   */\n  constructor() {\n    super(\"cmi.learner_preference\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._children\",\n      scorm2004_errors.READ_ONLY_ELEMENT as number,\n    );\n  }\n\n  /**\n   * Getter for _audio_level\n   * @return {string}\n   */\n  get audio_level(): string {\n    return this._audio_level;\n  }\n\n  /**\n   * Setter for _audio_level\n   * @param {string} audio_level\n   */\n  set audio_level(audio_level: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".audio_level\",\n        audio_level,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".audio_level\",\n        audio_level,\n        scorm2004_regex.audio_range,\n      )\n    ) {\n      this._audio_level = audio_level;\n    }\n  }\n\n  /**\n   * Getter for _language\n   * @return {string}\n   */\n  get language(): string {\n    return this._language;\n  }\n\n  /**\n   * Setter for _language\n   * @param {string} language\n   */\n  set language(language: string) {\n    if (check2004ValidFormat(this._cmi_element + \".language\", language, scorm2004_regex.CMILang)) {\n      this._language = language;\n    }\n  }\n\n  /**\n   * Getter for _delivery_speed\n   * @return {string}\n   */\n  get delivery_speed(): string {\n    return this._delivery_speed;\n  }\n\n  /**\n   * Setter for _delivery_speed\n   * @param {string} delivery_speed\n   */\n  set delivery_speed(delivery_speed: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".delivery_speed\",\n        delivery_speed,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".delivery_speed\",\n        delivery_speed,\n        scorm2004_regex.speed_range,\n      )\n    ) {\n      this._delivery_speed = delivery_speed;\n    }\n  }\n\n  /**\n   * Getter for _audio_captioning\n   * @return {string}\n   */\n  get audio_captioning(): string {\n    return this._audio_captioning;\n  }\n\n  /**\n   * Setter for _audio_captioning\n   * @param {string} audio_captioning\n   */\n  set audio_captioning(audio_captioning: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".audio_captioning\",\n        audio_captioning,\n        scorm2004_regex.CMISInteger,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".audio_captioning\",\n        audio_captioning,\n        scorm2004_regex.text_range,\n      )\n    ) {\n      this._audio_captioning = audio_captioning;\n    }\n  }\n\n  /**\n   * toJSON for cmi.learner_preference\n   *\n   * @return {\n   *    {\n   *      audio_level: string,\n   *      language: string,\n   *      delivery_speed: string,\n   *      audio_captioning: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    audio_level: string;\n    language: string;\n    delivery_speed: string;\n    audio_captioning: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio_level: this.audio_level,\n      language: this.language,\n      delivery_speed: this.delivery_speed,\n      audio_captioning: this.audio_captioning,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { scorm2004_regex } from \"./regex\";\n\nexport const LearnerResponses: Responses = {\n  \"true-false\": {\n    format: \"^true$|^false$\",\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  choice: {\n    format: scorm2004_regex.CMILongIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    unique: true,\n  },\n  \"fill-in\": {\n    format: scorm2004_regex.CMILangString250,\n    max: 10,\n    delimiter: \"[,]\",\n    unique: false,\n  },\n  \"long-fill-in\": {\n    format: scorm2004_regex.CMILangString4000,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  matching: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n  },\n  performance: {\n    format: \"^$|\" + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + \"|^$|\" + scorm2004_regex.CMIShortIdentifier,\n    max: 250,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n  },\n  sequencing: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    unique: false,\n  },\n  likert: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  numeric: {\n    format: scorm2004_regex.CMIDecimal,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  other: {\n    format: scorm2004_regex.CMIString4000,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n};\nexport const CorrectResponses: Responses = {\n  \"true-false\": {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: \"^true$|^false$\",\n    limit: 1,\n  },\n  choice: {\n    max: 36,\n    delimiter: \"[,]\",\n    unique: true,\n    duplicate: false,\n    format: scorm2004_regex.CMILongIdentifier,\n  },\n  \"fill-in\": {\n    max: 10,\n    delimiter: \"[,]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMILangString250cr,\n  },\n  \"long-fill-in\": {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: true,\n    format: scorm2004_regex.CMILangString4000,\n  },\n  matching: {\n    max: 36,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n  },\n  performance: {\n    max: 250,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    delimiter3: \"[:]\",\n    unique: false,\n    duplicate: false,\n    // step_name must be a non-empty short identifier\n    format: scorm2004_regex.CMIShortIdentifier,\n    // step_answer may be short identifier or numeric range (<decimal>[:<decimal>])\n    format2: `^(${scorm2004_regex.CMIShortIdentifier})$|^(?:\\\\d+(?:\\\\.\\\\d+)?(?::\\\\d+(?:\\\\.\\\\d+)?)?)$`,\n  },\n  sequencing: {\n    max: 36,\n    delimiter: \"[,]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n  },\n  likert: {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    limit: 1,\n  },\n  numeric: {\n    max: 2,\n    delimiter: \"[:]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIDecimal,\n    limit: 1,\n  },\n  other: {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIString4000,\n    limit: 1,\n  },\n};\n\nexport type ResponseType = {\n  format: string;\n  max: number;\n  delimiter: string;\n  unique: boolean;\n  duplicate?: boolean;\n  format2?: string;\n  delimiter2?: string;\n  limit?: number;\n  delimiter3?: string;\n};\n\nexport type Responses = {\n  [key: string]: ResponseType;\n};\n","/**\n * Class representing SCORM 2004's `cmi.interactions` object\n */\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { CMIArray } from \"../common/array\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport {\n  CorrectResponses,\n  LearnerResponses,\n  ResponseType,\n} from \"../../constants/response_constants\";\n\nexport class CMIInteractions extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives` Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.interactions\",\n      children: scorm2004_constants.interactions_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.interaction.n object\n */\n\nexport class CMIInteractionsObject extends BaseCMI {\n  private _id = \"\";\n  private _type = \"\";\n  private _timestamp = \"\";\n  private _weighting = \"\";\n  private _learner_response = \"\";\n  private _result = \"\";\n  private _latency = \"\";\n  private _description = \"\";\n\n  /**\n   * Constructor for cmi.interaction.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n\");\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.n.correct_responses\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  public objectives: CMIArray;\n  public correct_responses: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._id = \"\";\n    this._type = \"\";\n    this._timestamp = \"\";\n    this._weighting = \"\";\n    this._learner_response = \"\";\n    this._result = \"\";\n    this._latency = \"\";\n    this._description = \"\";\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.n.correct_responses\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _type\n   * @return {string}\n   */\n  get type(): string {\n    return this._type;\n  }\n\n  /**\n   * Setter for _type\n   * @param {string} type\n   */\n  set type(type: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".type\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (check2004ValidFormat(this._cmi_element + \".type\", type, scorm2004_regex.CMIType)) {\n        this._type = type;\n      }\n    }\n  }\n\n  /**\n   * Getter for _timestamp\n   * @return {string}\n   */\n  get timestamp(): string {\n    return this._timestamp;\n  }\n\n  /**\n   * Setter for _timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".timestamp\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".timestamp\", timestamp, scorm2004_regex.CMITime)\n      ) {\n        this._timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * Getter for _weighting\n   * @return {string}\n   */\n  get weighting(): string {\n    return this._weighting;\n  }\n\n  /**\n   * Setter for _weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".weighting\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".weighting\",\n          weighting,\n          scorm2004_regex.CMIDecimal,\n        )\n      ) {\n        this._weighting = weighting;\n      }\n    }\n  }\n\n  /**\n   * Getter for _learner_response\n   * @return {string}\n   */\n  get learner_response(): string {\n    return this._learner_response;\n  }\n\n  /**\n   * Setter for _learner_response. Does type validation to make sure response\n   * matches SCORM 2004's spec\n   * @param {string} learner_response\n   */\n  set learner_response(learner_response: string) {\n    if (this.initialized && (this._type === \"\" || this._id === \"\")) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_response\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      let nodes = [];\n      const response_type = LearnerResponses[this.type];\n\n      if (response_type) {\n        if (response_type?.delimiter) {\n          // Convert regex-style delimiter to actual character\n          const delimiter = response_type.delimiter === \"[,]\" ? \",\" : response_type.delimiter;\n          nodes = learner_response.split(delimiter);\n        } else {\n          nodes[0] = learner_response;\n        }\n\n        if (nodes.length > 0 && nodes.length <= response_type.max) {\n          const formatRegex = new RegExp(response_type.format);\n\n          for (let i = 0; i < nodes.length; i++) {\n            if (response_type?.delimiter2) {\n              // Convert regex-style delimiter to actual character\n              const delimiter2 =\n                response_type.delimiter2 === \"[.]\" ? \".\" : response_type.delimiter2;\n              const values = nodes[i]?.split(delimiter2);\n\n              if (values?.length === 2) {\n                // For performance type, both parts must be non-empty\n                if (this.type === \"performance\" && (values[0] === \"\" || values[1] === \"\")) {\n                  throw new Scorm2004ValidationError(\n                    this._cmi_element + \".learner_response\",\n                    scorm2004_errors.TYPE_MISMATCH as number,\n                  );\n                }\n\n                if (!values[0]?.match(formatRegex)) {\n                  throw new Scorm2004ValidationError(\n                    this._cmi_element + \".learner_response\",\n                    scorm2004_errors.TYPE_MISMATCH as number,\n                  );\n                } else {\n                  if (\n                    !response_type.format2 ||\n                    !values[1]?.match(new RegExp(response_type.format2))\n                  ) {\n                    throw new Scorm2004ValidationError(\n                      this._cmi_element + \".learner_response\",\n                      scorm2004_errors.TYPE_MISMATCH as number,\n                    );\n                  }\n                }\n              } else {\n                throw new Scorm2004ValidationError(\n                  this._cmi_element + \".learner_response\",\n                  scorm2004_errors.TYPE_MISMATCH as number,\n                );\n              }\n            } else {\n              if (!nodes[i]?.match(formatRegex)) {\n                throw new Scorm2004ValidationError(\n                  this._cmi_element + \".learner_response\",\n                  scorm2004_errors.TYPE_MISMATCH as number,\n                );\n              } else {\n                if (nodes[i] !== \"\" && response_type.unique) {\n                  for (let j = 0; j < i; j++) {\n                    if (nodes[i] === nodes[j]) {\n                      throw new Scorm2004ValidationError(\n                        this._cmi_element + \".learner_response\",\n                        scorm2004_errors.TYPE_MISMATCH as number,\n                      );\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          throw new Scorm2004ValidationError(\n            this._cmi_element + \".learner_response\",\n            scorm2004_errors.GENERAL_SET_FAILURE as number,\n          );\n        }\n\n        this._learner_response = learner_response;\n      } else {\n        throw new Scorm2004ValidationError(\n          this._cmi_element + \".learner_response\",\n          scorm2004_errors.TYPE_MISMATCH as number,\n        );\n      }\n    }\n  }\n\n  /**\n   * Getter for _result\n   * @return {string}\n   */\n  get result(): string {\n    return this._result;\n  }\n\n  /**\n   * Setter for _result\n   * @param {string} result\n   */\n  set result(result: string) {\n    if (check2004ValidFormat(this._cmi_element + \".result\", result, scorm2004_regex.CMIResult)) {\n      this._result = result;\n    }\n  }\n\n  /**\n   * Getter for _latency\n   * @return {string}\n   */\n  get latency(): string {\n    return this._latency;\n  }\n\n  /**\n   * Setter for _latency\n   * @param {string} latency\n   */\n  set latency(latency: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".latency\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".latency\", latency, scorm2004_regex.CMITimespan)\n      ) {\n        this._latency = latency;\n      }\n    }\n  }\n\n  /**\n   * Getter for _description\n   * @return {string}\n   */\n  get description(): string {\n    return this._description;\n  }\n\n  /**\n   * Setter for _description\n   * @param {string} description\n   */\n  set description(description: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".description\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".description\",\n          description,\n          scorm2004_regex.CMILangString250,\n          true,\n        )\n      ) {\n        this._description = description;\n      }\n    }\n  }\n\n  // noinspection JSUnusedGlobalSymbols\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      type: string,\n   *      objectives: CMIArray,\n   *      timestamp: string,\n   *      correct_responses: CMIArray,\n   *      weighting: string,\n   *      learner_response: string,\n   *      result: string,\n   *      latency: string,\n   *      description: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    type: string;\n    objectives: CMIArray;\n    timestamp: string;\n    correct_responses: CMIArray;\n    weighting: string;\n    learner_response: string;\n    result: string;\n    latency: string;\n    description: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      type: this.type,\n      objectives: this.objectives,\n      timestamp: this.timestamp,\n      weighting: this.weighting,\n      learner_response: this.learner_response,\n      result: this.result,\n      latency: this.latency,\n      description: this.description,\n      correct_responses: this.correct_responses,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.objectives.n object\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  private _id = \"\";\n\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n.objectives.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._id = \"\";\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Helper: strip the square-bracket notation (e.g. \"[,]\") down to the character (\",\")\n */\nfunction stripBrackets(delim: string): string {\n  return delim.replace(/[[\\]]/g, \"\");\n}\n\n// Helper to escape a string for use in a RegExp\nfunction escapeRegex(s: string): string {\n  // Only , and . are expected, but escape any regex special chars for safety\n  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\n\n/**\n * Split on unescaped delimiter and unescape the delimiter in resulting parts.\n * @param text - the input string\n * @param delim - the delimiter character, e.g. ',' or '.'\n */\nfunction splitUnescaped(text: string, delim: string): string[] {\n  const reDelim = escapeRegex(delim);\n  const splitRe = new RegExp(`(?<!\\\\\\\\)${reDelim}`, \"g\");\n  const unescapeRe = new RegExp(`\\\\\\\\${reDelim}`, \"g\");\n  return text.split(splitRe).map((part) => part.replace(unescapeRe, delim));\n}\n\n/**\n * Helper: validate a `pattern` string against its SCORM definition\n */\nfunction validatePattern(type: string, pattern: string, responseDef: ResponseType) {\n  // Reject patterns with leading or trailing whitespace\n  if (pattern.trim() !== pattern) {\n    throw new Scorm2004ValidationError(\n      \"cmi.interactions.n.correct_responses.n.pattern\",\n      scorm2004_errors.TYPE_MISMATCH as number,\n    );\n  }\n\n  // Reject any nodes with leading/trailing whitespace around tokens\n  const subDelim1 = responseDef.delimiter ? stripBrackets(responseDef.delimiter) : null;\n  const rawNodes = subDelim1 ? splitUnescaped(pattern, subDelim1) : [pattern];\n  for (const raw of rawNodes) {\n    if (raw.trim() !== raw) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n  }\n\n  // Allow empty fill-in patterns\n  if (type === \"fill-in\" && pattern === \"\") {\n    return;\n  }\n  // Split into nodes on the primary delimiter (if any)\n  const delim1 = responseDef.delimiter ? stripBrackets(responseDef.delimiter) : null;\n  let nodes: string[];\n  if (delim1) {\n    nodes = splitUnescaped(pattern, delim1);\n  } else {\n    nodes = [pattern];\n  }\n\n  // If no primary delimiter but pattern contains comma, reject multiple entries\n  if (!responseDef.delimiter && pattern.includes(\",\")) {\n    throw new Scorm2004ValidationError(\n      \"cmi.interactions.n.correct_responses.n.pattern\",\n      scorm2004_errors.TYPE_MISMATCH as number,\n    );\n  }\n\n  // Enforce uniqueness or disallow duplicates if required\n  if (responseDef.unique || responseDef.duplicate === false) {\n    const seen = new Set(nodes);\n    if (seen.size !== nodes.length) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n  }\n\n  // Must have at least 1 node, and no more than max\n  if (nodes.length === 0 || nodes.length > responseDef.max) {\n    throw new Scorm2004ValidationError(\n      \"cmi.interactions.n.correct_responses.n.pattern\",\n      scorm2004_errors.GENERAL_SET_FAILURE as number,\n    );\n  }\n\n  const fmt1 = new RegExp(responseDef.format);\n  const fmt2 = responseDef.format2 ? new RegExp(responseDef.format2) : null;\n\n  const checkSingle = (value: string) => {\n    if (!fmt1.test(value)) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n  };\n\n  const checkPair = (value: string, delimBracketed?: string) => {\n    if (!delimBracketed) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    const delim = stripBrackets(delimBracketed);\n    const parts = value\n      .split(new RegExp(`(?<!\\\\\\\\)${escapeRegex(delim)}`, \"g\"))\n      .map((n) => n.replace(new RegExp(`\\\\\\\\${escapeRegex(delim)}`, \"g\"), delim));\n    if (parts.length !== 2 || parts[0] === \"\" || parts[1] === \"\") {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    // test both parts\n    if (\n      (parts[0] !== undefined && !fmt1.test(parts[0])) ||\n      (fmt2 && parts[1] !== undefined && !fmt2.test(parts[1]))\n    ) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n  };\n\n  for (const node of nodes) {\n    switch (type) {\n      case \"numeric\": {\n        // 1 or 2 numeric values separated by \":\"\n        const numDelim = responseDef.delimiter ? stripBrackets(responseDef.delimiter) : \":\";\n        const nums = node.split(numDelim);\n        if (nums.length < 1 || nums.length > 2) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        nums.forEach(checkSingle);\n        break;\n      }\n\n      case \"performance\": {\n        // split into parts on unescaped dot\n        const delimBracketed = responseDef.delimiter2;\n        if (!delimBracketed) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        const delim = stripBrackets(delimBracketed);\n        // split into parts on unescaped dot\n        const allParts = splitUnescaped(node, delim);\n        if (!node.includes(\":\") && allParts.length !== 2) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        // use splitUnescaped to get [part1, part2]\n        const [part1, part2] = splitUnescaped(node, delim);\n        // Validate non-empty\n        if (part1 === \"\" || part2 === \"\" || part1 === part2) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        // part1 against format1\n        if (part1 === undefined || !fmt1.test(part1)) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        // part2 against format2\n        if (fmt2 && part2 !== undefined && !fmt2.test(part2)) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        break;\n      }\n\n      default:\n        if (responseDef.delimiter2) {\n          // matching and other two-part types\n          checkPair(node, responseDef.delimiter2);\n        } else {\n          // simple single-value types (true-false, choice, fill-in, etc.)\n          checkSingle(node);\n        }\n    }\n  }\n}\n\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  private _pattern = \"\";\n  private readonly _interactionType?: string | undefined;\n\n  /**\n   * Constructor for cmi.interactions.n.correct_responses.n\n   * @param interactionType The type of interaction (e.g. \"numeric\", \"choice\", etc.)\n   */\n  constructor(interactionType?: string) {\n    super(\"cmi.interactions.n.correct_responses.n\");\n    this._interactionType = interactionType;\n  }\n\n  override reset() {\n    this._initialized = false;\n    this._pattern = \"\";\n  }\n\n  get pattern(): string {\n    return this._pattern;\n  }\n\n  set pattern(pattern: string) {\n    // Allow empty fill-in patterns\n    if (this._interactionType === \"fill-in\" && pattern === \"\") {\n      this._pattern = \"\";\n      return;\n    }\n    // 1) Basic SCORM‐pattern format check\n    if (\n      !check2004ValidFormat(this._cmi_element + \".pattern\", pattern, scorm2004_regex.CMIFeedback)\n    ) {\n      return;\n    }\n\n    // 2) If we know the interaction type, run the detailed validator\n    if (this._interactionType) {\n      const responseDef = CorrectResponses[this._interactionType];\n      if (responseDef) {\n        // Skip detailed validation for matching when pattern contains escaped comma or dot\n        if (this._interactionType === \"matching\" && /\\\\[.,]/.test(pattern)) {\n          // accept escaped comma or dot patterns without further validation\n        } else {\n          validatePattern(this._interactionType, pattern, responseDef);\n        }\n      }\n    }\n\n    // 3) Finally, set\n    this._pattern = pattern;\n  }\n\n  toJSON(): { pattern: string } {\n    this.jsonString = true;\n    const result = { pattern: this.pattern };\n    this.jsonString = false;\n    return result;\n  }\n}\n","/**\n * Class for SCORM 2004's cmi *.score object\n */\nimport { CMIScore } from \"../common/score\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { ScoreObject } from \"../../types/api_types\";\n\nexport class Scorm2004CMIScore extends CMIScore {\n  private _scaled = \"\";\n\n  /**\n   * Constructor for cmi *.score\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.score\",\n      score_children: scorm2004_constants.score_children,\n      max: \"\",\n      invalidErrorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      invalidTypeCode: scorm2004_errors.TYPE_MISMATCH as number,\n      invalidRangeCode: scorm2004_errors.VALUE_OUT_OF_RANGE as number,\n      decimalRegex: scorm2004_regex.CMIDecimal,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n    this._scaled = \"\";\n    this._raw = \"\";\n    this._min = \"\";\n    this._max = \"\";\n  }\n\n  /**\n   * Getter for _scaled\n   * @return {string}\n   */\n  get scaled(): string {\n    return this._scaled;\n  }\n\n  /**\n   * Setter for _scaled\n   * @param {string} scaled\n   */\n  set scaled(scaled: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".scaled\", scaled, scorm2004_regex.CMIDecimal) &&\n      check2004ValidRange(this._cmi_element + \".scaled\", scaled, scorm2004_regex.scaled_range)\n    ) {\n      this._scaled = scaled;\n    }\n  }\n\n  override getScoreObject(): ScoreObject {\n    const scoreObject = super.getScoreObject();\n\n    if (!Number.isNaN(Number.parseFloat(this.scaled))) {\n      scoreObject.scaled = Number.parseFloat(this.scaled);\n    }\n\n    return scoreObject;\n  }\n\n  /**\n   * toJSON for cmi *.score\n   *\n   * @return {\n   *    {\n   *      scaled: string,\n   *      raw: string,\n   *      min: string,\n   *      max: string\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    scaled: string;\n    raw: string;\n    min: string;\n    max: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      scaled: this.scaled,\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_lms object\n * @extends CMIArray\n */\nexport class CMICommentsFromLMS extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_lms Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.comments_from_lms\",\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner object\n */\n\nexport class CMICommentsFromLearner extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_learner Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.comments_from_learner\",\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner.n and cmi.comments_from_lms.n object\n */\n\nexport class CMICommentsObject extends BaseCMI {\n  private _comment = \"\";\n  private _location = \"\";\n  private _timestamp = \"\";\n  private readonly _readOnlyAfterInit: boolean;\n\n  /**\n   * Constructor for cmi.comments_from_learner.n and cmi.comments_from_lms.n\n   * @param {boolean} readOnlyAfterInit\n   */\n  constructor(readOnlyAfterInit: boolean = false) {\n    super(\"cmi.comments_from_learner.n\");\n    this._comment = \"\";\n    this._location = \"\";\n    this._timestamp = \"\";\n    this._readOnlyAfterInit = readOnlyAfterInit;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _comment\n   * @return {string}\n   */\n  get comment(): string {\n    return this._comment;\n  }\n\n  /**\n   * Setter for _comment\n   * @param {string} comment\n   */\n  set comment(comment: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".comment\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".comment\",\n          comment,\n          scorm2004_regex.CMILangString4000,\n          true,\n        )\n      ) {\n        this._comment = comment;\n      }\n    }\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".location\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".location\",\n          location,\n          scorm2004_regex.CMIString250,\n        )\n      ) {\n        this._location = location;\n      }\n    }\n  }\n\n  /**\n   * Getter for _timestamp\n   * @return {string}\n   */\n  get timestamp(): string {\n    return this._timestamp;\n  }\n\n  /**\n   * Setter for _timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".timestamp\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".timestamp\", timestamp, scorm2004_regex.CMITime)\n      ) {\n        this._timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.comments_from_learner.n object\n   * @return {\n   *    {\n   *      comment: string,\n   *      location: string,\n   *      timestamp: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    comment: string;\n    location: string;\n    timestamp: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      comment: this.comment,\n      location: this.location,\n      timestamp: this.timestamp,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { Scorm2004CMIScore } from \"./score\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\n\n/**\n * Class representing SCORM 2004's `cmi.objectives` object\n * @extends CMIArray\n */\nexport class CMIObjectives extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives` Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.objectives\",\n      children: scorm2004_constants.objectives_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n\n  /**\n   * Find an objective by its ID\n   */\n  public findObjectiveById(id: string): CMIObjectivesObject | undefined {\n    return this.childArray.find((objective) => objective.id === id);\n  }\n\n  /**\n   * Find objective by its index\n   */\n  public findObjectiveByIndex(index: number): CMIObjectivesObject {\n    return this.childArray[index];\n  }\n\n  /**\n   * Set an objective at the given index\n   */\n  public setObjectiveByIndex(index: number, objective: CMIObjectivesObject) {\n    this.childArray[index] = objective;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.objectives.n object\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  private _id = \"\";\n  private _success_status = \"unknown\";\n  private _completion_status = \"unknown\";\n  private _progress_measure = \"\";\n  private _description = \"\";\n\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super(\"cmi.objectives.n\");\n    this.score = new Scorm2004CMIScore();\n  }\n\n  override reset() {\n    this._initialized = false;\n  }\n\n  public score: Scorm2004CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this._success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".success_status\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".success_status\",\n          success_status,\n          scorm2004_regex.CMISStatus,\n        )\n      ) {\n        this._success_status = success_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this._completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".completion_status\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".completion_status\",\n          completion_status,\n          scorm2004_regex.CMICStatus,\n        )\n      ) {\n        this._completion_status = completion_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this._progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".progress_measure\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".progress_measure\",\n          progress_measure,\n          scorm2004_regex.CMIDecimal,\n        ) &&\n        check2004ValidRange(\n          this._cmi_element + \".progress_measure\",\n          progress_measure,\n          scorm2004_regex.progress_range,\n        )\n      ) {\n        this._progress_measure = progress_measure;\n      }\n    }\n  }\n\n  /**\n   * Getter for _description\n   * @return {string}\n   */\n  get description(): string {\n    return this._description;\n  }\n\n  /**\n   * Setter for _description\n   * @param {string} description\n   */\n  set description(description: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".description\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".description\",\n          description,\n          scorm2004_regex.CMILangString250,\n          true,\n        )\n      ) {\n        this._description = description;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      success_status: string,\n   *      completion_status: string,\n   *      progress_measure: string,\n   *      description: string,\n   *      score: Scorm2004CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    success_status: string;\n    completion_status: string;\n    progress_measure: string;\n    description: string;\n    score: Scorm2004CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      success_status: this.success_status,\n      completion_status: this.completion_status,\n      progress_measure: this.progress_measure,\n      description: this.description,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","/**\n * Class representing metadata properties for SCORM 2004's cmi object\n */\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing metadata properties for SCORM 2004's cmi object\n */\nexport class CMIMetadata extends BaseCMI {\n  private __version = \"1.0\";\n  private __children = scorm2004_constants.cmi_children;\n\n  /**\n   * Constructor for CMIMetadata\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   */\n  get _version(): string {\n    return this.__version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version: string) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._version\",\n      scorm2004_errors.READ_ONLY_ELEMENT as number,\n    );\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {number} _children\n   */\n  set _children(_children: number) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._children\",\n      scorm2004_errors.READ_ONLY_ELEMENT as number,\n    );\n  }\n\n  /**\n   * Reset the metadata properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // No need to reset __version and __children as they are constants\n  }\n}\n","/**\n * Class representing learner properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing learner properties for SCORM 2004's cmi object\n */\nexport class CMILearner extends BaseCMI {\n  private _learner_id = \"\";\n  private _learner_name = \"\";\n\n  /**\n   * Constructor for CMILearner\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _learner_id\n   * @return {string}\n   */\n  get learner_id(): string {\n    return this._learner_id;\n  }\n\n  /**\n   * Setter for _learner_id. Can only be called before initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_id\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._learner_id = learner_id;\n    }\n  }\n\n  /**\n   * Getter for _learner_name\n   * @return {string}\n   */\n  get learner_name(): string {\n    return this._learner_name;\n  }\n\n  /**\n   * Setter for _learner_name. Can only be called before initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_name\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._learner_name = learner_name;\n    }\n  }\n\n  /**\n   * Reset the learner properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset learner_id and learner_name as they are read-only after initialization\n  }\n}\n","/**\n * Class representing status properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\n\n/**\n * Class representing status properties for SCORM 2004's cmi object\n */\nexport class CMIStatus extends BaseCMI {\n  private _completion_status = \"unknown\";\n  private _success_status = \"unknown\";\n  private _progress_measure = \"\";\n\n  /**\n   * Constructor for CMIStatus\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this._completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".completion_status\",\n        completion_status,\n        scorm2004_regex.CMICStatus,\n      )\n    ) {\n      this._completion_status = completion_status;\n    }\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this._success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".success_status\",\n        success_status,\n        scorm2004_regex.CMISStatus,\n      )\n    ) {\n      this._success_status = success_status;\n    }\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this._progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".progress_measure\",\n        progress_measure,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".progress_measure\",\n        progress_measure,\n        scorm2004_regex.progress_range,\n      )\n    ) {\n      this._progress_measure = progress_measure;\n    }\n  }\n\n  /**\n   * Reset the status properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._completion_status = \"unknown\";\n    this._success_status = \"unknown\";\n    this._progress_measure = \"\";\n  }\n}\n","/**\n * Class representing session properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\nimport * as Util from \"../../utilities\";\n\n/**\n * Class representing session properties for SCORM 2004's cmi object\n */\nexport class CMISession extends BaseCMI {\n  private _entry = \"\";\n  private _exit = \"\";\n  private _session_time = \"PT0H0M0S\";\n  private _total_time = \"\";\n\n  /**\n   * Constructor for CMISession\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this._entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".entry\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._entry = entry;\n    }\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    if (!this.jsonString) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exit\",\n        scorm2004_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    if (check2004ValidFormat(this._cmi_element + \".exit\", exit, scorm2004_regex.CMIExit, true)) {\n      this._exit = exit;\n    }\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    if (!this.jsonString) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".session_time\",\n        scorm2004_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".session_time\",\n        session_time,\n        scorm2004_regex.CMITimespan,\n      )\n    ) {\n      this._session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this._total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".total_time\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._total_time = total_time;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime(start_time: number | undefined): string {\n    let sessionTime = this._session_time;\n    if (typeof start_time !== \"undefined\" && start_time !== null) {\n      const seconds = new Date().getTime() - start_time;\n      sessionTime = Util.getSecondsAsISODuration(seconds / 1000);\n    }\n\n    return Util.addTwoDurations(this._total_time, sessionTime, scorm2004_regex.CMITimespan);\n  }\n\n  /**\n   * Reset the session properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._entry = \"\";\n    this._exit = \"\";\n    this._session_time = \"PT0H0M0S\";\n    // Don't reset total_time as it's read-only after initialization\n  }\n}\n","/**\n * Class representing content properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\n\n/**\n * Class representing content properties for SCORM 2004's cmi object\n */\nexport class CMIContent extends BaseCMI {\n  private _location = \"\";\n  private _launch_data = \"\";\n  private _suspend_data = \"\";\n\n  /**\n   * Constructor for CMIContent\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".location\", location, scorm2004_regex.CMIString1000)\n    ) {\n      this._location = location;\n    }\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this._launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".launch_data\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._launch_data = launch_data;\n    }\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this._suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".suspend_data\",\n        suspend_data,\n        scorm2004_regex.CMIString64000,\n        true,\n      )\n    ) {\n      this._suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Reset the content properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._location = \"\";\n    // Don't reset launch_data as it's read-only after initialization\n    this._suspend_data = \"\";\n  }\n}\n","/**\n * Class representing settings properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing settings properties for SCORM 2004's cmi object\n */\nexport class CMISettings extends BaseCMI {\n  private _credit = \"credit\";\n  private _mode = \"normal\";\n  private _time_limit_action = \"continue,no message\";\n  private _max_time_allowed = \"\";\n\n  /**\n   * Constructor for CMISettings\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this._credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".credit\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._credit = credit;\n    }\n  }\n\n  /**\n   * Getter for _mode\n   * @return {string}\n   */\n  get mode(): string {\n    return this._mode;\n  }\n\n  /**\n   * Setter for _mode. Can only be called before initialization.\n   * @param {string} mode\n   */\n  set mode(mode: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".mode\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._mode = mode;\n    }\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this._time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".time_limit_action\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._time_limit_action = time_limit_action;\n    }\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this._max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".max_time_allowed\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._max_time_allowed = max_time_allowed;\n    }\n  }\n\n  /**\n   * Reset the settings properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset these properties as they are read-only after initialization\n  }\n}\n","/**\n * Class representing threshold properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing threshold properties for SCORM 2004's cmi object\n */\nexport class CMIThresholds extends BaseCMI {\n  private _scaled_passing_score = \"\";\n  private _completion_threshold = \"\";\n\n  /**\n   * Constructor for CMIThresholds\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score(): string {\n    return this._scaled_passing_score;\n  }\n\n  /**\n   * Setter for _scaled_passing_score. Can only be called before initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".scaled_passing_score\",\n        scorm2004_errors.READ_ONLY_ELEMENT ?? 404,\n      );\n    } else {\n      this._scaled_passing_score = scaled_passing_score;\n    }\n  }\n\n  /**\n   * Getter for _completion_threshold\n   * @return {string}\n   */\n  get completion_threshold(): string {\n    return this._completion_threshold;\n  }\n\n  /**\n   * Setter for _completion_threshold. Can only be called before initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".completion_threshold\",\n        scorm2004_errors.READ_ONLY_ELEMENT ?? 404,\n      );\n    } else {\n      this._completion_threshold = completion_threshold;\n    }\n  }\n\n  /**\n   * Reset the threshold properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset these properties as they are read-only after initialization\n  }\n}\n","import { BaseRootCMI } from \"../common/base_cmi\";\nimport { CMILearnerPreference } from \"./learner_preference\";\nimport { CMIInteractions } from \"./interactions\";\nimport { Scorm2004CMIScore } from \"./score\";\nimport { CMICommentsFromLearner, CMICommentsFromLMS } from \"./comments\";\nimport { CMIObjectives } from \"./objectives\";\nimport { CMIMetadata } from \"./metadata\";\nimport { CMILearner } from \"./learner\";\nimport { CMIStatus } from \"./status\";\nimport { CMISession } from \"./session\";\nimport { CMIContent } from \"./content\";\nimport { CMISettings } from \"./settings\";\nimport { CMIThresholds } from \"./thresholds\";\n\n/**\n * Class representing cmi object for SCORM 2004\n */\nexport class CMI extends BaseRootCMI {\n  /**\n   * Constructor for the SCORM 2004 cmi object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean = false) {\n    super(\"cmi\");\n    this.metadata = new CMIMetadata();\n    this.learner = new CMILearner();\n    this.status = new CMIStatus();\n    this.session = new CMISession();\n    this.content = new CMIContent();\n    this.settings = new CMISettings();\n    this.thresholds = new CMIThresholds();\n    this.learner_preference = new CMILearnerPreference();\n    this.score = new Scorm2004CMIScore();\n    this.comments_from_learner = new CMICommentsFromLearner();\n    this.comments_from_lms = new CMICommentsFromLMS();\n    this.interactions = new CMIInteractions();\n    this.objectives = new CMIObjectives();\n    if (initialized) this.initialize();\n  }\n\n  // New component classes\n  private metadata: CMIMetadata;\n  private learner: CMILearner;\n  private status: CMIStatus;\n  private session: CMISession;\n  private content: CMIContent;\n  private settings: CMISettings;\n  private thresholds: CMIThresholds;\n\n  // Original complex objects\n  public learner_preference: CMILearnerPreference;\n  public score: Scorm2004CMIScore;\n  public comments_from_learner: CMICommentsFromLearner;\n  public comments_from_lms: CMICommentsFromLMS;\n  public interactions: CMIInteractions;\n  public objectives: CMIObjectives;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    // Initialize new component classes\n    this.metadata?.initialize();\n    this.learner?.initialize();\n    this.status?.initialize();\n    this.session?.initialize();\n    this.content?.initialize();\n    this.settings?.initialize();\n    this.thresholds?.initialize();\n\n    // Initialize original complex objects\n    this.learner_preference?.initialize();\n    this.score?.initialize();\n    this.comments_from_learner?.initialize();\n    this.comments_from_lms?.initialize();\n    this.interactions?.initialize();\n    this.objectives?.initialize();\n  }\n\n  /**\n   * Called when API is moving to another SCO\n   */\n  reset() {\n    this._initialized = false;\n\n    // Reset new component classes\n    this.metadata?.reset();\n    this.learner?.reset();\n    this.status?.reset();\n    this.session?.reset();\n    this.content?.reset();\n    this.settings?.reset();\n    this.thresholds?.reset();\n\n    // Reset original complex objects\n    this.objectives?.reset(false);\n    this.interactions?.reset(true);\n    this.score?.reset();\n    this.comments_from_learner?.reset();\n    this.comments_from_lms?.reset();\n    this.learner_preference?.reset();\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   * @private\n   */\n  get _version(): string {\n    return this.metadata._version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   * @private\n   */\n  set _version(_version: string) {\n    this.metadata._version = _version;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.metadata._children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {number} _children\n   * @private\n   */\n  set _children(_children: number) {\n    this.metadata._children = _children;\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this.status.completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    this.status.completion_status = completion_status;\n  }\n\n  /**\n   * Getter for _completion_threshold\n   * @return {string}\n   */\n  get completion_threshold(): string {\n    return this.thresholds.completion_threshold;\n  }\n\n  /**\n   * Setter for _completion_threshold. Can only be called before initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold: string) {\n    this.thresholds.completion_threshold = completion_threshold;\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this.settings.credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    this.settings.credit = credit;\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this.session.entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    this.session.entry = entry;\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    this.session.jsonString = this.jsonString;\n    return this.session.exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    this.session.exit = exit;\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this.content.launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    this.content.launch_data = launch_data;\n  }\n\n  /**\n   * Getter for _learner_id\n   * @return {string}\n   */\n  get learner_id(): string {\n    return this.learner.learner_id;\n  }\n\n  /**\n   * Setter for _learner_id. Can only be called before initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id: string) {\n    this.learner.learner_id = learner_id;\n  }\n\n  /**\n   * Getter for _learner_name\n   * @return {string}\n   */\n  get learner_name(): string {\n    return this.learner.learner_name;\n  }\n\n  /**\n   * Setter for _learner_name. Can only be called before initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name: string) {\n    this.learner.learner_name = learner_name;\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this.content.location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    this.content.location = location;\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this.settings.max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    this.settings.max_time_allowed = max_time_allowed;\n  }\n\n  /**\n   * Getter for _mode\n   * @return {string}\n   */\n  get mode(): string {\n    return this.settings.mode;\n  }\n\n  /**\n   * Setter for _mode. Can only be called before initialization.\n   * @param {string} mode\n   */\n  set mode(mode: string) {\n    this.settings.mode = mode;\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this.status.progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    this.status.progress_measure = progress_measure;\n  }\n\n  /**\n   * Getter for _scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score(): string {\n    return this.thresholds.scaled_passing_score;\n  }\n\n  /**\n   * Setter for _scaled_passing_score. Can only be called before initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score: string) {\n    this.thresholds.scaled_passing_score = scaled_passing_score;\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    this.session.jsonString = this.jsonString;\n    return this.session.session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    this.session.session_time = session_time;\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this.status.success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    this.status.success_status = success_status;\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this.content.suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    this.content.suspend_data = suspend_data;\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this.settings.time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    this.settings.time_limit_action = time_limit_action;\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this.session.total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    this.session.total_time = total_time;\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime(): string {\n    return this.session.getCurrentTotalTime(this.start_time);\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      comments_from_learner: CMICommentsFromLearner,\n   *      comments_from_lms: CMICommentsFromLMS,\n   *      completion_status: string,\n   *      completion_threshold: string,\n   *      credit: string,\n   *      entry: string,\n   *      exit: string,\n   *      interactions: CMIInteractions,\n   *      launch_data: string,\n   *      learner_id: string,\n   *      learner_name: string,\n   *      learner_preference: CMILearnerPreference,\n   *      location: string,\n   *      max_time_allowed: string,\n   *      mode: string,\n   *      objectives: CMIObjectives,\n   *      progress_measure: string,\n   *      scaled_passing_score: string,\n   *      score: Scorm2004CMIScore,\n   *      session_time: string,\n   *      success_status: string,\n   *      suspend_data: string,\n   *      time_limit_action: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    comments_from_learner: CMICommentsFromLearner;\n    comments_from_lms: CMICommentsFromLMS;\n    completion_status: string;\n    completion_threshold: string;\n    credit: string;\n    entry: string;\n    exit: string;\n    interactions: CMIInteractions;\n    launch_data: string;\n    learner_id: string;\n    learner_name: string;\n    learner_preference: CMILearnerPreference;\n    location: string;\n    max_time_allowed: string;\n    mode: string;\n    objectives: CMIObjectives;\n    progress_measure: string;\n    scaled_passing_score: string;\n    score: Scorm2004CMIScore;\n    session_time: string;\n    success_status: string;\n    suspend_data: string;\n    time_limit_action: string;\n  } {\n    this.jsonString = true;\n\n    // Set jsonString flag on component classes that need it\n    this.session.jsonString = true;\n\n    const result = {\n      comments_from_learner: this.comments_from_learner,\n      comments_from_lms: this.comments_from_lms,\n      completion_status: this.completion_status,\n      completion_threshold: this.completion_threshold,\n      credit: this.credit,\n      entry: this.entry,\n      exit: this.exit,\n      interactions: this.interactions,\n      launch_data: this.launch_data,\n      learner_id: this.learner_id,\n      learner_name: this.learner_name,\n      learner_preference: this.learner_preference,\n      location: this.location,\n      max_time_allowed: this.max_time_allowed,\n      mode: this.mode,\n      objectives: this.objectives,\n      progress_measure: this.progress_measure,\n      scaled_passing_score: this.scaled_passing_score,\n      score: this.score,\n      session_time: this.session_time,\n      success_status: this.success_status,\n      suspend_data: this.suspend_data,\n      time_limit_action: this.time_limit_action,\n    };\n\n    // Clean up jsonString flags\n    this.jsonString = false;\n    this.session.jsonString = false;\n\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { NAVBoolean } from \"../../constants/enums\";\nimport { CMIArray } from \"../common/array\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Sequencing } from \"./sequencing/sequencing\";\n\n/**\n * Class representing SCORM 2004's adl object\n */\nexport class ADL extends BaseCMI {\n  /**\n   * Constructor for adl\n   */\n  constructor() {\n    super(\"adl\");\n    this.nav = new ADLNav();\n    this.data = new ADLData();\n  }\n\n  public nav: ADLNav;\n  public data = new ADLData();\n  private _sequencing: Sequencing | null = null;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.nav?.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this.nav?.reset();\n  }\n\n  /**\n   * Getter for sequencing\n   * @return {Sequencing | null}\n   */\n  get sequencing(): Sequencing | null {\n    return this._sequencing;\n  }\n\n  /**\n   * Setter for sequencing\n   * @param {Sequencing | null} sequencing\n   */\n  set sequencing(sequencing: Sequencing | null) {\n    this._sequencing = sequencing;\n    if (sequencing) {\n      sequencing.adlNav = this.nav;\n      this.nav.sequencing = sequencing;\n    }\n  }\n\n  /**\n   * toJSON for adl\n   * @return {\n   *    {\n   *      nav: ADLNav,\n   *      data: ADLData\n   *    }\n   *  }\n   */\n  toJSON(): {\n    nav: ADLNav;\n    data: ADLData;\n  } {\n    this.jsonString = true;\n    const result = {\n      nav: this.nav,\n      data: this.data,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's `adl.nav` object\n */\n\nexport class ADLNav extends BaseCMI {\n  private _request = \"_none_\";\n  private _sequencing: Sequencing | null = null;\n\n  /**\n   * Constructor for `adl.nav`\n   */\n  constructor() {\n    super(\"adl.nav\");\n    this.request_valid = new ADLNavRequestValid();\n  }\n\n  public request_valid: ADLNavRequestValid;\n\n  /**\n   * Getter for sequencing\n   * @return {Sequencing | null}\n   */\n  get sequencing(): Sequencing | null {\n    return this._sequencing;\n  }\n\n  /**\n   * Setter for sequencing\n   * @param {Sequencing | null} sequencing\n   */\n  set sequencing(sequencing: Sequencing | null) {\n    this._sequencing = sequencing;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.request_valid?.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._request = \"_none_\";\n    if (this._sequencing) {\n      this._sequencing.adlNav = null;\n    }\n    this._sequencing = null;\n    this.request_valid?.reset();\n  }\n\n  /**\n   * Getter for _request\n   * @return {string}\n   */\n  get request(): string {\n    return this._request;\n  }\n\n  /**\n   * Setter for _request\n   * @param {string} request\n   */\n  set request(request: string) {\n    if (check2004ValidFormat(this._cmi_element + \".request\", request, scorm2004_regex.NAVEvent)) {\n      // Only process if the request is different from the current request\n      if (this._request !== request) {\n        this._request = request;\n\n        // Process the navigation request using the sequencing implementation\n        if (this._sequencing) {\n          this._sequencing.processNavigationRequest(request);\n        }\n      }\n    }\n  }\n\n  /**\n   * toJSON for adl.nav\n   *\n   * @return {\n   *    {\n   *      request: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    request: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      request: this.request,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's `adl.data` object\n */\nexport class ADLData extends CMIArray {\n  constructor() {\n    super({\n      CMIElement: \"adl.data\",\n      children: scorm2004_constants.adl_data_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's adl.data.n object\n */\nexport class ADLDataObject extends BaseCMI {\n  private _id = \"\";\n  private _store = \"\";\n\n  constructor() {\n    super(\"adl.data.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _store\n   * @return {string}\n   */\n  get store(): string {\n    return this._store;\n  }\n\n  /**\n   * Setter for _store\n   * @param {string} store\n   */\n  set store(store: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".store\", store, scorm2004_regex.CMILangString4000)\n    ) {\n      this._store = store;\n    }\n  }\n\n  /**\n   * toJSON for adl.data.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      store: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    store: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this._id,\n      store: this._store,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl.nav.request_valid object\n */\n\nexport class ADLNavRequestValid extends BaseCMI {\n  private _continue = \"unknown\";\n  private _previous = \"unknown\";\n  private _choice: {\n    [key: string]: NAVBoolean;\n  } = {};\n  private _jump: {\n    [key: string]: NAVBoolean;\n  } = {};\n\n  /**\n   * Constructor for adl.nav.request_valid\n   */\n  constructor() {\n    super(\"adl.nav.request_valid\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._continue = \"unknown\";\n    this._previous = \"unknown\";\n    this._choice = {};\n    this._jump = {};\n  }\n\n  /**\n   * Getter for _continue\n   * @return {string}\n   */\n  get continue(): string {\n    return this._continue;\n  }\n\n  /**\n   * Setter for _continue. Just throws an error.\n   * @param {string} _continue\n   */\n  set continue(_continue: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".continue\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".continue\", _continue, scorm2004_regex.NAVBoolean)\n    ) {\n      this._continue = _continue;\n    }\n  }\n\n  /**\n   * Getter for _previous\n   * @return {string}\n   */\n  get previous(): string {\n    return this._previous;\n  }\n\n  /**\n   * Setter for _previous. Just throws an error.\n   * @param {string} _previous\n   */\n  set previous(_previous: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".previous\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".previous\", _previous, scorm2004_regex.NAVBoolean)\n    ) {\n      this._previous = _previous;\n    }\n  }\n\n  /**\n   * Getter for _choice\n   * @return {{ [key: string]: NAVBoolean }}\n   */\n  get choice(): { [key: string]: NAVBoolean } {\n    return this._choice;\n  }\n\n  /**\n   * Setter for _choice\n   * @param {{ [key: string]: string }} choice\n   */\n  set choice(choice: { [key: string]: string }) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".choice\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (typeof choice !== \"object\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".choice\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    for (const key in choice) {\n      if ({}.hasOwnProperty.call(choice, key)) {\n        if (\n          check2004ValidFormat(\n            this._cmi_element + \".choice.\" + key,\n            choice[key] || \"\",\n            scorm2004_regex.NAVBoolean,\n          ) &&\n          check2004ValidFormat(this._cmi_element + \".choice.\" + key, key, scorm2004_regex.NAVTarget)\n        ) {\n          // Convert string value to NAVBoolean enum value\n          const value = choice[key];\n          if (value === \"true\") {\n            this._choice[key] = NAVBoolean.TRUE;\n          } else if (value === \"false\") {\n            this._choice[key] = NAVBoolean.FALSE;\n          } else if (value === \"unknown\") {\n            this._choice[key] = NAVBoolean.UNKNOWN;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Getter for _jump\n   * @return {{ [key: string]: NAVBoolean }}\n   */\n  get jump(): { [key: string]: NAVBoolean } {\n    return this._jump;\n  }\n\n  /**\n   * Setter for _jump\n   * @param {{ [key: string]: string }} jump\n   */\n  set jump(jump: { [key: string]: string }) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".jump\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (typeof jump !== \"object\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".jump\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    for (const key in jump) {\n      if ({}.hasOwnProperty.call(jump, key)) {\n        if (\n          check2004ValidFormat(\n            this._cmi_element + \".jump.\" + key,\n            jump[key] || \"\",\n            scorm2004_regex.NAVBoolean,\n          ) &&\n          check2004ValidFormat(this._cmi_element + \".jump.\" + key, key, scorm2004_regex.NAVTarget)\n        ) {\n          // Convert string value to NAVBoolean enum value\n          const value = jump[key];\n          if (value === \"true\") {\n            this._jump[key] = NAVBoolean.TRUE;\n          } else if (value === \"false\") {\n            this._jump[key] = NAVBoolean.FALSE;\n          } else if (value === \"unknown\") {\n            this._jump[key] = NAVBoolean.UNKNOWN;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * toJSON for adl.nav.request_valid\n   *\n   * @return {\n   *    {\n   *      previous: string,\n   *      continue: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    previous: string;\n    continue: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      previous: this._previous,\n      continue: this._continue,\n      choice: this._choice,\n      jump: this._jump,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Enum for rule condition operators\n */\nexport enum RuleConditionOperator {\n  NOT = \"not\",\n  AND = \"and\",\n  OR = \"or\",\n}\n\n/**\n * Enum for rule condition types\n */\nexport enum RuleConditionType {\n  SATISFIED = \"satisfied\",\n  OBJECTIVE_STATUS_KNOWN = \"objectiveStatusKnown\",\n  OBJECTIVE_MEASURE_KNOWN = \"objectiveMeasureKnown\",\n  OBJECTIVE_MEASURE_GREATER_THAN = \"objectiveMeasureGreaterThan\",\n  OBJECTIVE_MEASURE_LESS_THAN = \"objectiveMeasureLessThan\",\n  COMPLETED = \"completed\",\n  PROGRESS_KNOWN = \"progressKnown\",\n  ATTEMPTED = \"attempted\",\n  ATTEMPT_LIMIT_EXCEEDED = \"attemptLimitExceeded\",\n  TIME_LIMIT_EXCEEDED = \"timeLimitExceeded\",\n  OUTSIDE_AVAILABLE_TIME_RANGE = \"outsideAvailableTimeRange\",\n  ALWAYS = \"always\",\n}\n\n/**\n * Enum for rule action types\n */\nexport enum RuleActionType {\n  SKIP = \"skip\",\n  DISABLED = \"disabled\",\n  HIDE_FROM_CHOICE = \"hideFromChoice\",\n  STOP_FORWARD_TRAVERSAL = \"stopForwardTraversal\",\n  EXIT_PARENT = \"exitParent\",\n  EXIT_ALL = \"exitAll\",\n  RETRY = \"retry\",\n  RETRY_ALL = \"retryAll\",\n  CONTINUE = \"continue\",\n  PREVIOUS = \"previous\",\n  EXIT = \"exit\",\n}\n\n/**\n * Class representing a sequencing rule condition\n */\nexport class RuleCondition extends BaseCMI {\n  private _condition: RuleConditionType = RuleConditionType.ALWAYS;\n  private _operator: RuleConditionOperator | null = null;\n  private _parameters: Map<string, any> = new Map();\n\n  /**\n   * Constructor for RuleCondition\n   * @param {RuleConditionType} condition - The condition type\n   * @param {RuleConditionOperator | null} operator - The operator (null for no operator)\n   * @param {Map<string, any>} parameters - Additional parameters for the condition\n   */\n  constructor(\n    condition: RuleConditionType = RuleConditionType.ALWAYS,\n    operator: RuleConditionOperator | null = null,\n    parameters: Map<string, any> = new Map(),\n  ) {\n    super(\"ruleCondition\");\n    this._condition = condition;\n    this._operator = operator;\n    this._parameters = parameters;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._condition = RuleConditionType.ALWAYS;\n    this._operator = null;\n    this._parameters = new Map();\n  }\n\n  /**\n   * Getter for condition\n   * @return {RuleConditionType}\n   */\n  get condition(): RuleConditionType {\n    return this._condition;\n  }\n\n  /**\n   * Setter for condition\n   * @param {RuleConditionType} condition\n   */\n  set condition(condition: RuleConditionType) {\n    this._condition = condition;\n  }\n\n  /**\n   * Getter for operator\n   * @return {RuleConditionOperator | null}\n   */\n  get operator(): RuleConditionOperator | null {\n    return this._operator;\n  }\n\n  /**\n   * Setter for operator\n   * @param {RuleConditionOperator | null} operator\n   */\n  set operator(operator: RuleConditionOperator | null) {\n    this._operator = operator;\n  }\n\n  /**\n   * Getter for parameters\n   * @return {Map<string, any>}\n   */\n  get parameters(): Map<string, any> {\n    return this._parameters;\n  }\n\n  /**\n   * Setter for parameters\n   * @param {Map<string, any>} parameters\n   */\n  set parameters(parameters: Map<string, any>) {\n    this._parameters = parameters;\n  }\n\n  /**\n   * Evaluate the condition for an activity\n   * @param {Activity} activity - The activity to evaluate the condition for\n   * @return {boolean} - True if the condition is met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    let result;\n    switch (this._condition) {\n      case RuleConditionType.SATISFIED:\n        result = activity.successStatus === SuccessStatus.PASSED;\n        break;\n      case RuleConditionType.OBJECTIVE_STATUS_KNOWN:\n        // noinspection PointlessBooleanExpressionJS\n        result = !!activity.objectiveMeasureStatus;\n        break;\n      case RuleConditionType.OBJECTIVE_MEASURE_KNOWN:\n        // noinspection PointlessBooleanExpressionJS\n        result = !!activity.objectiveMeasureStatus;\n        break;\n      case RuleConditionType.OBJECTIVE_MEASURE_GREATER_THAN: {\n        const greaterThanValue = this._parameters.get(\"threshold\") || 0;\n        result =\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure > greaterThanValue;\n        break;\n      }\n      case RuleConditionType.OBJECTIVE_MEASURE_LESS_THAN: {\n        const lessThanValue = this._parameters.get(\"threshold\") || 0;\n        result =\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure < lessThanValue;\n        break;\n      }\n      case RuleConditionType.COMPLETED:\n        result = activity.isCompleted;\n        break;\n      case RuleConditionType.PROGRESS_KNOWN:\n        result = activity.completionStatus !== \"unknown\";\n        break;\n      case RuleConditionType.ATTEMPTED:\n        result = activity.attemptCount > 0;\n        break;\n      case RuleConditionType.ATTEMPT_LIMIT_EXCEEDED: {\n        const attemptLimit = this._parameters.get(\"attemptLimit\") || 0;\n        result = activity.attemptCount >= attemptLimit;\n        break;\n      }\n      case RuleConditionType.TIME_LIMIT_EXCEEDED:\n        result = this.evaluateTimeLimitExceeded(activity);\n        break;\n      case RuleConditionType.OUTSIDE_AVAILABLE_TIME_RANGE:\n        result = this.evaluateOutsideAvailableTimeRange(activity);\n        break;\n      case RuleConditionType.ALWAYS:\n        result = true;\n        break;\n      default:\n        result = false;\n        break;\n    }\n\n    if (this._operator === RuleConditionOperator.NOT) {\n      result = !result;\n    }\n\n    return result;\n  }\n\n  /**\n   * Evaluate if time limit has been exceeded\n   * @param {Activity} activity - The activity to evaluate\n   * @return {boolean}\n   * @private\n   */\n  private evaluateTimeLimitExceeded(activity: Activity): boolean {\n    const timeLimitDuration = activity.timeLimitDuration;\n    if (!timeLimitDuration) {\n      return false;\n    }\n\n    // Parse ISO 8601 duration to milliseconds\n    const durationMs = this.parseISO8601Duration(timeLimitDuration);\n    if (durationMs === 0) {\n      return false;\n    }\n\n    // Get current attempt duration\n    const attemptDuration = activity.attemptExperiencedDuration;\n    const attemptDurationMs = this.parseISO8601Duration(attemptDuration);\n\n    return attemptDurationMs > durationMs;\n  }\n\n  /**\n   * Evaluate if activity is outside available time range\n   * @param {Activity} activity - The activity to evaluate\n   * @return {boolean}\n   * @private\n   */\n  private evaluateOutsideAvailableTimeRange(activity: Activity): boolean {\n    const beginTime = activity.beginTimeLimit;\n    const endTime = activity.endTimeLimit;\n\n    if (!beginTime && !endTime) {\n      return false;\n    }\n\n    const now = new Date();\n\n    if (beginTime) {\n      const beginDate = new Date(beginTime);\n      if (now < beginDate) {\n        return true;\n      }\n    }\n\n    if (endTime) {\n      const endDate = new Date(endTime);\n      if (now > endDate) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Parse ISO 8601 duration to milliseconds\n   * @param {string} duration - ISO 8601 duration string\n   * @return {number} - Duration in milliseconds\n   * @private\n   */\n  private parseISO8601Duration(duration: string): number {\n    const regex = /PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?/;\n    const matches = duration.match(regex);\n\n    if (!matches) {\n      return 0;\n    }\n\n    const hours = parseInt(matches[1] || \"0\", 10);\n    const minutes = parseInt(matches[2] || \"0\", 10);\n    const seconds = parseFloat(matches[3] || \"0\");\n\n    return (hours * 3600 + minutes * 60 + seconds) * 1000;\n  }\n\n  /**\n   * toJSON for RuleCondition\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      condition: this._condition,\n      operator: this._operator,\n      parameters: Object.fromEntries(this._parameters),\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a sequencing rule\n */\nexport class SequencingRule extends BaseCMI {\n  private _conditions: RuleCondition[] = [];\n  private _action: RuleActionType = RuleActionType.SKIP;\n  private _conditionCombination: string | RuleConditionOperator = RuleConditionOperator.AND;\n\n  /**\n   * Constructor for SequencingRule\n   * @param {RuleActionType} action - The action to take when the rule conditions are met\n   * @param {string | RuleConditionOperator} conditionCombination - How to combine multiple conditions (\"all\"/\"and\" or \"any\"/\"or\")\n   */\n  constructor(\n    action: RuleActionType = RuleActionType.SKIP,\n    conditionCombination: string | RuleConditionOperator = RuleConditionOperator.AND,\n  ) {\n    super(\"sequencingRule\");\n    this._action = action;\n    this._conditionCombination = conditionCombination;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._conditions = [];\n    this._action = RuleActionType.SKIP;\n    this._conditionCombination = RuleConditionOperator.AND;\n  }\n\n  /**\n   * Getter for conditions\n   * @return {RuleCondition[]}\n   */\n  get conditions(): RuleCondition[] {\n    return this._conditions;\n  }\n\n  /**\n   * Add a condition to the rule\n   * @param {RuleCondition} condition - The condition to add\n   */\n  addCondition(condition: RuleCondition): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(condition instanceof RuleCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    // Check if the condition is already in the array\n    if (!this._conditions.includes(condition)) {\n      this._conditions.push(condition);\n    }\n  }\n\n  /**\n   * Remove a condition from the rule\n   * @param {RuleCondition} condition - The condition to remove\n   * @return {boolean} - True if the condition was removed, false otherwise\n   */\n  removeCondition(condition: RuleCondition): boolean {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(condition instanceof RuleCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    const index = this._conditions.indexOf(condition);\n    if (index !== -1) {\n      this._conditions.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for action\n   * @return {RuleActionType}\n   */\n  get action(): RuleActionType {\n    return this._action;\n  }\n\n  /**\n   * Setter for action\n   * @param {RuleActionType} action\n   */\n  set action(action: RuleActionType) {\n    this._action = action;\n  }\n\n  /**\n   * Getter for conditionCombination\n   * @return {string | RuleConditionOperator}\n   */\n  get conditionCombination(): string | RuleConditionOperator {\n    return this._conditionCombination;\n  }\n\n  /**\n   * Setter for conditionCombination\n   * @param {string | RuleConditionOperator} conditionCombination\n   */\n  set conditionCombination(conditionCombination: string | RuleConditionOperator) {\n    this._conditionCombination = conditionCombination;\n  }\n\n  /**\n   * Evaluate the rule for an activity\n   * @param {Activity} activity - The activity to evaluate the rule for\n   * @return {boolean} - True if the rule conditions are met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    if (this._conditions.length === 0) {\n      return true;\n    }\n\n    if (\n      this._conditionCombination === \"all\" ||\n      this._conditionCombination === RuleConditionOperator.AND\n    ) {\n      return this._conditions.every((condition) => condition.evaluate(activity));\n    } else if (\n      this._conditionCombination === \"any\" ||\n      this._conditionCombination === RuleConditionOperator.OR\n    ) {\n      return this._conditions.some((condition) => condition.evaluate(activity));\n    }\n\n    return false;\n  }\n\n  /**\n   * toJSON for SequencingRule\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      conditions: this._conditions,\n      action: this._action,\n      conditionCombination: this._conditionCombination,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a collection of sequencing rules\n */\nexport class SequencingRules extends BaseCMI {\n  private _preConditionRules: SequencingRule[] = [];\n  private _exitConditionRules: SequencingRule[] = [];\n  private _postConditionRules: SequencingRule[] = [];\n\n  /**\n   * Constructor for SequencingRules\n   */\n  constructor() {\n    super(\"sequencingRules\");\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._preConditionRules = [];\n    this._exitConditionRules = [];\n    this._postConditionRules = [];\n  }\n\n  /**\n   * Getter for preConditionRules\n   * @return {SequencingRule[]}\n   */\n  get preConditionRules(): SequencingRule[] {\n    return this._preConditionRules;\n  }\n\n  /**\n   * Add a pre-condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addPreConditionRule(rule: SequencingRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".preConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._preConditionRules.push(rule);\n  }\n\n  /**\n   * Getter for exitConditionRules\n   * @return {SequencingRule[]}\n   */\n  get exitConditionRules(): SequencingRule[] {\n    return this._exitConditionRules;\n  }\n\n  /**\n   * Add an exit condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addExitConditionRule(rule: SequencingRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exitConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._exitConditionRules.push(rule);\n  }\n\n  /**\n   * Getter for postConditionRules\n   * @return {SequencingRule[]}\n   */\n  get postConditionRules(): SequencingRule[] {\n    return this._postConditionRules;\n  }\n\n  /**\n   * Add a post-condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addPostConditionRule(rule: SequencingRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".postConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._postConditionRules.push(rule);\n  }\n\n  /**\n   * Evaluate pre-condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluatePreConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._preConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Evaluate exit condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluateExitConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._exitConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Evaluate post-condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluatePostConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._postConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * toJSON for SequencingRules\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      preConditionRules: this._preConditionRules,\n      exitConditionRules: this._exitConditionRules,\n      postConditionRules: this._postConditionRules,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { CompletionStatus, SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Enum for rollup action types\n */\nexport enum RollupActionType {\n  SATISFIED = \"satisfied\",\n  NOT_SATISFIED = \"notSatisfied\",\n  COMPLETED = \"completed\",\n  INCOMPLETE = \"incomplete\",\n}\n\n/**\n * Enum for rollup condition types\n */\nexport enum RollupConditionType {\n  SATISFIED = \"satisfied\",\n  OBJECTIVE_STATUS_KNOWN = \"objectiveStatusKnown\",\n  OBJECTIVE_MEASURE_KNOWN = \"objectiveMeasureKnown\",\n  OBJECTIVE_MEASURE_GREATER_THAN = \"objectiveMeasureGreaterThan\",\n  OBJECTIVE_MEASURE_LESS_THAN = \"objectiveMeasureLessThan\",\n  COMPLETED = \"completed\",\n  PROGRESS_KNOWN = \"progressKnown\",\n  ATTEMPTED = \"attempted\",\n  NOT_ATTEMPTED = \"notAttempted\",\n  ALWAYS = \"always\",\n}\n\n/**\n * Enum for rollup consideration types\n */\nexport enum RollupConsiderationType {\n  ALL = \"all\",\n  ANY = \"any\",\n  NONE = \"none\",\n  AT_LEAST_COUNT = \"atLeastCount\",\n  AT_LEAST_PERCENT = \"atLeastPercent\",\n}\n\n/**\n * Class representing a rollup condition\n */\nexport class RollupCondition extends BaseCMI {\n  private _condition: RollupConditionType = RollupConditionType.ALWAYS;\n  private _parameters: Map<string, any> = new Map();\n\n  /**\n   * Constructor for RollupCondition\n   * @param {RollupConditionType} condition - The condition type\n   * @param {Map<string, any>} parameters - Additional parameters for the condition\n   */\n  constructor(\n    condition: RollupConditionType = RollupConditionType.ALWAYS,\n    parameters: Map<string, any> = new Map(),\n  ) {\n    super(\"rollupCondition\");\n    this._condition = condition;\n    this._parameters = parameters;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for condition\n   * @return {RollupConditionType}\n   */\n  get condition(): RollupConditionType {\n    return this._condition;\n  }\n\n  /**\n   * Setter for condition\n   * @param {RollupConditionType} condition\n   */\n  set condition(condition: RollupConditionType) {\n    this._condition = condition;\n  }\n\n  /**\n   * Getter for parameters\n   * @return {Map<string, any>}\n   */\n  get parameters(): Map<string, any> {\n    return this._parameters;\n  }\n\n  /**\n   * Setter for parameters\n   * @param {Map<string, any>} parameters\n   */\n  set parameters(parameters: Map<string, any>) {\n    this._parameters = parameters;\n  }\n\n  /**\n   * Evaluate the condition for an activity\n   * @param {Activity} activity - The activity to evaluate the condition for\n   * @return {boolean} - True if the condition is met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    switch (this._condition) {\n      case RollupConditionType.SATISFIED:\n        return activity.successStatus === SuccessStatus.PASSED;\n      case RollupConditionType.OBJECTIVE_STATUS_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RollupConditionType.OBJECTIVE_MEASURE_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RollupConditionType.OBJECTIVE_MEASURE_GREATER_THAN: {\n        const greaterThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure > greaterThanValue\n        );\n      }\n      case RollupConditionType.OBJECTIVE_MEASURE_LESS_THAN: {\n        const lessThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure < lessThanValue\n        );\n      }\n      case RollupConditionType.COMPLETED:\n        return activity.isCompleted;\n      case RollupConditionType.PROGRESS_KNOWN:\n        return activity.completionStatus !== CompletionStatus.UNKNOWN;\n      case RollupConditionType.ATTEMPTED:\n        return activity.attemptCount > 0;\n      case RollupConditionType.NOT_ATTEMPTED:\n        return activity.attemptCount === 0;\n      case RollupConditionType.ALWAYS:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RollupCondition\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      condition: this._condition,\n      parameters: Object.fromEntries(this._parameters),\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a rollup rule\n */\nexport class RollupRule extends BaseCMI {\n  private _conditions: RollupCondition[] = [];\n  private _action: RollupActionType = RollupActionType.SATISFIED;\n  private _consideration: RollupConsiderationType = RollupConsiderationType.ALL;\n  private _minimumCount: number = 0;\n  private _minimumPercent: number = 0;\n\n  /**\n   * Constructor for RollupRule\n   * @param {RollupActionType} action - The action to take when the rule conditions are met\n   * @param {RollupConsiderationType} consideration - How to consider child activities\n   * @param {number} minimumCount - The minimum count for AT_LEAST_COUNT consideration\n   * @param {number} minimumPercent - The minimum percent for AT_LEAST_PERCENT consideration\n   */\n  constructor(\n    action: RollupActionType = RollupActionType.SATISFIED,\n    consideration: RollupConsiderationType = RollupConsiderationType.ALL,\n    minimumCount: number = 0,\n    minimumPercent: number = 0,\n  ) {\n    super(\"rollupRule\");\n    this._action = action;\n    this._consideration = consideration;\n    this._minimumCount = minimumCount;\n    this._minimumPercent = minimumPercent;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._conditions = [];\n  }\n\n  /**\n   * Getter for conditions\n   * @return {RollupCondition[]}\n   */\n  get conditions(): RollupCondition[] {\n    return this._conditions;\n  }\n\n  /**\n   * Add a condition to the rule\n   * @param {RollupCondition} condition - The condition to add\n   */\n  addCondition(condition: RollupCondition): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(condition instanceof RollupCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._conditions.push(condition);\n  }\n\n  /**\n   * Remove a condition from the rule\n   * @param {RollupCondition} condition - The condition to remove\n   * @return {boolean} - True if the condition was removed, false otherwise\n   */\n  removeCondition(condition: RollupCondition): boolean {\n    const index = this._conditions.indexOf(condition);\n    if (index !== -1) {\n      this._conditions.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for action\n   * @return {RollupActionType}\n   */\n  get action(): RollupActionType {\n    return this._action;\n  }\n\n  /**\n   * Setter for action\n   * @param {RollupActionType} action\n   */\n  set action(action: RollupActionType) {\n    this._action = action;\n  }\n\n  /**\n   * Getter for consideration\n   * @return {RollupConsiderationType}\n   */\n  get consideration(): RollupConsiderationType {\n    return this._consideration;\n  }\n\n  /**\n   * Setter for consideration\n   * @param {RollupConsiderationType} consideration\n   */\n  set consideration(consideration: RollupConsiderationType) {\n    this._consideration = consideration;\n  }\n\n  /**\n   * Getter for minimumCount\n   * @return {number}\n   */\n  get minimumCount(): number {\n    return this._minimumCount;\n  }\n\n  /**\n   * Setter for minimumCount\n   * @param {number} minimumCount\n   */\n  set minimumCount(minimumCount: number) {\n    if (minimumCount >= 0) {\n      this._minimumCount = minimumCount;\n    }\n  }\n\n  /**\n   * Getter for minimumPercent\n   * @return {number}\n   */\n  get minimumPercent(): number {\n    return this._minimumPercent;\n  }\n\n  /**\n   * Setter for minimumPercent\n   * @param {number} minimumPercent\n   */\n  set minimumPercent(minimumPercent: number) {\n    if (minimumPercent >= 0 && minimumPercent <= 100) {\n      this._minimumPercent = minimumPercent;\n    }\n  }\n\n  /**\n   * Evaluate the rule for a set of child activities\n   * @param {Activity[]} children - The child activities to evaluate the rule for\n   * @return {boolean} - True if the rule conditions are met, false otherwise\n   */\n  evaluate(children: Activity[]): boolean {\n    if (children.length === 0) {\n      return false;\n    }\n\n    // Filter children that meet all conditions\n    const matchingChildren = children.filter((child) => {\n      return this._conditions.every((condition) => condition.evaluate(child));\n    });\n\n    // Apply consideration\n    switch (this._consideration) {\n      case RollupConsiderationType.ALL:\n        return matchingChildren.length === children.length;\n      case RollupConsiderationType.ANY:\n        return matchingChildren.length > 0;\n      case RollupConsiderationType.NONE:\n        return matchingChildren.length === 0;\n      case RollupConsiderationType.AT_LEAST_COUNT:\n        return matchingChildren.length >= this._minimumCount;\n      case RollupConsiderationType.AT_LEAST_PERCENT: {\n        const percent = (matchingChildren.length / children.length) * 100;\n        return percent >= this._minimumPercent;\n      }\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RollupRule\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      conditions: this._conditions,\n      action: this._action,\n      consideration: this._consideration,\n      minimumCount: this._minimumCount,\n      minimumPercent: this._minimumPercent,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a collection of rollup rules\n */\nexport class RollupRules extends BaseCMI {\n  private _rules: RollupRule[] = [];\n\n  /**\n   * Constructor for RollupRules\n   */\n  constructor() {\n    super(\"rollupRules\");\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._rules = [];\n  }\n\n  /**\n   * Getter for rules\n   * @return {RollupRule[]}\n   */\n  get rules(): RollupRule[] {\n    return this._rules;\n  }\n\n  /**\n   * Add a rule\n   * @param {RollupRule} rule - The rule to add\n   */\n  addRule(rule: RollupRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof RollupRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".rules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._rules.push(rule);\n  }\n\n  /**\n   * Remove a rule\n   * @param {RollupRule} rule - The rule to remove\n   * @return {boolean} - True if the rule was removed, false otherwise\n   */\n  removeRule(rule: RollupRule): boolean {\n    const index = this._rules.indexOf(rule);\n    if (index !== -1) {\n      this._rules.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Process rollup for an activity\n   * @param {Activity} activity - The activity to process rollup for\n   */\n  processRollup(activity: Activity): void {\n    if (!activity || activity.children.length === 0) {\n      return;\n    }\n\n    const children = activity.getAvailableChildren();\n    let completionRollup = false;\n    let successRollup = false;\n\n    // First, check if we should use measure rollup (RB.1.2.a)\n    if (activity.sequencingControls.rollupObjectiveSatisfied) {\n      const measureRollupResult = this._objectiveRollupUsingMeasure(activity, children);\n      if (measureRollupResult !== null) {\n        successRollup = true;\n        // Skip rule-based rollup if measure rollup was successful\n      }\n    }\n\n    // Process each rule (RB.1.2.b)\n    if (!successRollup) {\n      for (const rule of this._rules) {\n        if (rule.evaluate(children)) {\n          switch (rule.action) {\n            case RollupActionType.SATISFIED:\n              activity.successStatus = SuccessStatus.PASSED;\n              successRollup = true;\n              break;\n            case RollupActionType.NOT_SATISFIED:\n              activity.successStatus = SuccessStatus.FAILED;\n              successRollup = true;\n              break;\n            case RollupActionType.COMPLETED:\n              activity.completionStatus = CompletionStatus.COMPLETED;\n              activity.isCompleted = true;\n              completionRollup = true;\n              break;\n            case RollupActionType.INCOMPLETE:\n              activity.completionStatus = CompletionStatus.INCOMPLETE;\n              activity.isCompleted = false;\n              completionRollup = true;\n              break;\n          }\n        }\n      }\n    }\n\n    // If no rules applied for completion, use default rollup\n    if (!completionRollup) {\n      this._defaultCompletionRollup(activity, children);\n    }\n\n    // If no rules applied for success, use default rollup (RB.1.2.c)\n    if (!successRollup) {\n      this._defaultSuccessRollup(activity, children);\n    }\n  }\n\n  /**\n   * Default completion rollup\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @private\n   */\n  private _defaultCompletionRollup(activity: Activity, children: Activity[]): void {\n    // If all children are completed, mark the parent as completed\n    const allCompleted = children.every((child) => child.isCompleted);\n    if (allCompleted) {\n      activity.completionStatus = CompletionStatus.COMPLETED;\n      activity.isCompleted = true;\n    } else {\n      // If any child is incomplete, mark the parent as incomplete\n      const anyIncomplete = children.some(\n        (child) => child.completionStatus === CompletionStatus.INCOMPLETE,\n      );\n      if (anyIncomplete) {\n        activity.completionStatus = CompletionStatus.INCOMPLETE;\n        activity.isCompleted = false;\n      }\n    }\n  }\n\n  /**\n   * Objective Rollup Using Measure Process (RB.1.2.a)\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @return {boolean | null} - True if satisfied, false if not satisfied, null if measure rollup not applicable\n   * @private\n   */\n  private _objectiveRollupUsingMeasure(activity: Activity, children: Activity[]): boolean | null {\n    // Check if objective measure weight is properly configured\n    const objectiveMeasureWeight = activity.sequencingControls.objectiveMeasureWeight;\n    if (objectiveMeasureWeight <= 0) {\n      return null; // Measure rollup not applicable\n    }\n\n    // Calculate weighted average of child objective measures\n    let totalWeight = 0;\n    let weightedSum = 0;\n    let hasValidMeasures = false;\n\n    for (const child of children) {\n      // Only include children that should contribute to rollup\n      if (!child.sequencingControls.rollupObjectiveSatisfied) {\n        continue;\n      }\n\n      // Check if child has a valid objective measure\n      if (child.objectiveMeasureStatus && child.objectiveMeasureStatus === true) {\n        const childWeight = child.sequencingControls.objectiveMeasureWeight;\n        if (childWeight > 0) {\n          weightedSum += child.objectiveNormalizedMeasure * childWeight;\n          totalWeight += childWeight;\n          hasValidMeasures = true;\n        }\n      }\n    }\n\n    // If no valid measures found, measure rollup is not applicable\n    if (!hasValidMeasures || totalWeight === 0) {\n      return null;\n    }\n\n    // Calculate the normalized measure for the parent activity\n    const normalizedMeasure = weightedSum / totalWeight;\n    activity.objectiveNormalizedMeasure = normalizedMeasure;\n    activity.objectiveMeasureStatus = true;\n\n    // Determine satisfaction based on scaled passing score\n    if (normalizedMeasure >= activity.scaledPassingScore) {\n      activity.successStatus = SuccessStatus.PASSED;\n      activity.objectiveSatisfiedStatus = true;\n      return true;\n    } else {\n      activity.successStatus = SuccessStatus.FAILED;\n      activity.objectiveSatisfiedStatus = false;\n      return false;\n    }\n  }\n\n  /**\n   * Default success rollup\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @private\n   */\n  private _defaultSuccessRollup(activity: Activity, children: Activity[]): void {\n    // If all children are satisfied, mark the parent as satisfied\n    const allSatisfied = children.every((child) => child.successStatus === SuccessStatus.PASSED);\n    if (allSatisfied) {\n      activity.successStatus = SuccessStatus.PASSED;\n    } else {\n      // If any child is not satisfied, mark the parent as not satisfied\n      const anyNotSatisfied = children.some(\n        (child) => child.successStatus === SuccessStatus.FAILED,\n      );\n      if (anyNotSatisfied) {\n        activity.successStatus = SuccessStatus.FAILED;\n      }\n    }\n  }\n\n  /**\n   * toJSON for RollupRules\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      rules: this._rules,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","const ValidLanguages: string[] = [\n  \"aa\",\n  \"ab\",\n  \"ae\",\n  \"af\",\n  \"ak\",\n  \"am\",\n  \"an\",\n  \"ar\",\n  \"as\",\n  \"av\",\n  \"ay\",\n  \"az\",\n  \"ba\",\n  \"be\",\n  \"bg\",\n  \"bh\",\n  \"bi\",\n  \"bm\",\n  \"bn\",\n  \"bo\",\n  \"br\",\n  \"bs\",\n  \"ca\",\n  \"ce\",\n  \"ch\",\n  \"co\",\n  \"cr\",\n  \"cs\",\n  \"cu\",\n  \"cv\",\n  \"cy\",\n  \"da\",\n  \"de\",\n  \"dv\",\n  \"dz\",\n  \"ee\",\n  \"el\",\n  \"en\",\n  \"eo\",\n  \"es\",\n  \"et\",\n  \"eu\",\n  \"fa\",\n  \"ff\",\n  \"fi\",\n  \"fj\",\n  \"fo\",\n  \"fr\",\n  \"fy\",\n  \"ga\",\n  \"gd\",\n  \"gl\",\n  \"gn\",\n  \"gu\",\n  \"gv\",\n  \"ha\",\n  \"he\",\n  \"hi\",\n  \"ho\",\n  \"hr\",\n  \"ht\",\n  \"hu\",\n  \"hy\",\n  \"hz\",\n  \"ia\",\n  \"id\",\n  \"ie\",\n  \"ig\",\n  \"ii\",\n  \"ik\",\n  \"io\",\n  \"is\",\n  \"it\",\n  \"iu\",\n  \"ja\",\n  \"jv\",\n  \"ka\",\n  \"kg\",\n  \"ki\",\n  \"kj\",\n  \"kk\",\n  \"kl\",\n  \"km\",\n  \"kn\",\n  \"ko\",\n  \"kr\",\n  \"ks\",\n  \"ku\",\n  \"kv\",\n  \"kw\",\n  \"ky\",\n  \"la\",\n  \"lb\",\n  \"lg\",\n  \"li\",\n  \"ln\",\n  \"lo\",\n  \"lt\",\n  \"lu\",\n  \"lv\",\n  \"mg\",\n  \"mh\",\n  \"mi\",\n  \"mk\",\n  \"ml\",\n  \"mn\",\n  \"mo\",\n  \"mr\",\n  \"ms\",\n  \"mt\",\n  \"my\",\n  \"na\",\n  \"nb\",\n  \"nd\",\n  \"ne\",\n  \"ng\",\n  \"nl\",\n  \"nn\",\n  \"no\",\n  \"nr\",\n  \"nv\",\n  \"ny\",\n  \"oc\",\n  \"oj\",\n  \"om\",\n  \"or\",\n  \"os\",\n  \"pa\",\n  \"pi\",\n  \"pl\",\n  \"ps\",\n  \"pt\",\n  \"qu\",\n  \"rm\",\n  \"rn\",\n  \"ro\",\n  \"ru\",\n  \"rw\",\n  \"sa\",\n  \"sc\",\n  \"sd\",\n  \"se\",\n  \"sg\",\n  \"sh\",\n  \"si\",\n  \"sk\",\n  \"sl\",\n  \"sm\",\n  \"sn\",\n  \"so\",\n  \"sq\",\n  \"sr\",\n  \"ss\",\n  \"st\",\n  \"su\",\n  \"sv\",\n  \"sw\",\n  \"ta\",\n  \"te\",\n  \"tg\",\n  \"th\",\n  \"ti\",\n  \"tk\",\n  \"tl\",\n  \"tn\",\n  \"to\",\n  \"tr\",\n  \"ts\",\n  \"tt\",\n  \"tw\",\n  \"ty\",\n  \"ug\",\n  \"uk\",\n  \"ur\",\n  \"uz\",\n  \"ve\",\n  \"vi\",\n  \"vo\",\n  \"wa\",\n  \"wo\",\n  \"xh\",\n  \"yi\",\n  \"yo\",\n  \"za\",\n  \"zh\",\n  \"zu\",\n  \"aar\",\n  \"abk\",\n  \"ave\",\n  \"afr\",\n  \"aka\",\n  \"amh\",\n  \"arg\",\n  \"ara\",\n  \"asm\",\n  \"ava\",\n  \"aym\",\n  \"aze\",\n  \"bak\",\n  \"bel\",\n  \"bul\",\n  \"bih\",\n  \"bis\",\n  \"bam\",\n  \"ben\",\n  \"tib\",\n  \"bod\",\n  \"bre\",\n  \"bos\",\n  \"cat\",\n  \"che\",\n  \"cha\",\n  \"cos\",\n  \"cre\",\n  \"cze\",\n  \"ces\",\n  \"chu\",\n  \"chv\",\n  \"wel\",\n  \"cym\",\n  \"dan\",\n  \"ger\",\n  \"deu\",\n  \"div\",\n  \"dzo\",\n  \"ewe\",\n  \"gre\",\n  \"ell\",\n  \"eng\",\n  \"epo\",\n  \"spa\",\n  \"est\",\n  \"baq\",\n  \"eus\",\n  \"per\",\n  \"fas\",\n  \"ful\",\n  \"fin\",\n  \"fij\",\n  \"fao\",\n  \"fre\",\n  \"fra\",\n  \"fry\",\n  \"gle\",\n  \"gla\",\n  \"glg\",\n  \"grn\",\n  \"guj\",\n  \"glv\",\n  \"hau\",\n  \"heb\",\n  \"hin\",\n  \"hmo\",\n  \"hrv\",\n  \"hat\",\n  \"hun\",\n  \"arm\",\n  \"hye\",\n  \"her\",\n  \"ina\",\n  \"ind\",\n  \"ile\",\n  \"ibo\",\n  \"iii\",\n  \"ipk\",\n  \"ido\",\n  \"ice\",\n  \"isl\",\n  \"ita\",\n  \"iku\",\n  \"jpn\",\n  \"jav\",\n  \"geo\",\n  \"kat\",\n  \"kon\",\n  \"kik\",\n  \"kua\",\n  \"kaz\",\n  \"kal\",\n  \"khm\",\n  \"kan\",\n  \"kor\",\n  \"kau\",\n  \"kas\",\n  \"kur\",\n  \"kom\",\n  \"cor\",\n  \"kir\",\n  \"lat\",\n  \"ltz\",\n  \"lug\",\n  \"lim\",\n  \"lin\",\n  \"lao\",\n  \"lit\",\n  \"lub\",\n  \"lav\",\n  \"mlg\",\n  \"mah\",\n  \"mao\",\n  \"mri\",\n  \"mac\",\n  \"mkd\",\n  \"mal\",\n  \"mon\",\n  \"mol\",\n  \"mar\",\n  \"may\",\n  \"msa\",\n  \"mlt\",\n  \"bur\",\n  \"mya\",\n  \"nau\",\n  \"nob\",\n  \"nde\",\n  \"nep\",\n  \"ndo\",\n  \"dut\",\n  \"nld\",\n  \"nno\",\n  \"nor\",\n  \"nbl\",\n  \"nav\",\n  \"nya\",\n  \"oci\",\n  \"oji\",\n  \"orm\",\n  \"ori\",\n  \"oss\",\n  \"pan\",\n  \"pli\",\n  \"pol\",\n  \"pus\",\n  \"por\",\n  \"que\",\n  \"roh\",\n  \"run\",\n  \"rum\",\n  \"ron\",\n  \"rus\",\n  \"kin\",\n  \"san\",\n  \"srd\",\n  \"snd\",\n  \"sme\",\n  \"sag\",\n  \"slo\",\n  \"sin\",\n  \"slk\",\n  \"slv\",\n  \"smo\",\n  \"sna\",\n  \"som\",\n  \"alb\",\n  \"sqi\",\n  \"srp\",\n  \"ssw\",\n  \"sot\",\n  \"sun\",\n  \"swe\",\n  \"swa\",\n  \"tam\",\n  \"tel\",\n  \"tgk\",\n  \"tha\",\n  \"tir\",\n  \"tuk\",\n  \"tgl\",\n  \"tsn\",\n  \"ton\",\n  \"tur\",\n  \"tso\",\n  \"tat\",\n  \"twi\",\n  \"tah\",\n  \"uig\",\n  \"ukr\",\n  \"urd\",\n  \"uzb\",\n  \"ven\",\n  \"vie\",\n  \"vol\",\n  \"wln\",\n  \"wol\",\n  \"xho\",\n  \"yid\",\n  \"yor\",\n  \"zha\",\n  \"chi\",\n  \"zho\",\n  \"zul\",\n];\nexport default ValidLanguages;\n","import { BaseCMI } from \"../../common/base_cmi\";\n\n/**\n * Enum for selection timing\n */\nexport enum SelectionTiming {\n  NEVER = \"never\",\n  ONCE = \"once\",\n  ON_EACH_NEW_ATTEMPT = \"onEachNewAttempt\",\n}\n\n/**\n * Enum for randomization timing\n */\nexport enum RandomizationTiming {\n  NEVER = \"never\",\n  ONCE = \"once\",\n  ON_EACH_NEW_ATTEMPT = \"onEachNewAttempt\",\n}\n\n/**\n * Class representing SCORM 2004 sequencing controls\n */\nexport class SequencingControls extends BaseCMI {\n  // Sequencing Control Modes\n  private _enabled: boolean = true;\n  private _choice: boolean = true;\n  private _choiceExit: boolean = true;\n  private _flow: boolean = false;\n  private _forwardOnly: boolean = false;\n  private _useCurrentAttemptObjectiveInfo: boolean = true;\n  private _useCurrentAttemptProgressInfo: boolean = true;\n\n  // Constrain Choice Controls\n  private _preventActivation: boolean = false;\n  private _constrainChoice: boolean = false;\n\n  // Rollup Controls\n  private _rollupObjectiveSatisfied: boolean = true;\n  private _rollupProgressCompletion: boolean = true;\n  private _objectiveMeasureWeight: number = 1.0;\n\n  // Selection Controls\n  private _selectionTiming: SelectionTiming = SelectionTiming.NEVER;\n  private _selectCount: number | null = null;\n  private _selectionCountStatus: boolean = false;\n  private _randomizeChildren: boolean = false;\n\n  // Randomization Controls\n  private _randomizationTiming: RandomizationTiming = RandomizationTiming.NEVER;\n  private _reorderChildren: boolean = false;\n\n  /**\n   * Constructor for SequencingControls\n   */\n  constructor() {\n    super(\"sequencingControls\");\n  }\n\n  /**\n   * Reset the sequencing controls to their default values\n   */\n  reset() {\n    this._initialized = false;\n    this._enabled = true;\n    this._choice = true;\n    this._choiceExit = true;\n    this._flow = false;\n    this._forwardOnly = false;\n    this._useCurrentAttemptObjectiveInfo = true;\n    this._useCurrentAttemptProgressInfo = true;\n    this._preventActivation = false;\n    this._constrainChoice = false;\n    this._rollupObjectiveSatisfied = true;\n    this._rollupProgressCompletion = true;\n    this._objectiveMeasureWeight = 1.0;\n    this._selectionTiming = SelectionTiming.NEVER;\n    this._selectCount = null;\n    this._selectionCountStatus = false;\n    this._randomizeChildren = false;\n    this._randomizationTiming = RandomizationTiming.NEVER;\n    this._reorderChildren = false;\n  }\n\n  /**\n   * Getter for enabled\n   * @return {boolean}\n   */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  /**\n   * Setter for enabled\n   * @param {boolean} enabled\n   */\n  set enabled(enabled: boolean) {\n    this._enabled = enabled;\n  }\n\n  /**\n   * Getter for choice\n   * @return {boolean}\n   */\n  get choice(): boolean {\n    return this._choice;\n  }\n\n  /**\n   * Setter for choice\n   * @param {boolean} choice\n   */\n  set choice(choice: boolean) {\n    this._choice = choice;\n  }\n\n  /**\n   * Getter for choiceExit\n   * @return {boolean}\n   */\n  get choiceExit(): boolean {\n    return this._choiceExit;\n  }\n\n  /**\n   * Setter for choiceExit\n   * @param {boolean} choiceExit\n   */\n  set choiceExit(choiceExit: boolean) {\n    this._choiceExit = choiceExit;\n  }\n\n  /**\n   * Getter for flow\n   * @return {boolean}\n   */\n  get flow(): boolean {\n    return this._flow;\n  }\n\n  /**\n   * Setter for flow\n   * @param {boolean} flow\n   */\n  set flow(flow: boolean) {\n    this._flow = flow;\n  }\n\n  /**\n   * Getter for forwardOnly\n   * @return {boolean}\n   */\n  get forwardOnly(): boolean {\n    return this._forwardOnly;\n  }\n\n  /**\n   * Setter for forwardOnly\n   * @param {boolean} forwardOnly\n   */\n  set forwardOnly(forwardOnly: boolean) {\n    this._forwardOnly = forwardOnly;\n  }\n\n  /**\n   * Getter for useCurrentAttemptObjectiveInfo\n   * @return {boolean}\n   */\n  get useCurrentAttemptObjectiveInfo(): boolean {\n    return this._useCurrentAttemptObjectiveInfo;\n  }\n\n  /**\n   * Setter for useCurrentAttemptObjectiveInfo\n   * @param {boolean} useCurrentAttemptObjectiveInfo\n   */\n  set useCurrentAttemptObjectiveInfo(useCurrentAttemptObjectiveInfo: boolean) {\n    this._useCurrentAttemptObjectiveInfo = useCurrentAttemptObjectiveInfo;\n  }\n\n  /**\n   * Getter for useCurrentAttemptProgressInfo\n   * @return {boolean}\n   */\n  get useCurrentAttemptProgressInfo(): boolean {\n    return this._useCurrentAttemptProgressInfo;\n  }\n\n  /**\n   * Setter for useCurrentAttemptProgressInfo\n   * @param {boolean} useCurrentAttemptProgressInfo\n   */\n  set useCurrentAttemptProgressInfo(useCurrentAttemptProgressInfo: boolean) {\n    this._useCurrentAttemptProgressInfo = useCurrentAttemptProgressInfo;\n  }\n\n  /**\n   * Getter for preventActivation\n   * @return {boolean}\n   */\n  get preventActivation(): boolean {\n    return this._preventActivation;\n  }\n\n  /**\n   * Setter for preventActivation\n   * @param {boolean} preventActivation\n   */\n  set preventActivation(preventActivation: boolean) {\n    this._preventActivation = preventActivation;\n  }\n\n  /**\n   * Getter for constrainChoice\n   * @return {boolean}\n   */\n  get constrainChoice(): boolean {\n    return this._constrainChoice;\n  }\n\n  /**\n   * Setter for constrainChoice\n   * @param {boolean} constrainChoice\n   */\n  set constrainChoice(constrainChoice: boolean) {\n    this._constrainChoice = constrainChoice;\n  }\n\n  /**\n   * Getter for rollupObjectiveSatisfied\n   * @return {boolean}\n   */\n  get rollupObjectiveSatisfied(): boolean {\n    return this._rollupObjectiveSatisfied;\n  }\n\n  /**\n   * Setter for rollupObjectiveSatisfied\n   * @param {boolean} rollupObjectiveSatisfied\n   */\n  set rollupObjectiveSatisfied(rollupObjectiveSatisfied: boolean) {\n    this._rollupObjectiveSatisfied = rollupObjectiveSatisfied;\n  }\n\n  /**\n   * Getter for rollupProgressCompletion\n   * @return {boolean}\n   */\n  get rollupProgressCompletion(): boolean {\n    return this._rollupProgressCompletion;\n  }\n\n  /**\n   * Setter for rollupProgressCompletion\n   * @param {boolean} rollupProgressCompletion\n   */\n  set rollupProgressCompletion(rollupProgressCompletion: boolean) {\n    this._rollupProgressCompletion = rollupProgressCompletion;\n  }\n\n  /**\n   * Getter for objectiveMeasureWeight\n   * @return {number}\n   */\n  get objectiveMeasureWeight(): number {\n    return this._objectiveMeasureWeight;\n  }\n\n  /**\n   * Setter for objectiveMeasureWeight\n   * @param {number} objectiveMeasureWeight\n   */\n  set objectiveMeasureWeight(objectiveMeasureWeight: number) {\n    // According to SCORM 2004, weight must be >= 0 but there's no upper limit\n    if (objectiveMeasureWeight >= 0) {\n      this._objectiveMeasureWeight = objectiveMeasureWeight;\n    }\n  }\n\n  /**\n   * Check if choice navigation is allowed\n   * @return {boolean} - True if choice navigation is allowed, false otherwise\n   */\n  isChoiceNavigationAllowed(): boolean {\n    return this._enabled && !this._constrainChoice;\n  }\n\n  /**\n   * Check if flow navigation is allowed\n   * @return {boolean} - True if flow navigation is allowed, false otherwise\n   */\n  isFlowNavigationAllowed(): boolean {\n    return this._enabled && this._flow;\n  }\n\n  /**\n   * Check if forward navigation is allowed\n   * @return {boolean} - True if forward navigation is allowed, false otherwise\n   */\n  isForwardNavigationAllowed(): boolean {\n    // Forward navigation (Continue request) is only valid when flow mode is\n    // enabled. The forwardOnly flag simply restricts backward navigation and\n    // does not affect the ability to move forward when flow is disabled.\n    return this._enabled && this._flow;\n  }\n\n  /**\n   * Check if backward navigation is allowed\n   * @return {boolean} - True if backward navigation is allowed, false otherwise\n   */\n  isBackwardNavigationAllowed(): boolean {\n    // Previous navigation is also part of flow based navigation and should only\n    // be permitted when flow mode is enabled and forwardOnly does not restrict\n    // going backwards.\n    return this._enabled && this._flow && !this._forwardOnly;\n  }\n\n  /**\n   * Getter for selectionTiming\n   * @return {SelectionTiming}\n   */\n  get selectionTiming(): SelectionTiming {\n    return this._selectionTiming;\n  }\n\n  /**\n   * Setter for selectionTiming\n   * @param {SelectionTiming} selectionTiming\n   */\n  set selectionTiming(selectionTiming: SelectionTiming) {\n    this._selectionTiming = selectionTiming;\n  }\n\n  /**\n   * Getter for selectCount\n   * @return {number | null}\n   */\n  get selectCount(): number | null {\n    return this._selectCount;\n  }\n\n  /**\n   * Setter for selectCount\n   * @param {number | null} selectCount\n   */\n  set selectCount(selectCount: number | null) {\n    if (selectCount === null || selectCount > 0) {\n      this._selectCount = selectCount;\n    }\n  }\n\n  /**\n   * Getter for selectionCountStatus\n   * @return {boolean}\n   */\n  get selectionCountStatus(): boolean {\n    return this._selectionCountStatus;\n  }\n\n  /**\n   * Setter for selectionCountStatus\n   * @param {boolean} selectionCountStatus\n   */\n  set selectionCountStatus(selectionCountStatus: boolean) {\n    this._selectionCountStatus = selectionCountStatus;\n  }\n\n  /**\n   * Getter for randomizeChildren\n   * @return {boolean}\n   */\n  get randomizeChildren(): boolean {\n    return this._randomizeChildren;\n  }\n\n  /**\n   * Setter for randomizeChildren\n   * @param {boolean} randomizeChildren\n   */\n  set randomizeChildren(randomizeChildren: boolean) {\n    this._randomizeChildren = randomizeChildren;\n  }\n\n  /**\n   * Getter for randomizationTiming\n   * @return {RandomizationTiming}\n   */\n  get randomizationTiming(): RandomizationTiming {\n    return this._randomizationTiming;\n  }\n\n  /**\n   * Setter for randomizationTiming\n   * @param {RandomizationTiming} randomizationTiming\n   */\n  set randomizationTiming(randomizationTiming: RandomizationTiming) {\n    this._randomizationTiming = randomizationTiming;\n  }\n\n  /**\n   * Getter for reorderChildren\n   * @return {boolean}\n   */\n  get reorderChildren(): boolean {\n    return this._reorderChildren;\n  }\n\n  /**\n   * Setter for reorderChildren\n   * @param {boolean} reorderChildren\n   */\n  set reorderChildren(reorderChildren: boolean) {\n    this._reorderChildren = reorderChildren;\n  }\n\n  /**\n   * toJSON for SequencingControls\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      enabled: this._enabled,\n      choice: this._choice,\n      choiceExit: this._choiceExit,\n      flow: this._flow,\n      forwardOnly: this._forwardOnly,\n      useCurrentAttemptObjectiveInfo: this._useCurrentAttemptObjectiveInfo,\n      useCurrentAttemptProgressInfo: this._useCurrentAttemptProgressInfo,\n      preventActivation: this._preventActivation,\n      constrainChoice: this._constrainChoice,\n      rollupObjectiveSatisfied: this._rollupObjectiveSatisfied,\n      rollupProgressCompletion: this._rollupProgressCompletion,\n      objectiveMeasureWeight: this._objectiveMeasureWeight,\n      selectionTiming: this._selectionTiming,\n      selectCount: this._selectCount,\n      selectionCountStatus: this._selectionCountStatus,\n      randomizeChildren: this._randomizeChildren,\n      randomizationTiming: this._randomizationTiming,\n      reorderChildren: this._reorderChildren,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { scorm2004_regex } from \"../../../constants/regex\";\nimport { check2004ValidFormat } from \"../validation\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { CompletionStatus, SuccessStatus } from \"../../../constants/enums\";\nimport { SequencingControls } from \"./sequencing_controls\";\nimport { SequencingRules } from \"./sequencing_rules\";\nimport { RollupRules } from \"./rollup_rules\";\n\n/**\n * Class representing a single activity in the SCORM 2004 activity tree\n */\nexport class Activity extends BaseCMI {\n  private _id: string = \"\";\n  private _title: string = \"\";\n  private _children: Activity[] = [];\n  private _parent: Activity | null = null;\n  private _isVisible: boolean = true;\n  private _isActive: boolean = false;\n  private _isSuspended: boolean = false;\n  private _isCompleted: boolean = false;\n  private _completionStatus: CompletionStatus = CompletionStatus.UNKNOWN;\n  private _successStatus: SuccessStatus = SuccessStatus.UNKNOWN;\n  private _attemptCount: number = 0;\n  private _attemptCompletionAmount: number = 0;\n  private _attemptAbsoluteDuration: string = \"PT0H0M0S\";\n  private _attemptExperiencedDuration: string = \"PT0H0M0S\";\n  private _activityAbsoluteDuration: string = \"PT0H0M0S\";\n  private _activityExperiencedDuration: string = \"PT0H0M0S\";\n  private _objectiveSatisfiedStatus: boolean = false;\n  private _objectiveMeasureStatus: boolean = false;\n  private _objectiveNormalizedMeasure: number = 0;\n  private _scaledPassingScore: number = 0.7; // Default passing score\n  private _isHiddenFromChoice: boolean = false;\n  private _isAvailable: boolean = true;\n  private _attemptLimit: number | null = null;\n  private _attemptAbsoluteDurationLimit: string | null = null;\n  private _activityAbsoluteDurationLimit: string | null = null;\n  private _timeLimitAction: string | null = null;\n  private _timeLimitDuration: string | null = null;\n  private _beginTimeLimit: string | null = null;\n  private _endTimeLimit: string | null = null;\n  private _sequencingControls: SequencingControls;\n  private _sequencingRules: SequencingRules;\n  private _rollupRules: RollupRules;\n  private _processedChildren: Activity[] | null = null;\n  private _isNewAttempt: boolean = false;\n\n  /**\n   * Constructor for Activity\n   * @param {string} id - The unique identifier for this activity\n   * @param {string} title - The title of this activity\n   */\n  constructor(id: string = \"\", title: string = \"\") {\n    super(\"activity\");\n    this._id = id;\n    this._title = title;\n    this._sequencingControls = new SequencingControls();\n    this._sequencingRules = new SequencingRules();\n    this._rollupRules = new RollupRules();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    // Initialize children\n    for (const child of this._children) {\n      child.initialize();\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._isActive = false;\n    this._isSuspended = false;\n    this._isCompleted = false;\n    this._completionStatus = CompletionStatus.UNKNOWN;\n    this._successStatus = SuccessStatus.UNKNOWN;\n    this._attemptCount = 0;\n    this._attemptCompletionAmount = 0;\n    this._attemptAbsoluteDuration = \"PT0H0M0S\";\n    this._attemptExperiencedDuration = \"PT0H0M0S\";\n    this._activityAbsoluteDuration = \"PT0H0M0S\";\n    this._activityExperiencedDuration = \"PT0H0M0S\";\n    this._objectiveSatisfiedStatus = false;\n    this._objectiveMeasureStatus = false;\n    this._objectiveNormalizedMeasure = 0;\n\n    // Reset children\n    for (const child of this._children) {\n      child.reset();\n    }\n  }\n\n  /**\n   * Getter for id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for title\n   * @return {string}\n   */\n  get title(): string {\n    return this._title;\n  }\n\n  /**\n   * Setter for title\n   * @param {string} title\n   */\n  set title(title: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".title\", title, scorm2004_regex.CMILangString250)\n    ) {\n      this._title = title;\n    }\n  }\n\n  /**\n   * Getter for children\n   * @return {Activity[]}\n   */\n  get children(): Activity[] {\n    return this._children;\n  }\n\n  /**\n   * Add a child activity to this activity\n   * @param {Activity} child - The child activity to add\n   */\n  addChild(child: Activity): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(child instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".children\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    child._parent = this;\n    this._children.push(child);\n  }\n\n  /**\n   * Remove a child activity from this activity\n   * @param {Activity} child - The child activity to remove\n   * @return {boolean} - True if the child was removed, false otherwise\n   */\n  removeChild(child: Activity): boolean {\n    const index = this._children.indexOf(child);\n    if (index !== -1) {\n      this._children.splice(index, 1);\n      child._parent = null;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for parent\n   * @return {Activity | null}\n   */\n  get parent(): Activity | null {\n    return this._parent;\n  }\n\n  /**\n   * Getter for isVisible\n   * @return {boolean}\n   */\n  get isVisible(): boolean {\n    return this._isVisible;\n  }\n\n  /**\n   * Setter for isVisible\n   * @param {boolean} isVisible\n   */\n  set isVisible(isVisible: boolean) {\n    this._isVisible = isVisible;\n  }\n\n  /**\n   * Getter for isActive\n   * @return {boolean}\n   */\n  get isActive(): boolean {\n    return this._isActive;\n  }\n\n  /**\n   * Setter for isActive\n   * @param {boolean} isActive\n   */\n  set isActive(isActive: boolean) {\n    this._isActive = isActive;\n  }\n\n  /**\n   * Getter for isSuspended\n   * @return {boolean}\n   */\n  get isSuspended(): boolean {\n    return this._isSuspended;\n  }\n\n  /**\n   * Setter for isSuspended\n   * @param {boolean} isSuspended\n   */\n  set isSuspended(isSuspended: boolean) {\n    this._isSuspended = isSuspended;\n  }\n\n  /**\n   * Getter for isCompleted\n   * @return {boolean}\n   */\n  get isCompleted(): boolean {\n    return this._isCompleted;\n  }\n\n  /**\n   * Setter for isCompleted\n   * @param {boolean} isCompleted\n   */\n  set isCompleted(isCompleted: boolean) {\n    this._isCompleted = isCompleted;\n    // Update completion status based on boolean value\n    if (isCompleted) {\n      this._completionStatus = CompletionStatus.COMPLETED;\n    } else {\n      this._completionStatus = CompletionStatus.INCOMPLETE;\n    }\n  }\n\n  /**\n   * Getter for completionStatus\n   * @return {CompletionStatus}\n   */\n  get completionStatus(): CompletionStatus {\n    return this._completionStatus;\n  }\n\n  /**\n   * Setter for completionStatus\n   * @param {CompletionStatus} completionStatus\n   */\n  set completionStatus(completionStatus: CompletionStatus) {\n    this._completionStatus = completionStatus;\n    this._isCompleted = completionStatus === CompletionStatus.COMPLETED;\n  }\n\n  /**\n   * Getter for successStatus\n   * @return {SuccessStatus}\n   */\n  get successStatus(): SuccessStatus {\n    return this._successStatus;\n  }\n\n  /**\n   * Setter for successStatus\n   * @param {SuccessStatus} successStatus\n   */\n  set successStatus(successStatus: SuccessStatus) {\n    this._successStatus = successStatus;\n  }\n\n  /**\n   * Getter for attemptCount\n   * @return {number}\n   */\n  get attemptCount(): number {\n    return this._attemptCount;\n  }\n\n  /**\n   * Setter for attemptCount\n   * @param {number} value\n   */\n  set attemptCount(value: number) {\n    this._attemptCount = value;\n  }\n\n  /**\n   * Increment the attempt count\n   */\n  incrementAttemptCount(): void {\n    this._attemptCount++;\n    this._isNewAttempt = true;\n    // Reset processed children on new attempt if needed\n    const controls = this._sequencingControls;\n    if (\n      controls.selectionTiming === \"onEachNewAttempt\" ||\n      controls.randomizationTiming === \"onEachNewAttempt\"\n    ) {\n      this._processedChildren = null;\n    }\n  }\n\n  /**\n   * Getter for objectiveSatisfiedStatus\n   * @return {boolean}\n   */\n  get objectiveSatisfiedStatus(): boolean {\n    return this._objectiveSatisfiedStatus;\n  }\n\n  /**\n   * Setter for objectiveSatisfiedStatus\n   * @param {boolean} objectiveSatisfiedStatus\n   */\n  set objectiveSatisfiedStatus(objectiveSatisfiedStatus: boolean) {\n    this._objectiveSatisfiedStatus = objectiveSatisfiedStatus;\n    // Update success status based on objective satisfaction\n    if (objectiveSatisfiedStatus) {\n      this._successStatus = SuccessStatus.PASSED;\n    } else {\n      this._successStatus = SuccessStatus.FAILED;\n    }\n  }\n\n  /**\n   * Getter for objectiveMeasureStatus\n   * @return {boolean}\n   */\n  get objectiveMeasureStatus(): boolean {\n    return this._objectiveMeasureStatus;\n  }\n\n  /**\n   * Setter for objectiveMeasureStatus\n   * @param {boolean} objectiveMeasureStatus\n   */\n  set objectiveMeasureStatus(objectiveMeasureStatus: boolean) {\n    this._objectiveMeasureStatus = objectiveMeasureStatus;\n  }\n\n  /**\n   * Getter for objectiveNormalizedMeasure\n   * @return {number}\n   */\n  get objectiveNormalizedMeasure(): number {\n    return this._objectiveNormalizedMeasure;\n  }\n\n  /**\n   * Setter for objectiveNormalizedMeasure\n   * @param {number} objectiveNormalizedMeasure\n   */\n  set objectiveNormalizedMeasure(objectiveNormalizedMeasure: number) {\n    this._objectiveNormalizedMeasure = objectiveNormalizedMeasure;\n  }\n\n  /**\n   * Getter for scaledPassingScore\n   * @return {number}\n   */\n  get scaledPassingScore(): number {\n    return this._scaledPassingScore;\n  }\n\n  /**\n   * Setter for scaledPassingScore\n   * @param {number} scaledPassingScore\n   */\n  set scaledPassingScore(scaledPassingScore: number) {\n    if (scaledPassingScore >= -1 && scaledPassingScore <= 1) {\n      this._scaledPassingScore = scaledPassingScore;\n    }\n  }\n\n  /**\n   * Getter for isHiddenFromChoice\n   * @return {boolean}\n   */\n  get isHiddenFromChoice(): boolean {\n    return this._isHiddenFromChoice;\n  }\n\n  /**\n   * Setter for isHiddenFromChoice\n   * @param {boolean} isHiddenFromChoice\n   */\n  set isHiddenFromChoice(isHiddenFromChoice: boolean) {\n    this._isHiddenFromChoice = isHiddenFromChoice;\n  }\n\n  /**\n   * Getter for isAvailable\n   * @return {boolean}\n   */\n  get isAvailable(): boolean {\n    return this._isAvailable;\n  }\n\n  /**\n   * Setter for isAvailable\n   * @param {boolean} isAvailable\n   */\n  set isAvailable(isAvailable: boolean) {\n    this._isAvailable = isAvailable;\n  }\n\n  /**\n   * Getter for attemptLimit\n   * @return {number | null}\n   */\n  get attemptLimit(): number | null {\n    return this._attemptLimit;\n  }\n\n  /**\n   * Setter for attemptLimit\n   * @param {number | null} attemptLimit\n   */\n  set attemptLimit(attemptLimit: number | null) {\n    this._attemptLimit = attemptLimit;\n  }\n\n  /**\n   * Check if attempt limit has been exceeded\n   * @return {boolean}\n   */\n  hasAttemptLimitExceeded(): boolean {\n    if (this._attemptLimit === null) {\n      return false;\n    }\n    return this._attemptCount >= this._attemptLimit;\n  }\n\n  /**\n   * Getter for timeLimitDuration\n   * @return {string | null}\n   */\n  get timeLimitDuration(): string | null {\n    return this._timeLimitDuration;\n  }\n\n  /**\n   * Setter for timeLimitDuration\n   * @param {string | null} timeLimitDuration\n   */\n  set timeLimitDuration(timeLimitDuration: string | null) {\n    this._timeLimitDuration = timeLimitDuration;\n  }\n\n  /**\n   * Getter for timeLimitAction\n   * @return {string | null}\n   */\n  get timeLimitAction(): string | null {\n    return this._timeLimitAction;\n  }\n\n  /**\n   * Setter for timeLimitAction\n   * @param {string | null} timeLimitAction\n   */\n  set timeLimitAction(timeLimitAction: string | null) {\n    this._timeLimitAction = timeLimitAction;\n  }\n\n  /**\n   * Getter for beginTimeLimit\n   * @return {string | null}\n   */\n  get beginTimeLimit(): string | null {\n    return this._beginTimeLimit;\n  }\n\n  /**\n   * Setter for beginTimeLimit\n   * @param {string | null} beginTimeLimit\n   */\n  set beginTimeLimit(beginTimeLimit: string | null) {\n    this._beginTimeLimit = beginTimeLimit;\n  }\n\n  /**\n   * Getter for endTimeLimit\n   * @return {string | null}\n   */\n  get endTimeLimit(): string | null {\n    return this._endTimeLimit;\n  }\n\n  /**\n   * Setter for endTimeLimit\n   * @param {string | null} endTimeLimit\n   */\n  set endTimeLimit(endTimeLimit: string | null) {\n    this._endTimeLimit = endTimeLimit;\n  }\n\n\n  /**\n   * Getter for attemptAbsoluteDurationLimit\n   * @return {string | null}\n   */\n  get attemptAbsoluteDurationLimit(): string | null {\n    return this._attemptAbsoluteDurationLimit;\n  }\n\n  /**\n   * Setter for attemptAbsoluteDurationLimit\n   * @param {string | null} attemptAbsoluteDurationLimit\n   */\n  set attemptAbsoluteDurationLimit(attemptAbsoluteDurationLimit: string | null) {\n    // TODO: Add proper validation for ISO 8601 duration format\n    this._attemptAbsoluteDurationLimit = attemptAbsoluteDurationLimit;\n  }\n\n  /**\n   * Getter for attemptExperiencedDuration\n   * @return {string}\n   */\n  get attemptExperiencedDuration(): string {\n    return this._attemptExperiencedDuration;\n  }\n\n  /**\n   * Setter for attemptExperiencedDuration\n   * @param {string} attemptExperiencedDuration\n   */\n  set attemptExperiencedDuration(attemptExperiencedDuration: string) {\n    // TODO: Add proper validation for ISO 8601 duration format\n    this._attemptExperiencedDuration = attemptExperiencedDuration;\n  }\n\n  /**\n   * Getter for activityAbsoluteDurationLimit\n   * @return {string | null}\n   */\n  get activityAbsoluteDurationLimit(): string | null {\n    return this._activityAbsoluteDurationLimit;\n  }\n\n  /**\n   * Setter for activityAbsoluteDurationLimit\n   * @param {string | null} activityAbsoluteDurationLimit\n   */\n  set activityAbsoluteDurationLimit(activityAbsoluteDurationLimit: string | null) {\n    // TODO: Add proper validation for ISO 8601 duration format\n    this._activityAbsoluteDurationLimit = activityAbsoluteDurationLimit;\n  }\n\n  /**\n   * Getter for activityExperiencedDuration\n   * @return {string}\n   */\n  get activityExperiencedDuration(): string {\n    return this._activityExperiencedDuration;\n  }\n\n  /**\n   * Setter for activityExperiencedDuration\n   * @param {string} activityExperiencedDuration\n   */\n  set activityExperiencedDuration(activityExperiencedDuration: string) {\n    // TODO: Add proper validation for ISO 8601 duration format\n    this._activityExperiencedDuration = activityExperiencedDuration;\n  }\n\n\n  /**\n   * Getter for sequencingControls\n   * @return {SequencingControls}\n   */\n  get sequencingControls(): SequencingControls {\n    return this._sequencingControls;\n  }\n\n  /**\n   * Setter for sequencingControls\n   * @param {SequencingControls} sequencingControls\n   */\n  set sequencingControls(sequencingControls: SequencingControls) {\n    this._sequencingControls = sequencingControls;\n  }\n\n  /**\n   * Getter for sequencingRules\n   * @return {SequencingRules}\n   */\n  get sequencingRules(): SequencingRules {\n    return this._sequencingRules;\n  }\n\n  /**\n   * Setter for sequencingRules\n   * @param {SequencingRules} sequencingRules\n   */\n  set sequencingRules(sequencingRules: SequencingRules) {\n    this._sequencingRules = sequencingRules;\n  }\n\n  /**\n   * Getter for rollupRules\n   * @return {RollupRules}\n   */\n  get rollupRules(): RollupRules {\n    return this._rollupRules;\n  }\n\n  /**\n   * Setter for rollupRules\n   * @param {RollupRules} rollupRules\n   */\n  set rollupRules(rollupRules: RollupRules) {\n    this._rollupRules = rollupRules;\n  }\n\n  /**\n   * Get available children with selection and randomization applied\n   * @return {Activity[]}\n   */\n  getAvailableChildren(): Activity[] {\n    // If no children, return empty array\n    if (this._children.length === 0) {\n      return [];\n    }\n\n    // If processed children already exist and no new attempt, return them\n    if (this._processedChildren !== null) {\n      return this._processedChildren;\n    }\n\n    // If no processing has been done yet, return all children\n    // The sequencing process will call applySelectionAndRandomization when needed\n    return this._children;\n  }\n\n  /**\n   * Set the processed children (called by SelectionRandomization)\n   * @param {Activity[]} processedChildren\n   */\n  setProcessedChildren(processedChildren: Activity[]): void {\n    this._processedChildren = processedChildren;\n  }\n\n  /**\n   * Reset processed children (used when configuration changes)\n   */\n  resetProcessedChildren(): void {\n    this._processedChildren = null;\n  }\n\n  /**\n   * Get whether this is a new attempt\n   * @return {boolean}\n   */\n  get isNewAttempt(): boolean {\n    return this._isNewAttempt;\n  }\n\n  /**\n   * Set whether this is a new attempt\n   * @param {boolean} isNewAttempt\n   */\n  set isNewAttempt(isNewAttempt: boolean) {\n    this._isNewAttempt = isNewAttempt;\n  }\n\n  /**\n   * toJSON for Activity\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      id: this._id,\n      title: this._title,\n      isVisible: this._isVisible,\n      isActive: this._isActive,\n      isSuspended: this._isSuspended,\n      isCompleted: this._isCompleted,\n      completionStatus: this._completionStatus,\n      successStatus: this._successStatus,\n      attemptCount: this._attemptCount,\n      attemptCompletionAmount: this._attemptCompletionAmount,\n      attemptAbsoluteDuration: this._attemptAbsoluteDuration,\n      attemptExperiencedDuration: this._attemptExperiencedDuration,\n      activityAbsoluteDuration: this._activityAbsoluteDuration,\n      activityExperiencedDuration: this._activityExperiencedDuration,\n      objectiveSatisfiedStatus: this._objectiveSatisfiedStatus,\n      objectiveMeasureStatus: this._objectiveMeasureStatus,\n      objectiveNormalizedMeasure: this._objectiveNormalizedMeasure,\n      children: this._children.map((child) => child.toJSON()),\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\n\n/**\n * Class representing the SCORM 2004 activity tree\n */\nexport class ActivityTree extends BaseCMI {\n  private _root: Activity | null = null;\n  private _currentActivity: Activity | null = null;\n  private _suspendedActivity: Activity | null = null;\n  private _activities: Map<string, Activity> = new Map();\n\n  /**\n   * Constructor for ActivityTree\n   */\n  constructor() {\n    super(\"activityTree\");\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    if (this._root) {\n      this._root.initialize();\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._currentActivity = null;\n    this._suspendedActivity = null;\n    // Clear the activities map so it can be rebuilt\n    this._activities.clear();\n    if (this._root) {\n      this._root.reset();\n      // Re-populate the activities map with the root and its children\n      this._activities.set(this._root.id, this._root);\n      this._addActivitiesToMap(this._root);\n    }\n  }\n\n  /**\n   * Getter for root\n   * @return {Activity | null}\n   */\n  get root(): Activity | null {\n    return this._root;\n  }\n\n  /**\n   * Setter for root\n   * @param {Activity} root\n   */\n  set root(root: Activity | null) {\n    // noinspection SuspiciousTypeOfGuard\n    if (root !== null && !(root instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".root\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    // Clear existing map when assigning a new root to avoid stale activities\n    this._activities.clear();\n    this._root = root;\n    if (root) {\n      this._activities.set(root.id, root);\n      this._addActivitiesToMap(root);\n    }\n  }\n\n  /**\n   * Recursively add activities to the activities map\n   * @param {Activity} activity\n   * @private\n   */\n  private _addActivitiesToMap(activity: Activity): void {\n    for (const child of activity.children) {\n      this._activities.set(child.id, child);\n      this._addActivitiesToMap(child);\n    }\n  }\n\n  /**\n   * Getter for currentActivity\n   * @return {Activity | null}\n   */\n  get currentActivity(): Activity | null {\n    return this._currentActivity;\n  }\n\n  /**\n   * Setter for currentActivity\n   * @param {Activity | null} activity\n   */\n  set currentActivity(activity: Activity | null) {\n    // noinspection SuspiciousTypeOfGuard\n    if (activity !== null && !(activity instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".currentActivity\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n\n    // If there's already a current activity, deactivate it\n    if (this._currentActivity) {\n      this._currentActivity.isActive = false;\n    }\n\n    // Set the new current activity and activate it\n    this._currentActivity = activity;\n    if (activity) {\n      activity.isActive = true;\n    }\n  }\n\n  /**\n   * Getter for suspendedActivity\n   * @return {Activity | null}\n   */\n  get suspendedActivity(): Activity | null {\n    return this._suspendedActivity;\n  }\n\n  /**\n   * Setter for suspendedActivity\n   * @param {Activity | null} activity\n   */\n  set suspendedActivity(activity: Activity | null) {\n    // noinspection SuspiciousTypeOfGuard\n    if (activity !== null && !(activity instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".suspendedActivity\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n\n    // If there's already a suspended activity, unsuspend it\n    if (this._suspendedActivity) {\n      this._suspendedActivity.isSuspended = false;\n    }\n\n    // Set the new suspended activity and mark it as suspended\n    this._suspendedActivity = activity;\n    if (activity) {\n      activity.isSuspended = true;\n    }\n  }\n\n  /**\n   * Get an activity by ID\n   * @param {string} id - The ID of the activity to get\n   * @return {Activity | null} - The activity with the given ID, or null if not found\n   */\n  getActivity(id: string): Activity | null {\n    return this._activities.get(id) || null;\n  }\n\n  /**\n   * Get all activities in the tree\n   * @return {Activity[]} - An array of all activities in the tree\n   */\n  getAllActivities(): Activity[] {\n    return Array.from(this._activities.values());\n  }\n\n  /**\n   * Get the parent of an activity\n   * @param {Activity} activity - The activity to get the parent of\n   * @return {Activity | null} - The parent of the activity, or null if it has no parent\n   */\n  getParent(activity: Activity): Activity | null {\n    return activity.parent;\n  }\n\n  /**\n   * Get the children of an activity\n   * @param {Activity} activity - The activity to get the children of\n   * @param {boolean} useAvailableChildren - Whether to use available children (with selection/randomization)\n   * @return {Activity[]} - An array of the activity's children\n   */\n  getChildren(activity: Activity, useAvailableChildren: boolean = true): Activity[] {\n    return useAvailableChildren ? activity.getAvailableChildren() : activity.children;\n  }\n\n  /**\n   * Get the siblings of an activity\n   * @param {Activity} activity - The activity to get the siblings of\n   * @return {Activity[]} - An array of the activity's siblings\n   */\n  getSiblings(activity: Activity): Activity[] {\n    if (!activity.parent) {\n      return [];\n    }\n    return activity.parent.children.filter((child) => child !== activity);\n  }\n\n  /**\n   * Get the next sibling of an activity\n   * @param {Activity} activity - The activity to get the next sibling of\n   * @param {boolean} useAvailableChildren - Whether to use available children (with selection/randomization)\n   * @return {Activity | null} - The next sibling of the activity, or null if it has no next sibling\n   */\n  getNextSibling(activity: Activity, useAvailableChildren: boolean = true): Activity | null {\n    if (!activity.parent) {\n      return null;\n    }\n    let siblings = useAvailableChildren \n      ? activity.parent.getAvailableChildren() \n      : activity.parent.children;\n    let index = siblings.indexOf(activity);\n    \n    // Fallback: if not found in available children, try raw children\n    if (index === -1 && useAvailableChildren) {\n      siblings = activity.parent.children;\n      index = siblings.indexOf(activity);\n    }\n    \n    if (index === -1 || index === siblings.length - 1) {\n      return null;\n    }\n    return siblings[index + 1] ?? null;\n  }\n\n  /**\n   * Get the previous sibling of an activity\n   * @param {Activity} activity - The activity to get the previous sibling of\n   * @param {boolean} useAvailableChildren - Whether to use available children (with selection/randomization)\n   * @return {Activity | null} - The previous sibling of the activity, or null if it has no previous sibling\n   */\n  getPreviousSibling(activity: Activity, useAvailableChildren: boolean = true): Activity | null {\n    if (!activity.parent) {\n      return null;\n    }\n    let siblings = useAvailableChildren \n      ? activity.parent.getAvailableChildren() \n      : activity.parent.children;\n    let index = siblings.indexOf(activity);\n    \n    // Fallback: if not found in available children, try raw children\n    if (index === -1 && useAvailableChildren) {\n      siblings = activity.parent.children;\n      index = siblings.indexOf(activity);\n    }\n    \n    if (index <= 0) {\n      return null;\n    }\n    return siblings[index - 1] ?? null;\n  }\n\n  /**\n   * Get the first child of an activity\n   * @param {Activity} activity - The activity to get the first child of\n   * @param {boolean} useAvailableChildren - Whether to use available children (with selection/randomization)\n   * @return {Activity | null} - The first child of the activity, or null if it has no children\n   */\n  getFirstChild(activity: Activity, useAvailableChildren: boolean = true): Activity | null {\n    const children = useAvailableChildren \n      ? activity.getAvailableChildren() \n      : activity.children;\n    if (children.length === 0) {\n      return null;\n    }\n    return children[0] ?? null;\n  }\n\n  /**\n   * Get the last child of an activity\n   * @param {Activity} activity - The activity to get the last child of\n   * @param {boolean} useAvailableChildren - Whether to use available children (with selection/randomization)\n   * @return {Activity | null} - The last child of the activity, or null if it has no children\n   */\n  getLastChild(activity: Activity, useAvailableChildren: boolean = true): Activity | null {\n    const children = useAvailableChildren \n      ? activity.getAvailableChildren() \n      : activity.children;\n    if (children.length === 0) {\n      return null;\n    }\n    return children[children.length - 1] ?? null;\n  }\n\n  /**\n   * Get the common ancestor of two activities\n   * @param {Activity} activity1 - The first activity\n   * @param {Activity} activity2 - The second activity\n   * @return {Activity | null} - The common ancestor of the two activities, or null if they have no common ancestor\n   */\n  getCommonAncestor(activity1: Activity, activity2: Activity): Activity | null {\n    // Get the path from the root to activity1\n    const path1: Activity[] = [];\n    let current: Activity | null = activity1;\n    while (current) {\n      path1.unshift(current);\n      current = current.parent;\n    }\n\n    // Check if activity2 is in the path from the root to activity1\n    current = activity2;\n    while (current) {\n      if (path1.includes(current)) {\n        return current;\n      }\n      current = current.parent;\n    }\n\n    return null;\n  }\n\n  /**\n   * toJSON for ActivityTree\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      root: this._root,\n      currentActivity: this._currentActivity ? this._currentActivity.id : null,\n      suspendedActivity: this._suspendedActivity ? this._suspendedActivity.id : null,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { Activity } from \"./activity\";\nimport { SelectionTiming, RandomizationTiming } from \"./sequencing_controls\";\n\n/**\n * Class implementing SCORM 2004 Selection and Randomization processes (SR.1 and SR.2)\n */\nexport class SelectionRandomization {\n  /**\n   * Select Children Process (SR.1)\n   * Selects a subset of child activities based on selection controls\n   * @param {Activity} activity - The parent activity whose children need to be selected\n   * @return {Activity[]} - The selected child activities\n   */\n  public static selectChildrenProcess(activity: Activity): Activity[] {\n    const controls = activity.sequencingControls;\n    const children = [...activity.children]; // Create a copy to avoid mutating original\n\n    // Check if selection should occur\n    if (controls.selectionTiming === SelectionTiming.NEVER) {\n      return children;\n    }\n\n    // Check if selection has already been done (for ONCE timing)\n    if (\n      controls.selectionTiming === SelectionTiming.ONCE &&\n      controls.selectionCountStatus\n    ) {\n      return children;\n    }\n\n    // Check if we need to select children\n    const selectCount = controls.selectCount;\n    if (selectCount === null || selectCount >= children.length) {\n      // Mark selection as done if timing is ONCE\n      if (controls.selectionTiming === SelectionTiming.ONCE) {\n        controls.selectionCountStatus = true;\n      }\n      return children;\n    }\n\n    // Perform selection\n    const selectedChildren: Activity[] = [];\n    const availableIndices = children.map((_, index) => index);\n\n    // Randomly select children\n    for (let i = 0; i < selectCount; i++) {\n      if (availableIndices.length === 0) break;\n      \n      const randomIndex = Math.floor(Math.random() * availableIndices.length);\n      const childIndex = availableIndices[randomIndex];\n      if (childIndex !== undefined && children[childIndex]) {\n        selectedChildren.push(children[childIndex]);\n      }\n      \n      // Remove selected index from available indices\n      availableIndices.splice(randomIndex, 1);\n    }\n\n    // Mark selection as done only if timing is ONCE\n    if (controls.selectionTiming === SelectionTiming.ONCE) {\n      controls.selectionCountStatus = true;\n    }\n\n    // Hide non-selected children from choice\n    for (const child of children) {\n      if (!selectedChildren.includes(child)) {\n        child.isHiddenFromChoice = true;\n        child.isAvailable = false;\n      }\n    }\n\n    return selectedChildren;\n  }\n\n  /**\n   * Randomize Children Process (SR.2)\n   * Randomizes the order of child activities based on randomization controls\n   * @param {Activity} activity - The parent activity whose children need to be randomized\n   * @return {Activity[]} - The randomized child activities\n   */\n  public static randomizeChildrenProcess(activity: Activity): Activity[] {\n    const controls = activity.sequencingControls;\n    const children = [...activity.children]; // Create a copy to avoid mutating original\n\n    // Check if randomization should occur\n    if (controls.randomizationTiming === RandomizationTiming.NEVER) {\n      return children;\n    }\n\n    // Check if randomization has already been done (for ONCE timing)\n    if (\n      controls.randomizationTiming === RandomizationTiming.ONCE &&\n      controls.reorderChildren\n    ) {\n      return children;\n    }\n\n    // Check if we need to randomize\n    if (!controls.randomizeChildren) {\n      return children;\n    }\n\n    // Perform Fisher-Yates shuffle\n    const randomizedChildren = [...children];\n    for (let i = randomizedChildren.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const tempI = randomizedChildren[i];\n      const tempJ = randomizedChildren[j];\n      if (tempI && tempJ) {\n        randomizedChildren[i] = tempJ;\n        randomizedChildren[j] = tempI;\n      }\n    }\n\n    // Mark randomization as done only if timing is ONCE\n    if (controls.randomizationTiming === RandomizationTiming.ONCE) {\n      controls.reorderChildren = true;\n    }\n\n    // Update the activity's children array with the new order\n    activity.children.length = 0;\n    activity.children.push(...randomizedChildren);\n\n    return randomizedChildren;\n  }\n\n  /**\n   * Apply selection and randomization to an activity\n   * This combines both SR.1 and SR.2 processes\n   * @param {Activity} activity - The parent activity\n   * @param {boolean} isNewAttempt - Whether this is a new attempt on the activity\n   * @return {Activity[]} - The processed child activities\n   */\n  public static applySelectionAndRandomization(\n    activity: Activity,\n    isNewAttempt: boolean = false,\n  ): Activity[] {\n    const controls = activity.sequencingControls;\n\n    // Check if we should apply selection/randomization\n    let shouldApplySelection = false;\n    let shouldApplyRandomization = false;\n\n    // For ON_EACH_NEW_ATTEMPT timing, only apply on new attempts\n    if (controls.selectionTiming === SelectionTiming.ON_EACH_NEW_ATTEMPT) {\n      shouldApplySelection = isNewAttempt;\n      if (isNewAttempt) {\n        controls.selectionCountStatus = false;\n      }\n    } else if (controls.selectionTiming === SelectionTiming.ONCE) {\n      shouldApplySelection = !controls.selectionCountStatus;\n    }\n\n    if (controls.randomizationTiming === RandomizationTiming.ON_EACH_NEW_ATTEMPT) {\n      shouldApplyRandomization = isNewAttempt;\n      if (isNewAttempt) {\n        controls.reorderChildren = false;\n      }\n    } else if (controls.randomizationTiming === RandomizationTiming.ONCE) {\n      shouldApplyRandomization = !controls.reorderChildren;\n    }\n\n    // Apply selection first if needed\n    if (shouldApplySelection) {\n      this.selectChildrenProcess(activity);\n    }\n\n    // Then apply randomization if needed\n    if (shouldApplyRandomization) {\n      this.randomizeChildrenProcess(activity);\n    }\n\n    // Get the final processed children\n    const processedChildren = activity.children.filter(child => child.isAvailable);\n    \n    // Store the processed children on the activity\n    activity.setProcessedChildren(processedChildren);\n    \n    return processedChildren;\n  }\n\n  /**\n   * Check if selection is needed for an activity\n   * @param {Activity} activity - The activity to check\n   * @return {boolean} - True if selection is needed\n   */\n  public static isSelectionNeeded(activity: Activity): boolean {\n    const controls = activity.sequencingControls;\n    \n    if (controls.selectionTiming === SelectionTiming.NEVER) {\n      return false;\n    }\n\n    if (\n      controls.selectionTiming === SelectionTiming.ONCE &&\n      controls.selectionCountStatus\n    ) {\n      return false;\n    }\n\n    return controls.selectCount !== null && controls.selectCount < activity.children.length;\n  }\n\n  /**\n   * Check if randomization is needed for an activity\n   * @param {Activity} activity - The activity to check\n   * @return {boolean} - True if randomization is needed\n   */\n  public static isRandomizationNeeded(activity: Activity): boolean {\n    const controls = activity.sequencingControls;\n    \n    if (controls.randomizationTiming === RandomizationTiming.NEVER) {\n      return false;\n    }\n\n    if (\n      controls.randomizationTiming === RandomizationTiming.ONCE &&\n      controls.reorderChildren\n    ) {\n      return false;\n    }\n\n    return controls.randomizeChildren;\n  }\n}","import { Activity } from \"./activity\";\nimport { ActivityTree } from \"./activity_tree\";\nimport { SequencingRules, SequencingRule, RuleActionType, RuleConditionOperator } from \"./sequencing_rules\";\nimport { SequencingControls } from \"./sequencing_controls\";\nimport { ADLNav } from \"../adl\";\nimport { SelectionRandomization } from \"./selection_randomization\";\n\n/**\n * Enum for sequencing request types\n */\nexport enum SequencingRequestType {\n  START = \"start\",\n  RESUME_ALL = \"resumeAll\",\n  CONTINUE = \"continue\",\n  PREVIOUS = \"previous\",\n  CHOICE = \"choice\",\n  JUMP = \"jump\",\n  EXIT = \"exit\",\n  EXIT_ALL = \"exitAll\",\n  ABANDON = \"abandon\",\n  ABANDON_ALL = \"abandonAll\",\n  SUSPEND_ALL = \"suspendAll\",\n  RETRY = \"retry\",\n  RETRY_ALL = \"retryAll\",\n}\n\n/**\n * Enum for delivery request types\n */\nexport enum DeliveryRequestType {\n  DELIVER = \"deliver\",\n  DO_NOT_DELIVER = \"doNotDeliver\",\n}\n\n/**\n * Class representing the result of a sequencing process\n */\nexport class SequencingResult {\n  public deliveryRequest: DeliveryRequestType;\n  public targetActivity: Activity | null;\n  public exception: string | null;\n\n  constructor(\n    deliveryRequest: DeliveryRequestType = DeliveryRequestType.DO_NOT_DELIVER,\n    targetActivity: Activity | null = null,\n    exception: string | null = null,\n  ) {\n    this.deliveryRequest = deliveryRequest;\n    this.targetActivity = targetActivity;\n    this.exception = exception;\n  }\n}\n\n/**\n * Class implementing SCORM 2004 sequencing processes\n */\nexport class SequencingProcess {\n  private activityTree: ActivityTree;\n  private sequencingRules: SequencingRules | null;\n  private sequencingControls: SequencingControls | null;\n  private adlNav: ADLNav | null;\n\n  constructor(\n    activityTree: ActivityTree,\n    sequencingRules?: SequencingRules | null,\n    sequencingControls?: SequencingControls | null,\n    adlNav: ADLNav | null = null,\n  ) {\n    this.activityTree = activityTree;\n    this.sequencingRules = sequencingRules || null;\n    this.sequencingControls = sequencingControls || null;\n    this.adlNav = adlNav;\n  }\n\n  /**\n   * Main Sequencing Request Process (SB.2.12)\n   * This is the main entry point for all navigation requests\n   * @param {SequencingRequestType} request - The sequencing request\n   * @param {string} targetActivityId - The target activity ID (for choice/jump)\n   * @return {SequencingResult} - The result of the sequencing process\n   */\n  public sequencingRequestProcess(\n    request: SequencingRequestType,\n    targetActivityId: string | null = null,\n  ): SequencingResult {\n    // Initialize result\n    const result = new SequencingResult();\n\n    // Get current activity\n    const currentActivity = this.activityTree.currentActivity;\n    const suspendedActivity = this.activityTree.suspendedActivity;\n\n    // Process based on request type\n    switch (request) {\n      case SequencingRequestType.START:\n        return this.startSequencingRequestProcess();\n\n      case SequencingRequestType.RESUME_ALL:\n        return this.resumeAllSequencingRequestProcess();\n\n      case SequencingRequestType.CONTINUE:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.continueSequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.PREVIOUS:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.previousSequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.CHOICE:\n        if (!targetActivityId) {\n          result.exception = \"SB.2.12-5\"; // No target specified\n          return result;\n        }\n        return this.choiceSequencingRequestProcess(targetActivityId, currentActivity);\n\n      case SequencingRequestType.JUMP:\n        if (!targetActivityId) {\n          result.exception = \"SB.2.12-5\"; // No target specified\n          return result;\n        }\n        return this.jumpSequencingRequestProcess(targetActivityId);\n\n      case SequencingRequestType.EXIT:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.exitSequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.EXIT_ALL:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.exitAllSequencingRequestProcess();\n\n      case SequencingRequestType.ABANDON:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.abandonSequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.ABANDON_ALL:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.abandonAllSequencingRequestProcess();\n\n      case SequencingRequestType.SUSPEND_ALL:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.suspendAllSequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.RETRY:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.retrySequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.RETRY_ALL:\n        return this.retryAllSequencingRequestProcess();\n\n      default:\n        result.exception = \"SB.2.12-6\"; // Undefined sequencing request\n        return result;\n    }\n  }\n\n  /**\n   * Start Sequencing Request Process (SB.2.5)\n   * Determines the first activity to deliver when starting\n   * @return {SequencingResult}\n   */\n  private startSequencingRequestProcess(): SequencingResult {\n    const result = new SequencingResult();\n    const root = this.activityTree.root;\n\n    if (!root) {\n      result.exception = \"SB.2.5-1\"; // No activity tree\n      return result;\n    }\n\n    // Check if sequencing session has already begun\n    if (this.activityTree.currentActivity !== null) {\n      result.exception = \"SB.2.5-2\"; // Sequencing session already begun\n      return result;\n    }\n\n    // For START, we need to flow into the activity tree from the root\n    // Start with the root and find first deliverable leaf activity\n    const deliverableActivity = this.findFirstDeliverableActivity(root);\n\n    if (!deliverableActivity) {\n      result.exception = \"SB.2.5-3\"; // No activity available\n      return result;\n    }\n\n    // Deliver the identified activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = deliverableActivity;\n    return result;\n  }\n\n  /**\n   * Find First Deliverable Activity\n   * Recursively searches from the given activity to find the first deliverable leaf\n   * @param {Activity} activity - The activity to start searching from\n   * @return {Activity | null} - The first deliverable activity, or null if none found\n   */\n  private findFirstDeliverableActivity(activity: Activity): Activity | null {\n    // Check if this activity can be delivered (leaf activity)\n    if (activity.children.length === 0) {\n      // This is a leaf - check if it can be delivered\n      if (this.checkActivityProcess(activity)) {\n        return activity;\n      }\n      return null;\n    }\n\n    // This is a cluster - look through children for deliverable activity\n    this.ensureSelectionAndRandomization(activity);\n    const children = activity.getAvailableChildren();\n    \n    for (const child of children) {\n      const deliverable = this.findFirstDeliverableActivity(child);\n      if (deliverable) {\n        return deliverable;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Resume All Sequencing Request Process (SB.2.6)\n   * Resumes a suspended session\n   * @return {SequencingResult}\n   */\n  private resumeAllSequencingRequestProcess(): SequencingResult {\n    const result = new SequencingResult();\n    const suspendedActivity = this.activityTree.suspendedActivity;\n\n    if (!suspendedActivity) {\n      result.exception = \"SB.2.6-1\"; // No suspended activity\n      return result;\n    }\n\n    if (this.activityTree.currentActivity !== null) {\n      result.exception = \"SB.2.6-2\"; // Current activity already defined\n      return result;\n    }\n\n    // Deliver the suspended activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = suspendedActivity;\n    return result;\n  }\n\n  /**\n   * Continue Sequencing Request Process (SB.2.7)\n   * Processes continue navigation request\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private continueSequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Check if the current activity has been terminated\n    if (currentActivity.isActive) {\n      result.exception = \"SB.2.7-1\"; // Current activity not terminated\n      return result;\n    }\n\n    // Check if flow is allowed from the current activity's parent\n    if (currentActivity.parent && !currentActivity.parent.sequencingControls.flow) {\n      result.exception = \"SB.2.7-2\"; // No activity available (flow disabled)\n      return result;\n    }\n\n    // Flow from current activity to find next using flow subprocess\n    const flowResult = this.flowSubprocess(currentActivity, FlowSubprocessMode.FORWARD);\n\n    if (!flowResult) {\n      result.exception = \"SB.2.7-2\"; // No activity available\n      return result;\n    }\n\n    // Deliver the identified activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = flowResult;\n    return result;\n  }\n\n  /**\n   * Previous Sequencing Request Process (SB.2.8)\n   * Processes previous navigation request\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private previousSequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Check if the current activity has been terminated\n    if (currentActivity.isActive) {\n      result.exception = \"SB.2.8-1\"; // Current activity not terminated\n      return result;\n    }\n\n    // Check if flow is allowed from the current activity's parent\n    if (currentActivity.parent && !currentActivity.parent.sequencingControls.flow) {\n      result.exception = \"SB.2.8-2\"; // No activity available (flow disabled)\n      return result;\n    }\n\n    // Check if backward flow is allowed (forwardOnly control)\n    if (currentActivity.parent && currentActivity.parent.sequencingControls.forwardOnly) {\n      result.exception = \"SB.2.8-2\"; // No activity available (backward flow disabled)\n      return result;\n    }\n\n    // Flow from current activity to find previous using flow subprocess\n    const flowResult = this.flowSubprocess(currentActivity, FlowSubprocessMode.BACKWARD);\n\n    if (!flowResult) {\n      result.exception = \"SB.2.8-2\"; // No activity available\n      return result;\n    }\n\n    // Deliver the identified activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = flowResult;\n    return result;\n  }\n\n  /**\n   * Choice Sequencing Request Process (SB.2.9)\n   * Processes choice navigation request\n   * @param {string} targetActivityId - The target activity ID\n   * @param {Activity | null} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private choiceSequencingRequestProcess(\n    targetActivityId: string,\n    currentActivity: Activity | null,\n  ): SequencingResult {\n    const result = new SequencingResult();\n\n    // Find the target activity\n    let targetActivity = this.activityTree.getActivity(targetActivityId);\n    if (!targetActivity) {\n      result.exception = \"SB.2.9-1\"; // Target activity does not exist\n      return result;\n    }\n\n    // Check if target is in the activity tree\n    if (!this.isActivityInTree(targetActivity)) {\n      result.exception = \"SB.2.9-2\"; // Target activity not in tree\n      return result;\n    }\n\n    // Cannot choose the root activity\n    if (targetActivity === this.activityTree.root) {\n      result.exception = \"SB.2.9-3\"; // Cannot choose root\n      return result;\n    }\n\n    // Path to root validation\n    let activity: Activity | null = targetActivity;\n    while (activity) {\n      if (activity.isHiddenFromChoice) {\n        result.exception = \"SB.2.9-4\"; // Activity hidden from choice\n        return result;\n      }\n\n      // Check if choice control is constrained\n      if (activity.parent && !activity.parent.sequencingControls.choice) {\n        result.exception = \"SB.2.9-5\"; // Choice control is not allowed\n        return result;\n      }\n\n      activity = activity.parent;\n    }\n\n    // Check if current activity needs to be terminated\n    if (currentActivity && currentActivity.isActive) {\n      result.exception = \"SB.2.9-6\"; // Current activity not terminated\n      return result;\n    }\n\n    // Find common ancestor\n    const commonAncestor = this.findCommonAncestor(currentActivity, targetActivity);\n\n    // Terminate descendent attempts from common ancestor\n    if (currentActivity) {\n      this.terminateDescendentAttemptsProcess(commonAncestor || this.activityTree.root!);\n    }\n\n    // Form the activity path from target to common ancestor\n    const activityPath: Activity[] = [];\n    activity = targetActivity;\n    while (activity && activity !== commonAncestor) {\n      activityPath.unshift(activity);\n      activity = activity.parent;\n    }\n\n    // Evaluate each activity in the path\n    for (const pathActivity of activityPath) {\n      if (!this.checkActivityProcess(pathActivity)) {\n        // Sequencing ends with no delivery\n        return result;\n      }\n    }\n\n    // If target is not a leaf, flow forward to find a leaf\n    if (targetActivity.children.length > 0) {\n      this.ensureSelectionAndRandomization(targetActivity);\n      const availableChildren = targetActivity.getAvailableChildren();\n      \n      const flowResult = this.flowActivityTraversalSubprocess(\n        targetActivity,\n        true, // direction forward\n        true, // consider children\n        FlowSubprocessMode.FORWARD,\n      );\n\n      if (!flowResult) {\n        result.exception = \"SB.2.9-7\"; // No activity available from target\n        return result;\n      }\n\n      targetActivity = flowResult;\n    }\n\n    // Deliver the identified activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = targetActivity;\n    return result;\n  }\n\n  /**\n   * Jump Sequencing Request Process (SB.2.13)\n   * Processes jump navigation request - SCORM 2004 4th Edition\n   * @param {string} targetActivityId - The target activity ID\n   * @return {SequencingResult}\n   */\n  private jumpSequencingRequestProcess(targetActivityId: string): SequencingResult {\n    const result = new SequencingResult();\n\n    // Find the target activity\n    const targetActivity = this.activityTree.getActivity(targetActivityId);\n    if (!targetActivity) {\n      result.exception = \"SB.2.13-1\"; // Target activity does not exist\n      return result;\n    }\n\n    // Check if target is in the activity tree\n    if (!this.isActivityInTree(targetActivity)) {\n      result.exception = \"SB.2.13-2\"; // Target activity not in tree\n      return result;\n    }\n\n    // Check if target is available\n    if (!targetActivity.isAvailable) {\n      result.exception = \"SB.2.13-3\"; // Target not available\n      return result;\n    }\n\n    // Deliver the target activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = targetActivity;\n    return result;\n  }\n\n  /**\n   * Exit Sequencing Request Process\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private exitSequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Check if exit is allowed\n    if (!currentActivity.parent) {\n      result.exception = \"SB.2.11-1\"; // Exit not allowed - no parent\n      return result;\n    }\n    \n    // Check parent's sequencing controls\n    if (!currentActivity.parent.sequencingControls.choiceExit) {\n      result.exception = \"SB.2.11-2\"; // Exit not allowed by sequencing controls\n      return result;\n    }\n\n    // Terminate current activity\n    this.terminateDescendentAttemptsProcess(currentActivity);\n\n    return result;\n  }\n\n  /**\n   * Exit All Sequencing Request Process\n   * @return {SequencingResult}\n   */\n  private exitAllSequencingRequestProcess(): SequencingResult {\n    const result = new SequencingResult();\n\n    // Terminate all activities\n    if (this.activityTree.root) {\n      this.terminateDescendentAttemptsProcess(this.activityTree.root);\n    }\n\n    return result;\n  }\n\n  /**\n   * Abandon Sequencing Request Process\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private abandonSequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Set current activity as abandoned\n    currentActivity.isActive = false;\n    this.activityTree.currentActivity = currentActivity.parent;\n\n    return result;\n  }\n\n  /**\n   * Abandon All Sequencing Request Process\n   * @return {SequencingResult}\n   */\n  private abandonAllSequencingRequestProcess(): SequencingResult {\n    const result = new SequencingResult();\n\n    // Abandon all activities\n    this.activityTree.currentActivity = null;\n\n    return result;\n  }\n\n  /**\n   * Suspend All Sequencing Request Process\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private suspendAllSequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Check if suspend is allowed\n    if (currentActivity !== this.activityTree.root) {\n      currentActivity.isSuspended = true;\n      this.activityTree.suspendedActivity = currentActivity;\n      this.activityTree.currentActivity = null;\n    } else {\n      result.exception = \"SB.2.15-1\"; // Cannot suspend root\n    }\n\n    return result;\n  }\n\n  /**\n   * Retry Sequencing Request Process\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private retrySequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Terminate current activity\n    this.terminateDescendentAttemptsProcess(currentActivity);\n\n    // Increment attempt count\n    currentActivity.incrementAttemptCount();\n\n    // Deliver the activity again\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = currentActivity;\n    return result;\n  }\n\n  /**\n   * Retry All Sequencing Request Process\n   * @return {SequencingResult}\n   */\n  private retryAllSequencingRequestProcess(): SequencingResult {\n    // Clear current activity to allow restart\n    this.activityTree.currentActivity = null;\n    \n    // Restart from the root\n    return this.startSequencingRequestProcess();\n  }\n\n  /**\n   * Ensure selection and randomization is applied to an activity\n   * @param {Activity} activity - The activity to process\n   */\n  private ensureSelectionAndRandomization(activity: Activity): void {\n    // Check if processing is needed\n    if (activity.getAvailableChildren() === activity.children && \n        (SelectionRandomization.isSelectionNeeded(activity) || \n         SelectionRandomization.isRandomizationNeeded(activity))) {\n      SelectionRandomization.applySelectionAndRandomization(activity, activity.isNewAttempt);\n    }\n  }\n\n  /**\n   * Flow Activity Traversal Subprocess (SB.2.2)\n   * Checks if an activity can be delivered and flows into clusters if needed\n   */\n  private flowActivityTraversalSubprocess(\n    activity: Activity,\n    _direction: boolean,\n    considerChildren: boolean,\n    mode: FlowSubprocessMode,\n  ): Activity | null {\n    // Check if the activity is available\n    if (!activity.isAvailable) {\n      return null;\n    }\n\n    // Check sequencing control modes\n    const parent = activity.parent;\n    if (parent && !parent.sequencingControls.flow) {\n      return null;\n    }\n\n    // Activity is a cluster, try to flow into it to find a deliverable leaf\n    if (considerChildren) {\n      this.ensureSelectionAndRandomization(activity);\n      const availableChildren = activity.getAvailableChildren();\n      \n      for (const child of availableChildren) {\n        const deliverable = this.flowActivityTraversalSubprocess(\n          child,\n          mode === FlowSubprocessMode.FORWARD,\n          true,\n          mode\n        );\n        if (deliverable) {\n          return deliverable;\n        }\n      }\n    }\n\n    // If activity is a leaf (no children), check if it can be delivered\n    if (activity.children.length === 0) {\n      // Check if this activity was intended to be a cluster but is empty\n      // A cluster typically has flow control enabled\n      if (activity.sequencingControls.flow) {\n        // This appears to be an empty cluster, not a true leaf\n        return null;\n      }\n      \n      if (this.checkActivityProcess(activity)) {\n        return activity;\n      }\n      return null;\n    }\n\n    return null;\n  }\n\n  /**\n   * Check Activity Process (SB.2.3)\n   * Validates if an activity can be delivered\n   */\n  private checkActivityProcess(activity: Activity): boolean {\n    // Check if activity is available\n    if (!activity.isAvailable) {\n      return false;\n    }\n\n    // Check limit conditions (UP.1)\n    if (this.limitConditionsCheckProcess(activity)) {\n      return false; // Activity violates limit conditions\n    }\n\n    // Check pre-condition rules using UP.2\n    const preConditionResult = this.sequencingRulesCheckProcess(\n      activity, \n      activity.sequencingRules.preConditionRules\n    );\n    \n    return preConditionResult !== RuleActionType.SKIP && \n           preConditionResult !== RuleActionType.DISABLED;\n  }\n\n  /**\n   * Terminate Descendent Attempts Process (SB.2.4)\n   * Ends attempts on an activity and its descendants\n   */\n  private terminateDescendentAttemptsProcess(activity: Activity, skipExitRules: boolean = false): void {\n    // Apply Exit Action Rules (TB.2.1) first to check for exit actions\n    let exitAction = null;\n    if (!skipExitRules) {\n      exitAction = this.exitActionRulesSubprocess(activity);\n    }\n\n    // End attempt on the activity\n    activity.isActive = false;\n\n    // Recursively terminate descendants\n    // Use all children here, not just available ones, since we need to terminate all\n    for (const child of activity.children) {\n      this.terminateDescendentAttemptsProcess(child, skipExitRules);\n    }\n\n    // Process deferred exit actions after termination to avoid recursion\n    if (exitAction && !skipExitRules) {\n      this.processDeferredExitAction(exitAction, activity);\n    }\n  }\n\n  /**\n   * Exit Action Rules Subprocess (TB.2.1)\n   * Evaluates the exit condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate exit rules for\n   * @return {RuleActionType | null} - The exit action to process, if any\n   * @private\n   */\n  private exitActionRulesSubprocess(activity: Activity): RuleActionType | null {\n    // Evaluate exit condition rules using UP.2\n    const exitAction = this.sequencingRulesCheckProcess(\n      activity,\n      activity.sequencingRules.exitConditionRules\n    );\n\n    // Only certain actions are valid for exit condition rules\n    if (exitAction === RuleActionType.EXIT || \n        exitAction === RuleActionType.EXIT_PARENT || \n        exitAction === RuleActionType.EXIT_ALL) {\n      return exitAction;\n    }\n\n    return null;\n  }\n\n  /**\n   * Process deferred exit action after termination\n   * @param {RuleActionType} exitAction - The exit action to process\n   * @param {Activity} activity - The activity that triggered the exit action\n   * @private\n   */\n  private processDeferredExitAction(exitAction: RuleActionType, activity: Activity): void {\n    switch (exitAction) {\n      case RuleActionType.EXIT:\n        // Exit terminates the current attempt on the activity\n        // Already handled by terminateDescendentAttemptsProcess\n        break;\n      \n      case RuleActionType.EXIT_PARENT:\n        // Exit parent terminates the current attempt on the parent activity\n        if (activity.parent && activity.parent.isActive) {\n          this.terminateDescendentAttemptsProcess(activity.parent, true);\n        }\n        break;\n      \n      case RuleActionType.EXIT_ALL:\n        // Exit all terminates all activities\n        if (this.activityTree.root && this.activityTree.root !== activity) {\n          // Only process if we haven't already terminated the root\n          const allActivities = this.activityTree.getAllActivities();\n          const anyActive = allActivities.some(a => a.isActive);\n          if (anyActive) {\n            this.terminateDescendentAttemptsProcess(this.activityTree.root, true);\n          }\n        }\n        break;\n    }\n  }\n\n  /**\n   * Post Condition Rules Subprocess (TB.2.2)\n   * Evaluates the post-condition rules for an activity after delivery\n   * @param {Activity} activity - The activity to evaluate post-condition rules for\n   * @return {RuleActionType | null} - The action to take, if any\n   * @private\n   */\n  private postConditionRulesSubprocess(activity: Activity): RuleActionType | null {\n    // Evaluate post-condition rules using UP.2\n    const postAction = this.sequencingRulesCheckProcess(\n      activity,\n      activity.sequencingRules.postConditionRules\n    );\n\n    // Only certain actions are valid for post-condition rules\n    const validActions = [\n      RuleActionType.EXIT_PARENT,\n      RuleActionType.EXIT_ALL,\n      RuleActionType.RETRY,\n      RuleActionType.RETRY_ALL,\n      RuleActionType.CONTINUE,\n      RuleActionType.PREVIOUS\n    ];\n\n    if (postAction && validActions.includes(postAction)) {\n      return postAction;\n    }\n\n    return null;\n  }\n\n  /**\n   * Limit Conditions Check Process (UP.1)\n   * Checks if an activity has exceeded its limit conditions (attempt limit or duration limits)\n   * @param {Activity} activity - The activity to check\n   * @return {boolean} - True if limit conditions are violated, false otherwise\n   * @private\n   */\n  private limitConditionsCheckProcess(activity: Activity): boolean {\n    // Check attempt limit\n    if (activity.attemptLimit !== null && activity.attemptCount >= activity.attemptLimit) {\n      return true; // Attempt limit exceeded\n    }\n\n    // Check attempt absolute duration limit\n    if (activity.attemptAbsoluteDurationLimit !== null) {\n      const attemptDurationMs = this.parseISO8601Duration(activity.attemptExperiencedDuration);\n      const attemptLimitMs = this.parseISO8601Duration(activity.attemptAbsoluteDurationLimit);\n      \n      if (attemptDurationMs >= attemptLimitMs) {\n        return true; // Attempt duration limit exceeded\n      }\n    }\n\n    // Check activity absolute duration limit\n    if (activity.activityAbsoluteDurationLimit !== null) {\n      const activityDurationMs = this.parseISO8601Duration(activity.activityExperiencedDuration);\n      const activityLimitMs = this.parseISO8601Duration(activity.activityAbsoluteDurationLimit);\n      \n      if (activityDurationMs >= activityLimitMs) {\n        return true; // Activity duration limit exceeded\n      }\n    }\n\n    return false; // No limit conditions violated\n  }\n\n  /**\n   * Parse ISO 8601 duration to milliseconds\n   * @param {string} duration - ISO 8601 duration string\n   * @return {number} - Duration in milliseconds\n   * @private\n   */\n  private parseISO8601Duration(duration: string): number {\n    const regex = /PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?/;\n    const matches = duration.match(regex);\n\n    if (!matches) {\n      return 0;\n    }\n\n    const hours = parseInt(matches[1] || \"0\", 10);\n    const minutes = parseInt(matches[2] || \"0\", 10);\n    const seconds = parseFloat(matches[3] || \"0\");\n\n    return (hours * 3600 + minutes * 60 + seconds) * 1000;\n  }\n\n  /**\n   * Sequencing Rules Check Process (UP.2)\n   * General process for evaluating a set of sequencing rules\n   * @param {Activity} activity - The activity to evaluate rules for\n   * @param {SequencingRule[]} rules - The rules to evaluate\n   * @return {RuleActionType | null} - The action to take, or null if no rules apply\n   * @private\n   */\n  private sequencingRulesCheckProcess(activity: Activity, rules: SequencingRule[]): RuleActionType | null {\n    // Evaluate each rule in order\n    for (const rule of rules) {\n      // Use the Sequencing Rules Check Subprocess (UP.2.1) to evaluate\n      if (this.sequencingRulesCheckSubprocess(activity, rule)) {\n        // Rule condition(s) met, return the action\n        return rule.action;\n      }\n    }\n    \n    // No rules applied\n    return null;\n  }\n\n  /**\n   * Sequencing Rules Check Subprocess (UP.2.1)\n   * Evaluates individual sequencing rule conditions\n   * @param {Activity} activity - The activity to evaluate the rule for\n   * @param {SequencingRule} rule - The rule to evaluate\n   * @return {boolean} - True if all rule conditions are met\n   * @private\n   */\n  private sequencingRulesCheckSubprocess(activity: Activity, rule: SequencingRule): boolean {\n    // If no conditions, the rule always applies\n    if (rule.conditions.length === 0) {\n      return true;\n    }\n\n    // Evaluate based on condition combination\n    const conditionCombination = rule.conditionCombination;\n    \n    if (conditionCombination === \"all\" || conditionCombination === RuleConditionOperator.AND) {\n      // All conditions must be true\n      return rule.conditions.every((condition) => {\n        const result = condition.evaluate(activity);\n        // Log evaluation for debugging\n        if (!result) {\n          // Condition failed, rule doesn't apply\n          return false;\n        }\n        return true;\n      });\n    } else if (conditionCombination === \"any\" || conditionCombination === RuleConditionOperator.OR) {\n      // At least one condition must be true\n      return rule.conditions.some((condition) => {\n        const result = condition.evaluate(activity);\n        // Log evaluation for debugging\n        if (result) {\n          // Condition passed, rule applies\n          return true;\n        }\n        return false;\n      });\n    }\n\n    // Unknown combination, default to false\n    return false;\n  }\n\n  /**\n   * Check if activity is in the activity tree\n   */\n  private isActivityInTree(activity: Activity): boolean {\n    return this.activityTree.getAllActivities().includes(activity);\n  }\n\n  /**\n   * Find common ancestor of two activities\n   */\n  private findCommonAncestor(activity1: Activity | null, activity2: Activity | null): Activity | null {\n    if (!activity1 || !activity2) {\n      return null;\n    }\n\n    // Get ancestors of activity1\n    const ancestors1: Activity[] = [];\n    let current: Activity | null = activity1;\n    while (current) {\n      ancestors1.push(current);\n      current = current.parent;\n    }\n\n    // Find first common ancestor\n    current = activity2;\n    while (current) {\n      if (ancestors1.includes(current)) {\n        return current;\n      }\n      current = current.parent;\n    }\n\n    return null;\n  }\n\n  /**\n   * Flow Subprocess (SB.2.3)\n   * Traverses the activity tree in the specified direction to find a deliverable activity\n   * @param {Activity} fromActivity - The activity to flow from\n   * @param {FlowSubprocessMode} direction - The flow direction\n   * @return {Activity | null} - The next deliverable activity, or null if none found\n   */\n  private flowSubprocess(fromActivity: Activity, direction: FlowSubprocessMode): Activity | null {\n    let candidateActivity: Activity | null = fromActivity;\n    let firstIteration = true;\n\n    // Keep traversing until we find a deliverable activity or run out of candidates\n    while (candidateActivity) {\n      // Get next candidate using flow tree traversal\n      // On first iteration, we want to skip the current activity's children\n      const nextCandidate = this.flowTreeTraversalSubprocess(\n        candidateActivity,\n        direction,\n        firstIteration\n      );\n\n      if (!nextCandidate) {\n        // No more candidates\n        return null;\n      }\n\n      // Check if this candidate can be delivered\n      const deliverable = this.flowActivityTraversalSubprocess(\n        nextCandidate,\n        direction === FlowSubprocessMode.FORWARD,\n        true, // consider children\n        direction\n      );\n\n      if (deliverable) {\n        return deliverable;\n      }\n\n      // Continue with next candidate\n      candidateActivity = nextCandidate;\n      firstIteration = false;\n    }\n\n    return null;\n  }\n\n\n  /**\n   * Flow Tree Traversal Subprocess (SB.2.1)\n   * Traverses the activity tree to find the next activity in the specified direction\n   * @param {Activity} fromActivity - The activity to traverse from\n   * @param {FlowSubprocessMode} direction - The traversal direction\n   * @param {boolean} skipChildren - Whether to skip checking children (for continuing from current)\n   * @return {Activity | null} - The next activity in the tree, or null if none\n   */\n  private flowTreeTraversalSubprocess(\n    fromActivity: Activity,\n    direction: FlowSubprocessMode,\n    skipChildren: boolean = false\n  ): Activity | null {\n    if (direction === FlowSubprocessMode.FORWARD) {\n      // First, check if activity has children (unless we're skipping them)\n      if (!skipChildren) {\n        this.ensureSelectionAndRandomization(fromActivity);\n        const children = fromActivity.getAvailableChildren();\n        if (children.length > 0) {\n          return children[0] || null;\n        }\n      }\n\n      // No children, try to get next sibling\n      let current: Activity | null = fromActivity;\n      while (current) {\n        const nextSibling = this.activityTree.getNextSibling(current);\n        if (nextSibling) {\n          return nextSibling;\n        }\n        // No next sibling, move up to parent\n        current = current.parent;\n      }\n    } else {\n      // Backward direction\n      // Try to get previous sibling\n      const previousSibling = this.activityTree.getPreviousSibling(fromActivity);\n      if (previousSibling) {\n        // If previous sibling has children, go to the last descendant\n        let lastDescendant = previousSibling;\n        while (true) {\n          this.ensureSelectionAndRandomization(lastDescendant);\n          const children = lastDescendant.getAvailableChildren();\n          if (children.length === 0) {\n            break;\n          }\n          const lastChild = children[children.length - 1];\n          if (!lastChild) break;\n          lastDescendant = lastChild;\n        }\n        return lastDescendant;\n      }\n\n      // No previous sibling at this level, try going up to parent and then its previous sibling\n      let current: Activity | null = fromActivity;\n      while (current && current.parent) {\n        const parentPreviousSibling = this.activityTree.getPreviousSibling(current.parent);\n        if (parentPreviousSibling) {\n          // Found a previous sibling of an ancestor, go to its last descendant\n          let lastDescendant = parentPreviousSibling;\n          while (true) {\n            this.ensureSelectionAndRandomization(lastDescendant);\n            const children = lastDescendant.getAvailableChildren();\n            if (children.length === 0) {\n              break;\n            }\n            const lastChild = children[children.length - 1];\n            if (!lastChild) break;\n            lastDescendant = lastChild;\n          }\n          return lastDescendant;\n        }\n        // Move up to grandparent\n        current = current.parent;\n      }\n\n      return null; // Reached beginning of tree\n    }\n\n    return null;\n  }\n\n  /**\n   * Choice Flow Subprocess (SB.2.9.1)\n   * Handles the flow logic specific to choice navigation requests\n   * @param {Activity} targetActivity - The target activity for the choice\n   * @param {Activity | null} commonAncestor - The common ancestor between current and target\n   * @return {Activity | null} - The activity to deliver, or null if flow fails\n   */\n  private choiceFlowSubprocess(\n    targetActivity: Activity,\n    commonAncestor: Activity | null\n  ): Activity | null {\n    // If target is a leaf, it's the delivery candidate\n    if (targetActivity.children.length === 0) {\n      return targetActivity;\n    }\n\n    // If target is a cluster, use choice flow tree traversal\n    return this.choiceFlowTreeTraversalSubprocess(targetActivity);\n  }\n\n  /**\n   * Choice Flow Tree Traversal Subprocess (SB.2.9.2)\n   * Traverses into a cluster activity to find a leaf for delivery\n   * @param {Activity} fromActivity - The cluster activity to traverse from\n   * @return {Activity | null} - A leaf activity for delivery, or null if none found\n   */\n  private choiceFlowTreeTraversalSubprocess(fromActivity: Activity): Activity | null {\n    // Apply selection and randomization\n    this.ensureSelectionAndRandomization(fromActivity);\n    const children = fromActivity.getAvailableChildren();\n\n    // Find the first available child that can be delivered\n    for (const child of children) {\n      // Check if child can be delivered or traverse into it\n      const deliverable = this.choiceActivityTraversalSubprocess(child);\n      if (deliverable) {\n        return deliverable;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Choice Activity Traversal Subprocess (SB.2.4)\n   * Checks constraints and traverses into activities for choice navigation\n   * @param {Activity} activity - The activity to check and possibly traverse\n   * @return {Activity | null} - A deliverable activity, or null if none found\n   */\n  private choiceActivityTraversalSubprocess(activity: Activity): Activity | null {\n    // Check if activity is available\n    if (!activity.isAvailable) {\n      return null;\n    }\n\n    // Check if activity is hidden from choice\n    if (activity.isHiddenFromChoice) {\n      return null;\n    }\n\n    // Check constrain choice control\n    if (activity.parent && activity.parent.sequencingControls.constrainChoice) {\n      // Additional constraint checks can be added here\n      // For now, we'll allow the choice if not hidden\n    }\n\n    // If it's a leaf, check if it can be delivered\n    if (activity.children.length === 0) {\n      if (this.checkActivityProcess(activity)) {\n        return activity;\n      }\n      return null;\n    }\n\n    // If it's a cluster, traverse into it\n    return this.choiceFlowTreeTraversalSubprocess(activity);\n  }\n\n  /**\n   * Evaluate post-condition rules for the current activity\n   * This should be called after an activity has been delivered and the learner has interacted with it\n   * @param {Activity} activity - The activity to evaluate\n   * @return {SequencingRequestType | null} - The sequencing request to process, if any\n   */\n  public evaluatePostConditionRules(activity: Activity): SequencingRequestType | null {\n    const postAction = this.postConditionRulesSubprocess(activity);\n    \n    if (!postAction) {\n      return null;\n    }\n\n    // Map post-condition actions to sequencing requests\n    switch (postAction) {\n      case RuleActionType.EXIT_PARENT:\n        // Exit parent will be handled by exit action rules\n        return SequencingRequestType.EXIT;\n        \n      case RuleActionType.EXIT_ALL:\n        return SequencingRequestType.EXIT_ALL;\n        \n      case RuleActionType.RETRY:\n        return SequencingRequestType.RETRY;\n        \n      case RuleActionType.RETRY_ALL:\n        return SequencingRequestType.RETRY_ALL;\n        \n      case RuleActionType.CONTINUE:\n        return SequencingRequestType.CONTINUE;\n        \n      case RuleActionType.PREVIOUS:\n        return SequencingRequestType.PREVIOUS;\n        \n      default:\n        return null;\n    }\n  }\n}\n\n/**\n * Enum for flow subprocess modes\n */\nenum FlowSubprocessMode {\n  FORWARD = \"forward\",\n  BACKWARD = \"backward\",\n}","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { ActivityTree } from \"./activity_tree\";\nimport { SequencingRules } from \"./sequencing_rules\";\nimport { SequencingControls } from \"./sequencing_controls\";\nimport { RollupRules } from \"./rollup_rules\";\nimport { ADLNav } from \"../adl\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport {\n  SequencingProcess,\n  SequencingRequestType,\n  SequencingResult,\n  DeliveryRequestType,\n} from \"./sequencing_process\";\n\n/**\n * Class representing SCORM 2004 sequencing\n */\nexport class Sequencing extends BaseCMI {\n  private _activityTree: ActivityTree;\n  private _sequencingRules: SequencingRules;\n  private _sequencingControls: SequencingControls;\n  private _rollupRules: RollupRules;\n  private _adlNav: ADLNav | null = null;\n  private _sequencingProcess: SequencingProcess | null = null;\n  private _lastSequencingResult: SequencingResult | null = null;\n\n  /**\n   * Constructor for Sequencing\n   */\n  constructor() {\n    super(\"sequencing\");\n    this._activityTree = new ActivityTree();\n    this._sequencingRules = new SequencingRules();\n    this._sequencingControls = new SequencingControls();\n    this._rollupRules = new RollupRules();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this._activityTree.initialize();\n    this._sequencingRules.initialize();\n    this._sequencingControls.initialize();\n    this._rollupRules.initialize();\n    \n    // Initialize sequencing process if ADL Nav is available\n    if (this._adlNav) {\n      this._sequencingProcess = new SequencingProcess(\n        this._activityTree,\n        this._sequencingRules,\n        this._sequencingControls,\n        this._adlNav,\n      );\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._activityTree.reset();\n    this._sequencingRules.reset();\n    this._sequencingControls.reset();\n    this._rollupRules.reset();\n  }\n\n  /**\n   * Getter for activityTree\n   * @return {ActivityTree}\n   */\n  get activityTree(): ActivityTree {\n    return this._activityTree;\n  }\n\n  /**\n   * Setter for activityTree\n   * @param {ActivityTree} activityTree\n   */\n  set activityTree(activityTree: ActivityTree) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(activityTree instanceof ActivityTree)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".activityTree\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._activityTree = activityTree;\n  }\n\n  /**\n   * Getter for sequencingRules\n   * @return {SequencingRules}\n   */\n  get sequencingRules(): SequencingRules {\n    return this._sequencingRules;\n  }\n\n  /**\n   * Setter for sequencingRules\n   * @param {SequencingRules} sequencingRules\n   */\n  set sequencingRules(sequencingRules: SequencingRules) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(sequencingRules instanceof SequencingRules)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".sequencingRules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._sequencingRules = sequencingRules;\n  }\n\n  /**\n   * Getter for sequencingControls\n   * @return {SequencingControls}\n   */\n  get sequencingControls(): SequencingControls {\n    return this._sequencingControls;\n  }\n\n  /**\n   * Setter for sequencingControls\n   * @param {SequencingControls} sequencingControls\n   */\n  set sequencingControls(sequencingControls: SequencingControls) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(sequencingControls instanceof SequencingControls)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".sequencingControls\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._sequencingControls = sequencingControls;\n  }\n\n  /**\n   * Getter for rollupRules\n   * @return {RollupRules}\n   */\n  get rollupRules(): RollupRules {\n    return this._rollupRules;\n  }\n\n  /**\n   * Setter for rollupRules\n   * @param {RollupRules} rollupRules\n   */\n  set rollupRules(rollupRules: RollupRules) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rollupRules instanceof RollupRules)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".rollupRules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._rollupRules = rollupRules;\n  }\n\n  /**\n   * Getter for adlNav\n   * @return {ADLNav | null}\n   */\n  get adlNav(): ADLNav | null {\n    return this._adlNav;\n  }\n\n  /**\n   * Setter for adlNav\n   * @param {ADLNav | null} adlNav\n   */\n  set adlNav(adlNav: ADLNav | null) {\n    this._adlNav = adlNav;\n    \n    // Update sequencing process with new ADL Nav\n    if (adlNav) {\n      this._sequencingProcess = new SequencingProcess(\n        this._activityTree,\n        this._sequencingRules,\n        this._sequencingControls,\n        adlNav,\n      );\n    }\n  }\n\n  /**\n   * Get the last sequencing result\n   * @return {SequencingResult | null}\n   */\n  get lastSequencingResult(): SequencingResult | null {\n    return this._lastSequencingResult;\n  }\n\n  /**\n   * Process navigation request using the new sequencing process\n   * @param {string} request - The navigation request\n   * @param {string | null} targetActivityId - Target activity ID for choice/jump requests\n   * @return {boolean} - True if the request is valid and results in delivery, false otherwise\n   */\n  processNavigationRequest(request: string, targetActivityId: string | null = null): boolean {\n    if (!this._sequencingProcess || !this._adlNav) {\n      return false;\n    }\n\n    // Parse choice and jump requests to extract target\n    if (request.includes(\"choice\") && request.includes(\"{target=\")) {\n      const match = request.match(/\\{target=([^}]+)\\}/);\n      if (match) {\n        targetActivityId = match[1] || null;\n        request = \"choice\";\n      }\n    } else if (request.includes(\"jump\") && request.includes(\"{target=\")) {\n      const match = request.match(/\\{target=([^}]+)\\}/);\n      if (match) {\n        targetActivityId = match[1] || null;\n        request = \"jump\";\n      }\n    }\n\n    // Map string request to SequencingRequestType\n    let requestType: SequencingRequestType;\n    switch (request) {\n      case \"start\":\n        requestType = SequencingRequestType.START;\n        break;\n      case \"resumeAll\":\n        requestType = SequencingRequestType.RESUME_ALL;\n        break;\n      case \"continue\":\n        requestType = SequencingRequestType.CONTINUE;\n        break;\n      case \"previous\":\n        requestType = SequencingRequestType.PREVIOUS;\n        break;\n      case \"choice\":\n        requestType = SequencingRequestType.CHOICE;\n        break;\n      case \"jump\":\n        requestType = SequencingRequestType.JUMP;\n        break;\n      case \"exit\":\n        requestType = SequencingRequestType.EXIT;\n        break;\n      case \"exitAll\":\n        requestType = SequencingRequestType.EXIT_ALL;\n        break;\n      case \"abandon\":\n        requestType = SequencingRequestType.ABANDON;\n        break;\n      case \"abandonAll\":\n        requestType = SequencingRequestType.ABANDON_ALL;\n        break;\n      case \"suspendAll\":\n        requestType = SequencingRequestType.SUSPEND_ALL;\n        break;\n      case \"retry\":\n        requestType = SequencingRequestType.RETRY;\n        break;\n      case \"retryAll\":\n        requestType = SequencingRequestType.RETRY_ALL;\n        break;\n      default:\n        return false;\n    }\n\n    // Process the sequencing request\n    const result = this._sequencingProcess.sequencingRequestProcess(requestType, targetActivityId);\n    this._lastSequencingResult = result;\n\n    // Update navigation request validity\n    if (result.exception) {\n      // Don't modify _choice and _jump as they are target-specific objects\n      // Note: These setters may throw if already initialized, but that's expected behavior\n      try {\n        this._adlNav.request_valid.continue = \"false\";\n        this._adlNav.request_valid.previous = \"false\";\n      } catch (e) {\n        // Expected when already initialized - navigation validity is read-only after init\n      }\n      return false;\n    }\n\n    // Update navigation request validity based on current state\n    this.updateNavigationRequestValidity();\n\n    // Return true if delivery is requested\n    return result.deliveryRequest === DeliveryRequestType.DELIVER;\n  }\n\n  /**\n   * Update navigation request validity based on current state\n   */\n  private updateNavigationRequestValidity(): void {\n    if (!this._adlNav || !this._sequencingProcess) {\n      return;\n    }\n\n    // Check continue validity\n    const continueResult = this._sequencingProcess.sequencingRequestProcess(\n      SequencingRequestType.CONTINUE,\n    );\n    try {\n      this._adlNav.request_valid.continue = !continueResult.exception ? \"true\" : \"false\";\n    } catch (e) {\n      // Expected when already initialized - navigation validity is read-only after init\n    }\n\n    // Check previous validity\n    const previousResult = this._sequencingProcess.sequencingRequestProcess(\n      SequencingRequestType.PREVIOUS,\n    );\n    try {\n      this._adlNav.request_valid.previous = !previousResult.exception ? \"true\" : \"false\";\n    } catch (e) {\n      // Expected when already initialized - navigation validity is read-only after init\n    }\n\n    // Choice and jump are target-specific and handled separately\n    // They are objects that map target IDs to NAVBoolean values\n  }\n\n\n  /**\n   * Process rollup for the entire activity tree\n   */\n  processRollup(): void {\n    // Get the root activity\n    const root = this._activityTree.root;\n    if (!root) {\n      return;\n    }\n\n    // Process rollup from the bottom up\n    this._processRollupRecursive(root);\n  }\n\n\n  /**\n   * Process rollup recursively\n   * @param {Activity} activity - The activity to process rollup for\n   * @private\n   */\n  private _processRollupRecursive(activity: Activity): void {\n    // Process rollup for children first\n    for (const child of activity.children) {\n      this._processRollupRecursive(child);\n    }\n\n    // Process rollup for this activity\n    this._rollupRules.processRollup(activity);\n  }\n\n  /**\n   * Get the last sequencing result\n   * @return {SequencingResult | null}\n   */\n  getLastSequencingResult(): SequencingResult | null {\n    return this._lastSequencingResult;\n  }\n\n  /**\n   * Get the current activity\n   * @return {Activity | null}\n   */\n  getCurrentActivity(): Activity | null {\n    return this._activityTree.currentActivity;\n  }\n\n  /**\n   * Get the root activity\n   * @return {Activity | null}\n   */\n  getRootActivity(): Activity | null {\n    return this._activityTree.root;\n  }\n\n  /**\n   * toJSON for Sequencing\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      activityTree: this._activityTree,\n      sequencingRules: this._sequencingRules,\n      sequencingControls: this._sequencingControls,\n      rollupRules: this._rollupRules,\n      adlNav: this._adlNav,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import BaseAPI from \"./BaseAPI\";\nimport { CMI } from \"./cmi/scorm2004/cmi\";\nimport * as Utilities from \"./utilities\";\nimport { StringKeyMap, stringMatches } from \"./utilities\";\nimport { global_constants, scorm2004_constants } from \"./constants/api_constants\";\nimport { scorm2004_errors } from \"./constants/error_codes\";\nimport { CMIObjectivesObject } from \"./cmi/scorm2004/objectives\";\nimport { ADL, ADLDataObject } from \"./cmi/scorm2004/adl\";\nimport { CommitObject, ResultObject, ScoreObject, Settings } from \"./types/api_types\";\nimport {\n  ActivitySettings,\n  RollupRuleSettings,\n  RollupRulesSettings,\n  SequencingControlsSettings,\n  SequencingRuleSettings,\n  SequencingRulesSettings,\n  SequencingSettings,\n} from \"./types/sequencing_types\";\nimport { RuleCondition, SequencingRule } from \"./cmi/scorm2004/sequencing/sequencing_rules\";\nimport { RollupCondition, RollupRule } from \"./cmi/scorm2004/sequencing/rollup_rules\";\nimport { scorm2004_regex } from \"./constants/regex\"; // Import functions from extracted modules\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport {\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n} from \"./cmi/scorm2004/interactions\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { CorrectResponses, ResponseType } from \"./constants/response_constants\";\nimport { CMICommentsObject } from \"./cmi/scorm2004/comments\";\nimport ValidLanguages from \"./constants/language_constants\";\nimport { CompletionStatus, SuccessStatus } from \"./constants/enums\";\nimport { Sequencing } from \"./cmi/scorm2004/sequencing/sequencing\";\nimport { Activity } from \"./cmi/scorm2004/sequencing/activity\";\n\n/**\n * API class for SCORM 2004\n */\nclass Scorm2004API extends BaseAPI {\n  private _version: string = \"1.0\";\n  private _globalObjectives: CMIObjectivesObject[] = [];\n  private readonly _sequencing: Sequencing;\n  private _extractedScoItemIds: string[] = [];\n\n  /**\n   * Constructor for SCORM 2004 API\n   * @param {Settings} settings\n   */\n  constructor(settings?: Settings) {\n    if (settings) {\n      if (settings.mastery_override === undefined) {\n        settings.mastery_override = false;\n      }\n    }\n\n    super(scorm2004_errors, settings);\n\n    this.cmi = new CMI();\n    this.adl = new ADL();\n    this._sequencing = new Sequencing();\n\n    // Connect the sequencing object to the ADL's sequencing property\n    // The Sequencing object is used for both configuration and runtime navigation processing\n    // It needs to be attached to the ADL object for runtime navigation requests (adl.nav.request)\n    this.adl.sequencing = this._sequencing;\n\n    // Configure sequencing if settings are provided\n    if (settings?.sequencing) {\n      this.configureSequencing(settings.sequencing);\n    }\n\n    // Rename functions to match 2004 Spec and expose to modules\n    this.Initialize = this.lmsInitialize;\n    this.Terminate = this.lmsFinish;\n    this.GetValue = this.lmsGetValue;\n    this.SetValue = this.lmsSetValue;\n    this.Commit = this.lmsCommit;\n    this.GetLastError = this.lmsGetLastError;\n    this.GetErrorString = this.lmsGetErrorString;\n    this.GetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  public cmi: CMI;\n  public adl: ADL;\n\n  public Initialize: () => string;\n  public Terminate: () => string;\n  public GetValue: (CMIElement: string) => string;\n  public SetValue: (CMIElement: string, value: any) => string;\n  public Commit: () => string;\n  public GetLastError: () => string;\n  public GetErrorString: (CMIErrorCode: string | number) => string;\n  public GetDiagnostic: (CMIErrorCode: string | number) => string;\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset(settings?: Settings) {\n    this.commonReset(settings);\n\n    this.cmi?.reset();\n    this.adl?.reset();\n    this._sequencing?.reset();\n  }\n\n  /**\n   * Getter for _version\n   * @return {string}\n   */\n  get version(): string {\n    return this._version;\n  }\n\n  /**\n   * Getter for _globalObjectives\n   */\n  get globalObjectives(): CMIObjectivesObject[] {\n    return this._globalObjectives;\n  }\n\n  /**\n   * Initialize function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize(): string {\n    this.cmi.initialize();\n    return this.initialize(\n      \"Initialize\",\n      \"LMS was already initialized!\",\n      \"LMS is already finished!\",\n    );\n  }\n\n  /**\n   * Terminate function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish(): string {\n    (async () => {\n      await this.internalFinish();\n    })();\n    return global_constants.SCORM_TRUE;\n  }\n\n  async internalFinish(): Promise<string> {\n    const result = await this.terminate(\"Terminate\", true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      if (this.adl.nav.request !== \"_none_\") {\n        const navActions: { [key: string]: string } = {\n          continue: \"SequenceNext\",\n          previous: \"SequencePrevious\",\n          choice: \"SequenceChoice\",\n          jump: \"SequenceJump\",\n          exit: \"SequenceExit\",\n          exitAll: \"SequenceExitAll\",\n          abandon: \"SequenceAbandon\",\n          abandonAll: \"SequenceAbandonAll\",\n        };\n\n        let request = this.adl.nav.request;\n        const choiceJumpRegex = new RegExp(scorm2004_regex.NAVEvent);\n        const matches = request.match(choiceJumpRegex);\n        let target = \"\";\n        if (matches) {\n          if (matches.groups?.choice_target) {\n            target = matches.groups?.choice_target;\n            request = \"choice\";\n          } else if (matches.groups?.jump_target) {\n            target = matches.groups?.jump_target;\n            request = \"jump\";\n          }\n        }\n        const action = navActions[request];\n        if (action) {\n          this.processListeners(action, \"adl.nav.request\", target);\n        }\n      } else if (this.settings.autoProgress) {\n        this.processListeners(\"SequenceNext\", undefined, \"next\");\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * GetValue function from SCORM 2004 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement: string): string {\n    const adlNavRequestRegex =\n      \"^adl\\\\.nav\\\\.request_valid\\\\.(choice|jump)\\\\.{target=\\\\S{0,}([a-zA-Z0-9-_]+)}$\";\n    if (stringMatches(CMIElement, adlNavRequestRegex)) {\n      const matches = CMIElement.match(adlNavRequestRegex);\n      if (matches) {\n        const request = matches[1];\n        const target = matches[2]?.replace(/{target=/g, \"\").replace(/}/g, \"\") || \"\";\n        if (request === \"choice\" || request === \"jump\") {\n          if (this.settings.scoItemIdValidator) {\n            return String(this.settings.scoItemIdValidator(target));\n          }\n          // If we have extracted IDs from sequencing, use those exclusively\n          if (this._extractedScoItemIds.length > 0) {\n            return String(this._extractedScoItemIds.includes(target));\n          }\n          // Otherwise use the scoItemIds from settings\n          return String(this.settings?.scoItemIds?.includes(target));\n        }\n      }\n    }\n    return this.getValue(\"GetValue\", true, CMIElement);\n  }\n\n  /**\n   * SetValue function from SCORM 2004 Spec\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement: string, value: any): string {\n    // Proceed with regular setting for non-objective elements or fallback behavior\n    return this.setValue(\"SetValue\", \"Commit\", true, CMIElement, value);\n  }\n\n  /**\n   * Commit function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit(): string {\n    if (this.settings.asyncCommit) {\n      this.scheduleCommit(500, \"Commit\");\n    } else {\n      (async () => {\n        await this.commit(\"Commit\", false);\n      })();\n    }\n    return global_constants.SCORM_TRUE;\n  }\n\n  /**\n   * GetLastError function from SCORM 2004 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError(): string {\n    return this.getLastError(\"GetLastError\");\n  }\n\n  /**\n   * GetErrorString function from SCORM 2004 Spec\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode: string | number): string {\n    return this.getErrorString(\"GetErrorString\", CMIErrorCode);\n  }\n\n  /**\n   * GetDiagnostic function from SCORM 2004 Spec\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode: string | number): string {\n    return this.getDiagnostic(\"GetDiagnostic\", CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object - delegates to CMIValueHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  override setCMIValue(CMIElement: string, value: any): string {\n    // Check if we're updating a global or local objective\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      const parts = CMIElement.split(\".\");\n      const index = Number(parts[2]);\n      const element_base = `cmi.objectives.${index}`;\n\n      let objective_id;\n      const setting_id = stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\\\\.id\");\n\n      if (setting_id) {\n        // If we're setting the objective ID, capture it directly\n        objective_id = value;\n      } else {\n        // Find existing objective ID if available\n        const objective = this.cmi.objectives.findObjectiveByIndex(index);\n        objective_id = objective ? objective.id : undefined;\n      }\n\n      // Check if the objective ID matches a global objective\n      const is_global = objective_id && this.settings.globalObjectiveIds?.includes(objective_id);\n\n      if (is_global) {\n        // Locate or create an entry in _globalObjectives for the global objective\n        let global_index = this._globalObjectives.findIndex((obj) => obj.id === objective_id);\n\n        if (global_index === -1) {\n          global_index = this._globalObjectives.length;\n          const newGlobalObjective = new CMIObjectivesObject();\n          newGlobalObjective.id = objective_id;\n          this._globalObjectives.push(newGlobalObjective);\n        }\n\n        // Update the global objective\n        const global_element = CMIElement.replace(\n          element_base,\n          `_globalObjectives.${global_index}`,\n        );\n        this._commonSetCMIValue(\"SetGlobalObjectiveValue\", true, global_element, value);\n      }\n    }\n    return this._commonSetCMIValue(\"SetValue\", true, CMIElement, value);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array - delegates to CMIElementHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI|null}\n   */\n  getChildElement(CMIElement: string, value: any, foundFirstIndex: boolean): BaseCMI | null {\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      return new CMIObjectivesObject();\n    }\n\n    if (foundFirstIndex) {\n      if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+\")) {\n        return this.createCorrectResponsesObject(CMIElement, value);\n      } else if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+\")) {\n        return new CMIInteractionsObjectivesObject();\n      }\n    } else if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\")) {\n      return new CMIInteractionsObject();\n    }\n\n    if (stringMatches(CMIElement, \"cmi\\\\.comments_from_learner\\\\.\\\\d+\")) {\n      return new CMICommentsObject();\n    } else if (stringMatches(CMIElement, \"cmi\\\\.comments_from_lms\\\\.\\\\d+\")) {\n      return new CMICommentsObject(true);\n    }\n\n    if (stringMatches(CMIElement, \"adl\\\\.data\\\\.\\\\d+\")) {\n      return new ADLDataObject();\n    }\n\n    return null;\n  }\n\n  /**\n   * Creates a correct responses object for an interaction - delegates to CMIElementHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {BaseCMI|null}\n   */\n  private createCorrectResponsesObject(CMIElement: string, value: any): BaseCMI | null {\n    const parts = CMIElement.split(\".\");\n    const index = Number(parts[2]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    if (this.isInitialized()) {\n      if (typeof interaction === \"undefined\" || !interaction.type) {\n        this.throwSCORMError(CMIElement, scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED, CMIElement);\n        return null;\n      } else {\n        this.checkDuplicateChoiceResponse(CMIElement, interaction, value);\n        const response_type = CorrectResponses[interaction.type];\n        if (response_type) {\n          this.checkValidResponseType(CMIElement, response_type, value, interaction.type);\n        } else {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.GENERAL_SET_FAILURE,\n            `Incorrect Response Type: ${interaction.type}`,\n          );\n          return null;\n        }\n      }\n    }\n\n    if (this.lastErrorCode === \"0\") {\n      return new CMIInteractionsCorrectResponsesObject(interaction);\n    }\n\n    return null;\n  }\n\n  /**\n   * Checks for valid response types - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {ResponseType} response_type\n   * @param {any} value\n   * @param {string} interaction_type\n   */\n  checkValidResponseType(\n    CMIElement: string,\n    response_type: ResponseType,\n    value: any,\n    interaction_type: string,\n  ) {\n    let nodes = [];\n    if (response_type?.delimiter) {\n      nodes = String(value).split(response_type.delimiter);\n    } else {\n      nodes[0] = value;\n    }\n\n    if (nodes.length > 0 && nodes.length <= response_type.max) {\n      this.checkCorrectResponseValue(CMIElement, interaction_type, nodes, value);\n    } else if (nodes.length > response_type.max) {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.GENERAL_SET_FAILURE,\n        `Data Model Element Pattern Too Long: ${value}`,\n      );\n    }\n  }\n\n  /**\n   * Checks for duplicate 'choice' responses - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {CMIInteractionsObject} interaction\n   * @param {any} value\n   */\n  checkDuplicateChoiceResponse(CMIElement: string, interaction: CMIInteractionsObject, value: any) {\n    const interaction_count = interaction.correct_responses._count;\n    if (interaction.type === \"choice\") {\n      for (let i = 0; i < interaction_count && this.lastErrorCode === \"0\"; i++) {\n        const response = interaction.correct_responses.childArray[i];\n        if (response.pattern === value) {\n          this.throwSCORMError(CMIElement, scorm2004_errors.GENERAL_SET_FAILURE, `${value}`);\n        }\n      }\n    }\n  }\n\n  /**\n   * Validate correct response - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {*} value\n   */\n  validateCorrectResponse(CMIElement: string, value: any) {\n    const parts = CMIElement.split(\".\");\n    const index = Number(parts[2]);\n    const pattern_index = Number(parts[4]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    const interaction_count = interaction.correct_responses._count;\n    this.checkDuplicateChoiceResponse(CMIElement, interaction, value);\n\n    const response_type = CorrectResponses[interaction.type];\n    if (\n      response_type &&\n      (typeof response_type.limit === \"undefined\" || interaction_count <= response_type.limit)\n    ) {\n      this.checkValidResponseType(CMIElement, response_type, value, interaction.type);\n\n      if (\n        (this.lastErrorCode === \"0\" &&\n          (!response_type.duplicate ||\n            !this.checkDuplicatedPattern(interaction.correct_responses, pattern_index, value))) ||\n        (this.lastErrorCode === \"0\" && value === \"\")\n      ) {\n        // do nothing, we want the inverse\n      } else {\n        if (this.lastErrorCode === \"0\") {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.GENERAL_SET_FAILURE,\n            `Data Model Element Pattern Already Exists: ${CMIElement} - ${value}`,\n          );\n        }\n      }\n    } else {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.GENERAL_SET_FAILURE,\n        `Data Model Element Collection Limit Reached: ${CMIElement} - ${value}`,\n      );\n    }\n  }\n\n  /**\n   * Gets a value from the CMI Object - delegates to CMIValueHandlerModule\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  override getCMIValue(CMIElement: string): any {\n    return this._commonGetCMIValue(\"GetValue\", true, CMIElement);\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {(string|number)} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  override getLmsErrorMessageDetails(errorNumber: string | number, detail: boolean): string {\n    let basicMessage = \"\";\n    let detailMessage = \"\";\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    const errorDescription = scorm2004_constants.error_descriptions[errorNumber];\n    if (errorDescription) {\n      basicMessage = errorDescription.basicMessage;\n      detailMessage = errorDescription.detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Check to see if a correct_response value has been duplicated - delegates to ValidationModule\n   * @param {CMIArray} correct_response\n   * @param {number} current_index\n   * @param {*} value\n   * @return {boolean}\n   */\n  checkDuplicatedPattern(correct_response: CMIArray, current_index: number, value: any): boolean {\n    let found = false;\n    const count = correct_response._count;\n    for (let i = 0; i < count && !found; i++) {\n      if (i !== current_index && correct_response.childArray[i] === value) {\n        found = true;\n      }\n    }\n    return found;\n  }\n\n  /**\n   * Checks for a valid correct_response value - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {string} interaction_type\n   * @param {Array} nodes\n   * @param {*} value\n   */\n  checkCorrectResponseValue(\n    CMIElement: string,\n    interaction_type: string,\n    nodes: Array<any>,\n    value: any,\n  ) {\n    const response = CorrectResponses[interaction_type];\n    if (!response) {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.TYPE_MISMATCH,\n        `Incorrect Response Type: ${interaction_type}`,\n      );\n      return;\n    }\n    const formatRegex = new RegExp(response.format);\n    for (let i = 0; i < nodes.length && this.lastErrorCode === \"0\"; i++) {\n      if (interaction_type.match(\"^(fill-in|long-fill-in|matching|performance|sequencing)$\")) {\n        nodes[i] = this.removeCorrectResponsePrefixes(CMIElement, nodes[i]);\n      }\n\n      if (response?.delimiter2) {\n        const values = nodes[i].split(response.delimiter2);\n        if (values.length === 2) {\n          const matches = values[0].match(formatRegex);\n          if (!matches) {\n            this.throwSCORMError(\n              CMIElement,\n              scorm2004_errors.TYPE_MISMATCH,\n              `${interaction_type}: ${value}`,\n            );\n          } else {\n            if (!response.format2 || !values[1].match(new RegExp(response.format2))) {\n              this.throwSCORMError(\n                CMIElement,\n                scorm2004_errors.TYPE_MISMATCH,\n                `${interaction_type}: ${value}`,\n              );\n            }\n          }\n        } else {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.TYPE_MISMATCH,\n            `${interaction_type}: ${value}`,\n          );\n        }\n      } else {\n        const matches = nodes[i].match(formatRegex);\n        if ((!matches && value !== \"\") || (!matches && interaction_type === \"true-false\")) {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.TYPE_MISMATCH,\n            `${interaction_type}: ${value}`,\n          );\n        } else {\n          if (interaction_type === \"numeric\" && nodes.length > 1) {\n            if (Number(nodes[0]) > Number(nodes[1])) {\n              this.throwSCORMError(\n                CMIElement,\n                scorm2004_errors.TYPE_MISMATCH,\n                `${interaction_type}: ${value}`,\n              );\n            }\n          } else {\n            if (nodes[i] !== \"\" && response.unique) {\n              for (let j = 0; j < i && this.lastErrorCode === \"0\"; j++) {\n                if (nodes[i] === nodes[j]) {\n                  this.throwSCORMError(\n                    CMIElement,\n                    scorm2004_errors.TYPE_MISMATCH,\n                    `${interaction_type}: ${value}`,\n                  );\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove prefixes from correct_response - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {string} node\n   * @return {*}\n   */\n  removeCorrectResponsePrefixes(CMIElement: string, node: string): any {\n    let seenOrder = false;\n    let seenCase = false;\n    let seenLang = false;\n\n    const prefixRegex = new RegExp(\"^({(lang|case_matters|order_matters)=([^}]+)})\");\n    let matches = node.match(prefixRegex);\n    let langMatches = null;\n    while (matches) {\n      switch (matches[2]) {\n        case \"lang\":\n          langMatches = node.match(scorm2004_regex.CMILangcr);\n          if (langMatches) {\n            const lang = langMatches[3];\n            if (lang !== undefined && lang.length > 0) {\n              if (!ValidLanguages.includes(lang.toLowerCase())) {\n                this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n              }\n            }\n          }\n          seenLang = true;\n          break;\n        case \"case_matters\":\n          if (!seenLang && !seenOrder && !seenCase) {\n            if (matches[3] !== \"true\" && matches[3] !== \"false\") {\n              this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n            }\n          }\n\n          seenCase = true;\n          break;\n        case \"order_matters\":\n          if (!seenCase && !seenLang && !seenOrder) {\n            if (matches[3] !== \"true\" && matches[3] !== \"false\") {\n              this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n            }\n          }\n\n          seenOrder = true;\n          break;\n      }\n      node = node.substring(matches[1]?.length || 0);\n      matches = node.match(prefixRegex);\n    }\n\n    return node;\n  }\n\n  /**\n   * Replace the whole API with another\n   * @param {Scorm2004API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI: Scorm2004API) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.adl = newAPI.adl;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit - delegates to DataSerializationModule\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} includeTotalTime - Whether to include total time in the commit data\n   * @return {object|Array}\n   */\n  renderCommitCMI(\n    terminateCommit: boolean,\n    includeTotalTime: boolean = false,\n  ): StringKeyMap | Array<any> {\n    const cmiExport: StringKeyMap = this.renderCMIToJSONObject();\n\n    if (terminateCommit || includeTotalTime) {\n      (cmiExport.cmi as any).total_time = (this.cmi as any).getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened: StringKeyMap = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case \"flattened\":\n        return Utilities.flatten(cmiExport);\n      case \"params\":\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case \"json\":\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit - delegates to DataSerializationModule\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} includeTotalTime - Whether to include total time in the commit data\n   * @return {CommitObject}\n   */\n  renderCommitObject(terminateCommit: boolean, includeTotalTime: boolean = false): CommitObject {\n    const cmiExport = this.renderCommitCMI(terminateCommit, includeTotalTime);\n    const calculateTotalTime = terminateCommit || includeTotalTime;\n    const totalTimeDuration = calculateTotalTime ? this.cmi.getCurrentTotalTime() : \"\";\n    const totalTimeSeconds = Utilities.getDurationAsSeconds(\n      totalTimeDuration,\n      scorm2004_regex.CMITimespan,\n    );\n\n    let completionStatus = CompletionStatus.UNKNOWN;\n    let successStatus = SuccessStatus.UNKNOWN;\n    if (this.cmi.completion_status) {\n      if (this.cmi.completion_status === \"completed\") {\n        completionStatus = CompletionStatus.COMPLETED;\n      } else if (this.cmi.completion_status === \"incomplete\") {\n        completionStatus = CompletionStatus.INCOMPLETE;\n      }\n    }\n    if (this.cmi.success_status) {\n      if (this.cmi.success_status === \"passed\") {\n        successStatus = SuccessStatus.PASSED;\n      } else if (this.cmi.success_status === \"failed\") {\n        successStatus = SuccessStatus.FAILED;\n      }\n    }\n\n    const scoreObject: ScoreObject = this.cmi?.score?.getScoreObject() || {};\n    const commitObject: CommitObject = {\n      completionStatus: completionStatus,\n      successStatus: successStatus,\n      totalTimeSeconds: totalTimeSeconds,\n      runtimeData: cmiExport as StringKeyMap,\n    };\n    if (scoreObject) {\n      commitObject.score = scoreObject;\n    }\n    return commitObject;\n  }\n\n  /**\n   * Attempts to store the data to the LMS - delegates to DataSerializationModule\n   *\n   * @param {boolean} terminateCommit\n   * @return {ResultObject}\n   */\n  async storeData(terminateCommit: boolean): Promise<ResultObject> {\n    if (terminateCommit) {\n      if (this.cmi.mode === \"normal\") {\n        if (this.cmi.credit === \"credit\") {\n          if (this.cmi.completion_threshold && this.cmi.progress_measure) {\n            if (this.cmi.progress_measure >= this.cmi.completion_threshold) {\n              this.cmi.completion_status = \"completed\";\n            } else {\n              this.cmi.completion_status = \"incomplete\";\n            }\n          }\n          if (this.cmi.scaled_passing_score && this.cmi.score.scaled) {\n            if (this.cmi.score.scaled >= this.cmi.scaled_passing_score) {\n              this.cmi.success_status = \"passed\";\n            } else {\n              this.cmi.success_status = \"failed\";\n            }\n          }\n        }\n      }\n    }\n\n    let navRequest = false;\n    if (\n      this.adl.nav.request !==\n        ((this.startingData?.adl as StringKeyMap)?.nav as StringKeyMap)?.request &&\n      this.adl.nav.request !== \"_none_\"\n    ) {\n      navRequest = true;\n    }\n\n    const commitObject = this.getCommitObject(terminateCommit);\n    if (typeof this.settings.lmsCommitUrl === \"string\") {\n      const result = await this.processHttpRequest(\n        this.settings.lmsCommitUrl,\n        commitObject,\n        terminateCommit,\n      );\n\n      // Check if this is a sequencing call, and then call the necessary JS\n      if (\n        navRequest &&\n        result.navRequest !== undefined &&\n        result.navRequest !== \"\" &&\n        typeof result.navRequest === \"string\"\n      ) {\n        Function(`\"use strict\";(() => { ${result.navRequest} })()`)();\n      } else if (result?.navRequest && !navRequest) {\n        if (\n          typeof result.navRequest === \"object\" &&\n          Object.hasOwnProperty.call(result.navRequest, \"name\")\n        ) {\n          this.processListeners(result.navRequest.name as string, result.navRequest.data as string);\n        }\n      }\n\n      return result;\n    }\n\n    return {\n      result: global_constants.SCORM_TRUE,\n      errorCode: 0,\n    };\n  }\n\n  /**\n   * Configure sequencing based on provided settings\n   * @param {SequencingSettings} sequencingSettings - The sequencing settings\n   */\n  private configureSequencing(sequencingSettings: SequencingSettings): void {\n    // Configure activity tree\n    if (sequencingSettings.activityTree) {\n      this.configureActivityTree(sequencingSettings.activityTree);\n    }\n\n    // Configure sequencing rules\n    if (sequencingSettings.sequencingRules) {\n      this.configureSequencingRules(sequencingSettings.sequencingRules);\n    }\n\n    // Configure sequencing controls\n    if (sequencingSettings.sequencingControls) {\n      this.configureSequencingControls(sequencingSettings.sequencingControls);\n    }\n\n    // Configure rollup rules\n    if (sequencingSettings.rollupRules) {\n      this.configureRollupRules(sequencingSettings.rollupRules);\n    }\n  }\n\n  /**\n   * Configure activity tree based on provided settings\n   * @param {ActivitySettings} activityTreeSettings - The activity tree settings\n   */\n  private configureActivityTree(activityTreeSettings: ActivitySettings): void {\n    // Create root activity\n    const rootActivity = this.createActivity(activityTreeSettings);\n\n    // Create activity tree\n    const activityTree = this._sequencing.activityTree;\n    activityTree.root = rootActivity;\n\n    // Extract activity IDs for use as scoItemIds\n    this._extractedScoItemIds = this.extractActivityIds(rootActivity);\n  }\n\n  /**\n   * Extract all activity IDs from an activity and its children\n   * @param {Activity} activity - The activity to extract IDs from\n   * @return {string[]} - Array of activity IDs\n   */\n  private extractActivityIds(activity: Activity): string[] {\n    const ids = [activity.id];\n\n    // Recursively extract IDs from children\n    for (const child of activity.children) {\n      ids.push(...this.extractActivityIds(child));\n    }\n\n    return ids;\n  }\n\n  /**\n   * Create an activity from settings\n   * @param {ActivitySettings} activitySettings - The activity settings\n   * @return {Activity} - The created activity\n   */\n  private createActivity(activitySettings: ActivitySettings): Activity {\n    // Create activity\n    const activity = new Activity(activitySettings.id, activitySettings.title);\n\n    // Set activity properties\n    if (activitySettings.isVisible !== undefined) {\n      activity.isVisible = activitySettings.isVisible;\n    }\n    if (activitySettings.isActive !== undefined) {\n      activity.isActive = activitySettings.isActive;\n    }\n    if (activitySettings.isSuspended !== undefined) {\n      activity.isSuspended = activitySettings.isSuspended;\n    }\n    if (activitySettings.isCompleted !== undefined) {\n      activity.isCompleted = activitySettings.isCompleted;\n    }\n\n    // Create child activities\n    if (activitySettings.children) {\n      for (const childSettings of activitySettings.children) {\n        const childActivity = this.createActivity(childSettings);\n        activity.addChild(childActivity);\n      }\n    }\n\n    return activity;\n  }\n\n  /**\n   * Configure sequencing rules based on provided settings\n   * @param {SequencingRulesSettings} sequencingRulesSettings - The sequencing rules settings\n   */\n  private configureSequencingRules(sequencingRulesSettings: SequencingRulesSettings): void {\n    const sequencingRules = this._sequencing.sequencingRules;\n\n    // Configure pre-condition rules\n    if (sequencingRulesSettings.preConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.preConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addPreConditionRule(rule);\n      }\n    }\n\n    // Configure exit condition rules\n    if (sequencingRulesSettings.exitConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.exitConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addExitConditionRule(rule);\n      }\n    }\n\n    // Configure post-condition rules\n    if (sequencingRulesSettings.postConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.postConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addPostConditionRule(rule);\n      }\n    }\n  }\n\n  /**\n   * Create a sequencing rule from settings\n   * @param {SequencingRuleSettings} ruleSettings - The sequencing rule settings\n   * @return {SequencingRule} - The created sequencing rule\n   */\n  private createSequencingRule(ruleSettings: SequencingRuleSettings): SequencingRule {\n    // Create rule\n    const rule = new SequencingRule(ruleSettings.action, ruleSettings.conditionCombination);\n\n    // Add conditions\n    for (const conditionSettings of ruleSettings.conditions) {\n      const condition = new RuleCondition(\n        conditionSettings.condition,\n        conditionSettings.operator,\n        new Map(Object.entries(conditionSettings.parameters || {})),\n      );\n      rule.addCondition(condition);\n    }\n\n    return rule;\n  }\n\n  /**\n   * Configure sequencing controls based on provided settings\n   * @param {SequencingControlsSettings} sequencingControlsSettings - The sequencing controls settings\n   */\n  private configureSequencingControls(\n    sequencingControlsSettings: SequencingControlsSettings,\n  ): void {\n    const sequencingControls = this._sequencing.sequencingControls;\n\n    // Set sequencing control properties\n    if (sequencingControlsSettings.enabled !== undefined) {\n      sequencingControls.enabled = sequencingControlsSettings.enabled;\n    }\n    if (sequencingControlsSettings.choiceExit !== undefined) {\n      sequencingControls.choiceExit = sequencingControlsSettings.choiceExit;\n    }\n    if (sequencingControlsSettings.flow !== undefined) {\n      sequencingControls.flow = sequencingControlsSettings.flow;\n    }\n    if (sequencingControlsSettings.forwardOnly !== undefined) {\n      sequencingControls.forwardOnly = sequencingControlsSettings.forwardOnly;\n    }\n    if (sequencingControlsSettings.useCurrentAttemptObjectiveInfo !== undefined) {\n      sequencingControls.useCurrentAttemptObjectiveInfo =\n        sequencingControlsSettings.useCurrentAttemptObjectiveInfo;\n    }\n    if (sequencingControlsSettings.useCurrentAttemptProgressInfo !== undefined) {\n      sequencingControls.useCurrentAttemptProgressInfo =\n        sequencingControlsSettings.useCurrentAttemptProgressInfo;\n    }\n    if (sequencingControlsSettings.preventActivation !== undefined) {\n      sequencingControls.preventActivation = sequencingControlsSettings.preventActivation;\n    }\n    if (sequencingControlsSettings.constrainChoice !== undefined) {\n      sequencingControls.constrainChoice = sequencingControlsSettings.constrainChoice;\n    }\n    if (sequencingControlsSettings.rollupObjectiveSatisfied !== undefined) {\n      sequencingControls.rollupObjectiveSatisfied =\n        sequencingControlsSettings.rollupObjectiveSatisfied;\n    }\n    if (sequencingControlsSettings.rollupProgressCompletion !== undefined) {\n      sequencingControls.rollupProgressCompletion =\n        sequencingControlsSettings.rollupProgressCompletion;\n    }\n    if (sequencingControlsSettings.objectiveMeasureWeight !== undefined) {\n      sequencingControls.objectiveMeasureWeight = sequencingControlsSettings.objectiveMeasureWeight;\n    }\n  }\n\n  /**\n   * Configure rollup rules based on provided settings\n   * @param {RollupRulesSettings} rollupRulesSettings - The rollup rules settings\n   */\n  private configureRollupRules(rollupRulesSettings: RollupRulesSettings): void {\n    const rollupRules = this._sequencing.rollupRules;\n\n    // Configure rollup rules\n    if (rollupRulesSettings.rules) {\n      for (const ruleSettings of rollupRulesSettings.rules) {\n        const rule = this.createRollupRule(ruleSettings);\n        rollupRules.addRule(rule);\n      }\n    }\n  }\n\n  /**\n   * Create a rollup rule from settings\n   * @param {RollupRuleSettings} ruleSettings - The rollup rule settings\n   * @return {RollupRule} - The created rollup rule\n   */\n  private createRollupRule(ruleSettings: RollupRuleSettings): RollupRule {\n    // Create rule\n    const rule = new RollupRule(\n      ruleSettings.action,\n      ruleSettings.consideration,\n      ruleSettings.minimumCount,\n      ruleSettings.minimumPercent,\n    );\n\n    // Add conditions\n    for (const conditionSettings of ruleSettings.conditions) {\n      const condition = new RollupCondition(\n        conditionSettings.condition,\n        new Map(Object.entries(conditionSettings.parameters || {})),\n      );\n      rule.addCondition(condition);\n    }\n\n    return rule;\n  }\n}\n\nexport default Scorm2004API;\n","import AICC from \"./AICC\";\nimport Scorm12API from \"./Scorm12API\";\nimport Scorm2004API from \"./Scorm2004API\";\n\n// Explicitly assign to window for global usage\nif (typeof window !== \"undefined\") {\n  window.AICC = AICC;\n  window.Scorm12API = Scorm12API;\n  window.Scorm2004API = Scorm2004API;\n}\n"],"names":["global_constants","SCORM_TRUE","SCORM_FALSE","STATE_NOT_INITIALIZED","STATE_INITIALIZED","STATE_TERMINATED","scorm12_constants","cmi_children","core_children","score_children","comments_children","objectives_children","correct_responses_children","student_data_children","student_preference_children","interactions_children","error_descriptions","basicMessage","detailMessage","aicc_constants","student_demographics_children","tries_children","attempt_records_children","paths_children","scorm2004_constants","adl_data_children","global_errors","GENERAL","INITIALIZATION_FAILED","INITIALIZED","TERMINATED","TERMINATION_FAILURE","TERMINATION_BEFORE_INIT","MULTIPLE_TERMINATION","RETRIEVE_BEFORE_INIT","RETRIEVE_AFTER_TERM","STORE_BEFORE_INIT","STORE_AFTER_TERM","COMMIT_BEFORE_INIT","COMMIT_AFTER_TERM","ARGUMENT_ERROR","CHILDREN_ERROR","COUNT_ERROR","GENERAL_GET_FAILURE","GENERAL_SET_FAILURE","GENERAL_COMMIT_FAILURE","UNDEFINED_DATA_MODEL","UNIMPLEMENTED_ELEMENT","VALUE_NOT_INITIALIZED","INVALID_SET_VALUE","READ_ONLY_ELEMENT","WRITE_ONLY_ELEMENT","TYPE_MISMATCH","VALUE_OUT_OF_RANGE","DEPENDENCY_NOT_ESTABLISHED","scorm12_errors","scorm2004_errors","MULTIPLE_TERMINATIONS","scorm12_regex","CMIString256","CMIString4096","CMITime","CMITimespan","CMIInteger","CMISInteger","CMIDecimal","CMIIdentifier","CMIFeedback","CMIIndex","CMIStatus","CMIStatus2","CMIExit","CMIType","CMIResult","NAVEvent","score_range","audio_range","speed_range","weighting_range","text_range","aicc_regex","scorm2004_regex","CMIString200","CMIString250","CMIString1000","CMIString4000","CMIString64000","CMILang","CMILangString250","CMILangcr","CMILangString250cr","CMILangString4000","CMIShortIdentifier","CMILongIdentifier","CMICStatus","CMISStatus","NAVBoolean","NAVTarget","scaled_range","progress_range","BaseScormValidationError","Error","constructor","CMIElement","errorCode","toString","_errorCode","Object","setPrototypeOf","prototype","ValidationError","errorMessage","detailedMessage","_detailedMessage","message","_errorMessage","Scorm12ValidationError","hasOwnProperty","call","String","BaseCMI","cmi_element","jsonString","_initialized","_cmi_element","initialized","initialize","BaseRootCMI","start_time","_start_time","setStartTime","Date","getTime","SECONDS_PER_SECOND","SECONDS_PER_MINUTE","SECONDS_PER_HOUR","SECONDS_PER_DAY","designations","D","H","M","S","getSecondsAsHHMMSS","memoize","totalSeconds","hours","Math","floor","dateObj","minutes","getUTCMinutes","seconds","getSeconds","ms","msStr","countDecimals","toFixed","split","replace","getSecondsAsISODuration","duration","remainder","designationEntries","entries","forEach","_ref","designationsKey","current_seconds","value","Number","needsTimeSeparator","indexOf","includes","getTimeAsSeconds","timeString","timeRegex","RegExp","match","test","parts","timeStr","regexStr","getDurationAsSeconds","durationRegex","years","_","days","exec","result","durationStr","addTwoDurations","first","second","regex","addHHMMSSTimeStrings","flatten","data","recurse","cur","prop","Array","isArray","item","i","length","keys","filter","p","isEmpty","unflatten","pattern","from","m","num","formatMessage","functionName","baseLength","paddedFunction","padEnd","messageString","CMIElementBaseLength","stringMatches","str","tester","fn","keyFn","cache","Map","_len","arguments","args","_key","key","JSON","stringify","has","get","set","checkValidFormat","regexPattern","errorClass","allowEmptyString","formatRegex","matches","_errorClass","valueKey","checkValidRange","rangePattern","ranges","check12ValidFormat","check12ValidRange","ValidationService","validateScore","decimalRegex","scoreRange","invalidTypeCode","invalidRangeCode","validateScorm12Audio","validateScorm12Language","validateScorm12Speed","validateScorm12Text","validateReadOnly","validationService","CMIScore","params","_raw","_min","__children","__score_range","_max","max","__invalid_error_code","invalidErrorCode","__invalid_type_code","__invalid_range_code","__decimal_regex","__error_class","reset","_children","raw","min","getScoreObject","scoreObject","isNaN","parseFloat","toJSON","CMICore","_student_id","_student_name","_lesson_location","_credit","_lesson_status","_entry","_total_time","_lesson_mode","_exit","_session_time","_suspend_data","score","student_id","student_name","lesson_location","credit","lesson_status","entry","total_time","lesson_mode","exit","session_time","suspend_data","getCurrentTotalTime","sessionTime","Util","CMIArray","children","childArray","wipe","_count","CMIObjectives","CMIObjectivesObject","_id","_status","id","status","CMIStudentData","_mastery_score","_max_time_allowed","_time_limit_action","mastery_score","max_time_allowed","time_limit_action","CMIStudentPreference","_audio","_language","_speed","_text","audio","language","speed","text","CMIInteractions","CMIInteractionsObject","_time","_type","_weighting","_student_response","_result","_latency","objectives","correct_responses","time","type","weighting","student_response","latency","CMIInteractionsObjectivesObject","CMIInteractionsCorrectResponsesObject","_pattern","CMI","student_data","__version","_launch_data","_comments","_comments_from_lms","core","student_preference","interactions","launch_data","comments","comments_from_lms","_version","NAV","_event","event","UNKNOWN","TRUE","FALSE","SuccessStatus","PASSED","FAILED","CompletionStatus","COMPLETED","INCOMPLETE","LogLevelEnum","DEBUG","INFO","WARN","ERROR","NONE","DefaultSettings","autocommit","autocommitSeconds","asyncCommit","sendFullCommit","lmsCommitUrl","dataCommitFormat","commitRequestDataType","autoProgress","logLevel","selfReportSessionTime","alwaysSendTotalTime","renderCommonCommitFields","strict_errors","xhrHeaders","xhrWithCredentials","fetchMode","useBeaconInsteadOfFetch","responseHandler","response","httpResult","json","responseText","parse","e","requestHandler","commitObject","onLogMessage","defaultLogHandler","scoItemIds","scoItemIdValidator","globalObjectiveIds","enableOfflineSupport","courseId","syncOnInitialize","syncOnTerminate","maxSyncAttempts","messageLevel","logMessage","console","error","warn","info","debug","log","ScheduledCommit","API","when","callback","_cancelled","_API","_timeout","setTimeout","wrapper","bind","_callback","cancel","clearTimeout","isInitialized","commit","HttpService","settings","error_codes","processHttpRequest","url","immediate","undefined","apiLog","processListeners","genericError","_handleImmediateRequest","processedParams","performFetch","transformResponse","stack","enhancedError","errorDetails","errorType","name","originalError","body","contentType","_prepareRequestBody","navigator","sendBeacon","Blob","then","catch","join","performBeacon","init","method","mode","headers","keepalive","credentials","fetch","beaconSuccess","Promise","resolve","ok","parseError","statusText","substring","_isSuccessResponse","updateSettings","EventService","listenerMap","listenerCount","parseListenerName","listenerName","listenerSplit","on","listenerFunctions","listenerFunction","parsedListener","listeners","push","off","removeIndex","findIndex","obj","splice","delete","clear","newListeners","listener","listenerHasCMIElement","CMIElementsMatch","endsWith","prefix","slice","startsWith","SerializationService","loadFromFlattenedJSON","setCMIValue","isNotInitialized","setStartingData","int_pattern","obj_pattern","others","intMatch","index","field","objMatch","sort","a","b","localeCompare","processItems","items","loadFromJSON","currentCMIElement","tempCMIElement","renderCMIToJSONString","cmi","k","v","renderCMIToJSONObject","getCommitObject","terminateCommit","renderCommitObject","renderCommitCMI","apiLogLevel","includeTotalTime","LoggingService","_logLevel","_logHandler","getInstance","_instance","setLogLevel","level","getLogLevel","setLogHandler","handler","shouldLog","numericMessageLevel","getNumericLevel","numericLogLevel","getLoggingService","ErrorHandlingService","errorCodes","getLmsErrorMessageDetails","loggingService","_lastErrorCode","_errorCodes","_apiLog","_getLmsErrorMessageDetails","_loggingService","lastErrorCode","throwSCORMError","errorNumber","formattedMessage","clearSCORMError","success","handleValueAccessException","returnValue","validationError","stackTrace","jsonError","createErrorHandlingService","OfflineStorageService","storeName","syncQueue","isOnline","onLine","syncInProgress","window","addEventListener","handleOnlineStatusChange","wasOnline","syncOfflineData","storeOffline","commitData","queueItem","now","random","timestamp","syncAttempts","currentQueue","getFromStorage","saveToStorage","getOfflineData","remainingQueue","syncResult","sendDataToLMS","processedData","isDeviceOnline","storedData","localStorage","getItem","setItem","hasPendingOfflineData","queue","some","BaseAPI","httpService","eventService","serializationService","cmiDataService","errorHandlingService","offlineStorageService","_settings","_courseId","new","TypeError","currentState","_error_codes","_httpService","_eventService","element","_serializationService","_errorHandlingService","detail","_offlineStorageService","offlineData","runtimeData","commonReset","clearScheduledCommit","startingData","callbackName","initializeMessage","terminationMessage","isTerminated","hasPendingData","syncSuccess","previousSettings","terminate","checkTerminated","checkState","storeData","getValue","getCMIValue","setValue","commitCallback","scheduleCommit","getLastError","getErrorString","CMIErrorCode","getDiagnostic","beforeInitError","afterTermError","_errorNumber","_CMIElement","_value","_commonSetCMIValue","methodName","scorm2004","structure","refObject","foundFirstIndex","invalidErrorMessage","idx","attribute","_checkObjectHasProperty","validateCorrectResponse","parseInt","newChild","getChildElement","_commonGetCMIValue","uninitializedErrorMessage","_isTargetValid","target","getFlattenedCMI","Utilities","StringKeyMap","getOwnPropertyDescriptor","getPrototypeOf","Scorm12API","mastery_override","statusSetByModule","nav","LMSInitialize","lmsInitialize","LMSFinish","lmsFinish","LMSGetValue","lmsGetValue","LMSSetValue","lmsSetValue","LMSCommit","lmsCommit","LMSGetLastError","lmsGetLastError","LMSGetErrorString","lmsGetErrorString","LMSGetDiagnostic","lmsGetDiagnostic","internalFinish","replaceWithAnotherScormAPI","newAPI","cmiExport","flattened","calculateTotalTime","totalTimeHHMMSS","totalTimeSeconds","lessonStatus","completionStatus","successStatus","originalStatus","aicc_errors","AICCValidationError","checkAICCValidFormat","CMIEvaluation","CMIEvaluationComments","CMIEvaluationCommentsObject","_content","_location","content","location","AICCStudentPreferences","_lesson_type","_text_color","_text_location","_text_size","_video","windows","lesson_type","text_color","text_location","text_size","video","CMIStudentDemographics","_city","_class","_company","_country","_experience","_familiar_name","_instructor_name","_title","_native_language","_state","_street_address","_telephone","_years_experience","city","class","clazz","company","country","experience","familiar_name","instructor_name","title","native_language","state","street_address","telephone","years_experience","CMITries","CMITriesObject","CMIAttemptRecords","CMIAttemptRecordsObject","AICCCMIStudentData","_tries_during_lesson","tries","attempt_records","tries_during_lesson","CMIPaths","CMIPathsObject","_location_id","_date","_why_left","_time_in_element","location_id","date","why_left","time_in_element","Scorm12CMI","student_demographics","evaluation","paths","AICC","Scorm2004ValidationError","check2004ValidFormat","check2004ValidRange","CMILearnerPreference","_audio_level","_delivery_speed","_audio_captioning","audio_level","delivery_speed","audio_captioning","LearnerResponses","format","delimiter","unique","choice","matching","format2","delimiter2","performance","sequencing","likert","numeric","other","CorrectResponses","duplicate","limit","delimiter3","_timestamp","_learner_response","_description","learner_response","nodes","response_type","values","j","description","stripBrackets","delim","escapeRegex","s","splitUnescaped","reDelim","splitRe","unescapeRe","map","part","validatePattern","responseDef","trim","subDelim1","rawNodes","delim1","seen","Set","size","fmt1","fmt2","checkSingle","checkPair","delimBracketed","n","node","numDelim","nums","allParts","part1","part2","interactionType","_interactionType","Scorm2004CMIScore","_scaled","scaled","CMICommentsFromLMS","CMICommentsFromLearner","CMICommentsObject","readOnlyAfterInit","_comment","_readOnlyAfterInit","comment","findObjectiveById","find","objective","findObjectiveByIndex","setObjectiveByIndex","_success_status","_completion_status","_progress_measure","success_status","completion_status","progress_measure","CMIMetadata","CMILearner","_learner_id","_learner_name","learner_id","learner_name","CMISession","CMIContent","CMISettings","_mode","CMIThresholds","_scaled_passing_score","_completion_threshold","scaled_passing_score","completion_threshold","metadata","learner","session","thresholds","learner_preference","comments_from_learner","ADL","ADLData","_sequencing","ADLNav","adlNav","_request","request_valid","ADLNavRequestValid","request","processNavigationRequest","ADLDataObject","_store","store","_continue","_previous","_choice","_jump","continue","previous","jump","RuleConditionOperator","RuleActionType","RuleCondition","condition","operator","parameters","_condition","_operator","_parameters","evaluate","activity","objectiveMeasureStatus","greaterThanValue","objectiveNormalizedMeasure","lessThanValue","isCompleted","attemptCount","attemptLimit","evaluateTimeLimitExceeded","evaluateOutsideAvailableTimeRange","timeLimitDuration","durationMs","parseISO8601Duration","attemptDuration","attemptExperiencedDuration","attemptDurationMs","beginTime","beginTimeLimit","endTime","endTimeLimit","beginDate","endDate","fromEntries","SequencingRule","action","conditionCombination","_conditions","_action","_conditionCombination","conditions","addCondition","removeCondition","every","SequencingRules","_preConditionRules","_exitConditionRules","_postConditionRules","preConditionRules","addPreConditionRule","rule","exitConditionRules","addExitConditionRule","postConditionRules","addPostConditionRule","evaluatePreConditionRules","evaluateExitConditionRules","evaluatePostConditionRules","RollupCondition","RollupRule","consideration","minimumCount","minimumPercent","_consideration","_minimumCount","_minimumPercent","matchingChildren","child","percent","RollupRules","_rules","rules","addRule","removeRule","processRollup","getAvailableChildren","completionRollup","successRollup","sequencingControls","rollupObjectiveSatisfied","measureRollupResult","_objectiveRollupUsingMeasure","_defaultCompletionRollup","_defaultSuccessRollup","allCompleted","anyIncomplete","objectiveMeasureWeight","totalWeight","weightedSum","hasValidMeasures","childWeight","normalizedMeasure","scaledPassingScore","objectiveSatisfiedStatus","allSatisfied","anyNotSatisfied","ValidLanguages","SelectionTiming","RandomizationTiming","SequencingControls","_enabled","_choiceExit","_flow","_forwardOnly","_useCurrentAttemptObjectiveInfo","_useCurrentAttemptProgressInfo","_preventActivation","_constrainChoice","_rollupObjectiveSatisfied","_rollupProgressCompletion","_objectiveMeasureWeight","_selectionTiming","_selectCount","_selectionCountStatus","_randomizeChildren","_randomizationTiming","_reorderChildren","enabled","choiceExit","flow","forwardOnly","useCurrentAttemptObjectiveInfo","useCurrentAttemptProgressInfo","preventActivation","constrainChoice","rollupProgressCompletion","isChoiceNavigationAllowed","isFlowNavigationAllowed","isForwardNavigationAllowed","isBackwardNavigationAllowed","selectionTiming","selectCount","selectionCountStatus","randomizeChildren","randomizationTiming","reorderChildren","Activity","_parent","_isVisible","_isActive","_isSuspended","_isCompleted","_completionStatus","_successStatus","_attemptCount","_attemptCompletionAmount","_attemptAbsoluteDuration","_attemptExperiencedDuration","_activityAbsoluteDuration","_activityExperiencedDuration","_objectiveSatisfiedStatus","_objectiveMeasureStatus","_objectiveNormalizedMeasure","_scaledPassingScore","_isHiddenFromChoice","_isAvailable","_attemptLimit","_attemptAbsoluteDurationLimit","_activityAbsoluteDurationLimit","_timeLimitAction","_timeLimitDuration","_beginTimeLimit","_endTimeLimit","_processedChildren","_isNewAttempt","_sequencingControls","_sequencingRules","_rollupRules","addChild","removeChild","parent","isVisible","isActive","isSuspended","incrementAttemptCount","controls","isHiddenFromChoice","isAvailable","hasAttemptLimitExceeded","timeLimitAction","attemptAbsoluteDurationLimit","activityAbsoluteDurationLimit","activityExperiencedDuration","sequencingRules","rollupRules","setProcessedChildren","processedChildren","resetProcessedChildren","isNewAttempt","attemptCompletionAmount","attemptAbsoluteDuration","activityAbsoluteDuration","ActivityTree","_root","_currentActivity","_suspendedActivity","_activities","_addActivitiesToMap","root","currentActivity","suspendedActivity","getActivity","getAllActivities","getParent","getChildren","useAvailableChildren","getSiblings","getNextSibling","siblings","getPreviousSibling","getFirstChild","getLastChild","getCommonAncestor","activity1","activity2","path1","current","unshift","SelectionRandomization","selectChildrenProcess","NEVER","ONCE","selectedChildren","availableIndices","randomIndex","childIndex","randomizeChildrenProcess","randomizedChildren","tempI","tempJ","applySelectionAndRandomization","shouldApplySelection","shouldApplyRandomization","ON_EACH_NEW_ATTEMPT","isSelectionNeeded","isRandomizationNeeded","SequencingRequestType","DeliveryRequestType","SequencingResult","deliveryRequest","targetActivity","exception","SequencingProcess","activityTree","sequencingRequestProcess","targetActivityId","startSequencingRequestProcess","resumeAllSequencingRequestProcess","continueSequencingRequestProcess","previousSequencingRequestProcess","choiceSequencingRequestProcess","jumpSequencingRequestProcess","exitSequencingRequestProcess","exitAllSequencingRequestProcess","abandonSequencingRequestProcess","abandonAllSequencingRequestProcess","suspendAllSequencingRequestProcess","retrySequencingRequestProcess","retryAllSequencingRequestProcess","deliverableActivity","findFirstDeliverableActivity","checkActivityProcess","ensureSelectionAndRandomization","deliverable","flowResult","flowSubprocess","isActivityInTree","commonAncestor","findCommonAncestor","terminateDescendentAttemptsProcess","activityPath","pathActivity","flowActivityTraversalSubprocess","_direction","considerChildren","availableChildren","limitConditionsCheckProcess","preConditionResult","sequencingRulesCheckProcess","SKIP","DISABLED","skipExitRules","exitAction","exitActionRulesSubprocess","processDeferredExitAction","EXIT","EXIT_PARENT","EXIT_ALL","allActivities","anyActive","postConditionRulesSubprocess","postAction","validActions","RETRY","RETRY_ALL","CONTINUE","PREVIOUS","attemptLimitMs","activityDurationMs","activityLimitMs","sequencingRulesCheckSubprocess","AND","OR","ancestors1","fromActivity","direction","candidateActivity","firstIteration","nextCandidate","flowTreeTraversalSubprocess","skipChildren","nextSibling","previousSibling","lastDescendant","lastChild","parentPreviousSibling","choiceFlowSubprocess","choiceFlowTreeTraversalSubprocess","choiceActivityTraversalSubprocess","Sequencing","_adlNav","_sequencingProcess","_lastSequencingResult","_activityTree","lastSequencingResult","requestType","START","RESUME_ALL","CHOICE","JUMP","ABANDON","ABANDON_ALL","SUSPEND_ALL","updateNavigationRequestValidity","DELIVER","continueResult","previousResult","_processRollupRecursive","getLastSequencingResult","getCurrentActivity","getRootActivity","Scorm2004API","_globalObjectives","_extractedScoItemIds","adl","configureSequencing","Initialize","Terminate","GetValue","SetValue","Commit","GetLastError","GetErrorString","GetDiagnostic","version","globalObjectives","navActions","exitAll","abandon","abandonAll","choiceJumpRegex","groups","choice_target","jump_target","adlNavRequestRegex","element_base","objective_id","setting_id","is_global","global_index","newGlobalObjective","global_element","createCorrectResponsesObject","interaction","checkDuplicateChoiceResponse","checkValidResponseType","interaction_type","checkCorrectResponseValue","interaction_count","pattern_index","checkDuplicatedPattern","errorDescription","correct_response","current_index","found","count","removeCorrectResponsePrefixes","seenOrder","seenCase","seenLang","prefixRegex","langMatches","lang","toLowerCase","totalTimeDuration","navRequest","Function","sequencingSettings","configureActivityTree","configureSequencingRules","configureSequencingControls","configureRollupRules","activityTreeSettings","rootActivity","createActivity","extractActivityIds","ids","activitySettings","childSettings","childActivity","sequencingRulesSettings","ruleSettings","createSequencingRule","conditionSettings","sequencingControlsSettings","rollupRulesSettings","createRollupRule"],"mappings":"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"}