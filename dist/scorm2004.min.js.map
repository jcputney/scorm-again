{"version":3,"file":"scorm2004.min.js","sources":["../src/constants/api_constants.ts","../src/utilities.ts","../src/constants/enums.ts","../src/constants/default_settings.ts","../src/types/scheduled_commit.ts","../src/services/HttpService.ts","../src/services/EventService.ts","../src/services/SerializationService.ts","../src/exceptions.ts","../src/services/LoggingService.ts","../src/services/ErrorHandlingService.ts","../src/services/OfflineStorageService.ts","../src/cmi/common/base_cmi.ts","../src/constants/error_codes.ts","../src/cmi/common/array.ts","../src/BaseAPI.ts","../src/exceptions/scorm2004_exceptions.ts","../src/cmi/common/validation.ts","../src/cmi/scorm2004/validation.ts","../src/constants/regex.ts","../src/cmi/scorm2004/learner_preference.ts","../src/constants/response_constants.ts","../src/cmi/scorm2004/interactions.ts","../src/exceptions/scorm12_exceptions.ts","../src/cmi/scorm12/validation.ts","../src/services/ValidationService.ts","../src/cmi/common/score.ts","../src/cmi/scorm2004/score.ts","../src/cmi/scorm2004/comments.ts","../src/cmi/scorm2004/objectives.ts","../src/cmi/scorm2004/metadata.ts","../src/cmi/scorm2004/learner.ts","../src/cmi/scorm2004/status.ts","../src/cmi/scorm2004/session.ts","../src/cmi/scorm2004/content.ts","../src/cmi/scorm2004/settings.ts","../src/cmi/scorm2004/thresholds.ts","../src/cmi/scorm2004/cmi.ts","../src/cmi/scorm2004/adl.ts","../src/cmi/scorm2004/sequencing/sequencing_rules.ts","../src/cmi/scorm2004/sequencing/rollup_rules.ts","../src/constants/language_constants.ts","../src/cmi/scorm2004/sequencing/sequencing_controls.ts","../src/cmi/scorm2004/sequencing/activity.ts","../src/cmi/scorm2004/sequencing/activity_tree.ts","../src/cmi/scorm2004/sequencing/sequencing.ts","../src/cmi/scorm2004/sequencing/rollup_process.ts","../src/cmi/scorm2004/sequencing/selection_randomization.ts","../src/cmi/scorm2004/sequencing/sequencing_process.ts","../src/cmi/scorm2004/sequencing/overall_sequencing_process.ts","../src/services/ActivityDeliveryService.ts","../src/services/SequencingService.ts","../src/Scorm2004API.ts"],"sourcesContent":["interface ErrorDescription {\n  basicMessage: string;\n  detailMessage: string;\n}\n\ninterface ErrorDescriptions {\n  [key: string]: ErrorDescription;\n}\n\ninterface ScormConstants {\n  cmi_children: string;\n  core_children: string;\n  score_children: string;\n  comments_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface AiccConstants extends ScormConstants {\n  student_demographics_children: string;\n  tries_children: string;\n  attempt_records_children: string;\n  paths_children: string;\n}\n\ninterface Scorm2004Constants {\n  cmi_children: string;\n  comments_children: string;\n  score_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  adl_data_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface GlobalConstants {\n  SCORM_TRUE: string;\n  SCORM_FALSE: string;\n  STATE_NOT_INITIALIZED: number;\n  STATE_INITIALIZED: number;\n  STATE_TERMINATED: number;\n}\n\nexport const global_constants: GlobalConstants = {\n  SCORM_TRUE: \"true\",\n  SCORM_FALSE: \"false\",\n  STATE_NOT_INITIALIZED: 0,\n  STATE_INITIALIZED: 1,\n  STATE_TERMINATED: 2,\n};\n\nexport const scorm12_constants: ScormConstants = {\n  // Children lists\n  cmi_children:\n    \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions\",\n  core_children:\n    \"student_id,student_name,lesson_location,credit,lesson_status,entry,score,total_time,lesson_mode,exit,session_time\",\n  score_children: \"raw,min,max\",\n  comments_children: \"content,location,time\",\n  objectives_children: \"id,score,status\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio,language,speed,text\",\n  interactions_children:\n    \"id,objectives,time,type,correct_responses,weighting,student_response,result,latency\",\n  error_descriptions: {\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage: \"No specific error code exists to describe the error.\",\n    },\n    \"201\": {\n      basicMessage: \"Invalid argument error\",\n      detailMessage:\n        \"Indicates that an argument represents an invalid data model element or is otherwise incorrect.\",\n    },\n    \"202\": {\n      basicMessage: \"Element cannot have children\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_children\" for a data model element that does not support the \"_children\" suffix.',\n    },\n    \"203\": {\n      basicMessage: \"Element not an array - cannot have count\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_count\" for a data model element that does not support the \"_count\" suffix.',\n    },\n    \"301\": {\n      basicMessage: \"Not initialized\",\n      detailMessage: \"Indicates that an API call was made before the call to lmsInitialize.\",\n    },\n    \"401\": {\n      basicMessage: \"Not implemented error\",\n      detailMessage:\n        \"The data model element indicated in a call to LMSGetValue or LMSSetValue is valid, but was not implemented by this LMS. SCORM 1.2 defines a set of data model elements as being optional for an LMS to implement.\",\n    },\n    \"402\": {\n      basicMessage: \"Invalid set value, element is a keyword\",\n      detailMessage:\n        'Indicates that LMSSetValue was called on a data model element that represents a keyword (elements that end in \"_children\" and \"_count\").',\n    },\n    \"403\": {\n      basicMessage: \"Element is read only\",\n      detailMessage: \"LMSSetValue was called with a data model element that can only be read.\",\n    },\n    \"404\": {\n      basicMessage: \"Element is write only\",\n      detailMessage: \"LMSGetValue was called on a data model element that can only be written to.\",\n    },\n    \"405\": {\n      basicMessage: \"Incorrect Data Type\",\n      detailMessage:\n        \"LMSSetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a LMSSetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\nexport const aicc_constants: AiccConstants = {\n  ...scorm12_constants,\n  ...{\n    cmi_children:\n      \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions,evaluation\",\n    student_preference_children:\n      \"audio,language,lesson_type,speed,text,text_color,text_location,text_size,video,windows\",\n    student_data_children: \"attempt_number,tries,mastery_score,max_time_allowed,time_limit_action\",\n    student_demographics_children:\n      \"city,class,company,country,experience,familiar_name,instructor_name,title,native_language,state,street_address,telephone,years_experience\",\n    tries_children: \"time,status,score\",\n    attempt_records_children: \"score,lesson_status\",\n    paths_children: \"location_id,date,time,status,why_left,time_in_element\",\n  },\n};\n\nexport const scorm2004_constants: Scorm2004Constants = {\n  // Children lists\n  cmi_children:\n    \"_version,comments_from_learner,comments_from_lms,completion_status,credit,entry,exit,interactions,launch_data,learner_id,learner_name,learner_preference,location,max_time_allowed,mode,objectives,progress_measure,scaled_passing_score,score,session_time,success_status,suspend_data,time_limit_action,total_time\",\n  comments_children: \"comment,timestamp,location\",\n  score_children: \"max,raw,scaled,min\",\n  objectives_children: \"progress_measure,completion_status,success_status,description,score,id\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio_level,audio_captioning,delivery_speed,language\",\n  interactions_children:\n    \"id,type,objectives,timestamp,correct_responses,weighting,learner_response,result,latency,description\",\n  adl_data_children: \"id,store\",\n  error_descriptions: {\n    \"0\": {\n      basicMessage: \"No Error\",\n      detailMessage: \"No error occurred, the previous API call was successful.\",\n    },\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage: \"No specific error code exists to describe the error.\",\n    },\n    \"102\": {\n      basicMessage: \"General Initialization Failure\",\n      detailMessage: \"Call to Initialize failed for an unknown reason.\",\n    },\n    \"103\": {\n      basicMessage: \"Already Initialized\",\n      detailMessage: \"Call to Initialize failed because Initialize was already called.\",\n    },\n    \"104\": {\n      basicMessage: \"Content Instance Terminated\",\n      detailMessage: \"Call to Initialize failed because Terminate was already called.\",\n    },\n    \"111\": {\n      basicMessage: \"General Termination Failure\",\n      detailMessage: \"Call to Terminate failed for an unknown reason.\",\n    },\n    \"112\": {\n      basicMessage: \"Termination Before Initialization\",\n      detailMessage: \"Call to Terminate failed because it was made before the call to Initialize.\",\n    },\n    \"113\": {\n      basicMessage: \"Termination After Termination\",\n      detailMessage: \"Call to Terminate failed because Terminate was already called.\",\n    },\n    \"122\": {\n      basicMessage: \"Retrieve Data Before Initialization\",\n      detailMessage: \"Call to GetValue failed because it was made before the call to Initialize.\",\n    },\n    \"123\": {\n      basicMessage: \"Retrieve Data After Termination\",\n      detailMessage: \"Call to GetValue failed because it was made after the call to Terminate.\",\n    },\n    \"132\": {\n      basicMessage: \"Store Data Before Initialization\",\n      detailMessage: \"Call to SetValue failed because it was made before the call to Initialize.\",\n    },\n    \"133\": {\n      basicMessage: \"Store Data After Termination\",\n      detailMessage: \"Call to SetValue failed because it was made after the call to Terminate.\",\n    },\n    \"142\": {\n      basicMessage: \"Commit Before Initialization\",\n      detailMessage: \"Call to Commit failed because it was made before the call to Initialize.\",\n    },\n    \"143\": {\n      basicMessage: \"Commit After Termination\",\n      detailMessage: \"Call to Commit failed because it was made after the call to Terminate.\",\n    },\n    \"201\": {\n      basicMessage: \"General Argument Error\",\n      detailMessage:\n        \"An invalid argument was passed to an API method (usually indicates that Initialize, Commit or Terminate did not receive the expected empty string argument.\",\n    },\n    \"301\": {\n      basicMessage: \"General Get Failure\",\n      detailMessage:\n        \"Indicates a failed GetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"351\": {\n      basicMessage: \"General Set Failure\",\n      detailMessage:\n        \"Indicates a failed SetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"391\": {\n      basicMessage: \"General Commit Failure\",\n      detailMessage:\n        \"Indicates a failed Commit call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"401\": {\n      basicMessage: \"Undefined Data Model Element\",\n      detailMessage:\n        \"The data model element name passed to GetValue or SetValue is not a valid SCORM data model element.\",\n    },\n    \"402\": {\n      basicMessage: \"Unimplemented Data Model Element\",\n      detailMessage:\n        \"The data model element indicated in a call to GetValue or SetValue is valid, but was not implemented by this LMS. In SCORM 2004, this error would indicate an LMS that is not fully SCORM conformant.\",\n    },\n    \"403\": {\n      basicMessage: \"Data Model Element Value Not Initialized\",\n      detailMessage:\n        \"Attempt to read a data model element that has not been initialized by the LMS or through a SetValue call. This error condition is often reached during normal execution of a SCO.\",\n    },\n    \"404\": {\n      basicMessage: \"Data Model Element Is Read Only\",\n      detailMessage: \"SetValue was called with a data model element that can only be read.\",\n    },\n    \"405\": {\n      basicMessage: \"Data Model Element Is Write Only\",\n      detailMessage: \"GetValue was called on a data model element that can only be written to.\",\n    },\n    \"406\": {\n      basicMessage: \"Data Model Element Type Mismatch\",\n      detailMessage:\n        \"SetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Data Model Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a SetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\n","/**\n * Constants for time conversion calculations.\n * These are used throughout the codebase for converting between different time formats.\n */\nexport const SECONDS_PER_SECOND = 1.0;\nexport const SECONDS_PER_MINUTE = 60;\nexport const SECONDS_PER_HOUR = 60 * SECONDS_PER_MINUTE;\nexport const SECONDS_PER_DAY = 24 * SECONDS_PER_HOUR;\n\ntype Designation = {\n  [key: string]: number;\n};\n\n/**\n * A record with string keys and unknown values.\n * This is a more type-safe alternative to using `any`.\n */\nexport type StringKeyMap = Record<string, unknown>;\n\nconst designations: Designation = {\n  D: SECONDS_PER_DAY,\n  H: SECONDS_PER_HOUR,\n  M: SECONDS_PER_MINUTE,\n  S: SECONDS_PER_SECOND,\n};\n\n/**\n * Converts a number of seconds to a formatted time string in HH:MM:SS format.\n * This function handles decimal seconds and ensures proper formatting with leading zeros.\n *\n * @param {number|null} totalSeconds - The total number of seconds to convert. If null or negative, returns \"00:00:00\".\n * @return {string} A formatted time string in HH:MM:SS format, with up to 2 decimal places for seconds if applicable.\n *\n * @example\n * // Returns \"01:30:45\"\n * getSecondsAsHHMMSS(5445);\n *\n * @example\n * // Returns \"00:00:30.5\"\n * getSecondsAsHHMMSS(30.5);\n *\n * @example\n * // Returns \"00:00:00\"\n * getSecondsAsHHMMSS(null);\n */\nexport const getSecondsAsHHMMSS = memoize((totalSeconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!totalSeconds || totalSeconds <= 0) {\n    return \"00:00:00\";\n  }\n\n  const hours = Math.floor(totalSeconds / SECONDS_PER_HOUR);\n  const dateObj = new Date(totalSeconds * 1000);\n  const minutes = dateObj.getUTCMinutes();\n  // make sure we add any possible decimal value\n  const seconds = dateObj.getSeconds();\n  const ms = totalSeconds % 1.0;\n  let msStr = \"\";\n\n  if (countDecimals(ms) > 0) {\n    if (countDecimals(ms) > 2) {\n      msStr = ms.toFixed(2);\n    } else {\n      msStr = String(ms);\n    }\n\n    msStr = \".\" + msStr.split(\".\")[1];\n  }\n\n  return (hours + \":\" + minutes + \":\" + seconds).replace(/\\b\\d\\b/g, \"0$&\") + msStr;\n});\n\n/**\n * Converts a number of seconds to an ISO 8601 duration string (e.g., \"PT1H30M45S\").\n * This function handles the complexity of formatting according to the ISO 8601 standard,\n * including the proper placement of the \"T\" separator for time components.\n *\n * @param {number|null} seconds - The number of seconds to convert. If null or negative, returns \"PT0S\".\n * @return {string} An ISO 8601 formatted duration string.\n *\n * @example\n * // Returns \"PT1H30M45S\" (1 hour, 30 minutes, 45 seconds)\n * getSecondsAsISODuration(5445);\n *\n * @example\n * // Returns \"PT30.5S\" (30.5 seconds)\n * getSecondsAsISODuration(30.5);\n *\n * @example\n * // Returns \"P1DT1H\" (1 day, 1 hour)\n * getSecondsAsISODuration(90000);\n *\n * @example\n * // Returns \"PT0S\" (0 seconds)\n * getSecondsAsISODuration(null);\n */\nexport const getSecondsAsISODuration = memoize((seconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!seconds || seconds <= 0) {\n    return \"PT0S\";\n  }\n\n  let duration = \"P\";\n  let remainder = seconds;\n\n  // Convert to array of entries and use functional methods\n  const designationEntries = Object.entries(designations);\n\n  // Process each time designation\n  designationEntries.forEach(([designationsKey, current_seconds]) => {\n    let value = Math.floor(remainder / current_seconds);\n    remainder = remainder % current_seconds;\n\n    // Limit decimal places\n    if (countDecimals(remainder) > 2) {\n      remainder = Number(Number(remainder).toFixed(2));\n    }\n\n    // If we have anything left in the remainder, and we're currently adding\n    // seconds to the duration, go ahead and add the decimal to the seconds\n    if (designationsKey === \"S\" && remainder > 0) {\n      value += remainder;\n    }\n\n    if (value) {\n      // Add the 'T' separator for time components if needed\n      const needsTimeSeparator =\n        (duration.indexOf(\"D\") > 0 || [\"H\", \"M\", \"S\"].includes(designationsKey)) &&\n        duration.indexOf(\"T\") === -1;\n\n      if (needsTimeSeparator) {\n        duration += \"T\";\n      }\n\n      duration += `${value}${designationsKey}`;\n    }\n  });\n\n  return duration;\n});\n\n/**\n * Converts a time string in HH:MM:SS format to the equivalent number of seconds.\n * This function is flexible and can handle various input types, converting them to strings as needed.\n *\n * @param {string|number|boolean|null} timeString - The time string to convert, typically in HH:MM:SS format.\n *                                                 If not a string, it will be converted to one.\n *                                                 If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} timeRegex - The regular expression used to validate the time string format.\n *                                    If a string is provided, it will be converted to a RegExp.\n * @return {number} The total number of seconds represented by the time string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getTimeAsSeconds(\"01:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getTimeAsSeconds(\"invalid\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 30 (converts number to string \"30\" then parses as 0:0:30)\n * getTimeAsSeconds(30, /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport const getTimeAsSeconds = memoize(\n  (timeString: string | number | boolean | null, timeRegex: RegExp | string): number => {\n    if (typeof timeString === \"number\" || typeof timeString === \"boolean\") {\n      timeString = String(timeString);\n    }\n    if (typeof timeRegex === \"string\") {\n      timeRegex = new RegExp(timeRegex);\n    }\n    if (!timeString) {\n      return 0;\n    }\n\n    if (!timeString.match(timeRegex)) {\n      // If the string represents a simple number, treat it as seconds\n      if (/^\\d+(?:\\.\\d+)?$/.test(timeString)) {\n        return Number(timeString);\n      }\n      return 0;\n    }\n\n    const parts = timeString.split(\":\");\n    const hours = Number(parts[0]);\n    const minutes = Number(parts[1]);\n    const seconds = Number(parts[2]);\n    return hours * 3600 + minutes * 60 + seconds;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (timeString, timeRegex) => {\n    const timeStr = typeof timeString === \"string\" ? timeString : String(timeString ?? \"\");\n    const regexStr = typeof timeRegex === \"string\" ? timeRegex : (timeRegex?.toString() ?? \"\");\n    return `${timeStr}:${regexStr}`;\n  },\n);\n\n/**\n * Converts an ISO 8601 duration string (e.g., \"PT1H30M45S\") to the equivalent number of seconds.\n * This function parses the duration string using a regular expression to extract years, days,\n * hours, minutes, and seconds components.\n *\n * @param {string|null} duration - The ISO 8601 duration string to convert.\n *                                If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n *                                       The regex should have capture groups for years, days, hours, minutes, and seconds.\n * @return {number} The total number of seconds represented by the duration string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getDurationAsSeconds(\"PT1H30M45S\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 90000 (1 day, 1 hour)\n * getDurationAsSeconds(\"P1DT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getDurationAsSeconds(\"invalid\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport const getDurationAsSeconds = memoize(\n  (duration: string | null, durationRegex: RegExp | string): number => {\n    if (typeof durationRegex === \"string\") {\n      durationRegex = new RegExp(durationRegex);\n    }\n\n    if (!duration || !duration?.match?.(durationRegex)) {\n      return 0;\n    }\n\n    const [, years, _, , days, hours, minutes, seconds] =\n      new RegExp(durationRegex).exec?.(duration) ?? [];\n    let result = 0.0;\n    result += Number(seconds) || 0.0;\n    result += Number(minutes) * 60.0 || 0.0;\n    result += Number(hours) * 3600.0 || 0.0;\n    result += Number(days) * (60 * 60 * 24.0) || 0.0;\n    result += Number(years) * (60 * 60 * 24 * 365.0) || 0.0;\n    return result;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (duration, durationRegex) => {\n    const durationStr = duration ?? \"\";\n    const regexStr =\n      typeof durationRegex === \"string\" ? durationRegex : (durationRegex?.toString() ?? \"\");\n    return `${durationStr}:${regexStr}`;\n  },\n);\n\n/**\n * Validates ISO 8601 duration format according to SCORM 2004 specification\n * @param {string} duration - The duration string to validate\n * @return {boolean} - True if valid ISO 8601 duration format\n */\nexport const validateISO8601Duration = memoize(\n  (duration: string, durationRegex: RegExp | string): boolean => {\n    if (typeof durationRegex === \"string\") {\n      durationRegex = new RegExp(durationRegex);\n    }\n\n    return !(!duration || !duration?.match?.(durationRegex));\n  },\n);\n\n/**\n * Adds together two ISO 8601 duration strings and returns the result as a new ISO 8601 duration string.\n * This function works by converting both durations to seconds, adding them together, and then\n * converting the result back to an ISO 8601 duration string.\n *\n * @param {string} first - The first ISO 8601 duration string.\n * @param {string} second - The second ISO 8601 duration string.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n * @return {string} A new ISO 8601 duration string representing the sum of the two input durations.\n *\n * @example\n * // Returns \"PT2H\" (1 hour + 1 hour = 2 hours)\n * addTwoDurations(\"PT1H\", \"PT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"PT1H30M\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addTwoDurations(\"PT1H\", \"PT30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"P1DT1H30M\" (1 day + 1 hour and 30 minutes = 1 day, 1 hour, and 30 minutes)\n * addTwoDurations(\"P1D\", \"PT1H30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport function addTwoDurations(\n  first: string,\n  second: string,\n  durationRegex: RegExp | string,\n): string {\n  const regex: RegExp =\n    typeof durationRegex === \"string\" ? new RegExp(durationRegex) : durationRegex;\n  return getSecondsAsISODuration(\n    getDurationAsSeconds(first, regex) + getDurationAsSeconds(second, regex),\n  );\n}\n\n/**\n * Adds together two time strings in HH:MM:SS format and returns the result as a new time string.\n * This function works by converting both time strings to seconds, adding them together, and then\n * converting the result back to an HH:MM:SS format.\n *\n * @param {string} first - The first time string in HH:MM:SS format.\n * @param {string} second - The second time string in HH:MM:SS format.\n * @param {RegExp|string} timeRegex - The regular expression used to validate and parse the time strings.\n *                                   If a string is provided, it will be converted to a RegExp.\n * @return {string} A new time string in HH:MM:SS format representing the sum of the two input times.\n *\n * @example\n * // Returns \"02:00:00\" (1 hour + 1 hour = 2 hours)\n * addHHMMSSTimeStrings(\"01:00:00\", \"01:00:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:00\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:45\" (1 hour + 30 minutes and 45 seconds = 1 hour, 30 minutes, and 45 seconds)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport function addHHMMSSTimeStrings(\n  first: string,\n  second: string,\n  timeRegex: RegExp | string,\n): string {\n  if (typeof timeRegex === \"string\") {\n    timeRegex = new RegExp(timeRegex);\n  }\n  return getSecondsAsHHMMSS(\n    getTimeAsSeconds(first, timeRegex) + getTimeAsSeconds(second, timeRegex),\n  );\n}\n\n/**\n * Flattens a nested JSON object into a flat object with dot notation for nested properties.\n * This function recursively traverses the object and creates new keys using dot notation\n * for nested objects and bracket notation for arrays.\n *\n * @param {StringKeyMap} data - The nested object to flatten.\n * @return {StringKeyMap} A flattened object where nested properties are represented with dot notation.\n *\n * @example\n * // Returns { \"a\": 1, \"b.c\": 2, \"b.d\": 3, \"e[0]\": 4, \"e[1]\": 5 }\n * flatten({\n *   a: 1,\n *   b: { c: 2, d: 3 },\n *   e: [4, 5]\n * });\n *\n * @example\n * // Returns { \"\": [] } for an empty array\n * flatten([]);\n *\n * @example\n * // Returns { \"\": {} } for an empty object\n * flatten({});\n */\nexport function flatten(data: StringKeyMap): StringKeyMap {\n  const result: StringKeyMap = {};\n\n  /**\n   * Recurse through the object\n   * @param {*} cur\n   * @param {*} prop\n   */\n  function recurse(cur: any, prop: any) {\n    if (Object(cur) !== cur) {\n      result[prop] = cur;\n    } else if (Array.isArray(cur)) {\n      // Use forEach instead of for loop\n      cur.forEach((item, i) => {\n        recurse(item, `${prop}[${i}]`);\n      });\n\n      if (cur.length === 0) result[prop] = [];\n    } else {\n      const keys = Object.keys(cur).filter((p) => Object.prototype.hasOwnProperty.call(cur, p));\n\n      const isEmpty = keys.length === 0;\n\n      // Use forEach instead of for...in loop\n      keys.forEach((p) => {\n        recurse(cur[p], prop ? `${prop}.${p}` : p);\n      });\n\n      if (isEmpty && prop) result[prop] = {};\n    }\n  }\n\n  recurse(data, \"\");\n  return result;\n}\n\n/**\n * Converts a flattened object back into a nested object structure.\n * This function is the inverse of `flatten()`. It parses dot notation and bracket notation\n * in property names to recreate the original nested structure.\n *\n * @param {StringKeyMap} data - The flattened object to unflatten.\n * @return {object} A nested object recreated from the flattened structure.\n *\n * @example\n * // Returns { a: 1, b: { c: 2, d: 3 }, e: [4, 5] }\n * unflatten({\n *   \"a\": 1,\n *   \"b.c\": 2,\n *   \"b.d\": 3,\n *   \"e[0]\": 4,\n *   \"e[1]\": 5\n * });\n *\n * @example\n * // Handles array indices correctly\n * unflatten({\n *   \"users[0].name\": \"John\",\n *   \"users[0].email\": \"john@example.com\",\n *   \"users[1].name\": \"Jane\",\n *   \"users[1].email\": \"jane@example.com\"\n * });\n * // Returns:\n * // {\n * //   users: [\n * //     { name: \"John\", email: \"john@example.com\" },\n * //     { name: \"Jane\", email: \"jane@example.com\" }\n * //   ]\n * // }\n */\nexport function unflatten(data: StringKeyMap): object {\n  \"use strict\";\n\n  if (Object(data) !== data || Array.isArray(data)) return data;\n  const result: StringKeyMap = {};\n\n  // Regex pattern for parsing property paths\n  const pattern = /\\.?([^.[\\]]+)|\\[(\\d+)]/g;\n\n  // Get all own properties and process them\n  Object.keys(data)\n    .filter((p) => Object.prototype.hasOwnProperty.call(data, p))\n    .forEach((p) => {\n      let cur = result;\n      let prop = \"\";\n\n      // Create a new regex instance for each property to reset lastIndex\n      const regex = new RegExp(pattern);\n\n      // Process all matches in the property path\n      Array.from({ length: p.match(new RegExp(pattern, \"g\"))?.length ?? 0 }, () =>\n        regex.exec(p),\n      ).forEach((m) => {\n        if (m) {\n          // Create array or object as needed\n          cur = (cur[prop] ?? (cur[prop] = m[2] ? [] : ({} as StringKeyMap))) as StringKeyMap;\n          prop = m[2] || m[1] || \"\";\n        }\n      });\n\n      cur[prop] = data[p];\n    });\n\n  return (result[\"\"] ?? result) as object;\n}\n\n/**\n * Counts the number of decimal places in a number.\n * This function handles both integer and floating-point numbers.\n *\n * @param {number} num - The number to analyze.\n * @return {number} The number of decimal places. Returns 0 for integers or if the number doesn't have a decimal point.\n *\n * @example\n * // Returns 0\n * countDecimals(42);\n *\n * @example\n * // Returns 2\n * countDecimals(3.14);\n *\n * @example\n * // Returns 5\n * countDecimals(1.23456);\n */\nexport function countDecimals(num: number): number {\n  if (Math.floor(num) === num || String(num)?.indexOf?.(\".\") < 0) return 0;\n  const parts = num.toString().split(\".\")?.[1];\n  return parts?.length ?? 0;\n}\n\n/**\n * Formats SCORM messages for consistent and readable logging.\n * This function pads the function name and CMI element to create aligned log messages\n * that are easier to read in log files or console output.\n *\n * @param {string} functionName - The name of the function that generated the message.\n * @param {string} message - The message content to be logged.\n * @param {string} [CMIElement] - Optional. The CMI element related to the message.\n * @return {string} A formatted message string with consistent padding.\n *\n * @example\n * // Returns \"initialize          : Successfully initialized\"\n * formatMessage(\"initialize\", \"Successfully initialized\");\n *\n * @example\n * // Returns \"getValue            : cmi.core.student_id                                             : 12345\"\n * formatMessage(\"getValue\", \"12345\", \"cmi.core.student_id\");\n *\n * @example\n * // Returns \"setValue            : cmi.core.lesson_status                                          : completed\"\n * formatMessage(\"setValue\", \"completed\", \"cmi.core.lesson_status\");\n */\nexport function formatMessage(functionName: string, message: string, CMIElement?: string): string {\n  const baseLength = 20;\n\n  // Use string padding instead of loops\n  const paddedFunction = functionName.padEnd(baseLength);\n  let messageString = `${paddedFunction}: `;\n\n  if (CMIElement) {\n    const CMIElementBaseLength = 70;\n    // Add CMIElement and pad to the required length\n    messageString += CMIElement;\n    messageString = messageString.padEnd(CMIElementBaseLength);\n  }\n\n  // Add the message (or empty string if null/undefined)\n  messageString += message ?? \"\";\n\n  return messageString;\n}\n\n/**\n * Checks if a string contains a specific pattern using regular expression matching.\n * This function is a wrapper around JavaScript's String.match() method that handles\n * null/undefined values gracefully.\n *\n * @param {string} str - The string to search within. If null or undefined, returns false.\n * @param {string} tester - The pattern to search for. Can be a regular expression pattern.\n * @return {boolean} True if the pattern is found in the string, false otherwise.\n *\n * @example\n * // Returns true\n * stringMatches(\"Hello, world!\", \"world\");\n *\n * @example\n * // Returns true\n * stringMatches(\"The quick brown fox\", \"\\\\w+\\\\s+\\\\w+\");\n *\n * @example\n * // Returns false\n * stringMatches(\"Hello, world!\", \"universe\");\n *\n * @example\n * // Returns false (handles null gracefully)\n * stringMatches(null, \"test\");\n */\nexport function stringMatches(str: string | null | undefined, tester: string): boolean {\n  if (typeof str !== \"string\") {\n    return false;\n  }\n  return new RegExp(tester).test(str);\n}\n\n/**\n * Creates a memoized (cached) version of a function for performance optimization.\n * This function caches the results of previous calls with the same arguments,\n * avoiding redundant calculations for repeated calls with the same input.\n *\n * @template T - The type of the function to memoize\n * @param {T} fn - The function to memoize\n * @param {Function} [keyFn] - Optional function to generate a custom cache key.\n *                           Useful for functions with complex arguments that can't be serialized.\n * @return {T} A memoized version of the input function with the same signature\n *\n * @example\n * // Basic usage with a simple function\n * const memoizedAdd = memoize((a, b) => {\n *   console.log('Calculating...');\n *   return a + b;\n * });\n *\n * memoizedAdd(1, 2); // Logs \"Calculating...\" and returns 3\n * memoizedAdd(1, 2); // Returns 3 without logging (uses cached result)\n *\n * @example\n * // Using a custom key function for objects that can't be serialized\n * const memoizedProcessUser = memoize(\n *   (user) => {\n *     console.log('Processing user...');\n *     return { ...user, processed: true };\n *   },\n *   (user) => user.id // Use user.id as the cache key\n * );\n *\n * memoizedProcessUser({ id: 123, name: 'John' }); // Logs and processes\n * memoizedProcessUser({ id: 123, name: 'John' }); // Uses cached result\n */\nexport function memoize<T extends (...args: any[]) => any>(\n  fn: T,\n  keyFn?: (...args: Parameters<T>) => string,\n): T {\n  const cache = new Map<string, ReturnType<T>>();\n\n  return ((...args: Parameters<T>): ReturnType<T> => {\n    const key = keyFn ? keyFn(...args) : JSON.stringify(args);\n\n    return cache.has(key)\n      ? (cache.get(key) as ReturnType<T>)\n      : (() => {\n          const result = fn(...args);\n          cache.set(key, result);\n          return result;\n        })();\n  }) as T;\n}\n","// Using plain objects instead of enums for better compatibility with strip-only mode\n// This approach avoids TypeScript enum runtime code while maintaining the same API\n\n// NAVBoolean values\nexport const NAVBoolean = {\n  UNKNOWN: \"unknown\",\n  TRUE: \"true\",\n  FALSE: \"false\",\n};\n\n// Type for NAVBoolean values\nexport type NAVBoolean = (typeof NAVBoolean)[keyof typeof NAVBoolean];\n\n// SuccessStatus values\nexport const SuccessStatus = {\n  PASSED: \"passed\",\n  FAILED: \"failed\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for SuccessStatus values\nexport type SuccessStatus = (typeof SuccessStatus)[keyof typeof SuccessStatus];\n\n// CompletionStatus values\nexport const CompletionStatus = {\n  COMPLETED: \"completed\",\n  INCOMPLETE: \"incomplete\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for CompletionStatus values\nexport type CompletionStatus = (typeof CompletionStatus)[keyof typeof CompletionStatus];\n\n// LogLevelEnum values\nexport const LogLevelEnum = {\n  _: 0,\n  DEBUG: 1,\n  INFO: 2,\n  WARN: 3,\n  ERROR: 4,\n  NONE: 5,\n};\n\n// Type for LogLevelEnum values\nexport type LogLevelEnum = (typeof LogLevelEnum)[keyof typeof LogLevelEnum];\n","import { InternalSettings, LogLevel, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"./api_constants\";\nimport { LogLevelEnum } from \"./enums\";\n\n/**\n * Default settings for the SCORM API\n */\nexport const DefaultSettings: InternalSettings = {\n  autocommit: false,\n  autocommitSeconds: 10,\n  asyncCommit: false,\n  sendFullCommit: true,\n  lmsCommitUrl: false,\n  dataCommitFormat: \"json\",\n  commitRequestDataType: \"application/json;charset=UTF-8\",\n  autoProgress: false,\n  logLevel: LogLevelEnum.ERROR,\n  selfReportSessionTime: false,\n  alwaysSendTotalTime: false,\n  renderCommonCommitFields: false,\n  strict_errors: true,\n  xhrHeaders: {},\n  xhrWithCredentials: false,\n  fetchMode: \"cors\",\n  useBeaconInsteadOfFetch: \"never\",\n  responseHandler: async function (response: Response): Promise<ResultObject> {\n    if (typeof response !== \"undefined\") {\n      let httpResult = null;\n\n      // Handle both text() and json() response methods\n      try {\n        if (typeof response.json === \"function\") {\n          // Try to get JSON directly if the method exists\n          httpResult = await response.json();\n        } else if (typeof response.text === \"function\") {\n          // Fall back to text() if json() is not available\n          const responseText = await response.text();\n          if (responseText) {\n            httpResult = JSON.parse(responseText);\n          }\n        }\n      } catch (e) {\n        // If parsing fails, continue with null httpResult\n      }\n\n      if (httpResult === null || !{}.hasOwnProperty.call(httpResult, \"result\")) {\n        if (response.status === 200) {\n          return {\n            result: global_constants.SCORM_TRUE,\n            errorCode: 0,\n          };\n        } else {\n          return {\n            result: global_constants.SCORM_FALSE,\n            errorCode: 101,\n          };\n        }\n      } else {\n        return {\n          result: httpResult.result,\n          errorCode: httpResult.errorCode\n            ? httpResult.errorCode\n            : httpResult.result === global_constants.SCORM_TRUE\n              ? 0\n              : 101,\n        };\n      }\n    }\n    return {\n      result: global_constants.SCORM_FALSE,\n      errorCode: 101,\n    };\n  },\n  requestHandler: function (commitObject) {\n    return commitObject;\n  },\n  onLogMessage: defaultLogHandler,\n  scoItemIds: [],\n  scoItemIdValidator: false,\n  globalObjectiveIds: [],\n\n  // Offline support settings\n  enableOfflineSupport: false,\n  courseId: \"\",\n  syncOnInitialize: true,\n  syncOnTerminate: true,\n  maxSyncAttempts: 5,\n};\n\nexport function defaultLogHandler(messageLevel: LogLevel, logMessage: string): void {\n  switch (messageLevel) {\n    case \"4\":\n    case 4:\n    case \"ERROR\":\n    case LogLevelEnum.ERROR:\n      console.error(logMessage);\n      break;\n    case \"3\":\n    case 3:\n    case \"WARN\":\n    case LogLevelEnum.WARN:\n      console.warn(logMessage);\n      break;\n    case \"2\":\n    case 2:\n    case \"INFO\":\n    case LogLevelEnum.INFO:\n      console.info(logMessage);\n      break;\n    case \"1\":\n    case 1:\n    case \"DEBUG\":\n    case LogLevelEnum.DEBUG:\n      if (console.debug) {\n        console.debug(logMessage);\n      } else {\n        console.log(logMessage);\n      }\n      break;\n  }\n}\n","import BaseAPI from \"../BaseAPI\";\n\n/**\n * Private class that wraps a timeout call to the commit() function\n */\nexport class ScheduledCommit {\n  private _API;\n  private _cancelled = false;\n  private readonly _timeout;\n  private readonly _callback;\n\n  /**\n   * Constructor for ScheduledCommit\n   * @param {BaseAPI} API\n   * @param {number} when\n   * @param {string} callback\n   */\n  constructor(API: BaseAPI, when: number, callback: string) {\n    this._API = API;\n    this._timeout = setTimeout(this.wrapper.bind(this), when);\n    this._callback = callback;\n  }\n\n  /**\n   * Cancel any currently scheduled commit\n   */\n  cancel() {\n    this._cancelled = true;\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n  }\n\n  /**\n   * Wrap the API commit call to check if the call has already been canceled\n   */\n  wrapper() {\n    if (!this._cancelled) {\n      // Only proceed with scheduled commit if API is properly initialized\n      if (this._API.isInitialized()) {\n        (async () => await this._API.commit(this._callback))();\n      }\n    }\n  }\n}\n","import { CommitObject, InternalSettings, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { IHttpService } from \"../interfaces/services\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { StringKeyMap } from \"../utilities\";\n\n/**\n * Service for handling HTTP communication with the LMS\n */\nexport class HttpService implements IHttpService {\n  private settings: InternalSettings;\n  private error_codes: ErrorCode;\n\n  /**\n   * Constructor for HttpService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   */\n  constructor(settings: InternalSettings, error_codes: ErrorCode) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n  }\n\n  /**\n   * Sends HTTP requests to the LMS with special handling for immediate and standard requests.\n   *\n   * This method handles communication with the LMS server, implementing two distinct\n   * request handling strategies based on the context:\n   *\n   * 1. Immediate Mode (used during termination):\n   *    When immediate=true, the method:\n   *    - Initiates the fetch request but doesn't wait for it to complete\n   *    - Returns a success result immediately\n   *    - Processes the response asynchronously when it arrives\n   *\n   *    This is critical for browser compatibility during page unload/termination,\n   *    as some browsers (especially Chrome) may cancel synchronous or awaited\n   *    requests when a page is closing.\n   *\n   * 2. Standard Mode (normal operation):\n   *    When immediate=false, the method:\n   *    - Processes the request parameters through the configured requestHandler\n   *    - Awaits the fetch response completely\n   *    - Transforms the response using the configured responseHandler\n   *    - Triggers appropriate event listeners based on success/failure\n   *    - Returns the complete result with appropriate error codes\n   *\n   * The method also includes error handling to catch network failures or other\n   * exceptions that might occur during the request process.\n   *\n   * @param {string} url - The URL endpoint to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The data to send to the LMS\n   * @param {boolean} immediate - Whether to send the request immediately without waiting (true) or process normally (false)\n   * @param {Function} apiLog - Function to log API messages with appropriate levels\n   * @param {Function} processListeners - Function to trigger event listeners for commit events\n   * @return {Promise<ResultObject>} - A promise that resolves with the result of the request\n   *\n   * @example\n   * // Standard request (waits for response)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   false,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   *\n   * @example\n   * // Immediate request (for termination)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   true,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   * // result will be success immediately, regardless of actual HTTP result\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n    apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    const genericError: ResultObject = {\n      result: global_constants.SCORM_FALSE,\n      errorCode: this.error_codes.GENERAL || 101,\n    };\n\n    // If immediate mode (for termination), handle differently\n    if (immediate) {\n      return this._handleImmediateRequest(url, params, apiLog, processListeners);\n    }\n\n    // Standard request processing\n    try {\n      const processedParams = this.settings.requestHandler(params) as\n        | CommitObject\n        | StringKeyMap\n        | Array<any>;\n      const response = await this.performFetch(url, processedParams);\n      return this.transformResponse(response, processListeners);\n    } catch (e: unknown) {\n      const message = e instanceof Error ? e.message : String(e);\n\n      // Enhanced error logging with more context\n      apiLog(\"processHttpRequest\", `HTTP request failed to ${url}: ${message}`, LogLevelEnum.ERROR);\n\n      if (e instanceof Error && e.stack) {\n        apiLog(\"processHttpRequest\", `Stack trace: ${e.stack}`, LogLevelEnum.DEBUG);\n      }\n\n      // Create enhanced error object with more details\n      const enhancedError: ResultObject = {\n        ...genericError,\n        errorMessage: message,\n        errorDetails: JSON.stringify({\n          url,\n          errorType: e instanceof Error ? e.constructor.name : typeof e,\n          originalError: message,\n        }),\n      };\n\n      processListeners(\"CommitError\");\n      return enhancedError;\n    }\n  }\n\n  /**\n   * Handles an immediate request (used during termination)\n   * @param {string} url - The URL to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The parameters to include in the request\n   * @param {Function} processListeners - Function to process event listeners\n   * @return {ResultObject} - A success result object\n   * @private\n   */\n  private _handleImmediateRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): ResultObject {\n    // Use Beacon API for final commit if specified in settings\n    if (this.settings.useBeaconInsteadOfFetch !== \"never\") {\n      const { body, contentType } = this._prepareRequestBody(params);\n      navigator.sendBeacon(url, new Blob([body], { type: contentType }));\n    } else {\n      // Use regular fetch with keepalive\n      this.performFetch(url, params)\n        .then(async (response) => {\n          await this.transformResponse(response, processListeners);\n        })\n        .catch((e: unknown) => {\n          const message = e instanceof Error ? e.message : String(e);\n          apiLog(\"processHttpRequest\", message, LogLevelEnum.ERROR);\n          processListeners(\"CommitError\");\n        });\n    }\n\n    // Return success immediately without waiting for response\n    return {\n      result: global_constants.SCORM_TRUE,\n      errorCode: 0,\n    };\n  }\n\n  /**\n   * Prepares the request body and content type based on params type\n   * @param {CommitObject|StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Object} - Object containing body and contentType\n   * @private\n   */\n  private _prepareRequestBody(params: CommitObject | StringKeyMap | Array<any>): {\n    body: string;\n    contentType: string;\n  } {\n    const body = params instanceof Array ? params.join(\"&\") : JSON.stringify(params);\n    const contentType =\n      params instanceof Array\n        ? \"application/x-www-form-urlencoded\"\n        : this.settings.commitRequestDataType;\n\n    return { body, contentType };\n  }\n\n  /**\n   * Perform the fetch request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - The response from the LMS\n   * @private\n   */\n  private async performFetch(url: string, params: StringKeyMap | Array<any>): Promise<Response> {\n    // Use Beacon API if specified in settings\n    if (this.settings.useBeaconInsteadOfFetch === \"always\") {\n      return this.performBeacon(url, params);\n    }\n\n    const { body, contentType } = this._prepareRequestBody(params);\n    const init = {\n      method: \"POST\",\n      mode: this.settings.fetchMode,\n      body,\n      headers: {\n        ...this.settings.xhrHeaders,\n        \"Content-Type\": contentType,\n      },\n      keepalive: true,\n    } as RequestInit;\n\n    if (this.settings.xhrWithCredentials) {\n      init.credentials = \"include\";\n    }\n\n    return fetch(url, init);\n  }\n\n  /**\n   * Perform the beacon request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - A promise that resolves with a mock Response object\n   * @private\n   */\n  private async performBeacon(url: string, params: StringKeyMap | Array<any>): Promise<Response> {\n    const { body, contentType } = this._prepareRequestBody(params);\n\n    // Send the beacon request\n    const beaconSuccess = navigator.sendBeacon(url, new Blob([body], { type: contentType }));\n\n    // Create a mock Response object since sendBeacon doesn't return a Response\n    return Promise.resolve({\n      status: beaconSuccess ? 200 : 0,\n      ok: beaconSuccess,\n      json: async () => ({\n        result: beaconSuccess ? \"true\" : \"false\",\n        errorCode: beaconSuccess ? 0 : this.error_codes.GENERAL,\n      }),\n      text: async () =>\n        JSON.stringify({\n          result: beaconSuccess ? \"true\" : \"false\",\n          errorCode: beaconSuccess ? 0 : this.error_codes.GENERAL,\n        }),\n    } as Response);\n  }\n\n  /**\n   * Transforms the response from the LMS to a ResultObject\n   * @param {Response} response - The response from the LMS\n   * @param {Function} processListeners - Function to process event listeners\n   * @return {Promise<ResultObject>} - The transformed response\n   * @private\n   */\n  private async transformResponse(\n    response: Response,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    let result: any;\n\n    try {\n      // Parse the response using the configured handler or default to json\n      result =\n        typeof this.settings.responseHandler === \"function\"\n          ? await this.settings.responseHandler(response)\n          : await response.json();\n    } catch (parseError) {\n      // If we can't parse the response, log the raw response for debugging\n      const responseText = await response.text().catch(() => \"Unable to read response text\");\n\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL || 101,\n        errorMessage: `Failed to parse LMS response: ${parseError instanceof Error ? parseError.message : String(parseError)}`,\n        errorDetails: JSON.stringify({\n          status: response.status,\n          statusText: response.statusText,\n          url: response.url,\n          responseText: responseText.substring(0, 500), // Limit response text to avoid huge logs\n          parseError: parseError instanceof Error ? parseError.message : String(parseError),\n        }),\n      };\n    }\n\n    // Ensure result has an errorCode property\n    if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n      result.errorCode = this._isSuccessResponse(response, result) ? 0 : this.error_codes.GENERAL;\n    }\n\n    // Add response details for failed requests\n    if (!this._isSuccessResponse(response, result)) {\n      result.errorDetails = {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n        ...result.errorDetails, // Preserve any existing error details\n      };\n    }\n\n    // Trigger appropriate event based on success/failure\n    if (this._isSuccessResponse(response, result)) {\n      processListeners(\"CommitSuccess\");\n    } else {\n      processListeners(\"CommitError\", undefined, result.errorCode);\n    }\n\n    return result;\n  }\n\n  /**\n   * Determines if a response is successful based on status code and result\n   * @param {Response} response - The HTTP response\n   * @param {ResultObject} result - The parsed result object\n   * @return {boolean} - Whether the response is successful\n   * @private\n   */\n  private _isSuccessResponse(response: Response, result: ResultObject): boolean {\n    const value = (result as any).result;\n    return (\n      response.status >= 200 &&\n      response.status <= 299 &&\n      (value === true || value === \"true\" || value === global_constants.SCORM_TRUE)\n    );\n  }\n\n  /**\n   * Updates the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: InternalSettings): void {\n    this.settings = settings;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { IEventService } from \"../interfaces/services\";\n\n/**\n * Interface for a listener object\n */\ninterface Listener {\n  functionName: string;\n  CMIElement: string | null;\n  callback: Function;\n}\n\n/**\n * Type for parsed listener information\n */\ninterface ParsedListener {\n  functionName: string;\n  CMIElement: string | null;\n}\n\n/**\n * Service for handling event listeners and event processing\n */\nexport class EventService implements IEventService {\n  // Map of function names to listeners for faster lookups\n  private listenerMap: Map<string, Listener[]> = new Map();\n  // Total count of listeners for logging\n  private listenerCount = 0;\n  // Function to log API messages\n  private readonly apiLog: (\n    functionName: string,\n    message: string,\n    messageLevel: LogLevel,\n    CMIElement?: string,\n  ) => void;\n\n  /**\n   * Constructor for EventService\n   * @param {Function} apiLog - Function to log API messages\n   */\n  constructor(\n    apiLog: (\n      functionName: string,\n      message: string,\n      messageLevel: LogLevel,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.apiLog = apiLog;\n  }\n\n  /**\n   * Parses a listener name into its components\n   *\n   * @param {string} listenerName - The name of the listener\n   * @returns {ParsedListener|null} - The parsed listener information or null if invalid\n   */\n  private parseListenerName(listenerName: string): ParsedListener | null {\n    const listenerSplit = listenerName.split(\".\");\n    if (listenerSplit.length === 0) return null;\n\n    const functionName = listenerSplit[0];\n    let CMIElement: string | null = null;\n\n    if (listenerSplit.length > 1) {\n      CMIElement = listenerName.replace(`${functionName}.`, \"\");\n    }\n\n    return { functionName: functionName ?? listenerName, CMIElement };\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener\n   * @param {Function} callback - The callback function to execute when the event occurs\n   */\n  on(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get or create the array for this function name\n      const listeners = this.listenerMap.get(functionName) ?? [];\n\n      // Add the new listener\n      listeners.push({\n        functionName,\n        CMIElement,\n        callback,\n      });\n\n      // Update the map and count\n      this.listenerMap.set(functionName, listeners);\n      this.listenerCount++;\n\n      this.apiLog(\n        \"on\",\n        `Added event listener: ${this.listenerCount}`,\n        LogLevelEnum.INFO,\n        functionName,\n      );\n    }\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener\n   *\n   * @param {string} listenerName - The name of the listener to remove\n   * @param {Function} callback - The callback function to remove\n   */\n  off(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get the listeners for this function name\n      const listeners = this.listenerMap.get(functionName);\n      if (!listeners) continue;\n\n      // Find the index of the listener to remove\n      const removeIndex = listeners.findIndex(\n        (obj) => obj.CMIElement === CMIElement && obj.callback === callback,\n      );\n\n      if (removeIndex !== -1) {\n        // Remove the listener\n        listeners.splice(removeIndex, 1);\n        this.listenerCount--;\n\n        // Update the map or remove the entry if empty\n        if (listeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, listeners);\n        }\n\n        this.apiLog(\n          \"off\",\n          `Removed event listener: ${this.listenerCount}`,\n          LogLevelEnum.INFO,\n          functionName,\n        );\n      }\n    }\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener to clear\n   */\n  clear(listenerName: string) {\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // If we have listeners for this function name\n      if (this.listenerMap.has(functionName)) {\n        const listeners = this.listenerMap.get(functionName)!;\n\n        // Filter out listeners that match the criteria\n        const newListeners = listeners.filter((obj) => obj.CMIElement !== CMIElement);\n\n        // Update the count and map\n        this.listenerCount -= listeners.length - newListeners.length;\n\n        if (newListeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, newListeners);\n        }\n      }\n    }\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created\n   *\n   * @param {string} functionName - The name of the function that triggered the event\n   * @param {string} CMIElement - The CMI element that was affected\n   * @param {any} value - The value that was set\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this.apiLog(functionName, value, LogLevelEnum.INFO, CMIElement);\n\n    // Get listeners for this function name\n    const listeners = this.listenerMap.get(functionName);\n    if (!listeners) return;\n\n    for (const listener of listeners) {\n      const listenerHasCMIElement = !!listener.CMIElement;\n      let CMIElementsMatch = false;\n\n      // Check if CMI elements match\n      if (CMIElement && listener.CMIElement) {\n        if (listener.CMIElement.endsWith(\"*\")) {\n          // For wildcard matches, check if the CMI element starts with the prefix\n          const prefix = listener.CMIElement.slice(0, -1);\n          CMIElementsMatch = CMIElement.startsWith(prefix);\n        } else {\n          // For exact matches, compare the strings directly\n          CMIElementsMatch = listener.CMIElement === CMIElement;\n        }\n      }\n\n      // If the listener matches, call the callback\n      if (!listenerHasCMIElement || CMIElementsMatch) {\n        this.apiLog(\n          \"processListeners\",\n          `Processing listener: ${listener.functionName}`,\n          LogLevelEnum.DEBUG,\n          CMIElement,\n        );\n\n        // Handle special event types\n        if (functionName.startsWith(\"Sequence\")) {\n          // For sequence events, pass the target as the first argument\n          listener.callback(value);\n        } else if (functionName === \"CommitError\") {\n          // For commit error events, pass the error code\n          listener.callback(value);\n        } else if (functionName === \"CommitSuccess\") {\n          // For commit success events, pass no arguments\n          listener.callback();\n        } else {\n          // For regular events, pass CMIElement and value\n          listener.callback(CMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Resets the event service by clearing all listeners\n   */\n  reset() {\n    this.listenerMap.clear();\n    this.listenerCount = 0;\n  }\n}\n","import { CommitObject, LogLevel } from \"../types/api_types\";\nimport { StringKeyMap, unflatten } from \"../utilities\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { BaseCMI } from \"../cmi/common/base_cmi\";\nimport { ISerializationService } from \"../interfaces/services\";\n\n/**\n * Service for handling data serialization and deserialization in scorm-again\n */\nexport class SerializationService implements ISerializationService {\n  /**\n   * Loads CMI data from a flattened JSON object with special handling for arrays and ordering.\n   *\n   * This method implements a complex algorithm for loading flattened JSON data into the CMI\n   * object structure. It handles several key challenges:\n   *\n   * 1. Ordering dependencies: Some CMI elements (like interactions and objectives) must be\n   *    loaded in a specific order to ensure proper initialization.\n   *\n   * 2. Array handling: Interactions and objectives are stored as arrays, and their properties\n   *    must be loaded in the correct order (e.g., 'id' and 'type' must be set before other properties).\n   *\n   * 3. Unflattening: The method converts flattened dot notation (e.g., \"cmi.objectives.0.id\")\n   *    back into nested objects before loading.\n   *\n   * The algorithm works by:\n   * - Categorizing keys into interactions, objectives, and other properties\n   * - Sorting interactions to prioritize 'id' and 'type' fields within each index\n   * - Sorting objectives to prioritize 'id' fields within each index\n   * - Processing each category in order: interactions, objectives, then other properties\n   *\n   * @param {StringKeyMap} json - The flattened JSON object with dot notation keys\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   *\n   * @param setStartingData\n   * @example\n   * // Example of flattened JSON input:\n   * // {\n   * //   \"cmi.objectives.0.id\": \"obj1\",\n   * //   \"cmi.objectives.0.score.raw\": \"80\",\n   * //   \"cmi.interactions.0.id\": \"int1\",\n   * //   \"cmi.interactions.0.type\": \"choice\",\n   * //   \"cmi.interactions.0.result\": \"correct\"\n   * // }\n   */\n  loadFromFlattenedJSON(\n    json: StringKeyMap,\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromFlattenedJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    const int_pattern = /^(cmi\\.interactions\\.)(\\d+)\\.(.*)$/;\n    const obj_pattern = /^(cmi\\.objectives\\.)(\\d+)\\.(.*)$/;\n\n    // Extract and categorize keys for better sorting\n    const interactions: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const objectives: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const others: { key: string; value: any }[] = [];\n\n    // Categorize keys\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key)) {\n        const intMatch = key.match(int_pattern);\n        if (intMatch) {\n          interactions.push({\n            key,\n            value: json[key],\n            index: Number(intMatch[2]),\n            field: intMatch[3] || \"\",\n          });\n          continue;\n        }\n\n        const objMatch = key.match(obj_pattern);\n        if (objMatch) {\n          objectives.push({\n            key,\n            value: json[key],\n            index: Number(objMatch[2]),\n            field: objMatch[3] || \"\",\n          });\n          continue;\n        }\n\n        others.push({ key, value: json[key] });\n      }\n    }\n\n    // Sort interactions: first by index, then prioritize 'id' and 'type' fields\n    interactions.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id and type\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n      if (a.field === \"type\") return -1;\n      if (b.field === \"type\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort objectives: first by index, then prioritize 'id' field\n    objectives.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort other keys alphabetically\n    others.sort((a, b) => a.key.localeCompare(b.key));\n\n    // Process all items in the correct order\n    const processItems = (items: { key: string; value: any }[]) => {\n      items.forEach((item) => {\n        const obj: StringKeyMap = {};\n        obj[item.key] = item.value;\n        this.loadFromJSON(\n          unflatten(obj) as StringKeyMap,\n          CMIElement,\n          setCMIValue,\n          isNotInitialized,\n          setStartingData,\n        );\n      });\n    };\n\n    // Process in order: interactions, objectives, others\n    processItems(interactions);\n    processItems(objectives);\n    processItems(others);\n  }\n\n  /**\n   * Loads CMI data from a nested JSON object with recursive traversal.\n   *\n   * This method implements a recursive algorithm for loading nested JSON data into the CMI\n   * object structure. It handles several key aspects:\n   *\n   * 1. Recursive traversal: The method recursively traverses the nested JSON structure,\n   *    building CMI element paths as it goes (e.g., \"cmi.core.student_id\").\n   *\n   * 2. Type-specific handling: Different data types are handled differently:\n   *    - Arrays: Each array element is processed individually with its index in the path\n   *    - Objects: Recursively processed with updated path\n   *    - Primitives: Set directly using setCMIValue\n   *\n   * 3. Initialization check: Ensures the method is only called before API initialization\n   *\n   * 4. Starting data storage: Stores the original JSON data for potential future use\n   *\n   * The algorithm works by:\n   * - First storing the complete JSON object via setStartingData\n   * - Iterating through each property in the JSON object\n   * - For each property, determining its type and handling it accordingly\n   * - Building the CMI element path as it traverses the structure\n   * - Setting values at the appropriate paths using setCMIValue\n   *\n   * @param {{[key: string]: any}} json - The nested JSON object to load\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value at a specific path\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   * @param {Function} setStartingData - Function to store the original JSON data\n   *\n   * @example\n   * // Example of nested JSON input:\n   * // {\n   * //   \"core\": {\n   * //     \"student_id\": \"12345\",\n   * //     \"student_name\": \"John Doe\"\n   * //   },\n   * //   \"objectives\": [\n   * //     { \"id\": \"obj1\", \"score\": { \"raw\": 80 } },\n   * //     { \"id\": \"obj2\", \"score\": { \"raw\": 90 } }\n   * //   ]\n   * // }\n   */\n  loadFromJSON(\n    json: { [key: string]: any },\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    CMIElement = CMIElement !== undefined ? CMIElement : \"cmi\";\n\n    setStartingData(json);\n\n    // could this be refactored down to flatten(json) then setCMIValue on each?\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key) && json[key]) {\n        const currentCMIElement = (CMIElement ? CMIElement + \".\" : \"\") + key;\n        const value = json[key];\n\n        if (value.constructor === Array) {\n          for (let i = 0; i < value.length; i++) {\n            if (value[i]) {\n              const item = value[i];\n              const tempCMIElement = `${currentCMIElement}.${i}`;\n\n              if (item.constructor === Object) {\n                this.loadFromJSON(\n                  item,\n                  tempCMIElement,\n                  setCMIValue,\n                  isNotInitialized,\n                  setStartingData,\n                );\n              } else {\n                setCMIValue(tempCMIElement, item);\n              }\n            }\n          }\n        } else if (value.constructor === Object) {\n          this.loadFromJSON(\n            value,\n            currentCMIElement,\n            setCMIValue,\n            isNotInitialized,\n            setStartingData,\n          );\n        } else {\n          setCMIValue(currentCMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Render the CMI object to JSON for sending to an LMS.\n   *\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {string}\n   */\n  renderCMIToJSONString(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): string {\n    // Do we want/need to return fields that have no set value?\n    if (sendFullCommit) {\n      return JSON.stringify({ cmi });\n    }\n    return JSON.stringify({ cmi }, (k, v) => (v === undefined ? null : v), 2);\n  }\n\n  /**\n   * Returns a JS object representing the current cmi\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {object}\n   */\n  renderCMIToJSONObject(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): StringKeyMap {\n    // Revert to the original implementation to maintain compatibility with tests\n    return JSON.parse(this.renderCMIToJSONString(cmi, sendFullCommit));\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} alwaysSendTotalTime - Whether to always send total time\n   * @param {boolean|Function} renderCommonCommitFields - Whether to render common commit fields\n   * @param {Function} renderCommitObject - Function to render commit object\n   * @param {Function} renderCommitCMI - Function to render commit CMI\n   * @param {LogLevel} apiLogLevel - The API log level\n   * @return {CommitObject|StringKeyMap|Array<any>}\n   */\n  getCommitObject(\n    terminateCommit: boolean,\n    alwaysSendTotalTime: boolean,\n    renderCommonCommitFields: boolean | ((commitObject: CommitObject) => boolean),\n    renderCommitObject: (terminateCommit: boolean, includeTotalTime?: boolean) => CommitObject,\n    renderCommitCMI: (\n      terminateCommit: boolean,\n      includeTotalTime?: boolean,\n    ) => StringKeyMap | Array<any>,\n    apiLogLevel: LogLevel,\n  ): CommitObject | StringKeyMap | Array<any> {\n    // Fix for issue: total time is being calculated incorrectly across multiple sessions\n    // when selfReportSessionTime and alwaysSendTotalTime are enabled.\n    //\n    // Previously, we were using a single variable (shouldTerminateCommit) that combined\n    // both concerns: whether this is a termination commit and whether to include total time.\n    // This caused the total time to be calculated as if every commit was a terminate commit\n    // when alwaysSendTotalTime was true, leading to incorrect time calculations.\n    //\n    // Now we pass the actual terminateCommit value and a separate parameter for whether\n    // to include total time, allowing the rendering functions to handle these concerns separately.\n    const includeTotalTime = alwaysSendTotalTime || terminateCommit;\n\n    const commitObject = renderCommonCommitFields\n      ? renderCommitObject(terminateCommit, includeTotalTime)\n      : renderCommitCMI(terminateCommit, includeTotalTime);\n\n    if ([LogLevelEnum.DEBUG, \"1\", 1, \"DEBUG\"].includes(apiLogLevel)) {\n      console.debug(\"Commit (terminated: \" + (terminateCommit ? \"yes\" : \"no\") + \"): \");\n      console.debug(commitObject);\n    }\n    return commitObject;\n  }\n}\n","type APIError = {\n  errorCode: number;\n  errorMessage: string;\n  detailedMessage: string;\n};\n\nexport class BaseScormValidationError extends Error {\n  constructor(CMIElement: string, errorCode: number) {\n    super(`${CMIElement} : ${errorCode.toString()}`);\n    this._errorCode = errorCode;\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, BaseScormValidationError.prototype);\n  }\n\n  private readonly _errorCode: number;\n\n  /**\n   * Getter for _errorCode\n   * @return {number}\n   */\n  get errorCode(): number {\n    return this._errorCode;\n  }\n}\n\n/**\n * Base Validation Exception\n */\nexport class ValidationError extends BaseScormValidationError implements APIError {\n  /**\n   * Constructor to take in an error message and code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   * @param {string} errorMessage\n   * @param {string} detailedMessage\n   */\n  constructor(\n    CMIElement: string,\n    errorCode: number,\n    errorMessage: string,\n    detailedMessage?: string,\n  ) {\n    super(CMIElement, errorCode);\n    this.message = `${CMIElement} : ${errorMessage}`;\n    this._errorMessage = errorMessage;\n    if (detailedMessage) {\n      this._detailedMessage = detailedMessage;\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  private readonly _errorMessage: string;\n  private readonly _detailedMessage: string = \"\";\n\n  /**\n   * Getter for _errorMessage\n   * @return {string}\n   */\n  get errorMessage(): string {\n    return this._errorMessage;\n  }\n\n  /**\n   * Getter for _detailedMessage\n   * @return {string}\n   */\n  get detailedMessage(): string {\n    return this._detailedMessage;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ILoggingService } from \"../interfaces/services\";\nimport { defaultLogHandler } from \"../constants/default_settings\";\n\n/**\n * Centralized logging service implemented as a singleton\n * Provides methods for logging at different levels and configuring the log level\n */\nexport class LoggingService implements ILoggingService {\n  private static _instance: LoggingService;\n  private _logLevel: LogLevel = LogLevelEnum.ERROR;\n  private _logHandler: (messageLevel: LogLevel, logMessage: string) => void;\n\n  /**\n   * Private constructor to prevent direct instantiation\n   */\n  private constructor() {\n    // Default log handler uses console methods based on log level\n    this._logHandler = defaultLogHandler;\n  }\n\n  /**\n   * Get the singleton instance of LoggingService\n   *\n   * @returns {LoggingService} The singleton instance\n   */\n  public static getInstance(): LoggingService {\n    if (!LoggingService._instance) {\n      LoggingService._instance = new LoggingService();\n    }\n    return LoggingService._instance;\n  }\n\n  /**\n   * Set the log level\n   *\n   * @param {LogLevel} level - The log level to set\n   */\n  public setLogLevel(level: LogLevel): void {\n    this._logLevel = level;\n  }\n\n  /**\n   * Get the current log level\n   *\n   * @returns {LogLevel} The current log level\n   */\n  public getLogLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  /**\n   * Set a custom log handler\n   *\n   * @param {Function} handler - The function to handle log messages\n   */\n  public setLogHandler(handler: (messageLevel: LogLevel, logMessage: string) => void): void {\n    this._logHandler = handler;\n  }\n\n  /**\n   * Log a message if the message level is greater than or equal to the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @param {string} logMessage - The message to log\n   */\n  public log(messageLevel: LogLevel, logMessage: string): void {\n    if (this.shouldLog(messageLevel)) {\n      this._logHandler(messageLevel, logMessage);\n    }\n  }\n\n  /**\n   * Log a message at ERROR level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public error(logMessage: string): void {\n    this.log(LogLevelEnum.ERROR, logMessage);\n  }\n\n  /**\n   * Log a message at WARN level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public warn(logMessage: string): void {\n    this.log(LogLevelEnum.WARN, logMessage);\n  }\n\n  /**\n   * Log a message at INFO level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public info(logMessage: string): void {\n    this.log(LogLevelEnum.INFO, logMessage);\n  }\n\n  /**\n   * Log a message at DEBUG level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public debug(logMessage: string): void {\n    this.log(LogLevelEnum.DEBUG, logMessage);\n  }\n\n  /**\n   * Determine if a message should be logged based on its level and the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @returns {boolean} Whether the message should be logged\n   */\n  private shouldLog(messageLevel: LogLevel): boolean {\n    // Convert string levels to numbers for comparison\n    const numericMessageLevel = this.getNumericLevel(messageLevel);\n    const numericLogLevel = this.getNumericLevel(this._logLevel);\n\n    return numericMessageLevel >= numericLogLevel;\n  }\n\n  /**\n   * Convert a log level to its numeric value\n   *\n   * @param {LogLevel} level - The log level to convert\n   * @returns {number} The numeric value of the log level\n   */\n  private getNumericLevel(level: LogLevel): number {\n    if (level === undefined) return LogLevelEnum.NONE;\n\n    if (typeof level === \"number\") return level;\n\n    switch (level) {\n      case \"1\":\n      case \"DEBUG\":\n        return LogLevelEnum.DEBUG;\n      case \"2\":\n      case \"INFO\":\n        return LogLevelEnum.INFO;\n      case \"3\":\n      case \"WARN\":\n        return LogLevelEnum.WARN;\n      case \"4\":\n      case \"ERROR\":\n        return LogLevelEnum.ERROR;\n      case \"5\":\n      case \"NONE\":\n        return LogLevelEnum.NONE;\n      default:\n        return LogLevelEnum.ERROR; // Default to ERROR if unknown\n    }\n  }\n}\n\n// Export a function to get the singleton instance\nexport function getLoggingService(): LoggingService {\n  return LoggingService.getInstance();\n}\n","import { LogLevelEnum } from \"../constants/enums\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { ValidationError } from \"../exceptions\";\nimport { IErrorHandlingService, ILoggingService } from \"../interfaces/services\";\nimport { getLoggingService } from \"./LoggingService\";\n\n/**\n * Service for handling SCORM errors\n */\nexport class ErrorHandlingService implements IErrorHandlingService {\n  private _lastErrorCode: string = \"0\";\n  private readonly _errorCodes: ErrorCode;\n  private readonly _apiLog: (\n    functionName: string,\n    message: string,\n    logLevel?: LogLevelEnum,\n    CMIElement?: string,\n  ) => void;\n  private readonly _getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string;\n  private readonly _loggingService: ILoggingService;\n\n  /**\n   * Constructor for ErrorHandlingService\n   *\n   * @param {ErrorCode} errorCodes - The error codes object\n   * @param {Function} apiLog - Function for logging API calls\n   * @param {Function} getLmsErrorMessageDetails - Function for getting error message details\n   * @param {ILoggingService} loggingService - Optional logging service instance\n   */\n  constructor(\n    errorCodes: ErrorCode,\n    apiLog: (\n      functionName: string,\n      message: string,\n      logLevel?: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n    loggingService?: ILoggingService,\n  ) {\n    this._errorCodes = errorCodes;\n    this._apiLog = apiLog;\n    this._getLmsErrorMessageDetails = getLmsErrorMessageDetails;\n    this._loggingService = loggingService || getLoggingService();\n  }\n\n  /**\n   * Get the last error code\n   *\n   * @return {string} - The last error code\n   */\n  get lastErrorCode(): string {\n    return this._lastErrorCode;\n  }\n\n  /**\n   * Set the last error code\n   *\n   * @param {string} errorCode - The error code to set\n   */\n  set lastErrorCode(errorCode: string) {\n    this._lastErrorCode = errorCode;\n  }\n\n  /**\n   * Throws a SCORM error\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The error number\n   * @param {string} message - The error message\n   * @throws {ValidationError} - If throwException is true, throws a ValidationError\n   */\n  throwSCORMError(CMIElement: string, errorNumber: number, message?: string): void {\n    if (!message) {\n      message = this._getLmsErrorMessageDetails(errorNumber, true);\n    }\n\n    // Format a more descriptive error message with context\n    const formattedMessage = `SCORM Error ${errorNumber}: ${message}${CMIElement ? ` [Element: ${CMIElement}]` : \"\"}`;\n\n    // Log using both the API log and the logging service for consistency\n    this._apiLog(\"throwSCORMError\", errorNumber + \": \" + message, LogLevelEnum.ERROR, CMIElement);\n    this._loggingService.error(formattedMessage);\n\n    this._lastErrorCode = String(errorNumber);\n  }\n\n  /**\n   * Clears the last SCORM error code on success.\n   *\n   * @param {string} success - Whether the operation was successful\n   */\n  clearSCORMError(success: string): void {\n    if (success !== undefined && success !== global_constants.SCORM_FALSE) {\n      this._lastErrorCode = \"0\";\n    }\n  }\n\n  /**\n   * Handles exceptions that occur when accessing or setting CMI values.\n   *\n   * This method provides centralized error handling for exceptions that occur during\n   * CMI data operations. It differentiates between different types of errors and\n   * handles them appropriately:\n   *\n   * 1. ValidationError: These are expected errors from the validation system that\n   *    indicate a specific SCORM error condition (like invalid data format or range).\n   *    For these errors, the method:\n   *    - Sets the lastErrorCode to the error code from the ValidationError\n   *    - Returns SCORM_FALSE to indicate failure to the caller\n   *\n   * 2. Standard JavaScript Error: For general JavaScript errors (like TypeError,\n   *    ReferenceError, etc.), the method:\n   *    - Logs the error message with stack trace to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * 3. Unknown exceptions: For any other type of exception that doesn't match the\n   *    above categories, the method:\n   *    - Logs the entire exception object to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * This method is critical for maintaining SCORM compliance by ensuring that\n   * all errors are properly translated into the appropriate SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {ValidationError|Error|unknown} e - The exception that was thrown\n   * @param {string} returnValue - The default return value (typically an empty string)\n   * @return {string} - Either the original returnValue or SCORM_FALSE if an error occurred\n   *\n   * @example\n   * try {\n   *   const value = getCMIValue(\"cmi.core.score.raw\");\n   *   return value;\n   * } catch (e) {\n   *   return handleValueAccessException(e, \"\");\n   * }\n   */\n  handleValueAccessException(\n    CMIElement: string,\n    e: Error | ValidationError | unknown,\n    returnValue: string,\n  ): string {\n    if (e instanceof ValidationError) {\n      const validationError = e as ValidationError;\n      this._lastErrorCode = String(validationError.errorCode);\n\n      // Log validation errors at WARN level with context\n      const errorMessage = `Validation Error ${validationError.errorCode}: ${validationError.message} [Element: ${CMIElement}]`;\n      this._loggingService.warn(errorMessage);\n\n      returnValue = global_constants.SCORM_FALSE;\n    } else if (e instanceof Error) {\n      // For standard JS errors, include the stack trace and error type\n      const errorType = e.constructor.name; // Gets the error type (e.g., TypeError, ReferenceError)\n      const errorMessage = `${errorType}: ${e.message} [Element: ${CMIElement}]`;\n      const stackTrace = e.stack || \"\";\n\n      // Log the detailed error with stack trace\n      this._loggingService.error(`${errorMessage}\\n${stackTrace}`);\n\n      this.throwSCORMError(\n        CMIElement,\n        this._errorCodes.GENERAL as number,\n        `${errorType}: ${e.message}`,\n      );\n    } else {\n      // For unknown errors, provide as much context as possible\n      const errorMessage = `Unknown error occurred while accessing [Element: ${CMIElement}]`;\n\n      this._loggingService.error(errorMessage);\n\n      try {\n        // Try to stringify the error object for more details\n        const errorDetails = JSON.stringify(e);\n        this._loggingService.error(`Error details: ${errorDetails}`);\n      } catch (jsonError) {\n        // If stringify fails, log that we couldn't get more details\n        this._loggingService.error(\"Could not stringify error object for details\");\n      }\n\n      this.throwSCORMError(CMIElement, this._errorCodes.GENERAL as number, \"Unknown error\");\n    }\n    return returnValue;\n  }\n\n  /**\n   * Get the error codes object\n   *\n   * @return {ErrorCode} - The error codes object\n   */\n  get errorCodes(): ErrorCode {\n    return this._errorCodes;\n  }\n}\n\n// Export a factory function to create the service\nexport function createErrorHandlingService(\n  errorCodes: ErrorCode,\n  apiLog: (\n    functionName: string,\n    message: string,\n    logLevel?: LogLevelEnum,\n    CMIElement?: string,\n  ) => void,\n  getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n  loggingService?: ILoggingService,\n): ErrorHandlingService {\n  return new ErrorHandlingService(errorCodes, apiLog, getLmsErrorMessageDetails, loggingService);\n}\n","import { CommitObject, InternalSettings, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ErrorCode } from \"../constants/error_codes\";\n\n/**\n * Interface for sync queue item\n */\ninterface SyncQueueItem {\n  id: string;\n  courseId: string;\n  timestamp: number;\n  data: CommitObject;\n  syncAttempts: number;\n}\n\n/**\n * Service for handling offline storage and synchronization of SCORM data\n */\nexport class OfflineStorageService {\n  private settings: InternalSettings;\n  private error_codes: ErrorCode;\n  private storeName: string = \"scorm_again_offline_data\";\n  private syncQueue: string = \"scorm_again_sync_queue\";\n  private isOnline: boolean = navigator.onLine;\n  private syncInProgress: boolean = false;\n\n  /**\n   * Constructor for OfflineStorageService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Function} apiLog - The logging function\n   */\n  constructor(\n    settings: InternalSettings,\n    error_codes: ErrorCode,\n    private apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n\n    // Initialize listeners for online/offline events\n    window.addEventListener(\"online\", this.handleOnlineStatusChange.bind(this));\n    window.addEventListener(\"offline\", this.handleOnlineStatusChange.bind(this));\n  }\n\n  /**\n   * Handle changes in online status\n   */\n  private handleOnlineStatusChange() {\n    const wasOnline = this.isOnline;\n    this.isOnline = navigator.onLine;\n\n    // If we've come back online, trigger sync process\n    if (!wasOnline && this.isOnline) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        \"Device is back online, attempting to sync...\",\n        LogLevelEnum.INFO,\n      );\n      this.syncOfflineData().then(\n        (success) => {\n          if (success) {\n            this.apiLog(\"OfflineStorageService\", \"Sync completed successfully\", LogLevelEnum.INFO);\n          } else {\n            this.apiLog(\"OfflineStorageService\", \"Sync failed\", LogLevelEnum.ERROR);\n          }\n        },\n        (error) => {\n          this.apiLog(\"OfflineStorageService\", `Error during sync: ${error}`, LogLevelEnum.ERROR);\n        },\n      );\n    } else if (wasOnline && !this.isOnline) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        \"Device is offline, data will be stored locally\",\n        LogLevelEnum.INFO,\n      );\n    }\n  }\n\n  /**\n   * Store commit data offline\n   * @param {string} courseId - Identifier for the course\n   * @param {CommitObject} commitData - The data to store offline\n   * @returns {Promise<ResultObject>} - Result of the storage operation\n   */\n  async storeOffline(courseId: string, commitData: CommitObject): Promise<ResultObject> {\n    try {\n      // Store the data in the sync queue with timestamp and unique ID\n      const queueItem: SyncQueueItem = {\n        id: `${courseId}_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`,\n        courseId,\n        timestamp: Date.now(),\n        data: commitData,\n        syncAttempts: 0,\n      };\n\n      // Get current queue\n      const currentQueue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n      currentQueue.push(queueItem);\n\n      // Save updated queue\n      await this.saveToStorage(this.syncQueue, currentQueue);\n\n      // Also update the current state in the main storage (latest known state)\n      await this.saveToStorage(`${this.storeName}_${courseId}`, commitData);\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Stored data offline for course ${courseId}`,\n        LogLevelEnum.INFO,\n      );\n\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error storing offline data: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL ?? 0,\n      };\n    }\n  }\n\n  /**\n   * Get the stored offline data for a course\n   * @param {string} courseId - Identifier for the course\n   * @returns {Promise<CommitObject|null>} - The stored data or null if not found\n   */\n  async getOfflineData(courseId: string): Promise<CommitObject | null> {\n    try {\n      const data = await this.getFromStorage<CommitObject>(`${this.storeName}_${courseId}`);\n      return data || null;\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error retrieving offline data: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return null;\n    }\n  }\n\n  /**\n   * Synchronize offline data with the LMS when connection is available\n   * @returns {Promise<boolean>} - Success status of synchronization\n   */\n  async syncOfflineData(): Promise<boolean> {\n    // Don't run multiple sync processes at once\n    if (this.syncInProgress || !this.isOnline) {\n      return false;\n    }\n\n    this.syncInProgress = true;\n\n    try {\n      // Get the queue of items to sync\n      const syncQueue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n\n      if (syncQueue.length === 0) {\n        this.syncInProgress = false;\n        return true;\n      }\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Found ${syncQueue.length} items to sync`,\n        LogLevelEnum.INFO,\n      );\n\n      // Keep track of successful and failed sync attempts\n      const remainingQueue: SyncQueueItem[] = [];\n\n      // Process each queue item\n      for (const item of syncQueue) {\n        // Skip items that have been attempted too many times\n        if (item.syncAttempts >= 5) {\n          this.apiLog(\n            \"OfflineStorageService\",\n            `Skipping item ${item.id} after 5 failed attempts`,\n            LogLevelEnum.WARN,\n          );\n          continue;\n        }\n\n        try {\n          // Attempt to sync this item\n          const syncResult = await this.sendDataToLMS(item.data);\n\n          if (syncResult.result === global_constants.SCORM_TRUE) {\n            // Sync was successful, no need to keep this item\n            this.apiLog(\n              \"OfflineStorageService\",\n              `Successfully synced item ${item.id}`,\n              LogLevelEnum.INFO,\n            );\n          } else {\n            // Sync failed, increment attempts and keep in queue\n            item.syncAttempts++;\n            remainingQueue.push(item);\n            this.apiLog(\n              \"OfflineStorageService\",\n              `Failed to sync item ${item.id}, attempt #${item.syncAttempts}`,\n              LogLevelEnum.WARN,\n            );\n          }\n        } catch (error) {\n          // On error, increment attempts and keep in queue\n          item.syncAttempts++;\n          remainingQueue.push(item);\n          this.apiLog(\n            \"OfflineStorageService\",\n            `Error syncing item ${item.id}: ${error}`,\n            LogLevelEnum.ERROR,\n          );\n        }\n      }\n\n      // Update the queue with remaining items\n      await this.saveToStorage(this.syncQueue, remainingQueue);\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Sync completed. ${syncQueue.length - remainingQueue.length} items synced, ${remainingQueue.length} items remaining`,\n        LogLevelEnum.INFO,\n      );\n\n      this.syncInProgress = false;\n      return true;\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error during sync process: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      this.syncInProgress = false;\n      return false;\n    }\n  }\n\n  /**\n   * Send data to the LMS when online\n   * @param {CommitObject} data - The data to send to the LMS\n   * @returns {Promise<ResultObject>} - Result of the sync operation\n   */\n  private async sendDataToLMS(data: CommitObject): Promise<ResultObject> {\n    if (!this.settings.lmsCommitUrl) {\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL || 101,\n      };\n    }\n\n    try {\n      // Apply request handler if configured\n      const processedData = this.settings.requestHandler(data);\n\n      // Send the data to the LMS\n      const init = {\n        method: \"POST\",\n        mode: this.settings.fetchMode,\n        body: JSON.stringify(processedData),\n        headers: {\n          ...this.settings.xhrHeaders,\n          \"Content-Type\": this.settings.commitRequestDataType,\n        },\n      } as RequestInit;\n\n      if (this.settings.xhrWithCredentials) {\n        init.credentials = \"include\";\n      }\n\n      const response = await fetch(this.settings.lmsCommitUrl as string, init);\n\n      // Process the response using the configured handler\n      const result =\n        typeof this.settings.responseHandler === \"function\"\n          ? await this.settings.responseHandler(response)\n          : await response.json();\n\n      if (\n        response.status >= 200 &&\n        response.status <= 299 &&\n        (result.result === true || result.result === global_constants.SCORM_TRUE)\n      ) {\n        if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n          result.errorCode = 0;\n        }\n        return result;\n      } else {\n        if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n          result.errorCode = this.error_codes.GENERAL;\n        }\n        return result;\n      }\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error sending data to LMS: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL || 101,\n      };\n    }\n  }\n\n  /**\n   * Check if the device is currently online\n   * @returns {boolean} - Online status\n   */\n  isDeviceOnline(): boolean {\n    return this.isOnline;\n  }\n\n  // noinspection JSValidateJSDoc\n  /**\n   * Get item from localStorage\n   * @param {string} key - The key to retrieve\n   * @returns {Promise<T|null>} - The retrieved data\n   */\n  private async getFromStorage<T>(key: string): Promise<T | null> {\n    const storedData = localStorage.getItem(key);\n    if (storedData) {\n      try {\n        return JSON.parse(storedData) as T;\n      } catch (e) {\n        return null;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Save item to localStorage\n   * @param {string} key - The key to store under\n   * @param {any} data - The data to store\n   * @returns {Promise<void>}\n   */\n  private async saveToStorage(key: string, data: any): Promise<void> {\n    localStorage.setItem(key, JSON.stringify(data));\n  }\n\n  /**\n   * Check if there is pending offline data for a course\n   * @param {string} courseId - Identifier for the course\n   * @returns {Promise<boolean>} - Whether there is pending data\n   */\n  async hasPendingOfflineData(courseId: string): Promise<boolean> {\n    const queue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n    return queue.some((item) => item.courseId === courseId);\n  }\n\n  /**\n   * Update the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: InternalSettings): void {\n    this.settings = settings;\n  }\n}\n","/**\n * Base class for API cmi objects\n */\nexport abstract class BaseCMI {\n  jsonString = false;\n  protected readonly _cmi_element: string;\n  protected _initialized = false;\n\n  /**\n   * Constructor for BaseCMI\n   * @param {string} cmi_element\n   */\n  constructor(cmi_element: string) {\n    this._cmi_element = cmi_element;\n  }\n\n  /**\n   * Getter for _initialized\n   * @return {boolean}\n   */\n  get initialized(): boolean {\n    return this._initialized;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize(): void {\n    this._initialized = true;\n  }\n\n  abstract reset(): void;\n}\n\n/**\n * Base class for cmi root objects\n */\nexport abstract class BaseRootCMI extends BaseCMI {\n  protected _start_time: number | undefined;\n\n  /**\n   * Start time of the course\n   * @type {number | undefined}\n   * @protected\n   */\n  get start_time(): number | undefined {\n    return this._start_time;\n  }\n\n  /**\n   * Setter for start_time. Can only be called once.\n   */\n  setStartTime(): void {\n    if (this._start_time === undefined) {\n      this._start_time = new Date().getTime();\n    } else {\n      throw new Error(\"Start time has already been set.\");\n    }\n  }\n\n  abstract getCurrentTotalTime(): string;\n}\n","export type ErrorCode = {\n  [key: string]: number;\n};\n\nexport const global_errors: ErrorCode = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nexport const scorm12_errors: ErrorCode = {\n  ...global_errors,\n  RETRIEVE_BEFORE_INIT: 301,\n  STORE_BEFORE_INIT: 301,\n  COMMIT_BEFORE_INIT: 301,\n  ARGUMENT_ERROR: 201,\n  CHILDREN_ERROR: 202,\n  COUNT_ERROR: 203,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 401,\n  VALUE_NOT_INITIALIZED: 301,\n  INVALID_SET_VALUE: 402,\n  READ_ONLY_ELEMENT: 403,\n  WRITE_ONLY_ELEMENT: 404,\n  TYPE_MISMATCH: 405,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n\nexport const scorm2004_errors: ErrorCode = {\n  ...global_errors,\n  INITIALIZATION_FAILED: 102,\n  INITIALIZED: 103,\n  TERMINATED: 104,\n  TERMINATION_FAILURE: 111,\n  TERMINATION_BEFORE_INIT: 112,\n  MULTIPLE_TERMINATION: 113,\n  MULTIPLE_TERMINATIONS: 113,\n  RETRIEVE_BEFORE_INIT: 122,\n  RETRIEVE_AFTER_TERM: 123,\n  STORE_BEFORE_INIT: 132,\n  STORE_AFTER_TERM: 133,\n  COMMIT_BEFORE_INIT: 142,\n  COMMIT_AFTER_TERM: 143,\n  ARGUMENT_ERROR: 201,\n  GENERAL_GET_FAILURE: 301,\n  GENERAL_SET_FAILURE: 351,\n  GENERAL_COMMIT_FAILURE: 391,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 402,\n  VALUE_NOT_INITIALIZED: 403,\n  READ_ONLY_ELEMENT: 404,\n  WRITE_ONLY_ELEMENT: 405,\n  TYPE_MISMATCH: 406,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n","import { BaseCMI } from \"./base_cmi\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Base class for cmi *.n objects\n */\nexport class CMIArray extends BaseCMI {\n  private readonly _errorCode: number;\n  private readonly _errorClass: typeof BaseScormValidationError;\n  private readonly __children: string;\n  public childArray: any[];\n\n  /**\n   * Constructor cmi *.n arrays\n   * @param {object} params\n   */\n  constructor(params: {\n    CMIElement: string;\n    children: string;\n    errorCode?: number;\n    errorClass?: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n    this.__children = params.children;\n    this._errorCode = params.errorCode || (scorm12_errors.GENERAL as number);\n    this._errorClass = params.errorClass || BaseScormValidationError;\n    this.childArray = [];\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(wipe: boolean = false): void {\n    this._initialized = false;\n    if (wipe) {\n      this.childArray = [];\n    } else {\n      // Reset all children\n      for (let i = 0; i < this.childArray.length; i++) {\n        this.childArray[i].reset();\n      }\n    }\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this._errorClass(this._cmi_element + \"._children\", this._errorCode);\n  }\n\n  /**\n   * Getter for _count\n   * @return {number}\n   */\n  get _count(): number {\n    return this.childArray.length;\n  }\n\n  /**\n   * Setter for _count. Just throws an error.\n   * @param {number} _count\n   */\n  set _count(_count: number) {\n    throw new this._errorClass(this._cmi_element + \"._count\", this._errorCode);\n  }\n\n  /**\n   * toJSON for *.n arrays\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result: { [key: string]: any } = {};\n    for (let i = 0; i < this.childArray.length; i++) {\n      result[i + \"\"] = this.childArray[i];\n    }\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { ErrorCode } from \"./constants/error_codes\";\nimport { global_constants } from \"./constants/api_constants\";\nimport * as Utilities from \"./utilities\";\nimport { formatMessage, StringKeyMap, stringMatches } from \"./utilities\";\nimport { BaseCMI, BaseRootCMI } from \"./cmi/common/base_cmi\";\nimport {\n  CommitObject,\n  InternalSettings,\n  LogLevel,\n  ResultObject,\n  Settings,\n} from \"./types/api_types\";\nimport { defaultLogHandler, DefaultSettings } from \"./constants/default_settings\";\nimport { IBaseAPI } from \"./interfaces/IBaseAPI\";\nimport { ScheduledCommit } from \"./types/scheduled_commit\";\nimport { LogLevelEnum } from \"./constants/enums\";\nimport { HttpService } from \"./services/HttpService\";\nimport { EventService } from \"./services/EventService\";\nimport { SerializationService } from \"./services/SerializationService\";\nimport { createErrorHandlingService } from \"./services/ErrorHandlingService\";\nimport { getLoggingService } from \"./services/LoggingService\";\nimport { OfflineStorageService } from \"./services/OfflineStorageService\";\nimport {\n  ICMIDataService,\n  IErrorHandlingService,\n  IEventService,\n  IHttpService,\n  ILoggingService,\n  IOfflineStorageService,\n  ISerializationService,\n} from \"./interfaces/services\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { ValidationError } from \"./exceptions\";\n\n/**\n * Base API class for AICC, SCORM 1.2, and SCORM 2004. Should be considered\n * abstract, and never initialized on its own.\n */\nexport default abstract class BaseAPI implements IBaseAPI {\n  private _timeout?: ScheduledCommit | undefined;\n  private readonly _error_codes: ErrorCode;\n  private _settings: InternalSettings = DefaultSettings;\n  private readonly _httpService: IHttpService;\n  private _eventService: IEventService;\n  private _serializationService: ISerializationService;\n  private readonly _errorHandlingService: IErrorHandlingService;\n  private readonly _loggingService: ILoggingService;\n  private readonly _offlineStorageService?: IOfflineStorageService;\n  private _courseId: string = \"\";\n\n  /**\n   * Constructor for Base API class. Sets some shared API fields, as well as\n   * sets up options for the API.\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Settings} settings - Optional settings for the API\n   * @param {IHttpService} httpService - Optional HTTP service instance\n   * @param {IEventService} eventService - Optional Event service instance\n   * @param {ISerializationService} serializationService - Optional Serialization service instance\n   * @param {ICMIDataService} cmiDataService - Optional CMI Data service instance\n   * @param {IErrorHandlingService} errorHandlingService - Optional Error Handling service instance\n   * @param {ILoggingService} loggingService - Optional Logging service instance\n   * @param {IOfflineStorageService} offlineStorageService - Optional Offline Storage service instance\n   */\n  protected constructor(\n    error_codes: ErrorCode,\n    settings?: Settings,\n    httpService?: IHttpService,\n    eventService?: IEventService,\n    serializationService?: ISerializationService,\n    cmiDataService?: ICMIDataService,\n    errorHandlingService?: IErrorHandlingService,\n    loggingService?: ILoggingService,\n    offlineStorageService?: IOfflineStorageService,\n  ) {\n    if (new.target === BaseAPI) {\n      throw new TypeError(\"Cannot construct BaseAPI instances directly\");\n    }\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n\n    this._error_codes = error_codes;\n\n    if (settings) {\n      this.settings = {\n        ...DefaultSettings,\n        ...settings,\n      } as InternalSettings;\n    }\n\n    // Initialize and configure LoggingService\n    this._loggingService = loggingService || getLoggingService();\n    this._loggingService.setLogLevel(this.settings.logLevel);\n\n    // If settings include a custom onLogMessage function, use it as the log handler\n    if (this.settings.onLogMessage) {\n      this._loggingService.setLogHandler(this.settings.onLogMessage);\n    } else {\n      this._loggingService.setLogHandler(defaultLogHandler);\n    }\n\n    // Initialize HTTP service\n    this._httpService = httpService || new HttpService(this.settings, this._error_codes);\n\n    // Initialize Event service\n    this._eventService =\n      eventService ||\n      new EventService((functionName, message, level, element) =>\n        this.apiLog(functionName, message, level, element),\n      );\n\n    // Initialize Serialization service\n    this._serializationService = serializationService || new SerializationService();\n\n    // Initialize Error Handling service\n    this._errorHandlingService =\n      errorHandlingService ||\n      createErrorHandlingService(\n        this._error_codes,\n        (functionName, message, level, element) =>\n          this.apiLog(functionName, message, level || LogLevelEnum.ERROR, element),\n        (errorNumber, detail) => this.getLmsErrorMessageDetails(errorNumber, detail),\n      );\n\n    // Initialize Offline Storage service if enabled\n    if (this.settings.enableOfflineSupport) {\n      this._offlineStorageService =\n        offlineStorageService ||\n        new OfflineStorageService(\n          this.settings,\n          this._error_codes,\n          (functionName, message, level, element) =>\n            this.apiLog(functionName, message, level, element),\n        );\n\n      if (this.settings.courseId) {\n        this._courseId = this.settings.courseId;\n      }\n\n      // Check for offline data to restore on initialization\n      if (this._offlineStorageService && this._courseId) {\n        this._offlineStorageService\n          .getOfflineData(this._courseId)\n          .then((offlineData) => {\n            if (offlineData) {\n              this.apiLog(\"constructor\", \"Found offline data to restore\", LogLevelEnum.INFO);\n              // Restore data from offline storage\n              this.loadFromJSON(offlineData.runtimeData);\n            }\n          })\n          .catch((error) => {\n            this.apiLog(\n              \"constructor\",\n              `Error retrieving offline data: ${error}`,\n              LogLevelEnum.ERROR,\n            );\n          });\n      }\n    }\n  }\n\n  public abstract cmi: BaseCMI;\n  public startingData?: StringKeyMap;\n\n  public currentState: number;\n\n  /**\n   * Get the last error code\n   * @return {string}\n   */\n  get lastErrorCode(): string {\n    return this._errorHandlingService?.lastErrorCode ?? \"0\";\n  }\n\n  /**\n   * Set the last error code\n   * @param {string} errorCode\n   */\n  set lastErrorCode(errorCode: string) {\n    if (this._errorHandlingService) {\n      this._errorHandlingService.lastErrorCode = errorCode;\n    }\n  }\n\n  /**\n   * Protected getter for eventService\n   * @return {IEventService}\n   */\n  protected get eventService(): IEventService {\n    return this._eventService;\n  }\n\n  /**\n   * Protected getter for loggingService\n   * @return {ILoggingService}\n   */\n  protected get loggingService(): ILoggingService {\n    return this._loggingService;\n  }\n\n  /**\n   * Reset the API to its initial state.\n   * This method clears all current data and resets the API to an uninitialized state.\n   * It can optionally accept new settings to configure the API after reset.\n   *\n   * @param {Settings} settings - Optional new settings to apply after reset\n   */\n  abstract reset(settings?: Settings): void;\n\n  /**\n   * Common reset method for all APIs. New settings are merged with the existing settings.\n   * @param {Settings} settings\n   * @protected\n   */\n  commonReset(settings?: Settings): void {\n    this.apiLog(\"reset\", \"Called\", LogLevelEnum.INFO);\n\n    this.settings = { ...this.settings, ...settings };\n\n    this.clearScheduledCommit();\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n    this.lastErrorCode = \"0\";\n    this._eventService.reset();\n    this.startingData = {};\n\n    // Update offline storage service with new settings if it exists\n    if (this._offlineStorageService) {\n      this._offlineStorageService.updateSettings(this.settings);\n\n      if (settings?.courseId) {\n        this._courseId = settings.courseId;\n      }\n    }\n  }\n\n  /**\n   * Initialize the API\n   * @param {string} callbackName\n   * @param {string} initializeMessage\n   * @param {string} terminationMessage\n   * @return {string}\n   */\n  initialize(\n    callbackName: string,\n    initializeMessage?: string,\n    terminationMessage?: string,\n  ): string {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.isInitialized()) {\n      this.throwSCORMError(\"api\", this._error_codes.INITIALIZED, initializeMessage);\n    } else if (this.isTerminated()) {\n      this.throwSCORMError(\"api\", this._error_codes.TERMINATED, terminationMessage);\n    } else {\n      if (this.settings.selfReportSessionTime) {\n        (this.cmi as BaseRootCMI).setStartTime();\n      }\n\n      this.currentState = global_constants.STATE_INITIALIZED;\n      this.lastErrorCode = \"0\";\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n\n      // If enabled, attempt to sync offline data on initialization\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._courseId &&\n        this.settings.syncOnInitialize &&\n        this._offlineStorageService.isDeviceOnline()\n      ) {\n        this._offlineStorageService.hasPendingOfflineData(this._courseId).then((hasPendingData) => {\n          if (hasPendingData) {\n            this.apiLog(\n              callbackName,\n              \"Syncing pending offline data on initialization\",\n              LogLevelEnum.INFO,\n            );\n            this._offlineStorageService?.syncOfflineData().then((syncSuccess) => {\n              if (syncSuccess) {\n                this.apiLog(callbackName, \"Successfully synced offline data\", LogLevelEnum.INFO);\n                this.processListeners(\"OfflineDataSynced\");\n              }\n            });\n          }\n        });\n      }\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Initialize the LMS API\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsInitialize(): string;\n\n  /**\n   * Finish the current LMS API session\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsFinish(): string;\n\n  /**\n   * Get the value of a CMI element from the LMS\n   * @param {string} CMIElement - The CMI element to get the value of\n   * @return {string} The value of the CMI element\n   */\n  abstract lmsGetValue(CMIElement: string): string;\n\n  /**\n   * Set the value of a CMI element in the LMS\n   * @param {string} CMIElement - The CMI element to set the value of\n   * @param {any} value - The value to set\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsSetValue(CMIElement: string, value: any): string;\n\n  /**\n   * Commit the current data to the LMS\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsCommit(): string;\n\n  /**\n   * Get the last error code from the LMS\n   * @return {string} The last error code\n   */\n  abstract lmsGetLastError(): string;\n\n  /**\n   * Get the error string for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get the string for\n   * @return {string} The error string\n   */\n  abstract lmsGetErrorString(CMIErrorCode: string | number): string;\n\n  /**\n   * Get diagnostic information for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get diagnostic information for\n   * @return {string} The diagnostic information\n   */\n  abstract lmsGetDiagnostic(CMIErrorCode: string | number): string;\n\n  /**\n   * Abstract method for validating that a response is correct.\n   * This method is used to validate the format and content of a response\n   * before it is set in the CMI data model.\n   *\n   * @param {string} _CMIElement - The CMI element path to validate\n   * @param {any} _value - The value to validate\n   * @throws {Error} If the response format is invalid\n   */\n  abstract validateCorrectResponse(_CMIElement: string, _value: any): void;\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   * APIs that inherit BaseAPI should override this method.\n   *\n   * @param {string} _CMIElement - unused\n   * @param {*} _value - unused\n   * @param {boolean} _foundFirstIndex - unused\n   * @return {BaseCMI|null}\n   * @abstract\n   */\n  abstract getChildElement(\n    _CMIElement: string,\n    _value: any,\n    _foundFirstIndex: boolean,\n  ): BaseCMI | null;\n\n  /**\n   * Attempts to store the data to the LMS, logs data if no LMS configured\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _calculateTotalTime\n   * @return {ResultObject}\n   * @abstract\n   */\n  abstract storeData(_calculateTotalTime: boolean): Promise<ResultObject>;\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   *\n   * @param {boolean} _terminateCommit - Whether this commit is part of the termination process\n   * @param {boolean} [_includeTotalTime] - Whether to include total time in the commit data\n   * @return {StringKeyMap|Array}\n   * @abstract\n   */\n  abstract renderCommitCMI(\n    _terminateCommit: boolean,\n    _includeTotalTime?: boolean,\n  ): StringKeyMap | Array<string>;\n\n  /**\n   * Render the commit object to the shortened format for LMS commit.\n   * This method transforms the CMI data into a format suitable for sending to the LMS.\n   * It is called during the commit process to prepare the data for transmission.\n   *\n   * @param {boolean} _terminateCommit - Whether this commit is part of the termination process\n   * @param {boolean} [_includeTotalTime] - Whether to include total time in the commit data\n   * @return {CommitObject} A formatted object containing the data to be sent to the LMS\n   * @example\n   * // Example of a commit object structure\n   * {\n   *   method: \"POST\",\n   *   params: {\n   *     cmi: { ... },\n   *     finishState: \"COMPLETED\"\n   *   }\n   * }\n   */\n  abstract renderCommitObject(_terminateCommit: boolean, _includeTotalTime?: boolean): CommitObject;\n\n  /**\n   * Logging for all SCORM actions\n   *\n   * @param {string} functionName\n   * @param {string} logMessage\n   * @param {number} messageLevel\n   * @param {string} CMIElement\n   */\n  apiLog(functionName: string, logMessage: string, messageLevel: LogLevel, CMIElement?: string) {\n    logMessage = formatMessage(functionName, logMessage, CMIElement);\n\n    // Delegate to LoggingService which handles log level comparison properly\n    this._loggingService.log(messageLevel, logMessage);\n  }\n\n  /**\n   * Getter for _settings\n   * @return {InternalSettings}\n   */\n  get settings(): InternalSettings {\n    return this._settings;\n  }\n\n  /**\n   * Setter for _settings\n   * @param {Settings} settings\n   */\n  set settings(settings: Settings) {\n    const previousSettings = this._settings;\n    // Merge the incoming settings with the existing settings\n    this._settings = { ...this._settings, ...settings } as InternalSettings;\n\n    // Update HTTP service settings\n    this._httpService?.updateSettings(this._settings);\n\n    // The following properties are duplicated as class properties for easier access\n    // and need to be manually updated to stay in sync with the settings object\n\n    // Update log level if it changed\n    if (settings.logLevel !== undefined && settings.logLevel !== previousSettings.logLevel) {\n      this._loggingService?.setLogLevel(settings.logLevel);\n    }\n\n    // Update log handler if onLogMessage changed\n    if (\n      settings.onLogMessage !== undefined &&\n      settings.onLogMessage !== previousSettings.onLogMessage\n    ) {\n      this._loggingService?.setLogHandler(settings.onLogMessage);\n    }\n  }\n\n  /**\n   * Terminates the current run of the API\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async terminate(callbackName: string, checkTerminated: boolean): Promise<string> {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.TERMINATION_BEFORE_INIT ?? 0,\n        this._error_codes.MULTIPLE_TERMINATION ?? 0,\n      )\n    ) {\n      this.currentState = global_constants.STATE_TERMINATED;\n      // If enabled, attempt to sync offline data before termination\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._courseId &&\n        this.settings.syncOnTerminate &&\n        this._offlineStorageService.isDeviceOnline()\n      ) {\n        const hasPendingData = await this._offlineStorageService.hasPendingOfflineData(\n          this._courseId,\n        );\n        if (hasPendingData) {\n          this.apiLog(\n            callbackName,\n            \"Syncing pending offline data before termination\",\n            LogLevelEnum.INFO,\n          );\n          await this._offlineStorageService.syncOfflineData();\n        }\n      }\n\n      const result: ResultObject = await this.storeData(true);\n      if ((result.errorCode ?? 0) > 0) {\n        // Log detailed error information before throwing SCORM error\n        if (result.errorMessage) {\n          this.apiLog(\n            \"terminate\",\n            `Terminate failed with error: ${result.errorMessage}`,\n            LogLevelEnum.ERROR,\n          );\n        }\n        if (result.errorDetails) {\n          this.apiLog(\n            \"terminate\",\n            `Error details: ${JSON.stringify(result.errorDetails)}`,\n            LogLevelEnum.DEBUG,\n          );\n        }\n        this.throwSCORMError(\"api\", result.errorCode ?? 0);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Get the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  getValue(callbackName: string, checkTerminated: boolean, CMIElement: string): string {\n    let returnValue: string = \"\";\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.RETRIEVE_BEFORE_INIT ?? 0,\n        this._error_codes.RETRIEVE_AFTER_TERM ?? 0,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.getCMIValue(CMIElement);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement);\n    }\n\n    this.apiLog(callbackName, \": returned: \" + returnValue, LogLevelEnum.INFO, CMIElement);\n\n    if (returnValue === undefined) {\n      return \"\";\n    }\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Sets the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {string} commitCallback\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  setValue(\n    callbackName: string,\n    commitCallback: string,\n    checkTerminated: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (value !== undefined) {\n      value = String(value);\n    }\n    let returnValue: string = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.STORE_BEFORE_INIT ?? 0,\n        this._error_codes.STORE_AFTER_TERM ?? 0,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.setCMIValue(CMIElement, value);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement, value);\n    }\n\n    if (returnValue === undefined) {\n      returnValue = global_constants.SCORM_FALSE;\n    }\n\n    // If we didn't have any errors while setting the data, go ahead and\n    // schedule a commit, if autocommit is turned on\n    if (String(this.lastErrorCode) === \"0\") {\n      if (this.settings.autocommit) {\n        this.scheduleCommit(this.settings.autocommitSeconds * 1000, commitCallback);\n      }\n    }\n\n    this.apiLog(\n      callbackName,\n      \": \" + value + \": result: \" + returnValue,\n      LogLevelEnum.INFO,\n      CMIElement,\n    );\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async commit(callbackName: string, checkTerminated: boolean = false): Promise<string> {\n    this.clearScheduledCommit();\n\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.COMMIT_BEFORE_INIT ?? 0,\n        this._error_codes.COMMIT_AFTER_TERM ?? 0,\n      )\n    ) {\n      const result = await this.storeData(false);\n      if ((result.errorCode ?? 0) > 0) {\n        // Log detailed error information before throwing SCORM error\n        if (result.errorMessage) {\n          this.apiLog(\n            \"commit\",\n            `Commit failed with error: ${result.errorMessage}`,\n            LogLevelEnum.ERROR,\n          );\n        }\n        if (result.errorDetails) {\n          this.apiLog(\n            \"commit\",\n            `Error details: ${JSON.stringify(result.errorDetails)}`,\n            LogLevelEnum.DEBUG,\n          );\n        }\n        this.throwSCORMError(\"api\", result.errorCode);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      this.apiLog(callbackName, \" Result: \" + returnValue, LogLevelEnum.DEBUG, \"HttpRequest\");\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      this.processListeners(callbackName);\n\n      // If online and there is offline data pending, attempt to sync it\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._offlineStorageService.isDeviceOnline() &&\n        this._courseId\n      ) {\n        this._offlineStorageService.hasPendingOfflineData(this._courseId).then((hasPendingData) => {\n          if (hasPendingData) {\n            this.apiLog(callbackName, \"Syncing pending offline data\", LogLevelEnum.INFO);\n            this._offlineStorageService?.syncOfflineData().then((syncSuccess) => {\n              if (syncSuccess) {\n                this.apiLog(callbackName, \"Successfully synced offline data\", LogLevelEnum.INFO);\n                this.processListeners(\"OfflineDataSynced\");\n              } else {\n                this.apiLog(callbackName, \"Failed to sync some offline data\", LogLevelEnum.WARN);\n              }\n            });\n          }\n        });\n      }\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Returns last error code\n   * @param {string} callbackName\n   * @return {string}\n   */\n  getLastError(callbackName: string): string {\n    const returnValue = String(this.lastErrorCode);\n\n    this.processListeners(callbackName);\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getErrorString(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getDiagnostic(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode, true);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Checks the LMS state and ensures it has been initialized.\n   *\n   * @param {boolean} checkTerminated\n   * @param {number} beforeInitError\n   * @param {number} afterTermError\n   * @return {boolean}\n   */\n  checkState(checkTerminated: boolean, beforeInitError: number, afterTermError: number): boolean {\n    if (this.isNotInitialized()) {\n      this.throwSCORMError(\"api\", beforeInitError);\n      return false;\n    } else if (checkTerminated && this.isTerminated()) {\n      this.throwSCORMError(\"api\", afterTermError);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {(string|number)} _errorNumber\n   * @param {boolean} _detail\n   * @return {string}\n   * @abstract\n   */\n  getLmsErrorMessageDetails(_errorNumber: string | number, _detail: boolean = false): string {\n    throw new Error(\"The getLmsErrorMessageDetails method has not been implemented\");\n  }\n\n  /**\n   * Gets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @return {string}\n   * @abstract\n   */\n  getCMIValue(_CMIElement: string): string {\n    throw new Error(\"The getCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Sets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @param {any} _value\n   * @return {string}\n   * @abstract\n   */\n  setCMIValue(_CMIElement: string, _value: any): string {\n    throw new Error(\"The setCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Shared API method to set a valid for a given element.\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  _commonSetCMIValue(\n    methodName: string,\n    scorm2004: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (!CMIElement || CMIElement === \"\") {\n      return global_constants.SCORM_FALSE;\n    }\n\n    this.lastErrorCode = \"0\";\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap | BaseCMI = this as StringKeyMap;\n    let returnValue = global_constants.SCORM_FALSE;\n    let foundFirstIndex = false;\n\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      const attribute = structure[idx];\n\n      if (idx === structure.length - 1) {\n        if (scorm2004 && attribute && attribute.substring(0, 8) === \"{target=\") {\n          if (this.isInitialized()) {\n            this.throwSCORMError(CMIElement, this._error_codes.READ_ONLY_ELEMENT);\n            break;\n          } else {\n            refObject = {\n              ...refObject,\n              attribute: value,\n            };\n          }\n        } else if (\n          typeof attribute === \"undefined\" ||\n          !this._checkObjectHasProperty(refObject as StringKeyMap, attribute)\n        ) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        } else {\n          if (\n            stringMatches(CMIElement, \"\\\\.correct_responses\\\\.\\\\d+$\") &&\n            this.isInitialized() &&\n            attribute !== \"pattern\"\n          ) {\n            this.validateCorrectResponse(CMIElement, value);\n            if (this.lastErrorCode !== \"0\") {\n              this.throwSCORMError(CMIElement, this._error_codes.TYPE_MISMATCH);\n              break;\n            }\n          }\n\n          if (!scorm2004 || this._errorHandlingService.lastErrorCode === \"0\") {\n            if (\n              typeof attribute === \"undefined\" ||\n              attribute === \"__proto__\" ||\n              attribute === \"constructor\"\n            ) {\n              this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n              break;\n            }\n            (refObject as StringKeyMap)[attribute] = value;\n            returnValue = global_constants.SCORM_TRUE;\n          }\n        }\n      } else {\n        if (\n          typeof attribute === \"undefined\" ||\n          !this._checkObjectHasProperty(refObject as StringKeyMap, attribute)\n        ) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n        refObject = (refObject as StringKeyMap)[attribute] as StringKeyMap;\n        if (!refObject) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n\n        if (refObject instanceof CMIArray) {\n          const index = parseInt(structure[idx + 1] || \"0\", 10);\n\n          // SCO is trying to set an item on an array\n          if (!isNaN(index)) {\n            const item = refObject.childArray[index];\n\n            if (item) {\n              refObject = item;\n              foundFirstIndex = true;\n            } else {\n              const newChild = this.getChildElement(CMIElement, value, foundFirstIndex);\n              foundFirstIndex = true;\n\n              if (!newChild) {\n                if (this.lastErrorCode === \"0\") {\n                  this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n                }\n                break;\n              } else {\n                if (refObject.initialized) newChild.initialize();\n                refObject.childArray[index] = newChild;\n                refObject = newChild;\n              }\n            }\n\n            // Have to update idx value to skip the array position\n            idx++;\n          }\n        }\n      }\n    }\n\n    if (returnValue === global_constants.SCORM_FALSE) {\n      this.apiLog(\n        methodName,\n        `There was an error setting the value for: ${CMIElement}, value of: ${value}`,\n        LogLevelEnum.WARN,\n      );\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @return {any}\n   */\n  _commonGetCMIValue(methodName: string, scorm2004: boolean, CMIElement: string): any {\n    if (!CMIElement || CMIElement === \"\") {\n      return \"\";\n    }\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap = this as StringKeyMap;\n    let attribute = null;\n\n    const uninitializedErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) has not been initialized.`;\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      attribute = structure[idx];\n\n      if (!scorm2004) {\n        if (idx === structure.length - 1) {\n          if (\n            typeof attribute === \"undefined\" ||\n            !this._checkObjectHasProperty(refObject, attribute)\n          ) {\n            this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n            return;\n          }\n        }\n      } else {\n        if (\n          String(attribute).substring(0, 8) === \"{target=\" &&\n          typeof refObject._isTargetValid == \"function\"\n        ) {\n          const target = String(attribute).substring(8, String(attribute).length - 9);\n          return refObject._isTargetValid(target);\n        } else if (\n          typeof attribute === \"undefined\" ||\n          !this._checkObjectHasProperty(refObject, attribute)\n        ) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          return;\n        }\n      }\n\n      if (attribute !== undefined && attribute !== null) {\n        refObject = refObject[attribute] as StringKeyMap;\n        if (refObject === undefined) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n      } else {\n        this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n        break;\n      }\n\n      if (refObject instanceof CMIArray) {\n        const index = parseInt(structure[idx + 1] || \"\", 10);\n\n        // SCO is trying to set an item on an array\n        if (!isNaN(index)) {\n          const item = refObject.childArray[index];\n\n          if (item) {\n            refObject = item;\n          } else {\n            this.throwSCORMError(\n              CMIElement,\n              this._error_codes.VALUE_NOT_INITIALIZED,\n              uninitializedErrorMessage,\n            );\n            break;\n          }\n\n          // Have to update idx value to skip the array position\n          idx++;\n        }\n      }\n    }\n\n    if (refObject === null || refObject === undefined) {\n      if (!scorm2004) {\n        if (attribute === \"_children\") {\n          this.throwSCORMError(CMIElement, this._error_codes.CHILDREN_ERROR, undefined);\n        } else if (attribute === \"_count\") {\n          this.throwSCORMError(CMIElement, this._error_codes.COUNT_ERROR, undefined);\n        }\n      }\n    } else {\n      return refObject;\n    }\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isInitialized(): boolean {\n    return this.currentState === global_constants.STATE_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_NOT_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isNotInitialized(): boolean {\n    return this.currentState === global_constants.STATE_NOT_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_TERMINATED\n   *\n   * @return {boolean}\n   */\n  isTerminated(): boolean {\n    return this.currentState === global_constants.STATE_TERMINATED;\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event.\n   * This method allows you to register a callback function that will be executed\n   * when the specified event occurs.\n   *\n   * @param {string} listenerName - The name of the event to listen for (e.g., \"Initialize\", \"Terminate\", \"GetValue\", \"SetValue\", \"Commit\")\n   * @param {function} callback - The function to execute when the event occurs. The callback will receive relevant event data.\n   * @example\n   * // Listen for Initialize events\n   * api.on(\"Initialize\", function() {\n   *   console.log(\"API has been initialized\");\n   * });\n   *\n   * // Listen for SetValue events\n   * api.on(\"SetValue\", function(element, value) {\n   *   console.log(\"Setting \" + element + \" to \" + value);\n   * });\n   */\n  on(listenerName: string, callback: Function) {\n    this._eventService.on(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener.\n   * This method removes a previously registered callback for an event.\n   * Both the event name and the callback reference must match what was used in the 'on' method.\n   *\n   * @param {string} listenerName - The name of the event to stop listening for\n   * @param {function} callback - The callback function to remove\n   * @example\n   * // Remove a specific listener\n   * const myCallback = function() { console.log(\"API initialized\"); };\n   * api.on(\"Initialize\", myCallback);\n   * // Later, when you want to remove it:\n   * api.off(\"Initialize\", myCallback);\n   */\n  off(listenerName: string, callback: Function) {\n    this._eventService.off(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event.\n   * This method removes all callbacks registered for the specified event.\n   *\n   * @param {string} listenerName - The name of the event to clear all listeners for\n   * @example\n   * // Remove all listeners for the Initialize event\n   * api.clear(\"Initialize\");\n   */\n  clear(listenerName: string) {\n    this._eventService.clear(listenerName);\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created for a specific event.\n   * This method is called internally when SCORM events occur to notify all registered listeners.\n   * It triggers all callback functions registered for the specified event.\n   *\n   * @param {string} functionName - The name of the function/event that occurred\n   * @param {string} CMIElement - Optional CMI element involved in the event\n   * @param {any} value - Optional value associated with the event\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this._eventService.processListeners(functionName, CMIElement, value);\n  }\n\n  /**\n   * Throws a SCORM error with the specified error number and optional message.\n   * This method sets the last error code and can be used to indicate that an operation failed.\n   * The error number should correspond to one of the standard SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The SCORM error code to set\n   * @param {string} message - Optional custom error message to provide additional context\n   * @example\n   * // Throw a \"not initialized\" error\n   * this.throwSCORMError(301, \"The API must be initialized before calling GetValue\");\n   */\n  throwSCORMError(\n    CMIElement: string | undefined,\n    errorNumber: number | undefined,\n    message?: string,\n  ) {\n    this._errorHandlingService.throwSCORMError(CMIElement, errorNumber ?? 0, message);\n  }\n\n  /**\n   * Clears the last SCORM error code when an operation succeeds.\n   * This method is typically called after successful API operations to reset the error state.\n   * It only clears the error if the success parameter is \"true\".\n   *\n   * @param {string} success - A string indicating whether the operation succeeded (\"true\" or \"false\")\n   * @example\n   * // Clear error after successful operation\n   * this.clearSCORMError(\"true\");\n   */\n  clearSCORMError(success: string) {\n    this._errorHandlingService.clearSCORMError(success);\n  }\n\n  /**\n   * Load the CMI from a flattened JSON object.\n   * This method populates the CMI data model from a flattened JSON structure\n   * where keys represent CMI element paths (e.g., \"cmi.core.student_id\").\n   *\n   * @param {StringKeyMap} json - The flattened JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a flattened JSON structure\n   * api.loadFromFlattenedJSON({\n   *   \"cmi.core.student_id\": \"12345\",\n   *   \"cmi.core.student_name\": \"John Doe\",\n   *   \"cmi.core.lesson_status\": \"incomplete\"\n   * });\n   */\n  loadFromFlattenedJSON(json: StringKeyMap, CMIElement?: string) {\n    if (!CMIElement) {\n      // by default, we start from a blank string because we're expecting each element to start with `cmi`\n      CMIElement = \"\";\n    }\n\n    this._serializationService.loadFromFlattenedJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Returns a flattened JSON object representing the current CMI data.\n   */\n  getFlattenedCMI(): StringKeyMap {\n    return Utilities.flatten(this.renderCMIToJSONObject());\n  }\n\n  /**\n   * Loads CMI data from a hierarchical JSON object.\n   * This method populates the CMI data model from a nested JSON structure\n   * that mirrors the CMI object hierarchy.\n   *\n   * @param {StringKeyMap} json - The hierarchical JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a hierarchical JSON structure\n   * api.loadFromJSON({\n   *   core: {\n   *     student_id: \"12345\",\n   *     student_name: \"John Doe\",\n   *     lesson_status: \"incomplete\"\n   *   },\n   *   objectives: [\n   *     { id: \"obj1\", score: { raw: 85 } }\n   *   ]\n   * });\n   */\n  loadFromJSON(json: StringKeyMap, CMIElement: string = \"\") {\n    if (\n      (!CMIElement || CMIElement === \"\") &&\n      !Object.hasOwnProperty.call(json, \"cmi\") &&\n      !Object.hasOwnProperty.call(json, \"adl\")\n    ) {\n      // providing a backward compatibility for the old v1 API\n      CMIElement = \"cmi\";\n    }\n    this._serializationService.loadFromJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Render the CMI object to a JSON string for sending to an LMS.\n   * This method serializes the current CMI data model to a JSON string.\n   * The output format is controlled by the sendFullCommit setting.\n   *\n   * @return {string} A JSON string representation of the CMI data\n   * @example\n   * // Get the current CMI data as a JSON string\n   * const jsonString = api.renderCMIToJSONString();\n   * console.log(jsonString); // '{\"core\":{\"student_id\":\"12345\",...}}'\n   */\n  renderCMIToJSONString(): string {\n    return this._serializationService.renderCMIToJSONString(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Returns a JavaScript object representing the current CMI data.\n   * This method creates a plain JavaScript object that mirrors the\n   * structure of the CMI data model, suitable for further processing.\n   *\n   * @return {StringKeyMap} A JavaScript object representing the CMI data\n   * @example\n   * // Get the current CMI data as a JavaScript object\n   * const cmiObject = api.renderCMIToJSONObject();\n   * console.log(cmiObject.core.student_id); // \"12345\"\n   */\n  renderCMIToJSONObject(): StringKeyMap {\n    return this._serializationService.renderCMIToJSONObject(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Process an HTTP request\n   *\n   * @param {string} url - The URL to send the request to\n   * @param {CommitObject | StringKeyMap | Array<any>} params - The parameters to send\n   * @param {boolean} immediate - Whether to send the request immediately without waiting\n   * @returns {Promise<ResultObject>} - The result of the request\n   * @async\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n  ): Promise<ResultObject> {\n    // If offline support is enabled and device is offline, store data locally instead of sending\n    if (\n      this.settings.enableOfflineSupport &&\n      this._offlineStorageService &&\n      !this._offlineStorageService.isDeviceOnline() &&\n      this._courseId\n    ) {\n      this.apiLog(\n        \"processHttpRequest\",\n        \"Device is offline, storing data locally\",\n        LogLevelEnum.INFO,\n      );\n\n      if (params && typeof params === \"object\" && \"cmi\" in params) {\n        return await this._offlineStorageService.storeOffline(\n          this._courseId,\n          params as CommitObject,\n        );\n      } else {\n        this.apiLog(\n          \"processHttpRequest\",\n          \"Invalid commit data format for offline storage\",\n          LogLevelEnum.ERROR,\n        );\n        return {\n          result: global_constants.SCORM_FALSE,\n          errorCode: this._error_codes.GENERAL ?? 101, // Fallback to a default error code if GENERAL is undefined\n        };\n      }\n    }\n\n    // Otherwise, proceed with normal HTTP request\n    return await this._httpService.processHttpRequest(\n      url,\n      params,\n      immediate,\n      (functionName, message, level, element) => this.apiLog(functionName, message, level, element),\n      (functionName, CMIElement, value) => this.processListeners(functionName, CMIElement, value),\n    );\n  }\n\n  /**\n   * Schedules a commit operation to occur after a specified delay.\n   * This method is used to implement auto-commit functionality, where data\n   * is periodically sent to the LMS without requiring explicit commit calls.\n   *\n   * @param {number} when - The number of milliseconds to wait before committing\n   * @param {string} callback - The name of the commit event callback\n   * @example\n   * // Schedule a commit to happen in 60 seconds\n   * api.scheduleCommit(60000, \"commit\");\n   */\n  scheduleCommit(when: number, callback: string) {\n    if (!this._timeout) {\n      this._timeout = new ScheduledCommit(this, when, callback);\n      this.apiLog(\"scheduleCommit\", \"scheduled\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Clears and cancels any currently scheduled commits.\n   * This method is typically called when an explicit commit is performed\n   * or when the API is terminated, to prevent redundant commits.\n   *\n   * @example\n   * // Cancel any pending scheduled commits\n   * api.clearScheduledCommit();\n   */\n  clearScheduledCommit() {\n    if (this._timeout) {\n      this._timeout.cancel();\n      this._timeout = undefined;\n      this.apiLog(\"clearScheduledCommit\", \"cleared\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Checks if an object has a specific property, using multiple detection methods.\n   * This method performs a thorough check for property existence by:\n   * 1. Checking if it's an own property using Object.hasOwnProperty\n   * 2. Checking if it's defined in the prototype with a property descriptor\n   * 3. Checking if it's accessible via the 'in' operator (includes inherited properties)\n   *\n   * @param {StringKeyMap} StringKeyMap - The object to check for the property\n   * @param {string} attribute - The property name to look for\n   * @return {boolean} True if the property exists on the object or its prototype chain\n   * @private\n   *\n   * @example\n   * // Check for an own property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"name\"); // Returns true\n   *\n   * @example\n   * // Check for an inherited property\n   * class Parent { get type() { return \"parent\"; } }\n   * const child = Object.create(new Parent());\n   * this._checkObjectHasProperty(child, \"type\"); // Returns true\n   *\n   * @example\n   * // Check for a non-existent property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"age\"); // Returns false\n   */\n  private _checkObjectHasProperty(StringKeyMap: StringKeyMap, attribute: string): boolean {\n    return (\n      Object.hasOwnProperty.call(StringKeyMap, attribute) ||\n      Object.getOwnPropertyDescriptor(Object.getPrototypeOf(StringKeyMap), attribute) != null ||\n      attribute in StringKeyMap\n    );\n  }\n\n  /**\n   * Handles exceptions that occur when accessing CMI values.\n   * This method delegates to the ErrorHandlingService to process exceptions\n   * that occur during CMI data operations, ensuring consistent error handling\n   * throughout the API.\n   *\n   * @param {string} CMIElement\n   * @param {any} e - The exception that was thrown\n   * @param {string} returnValue - The default return value to use if an error occurs\n   * @return {string} Either the original returnValue or SCORM_FALSE if an error occurred\n   * @private\n   *\n   * @example\n   * // Handle a validation error when getting a CMI value\n   * try {\n   *   return this.getCMIValue(\"cmi.core.score.raw\");\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"\");\n   * }\n   *\n   * @example\n   * // Handle a general error when setting a CMI value\n   * try {\n   *   this.setCMIValue(\"cmi.core.lesson_status\", \"completed\");\n   *   return \"true\";\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"false\");\n   * }\n   */\n  private handleValueAccessException(CMIElement: string, e: any, returnValue: string): string {\n    if (e instanceof ValidationError) {\n      this.lastErrorCode = String(e.errorCode);\n      returnValue = global_constants.SCORM_FALSE;\n      this.throwSCORMError(CMIElement, e.errorCode, e.errorMessage);\n    } else {\n      if (e instanceof Error && e.message) {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, e.message);\n      } else {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, \"Unknown error\");\n      }\n    }\n    return returnValue;\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS.\n   * This method delegates to the SerializationService to create a properly\n   * formatted object containing the CMI data that needs to be sent to the LMS.\n   * The format and content of the commit object depend on whether this is a\n   * regular commit or a termination commit.\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @return {CommitObject|StringKeyMap|Array} The formatted commit object\n   * @protected\n   *\n   * @example\n   * // Create a regular commit object\n   * const regularCommit = this.getCommitObject(false);\n   * // Result might be: { cmi: { core: { lesson_status: \"incomplete\" } } }\n   *\n   * @example\n   * // Create a termination commit object (includes total_time)\n   * const terminationCommit = this.getCommitObject(true);\n   * // Result might be: { cmi: { core: { lesson_status: \"completed\", total_time: \"PT1H30M\" } } }\n   */\n  protected getCommitObject(terminateCommit: boolean): CommitObject | StringKeyMap | Array<any> {\n    return this._serializationService.getCommitObject(\n      terminateCommit,\n      this.settings.alwaysSendTotalTime,\n      this.settings.renderCommonCommitFields,\n      (terminateCommit: boolean, includeTotalTime?: boolean) =>\n        this.renderCommitObject(terminateCommit, includeTotalTime),\n      (terminateCommit: boolean, includeTotalTime?: boolean) =>\n        this.renderCommitCMI(terminateCommit, includeTotalTime),\n      this.settings.logLevel,\n    );\n  }\n}\n","import { ValidationError } from \"../exceptions\";\nimport { scorm2004_constants } from \"../constants/api_constants\";\n\nconst scorm2004_errors = scorm2004_constants.error_descriptions;\n\n/**\n * SCORM 2004 Validation Error\n */\nexport class Scorm2004ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm2004_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm2004_errors[String(errorCode)]?.basicMessage || \"Unknown error\",\n        scorm2004_errors[String(errorCode)]?.detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm2004_errors[\"101\"]?.basicMessage || \"General error\",\n        scorm2004_errors[\"101\"]?.detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm2004ValidationError.prototype);\n  }\n}\n","import { BaseScormValidationError } from \"../../exceptions\";\nimport { memoize } from \"../../utilities\";\n\n/**\n * Check if the value matches the proper format. If not, throw proper error code.\n *\n * @param {string} value\n * @param {string} regexPattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @param {boolean} [allowEmptyString]\n * @return {boolean}\n */\nexport const checkValidFormat = memoize(\n  (\n    CMIElement: string,\n    value: string,\n    regexPattern: string | RegExp, // We accept either a string or a RegExp object to allow the usage of flags.\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n    allowEmptyString?: boolean,\n  ): boolean => {\n    // noinspection SuspiciousTypeOfGuard\n    if (typeof value !== \"string\") {\n      return false;\n    }\n    const formatRegex = new RegExp(regexPattern);\n    const matches = value.match(formatRegex);\n    if (allowEmptyString && value === \"\") {\n      return true;\n    }\n    if (value === undefined || !matches || matches[0] === \"\") {\n      throw new errorClass(CMIElement, errorCode);\n    }\n    return true;\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, regexPattern, errorCode, _errorClass, allowEmptyString) => {\n    // Use typeof for non-string values to ensure consistent cache keys\n    // noinspection SuspiciousTypeOfGuard\n    const valueKey = typeof value === \"string\" ? value : `[${typeof value}]`;\n    return `${CMIElement}:${valueKey}:${regexPattern}:${errorCode}:${allowEmptyString || false}`;\n  },\n);\n\n/**\n * Check if the value matches the proper range. If not, throw proper error code.\n *\n * @param {any} value\n * @param {string} rangePattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @return {boolean}\n */\nexport const checkValidRange = memoize(\n  (\n    CMIElement: string,\n    value: any,\n    rangePattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean => {\n    const ranges = rangePattern.split(\"#\");\n    value = value * 1.0;\n    if (ranges[0] && value >= ranges[0]) {\n      if (ranges[1] && (ranges[1] === \"*\" || value <= ranges[1])) {\n        return true;\n      } else {\n        throw new errorClass(CMIElement, errorCode);\n      }\n    } else {\n      throw new errorClass(CMIElement, errorCode);\n    }\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, rangePattern, errorCode, _errorClass) =>\n    `${CMIElement}:${value}:${rangePattern}:${errorCode}`,\n);\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check2004ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm2004_errors.TYPE_MISMATCH as number,\n    Scorm2004ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @return {boolean}\n */\nexport function check2004ValidRange(\n  CMIElement: string,\n  value: string,\n  rangePattern: string,\n): boolean {\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm2004_errors.VALUE_OUT_OF_RANGE as number,\n    Scorm2004ValidationError,\n  );\n}\n","export const scorm12_regex = {\n  CMIString256: \"^[\\\\s\\\\S]{0,255}$\",\n  CMIString4096: \"^[\\\\s\\\\S]{0,4096}$\",\n  CMITime: \"^(?:[01]\\\\d|2[0123]):(?:[012345]\\\\d):(?:[012345]\\\\d)$\",\n  CMITimespan: \"^([0-9]{2,}):([0-9]{2}):([0-9]{2})(.[0-9]{1,2})?$\",\n\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{0,3})(\\\\.[0-9]*)?$\",\n\n  CMIIdentifier: \"^[\\\\u0021-\\\\u007E\\\\s]{0,255}$\",\n  // Allow storing larger responses for interactions\n  // Some content packages may exceed the 255 character limit\n  // defined in the SCORM 1.2 specification.  The previous\n  // expression truncated these values which resulted in\n  // a \"101: General Exception\" being thrown when long\n  // answers were supplied.  To support these packages we\n  // relax the limitation and accept any length string.\n  CMIFeedback: \"^.*$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMIStatus: \"^(passed|completed|failed|incomplete|browsed)$\",\n  CMIStatus2: \"^(passed|completed|failed|incomplete|browsed|not attempted)$\",\n  CMIExit: \"^(time-out|suspend|logout|)$\",\n  CMIType: \"^(true-false|choice|fill-in|matching|performance|sequencing|likert|numeric)$\",\n  CMIResult: \"^(correct|wrong|unanticipated|neutral|([0-9]{0,3})?(\\\\.[0-9]*)?)$\",\n  NAVEvent:\n    \"^(previous|continue|start|resumeAll|choice|jump|exit|exitAll|abandon|abandonAll|suspendAll|retry|retryAll|_none_)$\",\n  // Data ranges\n  score_range: \"0#100\",\n  audio_range: \"-1#100\",\n  speed_range: \"-100#100\",\n  weighting_range: \"-100#100\",\n  text_range: \"-1#1\",\n};\nexport const aicc_regex = {\n  ...scorm12_regex,\n  ...{\n    // AICC identifiers may contain letters, numbers, underscores,\n    // periods, and hyphens up to 255 characters in length.\n    // The previous expression only allowed \"\\w\" characters which\n    // excluded periods and hyphens.\n    CMIIdentifier: \"^[A-Za-z0-9._-]{1,255}$\",\n  },\n};\nexport const scorm2004_regex = {\n  CMIString200: \"^[\\\\u0000-\\\\uFFFF]{0,200}$\",\n  CMIString250: \"^[\\\\u0000-\\\\uFFFF]{0,250}$\",\n  CMIString1000: \"^[\\\\u0000-\\\\uFFFF]{0,1000}$\",\n  CMIString4000: \"^[\\\\u0000-\\\\uFFFF]{0,4000}$\",\n  CMIString64000: \"^[\\\\u0000-\\\\uFFFF]{0,64000}$\",\n  CMILang: \"^([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?$|^$\",\n\n  CMILangString250: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,250}$)?$\",\n\n  CMILangcr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?}))(.*?)$\",\n\n  CMILangString250cr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?})?(.{0,250})?)?$\",\n\n  CMILangString4000: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,4000}$)?$\",\n\n  CMITime:\n    \"^(19[7-9]{1}[0-9]{1}|20[0-2]{1}[0-9]{1}|203[0-8]{1})((-(0[1-9]{1}|1[0-2]{1}))((-(0[1-9]{1}|[1-2]{1}[0-9]{1}|3[0-1]{1}))(T([0-1]{1}[0-9]{1}|2[0-3]{1})((:[0-5]{1}[0-9]{1})((:[0-5]{1}[0-9]{1})((\\\\.[0-9]{1,6})((Z|([+|-]([0-1]{1}[0-9]{1}|2[0-3]{1})))(:[0-5]{1}[0-9]{1})?)?)?)?)?)?)?)?$\",\n  CMITimespan:\n    \"^P(?:([.,\\\\d]+)Y)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)W)?(?:([.,\\\\d]+)D)?(?:T?(?:([.,\\\\d]+)H)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)S)?)?$\",\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{1,5})(\\\\.[0-9]{1,18})?$\",\n  CMIIdentifier: \"^\\\\S{1,250}[a-zA-Z0-9]$\",\n  CMIShortIdentifier: \"^[\\\\w\\\\.\\\\-\\\\_]{1,250}$\",\n  CMILongIdentifier: \"^(?:(?!urn:)\\\\S{1,4000}|urn:[A-Za-z0-9-]{1,31}:\\\\S{1,4000}|.{1,4000})$\",\n  // need to re-examine this\n  CMIFeedback: \"^.*$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  CMIIndexStore: \".N(\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMICStatus: \"^(completed|incomplete|not attempted|unknown)$\",\n  CMISStatus: \"^(passed|failed|unknown)$\",\n  CMIExit: \"^(time-out|suspend|logout|normal)$\",\n  CMIType:\n    \"^(true-false|choice|fill-in|long-fill-in|matching|performance|sequencing|likert|numeric|other)$\",\n  CMIResult: \"^(correct|incorrect|unanticipated|neutral|-?([0-9]{1,4})(\\\\.[0-9]{1,18})?)$\",\n  NAVEvent:\n    \"^(start|resumeAll|previous|continue|exit|exitAll|abandon|abandonAll|suspendAll|retry|retryAll|_none_|(\\\\{target=(?<choice_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?choice|(\\\\{target=(?<jump_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?jump)$\",\n\n  NAVBoolean: \"^(unknown|true|false)$\",\n  NAVTarget: \"^{target=\\\\S{0,}[a-zA-Z0-9-_]+}$\",\n  // Data ranges\n  scaled_range: \"-1#1\",\n  audio_range: \"0#999.9999999\",\n  speed_range: \"0#999.9999999\",\n  text_range: \"-1#1\",\n  progress_range: \"0#1\",\n};\n","/**\n * Class for SCORM 2004's cmi.learner_preference object\n */\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\n\nexport class CMILearnerPreference extends BaseCMI {\n  private __children = scorm2004_constants.student_preference_children;\n  private _audio_level = \"1\";\n  private _language = \"\";\n  private _delivery_speed = \"1\";\n  private _audio_captioning = \"0\";\n\n  /**\n   * Constructor for cmi.learner_preference\n   */\n  constructor() {\n    super(\"cmi.learner_preference\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._children\",\n      scorm2004_errors.READ_ONLY_ELEMENT as number,\n    );\n  }\n\n  /**\n   * Getter for _audio_level\n   * @return {string}\n   */\n  get audio_level(): string {\n    return this._audio_level;\n  }\n\n  /**\n   * Setter for _audio_level\n   * @param {string} audio_level\n   */\n  set audio_level(audio_level: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".audio_level\",\n        audio_level,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".audio_level\",\n        audio_level,\n        scorm2004_regex.audio_range,\n      )\n    ) {\n      this._audio_level = audio_level;\n    }\n  }\n\n  /**\n   * Getter for _language\n   * @return {string}\n   */\n  get language(): string {\n    return this._language;\n  }\n\n  /**\n   * Setter for _language\n   * @param {string} language\n   */\n  set language(language: string) {\n    if (check2004ValidFormat(this._cmi_element + \".language\", language, scorm2004_regex.CMILang)) {\n      this._language = language;\n    }\n  }\n\n  /**\n   * Getter for _delivery_speed\n   * @return {string}\n   */\n  get delivery_speed(): string {\n    return this._delivery_speed;\n  }\n\n  /**\n   * Setter for _delivery_speed\n   * @param {string} delivery_speed\n   */\n  set delivery_speed(delivery_speed: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".delivery_speed\",\n        delivery_speed,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".delivery_speed\",\n        delivery_speed,\n        scorm2004_regex.speed_range,\n      )\n    ) {\n      this._delivery_speed = delivery_speed;\n    }\n  }\n\n  /**\n   * Getter for _audio_captioning\n   * @return {string}\n   */\n  get audio_captioning(): string {\n    return this._audio_captioning;\n  }\n\n  /**\n   * Setter for _audio_captioning\n   * @param {string} audio_captioning\n   */\n  set audio_captioning(audio_captioning: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".audio_captioning\",\n        audio_captioning,\n        scorm2004_regex.CMISInteger,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".audio_captioning\",\n        audio_captioning,\n        scorm2004_regex.text_range,\n      )\n    ) {\n      this._audio_captioning = audio_captioning;\n    }\n  }\n\n  /**\n   * toJSON for cmi.learner_preference\n   *\n   * @return {\n   *    {\n   *      audio_level: string,\n   *      language: string,\n   *      delivery_speed: string,\n   *      audio_captioning: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    audio_level: string;\n    language: string;\n    delivery_speed: string;\n    audio_captioning: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio_level: this.audio_level,\n      language: this.language,\n      delivery_speed: this.delivery_speed,\n      audio_captioning: this.audio_captioning,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { scorm2004_regex } from \"./regex\";\n\nexport const LearnerResponses: Responses = {\n  \"true-false\": {\n    format: \"^true$|^false$\",\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  choice: {\n    format: scorm2004_regex.CMILongIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    unique: true,\n  },\n  \"fill-in\": {\n    format: scorm2004_regex.CMILangString250,\n    max: 10,\n    delimiter: \"[,]\",\n    unique: false,\n  },\n  \"long-fill-in\": {\n    format: scorm2004_regex.CMILangString4000,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  matching: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n  },\n  performance: {\n    format: \"^$|\" + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + \"|^$|\" + scorm2004_regex.CMIShortIdentifier,\n    max: 250,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n  },\n  sequencing: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    unique: false,\n  },\n  likert: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  numeric: {\n    format: scorm2004_regex.CMIDecimal,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  other: {\n    format: scorm2004_regex.CMIString4000,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n};\nexport const CorrectResponses: Responses = {\n  \"true-false\": {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: \"^true$|^false$\",\n    limit: 1,\n  },\n  choice: {\n    max: 36,\n    delimiter: \"[,]\",\n    unique: true,\n    duplicate: false,\n    format: scorm2004_regex.CMILongIdentifier,\n  },\n  \"fill-in\": {\n    max: 10,\n    delimiter: \"[,]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMILangString250cr,\n  },\n  \"long-fill-in\": {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: true,\n    format: scorm2004_regex.CMILangString4000,\n  },\n  matching: {\n    max: 36,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n  },\n  performance: {\n    max: 250,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    delimiter3: \"[:]\",\n    unique: false,\n    duplicate: false,\n    // step_name must be a non-empty short identifier\n    format: scorm2004_regex.CMIShortIdentifier,\n    // step_answer may be short identifier or numeric range (<decimal>[:<decimal>])\n    format2: `^(${scorm2004_regex.CMIShortIdentifier})$|^(?:\\\\d+(?:\\\\.\\\\d+)?(?::\\\\d+(?:\\\\.\\\\d+)?)?)$`,\n  },\n  sequencing: {\n    max: 36,\n    delimiter: \"[,]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n  },\n  likert: {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    limit: 1,\n  },\n  numeric: {\n    max: 2,\n    delimiter: \"[:]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIDecimal,\n    limit: 1,\n  },\n  other: {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIString4000,\n    limit: 1,\n  },\n};\n\nexport type ResponseType = {\n  format: string;\n  max: number;\n  delimiter: string;\n  unique: boolean;\n  duplicate?: boolean;\n  format2?: string;\n  delimiter2?: string;\n  limit?: number;\n  delimiter3?: string;\n};\n\nexport type Responses = {\n  [key: string]: ResponseType;\n};\n","/**\n * Class representing SCORM 2004's `cmi.interactions` object\n */\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { CMIArray } from \"../common/array\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport {\n  CorrectResponses,\n  LearnerResponses,\n  ResponseType,\n} from \"../../constants/response_constants\";\n\nexport class CMIInteractions extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives` Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.interactions\",\n      children: scorm2004_constants.interactions_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.interaction.n object\n */\n\nexport class CMIInteractionsObject extends BaseCMI {\n  private _id = \"\";\n  private _type = \"\";\n  private _timestamp = \"\";\n  private _weighting = \"\";\n  private _learner_response = \"\";\n  private _result = \"\";\n  private _latency = \"\";\n  private _description = \"\";\n\n  /**\n   * Constructor for cmi.interaction.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n\");\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.n.correct_responses\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  public objectives: CMIArray;\n  public correct_responses: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._id = \"\";\n    this._type = \"\";\n    this._timestamp = \"\";\n    this._weighting = \"\";\n    this._learner_response = \"\";\n    this._result = \"\";\n    this._latency = \"\";\n    this._description = \"\";\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.n.correct_responses\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _type\n   * @return {string}\n   */\n  get type(): string {\n    return this._type;\n  }\n\n  /**\n   * Setter for _type\n   * @param {string} type\n   */\n  set type(type: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".type\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (check2004ValidFormat(this._cmi_element + \".type\", type, scorm2004_regex.CMIType)) {\n        this._type = type;\n      }\n    }\n  }\n\n  /**\n   * Getter for _timestamp\n   * @return {string}\n   */\n  get timestamp(): string {\n    return this._timestamp;\n  }\n\n  /**\n   * Setter for _timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".timestamp\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".timestamp\", timestamp, scorm2004_regex.CMITime)\n      ) {\n        this._timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * Getter for _weighting\n   * @return {string}\n   */\n  get weighting(): string {\n    return this._weighting;\n  }\n\n  /**\n   * Setter for _weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".weighting\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".weighting\",\n          weighting,\n          scorm2004_regex.CMIDecimal,\n        )\n      ) {\n        this._weighting = weighting;\n      }\n    }\n  }\n\n  /**\n   * Getter for _learner_response\n   * @return {string}\n   */\n  get learner_response(): string {\n    return this._learner_response;\n  }\n\n  /**\n   * Setter for _learner_response. Does type validation to make sure response\n   * matches SCORM 2004's spec\n   * @param {string} learner_response\n   */\n  set learner_response(learner_response: string) {\n    if (this.initialized && (this._type === \"\" || this._id === \"\")) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_response\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      let nodes = [];\n      const response_type = LearnerResponses[this.type];\n\n      if (response_type) {\n        if (response_type?.delimiter) {\n          // Convert regex-style delimiter to actual character\n          const delimiter = response_type.delimiter === \"[,]\" ? \",\" : response_type.delimiter;\n          nodes = learner_response.split(delimiter);\n        } else {\n          nodes[0] = learner_response;\n        }\n\n        if (nodes.length > 0 && nodes.length <= response_type.max) {\n          const formatRegex = new RegExp(response_type.format);\n\n          for (let i = 0; i < nodes.length; i++) {\n            if (response_type?.delimiter2) {\n              // Convert regex-style delimiter to actual character\n              const delimiter2 =\n                response_type.delimiter2 === \"[.]\" ? \".\" : response_type.delimiter2;\n              const values = nodes[i]?.split(delimiter2);\n\n              if (values?.length === 2) {\n                // For performance type, both parts must be non-empty\n                if (this.type === \"performance\" && (values[0] === \"\" || values[1] === \"\")) {\n                  throw new Scorm2004ValidationError(\n                    this._cmi_element + \".learner_response\",\n                    scorm2004_errors.TYPE_MISMATCH as number,\n                  );\n                }\n\n                if (!values[0]?.match(formatRegex)) {\n                  throw new Scorm2004ValidationError(\n                    this._cmi_element + \".learner_response\",\n                    scorm2004_errors.TYPE_MISMATCH as number,\n                  );\n                } else {\n                  if (\n                    !response_type.format2 ||\n                    !values[1]?.match(new RegExp(response_type.format2))\n                  ) {\n                    throw new Scorm2004ValidationError(\n                      this._cmi_element + \".learner_response\",\n                      scorm2004_errors.TYPE_MISMATCH as number,\n                    );\n                  }\n                }\n              } else {\n                throw new Scorm2004ValidationError(\n                  this._cmi_element + \".learner_response\",\n                  scorm2004_errors.TYPE_MISMATCH as number,\n                );\n              }\n            } else {\n              if (!nodes[i]?.match(formatRegex)) {\n                throw new Scorm2004ValidationError(\n                  this._cmi_element + \".learner_response\",\n                  scorm2004_errors.TYPE_MISMATCH as number,\n                );\n              } else {\n                if (nodes[i] !== \"\" && response_type.unique) {\n                  for (let j = 0; j < i; j++) {\n                    if (nodes[i] === nodes[j]) {\n                      throw new Scorm2004ValidationError(\n                        this._cmi_element + \".learner_response\",\n                        scorm2004_errors.TYPE_MISMATCH as number,\n                      );\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          throw new Scorm2004ValidationError(\n            this._cmi_element + \".learner_response\",\n            scorm2004_errors.GENERAL_SET_FAILURE as number,\n          );\n        }\n\n        this._learner_response = learner_response;\n      } else {\n        throw new Scorm2004ValidationError(\n          this._cmi_element + \".learner_response\",\n          scorm2004_errors.TYPE_MISMATCH as number,\n        );\n      }\n    }\n  }\n\n  /**\n   * Getter for _result\n   * @return {string}\n   */\n  get result(): string {\n    return this._result;\n  }\n\n  /**\n   * Setter for _result\n   * @param {string} result\n   */\n  set result(result: string) {\n    if (check2004ValidFormat(this._cmi_element + \".result\", result, scorm2004_regex.CMIResult)) {\n      this._result = result;\n    }\n  }\n\n  /**\n   * Getter for _latency\n   * @return {string}\n   */\n  get latency(): string {\n    return this._latency;\n  }\n\n  /**\n   * Setter for _latency\n   * @param {string} latency\n   */\n  set latency(latency: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".latency\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".latency\", latency, scorm2004_regex.CMITimespan)\n      ) {\n        this._latency = latency;\n      }\n    }\n  }\n\n  /**\n   * Getter for _description\n   * @return {string}\n   */\n  get description(): string {\n    return this._description;\n  }\n\n  /**\n   * Setter for _description\n   * @param {string} description\n   */\n  set description(description: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".description\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".description\",\n          description,\n          scorm2004_regex.CMILangString250,\n          true,\n        )\n      ) {\n        this._description = description;\n      }\n    }\n  }\n\n  // noinspection JSUnusedGlobalSymbols\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      type: string,\n   *      objectives: CMIArray,\n   *      timestamp: string,\n   *      correct_responses: CMIArray,\n   *      weighting: string,\n   *      learner_response: string,\n   *      result: string,\n   *      latency: string,\n   *      description: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    type: string;\n    objectives: CMIArray;\n    timestamp: string;\n    correct_responses: CMIArray;\n    weighting: string;\n    learner_response: string;\n    result: string;\n    latency: string;\n    description: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      type: this.type,\n      objectives: this.objectives,\n      timestamp: this.timestamp,\n      weighting: this.weighting,\n      learner_response: this.learner_response,\n      result: this.result,\n      latency: this.latency,\n      description: this.description,\n      correct_responses: this.correct_responses,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.objectives.n object\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  private _id = \"\";\n\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n.objectives.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._id = \"\";\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Helper: strip the square-bracket notation (e.g. \"[,]\") down to the character (\",\")\n */\nfunction stripBrackets(delim: string): string {\n  return delim.replace(/[[\\]]/g, \"\");\n}\n\n// Helper to escape a string for use in a RegExp\nfunction escapeRegex(s: string): string {\n  // Only , and . are expected, but escape any regex special chars for safety\n  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\n\n/**\n * Split on unescaped delimiter and unescape the delimiter in resulting parts.\n * @param text - the input string\n * @param delim - the delimiter character, e.g. ',' or '.'\n */\nfunction splitUnescaped(text: string, delim: string): string[] {\n  const reDelim = escapeRegex(delim);\n  const splitRe = new RegExp(`(?<!\\\\\\\\)${reDelim}`, \"g\");\n  const unescapeRe = new RegExp(`\\\\\\\\${reDelim}`, \"g\");\n  return text.split(splitRe).map((part) => part.replace(unescapeRe, delim));\n}\n\n/**\n * Helper: validate a `pattern` string against its SCORM definition\n */\nfunction validatePattern(type: string, pattern: string, responseDef: ResponseType) {\n  // Reject patterns with leading or trailing whitespace\n  if (pattern.trim() !== pattern) {\n    throw new Scorm2004ValidationError(\n      \"cmi.interactions.n.correct_responses.n.pattern\",\n      scorm2004_errors.TYPE_MISMATCH as number,\n    );\n  }\n\n  // Reject any nodes with leading/trailing whitespace around tokens\n  const subDelim1 = responseDef.delimiter ? stripBrackets(responseDef.delimiter) : null;\n  const rawNodes = subDelim1 ? splitUnescaped(pattern, subDelim1) : [pattern];\n  for (const raw of rawNodes) {\n    if (raw.trim() !== raw) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n  }\n\n  // Allow empty fill-in patterns\n  if (type === \"fill-in\" && pattern === \"\") {\n    return;\n  }\n  // Split into nodes on the primary delimiter (if any)\n  const delim1 = responseDef.delimiter ? stripBrackets(responseDef.delimiter) : null;\n  let nodes: string[];\n  if (delim1) {\n    nodes = splitUnescaped(pattern, delim1);\n  } else {\n    nodes = [pattern];\n  }\n\n  // If no primary delimiter but pattern contains comma, reject multiple entries\n  if (!responseDef.delimiter && pattern.includes(\",\")) {\n    throw new Scorm2004ValidationError(\n      \"cmi.interactions.n.correct_responses.n.pattern\",\n      scorm2004_errors.TYPE_MISMATCH as number,\n    );\n  }\n\n  // Enforce uniqueness or disallow duplicates if required\n  if (responseDef.unique || responseDef.duplicate === false) {\n    const seen = new Set(nodes);\n    if (seen.size !== nodes.length) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n  }\n\n  // Must have at least 1 node, and no more than max\n  if (nodes.length === 0 || nodes.length > responseDef.max) {\n    throw new Scorm2004ValidationError(\n      \"cmi.interactions.n.correct_responses.n.pattern\",\n      scorm2004_errors.GENERAL_SET_FAILURE as number,\n    );\n  }\n\n  const fmt1 = new RegExp(responseDef.format);\n  const fmt2 = responseDef.format2 ? new RegExp(responseDef.format2) : null;\n\n  const checkSingle = (value: string) => {\n    if (!fmt1.test(value)) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n  };\n\n  const checkPair = (value: string, delimBracketed?: string) => {\n    if (!delimBracketed) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    const delim = stripBrackets(delimBracketed);\n    const parts = value\n      .split(new RegExp(`(?<!\\\\\\\\)${escapeRegex(delim)}`, \"g\"))\n      .map((n) => n.replace(new RegExp(`\\\\\\\\${escapeRegex(delim)}`, \"g\"), delim));\n    if (parts.length !== 2 || parts[0] === \"\" || parts[1] === \"\") {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    // test both parts\n    if (\n      (parts[0] !== undefined && !fmt1.test(parts[0])) ||\n      (fmt2 && parts[1] !== undefined && !fmt2.test(parts[1]))\n    ) {\n      throw new Scorm2004ValidationError(\n        \"cmi.interactions.n.correct_responses.n.pattern\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n  };\n\n  for (const node of nodes) {\n    switch (type) {\n      case \"numeric\": {\n        // 1 or 2 numeric values separated by \":\"\n        const numDelim = responseDef.delimiter ? stripBrackets(responseDef.delimiter) : \":\";\n        const nums = node.split(numDelim);\n        if (nums.length < 1 || nums.length > 2) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        nums.forEach(checkSingle);\n        break;\n      }\n\n      case \"performance\": {\n        // split into parts on unescaped dot\n        const delimBracketed = responseDef.delimiter2;\n        if (!delimBracketed) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        const delim = stripBrackets(delimBracketed);\n        // split into parts on unescaped dot\n        const allParts = splitUnescaped(node, delim);\n        if (!node.includes(\":\") && allParts.length !== 2) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        // use splitUnescaped to get [part1, part2]\n        const [part1, part2] = splitUnescaped(node, delim);\n        // Validate non-empty\n        if (part1 === \"\" || part2 === \"\" || part1 === part2) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        // part1 against format1\n        if (part1 === undefined || !fmt1.test(part1)) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        // part2 against format2\n        if (fmt2 && part2 !== undefined && !fmt2.test(part2)) {\n          throw new Scorm2004ValidationError(\n            \"cmi.interactions.n.correct_responses.n.pattern\",\n            scorm2004_errors.TYPE_MISMATCH as number,\n          );\n        }\n        break;\n      }\n\n      default:\n        if (responseDef.delimiter2) {\n          // matching and other two-part types\n          checkPair(node, responseDef.delimiter2);\n        } else {\n          // simple single-value types (true-false, choice, fill-in, etc.)\n          checkSingle(node);\n        }\n    }\n  }\n}\n\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  private _pattern = \"\";\n  private readonly _interactionType?: string | undefined;\n\n  /**\n   * Constructor for cmi.interactions.n.correct_responses.n\n   * @param interactionType The type of interaction (e.g. \"numeric\", \"choice\", etc.)\n   */\n  constructor(interactionType?: string) {\n    super(\"cmi.interactions.n.correct_responses.n\");\n    this._interactionType = interactionType;\n  }\n\n  override reset() {\n    this._initialized = false;\n    this._pattern = \"\";\n  }\n\n  get pattern(): string {\n    return this._pattern;\n  }\n\n  set pattern(pattern: string) {\n    // Allow empty fill-in patterns\n    if (this._interactionType === \"fill-in\" && pattern === \"\") {\n      this._pattern = \"\";\n      return;\n    }\n    // 1) Basic SCORM‐pattern format check\n    if (\n      !check2004ValidFormat(this._cmi_element + \".pattern\", pattern, scorm2004_regex.CMIFeedback)\n    ) {\n      return;\n    }\n\n    // 2) If we know the interaction type, run the detailed validator\n    if (this._interactionType) {\n      const responseDef = CorrectResponses[this._interactionType];\n      if (responseDef) {\n        // Skip detailed validation for matching when pattern contains escaped comma or dot\n        if (this._interactionType === \"matching\" && /\\\\[.,]/.test(pattern)) {\n          // accept escaped comma or dot patterns without further validation\n        } else {\n          validatePattern(this._interactionType, pattern, responseDef);\n        }\n      }\n    }\n\n    // 3) Finally, set\n    this._pattern = pattern;\n  }\n\n  toJSON(): { pattern: string } {\n    this.jsonString = true;\n    const result = { pattern: this.pattern };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { ValidationError } from \"../exceptions\";\nimport { scorm12_constants } from \"../constants/api_constants\";\n\nconst scorm12_errors = scorm12_constants.error_descriptions;\n\n/**\n * SCORM 1.2 Validation Error\n */\nexport class Scorm12ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm12_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm12_errors[String(errorCode)]?.basicMessage || \"Unknown error\",\n        scorm12_errors[String(errorCode)]?.detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm12_errors[\"101\"]?.basicMessage ?? \"General error\",\n        scorm12_errors[\"101\"]?.detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm12ValidationError.prototype);\n  }\n}\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string | RegExp, // We accept either a string or a RegExp object to allow the usage of flags.\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm12_errors.TYPE_MISMATCH as number,\n    Scorm12ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidRange(\n  CMIElement: string,\n  value: any,\n  rangePattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  if (!allowEmptyString && value === \"\") {\n    throw new Scorm12ValidationError(CMIElement, scorm12_errors.VALUE_OUT_OF_RANGE as number);\n  }\n\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm12_errors.VALUE_OUT_OF_RANGE as number,\n    Scorm12ValidationError,\n  );\n}\n","import { BaseScormValidationError } from \"../exceptions\";\nimport { checkValidFormat, checkValidRange } from \"../cmi/common/validation\";\nimport { check12ValidFormat, check12ValidRange } from \"../cmi/scorm12/validation\";\nimport { scorm12_regex } from \"../constants/regex\";\nimport { scorm12_errors } from \"../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../exceptions/scorm12_exceptions\";\n\n/**\n * Service for validating CMI data model properties\n */\nexport class ValidationService {\n  /**\n   * Validates a score property (raw, min, max)\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @param {string} decimalRegex - The regex pattern for decimal validation\n   * @param {string | false} scoreRange - The range pattern for score validation, or false if no range validation is needed\n   * @param {number} invalidTypeCode - The error code for invalid type\n   * @param {number} invalidRangeCode - The error code for invalid range\n   * @param {typeof BaseScormValidationError} errorClass - The error class to use for validation errors\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScore(\n    CMIElement: string,\n    value: string,\n    decimalRegex: string,\n    scoreRange: string | false,\n    invalidTypeCode: number,\n    invalidRangeCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean {\n    return (\n      checkValidFormat(CMIElement, value, decimalRegex, invalidTypeCode, errorClass) &&\n      (!scoreRange || checkValidRange(CMIElement, value, scoreRange, invalidRangeCode, errorClass))\n    );\n    // This line should never be reached due to exceptions being thrown\n  }\n\n  /**\n   * Validates a SCORM 1.2 audio property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Audio(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.audio_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 language property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Language(CMIElement: string, value: string): boolean {\n    return check12ValidFormat(CMIElement, value, scorm12_regex.CMIString256);\n  }\n\n  /**\n   * Validates a SCORM 1.2 speed property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Speed(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.speed_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 text property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Text(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.text_range)\n    );\n  }\n\n  /**\n   * Validates if a property is read-only\n   *\n   * @param {string} CMIElement\n   * @param {boolean} initialized - Whether the object is initialized\n   * @throws {BaseScormValidationError} - Throws an error if the object is initialized\n   */\n  validateReadOnly(CMIElement: string, initialized: boolean): void {\n    if (initialized) {\n      throw new Scorm12ValidationError(CMIElement, scorm12_errors.READ_ONLY_ELEMENT as number);\n    }\n  }\n}\n\n// Export a singleton instance of the ValidationService\nexport const validationService = new ValidationService();\n","import { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"./base_cmi\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { validationService } from \"../../services/ValidationService\";\nimport { ScoreObject } from \"../../types/api_types\";\n\n/**\n * Base class for cmi *.score objects\n */\nexport class CMIScore extends BaseCMI {\n  private readonly __children: string;\n  private readonly __score_range: string | false;\n  private readonly __invalid_error_code: number;\n  private readonly __invalid_type_code: number;\n  private readonly __invalid_range_code: number;\n  private readonly __decimal_regex: string;\n  private readonly __error_class: typeof BaseScormValidationError;\n  protected _raw = \"\";\n  protected _min = \"\";\n  protected _max: string;\n\n  /**\n   * Constructor for *.score\n   * @param {\n   *     score_children: string,\n   *     score_range: string,\n   *     max: string,\n   *     invalidErrorCode: number,\n   *     invalidTypeCode: number,\n   *     invalidRangeCode: number,\n   *     decimalRegex: string,\n   *     errorClass: typeof BaseScormValidationError\n   * } params\n   */\n  constructor(params: {\n    CMIElement: string;\n    score_children?: string;\n    score_range?: string;\n    max?: string;\n    invalidErrorCode?: number;\n    invalidTypeCode?: number;\n    invalidRangeCode?: number;\n    decimalRegex?: string;\n    errorClass: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n\n    this.__children = params.score_children || scorm12_constants.score_children;\n    this.__score_range = !params.score_range ? false : scorm12_regex.score_range;\n    this._max = params.max || params.max === \"\" ? params.max : \"100\";\n    this.__invalid_error_code =\n      params.invalidErrorCode || (scorm12_errors.INVALID_SET_VALUE as number);\n    this.__invalid_type_code = params.invalidTypeCode || (scorm12_errors.TYPE_MISMATCH as number);\n    this.__invalid_range_code =\n      params.invalidRangeCode || (scorm12_errors.VALUE_OUT_OF_RANGE as number);\n    this.__decimal_regex = params.decimalRegex || scorm12_regex.CMIDecimal;\n    this.__error_class = params.errorClass;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this.__error_class(this._cmi_element + \"._children\", this.__invalid_error_code);\n  }\n\n  /**\n   * Getter for _raw\n   * @return {string}\n   */\n  get raw(): string {\n    return this._raw;\n  }\n\n  /**\n   * Setter for _raw\n   * @param {string} raw\n   */\n  set raw(raw: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".raw\",\n        raw,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._raw = raw;\n    }\n  }\n\n  /**\n   * Getter for _min\n   * @return {string}\n   */\n  get min(): string {\n    return this._min;\n  }\n\n  /**\n   * Setter for _min\n   * @param {string} min\n   */\n  set min(min: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".min\",\n        min,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._min = min;\n    }\n  }\n\n  /**\n   * Getter for _max\n   * @return {string}\n   */\n  get max(): string {\n    return this._max;\n  }\n\n  /**\n   * Setter for _max\n   * @param {string} max\n   */\n  set max(max: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".max\",\n        max,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._max = max;\n    }\n  }\n\n  /**\n   * Getter for _score_range\n   * @return {string | false}\n   */\n  public getScoreObject(): ScoreObject {\n    const scoreObject: ScoreObject = {};\n    if (!Number.isNaN(Number.parseFloat(this.raw))) {\n      scoreObject.raw = Number.parseFloat(this.raw);\n    }\n    if (!Number.isNaN(Number.parseFloat(this.min))) {\n      scoreObject.min = Number.parseFloat(this.min);\n    }\n    if (!Number.isNaN(Number.parseFloat(this.max))) {\n      scoreObject.max = Number.parseFloat(this.max);\n    }\n    return scoreObject;\n  }\n\n  /**\n   * toJSON for *.score\n   * @return {\n   *    {\n   *      min: string,\n   *      max: string,\n   *      raw: string\n   *    }\n   *    }\n   */\n  toJSON(): {\n    min: string;\n    max: string;\n    raw: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","/**\n * Class for SCORM 2004's cmi *.score object\n */\nimport { CMIScore } from \"../common/score\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { ScoreObject } from \"../../types/api_types\";\n\nexport class Scorm2004CMIScore extends CMIScore {\n  private _scaled = \"\";\n\n  /**\n   * Constructor for cmi *.score\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.score\",\n      score_children: scorm2004_constants.score_children,\n      max: \"\",\n      invalidErrorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      invalidTypeCode: scorm2004_errors.TYPE_MISMATCH as number,\n      invalidRangeCode: scorm2004_errors.VALUE_OUT_OF_RANGE as number,\n      decimalRegex: scorm2004_regex.CMIDecimal,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n    this._scaled = \"\";\n    this._raw = \"\";\n    this._min = \"\";\n    this._max = \"\";\n  }\n\n  /**\n   * Getter for _scaled\n   * @return {string}\n   */\n  get scaled(): string {\n    return this._scaled;\n  }\n\n  /**\n   * Setter for _scaled\n   * @param {string} scaled\n   */\n  set scaled(scaled: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".scaled\", scaled, scorm2004_regex.CMIDecimal) &&\n      check2004ValidRange(this._cmi_element + \".scaled\", scaled, scorm2004_regex.scaled_range)\n    ) {\n      this._scaled = scaled;\n    }\n  }\n\n  override getScoreObject(): ScoreObject {\n    const scoreObject = super.getScoreObject();\n\n    if (!Number.isNaN(Number.parseFloat(this.scaled))) {\n      scoreObject.scaled = Number.parseFloat(this.scaled);\n    }\n\n    return scoreObject;\n  }\n\n  /**\n   * toJSON for cmi *.score\n   *\n   * @return {\n   *    {\n   *      scaled: string,\n   *      raw: string,\n   *      min: string,\n   *      max: string\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    scaled: string;\n    raw: string;\n    min: string;\n    max: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      scaled: this.scaled,\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_lms object\n * @extends CMIArray\n */\nexport class CMICommentsFromLMS extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_lms Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.comments_from_lms\",\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner object\n */\n\nexport class CMICommentsFromLearner extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_learner Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.comments_from_learner\",\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner.n and cmi.comments_from_lms.n object\n */\n\nexport class CMICommentsObject extends BaseCMI {\n  private _comment = \"\";\n  private _location = \"\";\n  private _timestamp = \"\";\n  private readonly _readOnlyAfterInit: boolean;\n\n  /**\n   * Constructor for cmi.comments_from_learner.n and cmi.comments_from_lms.n\n   * @param {boolean} readOnlyAfterInit\n   */\n  constructor(readOnlyAfterInit: boolean = false) {\n    super(\"cmi.comments_from_learner.n\");\n    this._comment = \"\";\n    this._location = \"\";\n    this._timestamp = \"\";\n    this._readOnlyAfterInit = readOnlyAfterInit;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _comment\n   * @return {string}\n   */\n  get comment(): string {\n    return this._comment;\n  }\n\n  /**\n   * Setter for _comment\n   * @param {string} comment\n   */\n  set comment(comment: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".comment\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".comment\",\n          comment,\n          scorm2004_regex.CMILangString4000,\n          true,\n        )\n      ) {\n        this._comment = comment;\n      }\n    }\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".location\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".location\",\n          location,\n          scorm2004_regex.CMIString250,\n        )\n      ) {\n        this._location = location;\n      }\n    }\n  }\n\n  /**\n   * Getter for _timestamp\n   * @return {string}\n   */\n  get timestamp(): string {\n    return this._timestamp;\n  }\n\n  /**\n   * Setter for _timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".timestamp\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".timestamp\", timestamp, scorm2004_regex.CMITime)\n      ) {\n        this._timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.comments_from_learner.n object\n   * @return {\n   *    {\n   *      comment: string,\n   *      location: string,\n   *      timestamp: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    comment: string;\n    location: string;\n    timestamp: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      comment: this.comment,\n      location: this.location,\n      timestamp: this.timestamp,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { Scorm2004CMIScore } from \"./score\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\n\n/**\n * Class representing SCORM 2004's `cmi.objectives` object\n * @extends CMIArray\n */\nexport class CMIObjectives extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives` Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.objectives\",\n      children: scorm2004_constants.objectives_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n\n  /**\n   * Find an objective by its ID\n   */\n  public findObjectiveById(id: string): CMIObjectivesObject | undefined {\n    return this.childArray.find((objective) => objective.id === id);\n  }\n\n  /**\n   * Find objective by its index\n   */\n  public findObjectiveByIndex(index: number): CMIObjectivesObject {\n    return this.childArray[index];\n  }\n\n  /**\n   * Set an objective at the given index\n   */\n  public setObjectiveByIndex(index: number, objective: CMIObjectivesObject) {\n    this.childArray[index] = objective;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.objectives.n object\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  private _id = \"\";\n  private _success_status = \"unknown\";\n  private _completion_status = \"unknown\";\n  private _progress_measure = \"\";\n  private _description = \"\";\n\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super(\"cmi.objectives.n\");\n    this.score = new Scorm2004CMIScore();\n  }\n\n  override reset() {\n    this._initialized = false;\n  }\n\n  public score: Scorm2004CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this._success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".success_status\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".success_status\",\n          success_status,\n          scorm2004_regex.CMISStatus,\n        )\n      ) {\n        this._success_status = success_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this._completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".completion_status\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".completion_status\",\n          completion_status,\n          scorm2004_regex.CMICStatus,\n        )\n      ) {\n        this._completion_status = completion_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this._progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".progress_measure\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".progress_measure\",\n          progress_measure,\n          scorm2004_regex.CMIDecimal,\n        ) &&\n        check2004ValidRange(\n          this._cmi_element + \".progress_measure\",\n          progress_measure,\n          scorm2004_regex.progress_range,\n        )\n      ) {\n        this._progress_measure = progress_measure;\n      }\n    }\n  }\n\n  /**\n   * Getter for _description\n   * @return {string}\n   */\n  get description(): string {\n    return this._description;\n  }\n\n  /**\n   * Setter for _description\n   * @param {string} description\n   */\n  set description(description: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".description\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED as number,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".description\",\n          description,\n          scorm2004_regex.CMILangString250,\n          true,\n        )\n      ) {\n        this._description = description;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      success_status: string,\n   *      completion_status: string,\n   *      progress_measure: string,\n   *      description: string,\n   *      score: Scorm2004CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    success_status: string;\n    completion_status: string;\n    progress_measure: string;\n    description: string;\n    score: Scorm2004CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      success_status: this.success_status,\n      completion_status: this.completion_status,\n      progress_measure: this.progress_measure,\n      description: this.description,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n\n  /**\n   * Populate this objective from a plain object\n   * @param {any} data\n   */\n  fromJSON(data: any): void {\n    if (!data || typeof data !== \"object\") return;\n    if (typeof data.id === \"string\") this.id = data.id;\n    if (typeof data.success_status === \"string\") this.success_status = data.success_status;\n    if (typeof data.completion_status === \"string\") this.completion_status = data.completion_status;\n    if (typeof data.progress_measure !== \"undefined\") this.progress_measure = String(data.progress_measure);\n    if (typeof data.description === \"string\") this.description = data.description;\n    if (data.score && typeof data.score === \"object\") {\n      if (typeof data.score.scaled !== \"undefined\") this.score.scaled = String(data.score.scaled);\n      if (typeof data.score.raw !== \"undefined\") this.score.raw = String(data.score.raw);\n      if (typeof data.score.min !== \"undefined\") this.score.min = String(data.score.min);\n      if (typeof data.score.max !== \"undefined\") this.score.max = String(data.score.max);\n    }\n  }\n}\n","/**\n * Class representing metadata properties for SCORM 2004's cmi object\n */\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing metadata properties for SCORM 2004's cmi object\n */\nexport class CMIMetadata extends BaseCMI {\n  private __version = \"1.0\";\n  private __children = scorm2004_constants.cmi_children;\n\n  /**\n   * Constructor for CMIMetadata\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   */\n  get _version(): string {\n    return this.__version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version: string) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._version\",\n      scorm2004_errors.READ_ONLY_ELEMENT as number,\n    );\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {number} _children\n   */\n  set _children(_children: number) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._children\",\n      scorm2004_errors.READ_ONLY_ELEMENT as number,\n    );\n  }\n\n  /**\n   * Reset the metadata properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // No need to reset __version and __children as they are constants\n  }\n}\n","/**\n * Class representing learner properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing learner properties for SCORM 2004's cmi object\n */\nexport class CMILearner extends BaseCMI {\n  private _learner_id = \"\";\n  private _learner_name = \"\";\n\n  /**\n   * Constructor for CMILearner\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _learner_id\n   * @return {string}\n   */\n  get learner_id(): string {\n    return this._learner_id;\n  }\n\n  /**\n   * Setter for _learner_id. Can only be called before initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_id\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._learner_id = learner_id;\n    }\n  }\n\n  /**\n   * Getter for _learner_name\n   * @return {string}\n   */\n  get learner_name(): string {\n    return this._learner_name;\n  }\n\n  /**\n   * Setter for _learner_name. Can only be called before initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_name\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._learner_name = learner_name;\n    }\n  }\n\n  /**\n   * Reset the learner properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset learner_id and learner_name as they are read-only after initialization\n  }\n}\n","/**\n * Class representing status properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\n\n/**\n * Class representing status properties for SCORM 2004's cmi object\n */\nexport class CMIStatus extends BaseCMI {\n  private _completion_status = \"unknown\";\n  private _success_status = \"unknown\";\n  private _progress_measure = \"\";\n\n  /**\n   * Constructor for CMIStatus\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this._completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".completion_status\",\n        completion_status,\n        scorm2004_regex.CMICStatus,\n      )\n    ) {\n      this._completion_status = completion_status;\n    }\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this._success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".success_status\",\n        success_status,\n        scorm2004_regex.CMISStatus,\n      )\n    ) {\n      this._success_status = success_status;\n    }\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this._progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".progress_measure\",\n        progress_measure,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".progress_measure\",\n        progress_measure,\n        scorm2004_regex.progress_range,\n      )\n    ) {\n      this._progress_measure = progress_measure;\n    }\n  }\n\n  /**\n   * Reset the status properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._completion_status = \"unknown\";\n    this._success_status = \"unknown\";\n    this._progress_measure = \"\";\n  }\n}\n","/**\n * Class representing session properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\nimport * as Util from \"../../utilities\";\n\n/**\n * Class representing session properties for SCORM 2004's cmi object\n */\nexport class CMISession extends BaseCMI {\n  private _entry = \"\";\n  private _exit = \"\";\n  private _session_time = \"PT0H0M0S\";\n  private _total_time = \"\";\n\n  /**\n   * Constructor for CMISession\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this._entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".entry\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._entry = entry;\n    }\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    if (!this.jsonString) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exit\",\n        scorm2004_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    if (check2004ValidFormat(this._cmi_element + \".exit\", exit, scorm2004_regex.CMIExit, true)) {\n      this._exit = exit;\n    }\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    if (!this.jsonString) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".session_time\",\n        scorm2004_errors.WRITE_ONLY_ELEMENT as number,\n      );\n    }\n    return this._session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".session_time\",\n        session_time,\n        scorm2004_regex.CMITimespan,\n      )\n    ) {\n      this._session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this._total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".total_time\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._total_time = total_time;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime(start_time: number | undefined): string {\n    let sessionTime = this._session_time;\n    if (typeof start_time !== \"undefined\" && start_time !== null) {\n      const seconds = new Date().getTime() - start_time;\n      sessionTime = Util.getSecondsAsISODuration(seconds / 1000);\n    }\n\n    return Util.addTwoDurations(this._total_time, sessionTime, scorm2004_regex.CMITimespan);\n  }\n\n  /**\n   * Reset the session properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._entry = \"\";\n    this._exit = \"\";\n    this._session_time = \"PT0H0M0S\";\n    // Don't reset total_time as it's read-only after initialization\n  }\n}\n","/**\n * Class representing content properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\n\n/**\n * Class representing content properties for SCORM 2004's cmi object\n */\nexport class CMIContent extends BaseCMI {\n  private _location = \"\";\n  private _launch_data = \"\";\n  private _suspend_data = \"\";\n\n  /**\n   * Constructor for CMIContent\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".location\", location, scorm2004_regex.CMIString1000)\n    ) {\n      this._location = location;\n    }\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this._launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".launch_data\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._launch_data = launch_data;\n    }\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this._suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".suspend_data\",\n        suspend_data,\n        scorm2004_regex.CMIString64000,\n        true,\n      )\n    ) {\n      this._suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Reset the content properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._location = \"\";\n    // Don't reset launch_data as it's read-only after initialization\n    this._suspend_data = \"\";\n  }\n}\n","/**\n * Class representing settings properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing settings properties for SCORM 2004's cmi object\n */\nexport class CMISettings extends BaseCMI {\n  private _credit = \"credit\";\n  private _mode = \"normal\";\n  private _time_limit_action = \"continue,no message\";\n  private _max_time_allowed = \"\";\n\n  /**\n   * Constructor for CMISettings\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this._credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".credit\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._credit = credit;\n    }\n  }\n\n  /**\n   * Getter for _mode\n   * @return {string}\n   */\n  get mode(): string {\n    return this._mode;\n  }\n\n  /**\n   * Setter for _mode. Can only be called before initialization.\n   * @param {string} mode\n   */\n  set mode(mode: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".mode\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._mode = mode;\n    }\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this._time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".time_limit_action\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._time_limit_action = time_limit_action;\n    }\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this._max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".max_time_allowed\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    } else {\n      this._max_time_allowed = max_time_allowed;\n    }\n  }\n\n  /**\n   * Reset the settings properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset these properties as they are read-only after initialization\n  }\n}\n","/**\n * Class representing threshold properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing threshold properties for SCORM 2004's cmi object\n */\nexport class CMIThresholds extends BaseCMI {\n  private _scaled_passing_score = \"\";\n  private _completion_threshold = \"\";\n\n  /**\n   * Constructor for CMIThresholds\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score(): string {\n    return this._scaled_passing_score;\n  }\n\n  /**\n   * Setter for _scaled_passing_score. Can only be called before initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".scaled_passing_score\",\n        scorm2004_errors.READ_ONLY_ELEMENT ?? 404,\n      );\n    } else {\n      this._scaled_passing_score = scaled_passing_score;\n    }\n  }\n\n  /**\n   * Getter for _completion_threshold\n   * @return {string}\n   */\n  get completion_threshold(): string {\n    return this._completion_threshold;\n  }\n\n  /**\n   * Setter for _completion_threshold. Can only be called before initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".completion_threshold\",\n        scorm2004_errors.READ_ONLY_ELEMENT ?? 404,\n      );\n    } else {\n      this._completion_threshold = completion_threshold;\n    }\n  }\n\n  /**\n   * Reset the threshold properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset these properties as they are read-only after initialization\n  }\n}\n","import { BaseRootCMI } from \"../common/base_cmi\";\nimport { CMILearnerPreference } from \"./learner_preference\";\nimport { CMIInteractions } from \"./interactions\";\nimport { Scorm2004CMIScore } from \"./score\";\nimport { CMICommentsFromLearner, CMICommentsFromLMS } from \"./comments\";\nimport { CMIObjectives } from \"./objectives\";\nimport { CMIMetadata } from \"./metadata\";\nimport { CMILearner } from \"./learner\";\nimport { CMIStatus } from \"./status\";\nimport { CMISession } from \"./session\";\nimport { CMIContent } from \"./content\";\nimport { CMISettings } from \"./settings\";\nimport { CMIThresholds } from \"./thresholds\";\n\n/**\n * Class representing cmi object for SCORM 2004\n */\nexport class CMI extends BaseRootCMI {\n  /**\n   * Constructor for the SCORM 2004 cmi object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean = false) {\n    super(\"cmi\");\n    this.metadata = new CMIMetadata();\n    this.learner = new CMILearner();\n    this.status = new CMIStatus();\n    this.session = new CMISession();\n    this.content = new CMIContent();\n    this.settings = new CMISettings();\n    this.thresholds = new CMIThresholds();\n    this.learner_preference = new CMILearnerPreference();\n    this.score = new Scorm2004CMIScore();\n    this.comments_from_learner = new CMICommentsFromLearner();\n    this.comments_from_lms = new CMICommentsFromLMS();\n    this.interactions = new CMIInteractions();\n    this.objectives = new CMIObjectives();\n    if (initialized) this.initialize();\n  }\n\n  // New component classes\n  private metadata: CMIMetadata;\n  private learner: CMILearner;\n  private status: CMIStatus;\n  private session: CMISession;\n  private content: CMIContent;\n  private settings: CMISettings;\n  private thresholds: CMIThresholds;\n\n  // Original complex objects\n  public learner_preference: CMILearnerPreference;\n  public score: Scorm2004CMIScore;\n  public comments_from_learner: CMICommentsFromLearner;\n  public comments_from_lms: CMICommentsFromLMS;\n  public interactions: CMIInteractions;\n  public objectives: CMIObjectives;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    // Initialize new component classes\n    this.metadata?.initialize();\n    this.learner?.initialize();\n    this.status?.initialize();\n    this.session?.initialize();\n    this.content?.initialize();\n    this.settings?.initialize();\n    this.thresholds?.initialize();\n\n    // Initialize original complex objects\n    this.learner_preference?.initialize();\n    this.score?.initialize();\n    this.comments_from_learner?.initialize();\n    this.comments_from_lms?.initialize();\n    this.interactions?.initialize();\n    this.objectives?.initialize();\n  }\n\n  /**\n   * Called when API is moving to another SCO\n   */\n  reset() {\n    this._initialized = false;\n\n    // Reset new component classes\n    this.metadata?.reset();\n    this.learner?.reset();\n    this.status?.reset();\n    this.session?.reset();\n    this.content?.reset();\n    this.settings?.reset();\n    this.thresholds?.reset();\n\n    // Reset original complex objects\n    this.objectives?.reset(false);\n    this.interactions?.reset(true);\n    this.score?.reset();\n    this.comments_from_learner?.reset();\n    this.comments_from_lms?.reset();\n    this.learner_preference?.reset();\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   * @private\n   */\n  get _version(): string {\n    return this.metadata._version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   * @private\n   */\n  set _version(_version: string) {\n    this.metadata._version = _version;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.metadata._children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {number} _children\n   * @private\n   */\n  set _children(_children: number) {\n    this.metadata._children = _children;\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this.status.completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    this.status.completion_status = completion_status;\n  }\n\n  /**\n   * Getter for _completion_threshold\n   * @return {string}\n   */\n  get completion_threshold(): string {\n    return this.thresholds.completion_threshold;\n  }\n\n  /**\n   * Setter for _completion_threshold. Can only be called before initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold: string) {\n    this.thresholds.completion_threshold = completion_threshold;\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this.settings.credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    this.settings.credit = credit;\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this.session.entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    this.session.entry = entry;\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    this.session.jsonString = this.jsonString;\n    return this.session.exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    this.session.exit = exit;\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this.content.launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    this.content.launch_data = launch_data;\n  }\n\n  /**\n   * Getter for _learner_id\n   * @return {string}\n   */\n  get learner_id(): string {\n    return this.learner.learner_id;\n  }\n\n  /**\n   * Setter for _learner_id. Can only be called before initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id: string) {\n    this.learner.learner_id = learner_id;\n  }\n\n  /**\n   * Getter for _learner_name\n   * @return {string}\n   */\n  get learner_name(): string {\n    return this.learner.learner_name;\n  }\n\n  /**\n   * Setter for _learner_name. Can only be called before initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name: string) {\n    this.learner.learner_name = learner_name;\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this.content.location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    this.content.location = location;\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this.settings.max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    this.settings.max_time_allowed = max_time_allowed;\n  }\n\n  /**\n   * Getter for _mode\n   * @return {string}\n   */\n  get mode(): string {\n    return this.settings.mode;\n  }\n\n  /**\n   * Setter for _mode. Can only be called before initialization.\n   * @param {string} mode\n   */\n  set mode(mode: string) {\n    this.settings.mode = mode;\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this.status.progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    this.status.progress_measure = progress_measure;\n  }\n\n  /**\n   * Getter for _scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score(): string {\n    return this.thresholds.scaled_passing_score;\n  }\n\n  /**\n   * Setter for _scaled_passing_score. Can only be called before initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score: string) {\n    this.thresholds.scaled_passing_score = scaled_passing_score;\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    this.session.jsonString = this.jsonString;\n    return this.session.session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    this.session.session_time = session_time;\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this.status.success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    this.status.success_status = success_status;\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this.content.suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    this.content.suspend_data = suspend_data;\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this.settings.time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    this.settings.time_limit_action = time_limit_action;\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this.session.total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    this.session.total_time = total_time;\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime(): string {\n    return this.session.getCurrentTotalTime(this.start_time);\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      comments_from_learner: CMICommentsFromLearner,\n   *      comments_from_lms: CMICommentsFromLMS,\n   *      completion_status: string,\n   *      completion_threshold: string,\n   *      credit: string,\n   *      entry: string,\n   *      exit: string,\n   *      interactions: CMIInteractions,\n   *      launch_data: string,\n   *      learner_id: string,\n   *      learner_name: string,\n   *      learner_preference: CMILearnerPreference,\n   *      location: string,\n   *      max_time_allowed: string,\n   *      mode: string,\n   *      objectives: CMIObjectives,\n   *      progress_measure: string,\n   *      scaled_passing_score: string,\n   *      score: Scorm2004CMIScore,\n   *      session_time: string,\n   *      success_status: string,\n   *      suspend_data: string,\n   *      time_limit_action: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    comments_from_learner: CMICommentsFromLearner;\n    comments_from_lms: CMICommentsFromLMS;\n    completion_status: string;\n    completion_threshold: string;\n    credit: string;\n    entry: string;\n    exit: string;\n    interactions: CMIInteractions;\n    launch_data: string;\n    learner_id: string;\n    learner_name: string;\n    learner_preference: CMILearnerPreference;\n    location: string;\n    max_time_allowed: string;\n    mode: string;\n    objectives: CMIObjectives;\n    progress_measure: string;\n    scaled_passing_score: string;\n    score: Scorm2004CMIScore;\n    session_time: string;\n    success_status: string;\n    suspend_data: string;\n    time_limit_action: string;\n  } {\n    this.jsonString = true;\n\n    // Set jsonString flag on component classes that need it\n    this.session.jsonString = true;\n\n    const result = {\n      comments_from_learner: this.comments_from_learner,\n      comments_from_lms: this.comments_from_lms,\n      completion_status: this.completion_status,\n      completion_threshold: this.completion_threshold,\n      credit: this.credit,\n      entry: this.entry,\n      exit: this.exit,\n      interactions: this.interactions,\n      launch_data: this.launch_data,\n      learner_id: this.learner_id,\n      learner_name: this.learner_name,\n      learner_preference: this.learner_preference,\n      location: this.location,\n      max_time_allowed: this.max_time_allowed,\n      mode: this.mode,\n      objectives: this.objectives,\n      progress_measure: this.progress_measure,\n      scaled_passing_score: this.scaled_passing_score,\n      score: this.score,\n      session_time: this.session_time,\n      success_status: this.success_status,\n      suspend_data: this.suspend_data,\n      time_limit_action: this.time_limit_action,\n    };\n\n    // Clean up jsonString flags\n    this.jsonString = false;\n    this.session.jsonString = false;\n\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { NAVBoolean } from \"../../constants/enums\";\nimport { CMIArray } from \"../common/array\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Sequencing } from \"./sequencing/sequencing\";\n\n/**\n * Class representing SCORM 2004's adl object\n */\nexport class ADL extends BaseCMI {\n  /**\n   * Constructor for adl\n   */\n  constructor() {\n    super(\"adl\");\n    this.nav = new ADLNav();\n    this.data = new ADLData();\n  }\n\n  public nav: ADLNav;\n  public data = new ADLData();\n  private _sequencing: Sequencing | null = null;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.nav?.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this.nav?.reset();\n  }\n\n  /**\n   * Getter for sequencing\n   * @return {Sequencing | null}\n   */\n  get sequencing(): Sequencing | null {\n    return this._sequencing;\n  }\n\n  /**\n   * Setter for sequencing\n   * @param {Sequencing | null} sequencing\n   */\n  set sequencing(sequencing: Sequencing | null) {\n    this._sequencing = sequencing;\n    if (sequencing) {\n      sequencing.adlNav = this.nav;\n      this.nav.sequencing = sequencing;\n    }\n  }\n\n  /**\n   * toJSON for adl\n   * @return {\n   *    {\n   *      nav: ADLNav,\n   *      data: ADLData\n   *    }\n   *  }\n   */\n  toJSON(): {\n    nav: ADLNav;\n    data: ADLData;\n  } {\n    this.jsonString = true;\n    const result = {\n      nav: this.nav,\n      data: this.data,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's `adl.nav` object\n */\n\nexport class ADLNav extends BaseCMI {\n  private _request = \"_none_\";\n  private _sequencing: Sequencing | null = null;\n\n  /**\n   * Constructor for `adl.nav`\n   */\n  constructor() {\n    super(\"adl.nav\");\n    this.request_valid = new ADLNavRequestValid();\n  }\n\n  public request_valid: ADLNavRequestValid;\n\n  /**\n   * Getter for sequencing\n   * @return {Sequencing | null}\n   */\n  get sequencing(): Sequencing | null {\n    return this._sequencing;\n  }\n\n  /**\n   * Setter for sequencing\n   * @param {Sequencing | null} sequencing\n   */\n  set sequencing(sequencing: Sequencing | null) {\n    this._sequencing = sequencing;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.request_valid?.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._request = \"_none_\";\n    if (this._sequencing) {\n      this._sequencing.adlNav = null;\n    }\n    this._sequencing = null;\n    this.request_valid?.reset();\n  }\n\n  /**\n   * Getter for _request\n   * @return {string}\n   */\n  get request(): string {\n    return this._request;\n  }\n\n  /**\n   * Setter for _request\n   * @param {string} request\n   */\n  set request(request: string) {\n    if (check2004ValidFormat(this._cmi_element + \".request\", request, scorm2004_regex.NAVEvent)) {\n      this._request = request;\n    }\n  }\n\n  /**\n   * toJSON for adl.nav\n   *\n   * @return {\n   *    {\n   *      request: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    request: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      request: this.request,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's `adl.data` object\n */\nexport class ADLData extends CMIArray {\n  constructor() {\n    super({\n      CMIElement: \"adl.data\",\n      children: scorm2004_constants.adl_data_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT as number,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's adl.data.n object\n */\nexport class ADLDataObject extends BaseCMI {\n  private _id = \"\";\n  private _store = \"\";\n\n  constructor() {\n    super(\"adl.data.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _store\n   * @return {string}\n   */\n  get store(): string {\n    return this._store;\n  }\n\n  /**\n   * Setter for _store\n   * @param {string} store\n   */\n  set store(store: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".store\", store, scorm2004_regex.CMILangString4000)\n    ) {\n      this._store = store;\n    }\n  }\n\n  /**\n   * toJSON for adl.data.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      store: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    store: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this._id,\n      store: this._store,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl.nav.request_valid object\n */\n\nexport class ADLNavRequestValid extends BaseCMI {\n  private _continue = \"unknown\";\n  private _previous = \"unknown\";\n  private _choice: {\n    [key: string]: NAVBoolean;\n  } = {};\n  private _jump: {\n    [key: string]: NAVBoolean;\n  } = {};\n  private _exit = \"unknown\";\n  private _exitAll = \"unknown\";\n  private _abandon = \"unknown\";\n  private _abandonAll = \"unknown\";\n  private _suspendAll = \"unknown\";\n\n  /**\n   * Constructor for adl.nav.request_valid\n   */\n  constructor() {\n    super(\"adl.nav.request_valid\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._continue = \"unknown\";\n    this._previous = \"unknown\";\n    this._choice = {};\n    this._jump = {};\n    this._exit = \"unknown\";\n    this._exitAll = \"unknown\";\n    this._abandon = \"unknown\";\n    this._abandonAll = \"unknown\";\n    this._suspendAll = \"unknown\";\n  }\n\n  /**\n   * Getter for _continue\n   * @return {string}\n   */\n  get continue(): string {\n    return this._continue;\n  }\n\n  /**\n   * Setter for _continue. Just throws an error.\n   * @param {string} _continue\n   */\n  set continue(_continue: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".continue\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".continue\", _continue, scorm2004_regex.NAVBoolean)\n    ) {\n      this._continue = _continue;\n    }\n  }\n\n  /**\n   * Getter for _previous\n   * @return {string}\n   */\n  get previous(): string {\n    return this._previous;\n  }\n\n  /**\n   * Setter for _previous. Just throws an error.\n   * @param {string} _previous\n   */\n  set previous(_previous: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".previous\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".previous\", _previous, scorm2004_regex.NAVBoolean)\n    ) {\n      this._previous = _previous;\n    }\n  }\n\n  /**\n   * Getter for _choice\n   * @return {{ [key: string]: NAVBoolean }}\n   */\n  get choice(): { [key: string]: NAVBoolean } {\n    return this._choice;\n  }\n\n  /**\n   * Setter for _choice\n   * @param {{ [key: string]: string }} choice\n   */\n  set choice(choice: { [key: string]: string }) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".choice\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (typeof choice !== \"object\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".choice\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    for (const key in choice) {\n      if ({}.hasOwnProperty.call(choice, key)) {\n        if (\n          check2004ValidFormat(\n            this._cmi_element + \".choice.\" + key,\n            choice[key] || \"\",\n            scorm2004_regex.NAVBoolean,\n          ) &&\n          check2004ValidFormat(this._cmi_element + \".choice.\" + key, key, scorm2004_regex.NAVTarget)\n        ) {\n          // Convert string value to NAVBoolean enum value\n          const value = choice[key];\n          if (value === \"true\") {\n            this._choice[key] = NAVBoolean.TRUE;\n          } else if (value === \"false\") {\n            this._choice[key] = NAVBoolean.FALSE;\n          } else if (value === \"unknown\") {\n            this._choice[key] = NAVBoolean.UNKNOWN;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Getter for _jump\n   * @return {{ [key: string]: NAVBoolean }}\n   */\n  get jump(): { [key: string]: NAVBoolean } {\n    return this._jump;\n  }\n\n  /**\n   * Setter for _jump\n   * @param {{ [key: string]: string }} jump\n   */\n  set jump(jump: { [key: string]: string }) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".jump\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (typeof jump !== \"object\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".jump\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    for (const key in jump) {\n      if ({}.hasOwnProperty.call(jump, key)) {\n        if (\n          check2004ValidFormat(\n            this._cmi_element + \".jump.\" + key,\n            jump[key] || \"\",\n            scorm2004_regex.NAVBoolean,\n          ) &&\n          check2004ValidFormat(this._cmi_element + \".jump.\" + key, key, scorm2004_regex.NAVTarget)\n        ) {\n          // Convert string value to NAVBoolean enum value\n          const value = jump[key];\n          if (value === \"true\") {\n            this._jump[key] = NAVBoolean.TRUE;\n          } else if (value === \"false\") {\n            this._jump[key] = NAVBoolean.FALSE;\n          } else if (value === \"unknown\") {\n            this._jump[key] = NAVBoolean.UNKNOWN;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Getter for _exit\n   * @return {string}\n   */\n  get exit(): string {\n    return this._exit;\n  }\n\n  /**\n   * Setter for _exit. Just throws an error.\n   * @param {string} _exit\n   */\n  set exit(_exit: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exit\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".exit\", _exit, scorm2004_regex.NAVBoolean)\n    ) {\n      this._exit = _exit;\n    }\n  }\n\n  /**\n   * Getter for _exitAll\n   * @return {string}\n   */\n  get exitAll(): string {\n    return this._exitAll;\n  }\n\n  /**\n   * Setter for _exitAll. Just throws an error.\n   * @param {string} _exitAll\n   */\n  set exitAll(_exitAll: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exitAll\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".exitAll\", _exitAll, scorm2004_regex.NAVBoolean)\n    ) {\n      this._exitAll = _exitAll;\n    }\n  }\n\n  /**\n   * Getter for _abandon\n   * @return {string}\n   */\n  get abandon(): string {\n    return this._abandon;\n  }\n\n  /**\n   * Setter for _abandon. Just throws an error.\n   * @param {string} _abandon\n   */\n  set abandon(_abandon: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".abandon\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".abandon\", _abandon, scorm2004_regex.NAVBoolean)\n    ) {\n      this._abandon = _abandon;\n    }\n  }\n\n  /**\n   * Getter for _abandonAll\n   * @return {string}\n   */\n  get abandonAll(): string {\n    return this._abandonAll;\n  }\n\n  /**\n   * Setter for _abandonAll. Just throws an error.\n   * @param {string} _abandonAll\n   */\n  set abandonAll(_abandonAll: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".abandonAll\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".abandonAll\", _abandonAll, scorm2004_regex.NAVBoolean)\n    ) {\n      this._abandonAll = _abandonAll;\n    }\n  }\n\n  /**\n   * Getter for _suspendAll\n   * @return {string}\n   */\n  get suspendAll(): string {\n    return this._suspendAll;\n  }\n\n  /**\n   * Setter for _suspendAll. Just throws an error.\n   * @param {string} _suspendAll\n   */\n  set suspendAll(_suspendAll: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".suspendAll\",\n        scorm2004_errors.READ_ONLY_ELEMENT as number,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".suspendAll\", _suspendAll, scorm2004_regex.NAVBoolean)\n    ) {\n      this._suspendAll = _suspendAll;\n    }\n  }\n\n  /**\n   * toJSON for adl.nav.request_valid\n   *\n   * @return {\n   *    {\n   *      previous: string,\n   *      continue: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    previous: string;\n    continue: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      previous: this._previous,\n      continue: this._continue,\n      choice: this._choice,\n      jump: this._jump,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Enum for rule condition operators\n */\nexport enum RuleConditionOperator {\n  NOT = \"not\",\n  AND = \"and\",\n  OR = \"or\",\n}\n\n/**\n * Enum for rule condition types\n */\nexport enum RuleConditionType {\n  SATISFIED = \"satisfied\",\n  OBJECTIVE_STATUS_KNOWN = \"objectiveStatusKnown\",\n  OBJECTIVE_MEASURE_KNOWN = \"objectiveMeasureKnown\",\n  OBJECTIVE_MEASURE_GREATER_THAN = \"objectiveMeasureGreaterThan\",\n  OBJECTIVE_MEASURE_LESS_THAN = \"objectiveMeasureLessThan\",\n  COMPLETED = \"completed\",\n  PROGRESS_KNOWN = \"progressKnown\",\n  ATTEMPTED = \"attempted\",\n  ATTEMPT_LIMIT_EXCEEDED = \"attemptLimitExceeded\",\n  TIME_LIMIT_EXCEEDED = \"timeLimitExceeded\",\n  OUTSIDE_AVAILABLE_TIME_RANGE = \"outsideAvailableTimeRange\",\n  ALWAYS = \"always\",\n}\n\n/**\n * Enum for rule action types\n */\nexport enum RuleActionType {\n  SKIP = \"skip\",\n  DISABLED = \"disabled\",\n  HIDE_FROM_CHOICE = \"hideFromChoice\",\n  STOP_FORWARD_TRAVERSAL = \"stopForwardTraversal\",\n  EXIT_PARENT = \"exitParent\",\n  EXIT_ALL = \"exitAll\",\n  RETRY = \"retry\",\n  RETRY_ALL = \"retryAll\",\n  CONTINUE = \"continue\",\n  PREVIOUS = \"previous\",\n  EXIT = \"exit\",\n}\n\n/**\n * Class representing a sequencing rule condition\n */\nexport class RuleCondition extends BaseCMI {\n  private _condition: RuleConditionType = RuleConditionType.ALWAYS;\n  private _operator: RuleConditionOperator | null = null;\n  private _parameters: Map<string, any> = new Map();\n  // Optional, overridable provider for current time (LMS may set via SequencingService)\n  private static _now: () => Date = () => new Date();\n\n  /**\n   * Constructor for RuleCondition\n   * @param {RuleConditionType} condition - The condition type\n   * @param {RuleConditionOperator | null} operator - The operator (null for no operator)\n   * @param {Map<string, any>} parameters - Additional parameters for the condition\n   */\n  constructor(\n    condition: RuleConditionType = RuleConditionType.ALWAYS,\n    operator: RuleConditionOperator | null = null,\n    parameters: Map<string, any> = new Map(),\n  ) {\n    super(\"ruleCondition\");\n    this._condition = condition;\n    this._operator = operator;\n    this._parameters = parameters;\n  }\n\n  /**\n   * Allow integrators to override the clock used for time-based rules.\n   */\n  public static setNowProvider(now: () => Date) {\n    if (typeof now === \"function\") {\n      RuleCondition._now = now;\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._condition = RuleConditionType.ALWAYS;\n    this._operator = null;\n    this._parameters = new Map();\n  }\n\n  /**\n   * Getter for condition\n   * @return {RuleConditionType}\n   */\n  get condition(): RuleConditionType {\n    return this._condition;\n  }\n\n  /**\n   * Setter for condition\n   * @param {RuleConditionType} condition\n   */\n  set condition(condition: RuleConditionType) {\n    this._condition = condition;\n  }\n\n  /**\n   * Getter for operator\n   * @return {RuleConditionOperator | null}\n   */\n  get operator(): RuleConditionOperator | null {\n    return this._operator;\n  }\n\n  /**\n   * Setter for operator\n   * @param {RuleConditionOperator | null} operator\n   */\n  set operator(operator: RuleConditionOperator | null) {\n    this._operator = operator;\n  }\n\n  /**\n   * Getter for parameters\n   * @return {Map<string, any>}\n   */\n  get parameters(): Map<string, any> {\n    return this._parameters;\n  }\n\n  /**\n   * Setter for parameters\n   * @param {Map<string, any>} parameters\n   */\n  set parameters(parameters: Map<string, any>) {\n    this._parameters = parameters;\n  }\n\n  /**\n   * Evaluate the condition for an activity\n   * @param {Activity} activity - The activity to evaluate the condition for\n   * @return {boolean} - True if the condition is met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    let result;\n    switch (this._condition) {\n      case RuleConditionType.SATISFIED:\n        result = activity.successStatus === SuccessStatus.PASSED;\n        break;\n      case RuleConditionType.OBJECTIVE_STATUS_KNOWN:\n        // noinspection PointlessBooleanExpressionJS\n        result = !!activity.objectiveMeasureStatus;\n        break;\n      case RuleConditionType.OBJECTIVE_MEASURE_KNOWN:\n        // noinspection PointlessBooleanExpressionJS\n        result = !!activity.objectiveMeasureStatus;\n        break;\n      case RuleConditionType.OBJECTIVE_MEASURE_GREATER_THAN: {\n        const greaterThanValue = this._parameters.get(\"threshold\") || 0;\n        result =\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure > greaterThanValue;\n        break;\n      }\n      case RuleConditionType.OBJECTIVE_MEASURE_LESS_THAN: {\n        const lessThanValue = this._parameters.get(\"threshold\") || 0;\n        result =\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure < lessThanValue;\n        break;\n      }\n      case RuleConditionType.COMPLETED:\n        result = activity.isCompleted;\n        break;\n      case RuleConditionType.PROGRESS_KNOWN:\n        result = activity.completionStatus !== \"unknown\";\n        break;\n      case RuleConditionType.ATTEMPTED:\n        result = activity.attemptCount > 0;\n        break;\n      case RuleConditionType.ATTEMPT_LIMIT_EXCEEDED: {\n        const attemptLimit = this._parameters.get(\"attemptLimit\") || 0;\n        result = activity.attemptCount >= attemptLimit;\n        break;\n      }\n      case RuleConditionType.TIME_LIMIT_EXCEEDED:\n        result = this.evaluateTimeLimitExceeded(activity);\n        break;\n      case RuleConditionType.OUTSIDE_AVAILABLE_TIME_RANGE:\n        result = this.evaluateOutsideAvailableTimeRange(activity);\n        break;\n      case RuleConditionType.ALWAYS:\n        result = true;\n        break;\n      default:\n        result = false;\n        break;\n    }\n\n    if (this._operator === RuleConditionOperator.NOT) {\n      result = !result;\n    }\n\n    return result;\n  }\n\n  /**\n   * Evaluate if time limit has been exceeded\n   * @param {Activity} activity - The activity to evaluate\n   * @return {boolean}\n   * @private\n   */\n  private evaluateTimeLimitExceeded(activity: Activity): boolean {\n    const timeLimitDuration = activity.timeLimitDuration;\n    if (!timeLimitDuration) {\n      return false;\n    }\n\n    // Parse ISO 8601 duration to milliseconds\n    const durationMs = this.parseISO8601Duration(timeLimitDuration);\n    if (durationMs === 0) {\n      return false;\n    }\n\n    // Get current attempt duration\n    const attemptDuration = activity.attemptExperiencedDuration;\n    const attemptDurationMs = this.parseISO8601Duration(attemptDuration);\n\n    return attemptDurationMs > durationMs;\n  }\n\n  /**\n   * Evaluate if activity is outside available time range\n   * @param {Activity} activity - The activity to evaluate\n   * @return {boolean}\n   * @private\n   */\n  private evaluateOutsideAvailableTimeRange(activity: Activity): boolean {\n    const beginTime = activity.beginTimeLimit;\n    const endTime = activity.endTimeLimit;\n\n    if (!beginTime && !endTime) {\n      return false;\n    }\n\n    const now = RuleCondition._now();\n\n    if (beginTime) {\n      const beginDate = new Date(beginTime);\n      if (now < beginDate) {\n        return true;\n      }\n    }\n\n    if (endTime) {\n      const endDate = new Date(endTime);\n      if (now > endDate) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Parse ISO 8601 duration to milliseconds\n   * @param {string} duration - ISO 8601 duration string\n   * @return {number} - Duration in milliseconds\n   * @private\n   */\n  private parseISO8601Duration(duration: string): number {\n    const regex = /PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?/;\n    const matches = duration.match(regex);\n\n    if (!matches) {\n      return 0;\n    }\n\n    const hours = parseInt(matches[1] || \"0\", 10);\n    const minutes = parseInt(matches[2] || \"0\", 10);\n    const seconds = parseFloat(matches[3] || \"0\");\n\n    return (hours * 3600 + minutes * 60 + seconds) * 1000;\n  }\n\n  /**\n   * toJSON for RuleCondition\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      condition: this._condition,\n      operator: this._operator,\n      parameters: Object.fromEntries(this._parameters),\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a sequencing rule\n */\nexport class SequencingRule extends BaseCMI {\n  private _conditions: RuleCondition[] = [];\n  private _action: RuleActionType = RuleActionType.SKIP;\n  private _conditionCombination: string | RuleConditionOperator = RuleConditionOperator.AND;\n\n  /**\n   * Constructor for SequencingRule\n   * @param {RuleActionType} action - The action to take when the rule conditions are met\n   * @param {string | RuleConditionOperator} conditionCombination - How to combine multiple conditions (\"all\"/\"and\" or \"any\"/\"or\")\n   */\n  constructor(\n    action: RuleActionType = RuleActionType.SKIP,\n    conditionCombination: string | RuleConditionOperator = RuleConditionOperator.AND,\n  ) {\n    super(\"sequencingRule\");\n    this._action = action;\n    this._conditionCombination = conditionCombination;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._conditions = [];\n    this._action = RuleActionType.SKIP;\n    this._conditionCombination = RuleConditionOperator.AND;\n  }\n\n  /**\n   * Getter for conditions\n   * @return {RuleCondition[]}\n   */\n  get conditions(): RuleCondition[] {\n    return this._conditions;\n  }\n\n  /**\n   * Add a condition to the rule\n   * @param {RuleCondition} condition - The condition to add\n   */\n  addCondition(condition: RuleCondition): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(condition instanceof RuleCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    // Check if the condition is already in the array\n    if (!this._conditions.includes(condition)) {\n      this._conditions.push(condition);\n    }\n  }\n\n  /**\n   * Remove a condition from the rule\n   * @param {RuleCondition} condition - The condition to remove\n   * @return {boolean} - True if the condition was removed, false otherwise\n   */\n  removeCondition(condition: RuleCondition): boolean {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(condition instanceof RuleCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    const index = this._conditions.indexOf(condition);\n    if (index !== -1) {\n      this._conditions.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for action\n   * @return {RuleActionType}\n   */\n  get action(): RuleActionType {\n    return this._action;\n  }\n\n  /**\n   * Setter for action\n   * @param {RuleActionType} action\n   */\n  set action(action: RuleActionType) {\n    this._action = action;\n  }\n\n  /**\n   * Getter for conditionCombination\n   * @return {string | RuleConditionOperator}\n   */\n  get conditionCombination(): string | RuleConditionOperator {\n    return this._conditionCombination;\n  }\n\n  /**\n   * Setter for conditionCombination\n   * @param {string | RuleConditionOperator} conditionCombination\n   */\n  set conditionCombination(conditionCombination: string | RuleConditionOperator) {\n    this._conditionCombination = conditionCombination;\n  }\n\n  /**\n   * Evaluate the rule for an activity\n   * @param {Activity} activity - The activity to evaluate the rule for\n   * @return {boolean} - True if the rule conditions are met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    if (this._conditions.length === 0) {\n      return true;\n    }\n\n    if (\n      this._conditionCombination === \"all\" ||\n      this._conditionCombination === RuleConditionOperator.AND\n    ) {\n      return this._conditions.every((condition) => condition.evaluate(activity));\n    } else if (\n      this._conditionCombination === \"any\" ||\n      this._conditionCombination === RuleConditionOperator.OR\n    ) {\n      return this._conditions.some((condition) => condition.evaluate(activity));\n    }\n\n    return false;\n  }\n\n  /**\n   * toJSON for SequencingRule\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      conditions: this._conditions,\n      action: this._action,\n      conditionCombination: this._conditionCombination,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a collection of sequencing rules\n */\nexport class SequencingRules extends BaseCMI {\n  private _preConditionRules: SequencingRule[] = [];\n  private _exitConditionRules: SequencingRule[] = [];\n  private _postConditionRules: SequencingRule[] = [];\n\n  /**\n   * Constructor for SequencingRules\n   */\n  constructor() {\n    super(\"sequencingRules\");\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._preConditionRules = [];\n    this._exitConditionRules = [];\n    this._postConditionRules = [];\n  }\n\n  /**\n   * Getter for preConditionRules\n   * @return {SequencingRule[]}\n   */\n  get preConditionRules(): SequencingRule[] {\n    return this._preConditionRules;\n  }\n\n  /**\n   * Add a pre-condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addPreConditionRule(rule: SequencingRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".preConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._preConditionRules.push(rule);\n  }\n\n  /**\n   * Getter for exitConditionRules\n   * @return {SequencingRule[]}\n   */\n  get exitConditionRules(): SequencingRule[] {\n    return this._exitConditionRules;\n  }\n\n  /**\n   * Add an exit condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addExitConditionRule(rule: SequencingRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exitConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._exitConditionRules.push(rule);\n  }\n\n  /**\n   * Getter for postConditionRules\n   * @return {SequencingRule[]}\n   */\n  get postConditionRules(): SequencingRule[] {\n    return this._postConditionRules;\n  }\n\n  /**\n   * Add a post-condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addPostConditionRule(rule: SequencingRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".postConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._postConditionRules.push(rule);\n  }\n\n  /**\n   * Evaluate pre-condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluatePreConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._preConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Evaluate exit condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluateExitConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._exitConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Evaluate post-condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluatePostConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._postConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * toJSON for SequencingRules\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      preConditionRules: this._preConditionRules,\n      exitConditionRules: this._exitConditionRules,\n      postConditionRules: this._postConditionRules,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { CompletionStatus, SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Enum for rollup action types\n */\nexport enum RollupActionType {\n  SATISFIED = \"satisfied\",\n  NOT_SATISFIED = \"notSatisfied\",\n  COMPLETED = \"completed\",\n  INCOMPLETE = \"incomplete\",\n}\n\n/**\n * Enum for rollup condition types\n */\nexport enum RollupConditionType {\n  SATISFIED = \"satisfied\",\n  OBJECTIVE_STATUS_KNOWN = \"objectiveStatusKnown\",\n  OBJECTIVE_MEASURE_KNOWN = \"objectiveMeasureKnown\",\n  OBJECTIVE_MEASURE_GREATER_THAN = \"objectiveMeasureGreaterThan\",\n  OBJECTIVE_MEASURE_LESS_THAN = \"objectiveMeasureLessThan\",\n  COMPLETED = \"completed\",\n  PROGRESS_KNOWN = \"progressKnown\",\n  ATTEMPTED = \"attempted\",\n  NOT_ATTEMPTED = \"notAttempted\",\n  ALWAYS = \"always\",\n}\n\n/**\n * Enum for rollup consideration types\n */\nexport enum RollupConsiderationType {\n  ALL = \"all\",\n  ANY = \"any\",\n  NONE = \"none\",\n  AT_LEAST_COUNT = \"atLeastCount\",\n  AT_LEAST_PERCENT = \"atLeastPercent\",\n}\n\n/**\n * Class representing a rollup condition\n */\nexport class RollupCondition extends BaseCMI {\n  private _condition: RollupConditionType = RollupConditionType.ALWAYS;\n  private _parameters: Map<string, any> = new Map();\n\n  /**\n   * Constructor for RollupCondition\n   * @param {RollupConditionType} condition - The condition type\n   * @param {Map<string, any>} parameters - Additional parameters for the condition\n   */\n  constructor(\n    condition: RollupConditionType = RollupConditionType.ALWAYS,\n    parameters: Map<string, any> = new Map(),\n  ) {\n    super(\"rollupCondition\");\n    this._condition = condition;\n    this._parameters = parameters;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for condition\n   * @return {RollupConditionType}\n   */\n  get condition(): RollupConditionType {\n    return this._condition;\n  }\n\n  /**\n   * Setter for condition\n   * @param {RollupConditionType} condition\n   */\n  set condition(condition: RollupConditionType) {\n    this._condition = condition;\n  }\n\n  /**\n   * Getter for parameters\n   * @return {Map<string, any>}\n   */\n  get parameters(): Map<string, any> {\n    return this._parameters;\n  }\n\n  /**\n   * Setter for parameters\n   * @param {Map<string, any>} parameters\n   */\n  set parameters(parameters: Map<string, any>) {\n    this._parameters = parameters;\n  }\n\n  /**\n   * Evaluate the condition for an activity\n   * @param {Activity} activity - The activity to evaluate the condition for\n   * @return {boolean} - True if the condition is met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    switch (this._condition) {\n      case RollupConditionType.SATISFIED:\n        return activity.successStatus === SuccessStatus.PASSED;\n      case RollupConditionType.OBJECTIVE_STATUS_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RollupConditionType.OBJECTIVE_MEASURE_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RollupConditionType.OBJECTIVE_MEASURE_GREATER_THAN: {\n        const greaterThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure > greaterThanValue\n        );\n      }\n      case RollupConditionType.OBJECTIVE_MEASURE_LESS_THAN: {\n        const lessThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure < lessThanValue\n        );\n      }\n      case RollupConditionType.COMPLETED:\n        return activity.isCompleted;\n      case RollupConditionType.PROGRESS_KNOWN:\n        return activity.completionStatus !== CompletionStatus.UNKNOWN;\n      case RollupConditionType.ATTEMPTED:\n        return activity.attemptCount > 0;\n      case RollupConditionType.NOT_ATTEMPTED:\n        return activity.attemptCount === 0;\n      case RollupConditionType.ALWAYS:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RollupCondition\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      condition: this._condition,\n      parameters: Object.fromEntries(this._parameters),\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a rollup rule\n */\nexport class RollupRule extends BaseCMI {\n  private _conditions: RollupCondition[] = [];\n  private _action: RollupActionType = RollupActionType.SATISFIED;\n  private _consideration: RollupConsiderationType = RollupConsiderationType.ALL;\n  private _minimumCount: number = 0;\n  private _minimumPercent: number = 0;\n\n  /**\n   * Constructor for RollupRule\n   * @param {RollupActionType} action - The action to take when the rule conditions are met\n   * @param {RollupConsiderationType} consideration - How to consider child activities\n   * @param {number} minimumCount - The minimum count for AT_LEAST_COUNT consideration\n   * @param {number} minimumPercent - The minimum percent for AT_LEAST_PERCENT consideration\n   */\n  constructor(\n    action: RollupActionType = RollupActionType.SATISFIED,\n    consideration: RollupConsiderationType = RollupConsiderationType.ALL,\n    minimumCount: number = 0,\n    minimumPercent: number = 0,\n  ) {\n    super(\"rollupRule\");\n    this._action = action;\n    this._consideration = consideration;\n    this._minimumCount = minimumCount;\n    this._minimumPercent = minimumPercent;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._conditions = [];\n  }\n\n  /**\n   * Getter for conditions\n   * @return {RollupCondition[]}\n   */\n  get conditions(): RollupCondition[] {\n    return this._conditions;\n  }\n\n  /**\n   * Add a condition to the rule\n   * @param {RollupCondition} condition - The condition to add\n   */\n  addCondition(condition: RollupCondition): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(condition instanceof RollupCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._conditions.push(condition);\n  }\n\n  /**\n   * Remove a condition from the rule\n   * @param {RollupCondition} condition - The condition to remove\n   * @return {boolean} - True if the condition was removed, false otherwise\n   */\n  removeCondition(condition: RollupCondition): boolean {\n    const index = this._conditions.indexOf(condition);\n    if (index !== -1) {\n      this._conditions.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for action\n   * @return {RollupActionType}\n   */\n  get action(): RollupActionType {\n    return this._action;\n  }\n\n  /**\n   * Setter for action\n   * @param {RollupActionType} action\n   */\n  set action(action: RollupActionType) {\n    this._action = action;\n  }\n\n  /**\n   * Getter for consideration\n   * @return {RollupConsiderationType}\n   */\n  get consideration(): RollupConsiderationType {\n    return this._consideration;\n  }\n\n  /**\n   * Setter for consideration\n   * @param {RollupConsiderationType} consideration\n   */\n  set consideration(consideration: RollupConsiderationType) {\n    this._consideration = consideration;\n  }\n\n  /**\n   * Getter for minimumCount\n   * @return {number}\n   */\n  get minimumCount(): number {\n    return this._minimumCount;\n  }\n\n  /**\n   * Setter for minimumCount\n   * @param {number} minimumCount\n   */\n  set minimumCount(minimumCount: number) {\n    if (minimumCount >= 0) {\n      this._minimumCount = minimumCount;\n    }\n  }\n\n  /**\n   * Getter for minimumPercent\n   * @return {number}\n   */\n  get minimumPercent(): number {\n    return this._minimumPercent;\n  }\n\n  /**\n   * Setter for minimumPercent\n   * @param {number} minimumPercent\n   */\n  set minimumPercent(minimumPercent: number) {\n    if (minimumPercent >= 0 && minimumPercent <= 100) {\n      this._minimumPercent = minimumPercent;\n    }\n  }\n\n  /**\n   * Evaluate the rule for a set of child activities\n   * @param {Activity[]} children - The child activities to evaluate the rule for\n   * @return {boolean} - True if the rule conditions are met, false otherwise\n   */\n  evaluate(children: Activity[]): boolean {\n    if (children.length === 0) {\n      return false;\n    }\n\n    // Filter children that meet all conditions\n    const matchingChildren = children.filter((child) => {\n      return this._conditions.every((condition) => condition.evaluate(child));\n    });\n\n    // Apply consideration\n    switch (this._consideration) {\n      case RollupConsiderationType.ALL:\n        return matchingChildren.length === children.length;\n      case RollupConsiderationType.ANY:\n        return matchingChildren.length > 0;\n      case RollupConsiderationType.NONE:\n        return matchingChildren.length === 0;\n      case RollupConsiderationType.AT_LEAST_COUNT:\n        return matchingChildren.length >= this._minimumCount;\n      case RollupConsiderationType.AT_LEAST_PERCENT: {\n        const percent = (matchingChildren.length / children.length) * 100;\n        return percent >= this._minimumPercent;\n      }\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RollupRule\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      conditions: this._conditions,\n      action: this._action,\n      consideration: this._consideration,\n      minimumCount: this._minimumCount,\n      minimumPercent: this._minimumPercent,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a collection of rollup rules\n */\nexport class RollupRules extends BaseCMI {\n  private _rules: RollupRule[] = [];\n\n  /**\n   * Constructor for RollupRules\n   */\n  constructor() {\n    super(\"rollupRules\");\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._rules = [];\n  }\n\n  /**\n   * Getter for rules\n   * @return {RollupRule[]}\n   */\n  get rules(): RollupRule[] {\n    return this._rules;\n  }\n\n  /**\n   * Add a rule\n   * @param {RollupRule} rule - The rule to add\n   */\n  addRule(rule: RollupRule): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rule instanceof RollupRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".rules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._rules.push(rule);\n  }\n\n  /**\n   * Remove a rule\n   * @param {RollupRule} rule - The rule to remove\n   * @return {boolean} - True if the rule was removed, false otherwise\n   */\n  removeRule(rule: RollupRule): boolean {\n    const index = this._rules.indexOf(rule);\n    if (index !== -1) {\n      this._rules.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Process rollup for an activity\n   * @param {Activity} activity - The activity to process rollup for\n   */\n  processRollup(activity: Activity): void {\n    if (!activity || activity.children.length === 0) {\n      return;\n    }\n\n    const children = activity.getAvailableChildren();\n    let completionRollup = false;\n    let successRollup = false;\n\n    // First, check if we should use measure rollup (RB.1.2.a)\n    if (activity.sequencingControls.rollupObjectiveSatisfied) {\n      const measureRollupResult = this._objectiveRollupUsingMeasure(activity, children);\n      if (measureRollupResult !== null) {\n        successRollup = true;\n        // Skip rule-based rollup if measure rollup was successful\n      }\n    }\n\n    // Process each rule (RB.1.2.b)\n    if (!successRollup) {\n      for (const rule of this._rules) {\n        if (rule.evaluate(children)) {\n          switch (rule.action) {\n            case RollupActionType.SATISFIED:\n              activity.successStatus = SuccessStatus.PASSED;\n              successRollup = true;\n              break;\n            case RollupActionType.NOT_SATISFIED:\n              activity.successStatus = SuccessStatus.FAILED;\n              successRollup = true;\n              break;\n            case RollupActionType.COMPLETED:\n              activity.completionStatus = CompletionStatus.COMPLETED;\n              activity.isCompleted = true;\n              completionRollup = true;\n              break;\n            case RollupActionType.INCOMPLETE:\n              activity.completionStatus = CompletionStatus.INCOMPLETE;\n              activity.isCompleted = false;\n              completionRollup = true;\n              break;\n          }\n        }\n      }\n    }\n\n    // If no rules applied for completion, use default rollup\n    if (!completionRollup) {\n      this._defaultCompletionRollup(activity, children);\n    }\n\n    // If no rules applied for success, use default rollup (RB.1.2.c)\n    if (!successRollup) {\n      this._defaultSuccessRollup(activity, children);\n    }\n  }\n\n  /**\n   * Default completion rollup\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @private\n   */\n  private _defaultCompletionRollup(activity: Activity, children: Activity[]): void {\n    // If all children are completed, mark the parent as completed\n    const allCompleted = children.every((child) => child.isCompleted);\n    if (allCompleted) {\n      activity.completionStatus = CompletionStatus.COMPLETED;\n      activity.isCompleted = true;\n    } else {\n      // If any child is incomplete, mark the parent as incomplete\n      const anyIncomplete = children.some(\n        (child) => child.completionStatus === CompletionStatus.INCOMPLETE,\n      );\n      if (anyIncomplete) {\n        activity.completionStatus = CompletionStatus.INCOMPLETE;\n        activity.isCompleted = false;\n      }\n    }\n  }\n\n  /**\n   * Objective Rollup Using Measure Process (RB.1.2.a)\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @return {boolean | null} - True if satisfied, false if not satisfied, null if measure rollup not applicable\n   * @private\n   */\n  private _objectiveRollupUsingMeasure(activity: Activity, children: Activity[]): boolean | null {\n    // Check if objective measure weight is properly configured\n    const objectiveMeasureWeight = activity.sequencingControls.objectiveMeasureWeight;\n    if (objectiveMeasureWeight <= 0) {\n      return null; // Measure rollup not applicable\n    }\n\n    // Calculate weighted average of child objective measures\n    let totalWeight = 0;\n    let weightedSum = 0;\n    let hasValidMeasures = false;\n\n    for (const child of children) {\n      // Only include children that should contribute to rollup\n      if (!child.sequencingControls.rollupObjectiveSatisfied) {\n        continue;\n      }\n\n      // Check if child has a valid objective measure\n      if (child.objectiveMeasureStatus && child.objectiveMeasureStatus === true) {\n        const childWeight = child.sequencingControls.objectiveMeasureWeight;\n        if (childWeight > 0) {\n          weightedSum += child.objectiveNormalizedMeasure * childWeight;\n          totalWeight += childWeight;\n          hasValidMeasures = true;\n        }\n      }\n    }\n\n    // If no valid measures found, measure rollup is not applicable\n    if (!hasValidMeasures || totalWeight === 0) {\n      return null;\n    }\n\n    // Calculate the normalized measure for the parent activity\n    const normalizedMeasure = weightedSum / totalWeight;\n    activity.objectiveNormalizedMeasure = normalizedMeasure;\n    activity.objectiveMeasureStatus = true;\n\n    // Determine satisfaction based on scaled passing score\n    if (normalizedMeasure >= activity.scaledPassingScore) {\n      activity.successStatus = SuccessStatus.PASSED;\n      activity.objectiveSatisfiedStatus = true;\n      return true;\n    } else {\n      activity.successStatus = SuccessStatus.FAILED;\n      activity.objectiveSatisfiedStatus = false;\n      return false;\n    }\n  }\n\n  /**\n   * Default success rollup\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @private\n   */\n  private _defaultSuccessRollup(activity: Activity, children: Activity[]): void {\n    // If all children are satisfied, mark the parent as satisfied\n    const allSatisfied = children.every((child) => child.successStatus === SuccessStatus.PASSED);\n    if (allSatisfied) {\n      activity.successStatus = SuccessStatus.PASSED;\n    } else {\n      // If any child is not satisfied, mark the parent as not satisfied\n      const anyNotSatisfied = children.some(\n        (child) => child.successStatus === SuccessStatus.FAILED,\n      );\n      if (anyNotSatisfied) {\n        activity.successStatus = SuccessStatus.FAILED;\n      }\n    }\n  }\n\n  /**\n   * toJSON for RollupRules\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      rules: this._rules,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","const ValidLanguages: string[] = [\n  \"aa\",\n  \"ab\",\n  \"ae\",\n  \"af\",\n  \"ak\",\n  \"am\",\n  \"an\",\n  \"ar\",\n  \"as\",\n  \"av\",\n  \"ay\",\n  \"az\",\n  \"ba\",\n  \"be\",\n  \"bg\",\n  \"bh\",\n  \"bi\",\n  \"bm\",\n  \"bn\",\n  \"bo\",\n  \"br\",\n  \"bs\",\n  \"ca\",\n  \"ce\",\n  \"ch\",\n  \"co\",\n  \"cr\",\n  \"cs\",\n  \"cu\",\n  \"cv\",\n  \"cy\",\n  \"da\",\n  \"de\",\n  \"dv\",\n  \"dz\",\n  \"ee\",\n  \"el\",\n  \"en\",\n  \"eo\",\n  \"es\",\n  \"et\",\n  \"eu\",\n  \"fa\",\n  \"ff\",\n  \"fi\",\n  \"fj\",\n  \"fo\",\n  \"fr\",\n  \"fy\",\n  \"ga\",\n  \"gd\",\n  \"gl\",\n  \"gn\",\n  \"gu\",\n  \"gv\",\n  \"ha\",\n  \"he\",\n  \"hi\",\n  \"ho\",\n  \"hr\",\n  \"ht\",\n  \"hu\",\n  \"hy\",\n  \"hz\",\n  \"ia\",\n  \"id\",\n  \"ie\",\n  \"ig\",\n  \"ii\",\n  \"ik\",\n  \"io\",\n  \"is\",\n  \"it\",\n  \"iu\",\n  \"ja\",\n  \"jv\",\n  \"ka\",\n  \"kg\",\n  \"ki\",\n  \"kj\",\n  \"kk\",\n  \"kl\",\n  \"km\",\n  \"kn\",\n  \"ko\",\n  \"kr\",\n  \"ks\",\n  \"ku\",\n  \"kv\",\n  \"kw\",\n  \"ky\",\n  \"la\",\n  \"lb\",\n  \"lg\",\n  \"li\",\n  \"ln\",\n  \"lo\",\n  \"lt\",\n  \"lu\",\n  \"lv\",\n  \"mg\",\n  \"mh\",\n  \"mi\",\n  \"mk\",\n  \"ml\",\n  \"mn\",\n  \"mo\",\n  \"mr\",\n  \"ms\",\n  \"mt\",\n  \"my\",\n  \"na\",\n  \"nb\",\n  \"nd\",\n  \"ne\",\n  \"ng\",\n  \"nl\",\n  \"nn\",\n  \"no\",\n  \"nr\",\n  \"nv\",\n  \"ny\",\n  \"oc\",\n  \"oj\",\n  \"om\",\n  \"or\",\n  \"os\",\n  \"pa\",\n  \"pi\",\n  \"pl\",\n  \"ps\",\n  \"pt\",\n  \"qu\",\n  \"rm\",\n  \"rn\",\n  \"ro\",\n  \"ru\",\n  \"rw\",\n  \"sa\",\n  \"sc\",\n  \"sd\",\n  \"se\",\n  \"sg\",\n  \"sh\",\n  \"si\",\n  \"sk\",\n  \"sl\",\n  \"sm\",\n  \"sn\",\n  \"so\",\n  \"sq\",\n  \"sr\",\n  \"ss\",\n  \"st\",\n  \"su\",\n  \"sv\",\n  \"sw\",\n  \"ta\",\n  \"te\",\n  \"tg\",\n  \"th\",\n  \"ti\",\n  \"tk\",\n  \"tl\",\n  \"tn\",\n  \"to\",\n  \"tr\",\n  \"ts\",\n  \"tt\",\n  \"tw\",\n  \"ty\",\n  \"ug\",\n  \"uk\",\n  \"ur\",\n  \"uz\",\n  \"ve\",\n  \"vi\",\n  \"vo\",\n  \"wa\",\n  \"wo\",\n  \"xh\",\n  \"yi\",\n  \"yo\",\n  \"za\",\n  \"zh\",\n  \"zu\",\n  \"aar\",\n  \"abk\",\n  \"ave\",\n  \"afr\",\n  \"aka\",\n  \"amh\",\n  \"arg\",\n  \"ara\",\n  \"asm\",\n  \"ava\",\n  \"aym\",\n  \"aze\",\n  \"bak\",\n  \"bel\",\n  \"bul\",\n  \"bih\",\n  \"bis\",\n  \"bam\",\n  \"ben\",\n  \"tib\",\n  \"bod\",\n  \"bre\",\n  \"bos\",\n  \"cat\",\n  \"che\",\n  \"cha\",\n  \"cos\",\n  \"cre\",\n  \"cze\",\n  \"ces\",\n  \"chu\",\n  \"chv\",\n  \"wel\",\n  \"cym\",\n  \"dan\",\n  \"ger\",\n  \"deu\",\n  \"div\",\n  \"dzo\",\n  \"ewe\",\n  \"gre\",\n  \"ell\",\n  \"eng\",\n  \"epo\",\n  \"spa\",\n  \"est\",\n  \"baq\",\n  \"eus\",\n  \"per\",\n  \"fas\",\n  \"ful\",\n  \"fin\",\n  \"fij\",\n  \"fao\",\n  \"fre\",\n  \"fra\",\n  \"fry\",\n  \"gle\",\n  \"gla\",\n  \"glg\",\n  \"grn\",\n  \"guj\",\n  \"glv\",\n  \"hau\",\n  \"heb\",\n  \"hin\",\n  \"hmo\",\n  \"hrv\",\n  \"hat\",\n  \"hun\",\n  \"arm\",\n  \"hye\",\n  \"her\",\n  \"ina\",\n  \"ind\",\n  \"ile\",\n  \"ibo\",\n  \"iii\",\n  \"ipk\",\n  \"ido\",\n  \"ice\",\n  \"isl\",\n  \"ita\",\n  \"iku\",\n  \"jpn\",\n  \"jav\",\n  \"geo\",\n  \"kat\",\n  \"kon\",\n  \"kik\",\n  \"kua\",\n  \"kaz\",\n  \"kal\",\n  \"khm\",\n  \"kan\",\n  \"kor\",\n  \"kau\",\n  \"kas\",\n  \"kur\",\n  \"kom\",\n  \"cor\",\n  \"kir\",\n  \"lat\",\n  \"ltz\",\n  \"lug\",\n  \"lim\",\n  \"lin\",\n  \"lao\",\n  \"lit\",\n  \"lub\",\n  \"lav\",\n  \"mlg\",\n  \"mah\",\n  \"mao\",\n  \"mri\",\n  \"mac\",\n  \"mkd\",\n  \"mal\",\n  \"mon\",\n  \"mol\",\n  \"mar\",\n  \"may\",\n  \"msa\",\n  \"mlt\",\n  \"bur\",\n  \"mya\",\n  \"nau\",\n  \"nob\",\n  \"nde\",\n  \"nep\",\n  \"ndo\",\n  \"dut\",\n  \"nld\",\n  \"nno\",\n  \"nor\",\n  \"nbl\",\n  \"nav\",\n  \"nya\",\n  \"oci\",\n  \"oji\",\n  \"orm\",\n  \"ori\",\n  \"oss\",\n  \"pan\",\n  \"pli\",\n  \"pol\",\n  \"pus\",\n  \"por\",\n  \"que\",\n  \"roh\",\n  \"run\",\n  \"rum\",\n  \"ron\",\n  \"rus\",\n  \"kin\",\n  \"san\",\n  \"srd\",\n  \"snd\",\n  \"sme\",\n  \"sag\",\n  \"slo\",\n  \"sin\",\n  \"slk\",\n  \"slv\",\n  \"smo\",\n  \"sna\",\n  \"som\",\n  \"alb\",\n  \"sqi\",\n  \"srp\",\n  \"ssw\",\n  \"sot\",\n  \"sun\",\n  \"swe\",\n  \"swa\",\n  \"tam\",\n  \"tel\",\n  \"tgk\",\n  \"tha\",\n  \"tir\",\n  \"tuk\",\n  \"tgl\",\n  \"tsn\",\n  \"ton\",\n  \"tur\",\n  \"tso\",\n  \"tat\",\n  \"twi\",\n  \"tah\",\n  \"uig\",\n  \"ukr\",\n  \"urd\",\n  \"uzb\",\n  \"ven\",\n  \"vie\",\n  \"vol\",\n  \"wln\",\n  \"wol\",\n  \"xho\",\n  \"yid\",\n  \"yor\",\n  \"zha\",\n  \"chi\",\n  \"zho\",\n  \"zul\",\n];\nexport default ValidLanguages;\n","import { BaseCMI } from \"../../common/base_cmi\";\n\n/**\n * Enum for selection timing\n */\nexport enum SelectionTiming {\n  NEVER = \"never\",\n  ONCE = \"once\",\n  ON_EACH_NEW_ATTEMPT = \"onEachNewAttempt\",\n}\n\n/**\n * Enum for randomization timing\n */\nexport enum RandomizationTiming {\n  NEVER = \"never\",\n  ONCE = \"once\",\n  ON_EACH_NEW_ATTEMPT = \"onEachNewAttempt\",\n}\n\n/**\n * Class representing SCORM 2004 sequencing controls\n */\nexport class SequencingControls extends BaseCMI {\n  // Sequencing Control Modes\n  private _enabled: boolean = true;\n  private _choice: boolean = true;\n  private _choiceExit: boolean = true;\n  private _flow: boolean = false;\n  private _forwardOnly: boolean = false;\n  private _useCurrentAttemptObjectiveInfo: boolean = true;\n  private _useCurrentAttemptProgressInfo: boolean = true;\n\n  // Constrain Choice Controls\n  private _preventActivation: boolean = false;\n  private _constrainChoice: boolean = false;\n  // Rule-driven traversal limiter (e.g., post-condition stopForwardTraversal)\n  private _stopForwardTraversal: boolean = false;\n\n  // Rollup Controls\n  private _rollupObjectiveSatisfied: boolean = true;\n  private _rollupProgressCompletion: boolean = true;\n  private _objectiveMeasureWeight: number = 1.0;\n\n  // Selection Controls\n  private _selectionTiming: SelectionTiming = SelectionTiming.NEVER;\n  private _selectCount: number | null = null;\n  private _selectionCountStatus: boolean = false;\n  private _randomizeChildren: boolean = false;\n\n  // Randomization Controls\n  private _randomizationTiming: RandomizationTiming = RandomizationTiming.NEVER;\n  private _reorderChildren: boolean = false;\n\n  /**\n   * Constructor for SequencingControls\n   */\n  constructor() {\n    super(\"sequencingControls\");\n  }\n\n  /**\n   * Reset the sequencing controls to their default values\n   */\n  reset() {\n    this._initialized = false;\n    this._enabled = true;\n    this._choice = true;\n    this._choiceExit = true;\n    this._flow = false;\n    this._forwardOnly = false;\n    this._useCurrentAttemptObjectiveInfo = true;\n    this._useCurrentAttemptProgressInfo = true;\n    this._preventActivation = false;\n    this._constrainChoice = false;\n    this._stopForwardTraversal = false;\n    this._rollupObjectiveSatisfied = true;\n    this._rollupProgressCompletion = true;\n    this._objectiveMeasureWeight = 1.0;\n    this._selectionTiming = SelectionTiming.NEVER;\n    this._selectCount = null;\n    this._selectionCountStatus = false;\n    this._randomizeChildren = false;\n    this._randomizationTiming = RandomizationTiming.NEVER;\n    this._reorderChildren = false;\n  }\n\n  /**\n   * Getter for enabled\n   * @return {boolean}\n   */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  /**\n   * Setter for enabled\n   * @param {boolean} enabled\n   */\n  set enabled(enabled: boolean) {\n    this._enabled = enabled;\n  }\n\n  /**\n   * Getter for choice\n   * @return {boolean}\n   */\n  get choice(): boolean {\n    return this._choice;\n  }\n\n  /**\n   * Setter for choice\n   * @param {boolean} choice\n   */\n  set choice(choice: boolean) {\n    this._choice = choice;\n  }\n\n  /**\n   * Getter for choiceExit\n   * @return {boolean}\n   */\n  get choiceExit(): boolean {\n    return this._choiceExit;\n  }\n\n  /**\n   * Setter for choiceExit\n   * @param {boolean} choiceExit\n   */\n  set choiceExit(choiceExit: boolean) {\n    this._choiceExit = choiceExit;\n  }\n\n  /**\n   * Getter for flow\n   * @return {boolean}\n   */\n  get flow(): boolean {\n    return this._flow;\n  }\n\n  /**\n   * Setter for flow\n   * @param {boolean} flow\n   */\n  set flow(flow: boolean) {\n    this._flow = flow;\n  }\n\n  /**\n   * Getter for forwardOnly\n   * @return {boolean}\n   */\n  get forwardOnly(): boolean {\n    return this._forwardOnly;\n  }\n\n  /**\n   * Setter for forwardOnly\n   * @param {boolean} forwardOnly\n   */\n  set forwardOnly(forwardOnly: boolean) {\n    this._forwardOnly = forwardOnly;\n  }\n\n  /**\n   * Getter for useCurrentAttemptObjectiveInfo\n   * @return {boolean}\n   */\n  get useCurrentAttemptObjectiveInfo(): boolean {\n    return this._useCurrentAttemptObjectiveInfo;\n  }\n\n  /**\n   * Setter for useCurrentAttemptObjectiveInfo\n   * @param {boolean} useCurrentAttemptObjectiveInfo\n   */\n  set useCurrentAttemptObjectiveInfo(useCurrentAttemptObjectiveInfo: boolean) {\n    this._useCurrentAttemptObjectiveInfo = useCurrentAttemptObjectiveInfo;\n  }\n\n  /**\n   * Getter for useCurrentAttemptProgressInfo\n   * @return {boolean}\n   */\n  get useCurrentAttemptProgressInfo(): boolean {\n    return this._useCurrentAttemptProgressInfo;\n  }\n\n  /**\n   * Setter for useCurrentAttemptProgressInfo\n   * @param {boolean} useCurrentAttemptProgressInfo\n   */\n  set useCurrentAttemptProgressInfo(useCurrentAttemptProgressInfo: boolean) {\n    this._useCurrentAttemptProgressInfo = useCurrentAttemptProgressInfo;\n  }\n\n  /**\n   * Getter for preventActivation\n   * @return {boolean}\n   */\n  get preventActivation(): boolean {\n    return this._preventActivation;\n  }\n\n  /**\n   * Setter for preventActivation\n   * @param {boolean} preventActivation\n   */\n  set preventActivation(preventActivation: boolean) {\n    this._preventActivation = preventActivation;\n  }\n\n  /**\n   * Getter for constrainChoice\n   * @return {boolean}\n   */\n  get constrainChoice(): boolean {\n    return this._constrainChoice;\n  }\n\n  /**\n   * Setter for constrainChoice\n   * @param {boolean} constrainChoice\n   */\n  set constrainChoice(constrainChoice: boolean) {\n    this._constrainChoice = constrainChoice;\n  }\n\n  /**\n   * Getter for stopForwardTraversal\n   * @return {boolean}\n   */\n  get stopForwardTraversal(): boolean {\n    return this._stopForwardTraversal;\n  }\n\n  /**\n   * Setter for stopForwardTraversal\n   * @param {boolean} stopForwardTraversal\n   */\n  set stopForwardTraversal(stopForwardTraversal: boolean) {\n    this._stopForwardTraversal = stopForwardTraversal;\n  }\n\n  /**\n   * Getter for rollupObjectiveSatisfied\n   * @return {boolean}\n   */\n  get rollupObjectiveSatisfied(): boolean {\n    return this._rollupObjectiveSatisfied;\n  }\n\n  /**\n   * Setter for rollupObjectiveSatisfied\n   * @param {boolean} rollupObjectiveSatisfied\n   */\n  set rollupObjectiveSatisfied(rollupObjectiveSatisfied: boolean) {\n    this._rollupObjectiveSatisfied = rollupObjectiveSatisfied;\n  }\n\n  /**\n   * Getter for rollupProgressCompletion\n   * @return {boolean}\n   */\n  get rollupProgressCompletion(): boolean {\n    return this._rollupProgressCompletion;\n  }\n\n  /**\n   * Setter for rollupProgressCompletion\n   * @param {boolean} rollupProgressCompletion\n   */\n  set rollupProgressCompletion(rollupProgressCompletion: boolean) {\n    this._rollupProgressCompletion = rollupProgressCompletion;\n  }\n\n  /**\n   * Getter for objectiveMeasureWeight\n   * @return {number}\n   */\n  get objectiveMeasureWeight(): number {\n    return this._objectiveMeasureWeight;\n  }\n\n  /**\n   * Setter for objectiveMeasureWeight\n   * @param {number} objectiveMeasureWeight\n   */\n  set objectiveMeasureWeight(objectiveMeasureWeight: number) {\n    // According to SCORM 2004, weight must be >= 0 but there's no upper limit\n    if (objectiveMeasureWeight >= 0) {\n      this._objectiveMeasureWeight = objectiveMeasureWeight;\n    }\n  }\n\n  /**\n   * Check if choice navigation is allowed\n   * @return {boolean} - True if choice navigation is allowed, false otherwise\n   */\n  isChoiceNavigationAllowed(): boolean {\n    return this._enabled && !this._constrainChoice;\n  }\n\n  /**\n   * Check if flow navigation is allowed\n   * @return {boolean} - True if flow navigation is allowed, false otherwise\n   */\n  isFlowNavigationAllowed(): boolean {\n    return this._enabled && this._flow;\n  }\n\n  /**\n   * Check if forward navigation is allowed\n   * @return {boolean} - True if forward navigation is allowed, false otherwise\n   */\n  isForwardNavigationAllowed(): boolean {\n    // Forward navigation (Continue request) is only valid when flow mode is\n    // enabled. The forwardOnly flag simply restricts backward navigation and\n    // does not affect the ability to move forward when flow is disabled.\n    return this._enabled && this._flow;\n  }\n\n  /**\n   * Check if backward navigation is allowed\n   * @return {boolean} - True if backward navigation is allowed, false otherwise\n   */\n  isBackwardNavigationAllowed(): boolean {\n    // Previous navigation is also part of flow based navigation and should only\n    // be permitted when flow mode is enabled and forwardOnly does not restrict\n    // going backwards.\n    return this._enabled && this._flow && !this._forwardOnly;\n  }\n\n  /**\n   * Getter for selectionTiming\n   * @return {SelectionTiming}\n   */\n  get selectionTiming(): SelectionTiming {\n    return this._selectionTiming;\n  }\n\n  /**\n   * Setter for selectionTiming\n   * @param {SelectionTiming} selectionTiming\n   */\n  set selectionTiming(selectionTiming: SelectionTiming) {\n    this._selectionTiming = selectionTiming;\n  }\n\n  /**\n   * Getter for selectCount\n   * @return {number | null}\n   */\n  get selectCount(): number | null {\n    return this._selectCount;\n  }\n\n  /**\n   * Setter for selectCount\n   * @param {number | null} selectCount\n   */\n  set selectCount(selectCount: number | null) {\n    if (selectCount === null || selectCount > 0) {\n      this._selectCount = selectCount;\n    }\n  }\n\n  /**\n   * Getter for selectionCountStatus\n   * @return {boolean}\n   */\n  get selectionCountStatus(): boolean {\n    return this._selectionCountStatus;\n  }\n\n  /**\n   * Setter for selectionCountStatus\n   * @param {boolean} selectionCountStatus\n   */\n  set selectionCountStatus(selectionCountStatus: boolean) {\n    this._selectionCountStatus = selectionCountStatus;\n  }\n\n  /**\n   * Getter for randomizeChildren\n   * @return {boolean}\n   */\n  get randomizeChildren(): boolean {\n    return this._randomizeChildren;\n  }\n\n  /**\n   * Setter for randomizeChildren\n   * @param {boolean} randomizeChildren\n   */\n  set randomizeChildren(randomizeChildren: boolean) {\n    this._randomizeChildren = randomizeChildren;\n  }\n\n  /**\n   * Getter for randomizationTiming\n   * @return {RandomizationTiming}\n   */\n  get randomizationTiming(): RandomizationTiming {\n    return this._randomizationTiming;\n  }\n\n  /**\n   * Setter for randomizationTiming\n   * @param {RandomizationTiming} randomizationTiming\n   */\n  set randomizationTiming(randomizationTiming: RandomizationTiming) {\n    this._randomizationTiming = randomizationTiming;\n  }\n\n  /**\n   * Getter for reorderChildren\n   * @return {boolean}\n   */\n  get reorderChildren(): boolean {\n    return this._reorderChildren;\n  }\n\n  /**\n   * Setter for reorderChildren\n   * @param {boolean} reorderChildren\n   */\n  set reorderChildren(reorderChildren: boolean) {\n    this._reorderChildren = reorderChildren;\n  }\n\n  /**\n   * toJSON for SequencingControls\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      enabled: this._enabled,\n      choice: this._choice,\n      choiceExit: this._choiceExit,\n      flow: this._flow,\n      forwardOnly: this._forwardOnly,\n      useCurrentAttemptObjectiveInfo: this._useCurrentAttemptObjectiveInfo,\n      useCurrentAttemptProgressInfo: this._useCurrentAttemptProgressInfo,\n      preventActivation: this._preventActivation,\n      constrainChoice: this._constrainChoice,\n      stopForwardTraversal: this._stopForwardTraversal,\n      rollupObjectiveSatisfied: this._rollupObjectiveSatisfied,\n      rollupProgressCompletion: this._rollupProgressCompletion,\n      objectiveMeasureWeight: this._objectiveMeasureWeight,\n      selectionTiming: this._selectionTiming,\n      selectCount: this._selectCount,\n      selectionCountStatus: this._selectionCountStatus,\n      randomizeChildren: this._randomizeChildren,\n      randomizationTiming: this._randomizationTiming,\n      reorderChildren: this._reorderChildren,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { scorm2004_regex } from \"../../../constants/regex\";\nimport { check2004ValidFormat } from \"../validation\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { CompletionStatus, SuccessStatus } from \"../../../constants/enums\";\nimport { SequencingControls } from \"./sequencing_controls\";\nimport { SequencingRules } from \"./sequencing_rules\";\nimport { RollupRules } from \"./rollup_rules\";\nimport { validateISO8601Duration } from \"../../../utilities\";\n\n/**\n * Class representing a single activity in the SCORM 2004 activity tree\n */\nexport class Activity extends BaseCMI {\n  private _id: string = \"\";\n  private _title: string = \"\";\n  private _children: Activity[] = [];\n  private _parent: Activity | null = null;\n  private _isVisible: boolean = true;\n  private _isActive: boolean = false;\n  private _isSuspended: boolean = false;\n  private _isCompleted: boolean = false;\n  private _completionStatus: CompletionStatus = CompletionStatus.UNKNOWN;\n  private _successStatus: SuccessStatus = SuccessStatus.UNKNOWN;\n  private _attemptCount: number = 0;\n  private _attemptCompletionAmount: number = 0;\n  private _attemptAbsoluteDuration: string = \"PT0H0M0S\";\n  private _attemptExperiencedDuration: string = \"PT0H0M0S\";\n  private _activityAbsoluteDuration: string = \"PT0H0M0S\";\n  private _activityExperiencedDuration: string = \"PT0H0M0S\";\n  private _objectiveSatisfiedStatus: boolean = false;\n  private _objectiveMeasureStatus: boolean = false;\n  private _objectiveNormalizedMeasure: number = 0;\n  private _scaledPassingScore: number = 0.7; // Default passing score\n  private _progressMeasure: number = 0;\n  private _progressMeasureStatus: boolean = false;\n  private _location: string = \"\";\n  private _attemptAbsoluteStartTime: string = \"\";\n  private _learnerPrefs: any = null;\n  private _activityAttemptActive: boolean = false;\n  private _isHiddenFromChoice: boolean = false;\n  private _isAvailable: boolean = true;\n  private _attemptLimit: number | null = null;\n  private _attemptAbsoluteDurationLimit: string | null = null;\n  private _activityAbsoluteDurationLimit: string | null = null;\n  private _timeLimitAction: string | null = null;\n  private _timeLimitDuration: string | null = null;\n  private _beginTimeLimit: string | null = null;\n  private _endTimeLimit: string | null = null;\n  private _sequencingControls: SequencingControls;\n  private _sequencingRules: SequencingRules;\n  private _rollupRules: RollupRules;\n  private _processedChildren: Activity[] | null = null;\n  private _isNewAttempt: boolean = false;\n\n  /**\n   * Constructor for Activity\n   * @param {string} id - The unique identifier for this activity\n   * @param {string} title - The title of this activity\n   */\n  constructor(id: string = \"\", title: string = \"\") {\n    super(\"activity\");\n    this._id = id;\n    this._title = title;\n    this._sequencingControls = new SequencingControls();\n    this._sequencingRules = new SequencingRules();\n    this._rollupRules = new RollupRules();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    // Initialize children\n    for (const child of this._children) {\n      child.initialize();\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._isActive = false;\n    this._isSuspended = false;\n    this._isCompleted = false;\n    this._completionStatus = CompletionStatus.UNKNOWN;\n    this._successStatus = SuccessStatus.UNKNOWN;\n    this._attemptCount = 0;\n    this._attemptCompletionAmount = 0;\n    this._attemptAbsoluteDuration = \"PT0H0M0S\";\n    this._attemptExperiencedDuration = \"PT0H0M0S\";\n    this._activityAbsoluteDuration = \"PT0H0M0S\";\n    this._activityExperiencedDuration = \"PT0H0M0S\";\n    this._objectiveSatisfiedStatus = false;\n    this._objectiveMeasureStatus = false;\n    this._objectiveNormalizedMeasure = 0;\n    this._progressMeasure = 0;\n    this._progressMeasureStatus = false;\n    this._location = \"\";\n    this._attemptAbsoluteStartTime = \"\";\n    this._learnerPrefs = null;\n    this._activityAttemptActive = false;\n\n    // Reset children\n    for (const child of this._children) {\n      child.reset();\n    }\n  }\n\n  /**\n   * Getter for id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for title\n   * @return {string}\n   */\n  get title(): string {\n    return this._title;\n  }\n\n  /**\n   * Setter for title\n   * @param {string} title\n   */\n  set title(title: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".title\", title, scorm2004_regex.CMILangString250)\n    ) {\n      this._title = title;\n    }\n  }\n\n  /**\n   * Getter for children\n   * @return {Activity[]}\n   */\n  get children(): Activity[] {\n    return this._children;\n  }\n\n  /**\n   * Add a child activity to this activity\n   * @param {Activity} child - The child activity to add\n   */\n  addChild(child: Activity): void {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(child instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".children\",\n        scorm2004_errors.TYPE_MISMATCH as number\n      );\n    }\n    child._parent = this;\n    this._children.push(child);\n  }\n\n  /**\n   * Remove a child activity from this activity\n   * @param {Activity} child - The child activity to remove\n   * @return {boolean} - True if the child was removed, false otherwise\n   */\n  removeChild(child: Activity): boolean {\n    const index = this._children.indexOf(child);\n    if (index !== -1) {\n      this._children.splice(index, 1);\n      child._parent = null;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for parent\n   * @return {Activity | null}\n   */\n  get parent(): Activity | null {\n    return this._parent;\n  }\n\n  /**\n   * Getter for isVisible\n   * @return {boolean}\n   */\n  get isVisible(): boolean {\n    return this._isVisible;\n  }\n\n  /**\n   * Setter for isVisible\n   * @param {boolean} isVisible\n   */\n  set isVisible(isVisible: boolean) {\n    this._isVisible = isVisible;\n  }\n\n  /**\n   * Getter for isActive\n   * @return {boolean}\n   */\n  get isActive(): boolean {\n    return this._isActive;\n  }\n\n  /**\n   * Setter for isActive\n   * @param {boolean} isActive\n   */\n  set isActive(isActive: boolean) {\n    this._isActive = isActive;\n  }\n\n  /**\n   * Getter for isSuspended\n   * @return {boolean}\n   */\n  get isSuspended(): boolean {\n    return this._isSuspended;\n  }\n\n  /**\n   * Setter for isSuspended\n   * @param {boolean} isSuspended\n   */\n  set isSuspended(isSuspended: boolean) {\n    this._isSuspended = isSuspended;\n  }\n\n  /**\n   * Getter for isCompleted\n   * @return {boolean}\n   */\n  get isCompleted(): boolean {\n    return this._isCompleted;\n  }\n\n  /**\n   * Setter for isCompleted\n   * @param {boolean} isCompleted\n   */\n  set isCompleted(isCompleted: boolean) {\n    this._isCompleted = isCompleted;\n    // Update completion status based on boolean value\n    if (isCompleted) {\n      this._completionStatus = CompletionStatus.COMPLETED;\n    } else {\n      this._completionStatus = CompletionStatus.INCOMPLETE;\n    }\n  }\n\n  /**\n   * Getter for completionStatus\n   * @return {CompletionStatus}\n   */\n  get completionStatus(): CompletionStatus {\n    return this._completionStatus;\n  }\n\n  /**\n   * Setter for completionStatus\n   * @param {CompletionStatus} completionStatus\n   */\n  set completionStatus(completionStatus: CompletionStatus) {\n    this._completionStatus = completionStatus;\n    this._isCompleted = completionStatus === CompletionStatus.COMPLETED;\n  }\n\n  /**\n   * Getter for successStatus\n   * @return {SuccessStatus}\n   */\n  get successStatus(): SuccessStatus {\n    return this._successStatus;\n  }\n\n  /**\n   * Setter for successStatus\n   * @param {SuccessStatus} successStatus\n   */\n  set successStatus(successStatus: SuccessStatus) {\n    this._successStatus = successStatus;\n  }\n\n  /**\n   * Getter for attemptCount\n   * @return {number}\n   */\n  get attemptCount(): number {\n    return this._attemptCount;\n  }\n\n  /**\n   * Setter for attemptCount\n   * @param {number} value\n   */\n  set attemptCount(value: number) {\n    this._attemptCount = value;\n  }\n\n  /**\n   * Getter for attemptCompletionAmount\n   * @return {number}\n   */\n  get attemptCompletionAmount(): number {\n    return this._attemptCompletionAmount;\n  }\n\n  /**\n   * Setter for attemptCompletionAmount\n   * @param {number} value\n   */\n  set attemptCompletionAmount(value: number) {\n    this._attemptCompletionAmount = value;\n  }\n\n  /**\n   * Increment the attempt count\n   */\n  incrementAttemptCount(): void {\n    this._attemptCount++;\n    this._isNewAttempt = true;\n    // Reset processed children on new attempt if needed\n    const controls = this._sequencingControls;\n    if (\n      controls.selectionTiming === \"onEachNewAttempt\" ||\n      controls.randomizationTiming === \"onEachNewAttempt\"\n    ) {\n      this._processedChildren = null;\n    }\n  }\n\n  /**\n   * Getter for objectiveSatisfiedStatus\n   * @return {boolean}\n   */\n  get objectiveSatisfiedStatus(): boolean {\n    return this._objectiveSatisfiedStatus;\n  }\n\n  /**\n   * Setter for objectiveSatisfiedStatus\n   * @param {boolean} objectiveSatisfiedStatus\n   */\n  set objectiveSatisfiedStatus(objectiveSatisfiedStatus: boolean) {\n    this._objectiveSatisfiedStatus = objectiveSatisfiedStatus;\n    // Update success status based on objective satisfaction\n    if (objectiveSatisfiedStatus) {\n      this._successStatus = SuccessStatus.PASSED;\n    } else {\n      this._successStatus = SuccessStatus.FAILED;\n    }\n  }\n\n  /**\n   * Getter for objectiveMeasureStatus\n   * @return {boolean}\n   */\n  get objectiveMeasureStatus(): boolean {\n    return this._objectiveMeasureStatus;\n  }\n\n  /**\n   * Setter for objectiveMeasureStatus\n   * @param {boolean} objectiveMeasureStatus\n   */\n  set objectiveMeasureStatus(objectiveMeasureStatus: boolean) {\n    this._objectiveMeasureStatus = objectiveMeasureStatus;\n  }\n\n  /**\n   * Getter for objectiveNormalizedMeasure\n   * @return {number}\n   */\n  get objectiveNormalizedMeasure(): number {\n    return this._objectiveNormalizedMeasure;\n  }\n\n  /**\n   * Setter for objectiveNormalizedMeasure\n   * @param {number} objectiveNormalizedMeasure\n   */\n  set objectiveNormalizedMeasure(objectiveNormalizedMeasure: number) {\n    this._objectiveNormalizedMeasure = objectiveNormalizedMeasure;\n  }\n\n  /**\n   * Getter for scaledPassingScore\n   * @return {number}\n   */\n  get scaledPassingScore(): number {\n    return this._scaledPassingScore;\n  }\n\n  /**\n   * Setter for scaledPassingScore\n   * @param {number} scaledPassingScore\n   */\n  set scaledPassingScore(scaledPassingScore: number) {\n    if (scaledPassingScore >= -1 && scaledPassingScore <= 1) {\n      this._scaledPassingScore = scaledPassingScore;\n    }\n  }\n\n  /**\n   * Getter for progressMeasure\n   * @return {number}\n   */\n  get progressMeasure(): number {\n    return this._progressMeasure;\n  }\n\n  /**\n   * Setter for progressMeasure\n   * @param {number} progressMeasure\n   */\n  set progressMeasure(progressMeasure: number) {\n    this._progressMeasure = progressMeasure;\n  }\n\n  /**\n   * Getter for progressMeasureStatus\n   * @return {boolean}\n   */\n  get progressMeasureStatus(): boolean {\n    return this._progressMeasureStatus;\n  }\n\n  /**\n   * Setter for progressMeasureStatus\n   * @param {boolean} progressMeasureStatus\n   */\n  set progressMeasureStatus(progressMeasureStatus: boolean) {\n    this._progressMeasureStatus = progressMeasureStatus;\n  }\n\n  /**\n   * Getter for location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for location\n   * @param {string} location\n   */\n  set location(location: string) {\n    this._location = location;\n  }\n\n  /**\n   * Getter for attemptAbsoluteStartTime\n   * @return {string}\n   */\n  get attemptAbsoluteStartTime(): string {\n    return this._attemptAbsoluteStartTime;\n  }\n\n  /**\n   * Setter for attemptAbsoluteStartTime\n   * @param {string} attemptAbsoluteStartTime\n   */\n  set attemptAbsoluteStartTime(attemptAbsoluteStartTime: string) {\n    this._attemptAbsoluteStartTime = attemptAbsoluteStartTime;\n  }\n\n  /**\n   * Getter for learnerPrefs\n   * @return {any}\n   */\n  get learnerPrefs(): any {\n    return this._learnerPrefs;\n  }\n\n  /**\n   * Setter for learnerPrefs\n   * @param {any} learnerPrefs\n   */\n  set learnerPrefs(learnerPrefs: any) {\n    this._learnerPrefs = learnerPrefs;\n  }\n\n  /**\n   * Getter for activityAttemptActive\n   * @return {boolean}\n   */\n  get activityAttemptActive(): boolean {\n    return this._activityAttemptActive;\n  }\n\n  /**\n   * Setter for activityAttemptActive\n   * @param {boolean} activityAttemptActive\n   */\n  set activityAttemptActive(activityAttemptActive: boolean) {\n    this._activityAttemptActive = activityAttemptActive;\n  }\n\n  /**\n   * Getter for isHiddenFromChoice\n   * @return {boolean}\n   */\n  get isHiddenFromChoice(): boolean {\n    return this._isHiddenFromChoice;\n  }\n\n  /**\n   * Setter for isHiddenFromChoice\n   * @param {boolean} isHiddenFromChoice\n   */\n  set isHiddenFromChoice(isHiddenFromChoice: boolean) {\n    this._isHiddenFromChoice = isHiddenFromChoice;\n  }\n\n  /**\n   * Getter for isAvailable\n   * @return {boolean}\n   */\n  get isAvailable(): boolean {\n    return this._isAvailable;\n  }\n\n  /**\n   * Setter for isAvailable\n   * @param {boolean} isAvailable\n   */\n  set isAvailable(isAvailable: boolean) {\n    this._isAvailable = isAvailable;\n  }\n\n  /**\n   * Getter for attemptLimit\n   * @return {number | null}\n   */\n  get attemptLimit(): number | null {\n    return this._attemptLimit;\n  }\n\n  /**\n   * Setter for attemptLimit\n   * @param {number | null} attemptLimit\n   */\n  set attemptLimit(attemptLimit: number | null) {\n    this._attemptLimit = attemptLimit;\n  }\n\n  /**\n   * Check if attempt limit has been exceeded\n   * @return {boolean}\n   */\n  hasAttemptLimitExceeded(): boolean {\n    if (this._attemptLimit === null) {\n      return false;\n    }\n    return this._attemptCount >= this._attemptLimit;\n  }\n\n  /**\n   * Getter for timeLimitDuration\n   * @return {string | null}\n   */\n  get timeLimitDuration(): string | null {\n    return this._timeLimitDuration;\n  }\n\n  /**\n   * Setter for timeLimitDuration\n   * @param {string | null} timeLimitDuration\n   */\n  set timeLimitDuration(timeLimitDuration: string | null) {\n    this._timeLimitDuration = timeLimitDuration;\n  }\n\n  /**\n   * Getter for timeLimitAction\n   * @return {string | null}\n   */\n  get timeLimitAction(): string | null {\n    return this._timeLimitAction;\n  }\n\n  /**\n   * Setter for timeLimitAction\n   * @param {string | null} timeLimitAction\n   */\n  set timeLimitAction(timeLimitAction: string | null) {\n    this._timeLimitAction = timeLimitAction;\n  }\n\n  /**\n   * Getter for beginTimeLimit\n   * @return {string | null}\n   */\n  get beginTimeLimit(): string | null {\n    return this._beginTimeLimit;\n  }\n\n  /**\n   * Setter for beginTimeLimit\n   * @param {string | null} beginTimeLimit\n   */\n  set beginTimeLimit(beginTimeLimit: string | null) {\n    this._beginTimeLimit = beginTimeLimit;\n  }\n\n  /**\n   * Getter for endTimeLimit\n   * @return {string | null}\n   */\n  get endTimeLimit(): string | null {\n    return this._endTimeLimit;\n  }\n\n  /**\n   * Setter for endTimeLimit\n   * @param {string | null} endTimeLimit\n   */\n  set endTimeLimit(endTimeLimit: string | null) {\n    this._endTimeLimit = endTimeLimit;\n  }\n\n\n  /**\n   * Getter for attemptAbsoluteDurationLimit\n   * @return {string | null}\n   */\n  get attemptAbsoluteDurationLimit(): string | null {\n    return this._attemptAbsoluteDurationLimit;\n  }\n\n  /**\n   * Setter for attemptAbsoluteDurationLimit\n   * @param {string | null} attemptAbsoluteDurationLimit\n   */\n  set attemptAbsoluteDurationLimit(attemptAbsoluteDurationLimit: string | null) {\n    if (attemptAbsoluteDurationLimit !== null) {\n      if (!validateISO8601Duration(attemptAbsoluteDurationLimit, scorm2004_regex.CMITimespan)) {\n        throw new Scorm2004ValidationError(\n          this._cmi_element + \".attemptAbsoluteDurationLimit\",\n          scorm2004_errors.TYPE_MISMATCH as number\n        );\n      }\n    }\n    this._attemptAbsoluteDurationLimit = attemptAbsoluteDurationLimit;\n  }\n\n  /**\n   * Getter for attemptExperiencedDuration\n   * @return {string}\n   */\n  get attemptExperiencedDuration(): string {\n    return this._attemptExperiencedDuration;\n  }\n\n  /**\n   * Setter for attemptExperiencedDuration\n   * @param {string} attemptExperiencedDuration\n   */\n  set attemptExperiencedDuration(attemptExperiencedDuration: string) {\n    if (!validateISO8601Duration(attemptExperiencedDuration, scorm2004_regex.CMITimespan)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".attemptExperiencedDuration\",\n        scorm2004_errors.TYPE_MISMATCH as number\n      );\n    }\n    this._attemptExperiencedDuration = attemptExperiencedDuration;\n  }\n\n  /**\n   * Getter for activityAbsoluteDurationLimit\n   * @return {string | null}\n   */\n  get activityAbsoluteDurationLimit(): string | null {\n    return this._activityAbsoluteDurationLimit;\n  }\n\n  /**\n   * Setter for activityAbsoluteDurationLimit\n   * @param {string | null} activityAbsoluteDurationLimit\n   */\n  set activityAbsoluteDurationLimit(activityAbsoluteDurationLimit: string | null) {\n    if (activityAbsoluteDurationLimit !== null) {\n      if (!validateISO8601Duration(activityAbsoluteDurationLimit, scorm2004_regex.CMITimespan)) {\n        throw new Scorm2004ValidationError(\n          this._cmi_element + \".activityAbsoluteDurationLimit\",\n          scorm2004_errors.TYPE_MISMATCH as number\n        );\n      }\n    }\n    this._activityAbsoluteDurationLimit = activityAbsoluteDurationLimit;\n  }\n\n  /**\n   * Getter for activityExperiencedDuration\n   * @return {string}\n   */\n  get activityExperiencedDuration(): string {\n    return this._activityExperiencedDuration;\n  }\n\n  /**\n   * Setter for activityExperiencedDuration\n   * @param {string} activityExperiencedDuration\n   */\n  set activityExperiencedDuration(activityExperiencedDuration: string) {\n    if (!validateISO8601Duration(activityExperiencedDuration, scorm2004_regex.CMITimespan)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".activityExperiencedDuration\",\n        scorm2004_errors.TYPE_MISMATCH as number\n      );\n    }\n    this._activityExperiencedDuration = activityExperiencedDuration;\n  }\n\n  /**\n   * Getter for attemptAbsoluteDuration (alias for limit)\n   * @return {string}\n   */\n  get attemptAbsoluteDuration(): string {\n    return this._attemptAbsoluteDurationLimit || \"PT0H0M0S\";\n  }\n\n  /**\n   * Setter for attemptAbsoluteDuration\n   * @param {string} duration\n   */\n  set attemptAbsoluteDuration(duration: string) {\n    this._attemptAbsoluteDurationLimit = duration;\n  }\n\n  /**\n   * Getter for activityAbsoluteDuration (alias for limit)\n   * @return {string}\n   */\n  get activityAbsoluteDuration(): string {\n    return this._activityAbsoluteDurationLimit || \"PT0H0M0S\";\n  }\n\n  /**\n   * Setter for activityAbsoluteDuration\n   * @param {string} duration\n   */\n  set activityAbsoluteDuration(duration: string) {\n    this._activityAbsoluteDurationLimit = duration;\n  }\n\n\n  /**\n   * Getter for sequencingControls\n   * @return {SequencingControls}\n   */\n  get sequencingControls(): SequencingControls {\n    return this._sequencingControls;\n  }\n\n  /**\n   * Setter for sequencingControls\n   * @param {SequencingControls} sequencingControls\n   */\n  set sequencingControls(sequencingControls: SequencingControls) {\n    this._sequencingControls = sequencingControls;\n  }\n\n  /**\n   * Getter for sequencingRules\n   * @return {SequencingRules}\n   */\n  get sequencingRules(): SequencingRules {\n    return this._sequencingRules;\n  }\n\n  /**\n   * Setter for sequencingRules\n   * @param {SequencingRules} sequencingRules\n   */\n  set sequencingRules(sequencingRules: SequencingRules) {\n    this._sequencingRules = sequencingRules;\n  }\n\n  /**\n   * Getter for rollupRules\n   * @return {RollupRules}\n   */\n  get rollupRules(): RollupRules {\n    return this._rollupRules;\n  }\n\n  /**\n   * Setter for rollupRules\n   * @param {RollupRules} rollupRules\n   */\n  set rollupRules(rollupRules: RollupRules) {\n    this._rollupRules = rollupRules;\n  }\n\n  /**\n   * Get available children with selection and randomization applied\n   * @return {Activity[]}\n   */\n  getAvailableChildren(): Activity[] {\n    // If no children, return empty array\n    if (this._children.length === 0) {\n      return [];\n    }\n\n    // If processed children already exist and no new attempt, return them\n    if (this._processedChildren !== null) {\n      return this._processedChildren;\n    }\n\n    // If no processing has been done yet, return all children\n    // The sequencing process will call applySelectionAndRandomization when needed\n    return this._children;\n  }\n\n  /**\n   * Set the processed children (called by SelectionRandomization)\n   * @param {Activity[]} processedChildren\n   */\n  setProcessedChildren(processedChildren: Activity[]): void {\n    this._processedChildren = processedChildren;\n  }\n\n  /**\n   * Reset processed children (used when configuration changes)\n   */\n  resetProcessedChildren(): void {\n    this._processedChildren = null;\n  }\n\n  /**\n   * Get whether this is a new attempt\n   * @return {boolean}\n   */\n  get isNewAttempt(): boolean {\n    return this._isNewAttempt;\n  }\n\n  /**\n   * Set whether this is a new attempt\n   * @param {boolean} isNewAttempt\n   */\n  set isNewAttempt(isNewAttempt: boolean) {\n    this._isNewAttempt = isNewAttempt;\n  }\n\n  /**\n   * toJSON for Activity\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      id: this._id,\n      title: this._title,\n      isVisible: this._isVisible,\n      isActive: this._isActive,\n      isSuspended: this._isSuspended,\n      isCompleted: this._isCompleted,\n      completionStatus: this._completionStatus,\n      successStatus: this._successStatus,\n      attemptCount: this._attemptCount,\n      attemptCompletionAmount: this._attemptCompletionAmount,\n      attemptAbsoluteDuration: this._attemptAbsoluteDuration,\n      attemptExperiencedDuration: this._attemptExperiencedDuration,\n      activityAbsoluteDuration: this._activityAbsoluteDuration,\n      activityExperiencedDuration: this._activityExperiencedDuration,\n      objectiveSatisfiedStatus: this._objectiveSatisfiedStatus,\n      objectiveMeasureStatus: this._objectiveMeasureStatus,\n      objectiveNormalizedMeasure: this._objectiveNormalizedMeasure,\n      children: this._children.map((child) => child.toJSON())\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\n\n/**\n * Class representing the SCORM 2004 activity tree\n */\nexport class ActivityTree extends BaseCMI {\n  private _root: Activity | null = null;\n  private _currentActivity: Activity | null = null;\n  private _suspendedActivity: Activity | null = null;\n  private _activities: Map<string, Activity> = new Map();\n\n  /**\n   * Constructor for ActivityTree\n   */\n  constructor(root?: Activity) {\n    super(\"activityTree\");\n    if (root) {\n      this.root = root;\n    }\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    if (this._root) {\n      this._root.initialize();\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._currentActivity = null;\n    this._suspendedActivity = null;\n    // Clear the activities map so it can be rebuilt\n    this._activities.clear();\n    if (this._root) {\n      this._root.reset();\n      // Re-populate the activities map with the root and its children\n      this._activities.set(this._root.id, this._root);\n      this._addActivitiesToMap(this._root);\n    }\n  }\n\n  /**\n   * Getter for root\n   * @return {Activity | null}\n   */\n  get root(): Activity | null {\n    return this._root;\n  }\n\n  /**\n   * Setter for root\n   * @param {Activity} root\n   */\n  set root(root: Activity | null) {\n    // noinspection SuspiciousTypeOfGuard\n    if (root !== null && !(root instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".root\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    // Clear existing map when assigning a new root to avoid stale activities\n    this._activities.clear();\n    this._root = root;\n    if (root) {\n      this._activities.set(root.id, root);\n      this._addActivitiesToMap(root);\n    }\n  }\n\n  /**\n   * Recursively add activities to the activities map\n   * @param {Activity} activity\n   * @private\n   */\n  private _addActivitiesToMap(activity: Activity): void {\n    for (const child of activity.children) {\n      this._activities.set(child.id, child);\n      this._addActivitiesToMap(child);\n    }\n  }\n\n  /**\n   * Getter for currentActivity\n   * @return {Activity | null}\n   */\n  get currentActivity(): Activity | null {\n    return this._currentActivity;\n  }\n\n  /**\n   * Setter for currentActivity\n   * @param {Activity | null} activity\n   */\n  set currentActivity(activity: Activity | null) {\n    // noinspection SuspiciousTypeOfGuard\n    if (activity !== null && !(activity instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".currentActivity\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n\n    // If there's already a current activity, deactivate it\n    if (this._currentActivity) {\n      this._currentActivity.isActive = false;\n    }\n\n    // Set the new current activity and activate it\n    this._currentActivity = activity;\n    if (activity) {\n      activity.isActive = true;\n    }\n  }\n\n  /**\n   * Getter for suspendedActivity\n   * @return {Activity | null}\n   */\n  get suspendedActivity(): Activity | null {\n    return this._suspendedActivity;\n  }\n\n  /**\n   * Setter for suspendedActivity\n   * @param {Activity | null} activity\n   */\n  set suspendedActivity(activity: Activity | null) {\n    // noinspection SuspiciousTypeOfGuard\n    if (activity !== null && !(activity instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".suspendedActivity\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n\n    // If there's already a suspended activity, unsuspend it\n    if (this._suspendedActivity) {\n      this._suspendedActivity.isSuspended = false;\n    }\n\n    // Set the new suspended activity and mark it as suspended\n    this._suspendedActivity = activity;\n    if (activity) {\n      activity.isSuspended = true;\n    }\n  }\n\n  /**\n   * Get an activity by ID\n   * @param {string} id - The ID of the activity to get\n   * @return {Activity | null} - The activity with the given ID, or null if not found\n   */\n  getActivity(id: string): Activity | null {\n    return this._activities.get(id) || null;\n  }\n\n  /**\n   * Get all activities in the tree\n   * @return {Activity[]} - An array of all activities in the tree\n   */\n  getAllActivities(): Activity[] {\n    return Array.from(this._activities.values());\n  }\n\n  /**\n   * Get the parent of an activity\n   * @param {Activity} activity - The activity to get the parent of\n   * @return {Activity | null} - The parent of the activity, or null if it has no parent\n   */\n  getParent(activity: Activity): Activity | null {\n    return activity.parent;\n  }\n\n  /**\n   * Get the children of an activity\n   * @param {Activity} activity - The activity to get the children of\n   * @param {boolean} useAvailableChildren - Whether to use available children (with selection/randomization)\n   * @return {Activity[]} - An array of the activity's children\n   */\n  getChildren(activity: Activity, useAvailableChildren: boolean = true): Activity[] {\n    return useAvailableChildren ? activity.getAvailableChildren() : activity.children;\n  }\n\n  /**\n   * Get the siblings of an activity\n   * @param {Activity} activity - The activity to get the siblings of\n   * @return {Activity[]} - An array of the activity's siblings\n   */\n  getSiblings(activity: Activity): Activity[] {\n    if (!activity.parent) {\n      return [];\n    }\n    return activity.parent.children.filter((child) => child !== activity);\n  }\n\n  /**\n   * Get the next sibling of an activity\n   * @param {Activity} activity - The activity to get the next sibling of\n   * @param {boolean} useAvailableChildren - Whether to use available children (with selection/randomization)\n   * @return {Activity | null} - The next sibling of the activity, or null if it has no next sibling\n   */\n  getNextSibling(activity: Activity, useAvailableChildren: boolean = true): Activity | null {\n    if (!activity.parent) {\n      return null;\n    }\n    let siblings = useAvailableChildren \n      ? activity.parent.getAvailableChildren() \n      : activity.parent.children;\n    let index = siblings.indexOf(activity);\n    \n    // Fallback: if not found in available children, try raw children\n    if (index === -1 && useAvailableChildren) {\n      siblings = activity.parent.children;\n      index = siblings.indexOf(activity);\n    }\n    \n    if (index === -1 || index === siblings.length - 1) {\n      return null;\n    }\n    return siblings[index + 1] ?? null;\n  }\n\n  /**\n   * Get the previous sibling of an activity\n   * @param {Activity} activity - The activity to get the previous sibling of\n   * @param {boolean} useAvailableChildren - Whether to use available children (with selection/randomization)\n   * @return {Activity | null} - The previous sibling of the activity, or null if it has no previous sibling\n   */\n  getPreviousSibling(activity: Activity, useAvailableChildren: boolean = true): Activity | null {\n    if (!activity.parent) {\n      return null;\n    }\n    let siblings = useAvailableChildren \n      ? activity.parent.getAvailableChildren() \n      : activity.parent.children;\n    let index = siblings.indexOf(activity);\n    \n    // Fallback: if not found in available children, try raw children\n    if (index === -1 && useAvailableChildren) {\n      siblings = activity.parent.children;\n      index = siblings.indexOf(activity);\n    }\n    \n    if (index <= 0) {\n      return null;\n    }\n    return siblings[index - 1] ?? null;\n  }\n\n  /**\n   * Get the first child of an activity\n   * @param {Activity} activity - The activity to get the first child of\n   * @param {boolean} useAvailableChildren - Whether to use available children (with selection/randomization)\n   * @return {Activity | null} - The first child of the activity, or null if it has no children\n   */\n  getFirstChild(activity: Activity, useAvailableChildren: boolean = true): Activity | null {\n    const children = useAvailableChildren \n      ? activity.getAvailableChildren() \n      : activity.children;\n    if (children.length === 0) {\n      return null;\n    }\n    return children[0] ?? null;\n  }\n\n  /**\n   * Get the last child of an activity\n   * @param {Activity} activity - The activity to get the last child of\n   * @param {boolean} useAvailableChildren - Whether to use available children (with selection/randomization)\n   * @return {Activity | null} - The last child of the activity, or null if it has no children\n   */\n  getLastChild(activity: Activity, useAvailableChildren: boolean = true): Activity | null {\n    const children = useAvailableChildren \n      ? activity.getAvailableChildren() \n      : activity.children;\n    if (children.length === 0) {\n      return null;\n    }\n    return children[children.length - 1] ?? null;\n  }\n\n  /**\n   * Get the common ancestor of two activities\n   * @param {Activity} activity1 - The first activity\n   * @param {Activity} activity2 - The second activity\n   * @return {Activity | null} - The common ancestor of the two activities, or null if they have no common ancestor\n   */\n  getCommonAncestor(activity1: Activity, activity2: Activity): Activity | null {\n    // Get the path from the root to activity1\n    const path1: Activity[] = [];\n    let current: Activity | null = activity1;\n    while (current) {\n      path1.unshift(current);\n      current = current.parent;\n    }\n\n    // Check if activity2 is in the path from the root to activity1\n    current = activity2;\n    while (current) {\n      if (path1.includes(current)) {\n        return current;\n      }\n      current = current.parent;\n    }\n\n    return null;\n  }\n\n  /**\n   * toJSON for ActivityTree\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      root: this._root,\n      currentActivity: this._currentActivity ? this._currentActivity.id : null,\n      suspendedActivity: this._suspendedActivity ? this._suspendedActivity.id : null,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { ActivityTree } from \"./activity_tree\";\nimport { SequencingRules } from \"./sequencing_rules\";\nimport { SequencingControls } from \"./sequencing_controls\";\nimport { RollupRules } from \"./rollup_rules\";\nimport { ADLNav } from \"../adl\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\n\n/**\n * Class representing SCORM 2004 sequencing\n */\nexport class Sequencing extends BaseCMI {\n  private _activityTree: ActivityTree;\n  private _sequencingRules: SequencingRules;\n  private _sequencingControls: SequencingControls;\n  private _rollupRules: RollupRules;\n  private _adlNav: ADLNav | null = null;\n\n  /**\n   * Constructor for Sequencing\n   */\n  constructor() {\n    super(\"sequencing\");\n    this._activityTree = new ActivityTree();\n    this._sequencingRules = new SequencingRules();\n    this._sequencingControls = new SequencingControls();\n    this._rollupRules = new RollupRules();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this._activityTree.initialize();\n    this._sequencingRules.initialize();\n    this._sequencingControls.initialize();\n    this._rollupRules.initialize();\n    \n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._activityTree.reset();\n    this._sequencingRules.reset();\n    this._sequencingControls.reset();\n    this._rollupRules.reset();\n  }\n\n  /**\n   * Getter for activityTree\n   * @return {ActivityTree}\n   */\n  get activityTree(): ActivityTree {\n    return this._activityTree;\n  }\n\n  /**\n   * Setter for activityTree\n   * @param {ActivityTree} activityTree\n   */\n  set activityTree(activityTree: ActivityTree) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(activityTree instanceof ActivityTree)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".activityTree\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._activityTree = activityTree;\n  }\n\n  /**\n   * Getter for sequencingRules\n   * @return {SequencingRules}\n   */\n  get sequencingRules(): SequencingRules {\n    return this._sequencingRules;\n  }\n\n  /**\n   * Setter for sequencingRules\n   * @param {SequencingRules} sequencingRules\n   */\n  set sequencingRules(sequencingRules: SequencingRules) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(sequencingRules instanceof SequencingRules)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".sequencingRules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._sequencingRules = sequencingRules;\n  }\n\n  /**\n   * Getter for sequencingControls\n   * @return {SequencingControls}\n   */\n  get sequencingControls(): SequencingControls {\n    return this._sequencingControls;\n  }\n\n  /**\n   * Setter for sequencingControls\n   * @param {SequencingControls} sequencingControls\n   */\n  set sequencingControls(sequencingControls: SequencingControls) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(sequencingControls instanceof SequencingControls)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".sequencingControls\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._sequencingControls = sequencingControls;\n  }\n\n  /**\n   * Getter for rollupRules\n   * @return {RollupRules}\n   */\n  get rollupRules(): RollupRules {\n    return this._rollupRules;\n  }\n\n  /**\n   * Setter for rollupRules\n   * @param {RollupRules} rollupRules\n   */\n  set rollupRules(rollupRules: RollupRules) {\n    // noinspection SuspiciousTypeOfGuard\n    if (!(rollupRules instanceof RollupRules)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".rollupRules\",\n        scorm2004_errors.TYPE_MISMATCH as number,\n      );\n    }\n    this._rollupRules = rollupRules;\n  }\n\n  /**\n   * Getter for adlNav\n   * @return {ADLNav | null}\n   */\n  get adlNav(): ADLNav | null {\n    return this._adlNav;\n  }\n\n  /**\n   * Setter for adlNav\n   * @param {ADLNav | null} adlNav\n   */\n  set adlNav(adlNav: ADLNav | null) {\n    this._adlNav = adlNav;\n    \n  }\n\n\n\n\n\n  /**\n   * Process rollup for the entire activity tree\n   */\n  processRollup(): void {\n    // Get the root activity\n    const root = this._activityTree.root;\n    if (!root) {\n      return;\n    }\n\n    // Process rollup from the bottom up\n    this._processRollupRecursive(root);\n  }\n\n\n  /**\n   * Process rollup recursively\n   * @param {Activity} activity - The activity to process rollup for\n   * @private\n   */\n  private _processRollupRecursive(activity: Activity): void {\n    // Process rollup for children first\n    for (const child of activity.children) {\n      this._processRollupRecursive(child);\n    }\n\n    // Process rollup for this activity\n    this._rollupRules.processRollup(activity);\n  }\n\n\n  /**\n   * Get the current activity\n   * @return {Activity | null}\n   */\n  getCurrentActivity(): Activity | null {\n    return this._activityTree.currentActivity;\n  }\n\n  /**\n   * Get the root activity\n   * @return {Activity | null}\n   */\n  getRootActivity(): Activity | null {\n    return this._activityTree.root;\n  }\n\n  /**\n   * toJSON for Sequencing\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      activityTree: this._activityTree,\n      sequencingRules: this._sequencingRules,\n      sequencingControls: this._sequencingControls,\n      rollupRules: this._rollupRules,\n      adlNav: this._adlNav,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { Activity } from \"./activity\";\nimport { RollupActionType, RollupConsiderationType, RollupRule } from \"./rollup_rules\";\n\n/**\n * Enhanced Rollup Process implementation for SCORM 2004 sequencing\n * Priority 5 Gap: Comprehensive rollup with global objective mapping and complex weighting\n * Handles all rollup operations including measure, objective, and progress rollup\n */\nexport class RollupProcess {\n  private rollupStateLog: Array<{ activity: string, timestamp: string, state: any }> = [];\n  private eventCallback: ((eventType: string, data?: any) => void) | null = null;\n\n  constructor(eventCallback?: (eventType: string, data?: any) => void) {\n    this.eventCallback = eventCallback || null;\n  }\n\n  /**\n   * Overall Rollup Process (RB.1.5)\n   * Performs rollup from a given activity up through its ancestors\n   * @param {Activity} activity - The activity to start rollup from\n   */\n  public overallRollupProcess(activity: Activity): void {\n    let currentActivity: Activity | null = activity;\n\n    // Process rollup up the tree until we reach the root\n    while (currentActivity && currentActivity.parent) {\n      const parent: Activity = currentActivity.parent;\n\n      // Only perform rollup if the parent tracks status\n      if (parent.sequencingControls.rollupObjectiveSatisfied ||\n        parent.sequencingControls.rollupProgressCompletion) {\n\n        // Step 1: Measure Rollup Process (RB.1.1)\n        this.measureRollupProcess(parent);\n\n        // Step 2: Objective Rollup Process (RB.1.2)\n        if (parent.sequencingControls.rollupObjectiveSatisfied) {\n          this.objectiveRollupProcess(parent);\n        }\n\n        // Step 3: Activity Progress Rollup Process (RB.1.3)\n        if (parent.sequencingControls.rollupProgressCompletion) {\n          this.activityProgressRollupProcess(parent);\n        }\n      }\n\n      // Move up the tree\n      currentActivity = parent;\n    }\n  }\n\n  /**\n   * Measure Rollup Process (RB.1.1)\n   * Rolls up objective measure (score) from children to parent\n   * INTEGRATION: Uses complex weighted measure calculation\n   * @param {Activity} activity - The parent activity\n   */\n  private measureRollupProcess(activity: Activity): void {\n    if (!activity.sequencingControls.rollupObjectiveSatisfied) {\n      return;\n    }\n\n    const children = activity.getAvailableChildren();\n    if (children.length === 0) {\n      return;\n    }\n\n    // INTEGRATION: Use complex weighted measure calculation instead of simple calculation\n    // Determine if there are any valid child measures\n    const hasValidMeasures = children.some(\n      (c) => this.checkChildForRollupSubprocess(c, \"measure\") && c.objectiveMeasureStatus && c.objectiveNormalizedMeasure !== null,\n    );\n\n    if (!hasValidMeasures) {\n      activity.objectiveMeasureStatus = false;\n      return;\n    }\n\n    const complexWeightedMeasure = this.calculateComplexWeightedMeasure(activity, children, { enableThresholdBias: false });\n    activity.objectiveNormalizedMeasure = complexWeightedMeasure;\n    activity.objectiveMeasureStatus = true;\n\n    // INTEGRATION: Process cross-cluster dependencies if dealing with activity clusters\n    const clusters = this.identifyActivityClusters(children);\n    if (clusters.length > 1) {\n      this.processCrossClusterDependencies(activity, clusters);\n    }\n  }\n\n  /**\n   * Objective Rollup Process (RB.1.2)\n   * Determines objective satisfaction status using rules, measure, or default\n   * @param {Activity} activity - The parent activity\n   */\n  private objectiveRollupProcess(activity: Activity): void {\n    const rollupRules = activity.rollupRules;\n\n    // First, try rollup using rules (RB.1.2.b)\n    const ruleResult = this.objectiveRollupUsingRules(activity, rollupRules.rules);\n    if (ruleResult !== null) {\n      activity.objectiveSatisfiedStatus = ruleResult;\n      return;\n    }\n\n    // Then, try rollup using measure (RB.1.2.a)\n    const measureResult = this.objectiveRollupUsingMeasure(activity);\n    if (measureResult !== null) {\n      activity.objectiveSatisfiedStatus = measureResult;\n      return;\n    }\n\n    // Finally, use default rollup (RB.1.2.c)\n    activity.objectiveSatisfiedStatus = this.objectiveRollupUsingDefault(activity);\n  }\n\n  /**\n   * Objective Rollup Using Rules (RB.1.2.b)\n   * @param {Activity} activity - The parent activity\n   * @param {RollupRule[]} rules - The rollup rules to evaluate\n   * @return {boolean | null} - True if satisfied, false if not, null if no rule applies\n   */\n  private objectiveRollupUsingRules(activity: Activity, rules: RollupRule[]): boolean | null {\n    // Get satisfied and not satisfied rules\n    const satisfiedRules = rules.filter(rule =>\n      rule.action === RollupActionType.SATISFIED\n    );\n\n    const notSatisfiedRules = rules.filter(rule =>\n      rule.action === RollupActionType.NOT_SATISFIED\n    );\n\n    // Evaluate satisfied rules first\n    for (const rule of satisfiedRules) {\n      if (this.evaluateRollupRule(activity, rule)) {\n        return true;\n      }\n    }\n\n    // Then evaluate not satisfied rules\n    for (const rule of notSatisfiedRules) {\n      if (this.evaluateRollupRule(activity, rule)) {\n        return false;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Objective Rollup Using Measure (RB.1.2.a)\n   * @param {Activity} activity - The parent activity\n   * @return {boolean | null} - True if satisfied, false if not, null if no measure\n   */\n  private objectiveRollupUsingMeasure(activity: Activity): boolean | null {\n    if (!activity.objectiveMeasureStatus || activity.scaledPassingScore === null) {\n      return null;\n    }\n\n    return activity.objectiveNormalizedMeasure >= activity.scaledPassingScore;\n  }\n\n  /**\n   * Objective Rollup Using Default (RB.1.2.c)\n   * @param {Activity} activity - The parent activity\n   * @return {boolean} - True if all tracked children are satisfied\n   */\n  private objectiveRollupUsingDefault(activity: Activity): boolean {\n    const children = activity.getAvailableChildren();\n\n    // If no children, not satisfied\n    if (children.length === 0) {\n      return false;\n    }\n\n    // Check if all tracked children are satisfied\n    for (const child of children) {\n      if (this.checkChildForRollupSubprocess(child, \"objective\")) {\n        if (!child.objectiveSatisfiedStatus) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Activity Progress Rollup Process (RB.1.3)\n   * Determines activity completion status\n   * @param {Activity} activity - The parent activity\n   */\n  private activityProgressRollupProcess(activity: Activity): void {\n    const rollupRules = activity.rollupRules;\n\n    // Get completion rules\n    const completedRules = rollupRules.rules.filter(rule =>\n      rule.action === RollupActionType.COMPLETED\n    );\n\n    const incompleteRules = rollupRules.rules.filter(rule =>\n      rule.action === RollupActionType.INCOMPLETE\n    );\n\n    // Evaluate completed rules first\n    for (const rule of completedRules) {\n      if (this.evaluateRollupRule(activity, rule)) {\n        activity.completionStatus = \"completed\";\n        return;\n      }\n    }\n\n    // Then evaluate incomplete rules\n    for (const rule of incompleteRules) {\n      if (this.evaluateRollupRule(activity, rule)) {\n        activity.completionStatus = \"incomplete\";\n        return;\n      }\n    }\n\n    // Default: completed if all tracked children are completed\n    const children = activity.getAvailableChildren();\n    let allCompleted = true;\n\n    for (const child of children) {\n      if (this.checkChildForRollupSubprocess(child, \"progress\")) {\n        if (child.completionStatus !== \"completed\") {\n          allCompleted = false;\n          break;\n        }\n      }\n    }\n\n    activity.completionStatus = allCompleted ? \"completed\" : \"incomplete\";\n  }\n\n  /**\n   * Check Child For Rollup Subprocess (RB.1.4.2)\n   * Determines if a child activity contributes to rollup\n   * @param {Activity} child - The child activity to check\n   * @param {string} rollupType - Type of rollup (\"measure\", \"objective\", \"progress\")\n   * @return {boolean} - True if child contributes to rollup\n   */\n  private checkChildForRollupSubprocess(child: Activity, rollupType: string): boolean {\n    // Check if child is tracked\n    switch (rollupType) {\n      case \"measure\":\n      case \"objective\":\n        if (!child.sequencingControls.rollupObjectiveSatisfied) {\n          return false;\n        }\n        break;\n      case \"progress\":\n        if (!child.sequencingControls.rollupProgressCompletion) {\n          return false;\n        }\n        break;\n    }\n\n    // Check if child is available for rollup\n    if (!child.isAvailable) {\n      return false;\n    }\n\n    // Additional checks can be added here based on rollup configuration\n\n    return true;\n  }\n\n  /**\n   * Evaluate a rollup rule\n   * @param {Activity} activity - The parent activity\n   * @param {RollupRule} rule - The rule to evaluate\n   * @return {boolean} - True if the rule applies\n   */\n  private evaluateRollupRule(activity: Activity, rule: RollupRule): boolean {\n    const children = activity.getAvailableChildren();\n    let contributingChildren = 0;\n    let satisfiedCount = 0;\n\n    // Count children that meet the rule conditions\n    for (const child of children) {\n      // Check if child contributes based on rule action\n      let contributes = false;\n      switch (rule.action) {\n        case RollupActionType.SATISFIED:\n        case RollupActionType.NOT_SATISFIED:\n          contributes = this.checkChildForRollupSubprocess(child, \"objective\");\n          break;\n        case RollupActionType.COMPLETED:\n        case RollupActionType.INCOMPLETE:\n          contributes = this.checkChildForRollupSubprocess(child, \"progress\");\n          break;\n      }\n\n      if (contributes) {\n        contributingChildren++;\n\n        // Evaluate rule conditions for this child using RB.1.4.1\n        if (this.evaluateRollupConditionsSubprocess(child, rule)) {\n          satisfiedCount++;\n        }\n      }\n    }\n\n    // Apply minimum count/percent logic OR consideration type\n    if (rule.consideration === RollupConsiderationType.ALL) {\n      // For ALL consideration, all contributing children must satisfy\n      return contributingChildren > 0 && satisfiedCount === contributingChildren;\n    } else if (rule.minimumCount !== null) {\n      return satisfiedCount >= rule.minimumCount;\n    } else if (rule.minimumPercent !== null) {\n      const percent = contributingChildren > 0 ? (satisfiedCount / contributingChildren) : 0;\n      return percent >= rule.minimumPercent;\n    }\n\n    // Default: all contributing children must satisfy\n    return contributingChildren > 0 && satisfiedCount === contributingChildren;\n  }\n\n  /**\n   * Evaluate Rollup Conditions Subprocess (RB.1.4.1)\n   * Evaluates if rollup rule conditions are met for a given activity\n   * @param {Activity} child - The child activity to evaluate\n   * @param {RollupRule} rule - The rollup rule containing conditions to evaluate\n   * @return {boolean} - True if all conditions are met, false otherwise\n   */\n  private evaluateRollupConditionsSubprocess(child: Activity, rule: RollupRule): boolean {\n    // If no conditions are specified, the rule always applies\n    if (rule.conditions.length === 0) {\n      return true;\n    }\n\n    // Evaluate based on the rule's consideration type\n    switch (rule.consideration) {\n      case RollupConsiderationType.ALL:\n        // All conditions must be met\n        return rule.conditions.every(condition => condition.evaluate(child));\n\n      case RollupConsiderationType.ANY:\n        // At least one condition must be met\n        return rule.conditions.some(condition => condition.evaluate(child));\n\n      case RollupConsiderationType.NONE:\n        // No conditions should be met\n        return !rule.conditions.some(condition => condition.evaluate(child));\n\n      case RollupConsiderationType.AT_LEAST_COUNT:\n      case RollupConsiderationType.AT_LEAST_PERCENT:\n        // These are handled at the rule level, not condition level\n        // For individual condition evaluation, treat as ALL\n        return rule.conditions.every(condition => condition.evaluate(child));\n\n      default:\n        // Unknown consideration type, default to false\n        return false;\n    }\n  }\n\n  /**\n   * Priority 5 Gap: Validate rollup state consistency across the activity tree\n   * Ensures that rollup states are consistent and valid before processing\n   * @param {Activity} rootActivity - The root activity to validate from\n   * @return {boolean} - True if state is consistent, false otherwise\n   */\n  public validateRollupStateConsistency(rootActivity: Activity): boolean {\n    try {\n      this.eventCallback?.(\"rollup_validation_started\", {\n        activityId: rootActivity.id,\n        timestamp: new Date().toISOString()\n      });\n\n      const inconsistencies: string[] = [];\n\n      // Validate the entire tree recursively\n      this.validateActivityRollupState(rootActivity, inconsistencies);\n\n      if (inconsistencies.length > 0) {\n        this.eventCallback?.(\"rollup_state_inconsistencies\", {\n          activityId: rootActivity.id,\n          inconsistencies,\n          count: inconsistencies.length\n        });\n        return false;\n      }\n\n      this.eventCallback?.(\"rollup_validation_completed\", {\n        activityId: rootActivity.id,\n        result: \"consistent\"\n      });\n      return true;\n    } catch (error) {\n      this.eventCallback?.(\"rollup_validation_error\", {\n        activityId: rootActivity.id,\n        error: error instanceof Error ? error.message : String(error)\n      });\n      return false;\n    }\n  }\n\n  /**\n   * Priority 5 Gap: Process global objective mapping for shared objectives\n   * Handles cross-activity objective synchronization and global state management\n   * @param {Activity} activity - The activity to process objectives for\n   * @param {Map<string, any>} globalObjectives - Global objective map\n   */\n  public processGlobalObjectiveMapping(activity: Activity, globalObjectives: Map<string, any>): void {\n    try {\n      this.eventCallback?.(\"global_objective_processing_started\", {\n        activityId: activity.id,\n        globalObjectiveCount: globalObjectives.size\n      });\n\n      // Process shared objectives for this activity\n      this.synchronizeGlobalObjectives(activity, globalObjectives);\n\n      // Process children recursively\n      const children = activity.getAvailableChildren();\n      for (const child of children) {\n        this.processGlobalObjectiveMapping(child, globalObjectives);\n      }\n\n      this.eventCallback?.(\"global_objective_processing_completed\", {\n        activityId: activity.id,\n        processedObjectives: globalObjectives.size\n      });\n    } catch (error) {\n      this.eventCallback?.(\"global_objective_processing_error\", {\n        activityId: activity.id,\n        error: error instanceof Error ? error.message : String(error)\n      });\n    }\n  }\n\n  /**\n   * Priority 5 Gap: Handle complex objective weighting scenarios\n   * Supports weighted rollup calculations with complex dependency chains\n   * INTEGRATION: Now properly integrated into measureRollupProcess\n   * @param {Activity} activity - The parent activity\n   * @param {Activity[]} children - Child activities to weight\n   * @return {number} - Calculated weighted measure\n   */\n  public calculateComplexWeightedMeasure(\n    activity: Activity,\n    children: Activity[],\n    options?: { enableThresholdBias?: boolean }\n  ): number {\n    let totalWeightedMeasure = 0;\n    let totalWeight = 0;\n    const weightingLog: Array<{ childId: string, measure: number, weight: number }> = [];\n    const enableBias = options?.enableThresholdBias ?? true;\n\n    for (const child of children) {\n      if (!this.checkChildForRollupSubprocess(child, \"measure\")) {\n        continue;\n      }\n\n      if (child.objectiveMeasureStatus && child.objectiveNormalizedMeasure !== null) {\n        // Handle complex weighting scenarios\n        const baseWeight = child.sequencingControls.objectiveMeasureWeight;\n        const adjustedWeight = this.calculateAdjustedWeight(child, baseWeight, enableBias);\n        const contribution = child.objectiveNormalizedMeasure * adjustedWeight;\n\n        totalWeightedMeasure += contribution;\n        totalWeight += adjustedWeight;\n\n        weightingLog.push({\n          childId: child.id,\n          measure: child.objectiveNormalizedMeasure,\n          weight: adjustedWeight\n        });\n      }\n    }\n\n    this.eventCallback?.(\"complex_weighting_calculated\", {\n      activityId: activity.id,\n      weightingDetails: weightingLog,\n      totalWeight,\n      totalWeightedMeasure,\n      result: totalWeight > 0 ? totalWeightedMeasure / totalWeight : 0\n    });\n\n    return totalWeight > 0 ? totalWeightedMeasure / totalWeight : 0;\n  }\n\n  /**\n   * Priority 5 Gap: Handle cross-cluster dependencies in rollup\n   * Manages dependencies between activity clusters for accurate rollup\n   * INTEGRATION: Now properly integrated into rollup process\n   * @param {Activity} activity - The activity to process\n   * @param {Activity[]} clusters - Related activity clusters\n   */\n  public processCrossClusterDependencies(activity: Activity, clusters: Activity[]): void {\n    try {\n      this.eventCallback?.(\"cross_cluster_processing_started\", {\n        activityId: activity.id,\n        clusterCount: clusters.length\n      });\n\n      const dependencyMap = new Map<string, string[]>();\n\n      // Build dependency map across clusters\n      for (const cluster of clusters) {\n        this.analyzeCrossClusterDependencies(cluster, dependencyMap);\n      }\n\n      // Process dependencies in correct order\n      const processOrder = this.resolveDependencyOrder(dependencyMap);\n\n      for (const clusterId of processOrder) {\n        const cluster = clusters.find(c => c.id === clusterId);\n        if (cluster) {\n          this.processClusterRollup(cluster);\n        }\n      }\n\n      this.eventCallback?.(\"cross_cluster_processing_completed\", {\n        activityId: activity.id,\n        processedClusters: processOrder.length,\n        dependencyMap: Array.from(dependencyMap.entries())\n      });\n    } catch (error) {\n      this.eventCallback?.(\"cross_cluster_processing_error\", {\n        activityId: activity.id,\n        error: error instanceof Error ? error.message : String(error)\n      });\n    }\n  }\n\n  // Helper Methods for Priority 5 Gap Implementation\n\n  /**\n   * Validate rollup state for a single activity\n   */\n  private validateActivityRollupState(activity: Activity, inconsistencies: string[]): void {\n    const activityId = activity.id;\n\n    // Check measure status consistency\n    if (activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure === null) {\n      inconsistencies.push(`Activity ${activityId}: measure status true but normalized measure is null`);\n    }\n\n    // Check satisfaction status consistency with measure (only when success status is known)\n    if (\n      activity.objectiveMeasureStatus &&\n      activity.scaledPassingScore !== null &&\n      activity.successStatus !== \"unknown\"\n    ) {\n      const expectedSatisfied = activity.objectiveNormalizedMeasure >= activity.scaledPassingScore;\n      if (activity.objectiveSatisfiedStatus !== expectedSatisfied) {\n        inconsistencies.push(`Activity ${activityId}: satisfaction status inconsistent with measure`);\n      }\n    }\n\n    // Check rollup controls consistency\n    const controls = activity.sequencingControls;\n    if (!controls.rollupObjectiveSatisfied && !controls.rollupProgressCompletion) {\n      // Activity doesn't contribute to rollup but has rollup data\n      if (activity.objectiveMeasureStatus || activity.completionStatus !== \"unknown\") {\n        inconsistencies.push(`Activity ${activityId}: has rollup data but rollup controls disabled`);\n      }\n    }\n\n    // Check children consistency\n    const children = activity.getAvailableChildren();\n    for (const child of children) {\n      this.validateActivityRollupState(child, inconsistencies);\n    }\n\n    // Log validation state\n    this.rollupStateLog.push({\n      activity: activityId,\n      timestamp: new Date().toISOString(),\n      state: {\n        measureStatus: activity.objectiveMeasureStatus,\n        measure: activity.objectiveNormalizedMeasure,\n        satisfiedStatus: activity.objectiveSatisfiedStatus,\n        completionStatus: activity.completionStatus\n      }\n    });\n  }\n\n  /**\n   * Synchronize global objectives with activity-specific objectives\n   */\n  private synchronizeGlobalObjectives(activity: Activity, globalObjectives: Map<string, any>): void {\n    // Implementation would depend on the specific objective model\n    // For now, we'll implement a basic synchronization framework\n\n    const activityObjectives = this.getActivityObjectives(activity);\n\n    for (const objectiveId of activityObjectives) {\n      if (globalObjectives.has(objectiveId)) {\n        const globalObjective = globalObjectives.get(objectiveId);\n        this.syncObjectiveState(activity, objectiveId, globalObjective);\n      } else {\n        // Register new global objective\n        const localObjective = this.getLocalObjectiveState(activity, objectiveId);\n        globalObjectives.set(objectiveId, localObjective);\n      }\n    }\n  }\n\n  /**\n   * Calculate adjusted weight for complex weighting scenarios\n   */\n  private calculateAdjustedWeight(child: Activity, baseWeight: number, enableBias: boolean = true): number {\n    let adjustedWeight = baseWeight;\n\n    // Factor in completion status\n    if (child.completionStatus !== \"completed\") {\n      adjustedWeight *= 0.8; // Reduce weight for incomplete activities\n    }\n\n    // Factor in attempt count (penalize multiple attempts)\n    if (child.attemptCount > 1) {\n      const attemptPenalty = Math.max(0.5, 1 - (child.attemptCount - 1) * 0.1);\n      adjustedWeight *= attemptPenalty;\n    }\n\n    // Factor in time limits if exceeded\n    if (child.hasAttemptLimitExceeded()) {\n      adjustedWeight *= 0.6; // Significant penalty for exceeding limits\n    }\n\n    // Bias by relation to passing threshold when available\n    if (enableBias && child.objectiveMeasureStatus) {\n      const threshold = child.scaledPassingScore ?? 0.7;\n      if (child.objectiveNormalizedMeasure >= threshold) {\n        adjustedWeight *= 1.05; // small boost for above-threshold performance\n      } else {\n        adjustedWeight *= 0.95; // small penalty for below-threshold performance\n      }\n    }\n\n    return Math.max(0, adjustedWeight); // Ensure non-negative weight\n  }\n\n  /**\n   * Analyze cross-cluster dependencies\n   */\n  private analyzeCrossClusterDependencies(cluster: Activity, dependencyMap: Map<string, string[]>): void {\n    // Build dependency relationships based on sequencing rules and prerequisites\n    const dependencies: string[] = [];\n\n    // Check sequencing rules for dependencies\n    const sequencingRules = cluster.sequencingRules;\n    // Implementation would analyze rules to identify dependencies\n\n    dependencyMap.set(cluster.id, dependencies);\n  }\n\n  /**\n   * Resolve dependency processing order\n   */\n  private resolveDependencyOrder(dependencyMap: Map<string, string[]>): string[] {\n    const resolved: string[] = [];\n    const resolving: Set<string> = new Set();\n\n    const resolve = (id: string): void => {\n      if (resolved.includes(id)) return;\n      if (resolving.has(id)) {\n        // Circular dependency detected - log warning and continue\n        this.eventCallback?.(\"circular_dependency_detected\", { activityId: id });\n        return;\n      }\n\n      resolving.add(id);\n      const dependencies = dependencyMap.get(id) || [];\n\n      for (const depId of dependencies) {\n        resolve(depId);\n      }\n\n      resolving.delete(id);\n      resolved.push(id);\n    };\n\n    for (const id of Array.from(dependencyMap.keys())) {\n      resolve(id);\n    }\n\n    return resolved;\n  }\n\n  /**\n   * Process rollup for a specific cluster\n   */\n  private processClusterRollup(cluster: Activity): void {\n    // Perform standard rollup process for the cluster\n    this.measureRollupProcess(cluster);\n\n    if (cluster.sequencingControls.rollupObjectiveSatisfied) {\n      this.objectiveRollupProcess(cluster);\n    }\n\n    if (cluster.sequencingControls.rollupProgressCompletion) {\n      this.activityProgressRollupProcess(cluster);\n    }\n  }\n\n  /**\n   * Get activity objectives (implementation depends on objective model)\n   */\n  private getActivityObjectives(activity: Activity): string[] {\n    // This would return the list of objective IDs associated with the activity\n    // For now, return a basic implementation\n    return [activity.id + \"_primary_objective\"];\n  }\n\n  /**\n   * Synchronize objective state between local and global according to SCORM 2004 specification\n   */\n  private syncObjectiveState(activity: Activity, objectiveId: string, globalObjective: any): void {\n    try {\n      // Get current local objective state\n      const localObjective = this.getLocalObjectiveState(activity, objectiveId);\n\n      // Perform bidirectional synchronization according to SCORM 2004 rules\n\n      // 1. Read from global to local (if readSatisfiedStatus is true)\n      if (globalObjective.readSatisfiedStatus && globalObjective.satisfiedStatusKnown) {\n        activity.objectiveSatisfiedStatus = globalObjective.satisfiedStatus;\n        activity.objectiveMeasureStatus = true; // Mark as known\n      }\n\n      // 2. Read normalized measure from global to local (if readNormalizedMeasure is true)\n      if (globalObjective.readNormalizedMeasure && globalObjective.normalizedMeasureKnown) {\n        activity.objectiveNormalizedMeasure = globalObjective.normalizedMeasure;\n        activity.objectiveMeasureStatus = true;\n\n        // Update satisfaction based on measure if satisfiedByMeasure is true\n        if (globalObjective.satisfiedByMeasure) {\n          const scaledPassingScore = activity.scaledPassingScore || 0.7; // Default to 0.7\n          activity.objectiveSatisfiedStatus = globalObjective.normalizedMeasure >= scaledPassingScore;\n        }\n      }\n\n      // 3. Write from local to global (if writeSatisfiedStatus is true)\n      if (globalObjective.writeSatisfiedStatus && activity.objectiveMeasureStatus) {\n        globalObjective.satisfiedStatus = activity.objectiveSatisfiedStatus;\n        globalObjective.satisfiedStatusKnown = true;\n      }\n\n      // 4. Write normalized measure from local to global (if writeNormalizedMeasure is true)\n      if (globalObjective.writeNormalizedMeasure && activity.objectiveMeasureStatus) {\n        globalObjective.normalizedMeasure = activity.objectiveNormalizedMeasure;\n        globalObjective.normalizedMeasureKnown = true;\n\n        // Update global satisfaction based on measure if satisfiedByMeasure is true\n        if (globalObjective.satisfiedByMeasure) {\n          const scaledPassingScore = activity.scaledPassingScore || 0.7;\n          globalObjective.satisfiedStatus = activity.objectiveNormalizedMeasure >= scaledPassingScore;\n          globalObjective.satisfiedStatusKnown = true;\n        }\n      }\n\n      // 5. Handle objective completion status synchronization\n      if (globalObjective.writeCompletionStatus && activity.completionStatus !== \"unknown\") {\n        globalObjective.completionStatus = activity.completionStatus;\n        globalObjective.completionStatusKnown = true;\n      }\n\n      if (globalObjective.readCompletionStatus && globalObjective.completionStatusKnown) {\n        activity.completionStatus = globalObjective.completionStatus;\n      }\n\n      // 6. Handle progress measure synchronization\n      if (globalObjective.writeProgressMeasure && activity.progressMeasureStatus) {\n        globalObjective.progressMeasure = activity.progressMeasure;\n        globalObjective.progressMeasureKnown = true;\n      }\n\n      if (globalObjective.readProgressMeasure && globalObjective.progressMeasureKnown) {\n        activity.progressMeasure = globalObjective.progressMeasure;\n        activity.progressMeasureStatus = true;\n      }\n\n      // 7. Update activity attempt data based on global state\n      if (globalObjective.updateAttemptData) {\n        this.updateActivityAttemptData(activity, globalObjective);\n      }\n\n      // 8. Fire synchronization event for monitoring/logging\n      this.eventCallback?.(\"objective_synchronized\", {\n        activityId: activity.id,\n        objectiveId,\n        localState: localObjective,\n        globalState: globalObjective,\n        synchronizationTime: new Date().toISOString()\n      });\n\n    } catch (error) {\n      // Log synchronization error but don't fail the rollup process\n      this.eventCallback?.(\"objective_sync_error\", {\n        activityId: activity.id,\n        objectiveId,\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: new Date().toISOString()\n      });\n    }\n  }\n\n  /**\n   * Update activity attempt data based on global objective state\n   */\n  private updateActivityAttemptData(activity: Activity, globalObjective: any): void {\n    try {\n      // Update attempt completion based on global objective satisfaction\n      if (globalObjective.satisfiedStatusKnown && globalObjective.satisfiedStatus) {\n        // If global objective is satisfied, update local completion data\n        if (activity.completionStatus === \"unknown\" || activity.completionStatus === \"incomplete\") {\n          activity.completionStatus = \"completed\";\n        }\n\n        // Update success status based on objective satisfaction\n        if (activity.successStatus === \"unknown\") {\n          activity.successStatus = \"passed\";\n        }\n      }\n\n      // Update attempt count if global objective indicates new attempt\n      if (globalObjective.attemptCount && globalObjective.attemptCount > activity.attemptCount) {\n        activity.attemptCount = globalObjective.attemptCount;\n      }\n\n      // Update completion amount based on progress measure\n      if (globalObjective.progressMeasureKnown && globalObjective.progressMeasure !== undefined) {\n        activity.attemptCompletionAmount = globalObjective.progressMeasure;\n      }\n\n      // Update absolute duration from global timing data\n      if (globalObjective.attemptAbsoluteDuration) {\n        activity.attemptAbsoluteDuration = globalObjective.attemptAbsoluteDuration;\n      }\n\n      if (globalObjective.attemptExperiencedDuration) {\n        activity.attemptExperiencedDuration = globalObjective.attemptExperiencedDuration;\n      }\n\n      // Update activity-level durations\n      if (globalObjective.activityAbsoluteDuration) {\n        activity.activityAbsoluteDuration = globalObjective.activityAbsoluteDuration;\n      }\n\n      if (globalObjective.activityExperiencedDuration) {\n        activity.activityExperiencedDuration = globalObjective.activityExperiencedDuration;\n      }\n\n      // Update location if provided by global state\n      if (globalObjective.location !== undefined) {\n        activity.location = globalObjective.location;\n      }\n\n      // Update suspension state based on global objective\n      if (globalObjective.suspendData !== undefined) {\n        activity.isSuspended = globalObjective.suspendData.length > 0;\n      }\n\n    } catch (error) {\n      // Log attempt data update error\n      this.eventCallback?.(\"attempt_data_update_error\", {\n        activityId: activity.id,\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: new Date().toISOString()\n      });\n    }\n  }\n\n  /**\n   * Get local objective state\n   */\n  private getLocalObjectiveState(activity: Activity, objectiveId: string): any {\n    // Return current local state for the objective\n    return {\n      id: objectiveId,\n      satisfiedStatus: activity.objectiveSatisfiedStatus,\n      measureStatus: activity.objectiveMeasureStatus,\n      normalizedMeasure: activity.objectiveNormalizedMeasure,\n      scaledPassingScore: activity.scaledPassingScore\n    };\n  }\n\n  /**\n   * INTEGRATION: Identify Activity Clusters\n   * Identifies clusters among child activities for cross-cluster dependency processing\n   * @param {Activity[]} children - Child activities to analyze\n   * @return {Activity[]} - Array of identified clusters\n   */\n  private identifyActivityClusters(children: Activity[]): Activity[] {\n    const clusters: Activity[] = [];\n\n    for (const child of children) {\n      // An activity is considered a cluster if it has children and flow controls\n      if (child.children.length > 0 && child.sequencingControls.flow) {\n        clusters.push(child);\n      }\n    }\n\n    return clusters;\n  }\n\n}\n","import { Activity } from \"./activity\";\nimport { SelectionTiming, RandomizationTiming } from \"./sequencing_controls\";\n\n/**\n * Class implementing SCORM 2004 Selection and Randomization processes (SR.1 and SR.2)\n */\nexport class SelectionRandomization {\n  /**\n   * Select Children Process (SR.1)\n   * Selects a subset of child activities based on selection controls\n   * @param {Activity} activity - The parent activity whose children need to be selected\n   * @return {Activity[]} - The selected child activities\n   */\n  public static selectChildrenProcess(activity: Activity): Activity[] {\n    const controls = activity.sequencingControls;\n    const children = [...activity.children]; // Create a copy to avoid mutating original\n\n    // Check if selection should occur\n    if (controls.selectionTiming === SelectionTiming.NEVER) {\n      return children;\n    }\n\n    // Check if selection has already been done (for ONCE timing)\n    if (\n      controls.selectionTiming === SelectionTiming.ONCE &&\n      controls.selectionCountStatus\n    ) {\n      return children;\n    }\n\n    // Check if we need to select children\n    const selectCount = controls.selectCount;\n    if (selectCount === null || selectCount >= children.length) {\n      // Mark selection as done if timing is ONCE\n      if (controls.selectionTiming === SelectionTiming.ONCE) {\n        controls.selectionCountStatus = true;\n      }\n      return children;\n    }\n\n    // Perform selection\n    const selectedChildren: Activity[] = [];\n    const availableIndices = children.map((_, index) => index);\n\n    // Randomly select children\n    for (let i = 0; i < selectCount; i++) {\n      if (availableIndices.length === 0) break;\n      \n      const randomIndex = Math.floor(Math.random() * availableIndices.length);\n      const childIndex = availableIndices[randomIndex];\n      if (childIndex !== undefined && children[childIndex]) {\n        selectedChildren.push(children[childIndex]);\n      }\n      \n      // Remove selected index from available indices\n      availableIndices.splice(randomIndex, 1);\n    }\n\n    // Mark selection as done only if timing is ONCE\n    if (controls.selectionTiming === SelectionTiming.ONCE) {\n      controls.selectionCountStatus = true;\n    }\n\n    // Hide non-selected children from choice\n    for (const child of children) {\n      if (!selectedChildren.includes(child)) {\n        child.isHiddenFromChoice = true;\n        child.isAvailable = false;\n      }\n    }\n\n    return selectedChildren;\n  }\n\n  /**\n   * Randomize Children Process (SR.2)\n   * Randomizes the order of child activities based on randomization controls\n   * @param {Activity} activity - The parent activity whose children need to be randomized\n   * @return {Activity[]} - The randomized child activities\n   */\n  public static randomizeChildrenProcess(activity: Activity): Activity[] {\n    const controls = activity.sequencingControls;\n    const children = [...activity.children]; // Create a copy to avoid mutating original\n\n    // Check if randomization should occur\n    if (controls.randomizationTiming === RandomizationTiming.NEVER) {\n      return children;\n    }\n\n    // Check if randomization has already been done (for ONCE timing)\n    if (\n      controls.randomizationTiming === RandomizationTiming.ONCE &&\n      controls.reorderChildren\n    ) {\n      return children;\n    }\n\n    // Check if we need to randomize\n    if (!controls.randomizeChildren) {\n      return children;\n    }\n\n    // Perform Fisher-Yates shuffle\n    const randomizedChildren = [...children];\n    for (let i = randomizedChildren.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const tempI = randomizedChildren[i];\n      const tempJ = randomizedChildren[j];\n      if (tempI && tempJ) {\n        randomizedChildren[i] = tempJ;\n        randomizedChildren[j] = tempI;\n      }\n    }\n\n    // Mark randomization as done only if timing is ONCE\n    if (controls.randomizationTiming === RandomizationTiming.ONCE) {\n      controls.reorderChildren = true;\n    }\n\n    // Update the activity's children array with the new order\n    activity.children.length = 0;\n    activity.children.push(...randomizedChildren);\n\n    return randomizedChildren;\n  }\n\n  /**\n   * Apply selection and randomization to an activity\n   * This combines both SR.1 and SR.2 processes\n   * @param {Activity} activity - The parent activity\n   * @param {boolean} isNewAttempt - Whether this is a new attempt on the activity\n   * @return {Activity[]} - The processed child activities\n   */\n  public static applySelectionAndRandomization(\n    activity: Activity,\n    isNewAttempt: boolean = false,\n  ): Activity[] {\n    const controls = activity.sequencingControls;\n\n    // Check if we should apply selection/randomization\n    let shouldApplySelection = false;\n    let shouldApplyRandomization = false;\n\n    // For ON_EACH_NEW_ATTEMPT timing, only apply on new attempts\n    if (controls.selectionTiming === SelectionTiming.ON_EACH_NEW_ATTEMPT) {\n      shouldApplySelection = isNewAttempt;\n      if (isNewAttempt) {\n        controls.selectionCountStatus = false;\n      }\n    } else if (controls.selectionTiming === SelectionTiming.ONCE) {\n      shouldApplySelection = !controls.selectionCountStatus;\n    }\n\n    if (controls.randomizationTiming === RandomizationTiming.ON_EACH_NEW_ATTEMPT) {\n      shouldApplyRandomization = isNewAttempt;\n      if (isNewAttempt) {\n        controls.reorderChildren = false;\n      }\n    } else if (controls.randomizationTiming === RandomizationTiming.ONCE) {\n      shouldApplyRandomization = !controls.reorderChildren;\n    }\n\n    // Apply selection first if needed\n    if (shouldApplySelection) {\n      this.selectChildrenProcess(activity);\n    }\n\n    // Then apply randomization if needed\n    if (shouldApplyRandomization) {\n      this.randomizeChildrenProcess(activity);\n    }\n\n    // Get the final processed children\n    const processedChildren = activity.children.filter(child => child.isAvailable);\n    \n    // Store the processed children on the activity\n    activity.setProcessedChildren(processedChildren);\n    \n    return processedChildren;\n  }\n\n  /**\n   * Check if selection is needed for an activity\n   * @param {Activity} activity - The activity to check\n   * @return {boolean} - True if selection is needed\n   */\n  public static isSelectionNeeded(activity: Activity): boolean {\n    const controls = activity.sequencingControls;\n    \n    if (controls.selectionTiming === SelectionTiming.NEVER) {\n      return false;\n    }\n\n    if (\n      controls.selectionTiming === SelectionTiming.ONCE &&\n      controls.selectionCountStatus\n    ) {\n      return false;\n    }\n\n    return controls.selectCount !== null && controls.selectCount < activity.children.length;\n  }\n\n  /**\n   * Check if randomization is needed for an activity\n   * @param {Activity} activity - The activity to check\n   * @return {boolean} - True if randomization is needed\n   */\n  public static isRandomizationNeeded(activity: Activity): boolean {\n    const controls = activity.sequencingControls;\n    \n    if (controls.randomizationTiming === RandomizationTiming.NEVER) {\n      return false;\n    }\n\n    if (\n      controls.randomizationTiming === RandomizationTiming.ONCE &&\n      controls.reorderChildren\n    ) {\n      return false;\n    }\n\n    return controls.randomizeChildren;\n  }\n}","import { Activity } from \"./activity\";\nimport { ActivityTree } from \"./activity_tree\";\nimport {\n  RuleActionType,\n  RuleConditionOperator,\n  SequencingRule,\n  SequencingRules\n} from \"./sequencing_rules\";\nimport { SequencingControls } from \"./sequencing_controls\";\nimport { ADLNav } from \"../adl\";\nimport { getDurationAsSeconds } from \"../../../utilities\";\nimport { scorm2004_regex } from \"../../../constants/regex\";\nimport { SelectionRandomization } from \"./selection_randomization\";\n\n/**\n * Enum for sequencing request types\n */\nexport enum SequencingRequestType {\n  START = \"start\",\n  RESUME_ALL = \"resumeAll\",\n  CONTINUE = \"continue\",\n  PREVIOUS = \"previous\",\n  CHOICE = \"choice\",\n  JUMP = \"jump\",\n  EXIT = \"exit\",\n  EXIT_ALL = \"exitAll\",\n  ABANDON = \"abandon\",\n  ABANDON_ALL = \"abandonAll\",\n  SUSPEND_ALL = \"suspendAll\",\n  RETRY = \"retry\",\n  RETRY_ALL = \"retryAll\",\n}\n\n/**\n * Enum for delivery request types\n */\nexport enum DeliveryRequestType {\n  DELIVER = \"deliver\",\n  DO_NOT_DELIVER = \"doNotDeliver\",\n}\n\n/**\n * Class representing the result of a sequencing process\n */\nexport class SequencingResult {\n  public deliveryRequest: DeliveryRequestType;\n  public targetActivity: Activity | null;\n  public exception: string | null;\n\n  constructor(\n    deliveryRequest: DeliveryRequestType = DeliveryRequestType.DO_NOT_DELIVER,\n    targetActivity: Activity | null = null,\n    exception: string | null = null\n  ) {\n    this.deliveryRequest = deliveryRequest;\n    this.targetActivity = targetActivity;\n    this.exception = exception;\n  }\n}\n\n/**\n * Class implementing SCORM 2004 sequencing processes\n */\nexport class SequencingProcess {\n  private activityTree: ActivityTree;\n  private sequencingRules: SequencingRules | null;\n  private sequencingControls: SequencingControls | null;\n  private adlNav: ADLNav | null;\n  private now: () => Date;\n  private getAttemptElapsedSecondsHook: ((activity: Activity) => number) | undefined;\n  private getActivityElapsedSecondsHook: ((activity: Activity) => number) | undefined;\n\n  constructor(\n    activityTree: ActivityTree,\n    sequencingRules?: SequencingRules | null,\n    sequencingControls?: SequencingControls | null,\n    adlNav: ADLNav | null = null,\n    options?: {\n      now?: () => Date;\n      getAttemptElapsedSeconds?: (activity: Activity) => number;\n      getActivityElapsedSeconds?: (activity: Activity) => number;\n    }\n  ) {\n    this.activityTree = activityTree;\n    this.sequencingRules = sequencingRules || null;\n    this.sequencingControls = sequencingControls || null;\n    this.adlNav = adlNav;\n    this.now = options?.now || (() => new Date());\n    this.getAttemptElapsedSecondsHook = (options?.getAttemptElapsedSeconds as\n      | ((activity: Activity) => number)\n      | undefined);\n    this.getActivityElapsedSecondsHook = (options?.getActivityElapsedSeconds as\n      | ((activity: Activity) => number)\n      | undefined);\n  }\n\n  /**\n   * Main Sequencing Request Process (SB.2.12)\n   * This is the main entry point for all navigation requests\n   * @param {SequencingRequestType} request - The sequencing request\n   * @param {string} targetActivityId - The target activity ID (for choice/jump)\n   * @return {SequencingResult} - The result of the sequencing process\n   */\n  public sequencingRequestProcess(\n    request: SequencingRequestType,\n    targetActivityId: string | null = null\n  ): SequencingResult {\n    // Initialize result\n    const result = new SequencingResult();\n\n    // Get current activity\n    const currentActivity = this.activityTree.currentActivity;\n    const suspendedActivity = this.activityTree.suspendedActivity;\n\n    // Process based on request type\n    switch (request) {\n      case SequencingRequestType.START:\n        return this.startSequencingRequestProcess();\n\n      case SequencingRequestType.RESUME_ALL:\n        return this.resumeAllSequencingRequestProcess();\n\n      case SequencingRequestType.CONTINUE:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.continueSequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.PREVIOUS:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.previousSequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.CHOICE:\n        if (!targetActivityId) {\n          result.exception = \"SB.2.12-5\"; // No target specified\n          return result;\n        }\n        return this.choiceSequencingRequestProcess(targetActivityId, currentActivity);\n\n      case SequencingRequestType.JUMP:\n        if (!targetActivityId) {\n          result.exception = \"SB.2.12-5\"; // No target specified\n          return result;\n        }\n        return this.jumpSequencingRequestProcess(targetActivityId);\n\n      case SequencingRequestType.EXIT:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.exitSequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.EXIT_ALL:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.exitAllSequencingRequestProcess();\n\n      case SequencingRequestType.ABANDON:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.abandonSequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.ABANDON_ALL:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.abandonAllSequencingRequestProcess();\n\n      case SequencingRequestType.SUSPEND_ALL:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.suspendAllSequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.RETRY:\n        if (!currentActivity) {\n          result.exception = \"SB.2.12-1\"; // No current activity\n          return result;\n        }\n        return this.retrySequencingRequestProcess(currentActivity);\n\n      case SequencingRequestType.RETRY_ALL:\n        return this.retryAllSequencingRequestProcess();\n\n      default:\n        result.exception = \"SB.2.12-6\"; // Undefined sequencing request\n        return result;\n    }\n  }\n\n  /**\n   * Start Sequencing Request Process (SB.2.5)\n   * Determines the first activity to deliver when starting\n   * @return {SequencingResult}\n   */\n  private startSequencingRequestProcess(): SequencingResult {\n    const result = new SequencingResult();\n    const root = this.activityTree.root;\n\n    if (!root) {\n      result.exception = \"SB.2.5-1\"; // No activity tree\n      return result;\n    }\n\n    // Check if sequencing session has already begun\n    if (this.activityTree.currentActivity !== null) {\n      result.exception = \"SB.2.5-2\"; // Sequencing session already begun\n      return result;\n    }\n\n    // For START, we need to flow into the activity tree from the root\n    // Start with the root and find first deliverable leaf activity\n    const deliverableActivity = this.findFirstDeliverableActivity(root);\n\n    if (!deliverableActivity) {\n      result.exception = \"SB.2.5-3\"; // No activity available\n      return result;\n    }\n\n    // Deliver the identified activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = deliverableActivity;\n    return result;\n  }\n\n  /**\n   * Find First Deliverable Activity\n   * Recursively searches from the given activity to find the first deliverable leaf\n   * @param {Activity} activity - The activity to start searching from\n   * @return {Activity | null} - The first deliverable activity, or null if none found\n   */\n  private findFirstDeliverableActivity(activity: Activity): Activity | null {\n    // Check if this activity can be delivered (leaf activity)\n    if (activity.children.length === 0) {\n      // This is a leaf - check if it can be delivered\n      if (this.checkActivityProcess(activity)) {\n        return activity;\n      }\n      return null;\n    }\n\n    // This is a cluster - look through children for deliverable activity\n    this.ensureSelectionAndRandomization(activity);\n    const children = activity.getAvailableChildren();\n\n    for (const child of children) {\n      const deliverable = this.findFirstDeliverableActivity(child);\n      if (deliverable) {\n        return deliverable;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Resume All Sequencing Request Process (SB.2.6)\n   * Resumes a suspended session\n   * @return {SequencingResult}\n   */\n  private resumeAllSequencingRequestProcess(): SequencingResult {\n    const result = new SequencingResult();\n    const suspendedActivity = this.activityTree.suspendedActivity;\n\n    if (!suspendedActivity) {\n      result.exception = \"SB.2.6-1\"; // No suspended activity\n      return result;\n    }\n\n    if (this.activityTree.currentActivity !== null) {\n      result.exception = \"SB.2.6-2\"; // Current activity already defined\n      return result;\n    }\n\n    // Deliver the suspended activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = suspendedActivity;\n    return result;\n  }\n\n  /**\n   * Continue Sequencing Request Process (SB.2.7)\n   * Processes continue navigation request\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private continueSequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Check if the current activity has been terminated\n    if (currentActivity.isActive) {\n      result.exception = \"SB.2.7-1\"; // Current activity not terminated\n      return result;\n    }\n\n    // Check if flow is allowed from the current activity's parent\n    if (currentActivity.parent && !currentActivity.parent.sequencingControls.flow) {\n      result.exception = \"SB.2.7-2\"; // No activity available (flow disabled)\n      return result;\n    }\n\n    // Flow from current activity to find next using flow subprocess\n    const flowResult = this.flowSubprocess(currentActivity, FlowSubprocessMode.FORWARD);\n\n    if (!flowResult) {\n      result.exception = \"SB.2.7-2\"; // No activity available\n      return result;\n    }\n\n    // Deliver the identified activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = flowResult;\n    return result;\n  }\n\n  /**\n   * Previous Sequencing Request Process (SB.2.8)\n   * Processes previous navigation request\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private previousSequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Check if the current activity has been terminated\n    if (currentActivity.isActive) {\n      result.exception = \"SB.2.8-1\"; // Current activity not terminated\n      return result;\n    }\n\n    // Check if flow is allowed from the current activity's parent\n    if (currentActivity.parent && !currentActivity.parent.sequencingControls.flow) {\n      result.exception = \"SB.2.8-2\"; // No activity available (flow disabled)\n      return result;\n    }\n\n    // Check if backward flow is allowed (forwardOnly control)\n    if (currentActivity.parent && currentActivity.parent.sequencingControls.forwardOnly) {\n      result.exception = \"SB.2.8-2\"; // No activity available (backward flow disabled)\n      return result;\n    }\n\n    // Flow from current activity to find previous using flow subprocess\n    const flowResult = this.flowSubprocess(currentActivity, FlowSubprocessMode.BACKWARD);\n\n    if (!flowResult) {\n      result.exception = \"SB.2.8-2\"; // No activity available\n      return result;\n    }\n\n    // Deliver the identified activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = flowResult;\n    return result;\n  }\n\n  /**\n   * Choice Sequencing Request Process (SB.2.9)\n   * Processes choice navigation request\n   * @param {string} targetActivityId - The target activity ID\n   * @param {Activity | null} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private choiceSequencingRequestProcess(\n    targetActivityId: string,\n    currentActivity: Activity | null\n  ): SequencingResult {\n    const result = new SequencingResult();\n\n    // Find the target activity\n    let targetActivity = this.activityTree.getActivity(targetActivityId);\n    if (!targetActivity) {\n      result.exception = \"SB.2.9-1\"; // Target activity does not exist\n      return result;\n    }\n\n    // Check if target is in the activity tree\n    if (!this.isActivityInTree(targetActivity)) {\n      result.exception = \"SB.2.9-2\"; // Target activity not in tree\n      return result;\n    }\n\n    // Cannot choose the root activity\n    if (targetActivity === this.activityTree.root) {\n      result.exception = \"SB.2.9-3\"; // Cannot choose root\n      return result;\n    }\n\n    // Path to root validation\n    let activity: Activity | null = targetActivity;\n    while (activity) {\n      if (activity.isHiddenFromChoice) {\n        result.exception = \"SB.2.9-4\"; // Activity hidden from choice\n        return result;\n      }\n\n      // Check if choice control is constrained\n      if (activity.parent && !activity.parent.sequencingControls.choice) {\n        result.exception = \"SB.2.9-5\"; // Choice control is not allowed\n        return result;\n      }\n\n      activity = activity.parent;\n    }\n\n    // Check if current activity needs to be terminated\n    if (currentActivity && currentActivity.isActive) {\n      result.exception = \"SB.2.9-6\"; // Current activity not terminated\n      return result;\n    }\n\n    // Find common ancestor\n    const commonAncestor = this.findCommonAncestor(currentActivity, targetActivity);\n\n    // Terminate descendent attempts from common ancestor\n    if (currentActivity) {\n      this.terminateDescendentAttemptsProcess(commonAncestor || this.activityTree.root!);\n    }\n\n    // Form the activity path from target to common ancestor\n    const activityPath: Activity[] = [];\n    activity = targetActivity;\n    while (activity && activity !== commonAncestor) {\n      activityPath.unshift(activity);\n      activity = activity.parent;\n    }\n\n    // Evaluate each activity in the path\n    for (const pathActivity of activityPath) {\n      if (!this.checkActivityProcess(pathActivity)) {\n        // Sequencing ends with no delivery\n        return result;\n      }\n    }\n\n    // If target is not a leaf, flow forward to find a leaf\n    if (targetActivity.children.length > 0) {\n      this.ensureSelectionAndRandomization(targetActivity);\n      const availableChildren = targetActivity.getAvailableChildren();\n\n      const flowResult = this.flowActivityTraversalSubprocess(\n        targetActivity,\n        true, // direction forward\n        true, // consider children\n        FlowSubprocessMode.FORWARD\n      );\n\n      if (!flowResult) {\n        result.exception = \"SB.2.9-7\"; // No activity available from target\n        return result;\n      }\n\n      targetActivity = flowResult;\n    }\n\n    // Deliver the identified activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = targetActivity;\n    return result;\n  }\n\n  /**\n   * Jump Sequencing Request Process (SB.2.13)\n   * Processes jump navigation request - SCORM 2004 4th Edition\n   * @param {string} targetActivityId - The target activity ID\n   * @return {SequencingResult}\n   */\n  private jumpSequencingRequestProcess(targetActivityId: string): SequencingResult {\n    const result = new SequencingResult();\n\n    // Find the target activity\n    const targetActivity = this.activityTree.getActivity(targetActivityId);\n    if (!targetActivity) {\n      result.exception = \"SB.2.13-1\"; // Target activity does not exist\n      return result;\n    }\n\n    // Check if target is in the activity tree\n    if (!this.isActivityInTree(targetActivity)) {\n      result.exception = \"SB.2.13-2\"; // Target activity not in tree\n      return result;\n    }\n\n    // Check if target is available\n    if (!targetActivity.isAvailable) {\n      result.exception = \"SB.2.13-3\"; // Target not available\n      return result;\n    }\n\n    // Deliver the target activity\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = targetActivity;\n    return result;\n  }\n\n  /**\n   * Exit Sequencing Request Process\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private exitSequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Check if exit is allowed\n    if (!currentActivity.parent) {\n      result.exception = \"SB.2.11-1\"; // Exit not allowed - no parent\n      return result;\n    }\n\n    // Check parent's sequencing controls\n    if (!currentActivity.parent.sequencingControls.choiceExit) {\n      result.exception = \"SB.2.11-2\"; // Exit not allowed by sequencing controls\n      return result;\n    }\n\n    // Terminate current activity\n    this.terminateDescendentAttemptsProcess(currentActivity);\n\n    return result;\n  }\n\n  /**\n   * Exit All Sequencing Request Process\n   * @return {SequencingResult}\n   */\n  private exitAllSequencingRequestProcess(): SequencingResult {\n    const result = new SequencingResult();\n\n    // Terminate all activities\n    if (this.activityTree.root) {\n      this.terminateDescendentAttemptsProcess(this.activityTree.root);\n    }\n\n    return result;\n  }\n\n  /**\n   * Abandon Sequencing Request Process\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private abandonSequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Set current activity as abandoned\n    currentActivity.isActive = false;\n    this.activityTree.currentActivity = currentActivity.parent;\n\n    return result;\n  }\n\n  /**\n   * Abandon All Sequencing Request Process\n   * @return {SequencingResult}\n   */\n  private abandonAllSequencingRequestProcess(): SequencingResult {\n    const result = new SequencingResult();\n\n    // Abandon all activities\n    this.activityTree.currentActivity = null;\n\n    return result;\n  }\n\n  /**\n   * Suspend All Sequencing Request Process\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private suspendAllSequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Check if suspend is allowed\n    if (currentActivity !== this.activityTree.root) {\n      currentActivity.isSuspended = true;\n      this.activityTree.suspendedActivity = currentActivity;\n      this.activityTree.currentActivity = null;\n    } else {\n      result.exception = \"SB.2.15-1\"; // Cannot suspend root\n    }\n\n    return result;\n  }\n\n  /**\n   * Retry Sequencing Request Process\n   * @param {Activity} currentActivity - The current activity\n   * @return {SequencingResult}\n   */\n  private retrySequencingRequestProcess(currentActivity: Activity): SequencingResult {\n    const result = new SequencingResult();\n\n    // Terminate current activity\n    this.terminateDescendentAttemptsProcess(currentActivity);\n\n    // Increment attempt count\n    currentActivity.incrementAttemptCount();\n\n    // Deliver the activity again\n    result.deliveryRequest = DeliveryRequestType.DELIVER;\n    result.targetActivity = currentActivity;\n    return result;\n  }\n\n  /**\n   * Retry All Sequencing Request Process\n   * @return {SequencingResult}\n   */\n  private retryAllSequencingRequestProcess(): SequencingResult {\n    // Clear current activity to allow restart\n    this.activityTree.currentActivity = null;\n\n    // Restart from the root\n    return this.startSequencingRequestProcess();\n  }\n\n  /**\n   * Ensure selection and randomization is applied to an activity\n   * @param {Activity} activity - The activity to process\n   */\n  private ensureSelectionAndRandomization(activity: Activity): void {\n    // Check if processing is needed\n    if (activity.getAvailableChildren() === activity.children &&\n      (SelectionRandomization.isSelectionNeeded(activity) ||\n        SelectionRandomization.isRandomizationNeeded(activity))) {\n      SelectionRandomization.applySelectionAndRandomization(activity, activity.isNewAttempt);\n    }\n  }\n\n  /**\n   * Flow Activity Traversal Subprocess (SB.2.2)\n   * Checks if an activity can be delivered and flows into clusters if needed\n   */\n  private flowActivityTraversalSubprocess(\n    activity: Activity,\n    _direction: boolean,\n    considerChildren: boolean,\n    mode: FlowSubprocessMode\n  ): Activity | null {\n    // Check if the activity is available\n    if (!activity.isAvailable) {\n      return null;\n    }\n\n    // Check sequencing control modes\n    const parent = activity.parent;\n    if (parent && !parent.sequencingControls.flow) {\n      return null;\n    }\n\n    // Activity is a cluster, try to flow into it to find a deliverable leaf\n    if (considerChildren) {\n      this.ensureSelectionAndRandomization(activity);\n      const availableChildren = activity.getAvailableChildren();\n\n      for (const child of availableChildren) {\n        const deliverable = this.flowActivityTraversalSubprocess(\n          child,\n          mode === FlowSubprocessMode.FORWARD,\n          true,\n          mode\n        );\n        if (deliverable) {\n          return deliverable;\n        }\n      }\n    }\n\n    // If activity is a leaf (no children), check if it can be delivered\n    if (activity.children.length === 0) {\n      // Check if this activity was intended to be a cluster but is empty\n      // A cluster typically has flow control enabled\n      if (activity.sequencingControls.flow) {\n        // This appears to be an empty cluster, not a true leaf\n        return null;\n      }\n\n      if (this.checkActivityProcess(activity)) {\n        return activity;\n      }\n      return null;\n    }\n\n    return null;\n  }\n\n  /**\n   * Check Activity Process (SB.2.3)\n   * Validates if an activity can be delivered\n   */\n  private checkActivityProcess(activity: Activity): boolean {\n    // Check if activity is available\n    if (!activity.isAvailable) {\n      return false;\n    }\n\n    // Check limit conditions (UP.1)\n    if (this.limitConditionsCheckProcess(activity)) {\n      return false; // Activity violates limit conditions\n    }\n\n    // Check pre-condition rules using UP.2\n    const preConditionResult = this.sequencingRulesCheckProcess(\n      activity,\n      activity.sequencingRules.preConditionRules\n    );\n\n    return preConditionResult !== RuleActionType.SKIP &&\n      preConditionResult !== RuleActionType.DISABLED;\n  }\n\n  /**\n   * Terminate Descendent Attempts Process (SB.2.4)\n   * Ends attempts on an activity and its descendants\n   */\n  private terminateDescendentAttemptsProcess(activity: Activity, skipExitRules: boolean = false): void {\n    // Apply Exit Action Rules (TB.2.1) first to check for exit actions\n    let exitAction = null;\n    if (!skipExitRules) {\n      exitAction = this.exitActionRulesSubprocess(activity);\n    }\n\n    // End attempt on the activity\n    activity.isActive = false;\n\n    // Recursively terminate descendants\n    // Use all children here, not just available ones, since we need to terminate all\n    for (const child of activity.children) {\n      this.terminateDescendentAttemptsProcess(child, skipExitRules);\n    }\n\n    // Process deferred exit actions after termination to avoid recursion\n    if (exitAction && !skipExitRules) {\n      this.processDeferredExitAction(exitAction, activity);\n    }\n  }\n\n  /**\n   * Exit Action Rules Subprocess (TB.2.1)\n   * Evaluates the exit condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate exit rules for\n   * @return {RuleActionType | null} - The exit action to process, if any\n   * @private\n   */\n  private exitActionRulesSubprocess(activity: Activity): RuleActionType | null {\n    // Evaluate exit condition rules using UP.2\n    const exitAction = this.sequencingRulesCheckProcess(\n      activity,\n      activity.sequencingRules.exitConditionRules\n    );\n\n    // Only certain actions are valid for exit condition rules\n    if (exitAction === RuleActionType.EXIT ||\n      exitAction === RuleActionType.EXIT_PARENT ||\n      exitAction === RuleActionType.EXIT_ALL) {\n      return exitAction;\n    }\n\n    return null;\n  }\n\n  /**\n   * Process deferred exit action after termination\n   * @param {RuleActionType} exitAction - The exit action to process\n   * @param {Activity} activity - The activity that triggered the exit action\n   * @private\n   */\n  private processDeferredExitAction(exitAction: RuleActionType, activity: Activity): void {\n    switch (exitAction) {\n      case RuleActionType.EXIT:\n        // Exit terminates the current attempt on the activity\n        // Already handled by terminateDescendentAttemptsProcess\n        break;\n\n      case RuleActionType.EXIT_PARENT:\n        // Exit parent terminates the current attempt on the parent activity\n        if (activity.parent && activity.parent.isActive) {\n          this.terminateDescendentAttemptsProcess(activity.parent, true);\n        }\n        break;\n\n      case RuleActionType.EXIT_ALL:\n        // Exit all terminates all activities\n        if (this.activityTree.root && this.activityTree.root !== activity) {\n          // Only process if we haven't already terminated the root\n          const allActivities = this.activityTree.getAllActivities();\n          const anyActive = allActivities.some(a => a.isActive);\n          if (anyActive) {\n            this.terminateDescendentAttemptsProcess(this.activityTree.root, true);\n          }\n        }\n        break;\n    }\n  }\n\n  /**\n   * Post Condition Rules Subprocess (TB.2.2)\n   * Evaluates the post-condition rules for an activity after delivery\n   * @param {Activity} activity - The activity to evaluate post-condition rules for\n   * @return {RuleActionType | null} - The action to take, if any\n   * @private\n   */\n  private postConditionRulesSubprocess(activity: Activity): RuleActionType | null {\n    // Evaluate post-condition rules using UP.2\n    const postAction = this.sequencingRulesCheckProcess(\n      activity,\n      activity.sequencingRules.postConditionRules\n    );\n\n    // Only certain actions are valid for post-condition rules\n    const validActions = [\n      RuleActionType.EXIT_PARENT,\n      RuleActionType.EXIT_ALL,\n      RuleActionType.RETRY,\n      RuleActionType.RETRY_ALL,\n      RuleActionType.CONTINUE,\n      RuleActionType.PREVIOUS,\n      RuleActionType.STOP_FORWARD_TRAVERSAL,\n    ];\n\n    if (postAction && validActions.includes(postAction)) {\n      return postAction;\n    }\n\n    return null;\n  }\n\n  /**\n   * Validate Sequencing Request\n   * Priority 3 Gap: Comprehensive sequencing request validation\n   * @param {SequencingRequestType} request - The sequencing request\n   * @param {string | null} targetActivityId - Target activity ID\n   * @return {{valid: boolean, exception: string | null}} - Validation result\n   */\n  private validateSequencingRequest(request: SequencingRequestType, targetActivityId: string | null): {\n    valid: boolean,\n    exception: string | null\n  } {\n    // Validate request type\n    const validRequestTypes = Object.values(SequencingRequestType);\n    if (!validRequestTypes.includes(request)) {\n      return { valid: false, exception: \"SB.2.12-6\" };\n    }\n\n    // Validate target activity ID for choice and jump requests\n    if ((request === SequencingRequestType.CHOICE || request === SequencingRequestType.JUMP) && !targetActivityId) {\n      return { valid: false, exception: \"SB.2.12-5\" };\n    }\n\n    // Additional request-specific validation\n    const requestSpecificValidation = this.validateRequestSpecificConstraints(request, targetActivityId);\n    if (!requestSpecificValidation.valid) {\n      return requestSpecificValidation;\n    }\n\n    return { valid: true, exception: null };\n  }\n\n  /**\n   * Validate Request-Specific Constraints\n   * @param {SequencingRequestType} request - The sequencing request\n   * @param {string | null} targetActivityId - Target activity ID\n   * @return {{valid: boolean, exception: string | null}} - Validation result\n   */\n  private validateRequestSpecificConstraints(request: SequencingRequestType, targetActivityId: string | null): {\n    valid: boolean,\n    exception: string | null\n  } {\n    const currentActivity = this.activityTree.currentActivity;\n\n    switch (request) {\n      case SequencingRequestType.CONTINUE:\n      case SequencingRequestType.PREVIOUS:\n      case SequencingRequestType.EXIT:\n      case SequencingRequestType.EXIT_ALL:\n      case SequencingRequestType.ABANDON:\n      case SequencingRequestType.ABANDON_ALL:\n      case SequencingRequestType.SUSPEND_ALL:\n      case SequencingRequestType.RETRY:\n        if (!currentActivity) {\n          return { valid: false, exception: \"SB.2.12-1\" };\n        }\n        break;\n      case SequencingRequestType.CHOICE:\n        if (targetActivityId) {\n          const targetActivity = this.activityTree.getActivity(targetActivityId);\n          if (!targetActivity) {\n            return { valid: false, exception: \"SB.2.9-1\" };\n          }\n        }\n        break;\n      case SequencingRequestType.JUMP:\n        if (targetActivityId) {\n          const targetActivity = this.activityTree.getActivity(targetActivityId);\n          if (!targetActivity) {\n            return { valid: false, exception: \"SB.2.13-1\" };\n          }\n        }\n        break;\n    }\n\n    return { valid: true, exception: null };\n  }\n\n  /**\n   * Limit Conditions Check Process (UP.1)\n   * Checks if an activity has exceeded its limit conditions (attempt limit or duration limits)\n   * @param {Activity} activity - The activity to check\n   * @return {boolean} - True if limit conditions are violated, false otherwise\n   * @private\n   */\n  private limitConditionsCheckProcess(activity: Activity): boolean {\n    // Check attempt limit\n    if (activity.attemptLimit !== null && activity.attemptCount >= activity.attemptLimit) {\n      return true; // Attempt limit exceeded\n    }\n\n    // Check attempt absolute duration limit\n    if (activity.attemptAbsoluteDurationLimit !== null) {\n      const attemptDurationMs = this.parseISO8601Duration(activity.attemptExperiencedDuration);\n      const attemptLimitMs = this.parseISO8601Duration(activity.attemptAbsoluteDurationLimit);\n\n      if (attemptDurationMs >= attemptLimitMs) {\n        return true; // Attempt duration limit exceeded\n      }\n    }\n\n    // Check activity absolute duration limit\n    if (activity.activityAbsoluteDurationLimit !== null) {\n      const activityDurationMs = this.parseISO8601Duration(activity.activityExperiencedDuration);\n      const activityLimitMs = this.parseISO8601Duration(activity.activityAbsoluteDurationLimit);\n\n      if (activityDurationMs >= activityLimitMs) {\n        return true; // Activity duration limit exceeded\n      }\n    }\n\n    return false; // No limit conditions violated\n  }\n\n  /**\n   * Parse ISO 8601 duration to milliseconds\n   * @param {string} duration - ISO 8601 duration string\n   * @return {number} - Duration in milliseconds\n   * @private\n   */\n  private parseISO8601Duration(duration: string): number {\n    const regex = /PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?/;\n    const matches = duration.match(regex);\n\n    if (!matches) {\n      return 0;\n    }\n\n    const hours = parseInt(matches[1] || \"0\", 10);\n    const minutes = parseInt(matches[2] || \"0\", 10);\n    const seconds = parseFloat(matches[3] || \"0\");\n\n    return (hours * 3600 + minutes * 60 + seconds) * 1000;\n  }\n\n  /**\n   * Sequencing Rules Check Process (UP.2)\n   * General process for evaluating a set of sequencing rules\n   * @param {Activity} activity - The activity to evaluate rules for\n   * @param {SequencingRule[]} rules - The rules to evaluate\n   * @return {RuleActionType | null} - The action to take, or null if no rules apply\n   * @private\n   */\n  private sequencingRulesCheckProcess(activity: Activity, rules: SequencingRule[]): RuleActionType | null {\n    // Evaluate each rule in order\n    for (const rule of rules) {\n      // Use the Sequencing Rules Check Subprocess (UP.2.1) to evaluate\n      if (this.sequencingRulesCheckSubprocess(activity, rule)) {\n        // Rule condition(s) met, return the action\n        return rule.action;\n      }\n    }\n\n    // No rules applied\n    return null;\n  }\n\n  /**\n   * Sequencing Rules Check Subprocess (UP.2.1)\n   * Evaluates individual sequencing rule conditions\n   * @param {Activity} activity - The activity to evaluate the rule for\n   * @param {SequencingRule} rule - The rule to evaluate\n   * @return {boolean} - True if all rule conditions are met\n   * @private\n   */\n  private sequencingRulesCheckSubprocess(activity: Activity, rule: SequencingRule): boolean {\n    // If no conditions, the rule always applies\n    if (rule.conditions.length === 0) {\n      return true;\n    }\n\n    // Evaluate based on condition combination\n    const conditionCombination = rule.conditionCombination;\n\n    if (conditionCombination === \"all\" || conditionCombination === RuleConditionOperator.AND) {\n      // All conditions must be true\n      return rule.conditions.every((condition) => {\n        // Log evaluation for debugging\n        return condition.evaluate(activity);\n      });\n    } else if (conditionCombination === \"any\" || conditionCombination === RuleConditionOperator.OR) {\n      // At least one condition must be true\n      return rule.conditions.some((condition) => {\n        // Log evaluation for debugging\n        return condition.evaluate(activity);\n      });\n    }\n\n    // Unknown combination, default to false\n    return false;\n  }\n\n  /**\n   * Check if activity is in the activity tree\n   */\n  private isActivityInTree(activity: Activity): boolean {\n    return this.activityTree.getAllActivities().includes(activity);\n  }\n\n  /**\n   * Find common ancestor of two activities\n   */\n  private findCommonAncestor(activity1: Activity | null, activity2: Activity | null): Activity | null {\n    if (!activity1 || !activity2) {\n      return null;\n    }\n\n    // Get ancestors of activity1\n    const ancestors1: Activity[] = [];\n    let current: Activity | null = activity1;\n    while (current) {\n      ancestors1.push(current);\n      current = current.parent;\n    }\n\n    // Find first common ancestor\n    current = activity2;\n    while (current) {\n      if (ancestors1.includes(current)) {\n        return current;\n      }\n      current = current.parent;\n    }\n\n    return null;\n  }\n\n  /**\n   * Flow Subprocess (SB.2.3)\n   * Traverses the activity tree in the specified direction to find a deliverable activity\n   * @param {Activity} fromActivity - The activity to flow from\n   * @param {FlowSubprocessMode} direction - The flow direction\n   * @return {Activity | null} - The next deliverable activity, or null if none found\n   */\n  private flowSubprocess(fromActivity: Activity, direction: FlowSubprocessMode): Activity | null {\n    let candidateActivity: Activity | null = fromActivity;\n    let firstIteration = true;\n\n    // Keep traversing until we find a deliverable activity or run out of candidates\n    while (candidateActivity) {\n      // Get next candidate using flow tree traversal\n      // On first iteration, we want to skip the current activity's children\n      const nextCandidate = this.flowTreeTraversalSubprocess(\n        candidateActivity,\n        direction,\n        firstIteration\n      );\n\n      if (!nextCandidate) {\n        // No more candidates\n        return null;\n      }\n\n      // Check if this candidate can be delivered\n      const deliverable = this.flowActivityTraversalSubprocess(\n        nextCandidate,\n        direction === FlowSubprocessMode.FORWARD,\n        true, // consider children\n        direction\n      );\n\n      if (deliverable) {\n        return deliverable;\n      }\n\n      // Continue with next candidate\n      candidateActivity = nextCandidate;\n      firstIteration = false;\n    }\n\n    return null;\n  }\n\n\n  /**\n   * Flow Tree Traversal Subprocess (SB.2.1)\n   * Traverses the activity tree to find the next activity in the specified direction\n   * @param {Activity} fromActivity - The activity to traverse from\n   * @param {FlowSubprocessMode} direction - The traversal direction\n   * @param {boolean} skipChildren - Whether to skip checking children (for continuing from current)\n   * @return {Activity | null} - The next activity in the tree, or null if none\n   */\n  private flowTreeTraversalSubprocess(\n    fromActivity: Activity,\n    direction: FlowSubprocessMode,\n    skipChildren: boolean = false\n  ): Activity | null {\n    if (direction === FlowSubprocessMode.FORWARD) {\n      // First, check if activity has children (unless we're skipping them)\n      if (!skipChildren) {\n        this.ensureSelectionAndRandomization(fromActivity);\n        const children = fromActivity.getAvailableChildren();\n        if (children.length > 0) {\n          return children[0] || null;\n        }\n      }\n\n      // No children, try to get next sibling\n      let current: Activity | null = fromActivity;\n      while (current) {\n        const nextSibling = this.activityTree.getNextSibling(current);\n        if (nextSibling) {\n          return nextSibling;\n        }\n        // No next sibling, move up to parent\n        current = current.parent;\n      }\n    } else {\n      // Backward direction\n      // Try to get previous sibling\n      const previousSibling = this.activityTree.getPreviousSibling(fromActivity);\n      if (previousSibling) {\n        // If previous sibling has children, go to the last descendant\n        let lastDescendant = previousSibling;\n        while (true) {\n          this.ensureSelectionAndRandomization(lastDescendant);\n          const children = lastDescendant.getAvailableChildren();\n          if (children.length === 0) {\n            break;\n          }\n          const lastChild = children[children.length - 1];\n          if (!lastChild) break;\n          lastDescendant = lastChild;\n        }\n        return lastDescendant;\n      }\n\n      // No previous sibling at this level, try going up to parent and then its previous sibling\n      let current: Activity | null = fromActivity;\n      while (current && current.parent) {\n        const parentPreviousSibling = this.activityTree.getPreviousSibling(current.parent);\n        if (parentPreviousSibling) {\n          // Found a previous sibling of an ancestor, go to its last descendant\n          let lastDescendant = parentPreviousSibling;\n          while (true) {\n            this.ensureSelectionAndRandomization(lastDescendant);\n            const children = lastDescendant.getAvailableChildren();\n            if (children.length === 0) {\n              break;\n            }\n            const lastChild = children[children.length - 1];\n            if (!lastChild) break;\n            lastDescendant = lastChild;\n          }\n          return lastDescendant;\n        }\n        // Move up to grandparent\n        current = current.parent;\n      }\n\n      return null; // Reached beginning of tree\n    }\n\n    return null;\n  }\n\n  /**\n   * Choice Flow Subprocess (SB.2.9.1)\n   * Handles the flow logic specific to choice navigation requests\n   * @param {Activity} targetActivity - The target activity for the choice\n   * @param {Activity | null} commonAncestor - The common ancestor between current and target\n   * @return {Activity | null} - The activity to deliver, or null if flow fails\n   */\n  private choiceFlowSubprocess(\n    targetActivity: Activity,\n    commonAncestor: Activity | null\n  ): Activity | null {\n    // If target is a leaf, it's the delivery candidate\n    if (targetActivity.children.length === 0) {\n      return targetActivity;\n    }\n\n    // If target is a cluster, use choice flow tree traversal\n    return this.choiceFlowTreeTraversalSubprocess(targetActivity);\n  }\n\n  /**\n   * Enhanced Choice Flow Tree Traversal Subprocess (SB.2.9.2)\n   * Priority 3 Gap: Choice Flow Tree Traversal with complete constraint validation\n   * @param {Activity} fromActivity - The cluster activity to traverse from\n   * @return {Activity | null} - A leaf activity for delivery, or null if none found\n   */\n  private choiceFlowTreeTraversalSubprocess(fromActivity: Activity): Activity | null {\n    // Apply selection and randomization\n    this.ensureSelectionAndRandomization(fromActivity);\n    const children = fromActivity.getAvailableChildren();\n\n    // Enhanced constraint validation for choice flow tree traversal\n    const constraintValidation = this.validateChoiceFlowConstraints(fromActivity, children);\n    if (!constraintValidation.valid) {\n      return null;\n    }\n\n    // Find the first available child that can be delivered\n    for (const child of constraintValidation.validChildren) {\n      // Check if child can be delivered or traverse into it\n      const deliverable = this.enhancedChoiceActivityTraversalSubprocess(child);\n      if (deliverable) {\n        return deliverable;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Enhanced Choice Activity Traversal Subprocess (SB.2.4)\n   * Priority 3 Gap: Choice Activity Traversal with stopForwardTraversal and forwardOnly checks\n   * @param {Activity} activity - The activity to check and possibly traverse\n   * @return {Activity | null} - A deliverable activity, or null if none found\n   */\n  private enhancedChoiceActivityTraversalSubprocess(activity: Activity): Activity | null {\n    // Check if activity is available\n    if (!activity.isAvailable) {\n      return null;\n    }\n\n    // Check if activity is hidden from choice\n    if (activity.isHiddenFromChoice) {\n      return null;\n    }\n\n    // Enhanced constraint checks including stopForwardTraversal and forwardOnly\n    const traversalValidation = this.validateChoiceTraversalConstraints(activity);\n    if (!traversalValidation.canTraverse) {\n      return null;\n    }\n\n    // If it's a leaf, check if it can be delivered\n    if (activity.children.length === 0) {\n      if (this.checkActivityProcess(activity)) {\n        return activity;\n      }\n      return null;\n    }\n\n    // If it's a cluster, traverse into it with enhanced validation\n    if (traversalValidation.canTraverseInto) {\n      return this.choiceFlowTreeTraversalSubprocess(activity);\n    }\n\n    return null;\n  }\n\n  /**\n   * Original Choice Activity Traversal Subprocess for backwards compatibility\n   */\n  private choiceActivityTraversalSubprocess(activity: Activity): Activity | null {\n    return this.enhancedChoiceActivityTraversalSubprocess(activity);\n  }\n\n  /**\n   * Evaluate post-condition rules for the current activity\n   * This should be called after an activity has been delivered and the learner has interacted with it\n   * @param {Activity} activity - The activity to evaluate\n   * @return {SequencingRequestType | null} - The sequencing request to process, if any\n   */\n  public evaluatePostConditionRules(activity: Activity): SequencingRequestType | null {\n    const postAction = this.postConditionRulesSubprocess(activity);\n\n    if (!postAction) {\n      return null;\n    }\n\n    // Map post-condition actions to sequencing requests\n    switch (postAction) {\n      case RuleActionType.EXIT_PARENT:\n        // Exit parent will be handled by exit action rules\n        return SequencingRequestType.EXIT;\n\n      case RuleActionType.EXIT_ALL:\n        return SequencingRequestType.EXIT_ALL;\n\n      case RuleActionType.RETRY:\n        return SequencingRequestType.RETRY;\n\n      case RuleActionType.RETRY_ALL:\n        return SequencingRequestType.RETRY_ALL;\n\n      case RuleActionType.CONTINUE:\n        return SequencingRequestType.CONTINUE;\n\n      case RuleActionType.PREVIOUS:\n        return SequencingRequestType.PREVIOUS;\n\n      case RuleActionType.STOP_FORWARD_TRAVERSAL:\n        // Set traversal limiter on controls; not a navigation request\n        activity.sequencingControls.stopForwardTraversal = true;\n        return null;\n\n      default:\n        return null;\n    }\n  }\n\n  /**\n   * Validate Choice Flow Constraints\n   * Priority 3 Gap: Choice Flow Tree Traversal constraint validation\n   * @param {Activity} fromActivity - Activity to traverse from\n   * @param {Activity[]} children - Available children\n   * @return {{valid: boolean, validChildren: Activity[]}} - Validation result\n   */\n  private validateChoiceFlowConstraints(fromActivity: Activity, children: Activity[]): {\n    valid: boolean,\n    validChildren: Activity[]\n  } {\n    const validChildren: Activity[] = [];\n\n    for (const child of children) {\n      // Check if child meets all choice flow constraints\n      if (this.meetsChoiceFlowConstraints(child, fromActivity)) {\n        validChildren.push(child);\n      }\n    }\n\n    return {\n      valid: validChildren.length > 0,\n      validChildren\n    };\n  }\n\n  /**\n   * Check if activity meets choice flow constraints\n   * @param {Activity} activity - Activity to check\n   * @param {Activity} parent - Parent activity\n   * @return {boolean} - True if constraints are met\n   */\n  private meetsChoiceFlowConstraints(activity: Activity, parent: Activity): boolean {\n    // Check basic availability\n    if (!activity.isAvailable || activity.isHiddenFromChoice) {\n      return false;\n    }\n\n    // Check parent constraint controls\n    if (parent.sequencingControls.constrainChoice) {\n      // Apply constrain choice logic specific to flow\n      return this.validateConstrainChoiceForFlow(activity, parent);\n    }\n\n    return true;\n  }\n\n  /**\n   * Validate Choice Traversal Constraints\n   * Priority 3 Gap: stopForwardTraversal and forwardOnly checks\n   * @param {Activity} activity - Activity to validate\n   * @return {{canTraverse: boolean, canTraverseInto: boolean}} - Traversal permissions\n   */\n  private validateChoiceTraversalConstraints(activity: Activity): {\n    canTraverse: boolean,\n    canTraverseInto: boolean\n  } {\n    let canTraverse = true;\n    let canTraverseInto = true;\n\n    // Check constrain choice control\n    if (activity.parent?.sequencingControls.constrainChoice) {\n      // Apply constrainChoice logic that might prevent traversal\n      canTraverse = this.evaluateConstrainChoiceForTraversal(activity);\n    }\n\n    // Check stopForwardTraversal control (if implemented in sequencing controls)\n    if (activity.sequencingControls && activity.sequencingControls.stopForwardTraversal) {\n      canTraverseInto = false;\n    }\n\n    // Check forwardOnly control in parent context\n    if (activity.parent?.sequencingControls.forwardOnly) {\n      // forwardOnly might restrict certain types of choice traversal\n      // depending on the current position and target\n      canTraverseInto = this.evaluateForwardOnlyForChoice(activity);\n    }\n\n    return { canTraverse, canTraverseInto };\n  }\n\n  /**\n   * Validate Constrained Choice Boundaries\n   * Priority 3 Gap: Proper choice boundary checking\n   * @param {Activity | null} currentActivity - Current activity\n   * @param {Activity} targetActivity - Target activity\n   * @return {{valid: boolean, exception: string | null}} - Validation result\n   */\n  private validateConstrainedChoiceBoundaries(currentActivity: Activity | null, targetActivity: Activity): {\n    valid: boolean,\n    exception: string | null\n  } {\n    // Path to root validation with enhanced constraint checking\n    let activity: Activity | null = targetActivity;\n    while (activity) {\n      if (activity.isHiddenFromChoice) {\n        return { valid: false, exception: \"SB.2.9-4\" }; // Activity hidden from choice\n      }\n\n      // Enhanced choice control validation\n      if (activity.parent && !activity.parent.sequencingControls.choice) {\n        return { valid: false, exception: \"SB.2.9-5\" }; // Choice control is not allowed\n      }\n\n      // Check constrained choice boundaries\n      if (activity.parent?.sequencingControls.constrainChoice) {\n        const boundaryCheck = this.checkConstrainedChoiceBoundary(currentActivity, activity, activity.parent);\n        if (!boundaryCheck.valid) {\n          return boundaryCheck;\n        }\n      }\n\n      activity = activity.parent;\n    }\n\n    return { valid: true, exception: null };\n  }\n\n  /**\n   * Helper methods for enhanced choice processing\n   */\n  private validateConstrainChoiceForFlow(activity: Activity, parent: Activity): boolean {\n    // Implement specific constrainChoice logic for flow scenarios according to SCORM 2004\n\n    // If constrainChoice is false, no restrictions apply\n    if (!parent.sequencingControls || !parent.sequencingControls.constrainChoice) {\n      return true;\n    }\n\n    // When constrainChoice is true, choices are restricted based on flow direction\n    const children = parent.children;\n    if (!children || children.length === 0) {\n      return true;\n    }\n\n    const targetIndex = children.indexOf(activity);\n    if (targetIndex === -1) {\n      return false; // Activity not found in parent's children\n    }\n\n    // Get the current activity in the flow\n    const currentActivity = this.getCurrentActivity(parent);\n    if (!currentActivity) {\n      // No current activity, allow choice to first available activity\n      return this.isActivityAvailableForChoice(activity);\n    }\n\n    const currentIndex = children.indexOf(currentActivity);\n    if (currentIndex === -1) {\n      return false; // Current activity not found\n    }\n\n    // Check flow direction constraints\n    if (parent.sequencingControls.flow) {\n      // In forward flow mode with constrainChoice, only allow:\n      // 1. Next activity in sequence\n      // 2. Previously completed activities if forwardOnly is false\n\n      if (targetIndex === currentIndex + 1) {\n        // Next activity - allow if available\n        return this.isActivityAvailableForChoice(activity);\n      }\n\n      if (targetIndex < currentIndex && !parent.sequencingControls.forwardOnly) {\n        // Previous activity - allow if it was completed\n        return activity.completionStatus === \"completed\" ||\n          activity.completionStatus === \"passed\";\n      }\n\n      // All other choices are constrained\n      return false;\n    } else {\n      // Non-flow mode - constrainChoice limits to completed/available activities\n      return this.isActivityAvailableForChoice(activity) &&\n        (activity.completionStatus === \"completed\" ||\n          activity.completionStatus === \"unknown\" ||\n          activity.completionStatus === \"incomplete\");\n    }\n  }\n\n  private evaluateConstrainChoiceForTraversal(activity: Activity): boolean {\n    // Implement constrainChoice evaluation for traversal according to SCORM 2004\n\n    if (!activity.parent) {\n      return true; // Root activity has no traversal constraints\n    }\n\n    const parent = activity.parent;\n\n    // If constrainChoice is false, traversal is allowed\n    if (!parent.sequencingControls || !parent.sequencingControls.constrainChoice) {\n      return true;\n    }\n\n    // When constrainChoice is true, traversal must respect choice constraints\n    // This is evaluated during navigation request processing\n\n    const siblings = parent.children;\n    if (!siblings || siblings.length === 0) {\n      return true;\n    }\n\n    const activityIndex = siblings.indexOf(activity);\n    if (activityIndex === -1) {\n      return false; // Activity not found in siblings\n    }\n\n    // Check if this activity can be reached through constrained choice\n    // 1. Check if activity is available for choice\n    if (!this.isActivityAvailableForChoice(activity)) {\n      return false;\n    }\n\n    // 2. Check traversal path constraints\n    if (parent.sequencingControls.flow) {\n      // In flow mode, check if we can traverse to this activity\n      const currentActivity = this.getCurrentActivity(parent);\n      if (currentActivity) {\n        const currentIndex = siblings.indexOf(currentActivity);\n\n        // If forwardOnly is true, can only traverse forward\n        if (parent.sequencingControls.forwardOnly && activityIndex < currentIndex) {\n          return false;\n        }\n\n        // Check if there are any blocking activities between current and target\n        if (currentIndex < activityIndex) {\n          // Forward traversal - check for mandatory intermediate activities\n          for (let i = currentIndex + 1; i < activityIndex; i++) {\n            const intermediateActivity = siblings[i];\n            if (intermediateActivity &&\n              this.isActivityMandatory(intermediateActivity) &&\n              !this.isActivityCompleted(intermediateActivity)) {\n              return false; // Cannot skip mandatory incomplete activity\n            }\n          }\n        }\n      }\n    }\n\n    // 3. Check specific choice constraints based on activity state\n    return this.validateActivityChoiceState(activity);\n  }\n\n  private evaluateForwardOnlyForChoice(activity: Activity): boolean {\n    // Implement forwardOnly evaluation for choice scenarios according to SCORM 2004\n\n    if (!activity.parent) {\n      return true; // Root activity has no forwardOnly constraints\n    }\n\n    const parent = activity.parent;\n\n    // If forwardOnly is false, choice is allowed in any direction\n    if (!parent.sequencingControls || !parent.sequencingControls.forwardOnly) {\n      return true;\n    }\n\n    // When forwardOnly is true, restrict backward navigation choices\n    const siblings = parent.children;\n    if (!siblings || siblings.length === 0) {\n      return true;\n    }\n\n    const targetIndex = siblings.indexOf(activity);\n    if (targetIndex === -1) {\n      return false; // Activity not found in siblings\n    }\n\n    // Find the current activity to determine navigation direction\n    const currentActivity = this.getCurrentActivity(parent);\n    if (!currentActivity) {\n      // No current activity, allow choice to any available activity\n      return this.isActivityAvailableForChoice(activity);\n    }\n\n    const currentIndex = siblings.indexOf(currentActivity);\n    if (currentIndex === -1) {\n      return true; // Current activity not found, allow choice\n    }\n\n    // ForwardOnly constraint: only allow choice to activities at or after current position\n    if (targetIndex < currentIndex) {\n      // Backward choice - check for exceptions\n\n      // Exception 1: Allow choice to previously completed activities if they are choice-enabled\n      if (activity.completionStatus === \"completed\" ||\n        activity.completionStatus === \"passed\") {\n        // Check if the activity allows choice even in forwardOnly mode\n        if (activity.sequencingControls && activity.sequencingControls.choice) {\n          return true;\n        }\n      }\n\n      // Exception 2: Allow choice if there's a specific choice rule allowing backward navigation\n      if (this.hasBackwardChoiceException(activity, parent)) {\n        return true;\n      }\n\n      // Otherwise, forwardOnly constraint blocks backward choice\n      return false;\n    }\n\n    // Forward or current position choice - allowed\n    return this.isActivityAvailableForChoice(activity);\n  }\n\n  private checkConstrainedChoiceBoundary(currentActivity: Activity | null, activity: Activity, parent: Activity): {\n    valid: boolean,\n    exception: string | null\n  } {\n    // Implement boundary checking logic for constrained choice according to SCORM 2004\n\n    try {\n      // If no current activity, choice to any available activity is valid\n      if (!currentActivity) {\n        if (this.isActivityAvailableForChoice(activity)) {\n          return { valid: true, exception: null };\n        } else {\n          return { valid: false, exception: \"Activity not available for choice\" };\n        }\n      }\n\n      // Check if parent has constrainChoice enabled\n      if (!parent.sequencingControls || !parent.sequencingControls.constrainChoice) {\n        // No constraints - just check basic availability\n        if (this.isActivityAvailableForChoice(activity)) {\n          return { valid: true, exception: null };\n        } else {\n          return { valid: false, exception: \"Activity not available for choice\" };\n        }\n      }\n\n      const siblings = parent.children;\n      if (!siblings || siblings.length === 0) {\n        return { valid: true, exception: null };\n      }\n\n      const currentIndex = siblings.indexOf(currentActivity);\n      const targetIndex = siblings.indexOf(activity);\n\n      if (currentIndex === -1 || targetIndex === -1) {\n        return { valid: false, exception: \"Activity not found in parent structure\" };\n      }\n\n      // Check flow and forwardOnly constraints\n      if (parent.sequencingControls.flow) {\n        // Flow mode constraints\n        if (parent.sequencingControls.forwardOnly && targetIndex < currentIndex) {\n          // Backward navigation in forwardOnly flow\n          if (activity.completionStatus !== \"completed\" &&\n            activity.completionStatus !== \"passed\") {\n            return { valid: false, exception: \"Forward-only constraint violated\" };\n          }\n        }\n\n        // Check if we're skipping mandatory activities\n        if (targetIndex > currentIndex) {\n          for (let i = currentIndex + 1; i < targetIndex; i++) {\n            const intermediateActivity = siblings[i];\n            if (intermediateActivity &&\n              this.isActivityMandatory(intermediateActivity) &&\n              !this.isActivityCompleted(intermediateActivity)) {\n              return { valid: false, exception: \"Cannot skip mandatory incomplete activity\" };\n            }\n          }\n        }\n      }\n\n      // Check choice boundaries based on completion and availability\n      if (!this.isActivityAvailableForChoice(activity)) {\n        return { valid: false, exception: \"Activity not available for choice\" };\n      }\n\n      // Check for specific boundary violations\n      if (this.hasChoiceBoundaryViolation(currentActivity, activity, parent)) {\n        return { valid: false, exception: \"Choice boundary constraint violation\" };\n      }\n\n      // All boundary checks passed\n      return { valid: true, exception: null };\n\n    } catch (error) {\n      return { valid: false, exception: `Boundary check error: ${error}` };\n    }\n  }\n\n  /**\n   * Helper methods for constraint validation\n   */\n  private getCurrentActivity(parent: Activity): Activity | null {\n    // Find the currently active activity within the parent\n    if (parent.children) {\n      for (const child of parent.children) {\n        if (child.isActive) {\n          return child;\n        }\n      }\n    }\n    return null;\n  }\n\n  private isActivityAvailableForChoice(activity: Activity): boolean {\n    // Check if activity is available for choice according to SCORM 2004 rules\n    return activity.isVisible &&\n      !activity.isHiddenFromChoice &&\n      activity.isAvailable &&\n      (activity.sequencingControls ? activity.sequencingControls.choice : true);\n  }\n\n  private isActivityMandatory(activity: Activity): boolean {\n    // Check if activity is mandatory (cannot be skipped)\n    // In SCORM 2004, this is typically determined by sequencing rules\n    if (activity.sequencingRules && activity.sequencingRules.preConditionRules) {\n      for (const rule of activity.sequencingRules.preConditionRules) {\n        if (rule.action === \"skip\" && rule.conditions && rule.conditions.length === 0) {\n          return false; // Has unconditional skip rule, not mandatory\n        }\n      }\n    }\n\n    // Check for explicit mandatory flag or default to true for flow sequences\n    return (activity as any).mandatory !== false;\n  }\n\n  private isActivityCompleted(activity: Activity): boolean {\n    // Check if activity is completed\n    return activity.completionStatus === \"completed\" ||\n      activity.completionStatus === \"passed\" ||\n      activity.successStatus === \"passed\";\n  }\n\n  private validateActivityChoiceState(activity: Activity): boolean {\n    // Validate activity state for choice according to SCORM 2004\n\n    // Check basic availability\n    if (!this.isActivityAvailableForChoice(activity)) {\n      return false;\n    }\n\n    // Check pre-condition rules\n    if (activity.sequencingRules && activity.sequencingRules.preConditionRules) {\n      for (const rule of activity.sequencingRules.preConditionRules) {\n        if (rule.action === RuleActionType.DISABLED || rule.action === RuleActionType.HIDE_FROM_CHOICE) {\n          // Check if conditions are met for disabling/hiding\n          const combinationMode = (rule as any).conditionCombination || \"all\";\n          if (this.evaluateRuleConditions(rule.conditions || [], activity, combinationMode)) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n\n  private hasBackwardChoiceException(activity: Activity, parent: Activity): boolean {\n    // Check for exceptions that allow backward choice in forwardOnly mode\n\n    // Check for specific sequencing rules that allow backward navigation\n    if (parent.sequencingRules && parent.sequencingRules.preConditionRules) {\n      for (const rule of parent.sequencingRules.preConditionRules) {\n        if (rule.action === \"exitParent\" || rule.action === \"retry\") {\n          // These actions might allow backward navigation\n          const combinationMode = (rule as any).conditionCombination || \"all\";\n          return this.evaluateRuleConditions(rule.conditions || [], activity, combinationMode);\n        }\n      }\n    }\n\n    // Check for explicit backward navigation permissions\n    return (activity as any).allowBackwardChoice === true;\n  }\n\n  private hasChoiceBoundaryViolation(currentActivity: Activity, targetActivity: Activity, parent: Activity): boolean {\n    // Check for specific boundary violations\n\n    // Check for time-based constraints\n    if (targetActivity.timeLimitAction && targetActivity.beginTimeLimit) {\n      const now = new Date();\n      const beginTime = new Date(targetActivity.beginTimeLimit);\n      if (now < beginTime) {\n        return true; // Not yet available\n      }\n    }\n\n    if (targetActivity.endTimeLimit) {\n      const now = new Date();\n      const endTime = new Date(targetActivity.endTimeLimit);\n      if (now > endTime) {\n        return true; // No longer available\n      }\n    }\n\n    // Check for attempt limit violations\n    return !!(targetActivity.attemptLimit &&\n      targetActivity.attemptCount >= targetActivity.attemptLimit);\n  }\n\n  private evaluateRuleConditions(conditions: any[], activity: Activity, combinationMode: string = \"all\"): boolean {\n    // Full SCORM 2004 rule condition evaluation\n    if (conditions.length === 0) {\n      return true; // No conditions means always true\n    }\n\n    // Evaluate each condition and collect results\n    const conditionResults: boolean[] = [];\n    \n    for (const condition of conditions) {\n      const conditionType = condition.condition || condition.conditionType;\n      let result = false;\n\n      switch (conditionType) {\n        case \"always\":\n          result = true;\n          break;\n        case \"never\":\n          result = false;\n          break;\n        case \"activityAttempted\":\n        case \"attempted\":\n          result = activity.attemptCount > 0;\n          break;\n        case \"activityCompleted\":\n        case \"completed\":\n          result = this.isActivityCompleted(activity);\n          break;\n        case \"satisfied\":\n          result = activity.objectiveSatisfiedStatus === true;\n          break;\n        case \"objectiveStatusKnown\":\n          result = activity.objectiveMeasureStatus === true;\n          break;\n        case \"objectiveMeasureKnown\":\n          result = activity.objectiveMeasureStatus === true;\n          break;\n        case \"objectiveMeasureGreaterThan\":\n          if (activity.objectiveMeasureStatus) {\n            const threshold = condition.measureThreshold || 0;\n            result = activity.objectiveNormalizedMeasure > threshold;\n          }\n          break;\n        case \"objectiveMeasureLessThan\":\n          if (activity.objectiveMeasureStatus) {\n            const threshold = condition.measureThreshold || 0;\n            result = activity.objectiveNormalizedMeasure < threshold;\n          }\n          break;\n        case \"progressKnown\":\n          result = activity.completionStatus !== \"unknown\";\n          break;\n        case \"attemptLimitExceeded\":\n          result = activity.hasAttemptLimitExceeded();\n          break;\n        case \"timeLimitExceeded\": {\n          const limit = activity.timeLimitDuration;\n          if (!limit) {\n            result = false;\n            break;\n          }\n          const limitSeconds = getDurationAsSeconds(limit, scorm2004_regex.CMITimespan);\n          let elapsedSeconds = 0;\n          // Prefer LMS-provided hook\n          if (this.getAttemptElapsedSecondsHook) {\n            try {\n              elapsedSeconds = this.getAttemptElapsedSecondsHook(activity) || 0;\n            } catch (_) {\n              elapsedSeconds = 0;\n            }\n          } else if (activity.attemptAbsoluteStartTime) {\n            const start = new Date(activity.attemptAbsoluteStartTime).getTime();\n            const nowMs = this.now().getTime();\n            if (!Number.isNaN(start) && nowMs > start) {\n              elapsedSeconds = Math.max(0, (nowMs - start) / 1000);\n            }\n          }\n          result = elapsedSeconds > limitSeconds && limitSeconds > 0;\n          break;\n        }\n        case \"outsideAvailableTimeRange\":\n          // Check if current time is outside available time range\n          if (activity.beginTimeLimit || activity.endTimeLimit) {\n            const now = new Date();\n            if (activity.beginTimeLimit) {\n              const beginDate = new Date(activity.beginTimeLimit);\n              if (now < beginDate) result = true;\n            }\n            if (activity.endTimeLimit) {\n              const endDate = new Date(activity.endTimeLimit);\n              if (now > endDate) result = true;\n            }\n          }\n          break;\n        default:\n          // For unknown conditions, assume false for safety\n          result = false;\n          break;\n      }\n\n      // Apply NOT operator if present\n      if (condition.operator === \"not\" || condition.not === true) {\n        result = !result;\n      }\n\n      conditionResults.push(result);\n    }\n\n    // Combine results based on combination mode\n    if (combinationMode === \"all\" || combinationMode === \"and\") {\n      // All conditions must be true (AND logic)\n      return conditionResults.every(result => result);\n    } else if (combinationMode === \"any\" || combinationMode === \"or\") {\n      // At least one condition must be true (OR logic)\n      return conditionResults.some(result => result);\n    } else {\n      // Default to AND logic if combination mode is unknown\n      return conditionResults.every(result => result);\n    }\n  }\n\n  /**\n   * Get elapsed attempt seconds for an activity using hook or timestamps\n   */\n  private getAttemptElapsedSeconds(activity: Activity): number {\n    if (this.getAttemptElapsedSecondsHook) {\n      try { return this.getAttemptElapsedSecondsHook(activity) || 0; } catch { return 0; }\n    }\n    if (activity.attemptAbsoluteStartTime) {\n      const start = new Date(activity.attemptAbsoluteStartTime).getTime();\n      const nowMs = this.now().getTime();\n      if (!Number.isNaN(start) && nowMs > start) {\n        return Math.max(0, (nowMs - start) / 1000);\n      }\n    }\n    return 0;\n  }\n}\n\n/**\n * Enum for flow subprocess modes\n */\nenum FlowSubprocessMode {\n  FORWARD = \"forward\",\n  BACKWARD = \"backward\",\n}\n","import { Activity } from \"./activity\";\nimport { ActivityTree } from \"./activity_tree\";\nimport {\n  DeliveryRequestType,\n  SequencingProcess,\n  SequencingRequestType\n} from \"./sequencing_process\";\nimport { RollupProcess } from \"./rollup_process\";\nimport { ADLNav } from \"../adl\";\nimport { RuleActionType } from \"./sequencing_rules\";\nimport { getDurationAsSeconds } from \"../../../utilities\";\nimport { scorm2004_regex } from \"../../../constants/regex\";\n\n/**\n * Enum for navigation request types\n */\nexport enum NavigationRequestType {\n  START = \"start\",\n  RESUME_ALL = \"resumeAll\",\n  CONTINUE = \"continue\",\n  PREVIOUS = \"previous\",\n  CHOICE = \"choice\",\n  JUMP = \"jump\",\n  EXIT = \"exit\",\n  EXIT_ALL = \"exitAll\",\n  ABANDON = \"abandon\",\n  ABANDON_ALL = \"abandonAll\",\n  SUSPEND_ALL = \"suspendAll\",\n  NOT_VALID = \"_none_\"\n}\n\n/**\n * Class representing a navigation request result\n */\nexport class NavigationRequestResult {\n  public valid: boolean;\n  public terminationRequest: SequencingRequestType | null;\n  public sequencingRequest: SequencingRequestType | null;\n  public targetActivityId: string | null;\n  public exception: string | null;\n\n  constructor(\n    valid: boolean = false,\n    terminationRequest: SequencingRequestType | null = null,\n    sequencingRequest: SequencingRequestType | null = null,\n    targetActivityId: string | null = null,\n    exception: string | null = null\n  ) {\n    this.valid = valid;\n    this.terminationRequest = terminationRequest;\n    this.sequencingRequest = sequencingRequest;\n    this.targetActivityId = targetActivityId;\n    this.exception = exception;\n  }\n}\n\n/**\n * Class representing a delivery request\n */\nexport class DeliveryRequest {\n  public valid: boolean;\n  public targetActivity: Activity | null;\n  public exception: string | null;\n\n  constructor(\n    valid: boolean = false,\n    targetActivity: Activity | null = null,\n    exception: string | null = null\n  ) {\n    this.valid = valid;\n    this.targetActivity = targetActivity;\n    this.exception = exception;\n  }\n}\n\n/**\n * Overall Sequencing Process (OP.1)\n * Controls the overall execution of the sequencing loop\n */\nexport class OverallSequencingProcess {\n  private activityTree: ActivityTree;\n  private sequencingProcess: SequencingProcess;\n  private rollupProcess: RollupProcess;\n  private adlNav: ADLNav | null;\n  private contentDelivered: boolean = false;\n  private eventCallback: ((eventType: string, data?: any) => void) | null = null;\n  private globalObjectiveMap: Map<string, any> = new Map();\n  private now: () => Date;\n  private enhancedDeliveryValidation: boolean;\n\n  constructor(\n    activityTree: ActivityTree,\n    sequencingProcess: SequencingProcess,\n    rollupProcess: RollupProcess,\n    adlNav: ADLNav | null = null,\n    eventCallback: ((eventType: string, data?: any) => void) | null = null,\n    options?: { now?: () => Date; enhancedDeliveryValidation?: boolean }\n  ) {\n    this.activityTree = activityTree;\n    this.sequencingProcess = sequencingProcess;\n    this.rollupProcess = rollupProcess;\n    this.adlNav = adlNav;\n    this.eventCallback = eventCallback;\n    this.now = options?.now || (() => new Date());\n    this.enhancedDeliveryValidation = options?.enhancedDeliveryValidation === true;\n\n    // Initialize global objective map\n    this.initializeGlobalObjectiveMap();\n  }\n\n  /**\n   * Overall Sequencing Process (OP.1)\n   * Main entry point for processing navigation requests\n   * @param {NavigationRequestType} navigationRequest - The navigation request\n   * @param {string | null} targetActivityId - Target activity for choice/jump requests\n   * @return {DeliveryRequest} - The delivery request result\n   */\n  public processNavigationRequest(\n    navigationRequest: NavigationRequestType,\n    targetActivityId: string | null = null\n  ): DeliveryRequest {\n    // Step 1: Navigation Request Process (NB.2.1)\n    const navResult = this.navigationRequestProcess(navigationRequest, targetActivityId);\n\n    if (!navResult.valid) {\n      return new DeliveryRequest(false, null, navResult.exception);\n    }\n\n    // Step 2: Termination Request Process (TB.2.3) if needed\n    if (navResult.terminationRequest) {\n      const termResult = this.terminationRequestProcess(navResult.terminationRequest, !!navResult.sequencingRequest);\n      if (!termResult) {\n        return new DeliveryRequest(false, null, \"TB.2.3-1\");\n      }\n\n      // If this is a termination-only request (no sequencing request), return success\n      if (!navResult.sequencingRequest) {\n        return new DeliveryRequest(true, null);\n      }\n    }\n\n    // Step 3: Sequencing Request Process (SB.2.12)\n    if (navResult.sequencingRequest) {\n      const seqResult = this.sequencingProcess.sequencingRequestProcess(\n        navResult.sequencingRequest,\n        navResult.targetActivityId\n      );\n\n      if (seqResult.exception) {\n        return new DeliveryRequest(false, null, seqResult.exception);\n      }\n\n      if (seqResult.deliveryRequest === DeliveryRequestType.DELIVER && seqResult.targetActivity) {\n        // INTEGRATION: Validate rollup state consistency before delivery\n        if (this.activityTree.root && !this.rollupProcess.validateRollupStateConsistency(this.activityTree.root)) {\n          return new DeliveryRequest(false, null, \"OP.1-3\");\n        }\n\n        // INTEGRATION: Process global objective mapping before delivery\n        this.rollupProcess.processGlobalObjectiveMapping(seqResult.targetActivity, this.globalObjectiveMap);\n\n        // Step 4: Delivery Request Process (DB.1.1)\n        const deliveryResult = this.deliveryRequestProcess(seqResult.targetActivity);\n\n        if (deliveryResult.valid) {\n          // Step 5: Content Delivery Environment Process (DB.2)\n          this.contentDeliveryEnvironmentProcess(deliveryResult.targetActivity!);\n\n          // INTEGRATION: Validate rollup state consistency after delivery\n          if (this.activityTree.root) {\n            this.rollupProcess.validateRollupStateConsistency(this.activityTree.root);\n          }\n\n          return deliveryResult;\n        }\n\n        return deliveryResult;\n      }\n    }\n\n    return new DeliveryRequest(false, null, \"OP.1-1\");\n  }\n\n  /**\n   * Navigation Request Process (NB.2.1)\n   * Validates navigation requests and converts them to termination/sequencing requests\n   * @param {NavigationRequestType} request - The navigation request\n   * @param {string | null} targetActivityId - Target activity for choice/jump\n   * @return {NavigationRequestResult} - The validation result\n   */\n  private navigationRequestProcess(\n    request: NavigationRequestType,\n    targetActivityId: string | null = null\n  ): NavigationRequestResult {\n    // Enhanced logging for debugging\n    this.fireEvent(\"onNavigationRequestProcessing\", { request, targetActivityId });\n    const currentActivity = this.activityTree.currentActivity;\n\n    // Check if navigation request is valid\n    switch (request) {\n      case NavigationRequestType.START:\n        if (currentActivity !== null) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-1\");\n        }\n        return new NavigationRequestResult(\n          true,\n          null,\n          SequencingRequestType.START,\n          null\n        );\n\n      case NavigationRequestType.RESUME_ALL:\n        if (currentActivity !== null) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-2\");\n        }\n        if (this.activityTree.suspendedActivity === null) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-3\");\n        }\n        return new NavigationRequestResult(\n          true,\n          null,\n          SequencingRequestType.RESUME_ALL,\n          null\n        );\n\n      case NavigationRequestType.CONTINUE:\n        if (!currentActivity) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-4\");\n        }\n        if (!currentActivity.parent || !currentActivity.parent.sequencingControls.flow) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-5\");\n        }\n        return new NavigationRequestResult(\n          true,\n          SequencingRequestType.EXIT,\n          SequencingRequestType.CONTINUE,\n          null\n        );\n\n      case NavigationRequestType.PREVIOUS: {\n        if (!currentActivity) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-6\");\n        }\n        if (!currentActivity.parent || !currentActivity.parent.sequencingControls.flow) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-7\");\n        }\n\n        // Enhanced Forward-Only Navigation Constraints - Check at multiple cluster levels\n        const forwardOnlyValidation = this.validateForwardOnlyConstraints(currentActivity);\n        if (!forwardOnlyValidation.valid) {\n          return new NavigationRequestResult(false, null, null, null, forwardOnlyValidation.exception);\n        }\n\n        return new NavigationRequestResult(\n          true,\n          SequencingRequestType.EXIT,\n          SequencingRequestType.PREVIOUS,\n          null\n        );\n      }\n\n      case NavigationRequestType.CHOICE: {\n        if (!targetActivityId) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-9\");\n        }\n        const targetActivity = this.activityTree.getActivity(targetActivityId);\n        if (!targetActivity) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-10\");\n        }\n\n        // Enhanced Choice Path Validation\n        const choiceValidation = this.validateComplexChoicePath(currentActivity, targetActivity);\n        if (!choiceValidation.valid) {\n          return new NavigationRequestResult(false, null, null, null, choiceValidation.exception);\n        }\n\n        return new NavigationRequestResult(\n          true,\n          currentActivity ? SequencingRequestType.EXIT : null,\n          SequencingRequestType.CHOICE,\n          targetActivityId\n        );\n      }\n\n      case NavigationRequestType.JUMP:\n        if (!targetActivityId) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-12\");\n        }\n        return new NavigationRequestResult(\n          true,\n          null,\n          SequencingRequestType.JUMP,\n          targetActivityId\n        );\n\n      case NavigationRequestType.EXIT:\n        if (!currentActivity) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-13\");\n        }\n        if (currentActivity === this.activityTree.root) {\n          return new NavigationRequestResult(\n            true,\n            SequencingRequestType.EXIT_ALL,\n            null,\n            null\n          );\n        }\n        return new NavigationRequestResult(\n          true,\n          SequencingRequestType.EXIT,\n          null,\n          null\n        );\n\n      case NavigationRequestType.EXIT_ALL:\n        if (!currentActivity) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-14\");\n        }\n        return new NavigationRequestResult(\n          true,\n          SequencingRequestType.EXIT_ALL,\n          null,\n          null\n        );\n\n      case NavigationRequestType.ABANDON:\n        if (!currentActivity) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-15\");\n        }\n        return new NavigationRequestResult(\n          true,\n          SequencingRequestType.ABANDON,\n          null,\n          null\n        );\n\n      case NavigationRequestType.ABANDON_ALL:\n        if (!currentActivity) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-16\");\n        }\n        return new NavigationRequestResult(\n          true,\n          SequencingRequestType.ABANDON_ALL,\n          null,\n          null\n        );\n\n      case NavigationRequestType.SUSPEND_ALL:\n        if (!currentActivity) {\n          return new NavigationRequestResult(false, null, null, null, \"NB.2.1-17\");\n        }\n        return new NavigationRequestResult(\n          true,\n          SequencingRequestType.SUSPEND_ALL,\n          null,\n          null\n        );\n\n      default:\n        return new NavigationRequestResult(false, null, null, null, \"NB.2.1-18\");\n    }\n  }\n\n  /**\n   * Enhanced Termination Request Process (TB.2.3)\n   * Processes termination requests with improved post-condition handling\n   * Priority 2 Gap: Post-Condition Rule Evaluation & Exit Action Rule Recursion\n   * @param {SequencingRequestType} request - The termination request\n   * @param {boolean} hasSequencingRequest - Whether a sequencing request follows\n   * @return {boolean} - True if termination was successful\n   */\n  private terminationRequestProcess(request: SequencingRequestType, hasSequencingRequest: boolean = false): boolean {\n    const currentActivity = this.activityTree.currentActivity;\n\n    if (!currentActivity) {\n      return false;\n    }\n\n    // Enhanced logging for debugging\n    this.fireEvent(\"onTerminationRequestProcessing\", {\n      request,\n      hasSequencingRequest,\n      currentActivity: currentActivity.id\n    });\n\n    // First, check exit action rules (TB.2.1) for EXIT request with recursion detection\n    if (request === SequencingRequestType.EXIT) {\n      const exitActionResult = this.enhancedExitActionRulesSubprocess(currentActivity);\n      if (exitActionResult.action) {\n        // Check for recursion to prevent infinite loops\n        if (exitActionResult.recursionDepth > 10) {\n          this.fireEvent(\"onSequencingError\", {\n            error: \"Exit action recursion detected\",\n            depth: exitActionResult.recursionDepth,\n            activity: currentActivity.id\n          });\n          return false;\n        }\n\n        switch (exitActionResult.action) {\n          case \"EXIT_PARENT\":\n            // Move up to parent and terminate from there\n            if (currentActivity.parent) {\n              this.activityTree.currentActivity = currentActivity.parent;\n              return this.terminationRequestProcess(request, hasSequencingRequest);\n            }\n            break;\n          case \"EXIT_ALL\":\n            // Convert to EXIT_ALL request\n            request = SequencingRequestType.EXIT_ALL;\n            break;\n        }\n      }\n    }\n\n    // For EXIT_ALL and ABANDON_ALL, terminate descendant attempts first\n    // For regular EXIT, also terminate descendants if current has children\n    if (request === SequencingRequestType.EXIT_ALL ||\n      request === SequencingRequestType.ABANDON_ALL ||\n      (request === SequencingRequestType.EXIT && currentActivity.children.length > 0)) {\n      this.terminateDescendentAttemptsProcess(currentActivity);\n    }\n\n    // For descendant activities in the tree, terminate them first\n    // For EXIT_ALL and ABANDON_ALL, also terminate descendants\n    // For regular EXIT, also terminate descendants if current has children\n    if (request === SequencingRequestType.EXIT_ALL ||\n      request === SequencingRequestType.ABANDON_ALL ||\n      (request === SequencingRequestType.EXIT && currentActivity.children.length > 0)) {\n      this.terminateDescendentAttemptsProcess(currentActivity);\n    }\n\n    // Enhanced termination processing with post-condition rule evaluation\n    const terminationResult = this.executeTermination(request, currentActivity, hasSequencingRequest);\n    if (!terminationResult.success) {\n      return false;\n    }\n\n    // Priority 2 Gap: Post-Condition Rule Evaluation Integration\n    // Evaluate post-condition rules after termination but before clearing current activity\n    if (terminationResult.shouldEvaluatePostConditions) {\n      const postConditionResult = this.integratePostConditionRulesSubprocess(currentActivity);\n      if (postConditionResult) {\n        // Post-condition rules triggered additional sequencing action\n        this.fireEvent(\"onPostConditionTriggered\", {\n          activity: currentActivity.id,\n          action: postConditionResult\n        });\n\n        // Handle post-condition sequencing request\n        // This might need to be processed by the sequencing engine\n        // but for termination we log it for now\n      }\n    }\n\n    // Priority 2 Gap: Complex Suspended Activity Cleanup\n    if (request === SequencingRequestType.EXIT_ALL || request === SequencingRequestType.ABANDON_ALL) {\n      this.performComplexSuspendedActivityCleanup();\n    }\n\n    return true;\n  }\n\n  /**\n   * Execute Termination\n   * Enhanced termination execution with proper state management\n   * @param {SequencingRequestType} request - Termination request\n   * @param {Activity} currentActivity - Current activity\n   * @param {boolean} hasSequencingRequest - Whether sequencing follows\n   * @return {{success: boolean, shouldEvaluatePostConditions: boolean}} - Termination result\n   */\n  private executeTermination(request: SequencingRequestType, currentActivity: Activity, hasSequencingRequest: boolean): {\n    success: boolean,\n    shouldEvaluatePostConditions: boolean\n  } {\n    let shouldEvaluatePostConditions = false;\n\n    try {\n      switch (request) {\n        case SequencingRequestType.EXIT:\n          // Terminate normally with post-condition evaluation\n          if (currentActivity.isActive) {\n            this.endAttemptProcess(currentActivity);\n            shouldEvaluatePostConditions = true;\n          }\n          // Move to parent only if no sequencing follows\n          if (!hasSequencingRequest) {\n            this.activityTree.currentActivity = currentActivity.parent;\n          }\n          break;\n\n        case SequencingRequestType.EXIT_ALL:\n          // Priority 2 Gap: Multi-Level Exit Actions\n          this.handleMultiLevelExitActions(this.activityTree.root!);\n          this.activityTree.currentActivity = null;\n          break;\n\n        case SequencingRequestType.ABANDON:\n          // Abandon without ending attempt\n          currentActivity.isActive = false;\n          // Move to parent only if no sequencing follows\n          if (!hasSequencingRequest) {\n            this.activityTree.currentActivity = currentActivity.parent;\n          }\n          break;\n\n        case SequencingRequestType.ABANDON_ALL:\n          // Abandon without ending attempt - clear current activity\n          currentActivity.isActive = false;\n          this.activityTree.currentActivity = null;\n          break;\n\n        case SequencingRequestType.SUSPEND_ALL:\n          // Suspend the current activity with enhanced cleanup\n          this.handleSuspendAllRequest(currentActivity);\n          break;\n\n        default:\n          return { success: false, shouldEvaluatePostConditions: false };\n      }\n\n      return { success: true, shouldEvaluatePostConditions };\n    } catch (error) {\n      this.fireEvent(\"onTerminationError\", {\n        error: error instanceof Error ? error.message : String(error),\n        request,\n        activity: currentActivity.id\n      });\n      return { success: false, shouldEvaluatePostConditions: false };\n    }\n  }\n\n  /**\n   * Enhanced Exit Action Rules Subprocess with recursion detection\n   * Priority 2 Gap: Exit Action Rule Recursion\n   * @param {Activity} activity - Activity to evaluate\n   * @param {number} recursionDepth - Current recursion depth\n   * @return {{action: string | null, recursionDepth: number}} - Exit action result\n   */\n  private enhancedExitActionRulesSubprocess(activity: Activity, recursionDepth: number = 0): {\n    action: string | null,\n    recursionDepth: number\n  } {\n    // Increment recursion depth to detect infinite loops\n    recursionDepth++;\n\n    // Check if activity has exit action rules\n    const exitRules = activity.sequencingRules.exitConditionRules;\n\n    for (const rule of exitRules) {\n      // Evaluate the rule conditions\n      let conditionsMet = true;\n\n      // Check rule condition combination\n      if (rule.conditionCombination === \"all\") {\n        conditionsMet = rule.conditions.every(condition => condition.evaluate(activity));\n      } else {\n        conditionsMet = rule.conditions.some(condition => condition.evaluate(activity));\n      }\n\n      if (conditionsMet) {\n        // Return the action to take with recursion tracking\n        if (rule.action === RuleActionType.EXIT_PARENT) {\n          return { action: \"EXIT_PARENT\", recursionDepth };\n        } else if (rule.action === RuleActionType.EXIT_ALL) {\n          return { action: \"EXIT_ALL\", recursionDepth };\n        }\n      }\n    }\n\n    return { action: null, recursionDepth };\n  }\n\n  /**\n   * Integrate Post-Condition Rules Subprocess\n   * Priority 2 Gap: Post-Condition Rule Evaluation Integration\n   * @param {Activity} activity - Activity to evaluate post-conditions for\n   * @return {string | null} - Post-condition action or null\n   */\n  private integratePostConditionRulesSubprocess(activity: Activity): string | null {\n    // Evaluate post-condition rules using the sequencing process\n    const postAction = this.sequencingProcess.evaluatePostConditionRules(activity);\n\n    if (postAction) {\n      // Log the post-condition action for tracking\n      this.fireEvent(\"onPostConditionEvaluated\", {\n        activity: activity.id,\n        action: postAction,\n        timestamp: new Date().toISOString()\n      });\n\n      return postAction;\n    }\n\n    return null;\n  }\n\n  /**\n   * Handle Multi-Level Exit Actions\n   * Priority 2 Gap: Multi-Level Exit Actions\n   * @param {Activity} rootActivity - Root activity to start from\n   */\n  private handleMultiLevelExitActions(rootActivity: Activity): void {\n    // Process exit actions at each level systematically\n    this.processExitActionsAtLevel(rootActivity, 0);\n\n    // Then terminate all activities\n    this.terminateAllActivities(rootActivity);\n  }\n\n  /**\n   * Process exit actions at specific level\n   * @param {Activity} activity - Activity to process\n   * @param {number} level - Current level in hierarchy\n   */\n  private processExitActionsAtLevel(activity: Activity, level: number): void {\n    // Process exit actions for this activity\n    const exitAction = this.enhancedExitActionRulesSubprocess(activity, 0);\n\n    if (exitAction.action) {\n      this.fireEvent(\"onMultiLevelExitAction\", {\n        activity: activity.id,\n        level,\n        action: exitAction.action\n      });\n    }\n\n    // Recursively process children\n    for (const child of activity.children) {\n      this.processExitActionsAtLevel(child, level + 1);\n    }\n  }\n\n  /**\n   * Perform Complex Suspended Activity Cleanup\n   * Priority 2 Gap: Complex Suspended Activity Cleanup\n   */\n  private performComplexSuspendedActivityCleanup(): void {\n    const suspendedActivity = this.activityTree.suspendedActivity;\n\n    if (suspendedActivity) {\n      // Clear suspended state from the activity and all its ancestors\n      let current: Activity | null = suspendedActivity;\n      const cleanedActivities: string[] = [];\n\n      while (current) {\n        if (current.isSuspended) {\n          current.isSuspended = false;\n          cleanedActivities.push(current.id);\n        }\n        current = current.parent;\n      }\n\n      // Clear suspended activity reference\n      this.activityTree.suspendedActivity = null;\n\n      // Fire cleanup event\n      this.fireEvent(\"onSuspendedActivityCleanup\", {\n        cleanedActivities,\n        originalSuspendedActivity: suspendedActivity.id\n      });\n    }\n  }\n\n  /**\n   * Handle Suspend All Request\n   * Enhanced suspend handling with proper state management\n   * @param {Activity} currentActivity - Current activity to suspend\n   */\n  private handleSuspendAllRequest(currentActivity: Activity): void {\n    // Suspend the current activity\n    currentActivity.isSuspended = true;\n    currentActivity.isActive = false;\n    this.activityTree.suspendedActivity = currentActivity;\n    this.activityTree.currentActivity = null;\n\n    // Log suspend event\n    this.fireEvent(\"onActivitySuspended\", {\n      activity: currentActivity.id,\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  /**\n   * Enhanced Delivery Request Process (DB.1.1)\n   * Priority 4 Gap: Comprehensive delivery validation with state consistency checks\n   * @param {Activity} activity - The activity to deliver\n   * @return {DeliveryRequest} - The delivery validation result\n   */\n  private deliveryRequestProcess(activity: Activity): DeliveryRequest {\n    // Enhanced logging for debugging\n    this.fireEvent(\"onDeliveryRequestProcessing\", {\n      activity: activity.id,\n      timestamp: new Date().toISOString()\n    });\n\n    if (this.enhancedDeliveryValidation) {\n      // Activity Tree State Consistency\n      const stateConsistencyCheck = this.validateActivityTreeStateConsistency(activity);\n      if (!stateConsistencyCheck.consistent) {\n        return new DeliveryRequest(false, null, stateConsistencyCheck.exception);\n      }\n    }\n\n    // Check if activity is a cluster (has children)\n    if (activity.children.length > 0) {\n      return new DeliveryRequest(false, null, \"DB.1.1-1\");\n    }\n\n    // Check if activity is an empty cluster (has flow control but no children)\n    // According to SCORM 2004, empty clusters should not be deliverable\n    if (activity.sequencingControls.flow && activity.children.length === 0) {\n      return new DeliveryRequest(false, null, \"DB.1.1-2\");\n    }\n\n    if (this.enhancedDeliveryValidation) {\n      const resourceConstraintCheck = this.validateResourceConstraints(activity);\n      if (!resourceConstraintCheck.available) {\n        return new DeliveryRequest(false, null, resourceConstraintCheck.exception);\n      }\n    }\n\n    if (this.enhancedDeliveryValidation) {\n      const concurrentDeliveryCheck = this.validateConcurrentDeliveryPrevention(activity);\n      if (!concurrentDeliveryCheck.allowed) {\n        return new DeliveryRequest(false, null, concurrentDeliveryCheck.exception);\n      }\n    }\n\n    if (this.enhancedDeliveryValidation) {\n      const dependencyCheck = this.validateActivityDependencies(activity);\n      if (!dependencyCheck.satisfied) {\n        return new DeliveryRequest(false, null, dependencyCheck.exception);\n      }\n    }\n\n    // Use Check Activity Process (UP.5) to validate if activity can be delivered\n    if (!this.checkActivityProcess(activity)) {\n      return new DeliveryRequest(false, null, \"DB.1.1-3\");\n    }\n\n    // Activity is a true leaf and passes all checks - can be delivered\n    return new DeliveryRequest(true, activity);\n  }\n\n  /**\n   * Content Delivery Environment Process (DB.2)\n   * Handles the delivery of content to the learner\n   * @param {Activity} activity - The activity to deliver\n   */\n  private contentDeliveryEnvironmentProcess(activity: Activity): void {\n    // Step 1: Clear Suspended Activity Subprocess (DB.2.1) if needed\n    if (this.activityTree.suspendedActivity &&\n      this.activityTree.suspendedActivity !== activity) {\n      this.clearSuspendedActivitySubprocess();\n    }\n\n    // Step 2: Set the activity as current and active\n    this.activityTree.currentActivity = activity;\n    activity.isActive = true;\n\n    // Step 3: Initialize attempt for the delivered activity (DB.2.2)\n    this.initializeActivityForDelivery(activity);\n\n    // Step 4: Set up activity attempt tracking information\n    this.setupActivityAttemptTracking(activity);\n\n    // Step 5: Mark that content has been delivered\n    this.contentDelivered = true;\n\n    // Step 6: Update navigation validity if ADL nav is available\n    if (this.adlNav) {\n      this.updateNavigationValidity();\n    }\n\n    // Step 7: Fire activity delivery event\n    this.fireActivityDeliveryEvent(activity);\n  }\n\n  /**\n   * Initialize Activity For Delivery (DB.2.2)\n   * Set up initial tracking states for a delivered activity\n   * @param {Activity} activity - The activity being delivered\n   */\n  private initializeActivityForDelivery(activity: Activity): void {\n    // Set initial attempt states if not already set\n    if (activity.completionStatus === \"unknown\") {\n      // For leaf activities, set to \"not attempted\" initially\n      if (activity.children.length === 0) {\n        activity.completionStatus = \"not attempted\";\n      }\n    }\n\n    // Initialize objective satisfied status if not set\n    if (activity.objectiveSatisfiedStatus === null) {\n      activity.objectiveSatisfiedStatus = false;\n    }\n\n    // Initialize progress measure status\n    if (activity.progressMeasure === null) {\n      activity.progressMeasure = 0.0;\n      activity.progressMeasureStatus = false;\n    }\n\n    // Initialize objective measure if not set\n    if (activity.objectiveNormalizedMeasure === null) {\n      activity.objectiveNormalizedMeasure = 0.0;\n      activity.objectiveMeasureStatus = false;\n    }\n\n    // Set up activity attempt information\n    activity.attemptAbsoluteDuration = \"PT0H0M0S\";\n    activity.attemptExperiencedDuration = \"PT0H0M0S\";\n\n    // Mark as available for sequencing\n    activity.isAvailable = true;\n  }\n\n  /**\n   * Setup Activity Attempt Tracking\n   * Initialize attempt tracking information per SCORM 2004 4th Edition\n   * @param {Activity} activity - The activity being delivered\n   */\n  private setupActivityAttemptTracking(activity: Activity): void {\n    // Initialize attempt counter if this is a new attempt\n    if (!activity.attemptCount || activity.attemptCount === 0) {\n      activity.attemptCount = 1;\n    }\n\n    // Set attempt start time (use injected clock)\n    activity.attemptAbsoluteStartTime = this.now().toISOString();\n\n    // Initialize location if not set\n    if (!activity.location) {\n      activity.location = \"\";\n    }\n\n    // Set up activity state\n    activity.activityAttemptActive = true;\n\n    // Initialize learner preferences if not set\n    if (!activity.learnerPrefs) {\n      activity.learnerPrefs = {\n        audioCaptioning: \"0\",\n        audioLevel: \"1\",\n        deliverySpeed: \"1\",\n        language: \"\"\n      };\n    }\n  }\n\n  /**\n   * Fire Activity Delivery Event\n   * Notify listeners that an activity has been delivered\n   * @param {Activity} activity - The activity that was delivered\n   */\n  private fireActivityDeliveryEvent(activity: Activity): void {\n    // Fire event through callback if available\n    try {\n      if (this.eventCallback) {\n        this.eventCallback(\"onActivityDelivery\", activity);\n      }\n      console.debug(`Activity delivered: ${activity.id} - ${activity.title}`);\n    } catch (error) {\n      // Silently handle event firing errors to not disrupt sequencing\n      console.warn(`Failed to fire activity delivery event: ${error}`);\n    }\n  }\n\n  /**\n   * Fire a sequencing event\n   * @param {string} eventType - The type of event\n   * @param {any} data - Event data\n   */\n  private fireEvent(eventType: string, data?: any): void {\n    try {\n      if (this.eventCallback) {\n        this.eventCallback(eventType, data);\n      }\n    } catch (error) {\n      console.warn(`Failed to fire sequencing event ${eventType}: ${error}`);\n    }\n  }\n\n  /**\n   * Clear Suspended Activity Subprocess (DB.2.1)\n   * Clears the suspended activity state\n   */\n  private clearSuspendedActivitySubprocess(): void {\n    if (this.activityTree.suspendedActivity) {\n      // Clear suspended state from the activity and all its ancestors\n      let current: Activity | null = this.activityTree.suspendedActivity;\n      while (current) {\n        current.isSuspended = false;\n        current = current.parent;\n      }\n      this.activityTree.suspendedActivity = null;\n    }\n  }\n\n  /**\n   * End Attempt Process (UP.4)\n   * Ends an attempt on an activity\n   * @param {Activity} activity - The activity to end attempt on\n   */\n  private endAttemptProcess(activity: Activity): void {\n    if (!activity.isActive) {\n      return;\n    }\n\n    // Set activity as inactive\n    activity.isActive = false;\n\n    // Update attempt completion status if not already set\n    if (activity.completionStatus === \"unknown\") {\n      activity.completionStatus = \"incomplete\";\n    }\n\n    // Update success status if needed\n    if (activity.successStatus === \"unknown\" && activity.objectiveSatisfiedStatus) {\n      activity.successStatus = activity.objectiveSatisfiedStatus ? \"passed\" : \"failed\";\n    }\n\n    // INTEGRATION: Process global objective mapping after activity completion\n    this.rollupProcess.processGlobalObjectiveMapping(activity, this.globalObjectiveMap);\n\n    // Trigger rollup from this activity\n    this.rollupProcess.overallRollupProcess(activity);\n\n    // INTEGRATION: Validate rollup state consistency after rollup\n    if (this.activityTree.root) {\n      this.rollupProcess.validateRollupStateConsistency(this.activityTree.root);\n    }\n  }\n\n  /**\n   * Update navigation validity in ADL nav\n   */\n  private updateNavigationValidity(): void {\n    if (!this.adlNav || !this.activityTree.currentActivity) {\n      return;\n    }\n\n    // Update continue validity\n    const continueResult = this.navigationRequestProcess(NavigationRequestType.CONTINUE);\n    try {\n      this.adlNav.request_valid.continue = continueResult.valid ? \"true\" : \"false\";\n    } catch (e) {\n      // Navigation validity might be read-only after init\n    }\n\n    // Update previous validity\n    const previousResult = this.navigationRequestProcess(NavigationRequestType.PREVIOUS);\n    try {\n      this.adlNav.request_valid.previous = previousResult.valid ? \"true\" : \"false\";\n    } catch (e) {\n      // Navigation validity might be read-only after init\n    }\n\n    // Compute per-target choice/jump validity and emit an event snapshot\n    const allActivities = this.activityTree.getAllActivities();\n    const choiceMap: { [key: string]: string } = {};\n    const jumpMap: { [key: string]: string } = {};\n    for (const act of allActivities) {\n      const choiceRes = this.navigationRequestProcess(NavigationRequestType.CHOICE, act.id);\n      choiceMap[act.id] = choiceRes.valid ? \"true\" : \"false\";\n      const jumpRes = this.navigationRequestProcess(NavigationRequestType.JUMP, act.id);\n      jumpMap[act.id] = jumpRes.valid ? \"true\" : \"false\";\n    }\n    // Best-effort update of adl.nav.request_valid maps (may be RO post-init)\n    try {\n      this.adlNav.request_valid.choice = choiceMap;\n    } catch (e) {\n      // Ignore read-only constraints on nav request_valid during runtime\n    }\n    try {\n      this.adlNav.request_valid.jump = jumpMap;\n    } catch (e) {\n      // Ignore read-only constraints on nav request_valid during runtime\n    }\n    // Notify listeners so LMS can update UI regardless of read-only state\n    this.fireEvent(\"onNavigationValidityUpdate\", {\n      continue: continueResult.valid,\n      previous: previousResult.valid,\n      choice: choiceMap,\n      jump: jumpMap,\n    });\n  }\n\n  /**\n   * Find common ancestor between two activities\n   */\n  private findCommonAncestor(activity1: Activity, activity2: Activity): Activity | null {\n    // Get ancestors of activity1\n    const ancestors1: Activity[] = [];\n    let current: Activity | null = activity1;\n    while (current) {\n      ancestors1.push(current);\n      current = current.parent;\n    }\n\n    // Find first common ancestor\n    current = activity2;\n    while (current) {\n      if (ancestors1.includes(current)) {\n        return current;\n      }\n      current = current.parent;\n    }\n\n    return null;\n  }\n\n  /**\n   * Check if content has been delivered\n   */\n  public hasContentBeenDelivered(): boolean {\n    return this.contentDelivered;\n  }\n\n  /**\n   * Reset content delivered flag\n   */\n  public resetContentDelivered(): void {\n    this.contentDelivered = false;\n  }\n\n  /**\n   * Exit Action Rules Subprocess (TB.2.1)\n   * Evaluates exit action rules for the current activity\n   * @param {Activity} activity - The activity to evaluate\n   * @return {string | null} - The exit action to take, or null if none\n   */\n  private exitActionRulesSubprocess(activity: Activity): string | null {\n    // Check if activity has exit action rules\n    const exitRules = activity.sequencingRules.exitConditionRules;\n\n    for (const rule of exitRules) {\n      // Evaluate the rule conditions\n      let conditionsMet = true;\n\n      // Check rule condition combination\n      if (rule.conditionCombination === \"all\") {\n        conditionsMet = rule.conditions.every(condition => condition.evaluate(activity));\n      } else {\n        conditionsMet = rule.conditions.some(condition => condition.evaluate(activity));\n      }\n\n      if (conditionsMet) {\n        // Return the action to take\n        if (rule.action === RuleActionType.EXIT_PARENT) {\n          return \"EXIT_PARENT\";\n        } else if (rule.action === RuleActionType.EXIT_ALL) {\n          return \"EXIT_ALL\";\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Terminate all activities in the tree\n   * @param {Activity} activity - The activity to start from (usually root)\n   */\n  private terminateAllActivities(activity: Activity): void {\n    // Recursively terminate all children first\n    for (const child of activity.children) {\n      this.terminateAllActivities(child);\n    }\n\n    // Then terminate this activity\n    if (activity.isActive) {\n      this.endAttemptProcess(activity);\n    }\n  }\n\n  /**\n   * Limit Conditions Check Process (UP.1)\n   * Checks if any limit conditions are violated for the activity\n   * @param {Activity} activity - The activity to check limit conditions for\n   * @return {boolean} - True if limit conditions are met, false if violated\n   */\n  private limitConditionsCheckProcess(activity: Activity): boolean {\n    let result = true;\n    let failureReason = \"\";\n\n    // Check attempt limit\n    if (activity.attemptLimit !== null && activity.attemptLimit > 0) {\n      if (activity.attemptCount >= activity.attemptLimit) {\n        result = false;\n        failureReason = \"Attempt limit exceeded\";\n      }\n    }\n\n    // Check attempt absolute duration limit\n    if (result && activity.attemptAbsoluteDurationLimit) {\n      const currentDuration = getDurationAsSeconds(activity.attemptAbsoluteDuration || \"PT0H0M0S\", scorm2004_regex.CMITimespan);\n      const limitDuration = getDurationAsSeconds(activity.attemptAbsoluteDurationLimit, scorm2004_regex.CMITimespan);\n      if (currentDuration >= limitDuration) {\n        result = false;\n        failureReason = \"Attempt duration limit exceeded\";\n      }\n    }\n\n    // Check activity absolute duration limit\n    if (result && activity.activityAbsoluteDurationLimit) {\n      const currentDuration = getDurationAsSeconds(activity.activityAbsoluteDuration || \"PT0H0M0S\", scorm2004_regex.CMITimespan);\n      const limitDuration = getDurationAsSeconds(activity.activityAbsoluteDurationLimit, scorm2004_regex.CMITimespan);\n      if (currentDuration >= limitDuration) {\n        result = false;\n        failureReason = \"Activity duration limit exceeded\";\n      }\n    }\n\n    // Check begin time limit\n    if (result && activity.beginTimeLimit) {\n      const currentTime = this.now();\n      const beginTime = new Date(activity.beginTimeLimit);\n      if (currentTime < beginTime) {\n        result = false;\n        failureReason = \"Not yet time to begin\";\n      }\n    }\n\n    // Check end time limit\n    if (result && activity.endTimeLimit) {\n      const currentTime = this.now();\n      const endTime = new Date(activity.endTimeLimit);\n      if (currentTime > endTime) {\n        result = false;\n        failureReason = \"Time limit expired\";\n      }\n    }\n\n    // Fire limit condition check event\n    this.fireEvent(\"onLimitConditionCheck\", {\n      activity: activity,\n      result: result,\n      failureReason: failureReason,\n      checks: {\n        attemptLimit: activity.attemptLimit,\n        attemptCount: activity.attemptCount,\n        attemptDurationLimit: activity.attemptAbsoluteDurationLimit,\n        activityDurationLimit: activity.activityAbsoluteDurationLimit,\n        beginTimeLimit: activity.beginTimeLimit,\n        endTimeLimit: activity.endTimeLimit\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Check Activity Process (UP.5)\n   * Validates if an activity can be delivered\n   * @param {Activity} activity - The activity to check\n   * @return {boolean} - True if activity can be delivered\n   */\n  private checkActivityProcess(activity: Activity): boolean {\n    // Check if activity is available\n    if (!activity.isAvailable) {\n      return false;\n    }\n\n    // Check if activity is hidden from choice (if this is a choice request)\n    if (activity.isHiddenFromChoice) {\n      // This would be false for choice navigation, but we need context\n      // For now, we'll allow it but this should be enhanced\n    }\n\n    // Check limit conditions (UP.1)\n    if (!this.limitConditionsCheckProcess(activity)) {\n      return false;\n    }\n\n    // Check if activity is a cluster that can't be delivered directly\n    if (activity.children.length > 0 && !activity.sequencingControls.flow) {\n      return false; // Clusters without flow can't be delivered\n    }\n\n    // Activity passes all checks\n    return true;\n  }\n\n  /**\n   * Terminate Descendent Attempts Process (UP.3)\n   * Recursively terminates all active descendant attempts\n   * @param {Activity} activity - The activity whose descendants to terminate\n   */\n  private terminateDescendentAttemptsProcess(activity: Activity): void {\n    // Process all children\n    for (const child of activity.children) {\n      // Recursively terminate descendants first\n      if (child.children.length > 0) {\n        this.terminateDescendentAttemptsProcess(child);\n      }\n\n      // Check exit rules for the child\n      const exitAction = this.exitActionRulesSubprocess(child);\n\n      // Terminate the child if it's active\n      if (child.isActive) {\n        // Apply exit action if any\n        if (exitAction === \"EXIT_ALL\") {\n          // Recursively terminate all descendants\n          this.terminateDescendentAttemptsProcess(child);\n        }\n\n        // End the attempt\n        this.endAttemptProcess(child);\n      }\n    }\n  }\n\n  /**\n   * Get Sequencing State for Persistence\n   * Returns the current state of the sequencing engine for multi-session support\n   * @return {object} - Serializable sequencing state\n   */\n  public getSequencingState(): any {\n    return {\n      version: \"1.0\",\n      timestamp: new Date().toISOString(),\n      contentDelivered: this.contentDelivered,\n      currentActivity: this.activityTree.currentActivity?.id || null,\n      suspendedActivity: this.activityTree.suspendedActivity?.id || null,\n      activityStates: this.serializeActivityStates(),\n      navigationState: this.getNavigationState()\n    };\n  }\n\n  /**\n   * Restore Sequencing State from Persistence\n   * Restores the sequencing engine state from a previous session\n   * @param {any} state - Previously saved sequencing state\n   * @return {boolean} - True if restoration was successful\n   */\n  public restoreSequencingState(state: any): boolean {\n    try {\n      if (!state || state.version !== \"1.0\") {\n        console.warn(\"Incompatible sequencing state version\");\n        return false;\n      }\n\n      // Restore basic flags\n      this.contentDelivered = state.contentDelivered || false;\n\n      // Restore activity states\n      if (state.activityStates) {\n        this.deserializeActivityStates(state.activityStates);\n      }\n\n      // Restore current activity\n      if (state.currentActivity) {\n        const currentActivity = this.activityTree.getActivity(state.currentActivity);\n        if (currentActivity) {\n          this.activityTree.currentActivity = currentActivity;\n          currentActivity.isActive = true;\n        }\n      }\n\n      // Restore suspended activity\n      if (state.suspendedActivity) {\n        const suspendedActivity = this.activityTree.getActivity(state.suspendedActivity);\n        if (suspendedActivity) {\n          this.activityTree.suspendedActivity = suspendedActivity;\n          suspendedActivity.isSuspended = true;\n        }\n      }\n\n      // Restore navigation state\n      if (state.navigationState) {\n        this.restoreNavigationState(state.navigationState);\n      }\n\n      console.debug(\"Sequencing state restored successfully\");\n      return true;\n    } catch (error) {\n      console.error(`Failed to restore sequencing state: ${error}`);\n      return false;\n    }\n  }\n\n  /**\n   * Serialize Activity States\n   * Creates a serializable representation of all activity states\n   * @return {object} - Serialized activity states\n   */\n  private serializeActivityStates(): any {\n    const states: any = {};\n\n    const serializeActivity = (activity: Activity) => {\n      states[activity.id] = {\n        id: activity.id,\n        title: activity.title,\n        isActive: activity.isActive,\n        isSuspended: activity.isSuspended,\n        isCompleted: activity.isCompleted,\n        completionStatus: activity.completionStatus,\n        successStatus: activity.successStatus,\n        attemptCount: activity.attemptCount,\n        attemptCompletionAmount: activity.attemptCompletionAmount,\n        attemptAbsoluteDuration: activity.attemptAbsoluteDuration,\n        attemptExperiencedDuration: activity.attemptExperiencedDuration,\n        activityAbsoluteDuration: activity.activityAbsoluteDuration,\n        activityExperiencedDuration: activity.activityExperiencedDuration,\n        objectiveSatisfiedStatus: activity.objectiveSatisfiedStatus,\n        objectiveMeasureStatus: activity.objectiveMeasureStatus,\n        objectiveNormalizedMeasure: activity.objectiveNormalizedMeasure,\n        progressMeasure: activity.progressMeasure,\n        progressMeasureStatus: activity.progressMeasureStatus,\n        isAvailable: activity.isAvailable,\n        location: activity.location,\n        attemptAbsoluteStartTime: activity.attemptAbsoluteStartTime\n      };\n\n      // Recursively serialize children\n      for (const child of activity.children) {\n        serializeActivity(child);\n      }\n    };\n\n    if (this.activityTree.root) {\n      serializeActivity(this.activityTree.root);\n    }\n\n    return states;\n  }\n\n  /**\n   * Deserialize Activity States\n   * Restores activity states from serialized data\n   * @param {any} states - Serialized activity states\n   */\n  private deserializeActivityStates(states: any): void {\n    const restoreActivity = (activity: Activity) => {\n      const state = states[activity.id];\n      if (state) {\n        activity.isActive = state.isActive || false;\n        activity.isSuspended = state.isSuspended || false;\n        activity.isCompleted = state.isCompleted || false;\n        activity.completionStatus = state.completionStatus || \"unknown\";\n        activity.successStatus = state.successStatus || \"unknown\";\n        activity.attemptCount = state.attemptCount || 0;\n        activity.attemptCompletionAmount = state.attemptCompletionAmount || 0;\n        activity.attemptAbsoluteDuration = state.attemptAbsoluteDuration || \"PT0H0M0S\";\n        activity.attemptExperiencedDuration = state.attemptExperiencedDuration || \"PT0H0M0S\";\n        activity.activityAbsoluteDuration = state.activityAbsoluteDuration || \"PT0H0M0S\";\n        activity.activityExperiencedDuration = state.activityExperiencedDuration || \"PT0H0M0S\";\n        activity.objectiveSatisfiedStatus = state.objectiveSatisfiedStatus || false;\n        activity.objectiveMeasureStatus = state.objectiveMeasureStatus || false;\n        activity.objectiveNormalizedMeasure = state.objectiveNormalizedMeasure || 0;\n        activity.progressMeasure = state.progressMeasure || null;\n        activity.progressMeasureStatus = state.progressMeasureStatus || false;\n        activity.isAvailable = state.isAvailable !== false; // Default to true\n        activity.location = state.location || \"\";\n        activity.attemptAbsoluteStartTime = state.attemptAbsoluteStartTime || null;\n      }\n\n      // Recursively restore children\n      for (const child of activity.children) {\n        restoreActivity(child);\n      }\n    };\n\n    if (this.activityTree.root) {\n      restoreActivity(this.activityTree.root);\n    }\n  }\n\n  /**\n   * Get Navigation State\n   * Returns current navigation validity and ADL nav state\n   * @return {any} - Navigation state\n   */\n  private getNavigationState(): any {\n    if (!this.adlNav) {\n      return null;\n    }\n\n    return {\n      request: this.adlNav.request || \"_none_\",\n      requestValid: {\n        continue: this.adlNav.request_valid?.continue || \"false\",\n        previous: this.adlNav.request_valid?.previous || \"false\",\n        choice: this.adlNav.request_valid?.choice || \"false\",\n        jump: this.adlNav.request_valid?.jump || \"false\",\n        exit: this.adlNav.request_valid?.exit || \"false\",\n        exitAll: this.adlNav.request_valid?.exitAll || \"false\",\n        abandon: this.adlNav.request_valid?.abandon || \"false\",\n        abandonAll: this.adlNav.request_valid?.abandonAll || \"false\",\n        suspendAll: this.adlNav.request_valid?.suspendAll || \"false\"\n      }\n    };\n  }\n\n  /**\n   * Restore Navigation State\n   * Restores ADL navigation state\n   * @param {any} navState - Navigation state to restore\n   */\n  private restoreNavigationState(navState: any): void {\n    if (!this.adlNav || !navState) {\n      return;\n    }\n\n    try {\n      // Restore navigation request validity\n      if (navState.requestValid) {\n        const requestValid = navState.requestValid;\n        this.adlNav.request_valid.continue = requestValid.continue || \"false\";\n        this.adlNav.request_valid.previous = requestValid.previous || \"false\";\n        this.adlNav.request_valid.choice = requestValid.choice || \"false\";\n        this.adlNav.request_valid.jump = requestValid.jump || \"false\";\n        this.adlNav.request_valid.exit = requestValid.exit || \"false\";\n        this.adlNav.request_valid.exitAll = requestValid.exitAll || \"false\";\n        this.adlNav.request_valid.abandon = requestValid.abandon || \"false\";\n        this.adlNav.request_valid.abandonAll = requestValid.abandonAll || \"false\";\n        this.adlNav.request_valid.suspendAll = requestValid.suspendAll || \"false\";\n      }\n    } catch (error) {\n      // Navigation properties might be read-only after initialization\n      console.warn(`Could not fully restore navigation state: ${error}`);\n    }\n  }\n\n  /**\n   * Enhanced Complex Choice Path Validation\n   * Implements comprehensive choice validation with nested hierarchy support\n   * Priority 1 Gap: Complex Choice Path Validation\n   * @param {Activity | null} currentActivity - Current activity\n   * @param {Activity} targetActivity - Target activity for choice\n   * @return {{valid: boolean, exception: string | null}} - Validation result\n   */\n  private validateComplexChoicePath(currentActivity: Activity | null, targetActivity: Activity): {\n    valid: boolean,\n    exception: string | null\n  } {\n    // Check if target is hidden from choice\n    if (targetActivity.isHiddenFromChoice) {\n      return { valid: false, exception: \"NB.2.1-11\" };\n    }\n\n    // Check if target is disabled\n    if (this.isActivityDisabled(targetActivity)) {\n      return { valid: false, exception: \"NB.2.1-11\" };\n    }\n\n    if (currentActivity) {\n      const commonAncestor = this.findCommonAncestor(currentActivity, targetActivity);\n      if (!commonAncestor) {\n        return { valid: false, exception: \"NB.2.1-11\" };\n      }\n\n      // Enhanced constrainChoice control validation in nested hierarchies\n      const constrainChoiceValidation = this.validateConstrainChoiceControls(currentActivity, targetActivity, commonAncestor);\n      if (!constrainChoiceValidation.valid) {\n        return constrainChoiceValidation;\n      }\n\n      // Validate choice sets with multiple targets\n      const choiceSetValidation = this.validateChoiceSetConstraints(currentActivity, targetActivity, commonAncestor);\n      if (!choiceSetValidation.valid) {\n        return choiceSetValidation;\n      }\n    }\n\n    // Path to root validation for choice control\n    let activity: Activity | null = targetActivity;\n    while (activity) {\n      if (activity.parent && !activity.parent.sequencingControls.choice) {\n        return { valid: false, exception: \"NB.2.1-11\" };\n      }\n      activity = activity.parent;\n    }\n\n    return { valid: true, exception: null };\n  }\n\n  /**\n   * Enhanced Forward-Only Navigation Constraints\n   * Handles forward-only constraints at different cluster levels\n   * Priority 1 Gap: Forward-Only Navigation Constraints\n   * @param {Activity} currentActivity - Current activity\n   * @return {{valid: boolean, exception: string | null}} - Validation result\n   */\n  private validateForwardOnlyConstraints(currentActivity: Activity): {\n    valid: boolean,\n    exception: string | null\n  } {\n    // Check forward-only constraint at immediate parent level\n    if (currentActivity.parent?.sequencingControls.forwardOnly) {\n      return { valid: false, exception: \"NB.2.1-8\" };\n    }\n\n    // Check forward-only constraints at higher cluster levels\n    let ancestor = currentActivity.parent?.parent;\n    while (ancestor) {\n      if (ancestor.sequencingControls.forwardOnly) {\n        // If any ancestor cluster has forwardOnly=true, previous navigation is blocked\n        return { valid: false, exception: \"NB.2.1-8\" };\n      }\n      ancestor = ancestor.parent;\n    }\n\n    return { valid: true, exception: null };\n  }\n\n  /**\n   * Enhanced constrainChoice Control Validation\n   * Implements proper constrainChoice validation in nested hierarchies\n   * Priority 1 Gap: constrainChoice control validation\n   * @param {Activity} currentActivity - Current activity\n   * @param {Activity} targetActivity - Target activity\n   * @param {Activity} commonAncestor - Common ancestor\n   * @return {{valid: boolean, exception: string | null}} - Validation result\n   */\n  private validateConstrainChoiceControls(currentActivity: Activity, targetActivity: Activity, commonAncestor: Activity): {\n    valid: boolean,\n    exception: string | null\n  } {\n    // Check constrainChoice at common ancestor level\n    if (commonAncestor.sequencingControls.constrainChoice) {\n      // Additional constraint validation for choice navigation\n      // This would include checking if the choice is within allowed boundaries\n      const currentIndex = commonAncestor.children.indexOf(this.findChildContaining(commonAncestor, currentActivity)!);\n      const targetIndex = commonAncestor.children.indexOf(this.findChildContaining(commonAncestor, targetActivity)!);\n\n      // Example constraint: constrainChoice might limit choices to adjacent activities only\n      if (Math.abs(currentIndex - targetIndex) > 1) {\n        return { valid: false, exception: \"NB.2.1-11\" };\n      }\n    }\n\n    // Check constrainChoice controls up the hierarchy\n    let ancestor = commonAncestor.parent;\n    while (ancestor) {\n      if (ancestor.sequencingControls.constrainChoice) {\n        // Apply ancestor-level constraints\n        const ancestorValidation = this.validateAncestorConstraints(ancestor, currentActivity, targetActivity);\n        if (!ancestorValidation.valid) {\n          return ancestorValidation;\n        }\n      }\n      ancestor = ancestor.parent;\n    }\n\n    return { valid: true, exception: null };\n  }\n\n  /**\n   * Validate Choice Set Constraints\n   * Validates choice sets with multiple targets\n   * Priority 1 Gap: Choice Set Constraints\n   * @param {Activity} currentActivity - Current activity\n   * @param {Activity} targetActivity - Target activity\n   * @param {Activity} commonAncestor - Common ancestor\n   * @return {{valid: boolean, exception: string | null}} - Validation result\n   */\n  private validateChoiceSetConstraints(currentActivity: Activity, targetActivity: Activity, commonAncestor: Activity): {\n    valid: boolean,\n    exception: string | null\n  } {\n    // Check if target is within the valid choice set\n    const validChoiceSet = this.getValidChoiceSet(commonAncestor, currentActivity);\n    if (!validChoiceSet.includes(targetActivity)) {\n      return { valid: false, exception: \"NB.2.1-11\" };\n    }\n\n    return { valid: true, exception: null };\n  }\n\n  /**\n   * Check if activity is disabled\n   * Priority 1 Gap: Disabled Activity Detection\n   * @param {Activity} activity - Activity to check\n   * @return {boolean} - True if disabled\n   */\n  private isActivityDisabled(activity: Activity): boolean {\n    // Check if activity is disabled through sequencing rules\n    const preConditionResult = this.evaluatePreConditionRulesForChoice(activity);\n    return preConditionResult === \"DISABLED\";\n  }\n\n  /**\n   * Find child activity that contains the target activity\n   * @param {Activity} parent - Parent activity\n   * @param {Activity} target - Target activity to find\n   * @return {Activity | null} - Child activity containing target\n   */\n  private findChildContaining(parent: Activity, target: Activity): Activity | null {\n    for (const child of parent.children) {\n      if (child === target) {\n        return child;\n      }\n      if (this.activityContains(child, target)) {\n        return child;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Check if an activity contains another activity in its hierarchy\n   * @param {Activity} container - Container activity\n   * @param {Activity} target - Target activity\n   * @return {boolean} - True if container contains target\n   */\n  private activityContains(container: Activity, target: Activity): boolean {\n    let current: Activity | null = target;\n    while (current) {\n      if (current === container) {\n        return true;\n      }\n      current = current.parent;\n    }\n    return false;\n  }\n\n  /**\n   * Validate ancestor-level constraints\n   * @param {Activity} ancestor - Ancestor activity\n   * @param {Activity} currentActivity - Current activity\n   * @param {Activity} targetActivity - Target activity\n   * @return {{valid: boolean, exception: string | null}} - Validation result\n   */\n  private validateAncestorConstraints(ancestor: Activity, currentActivity: Activity, targetActivity: Activity): {\n    valid: boolean,\n    exception: string | null\n  } {\n    // Enforce forwardOnly and mandatory activity constraints at ancestor level\n    const children = ancestor.children;\n    if (!children || children.length === 0) {\n      return { valid: true, exception: null };\n    }\n\n    const currentTop = this.findChildContaining(ancestor, currentActivity);\n    const targetTop = this.findChildContaining(ancestor, targetActivity);\n    if (!currentTop || !targetTop) {\n      return { valid: false, exception: \"NB.2.1-11\" };\n    }\n\n    const currentIndex = children.indexOf(currentTop);\n    const targetIndex = children.indexOf(targetTop);\n\n    // Forward-only prevents backwards choice under this ancestor\n    if (ancestor.sequencingControls.forwardOnly && targetIndex < currentIndex) {\n      return { valid: false, exception: \"NB.2.1-8\" };\n    }\n\n    // Do not skip mandatory incomplete siblings when moving forward\n    if (targetIndex > currentIndex) {\n      for (let i = currentIndex + 1; i < targetIndex; i++) {\n        const between = children[i];\n        if (between && this.helperIsActivityMandatory(between) && !this.helperIsActivityCompleted(between)) {\n          return { valid: false, exception: \"NB.2.1-11\" };\n        }\n      }\n    }\n\n    return { valid: true, exception: null };\n  }\n\n  /** Helper: mandatory activity detection (mirrors SequencingProcess behavior) */\n  private helperIsActivityMandatory(activity: Activity): boolean {\n    if (activity.sequencingRules && activity.sequencingRules.preConditionRules) {\n      for (const rule of activity.sequencingRules.preConditionRules) {\n        if ((rule as any).action === \"skip\" && (rule as any).conditions && (rule as any).conditions.length === 0) {\n          return false;\n        }\n      }\n    }\n    return (activity as any).mandatory !== false;\n  }\n\n  /** Helper: completed-state check (mirrors SequencingProcess behavior) */\n  private helperIsActivityCompleted(activity: Activity): boolean {\n    return (\n      activity.completionStatus === \"completed\" ||\n      (activity as any).successStatus === \"passed\" ||\n      activity.successStatus === \"passed\"\n    );\n  }\n\n  /**\n   * Get valid choice set for current activity\n   * @param {Activity} commonAncestor - Common ancestor\n   * @param {Activity} currentActivity - Current activity\n   * @return {Activity[]} - Array of valid choice activities\n   */\n  private getValidChoiceSet(commonAncestor: Activity, currentActivity: Activity): Activity[] {\n    const validChoices: Activity[] = [];\n\n    // Get all potential choice targets within the common ancestor\n    const allDescendants = this.getAllDescendants(commonAncestor);\n\n    for (const descendant of allDescendants) {\n      if (this.isValidChoiceTarget(descendant, currentActivity)) {\n        validChoices.push(descendant);\n      }\n    }\n\n    return validChoices;\n  }\n\n  /**\n   * Get all descendants of an activity\n   * @param {Activity} activity - Parent activity\n   * @return {Activity[]} - Array of all descendant activities\n   */\n  private getAllDescendants(activity: Activity): Activity[] {\n    const descendants: Activity[] = [];\n\n    for (const child of activity.children) {\n      descendants.push(child);\n      descendants.push(...this.getAllDescendants(child));\n    }\n\n    return descendants;\n  }\n\n  /**\n   * Check if activity is valid choice target\n   * @param {Activity} target - Target activity\n   * @param {Activity} currentActivity - Current activity\n   * @return {boolean} - True if valid choice target\n   */\n  private isValidChoiceTarget(target: Activity, currentActivity: Activity): boolean {\n    // Basic validation for choice target\n    if (target.isHiddenFromChoice) {\n      return false;\n    }\n\n    if (target === currentActivity) {\n      return false;\n    }\n\n    return !this.isActivityDisabled(target);\n  }\n\n  /**\n   * Evaluate pre-condition rules for choice navigation\n   * @param {Activity} activity - Activity to evaluate\n   * @return {string | null} - Rule result or null\n   */\n  private evaluatePreConditionRulesForChoice(activity: Activity): string | null {\n    // This would evaluate the activity's pre-condition rules\n    // and return \"DISABLED\", \"SKIP\", \"HIDDEN_FROM_CHOICE\", or null\n    const preRules = activity.sequencingRules.preConditionRules;\n\n    for (const rule of preRules) {\n      // Evaluate rule conditions\n      let conditionsMet = true;\n\n      if (rule.conditionCombination === \"all\") {\n        conditionsMet = rule.conditions.every(condition => condition.evaluate(activity));\n      } else {\n        conditionsMet = rule.conditions.some(condition => condition.evaluate(activity));\n      }\n\n      if (conditionsMet) {\n        // Return the action as string\n        switch (rule.action) {\n          case \"skip\":\n            return \"SKIP\";\n          case \"disabled\":\n            return \"DISABLED\";\n          case \"hideFromChoice\":\n            return \"HIDDEN_FROM_CHOICE\";\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Validate Activity Tree State Consistency\n   * Priority 4 Gap: Activity Tree State Consistency\n   * @param {Activity} activity - Activity to validate\n   * @return {{consistent: boolean, exception: string | null}} - Consistency result\n   */\n  private validateActivityTreeStateConsistency(activity: Activity): {\n    consistent: boolean,\n    exception: string | null\n  } {\n    // Check that the activity tree is in a consistent state for delivery\n    if (!this.activityTree.root) {\n      return { consistent: false, exception: \"DB.1.1-4\" }; // No activity tree\n    }\n\n    // Validate activity is part of the current tree\n    if (!this.isActivityPartOfTree(activity, this.activityTree.root)) {\n      return { consistent: false, exception: \"DB.1.1-5\" }; // Activity not in tree\n    }\n\n    // Check for conflicting active activities\n    const activeActivities = this.getActiveActivities();\n    if (activeActivities.length > 1) {\n      // Multiple active activities indicate inconsistent state\n      this.fireEvent(\"onStateInconsistency\", {\n        activeActivities: activeActivities.map(a => a.id),\n        targetActivity: activity.id\n      });\n      return { consistent: false, exception: \"DB.1.1-6\" }; // State inconsistency\n    }\n\n    // Validate parent-child relationships are intact\n    let current: Activity | null = activity;\n    while (current?.parent) {\n      if (!current.parent.children.includes(current)) {\n        return { consistent: false, exception: \"DB.1.1-7\" }; // Broken parent-child relationship\n      }\n      current = current.parent;\n    }\n\n    return { consistent: true, exception: null };\n  }\n\n  /**\n   * Validate Resource Constraints\n   * Priority 4 Gap: Resource Constraint Checking\n   * @param {Activity} activity - Activity to validate\n   * @return {{available: boolean, exception: string | null}} - Resource availability result\n   */\n  private validateResourceConstraints(activity: Activity): {\n    available: boolean,\n    exception: string | null\n  } {\n    // Check if required resources are available\n    // This could include checking for:\n    // - Required plugins or software components\n    // - Network connectivity for web-based resources\n    // - File system access for local resources\n    // - Memory and processing capacity\n\n    // Example resource validations (simplified):\n\n    // Check if activity requires specific resources that might not be available\n    const requiredResources = this.getActivityRequiredResources(activity);\n    for (const resource of requiredResources) {\n      if (!this.isResourceAvailable(resource)) {\n        return {\n          available: false,\n          exception: \"DB.1.1-8\" // Resource not available\n        };\n      }\n    }\n\n    // Check system resource limits\n    const systemResourceCheck = this.checkSystemResourceLimits();\n    if (!systemResourceCheck.adequate) {\n      return {\n        available: false,\n        exception: \"DB.1.1-9\" // Insufficient system resources\n      };\n    }\n\n    return { available: true, exception: null };\n  }\n\n  /**\n   * Validate Concurrent Delivery Prevention\n   * Priority 4 Gap: Prevent Multiple Simultaneous Deliveries\n   * @param {Activity} activity - Activity to validate\n   * @return {{allowed: boolean, exception: string | null}} - Concurrency check result\n   */\n  private validateConcurrentDeliveryPrevention(activity: Activity): {\n    allowed: boolean,\n    exception: string | null\n  } {\n    // Check if another delivery is currently in progress\n    if (this.contentDelivered && this.activityTree.currentActivity && this.activityTree.currentActivity !== activity) {\n      return {\n        allowed: false,\n        exception: \"DB.1.1-10\" // Another activity is currently being delivered\n      };\n    }\n\n    // Check for pending delivery requests in queue\n    if (this.hasPendingDeliveryRequests()) {\n      return {\n        allowed: false,\n        exception: \"DB.1.1-11\" // Delivery request already in queue\n      };\n    }\n\n    // Validate delivery lock status\n    if (this.isDeliveryLocked()) {\n      return {\n        allowed: false,\n        exception: \"DB.1.1-12\" // Delivery is currently locked\n      };\n    }\n\n    return { allowed: true, exception: null };\n  }\n\n  /**\n   * Validate Activity Dependencies\n   * Priority 4 Gap: Dependency Resolution\n   * @param {Activity} activity - Activity to validate\n   * @return {{satisfied: boolean, exception: string | null}} - Dependency check result\n   */\n  private validateActivityDependencies(activity: Activity): {\n    satisfied: boolean,\n    exception: string | null\n  } {\n    // Check prerequisite activities\n    const prerequisites = this.getActivityPrerequisites(activity);\n    for (const prerequisite of prerequisites) {\n      if (!this.isPrerequisiteSatisfied(prerequisite, activity)) {\n        return {\n          satisfied: false,\n          exception: \"DB.1.1-13\" // Prerequisites not satisfied\n        };\n      }\n    }\n\n    // Check objective dependencies\n    const objectiveDependencies = this.getObjectiveDependencies(activity);\n    for (const dependency of objectiveDependencies) {\n      if (!this.isObjectiveDependencySatisfied(dependency)) {\n        return {\n          satisfied: false,\n          exception: \"DB.1.1-14\" // Objective dependencies not met\n        };\n      }\n    }\n\n    // Check sequencing rule dependencies\n    const sequencingDependencies = this.getSequencingRuleDependencies(activity);\n    if (!sequencingDependencies.satisfied) {\n      return {\n        satisfied: false,\n        exception: \"DB.1.1-15\" // Sequencing dependencies not met\n      };\n    }\n\n    return { satisfied: true, exception: null };\n  }\n\n  /**\n   * Helper methods for delivery request validation\n   */\n  private isActivityPartOfTree(activity: Activity, root: Activity): boolean {\n    if (activity === root) {\n      return true;\n    }\n\n    for (const child of root.children) {\n      if (this.isActivityPartOfTree(activity, child)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private getActiveActivities(): Activity[] {\n    const activeActivities: Activity[] = [];\n    if (this.activityTree.root) {\n      this.collectActiveActivities(this.activityTree.root, activeActivities);\n    }\n    return activeActivities;\n  }\n\n  private collectActiveActivities(activity: Activity, activeActivities: Activity[]): void {\n    if (activity.isActive) {\n      activeActivities.push(activity);\n    }\n    for (const child of activity.children) {\n      this.collectActiveActivities(child, activeActivities);\n    }\n  }\n\n  private getActivityRequiredResources(activity: Activity): string[] {\n    // Parse activity metadata for resource requirements\n    // Check activity definition for required resources like bandwidth, plugins, etc.\n    const resources: string[] = [];\n\n    // Check for multimedia requirements based on activity title and location\n    const activityInfo = (activity.title + \" \" + activity.location).toLowerCase();\n    if (activityInfo.includes(\"video\") || activityInfo.includes(\"multimedia\")) {\n      resources.push(\"video-codec\");\n    }\n    if (activityInfo.includes(\"audio\") || activityInfo.includes(\"sound\")) {\n      resources.push(\"audio-codec\");\n    }\n\n    // Check for plugin requirements from activity location/title\n    if (activityInfo.includes(\"flash\") || activityInfo.includes(\".swf\")) {\n      resources.push(\"flash-plugin\");\n    }\n    if (activityInfo.includes(\"java\") || activityInfo.includes(\"applet\")) {\n      resources.push(\"java-runtime\");\n    }\n\n    // Check for bandwidth requirements based on activity type\n    if (activity.children && activity.children.length > 0) {\n      resources.push(\"high-bandwidth\"); // Container activities may need more bandwidth\n    }\n\n    // Check for storage requirements based on duration limits\n    if (activity.attemptAbsoluteDurationLimit &&\n      this.parseDurationToMinutes(activity.attemptAbsoluteDurationLimit) > 60) {\n      resources.push(\"extended-storage\"); // Long duration activities need more storage\n    }\n\n    // Check for specific SCORM requirements\n    if (activity.attemptLimit && activity.attemptLimit > 1) {\n      resources.push(\"persistent-storage\"); // Multiple attempts need storage\n    }\n\n    return resources;\n  }\n\n  private isResourceAvailable(resource: string): boolean {\n    // Check if the specified resource is available in the runtime environment\n    try {\n      switch (resource) {\n        case \"video-codec\":\n          // Check if HTML5 video is supported\n          return !!(document.createElement(\"video\").canPlayType);\n\n        case \"audio-codec\":\n          // Check if HTML5 audio is supported\n          return !!(document.createElement(\"audio\").canPlayType);\n\n        case \"flash-plugin\":\n          // Check for Flash plugin (legacy support)\n          return (navigator.plugins && Array.from(navigator.plugins).some(plugin => plugin.name === \"Shockwave Flash\"));\n\n        case \"java-runtime\":\n          // Check for Java support (mostly deprecated in modern browsers)\n          return (navigator.plugins && Array.from(navigator.plugins).some(plugin => plugin.name === \"Java\"));\n\n        case \"high-bandwidth\":\n          // Check network connection (basic heuristic)\n          if (\"connection\" in navigator) {\n            const connection = (navigator as any).connection;\n            return connection.effectiveType === \"4g\" || connection.downlink > 5;\n          }\n          return true; // Assume available if can't detect\n\n        case \"extended-storage\":\n          // Check for sufficient storage (estimate 100MB needed)\n          if (\"storage\" in navigator && \"estimate\" in navigator.storage) {\n            navigator.storage.estimate().then(estimate => {\n              return (estimate.quota || 0) > 100 * 1024 * 1024; // 100MB\n            });\n          }\n          return true; // Assume available if can't detect\n\n        case \"persistent-storage\":\n          // Check for persistent storage capabilities\n          return \"localStorage\" in window && \"sessionStorage\" in window;\n\n        default:\n          // Unknown resource, assume available\n          return true;\n      }\n    } catch (error) {\n      // If any check fails, assume resource is unavailable\n      return false;\n    }\n  }\n\n  private checkSystemResourceLimits(): { adequate: boolean } {\n    // Check system memory, CPU, and other resource constraints\n    try {\n      let adequate = true;\n\n      // Check memory usage if available (Chrome/Edge only)\n      if (\"memory\" in performance) {\n        const memory = (performance as any).memory;\n        const memoryUsagePercent = memory.usedJSHeapSize / memory.jsHeapSizeLimit;\n        if (memoryUsagePercent > 0.8) { // More than 80% memory used\n          adequate = false;\n        }\n      }\n\n      // Check for device memory hint (modern browsers)\n      if (\"deviceMemory\" in navigator) {\n        const deviceMemory = (navigator as any).deviceMemory;\n        if (deviceMemory < 2) { // Less than 2GB device memory\n          adequate = false;\n        }\n      }\n\n      // Check hardware concurrency (rough CPU check)\n      if (\"hardwareConcurrency\" in navigator) {\n        const cores = navigator.hardwareConcurrency;\n        if (cores < 2) { // Single core devices might struggle\n          adequate = false;\n        }\n      }\n\n      // Check connection quality for network-intensive activities\n      if (\"connection\" in navigator) {\n        const connection = (navigator as any).connection;\n        if (connection.saveData || connection.effectiveType === \"slow-2g\") {\n          adequate = false;\n        }\n      }\n\n      return { adequate };\n    } catch (error) {\n      // If checks fail, assume resources are adequate\n      return { adequate: true };\n    }\n  }\n\n  private hasPendingDeliveryRequests(): boolean {\n    // Check if there are pending delivery requests in the system\n    // This would track asynchronous operations like:\n    // - CMI data commits to LMS\n    // - Asset downloads\n    // - External service calls\n\n    // Check for pending async operations in the activity tree state\n    if (this.activityTree && (this.activityTree as any).pendingRequests) {\n      return (this.activityTree as any).pendingRequests.length > 0;\n    }\n\n    // Check for any pending fetch operations (if using fetch API)\n    if (typeof window !== \"undefined\" && (window as any).pendingScormRequests) {\n      return (window as any).pendingScormRequests > 0;\n    }\n\n    // Check event service for pending operations\n    if (this.eventCallback) {\n      // Fire event to check for pending operations\n      try {\n        this.eventCallback(\"check_pending_requests\", {});\n        // Implementation would depend on the event system returning status\n      } catch (error) {\n        // If event fails, assume no pending requests\n      }\n    }\n\n    return false;\n  }\n\n  private isDeliveryLocked(): boolean {\n    // Check if delivery is currently locked due to:\n    // - Active navigation request processing\n    // - Pending termination/suspension\n    // - Resource constraints\n    // - System maintenance mode\n\n    // Check for navigation lock\n    if (this.activityTree && (this.activityTree as any).navigationLocked) {\n      return true;\n    }\n\n    // Check for active termination process\n    if (this.activityTree && (this.activityTree as any).terminationInProgress) {\n      return true;\n    }\n\n    // Check system resource limits\n    const resourceCheck = this.checkSystemResourceLimits();\n    if (!resourceCheck.adequate) {\n      return true; // Lock delivery if resources are inadequate\n    }\n\n    // Check for maintenance mode (would be set by LMS)\n    return !!(typeof window !== \"undefined\" && (window as any).scormMaintenanceMode);\n  }\n\n  private getActivityPrerequisites(activity: Activity): string[] {\n    // Return list of prerequisite activity IDs based on SCORM 2004 sequencing rules\n    const prerequisites: string[] = [];\n\n    // Check for preCondition rules that reference other activities\n    if (activity.sequencingRules && activity.sequencingRules.preConditionRules) {\n      for (const rule of activity.sequencingRules.preConditionRules) {\n        if (rule.conditions && rule.conditions.length > 0) {\n          for (const condition of rule.conditions) {\n            // Look for objectiveStatusKnown, objectiveSatisfied, etc. conditions\n            // that reference global objectives which may be satisfied by other activities\n            if ((condition as any).referencedObjectiveID &&\n              (condition as any).referencedObjectiveID !== activity.id) {\n              prerequisites.push((condition as any).referencedObjectiveID);\n            }\n          }\n        }\n      }\n    }\n\n    // Check for sequencing control dependencies\n    // Activities with choiceExit=false may depend on completion of siblings\n    if (activity.parent && activity.sequencingControls &&\n      !activity.sequencingControls.choiceExit) {\n      const siblings = activity.parent.children;\n      if (siblings) {\n        const activityIndex = siblings.indexOf(activity);\n\n        // Add previous siblings as prerequisites for sequential flow\n        for (let i = 0; i < activityIndex; i++) {\n          const sibling = siblings[i];\n          if (sibling) {\n            prerequisites.push(sibling.id);\n          }\n        }\n      }\n    }\n\n    // Check for explicit prerequisite metadata (if defined in activity)\n    if ((activity as any).prerequisiteActivities) {\n      prerequisites.push(...(activity as any).prerequisiteActivities);\n    }\n\n    return Array.from(new Set(prerequisites)); // Remove duplicates\n  }\n\n  private isPrerequisiteSatisfied(prerequisiteId: string, _activity: Activity): boolean {\n    // Check if prerequisite is satisfied\n    const prerequisite = this.activityTree.getActivity(prerequisiteId);\n    if (!prerequisite) {\n      return false;\n    }\n\n    // Check if prerequisite is completed\n    return prerequisite.completionStatus === \"completed\";\n  }\n\n  private getObjectiveDependencies(activity: Activity): string[] {\n    // Return list of objective dependencies based on SCORM 2004 objective mapping\n    const dependencies: string[] = [];\n\n    // Check activity's objective mappings for global objective references\n    // Note: Activity class doesn't currently have objectives property - this is a future enhancement\n    const objectives = (activity as any).objectives;\n    if (objectives && objectives.length > 0) {\n      for (const objective of objectives) {\n        // Check for global objective mapping\n        if ((objective as any).globalObjectiveID) {\n          dependencies.push((objective as any).globalObjectiveID);\n        }\n\n        // Check for read/write objective mappings\n        if (!(objective as any).satisfiedByMeasure && (objective as any).readNormalizedMeasure) {\n          // This objective depends on external measure\n          dependencies.push(objective.id + \"_measure\");\n        }\n      }\n    }\n\n    // Check sequencing rules for objective references\n    if (activity.sequencingRules) {\n      const allRules = [\n        ...(activity.sequencingRules.preConditionRules || []),\n        ...(activity.sequencingRules.exitConditionRules || []),\n        ...(activity.sequencingRules.postConditionRules || [])\n      ];\n\n      for (const rule of allRules) {\n        if (rule.conditions && rule.conditions.length > 0) {\n          for (const condition of rule.conditions) {\n            if ((condition as any).objectiveReference &&\n              (condition as any).objectiveReference !== activity.id) {\n              dependencies.push((condition as any).objectiveReference);\n            }\n          }\n        }\n      }\n    }\n\n    return Array.from(new Set(dependencies)); // Remove duplicates\n  }\n\n  private isObjectiveDependencySatisfied(objectiveId: string): boolean {\n    // Check if objective dependency is satisfied according to SCORM 2004 rules\n\n    // Handle global objective references\n    if (this.activityTree && (this.activityTree as any).globalObjectives) {\n      const globalObjectives = (this.activityTree as any).globalObjectives;\n      const globalObjective = globalObjectives[objectiveId];\n\n      if (globalObjective) {\n        // Check if global objective is satisfied\n        return globalObjective.satisfied === true &&\n          globalObjective.statusKnown === true;\n      }\n    }\n\n    // Handle measure-based dependencies\n    if (objectiveId.endsWith(\"_measure\")) {\n      const baseObjectiveId = objectiveId.replace(\"_measure\", \"\");\n      if (this.activityTree && (this.activityTree as any).globalObjectives) {\n        const globalObjectives = (this.activityTree as any).globalObjectives;\n        const globalObjective = globalObjectives[baseObjectiveId];\n\n        if (globalObjective) {\n          // Check if measure is available and within acceptable range\n          return globalObjective.measureKnown === true &&\n            globalObjective.normalizedMeasure >= 0;\n        }\n      }\n    }\n\n    // Handle activity-specific objective references\n    const referencedActivity = this.activityTree.getActivity(objectiveId);\n    if (referencedActivity) {\n      return referencedActivity.objectiveSatisfiedStatus && referencedActivity.objectiveMeasureStatus;\n    }\n\n    // If objective is not found or cannot be evaluated, assume not satisfied\n    return false;\n  }\n\n  private getSequencingRuleDependencies(activity: Activity): { satisfied: boolean } {\n    // Check sequencing rule dependencies for SCORM 2004 compliance\n    let satisfied = true;\n\n    try {\n      // Check pre-condition rule dependencies\n      if (activity.sequencingRules && activity.sequencingRules.preConditionRules) {\n        for (const rule of activity.sequencingRules.preConditionRules) {\n          if (rule.conditions && rule.conditions.length > 0) {\n            for (const condition of rule.conditions) {\n              // Check condition-specific dependencies\n              const conditionType = (condition as any).conditionType || condition.condition;\n\n              switch (conditionType) {\n                case \"activityProgressKnown\":\n                  // Depends on activity progress tracking being available\n                  if (!activity.progressMeasureStatus) satisfied = false;\n                  break;\n\n                case \"objectiveStatusKnown\":\n                case \"objectiveSatisfied\": {\n                  // Depends on objective evaluation system\n                  const objectiveId = (condition as any).referencedObjectiveID || activity.id;\n                  if (!this.isObjectiveDependencySatisfied(objectiveId)) satisfied = false;\n                  break;\n                }\n\n                case \"attemptLimitExceeded\":\n                  // Depends on attempt tracking\n                  if (activity.attemptLimit === null) satisfied = false;\n                  break;\n\n                case \"timeLimitExceeded\":\n                  // Depends on time tracking\n                  if (!activity.attemptAbsoluteDurationLimit &&\n                    !activity.activityAbsoluteDurationLimit) satisfied = false;\n                  break;\n\n                case \"always\":\n                case \"never\":\n                  // These conditions have no dependencies\n                  break;\n\n                default:\n                  // Unknown condition type, assume dependency not satisfied\n                  satisfied = false;\n              }\n            }\n          }\n        }\n      }\n\n      // Check exit condition rule dependencies (similar logic)\n      if (activity.sequencingRules && activity.sequencingRules.exitConditionRules) {\n        for (const rule of activity.sequencingRules.exitConditionRules) {\n          if (rule.conditions && rule.conditions.length > 0) {\n            for (const condition of rule.conditions) {\n              const conditionType = (condition as any).conditionType || condition.condition;\n\n              // Similar dependency checks as pre-conditions\n              if ([\"objectiveStatusKnown\", \"objectiveSatisfied\"].includes(conditionType)) {\n                const objectiveId = (condition as any).referencedObjectiveID || activity.id;\n                if (!this.isObjectiveDependencySatisfied(objectiveId)) satisfied = false;\n              }\n            }\n          }\n        }\n      }\n\n      // Check rollup rule dependencies\n      if (activity.rollupRules && activity.rollupRules.rules) {\n        for (const rule of activity.rollupRules.rules) {\n          if (rule.conditions && rule.conditions.length > 0) {\n            // Rollup rules depend on child activity completion\n            if (activity.children && activity.children.length > 0) {\n              for (const child of activity.children) {\n                if (!child.isCompleted) {\n                  satisfied = false;\n                  break;\n                }\n              }\n            }\n          }\n        }\n      }\n\n    } catch (error) {\n      // If any error occurs during dependency check, mark as not satisfied\n      satisfied = false;\n    }\n\n    return { satisfied };\n  }\n\n  /**\n   * Helper method to parse ISO 8601 duration to minutes\n   */\n  private parseDurationToMinutes(duration: string): number {\n    return getDurationAsSeconds(duration, scorm2004_regex.CMITimespan) / 60; // Convert seconds to minutes\n  }\n\n  /**\n   * INTEGRATION: Initialize Global Objective Map\n   * Sets up the global objective map for cross-activity objective synchronization\n   */\n  private initializeGlobalObjectiveMap(): void {\n    try {\n      this.globalObjectiveMap.clear();\n\n      // Initialize global objectives from activity tree if available\n      if (this.activityTree.root) {\n        this.collectGlobalObjectives(this.activityTree.root);\n      }\n\n      this.fireEvent(\"onGlobalObjectiveMapInitialized\", {\n        objectiveCount: this.globalObjectiveMap.size,\n        timestamp: new Date().toISOString()\n      });\n    } catch (error) {\n      this.fireEvent(\"onGlobalObjectiveMapError\", {\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: new Date().toISOString()\n      });\n    }\n  }\n\n  /**\n   * INTEGRATION: Collect Global Objectives\n   * Recursively collects global objectives from the activity tree\n   * @param {Activity} activity - Activity to collect objectives from\n   */\n  private collectGlobalObjectives(activity: Activity): void {\n    // Create a default global objective for this activity\n    const globalObjectiveId = activity.id + \"_global\";\n    if (!this.globalObjectiveMap.has(globalObjectiveId)) {\n      this.globalObjectiveMap.set(globalObjectiveId, {\n        id: globalObjectiveId,\n        satisfiedStatus: activity.objectiveSatisfiedStatus,\n        satisfiedStatusKnown: activity.objectiveMeasureStatus,\n        normalizedMeasure: activity.objectiveNormalizedMeasure,\n        normalizedMeasureKnown: activity.objectiveMeasureStatus,\n        progressMeasure: activity.progressMeasure,\n        progressMeasureKnown: activity.progressMeasureStatus,\n        completionStatus: activity.completionStatus,\n        completionStatusKnown: activity.completionStatus !== \"unknown\",\n        readSatisfiedStatus: true,\n        writeSatisfiedStatus: true,\n        readNormalizedMeasure: true,\n        writeNormalizedMeasure: true,\n        readProgressMeasure: true,\n        writeProgressMeasure: true,\n        readCompletionStatus: true,\n        writeCompletionStatus: true,\n        satisfiedByMeasure: activity.scaledPassingScore !== null,\n        updateAttemptData: true\n      });\n    }\n\n    // Process children recursively\n    for (const child of activity.children) {\n      this.collectGlobalObjectives(child);\n    }\n  }\n\n  /**\n   * INTEGRATION: Get Global Objective Map\n   * Returns the current global objective map for external access\n   * @return {Map<string, any>} - Current global objective map\n   */\n  public getGlobalObjectiveMap(): Map<string, any> {\n    return this.globalObjectiveMap;\n  }\n\n  /**\n   * INTEGRATION: Update Global Objective\n   * Updates a specific global objective with new data\n   * @param {string} objectiveId - Objective ID to update\n   * @param {any} objectiveData - New objective data\n   */\n  public updateGlobalObjective(objectiveId: string, objectiveData: any): void {\n    try {\n      this.globalObjectiveMap.set(objectiveId, {\n        ...this.globalObjectiveMap.get(objectiveId),\n        ...objectiveData,\n        lastUpdated: new Date().toISOString()\n      });\n\n      this.fireEvent(\"onGlobalObjectiveUpdated\", {\n        objectiveId,\n        data: objectiveData,\n        timestamp: new Date().toISOString()\n      });\n    } catch (error) {\n      this.fireEvent(\"onGlobalObjectiveUpdateError\", {\n        objectiveId,\n        error: error instanceof Error ? error.message : String(error),\n        timestamp: new Date().toISOString()\n      });\n    }\n  }\n}\n","import { Activity } from \"../cmi/scorm2004/sequencing/activity\";\nimport {\n  SequencingResult,\n  DeliveryRequestType,\n} from \"../cmi/scorm2004/sequencing/sequencing_process\";\nimport { EventService } from \"./EventService\";\nimport { LoggingService } from \"./LoggingService\";\nimport { IEventService, ILoggingService } from \"../interfaces/services\";\n\n/**\n * Interface for activity delivery callbacks\n */\nexport interface ActivityDeliveryCallbacks {\n  onDeliverActivity?: (activity: Activity) => void;\n  onUnloadActivity?: (activity: Activity) => void;\n  onSequencingComplete?: (result: SequencingResult) => void;\n  onSequencingError?: (error: string) => void;\n}\n\n/**\n * Service for managing activity delivery in SCORM 2004\n */\nexport class ActivityDeliveryService {\n  private eventService: IEventService;\n  private loggingService: ILoggingService;\n  private callbacks: ActivityDeliveryCallbacks;\n  private currentDeliveredActivity: Activity | null = null;\n  private pendingDelivery: Activity | null = null;\n\n  constructor(\n    eventService: IEventService,\n    loggingService: ILoggingService,\n    callbacks: ActivityDeliveryCallbacks = {},\n  ) {\n    this.eventService = eventService;\n    this.loggingService = loggingService;\n    this.callbacks = callbacks;\n  }\n\n  /**\n   * Process a sequencing result and handle activity delivery\n   * @param {SequencingResult} result - The sequencing result to process\n   */\n  public processSequencingResult(result: SequencingResult): void {\n    // Log the sequencing result\n    if (result.exception) {\n      this.loggingService.error(`Sequencing error: ${result.exception}`);\n      this.callbacks.onSequencingError?.(result.exception);\n      return;\n    }\n\n    // Handle delivery request\n    if (result.deliveryRequest === DeliveryRequestType.DELIVER && result.targetActivity) {\n      this.deliverActivity(result.targetActivity);\n    } else {\n      // No delivery requested\n      this.loggingService.info(\"Sequencing completed with no delivery request\");\n    }\n\n    // Notify sequencing complete\n    this.callbacks.onSequencingComplete?.(result);\n  }\n\n  /**\n   * Deliver an activity\n   * @param {Activity} activity - The activity to deliver\n   */\n  private deliverActivity(activity: Activity): void {\n    // If there's a currently delivered activity, unload it first\n    if (this.currentDeliveredActivity && this.currentDeliveredActivity !== activity) {\n      this.unloadActivity(this.currentDeliveredActivity);\n    }\n\n    // Mark the activity as pending delivery\n    this.pendingDelivery = activity;\n\n    // Log delivery\n    this.loggingService.info(`Delivering activity: ${activity.id} - ${activity.title}`);\n\n    // Fire delivery event\n    this.eventService.processListeners(\"ActivityDelivery\", activity.id, activity);\n\n    // Call delivery callback\n    this.callbacks.onDeliverActivity?.(activity);\n\n    // Update current delivered activity\n    this.currentDeliveredActivity = activity;\n    this.pendingDelivery = null;\n\n    // Mark activity as active\n    activity.isActive = true;\n  }\n\n  /**\n   * Unload an activity\n   * @param {Activity} activity - The activity to unload\n   */\n  private unloadActivity(activity: Activity): void {\n    // Log unload\n    this.loggingService.info(`Unloading activity: ${activity.id} - ${activity.title}`);\n\n    // Fire unload event\n    this.eventService.processListeners(\"ActivityUnload\", activity.id, activity);\n\n    // Call unload callback\n    this.callbacks.onUnloadActivity?.(activity);\n\n    // Mark activity as inactive\n    activity.isActive = false;\n  }\n\n  /**\n   * Get the currently delivered activity\n   * @return {Activity | null}\n   */\n  public getCurrentDeliveredActivity(): Activity | null {\n    return this.currentDeliveredActivity;\n  }\n\n  /**\n   * Get the pending delivery activity\n   * @return {Activity | null}\n   */\n  public getPendingDelivery(): Activity | null {\n    return this.pendingDelivery;\n  }\n\n  /**\n   * Update delivery callbacks\n   * @param {ActivityDeliveryCallbacks} callbacks - The new callbacks\n   */\n  public updateCallbacks(callbacks: ActivityDeliveryCallbacks): void {\n    this.callbacks = { ...this.callbacks, ...callbacks };\n  }\n\n  /**\n   * Reset the delivery service\n   */\n  public reset(): void {\n    if (this.currentDeliveredActivity) {\n      this.unloadActivity(this.currentDeliveredActivity);\n    }\n    this.currentDeliveredActivity = null;\n    this.pendingDelivery = null;\n  }\n}\n","import { Activity } from \"../cmi/scorm2004/sequencing/activity\";\nimport { Sequencing } from \"../cmi/scorm2004/sequencing/sequencing\";\nimport { RollupProcess } from \"../cmi/scorm2004/sequencing/rollup_process\";\nimport {\n  OverallSequencingProcess,\n  NavigationRequestType,\n  DeliveryRequest,\n} from \"../cmi/scorm2004/sequencing/overall_sequencing_process\";\nimport {\n  SequencingProcess,\n  SequencingResult,\n  DeliveryRequestType,\n} from \"../cmi/scorm2004/sequencing/sequencing_process\";\nimport { EventService } from \"./EventService\";\nimport { IEventService, ILoggingService } from \"../interfaces/services\";\nimport { LoggingService } from \"./LoggingService\";\nimport { ActivityDeliveryService, ActivityDeliveryCallbacks } from \"./ActivityDeliveryService\";\nimport { CMI } from \"../cmi/scorm2004/cmi\";\nimport { ADL } from \"../cmi/scorm2004/adl\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { RuleCondition } from \"../cmi/scorm2004/sequencing/sequencing_rules\";\n\n/**\n * Interface for sequencing event listeners\n */\nexport interface SequencingEventListeners {\n  onSequencingStart?: (activity: Activity) => void;\n  onSequencingEnd?: () => void;\n  onActivityDelivery?: (activity: Activity) => void;\n  onActivityUnload?: (activity: Activity) => void;\n  onNavigationRequest?: (request: string, target?: string) => void;\n  onRollupComplete?: (activity: Activity) => void;\n  onSequencingError?: (error: string, context?: string) => void;\n  // Enhanced debugging events\n  onSequencingDebug?: (event: string, data?: any) => void;\n  onActivityAttemptStart?: (activity: Activity) => void;\n  onActivityAttemptEnd?: (activity: Activity) => void;\n  onLimitConditionCheck?: (activity: Activity, result: boolean) => void;\n  onNavigationValidityUpdate?: (validity: any) => void;\n  onSequencingStateChange?: (state: any) => void;\n}\n\n/**\n * Interface for sequencing configuration\n */\nexport interface SequencingConfiguration {\n  autoRollupOnCMIChange?: boolean;\n  autoProgressOnCompletion?: boolean;\n  validateNavigationRequests?: boolean;\n  enableEventSystem?: boolean;\n  logLevel?: \"debug\" | \"info\" | \"warn\" | \"error\";\n  // Time providers/hooks (LMS can override)\n  now?: () => Date;\n  getAttemptElapsedSeconds?: (activity: Activity) => number;\n  getActivityElapsedSeconds?: (activity: Activity) => number;\n}\n\n/**\n * Comprehensive SCORM 2004 Sequencing Service\n * Handles all aspects of sequencing integration with runtime API calls\n */\nexport class SequencingService {\n  private sequencing: Sequencing;\n  private cmi: CMI;\n  private adl: ADL;\n  private eventService: IEventService;\n  private loggingService: ILoggingService;\n  private activityDeliveryService: ActivityDeliveryService;\n  private rollupProcess: RollupProcess;\n  private overallSequencingProcess: OverallSequencingProcess | null = null;\n  private sequencingProcess: SequencingProcess | null = null;\n\n  private eventListeners: SequencingEventListeners = {};\n  private configuration: SequencingConfiguration;\n  private isInitialized: boolean = false;\n  private isSequencingActive: boolean = false;\n  private lastCMIValues: Map<string, any> = new Map();\n  private lastSequencingResult: SequencingResult | null = null;\n\n  constructor(\n    sequencing: Sequencing,\n    cmi: CMI,\n    adl: ADL,\n    eventService: IEventService,\n    loggingService: ILoggingService,\n    configuration: SequencingConfiguration = {},\n  ) {\n    this.sequencing = sequencing;\n    this.cmi = cmi;\n    this.adl = adl;\n    this.eventService = eventService;\n    this.loggingService = loggingService;\n\n    // Default configuration\n    this.configuration = {\n      autoRollupOnCMIChange: true,\n      autoProgressOnCompletion: false,\n      validateNavigationRequests: true,\n      enableEventSystem: true,\n      logLevel: \"info\",\n      now: () => new Date(),\n      ...configuration,\n    };\n\n    // Create activity delivery service\n    const deliveryCallbacks: ActivityDeliveryCallbacks = {\n      onDeliverActivity: (activity) => this.handleActivityDelivery(activity),\n      onUnloadActivity: (activity) => this.handleActivityUnload(activity),\n      onSequencingComplete: (result) => this.handleSequencingComplete(result),\n      onSequencingError: (error) => this.handleSequencingError(error),\n    };\n\n    this.activityDeliveryService = new ActivityDeliveryService(\n      eventService,\n      loggingService,\n      deliveryCallbacks,\n    );\n\n    this.rollupProcess = new RollupProcess();\n    // Propagate time provider to rule evaluation (time-based conditions)\n    if (this.configuration.now) {\n      RuleCondition.setNowProvider(this.configuration.now);\n    }\n    this.setupCMIChangeWatchers();\n  }\n\n  /**\n   * Initialize the sequencing service\n   * Called when SCORM API Initialize() is called\n   */\n  public initialize(): string {\n    try {\n      this.log(\"info\", \"Initializing sequencing service\");\n\n      // Initialize sequencing components\n      if (!this.sequencing.initialized) {\n        this.sequencing.initialize();\n      }\n\n      // Set up ADL Nav connection\n      this.sequencing.adlNav = this.adl.nav;\n\n      // Create sequencing processes if we have an activity tree\n      if (this.sequencing.activityTree.root) {\n        const seqOptions: {\n          now?: () => Date;\n          getAttemptElapsedSeconds?: (a: Activity) => number;\n          getActivityElapsedSeconds?: (a: Activity) => number;\n        } = {};\n        if (this.configuration.now) seqOptions.now = this.configuration.now;\n        if (this.configuration.getAttemptElapsedSeconds)\n          seqOptions.getAttemptElapsedSeconds = this.configuration.getAttemptElapsedSeconds;\n        if (this.configuration.getActivityElapsedSeconds)\n          seqOptions.getActivityElapsedSeconds = this.configuration.getActivityElapsedSeconds;\n\n        this.sequencingProcess = new SequencingProcess(\n          this.sequencing.activityTree,\n          this.sequencing.sequencingRules,\n          this.sequencing.sequencingControls,\n          this.adl.nav,\n          seqOptions,\n        );\n\n        const overallOptions: { now?: () => Date } = {};\n        if (this.configuration.now) overallOptions.now = this.configuration.now;\n\n        this.overallSequencingProcess = new OverallSequencingProcess(\n          this.sequencing.activityTree,\n          this.sequencingProcess,\n          this.rollupProcess,\n          this.adl.nav,\n          (eventType: string, data?: any) => this.handleSequencingProcessEvent(eventType, data),\n          overallOptions,\n        );\n\n        this.log(\"info\", \"Sequencing processes created\");\n      }\n\n      // Start automatic sequencing if configured\n      if (this.shouldAutoStartSequencing()) {\n        this.startSequencing();\n      }\n\n      // Initialize CMI tracking\n      this.initializeCMITracking();\n\n      this.isInitialized = true;\n      this.fireEvent(\"onSequencingStart\", this.sequencing.getCurrentActivity());\n\n      this.log(\"info\", \"Sequencing service initialized successfully\");\n      return global_constants.SCORM_TRUE;\n    } catch (error) {\n      const errorMsg = `Failed to initialize sequencing service: ${error}`;\n      this.log(\"error\", errorMsg);\n      this.fireEvent(\"onSequencingError\", errorMsg, \"initialization\");\n      return global_constants.SCORM_FALSE;\n    }\n  }\n\n  /**\n   * Terminate the sequencing service\n   * Called when SCORM API Terminate() is called\n   */\n  public terminate(): string {\n    try {\n      this.log(\"info\", \"Terminating sequencing service\");\n\n      // Process any pending navigation requests\n      if (this.adl.nav.request !== \"_none_\") {\n        this.processNavigationRequest(this.adl.nav.request);\n      }\n\n      // Trigger final rollup\n      this.triggerFinalRollup();\n\n      // End sequencing session\n      this.endSequencing();\n\n      this.isInitialized = false;\n      this.fireEvent(\"onSequencingEnd\");\n\n      this.log(\"info\", \"Sequencing service terminated successfully\");\n      return global_constants.SCORM_TRUE;\n    } catch (error) {\n      const errorMsg = `Failed to terminate sequencing service: ${error}`;\n      this.log(\"error\", errorMsg);\n      this.fireEvent(\"onSequencingError\", errorMsg, \"termination\");\n      return global_constants.SCORM_FALSE;\n    }\n  }\n\n  /**\n   * Process a navigation request\n   * Implements the complete Overall Sequencing Process (OP.1)\n   */\n  public processNavigationRequest(request: string, targetActivityId?: string): boolean {\n    if (!this.isInitialized || !this.overallSequencingProcess) {\n      this.log(\"warn\", `Navigation request '${request}' ignored - sequencing not initialized`);\n      return false;\n    }\n\n    try {\n      this.log(\n        \"info\",\n        `Processing navigation request: ${request}${targetActivityId ? ` (target: ${targetActivityId})` : \"\"}`,\n      );\n\n      // Fire navigation request event\n      this.fireEvent(\"onNavigationRequest\", request, targetActivityId);\n\n      // Parse the request to NavigationRequestType\n      const navRequestType = this.parseNavigationRequest(request);\n      if (navRequestType === null) {\n        this.log(\"warn\", `Invalid navigation request: ${request}`);\n        return false;\n      }\n\n      // Process the navigation request through Overall Sequencing Process\n      const deliveryRequest: DeliveryRequest =\n        this.overallSequencingProcess.processNavigationRequest(\n          navRequestType,\n          targetActivityId || null,\n        );\n\n      // Handle the delivery request\n      if (deliveryRequest.valid && deliveryRequest.targetActivity) {\n        // Process delivery through activity delivery service\n        const sequencingResult: SequencingResult = {\n          deliveryRequest: deliveryRequest.valid\n            ? DeliveryRequestType.DELIVER\n            : DeliveryRequestType.DO_NOT_DELIVER,\n          targetActivity: deliveryRequest.targetActivity,\n          exception: deliveryRequest.exception || null,\n        };\n\n        // Store the result\n        this.lastSequencingResult = sequencingResult;\n        this.activityDeliveryService.processSequencingResult(sequencingResult);\n        this.log(\n          \"info\",\n          `Navigation request '${request}' resulted in activity delivery: ${deliveryRequest.targetActivity.id}`,\n        );\n        return true;\n      } else {\n        // No delivery requested or invalid\n        if (deliveryRequest.exception) {\n          this.log(\"warn\", `Navigation request '${request}' failed: ${deliveryRequest.exception}`);\n          this.fireEvent(\"onSequencingError\", deliveryRequest.exception, \"navigation\");\n        } else {\n          this.log(\"info\", `Navigation request '${request}' completed with no activity delivery`);\n        }\n        return deliveryRequest.valid;\n      }\n    } catch (error) {\n      const errorMsg = `Error processing navigation request '${request}': ${error}`;\n      this.log(\"error\", errorMsg);\n      this.fireEvent(\"onSequencingError\", errorMsg, \"navigation\");\n      return false;\n    }\n  }\n\n  /**\n   * Trigger rollup when CMI values change\n   * Called automatically when tracked CMI values are updated\n   */\n  public triggerRollupOnCMIChange(cmiElement: string, oldValue: any, newValue: any): void {\n    if (!this.configuration.autoRollupOnCMIChange || !this.isInitialized) {\n      return;\n    }\n\n    // Only trigger rollup for specific CMI elements that affect sequencing\n    const rollupTriggeringElements = [\n      \"cmi.completion_status\",\n      \"cmi.success_status\",\n      \"cmi.score.scaled\",\n      \"cmi.score.raw\",\n      \"cmi.score.min\",\n      \"cmi.score.max\",\n      \"cmi.progress_measure\",\n      \"cmi.objectives.n.success_status\",\n      \"cmi.objectives.n.completion_status\",\n      \"cmi.objectives.n.score.scaled\",\n    ];\n\n    if (!rollupTriggeringElements.some((element) => cmiElement.startsWith(element))) {\n      return;\n    }\n\n    try {\n      this.log(\n        \"debug\",\n        `Triggering rollup due to CMI change: ${cmiElement} = ${newValue} (was ${oldValue})`,\n      );\n\n      // Get current activity\n      const currentActivity = this.sequencing.getCurrentActivity();\n      if (!currentActivity) {\n        this.log(\"debug\", \"No current activity for rollup\");\n        return;\n      }\n\n      // Update activity status based on CMI changes\n      this.updateActivityFromCMI(currentActivity);\n\n      // Trigger rollup process\n      this.rollupProcess.overallRollupProcess(currentActivity);\n\n      this.fireEvent(\"onRollupComplete\", currentActivity);\n\n      this.log(\"debug\", `Rollup completed for activity: ${currentActivity.id}`);\n    } catch (error) {\n      const errorMsg = `Error during rollup on CMI change: ${error}`;\n      this.log(\"error\", errorMsg);\n      this.fireEvent(\"onSequencingError\", errorMsg, \"rollup\");\n    }\n  }\n\n  /**\n   * Set event listeners for sequencing events\n   */\n  public setEventListeners(listeners: SequencingEventListeners): void {\n    this.eventListeners = { ...this.eventListeners, ...listeners };\n    this.log(\"debug\", \"Sequencing event listeners updated\");\n  }\n\n  /**\n   * Update sequencing configuration\n   */\n  public updateConfiguration(config: Partial<SequencingConfiguration>): void {\n    this.configuration = { ...this.configuration, ...config };\n    this.log(\"debug\", \"Sequencing configuration updated\");\n  }\n\n  /**\n   * Get the current sequencing state\n   */\n  public getSequencingState(): {\n    isInitialized: boolean;\n    isActive: boolean;\n    currentActivity: Activity | null;\n    rootActivity: Activity | null;\n    lastSequencingResult: SequencingResult | null;\n  } {\n    return {\n      isInitialized: this.isInitialized,\n      isActive: this.isSequencingActive,\n      currentActivity: this.sequencing.getCurrentActivity(),\n      rootActivity: this.sequencing.getRootActivity(),\n      lastSequencingResult: this.lastSequencingResult,\n    };\n  }\n\n  /**\n   * Get the overall sequencing process instance\n   * @return {OverallSequencingProcess | null} The overall sequencing process or null if not initialized\n   */\n  public getOverallSequencingProcess(): OverallSequencingProcess | null {\n    return this.overallSequencingProcess;\n  }\n\n  // Private helper methods\n\n  /**\n   * Set up watchers for CMI value changes\n   */\n  private setupCMIChangeWatchers(): void {\n    // We'll hook into the setter methods to detect changes\n    // This would typically be done by modifying the CMI setters\n    // For now, we'll track changes when values are set\n  }\n\n  /**\n   * Initialize CMI tracking by storing current values\n   */\n  private initializeCMITracking(): void {\n    // Store initial CMI values for change detection\n    this.lastCMIValues.set(\"cmi.completion_status\", this.cmi.completion_status);\n    this.lastCMIValues.set(\"cmi.success_status\", this.cmi.success_status);\n    this.lastCMIValues.set(\"cmi.progress_measure\", this.cmi.progress_measure);\n\n    if (this.cmi.score) {\n      this.lastCMIValues.set(\"cmi.score.scaled\", this.cmi.score.scaled);\n      this.lastCMIValues.set(\"cmi.score.raw\", this.cmi.score.raw);\n    }\n  }\n\n  /**\n   * Check if sequencing should auto-start\n   */\n  private shouldAutoStartSequencing(): boolean {\n    // Auto-start if we have a root activity and no current activity\n    return !!(this.sequencing.activityTree.root && !this.sequencing.getCurrentActivity());\n  }\n\n  /**\n   * Start automatic sequencing\n   */\n  private startSequencing(): void {\n    if (!this.overallSequencingProcess) {\n      return;\n    }\n\n    try {\n      // Process a \"start\" navigation request to begin sequencing\n      const startResult = this.processNavigationRequest(\"start\");\n      if (startResult) {\n        this.isSequencingActive = true;\n        this.log(\"info\", \"Automatic sequencing started\");\n      }\n    } catch (error) {\n      this.log(\"error\", `Failed to start automatic sequencing: ${error}`);\n    }\n  }\n\n  /**\n   * End sequencing session\n   */\n  private endSequencing(): void {\n    this.isSequencingActive = false;\n    this.activityDeliveryService.reset();\n  }\n\n  /**\n   * Trigger final rollup on termination\n   */\n  private triggerFinalRollup(): void {\n    try {\n      const currentActivity = this.sequencing.getCurrentActivity();\n      if (currentActivity) {\n        // Update activity with final CMI values\n        this.updateActivityFromCMI(currentActivity);\n\n        // Trigger rollup\n        this.rollupProcess.overallRollupProcess(currentActivity);\n\n        this.log(\"info\", \"Final rollup completed\");\n      }\n    } catch (error) {\n      this.log(\"error\", `Error during final rollup: ${error}`);\n    }\n  }\n\n  /**\n   * Update activity properties from current CMI values\n   */\n  private updateActivityFromCMI(activity: Activity): void {\n    // Update completion status\n    if (this.cmi.completion_status !== \"unknown\") {\n      activity.completionStatus = this.cmi.completion_status as\n        | \"completed\"\n        | \"incomplete\"\n        | \"not attempted\"\n        | \"unknown\";\n    }\n\n    // Update success status\n    if (this.cmi.success_status !== \"unknown\") {\n      activity.successStatus = this.cmi.success_status as \"passed\" | \"failed\" | \"unknown\";\n      activity.objectiveSatisfiedStatus = this.cmi.success_status === \"passed\";\n    }\n\n    // Update progress measure\n    if (this.cmi.progress_measure !== \"\") {\n      const progressMeasure = parseFloat(this.cmi.progress_measure);\n      if (!isNaN(progressMeasure)) {\n        activity.progressMeasure = progressMeasure;\n        activity.progressMeasureStatus = true;\n      }\n    }\n\n    // Update score information\n    if (this.cmi.score && this.cmi.score.scaled !== \"\") {\n      const scaledScore = parseFloat(this.cmi.score.scaled);\n      if (!isNaN(scaledScore)) {\n        activity.objectiveNormalizedMeasure = scaledScore;\n        activity.objectiveMeasureStatus = true;\n      }\n    }\n  }\n\n  /**\n   * Parse navigation request string to NavigationRequestType\n   */\n  private parseNavigationRequest(request: string): NavigationRequestType | null {\n    // Handle choice and jump with targets\n    if (request.includes(\"choice\")) {\n      return NavigationRequestType.CHOICE;\n    }\n    if (request.includes(\"jump\")) {\n      return NavigationRequestType.JUMP;\n    }\n\n    // Handle standard navigation requests\n    switch (request) {\n      case \"start\":\n        return NavigationRequestType.START;\n      case \"resumeAll\":\n        return NavigationRequestType.RESUME_ALL;\n      case \"continue\":\n        return NavigationRequestType.CONTINUE;\n      case \"previous\":\n        return NavigationRequestType.PREVIOUS;\n      case \"exit\":\n        return NavigationRequestType.EXIT;\n      case \"exitAll\":\n        return NavigationRequestType.EXIT_ALL;\n      case \"abandon\":\n        return NavigationRequestType.ABANDON;\n      case \"abandonAll\":\n        return NavigationRequestType.ABANDON_ALL;\n      case \"suspendAll\":\n        return NavigationRequestType.SUSPEND_ALL;\n      case \"_none_\":\n        return NavigationRequestType.NOT_VALID;\n      default:\n        return null;\n    }\n  }\n\n  /**\n   * Handle activity delivery event\n   */\n  private handleActivityDelivery(activity: Activity): void {\n    this.log(\"info\", `Activity delivered: ${activity.id} - ${activity.title}`);\n    this.fireEvent(\"onActivityDelivery\", activity);\n  }\n\n  /**\n   * Handle activity unload event\n   */\n  private handleActivityUnload(activity: Activity): void {\n    this.log(\"info\", `Activity unloaded: ${activity.id} - ${activity.title}`);\n    this.fireEvent(\"onActivityUnload\", activity);\n  }\n\n  /**\n   * Handle sequencing completion event\n   */\n  private handleSequencingComplete(result: SequencingResult): void {\n    this.log(\"debug\", \"Sequencing completed\", result);\n  }\n\n  /**\n   * Handle sequencing error event\n   */\n  private handleSequencingError(error: string): void {\n    this.log(\"error\", `Sequencing error: ${error}`);\n    this.fireEvent(\"onSequencingError\", error, \"sequencing\");\n  }\n\n  /**\n   * Fire an event to registered listeners with enhanced error handling\n   */\n  private fireEvent(eventType: keyof SequencingEventListeners, ...args: any[]): void {\n    if (!this.configuration.enableEventSystem) {\n      return;\n    }\n\n    // Only fire debug event for non-debug events to prevent recursion\n    if (eventType !== \"onSequencingDebug\") {\n      this.fireDebugEvent(`${eventType} fired`, { eventType, argsLength: args.length });\n    }\n\n    try {\n      // Fire to internal listeners first\n      const listener = this.eventListeners[eventType];\n      if (listener && typeof listener === \"function\") {\n        try {\n          (listener as any)(...args);\n          this.log(\"debug\", `Internal listener for ${eventType} executed successfully`);\n        } catch (listenerError) {\n          this.log(\"error\", `Internal listener for ${eventType} failed: ${listenerError}`);\n          // Don't let listener errors stop event propagation\n        }\n      }\n\n      // Fire through the event service for broader integration\n      try {\n        this.eventService.processListeners(`Sequencing.${eventType}`, args[0], ...args.slice(1));\n        this.log(\"debug\", `Event service listeners for ${eventType} processed`);\n      } catch (eventServiceError) {\n        // Event service might not be properly initialized in test contexts\n        // This is not a critical error for sequencing functionality\n        this.log(\"warn\", `Event service failed for ${eventType}: ${eventServiceError}`);\n      }\n\n      // Fire to external global listeners if available\n      try {\n        if (typeof window !== \"undefined\" && (window as any).scormSequencingEvents) {\n          const globalListeners = (window as any).scormSequencingEvents;\n          if (globalListeners[eventType] && typeof globalListeners[eventType] === \"function\") {\n            globalListeners[eventType](...args);\n            this.log(\"debug\", `Global listener for ${eventType} executed`);\n          }\n        }\n      } catch (globalError) {\n        this.log(\"warn\", `Global listener for ${eventType} failed: ${globalError}`);\n      }\n    } catch (error) {\n      this.log(\"error\", `Critical error firing event ${eventType}: ${error}`);\n    }\n  }\n\n  /**\n   * Fire a debug event with detailed information\n   */\n  private fireDebugEvent(event: string, data?: any): void {\n    try {\n      // Direct execution to avoid recursion through fireEvent\n      const listener = this.eventListeners[\"onSequencingDebug\"];\n      if (listener && typeof listener === \"function\") {\n        listener(event, {\n          timestamp: new Date().toISOString(),\n          ...data,\n        });\n      }\n\n      // Also fire through event service directly\n      try {\n        this.eventService.processListeners(\"Sequencing.onSequencingDebug\", event, {\n          timestamp: new Date().toISOString(),\n          ...data,\n        });\n      } catch (eventServiceError) {\n        // Silent fail for event service debug events\n      }\n    } catch (error) {\n      // Silent fail for debug events to avoid recursion\n      console.debug(`Debug event failed: ${error}`);\n    }\n  }\n\n  /**\n   * Fire activity attempt start event\n   */\n  public fireActivityAttemptStart(activity: Activity): void {\n    this.fireEvent(\"onActivityAttemptStart\", activity);\n    this.fireDebugEvent(\"Activity attempt started\", {\n      activityId: activity.id,\n      title: activity.title,\n      attemptCount: activity.attemptCount,\n    });\n  }\n\n  /**\n   * Fire activity attempt end event\n   */\n  public fireActivityAttemptEnd(activity: Activity): void {\n    this.fireEvent(\"onActivityAttemptEnd\", activity);\n    this.fireDebugEvent(\"Activity attempt ended\", {\n      activityId: activity.id,\n      title: activity.title,\n      completionStatus: activity.completionStatus,\n      successStatus: activity.successStatus,\n    });\n  }\n\n  /**\n   * Fire limit condition check event\n   */\n  public fireLimitConditionCheck(activity: Activity, result: boolean): void {\n    this.fireEvent(\"onLimitConditionCheck\", activity, result);\n    this.fireDebugEvent(\"Limit condition check\", {\n      activityId: activity.id,\n      result,\n      attemptCount: activity.attemptCount,\n      attemptLimit: activity.attemptLimit,\n    });\n  }\n\n  /**\n   * Fire navigation validity update event\n   */\n  public fireNavigationValidityUpdate(validity: any): void {\n    this.fireEvent(\"onNavigationValidityUpdate\", validity);\n    this.fireDebugEvent(\"Navigation validity updated\", { validity });\n  }\n\n  /**\n   * Fire sequencing state change event\n   */\n  public fireSequencingStateChange(state: any): void {\n    this.fireEvent(\"onSequencingStateChange\", state);\n    this.fireDebugEvent(\"Sequencing state changed\", { stateKeys: Object.keys(state) });\n  }\n\n  /**\n   * Handle events from the sequencing process\n   */\n  private handleSequencingProcessEvent(eventType: string, data?: any): void {\n    try {\n      switch (eventType) {\n        case \"onActivityDelivery\":\n          this.fireEvent(\"onActivityDelivery\", data);\n          break;\n        case \"onLimitConditionCheck\":\n          this.fireLimitConditionCheck(data.activity, data.result);\n          break;\n        case \"onActivityAttemptStart\":\n          this.fireActivityAttemptStart(data);\n          break;\n        case \"onActivityAttemptEnd\":\n          this.fireActivityAttemptEnd(data);\n          break;\n        default:\n          // Pass through unknown events as debug events\n          this.fireDebugEvent(`Sequencing process event: ${eventType}`, data);\n      }\n    } catch (error) {\n      this.log(\"error\", `Error handling sequencing process event ${eventType}: ${error}`);\n    }\n  }\n\n  /**\n   * Log message with appropriate level\n   */\n  private log(level: \"debug\" | \"info\" | \"warn\" | \"error\", message: string, data?: any): void {\n    const logLevels = [\"debug\", \"info\", \"warn\", \"error\"];\n    const configLevel = this.configuration.logLevel || \"info\";\n\n    if (logLevels.indexOf(level) >= logLevels.indexOf(configLevel)) {\n      switch (level) {\n        case \"debug\":\n          this.loggingService.debug(\n            `[Sequencing] ${message}${data ? ` - ${JSON.stringify(data)}` : \"\"}`,\n          );\n          break;\n        case \"info\":\n          this.loggingService.info(\n            `[Sequencing] ${message}${data ? ` - ${JSON.stringify(data)}` : \"\"}`,\n          );\n          break;\n        case \"warn\":\n          this.loggingService.warn(\n            `[Sequencing] ${message}${data ? ` - ${JSON.stringify(data)}` : \"\"}`,\n          );\n          break;\n        case \"error\":\n          this.loggingService.error(\n            `[Sequencing] ${message}${data ? ` - ${JSON.stringify(data)}` : \"\"}`,\n          );\n          break;\n      }\n    }\n  }\n}\n","import BaseAPI from \"./BaseAPI\";\nimport { CMI } from \"./cmi/scorm2004/cmi\";\nimport * as Utilities from \"./utilities\";\nimport { StringKeyMap, stringMatches } from \"./utilities\";\nimport { global_constants, scorm2004_constants } from \"./constants/api_constants\";\nimport { scorm2004_errors } from \"./constants/error_codes\";\nimport { CMIObjectivesObject } from \"./cmi/scorm2004/objectives\";\nimport { ADL, ADLDataObject } from \"./cmi/scorm2004/adl\";\nimport {\n  CommitObject,\n  ResultObject,\n  ScoreObject,\n  Settings,\n  SequencingStateMetadata,\n} from \"./types/api_types\";\nimport {\n  ActivitySettings,\n  RollupRuleSettings,\n  RollupRulesSettings,\n  SequencingControlsSettings,\n  SequencingRuleSettings,\n  SequencingRulesSettings,\n  SequencingSettings,\n  SequencingEventListeners,\n} from \"./types/sequencing_types\";\nimport { RuleCondition, SequencingRule } from \"./cmi/scorm2004/sequencing/sequencing_rules\";\nimport { RollupCondition, RollupRule } from \"./cmi/scorm2004/sequencing/rollup_rules\";\nimport { scorm2004_regex } from \"./constants/regex\"; // Import functions from extracted modules\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport {\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n} from \"./cmi/scorm2004/interactions\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { CorrectResponses, ResponseType } from \"./constants/response_constants\";\nimport { CMICommentsObject } from \"./cmi/scorm2004/comments\";\nimport ValidLanguages from \"./constants/language_constants\";\nimport { CompletionStatus, SuccessStatus, LogLevelEnum } from \"./constants/enums\";\nimport { Sequencing } from \"./cmi/scorm2004/sequencing/sequencing\";\nimport { Activity } from \"./cmi/scorm2004/sequencing/activity\";\nimport { SequencingService, SequencingConfiguration } from \"./services/SequencingService\";\n\n/**\n * API class for SCORM 2004\n */\nclass Scorm2004API extends BaseAPI {\n  private _version: string = \"1.0\";\n  private _globalObjectives: CMIObjectivesObject[] = [];\n  private readonly _sequencing: Sequencing;\n  private _sequencingService: SequencingService | null = null;\n  private _extractedScoItemIds: string[] = [];\n\n  /**\n   * Constructor for SCORM 2004 API\n   * @param {Settings} settings\n   */\n  constructor(settings?: Settings) {\n    if (settings) {\n      if (settings.mastery_override === undefined) {\n        settings.mastery_override = false;\n      }\n    }\n\n    super(scorm2004_errors, settings);\n\n    this.cmi = new CMI();\n    this.adl = new ADL();\n    this._sequencing = new Sequencing();\n\n    // Connect the sequencing object to the ADL's sequencing property\n    // The Sequencing object is used for both configuration and runtime navigation processing\n    // It needs to be attached to the ADL object for runtime navigation requests (adl.nav.request)\n    this.adl.sequencing = this._sequencing;\n\n    // Configure sequencing if settings are provided\n    if (settings?.sequencing) {\n      this.configureSequencing(settings.sequencing);\n    }\n\n    // Initialize sequencing service\n    this.initializeSequencingService(settings);\n\n    // Rename functions to match 2004 Spec and expose to modules\n    this.Initialize = this.lmsInitialize;\n    this.Terminate = this.lmsFinish;\n    this.GetValue = this.lmsGetValue;\n    this.SetValue = this.lmsSetValue;\n    this.Commit = this.lmsCommit;\n    this.GetLastError = this.lmsGetLastError;\n    this.GetErrorString = this.lmsGetErrorString;\n    this.GetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  public cmi: CMI;\n  public adl: ADL;\n\n  public Initialize: () => string;\n  public Terminate: () => string;\n  public GetValue: (CMIElement: string) => string;\n  public SetValue: (CMIElement: string, value: any) => string;\n  public Commit: () => string;\n  public GetLastError: () => string;\n  public GetErrorString: (CMIErrorCode: string | number) => string;\n  public GetDiagnostic: (CMIErrorCode: string | number) => string;\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset(settings?: Settings) {\n    this.commonReset(settings);\n\n    this.cmi?.reset();\n    this.adl?.reset();\n    this._sequencing?.reset();\n  }\n\n  /**\n   * Getter for _version\n   * @return {string}\n   */\n  get version(): string {\n    return this._version;\n  }\n\n  /**\n   * Getter for _globalObjectives\n   */\n  get globalObjectives(): CMIObjectivesObject[] {\n    return this._globalObjectives;\n  }\n\n  /**\n   * Initialize function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize(): string {\n    this.cmi.initialize();\n    const result = this.initialize(\n      \"Initialize\",\n      \"LMS was already initialized!\",\n      \"LMS is already finished!\",\n    );\n\n    // Initialize sequencing service after successful API initialization\n    if (result === global_constants.SCORM_TRUE && this._sequencingService) {\n      this._sequencingService.initialize();\n    }\n\n    // Auto-load sequencing state after successful initialization if configured\n    if (result === global_constants.SCORM_TRUE && this.settings.sequencingStatePersistence) {\n      this.loadSequencingState().catch(() => {\n        this.apiLog(\"lmsInitialize\", \"Failed to auto-load sequencing state\", LogLevelEnum.WARN);\n      });\n    }\n\n    return result;\n  }\n\n  /**\n   * Terminate function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish(): string {\n    (async () => {\n      await this.internalFinish();\n    })();\n    return global_constants.SCORM_TRUE;\n  }\n\n  async internalFinish(): Promise<string> {\n    // Terminate sequencing service first (before normal termination)\n    if (this._sequencingService) {\n      this._sequencingService.terminate();\n    }\n\n    const result = await this.terminate(\"Terminate\", true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      // Handle navigation requests - first try sequencing service, then fall back to legacy\n      let navigationHandled = false;\n\n      if (this._sequencingService && this.adl.nav.request !== \"_none_\") {\n        try {\n          // Extract target for choice/jump requests\n          let target = \"\";\n          let request = this.adl.nav.request;\n          const choiceJumpRegex = new RegExp(scorm2004_regex.NAVEvent);\n          const matches = request.match(choiceJumpRegex);\n          if (matches) {\n            if (matches.groups?.choice_target) {\n              target = matches.groups?.choice_target;\n              request = \"choice\";\n            } else if (matches.groups?.jump_target) {\n              target = matches.groups?.jump_target;\n              request = \"jump\";\n            }\n          }\n\n          // Process navigation request through sequencing service\n          navigationHandled = this._sequencingService.processNavigationRequest(request, target);\n        } catch (error) {\n          // Fall back to legacy navigation handling if sequencing fails\n          navigationHandled = false;\n        }\n      }\n\n      // Legacy navigation handling (fallback)\n      if (!navigationHandled) {\n        if (this.adl.nav.request !== \"_none_\") {\n          const navActions: { [key: string]: string } = {\n            continue: \"SequenceNext\",\n            previous: \"SequencePrevious\",\n            choice: \"SequenceChoice\",\n            jump: \"SequenceJump\",\n            exit: \"SequenceExit\",\n            exitAll: \"SequenceExitAll\",\n            abandon: \"SequenceAbandon\",\n            abandonAll: \"SequenceAbandonAll\",\n          };\n\n          let request = this.adl.nav.request;\n          const choiceJumpRegex = new RegExp(scorm2004_regex.NAVEvent);\n          const matches = request.match(choiceJumpRegex);\n          let target = \"\";\n          if (matches) {\n            if (matches.groups?.choice_target) {\n              target = matches.groups?.choice_target;\n              request = \"choice\";\n            } else if (matches.groups?.jump_target) {\n              target = matches.groups?.jump_target;\n              request = \"jump\";\n            }\n          }\n          const action = navActions[request];\n          if (action) {\n            this.processListeners(action, \"adl.nav.request\", target);\n          }\n        } else if (this.settings.autoProgress) {\n          this.processListeners(\"SequenceNext\", undefined, \"next\");\n        }\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * GetValue function from SCORM 2004 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement: string): string {\n    const adlNavRequestRegex =\n      \"^adl\\\\.nav\\\\.request_valid\\\\.(choice|jump)\\\\.{target=\\\\S{0,}([a-zA-Z0-9-_]+)}$\";\n    if (stringMatches(CMIElement, adlNavRequestRegex)) {\n      const matches = CMIElement.match(adlNavRequestRegex);\n      if (matches) {\n        const request = matches[1];\n        const target = matches[2]?.replace(/{target=/g, \"\").replace(/}/g, \"\") || \"\";\n        if (request === \"choice\" || request === \"jump\") {\n          if (this.settings.scoItemIdValidator) {\n            return String(this.settings.scoItemIdValidator(target));\n          }\n          // If we have extracted IDs from sequencing, use those exclusively\n          if (this._extractedScoItemIds.length > 0) {\n            return String(this._extractedScoItemIds.includes(target));\n          }\n          // Otherwise use the scoItemIds from settings\n          return String(this.settings?.scoItemIds?.includes(target));\n        }\n      }\n    }\n    return this.getValue(\"GetValue\", true, CMIElement);\n  }\n\n  /**\n   * SetValue function from SCORM 2004 Spec\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement: string, value: any): string {\n    // Get old value for change detection with error handling\n    let oldValue: any = null;\n    try {\n      oldValue = this.getCMIValue(CMIElement);\n    } catch (error) {\n      // If getting the old value fails, proceed without change detection\n      // This prevents errors during normal operation when CMI elements don't exist yet\n      oldValue = null;\n    }\n\n    // Proceed with regular setting for non-objective elements or fallback behavior\n    const result = this.setValue(\"SetValue\", \"Commit\", true, CMIElement, value);\n\n    // If successful and sequencing service is available, trigger rollup on critical CMI changes\n    if (result === global_constants.SCORM_TRUE && this._sequencingService) {\n      try {\n        this._sequencingService.triggerRollupOnCMIChange(CMIElement, oldValue, value);\n      } catch (rollupError) {\n        // Log rollup error but don't fail the SetValue operation\n        console.warn(`Sequencing rollup failed for ${CMIElement}: ${rollupError}`);\n      }\n    }\n\n    // Auto-save sequencing state on critical CMI changes if configured\n    if (\n      result === global_constants.SCORM_TRUE &&\n      this.settings.sequencingStatePersistence?.autoSaveOn === \"setValue\"\n    ) {\n      const sequencingElements = [\n        \"cmi.completion_status\",\n        \"cmi.success_status\",\n        \"cmi.score.scaled\",\n        \"cmi.objectives\",\n        \"adl.nav.request\",\n      ];\n\n      if (sequencingElements.some((element) => CMIElement.startsWith(element))) {\n        this.saveSequencingState().catch(() => {\n          this.apiLog(\"lmsSetValue\", \"Failed to auto-save sequencing state\", LogLevelEnum.WARN);\n        });\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Commit function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit(): string {\n    if (this.settings.asyncCommit) {\n      this.scheduleCommit(500, \"Commit\");\n    } else {\n      (async () => {\n        const result = await this.commit(\"Commit\", false);\n\n        // Auto-save sequencing state after successful commit if configured\n        if (\n          result === global_constants.SCORM_TRUE &&\n          this.settings.sequencingStatePersistence?.autoSaveOn === \"commit\"\n        ) {\n          await this.saveSequencingState().catch(() => {\n            this.apiLog(\"lmsCommit\", \"Failed to auto-save sequencing state\", LogLevelEnum.WARN);\n          });\n        }\n      })();\n    }\n    return global_constants.SCORM_TRUE;\n  }\n\n  /**\n   * GetLastError function from SCORM 2004 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError(): string {\n    return this.getLastError(\"GetLastError\");\n  }\n\n  /**\n   * GetErrorString function from SCORM 2004 Spec\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode: string | number): string {\n    return this.getErrorString(\"GetErrorString\", CMIErrorCode);\n  }\n\n  /**\n   * GetDiagnostic function from SCORM 2004 Spec\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode: string | number): string {\n    return this.getDiagnostic(\"GetDiagnostic\", CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object - delegates to CMIValueHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  override setCMIValue(CMIElement: string, value: any): string {\n    // Check if we're updating a global or local objective\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      const parts = CMIElement.split(\".\");\n      const index = Number(parts[2]);\n      const element_base = `cmi.objectives.${index}`;\n\n      let objective_id;\n      const setting_id = stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\\\\.id\");\n\n      if (setting_id) {\n        // If we're setting the objective ID, capture it directly\n        objective_id = value;\n      } else {\n        // Find existing objective ID if available\n        const objective = this.cmi.objectives.findObjectiveByIndex(index);\n        objective_id = objective ? objective.id : undefined;\n      }\n\n      // Check if the objective ID matches a global objective\n      const is_global = objective_id && this.settings.globalObjectiveIds?.includes(objective_id);\n\n      if (is_global) {\n        // Locate or create an entry in _globalObjectives for the global objective\n        let global_index = this._globalObjectives.findIndex((obj) => obj.id === objective_id);\n\n        if (global_index === -1) {\n          global_index = this._globalObjectives.length;\n          const newGlobalObjective = new CMIObjectivesObject();\n          newGlobalObjective.id = objective_id;\n          this._globalObjectives.push(newGlobalObjective);\n        }\n\n        // Update the global objective\n        const global_element = CMIElement.replace(\n          element_base,\n          `_globalObjectives.${global_index}`,\n        );\n        this._commonSetCMIValue(\"SetGlobalObjectiveValue\", true, global_element, value);\n      }\n    }\n    return this._commonSetCMIValue(\"SetValue\", true, CMIElement, value);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array - delegates to CMIElementHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI|null}\n   */\n  getChildElement(CMIElement: string, value: any, foundFirstIndex: boolean): BaseCMI | null {\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      return new CMIObjectivesObject();\n    }\n\n    if (foundFirstIndex) {\n      if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+\")) {\n        return this.createCorrectResponsesObject(CMIElement, value);\n      } else if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+\")) {\n        return new CMIInteractionsObjectivesObject();\n      }\n    } else if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\")) {\n      return new CMIInteractionsObject();\n    }\n\n    if (stringMatches(CMIElement, \"cmi\\\\.comments_from_learner\\\\.\\\\d+\")) {\n      return new CMICommentsObject();\n    } else if (stringMatches(CMIElement, \"cmi\\\\.comments_from_lms\\\\.\\\\d+\")) {\n      return new CMICommentsObject(true);\n    }\n\n    if (stringMatches(CMIElement, \"adl\\\\.data\\\\.\\\\d+\")) {\n      return new ADLDataObject();\n    }\n\n    return null;\n  }\n\n  /**\n   * Creates a correct responses object for an interaction - delegates to CMIElementHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {BaseCMI|null}\n   */\n  private createCorrectResponsesObject(CMIElement: string, value: any): BaseCMI | null {\n    const parts = CMIElement.split(\".\");\n    const index = Number(parts[2]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    if (this.isInitialized()) {\n      if (typeof interaction === \"undefined\" || !interaction.type) {\n        this.throwSCORMError(CMIElement, scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED, CMIElement);\n        return null;\n      } else {\n        this.checkDuplicateChoiceResponse(CMIElement, interaction, value);\n        const response_type = CorrectResponses[interaction.type];\n        if (response_type) {\n          this.checkValidResponseType(CMIElement, response_type, value, interaction.type);\n        } else {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.GENERAL_SET_FAILURE,\n            `Incorrect Response Type: ${interaction.type}`,\n          );\n          return null;\n        }\n      }\n    }\n\n    if (this.lastErrorCode === \"0\") {\n      return new CMIInteractionsCorrectResponsesObject(interaction);\n    }\n\n    return null;\n  }\n\n  /**\n   * Checks for valid response types - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {ResponseType} response_type\n   * @param {any} value\n   * @param {string} interaction_type\n   */\n  checkValidResponseType(\n    CMIElement: string,\n    response_type: ResponseType,\n    value: any,\n    interaction_type: string,\n  ) {\n    let nodes = [];\n    if (response_type?.delimiter) {\n      nodes = String(value).split(response_type.delimiter);\n    } else {\n      nodes[0] = value;\n    }\n\n    if (nodes.length > 0 && nodes.length <= response_type.max) {\n      this.checkCorrectResponseValue(CMIElement, interaction_type, nodes, value);\n    } else if (nodes.length > response_type.max) {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.GENERAL_SET_FAILURE,\n        `Data Model Element Pattern Too Long: ${value}`,\n      );\n    }\n  }\n\n  /**\n   * Checks for duplicate 'choice' responses - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {CMIInteractionsObject} interaction\n   * @param {any} value\n   */\n  checkDuplicateChoiceResponse(CMIElement: string, interaction: CMIInteractionsObject, value: any) {\n    const interaction_count = interaction.correct_responses._count;\n    if (interaction.type === \"choice\") {\n      for (let i = 0; i < interaction_count && this.lastErrorCode === \"0\"; i++) {\n        const response = interaction.correct_responses.childArray[i];\n        if (response.pattern === value) {\n          this.throwSCORMError(CMIElement, scorm2004_errors.GENERAL_SET_FAILURE, `${value}`);\n        }\n      }\n    }\n  }\n\n  /**\n   * Validate correct response - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {*} value\n   */\n  validateCorrectResponse(CMIElement: string, value: any) {\n    const parts = CMIElement.split(\".\");\n    const index = Number(parts[2]);\n    const pattern_index = Number(parts[4]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    const interaction_count = interaction.correct_responses._count;\n    this.checkDuplicateChoiceResponse(CMIElement, interaction, value);\n\n    const response_type = CorrectResponses[interaction.type];\n    if (\n      response_type &&\n      (typeof response_type.limit === \"undefined\" || interaction_count <= response_type.limit)\n    ) {\n      this.checkValidResponseType(CMIElement, response_type, value, interaction.type);\n\n      if (\n        (this.lastErrorCode === \"0\" &&\n          (!response_type.duplicate ||\n            !this.checkDuplicatedPattern(interaction.correct_responses, pattern_index, value))) ||\n        (this.lastErrorCode === \"0\" && value === \"\")\n      ) {\n        // do nothing, we want the inverse\n      } else {\n        if (this.lastErrorCode === \"0\") {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.GENERAL_SET_FAILURE,\n            `Data Model Element Pattern Already Exists: ${CMIElement} - ${value}`,\n          );\n        }\n      }\n    } else {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.GENERAL_SET_FAILURE,\n        `Data Model Element Collection Limit Reached: ${CMIElement} - ${value}`,\n      );\n    }\n  }\n\n  /**\n   * Gets a value from the CMI Object - delegates to CMIValueHandlerModule\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  override getCMIValue(CMIElement: string): any {\n    return this._commonGetCMIValue(\"GetValue\", true, CMIElement);\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {(string|number)} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  override getLmsErrorMessageDetails(errorNumber: string | number, detail: boolean): string {\n    let basicMessage = \"\";\n    let detailMessage = \"\";\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    const errorDescription = scorm2004_constants.error_descriptions[errorNumber];\n    if (errorDescription) {\n      basicMessage = errorDescription.basicMessage;\n      detailMessage = errorDescription.detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Check to see if a correct_response value has been duplicated - delegates to ValidationModule\n   * @param {CMIArray} correct_response\n   * @param {number} current_index\n   * @param {*} value\n   * @return {boolean}\n   */\n  checkDuplicatedPattern(correct_response: CMIArray, current_index: number, value: any): boolean {\n    let found = false;\n    const count = correct_response._count;\n    for (let i = 0; i < count && !found; i++) {\n      if (i !== current_index && correct_response.childArray[i] === value) {\n        found = true;\n      }\n    }\n    return found;\n  }\n\n  /**\n   * Checks for a valid correct_response value - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {string} interaction_type\n   * @param {Array} nodes\n   * @param {*} value\n   */\n  checkCorrectResponseValue(\n    CMIElement: string,\n    interaction_type: string,\n    nodes: Array<any>,\n    value: any,\n  ) {\n    const response = CorrectResponses[interaction_type];\n    if (!response) {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.TYPE_MISMATCH,\n        `Incorrect Response Type: ${interaction_type}`,\n      );\n      return;\n    }\n    const formatRegex = new RegExp(response.format);\n    for (let i = 0; i < nodes.length && this.lastErrorCode === \"0\"; i++) {\n      if (interaction_type.match(\"^(fill-in|long-fill-in|matching|performance|sequencing)$\")) {\n        nodes[i] = this.removeCorrectResponsePrefixes(CMIElement, nodes[i]);\n      }\n\n      if (response?.delimiter2) {\n        const values = nodes[i].split(response.delimiter2);\n        if (values.length === 2) {\n          const matches = values[0].match(formatRegex);\n          if (!matches) {\n            this.throwSCORMError(\n              CMIElement,\n              scorm2004_errors.TYPE_MISMATCH,\n              `${interaction_type}: ${value}`,\n            );\n          } else {\n            if (!response.format2 || !values[1].match(new RegExp(response.format2))) {\n              this.throwSCORMError(\n                CMIElement,\n                scorm2004_errors.TYPE_MISMATCH,\n                `${interaction_type}: ${value}`,\n              );\n            }\n          }\n        } else {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.TYPE_MISMATCH,\n            `${interaction_type}: ${value}`,\n          );\n        }\n      } else {\n        const matches = nodes[i].match(formatRegex);\n        if ((!matches && value !== \"\") || (!matches && interaction_type === \"true-false\")) {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.TYPE_MISMATCH,\n            `${interaction_type}: ${value}`,\n          );\n        } else {\n          if (interaction_type === \"numeric\" && nodes.length > 1) {\n            if (Number(nodes[0]) > Number(nodes[1])) {\n              this.throwSCORMError(\n                CMIElement,\n                scorm2004_errors.TYPE_MISMATCH,\n                `${interaction_type}: ${value}`,\n              );\n            }\n          } else {\n            if (nodes[i] !== \"\" && response.unique) {\n              for (let j = 0; j < i && this.lastErrorCode === \"0\"; j++) {\n                if (nodes[i] === nodes[j]) {\n                  this.throwSCORMError(\n                    CMIElement,\n                    scorm2004_errors.TYPE_MISMATCH,\n                    `${interaction_type}: ${value}`,\n                  );\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove prefixes from correct_response - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {string} node\n   * @return {*}\n   */\n  removeCorrectResponsePrefixes(CMIElement: string, node: string): any {\n    let seenOrder = false;\n    let seenCase = false;\n    let seenLang = false;\n\n    const prefixRegex = new RegExp(\"^({(lang|case_matters|order_matters)=([^}]+)})\");\n    let matches = node.match(prefixRegex);\n    let langMatches = null;\n    while (matches) {\n      switch (matches[2]) {\n        case \"lang\":\n          langMatches = node.match(scorm2004_regex.CMILangcr);\n          if (langMatches) {\n            const lang = langMatches[3];\n            if (lang !== undefined && lang.length > 0) {\n              if (!ValidLanguages.includes(lang.toLowerCase())) {\n                this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n              }\n            }\n          }\n          seenLang = true;\n          break;\n        case \"case_matters\":\n          if (!seenLang && !seenOrder && !seenCase) {\n            if (matches[3] !== \"true\" && matches[3] !== \"false\") {\n              this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n            }\n          }\n\n          seenCase = true;\n          break;\n        case \"order_matters\":\n          if (!seenCase && !seenLang && !seenOrder) {\n            if (matches[3] !== \"true\" && matches[3] !== \"false\") {\n              this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n            }\n          }\n\n          seenOrder = true;\n          break;\n      }\n      node = node.substring(matches[1]?.length || 0);\n      matches = node.match(prefixRegex);\n    }\n\n    return node;\n  }\n\n  /**\n   * Replace the whole API with another\n   * @param {Scorm2004API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI: Scorm2004API) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.adl = newAPI.adl;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit - delegates to DataSerializationModule\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} includeTotalTime - Whether to include total time in the commit data\n   * @return {object|Array}\n   */\n  renderCommitCMI(\n    terminateCommit: boolean,\n    includeTotalTime: boolean = false,\n  ): StringKeyMap | Array<any> {\n    const cmiExport: StringKeyMap = this.renderCMIToJSONObject();\n\n    if (terminateCommit || includeTotalTime) {\n      (cmiExport.cmi as any).total_time = (this.cmi as any).getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened: StringKeyMap = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case \"flattened\":\n        return Utilities.flatten(cmiExport);\n      case \"params\":\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case \"json\":\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit - delegates to DataSerializationModule\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} includeTotalTime - Whether to include total time in the commit data\n   * @return {CommitObject}\n   */\n  renderCommitObject(terminateCommit: boolean, includeTotalTime: boolean = false): CommitObject {\n    const cmiExport = this.renderCommitCMI(terminateCommit, includeTotalTime);\n    const calculateTotalTime = terminateCommit || includeTotalTime;\n    const totalTimeDuration = calculateTotalTime ? this.cmi.getCurrentTotalTime() : \"\";\n    const totalTimeSeconds = Utilities.getDurationAsSeconds(\n      totalTimeDuration,\n      scorm2004_regex.CMITimespan,\n    );\n\n    let completionStatus = CompletionStatus.UNKNOWN;\n    let successStatus = SuccessStatus.UNKNOWN;\n    if (this.cmi.completion_status) {\n      if (this.cmi.completion_status === \"completed\") {\n        completionStatus = CompletionStatus.COMPLETED;\n      } else if (this.cmi.completion_status === \"incomplete\") {\n        completionStatus = CompletionStatus.INCOMPLETE;\n      }\n    }\n    if (this.cmi.success_status) {\n      if (this.cmi.success_status === \"passed\") {\n        successStatus = SuccessStatus.PASSED;\n      } else if (this.cmi.success_status === \"failed\") {\n        successStatus = SuccessStatus.FAILED;\n      }\n    }\n\n    const scoreObject: ScoreObject = this.cmi?.score?.getScoreObject() || {};\n    const commitObject: CommitObject = {\n      completionStatus: completionStatus,\n      successStatus: successStatus,\n      totalTimeSeconds: totalTimeSeconds,\n      runtimeData: cmiExport as StringKeyMap,\n    };\n    if (scoreObject) {\n      commitObject.score = scoreObject;\n    }\n    return commitObject;\n  }\n\n  /**\n   * Attempts to store the data to the LMS - delegates to DataSerializationModule\n   *\n   * @param {boolean} terminateCommit\n   * @return {ResultObject}\n   */\n  async storeData(terminateCommit: boolean): Promise<ResultObject> {\n    if (terminateCommit) {\n      if (this.cmi.mode === \"normal\") {\n        if (this.cmi.credit === \"credit\") {\n          if (this.cmi.completion_threshold && this.cmi.progress_measure) {\n            if (this.cmi.progress_measure >= this.cmi.completion_threshold) {\n              this.cmi.completion_status = \"completed\";\n            } else {\n              this.cmi.completion_status = \"incomplete\";\n            }\n          }\n          if (this.cmi.scaled_passing_score && this.cmi.score.scaled) {\n            if (this.cmi.score.scaled >= this.cmi.scaled_passing_score) {\n              this.cmi.success_status = \"passed\";\n            } else {\n              this.cmi.success_status = \"failed\";\n            }\n          }\n        }\n      }\n    }\n\n    let navRequest = false;\n    if (\n      this.adl.nav.request !==\n        ((this.startingData?.adl as StringKeyMap)?.nav as StringKeyMap)?.request &&\n      this.adl.nav.request !== \"_none_\"\n    ) {\n      navRequest = true;\n    }\n\n    const commitObject = this.getCommitObject(terminateCommit);\n    if (typeof this.settings.lmsCommitUrl === \"string\") {\n      const result = await this.processHttpRequest(\n        this.settings.lmsCommitUrl,\n        commitObject,\n        terminateCommit,\n      );\n\n      // Check if this is a sequencing call, and then call the necessary JS\n      if (\n        navRequest &&\n        result.navRequest !== undefined &&\n        result.navRequest !== \"\" &&\n        typeof result.navRequest === \"string\"\n      ) {\n        Function(`\"use strict\";(() => { ${result.navRequest} })()`)();\n      } else if (result?.navRequest && !navRequest) {\n        if (\n          typeof result.navRequest === \"object\" &&\n          Object.hasOwnProperty.call(result.navRequest, \"name\")\n        ) {\n          this.processListeners(result.navRequest.name as string, result.navRequest.data as string);\n        }\n      }\n\n      return result;\n    }\n\n    return {\n      result: global_constants.SCORM_TRUE,\n      errorCode: 0,\n    };\n  }\n\n  /**\n   * Configure sequencing based on provided settings\n   * @param {SequencingSettings} sequencingSettings - The sequencing settings\n   */\n  private configureSequencing(sequencingSettings: SequencingSettings): void {\n    // Configure activity tree\n    if (sequencingSettings.activityTree) {\n      this.configureActivityTree(sequencingSettings.activityTree);\n    }\n\n    // Configure sequencing rules\n    if (sequencingSettings.sequencingRules) {\n      this.configureSequencingRules(sequencingSettings.sequencingRules);\n    }\n\n    // Configure sequencing controls\n    if (sequencingSettings.sequencingControls) {\n      this.configureSequencingControls(sequencingSettings.sequencingControls);\n    }\n\n    // Configure rollup rules\n    if (sequencingSettings.rollupRules) {\n      this.configureRollupRules(sequencingSettings.rollupRules);\n    }\n  }\n\n  /**\n   * Configure activity tree based on provided settings\n   * @param {ActivitySettings} activityTreeSettings - The activity tree settings\n   */\n  private configureActivityTree(activityTreeSettings: ActivitySettings): void {\n    // Create root activity\n    const rootActivity = this.createActivity(activityTreeSettings);\n\n    // Create activity tree\n    const activityTree = this._sequencing.activityTree;\n    activityTree.root = rootActivity;\n\n    // Extract activity IDs for use as scoItemIds\n    this._extractedScoItemIds = this.extractActivityIds(rootActivity);\n  }\n\n  /**\n   * Extract all activity IDs from an activity and its children\n   * @param {Activity} activity - The activity to extract IDs from\n   * @return {string[]} - Array of activity IDs\n   */\n  private extractActivityIds(activity: Activity): string[] {\n    const ids = [activity.id];\n\n    // Recursively extract IDs from children\n    for (const child of activity.children) {\n      ids.push(...this.extractActivityIds(child));\n    }\n\n    return ids;\n  }\n\n  /**\n   * Create an activity from settings\n   * @param {ActivitySettings} activitySettings - The activity settings\n   * @return {Activity} - The created activity\n   */\n  private createActivity(activitySettings: ActivitySettings): Activity {\n    // Create activity\n    const activity = new Activity(activitySettings.id, activitySettings.title);\n\n    // Set activity properties\n    if (activitySettings.isVisible !== undefined) {\n      activity.isVisible = activitySettings.isVisible;\n    }\n    if (activitySettings.isActive !== undefined) {\n      activity.isActive = activitySettings.isActive;\n    }\n    if (activitySettings.isSuspended !== undefined) {\n      activity.isSuspended = activitySettings.isSuspended;\n    }\n    if (activitySettings.isCompleted !== undefined) {\n      activity.isCompleted = activitySettings.isCompleted;\n    }\n\n    // Create child activities\n    if (activitySettings.children) {\n      for (const childSettings of activitySettings.children) {\n        const childActivity = this.createActivity(childSettings);\n        activity.addChild(childActivity);\n      }\n    }\n    // Apply per-activity sequencing settings if provided\n    if (activitySettings.sequencingControls) {\n      const sc = activity.sequencingControls;\n      const c = activitySettings.sequencingControls;\n      if (c.enabled !== undefined) sc.enabled = c.enabled;\n      if (c.choiceExit !== undefined) sc.choiceExit = c.choiceExit;\n      if (c.flow !== undefined) sc.flow = c.flow;\n      if (c.forwardOnly !== undefined) sc.forwardOnly = c.forwardOnly;\n      if (c.useCurrentAttemptObjectiveInfo !== undefined)\n        sc.useCurrentAttemptObjectiveInfo = c.useCurrentAttemptObjectiveInfo;\n      if (c.useCurrentAttemptProgressInfo !== undefined)\n        sc.useCurrentAttemptProgressInfo = c.useCurrentAttemptProgressInfo;\n      if (c.preventActivation !== undefined) sc.preventActivation = c.preventActivation;\n      if (c.constrainChoice !== undefined) sc.constrainChoice = c.constrainChoice;\n      if (c.rollupObjectiveSatisfied !== undefined)\n        sc.rollupObjectiveSatisfied = c.rollupObjectiveSatisfied;\n      if (c.rollupProgressCompletion !== undefined)\n        sc.rollupProgressCompletion = c.rollupProgressCompletion;\n      if (c.objectiveMeasureWeight !== undefined)\n        sc.objectiveMeasureWeight = c.objectiveMeasureWeight;\n    }\n\n    if (activitySettings.sequencingRules) {\n      const rs = activitySettings.sequencingRules;\n      if (rs.preConditionRules) {\n        for (const ruleSettings of rs.preConditionRules) {\n          const rule = this.createSequencingRule(ruleSettings);\n          activity.sequencingRules.addPreConditionRule(rule);\n        }\n      }\n      if (rs.exitConditionRules) {\n        for (const ruleSettings of rs.exitConditionRules) {\n          const rule = this.createSequencingRule(ruleSettings);\n          activity.sequencingRules.addExitConditionRule(rule);\n        }\n      }\n      if (rs.postConditionRules) {\n        for (const ruleSettings of rs.postConditionRules) {\n          const rule = this.createSequencingRule(ruleSettings);\n          activity.sequencingRules.addPostConditionRule(rule);\n        }\n      }\n    }\n\n    if (activitySettings.rollupRules && activitySettings.rollupRules.rules) {\n      for (const ruleSettings of activitySettings.rollupRules.rules) {\n        const rule = this.createRollupRule(ruleSettings);\n        activity.rollupRules.addRule(rule);\n      }\n    }\n\n    return activity;\n  }\n\n  /**\n   * Configure sequencing rules based on provided settings\n   * @param {SequencingRulesSettings} sequencingRulesSettings - The sequencing rules settings\n   */\n  private configureSequencingRules(sequencingRulesSettings: SequencingRulesSettings): void {\n    const sequencingRules = this._sequencing.sequencingRules;\n\n    // Configure pre-condition rules\n    if (sequencingRulesSettings.preConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.preConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addPreConditionRule(rule);\n      }\n    }\n\n    // Configure exit condition rules\n    if (sequencingRulesSettings.exitConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.exitConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addExitConditionRule(rule);\n      }\n    }\n\n    // Configure post-condition rules\n    if (sequencingRulesSettings.postConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.postConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addPostConditionRule(rule);\n      }\n    }\n  }\n\n  /**\n   * Create a sequencing rule from settings\n   * @param {SequencingRuleSettings} ruleSettings - The sequencing rule settings\n   * @return {SequencingRule} - The created sequencing rule\n   */\n  private createSequencingRule(ruleSettings: SequencingRuleSettings): SequencingRule {\n    // Create rule\n    const rule = new SequencingRule(ruleSettings.action, ruleSettings.conditionCombination);\n\n    // Add conditions\n    for (const conditionSettings of ruleSettings.conditions) {\n      const condition = new RuleCondition(\n        conditionSettings.condition,\n        conditionSettings.operator,\n        new Map(Object.entries(conditionSettings.parameters || {})),\n      );\n      rule.addCondition(condition);\n    }\n\n    return rule;\n  }\n\n  /**\n   * Configure sequencing controls based on provided settings\n   * @param {SequencingControlsSettings} sequencingControlsSettings - The sequencing controls settings\n   */\n  private configureSequencingControls(\n    sequencingControlsSettings: SequencingControlsSettings,\n  ): void {\n    const sequencingControls = this._sequencing.sequencingControls;\n\n    // Set sequencing control properties\n    if (sequencingControlsSettings.enabled !== undefined) {\n      sequencingControls.enabled = sequencingControlsSettings.enabled;\n    }\n    if (sequencingControlsSettings.choiceExit !== undefined) {\n      sequencingControls.choiceExit = sequencingControlsSettings.choiceExit;\n    }\n    if (sequencingControlsSettings.flow !== undefined) {\n      sequencingControls.flow = sequencingControlsSettings.flow;\n    }\n    if (sequencingControlsSettings.forwardOnly !== undefined) {\n      sequencingControls.forwardOnly = sequencingControlsSettings.forwardOnly;\n    }\n    if (sequencingControlsSettings.useCurrentAttemptObjectiveInfo !== undefined) {\n      sequencingControls.useCurrentAttemptObjectiveInfo =\n        sequencingControlsSettings.useCurrentAttemptObjectiveInfo;\n    }\n    if (sequencingControlsSettings.useCurrentAttemptProgressInfo !== undefined) {\n      sequencingControls.useCurrentAttemptProgressInfo =\n        sequencingControlsSettings.useCurrentAttemptProgressInfo;\n    }\n    if (sequencingControlsSettings.preventActivation !== undefined) {\n      sequencingControls.preventActivation = sequencingControlsSettings.preventActivation;\n    }\n    if (sequencingControlsSettings.constrainChoice !== undefined) {\n      sequencingControls.constrainChoice = sequencingControlsSettings.constrainChoice;\n    }\n    if (sequencingControlsSettings.rollupObjectiveSatisfied !== undefined) {\n      sequencingControls.rollupObjectiveSatisfied =\n        sequencingControlsSettings.rollupObjectiveSatisfied;\n    }\n    if (sequencingControlsSettings.rollupProgressCompletion !== undefined) {\n      sequencingControls.rollupProgressCompletion =\n        sequencingControlsSettings.rollupProgressCompletion;\n    }\n    if (sequencingControlsSettings.objectiveMeasureWeight !== undefined) {\n      sequencingControls.objectiveMeasureWeight = sequencingControlsSettings.objectiveMeasureWeight;\n    }\n  }\n\n  /**\n   * Configure rollup rules based on provided settings\n   * @param {RollupRulesSettings} rollupRulesSettings - The rollup rules settings\n   */\n  private configureRollupRules(rollupRulesSettings: RollupRulesSettings): void {\n    const rollupRules = this._sequencing.rollupRules;\n\n    // Configure rollup rules\n    if (rollupRulesSettings.rules) {\n      for (const ruleSettings of rollupRulesSettings.rules) {\n        const rule = this.createRollupRule(ruleSettings);\n        rollupRules.addRule(rule);\n      }\n    }\n  }\n\n  /**\n   * Create a rollup rule from settings\n   * @param {RollupRuleSettings} ruleSettings - The rollup rule settings\n   * @return {RollupRule} - The created rollup rule\n   */\n  private createRollupRule(ruleSettings: RollupRuleSettings): RollupRule {\n    // Create rule\n    const rule = new RollupRule(\n      ruleSettings.action,\n      ruleSettings.consideration,\n      ruleSettings.minimumCount,\n      ruleSettings.minimumPercent,\n    );\n\n    // Add conditions\n    for (const conditionSettings of ruleSettings.conditions) {\n      const condition = new RollupCondition(\n        conditionSettings.condition,\n        new Map(Object.entries(conditionSettings.parameters || {})),\n      );\n      rule.addCondition(condition);\n    }\n\n    return rule;\n  }\n\n  /**\n   * Initialize the sequencing service\n   * @param {Settings} settings - API settings that may include sequencing configuration\n   */\n  private initializeSequencingService(settings?: Settings): void {\n    try {\n      // Create sequencing configuration from settings\n      const sequencingConfig: SequencingConfiguration = {\n        autoRollupOnCMIChange: settings?.sequencing?.autoRollupOnCMIChange ?? true,\n        autoProgressOnCompletion: settings?.sequencing?.autoProgressOnCompletion ?? false,\n        validateNavigationRequests: settings?.sequencing?.validateNavigationRequests ?? true,\n        enableEventSystem: settings?.sequencing?.enableEventSystem ?? true,\n        logLevel: settings?.sequencing?.logLevel ?? \"info\",\n      };\n\n      // Create the sequencing service\n      this._sequencingService = new SequencingService(\n        this._sequencing,\n        this.cmi,\n        this.adl,\n        this.eventService || this, // Use eventService if available, fallback to this\n        this.loggingService || (console as any), // Use loggingService if available, fallback to console\n        sequencingConfig,\n      );\n\n      // Set up event listeners if provided in settings\n      if (settings?.sequencing?.eventListeners) {\n        this._sequencingService.setEventListeners(settings.sequencing.eventListeners);\n      }\n    } catch (error) {\n      // If sequencing service initialization fails, log error but continue\n      console.warn(\"Failed to initialize sequencing service:\", error);\n      this._sequencingService = null;\n    }\n  }\n\n  /**\n   * Get the sequencing service (for advanced sequencing operations)\n   * @return {SequencingService | null}\n   */\n  public getSequencingService(): SequencingService | null {\n    return this._sequencingService;\n  }\n\n  /**\n   * Set sequencing event listeners\n   * @param {SequencingEventListeners} listeners - Event listeners for sequencing events\n   */\n  public setSequencingEventListeners(listeners: SequencingEventListeners): void {\n    if (this._sequencingService) {\n      this._sequencingService.setEventListeners(listeners);\n    }\n  }\n\n  /**\n   * Update sequencing configuration\n   * @param {SequencingConfiguration} config - New sequencing configuration\n   */\n  public updateSequencingConfiguration(config: SequencingConfiguration): void {\n    if (this._sequencingService) {\n      this._sequencingService.updateConfiguration(config);\n    }\n  }\n\n  /**\n   * Get current sequencing state information\n   * @return {object} Current sequencing state\n   */\n  public getSequencingState(): any {\n    if (this._sequencingService) {\n      return this._sequencingService.getSequencingState();\n    }\n    return {\n      isInitialized: false,\n      isActive: false,\n      currentActivity: null,\n      rootActivity: this._sequencing.getRootActivity(),\n      lastSequencingResult: null,\n    };\n  }\n\n  /**\n   * Process a navigation request directly (for advanced use)\n   * @param {string} request - Navigation request\n   * @param {string} targetActivityId - Target activity ID for choice/jump requests\n   * @return {boolean} True if request was processed successfully\n   */\n  public processNavigationRequest(request: string, targetActivityId?: string): boolean {\n    if (this._sequencingService) {\n      return this._sequencingService.processNavigationRequest(request, targetActivityId);\n    }\n    return false;\n  }\n\n  /**\n   * Save current sequencing state to persistent storage\n   * @param {Partial<SequencingStateMetadata>} metadata - Optional metadata override\n   * @return {Promise<boolean>} Promise resolving to success status\n   */\n  public async saveSequencingState(metadata?: Partial<SequencingStateMetadata>): Promise<boolean> {\n    if (!this.settings.sequencingStatePersistence) {\n      this.apiLog(\n        \"saveSequencingState\",\n        \"No persistence configuration provided\",\n        LogLevelEnum.WARN,\n      );\n      return false;\n    }\n\n    try {\n      const stateData = this.serializeSequencingState();\n      const fullMetadata: SequencingStateMetadata = {\n        learnerId: this.cmi.learner_id || \"unknown\",\n        courseId: this.settings.courseId || \"unknown\",\n        attemptNumber: 1,\n        lastUpdated: new Date().toISOString(),\n        version: this.settings.sequencingStatePersistence.stateVersion || \"1.0\",\n        ...metadata,\n      };\n\n      const config = this.settings.sequencingStatePersistence;\n      let dataToSave = stateData;\n\n      // Compress if enabled (using simple base64 encoding for now)\n      if (config.compress !== false) {\n        dataToSave = this.compressStateData(stateData);\n      }\n\n      // Check size limits\n      if (config.maxStateSize && dataToSave.length > config.maxStateSize) {\n        throw new Error(`State size ${dataToSave.length} exceeds limit ${config.maxStateSize}`);\n      }\n\n      const success = await config.persistence.saveState(dataToSave, fullMetadata);\n\n      if (config.debugPersistence) {\n        this.apiLog(\n          \"saveSequencingState\",\n          `State save ${success ? \"succeeded\" : \"failed\"}: size=${dataToSave.length}`,\n          success ? LogLevelEnum.INFO : LogLevelEnum.WARN,\n        );\n      }\n\n      return success;\n    } catch (error) {\n      this.apiLog(\n        \"saveSequencingState\",\n        `Error saving sequencing state: ${error instanceof Error ? error.message : String(error)}`,\n        LogLevelEnum.ERROR,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Load sequencing state from persistent storage\n   * @param {Partial<SequencingStateMetadata>} metadata - Optional metadata override\n   * @return {Promise<boolean>} Promise resolving to success status\n   */\n  public async loadSequencingState(metadata?: Partial<SequencingStateMetadata>): Promise<boolean> {\n    if (!this.settings.sequencingStatePersistence) {\n      this.apiLog(\n        \"loadSequencingState\",\n        \"No persistence configuration provided\",\n        LogLevelEnum.WARN,\n      );\n      return false;\n    }\n\n    try {\n      const fullMetadata: SequencingStateMetadata = {\n        learnerId: this.cmi.learner_id || \"unknown\",\n        courseId: this.settings.courseId || \"unknown\",\n        attemptNumber: 1,\n        version: this.settings.sequencingStatePersistence.stateVersion || \"1.0\",\n        ...metadata,\n      };\n\n      const config = this.settings.sequencingStatePersistence;\n      const stateData = await config.persistence.loadState(fullMetadata);\n\n      if (!stateData) {\n        if (config.debugPersistence) {\n          this.apiLog(\n            \"loadSequencingState\",\n            \"No sequencing state found to load\",\n            LogLevelEnum.INFO,\n          );\n        }\n        return false;\n      }\n\n      // Decompress if needed\n      let dataToLoad = stateData;\n      if (config.compress !== false) {\n        dataToLoad = this.decompressStateData(stateData);\n      }\n\n      const success = this.deserializeSequencingState(dataToLoad);\n\n      if (config.debugPersistence) {\n        this.apiLog(\n          \"loadSequencingState\",\n          `State load ${success ? \"succeeded\" : \"failed\"}: size=${stateData.length}`,\n          success ? LogLevelEnum.INFO : LogLevelEnum.WARN,\n        );\n      }\n\n      return success;\n    } catch (error) {\n      this.apiLog(\n        \"loadSequencingState\",\n        `Error loading sequencing state: ${error instanceof Error ? error.message : String(error)}`,\n        LogLevelEnum.ERROR,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Serialize current sequencing state to JSON string\n   * @return {string} Serialized state\n   */\n  private serializeSequencingState(): string {\n    const state: any = {\n      version: this.settings.sequencingStatePersistence?.stateVersion || \"1.0\",\n      timestamp: new Date().toISOString(),\n      sequencing: null,\n      currentActivityId: null,\n      globalObjectives: this._globalObjectives.map((obj) => obj.toJSON()),\n      adlNavState: {\n        request: this.adl.nav.request,\n        request_valid: this.adl.nav.request_valid,\n      },\n      contentDelivered: false,\n    };\n\n    // Get sequencing state from overall sequencing process if available\n    if (this._sequencingService) {\n      const overallProcess = this._sequencingService.getOverallSequencingProcess();\n      if (overallProcess) {\n        // Use the getSequencingState method from overall_sequencing_process\n        const sequencingState = overallProcess.getSequencingState();\n        state.sequencing = sequencingState;\n        state.contentDelivered = overallProcess.hasContentBeenDelivered();\n      }\n\n      // Get current activity\n      const currentActivity = this._sequencing.getCurrentActivity();\n      if (currentActivity) {\n        state.currentActivityId = currentActivity.id;\n      }\n    }\n\n    return JSON.stringify(state);\n  }\n\n  /**\n   * Deserialize sequencing state from JSON string\n   * @param {string} stateData - Serialized state data\n   * @return {boolean} Success status\n   */\n  private deserializeSequencingState(stateData: string): boolean {\n    try {\n      const state = JSON.parse(stateData);\n\n      // Version compatibility check\n      const expectedVersion = this.settings.sequencingStatePersistence?.stateVersion || \"1.0\";\n      if (state.version !== expectedVersion) {\n        this.apiLog(\n          \"deserializeSequencingState\",\n          `State version mismatch: ${state.version} vs expected ${expectedVersion}`,\n          LogLevelEnum.WARN,\n        );\n      }\n\n      // Restore sequencing state\n      if (state.sequencing && this._sequencingService) {\n        const overallProcess = this._sequencingService.getOverallSequencingProcess();\n        if (overallProcess) {\n          overallProcess.restoreSequencingState(state.sequencing);\n\n          // Restore content delivered flag\n          if (state.contentDelivered) {\n            // Mark content as delivered (there's no direct setter, so we'll need to add one)\n            // For now, we'll just log it\n            this.apiLog(\n              \"deserializeSequencingState\",\n              \"Content delivery state restored\",\n              LogLevelEnum.DEBUG,\n            );\n          }\n        }\n      }\n\n      // Restore global objectives\n      if (state.globalObjectives && Array.isArray(state.globalObjectives)) {\n        this._globalObjectives = state.globalObjectives.map((objData: any) => {\n          const obj = new CMIObjectivesObject();\n          // If available, populate from serialized data (method added on CMIObjectivesObject)\n          // Fallback to direct field assignment if fromJSON is unavailable at runtime\n          if ((obj as any).fromJSON) {\n            (obj as any).fromJSON(objData);\n          } else {\n            Object.assign(obj as any, objData);\n          }\n          return obj;\n        });\n      }\n\n      // Restore ADL nav state\n      if (state.adlNavState) {\n        this.adl.nav.request = state.adlNavState.request || \"_none_\";\n        this.adl.nav.request_valid = state.adlNavState.request_valid || {};\n      }\n\n      return true;\n    } catch (error) {\n      this.apiLog(\n        \"deserializeSequencingState\",\n        `Error deserializing sequencing state: ${error instanceof Error ? error.message : String(error)}`,\n        LogLevelEnum.ERROR,\n      );\n      return false;\n    }\n  }\n\n  /**\n   * Simple compression using base64 encoding\n   * @param {string} data - Data to compress\n   * @return {string} Compressed data\n   */\n  private compressStateData(data: string): string {\n    // For now, just use base64 encoding\n    // In a real implementation, you might use a library like lz-string\n    if (typeof btoa !== \"undefined\") {\n      return btoa(encodeURIComponent(data));\n    }\n    return data;\n  }\n\n  /**\n   * Simple decompression from base64\n   * @param {string} data - Data to decompress\n   * @return {string} Decompressed data\n   */\n  private decompressStateData(data: string): string {\n    // For now, just use base64 decoding\n    // In a real implementation, you might use a library like lz-string\n    if (typeof atob !== \"undefined\") {\n      try {\n        return decodeURIComponent(atob(data));\n      } catch {\n        return data;\n      }\n    }\n    return data;\n  }\n}\n\nexport default Scorm2004API;\n"],"names":["global_constants","scorm2004_constants","cmi_children","comments_children","score_children","objectives_children","correct_responses_children","student_preference_children","interactions_children","adl_data_children","error_descriptions","basicMessage","detailMessage","designations","D","H","M","S","getSecondsAsISODuration","memoize","seconds","duration","remainder","Object","entries","forEach","_ref","designationsKey","current_seconds","value","Math","floor","num","String","indexOf","parts","split","length","countDecimals","toFixed","includes","getDurationAsSeconds","durationRegex","RegExp","match","years","_","days","hours","minutes","exec","result","toString","validateISO8601Duration","flatten","data","recurse","cur","prop","Array","isArray","item","i","keys","filter","p","prototype","hasOwnProperty","call","isEmpty","stringMatches","str","tester","test","fn","keyFn","cache","Map","_len","arguments","args","_key","key","JSON","stringify","has","get","set","NAVBoolean","SuccessStatus","CompletionStatus","LogLevelEnum","DEBUG","INFO","WARN","ERROR","NONE","DefaultSettings","autocommit","autocommitSeconds","asyncCommit","sendFullCommit","lmsCommitUrl","dataCommitFormat","commitRequestDataType","autoProgress","logLevel","selfReportSessionTime","alwaysSendTotalTime","renderCommonCommitFields","strict_errors","xhrHeaders","xhrWithCredentials","fetchMode","useBeaconInsteadOfFetch","responseHandler","async","response","httpResult","json","text","responseText","parse","e","errorCode","status","requestHandler","commitObject","onLogMessage","defaultLogHandler","scoItemIds","scoItemIdValidator","globalObjectiveIds","enableOfflineSupport","courseId","syncOnInitialize","syncOnTerminate","maxSyncAttempts","messageLevel","logMessage","console","error","warn","info","debug","log","ScheduledCommit","constructor","API","when","callback","this","_cancelled","_API","_timeout","setTimeout","wrapper","bind","_callback","cancel","clearTimeout","isInitialized","commit","HttpService","settings","error_codes","processHttpRequest","url","params","apiLog","processListeners","undefined","genericError","GENERAL","_handleImmediateRequest","processedParams","performFetch","transformResponse","message","Error","stack","enhancedError","errorMessage","errorDetails","errorType","name","originalError","body","contentType","_prepareRequestBody","navigator","sendBeacon","Blob","type","then","catch","join","performBeacon","init","method","mode","headers","keepalive","credentials","fetch","beaconSuccess","Promise","resolve","ok","parseError","statusText","substring","_isSuccessResponse","updateSettings","EventService","listenerMap","listenerCount","parseListenerName","listenerName","listenerSplit","functionName","CMIElement","replace","on","listenerFunctions","listenerFunction","parsedListener","listeners","push","off","removeIndex","findIndex","obj","splice","delete","clear","newListeners","listener","listenerHasCMIElement","CMIElementsMatch","endsWith","prefix","slice","startsWith","reset","SerializationService","loadFromFlattenedJSON","setCMIValue","isNotInitialized","setStartingData","int_pattern","obj_pattern","interactions","objectives","others","intMatch","index","field","objMatch","sort","a","b","localeCompare","processItems","items","loadFromJSON","pattern","regex","from","m","unflatten","currentCMIElement","tempCMIElement","renderCMIToJSONString","cmi","k","v","renderCMIToJSONObject","getCommitObject","terminateCommit","renderCommitObject","renderCommitCMI","apiLogLevel","includeTotalTime","BaseScormValidationError","super","_errorCode","setPrototypeOf","ValidationError","detailedMessage","_detailedMessage","_errorMessage","LoggingService","_logLevel","_logHandler","getInstance","_instance","setLogLevel","level","getLogLevel","setLogHandler","handler","shouldLog","getNumericLevel","getLoggingService","ErrorHandlingService","errorCodes","getLmsErrorMessageDetails","loggingService","_lastErrorCode","_errorCodes","_apiLog","_getLmsErrorMessageDetails","_loggingService","lastErrorCode","throwSCORMError","errorNumber","formattedMessage","clearSCORMError","success","handleValueAccessException","returnValue","validationError","jsonError","OfflineStorageService","storeName","syncQueue","isOnline","onLine","syncInProgress","window","addEventListener","handleOnlineStatusChange","wasOnline","syncOfflineData","storeOffline","commitData","queueItem","id","Date","now","random","timestamp","syncAttempts","currentQueue","getFromStorage","saveToStorage","getOfflineData","remainingQueue","sendDataToLMS","processedData","isDeviceOnline","storedData","localStorage","getItem","setItem","hasPendingOfflineData","some","BaseCMI","cmi_element","jsonString","_initialized","_cmi_element","initialized","initialize","BaseRootCMI","start_time","_start_time","setStartTime","getTime","global_errors","INITIALIZATION_FAILED","INITIALIZED","TERMINATED","TERMINATION_FAILURE","TERMINATION_BEFORE_INIT","MULTIPLE_TERMINATION","RETRIEVE_BEFORE_INIT","RETRIEVE_AFTER_TERM","STORE_BEFORE_INIT","STORE_AFTER_TERM","COMMIT_BEFORE_INIT","COMMIT_AFTER_TERM","ARGUMENT_ERROR","CHILDREN_ERROR","COUNT_ERROR","GENERAL_GET_FAILURE","GENERAL_SET_FAILURE","GENERAL_COMMIT_FAILURE","UNDEFINED_DATA_MODEL","UNIMPLEMENTED_ELEMENT","VALUE_NOT_INITIALIZED","INVALID_SET_VALUE","READ_ONLY_ELEMENT","WRITE_ONLY_ELEMENT","TYPE_MISMATCH","VALUE_OUT_OF_RANGE","DEPENDENCY_NOT_ESTABLISHED","scorm12_errors","scorm2004_errors","MULTIPLE_TERMINATIONS","CMIArray","__children","children","_errorClass","errorClass","childArray","wipe","_children","_count","toJSON","BaseAPI","httpService","eventService","serializationService","cmiDataService","errorHandlingService","offlineStorageService","_settings","_courseId","TypeError","currentState","_error_codes","_httpService","_eventService","element","_serializationService","_errorHandlingService","detail","createErrorHandlingService","_offlineStorageService","offlineData","runtimeData","commonReset","clearScheduledCommit","startingData","callbackName","initializeMessage","terminationMessage","isTerminated","hasPendingData","syncSuccess","messageString","padEnd","formatMessage","previousSettings","terminate","checkTerminated","checkState","storeData","getValue","getCMIValue","setValue","commitCallback","scheduleCommit","getLastError","getErrorString","CMIErrorCode","getDiagnostic","beforeInitError","afterTermError","_errorNumber","_CMIElement","_value","_commonSetCMIValue","methodName","scorm2004","structure","refObject","foundFirstIndex","invalidErrorMessage","invalidErrorCode","idx","attribute","_checkObjectHasProperty","validateCorrectResponse","parseInt","isNaN","newChild","getChildElement","_commonGetCMIValue","uninitializedErrorMessage","_isTargetValid","getFlattenedCMI","Utilities","immediate","StringKeyMap","getOwnPropertyDescriptor","getPrototypeOf","Scorm2004ValidationError","checkValidFormat","regexPattern","allowEmptyString","formatRegex","matches","checkValidRange","rangePattern","ranges","check2004ValidFormat","check2004ValidRange","scorm12_regex","scorm2004_regex","CMILearnerPreference","_audio_level","_language","_delivery_speed","_audio_captioning","audio_level","language","delivery_speed","audio_captioning","LearnerResponses","format","max","delimiter","unique","choice","matching","format2","delimiter2","performance","sequencing","likert","numeric","other","CorrectResponses","duplicate","limit","delimiter3","CMIInteractions","CMIInteractionsObject","_id","_type","_timestamp","_weighting","_learner_response","_result","_latency","_description","correct_responses","weighting","learner_response","nodes","response_type","values","j","latency","description","CMIInteractionsObjectivesObject","stripBrackets","delim","escapeRegex","s","splitUnescaped","reDelim","splitRe","unescapeRe","map","part","CMIInteractionsCorrectResponsesObject","interactionType","_pattern","_interactionType","responseDef","trim","subDelim1","rawNodes","raw","delim1","Set","size","fmt1","fmt2","checkSingle","checkPair","delimBracketed","n","node","numDelim","nums","allParts","part1","part2","validatePattern","Scorm12ValidationError","check12ValidFormat","check12ValidRange","validationService","validateScore","decimalRegex","scoreRange","invalidTypeCode","invalidRangeCode","validateScorm12Audio","validateScorm12Language","validateScorm12Speed","validateScorm12Text","validateReadOnly","CMIScore","_raw","_min","__score_range","score_range","_max","__invalid_error_code","__invalid_type_code","__invalid_range_code","__decimal_regex","__error_class","min","getScoreObject","scoreObject","Number","parseFloat","Scorm2004CMIScore","_scaled","scaled","CMICommentsFromLMS","CMICommentsFromLearner","CMICommentsObject","readOnlyAfterInit","_comment","_location","_readOnlyAfterInit","comment","location","CMIObjectives","findObjectiveById","find","objective","findObjectiveByIndex","setObjectiveByIndex","CMIObjectivesObject","_success_status","_completion_status","_progress_measure","score","success_status","completion_status","progress_measure","fromJSON","CMIMetadata","__version","_version","CMILearner","_learner_id","_learner_name","learner_id","learner_name","CMIStatus","CMISession","_entry","_exit","_session_time","_total_time","entry","exit","session_time","total_time","getCurrentTotalTime","sessionTime","Util","first","second","CMIContent","_launch_data","_suspend_data","launch_data","suspend_data","CMISettings","_credit","_mode","_time_limit_action","_max_time_allowed","credit","time_limit_action","max_time_allowed","CMIThresholds","_scaled_passing_score","_completion_threshold","scaled_passing_score","completion_threshold","CMI","metadata","learner","session","content","thresholds","learner_preference","comments_from_learner","comments_from_lms","ADL","ADLData","_sequencing","nav","ADLNav","adlNav","_request","request_valid","ADLNavRequestValid","request","ADLDataObject","_store","store","_continue","_previous","_choice","_jump","_exitAll","_abandon","_abandonAll","_suspendAll","continue","previous","jump","exitAll","abandon","abandonAll","suspendAll","RuleConditionOperator","RuleActionType","_RuleCondition","condition","operator","parameters","_condition","_operator","_parameters","setNowProvider","_now","evaluate","activity","successStatus","objectiveMeasureStatus","greaterThanValue","objectiveNormalizedMeasure","lessThanValue","isCompleted","completionStatus","attemptCount","attemptLimit","evaluateTimeLimitExceeded","evaluateOutsideAvailableTimeRange","timeLimitDuration","durationMs","parseISO8601Duration","attemptExperiencedDuration","beginTime","beginTimeLimit","endTime","endTimeLimit","fromEntries","RuleCondition","SequencingRule","action","conditionCombination","_conditions","_action","_conditionCombination","conditions","addCondition","removeCondition","every","SequencingRules","_preConditionRules","_exitConditionRules","_postConditionRules","preConditionRules","addPreConditionRule","rule","exitConditionRules","addExitConditionRule","postConditionRules","addPostConditionRule","evaluatePreConditionRules","evaluateExitConditionRules","evaluatePostConditionRules","RollupActionType","RollupConsiderationType","RollupCondition","RollupRule","consideration","minimumCount","minimumPercent","_consideration","_minimumCount","_minimumPercent","matchingChildren","child","RollupRules","_rules","rules","addRule","removeRule","processRollup","getAvailableChildren","completionRollup","successRollup","sequencingControls","rollupObjectiveSatisfied","_objectiveRollupUsingMeasure","_defaultCompletionRollup","_defaultSuccessRollup","objectiveMeasureWeight","totalWeight","weightedSum","hasValidMeasures","childWeight","normalizedMeasure","scaledPassingScore","objectiveSatisfiedStatus","ValidLanguages","SelectionTiming","RandomizationTiming","SequencingControls","_enabled","_choiceExit","_flow","_forwardOnly","_useCurrentAttemptObjectiveInfo","_useCurrentAttemptProgressInfo","_preventActivation","_constrainChoice","_stopForwardTraversal","_rollupObjectiveSatisfied","_rollupProgressCompletion","_objectiveMeasureWeight","_selectionTiming","_selectCount","_selectionCountStatus","_randomizeChildren","_randomizationTiming","_reorderChildren","enabled","choiceExit","flow","forwardOnly","useCurrentAttemptObjectiveInfo","useCurrentAttemptProgressInfo","preventActivation","constrainChoice","stopForwardTraversal","rollupProgressCompletion","isChoiceNavigationAllowed","isFlowNavigationAllowed","isForwardNavigationAllowed","isBackwardNavigationAllowed","selectionTiming","selectCount","selectionCountStatus","randomizeChildren","randomizationTiming","reorderChildren","Activity","title","_title","_parent","_isVisible","_isActive","_isSuspended","_isCompleted","_completionStatus","_successStatus","_attemptCount","_attemptCompletionAmount","_attemptAbsoluteDuration","_attemptExperiencedDuration","_activityAbsoluteDuration","_activityExperiencedDuration","_objectiveSatisfiedStatus","_objectiveMeasureStatus","_objectiveNormalizedMeasure","_scaledPassingScore","_progressMeasure","_progressMeasureStatus","_attemptAbsoluteStartTime","_learnerPrefs","_activityAttemptActive","_isHiddenFromChoice","_isAvailable","_attemptLimit","_attemptAbsoluteDurationLimit","_activityAbsoluteDurationLimit","_timeLimitAction","_timeLimitDuration","_beginTimeLimit","_endTimeLimit","_processedChildren","_isNewAttempt","_sequencingControls","_sequencingRules","_rollupRules","addChild","removeChild","parent","isVisible","isActive","isSuspended","attemptCompletionAmount","incrementAttemptCount","controls","progressMeasure","progressMeasureStatus","attemptAbsoluteStartTime","learnerPrefs","activityAttemptActive","isHiddenFromChoice","isAvailable","hasAttemptLimitExceeded","timeLimitAction","attemptAbsoluteDurationLimit","activityAbsoluteDurationLimit","activityExperiencedDuration","attemptAbsoluteDuration","activityAbsoluteDuration","sequencingRules","rollupRules","setProcessedChildren","processedChildren","resetProcessedChildren","isNewAttempt","ActivityTree","root","_root","_currentActivity","_suspendedActivity","_activities","_addActivitiesToMap","currentActivity","suspendedActivity","getActivity","getAllActivities","getParent","getChildren","getSiblings","getNextSibling","useAvailableChildren","siblings","getPreviousSibling","getFirstChild","getLastChild","getCommonAncestor","activity1","activity2","path1","current","unshift","Sequencing","_adlNav","_activityTree","activityTree","_processRollupRecursive","getCurrentActivity","getRootActivity","RollupProcess","eventCallback","rollupStateLog","overallRollupProcess","measureRollupProcess","objectiveRollupProcess","activityProgressRollupProcess","c","checkChildForRollupSubprocess","complexWeightedMeasure","calculateComplexWeightedMeasure","enableThresholdBias","clusters","identifyActivityClusters","processCrossClusterDependencies","ruleResult","objectiveRollupUsingRules","measureResult","objectiveRollupUsingMeasure","objectiveRollupUsingDefault","satisfiedRules","SATISFIED","notSatisfiedRules","NOT_SATISFIED","evaluateRollupRule","completedRules","COMPLETED","incompleteRules","INCOMPLETE","allCompleted","rollupType","contributingChildren","satisfiedCount","contributes","evaluateRollupConditionsSubprocess","ALL","ANY","AT_LEAST_COUNT","AT_LEAST_PERCENT","validateRollupStateConsistency","rootActivity","activityId","toISOString","inconsistencies","validateActivityRollupState","count","processGlobalObjectiveMapping","globalObjectives","globalObjectiveCount","synchronizeGlobalObjectives","processedObjectives","options","totalWeightedMeasure","weightingLog","enableBias","adjustedWeight","calculateAdjustedWeight","childId","measure","weight","weightingDetails","clusterCount","dependencyMap","cluster","analyzeCrossClusterDependencies","processOrder","resolveDependencyOrder","clusterId","processClusterRollup","processedClusters","state","measureStatus","satisfiedStatus","activityObjectives","getActivityObjectives","objectiveId","globalObjective","syncObjectiveState","localObjective","getLocalObjectiveState","baseWeight","resolved","resolving","add","dependencies","depId","readSatisfiedStatus","satisfiedStatusKnown","readNormalizedMeasure","normalizedMeasureKnown","satisfiedByMeasure","writeSatisfiedStatus","writeNormalizedMeasure","writeCompletionStatus","completionStatusKnown","readCompletionStatus","writeProgressMeasure","progressMeasureKnown","readProgressMeasure","updateAttemptData","updateActivityAttemptData","localState","globalState","synchronizationTime","suspendData","SelectionRandomization","selectChildrenProcess","NEVER","ONCE","selectedChildren","availableIndices","randomIndex","childIndex","randomizeChildrenProcess","randomizedChildren","tempI","tempJ","applySelectionAndRandomization","shouldApplySelection","shouldApplyRandomization","ON_EACH_NEW_ATTEMPT","isSelectionNeeded","isRandomizationNeeded","SequencingRequestType","DeliveryRequestType","SequencingResult","targetActivity","exception","deliveryRequest","SequencingProcess","getAttemptElapsedSecondsHook","getAttemptElapsedSeconds","getActivityElapsedSecondsHook","getActivityElapsedSeconds","sequencingRequestProcess","targetActivityId","startSequencingRequestProcess","resumeAllSequencingRequestProcess","continueSequencingRequestProcess","previousSequencingRequestProcess","choiceSequencingRequestProcess","jumpSequencingRequestProcess","exitSequencingRequestProcess","exitAllSequencingRequestProcess","abandonSequencingRequestProcess","abandonAllSequencingRequestProcess","suspendAllSequencingRequestProcess","retrySequencingRequestProcess","retryAllSequencingRequestProcess","deliverableActivity","findFirstDeliverableActivity","checkActivityProcess","ensureSelectionAndRandomization","deliverable","flowResult","flowSubprocess","isActivityInTree","commonAncestor","findCommonAncestor","terminateDescendentAttemptsProcess","activityPath","pathActivity","flowActivityTraversalSubprocess","_direction","considerChildren","availableChildren","limitConditionsCheckProcess","preConditionResult","sequencingRulesCheckProcess","SKIP","DISABLED","skipExitRules","exitAction","exitActionRulesSubprocess","processDeferredExitAction","EXIT","EXIT_PARENT","EXIT_ALL","postConditionRulesSubprocess","postAction","RETRY","RETRY_ALL","CONTINUE","PREVIOUS","STOP_FORWARD_TRAVERSAL","validateSequencingRequest","valid","requestSpecificValidation","validateRequestSpecificConstraints","sequencingRulesCheckSubprocess","AND","OR","ancestors1","fromActivity","direction","candidateActivity","firstIteration","nextCandidate","flowTreeTraversalSubprocess","skipChildren","previousSibling","lastDescendant","lastChild","parentPreviousSibling","nextSibling","choiceFlowSubprocess","choiceFlowTreeTraversalSubprocess","constraintValidation","validateChoiceFlowConstraints","validChildren","enhancedChoiceActivityTraversalSubprocess","traversalValidation","validateChoiceTraversalConstraints","canTraverse","canTraverseInto","choiceActivityTraversalSubprocess","meetsChoiceFlowConstraints","validateConstrainChoiceForFlow","evaluateConstrainChoiceForTraversal","evaluateForwardOnlyForChoice","validateConstrainedChoiceBoundaries","boundaryCheck","checkConstrainedChoiceBoundary","targetIndex","isActivityAvailableForChoice","currentIndex","activityIndex","intermediateActivity","isActivityMandatory","isActivityCompleted","validateActivityChoiceState","hasBackwardChoiceException","hasChoiceBoundaryViolation","mandatory","HIDE_FROM_CHOICE","evaluateRuleConditions","allowBackwardChoice","combinationMode","conditionResults","conditionType","measureThreshold","limitSeconds","elapsedSeconds","start","nowMs","not","NavigationRequestType","NavigationRequestResult","terminationRequest","sequencingRequest","DeliveryRequest","OverallSequencingProcess","sequencingProcess","rollupProcess","contentDelivered","globalObjectiveMap","enhancedDeliveryValidation","initializeGlobalObjectiveMap","processNavigationRequest","navigationRequest","navResult","navigationRequestProcess","terminationRequestProcess","seqResult","DELIVER","deliveryResult","deliveryRequestProcess","contentDeliveryEnvironmentProcess","fireEvent","START","RESUME_ALL","forwardOnlyValidation","validateForwardOnlyConstraints","choiceValidation","validateComplexChoicePath","CHOICE","JUMP","ABANDON","ABANDON_ALL","SUSPEND_ALL","hasSequencingRequest","exitActionResult","enhancedExitActionRulesSubprocess","recursionDepth","depth","terminationResult","executeTermination","shouldEvaluatePostConditions","postConditionResult","integratePostConditionRulesSubprocess","performComplexSuspendedActivityCleanup","endAttemptProcess","handleMultiLevelExitActions","handleSuspendAllRequest","exitRules","conditionsMet","processExitActionsAtLevel","terminateAllActivities","cleanedActivities","originalSuspendedActivity","stateConsistencyCheck","validateActivityTreeStateConsistency","consistent","resourceConstraintCheck","validateResourceConstraints","available","concurrentDeliveryCheck","validateConcurrentDeliveryPrevention","allowed","dependencyCheck","validateActivityDependencies","satisfied","clearSuspendedActivitySubprocess","initializeActivityForDelivery","setupActivityAttemptTracking","updateNavigationValidity","fireActivityDeliveryEvent","audioCaptioning","audioLevel","deliverySpeed","eventType","continueResult","previousResult","allActivities","choiceMap","jumpMap","act","choiceRes","jumpRes","hasContentBeenDelivered","resetContentDelivered","failureReason","currentDuration","currentTime","checks","attemptDurationLimit","activityDurationLimit","getSequencingState","version","activityStates","serializeActivityStates","navigationState","getNavigationState","restoreSequencingState","deserializeActivityStates","restoreNavigationState","states","serializeActivity","restoreActivity","requestValid","navState","isActivityDisabled","constrainChoiceValidation","validateConstrainChoiceControls","choiceSetValidation","validateChoiceSetConstraints","ancestor","findChildContaining","abs","ancestorValidation","validateAncestorConstraints","getValidChoiceSet","evaluatePreConditionRulesForChoice","target","activityContains","container","currentTop","targetTop","between","helperIsActivityMandatory","helperIsActivityCompleted","validChoices","allDescendants","getAllDescendants","descendant","isValidChoiceTarget","descendants","preRules","isActivityPartOfTree","activeActivities","getActiveActivities","requiredResources","getActivityRequiredResources","resource","isResourceAvailable","checkSystemResourceLimits","adequate","hasPendingDeliveryRequests","isDeliveryLocked","prerequisites","getActivityPrerequisites","prerequisite","isPrerequisiteSatisfied","objectiveDependencies","getObjectiveDependencies","dependency","isObjectiveDependencySatisfied","getSequencingRuleDependencies","collectActiveActivities","resources","activityInfo","toLowerCase","parseDurationToMinutes","document","createElement","canPlayType","plugins","plugin","connection","effectiveType","downlink","storage","estimate","quota","memory","usedJSHeapSize","jsHeapSizeLimit","deviceMemory","hardwareConcurrency","saveData","pendingRequests","pendingScormRequests","navigationLocked","terminationInProgress","scormMaintenanceMode","referencedObjectiveID","sibling","prerequisiteActivities","prerequisiteId","_activity","globalObjectiveID","allRules","objectiveReference","statusKnown","baseObjectiveId","measureKnown","referencedActivity","collectGlobalObjectives","objectiveCount","globalObjectiveId","getGlobalObjectiveMap","updateGlobalObjective","objectiveData","lastUpdated","ActivityDeliveryService","callbacks","currentDeliveredActivity","pendingDelivery","processSequencingResult","onSequencingError","deliverActivity","onSequencingComplete","unloadActivity","onDeliverActivity","onUnloadActivity","getCurrentDeliveredActivity","getPendingDelivery","updateCallbacks","SequencingService","adl","configuration","overallSequencingProcess","eventListeners","isSequencingActive","lastCMIValues","lastSequencingResult","autoRollupOnCMIChange","autoProgressOnCompletion","validateNavigationRequests","enableEventSystem","activityDeliveryService","handleActivityDelivery","handleActivityUnload","handleSequencingComplete","handleSequencingError","setupCMIChangeWatchers","seqOptions","overallOptions","handleSequencingProcessEvent","shouldAutoStartSequencing","startSequencing","initializeCMITracking","errorMsg","triggerFinalRollup","endSequencing","navRequestType","parseNavigationRequest","sequencingResult","DO_NOT_DELIVER","triggerRollupOnCMIChange","cmiElement","oldValue","newValue","updateActivityFromCMI","setEventListeners","updateConfiguration","config","getOverallSequencingProcess","scaledScore","NOT_VALID","fireDebugEvent","argsLength","listenerError","eventServiceError","scormSequencingEvents","globalListeners","globalError","event","fireActivityAttemptStart","fireActivityAttemptEnd","fireLimitConditionCheck","fireNavigationValidityUpdate","validity","fireSequencingStateChange","stateKeys","logLevels","configLevel","mastery_override","_globalObjectives","_sequencingService","_extractedScoItemIds","configureSequencing","initializeSequencingService","Initialize","lmsInitialize","Terminate","lmsFinish","GetValue","lmsGetValue","SetValue","lmsSetValue","Commit","lmsCommit","GetLastError","lmsGetLastError","GetErrorString","lmsGetErrorString","GetDiagnostic","lmsGetDiagnostic","sequencingStatePersistence","loadSequencingState","internalFinish","navigationHandled","choiceJumpRegex","groups","choice_target","jump_target","navActions","adlNavRequestRegex","rollupError","autoSaveOn","saveSequencingState","element_base","objective_id","global_index","newGlobalObjective","global_element","createCorrectResponsesObject","interaction","checkDuplicateChoiceResponse","checkValidResponseType","interaction_type","checkCorrectResponseValue","interaction_count","pattern_index","checkDuplicatedPattern","errorDescription","correct_response","current_index","found","removeCorrectResponsePrefixes","seenOrder","seenCase","seenLang","prefixRegex","langMatches","lang","replaceWithAnotherScormAPI","newAPI","cmiExport","flattened","totalTimeDuration","totalTimeSeconds","navRequest","Function","sequencingSettings","configureActivityTree","configureSequencingRules","configureSequencingControls","configureRollupRules","activityTreeSettings","createActivity","extractActivityIds","ids","activitySettings","childSettings","childActivity","sc","rs","ruleSettings","createSequencingRule","createRollupRule","sequencingRulesSettings","conditionSettings","sequencingControlsSettings","rollupRulesSettings","getSequencingService","setSequencingEventListeners","updateSequencingConfiguration","stateData","serializeSequencingState","fullMetadata","learnerId","attemptNumber","stateVersion","dataToSave","compress","compressStateData","maxStateSize","persistence","saveState","debugPersistence","loadState","dataToLoad","decompressStateData","deserializeSequencingState","currentActivityId","adlNavState","overallProcess","sequencingState","expectedVersion","objData","assign","btoa","encodeURIComponent","atob","decodeURIComponent"],"mappings":"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"}