{"version":3,"file":"scorm2004.min.js","sources":["../src/constants/api_constants.ts","../src/utilities.ts","../src/constants/enums.ts","../src/constants/default_settings.ts","../src/helpers/scheduled_commit.ts","../src/services/HttpService.ts","../src/services/EventService.ts","../src/services/SerializationService.ts","../src/exceptions.ts","../src/services/LoggingService.ts","../src/services/ErrorHandlingService.ts","../src/services/OfflineStorageService.ts","../src/cmi/common/base_cmi.ts","../src/constants/error_codes.ts","../src/cmi/common/array.ts","../src/BaseAPI.ts","../src/exceptions/scorm2004_exceptions.ts","../src/cmi/common/validation.ts","../src/cmi/scorm2004/validation.ts","../src/constants/regex.ts","../src/cmi/scorm2004/learner_preference.ts","../src/constants/response_constants.ts","../src/cmi/scorm2004/interactions.ts","../src/exceptions/scorm12_exceptions.ts","../src/cmi/scorm12/validation.ts","../src/services/ValidationService.ts","../src/cmi/common/score.ts","../src/cmi/scorm2004/score.ts","../src/cmi/scorm2004/comments.ts","../src/cmi/scorm2004/objectives.ts","../src/cmi/scorm2004/metadata.ts","../src/cmi/scorm2004/learner.ts","../src/cmi/scorm2004/status.ts","../src/cmi/scorm2004/session.ts","../src/cmi/scorm2004/content.ts","../src/cmi/scorm2004/settings.ts","../src/cmi/scorm2004/thresholds.ts","../src/cmi/scorm2004/cmi.ts","../src/cmi/scorm2004/adl.ts","../src/cmi/scorm2004/sequencing/sequencing_rules.ts","../src/cmi/scorm2004/sequencing/rollup_rules.ts","../src/constants/language_constants.ts","../src/cmi/scorm2004/sequencing/activity.ts","../src/cmi/scorm2004/sequencing/activity_tree.ts","../src/cmi/scorm2004/sequencing/sequencing_controls.ts","../src/cmi/scorm2004/sequencing/sequencing.ts","../src/Scorm2004API.ts"],"sourcesContent":["interface ErrorDescription {\n  basicMessage: string;\n  detailMessage: string;\n}\n\ninterface ErrorDescriptions {\n  [key: string]: ErrorDescription;\n}\n\ninterface ScormConstants {\n  cmi_children: string;\n  core_children: string;\n  score_children: string;\n  comments_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface AiccConstants extends ScormConstants {\n  student_demographics_children: string;\n  tries_children: string;\n  attempt_records_children: string;\n  paths_children: string;\n}\n\ninterface Scorm2004Constants {\n  cmi_children: string;\n  comments_children: string;\n  score_children: string;\n  objectives_children: string;\n  correct_responses_children: string;\n  student_data_children: string;\n  student_preference_children: string;\n  interactions_children: string;\n  adl_data_children: string;\n  error_descriptions: ErrorDescriptions;\n}\n\ninterface GlobalConstants {\n  SCORM_TRUE: string;\n  SCORM_FALSE: string;\n  STATE_NOT_INITIALIZED: number;\n  STATE_INITIALIZED: number;\n  STATE_TERMINATED: number;\n}\n\nexport const global_constants: GlobalConstants = {\n  SCORM_TRUE: \"true\",\n  SCORM_FALSE: \"false\",\n  STATE_NOT_INITIALIZED: 0,\n  STATE_INITIALIZED: 1,\n  STATE_TERMINATED: 2,\n};\n\nexport const scorm12_constants: ScormConstants = {\n  // Children lists\n  cmi_children:\n    \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions\",\n  core_children:\n    \"student_id,student_name,lesson_location,credit,lesson_status,entry,score,total_time,lesson_mode,exit,session_time\",\n  score_children: \"raw,min,max\",\n  comments_children: \"content,location,time\",\n  objectives_children: \"id,score,status\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio,language,speed,text\",\n  interactions_children:\n    \"id,objectives,time,type,correct_responses,weighting,student_response,result,latency\",\n  error_descriptions: {\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage:\n        \"No specific error code exists to describe the error. Use LMSGetDiagnostic for more information\",\n    },\n    \"201\": {\n      basicMessage: \"Invalid argument error\",\n      detailMessage:\n        \"Indicates that an argument represents an invalid data model element or is otherwise incorrect.\",\n    },\n    \"202\": {\n      basicMessage: \"Element cannot have children\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_children\" for a data model element that does not support the \"_children\" suffix.',\n    },\n    \"203\": {\n      basicMessage: \"Element not an array - cannot have count\",\n      detailMessage:\n        'Indicates that LMSGetValue was called with a data model element name that ends in \"_count\" for a data model element that does not support the \"_count\" suffix.',\n    },\n    \"301\": {\n      basicMessage: \"Not initialized\",\n      detailMessage: \"Indicates that an API call was made before the call to lmsInitialize.\",\n    },\n    \"401\": {\n      basicMessage: \"Not implemented error\",\n      detailMessage:\n        \"The data model element indicated in a call to LMSGetValue or LMSSetValue is valid, but was not implemented by this LMS. SCORM 1.2 defines a set of data model elements as being optional for an LMS to implement.\",\n    },\n    \"402\": {\n      basicMessage: \"Invalid set value, element is a keyword\",\n      detailMessage:\n        'Indicates that LMSSetValue was called on a data model element that represents a keyword (elements that end in \"_children\" and \"_count\").',\n    },\n    \"403\": {\n      basicMessage: \"Element is read only\",\n      detailMessage: \"LMSSetValue was called with a data model element that can only be read.\",\n    },\n    \"404\": {\n      basicMessage: \"Element is write only\",\n      detailMessage: \"LMSGetValue was called on a data model element that can only be written to.\",\n    },\n    \"405\": {\n      basicMessage: \"Incorrect Data Type\",\n      detailMessage:\n        \"LMSSetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a LMSSetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\nexport const aicc_constants: AiccConstants = {\n  ...scorm12_constants,\n  ...{\n    cmi_children:\n      \"core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions,evaluation\",\n    student_preference_children:\n      \"audio,language,lesson_type,speed,text,text_color,text_location,text_size,video,windows\",\n    student_data_children: \"attempt_number,tries,mastery_score,max_time_allowed,time_limit_action\",\n    student_demographics_children:\n      \"city,class,company,country,experience,familiar_name,instructor_name,title,native_language,state,street_address,telephone,years_experience\",\n    tries_children: \"time,status,score\",\n    attempt_records_children: \"score,lesson_status\",\n    paths_children: \"location_id,date,time,status,why_left,time_in_element\",\n  },\n};\n\nexport const scorm2004_constants: Scorm2004Constants = {\n  // Children lists\n  cmi_children:\n    \"_version,comments_from_learner,comments_from_lms,completion_status,credit,entry,exit,interactions,launch_data,learner_id,learner_name,learner_preference,location,max_time_allowed,mode,objectives,progress_measure,scaled_passing_score,score,session_time,success_status,suspend_data,time_limit_action,total_time\",\n  comments_children: \"comment,timestamp,location\",\n  score_children: \"max,raw,scaled,min\",\n  objectives_children: \"progress_measure,completion_status,success_status,description,score,id\",\n  correct_responses_children: \"pattern\",\n  student_data_children: \"mastery_score,max_time_allowed,time_limit_action\",\n  student_preference_children: \"audio_level,audio_captioning,delivery_speed,language\",\n  interactions_children:\n    \"id,type,objectives,timestamp,correct_responses,weighting,learner_response,result,latency,description\",\n  adl_data_children: \"id,store\",\n  error_descriptions: {\n    \"0\": {\n      basicMessage: \"No Error\",\n      detailMessage: \"No error occurred, the previous API call was successful.\",\n    },\n    \"101\": {\n      basicMessage: \"General Exception\",\n      detailMessage:\n        \"No specific error code exists to describe the error. Use GetDiagnostic for more information.\",\n    },\n    \"102\": {\n      basicMessage: \"General Initialization Failure\",\n      detailMessage: \"Call to Initialize failed for an unknown reason.\",\n    },\n    \"103\": {\n      basicMessage: \"Already Initialized\",\n      detailMessage: \"Call to Initialize failed because Initialize was already called.\",\n    },\n    \"104\": {\n      basicMessage: \"Content Instance Terminated\",\n      detailMessage: \"Call to Initialize failed because Terminate was already called.\",\n    },\n    \"111\": {\n      basicMessage: \"General Termination Failure\",\n      detailMessage: \"Call to Terminate failed for an unknown reason.\",\n    },\n    \"112\": {\n      basicMessage: \"Termination Before Initialization\",\n      detailMessage: \"Call to Terminate failed because it was made before the call to Initialize.\",\n    },\n    \"113\": {\n      basicMessage: \"Termination After Termination\",\n      detailMessage: \"Call to Terminate failed because Terminate was already called.\",\n    },\n    \"122\": {\n      basicMessage: \"Retrieve Data Before Initialization\",\n      detailMessage: \"Call to GetValue failed because it was made before the call to Initialize.\",\n    },\n    \"123\": {\n      basicMessage: \"Retrieve Data After Termination\",\n      detailMessage: \"Call to GetValue failed because it was made after the call to Terminate.\",\n    },\n    \"132\": {\n      basicMessage: \"Store Data Before Initialization\",\n      detailMessage: \"Call to SetValue failed because it was made before the call to Initialize.\",\n    },\n    \"133\": {\n      basicMessage: \"Store Data After Termination\",\n      detailMessage: \"Call to SetValue failed because it was made after the call to Terminate.\",\n    },\n    \"142\": {\n      basicMessage: \"Commit Before Initialization\",\n      detailMessage: \"Call to Commit failed because it was made before the call to Initialize.\",\n    },\n    \"143\": {\n      basicMessage: \"Commit After Termination\",\n      detailMessage: \"Call to Commit failed because it was made after the call to Terminate.\",\n    },\n    \"201\": {\n      basicMessage: \"General Argument Error\",\n      detailMessage:\n        \"An invalid argument was passed to an API method (usually indicates that Initialize, Commit or Terminate did not receive the expected empty string argument.\",\n    },\n    \"301\": {\n      basicMessage: \"General Get Failure\",\n      detailMessage:\n        \"Indicates a failed GetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"351\": {\n      basicMessage: \"General Set Failure\",\n      detailMessage:\n        \"Indicates a failed SetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"391\": {\n      basicMessage: \"General Commit Failure\",\n      detailMessage:\n        \"Indicates a failed Commit call where no other specific error code is applicable. Use GetDiagnostic for more information.\",\n    },\n    \"401\": {\n      basicMessage: \"Undefined Data Model Element\",\n      detailMessage:\n        \"The data model element name passed to GetValue or SetValue is not a valid SCORM data model element.\",\n    },\n    \"402\": {\n      basicMessage: \"Unimplemented Data Model Element\",\n      detailMessage:\n        \"The data model element indicated in a call to GetValue or SetValue is valid, but was not implemented by this LMS. In SCORM 2004, this error would indicate an LMS that is not fully SCORM conformant.\",\n    },\n    \"403\": {\n      basicMessage: \"Data Model Element Value Not Initialized\",\n      detailMessage:\n        \"Attempt to read a data model element that has not been initialized by the LMS or through a SetValue call. This error condition is often reached during normal execution of a SCO.\",\n    },\n    \"404\": {\n      basicMessage: \"Data Model Element Is Read Only\",\n      detailMessage: \"SetValue was called with a data model element that can only be read.\",\n    },\n    \"405\": {\n      basicMessage: \"Data Model Element Is Write Only\",\n      detailMessage: \"GetValue was called on a data model element that can only be written to.\",\n    },\n    \"406\": {\n      basicMessage: \"Data Model Element Type Mismatch\",\n      detailMessage:\n        \"SetValue was called with a value that is not consistent with the data format of the supplied data model element.\",\n    },\n    \"407\": {\n      basicMessage: \"Data Model Element Value Out Of Range\",\n      detailMessage:\n        \"The numeric value supplied to a SetValue call is outside of the numeric range allowed for the supplied data model element.\",\n    },\n    \"408\": {\n      basicMessage: \"Data Model Dependency Not Established\",\n      detailMessage:\n        \"Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.\",\n    },\n  },\n};\n","/**\n * Constants for time conversion calculations.\n * These are used throughout the codebase for converting between different time formats.\n */\nexport const SECONDS_PER_SECOND = 1.0;\nexport const SECONDS_PER_MINUTE = 60;\nexport const SECONDS_PER_HOUR = 60 * SECONDS_PER_MINUTE;\nexport const SECONDS_PER_DAY = 24 * SECONDS_PER_HOUR;\n\ntype Designation = {\n  [key: string]: number;\n};\n\n/**\n * A record with string keys and unknown values.\n * This is a more type-safe alternative to using `any`.\n */\nexport type StringKeyMap = Record<string, unknown>;\n\nconst designations: Designation = {\n  D: SECONDS_PER_DAY,\n  H: SECONDS_PER_HOUR,\n  M: SECONDS_PER_MINUTE,\n  S: SECONDS_PER_SECOND,\n};\n\n/**\n * Converts a number of seconds to a formatted time string in HH:MM:SS format.\n * This function handles decimal seconds and ensures proper formatting with leading zeros.\n *\n * @param {number|null} totalSeconds - The total number of seconds to convert. If null or negative, returns \"00:00:00\".\n * @return {string} A formatted time string in HH:MM:SS format, with up to 2 decimal places for seconds if applicable.\n *\n * @example\n * // Returns \"01:30:45\"\n * getSecondsAsHHMMSS(5445);\n *\n * @example\n * // Returns \"00:00:30.5\"\n * getSecondsAsHHMMSS(30.5);\n *\n * @example\n * // Returns \"00:00:00\"\n * getSecondsAsHHMMSS(null);\n */\nexport const getSecondsAsHHMMSS = memoize((totalSeconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!totalSeconds || totalSeconds <= 0) {\n    return \"00:00:00\";\n  }\n\n  const hours = Math.floor(totalSeconds / SECONDS_PER_HOUR);\n  const dateObj = new Date(totalSeconds * 1000);\n  const minutes = dateObj.getUTCMinutes();\n  // make sure we add any possible decimal value\n  const seconds = dateObj.getSeconds();\n  const ms = totalSeconds % 1.0;\n  let msStr = \"\";\n\n  if (countDecimals(ms) > 0) {\n    if (countDecimals(ms) > 2) {\n      msStr = ms.toFixed(2);\n    } else {\n      msStr = String(ms);\n    }\n\n    msStr = \".\" + msStr.split(\".\")[1];\n  }\n\n  return (hours + \":\" + minutes + \":\" + seconds).replace(/\\b\\d\\b/g, \"0$&\") + msStr;\n});\n\n/**\n * Converts a number of seconds to an ISO 8601 duration string (e.g., \"PT1H30M45S\").\n * This function handles the complexity of formatting according to the ISO 8601 standard,\n * including the proper placement of the \"T\" separator for time components.\n *\n * @param {number|null} seconds - The number of seconds to convert. If null or negative, returns \"PT0S\".\n * @return {string} An ISO 8601 formatted duration string.\n *\n * @example\n * // Returns \"PT1H30M45S\" (1 hour, 30 minutes, 45 seconds)\n * getSecondsAsISODuration(5445);\n *\n * @example\n * // Returns \"PT30.5S\" (30.5 seconds)\n * getSecondsAsISODuration(30.5);\n *\n * @example\n * // Returns \"P1DT1H\" (1 day, 1 hour)\n * getSecondsAsISODuration(90000);\n *\n * @example\n * // Returns \"PT0S\" (0 seconds)\n * getSecondsAsISODuration(null);\n */\nexport const getSecondsAsISODuration = memoize((seconds: number | null): string => {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!seconds || seconds <= 0) {\n    return \"PT0S\";\n  }\n\n  let duration = \"P\";\n  let remainder = seconds;\n\n  // Convert to array of entries and use functional methods\n  const designationEntries = Object.entries(designations);\n\n  // Process each time designation\n  designationEntries.forEach(([designationsKey, current_seconds]) => {\n    let value = Math.floor(remainder / current_seconds);\n    remainder = remainder % current_seconds;\n\n    // Limit decimal places\n    if (countDecimals(remainder) > 2) {\n      remainder = Number(Number(remainder).toFixed(2));\n    }\n\n    // If we have anything left in the remainder, and we're currently adding\n    // seconds to the duration, go ahead and add the decimal to the seconds\n    if (designationsKey === \"S\" && remainder > 0) {\n      value += remainder;\n    }\n\n    if (value) {\n      // Add the 'T' separator for time components if needed\n      const needsTimeSeparator =\n        (duration.indexOf(\"D\") > 0 || [\"H\", \"M\", \"S\"].includes(designationsKey)) &&\n        duration.indexOf(\"T\") === -1;\n\n      if (needsTimeSeparator) {\n        duration += \"T\";\n      }\n\n      duration += `${value}${designationsKey}`;\n    }\n  });\n\n  return duration;\n});\n\n/**\n * Converts a time string in HH:MM:SS format to the equivalent number of seconds.\n * This function is flexible and can handle various input types, converting them to strings as needed.\n *\n * @param {string|number|boolean|null} timeString - The time string to convert, typically in HH:MM:SS format.\n *                                                 If not a string, it will be converted to one.\n *                                                 If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} timeRegex - The regular expression used to validate the time string format.\n *                                    If a string is provided, it will be converted to a RegExp.\n * @return {number} The total number of seconds represented by the time string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getTimeAsSeconds(\"01:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getTimeAsSeconds(\"invalid\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns 30 (converts number to string \"30\" then parses as 0:0:30)\n * getTimeAsSeconds(30, /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport const getTimeAsSeconds = memoize(\n  (timeString: string | number | boolean | null, timeRegex: RegExp | string): number => {\n    if (typeof timeString === \"number\" || typeof timeString === \"boolean\") {\n      timeString = String(timeString);\n    }\n    if (typeof timeRegex === \"string\") {\n      timeRegex = new RegExp(timeRegex);\n    }\n    if (!timeString || !timeString?.match?.(timeRegex)) {\n      return 0;\n    }\n\n    const parts = timeString.split(\":\");\n    const hours = Number(parts[0]);\n    const minutes = Number(parts[1]);\n    const seconds = Number(parts[2]);\n    return hours * 3600 + minutes * 60 + seconds;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (timeString, timeRegex) => {\n    const timeStr = typeof timeString === \"string\" ? timeString : String(timeString ?? \"\");\n    const regexStr = typeof timeRegex === \"string\" ? timeRegex : (timeRegex?.toString() ?? \"\");\n    return `${timeStr}:${regexStr}`;\n  },\n);\n\n/**\n * Converts an ISO 8601 duration string (e.g., \"PT1H30M45S\") to the equivalent number of seconds.\n * This function parses the duration string using a regular expression to extract years, days,\n * hours, minutes, and seconds components.\n *\n * @param {string|null} duration - The ISO 8601 duration string to convert.\n *                                If null, invalid, or doesn't match the regex, returns 0.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n *                                       The regex should have capture groups for years, days, hours, minutes, and seconds.\n * @return {number} The total number of seconds represented by the duration string.\n *\n * @example\n * // Returns 5445 (1 hour, 30 minutes, 45 seconds)\n * getDurationAsSeconds(\"PT1H30M45S\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 90000 (1 day, 1 hour)\n * getDurationAsSeconds(\"P1DT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns 0 (invalid format)\n * getDurationAsSeconds(\"invalid\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport const getDurationAsSeconds = memoize(\n  (duration: string | null, durationRegex: RegExp | string): number => {\n    if (typeof durationRegex === \"string\") {\n      durationRegex = new RegExp(durationRegex);\n    }\n\n    if (!duration || !duration?.match?.(durationRegex)) {\n      return 0;\n    }\n\n    const [, years, _, , days, hours, minutes, seconds] =\n      new RegExp(durationRegex).exec?.(duration) ?? [];\n    let result = 0.0;\n    result += Number(seconds) || 0.0;\n    result += Number(minutes) * 60.0 || 0.0;\n    result += Number(hours) * 3600.0 || 0.0;\n    result += Number(days) * (60 * 60 * 24.0) || 0.0;\n    result += Number(years) * (60 * 60 * 24 * 365.0) || 0.0;\n    return result;\n  },\n  // Custom key function to handle RegExp objects which can't be stringified\n  (duration, durationRegex) => {\n    const durationStr = duration ?? \"\";\n    const regexStr =\n      typeof durationRegex === \"string\" ? durationRegex : (durationRegex?.toString() ?? \"\");\n    return `${durationStr}:${regexStr}`;\n  },\n);\n\n/**\n * Adds together two ISO 8601 duration strings and returns the result as a new ISO 8601 duration string.\n * This function works by converting both durations to seconds, adding them together, and then\n * converting the result back to an ISO 8601 duration string.\n *\n * @param {string} first - The first ISO 8601 duration string.\n * @param {string} second - The second ISO 8601 duration string.\n * @param {RegExp|string} durationRegex - The regular expression used to parse the duration components.\n *                                       If a string is provided, it will be converted to a RegExp.\n * @return {string} A new ISO 8601 duration string representing the sum of the two input durations.\n *\n * @example\n * // Returns \"PT2H\" (1 hour + 1 hour = 2 hours)\n * addTwoDurations(\"PT1H\", \"PT1H\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"PT1H30M\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addTwoDurations(\"PT1H\", \"PT30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n *\n * @example\n * // Returns \"P1DT1H30M\" (1 day + 1 hour and 30 minutes = 1 day, 1 hour, and 30 minutes)\n * addTwoDurations(\"P1D\", \"PT1H30M\", /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/);\n */\nexport function addTwoDurations(\n  first: string,\n  second: string,\n  durationRegex: RegExp | string,\n): string {\n  const regex: RegExp =\n    typeof durationRegex === \"string\" ? new RegExp(durationRegex) : durationRegex;\n  return getSecondsAsISODuration(\n    getDurationAsSeconds(first, regex) + getDurationAsSeconds(second, regex),\n  );\n}\n\n/**\n * Adds together two time strings in HH:MM:SS format and returns the result as a new time string.\n * This function works by converting both time strings to seconds, adding them together, and then\n * converting the result back to an HH:MM:SS format.\n *\n * @param {string} first - The first time string in HH:MM:SS format.\n * @param {string} second - The second time string in HH:MM:SS format.\n * @param {RegExp|string} timeRegex - The regular expression used to validate and parse the time strings.\n *                                   If a string is provided, it will be converted to a RegExp.\n * @return {string} A new time string in HH:MM:SS format representing the sum of the two input times.\n *\n * @example\n * // Returns \"02:00:00\" (1 hour + 1 hour = 2 hours)\n * addHHMMSSTimeStrings(\"01:00:00\", \"01:00:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:00\" (1 hour + 30 minutes = 1 hour and 30 minutes)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:00\", /^(\\d+):(\\d+):(\\d+)$/);\n *\n * @example\n * // Returns \"01:30:45\" (1 hour + 30 minutes and 45 seconds = 1 hour, 30 minutes, and 45 seconds)\n * addHHMMSSTimeStrings(\"01:00:00\", \"00:30:45\", /^(\\d+):(\\d+):(\\d+)$/);\n */\nexport function addHHMMSSTimeStrings(\n  first: string,\n  second: string,\n  timeRegex: RegExp | string,\n): string {\n  if (typeof timeRegex === \"string\") {\n    timeRegex = new RegExp(timeRegex);\n  }\n  return getSecondsAsHHMMSS(\n    getTimeAsSeconds(first, timeRegex) + getTimeAsSeconds(second, timeRegex),\n  );\n}\n\n/**\n * Flattens a nested JSON object into a flat object with dot notation for nested properties.\n * This function recursively traverses the object and creates new keys using dot notation\n * for nested objects and bracket notation for arrays.\n *\n * @param {StringKeyMap} data - The nested object to flatten.\n * @return {StringKeyMap} A flattened object where nested properties are represented with dot notation.\n *\n * @example\n * // Returns { \"a\": 1, \"b.c\": 2, \"b.d\": 3, \"e[0]\": 4, \"e[1]\": 5 }\n * flatten({\n *   a: 1,\n *   b: { c: 2, d: 3 },\n *   e: [4, 5]\n * });\n *\n * @example\n * // Returns { \"\": [] } for an empty array\n * flatten([]);\n *\n * @example\n * // Returns { \"\": {} } for an empty object\n * flatten({});\n */\nexport function flatten(data: StringKeyMap): StringKeyMap {\n  const result: StringKeyMap = {};\n\n  /**\n   * Recurse through the object\n   * @param {*} cur\n   * @param {*} prop\n   */\n  function recurse(cur: any, prop: any) {\n    if (Object(cur) !== cur) {\n      result[prop] = cur;\n    } else if (Array.isArray(cur)) {\n      // Use forEach instead of for loop\n      cur.forEach((item, i) => {\n        recurse(item, `${prop}[${i}]`);\n      });\n\n      if (cur.length === 0) result[prop] = [];\n    } else {\n      const keys = Object.keys(cur).filter((p) => Object.prototype.hasOwnProperty.call(cur, p));\n\n      const isEmpty = keys.length === 0;\n\n      // Use forEach instead of for...in loop\n      keys.forEach((p) => {\n        recurse(cur[p], prop ? `${prop}.${p}` : p);\n      });\n\n      if (isEmpty && prop) result[prop] = {};\n    }\n  }\n\n  recurse(data, \"\");\n  return result;\n}\n\n/**\n * Converts a flattened object back into a nested object structure.\n * This function is the inverse of `flatten()`. It parses dot notation and bracket notation\n * in property names to recreate the original nested structure.\n *\n * @param {StringKeyMap} data - The flattened object to unflatten.\n * @return {object} A nested object recreated from the flattened structure.\n *\n * @example\n * // Returns { a: 1, b: { c: 2, d: 3 }, e: [4, 5] }\n * unflatten({\n *   \"a\": 1,\n *   \"b.c\": 2,\n *   \"b.d\": 3,\n *   \"e[0]\": 4,\n *   \"e[1]\": 5\n * });\n *\n * @example\n * // Handles array indices correctly\n * unflatten({\n *   \"users[0].name\": \"John\",\n *   \"users[0].email\": \"john@example.com\",\n *   \"users[1].name\": \"Jane\",\n *   \"users[1].email\": \"jane@example.com\"\n * });\n * // Returns:\n * // {\n * //   users: [\n * //     { name: \"John\", email: \"john@example.com\" },\n * //     { name: \"Jane\", email: \"jane@example.com\" }\n * //   ]\n * // }\n */\nexport function unflatten(data: StringKeyMap): object {\n  \"use strict\";\n\n  if (Object(data) !== data || Array.isArray(data)) return data;\n  const result: StringKeyMap = {};\n\n  // Regex pattern for parsing property paths\n  const pattern = /\\.?([^.[\\]]+)|\\[(\\d+)]/g;\n\n  // Get all own properties and process them\n  Object.keys(data)\n    .filter((p) => Object.prototype.hasOwnProperty.call(data, p))\n    .forEach((p) => {\n      let cur = result;\n      let prop = \"\";\n\n      // Create a new regex instance for each property to reset lastIndex\n      const regex = new RegExp(pattern);\n\n      // Process all matches in the property path\n      Array.from({ length: p.match(new RegExp(pattern, \"g\"))?.length ?? 0 }, () =>\n        regex.exec(p),\n      ).forEach((m) => {\n        if (m) {\n          // Create array or object as needed\n          cur = (cur[prop] ?? (cur[prop] = m[2] ? [] : ({} as StringKeyMap))) as StringKeyMap;\n          prop = m[2] || m[1];\n        }\n      });\n\n      cur[prop] = data[p];\n    });\n\n  return (result[\"\"] ?? result) as object;\n}\n\n/**\n * Counts the number of decimal places in a number.\n * This function handles both integer and floating-point numbers.\n *\n * @param {number} num - The number to analyze.\n * @return {number} The number of decimal places. Returns 0 for integers or if the number doesn't have a decimal point.\n *\n * @example\n * // Returns 0\n * countDecimals(42);\n *\n * @example\n * // Returns 2\n * countDecimals(3.14);\n *\n * @example\n * // Returns 5\n * countDecimals(1.23456);\n */\nexport function countDecimals(num: number): number {\n  if (Math.floor(num) === num || String(num)?.indexOf?.(\".\") < 0) return 0;\n  const parts = num.toString().split(\".\")?.[1];\n  return parts?.length ?? 0;\n}\n\n/**\n * Formats SCORM messages for consistent and readable logging.\n * This function pads the function name and CMI element to create aligned log messages\n * that are easier to read in log files or console output.\n *\n * @param {string} functionName - The name of the function that generated the message.\n * @param {string} message - The message content to be logged.\n * @param {string} [CMIElement] - Optional. The CMI element related to the message.\n * @return {string} A formatted message string with consistent padding.\n *\n * @example\n * // Returns \"initialize          : Successfully initialized\"\n * formatMessage(\"initialize\", \"Successfully initialized\");\n *\n * @example\n * // Returns \"getValue            : cmi.core.student_id                                             : 12345\"\n * formatMessage(\"getValue\", \"12345\", \"cmi.core.student_id\");\n *\n * @example\n * // Returns \"setValue            : cmi.core.lesson_status                                          : completed\"\n * formatMessage(\"setValue\", \"completed\", \"cmi.core.lesson_status\");\n */\nexport function formatMessage(functionName: string, message: string, CMIElement?: string): string {\n  const baseLength = 20;\n\n  // Use string padding instead of loops\n  const paddedFunction = functionName.padEnd(baseLength);\n  let messageString = `${paddedFunction}: `;\n\n  if (CMIElement) {\n    const CMIElementBaseLength = 70;\n    // Add CMIElement and pad to the required length\n    messageString += CMIElement;\n    messageString = messageString.padEnd(CMIElementBaseLength);\n  }\n\n  // Add the message (or empty string if null/undefined)\n  messageString += message ?? \"\";\n\n  return messageString;\n}\n\n/**\n * Checks if a string contains a specific pattern using regular expression matching.\n * This function is a wrapper around JavaScript's String.match() method that handles\n * null/undefined values gracefully.\n *\n * @param {string} str - The string to search within. If null or undefined, returns false.\n * @param {string} tester - The pattern to search for. Can be a regular expression pattern.\n * @return {boolean} True if the pattern is found in the string, false otherwise.\n *\n * @example\n * // Returns true\n * stringMatches(\"Hello, world!\", \"world\");\n *\n * @example\n * // Returns true\n * stringMatches(\"The quick brown fox\", \"\\\\w+\\\\s+\\\\w+\");\n *\n * @example\n * // Returns false\n * stringMatches(\"Hello, world!\", \"universe\");\n *\n * @example\n * // Returns false (handles null gracefully)\n * stringMatches(null, \"test\");\n */\nexport function stringMatches(str: string, tester: string): boolean {\n  return str?.match(tester) !== null;\n}\n\n/**\n * Creates a memoized (cached) version of a function for performance optimization.\n * This function caches the results of previous calls with the same arguments,\n * avoiding redundant calculations for repeated calls with the same input.\n *\n * @template T - The type of the function to memoize\n * @param {T} fn - The function to memoize\n * @param {Function} [keyFn] - Optional function to generate a custom cache key.\n *                           Useful for functions with complex arguments that can't be serialized.\n * @return {T} A memoized version of the input function with the same signature\n *\n * @example\n * // Basic usage with a simple function\n * const memoizedAdd = memoize((a, b) => {\n *   console.log('Calculating...');\n *   return a + b;\n * });\n *\n * memoizedAdd(1, 2); // Logs \"Calculating...\" and returns 3\n * memoizedAdd(1, 2); // Returns 3 without logging (uses cached result)\n *\n * @example\n * // Using a custom key function for objects that can't be serialized\n * const memoizedProcessUser = memoize(\n *   (user) => {\n *     console.log('Processing user...');\n *     return { ...user, processed: true };\n *   },\n *   (user) => user.id // Use user.id as the cache key\n * );\n *\n * memoizedProcessUser({ id: 123, name: 'John' }); // Logs and processes\n * memoizedProcessUser({ id: 123, name: 'John' }); // Uses cached result\n */\nexport function memoize<T extends (...args: any[]) => any>(\n  fn: T,\n  keyFn?: (...args: Parameters<T>) => string,\n): T {\n  const cache = new Map<string, ReturnType<T>>();\n\n  return ((...args: Parameters<T>): ReturnType<T> => {\n    const key = keyFn ? keyFn(...args) : JSON.stringify(args);\n\n    return cache.has(key)\n      ? (cache.get(key) as ReturnType<T>)\n      : (() => {\n          const result = fn(...args);\n          cache.set(key, result);\n          return result;\n        })();\n  }) as T;\n}\n","// Using plain objects instead of enums for better compatibility with strip-only mode\n// This approach avoids TypeScript enum runtime code while maintaining the same API\n\n// NAVBoolean values\nexport const NAVBoolean = {\n  UNKNOWN: \"unknown\",\n  TRUE: \"true\",\n  FALSE: \"false\",\n};\n\n// Type for NAVBoolean values\nexport type NAVBoolean = (typeof NAVBoolean)[keyof typeof NAVBoolean];\n\n// SuccessStatus values\nexport const SuccessStatus = {\n  PASSED: \"passed\",\n  FAILED: \"failed\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for SuccessStatus values\nexport type SuccessStatus = (typeof SuccessStatus)[keyof typeof SuccessStatus];\n\n// CompletionStatus values\nexport const CompletionStatus = {\n  COMPLETED: \"completed\",\n  INCOMPLETE: \"incomplete\",\n  UNKNOWN: \"unknown\",\n};\n\n// Type for CompletionStatus values\nexport type CompletionStatus = (typeof CompletionStatus)[keyof typeof CompletionStatus];\n\n// LogLevelEnum values\nexport const LogLevelEnum = {\n  _: 0,\n  DEBUG: 1,\n  INFO: 2,\n  WARN: 3,\n  ERROR: 4,\n  NONE: 5,\n};\n\n// Type for LogLevelEnum values\nexport type LogLevelEnum = (typeof LogLevelEnum)[keyof typeof LogLevelEnum];\n","import { InternalSettings, LogLevel, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"./api_constants\";\nimport { LogLevelEnum } from \"./enums\";\n\n/**\n * Default settings for the SCORM API\n */\nexport const DefaultSettings: InternalSettings = {\n  autocommit: false,\n  autocommitSeconds: 10,\n  asyncCommit: false,\n  sendFullCommit: true,\n  lmsCommitUrl: false,\n  dataCommitFormat: \"json\",\n  commitRequestDataType: \"application/json;charset=UTF-8\",\n  autoProgress: false,\n  logLevel: LogLevelEnum.ERROR,\n  selfReportSessionTime: false,\n  alwaysSendTotalTime: false,\n  renderCommonCommitFields: false,\n  strict_errors: true,\n  xhrHeaders: {},\n  xhrWithCredentials: false,\n  fetchMode: \"cors\",\n  responseHandler: async function (response: Response): Promise<ResultObject> {\n    if (typeof response !== \"undefined\") {\n      let httpResult = null;\n\n      // Handle both text() and json() response methods\n      try {\n        if (typeof response.json === \"function\") {\n          // Try to get JSON directly if the method exists\n          httpResult = await response.json();\n        } else if (typeof response.text === \"function\") {\n          // Fall back to text() if json() is not available\n          const responseText = await response.text();\n          if (responseText) {\n            httpResult = JSON.parse(responseText);\n          }\n        }\n      } catch (e) {\n        // If parsing fails, continue with null httpResult\n      }\n\n      if (httpResult === null || !{}.hasOwnProperty.call(httpResult, \"result\")) {\n        if (response.status === 200) {\n          return {\n            result: global_constants.SCORM_TRUE,\n            errorCode: 0,\n          };\n        } else {\n          return {\n            result: global_constants.SCORM_FALSE,\n            errorCode: 101,\n          };\n        }\n      } else {\n        return {\n          result: httpResult.result,\n          errorCode: httpResult.errorCode\n            ? httpResult.errorCode\n            : httpResult.result === global_constants.SCORM_TRUE\n              ? 0\n              : 101,\n        };\n      }\n    }\n    return {\n      result: global_constants.SCORM_FALSE,\n      errorCode: 101,\n    };\n  },\n  requestHandler: function (commitObject) {\n    return commitObject;\n  },\n  onLogMessage: defaultLogHandler,\n  scoItemIds: [],\n  scoItemIdValidator: false,\n  globalObjectiveIds: [],\n\n  // Offline support settings\n  enableOfflineSupport: false,\n  courseId: \"\",\n  syncOnInitialize: true,\n  syncOnTerminate: true,\n  maxSyncAttempts: 5,\n};\n\nexport function defaultLogHandler(messageLevel: LogLevel, logMessage: string): void {\n  switch (messageLevel) {\n    case \"4\":\n    case 4:\n    case \"ERROR\":\n    case LogLevelEnum.ERROR:\n      console.error(logMessage);\n      break;\n    case \"3\":\n    case 3:\n    case \"WARN\":\n    case LogLevelEnum.WARN:\n      console.warn(logMessage);\n      break;\n    case \"2\":\n    case 2:\n    case \"INFO\":\n    case LogLevelEnum.INFO:\n      console.info(logMessage);\n      break;\n    case \"1\":\n    case 1:\n    case \"DEBUG\":\n    case LogLevelEnum.DEBUG:\n      if (console.debug) {\n        console.debug(logMessage);\n      } else {\n        console.log(logMessage);\n      }\n      break;\n  }\n}\n","import BaseAPI from \"../BaseAPI\";\n\n/**\n * Private class that wraps a timeout call to the commit() function\n */\nexport class ScheduledCommit {\n  private _API;\n  private _cancelled = false;\n  private readonly _timeout;\n  private readonly _callback;\n\n  /**\n   * Constructor for ScheduledCommit\n   * @param {BaseAPI} API\n   * @param {number} when\n   * @param {string} callback\n   */\n  constructor(API: BaseAPI, when: number, callback: string) {\n    this._API = API;\n    this._timeout = setTimeout(this.wrapper.bind(this), when);\n    this._callback = callback;\n  }\n\n  /**\n   * Cancel any currently scheduled commit\n   */\n  cancel() {\n    this._cancelled = true;\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n  }\n\n  /**\n   * Wrap the API commit call to check if the call has already been cancelled\n   */\n  wrapper() {\n    if (!this._cancelled) {\n      (async () => await this._API.commit(this._callback))();\n    }\n  }\n}\n","import {CommitObject, InternalSettings, ResultObject} from \"../types/api_types\";\nimport {global_constants} from \"../constants/api_constants\";\nimport {LogLevelEnum} from \"../constants/enums\";\nimport {IHttpService} from \"../interfaces/services\";\nimport {ErrorCode} from \"../constants/error_codes\";\nimport {StringKeyMap} from \"../utilities\";\n\n/**\n * Service for handling HTTP communication with the LMS\n */\nexport class HttpService implements IHttpService {\n  private settings: InternalSettings;\n  private error_codes: ErrorCode;\n\n  /**\n   * Constructor for HttpService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   */\n  constructor(settings: InternalSettings, error_codes: ErrorCode) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n  }\n\n  /**\n   * Sends HTTP requests to the LMS with special handling for immediate and standard requests.\n   *\n   * This method handles communication with the LMS server, implementing two distinct\n   * request handling strategies based on the context:\n   *\n   * 1. Immediate Mode (used during termination):\n   *    When immediate=true, the method:\n   *    - Initiates the fetch request but doesn't wait for it to complete\n   *    - Returns a success result immediately\n   *    - Processes the response asynchronously when it arrives\n   *\n   *    This is critical for browser compatibility during page unload/termination,\n   *    as some browsers (especially Chrome) may cancel synchronous or awaited\n   *    requests when a page is closing.\n   *\n   * 2. Standard Mode (normal operation):\n   *    When immediate=false, the method:\n   *    - Processes the request parameters through the configured requestHandler\n   *    - Awaits the fetch response completely\n   *    - Transforms the response using the configured responseHandler\n   *    - Triggers appropriate event listeners based on success/failure\n   *    - Returns the complete result with appropriate error codes\n   *\n   * The method also includes error handling to catch network failures or other\n   * exceptions that might occur during the request process.\n   *\n   * @param {string} url - The URL endpoint to send the request to\n   * @param {CommitObject|StringKeyMap|Array} params - The data to send to the LMS\n   * @param {boolean} immediate - Whether to send the request immediately without waiting (true) or process normally (false)\n   * @param {Function} apiLog - Function to log API messages with appropriate levels\n   * @param {Function} processListeners - Function to trigger event listeners for commit events\n   * @return {Promise<ResultObject>} - A promise that resolves with the result of the request\n   *\n   * @example\n   * // Standard request (waits for response)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   false,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   *\n   * @example\n   * // Immediate request (for termination)\n   * const result = await httpService.processHttpRequest(\n   *   \"https://lms.example.com/commit\",\n   *   { cmi: { core: { lesson_status: \"completed\" } } },\n   *   true,\n   *   console.log,\n   *   (event) => dispatchEvent(new CustomEvent(event))\n   * );\n   * // result will be success immediately, regardless of actual HTTP result\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n    apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    const genericError: ResultObject = {\n      result: global_constants.SCORM_FALSE,\n      errorCode: this.error_codes.GENERAL,\n    };\n\n    // if we are terminating the module or closing the browser window/tab, we need to make this fetch ASAP.\n    // Some browsers, especially Chrome, do not like synchronous requests to be made when the window is closing.\n    if (immediate) {\n      this.performFetch(url, params).then(async (response) => {\n        await this.transformResponse(response, processListeners);\n      });\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    }\n\n    const process = async (\n      url: string,\n      params: CommitObject | StringKeyMap | Array<any>,\n      settings: InternalSettings,\n    ): Promise<ResultObject> => {\n      try {\n        params = settings.requestHandler(params) as CommitObject | StringKeyMap | Array<any>;\n        const response = await this.performFetch(url, params);\n\n        return this.transformResponse(response, processListeners);\n      } catch (e) {\n        apiLog(\"processHttpRequest\", e, LogLevelEnum.ERROR);\n        processListeners(\"CommitError\");\n        return genericError;\n      }\n    };\n\n    return await process(url, params, this.settings);\n  }\n\n  /**\n   * Perform the fetch request to the LMS\n   * @param {string} url - The URL to send the request to\n   * @param {StringKeyMap|Array} params - The parameters to include in the request\n   * @return {Promise<Response>} - The response from the LMS\n   * @private\n   */\n  private async performFetch(url: string, params: StringKeyMap | Array<any>): Promise<Response> {\n    const init = {\n      method: \"POST\",\n      mode: this.settings.fetchMode,\n      body: params instanceof Array ? params.join(\"&\") : JSON.stringify(params),\n      headers: {\n        ...this.settings.xhrHeaders,\n        \"Content-Type\": this.settings.commitRequestDataType,\n      },\n      keepalive: true,\n    } as RequestInit;\n\n    if (this.settings.xhrWithCredentials) {\n      init.credentials = \"include\";\n    }\n\n    return fetch(url, init);\n  }\n\n  /**\n   * Transforms the response from the LMS to a ResultObject\n   * @param {Response} response - The response from the LMS\n   * @param {Function} processListeners - Function to process event listeners\n   * @return {Promise<ResultObject>} - The transformed response\n   * @private\n   */\n  private async transformResponse(\n    response: Response,\n    processListeners: (functionName: string, CMIElement?: string, value?: any) => void,\n  ): Promise<ResultObject> {\n    const result =\n      typeof this.settings.responseHandler === \"function\"\n        ? await this.settings.responseHandler(response)\n        : await response.json();\n\n    if (\n      response.status >= 200 &&\n      response.status <= 299 &&\n      (result.result === true || result.result === global_constants.SCORM_TRUE)\n    ) {\n      processListeners(\"CommitSuccess\");\n      if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n        result.errorCode = 0;\n      }\n    } else {\n      if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n        result.errorCode = this.error_codes.GENERAL;\n      }\n      processListeners(\"CommitError\", undefined, result.errorCode);\n    }\n    return result;\n  }\n\n  /**\n   * Updates the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: InternalSettings): void {\n    this.settings = settings;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { stringMatches } from \"../utilities\";\nimport { IEventService } from \"../interfaces/services\";\n\n/**\n * Interface for a listener object\n */\ninterface Listener {\n  functionName: string;\n  CMIElement: string | null;\n  callback: Function;\n}\n\n/**\n * Type for parsed listener information\n */\ninterface ParsedListener {\n  functionName: string;\n  CMIElement: string | null;\n}\n\n/**\n * Service for handling event listeners and event processing\n */\nexport class EventService implements IEventService {\n  // Map of function names to listeners for faster lookups\n  private listenerMap: Map<string, Listener[]> = new Map();\n  // Total count of listeners for logging\n  private listenerCount = 0;\n  // Function to log API messages\n  private readonly apiLog: (\n    functionName: string,\n    message: string,\n    messageLevel: LogLevel,\n    CMIElement?: string,\n  ) => void;\n\n  /**\n   * Constructor for EventService\n   * @param {Function} apiLog - Function to log API messages\n   */\n  constructor(\n    apiLog: (\n      functionName: string,\n      message: string,\n      messageLevel: LogLevel,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.apiLog = apiLog;\n  }\n\n  /**\n   * Parses a listener name into its components\n   *\n   * @param {string} listenerName - The name of the listener\n   * @returns {ParsedListener|null} - The parsed listener information or null if invalid\n   */\n  private parseListenerName(listenerName: string): ParsedListener | null {\n    const listenerSplit = listenerName.split(\".\");\n    if (listenerSplit.length === 0) return null;\n\n    const functionName = listenerSplit[0];\n    let CMIElement = null;\n\n    if (listenerSplit.length > 1) {\n      CMIElement = listenerName.replace(`${functionName}.`, \"\");\n    }\n\n    return { functionName, CMIElement };\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener\n   * @param {Function} callback - The callback function to execute when the event occurs\n   */\n  on(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get or create the array for this function name\n      const listeners = this.listenerMap.get(functionName) ?? [];\n\n      // Add the new listener\n      listeners.push({\n        functionName,\n        CMIElement,\n        callback,\n      });\n\n      // Update the map and count\n      this.listenerMap.set(functionName, listeners);\n      this.listenerCount++;\n\n      this.apiLog(\n        \"on\",\n        `Added event listener: ${this.listenerCount}`,\n        LogLevelEnum.INFO,\n        functionName,\n      );\n    }\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener\n   *\n   * @param {string} listenerName - The name of the listener to remove\n   * @param {Function} callback - The callback function to remove\n   */\n  off(listenerName: string, callback: Function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // Get the listeners for this function name\n      const listeners = this.listenerMap.get(functionName);\n      if (!listeners) continue;\n\n      // Find the index of the listener to remove\n      const removeIndex = listeners.findIndex(\n        (obj) => obj.CMIElement === CMIElement && obj.callback === callback,\n      );\n\n      if (removeIndex !== -1) {\n        // Remove the listener\n        listeners.splice(removeIndex, 1);\n        this.listenerCount--;\n\n        // Update the map or remove the entry if empty\n        if (listeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, listeners);\n        }\n\n        this.apiLog(\n          \"off\",\n          `Removed event listener: ${this.listenerCount}`,\n          LogLevelEnum.INFO,\n          functionName,\n        );\n      }\n    }\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event\n   *\n   * @param {string} listenerName - The name of the listener to clear\n   */\n  clear(listenerName: string) {\n    const listenerFunctions = listenerName.split(\" \");\n    for (const listenerFunction of listenerFunctions) {\n      const parsedListener = this.parseListenerName(listenerFunction);\n      if (!parsedListener) continue;\n\n      const { functionName, CMIElement } = parsedListener;\n\n      // If we have listeners for this function name\n      if (this.listenerMap.has(functionName)) {\n        const listeners = this.listenerMap.get(functionName)!;\n\n        // Filter out listeners that match the criteria\n        const newListeners = listeners.filter((obj) => obj.CMIElement !== CMIElement);\n\n        // Update the count and map\n        this.listenerCount -= listeners.length - newListeners.length;\n\n        if (newListeners.length === 0) {\n          this.listenerMap.delete(functionName);\n        } else {\n          this.listenerMap.set(functionName, newListeners);\n        }\n      }\n    }\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created\n   *\n   * @param {string} functionName - The name of the function that triggered the event\n   * @param {string} CMIElement - The CMI element that was affected\n   * @param {any} value - The value that was set\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this.apiLog(functionName, value, LogLevelEnum.INFO, CMIElement);\n\n    // Get listeners for this function name\n    const listeners = this.listenerMap.get(functionName);\n    if (!listeners) return;\n\n    for (const listener of listeners) {\n      const listenerHasCMIElement = !!listener.CMIElement;\n      let CMIElementsMatch = false;\n\n      // Check if CMI elements match\n      if (CMIElement && listener.CMIElement) {\n        if (listener.CMIElement.endsWith(\"*\")) {\n          // For wildcard matches, check if the CMI element starts with the prefix\n          const prefix = listener.CMIElement.slice(0, -1);\n          CMIElementsMatch = CMIElement.startsWith(prefix);\n        } else {\n          // For exact matches, compare the strings directly\n          CMIElementsMatch = listener.CMIElement === CMIElement;\n        }\n      }\n\n      // If the listener matches, call the callback\n      if (!listenerHasCMIElement || CMIElementsMatch) {\n        this.apiLog(\n          \"processListeners\",\n          `Processing listener: ${listener.functionName}`,\n          LogLevelEnum.DEBUG,\n          CMIElement,\n        );\n\n        // Handle special event types\n        if (functionName.startsWith(\"Sequence\")) {\n          // For sequence events, pass the target as the first argument\n          listener.callback(value);\n        } else if (functionName === \"CommitError\") {\n          // For commit error events, pass the error code\n          listener.callback(value);\n        } else if (functionName === \"CommitSuccess\") {\n          // For commit success events, pass no arguments\n          listener.callback();\n        } else {\n          // For regular events, pass CMIElement and value\n          listener.callback(CMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Resets the event service by clearing all listeners\n   */\n  reset() {\n    this.listenerMap.clear();\n    this.listenerCount = 0;\n  }\n}\n","import { CommitObject, LogLevel } from \"../types/api_types\";\nimport { StringKeyMap, unflatten } from \"../utilities\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { BaseCMI } from \"../cmi/common/base_cmi\";\nimport { ISerializationService } from \"../interfaces/services\";\n\n/**\n * Service for handling data serialization and deserialization in scorm-again\n */\nexport class SerializationService implements ISerializationService {\n  /**\n   * Loads CMI data from a flattened JSON object with special handling for arrays and ordering.\n   *\n   * This method implements a complex algorithm for loading flattened JSON data into the CMI\n   * object structure. It handles several key challenges:\n   *\n   * 1. Ordering dependencies: Some CMI elements (like interactions and objectives) must be\n   *    loaded in a specific order to ensure proper initialization.\n   *\n   * 2. Array handling: Interactions and objectives are stored as arrays, and their properties\n   *    must be loaded in the correct order (e.g., 'id' and 'type' must be set before other properties).\n   *\n   * 3. Unflattening: The method converts flattened dot notation (e.g., \"cmi.objectives.0.id\")\n   *    back into nested objects before loading.\n   *\n   * The algorithm works by:\n   * - Categorizing keys into interactions, objectives, and other properties\n   * - Sorting interactions to prioritize 'id' and 'type' fields within each index\n   * - Sorting objectives to prioritize 'id' fields within each index\n   * - Processing each category in order: interactions, objectives, then other properties\n   *\n   * @param {StringKeyMap} json - The flattened JSON object with dot notation keys\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   *\n   * @param setStartingData\n   * @example\n   * // Example of flattened JSON input:\n   * // {\n   * //   \"cmi.objectives.0.id\": \"obj1\",\n   * //   \"cmi.objectives.0.score.raw\": \"80\",\n   * //   \"cmi.interactions.0.id\": \"int1\",\n   * //   \"cmi.interactions.0.type\": \"choice\",\n   * //   \"cmi.interactions.0.result\": \"correct\"\n   * // }\n   */\n  loadFromFlattenedJSON(\n    json: StringKeyMap,\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromFlattenedJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    const int_pattern = /^(cmi\\.interactions\\.)(\\d+)\\.(.*)$/;\n    const obj_pattern = /^(cmi\\.objectives\\.)(\\d+)\\.(.*)$/;\n\n    // Extract and categorize keys for better sorting\n    const interactions: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const objectives: {\n      key: string;\n      value: any;\n      index: number;\n      field: string;\n    }[] = [];\n    const others: { key: string; value: any }[] = [];\n\n    // Categorize keys\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key)) {\n        const intMatch = key.match(int_pattern);\n        if (intMatch) {\n          interactions.push({\n            key,\n            value: json[key],\n            index: Number(intMatch[2]),\n            field: intMatch[3],\n          });\n          continue;\n        }\n\n        const objMatch = key.match(obj_pattern);\n        if (objMatch) {\n          objectives.push({\n            key,\n            value: json[key],\n            index: Number(objMatch[2]),\n            field: objMatch[3],\n          });\n          continue;\n        }\n\n        others.push({ key, value: json[key] });\n      }\n    }\n\n    // Sort interactions: first by index, then prioritize 'id' and 'type' fields\n    interactions.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id and type\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n      if (a.field === \"type\") return -1;\n      if (b.field === \"type\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort objectives: first by index, then prioritize 'id' field\n    objectives.sort((a, b) => {\n      if (a.index !== b.index) {\n        return a.index - b.index;\n      }\n\n      // Same index, prioritize id\n      if (a.field === \"id\") return -1;\n      if (b.field === \"id\") return 1;\n\n      return a.field.localeCompare(b.field);\n    });\n\n    // Sort other keys alphabetically\n    others.sort((a, b) => a.key.localeCompare(b.key));\n\n    // Process all items in the correct order\n    const processItems = (items: { key: string; value: any }[]) => {\n      items.forEach((item) => {\n        const obj: StringKeyMap = {};\n        obj[item.key] = item.value;\n        this.loadFromJSON(\n          unflatten(obj) as StringKeyMap,\n          CMIElement,\n          setCMIValue,\n          isNotInitialized,\n          setStartingData,\n        );\n      });\n    };\n\n    // Process in order: interactions, objectives, others\n    processItems(interactions);\n    processItems(objectives);\n    processItems(others);\n  }\n\n  /**\n   * Loads CMI data from a nested JSON object with recursive traversal.\n   *\n   * This method implements a recursive algorithm for loading nested JSON data into the CMI\n   * object structure. It handles several key aspects:\n   *\n   * 1. Recursive traversal: The method recursively traverses the nested JSON structure,\n   *    building CMI element paths as it goes (e.g., \"cmi.core.student_id\").\n   *\n   * 2. Type-specific handling: Different data types are handled differently:\n   *    - Arrays: Each array element is processed individually with its index in the path\n   *    - Objects: Recursively processed with updated path\n   *    - Primitives: Set directly using setCMIValue\n   *\n   * 3. Initialization check: Ensures the method is only called before API initialization\n   *\n   * 4. Starting data storage: Stores the original JSON data for potential future use\n   *\n   * The algorithm works by:\n   * - First storing the complete JSON object via setStartingData\n   * - Iterating through each property in the JSON object\n   * - For each property, determining its type and handling it accordingly\n   * - Building the CMI element path as it traverses the structure\n   * - Setting values at the appropriate paths using setCMIValue\n   *\n   * @param {{[key: string]: any}} json - The nested JSON object to load\n   * @param {string} CMIElement - The CMI element to start from (usually empty or \"cmi\")\n   * @param {Function} setCMIValue - Function to set CMI value at a specific path\n   * @param {Function} isNotInitialized - Function to check if API is not initialized\n   * @param {Function} setStartingData - Function to store the original JSON data\n   *\n   * @example\n   * // Example of nested JSON input:\n   * // {\n   * //   \"core\": {\n   * //     \"student_id\": \"12345\",\n   * //     \"student_name\": \"John Doe\"\n   * //   },\n   * //   \"objectives\": [\n   * //     { \"id\": \"obj1\", \"score\": { \"raw\": 80 } },\n   * //     { \"id\": \"obj2\", \"score\": { \"raw\": 90 } }\n   * //   ]\n   * // }\n   */\n  loadFromJSON(\n    json: { [key: string]: any },\n    CMIElement: string = \"\",\n    setCMIValue: (CMIElement: string, value: any) => void,\n    isNotInitialized: () => boolean,\n    setStartingData: (data: StringKeyMap) => void,\n  ): void {\n    if (!isNotInitialized()) {\n      console.error(\"loadFromJSON can only be called before the call to lmsInitialize.\");\n      return;\n    }\n\n    CMIElement = CMIElement !== undefined ? CMIElement : \"cmi\";\n\n    setStartingData(json);\n\n    // could this be refactored down to flatten(json) then setCMIValue on each?\n    for (const key in json) {\n      if (Object.prototype.hasOwnProperty.call(json, key) && json[key]) {\n        const currentCMIElement = (CMIElement ? CMIElement + \".\" : \"\") + key;\n        const value = json[key];\n\n        if (value.constructor === Array) {\n          for (let i = 0; i < value.length; i++) {\n            if (value[i]) {\n              const item = value[i];\n              const tempCMIElement = `${currentCMIElement}.${i}`;\n\n              if (item.constructor === Object) {\n                this.loadFromJSON(\n                  item,\n                  tempCMIElement,\n                  setCMIValue,\n                  isNotInitialized,\n                  setStartingData,\n                );\n              } else {\n                setCMIValue(tempCMIElement, item);\n              }\n            }\n          }\n        } else if (value.constructor === Object) {\n          this.loadFromJSON(\n            value,\n            currentCMIElement,\n            setCMIValue,\n            isNotInitialized,\n            setStartingData,\n          );\n        } else {\n          setCMIValue(currentCMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Render the CMI object to JSON for sending to an LMS.\n   *\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {string}\n   */\n  renderCMIToJSONString(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): string {\n    // Do we want/need to return fields that have no set value?\n    if (sendFullCommit) {\n      return JSON.stringify({ cmi });\n    }\n    return JSON.stringify({ cmi }, (k, v) => (v === undefined ? null : v), 2);\n  }\n\n  /**\n   * Returns a JS object representing the current cmi\n   * @param {BaseCMI|StringKeyMap} cmi - The CMI object\n   * @param {boolean} sendFullCommit - Whether to send the full commit\n   * @return {object}\n   */\n  renderCMIToJSONObject(cmi: BaseCMI | StringKeyMap, sendFullCommit: boolean): StringKeyMap {\n    // Revert to the original implementation to maintain compatibility with tests\n    return JSON.parse(this.renderCMIToJSONString(cmi, sendFullCommit));\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @param {boolean} alwaysSendTotalTime - Whether to always send total time\n   * @param {boolean|Function} renderCommonCommitFields - Whether to render common commit fields\n   * @param {Function} renderCommitObject - Function to render commit object\n   * @param {Function} renderCommitCMI - Function to render commit CMI\n   * @param {LogLevel} apiLogLevel - The API log level\n   * @return {CommitObject|StringKeyMap|Array<any>}\n   */\n  getCommitObject(\n    terminateCommit: boolean,\n    alwaysSendTotalTime: boolean,\n    renderCommonCommitFields: boolean | ((commitObject: CommitObject) => boolean),\n    renderCommitObject: (terminateCommit: boolean) => CommitObject,\n    renderCommitCMI: (terminateCommit: boolean) => StringKeyMap | Array<any>,\n    apiLogLevel: LogLevel,\n  ): CommitObject | StringKeyMap | Array<any> {\n    const shouldTerminateCommit = terminateCommit || alwaysSendTotalTime;\n    const commitObject = renderCommonCommitFields\n      ? renderCommitObject(shouldTerminateCommit)\n      : renderCommitCMI(shouldTerminateCommit);\n\n    if ([LogLevelEnum.DEBUG, \"1\", 1, \"DEBUG\"].includes(apiLogLevel)) {\n      console.debug(\"Commit (terminated: \" + (terminateCommit ? \"yes\" : \"no\") + \"): \");\n      console.debug(commitObject);\n    }\n    return commitObject;\n  }\n}\n","type APIError = {\n  errorCode: number;\n  errorMessage: string;\n  detailedMessage: string;\n};\n\nexport class BaseScormValidationError extends Error {\n  constructor(CMIElement: string, errorCode: number) {\n    super(`${CMIElement} : ${errorCode.toString()}`);\n    this._errorCode = errorCode;\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, BaseScormValidationError.prototype);\n  }\n\n  private readonly _errorCode: number;\n\n  /**\n   * Getter for _errorCode\n   * @return {number}\n   */\n  get errorCode(): number {\n    return this._errorCode;\n  }\n}\n\n/**\n * Base Validation Exception\n */\nexport class ValidationError extends BaseScormValidationError implements APIError {\n  /**\n   * Constructor to take in an error message and code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   * @param {string} errorMessage\n   * @param {string} detailedMessage\n   */\n  constructor(\n    CMIElement: string,\n    errorCode: number,\n    errorMessage: string,\n    detailedMessage?: string,\n  ) {\n    super(CMIElement, errorCode);\n    this.message = `${CMIElement} : ${errorMessage}`;\n    this._errorMessage = errorMessage;\n    if (detailedMessage) {\n      this._detailedMessage = detailedMessage;\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n\n  private readonly _errorMessage: string;\n  private readonly _detailedMessage: string = \"\";\n\n  /**\n   * Getter for _errorMessage\n   * @return {string}\n   */\n  get errorMessage(): string {\n    return this._errorMessage;\n  }\n\n  /**\n   * Getter for _detailedMessage\n   * @return {string}\n   */\n  get detailedMessage(): string {\n    return this._detailedMessage;\n  }\n}\n","import { LogLevel } from \"../types/api_types\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ILoggingService } from \"../interfaces/services\";\nimport { defaultLogHandler } from \"../constants/default_settings\";\n\n/**\n * Centralized logging service implemented as a singleton\n * Provides methods for logging at different levels and configuring the log level\n */\nexport class LoggingService implements ILoggingService {\n  private static _instance: LoggingService;\n  private _logLevel: LogLevel = LogLevelEnum.ERROR;\n  private _logHandler: (messageLevel: LogLevel, logMessage: string) => void;\n\n  /**\n   * Private constructor to prevent direct instantiation\n   */\n  private constructor() {\n    // Default log handler uses console methods based on log level\n    this._logHandler = defaultLogHandler;\n  }\n\n  /**\n   * Get the singleton instance of LoggingService\n   *\n   * @returns {LoggingService} The singleton instance\n   */\n  public static getInstance(): LoggingService {\n    if (!LoggingService._instance) {\n      LoggingService._instance = new LoggingService();\n    }\n    return LoggingService._instance;\n  }\n\n  /**\n   * Set the log level\n   *\n   * @param {LogLevel} level - The log level to set\n   */\n  public setLogLevel(level: LogLevel): void {\n    this._logLevel = level;\n  }\n\n  /**\n   * Get the current log level\n   *\n   * @returns {LogLevel} The current log level\n   */\n  public getLogLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  /**\n   * Set a custom log handler\n   *\n   * @param {Function} handler - The function to handle log messages\n   */\n  public setLogHandler(handler: (messageLevel: LogLevel, logMessage: string) => void): void {\n    this._logHandler = handler;\n  }\n\n  /**\n   * Log a message if the message level is greater than or equal to the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @param {string} logMessage - The message to log\n   */\n  public log(messageLevel: LogLevel, logMessage: string): void {\n    if (this.shouldLog(messageLevel)) {\n      this._logHandler(messageLevel, logMessage);\n    }\n  }\n\n  /**\n   * Log a message at ERROR level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public error(logMessage: string): void {\n    this.log(LogLevelEnum.ERROR, logMessage);\n  }\n\n  /**\n   * Log a message at WARN level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public warn(logMessage: string): void {\n    this.log(LogLevelEnum.WARN, logMessage);\n  }\n\n  /**\n   * Log a message at INFO level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public info(logMessage: string): void {\n    this.log(LogLevelEnum.INFO, logMessage);\n  }\n\n  /**\n   * Log a message at DEBUG level\n   *\n   * @param {string} logMessage - The message to log\n   */\n  public debug(logMessage: string): void {\n    this.log(LogLevelEnum.DEBUG, logMessage);\n  }\n\n  /**\n   * Determine if a message should be logged based on its level and the current log level\n   *\n   * @param {LogLevel} messageLevel - The level of the message\n   * @returns {boolean} Whether the message should be logged\n   */\n  private shouldLog(messageLevel: LogLevel): boolean {\n    // Convert string levels to numbers for comparison\n    const numericMessageLevel = this.getNumericLevel(messageLevel);\n    const numericLogLevel = this.getNumericLevel(this._logLevel);\n\n    return numericMessageLevel >= numericLogLevel;\n  }\n\n  /**\n   * Convert a log level to its numeric value\n   *\n   * @param {LogLevel} level - The log level to convert\n   * @returns {number} The numeric value of the log level\n   */\n  private getNumericLevel(level: LogLevel): number {\n    if (level === undefined) return LogLevelEnum.NONE;\n\n    if (typeof level === \"number\") return level;\n\n    switch (level) {\n      case \"1\":\n      case \"DEBUG\":\n        return LogLevelEnum.DEBUG;\n      case \"2\":\n      case \"INFO\":\n        return LogLevelEnum.INFO;\n      case \"3\":\n      case \"WARN\":\n        return LogLevelEnum.WARN;\n      case \"4\":\n      case \"ERROR\":\n        return LogLevelEnum.ERROR;\n      case \"5\":\n      case \"NONE\":\n        return LogLevelEnum.NONE;\n      default:\n        return LogLevelEnum.ERROR; // Default to ERROR if unknown\n    }\n  }\n}\n\n// Export a function to get the singleton instance\nexport function getLoggingService(): LoggingService {\n  return LoggingService.getInstance();\n}\n","import { LogLevelEnum } from \"../constants/enums\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { ErrorCode } from \"../constants/error_codes\";\nimport { ValidationError } from \"../exceptions\";\nimport { IErrorHandlingService, ILoggingService } from \"../interfaces/services\";\nimport { getLoggingService } from \"./LoggingService\";\n\n/**\n * Service for handling SCORM errors\n */\nexport class ErrorHandlingService implements IErrorHandlingService {\n  private _lastErrorCode: string = \"0\";\n  private readonly _errorCodes: ErrorCode;\n  private readonly _apiLog: (\n    functionName: string,\n    message: string,\n    logLevel?: LogLevelEnum,\n    CMIElement?: string,\n  ) => void;\n  private readonly _getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string;\n  private readonly _loggingService: ILoggingService;\n\n  /**\n   * Constructor for ErrorHandlingService\n   *\n   * @param {ErrorCode} errorCodes - The error codes object\n   * @param {Function} apiLog - Function for logging API calls\n   * @param {Function} getLmsErrorMessageDetails - Function for getting error message details\n   * @param {ILoggingService} loggingService - Optional logging service instance\n   */\n  constructor(\n    errorCodes: ErrorCode,\n    apiLog: (\n      functionName: string,\n      message: string,\n      logLevel?: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n    getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n    loggingService?: ILoggingService,\n  ) {\n    this._errorCodes = errorCodes;\n    this._apiLog = apiLog;\n    this._getLmsErrorMessageDetails = getLmsErrorMessageDetails;\n    this._loggingService = loggingService || getLoggingService();\n  }\n\n  /**\n   * Get the last error code\n   *\n   * @return {string} - The last error code\n   */\n  get lastErrorCode(): string {\n    return this._lastErrorCode;\n  }\n\n  /**\n   * Set the last error code\n   *\n   * @param {string} errorCode - The error code to set\n   */\n  set lastErrorCode(errorCode: string) {\n    this._lastErrorCode = errorCode;\n  }\n\n  /**\n   * Throws a SCORM error\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The error number\n   * @param {string} message - The error message\n   * @throws {ValidationError} - If throwException is true, throws a ValidationError\n   */\n  throwSCORMError(CMIElement: string, errorNumber: number, message?: string): void {\n    if (!message) {\n      message = this._getLmsErrorMessageDetails(errorNumber, true);\n    }\n\n    // Format a more descriptive error message with context\n    const formattedMessage = `SCORM Error ${errorNumber}: ${message}${CMIElement ? ` [Element: ${CMIElement}]` : \"\"}`;\n\n    // Log using both the API log and the logging service for consistency\n    this._apiLog(\"throwSCORMError\", errorNumber + \": \" + message, LogLevelEnum.ERROR, CMIElement);\n    this._loggingService.error(formattedMessage);\n\n    this._lastErrorCode = String(errorNumber);\n  }\n\n  /**\n   * Clears the last SCORM error code on success.\n   *\n   * @param {string} success - Whether the operation was successful\n   */\n  clearSCORMError(success: string): void {\n    if (success !== undefined && success !== global_constants.SCORM_FALSE) {\n      this._lastErrorCode = \"0\";\n    }\n  }\n\n  /**\n   * Handles exceptions that occur when accessing or setting CMI values.\n   *\n   * This method provides centralized error handling for exceptions that occur during\n   * CMI data operations. It differentiates between different types of errors and\n   * handles them appropriately:\n   *\n   * 1. ValidationError: These are expected errors from the validation system that\n   *    indicate a specific SCORM error condition (like invalid data format or range).\n   *    For these errors, the method:\n   *    - Sets the lastErrorCode to the error code from the ValidationError\n   *    - Returns SCORM_FALSE to indicate failure to the caller\n   *\n   * 2. Standard JavaScript Error: For general JavaScript errors (like TypeError,\n   *    ReferenceError, etc.), the method:\n   *    - Logs the error message with stack trace to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * 3. Unknown exceptions: For any other type of exception that doesn't match the\n   *    above categories, the method:\n   *    - Logs the entire exception object to the logging service\n   *    - Sets a general SCORM error\n   *    - Returns SCORM_FALSE to indicate failure\n   *\n   * This method is critical for maintaining SCORM compliance by ensuring that\n   * all errors are properly translated into the appropriate SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {ValidationError|Error|unknown} e - The exception that was thrown\n   * @param {string} returnValue - The default return value (typically an empty string)\n   * @return {string} - Either the original returnValue or SCORM_FALSE if an error occurred\n   *\n   * @example\n   * try {\n   *   const value = getCMIValue(\"cmi.core.score.raw\");\n   *   return value;\n   * } catch (e) {\n   *   return handleValueAccessException(e, \"\");\n   * }\n   */\n  handleValueAccessException(\n    CMIElement: string,\n    e: Error | ValidationError | unknown,\n    returnValue: string,\n  ): string {\n    if (e instanceof ValidationError) {\n      const validationError = e as ValidationError;\n      this._lastErrorCode = String(validationError.errorCode);\n\n      // Log validation errors at WARN level with context\n      const errorMessage = `Validation Error ${validationError.errorCode}: ${validationError.message} [Element: ${CMIElement}]`;\n      this._loggingService.warn(errorMessage);\n\n      returnValue = global_constants.SCORM_FALSE;\n    } else if (e instanceof Error) {\n      // For standard JS errors, include the stack trace and error type\n      const errorType = e.constructor.name; // Gets the error type (e.g., TypeError, ReferenceError)\n      const errorMessage = `${errorType}: ${e.message} [Element: ${CMIElement}]`;\n      const stackTrace = e.stack || \"\";\n\n      // Log the detailed error with stack trace\n      this._loggingService.error(`${errorMessage}\\n${stackTrace}`);\n\n      this.throwSCORMError(CMIElement, this._errorCodes.GENERAL, `${errorType}: ${e.message}`);\n    } else {\n      // For unknown errors, provide as much context as possible\n      const errorMessage = `Unknown error occurred while accessing [Element: ${CMIElement}]`;\n\n      this._loggingService.error(errorMessage);\n\n      try {\n        // Try to stringify the error object for more details\n        const errorDetails = JSON.stringify(e);\n        this._loggingService.error(`Error details: ${errorDetails}`);\n      } catch (jsonError) {\n        // If stringify fails, log that we couldn't get more details\n        this._loggingService.error(\"Could not stringify error object for details\");\n      }\n\n      this.throwSCORMError(CMIElement, this._errorCodes.GENERAL, \"Unknown error\");\n    }\n    return returnValue;\n  }\n\n  /**\n   * Get the error codes object\n   *\n   * @return {ErrorCode} - The error codes object\n   */\n  get errorCodes(): ErrorCode {\n    return this._errorCodes;\n  }\n}\n\n// Export a factory function to create the service\nexport function createErrorHandlingService(\n  errorCodes: ErrorCode,\n  apiLog: (\n    functionName: string,\n    message: string,\n    logLevel: LogLevelEnum,\n    CMIElement?: string,\n  ) => void,\n  getLmsErrorMessageDetails: (errorCode: number, detail: boolean) => string,\n  loggingService?: ILoggingService,\n): ErrorHandlingService {\n  return new ErrorHandlingService(errorCodes, apiLog, getLmsErrorMessageDetails, loggingService);\n}\n","import { CommitObject, InternalSettings, ResultObject } from \"../types/api_types\";\nimport { global_constants } from \"../constants/api_constants\";\nimport { LogLevelEnum } from \"../constants/enums\";\nimport { ErrorCode } from \"../constants/error_codes\";\n\n/**\n * Interface for sync queue item\n */\ninterface SyncQueueItem {\n  id: string;\n  courseId: string;\n  timestamp: number;\n  data: CommitObject;\n  syncAttempts: number;\n}\n\n/**\n * Service for handling offline storage and synchronization of SCORM data\n */\nexport class OfflineStorageService {\n  private settings: InternalSettings;\n  private error_codes: ErrorCode;\n  private storeName: string = \"scorm_again_offline_data\";\n  private syncQueue: string = \"scorm_again_sync_queue\";\n  private isOnline: boolean = navigator.onLine;\n  private syncInProgress: boolean = false;\n\n  /**\n   * Constructor for OfflineStorageService\n   * @param {Settings} settings - The settings object\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Function} apiLog - The logging function\n   */\n  constructor(\n    settings: InternalSettings,\n    error_codes: ErrorCode,\n    private apiLog: (\n      functionName: string,\n      message: any,\n      messageLevel: LogLevelEnum,\n      CMIElement?: string,\n    ) => void,\n  ) {\n    this.settings = settings;\n    this.error_codes = error_codes;\n\n    // Initialize listeners for online/offline events\n    window.addEventListener(\"online\", this.handleOnlineStatusChange.bind(this));\n    window.addEventListener(\"offline\", this.handleOnlineStatusChange.bind(this));\n  }\n\n  /**\n   * Handle changes in online status\n   */\n  private handleOnlineStatusChange() {\n    const wasOnline = this.isOnline;\n    this.isOnline = navigator.onLine;\n\n    // If we've come back online, trigger sync process\n    if (!wasOnline && this.isOnline) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        \"Device is back online, attempting to sync...\",\n        LogLevelEnum.INFO,\n      );\n      this.syncOfflineData();\n    } else if (wasOnline && !this.isOnline) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        \"Device is offline, data will be stored locally\",\n        LogLevelEnum.INFO,\n      );\n    }\n  }\n\n  /**\n   * Store commit data offline\n   * @param {string} courseId - Identifier for the course\n   * @param {CommitObject} commitData - The data to store offline\n   * @returns {Promise<ResultObject>} - Result of the storage operation\n   */\n  async storeOffline(courseId: string, commitData: CommitObject): Promise<ResultObject> {\n    try {\n      // Store the data in the sync queue with timestamp and unique ID\n      const queueItem: SyncQueueItem = {\n        id: `${courseId}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        courseId,\n        timestamp: Date.now(),\n        data: commitData,\n        syncAttempts: 0,\n      };\n\n      // Get current queue\n      const currentQueue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n      currentQueue.push(queueItem);\n\n      // Save updated queue\n      await this.saveToStorage(this.syncQueue, currentQueue);\n\n      // Also update the current state in the main storage (latest known state)\n      await this.saveToStorage(`${this.storeName}_${courseId}`, commitData);\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Stored data offline for course ${courseId}`,\n        LogLevelEnum.INFO,\n      );\n\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error storing offline data: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL,\n      };\n    }\n  }\n\n  /**\n   * Get the stored offline data for a course\n   * @param {string} courseId - Identifier for the course\n   * @returns {Promise<CommitObject|null>} - The stored data or null if not found\n   */\n  async getOfflineData(courseId: string): Promise<CommitObject | null> {\n    try {\n      const data = await this.getFromStorage<CommitObject>(`${this.storeName}_${courseId}`);\n      return data || null;\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error retrieving offline data: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return null;\n    }\n  }\n\n  /**\n   * Synchronize offline data with the LMS when connection is available\n   * @returns {Promise<boolean>} - Success status of synchronization\n   */\n  async syncOfflineData(): Promise<boolean> {\n    // Don't run multiple sync processes at once\n    if (this.syncInProgress || !this.isOnline) {\n      return false;\n    }\n\n    this.syncInProgress = true;\n\n    try {\n      // Get the queue of items to sync\n      const syncQueue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n\n      if (syncQueue.length === 0) {\n        this.syncInProgress = false;\n        return true;\n      }\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Found ${syncQueue.length} items to sync`,\n        LogLevelEnum.INFO,\n      );\n\n      // Keep track of successful and failed sync attempts\n      const remainingQueue: SyncQueueItem[] = [];\n\n      // Process each queue item\n      for (const item of syncQueue) {\n        // Skip items that have been attempted too many times\n        if (item.syncAttempts >= 5) {\n          this.apiLog(\n            \"OfflineStorageService\",\n            `Skipping item ${item.id} after 5 failed attempts`,\n            LogLevelEnum.WARN,\n          );\n          continue;\n        }\n\n        try {\n          // Attempt to sync this item\n          const syncResult = await this.sendDataToLMS(item.data);\n\n          if (syncResult.result === global_constants.SCORM_TRUE) {\n            // Sync was successful, no need to keep this item\n            this.apiLog(\n              \"OfflineStorageService\",\n              `Successfully synced item ${item.id}`,\n              LogLevelEnum.INFO,\n            );\n          } else {\n            // Sync failed, increment attempts and keep in queue\n            item.syncAttempts++;\n            remainingQueue.push(item);\n            this.apiLog(\n              \"OfflineStorageService\",\n              `Failed to sync item ${item.id}, attempt #${item.syncAttempts}`,\n              LogLevelEnum.WARN,\n            );\n          }\n        } catch (error) {\n          // On error, increment attempts and keep in queue\n          item.syncAttempts++;\n          remainingQueue.push(item);\n          this.apiLog(\n            \"OfflineStorageService\",\n            `Error syncing item ${item.id}: ${error}`,\n            LogLevelEnum.ERROR,\n          );\n        }\n      }\n\n      // Update the queue with remaining items\n      await this.saveToStorage(this.syncQueue, remainingQueue);\n\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Sync completed. ${syncQueue.length - remainingQueue.length} items synced, ${remainingQueue.length} items remaining`,\n        LogLevelEnum.INFO,\n      );\n\n      this.syncInProgress = false;\n      return true;\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error during sync process: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      this.syncInProgress = false;\n      return false;\n    }\n  }\n\n  /**\n   * Send data to the LMS when online\n   * @param {CommitObject} data - The data to send to the LMS\n   * @returns {Promise<ResultObject>} - Result of the sync operation\n   */\n  private async sendDataToLMS(data: CommitObject): Promise<ResultObject> {\n    if (!this.settings.lmsCommitUrl) {\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL,\n      };\n    }\n\n    try {\n      // Apply request handler if configured\n      const processedData = this.settings.requestHandler(data);\n\n      // Send the data to the LMS\n      const init = {\n        method: \"POST\",\n        mode: this.settings.fetchMode,\n        body: JSON.stringify(processedData),\n        headers: {\n          ...this.settings.xhrHeaders,\n          \"Content-Type\": this.settings.commitRequestDataType,\n        },\n      } as RequestInit;\n\n      if (this.settings.xhrWithCredentials) {\n        init.credentials = \"include\";\n      }\n\n      const response = await fetch(this.settings.lmsCommitUrl as string, init);\n\n      // Process the response using the configured handler\n      const result =\n        typeof this.settings.responseHandler === \"function\"\n          ? await this.settings.responseHandler(response)\n          : await response.json();\n\n      if (\n        response.status >= 200 &&\n        response.status <= 299 &&\n        (result.result === true || result.result === global_constants.SCORM_TRUE)\n      ) {\n        if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n          result.errorCode = 0;\n        }\n        return result;\n      } else {\n        if (!Object.hasOwnProperty.call(result, \"errorCode\")) {\n          result.errorCode = this.error_codes.GENERAL;\n        }\n        return result;\n      }\n    } catch (error) {\n      this.apiLog(\n        \"OfflineStorageService\",\n        `Error sending data to LMS: ${error}`,\n        LogLevelEnum.ERROR,\n      );\n      return {\n        result: global_constants.SCORM_FALSE,\n        errorCode: this.error_codes.GENERAL,\n      };\n    }\n  }\n\n  /**\n   * Check if the device is currently online\n   * @returns {boolean} - Online status\n   */\n  isDeviceOnline(): boolean {\n    return this.isOnline;\n  }\n\n  /**\n   * Get item from localStorage\n   * @param {string} key - The key to retrieve\n   * @returns {Promise<T|null>} - The retrieved data\n   */\n  private async getFromStorage<T>(key: string): Promise<T | null> {\n    const storedData = localStorage.getItem(key);\n    if (storedData) {\n      try {\n        return JSON.parse(storedData) as T;\n      } catch (e) {\n        return null;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Save item to localStorage\n   * @param {string} key - The key to store under\n   * @param {any} data - The data to store\n   * @returns {Promise<void>}\n   */\n  private async saveToStorage(key: string, data: any): Promise<void> {\n    localStorage.setItem(key, JSON.stringify(data));\n  }\n\n  /**\n   * Check if there is pending offline data for a course\n   * @param {string} courseId - Identifier for the course\n   * @returns {Promise<boolean>} - Whether there is pending data\n   */\n  async hasPendingOfflineData(courseId: string): Promise<boolean> {\n    const queue = (await this.getFromStorage<SyncQueueItem[]>(this.syncQueue)) || [];\n    return queue.some((item) => item.courseId === courseId);\n  }\n\n  /**\n   * Update the service settings\n   * @param {Settings} settings - The new settings\n   */\n  updateSettings(settings: InternalSettings): void {\n    this.settings = settings;\n  }\n}\n","/**\n * Base class for API cmi objects\n */\nexport abstract class BaseCMI {\n  jsonString = false;\n  protected readonly _cmi_element: string;\n  protected _initialized = false;\n  private _start_time: number | undefined;\n\n  /**\n   * Constructor for BaseCMI\n   * @param {string} cmi_element\n   */\n  constructor(cmi_element: string) {\n    this._cmi_element = cmi_element;\n  }\n\n  /**\n   * Getter for _initialized\n   * @return {boolean}\n   */\n  get initialized(): boolean {\n    return this._initialized;\n  }\n\n  /**\n   * Getter for _start_time\n   * @return {number | undefined}\n   */\n  get start_time(): number | undefined {\n    return this._start_time;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize(): void {\n    this._initialized = true;\n  }\n\n  /**\n   * Called when the player should override the 'session_time' provided by\n   * the module\n   */\n  setStartTime(): void {\n    this._start_time = new Date().getTime();\n  }\n\n  abstract reset(): void;\n}\n\n/**\n * Base class for cmi root objects\n */\nexport abstract class BaseRootCMI extends BaseCMI {\n  abstract getCurrentTotalTime(): string;\n}\n","export type ErrorCode = {\n  [key: string]: number;\n};\n\nexport const global_errors: ErrorCode = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nexport const scorm12_errors: ErrorCode = {\n  ...global_errors,\n  RETRIEVE_BEFORE_INIT: 301,\n  STORE_BEFORE_INIT: 301,\n  COMMIT_BEFORE_INIT: 301,\n  ARGUMENT_ERROR: 201,\n  CHILDREN_ERROR: 202,\n  COUNT_ERROR: 203,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 401,\n  VALUE_NOT_INITIALIZED: 301,\n  INVALID_SET_VALUE: 402,\n  READ_ONLY_ELEMENT: 403,\n  WRITE_ONLY_ELEMENT: 404,\n  TYPE_MISMATCH: 405,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n\nexport const scorm2004_errors: ErrorCode = {\n  ...global_errors,\n  INITIALIZATION_FAILED: 102,\n  INITIALIZED: 103,\n  TERMINATED: 104,\n  TERMINATION_FAILURE: 111,\n  TERMINATION_BEFORE_INIT: 112,\n  MULTIPLE_TERMINATIONS: 113,\n  RETRIEVE_BEFORE_INIT: 122,\n  RETRIEVE_AFTER_TERM: 123,\n  STORE_BEFORE_INIT: 132,\n  STORE_AFTER_TERM: 133,\n  COMMIT_BEFORE_INIT: 142,\n  COMMIT_AFTER_TERM: 143,\n  ARGUMENT_ERROR: 201,\n  GENERAL_GET_FAILURE: 301,\n  GENERAL_SET_FAILURE: 351,\n  GENERAL_COMMIT_FAILURE: 391,\n  UNDEFINED_DATA_MODEL: 401,\n  UNIMPLEMENTED_ELEMENT: 402,\n  VALUE_NOT_INITIALIZED: 403,\n  READ_ONLY_ELEMENT: 404,\n  WRITE_ONLY_ELEMENT: 405,\n  TYPE_MISMATCH: 406,\n  VALUE_OUT_OF_RANGE: 407,\n  DEPENDENCY_NOT_ESTABLISHED: 408,\n};\n","import { BaseCMI } from \"./base_cmi\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\n\n/**\n * Base class for cmi *.n objects\n */\nexport class CMIArray extends BaseCMI {\n  private readonly _errorCode: number;\n  private readonly _errorClass: typeof BaseScormValidationError;\n  private readonly __children: string;\n  public childArray: any[];\n\n  /**\n   * Constructor cmi *.n arrays\n   * @param {object} params\n   */\n  constructor(params: {\n    CMIElement: string;\n    children: string;\n    errorCode?: number;\n    errorClass?: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n    this.__children = params.children;\n    this._errorCode = params.errorCode || scorm12_errors.GENERAL;\n    this._errorClass = params.errorClass || BaseScormValidationError;\n    this.childArray = [];\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(wipe: boolean = false): void {\n    this._initialized = false;\n    if (wipe) {\n      this.childArray = [];\n    } else {\n      // Reset all children\n      for (let i = 0; i < this.childArray.length; i++) {\n        this.childArray[i].reset();\n      }\n    }\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this._errorClass(this._cmi_element + \"._children\", this._errorCode);\n  }\n\n  /**\n   * Getter for _count\n   * @return {number}\n   */\n  get _count(): number {\n    return this.childArray.length;\n  }\n\n  /**\n   * Setter for _count. Just throws an error.\n   * @param {number} _count\n   */\n  set _count(_count: number) {\n    throw new this._errorClass(this._cmi_element + \"._count\", this._errorCode);\n  }\n\n  /**\n   * toJSON for *.n arrays\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result: { [key: string]: any } = {};\n    for (let i = 0; i < this.childArray.length; i++) {\n      result[i + \"\"] = this.childArray[i];\n    }\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { ErrorCode } from \"./constants/error_codes\";\nimport { global_constants } from \"./constants/api_constants\";\nimport { formatMessage, StringKeyMap, stringMatches } from \"./utilities\";\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport { CommitObject, InternalSettings, LogLevel, ResultObject, Settings } from \"./types/api_types\";\nimport { DefaultSettings } from \"./constants/default_settings\";\nimport { IBaseAPI } from \"./interfaces/IBaseAPI\";\nimport { ScheduledCommit } from \"./helpers/scheduled_commit\";\nimport { LogLevelEnum } from \"./constants/enums\";\nimport { HttpService } from \"./services/HttpService\";\nimport { EventService } from \"./services/EventService\";\nimport { SerializationService } from \"./services/SerializationService\";\nimport { createErrorHandlingService } from \"./services/ErrorHandlingService\";\nimport { getLoggingService } from \"./services/LoggingService\";\nimport { OfflineStorageService } from \"./services/OfflineStorageService\";\nimport {\n  ICMIDataService,\n  IErrorHandlingService,\n  IEventService,\n  IHttpService,\n  ILoggingService,\n  IOfflineStorageService,\n  ISerializationService\n} from \"./interfaces/services\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { ValidationError } from \"./exceptions\";\n\n/**\n * Base API class for AICC, SCORM 1.2, and SCORM 2004. Should be considered\n * abstract, and never initialized on its own.\n */\nexport default abstract class BaseAPI implements IBaseAPI {\n  private _timeout?: ScheduledCommit | undefined;\n  private readonly _error_codes: ErrorCode;\n  private _settings: InternalSettings = DefaultSettings;\n  private readonly _httpService: IHttpService;\n  private _eventService: IEventService;\n  private _serializationService: ISerializationService;\n  private readonly _errorHandlingService: IErrorHandlingService;\n  private readonly _loggingService: ILoggingService;\n  private _offlineStorageService?: IOfflineStorageService;\n  private _courseId: string = \"\";\n\n  /**\n   * Constructor for Base API class. Sets some shared API fields, as well as\n   * sets up options for the API.\n   * @param {ErrorCode} error_codes - The error codes object\n   * @param {Settings} settings - Optional settings for the API\n   * @param {IHttpService} httpService - Optional HTTP service instance\n   * @param {IEventService} eventService - Optional Event service instance\n   * @param {ISerializationService} serializationService - Optional Serialization service instance\n   * @param {ICMIDataService} cmiDataService - Optional CMI Data service instance\n   * @param {IErrorHandlingService} errorHandlingService - Optional Error Handling service instance\n   * @param {ILoggingService} loggingService - Optional Logging service instance\n   * @param {IOfflineStorageService} offlineStorageService - Optional Offline Storage service instance\n   */\n  protected constructor(\n    error_codes: ErrorCode,\n    settings?: Settings,\n    httpService?: IHttpService,\n    eventService?: IEventService,\n    serializationService?: ISerializationService,\n    cmiDataService?: ICMIDataService,\n    errorHandlingService?: IErrorHandlingService,\n    loggingService?: ILoggingService,\n    offlineStorageService?: IOfflineStorageService,\n  ) {\n    if (new.target === BaseAPI) {\n      throw new TypeError(\"Cannot construct BaseAPI instances directly\");\n    }\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n\n    this._error_codes = error_codes;\n\n    if (settings) {\n      this.settings = {\n        ...DefaultSettings,\n        ...settings,\n      } as InternalSettings;\n    }\n\n    // Initialize and configure LoggingService\n    this._loggingService = loggingService || getLoggingService();\n    this._loggingService.setLogLevel(this.apiLogLevel);\n\n    // If settings include a custom onLogMessage function, use it as the log handler\n    if (this.settings.onLogMessage) {\n      this._loggingService.setLogHandler(this.settings.onLogMessage);\n    }\n\n    // Initialize HTTP service\n    this._httpService = httpService || new HttpService(this.settings, this._error_codes);\n\n    // Initialize Event service\n    this._eventService =\n      eventService ||\n      new EventService((functionName, message, level, element) =>\n        this.apiLog(functionName, message, level, element),\n      );\n\n    // Initialize Serialization service\n    this._serializationService = serializationService || new SerializationService();\n\n    // Initialize Error Handling service\n    this._errorHandlingService =\n      errorHandlingService ||\n      createErrorHandlingService(\n        this._error_codes,\n        (functionName, message, level, element) =>\n          this.apiLog(functionName, message, level, element),\n        (errorNumber, detail) => this.getLmsErrorMessageDetails(errorNumber, detail),\n      );\n\n    // Initialize Offline Storage service if enabled\n    if (this.settings.enableOfflineSupport) {\n      this._offlineStorageService =\n        offlineStorageService ||\n        new OfflineStorageService(\n          this.settings,\n          this._error_codes,\n          (functionName, message, level, element) =>\n            this.apiLog(functionName, message, level, element),\n        );\n\n      if (this.settings.courseId) {\n        this._courseId = this.settings.courseId;\n      }\n\n      // Check for offline data to restore on initialization\n      if (this._offlineStorageService && this._courseId) {\n        this._offlineStorageService\n          .getOfflineData(this._courseId)\n          .then((offlineData) => {\n            if (offlineData) {\n              this.apiLog(\"constructor\", \"Found offline data to restore\", LogLevelEnum.INFO);\n              // Restore data from offline storage\n              this.loadFromJSON(offlineData.runtimeData);\n            }\n          })\n          .catch((error) => {\n            this.apiLog(\n              \"constructor\",\n              `Error retrieving offline data: ${error}`,\n              LogLevelEnum.ERROR,\n            );\n          });\n      }\n    }\n  }\n\n  public abstract cmi: BaseCMI;\n  public startingData?: StringKeyMap;\n\n  public currentState: number;\n  public apiLogLevel: LogLevel;\n  public selfReportSessionTime: boolean;\n\n  /**\n   * Get the last error code\n   * @return {string}\n   */\n  get lastErrorCode(): string {\n    return this._errorHandlingService?.lastErrorCode ?? \"0\";\n  }\n\n  /**\n   * Set the last error code\n   * @param {string} errorCode\n   */\n  set lastErrorCode(errorCode: string) {\n    if (this._errorHandlingService) {\n      this._errorHandlingService.lastErrorCode = errorCode;\n    }\n  }\n\n  /**\n   * Reset the API to its initial state.\n   * This method clears all current data and resets the API to an uninitialized state.\n   * It can optionally accept new settings to configure the API after reset.\n   *\n   * @param {Settings} settings - Optional new settings to apply after reset\n   */\n  abstract reset(settings?: Settings): void;\n\n  /**\n   * Common reset method for all APIs. New settings are merged with the existing settings.\n   * @param {Settings} settings\n   * @protected\n   */\n  commonReset(settings?: Settings): void {\n    this.apiLog(\"reset\", \"Called\", LogLevelEnum.INFO);\n\n    this.settings = { ...this.settings, ...settings };\n\n    this.clearScheduledCommit();\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n    this.lastErrorCode = \"0\";\n    this._eventService.reset();\n    this.startingData = {};\n\n    // Update offline storage service with new settings if it exists\n    if (this._offlineStorageService) {\n      this._offlineStorageService.updateSettings(this.settings);\n\n      if (settings?.courseId) {\n        this._courseId = settings.courseId;\n      }\n    }\n  }\n\n  /**\n   * Initialize the API\n   * @param {string} callbackName\n   * @param {string} initializeMessage\n   * @param {string} terminationMessage\n   * @return {string}\n   */\n  initialize(\n    callbackName: string,\n    initializeMessage?: string,\n    terminationMessage?: string,\n  ): string {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.isInitialized()) {\n      this.throwSCORMError(\"api\", this._error_codes.INITIALIZED, initializeMessage);\n    } else if (this.isTerminated()) {\n      this.throwSCORMError(\"api\", this._error_codes.TERMINATED, terminationMessage);\n    } else {\n      if (this.selfReportSessionTime) {\n        this.cmi.setStartTime();\n      }\n\n      this.currentState = global_constants.STATE_INITIALIZED;\n      this.lastErrorCode = \"0\";\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n\n      // If enabled, attempt to sync offline data on initialization\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._courseId &&\n        this.settings.syncOnInitialize &&\n        this._offlineStorageService.isDeviceOnline()\n      ) {\n        this._offlineStorageService.hasPendingOfflineData(this._courseId).then((hasPendingData) => {\n          if (hasPendingData) {\n            this.apiLog(\n              callbackName,\n              \"Syncing pending offline data on initialization\",\n              LogLevelEnum.INFO,\n            );\n            this._offlineStorageService?.syncOfflineData().then((syncSuccess) => {\n              if (syncSuccess) {\n                this.apiLog(callbackName, \"Successfully synced offline data\", LogLevelEnum.INFO);\n                this.processListeners(\"OfflineDataSynced\");\n              }\n            });\n          }\n        });\n      }\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Initialize the LMS API\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsInitialize(): string;\n\n  /**\n   * Finish the current LMS API session\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsFinish(): string;\n\n  /**\n   * Get the value of a CMI element from the LMS\n   * @param {string} CMIElement - The CMI element to get the value of\n   * @return {string} The value of the CMI element\n   */\n  abstract lmsGetValue(CMIElement: string): string;\n\n  /**\n   * Set the value of a CMI element in the LMS\n   * @param {string} CMIElement - The CMI element to set the value of\n   * @param {any} value - The value to set\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsSetValue(CMIElement: string, value: any): string;\n\n  /**\n   * Commit the current data to the LMS\n   * @return {string} \"true\" if successful, \"false\" otherwise\n   */\n  abstract lmsCommit(): string;\n\n  /**\n   * Get the last error code from the LMS\n   * @return {string} The last error code\n   */\n  abstract lmsGetLastError(): string;\n\n  /**\n   * Get the error string for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get the string for\n   * @return {string} The error string\n   */\n  abstract lmsGetErrorString(CMIErrorCode: string | number): string;\n\n  /**\n   * Get diagnostic information for a specific error code\n   * @param {string|number} CMIErrorCode - The error code to get diagnostic information for\n   * @return {string} The diagnostic information\n   */\n  abstract lmsGetDiagnostic(CMIErrorCode: string | number): string;\n\n  /**\n   * Abstract method for validating that a response is correct.\n   * This method is used to validate the format and content of a response\n   * before it is set in the CMI data model.\n   *\n   * @param {string} _CMIElement - The CMI element path to validate\n   * @param {any} _value - The value to validate\n   * @throws {Error} If the response format is invalid\n   */\n  abstract validateCorrectResponse(_CMIElement: string, _value: any): void;\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   * APIs that inherit BaseAPI should override this method.\n   *\n   * @param {string} _CMIElement - unused\n   * @param {*} _value - unused\n   * @param {boolean} _foundFirstIndex - unused\n   * @return {BaseCMI|null}\n   * @abstract\n   */\n  abstract getChildElement(\n    _CMIElement: string,\n    _value: any,\n    _foundFirstIndex: boolean,\n  ): BaseCMI | null;\n\n  /**\n   * Attempts to store the data to the LMS, logs data if no LMS configured\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _calculateTotalTime\n   * @return {ResultObject}\n   * @abstract\n   */\n  abstract storeData(_calculateTotalTime: boolean): Promise<ResultObject>;\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _terminateCommit\n   * @return {StringKeyMap|Array}\n   * @abstract\n   */\n  abstract renderCommitCMI(_terminateCommit: boolean): StringKeyMap | Array<string>;\n\n  /**\n   * Render the commit object to the shortened format for LMS commit.\n   * This method transforms the CMI data into a format suitable for sending to the LMS.\n   * It is called during the commit process to prepare the data for transmission.\n   *\n   * @param {boolean} _terminateCommit - Whether this commit is part of the termination process\n   * @return {CommitObject} A formatted object containing the data to be sent to the LMS\n   * @example\n   * // Example of a commit object structure\n   * {\n   *   method: \"POST\",\n   *   params: {\n   *     cmi: { ... },\n   *     finishState: \"COMPLETED\"\n   *   }\n   * }\n   */\n  abstract renderCommitObject(_terminateCommit: boolean): CommitObject;\n\n  /**\n   * Logging for all SCORM actions\n   *\n   * @param {string} functionName\n   * @param {string} logMessage\n   * @param {number} messageLevel\n   * @param {string} CMIElement\n   */\n  apiLog(functionName: string, logMessage: string, messageLevel: LogLevel, CMIElement?: string) {\n    logMessage = formatMessage(functionName, logMessage, CMIElement);\n\n    if (messageLevel >= this.apiLogLevel) {\n      // Use the injected LoggingService\n      this._loggingService.log(messageLevel, logMessage);\n    }\n  }\n\n  /**\n   * Getter for _error_codes\n   * @return {ErrorCode}\n   */\n  get error_codes(): ErrorCode {\n    return this._error_codes;\n  }\n\n  /**\n   * Getter for _settings\n   * @return {Settings}\n   */\n  get settings(): InternalSettings {\n    return this._settings;\n  }\n\n  /**\n   * Setter for _settings\n   * @param {Settings} settings\n   */\n  set settings(settings: Settings) {\n    const previousSettings = this._settings;\n    this._settings = { ...this._settings, ...settings };\n\n    // Update HTTP service settings\n    this._httpService?.updateSettings(this._settings);\n\n    // Update log level if it changed\n    if (settings.logLevel !== undefined && settings.logLevel !== previousSettings.logLevel) {\n      this.apiLogLevel = settings.logLevel;\n      this._loggingService?.setLogLevel(settings.logLevel);\n    }\n\n    // Update log handler if onLogMessage changed\n    if (\n      settings.onLogMessage !== undefined &&\n      settings.onLogMessage !== previousSettings.onLogMessage\n    ) {\n      this._loggingService?.setLogHandler(settings.onLogMessage);\n    }\n  }\n\n  /**\n   * Terminates the current run of the API\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async terminate(callbackName: string, checkTerminated: boolean): Promise<string> {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.TERMINATION_BEFORE_INIT,\n        this._error_codes.MULTIPLE_TERMINATION,\n      )\n    ) {\n      this.currentState = global_constants.STATE_TERMINATED;\n      // If enabled, attempt to sync offline data before termination\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._courseId &&\n        this.settings.syncOnTerminate &&\n        this._offlineStorageService.isDeviceOnline()\n      ) {\n        const hasPendingData = await this._offlineStorageService.hasPendingOfflineData(\n          this._courseId,\n        );\n        if (hasPendingData) {\n          this.apiLog(\n            callbackName,\n            \"Syncing pending offline data before termination\",\n            LogLevelEnum.INFO,\n          );\n          await this._offlineStorageService.syncOfflineData();\n        }\n      }\n\n      const result: ResultObject = await this.storeData(true);\n      if ((result.errorCode ?? 0) > 0) {\n        this.throwSCORMError(\"api\", result.errorCode);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Get the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  getValue(callbackName: string, checkTerminated: boolean, CMIElement: string): string {\n    let returnValue: string = \"\";\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.RETRIEVE_BEFORE_INIT,\n        this._error_codes.RETRIEVE_AFTER_TERM,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.getCMIValue(CMIElement);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement);\n    }\n\n    this.apiLog(callbackName, \": returned: \" + returnValue, LogLevelEnum.INFO, CMIElement);\n\n    if (returnValue === undefined) {\n      return \"\";\n    }\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Sets the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {string} commitCallback\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  setValue(\n    callbackName: string,\n    commitCallback: string,\n    checkTerminated: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (value !== undefined) {\n      value = String(value);\n    }\n    let returnValue: string = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.STORE_BEFORE_INIT,\n        this._error_codes.STORE_AFTER_TERM,\n      )\n    ) {\n      // Only reset the error code if there's no error and checkTerminated is true\n      // This is a no-op if lastErrorCode is already \"0\"\n      try {\n        returnValue = this.setCMIValue(CMIElement, value);\n      } catch (e) {\n        returnValue = this.handleValueAccessException(CMIElement, e, returnValue);\n      }\n      this.processListeners(callbackName, CMIElement, value);\n    }\n\n    if (returnValue === undefined) {\n      returnValue = global_constants.SCORM_FALSE;\n    }\n\n    // If we didn't have any errors while setting the data, go ahead and\n    // schedule a commit, if autocommit is turned on\n    if (String(this.lastErrorCode) === \"0\") {\n      if (this.settings.autocommit) {\n        this.scheduleCommit(this.settings.autocommitSeconds * 1000, commitCallback);\n      }\n    }\n\n    this.apiLog(\n      callbackName,\n      \": \" + value + \": result: \" + returnValue,\n      LogLevelEnum.INFO,\n      CMIElement,\n    );\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  async commit(callbackName: string, checkTerminated: boolean = false): Promise<string> {\n    this.clearScheduledCommit();\n\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (\n      this.checkState(\n        checkTerminated,\n        this._error_codes.COMMIT_BEFORE_INIT,\n        this._error_codes.COMMIT_AFTER_TERM,\n      )\n    ) {\n      const result = await this.storeData(false);\n      if ((result.errorCode ?? 0) > 0) {\n        this.throwSCORMError(\"api\", result.errorCode);\n      }\n      returnValue = result?.result ?? global_constants.SCORM_FALSE;\n\n      this.apiLog(callbackName, \" Result: \" + returnValue, LogLevelEnum.DEBUG, \"HttpRequest\");\n\n      if (checkTerminated) this.lastErrorCode = \"0\";\n\n      this.processListeners(callbackName);\n\n      // If online and there is offline data pending, attempt to sync it\n      if (\n        this.settings.enableOfflineSupport &&\n        this._offlineStorageService &&\n        this._offlineStorageService.isDeviceOnline() &&\n        this._courseId\n      ) {\n        this._offlineStorageService.hasPendingOfflineData(this._courseId).then((hasPendingData) => {\n          if (hasPendingData) {\n            this.apiLog(callbackName, \"Syncing pending offline data\", LogLevelEnum.INFO);\n            this._offlineStorageService?.syncOfflineData().then((syncSuccess) => {\n              if (syncSuccess) {\n                this.apiLog(callbackName, \"Successfully synced offline data\", LogLevelEnum.INFO);\n                this.processListeners(\"OfflineDataSynced\");\n              } else {\n                this.apiLog(callbackName, \"Failed to sync some offline data\", LogLevelEnum.WARN);\n              }\n            });\n          }\n        });\n      }\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    // Only clear the error code if there's no error\n    if (this.lastErrorCode === \"0\") {\n      this.clearSCORMError(returnValue);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Returns last error code\n   * @param {string} callbackName\n   * @return {string}\n   */\n  getLastError(callbackName: string): string {\n    const returnValue = String(this.lastErrorCode);\n\n    this.processListeners(callbackName);\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getErrorString(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getDiagnostic(callbackName: string, CMIErrorCode: string | number): string {\n    let returnValue = \"\";\n\n    if (CMIErrorCode !== null && CMIErrorCode !== \"\") {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode, true);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, \"returned: \" + returnValue, LogLevelEnum.INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Checks the LMS state and ensures it has been initialized.\n   *\n   * @param {boolean} checkTerminated\n   * @param {number} beforeInitError\n   * @param {number} afterTermError\n   * @return {boolean}\n   */\n  checkState(checkTerminated: boolean, beforeInitError: number, afterTermError: number): boolean {\n    if (this.isNotInitialized()) {\n      this.throwSCORMError(\"api\", beforeInitError);\n      return false;\n    } else if (checkTerminated && this.isTerminated()) {\n      this.throwSCORMError(\"api\", afterTermError);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {(string|number)} _errorNumber\n   * @param {boolean} _detail\n   * @return {string}\n   * @abstract\n   */\n  getLmsErrorMessageDetails(_errorNumber: string | number, _detail: boolean = false): string {\n    throw new Error(\"The getLmsErrorMessageDetails method has not been implemented\");\n  }\n\n  /**\n   * Gets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @return {string}\n   * @abstract\n   */\n  getCMIValue(_CMIElement: string): string {\n    throw new Error(\"The getCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Sets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @param {any} _value\n   * @return {string}\n   * @abstract\n   */\n  setCMIValue(_CMIElement: string, _value: any): string {\n    throw new Error(\"The setCMIValue method has not been implemented\");\n  }\n\n  /**\n   * Shared API method to set a valid for a given element.\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  _commonSetCMIValue(\n    methodName: string,\n    scorm2004: boolean,\n    CMIElement: string,\n    value: any,\n  ): string {\n    if (!CMIElement || CMIElement === \"\") {\n      return global_constants.SCORM_FALSE;\n    }\n\n    this.lastErrorCode = \"0\";\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap | BaseCMI = this as StringKeyMap;\n    let returnValue = global_constants.SCORM_FALSE;\n    let foundFirstIndex = false;\n\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      const attribute = structure[idx];\n\n      if (idx === structure.length - 1) {\n        if (scorm2004 && attribute.substring(0, 8) === \"{target=\") {\n          if (this.isInitialized()) {\n            this.throwSCORMError(CMIElement, this._error_codes.READ_ONLY_ELEMENT);\n            break;\n          } else {\n            refObject = {\n              ...refObject,\n              attribute: value,\n            };\n          }\n        } else if (!this._checkObjectHasProperty(refObject as StringKeyMap, attribute)) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        } else {\n          if (\n            stringMatches(CMIElement, \"\\\\.correct_responses\\\\.\\\\d+$\") &&\n            this.isInitialized() &&\n            attribute !== \"pattern\"\n          ) {\n            this.validateCorrectResponse(CMIElement, value);\n            if (this.lastErrorCode !== \"0\") {\n              this.throwSCORMError(CMIElement, this._error_codes.TYPE_MISMATCH);\n              break;\n            }\n          }\n\n          if (!scorm2004 || this._errorHandlingService.lastErrorCode === \"0\") {\n            if (attribute === \"__proto__\" || attribute === \"constructor\") {\n              this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n              break;\n            }\n            (refObject as StringKeyMap)[attribute] = value;\n            returnValue = global_constants.SCORM_TRUE;\n          }\n        }\n      } else {\n        refObject = (refObject as StringKeyMap)[attribute] as StringKeyMap;\n        if (!refObject) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n\n        if (refObject instanceof CMIArray) {\n          const index = parseInt(structure[idx + 1], 10);\n\n          // SCO is trying to set an item on an array\n          if (!isNaN(index)) {\n            const item = refObject.childArray[index];\n\n            if (item) {\n              refObject = item;\n              foundFirstIndex = true;\n            } else {\n              const newChild = this.getChildElement(CMIElement, value, foundFirstIndex);\n              foundFirstIndex = true;\n\n              if (!newChild) {\n                if (this.lastErrorCode === \"0\") {\n                  this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n                }\n                break;\n              } else {\n                if (refObject.initialized) newChild.initialize();\n                refObject.childArray[index] = newChild;\n                refObject = newChild;\n              }\n            }\n\n            // Have to update idx value to skip the array position\n            idx++;\n          }\n        }\n      }\n    }\n\n    if (returnValue === global_constants.SCORM_FALSE) {\n      this.apiLog(\n        methodName,\n        `There was an error setting the value for: ${CMIElement}, value of: ${value}`,\n        LogLevelEnum.WARN,\n      );\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @return {any}\n   */\n  _commonGetCMIValue(methodName: string, scorm2004: boolean, CMIElement: string): any {\n    if (!CMIElement || CMIElement === \"\") {\n      return \"\";\n    }\n\n    const structure = CMIElement.split(\".\");\n    let refObject: StringKeyMap = this as StringKeyMap;\n    let attribute = null;\n\n    const uninitializedErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) has not been initialized.`;\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004\n      ? this._error_codes.UNDEFINED_DATA_MODEL\n      : this._error_codes.GENERAL;\n\n    for (let idx = 0; idx < structure.length; idx++) {\n      attribute = structure[idx];\n\n      if (!scorm2004) {\n        if (idx === structure.length - 1) {\n          if (!this._checkObjectHasProperty(refObject, attribute)) {\n            this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n            return;\n          }\n        }\n      } else {\n        if (\n          String(attribute).substring(0, 8) === \"{target=\" &&\n          typeof refObject._isTargetValid == \"function\"\n        ) {\n          const target = String(attribute).substring(8, String(attribute).length - 9);\n          return refObject._isTargetValid(target);\n        } else if (!this._checkObjectHasProperty(refObject, attribute)) {\n          this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n          return;\n        }\n      }\n\n      refObject = refObject[attribute] as StringKeyMap;\n      if (refObject === undefined) {\n        this.throwSCORMError(CMIElement, invalidErrorCode, invalidErrorMessage);\n        break;\n      }\n\n      if (refObject instanceof CMIArray) {\n        const index = parseInt(structure[idx + 1], 10);\n\n        // SCO is trying to set an item on an array\n        if (!isNaN(index)) {\n          const item = refObject.childArray[index];\n\n          if (item) {\n            refObject = item;\n          } else {\n            this.throwSCORMError(\n              CMIElement,\n              this._error_codes.VALUE_NOT_INITIALIZED,\n              uninitializedErrorMessage,\n            );\n            break;\n          }\n\n          // Have to update idx value to skip the array position\n          idx++;\n        }\n      }\n    }\n\n    if (refObject === null || refObject === undefined) {\n      if (!scorm2004) {\n        if (attribute === \"_children\") {\n          this.throwSCORMError(CMIElement, this._error_codes.CHILDREN_ERROR, undefined);\n        } else if (attribute === \"_count\") {\n          this.throwSCORMError(CMIElement, this._error_codes.COUNT_ERROR, undefined);\n        }\n      }\n    } else {\n      return refObject;\n    }\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isInitialized(): boolean {\n    return this.currentState === global_constants.STATE_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_NOT_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isNotInitialized(): boolean {\n    return this.currentState === global_constants.STATE_NOT_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_TERMINATED\n   *\n   * @return {boolean}\n   */\n  isTerminated(): boolean {\n    return this.currentState === global_constants.STATE_TERMINATED;\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event.\n   * This method allows you to register a callback function that will be executed\n   * when the specified event occurs.\n   *\n   * @param {string} listenerName - The name of the event to listen for (e.g., \"Initialize\", \"Terminate\", \"GetValue\", \"SetValue\", \"Commit\")\n   * @param {function} callback - The function to execute when the event occurs. The callback will receive relevant event data.\n   * @example\n   * // Listen for Initialize events\n   * api.on(\"Initialize\", function() {\n   *   console.log(\"API has been initialized\");\n   * });\n   *\n   * // Listen for SetValue events\n   * api.on(\"SetValue\", function(element, value) {\n   *   console.log(\"Setting \" + element + \" to \" + value);\n   * });\n   */\n  on(listenerName: string, callback: Function) {\n    this._eventService.on(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for detaching a specific SCORM event listener.\n   * This method removes a previously registered callback for an event.\n   * Both the event name and the callback reference must match what was used in the 'on' method.\n   *\n   * @param {string} listenerName - The name of the event to stop listening for\n   * @param {function} callback - The callback function to remove\n   * @example\n   * // Remove a specific listener\n   * const myCallback = function() { console.log(\"API initialized\"); };\n   * api.on(\"Initialize\", myCallback);\n   * // Later, when you want to remove it:\n   * api.off(\"Initialize\", myCallback);\n   */\n  off(listenerName: string, callback: Function) {\n    this._eventService.off(listenerName, callback);\n  }\n\n  /**\n   * Provides a mechanism for clearing all listeners from a specific SCORM event.\n   * This method removes all callbacks registered for the specified event.\n   *\n   * @param {string} listenerName - The name of the event to clear all listeners for\n   * @example\n   * // Remove all listeners for the Initialize event\n   * api.clear(\"Initialize\");\n   */\n  clear(listenerName: string) {\n    this._eventService.clear(listenerName);\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created for a specific event.\n   * This method is called internally when SCORM events occur to notify all registered listeners.\n   * It triggers all callback functions registered for the specified event.\n   *\n   * @param {string} functionName - The name of the function/event that occurred\n   * @param {string} CMIElement - Optional CMI element involved in the event\n   * @param {any} value - Optional value associated with the event\n   */\n  processListeners(functionName: string, CMIElement?: string, value?: any) {\n    this._eventService.processListeners(functionName, CMIElement, value);\n  }\n\n  /**\n   * Throws a SCORM error with the specified error number and optional message.\n   * This method sets the last error code and can be used to indicate that an operation failed.\n   * The error number should correspond to one of the standard SCORM error codes.\n   *\n   * @param {string} CMIElement\n   * @param {number} errorNumber - The SCORM error code to set\n   * @param {string} message - Optional custom error message to provide additional context\n   * @example\n   * // Throw a \"not initialized\" error\n   * this.throwSCORMError(301, \"The API must be initialized before calling GetValue\");\n   */\n  throwSCORMError(CMIElement: string, errorNumber: number, message?: string) {\n    this._errorHandlingService.throwSCORMError(CMIElement, errorNumber, message);\n  }\n\n  /**\n   * Clears the last SCORM error code when an operation succeeds.\n   * This method is typically called after successful API operations to reset the error state.\n   * It only clears the error if the success parameter is \"true\".\n   *\n   * @param {string} success - A string indicating whether the operation succeeded (\"true\" or \"false\")\n   * @example\n   * // Clear error after successful operation\n   * this.clearSCORMError(\"true\");\n   */\n  clearSCORMError(success: string) {\n    this._errorHandlingService.clearSCORMError(success);\n  }\n\n  /**\n   * Load the CMI from a flattened JSON object.\n   * This method populates the CMI data model from a flattened JSON structure\n   * where keys represent CMI element paths (e.g., \"cmi.core.student_id\").\n   *\n   * @param {StringKeyMap} json - The flattened JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a flattened JSON structure\n   * api.loadFromFlattenedJSON({\n   *   \"cmi.core.student_id\": \"12345\",\n   *   \"cmi.core.student_name\": \"John Doe\",\n   *   \"cmi.core.lesson_status\": \"incomplete\"\n   * });\n   */\n  loadFromFlattenedJSON(json: StringKeyMap, CMIElement?: string) {\n    if (!CMIElement) {\n      // by default, we start from a blank string because we're expecting each element to start with `cmi`\n      CMIElement = \"\";\n    }\n\n    this._serializationService.loadFromFlattenedJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Loads CMI data from a hierarchical JSON object.\n   * This method populates the CMI data model from a nested JSON structure\n   * that mirrors the CMI object hierarchy.\n   *\n   * @param {StringKeyMap} json - The hierarchical JSON object containing CMI data\n   * @param {string} CMIElement - Optional base CMI element path to prepend to all keys\n   * @example\n   * // Load data from a hierarchical JSON structure\n   * api.loadFromJSON({\n   *   core: {\n   *     student_id: \"12345\",\n   *     student_name: \"John Doe\",\n   *     lesson_status: \"incomplete\"\n   *   },\n   *   objectives: [\n   *     { id: \"obj1\", score: { raw: 85 } }\n   *   ]\n   * });\n   */\n  loadFromJSON(json: StringKeyMap, CMIElement: string = \"\") {\n    if (\n      (!CMIElement || CMIElement === \"\") &&\n      !Object.hasOwnProperty.call(json, \"cmi\") &&\n      !Object.hasOwnProperty.call(json, \"adl\")\n    ) {\n      // providing a backward compatibility for the old v1 API\n      CMIElement = \"cmi\";\n    }\n    this._serializationService.loadFromJSON(\n      json,\n      CMIElement,\n      (CMIElement, value) => this.setCMIValue(CMIElement, value),\n      () => this.isNotInitialized(),\n      (data: StringKeyMap) => {\n        this.startingData = data;\n      },\n    );\n  }\n\n  /**\n   * Render the CMI object to a JSON string for sending to an LMS.\n   * This method serializes the current CMI data model to a JSON string.\n   * The output format is controlled by the sendFullCommit setting.\n   *\n   * @return {string} A JSON string representation of the CMI data\n   * @example\n   * // Get the current CMI data as a JSON string\n   * const jsonString = api.renderCMIToJSONString();\n   * console.log(jsonString); // '{\"core\":{\"student_id\":\"12345\",...}}'\n   */\n  renderCMIToJSONString(): string {\n    return this._serializationService.renderCMIToJSONString(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Returns a JavaScript object representing the current CMI data.\n   * This method creates a plain JavaScript object that mirrors the\n   * structure of the CMI data model, suitable for further processing.\n   *\n   * @return {StringKeyMap} A JavaScript object representing the CMI data\n   * @example\n   * // Get the current CMI data as a JavaScript object\n   * const cmiObject = api.renderCMIToJSONObject();\n   * console.log(cmiObject.core.student_id); // \"12345\"\n   */\n  renderCMIToJSONObject(): StringKeyMap {\n    return this._serializationService.renderCMIToJSONObject(this.cmi, this.settings.sendFullCommit);\n  }\n\n  /**\n   * Process an HTTP request\n   *\n   * @param {string} url - The URL to send the request to\n   * @param {CommitObject | StringKeyMap | Array<any>} params - The parameters to send\n   * @param {boolean} immediate - Whether to send the request immediately without waiting\n   * @returns {Promise<ResultObject>} - The result of the request\n   * @async\n   */\n  async processHttpRequest(\n    url: string,\n    params: CommitObject | StringKeyMap | Array<any>,\n    immediate: boolean = false,\n  ): Promise<ResultObject> {\n    // If offline support is enabled and device is offline, store data locally instead of sending\n    if (\n      this.settings.enableOfflineSupport &&\n      this._offlineStorageService &&\n      !this._offlineStorageService.isDeviceOnline() &&\n      this._courseId\n    ) {\n      this.apiLog(\n        \"processHttpRequest\",\n        \"Device is offline, storing data locally\",\n        LogLevelEnum.INFO,\n      );\n\n      if (params && typeof params === \"object\" && \"cmi\" in params) {\n        return await this._offlineStorageService.storeOffline(\n          this._courseId,\n          params as CommitObject,\n        );\n      } else {\n        this.apiLog(\n          \"processHttpRequest\",\n          \"Invalid commit data format for offline storage\",\n          LogLevelEnum.ERROR,\n        );\n        return {\n          result: global_constants.SCORM_FALSE,\n          errorCode: this._error_codes.GENERAL,\n        };\n      }\n    }\n\n    // Otherwise, proceed with normal HTTP request\n    return await this._httpService.processHttpRequest(\n      url,\n      params,\n      immediate,\n      (functionName, message, level, element) => this.apiLog(functionName, message, level, element),\n      (functionName, CMIElement, value) => this.processListeners(functionName, CMIElement, value),\n    );\n  }\n\n  /**\n   * Schedules a commit operation to occur after a specified delay.\n   * This method is used to implement auto-commit functionality, where data\n   * is periodically sent to the LMS without requiring explicit commit calls.\n   *\n   * @param {number} when - The number of milliseconds to wait before committing\n   * @param {string} callback - The name of the commit event callback\n   * @example\n   * // Schedule a commit to happen in 60 seconds\n   * api.scheduleCommit(60000, \"commit\");\n   */\n  scheduleCommit(when: number, callback: string) {\n    if (!this._timeout) {\n      this._timeout = new ScheduledCommit(this, when, callback);\n      this.apiLog(\"scheduleCommit\", \"scheduled\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Clears and cancels any currently scheduled commits.\n   * This method is typically called when an explicit commit is performed\n   * or when the API is terminated, to prevent redundant commits.\n   *\n   * @example\n   * // Cancel any pending scheduled commits\n   * api.clearScheduledCommit();\n   */\n  clearScheduledCommit() {\n    if (this._timeout) {\n      this._timeout.cancel();\n      this._timeout = undefined;\n      this.apiLog(\"clearScheduledCommit\", \"cleared\", LogLevelEnum.DEBUG, \"\");\n    }\n  }\n\n  /**\n   * Checks if an object has a specific property, using multiple detection methods.\n   * This method performs a thorough check for property existence by:\n   * 1. Checking if it's an own property using Object.hasOwnProperty\n   * 2. Checking if it's defined in the prototype with a property descriptor\n   * 3. Checking if it's accessible via the 'in' operator (includes inherited properties)\n   *\n   * @param {StringKeyMap} StringKeyMap - The object to check for the property\n   * @param {string} attribute - The property name to look for\n   * @return {boolean} True if the property exists on the object or its prototype chain\n   * @private\n   *\n   * @example\n   * // Check for an own property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"name\"); // Returns true\n   *\n   * @example\n   * // Check for an inherited property\n   * class Parent { get type() { return \"parent\"; } }\n   * const child = Object.create(new Parent());\n   * this._checkObjectHasProperty(child, \"type\"); // Returns true\n   *\n   * @example\n   * // Check for a non-existent property\n   * const obj = { name: \"John\" };\n   * this._checkObjectHasProperty(obj, \"age\"); // Returns false\n   */\n  private _checkObjectHasProperty(StringKeyMap: StringKeyMap, attribute: string): boolean {\n    return (\n      Object.hasOwnProperty.call(StringKeyMap, attribute) ||\n      Object.getOwnPropertyDescriptor(Object.getPrototypeOf(StringKeyMap), attribute) != null ||\n      attribute in StringKeyMap\n    );\n  }\n\n  /**\n   * Handles exceptions that occur when accessing CMI values.\n   * This method delegates to the ErrorHandlingService to process exceptions\n   * that occur during CMI data operations, ensuring consistent error handling\n   * throughout the API.\n   *\n   * @param {string} CMIElement\n   * @param {any} e - The exception that was thrown\n   * @param {string} returnValue - The default return value to use if an error occurs\n   * @return {string} Either the original returnValue or SCORM_FALSE if an error occurred\n   * @private\n   *\n   * @example\n   * // Handle a validation error when getting a CMI value\n   * try {\n   *   return this.getCMIValue(\"cmi.core.score.raw\");\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"\");\n   * }\n   *\n   * @example\n   * // Handle a general error when setting a CMI value\n   * try {\n   *   this.setCMIValue(\"cmi.core.lesson_status\", \"completed\");\n   *   return \"true\";\n   * } catch (e) {\n   *   return this.handleValueAccessException(e, \"false\");\n   * }\n   */\n  private handleValueAccessException(CMIElement: string, e: any, returnValue: string): string {\n    if (e instanceof ValidationError) {\n      this.lastErrorCode = String(e.errorCode);\n      returnValue = global_constants.SCORM_FALSE;\n      this.throwSCORMError(CMIElement, e.errorCode, e.errorMessage);\n    } else {\n      if (e instanceof Error && e.message) {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, e.message);\n      } else {\n        this.throwSCORMError(CMIElement, this._error_codes.GENERAL, \"Unknown error\");\n      }\n    }\n    return returnValue;\n  }\n\n  /**\n   * Builds the commit object to be sent to the LMS.\n   * This method delegates to the SerializationService to create a properly\n   * formatted object containing the CMI data that needs to be sent to the LMS.\n   * The format and content of the commit object depend on whether this is a\n   * regular commit or a termination commit.\n   *\n   * @param {boolean} terminateCommit - Whether this is a termination commit\n   * @return {CommitObject|StringKeyMap|Array} The formatted commit object\n   * @protected\n   *\n   * @example\n   * // Create a regular commit object\n   * const regularCommit = this.getCommitObject(false);\n   * // Result might be: { cmi: { core: { lesson_status: \"incomplete\" } } }\n   *\n   * @example\n   * // Create a termination commit object (includes total_time)\n   * const terminationCommit = this.getCommitObject(true);\n   * // Result might be: { cmi: { core: { lesson_status: \"completed\", total_time: \"PT1H30M\" } } }\n   */\n  protected getCommitObject(terminateCommit: boolean): CommitObject | StringKeyMap | Array<any> {\n    return this._serializationService.getCommitObject(\n      terminateCommit,\n      this.settings.alwaysSendTotalTime,\n      this.settings.renderCommonCommitFields,\n      (terminateCommit) => this.renderCommitObject(terminateCommit),\n      (terminateCommit) => this.renderCommitCMI(terminateCommit),\n      this.apiLogLevel,\n    );\n  }\n}\n","import { ValidationError } from \"../exceptions\";\nimport { scorm2004_constants } from \"../constants/api_constants\";\n\nconst scorm2004_errors = scorm2004_constants.error_descriptions;\n\n/**\n * SCORM 2004 Validation Error\n */\nexport class Scorm2004ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm2004_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm2004_errors[String(errorCode)].basicMessage,\n        scorm2004_errors[String(errorCode)].detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm2004_errors[\"101\"].basicMessage,\n        scorm2004_errors[\"101\"].detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm2004ValidationError.prototype);\n  }\n}\n","import { BaseScormValidationError } from \"../../exceptions\";\nimport { memoize } from \"../../utilities\";\n\n/**\n * Check if the value matches the proper format. If not, throw proper error code.\n *\n * @param {string} value\n * @param {string} regexPattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @param {boolean} [allowEmptyString]\n * @return {boolean}\n */\nexport const checkValidFormat = memoize(\n  (\n    CMIElement: string,\n    value: string,\n    regexPattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n    allowEmptyString?: boolean,\n  ): boolean => {\n    if (typeof value !== \"string\") {\n      return false;\n    }\n    const formatRegex = new RegExp(regexPattern);\n    const matches = value.match(formatRegex);\n    if (allowEmptyString && value === \"\") {\n      return true;\n    }\n    if (value === undefined || !matches || matches[0] === \"\") {\n      throw new errorClass(CMIElement, errorCode);\n    }\n    return true;\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, regexPattern, errorCode, _errorClass, allowEmptyString) => {\n    // Use typeof for non-string values to ensure consistent cache keys\n    const valueKey = typeof value === \"string\" ? value : `[${typeof value}]`;\n    return `${CMIElement}:${valueKey}:${regexPattern}:${errorCode}:${allowEmptyString || false}`;\n  },\n);\n\n/**\n * Check if the value matches the proper range. If not, throw proper error code.\n *\n * @param {any} value\n * @param {string} rangePattern\n * @param {number} errorCode\n * @param {typeof BaseScormValidationError} errorClass\n * @return {boolean}\n */\nexport const checkValidRange = memoize(\n  (\n    CMIElement: string,\n    value: any,\n    rangePattern: string,\n    errorCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean => {\n    const ranges = rangePattern.split(\"#\");\n    value = value * 1.0;\n    if (value >= ranges[0]) {\n      if (ranges[1] === \"*\" || value <= ranges[1]) {\n        return true;\n      } else {\n        throw new errorClass(CMIElement, errorCode);\n      }\n    } else {\n      throw new errorClass(CMIElement, errorCode);\n    }\n  },\n  // Custom key function that excludes the error class from the cache key\n  // since it can't be stringified and doesn't affect the validation result\n  (CMIElement, value, rangePattern, errorCode, _errorClass) =>\n    `${CMIElement}:${value}:${rangePattern}:${errorCode}`,\n);\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check2004ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm2004_errors.TYPE_MISMATCH,\n    Scorm2004ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @return {boolean}\n */\nexport function check2004ValidRange(\n  CMIElement: string,\n  value: string,\n  rangePattern: string,\n): boolean {\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm2004_errors.VALUE_OUT_OF_RANGE,\n    Scorm2004ValidationError,\n  );\n}\n","export const scorm12_regex = {\n  CMIString256: \"^.{0,255}$\",\n  CMIString4096: \"^.{0,4096}$\",\n  CMITime: \"^(?:[01]\\\\d|2[0123]):(?:[012345]\\\\d):(?:[012345]\\\\d)$\",\n  CMITimespan: \"^([0-9]{2,}):([0-9]{2}):([0-9]{2})(.[0-9]{1,2})?$\",\n\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{0,3})(.[0-9]*)?$\",\n\n  CMIIdentifier: \"^[\\\\u0021-\\\\u007E\\\\s]{0,255}$\",\n  CMIFeedback: \"^.{0,255}$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMIStatus: \"^(passed|completed|failed|incomplete|browsed)$\",\n  CMIStatus2: \"^(passed|completed|failed|incomplete|browsed|not attempted)$\",\n  CMIExit: \"^(time-out|suspend|logout|)$\",\n  CMIType: \"^(true-false|choice|fill-in|matching|performance|sequencing|likert|numeric)$\",\n  CMIResult: \"^(correct|wrong|unanticipated|neutral|([0-9]{0,3})?(\\\\.[0-9]*)?)$\",\n  NAVEvent: \"^(previous|continue)$\",\n  // Data ranges\n  score_range: \"0#100\",\n  audio_range: \"-1#100\",\n  speed_range: \"-100#100\",\n  weighting_range: \"-100#100\",\n  text_range: \"-1#1\",\n};\nexport const aicc_regex = {\n  ...scorm12_regex,\n  ...{\n    CMIIdentifier: \"^\\\\w{1,255}$\",\n  },\n};\nexport const scorm2004_regex = {\n  CMIString200: \"^[\\\\u0000-\\\\uFFFF]{0,200}$\",\n  CMIString250: \"^[\\\\u0000-\\\\uFFFF]{0,250}$\",\n  CMIString1000: \"^[\\\\u0000-\\\\uFFFF]{0,1000}$\",\n  CMIString4000: \"^[\\\\u0000-\\\\uFFFF]{0,4000}$\",\n  CMIString64000: \"^[\\\\u0000-\\\\uFFFF]{0,64000}$\",\n  CMILang: \"^([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?$|^$\",\n\n  CMILangString250: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,250}$)?$\",\n\n  CMILangcr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?}))(.*?)$\",\n\n  CMILangString250cr: \"^(({lang=([a-zA-Z]{2,3}|i|x)?(-[a-zA-Z0-9-]{2,8})?})?(.{0,250})?)?$\",\n\n  CMILangString4000: \"^({lang=([a-zA-Z]{2,3}|i|x)(-[a-zA-Z0-9-]{2,8})?})?((?!{.*$).{0,4000}$)?$\",\n\n  CMITime:\n    \"^(19[7-9]{1}[0-9]{1}|20[0-2]{1}[0-9]{1}|203[0-8]{1})((-(0[1-9]{1}|1[0-2]{1}))((-(0[1-9]{1}|[1-2]{1}[0-9]{1}|3[0-1]{1}))(T([0-1]{1}[0-9]{1}|2[0-3]{1})((:[0-5]{1}[0-9]{1})((:[0-5]{1}[0-9]{1})((\\\\.[0-9]{1,6})((Z|([+|-]([0-1]{1}[0-9]{1}|2[0-3]{1})))(:[0-5]{1}[0-9]{1})?)?)?)?)?)?)?)?$\",\n  CMITimespan:\n    \"^P(?:([.,\\\\d]+)Y)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)W)?(?:([.,\\\\d]+)D)?(?:T?(?:([.,\\\\d]+)H)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)S)?)?$\",\n  CMIInteger: \"^\\\\d+$\",\n  CMISInteger: \"^-?([0-9]+)$\",\n  CMIDecimal: \"^-?([0-9]{1,5})(\\\\.[0-9]{1,18})?$\",\n  CMIIdentifier: \"^\\\\S{1,250}[a-zA-Z0-9]$\",\n  CMIShortIdentifier: \"^[\\\\w\\\\.\\\\-\\\\_]{1,250}$\",\n  CMILongIdentifier: \"^(?:(?!urn:)\\\\S{1,4000}|urn:[A-Za-z0-9-]{1,31}:\\\\S{1,4000}|.{1,4000})$\",\n  // need to re-examine this\n  CMIFeedback: \"^.*$\",\n  // This must be redefined\n  CMIIndex: \"[._](\\\\d+).\",\n  CMIIndexStore: \".N(\\\\d+).\",\n  // Vocabulary Data Type Definition\n  CMICStatus: \"^(completed|incomplete|not attempted|unknown)$\",\n  CMISStatus: \"^(passed|failed|unknown)$\",\n  CMIExit: \"^(time-out|suspend|logout|normal)$\",\n  CMIType:\n    \"^(true-false|choice|fill-in|long-fill-in|matching|performance|sequencing|likert|numeric|other)$\",\n  CMIResult: \"^(correct|incorrect|unanticipated|neutral|-?([0-9]{1,4})(\\\\.[0-9]{1,18})?)$\",\n  NAVEvent:\n    \"^(previous|continue|exit|exitAll|abandon|abandonAll|suspendAll|_none_|(\\\\{target=(?<choice_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?choice|(\\\\{target=(?<jump_target>\\\\S{0,}[a-zA-Z0-9-_]+)})?jump)$\",\n\n  NAVBoolean: \"^(unknown|true|false$)\",\n  NAVTarget: \"^{target=\\\\S{0,}[a-zA-Z0-9-_]+}$\",\n  // Data ranges\n  scaled_range: \"-1#1\",\n  audio_range: \"0#999.9999999\",\n  speed_range: \"0#999.9999999\",\n  text_range: \"-1#1\",\n  progress_range: \"0#1\",\n};\n","/**\n * Class for SCORM 2004's cmi.learner_preference object\n */\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\n\nexport class CMILearnerPreference extends BaseCMI {\n  private __children = scorm2004_constants.student_preference_children;\n  private _audio_level = \"1\";\n  private _language = \"\";\n  private _delivery_speed = \"1\";\n  private _audio_captioning = \"0\";\n\n  /**\n   * Constructor for cmi.learner_preference\n   */\n  constructor() {\n    super(\"cmi.learner_preference\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children: string) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._children\",\n      scorm2004_errors.READ_ONLY_ELEMENT,\n    );\n  }\n\n  /**\n   * Getter for _audio_level\n   * @return {string}\n   */\n  get audio_level(): string {\n    return this._audio_level;\n  }\n\n  /**\n   * Setter for _audio_level\n   * @param {string} audio_level\n   */\n  set audio_level(audio_level: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".audio_level\",\n        audio_level,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".audio_level\",\n        audio_level,\n        scorm2004_regex.audio_range,\n      )\n    ) {\n      this._audio_level = audio_level;\n    }\n  }\n\n  /**\n   * Getter for _language\n   * @return {string}\n   */\n  get language(): string {\n    return this._language;\n  }\n\n  /**\n   * Setter for _language\n   * @param {string} language\n   */\n  set language(language: string) {\n    if (check2004ValidFormat(this._cmi_element + \".language\", language, scorm2004_regex.CMILang)) {\n      this._language = language;\n    }\n  }\n\n  /**\n   * Getter for _delivery_speed\n   * @return {string}\n   */\n  get delivery_speed(): string {\n    return this._delivery_speed;\n  }\n\n  /**\n   * Setter for _delivery_speed\n   * @param {string} delivery_speed\n   */\n  set delivery_speed(delivery_speed: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".delivery_speed\",\n        delivery_speed,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".delivery_speed\",\n        delivery_speed,\n        scorm2004_regex.speed_range,\n      )\n    ) {\n      this._delivery_speed = delivery_speed;\n    }\n  }\n\n  /**\n   * Getter for _audio_captioning\n   * @return {string}\n   */\n  get audio_captioning(): string {\n    return this._audio_captioning;\n  }\n\n  /**\n   * Setter for _audio_captioning\n   * @param {string} audio_captioning\n   */\n  set audio_captioning(audio_captioning: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".audio_captioning\",\n        audio_captioning,\n        scorm2004_regex.CMISInteger,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".audio_captioning\",\n        audio_captioning,\n        scorm2004_regex.text_range,\n      )\n    ) {\n      this._audio_captioning = audio_captioning;\n    }\n  }\n\n  /**\n   * toJSON for cmi.learner_preference\n   *\n   * @return {\n   *    {\n   *      audio_level: string,\n   *      language: string,\n   *      delivery_speed: string,\n   *      audio_captioning: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    audio_level: string;\n    language: string;\n    delivery_speed: string;\n    audio_captioning: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      audio_level: this.audio_level,\n      language: this.language,\n      delivery_speed: this.delivery_speed,\n      audio_captioning: this.audio_captioning,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { scorm2004_regex } from \"./regex\";\n\nexport const LearnerResponses: Responses = {\n  \"true-false\": {\n    format: \"^true$|^false$\",\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  choice: {\n    format: scorm2004_regex.CMILongIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    unique: true,\n  },\n  \"fill-in\": {\n    format: scorm2004_regex.CMILangString250,\n    max: 10,\n    delimiter: \"[,]\",\n    unique: false,\n  },\n  \"long-fill-in\": {\n    format: scorm2004_regex.CMILangString4000,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  matching: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n  },\n  performance: {\n    format: \"^$|\" + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + \"|^$|\" + scorm2004_regex.CMIShortIdentifier,\n    max: 250,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n  },\n  sequencing: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: \"[,]\",\n    unique: false,\n  },\n  likert: {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  numeric: {\n    format: scorm2004_regex.CMIDecimal,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n  other: {\n    format: scorm2004_regex.CMIString4000,\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n  },\n};\nexport const CorrectResponses: Responses = {\n  \"true-false\": {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: \"^true$|^false$\",\n    limit: 1,\n  },\n  choice: {\n    max: 36,\n    delimiter: \"[,]\",\n    unique: true,\n    duplicate: false,\n    format: scorm2004_regex.CMILongIdentifier,\n  },\n  \"fill-in\": {\n    max: 10,\n    delimiter: \"[,]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMILangString250cr,\n  },\n  \"long-fill-in\": {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: true,\n    format: scorm2004_regex.CMILangString4000,\n  },\n  matching: {\n    max: 36,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n  },\n  performance: {\n    max: 250,\n    delimiter: \"[,]\",\n    delimiter2: \"[.]\",\n    delimiter3: \"[:]\",\n    unique: false,\n    duplicate: false,\n    format: \"^$|\" + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + \"|^$|\" + scorm2004_regex.CMIShortIdentifier,\n  },\n  sequencing: {\n    max: 36,\n    delimiter: \"[,]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n  },\n  likert: {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    limit: 1,\n  },\n  numeric: {\n    max: 2,\n    delimiter: \"[:]\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIDecimal,\n    limit: 1,\n  },\n  other: {\n    max: 1,\n    delimiter: \"\",\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIString4000,\n    limit: 1,\n  },\n};\n\nexport type ResponseType = {\n  format: string;\n  max: number;\n  delimiter: string;\n  unique: boolean;\n  duplicate?: boolean;\n  format2?: string;\n  delimiter2?: string;\n  limit?: number;\n  delimiter3?: string;\n};\n\nexport type Responses = {\n  [key: string]: ResponseType;\n};\n","/**\n * Class representing SCORM 2004's `cmi.interactions` object\n */\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { CMIArray } from \"../common/array\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { CorrectResponses, LearnerResponses } from \"../../constants/response_constants\";\n\nexport class CMIInteractions extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives` Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.interactions\",\n      children: scorm2004_constants.interactions_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.interaction.n object\n */\n\nexport class CMIInteractionsObject extends BaseCMI {\n  private _id = \"\";\n  private _type = \"\";\n  private _timestamp = \"\";\n  private _weighting = \"\";\n  private _learner_response = \"\";\n  private _result = \"\";\n  private _latency = \"\";\n  private _description = \"\";\n\n  /**\n   * Constructor for cmi.interaction.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n\");\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.n.correct_responses\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  public objectives: CMIArray;\n  public correct_responses: CMIArray;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._id = \"\";\n    this._type = \"\";\n    this._timestamp = \"\";\n    this._weighting = \"\";\n    this._learner_response = \"\";\n    this._result = \"\";\n    this._latency = \"\";\n    this._description = \"\";\n    this.objectives = new CMIArray({\n      CMIElement: \"cmi.interactions.n.objectives\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      CMIElement: \"cmi.interactions.n.correct_responses\",\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _type\n   * @return {string}\n   */\n  get type(): string {\n    return this._type;\n  }\n\n  /**\n   * Setter for _type\n   * @param {string} type\n   */\n  set type(type: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".type\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (check2004ValidFormat(this._cmi_element + \".type\", type, scorm2004_regex.CMIType)) {\n        this._type = type;\n      }\n    }\n  }\n\n  /**\n   * Getter for _timestamp\n   * @return {string}\n   */\n  get timestamp(): string {\n    return this._timestamp;\n  }\n\n  /**\n   * Setter for _timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".timestamp\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".timestamp\", timestamp, scorm2004_regex.CMITime)\n      ) {\n        this._timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * Getter for _weighting\n   * @return {string}\n   */\n  get weighting(): string {\n    return this._weighting;\n  }\n\n  /**\n   * Setter for _weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".weighting\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".weighting\",\n          weighting,\n          scorm2004_regex.CMIDecimal,\n        )\n      ) {\n        this._weighting = weighting;\n      }\n    }\n  }\n\n  /**\n   * Getter for _learner_response\n   * @return {string}\n   */\n  get learner_response(): string {\n    return this._learner_response;\n  }\n\n  /**\n   * Setter for _learner_response. Does type validation to make sure response\n   * matches SCORM 2004's spec\n   * @param {string} learner_response\n   */\n  set learner_response(learner_response: string) {\n    if (this.initialized && (this._type === \"\" || this._id === \"\")) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_response\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      let nodes = [];\n      const response_type = LearnerResponses[this.type];\n\n      if (response_type) {\n        if (response_type?.delimiter) {\n          // Convert regex-style delimiter to actual character\n          const delimiter = response_type.delimiter === \"[,]\" ? \",\" : response_type.delimiter;\n          nodes = learner_response.split(delimiter);\n        } else {\n          nodes[0] = learner_response;\n        }\n\n        if (nodes.length > 0 && nodes.length <= response_type.max) {\n          const formatRegex = new RegExp(response_type.format);\n\n          for (let i = 0; i < nodes.length; i++) {\n            if (response_type?.delimiter2) {\n              // Convert regex-style delimiter to actual character\n              const delimiter2 =\n                response_type.delimiter2 === \"[.]\" ? \".\" : response_type.delimiter2;\n              const values = nodes[i].split(delimiter2);\n\n              if (values.length === 2) {\n                if (!values[0].match(formatRegex)) {\n                  throw new Scorm2004ValidationError(\n                    this._cmi_element + \".learner_response\",\n                    scorm2004_errors.TYPE_MISMATCH,\n                  );\n                } else {\n                  if (\n                    !response_type.format2 ||\n                    !values[1].match(new RegExp(response_type.format2))\n                  ) {\n                    throw new Scorm2004ValidationError(\n                      this._cmi_element + \".learner_response\",\n                      scorm2004_errors.TYPE_MISMATCH,\n                    );\n                  }\n                }\n              } else {\n                throw new Scorm2004ValidationError(\n                  this._cmi_element + \".learner_response\",\n                  scorm2004_errors.TYPE_MISMATCH,\n                );\n              }\n            } else {\n              if (!nodes[i].match(formatRegex)) {\n                throw new Scorm2004ValidationError(\n                  this._cmi_element + \".learner_response\",\n                  scorm2004_errors.TYPE_MISMATCH,\n                );\n              } else {\n                if (nodes[i] !== \"\" && response_type.unique) {\n                  for (let j = 0; j < i; j++) {\n                    if (nodes[i] === nodes[j]) {\n                      throw new Scorm2004ValidationError(\n                        this._cmi_element + \".learner_response\",\n                        scorm2004_errors.TYPE_MISMATCH,\n                      );\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          throw new Scorm2004ValidationError(\n            this._cmi_element + \".learner_response\",\n            scorm2004_errors.GENERAL_SET_FAILURE,\n          );\n        }\n\n        this._learner_response = learner_response;\n      } else {\n        throw new Scorm2004ValidationError(\n          this._cmi_element + \".learner_response\",\n          scorm2004_errors.TYPE_MISMATCH,\n        );\n      }\n    }\n  }\n\n  /**\n   * Getter for _result\n   * @return {string}\n   */\n  get result(): string {\n    return this._result;\n  }\n\n  /**\n   * Setter for _result\n   * @param {string} result\n   */\n  set result(result: string) {\n    if (check2004ValidFormat(this._cmi_element + \".result\", result, scorm2004_regex.CMIResult)) {\n      this._result = result;\n    }\n  }\n\n  /**\n   * Getter for _latency\n   * @return {string}\n   */\n  get latency(): string {\n    return this._latency;\n  }\n\n  /**\n   * Setter for _latency\n   * @param {string} latency\n   */\n  set latency(latency: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".latency\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".latency\", latency, scorm2004_regex.CMITimespan)\n      ) {\n        this._latency = latency;\n      }\n    }\n  }\n\n  /**\n   * Getter for _description\n   * @return {string}\n   */\n  get description(): string {\n    return this._description;\n  }\n\n  /**\n   * Setter for _description\n   * @param {string} description\n   */\n  set description(description: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".description\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".description\",\n          description,\n          scorm2004_regex.CMILangString250,\n          true,\n        )\n      ) {\n        this._description = description;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      type: string,\n   *      objectives: CMIArray,\n   *      timestamp: string,\n   *      correct_responses: CMIArray,\n   *      weighting: string,\n   *      learner_response: string,\n   *      result: string,\n   *      latency: string,\n   *      description: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    type: string;\n    objectives: CMIArray;\n    timestamp: string;\n    correct_responses: CMIArray;\n    weighting: string;\n    learner_response: string;\n    result: string;\n    latency: string;\n    description: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      type: this.type,\n      objectives: this.objectives,\n      timestamp: this.timestamp,\n      weighting: this.weighting,\n      learner_response: this.learner_response,\n      result: this.result,\n      latency: this.latency,\n      description: this.description,\n      correct_responses: this.correct_responses,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.objectives.n object\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  private _id = \"\";\n\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super(\"cmi.interactions.n.objectives.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._id = \"\";\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.correct_responses.n object\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  private _pattern = \"\";\n  private _parent?: CMIInteractionsObject | undefined;\n\n  /**\n   * Constructor for cmi.interactions.n.correct_responses.n\n   * @param {CMIInteractionsObject} parent - The parent interaction object\n   */\n  constructor(parent?: CMIInteractionsObject) {\n    super(\"cmi.interactions.n.correct_responses.n\");\n    this._parent = parent;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._pattern = \"\";\n  }\n\n  /**\n   * Getter for _pattern\n   * @return {string}\n   */\n  get pattern(): string {\n    return this._pattern;\n  }\n\n  /**\n   * Setter for _pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern: string) {\n    // First do basic format validation\n    if (\n      check2004ValidFormat(this._cmi_element + \".pattern\", pattern, scorm2004_regex.CMIFeedback)\n    ) {\n      // If we have a parent interaction, validate the pattern against the interaction type\n      if (this._parent && this._parent.type) {\n        const interactionType = this._parent.type;\n        const response = CorrectResponses[interactionType];\n\n        if (response) {\n          // Validate the pattern against the interaction type\n          let isValid = true;\n          let nodes = [];\n\n          if (response?.delimiter) {\n            nodes = String(pattern).split(response.delimiter);\n          } else {\n            nodes[0] = pattern;\n          }\n\n          if (nodes.length > 0 && nodes.length <= response.max) {\n            const formatRegex = new RegExp(response.format);\n\n            for (let i = 0; i < nodes.length && isValid; i++) {\n              if (response?.delimiter2) {\n                const values = nodes[i].split(response.delimiter2);\n                if (values.length === 2) {\n                  const matches = values[0].match(formatRegex);\n                  if (!matches) {\n                    isValid = false;\n                  } else if (!response.format2 || !values[1].match(new RegExp(response.format2))) {\n                    isValid = false;\n                  }\n                } else {\n                  isValid = false;\n                }\n              } else {\n                const matches = nodes[i].match(formatRegex);\n                if (\n                  (!matches && pattern !== \"\") ||\n                  (!matches && interactionType === \"true-false\")\n                ) {\n                  isValid = false;\n                }\n              }\n            }\n          } else if (nodes.length > response.max) {\n            isValid = false;\n          }\n\n          if (!isValid) {\n            throw new Scorm2004ValidationError(\n              this._cmi_element + \".pattern\",\n              scorm2004_errors.TYPE_MISMATCH,\n            );\n          }\n        }\n      }\n\n      this._pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON cmi.interactions.n.correct_responses.n object\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    pattern: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      pattern: this.pattern,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { ValidationError } from \"../exceptions\";\nimport { scorm12_constants } from \"../constants/api_constants\";\n\nconst scorm12_errors = scorm12_constants.error_descriptions;\n\n/**\n * SCORM 1.2 Validation Error\n */\nexport class Scorm12ValidationError extends ValidationError {\n  /**\n   * Constructor to take in an error code\n   * @param {string} CMIElement\n   * @param {number} errorCode\n   */\n  constructor(CMIElement: string, errorCode: number) {\n    if ({}.hasOwnProperty.call(scorm12_errors, String(errorCode))) {\n      super(\n        CMIElement,\n        errorCode,\n        scorm12_errors[String(errorCode)].basicMessage,\n        scorm12_errors[String(errorCode)].detailMessage,\n      );\n    } else {\n      super(\n        CMIElement,\n        101,\n        scorm12_errors[\"101\"].basicMessage,\n        scorm12_errors[\"101\"].detailMessage,\n      );\n    }\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Scorm12ValidationError.prototype);\n  }\n}\n","import { checkValidFormat, checkValidRange } from \"../common/validation\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../../exceptions/scorm12_exceptions\";\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidFormat(\n  CMIElement: string,\n  value: string,\n  regexPattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  return checkValidFormat(\n    CMIElement,\n    value,\n    regexPattern,\n    scorm12_errors.TYPE_MISMATCH,\n    Scorm12ValidationError,\n    allowEmptyString,\n  );\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {string} CMIElement\n * @param {string} value\n * @param {string} rangePattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidRange(\n  CMIElement: string,\n  value: any,\n  rangePattern: string,\n  allowEmptyString?: boolean,\n): boolean {\n  if (!allowEmptyString && value === \"\") {\n    throw new Scorm12ValidationError(CMIElement, scorm12_errors.VALUE_OUT_OF_RANGE);\n  }\n\n  return checkValidRange(\n    CMIElement,\n    value,\n    rangePattern,\n    scorm12_errors.VALUE_OUT_OF_RANGE,\n    Scorm12ValidationError,\n  );\n}\n","import { BaseScormValidationError } from \"../exceptions\";\nimport { checkValidFormat, checkValidRange } from \"../cmi/common/validation\";\nimport { check12ValidFormat, check12ValidRange } from \"../cmi/scorm12/validation\";\nimport { scorm12_regex } from \"../constants/regex\";\nimport { scorm12_errors } from \"../constants/error_codes\";\nimport { Scorm12ValidationError } from \"../exceptions/scorm12_exceptions\";\n\n/**\n * Service for validating CMI data model properties\n */\nexport class ValidationService {\n  /**\n   * Validates a score property (raw, min, max)\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @param {string} decimalRegex - The regex pattern for decimal validation\n   * @param {string | false} scoreRange - The range pattern for score validation, or false if no range validation is needed\n   * @param {number} invalidTypeCode - The error code for invalid type\n   * @param {number} invalidRangeCode - The error code for invalid range\n   * @param {typeof BaseScormValidationError} errorClass - The error class to use for validation errors\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScore(\n    CMIElement: string,\n    value: string,\n    decimalRegex: string,\n    scoreRange: string | false,\n    invalidTypeCode: number,\n    invalidRangeCode: number,\n    errorClass: typeof BaseScormValidationError,\n  ): boolean {\n    return (\n      checkValidFormat(CMIElement, value, decimalRegex, invalidTypeCode, errorClass) &&\n      (!scoreRange || checkValidRange(CMIElement, value, scoreRange, invalidRangeCode, errorClass))\n    );\n    // This line should never be reached due to exceptions being thrown\n  }\n\n  /**\n   * Validates a SCORM 1.2 audio property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Audio(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.audio_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 language property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Language(CMIElement: string, value: string): boolean {\n    return check12ValidFormat(CMIElement, value, scorm12_regex.CMIString256);\n  }\n\n  /**\n   * Validates a SCORM 1.2 speed property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Speed(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.speed_range)\n    );\n  }\n\n  /**\n   * Validates a SCORM 1.2 text property\n   *\n   * @param {string} CMIElement\n   * @param {string} value - The value to validate\n   * @return {boolean} - True if validation passes, throws an error otherwise\n   */\n  validateScorm12Text(CMIElement: string, value: string): boolean {\n    return (\n      check12ValidFormat(CMIElement, value, scorm12_regex.CMISInteger) &&\n      check12ValidRange(CMIElement, value, scorm12_regex.text_range)\n    );\n  }\n\n  /**\n   * Validates if a property is read-only\n   *\n   * @param {string} CMIElement\n   * @param {boolean} initialized - Whether the object is initialized\n   * @throws {BaseScormValidationError} - Throws an error if the object is initialized\n   */\n  validateReadOnly(CMIElement: string, initialized: boolean): void {\n    if (initialized) {\n      throw new Scorm12ValidationError(CMIElement, scorm12_errors.READ_ONLY_ELEMENT);\n    }\n  }\n}\n\n// Export a singleton instance of the ValidationService\nexport const validationService = new ValidationService();\n","import { scorm12_constants } from \"../../constants/api_constants\";\nimport { scorm12_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"./base_cmi\";\nimport { scorm12_errors } from \"../../constants/error_codes\";\nimport { BaseScormValidationError } from \"../../exceptions\";\nimport { validationService } from \"../../services/ValidationService\";\n\n/**\n * Base class for cmi *.score objects\n */\nexport class CMIScore extends BaseCMI {\n  private readonly __children: string;\n  private readonly __score_range: string | false;\n  private readonly __invalid_error_code: number;\n  private readonly __invalid_type_code: number;\n  private readonly __invalid_range_code: number;\n  private readonly __decimal_regex: string;\n  private readonly __error_class: typeof BaseScormValidationError;\n  protected _raw = \"\";\n  protected _min = \"\";\n  protected _max: string;\n\n  /**\n   * Constructor for *.score\n   * @param {\n   *     score_children: string,\n   *     score_range: string,\n   *     max: string,\n   *     invalidErrorCode: number,\n   *     invalidTypeCode: number,\n   *     invalidRangeCode: number,\n   *     decimalRegex: string,\n   *     errorClass: typeof BaseScormValidationError\n   * } params\n   */\n  constructor(params: {\n    CMIElement: string;\n    score_children?: string;\n    score_range?: string;\n    max?: string;\n    invalidErrorCode?: number;\n    invalidTypeCode?: number;\n    invalidRangeCode?: number;\n    decimalRegex?: string;\n    errorClass: typeof BaseScormValidationError;\n  }) {\n    super(params.CMIElement);\n\n    this.__children = params.score_children || scorm12_constants.score_children;\n    this.__score_range = !params.score_range ? false : scorm12_regex.score_range;\n    this._max = params.max || params.max === \"\" ? params.max : \"100\";\n    this.__invalid_error_code = params.invalidErrorCode || scorm12_errors.INVALID_SET_VALUE;\n    this.__invalid_type_code = params.invalidTypeCode || scorm12_errors.TYPE_MISMATCH;\n    this.__invalid_range_code = params.invalidRangeCode || scorm12_errors.VALUE_OUT_OF_RANGE;\n    this.__decimal_regex = params.decimalRegex || scorm12_regex.CMIDecimal;\n    this.__error_class = params.errorClass;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children: string) {\n    throw new this.__error_class(this._cmi_element + \"._children\", this.__invalid_error_code);\n  }\n\n  /**\n   * Getter for _raw\n   * @return {string}\n   */\n  get raw(): string {\n    return this._raw;\n  }\n\n  /**\n   * Setter for _raw\n   * @param {string} raw\n   */\n  set raw(raw: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".raw\",\n        raw,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._raw = raw;\n    }\n  }\n\n  /**\n   * Getter for _min\n   * @return {string}\n   */\n  get min(): string {\n    return this._min;\n  }\n\n  /**\n   * Setter for _min\n   * @param {string} min\n   */\n  set min(min: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".min\",\n        min,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._min = min;\n    }\n  }\n\n  /**\n   * Getter for _max\n   * @return {string}\n   */\n  get max(): string {\n    return this._max;\n  }\n\n  /**\n   * Setter for _max\n   * @param {string} max\n   */\n  set max(max: string) {\n    if (\n      validationService.validateScore(\n        this._cmi_element + \".max\",\n        max,\n        this.__decimal_regex,\n        this.__score_range,\n        this.__invalid_type_code,\n        this.__invalid_range_code,\n        this.__error_class,\n      )\n    ) {\n      this._max = max;\n    }\n  }\n\n  /**\n   * toJSON for *.score\n   * @return {\n   *    {\n   *      min: string,\n   *      max: string,\n   *      raw: string\n   *    }\n   *    }\n   */\n  toJSON(): {\n    min: string;\n    max: string;\n    raw: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","/**\n * Class for SCORM 2004's cmi *.score object\n */\nimport { CMIScore } from \"../common/score\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\n\nexport class Scorm2004CMIScore extends CMIScore {\n  private _scaled = \"\";\n\n  /**\n   * Constructor for cmi *.score\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.score\",\n      score_children: scorm2004_constants.score_children,\n      max: \"\",\n      invalidErrorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      invalidTypeCode: scorm2004_errors.TYPE_MISMATCH,\n      invalidRangeCode: scorm2004_errors.VALUE_OUT_OF_RANGE,\n      decimalRegex: scorm2004_regex.CMIDecimal,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset(): void {\n    this._initialized = false;\n    this._scaled = \"\";\n    this._raw = \"\";\n    this._min = \"\";\n    this._max = \"\";\n  }\n\n  /**\n   * Getter for _scaled\n   * @return {string}\n   */\n  get scaled(): string {\n    return this._scaled;\n  }\n\n  /**\n   * Setter for _scaled\n   * @param {string} scaled\n   */\n  set scaled(scaled: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".scaled\", scaled, scorm2004_regex.CMIDecimal) &&\n      check2004ValidRange(this._cmi_element + \".scaled\", scaled, scorm2004_regex.scaled_range)\n    ) {\n      this._scaled = scaled;\n    }\n  }\n\n  /**\n   * toJSON for cmi *.score\n   *\n   * @return {\n   *    {\n   *      scaled: string,\n   *      raw: string,\n   *      min: string,\n   *      max: string\n   *    }\n   *  }\n   */\n  override toJSON(): {\n    scaled: string;\n    raw: string;\n    min: string;\n    max: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      scaled: this.scaled,\n      raw: this.raw,\n      min: this.min,\n      max: this.max,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_lms object\n * @extends CMIArray\n */\nexport class CMICommentsFromLMS extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_lms Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.comments_from_lms\",\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner object\n */\n\nexport class CMICommentsFromLearner extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_learner Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.comments_from_learner\",\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner.n and cmi.comments_from_lms.n object\n */\n\nexport class CMICommentsObject extends BaseCMI {\n  private _comment = \"\";\n  private _location = \"\";\n  private _timestamp = \"\";\n  private readonly _readOnlyAfterInit: boolean;\n\n  /**\n   * Constructor for cmi.comments_from_learner.n and cmi.comments_from_lms.n\n   * @param {boolean} readOnlyAfterInit\n   */\n  constructor(readOnlyAfterInit: boolean = false) {\n    super(\"cmi.comments_from_learner.n\");\n    this._comment = \"\";\n    this._location = \"\";\n    this._timestamp = \"\";\n    this._readOnlyAfterInit = readOnlyAfterInit;\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset(): void {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _comment\n   * @return {string}\n   */\n  get comment(): string {\n    return this._comment;\n  }\n\n  /**\n   * Setter for _comment\n   * @param {string} comment\n   */\n  set comment(comment: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".comment\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".comment\",\n          comment,\n          scorm2004_regex.CMILangString4000,\n          true,\n        )\n      ) {\n        this._comment = comment;\n      }\n    }\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".location\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".location\",\n          location,\n          scorm2004_regex.CMIString250,\n        )\n      ) {\n        this._location = location;\n      }\n    }\n  }\n\n  /**\n   * Getter for _timestamp\n   * @return {string}\n   */\n  get timestamp(): string {\n    return this._timestamp;\n  }\n\n  /**\n   * Setter for _timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp: string) {\n    if (this.initialized && this._readOnlyAfterInit) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".timestamp\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      if (\n        check2004ValidFormat(this._cmi_element + \".timestamp\", timestamp, scorm2004_regex.CMITime)\n      ) {\n        this._timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.comments_from_learner.n object\n   * @return {\n   *    {\n   *      comment: string,\n   *      location: string,\n   *      timestamp: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    comment: string;\n    location: string;\n    timestamp: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      comment: this.comment,\n      location: this.location,\n      timestamp: this.timestamp,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { CMIArray } from \"../common/array\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { Scorm2004CMIScore } from \"./score\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\n\n/**\n * Class representing SCORM 2004's `cmi.objectives` object\n * @extends CMIArray\n */\nexport class CMIObjectives extends CMIArray {\n  /**\n   * Constructor for `cmi.objectives` Array\n   */\n  constructor() {\n    super({\n      CMIElement: \"cmi.objectives\",\n      children: scorm2004_constants.objectives_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n\n  /**\n   * Find an objective by its ID\n   */\n  public findObjectiveById(id: string): CMIObjectivesObject | undefined {\n    return this.childArray.find((objective) => objective.id === id);\n  }\n\n  /**\n   * Find objective by its index\n   */\n  public findObjectiveByIndex(index: number): CMIObjectivesObject {\n    return this.childArray[index];\n  }\n\n  /**\n   * Set an objective at the given index\n   */\n  public setObjectiveByIndex(index: number, objective: CMIObjectivesObject) {\n    this.childArray[index] = objective;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.objectives.n object\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  private _id = \"\";\n  private _success_status = \"unknown\";\n  private _completion_status = \"unknown\";\n  private _progress_measure = \"\";\n  private _description = \"\";\n\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super(\"cmi.objectives.n\");\n    this.score = new Scorm2004CMIScore();\n  }\n\n  override reset() {\n    this._initialized = false;\n  }\n\n  public score: Scorm2004CMIScore;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this._success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".success_status\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".success_status\",\n          success_status,\n          scorm2004_regex.CMISStatus,\n        )\n      ) {\n        this._success_status = success_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this._completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".completion_status\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".completion_status\",\n          completion_status,\n          scorm2004_regex.CMICStatus,\n        )\n      ) {\n        this._completion_status = completion_status;\n      }\n    }\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this._progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".progress_measure\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".progress_measure\",\n          progress_measure,\n          scorm2004_regex.CMIDecimal,\n        ) &&\n        check2004ValidRange(\n          this._cmi_element + \".progress_measure\",\n          progress_measure,\n          scorm2004_regex.progress_range,\n        )\n      ) {\n        this._progress_measure = progress_measure;\n      }\n    }\n  }\n\n  /**\n   * Getter for _description\n   * @return {string}\n   */\n  get description(): string {\n    return this._description;\n  }\n\n  /**\n   * Setter for _description\n   * @param {string} description\n   */\n  set description(description: string) {\n    if (this.initialized && this._id === \"\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".description\",\n        scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED,\n      );\n    } else {\n      if (\n        check2004ValidFormat(\n          this._cmi_element + \".description\",\n          description,\n          scorm2004_regex.CMILangString250,\n          true,\n        )\n      ) {\n        this._description = description;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      success_status: string,\n   *      completion_status: string,\n   *      progress_measure: string,\n   *      description: string,\n   *      score: Scorm2004CMIScore\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    success_status: string;\n    completion_status: string;\n    progress_measure: string;\n    description: string;\n    score: Scorm2004CMIScore;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this.id,\n      success_status: this.success_status,\n      completion_status: this.completion_status,\n      progress_measure: this.progress_measure,\n      description: this.description,\n      score: this.score,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","/**\n * Class representing metadata properties for SCORM 2004's cmi object\n */\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing metadata properties for SCORM 2004's cmi object\n */\nexport class CMIMetadata extends BaseCMI {\n  private __version = \"1.0\";\n  private __children = scorm2004_constants.cmi_children;\n\n  /**\n   * Constructor for CMIMetadata\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   */\n  get _version(): string {\n    return this.__version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version: string) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._version\",\n      scorm2004_errors.READ_ONLY_ELEMENT,\n    );\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   */\n  get _children(): string {\n    return this.__children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {number} _children\n   */\n  set _children(_children: number) {\n    throw new Scorm2004ValidationError(\n      this._cmi_element + \"._children\",\n      scorm2004_errors.READ_ONLY_ELEMENT,\n    );\n  }\n\n  /**\n   * Reset the metadata properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // No need to reset __version and __children as they are constants\n  }\n}\n","/**\n * Class representing learner properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing learner properties for SCORM 2004's cmi object\n */\nexport class CMILearner extends BaseCMI {\n  private _learner_id = \"\";\n  private _learner_name = \"\";\n\n  /**\n   * Constructor for CMILearner\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _learner_id\n   * @return {string}\n   */\n  get learner_id(): string {\n    return this._learner_id;\n  }\n\n  /**\n   * Setter for _learner_id. Can only be called before initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_id\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._learner_id = learner_id;\n    }\n  }\n\n  /**\n   * Getter for _learner_name\n   * @return {string}\n   */\n  get learner_name(): string {\n    return this._learner_name;\n  }\n\n  /**\n   * Setter for _learner_name. Can only be called before initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".learner_name\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._learner_name = learner_name;\n    }\n  }\n\n  /**\n   * Reset the learner properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset learner_id and learner_name as they are read-only after initialization\n  }\n}\n","/**\n * Class representing status properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat, check2004ValidRange } from \"./validation\";\n\n/**\n * Class representing status properties for SCORM 2004's cmi object\n */\nexport class CMIStatus extends BaseCMI {\n  private _completion_status = \"unknown\";\n  private _success_status = \"unknown\";\n  private _progress_measure = \"\";\n\n  /**\n   * Constructor for CMIStatus\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this._completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".completion_status\",\n        completion_status,\n        scorm2004_regex.CMICStatus,\n      )\n    ) {\n      this._completion_status = completion_status;\n    }\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this._success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".success_status\",\n        success_status,\n        scorm2004_regex.CMISStatus,\n      )\n    ) {\n      this._success_status = success_status;\n    }\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this._progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".progress_measure\",\n        progress_measure,\n        scorm2004_regex.CMIDecimal,\n      ) &&\n      check2004ValidRange(\n        this._cmi_element + \".progress_measure\",\n        progress_measure,\n        scorm2004_regex.progress_range,\n      )\n    ) {\n      this._progress_measure = progress_measure;\n    }\n  }\n\n  /**\n   * Reset the status properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._completion_status = \"unknown\";\n    this._success_status = \"unknown\";\n    this._progress_measure = \"\";\n  }\n}\n","/**\n * Class representing session properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\nimport * as Util from \"../../utilities\";\n\n/**\n * Class representing session properties for SCORM 2004's cmi object\n */\nexport class CMISession extends BaseCMI {\n  private _entry = \"\";\n  private _exit = \"\";\n  private _session_time = \"PT0H0M0S\";\n  private _total_time = \"\";\n\n  /**\n   * Constructor for CMISession\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this._entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".entry\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._entry = entry;\n    }\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    if (!this.jsonString) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exit\",\n        scorm2004_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    if (check2004ValidFormat(this._cmi_element + \".exit\", exit, scorm2004_regex.CMIExit, true)) {\n      this._exit = exit;\n    }\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    if (!this.jsonString) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".session_time\",\n        scorm2004_errors.WRITE_ONLY_ELEMENT,\n      );\n    }\n    return this._session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".session_time\",\n        session_time,\n        scorm2004_regex.CMITimespan,\n      )\n    ) {\n      this._session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this._total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".total_time\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._total_time = total_time;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime(): string {\n    let sessionTime = this._session_time;\n    const startTime = this.start_time;\n\n    if (typeof startTime !== \"undefined\" && startTime !== null) {\n      const seconds = new Date().getTime() - startTime;\n      sessionTime = Util.getSecondsAsISODuration(seconds / 1000);\n    }\n\n    return Util.addTwoDurations(this._total_time, sessionTime, scorm2004_regex.CMITimespan);\n  }\n\n  /**\n   * Reset the session properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._entry = \"\";\n    this._exit = \"\";\n    this._session_time = \"PT0H0M0S\";\n    // Don't reset total_time as it's read-only after initialization\n  }\n}\n","/**\n * Class representing content properties for SCORM 2004's cmi object\n */\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\nimport { check2004ValidFormat } from \"./validation\";\n\n/**\n * Class representing content properties for SCORM 2004's cmi object\n */\nexport class CMIContent extends BaseCMI {\n  private _location = \"\";\n  private _launch_data = \"\";\n  private _suspend_data = \"\";\n\n  /**\n   * Constructor for CMIContent\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this._location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".location\", location, scorm2004_regex.CMIString1000)\n    ) {\n      this._location = location;\n    }\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this._launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".launch_data\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._launch_data = launch_data;\n    }\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this._suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    if (\n      check2004ValidFormat(\n        this._cmi_element + \".suspend_data\",\n        suspend_data,\n        scorm2004_regex.CMIString64000,\n        true,\n      )\n    ) {\n      this._suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Reset the content properties\n   */\n  reset(): void {\n    this._initialized = false;\n    this._location = \"\";\n    // Don't reset launch_data as it's read-only after initialization\n    this._suspend_data = \"\";\n  }\n}\n","/**\n * Class representing settings properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing settings properties for SCORM 2004's cmi object\n */\nexport class CMISettings extends BaseCMI {\n  private _credit = \"credit\";\n  private _mode = \"normal\";\n  private _time_limit_action = \"continue,no message\";\n  private _max_time_allowed = \"\";\n\n  /**\n   * Constructor for CMISettings\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this._credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".credit\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._credit = credit;\n    }\n  }\n\n  /**\n   * Getter for _mode\n   * @return {string}\n   */\n  get mode(): string {\n    return this._mode;\n  }\n\n  /**\n   * Setter for _mode. Can only be called before initialization.\n   * @param {string} mode\n   */\n  set mode(mode: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".mode\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._mode = mode;\n    }\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this._time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".time_limit_action\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._time_limit_action = time_limit_action;\n    }\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this._max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".max_time_allowed\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._max_time_allowed = max_time_allowed;\n    }\n  }\n\n  /**\n   * Reset the settings properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset these properties as they are read-only after initialization\n  }\n}\n","/**\n * Class representing threshold properties for SCORM 2004's cmi object\n */\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { BaseCMI } from \"../common/base_cmi\";\n\n/**\n * Class representing threshold properties for SCORM 2004's cmi object\n */\nexport class CMIThresholds extends BaseCMI {\n  private _scaled_passing_score = \"\";\n  private _completion_threshold = \"\";\n\n  /**\n   * Constructor for CMIThresholds\n   */\n  constructor() {\n    super(\"cmi\");\n  }\n\n  /**\n   * Getter for _scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score(): string {\n    return this._scaled_passing_score;\n  }\n\n  /**\n   * Setter for _scaled_passing_score. Can only be called before initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".scaled_passing_score\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._scaled_passing_score = scaled_passing_score;\n    }\n  }\n\n  /**\n   * Getter for _completion_threshold\n   * @return {string}\n   */\n  get completion_threshold(): string {\n    return this._completion_threshold;\n  }\n\n  /**\n   * Setter for _completion_threshold. Can only be called before initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".completion_threshold\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    } else {\n      this._completion_threshold = completion_threshold;\n    }\n  }\n\n  /**\n   * Reset the threshold properties\n   */\n  reset(): void {\n    this._initialized = false;\n    // Don't reset these properties as they are read-only after initialization\n  }\n}\n","import { BaseRootCMI } from \"../common/base_cmi\";\nimport { CMILearnerPreference } from \"./learner_preference\";\nimport { CMIInteractions } from \"./interactions\";\nimport { Scorm2004CMIScore } from \"./score\";\nimport { CMICommentsFromLearner, CMICommentsFromLMS } from \"./comments\";\nimport { CMIObjectives } from \"./objectives\";\nimport { CMIMetadata } from \"./metadata\";\nimport { CMILearner } from \"./learner\";\nimport { CMIStatus } from \"./status\";\nimport { CMISession } from \"./session\";\nimport { CMIContent } from \"./content\";\nimport { CMISettings } from \"./settings\";\nimport { CMIThresholds } from \"./thresholds\";\n\n/**\n * Class representing cmi object for SCORM 2004\n */\nexport class CMI extends BaseRootCMI {\n  /**\n   * Constructor for the SCORM 2004 cmi object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean = false) {\n    super(\"cmi\");\n    this.metadata = new CMIMetadata();\n    this.learner = new CMILearner();\n    this.status = new CMIStatus();\n    this.session = new CMISession();\n    this.content = new CMIContent();\n    this.settings = new CMISettings();\n    this.thresholds = new CMIThresholds();\n    this.learner_preference = new CMILearnerPreference();\n    this.score = new Scorm2004CMIScore();\n    this.comments_from_learner = new CMICommentsFromLearner();\n    this.comments_from_lms = new CMICommentsFromLMS();\n    this.interactions = new CMIInteractions();\n    this.objectives = new CMIObjectives();\n    if (initialized) this.initialize();\n  }\n\n  // New component classes\n  private metadata: CMIMetadata;\n  private learner: CMILearner;\n  private status: CMIStatus;\n  private session: CMISession;\n  private content: CMIContent;\n  private settings: CMISettings;\n  private thresholds: CMIThresholds;\n\n  // Original complex objects\n  public learner_preference: CMILearnerPreference;\n  public score: Scorm2004CMIScore;\n  public comments_from_learner: CMICommentsFromLearner;\n  public comments_from_lms: CMICommentsFromLMS;\n  public interactions: CMIInteractions;\n  public objectives: CMIObjectives;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    // Initialize new component classes\n    this.metadata?.initialize();\n    this.learner?.initialize();\n    this.status?.initialize();\n    this.session?.initialize();\n    this.content?.initialize();\n    this.settings?.initialize();\n    this.thresholds?.initialize();\n\n    // Initialize original complex objects\n    this.learner_preference?.initialize();\n    this.score?.initialize();\n    this.comments_from_learner?.initialize();\n    this.comments_from_lms?.initialize();\n    this.interactions?.initialize();\n    this.objectives?.initialize();\n  }\n\n  /**\n   * Called when API is moving to another SCO\n   */\n  reset() {\n    this._initialized = false;\n\n    // Reset new component classes\n    this.metadata?.reset();\n    this.learner?.reset();\n    this.status?.reset();\n    this.session?.reset();\n    this.content?.reset();\n    this.settings?.reset();\n    this.thresholds?.reset();\n\n    // Reset original complex objects\n    this.objectives?.reset(false);\n    this.interactions?.reset(true);\n    this.score?.reset();\n    this.comments_from_learner?.reset();\n    this.comments_from_lms?.reset();\n    this.learner_preference?.reset();\n  }\n\n  /**\n   * Getter for __version\n   * @return {string}\n   * @private\n   */\n  get _version(): string {\n    return this.metadata._version;\n  }\n\n  /**\n   * Setter for __version. Just throws an error.\n   * @param {string} _version\n   * @private\n   */\n  set _version(_version: string) {\n    this.metadata._version = _version;\n  }\n\n  /**\n   * Getter for __children\n   * @return {string}\n   * @private\n   */\n  get _children(): string {\n    return this.metadata._children;\n  }\n\n  /**\n   * Setter for __children. Just throws an error.\n   * @param {number} _children\n   * @private\n   */\n  set _children(_children: number) {\n    this.metadata._children = _children;\n  }\n\n  /**\n   * Getter for _completion_status\n   * @return {string}\n   */\n  get completion_status(): string {\n    return this.status.completion_status;\n  }\n\n  /**\n   * Setter for _completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status: string) {\n    this.status.completion_status = completion_status;\n  }\n\n  /**\n   * Getter for _completion_threshold\n   * @return {string}\n   */\n  get completion_threshold(): string {\n    return this.thresholds.completion_threshold;\n  }\n\n  /**\n   * Setter for _completion_threshold. Can only be called before initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold: string) {\n    this.thresholds.completion_threshold = completion_threshold;\n  }\n\n  /**\n   * Getter for _credit\n   * @return {string}\n   */\n  get credit(): string {\n    return this.settings.credit;\n  }\n\n  /**\n   * Setter for _credit. Can only be called before initialization.\n   * @param {string} credit\n   */\n  set credit(credit: string) {\n    this.settings.credit = credit;\n  }\n\n  /**\n   * Getter for _entry\n   * @return {string}\n   */\n  get entry(): string {\n    return this.session.entry;\n  }\n\n  /**\n   * Setter for _entry. Can only be called before initialization.\n   * @param {string} entry\n   */\n  set entry(entry: string) {\n    this.session.entry = entry;\n  }\n\n  /**\n   * Getter for _exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit(): string {\n    this.session.jsonString = this.jsonString;\n    return this.session.exit;\n  }\n\n  /**\n   * Setter for _exit\n   * @param {string} exit\n   */\n  set exit(exit: string) {\n    this.session.exit = exit;\n  }\n\n  /**\n   * Getter for _launch_data\n   * @return {string}\n   */\n  get launch_data(): string {\n    return this.content.launch_data;\n  }\n\n  /**\n   * Setter for _launch_data. Can only be called before initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data: string) {\n    this.content.launch_data = launch_data;\n  }\n\n  /**\n   * Getter for _learner_id\n   * @return {string}\n   */\n  get learner_id(): string {\n    return this.learner.learner_id;\n  }\n\n  /**\n   * Setter for _learner_id. Can only be called before initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id: string) {\n    this.learner.learner_id = learner_id;\n  }\n\n  /**\n   * Getter for _learner_name\n   * @return {string}\n   */\n  get learner_name(): string {\n    return this.learner.learner_name;\n  }\n\n  /**\n   * Setter for _learner_name. Can only be called before initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name: string) {\n    this.learner.learner_name = learner_name;\n  }\n\n  /**\n   * Getter for _location\n   * @return {string}\n   */\n  get location(): string {\n    return this.content.location;\n  }\n\n  /**\n   * Setter for _location\n   * @param {string} location\n   */\n  set location(location: string) {\n    this.content.location = location;\n  }\n\n  /**\n   * Getter for _max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed(): string {\n    return this.settings.max_time_allowed;\n  }\n\n  /**\n   * Setter for _max_time_allowed. Can only be called before initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed: string) {\n    this.settings.max_time_allowed = max_time_allowed;\n  }\n\n  /**\n   * Getter for _mode\n   * @return {string}\n   */\n  get mode(): string {\n    return this.settings.mode;\n  }\n\n  /**\n   * Setter for _mode. Can only be called before initialization.\n   * @param {string} mode\n   */\n  set mode(mode: string) {\n    this.settings.mode = mode;\n  }\n\n  /**\n   * Getter for _progress_measure\n   * @return {string}\n   */\n  get progress_measure(): string {\n    return this.status.progress_measure;\n  }\n\n  /**\n   * Setter for _progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure: string) {\n    this.status.progress_measure = progress_measure;\n  }\n\n  /**\n   * Getter for _scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score(): string {\n    return this.thresholds.scaled_passing_score;\n  }\n\n  /**\n   * Setter for _scaled_passing_score. Can only be called before initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score: string) {\n    this.thresholds.scaled_passing_score = scaled_passing_score;\n  }\n\n  /**\n   * Getter for _session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time(): string {\n    this.session.jsonString = this.jsonString;\n    return this.session.session_time;\n  }\n\n  /**\n   * Setter for _session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time: string) {\n    this.session.session_time = session_time;\n  }\n\n  /**\n   * Getter for _success_status\n   * @return {string}\n   */\n  get success_status(): string {\n    return this.status.success_status;\n  }\n\n  /**\n   * Setter for _success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status: string) {\n    this.status.success_status = success_status;\n  }\n\n  /**\n   * Getter for _suspend_data\n   * @return {string}\n   */\n  get suspend_data(): string {\n    return this.content.suspend_data;\n  }\n\n  /**\n   * Setter for _suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data: string) {\n    this.content.suspend_data = suspend_data;\n  }\n\n  /**\n   * Getter for _time_limit_action\n   * @return {string}\n   */\n  get time_limit_action(): string {\n    return this.settings.time_limit_action;\n  }\n\n  /**\n   * Setter for _time_limit_action. Can only be called before initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action: string) {\n    this.settings.time_limit_action = time_limit_action;\n  }\n\n  /**\n   * Getter for _total_time\n   * @return {string}\n   */\n  get total_time(): string {\n    return this.session.total_time;\n  }\n\n  /**\n   * Setter for _total_time. Can only be called before initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time: string) {\n    this.session.total_time = total_time;\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime(): string {\n    return this.session.getCurrentTotalTime();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      comments_from_learner: CMICommentsFromLearner,\n   *      comments_from_lms: CMICommentsFromLMS,\n   *      completion_status: string,\n   *      completion_threshold: string,\n   *      credit: string,\n   *      entry: string,\n   *      exit: string,\n   *      interactions: CMIInteractions,\n   *      launch_data: string,\n   *      learner_id: string,\n   *      learner_name: string,\n   *      learner_preference: CMILearnerPreference,\n   *      location: string,\n   *      max_time_allowed: string,\n   *      mode: string,\n   *      objectives: CMIObjectives,\n   *      progress_measure: string,\n   *      scaled_passing_score: string,\n   *      score: Scorm2004CMIScore,\n   *      session_time: string,\n   *      success_status: string,\n   *      suspend_data: string,\n   *      time_limit_action: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    comments_from_learner: CMICommentsFromLearner;\n    comments_from_lms: CMICommentsFromLMS;\n    completion_status: string;\n    completion_threshold: string;\n    credit: string;\n    entry: string;\n    exit: string;\n    interactions: CMIInteractions;\n    launch_data: string;\n    learner_id: string;\n    learner_name: string;\n    learner_preference: CMILearnerPreference;\n    location: string;\n    max_time_allowed: string;\n    mode: string;\n    objectives: CMIObjectives;\n    progress_measure: string;\n    scaled_passing_score: string;\n    score: Scorm2004CMIScore;\n    session_time: string;\n    success_status: string;\n    suspend_data: string;\n    time_limit_action: string;\n  } {\n    this.jsonString = true;\n\n    // Set jsonString flag on component classes that need it\n    this.session.jsonString = true;\n\n    const result = {\n      comments_from_learner: this.comments_from_learner,\n      comments_from_lms: this.comments_from_lms,\n      completion_status: this.completion_status,\n      completion_threshold: this.completion_threshold,\n      credit: this.credit,\n      entry: this.entry,\n      exit: this.exit,\n      interactions: this.interactions,\n      launch_data: this.launch_data,\n      learner_id: this.learner_id,\n      learner_name: this.learner_name,\n      learner_preference: this.learner_preference,\n      location: this.location,\n      max_time_allowed: this.max_time_allowed,\n      mode: this.mode,\n      objectives: this.objectives,\n      progress_measure: this.progress_measure,\n      scaled_passing_score: this.scaled_passing_score,\n      score: this.score,\n      session_time: this.session_time,\n      success_status: this.success_status,\n      suspend_data: this.suspend_data,\n      time_limit_action: this.time_limit_action,\n    };\n\n    // Clean up jsonString flags\n    this.jsonString = false;\n    this.session.jsonString = false;\n\n    return result;\n  }\n}\n","import { BaseCMI } from \"../common/base_cmi\";\nimport { Scorm2004ValidationError } from \"../../exceptions/scorm2004_exceptions\";\nimport { check2004ValidFormat } from \"./validation\";\nimport { scorm2004_regex } from \"../../constants/regex\";\nimport { NAVBoolean } from \"../../constants/enums\";\nimport { CMIArray } from \"../common/array\";\nimport { scorm2004_constants } from \"../../constants/api_constants\";\nimport { scorm2004_errors } from \"../../constants/error_codes\";\nimport { Sequencing } from \"./sequencing/sequencing\";\n\n/**\n * Class representing SCORM 2004's adl object\n */\nexport class ADL extends BaseCMI {\n  /**\n   * Constructor for adl\n   */\n  constructor() {\n    super(\"adl\");\n    this.nav = new ADLNav();\n    this.data = new ADLData();\n  }\n\n  public nav: ADLNav;\n  public data = new ADLData();\n  private _sequencing: Sequencing | null = null;\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.nav?.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this.nav?.reset();\n  }\n\n  /**\n   * Getter for sequencing\n   * @return {Sequencing | null}\n   */\n  get sequencing(): Sequencing | null {\n    return this._sequencing;\n  }\n\n  /**\n   * Setter for sequencing\n   * @param {Sequencing | null} sequencing\n   */\n  set sequencing(sequencing: Sequencing | null) {\n    this._sequencing = sequencing;\n    if (sequencing) {\n      sequencing.adlNav = this.nav;\n      this.nav.sequencing = sequencing;\n    }\n  }\n\n  /**\n   * toJSON for adl\n   * @return {\n   *    {\n   *      nav: ADLNav,\n   *      data: ADLData\n   *    }\n   *  }\n   */\n  toJSON(): {\n    nav: ADLNav;\n    data: ADLData;\n  } {\n    this.jsonString = true;\n    const result = {\n      nav: this.nav,\n      data: this.data,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's `adl.nav` object\n */\n\nexport class ADLNav extends BaseCMI {\n  private _request = \"_none_\";\n  private _sequencing: Sequencing | null = null;\n\n  /**\n   * Constructor for `adl.nav`\n   */\n  constructor() {\n    super(\"adl.nav\");\n    this.request_valid = new ADLNavRequestValid();\n  }\n\n  public request_valid: ADLNavRequestValid;\n\n  /**\n   * Getter for sequencing\n   * @return {Sequencing | null}\n   */\n  get sequencing(): Sequencing | null {\n    return this._sequencing;\n  }\n\n  /**\n   * Setter for sequencing\n   * @param {Sequencing | null} sequencing\n   */\n  set sequencing(sequencing: Sequencing | null) {\n    this._sequencing = sequencing;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this.request_valid?.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._request = \"_none_\";\n    this._sequencing = null;\n    this.request_valid?.reset();\n  }\n\n  /**\n   * Getter for _request\n   * @return {string}\n   */\n  get request(): string {\n    return this._request;\n  }\n\n  /**\n   * Setter for _request\n   * @param {string} request\n   */\n  set request(request: string) {\n    if (check2004ValidFormat(this._cmi_element + \".request\", request, scorm2004_regex.NAVEvent)) {\n      // Only process if the request is different from the current request\n      if (this._request !== request) {\n        this._request = request;\n\n        // Process the navigation request using the sequencing implementation\n        if (this._sequencing) {\n          this._sequencing.processNavigationRequest(request);\n        }\n      }\n    }\n  }\n\n  /**\n   * toJSON for adl.nav\n   *\n   * @return {\n   *    {\n   *      request: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    request: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      request: this.request,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's `adl.data` object\n */\nexport class ADLData extends CMIArray {\n  constructor() {\n    super({\n      CMIElement: \"adl.data\",\n      children: scorm2004_constants.adl_data_children,\n      errorCode: scorm2004_errors.READ_ONLY_ELEMENT,\n      errorClass: Scorm2004ValidationError,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's adl.data.n object\n */\nexport class ADLDataObject extends BaseCMI {\n  private _id = \"\";\n  private _store = \"\";\n\n  constructor() {\n    super(\"adl.data.n\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for _id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for _id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for _store\n   * @return {string}\n   */\n  get store(): string {\n    return this._store;\n  }\n\n  /**\n   * Setter for _store\n   * @param {string} store\n   */\n  set store(store: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".store\", store, scorm2004_regex.CMILangString4000)\n    ) {\n      this._store = store;\n    }\n  }\n\n  /**\n   * toJSON for adl.data.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      store: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    id: string;\n    store: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      id: this._id,\n      store: this._store,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl.nav.request_valid object\n */\n\nexport class ADLNavRequestValid extends BaseCMI {\n  private _continue = \"unknown\";\n  private _previous = \"unknown\";\n  private _choice: {\n    [key: string]: NAVBoolean;\n  } = {};\n  private _jump: {\n    [key: string]: NAVBoolean;\n  } = {};\n\n  /**\n   * Constructor for adl.nav.request_valid\n   */\n  constructor() {\n    super(\"adl.nav.request_valid\");\n  }\n\n  /**\n   * Called when the API has been reset\n   */\n  override reset() {\n    this._initialized = false;\n    this._continue = \"unknown\";\n    this._previous = \"unknown\";\n  }\n\n  /**\n   * Getter for _continue\n   * @return {string}\n   */\n  get continue(): string {\n    return this._continue;\n  }\n\n  /**\n   * Setter for _continue. Just throws an error.\n   * @param {string} _continue\n   */\n  set continue(_continue: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".continue\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".continue\", _continue, scorm2004_regex.NAVBoolean)\n    ) {\n      this._continue = _continue;\n    }\n  }\n\n  /**\n   * Getter for _previous\n   * @return {string}\n   */\n  get previous(): string {\n    return this._previous;\n  }\n\n  /**\n   * Setter for _previous. Just throws an error.\n   * @param {string} _previous\n   */\n  set previous(_previous: string) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".previous\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (\n      check2004ValidFormat(this._cmi_element + \".previous\", _previous, scorm2004_regex.NAVBoolean)\n    ) {\n      this._previous = _previous;\n    }\n  }\n\n  /**\n   * Getter for _choice\n   * @return {{ [key: string]: NAVBoolean }}\n   */\n  get choice(): { [key: string]: NAVBoolean } {\n    return this._choice;\n  }\n\n  /**\n   * Setter for _choice\n   * @param {{ [key: string]: string }} choice\n   */\n  set choice(choice: { [key: string]: string }) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".choice\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (typeof choice !== \"object\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".choice\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    for (const key in choice) {\n      if ({}.hasOwnProperty.call(choice, key)) {\n        if (\n          check2004ValidFormat(\n            this._cmi_element + \".choice.\" + key,\n            choice[key],\n            scorm2004_regex.NAVBoolean,\n          ) &&\n          check2004ValidFormat(this._cmi_element + \".choice.\" + key, key, scorm2004_regex.NAVTarget)\n        ) {\n          // Convert string value to NAVBoolean enum value\n          const value = choice[key];\n          if (value === \"true\") {\n            this._choice[key] = NAVBoolean.TRUE;\n          } else if (value === \"false\") {\n            this._choice[key] = NAVBoolean.FALSE;\n          } else if (value === \"unknown\") {\n            this._choice[key] = NAVBoolean.UNKNOWN;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Getter for _jump\n   * @return {{ [key: string]: NAVBoolean }}\n   */\n  get jump(): { [key: string]: NAVBoolean } {\n    return this._jump;\n  }\n\n  /**\n   * Setter for _jump\n   * @param {{ [key: string]: string }} jump\n   */\n  set jump(jump: { [key: string]: string }) {\n    if (this.initialized) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".jump\",\n        scorm2004_errors.READ_ONLY_ELEMENT,\n      );\n    }\n    if (typeof jump !== \"object\") {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".jump\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    for (const key in jump) {\n      if ({}.hasOwnProperty.call(jump, key)) {\n        if (\n          check2004ValidFormat(\n            this._cmi_element + \".jump.\" + key,\n            jump[key],\n            scorm2004_regex.NAVBoolean,\n          ) &&\n          check2004ValidFormat(this._cmi_element + \".jump.\" + key, key, scorm2004_regex.NAVTarget)\n        ) {\n          // Convert string value to NAVBoolean enum value\n          const value = jump[key];\n          if (value === \"true\") {\n            this._jump[key] = NAVBoolean.TRUE;\n          } else if (value === \"false\") {\n            this._jump[key] = NAVBoolean.FALSE;\n          } else if (value === \"unknown\") {\n            this._jump[key] = NAVBoolean.UNKNOWN;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * toJSON for adl.nav.request_valid\n   *\n   * @return {\n   *    {\n   *      previous: string,\n   *      continue: string\n   *    }\n   *  }\n   */\n  toJSON(): {\n    previous: string;\n    continue: string;\n  } {\n    this.jsonString = true;\n    const result = {\n      previous: this._previous,\n      continue: this._continue,\n      choice: this._choice,\n      jump: this._jump,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Enum for rule condition operators\n */\nexport enum RuleConditionOperator {\n  NOT = \"not\",\n  AND = \"and\",\n  OR = \"or\",\n}\n\n/**\n * Enum for rule condition types\n */\nexport enum RuleConditionType {\n  SATISFIED = \"satisfied\",\n  OBJECTIVE_STATUS_KNOWN = \"objectiveStatusKnown\",\n  OBJECTIVE_MEASURE_KNOWN = \"objectiveMeasureKnown\",\n  OBJECTIVE_MEASURE_GREATER_THAN = \"objectiveMeasureGreaterThan\",\n  OBJECTIVE_MEASURE_LESS_THAN = \"objectiveMeasureLessThan\",\n  COMPLETED = \"completed\",\n  PROGRESS_KNOWN = \"progressKnown\",\n  ATTEMPTED = \"attempted\",\n  ATTEMPT_LIMIT_EXCEEDED = \"attemptLimitExceeded\",\n  TIME_LIMIT_EXCEEDED = \"timeLimitExceeded\",\n  OUTSIDE_AVAILABLE_TIME_RANGE = \"outsideAvailableTimeRange\",\n  ALWAYS = \"always\",\n}\n\n/**\n * Enum for rule action types\n */\nexport enum RuleActionType {\n  SKIP = \"skip\",\n  DISABLED = \"disabled\",\n  HIDE_FROM_CHOICE = \"hideFromChoice\",\n  STOP_FORWARD_TRAVERSAL = \"stopForwardTraversal\",\n  EXIT_PARENT = \"exitParent\",\n  EXIT_ALL = \"exitAll\",\n  RETRY = \"retry\",\n  RETRY_ALL = \"retryAll\",\n  CONTINUE = \"continue\",\n  PREVIOUS = \"previous\",\n  EXIT = \"exit\",\n}\n\n/**\n * Class representing a sequencing rule condition\n */\nexport class RuleCondition extends BaseCMI {\n  private _condition: RuleConditionType = RuleConditionType.ALWAYS;\n  private _operator: RuleConditionOperator | null = null;\n  private _parameters: Map<string, any> = new Map();\n\n  /**\n   * Constructor for RuleCondition\n   * @param {RuleConditionType} condition - The condition type\n   * @param {RuleConditionOperator | null} operator - The operator (null for no operator)\n   * @param {Map<string, any>} parameters - Additional parameters for the condition\n   */\n  constructor(\n    condition: RuleConditionType = RuleConditionType.ALWAYS,\n    operator: RuleConditionOperator | null = null,\n    parameters: Map<string, any> = new Map(),\n  ) {\n    super(\"ruleCondition\");\n    this._condition = condition;\n    this._operator = operator;\n    this._parameters = parameters;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for condition\n   * @return {RuleConditionType}\n   */\n  get condition(): RuleConditionType {\n    return this._condition;\n  }\n\n  /**\n   * Setter for condition\n   * @param {RuleConditionType} condition\n   */\n  set condition(condition: RuleConditionType) {\n    this._condition = condition;\n  }\n\n  /**\n   * Getter for operator\n   * @return {RuleConditionOperator | null}\n   */\n  get operator(): RuleConditionOperator | null {\n    return this._operator;\n  }\n\n  /**\n   * Setter for operator\n   * @param {RuleConditionOperator | null} operator\n   */\n  set operator(operator: RuleConditionOperator | null) {\n    this._operator = operator;\n  }\n\n  /**\n   * Getter for parameters\n   * @return {Map<string, any>}\n   */\n  get parameters(): Map<string, any> {\n    return this._parameters;\n  }\n\n  /**\n   * Setter for parameters\n   * @param {Map<string, any>} parameters\n   */\n  set parameters(parameters: Map<string, any>) {\n    this._parameters = parameters;\n  }\n\n  /**\n   * Evaluate the condition for an activity\n   * @param {Activity} activity - The activity to evaluate the condition for\n   * @return {boolean} - True if the condition is met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    switch (this._condition) {\n      case RuleConditionType.SATISFIED:\n        return activity.successStatus === SuccessStatus.PASSED;\n      case RuleConditionType.OBJECTIVE_STATUS_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RuleConditionType.OBJECTIVE_MEASURE_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RuleConditionType.OBJECTIVE_MEASURE_GREATER_THAN: {\n        const greaterThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure > greaterThanValue\n        );\n      }\n      case RuleConditionType.OBJECTIVE_MEASURE_LESS_THAN: {\n        const lessThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure < lessThanValue\n        );\n      }\n      case RuleConditionType.COMPLETED:\n        return activity.isCompleted;\n      case RuleConditionType.PROGRESS_KNOWN:\n        return activity.completionStatus !== \"unknown\";\n      case RuleConditionType.ATTEMPTED:\n        return activity.attemptCount > 0;\n      case RuleConditionType.ATTEMPT_LIMIT_EXCEEDED: {\n        const attemptLimit = this._parameters.get(\"attemptLimit\") || 0;\n        return attemptLimit > 0 && activity.attemptCount >= attemptLimit;\n      }\n      case RuleConditionType.TIME_LIMIT_EXCEEDED:\n        // Time limit exceeded would require additional tracking\n        return false;\n      case RuleConditionType.OUTSIDE_AVAILABLE_TIME_RANGE:\n        // Outside available time range would require additional tracking\n        return false;\n      case RuleConditionType.ALWAYS:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RuleCondition\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      condition: this._condition,\n      operator: this._operator,\n      parameters: Object.fromEntries(this._parameters),\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a sequencing rule\n */\nexport class SequencingRule extends BaseCMI {\n  private _conditions: RuleCondition[] = [];\n  private _action: RuleActionType = RuleActionType.SKIP;\n  private _conditionCombination: RuleConditionOperator = RuleConditionOperator.AND;\n\n  /**\n   * Constructor for SequencingRule\n   * @param {RuleActionType} action - The action to take when the rule conditions are met\n   * @param {RuleConditionOperator} conditionCombination - How to combine multiple conditions\n   */\n  constructor(\n    action: RuleActionType = RuleActionType.SKIP,\n    conditionCombination: RuleConditionOperator = RuleConditionOperator.AND,\n  ) {\n    super(\"sequencingRule\");\n    this._action = action;\n    this._conditionCombination = conditionCombination;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._conditions = [];\n  }\n\n  /**\n   * Getter for conditions\n   * @return {RuleCondition[]}\n   */\n  get conditions(): RuleCondition[] {\n    return this._conditions;\n  }\n\n  /**\n   * Add a condition to the rule\n   * @param {RuleCondition} condition - The condition to add\n   */\n  addCondition(condition: RuleCondition): void {\n    if (!(condition instanceof RuleCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._conditions.push(condition);\n  }\n\n  /**\n   * Remove a condition from the rule\n   * @param {RuleCondition} condition - The condition to remove\n   * @return {boolean} - True if the condition was removed, false otherwise\n   */\n  removeCondition(condition: RuleCondition): boolean {\n    const index = this._conditions.indexOf(condition);\n    if (index !== -1) {\n      this._conditions.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for action\n   * @return {RuleActionType}\n   */\n  get action(): RuleActionType {\n    return this._action;\n  }\n\n  /**\n   * Setter for action\n   * @param {RuleActionType} action\n   */\n  set action(action: RuleActionType) {\n    this._action = action;\n  }\n\n  /**\n   * Getter for conditionCombination\n   * @return {RuleConditionOperator}\n   */\n  get conditionCombination(): RuleConditionOperator {\n    return this._conditionCombination;\n  }\n\n  /**\n   * Setter for conditionCombination\n   * @param {RuleConditionOperator} conditionCombination\n   */\n  set conditionCombination(conditionCombination: RuleConditionOperator) {\n    this._conditionCombination = conditionCombination;\n  }\n\n  /**\n   * Evaluate the rule for an activity\n   * @param {Activity} activity - The activity to evaluate the rule for\n   * @return {boolean} - True if the rule conditions are met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    if (this._conditions.length === 0) {\n      return true;\n    }\n\n    if (this._conditionCombination === RuleConditionOperator.AND) {\n      return this._conditions.every((condition) => condition.evaluate(activity));\n    } else if (this._conditionCombination === RuleConditionOperator.OR) {\n      return this._conditions.some((condition) => condition.evaluate(activity));\n    }\n\n    return false;\n  }\n\n  /**\n   * toJSON for SequencingRule\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      conditions: this._conditions,\n      action: this._action,\n      conditionCombination: this._conditionCombination,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a collection of sequencing rules\n */\nexport class SequencingRules extends BaseCMI {\n  private _preConditionRules: SequencingRule[] = [];\n  private _exitConditionRules: SequencingRule[] = [];\n  private _postConditionRules: SequencingRule[] = [];\n\n  /**\n   * Constructor for SequencingRules\n   */\n  constructor() {\n    super(\"sequencingRules\");\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._preConditionRules = [];\n    this._exitConditionRules = [];\n    this._postConditionRules = [];\n  }\n\n  /**\n   * Getter for preConditionRules\n   * @return {SequencingRule[]}\n   */\n  get preConditionRules(): SequencingRule[] {\n    return this._preConditionRules;\n  }\n\n  /**\n   * Add a pre-condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addPreConditionRule(rule: SequencingRule): void {\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".preConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._preConditionRules.push(rule);\n  }\n\n  /**\n   * Getter for exitConditionRules\n   * @return {SequencingRule[]}\n   */\n  get exitConditionRules(): SequencingRule[] {\n    return this._exitConditionRules;\n  }\n\n  /**\n   * Add an exit condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addExitConditionRule(rule: SequencingRule): void {\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".exitConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._exitConditionRules.push(rule);\n  }\n\n  /**\n   * Getter for postConditionRules\n   * @return {SequencingRule[]}\n   */\n  get postConditionRules(): SequencingRule[] {\n    return this._postConditionRules;\n  }\n\n  /**\n   * Add a post-condition rule\n   * @param {SequencingRule} rule - The rule to add\n   */\n  addPostConditionRule(rule: SequencingRule): void {\n    if (!(rule instanceof SequencingRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".postConditionRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._postConditionRules.push(rule);\n  }\n\n  /**\n   * Evaluate pre-condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluatePreConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._preConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Evaluate exit condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluateExitConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._exitConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Evaluate post-condition rules for an activity\n   * @param {Activity} activity - The activity to evaluate the rules for\n   * @return {RuleActionType | null} - The action to take, or null if no rules are met\n   */\n  evaluatePostConditionRules(activity: Activity): RuleActionType | null {\n    for (const rule of this._postConditionRules) {\n      if (rule.evaluate(activity)) {\n        return rule.action;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * toJSON for SequencingRules\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      preConditionRules: this._preConditionRules,\n      exitConditionRules: this._exitConditionRules,\n      postConditionRules: this._postConditionRules,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { CompletionStatus, SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Enum for rollup action types\n */\nexport enum RollupActionType {\n  SATISFIED = \"satisfied\",\n  NOT_SATISFIED = \"notSatisfied\",\n  COMPLETED = \"completed\",\n  INCOMPLETE = \"incomplete\",\n}\n\n/**\n * Enum for rollup condition types\n */\nexport enum RollupConditionType {\n  SATISFIED = \"satisfied\",\n  OBJECTIVE_STATUS_KNOWN = \"objectiveStatusKnown\",\n  OBJECTIVE_MEASURE_KNOWN = \"objectiveMeasureKnown\",\n  OBJECTIVE_MEASURE_GREATER_THAN = \"objectiveMeasureGreaterThan\",\n  OBJECTIVE_MEASURE_LESS_THAN = \"objectiveMeasureLessThan\",\n  COMPLETED = \"completed\",\n  PROGRESS_KNOWN = \"progressKnown\",\n  ATTEMPTED = \"attempted\",\n  NOT_ATTEMPTED = \"notAttempted\",\n  ALWAYS = \"always\",\n}\n\n/**\n * Enum for rollup consideration types\n */\nexport enum RollupConsiderationType {\n  ALL = \"all\",\n  ANY = \"any\",\n  NONE = \"none\",\n  AT_LEAST_COUNT = \"atLeastCount\",\n  AT_LEAST_PERCENT = \"atLeastPercent\",\n}\n\n/**\n * Class representing a rollup condition\n */\nexport class RollupCondition extends BaseCMI {\n  private _condition: RollupConditionType = RollupConditionType.ALWAYS;\n  private _parameters: Map<string, any> = new Map();\n\n  /**\n   * Constructor for RollupCondition\n   * @param {RollupConditionType} condition - The condition type\n   * @param {Map<string, any>} parameters - Additional parameters for the condition\n   */\n  constructor(\n    condition: RollupConditionType = RollupConditionType.ALWAYS,\n    parameters: Map<string, any> = new Map(),\n  ) {\n    super(\"rollupCondition\");\n    this._condition = condition;\n    this._parameters = parameters;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n  }\n\n  /**\n   * Getter for condition\n   * @return {RollupConditionType}\n   */\n  get condition(): RollupConditionType {\n    return this._condition;\n  }\n\n  /**\n   * Setter for condition\n   * @param {RollupConditionType} condition\n   */\n  set condition(condition: RollupConditionType) {\n    this._condition = condition;\n  }\n\n  /**\n   * Getter for parameters\n   * @return {Map<string, any>}\n   */\n  get parameters(): Map<string, any> {\n    return this._parameters;\n  }\n\n  /**\n   * Setter for parameters\n   * @param {Map<string, any>} parameters\n   */\n  set parameters(parameters: Map<string, any>) {\n    this._parameters = parameters;\n  }\n\n  /**\n   * Evaluate the condition for an activity\n   * @param {Activity} activity - The activity to evaluate the condition for\n   * @return {boolean} - True if the condition is met, false otherwise\n   */\n  evaluate(activity: Activity): boolean {\n    switch (this._condition) {\n      case RollupConditionType.SATISFIED:\n        return activity.successStatus === SuccessStatus.PASSED;\n      case RollupConditionType.OBJECTIVE_STATUS_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RollupConditionType.OBJECTIVE_MEASURE_KNOWN:\n        return activity.objectiveMeasureStatus;\n      case RollupConditionType.OBJECTIVE_MEASURE_GREATER_THAN: {\n        const greaterThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure > greaterThanValue\n        );\n      }\n      case RollupConditionType.OBJECTIVE_MEASURE_LESS_THAN: {\n        const lessThanValue = this._parameters.get(\"threshold\") || 0;\n        return (\n          activity.objectiveMeasureStatus && activity.objectiveNormalizedMeasure < lessThanValue\n        );\n      }\n      case RollupConditionType.COMPLETED:\n        return activity.isCompleted;\n      case RollupConditionType.PROGRESS_KNOWN:\n        return activity.completionStatus !== CompletionStatus.UNKNOWN;\n      case RollupConditionType.ATTEMPTED:\n        return activity.attemptCount > 0;\n      case RollupConditionType.NOT_ATTEMPTED:\n        return activity.attemptCount === 0;\n      case RollupConditionType.ALWAYS:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RollupCondition\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      condition: this._condition,\n      parameters: Object.fromEntries(this._parameters),\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a rollup rule\n */\nexport class RollupRule extends BaseCMI {\n  private _conditions: RollupCondition[] = [];\n  private _action: RollupActionType = RollupActionType.SATISFIED;\n  private _consideration: RollupConsiderationType = RollupConsiderationType.ALL;\n  private _minimumCount: number = 0;\n  private _minimumPercent: number = 0;\n\n  /**\n   * Constructor for RollupRule\n   * @param {RollupActionType} action - The action to take when the rule conditions are met\n   * @param {RollupConsiderationType} consideration - How to consider child activities\n   * @param {number} minimumCount - The minimum count for AT_LEAST_COUNT consideration\n   * @param {number} minimumPercent - The minimum percent for AT_LEAST_PERCENT consideration\n   */\n  constructor(\n    action: RollupActionType = RollupActionType.SATISFIED,\n    consideration: RollupConsiderationType = RollupConsiderationType.ALL,\n    minimumCount: number = 0,\n    minimumPercent: number = 0,\n  ) {\n    super(\"rollupRule\");\n    this._action = action;\n    this._consideration = consideration;\n    this._minimumCount = minimumCount;\n    this._minimumPercent = minimumPercent;\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._conditions = [];\n  }\n\n  /**\n   * Getter for conditions\n   * @return {RollupCondition[]}\n   */\n  get conditions(): RollupCondition[] {\n    return this._conditions;\n  }\n\n  /**\n   * Add a condition to the rule\n   * @param {RollupCondition} condition - The condition to add\n   */\n  addCondition(condition: RollupCondition): void {\n    if (!(condition instanceof RollupCondition)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".conditions\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._conditions.push(condition);\n  }\n\n  /**\n   * Remove a condition from the rule\n   * @param {RollupCondition} condition - The condition to remove\n   * @return {boolean} - True if the condition was removed, false otherwise\n   */\n  removeCondition(condition: RollupCondition): boolean {\n    const index = this._conditions.indexOf(condition);\n    if (index !== -1) {\n      this._conditions.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for action\n   * @return {RollupActionType}\n   */\n  get action(): RollupActionType {\n    return this._action;\n  }\n\n  /**\n   * Setter for action\n   * @param {RollupActionType} action\n   */\n  set action(action: RollupActionType) {\n    this._action = action;\n  }\n\n  /**\n   * Getter for consideration\n   * @return {RollupConsiderationType}\n   */\n  get consideration(): RollupConsiderationType {\n    return this._consideration;\n  }\n\n  /**\n   * Setter for consideration\n   * @param {RollupConsiderationType} consideration\n   */\n  set consideration(consideration: RollupConsiderationType) {\n    this._consideration = consideration;\n  }\n\n  /**\n   * Getter for minimumCount\n   * @return {number}\n   */\n  get minimumCount(): number {\n    return this._minimumCount;\n  }\n\n  /**\n   * Setter for minimumCount\n   * @param {number} minimumCount\n   */\n  set minimumCount(minimumCount: number) {\n    if (minimumCount >= 0) {\n      this._minimumCount = minimumCount;\n    }\n  }\n\n  /**\n   * Getter for minimumPercent\n   * @return {number}\n   */\n  get minimumPercent(): number {\n    return this._minimumPercent;\n  }\n\n  /**\n   * Setter for minimumPercent\n   * @param {number} minimumPercent\n   */\n  set minimumPercent(minimumPercent: number) {\n    if (minimumPercent >= 0 && minimumPercent <= 100) {\n      this._minimumPercent = minimumPercent;\n    }\n  }\n\n  /**\n   * Evaluate the rule for a set of child activities\n   * @param {Activity[]} children - The child activities to evaluate the rule for\n   * @return {boolean} - True if the rule conditions are met, false otherwise\n   */\n  evaluate(children: Activity[]): boolean {\n    if (children.length === 0) {\n      return false;\n    }\n\n    // Filter children that meet all conditions\n    const matchingChildren = children.filter((child) => {\n      return this._conditions.every((condition) => condition.evaluate(child));\n    });\n\n    // Apply consideration\n    switch (this._consideration) {\n      case RollupConsiderationType.ALL:\n        return matchingChildren.length === children.length;\n      case RollupConsiderationType.ANY:\n        return matchingChildren.length > 0;\n      case RollupConsiderationType.NONE:\n        return matchingChildren.length === 0;\n      case RollupConsiderationType.AT_LEAST_COUNT:\n        return matchingChildren.length >= this._minimumCount;\n      case RollupConsiderationType.AT_LEAST_PERCENT: {\n        const percent = (matchingChildren.length / children.length) * 100;\n        return percent >= this._minimumPercent;\n      }\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * toJSON for RollupRule\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      conditions: this._conditions,\n      action: this._action,\n      consideration: this._consideration,\n      minimumCount: this._minimumCount,\n      minimumPercent: this._minimumPercent,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n\n/**\n * Class representing a collection of rollup rules\n */\nexport class RollupRules extends BaseCMI {\n  private _rules: RollupRule[] = [];\n\n  /**\n   * Constructor for RollupRules\n   */\n  constructor() {\n    super(\"rollupRules\");\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._rules = [];\n  }\n\n  /**\n   * Getter for rules\n   * @return {RollupRule[]}\n   */\n  get rules(): RollupRule[] {\n    return this._rules;\n  }\n\n  /**\n   * Add a rule\n   * @param {RollupRule} rule - The rule to add\n   */\n  addRule(rule: RollupRule): void {\n    if (!(rule instanceof RollupRule)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".rules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._rules.push(rule);\n  }\n\n  /**\n   * Remove a rule\n   * @param {RollupRule} rule - The rule to remove\n   * @return {boolean} - True if the rule was removed, false otherwise\n   */\n  removeRule(rule: RollupRule): boolean {\n    const index = this._rules.indexOf(rule);\n    if (index !== -1) {\n      this._rules.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Process rollup for an activity\n   * @param {Activity} activity - The activity to process rollup for\n   */\n  processRollup(activity: Activity): void {\n    if (!activity || activity.children.length === 0) {\n      return;\n    }\n\n    const children = activity.children;\n    let completionRollup = false;\n    let successRollup = false;\n\n    // Process each rule\n    for (const rule of this._rules) {\n      if (rule.evaluate(children)) {\n        switch (rule.action) {\n          case RollupActionType.SATISFIED:\n            activity.successStatus = SuccessStatus.PASSED;\n            successRollup = true;\n            break;\n          case RollupActionType.NOT_SATISFIED:\n            activity.successStatus = SuccessStatus.FAILED;\n            successRollup = true;\n            break;\n          case RollupActionType.COMPLETED:\n            activity.completionStatus = CompletionStatus.COMPLETED;\n            activity.isCompleted = true;\n            completionRollup = true;\n            break;\n          case RollupActionType.INCOMPLETE:\n            activity.completionStatus = CompletionStatus.INCOMPLETE;\n            activity.isCompleted = false;\n            completionRollup = true;\n            break;\n        }\n      }\n    }\n\n    // If no rules applied for completion, use default rollup\n    if (!completionRollup) {\n      this._defaultCompletionRollup(activity, children);\n    }\n\n    // If no rules applied for success, use default rollup\n    if (!successRollup) {\n      this._defaultSuccessRollup(activity, children);\n    }\n  }\n\n  /**\n   * Default completion rollup\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @private\n   */\n  private _defaultCompletionRollup(activity: Activity, children: Activity[]): void {\n    // If all children are completed, mark the parent as completed\n    const allCompleted = children.every((child) => child.isCompleted);\n    if (allCompleted) {\n      activity.completionStatus = CompletionStatus.COMPLETED;\n      activity.isCompleted = true;\n    } else {\n      // If any child is incomplete, mark the parent as incomplete\n      const anyIncomplete = children.some(\n        (child) => child.completionStatus === CompletionStatus.INCOMPLETE,\n      );\n      if (anyIncomplete) {\n        activity.completionStatus = CompletionStatus.INCOMPLETE;\n        activity.isCompleted = false;\n      }\n    }\n  }\n\n  /**\n   * Default success rollup\n   * @param {Activity} activity - The activity to process rollup for\n   * @param {Activity[]} children - The child activities\n   * @private\n   */\n  private _defaultSuccessRollup(activity: Activity, children: Activity[]): void {\n    // If all children are satisfied, mark the parent as satisfied\n    const allSatisfied = children.every((child) => child.successStatus === SuccessStatus.PASSED);\n    if (allSatisfied) {\n      activity.successStatus = SuccessStatus.PASSED;\n    } else {\n      // If any child is not satisfied, mark the parent as not satisfied\n      const anyNotSatisfied = children.some(\n        (child) => child.successStatus === SuccessStatus.FAILED,\n      );\n      if (anyNotSatisfied) {\n        activity.successStatus = SuccessStatus.FAILED;\n      }\n    }\n  }\n\n  /**\n   * toJSON for RollupRules\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      rules: this._rules,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","const ValidLanguages: string[] = [\n  \"aa\",\n  \"ab\",\n  \"ae\",\n  \"af\",\n  \"ak\",\n  \"am\",\n  \"an\",\n  \"ar\",\n  \"as\",\n  \"av\",\n  \"ay\",\n  \"az\",\n  \"ba\",\n  \"be\",\n  \"bg\",\n  \"bh\",\n  \"bi\",\n  \"bm\",\n  \"bn\",\n  \"bo\",\n  \"br\",\n  \"bs\",\n  \"ca\",\n  \"ce\",\n  \"ch\",\n  \"co\",\n  \"cr\",\n  \"cs\",\n  \"cu\",\n  \"cv\",\n  \"cy\",\n  \"da\",\n  \"de\",\n  \"dv\",\n  \"dz\",\n  \"ee\",\n  \"el\",\n  \"en\",\n  \"eo\",\n  \"es\",\n  \"et\",\n  \"eu\",\n  \"fa\",\n  \"ff\",\n  \"fi\",\n  \"fj\",\n  \"fo\",\n  \"fr\",\n  \"fy\",\n  \"ga\",\n  \"gd\",\n  \"gl\",\n  \"gn\",\n  \"gu\",\n  \"gv\",\n  \"ha\",\n  \"he\",\n  \"hi\",\n  \"ho\",\n  \"hr\",\n  \"ht\",\n  \"hu\",\n  \"hy\",\n  \"hz\",\n  \"ia\",\n  \"id\",\n  \"ie\",\n  \"ig\",\n  \"ii\",\n  \"ik\",\n  \"io\",\n  \"is\",\n  \"it\",\n  \"iu\",\n  \"ja\",\n  \"jv\",\n  \"ka\",\n  \"kg\",\n  \"ki\",\n  \"kj\",\n  \"kk\",\n  \"kl\",\n  \"km\",\n  \"kn\",\n  \"ko\",\n  \"kr\",\n  \"ks\",\n  \"ku\",\n  \"kv\",\n  \"kw\",\n  \"ky\",\n  \"la\",\n  \"lb\",\n  \"lg\",\n  \"li\",\n  \"ln\",\n  \"lo\",\n  \"lt\",\n  \"lu\",\n  \"lv\",\n  \"mg\",\n  \"mh\",\n  \"mi\",\n  \"mk\",\n  \"ml\",\n  \"mn\",\n  \"mo\",\n  \"mr\",\n  \"ms\",\n  \"mt\",\n  \"my\",\n  \"na\",\n  \"nb\",\n  \"nd\",\n  \"ne\",\n  \"ng\",\n  \"nl\",\n  \"nn\",\n  \"no\",\n  \"nr\",\n  \"nv\",\n  \"ny\",\n  \"oc\",\n  \"oj\",\n  \"om\",\n  \"or\",\n  \"os\",\n  \"pa\",\n  \"pi\",\n  \"pl\",\n  \"ps\",\n  \"pt\",\n  \"qu\",\n  \"rm\",\n  \"rn\",\n  \"ro\",\n  \"ru\",\n  \"rw\",\n  \"sa\",\n  \"sc\",\n  \"sd\",\n  \"se\",\n  \"sg\",\n  \"sh\",\n  \"si\",\n  \"sk\",\n  \"sl\",\n  \"sm\",\n  \"sn\",\n  \"so\",\n  \"sq\",\n  \"sr\",\n  \"ss\",\n  \"st\",\n  \"su\",\n  \"sv\",\n  \"sw\",\n  \"ta\",\n  \"te\",\n  \"tg\",\n  \"th\",\n  \"ti\",\n  \"tk\",\n  \"tl\",\n  \"tn\",\n  \"to\",\n  \"tr\",\n  \"ts\",\n  \"tt\",\n  \"tw\",\n  \"ty\",\n  \"ug\",\n  \"uk\",\n  \"ur\",\n  \"uz\",\n  \"ve\",\n  \"vi\",\n  \"vo\",\n  \"wa\",\n  \"wo\",\n  \"xh\",\n  \"yi\",\n  \"yo\",\n  \"za\",\n  \"zh\",\n  \"zu\",\n  \"aar\",\n  \"abk\",\n  \"ave\",\n  \"afr\",\n  \"aka\",\n  \"amh\",\n  \"arg\",\n  \"ara\",\n  \"asm\",\n  \"ava\",\n  \"aym\",\n  \"aze\",\n  \"bak\",\n  \"bel\",\n  \"bul\",\n  \"bih\",\n  \"bis\",\n  \"bam\",\n  \"ben\",\n  \"tib\",\n  \"bod\",\n  \"bre\",\n  \"bos\",\n  \"cat\",\n  \"che\",\n  \"cha\",\n  \"cos\",\n  \"cre\",\n  \"cze\",\n  \"ces\",\n  \"chu\",\n  \"chv\",\n  \"wel\",\n  \"cym\",\n  \"dan\",\n  \"ger\",\n  \"deu\",\n  \"div\",\n  \"dzo\",\n  \"ewe\",\n  \"gre\",\n  \"ell\",\n  \"eng\",\n  \"epo\",\n  \"spa\",\n  \"est\",\n  \"baq\",\n  \"eus\",\n  \"per\",\n  \"fas\",\n  \"ful\",\n  \"fin\",\n  \"fij\",\n  \"fao\",\n  \"fre\",\n  \"fra\",\n  \"fry\",\n  \"gle\",\n  \"gla\",\n  \"glg\",\n  \"grn\",\n  \"guj\",\n  \"glv\",\n  \"hau\",\n  \"heb\",\n  \"hin\",\n  \"hmo\",\n  \"hrv\",\n  \"hat\",\n  \"hun\",\n  \"arm\",\n  \"hye\",\n  \"her\",\n  \"ina\",\n  \"ind\",\n  \"ile\",\n  \"ibo\",\n  \"iii\",\n  \"ipk\",\n  \"ido\",\n  \"ice\",\n  \"isl\",\n  \"ita\",\n  \"iku\",\n  \"jpn\",\n  \"jav\",\n  \"geo\",\n  \"kat\",\n  \"kon\",\n  \"kik\",\n  \"kua\",\n  \"kaz\",\n  \"kal\",\n  \"khm\",\n  \"kan\",\n  \"kor\",\n  \"kau\",\n  \"kas\",\n  \"kur\",\n  \"kom\",\n  \"cor\",\n  \"kir\",\n  \"lat\",\n  \"ltz\",\n  \"lug\",\n  \"lim\",\n  \"lin\",\n  \"lao\",\n  \"lit\",\n  \"lub\",\n  \"lav\",\n  \"mlg\",\n  \"mah\",\n  \"mao\",\n  \"mri\",\n  \"mac\",\n  \"mkd\",\n  \"mal\",\n  \"mon\",\n  \"mol\",\n  \"mar\",\n  \"may\",\n  \"msa\",\n  \"mlt\",\n  \"bur\",\n  \"mya\",\n  \"nau\",\n  \"nob\",\n  \"nde\",\n  \"nep\",\n  \"ndo\",\n  \"dut\",\n  \"nld\",\n  \"nno\",\n  \"nor\",\n  \"nbl\",\n  \"nav\",\n  \"nya\",\n  \"oci\",\n  \"oji\",\n  \"orm\",\n  \"ori\",\n  \"oss\",\n  \"pan\",\n  \"pli\",\n  \"pol\",\n  \"pus\",\n  \"por\",\n  \"que\",\n  \"roh\",\n  \"run\",\n  \"rum\",\n  \"ron\",\n  \"rus\",\n  \"kin\",\n  \"san\",\n  \"srd\",\n  \"snd\",\n  \"sme\",\n  \"sag\",\n  \"slo\",\n  \"sin\",\n  \"slk\",\n  \"slv\",\n  \"smo\",\n  \"sna\",\n  \"som\",\n  \"alb\",\n  \"sqi\",\n  \"srp\",\n  \"ssw\",\n  \"sot\",\n  \"sun\",\n  \"swe\",\n  \"swa\",\n  \"tam\",\n  \"tel\",\n  \"tgk\",\n  \"tha\",\n  \"tir\",\n  \"tuk\",\n  \"tgl\",\n  \"tsn\",\n  \"ton\",\n  \"tur\",\n  \"tso\",\n  \"tat\",\n  \"twi\",\n  \"tah\",\n  \"uig\",\n  \"ukr\",\n  \"urd\",\n  \"uzb\",\n  \"ven\",\n  \"vie\",\n  \"vol\",\n  \"wln\",\n  \"wol\",\n  \"xho\",\n  \"yid\",\n  \"yor\",\n  \"zha\",\n  \"chi\",\n  \"zho\",\n  \"zul\",\n];\nexport default ValidLanguages;\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { scorm2004_regex } from \"../../../constants/regex\";\nimport { check2004ValidFormat } from \"../validation\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\nimport { CompletionStatus, SuccessStatus } from \"../../../constants/enums\";\n\n/**\n * Class representing a single activity in the SCORM 2004 activity tree\n */\nexport class Activity extends BaseCMI {\n  private _id: string = \"\";\n  private _title: string = \"\";\n  private _children: Activity[] = [];\n  private _parent: Activity | null = null;\n  private _isVisible: boolean = true;\n  private _isActive: boolean = false;\n  private _isSuspended: boolean = false;\n  private _isCompleted: boolean = false;\n  private _completionStatus: CompletionStatus = CompletionStatus.UNKNOWN;\n  private _successStatus: SuccessStatus = SuccessStatus.UNKNOWN;\n  private _attemptCount: number = 0;\n  private _attemptCompletionAmount: number = 0;\n  private _attemptAbsoluteDuration: string = \"PT0H0M0S\";\n  private _attemptExperiencedDuration: string = \"PT0H0M0S\";\n  private _activityAbsoluteDuration: string = \"PT0H0M0S\";\n  private _activityExperiencedDuration: string = \"PT0H0M0S\";\n  private _objectiveSatisfiedStatus: boolean = false;\n  private _objectiveMeasureStatus: boolean = false;\n  private _objectiveNormalizedMeasure: number = 0;\n\n  /**\n   * Constructor for Activity\n   * @param {string} id - The unique identifier for this activity\n   * @param {string} title - The title of this activity\n   */\n  constructor(id: string = \"\", title: string = \"\") {\n    super(\"activity\");\n    this._id = id;\n    this._title = title;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    // Initialize children\n    for (const child of this._children) {\n      child.initialize();\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._isActive = false;\n    this._isSuspended = false;\n    this._isCompleted = false;\n    this._completionStatus = CompletionStatus.UNKNOWN;\n    this._successStatus = SuccessStatus.UNKNOWN;\n    this._attemptCount = 0;\n    this._attemptCompletionAmount = 0;\n    this._attemptAbsoluteDuration = \"PT0H0M0S\";\n    this._attemptExperiencedDuration = \"PT0H0M0S\";\n    this._activityAbsoluteDuration = \"PT0H0M0S\";\n    this._activityExperiencedDuration = \"PT0H0M0S\";\n    this._objectiveSatisfiedStatus = false;\n    this._objectiveMeasureStatus = false;\n    this._objectiveNormalizedMeasure = 0;\n\n    // Reset children\n    for (const child of this._children) {\n      child.reset();\n    }\n  }\n\n  /**\n   * Getter for id\n   * @return {string}\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * Setter for id\n   * @param {string} id\n   */\n  set id(id: string) {\n    if (check2004ValidFormat(this._cmi_element + \".id\", id, scorm2004_regex.CMILongIdentifier)) {\n      this._id = id;\n    }\n  }\n\n  /**\n   * Getter for title\n   * @return {string}\n   */\n  get title(): string {\n    return this._title;\n  }\n\n  /**\n   * Setter for title\n   * @param {string} title\n   */\n  set title(title: string) {\n    if (\n      check2004ValidFormat(this._cmi_element + \".title\", title, scorm2004_regex.CMILangString250)\n    ) {\n      this._title = title;\n    }\n  }\n\n  /**\n   * Getter for children\n   * @return {Activity[]}\n   */\n  get children(): Activity[] {\n    return this._children;\n  }\n\n  /**\n   * Add a child activity to this activity\n   * @param {Activity} child - The child activity to add\n   */\n  addChild(child: Activity): void {\n    if (!(child instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".children\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    child._parent = this;\n    this._children.push(child);\n  }\n\n  /**\n   * Remove a child activity from this activity\n   * @param {Activity} child - The child activity to remove\n   * @return {boolean} - True if the child was removed, false otherwise\n   */\n  removeChild(child: Activity): boolean {\n    const index = this._children.indexOf(child);\n    if (index !== -1) {\n      this._children.splice(index, 1);\n      child._parent = null;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Getter for parent\n   * @return {Activity | null}\n   */\n  get parent(): Activity | null {\n    return this._parent;\n  }\n\n  /**\n   * Getter for isVisible\n   * @return {boolean}\n   */\n  get isVisible(): boolean {\n    return this._isVisible;\n  }\n\n  /**\n   * Setter for isVisible\n   * @param {boolean} isVisible\n   */\n  set isVisible(isVisible: boolean) {\n    this._isVisible = isVisible;\n  }\n\n  /**\n   * Getter for isActive\n   * @return {boolean}\n   */\n  get isActive(): boolean {\n    return this._isActive;\n  }\n\n  /**\n   * Setter for isActive\n   * @param {boolean} isActive\n   */\n  set isActive(isActive: boolean) {\n    this._isActive = isActive;\n  }\n\n  /**\n   * Getter for isSuspended\n   * @return {boolean}\n   */\n  get isSuspended(): boolean {\n    return this._isSuspended;\n  }\n\n  /**\n   * Setter for isSuspended\n   * @param {boolean} isSuspended\n   */\n  set isSuspended(isSuspended: boolean) {\n    this._isSuspended = isSuspended;\n  }\n\n  /**\n   * Getter for isCompleted\n   * @return {boolean}\n   */\n  get isCompleted(): boolean {\n    return this._isCompleted;\n  }\n\n  /**\n   * Setter for isCompleted\n   * @param {boolean} isCompleted\n   */\n  set isCompleted(isCompleted: boolean) {\n    this._isCompleted = isCompleted;\n  }\n\n  /**\n   * Getter for completionStatus\n   * @return {CompletionStatus}\n   */\n  get completionStatus(): CompletionStatus {\n    return this._completionStatus;\n  }\n\n  /**\n   * Setter for completionStatus\n   * @param {CompletionStatus} completionStatus\n   */\n  set completionStatus(completionStatus: CompletionStatus) {\n    this._completionStatus = completionStatus;\n    this._isCompleted = completionStatus === CompletionStatus.COMPLETED;\n  }\n\n  /**\n   * Getter for successStatus\n   * @return {SuccessStatus}\n   */\n  get successStatus(): SuccessStatus {\n    return this._successStatus;\n  }\n\n  /**\n   * Setter for successStatus\n   * @param {SuccessStatus} successStatus\n   */\n  set successStatus(successStatus: SuccessStatus) {\n    this._successStatus = successStatus;\n  }\n\n  /**\n   * Getter for attemptCount\n   * @return {number}\n   */\n  get attemptCount(): number {\n    return this._attemptCount;\n  }\n\n  /**\n   * Increment the attempt count\n   */\n  incrementAttemptCount(): void {\n    this._attemptCount++;\n  }\n\n  /**\n   * Getter for objectiveMeasureStatus\n   * @return {boolean}\n   */\n  get objectiveMeasureStatus(): boolean {\n    return this._objectiveMeasureStatus;\n  }\n\n  /**\n   * Setter for objectiveMeasureStatus\n   * @param {boolean} objectiveMeasureStatus\n   */\n  set objectiveMeasureStatus(objectiveMeasureStatus: boolean) {\n    this._objectiveMeasureStatus = objectiveMeasureStatus;\n  }\n\n  /**\n   * Getter for objectiveNormalizedMeasure\n   * @return {number}\n   */\n  get objectiveNormalizedMeasure(): number {\n    return this._objectiveNormalizedMeasure;\n  }\n\n  /**\n   * Setter for objectiveNormalizedMeasure\n   * @param {number} objectiveNormalizedMeasure\n   */\n  set objectiveNormalizedMeasure(objectiveNormalizedMeasure: number) {\n    this._objectiveNormalizedMeasure = objectiveNormalizedMeasure;\n  }\n\n  /**\n   * toJSON for Activity\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      id: this._id,\n      title: this._title,\n      isVisible: this._isVisible,\n      isActive: this._isActive,\n      isSuspended: this._isSuspended,\n      isCompleted: this._isCompleted,\n      completionStatus: this._completionStatus,\n      successStatus: this._successStatus,\n      attemptCount: this._attemptCount,\n      attemptCompletionAmount: this._attemptCompletionAmount,\n      attemptAbsoluteDuration: this._attemptAbsoluteDuration,\n      attemptExperiencedDuration: this._attemptExperiencedDuration,\n      activityAbsoluteDuration: this._activityAbsoluteDuration,\n      activityExperiencedDuration: this._activityExperiencedDuration,\n      objectiveSatisfiedStatus: this._objectiveSatisfiedStatus,\n      objectiveMeasureStatus: this._objectiveMeasureStatus,\n      objectiveNormalizedMeasure: this._objectiveNormalizedMeasure,\n      children: this._children.map((child) => child.toJSON()),\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\n\n/**\n * Class representing the SCORM 2004 activity tree\n */\nexport class ActivityTree extends BaseCMI {\n  private _root: Activity | null = null;\n  private _currentActivity: Activity | null = null;\n  private _suspendedActivity: Activity | null = null;\n  private _activities: Map<string, Activity> = new Map();\n\n  /**\n   * Constructor for ActivityTree\n   */\n  constructor() {\n    super(\"activityTree\");\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    if (this._root) {\n      this._root.initialize();\n    }\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._currentActivity = null;\n    this._suspendedActivity = null;\n    if (this._root) {\n      this._root.reset();\n    }\n  }\n\n  /**\n   * Getter for root\n   * @return {Activity | null}\n   */\n  get root(): Activity | null {\n    return this._root;\n  }\n\n  /**\n   * Setter for root\n   * @param {Activity} root\n   */\n  set root(root: Activity | null) {\n    if (root !== null && !(root instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".root\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._root = root;\n    if (root) {\n      this._activities.set(root.id, root);\n      this._addActivitiesToMap(root);\n    }\n  }\n\n  /**\n   * Recursively add activities to the activities map\n   * @param {Activity} activity\n   * @private\n   */\n  private _addActivitiesToMap(activity: Activity): void {\n    for (const child of activity.children) {\n      this._activities.set(child.id, child);\n      this._addActivitiesToMap(child);\n    }\n  }\n\n  /**\n   * Getter for currentActivity\n   * @return {Activity | null}\n   */\n  get currentActivity(): Activity | null {\n    return this._currentActivity;\n  }\n\n  /**\n   * Setter for currentActivity\n   * @param {Activity | null} activity\n   */\n  set currentActivity(activity: Activity | null) {\n    if (activity !== null && !(activity instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".currentActivity\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n\n    // If there's already a current activity, deactivate it\n    if (this._currentActivity) {\n      this._currentActivity.isActive = false;\n    }\n\n    // Set the new current activity and activate it\n    this._currentActivity = activity;\n    if (activity) {\n      activity.isActive = true;\n    }\n  }\n\n  /**\n   * Getter for suspendedActivity\n   * @return {Activity | null}\n   */\n  get suspendedActivity(): Activity | null {\n    return this._suspendedActivity;\n  }\n\n  /**\n   * Setter for suspendedActivity\n   * @param {Activity | null} activity\n   */\n  set suspendedActivity(activity: Activity | null) {\n    if (activity !== null && !(activity instanceof Activity)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".suspendedActivity\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n\n    // If there's already a suspended activity, unsuspend it\n    if (this._suspendedActivity) {\n      this._suspendedActivity.isSuspended = false;\n    }\n\n    // Set the new suspended activity and mark it as suspended\n    this._suspendedActivity = activity;\n    if (activity) {\n      activity.isSuspended = true;\n    }\n  }\n\n  /**\n   * Get an activity by ID\n   * @param {string} id - The ID of the activity to get\n   * @return {Activity | undefined} - The activity with the given ID, or undefined if not found\n   */\n  getActivity(id: string): Activity | undefined {\n    return this._activities.get(id);\n  }\n\n  /**\n   * Get all activities in the tree\n   * @return {Activity[]} - An array of all activities in the tree\n   */\n  getAllActivities(): Activity[] {\n    return Array.from(this._activities.values());\n  }\n\n  /**\n   * Get the parent of an activity\n   * @param {Activity} activity - The activity to get the parent of\n   * @return {Activity | null} - The parent of the activity, or null if it has no parent\n   */\n  getParent(activity: Activity): Activity | null {\n    return activity.parent;\n  }\n\n  /**\n   * Get the children of an activity\n   * @param {Activity} activity - The activity to get the children of\n   * @return {Activity[]} - An array of the activity's children\n   */\n  getChildren(activity: Activity): Activity[] {\n    return activity.children;\n  }\n\n  /**\n   * Get the siblings of an activity\n   * @param {Activity} activity - The activity to get the siblings of\n   * @return {Activity[]} - An array of the activity's siblings\n   */\n  getSiblings(activity: Activity): Activity[] {\n    if (!activity.parent) {\n      return [];\n    }\n    return activity.parent.children.filter((child) => child !== activity);\n  }\n\n  /**\n   * Get the next sibling of an activity\n   * @param {Activity} activity - The activity to get the next sibling of\n   * @return {Activity | null} - The next sibling of the activity, or null if it has no next sibling\n   */\n  getNextSibling(activity: Activity): Activity | null {\n    if (!activity.parent) {\n      return null;\n    }\n    const siblings = activity.parent.children;\n    const index = siblings.indexOf(activity);\n    if (index === -1 || index === siblings.length - 1) {\n      return null;\n    }\n    return siblings[index + 1];\n  }\n\n  /**\n   * Get the previous sibling of an activity\n   * @param {Activity} activity - The activity to get the previous sibling of\n   * @return {Activity | null} - The previous sibling of the activity, or null if it has no previous sibling\n   */\n  getPreviousSibling(activity: Activity): Activity | null {\n    if (!activity.parent) {\n      return null;\n    }\n    const siblings = activity.parent.children;\n    const index = siblings.indexOf(activity);\n    if (index <= 0) {\n      return null;\n    }\n    return siblings[index - 1];\n  }\n\n  /**\n   * Get the first child of an activity\n   * @param {Activity} activity - The activity to get the first child of\n   * @return {Activity | null} - The first child of the activity, or null if it has no children\n   */\n  getFirstChild(activity: Activity): Activity | null {\n    if (activity.children.length === 0) {\n      return null;\n    }\n    return activity.children[0];\n  }\n\n  /**\n   * Get the last child of an activity\n   * @param {Activity} activity - The activity to get the last child of\n   * @return {Activity | null} - The last child of the activity, or null if it has no children\n   */\n  getLastChild(activity: Activity): Activity | null {\n    if (activity.children.length === 0) {\n      return null;\n    }\n    return activity.children[activity.children.length - 1];\n  }\n\n  /**\n   * Get the common ancestor of two activities\n   * @param {Activity} activity1 - The first activity\n   * @param {Activity} activity2 - The second activity\n   * @return {Activity | null} - The common ancestor of the two activities, or null if they have no common ancestor\n   */\n  getCommonAncestor(activity1: Activity, activity2: Activity): Activity | null {\n    // Get the path from the root to activity1\n    const path1: Activity[] = [];\n    let current: Activity | null = activity1;\n    while (current) {\n      path1.unshift(current);\n      current = current.parent;\n    }\n\n    // Check if activity2 is in the path from the root to activity1\n    current = activity2;\n    while (current) {\n      if (path1.includes(current)) {\n        return current;\n      }\n      current = current.parent;\n    }\n\n    return null;\n  }\n\n  /**\n   * toJSON for ActivityTree\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      root: this._root,\n      currentActivity: this._currentActivity ? this._currentActivity.id : null,\n      suspendedActivity: this._suspendedActivity ? this._suspendedActivity.id : null,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\n\n/**\n * Class representing SCORM 2004 sequencing controls\n */\nexport class SequencingControls extends BaseCMI {\n  // Sequencing Control Modes\n  private _enabled: boolean = true;\n  private _choiceExit: boolean = true;\n  private _flow: boolean = false;\n  private _forwardOnly: boolean = false;\n  private _useCurrentAttemptObjectiveInfo: boolean = true;\n  private _useCurrentAttemptProgressInfo: boolean = true;\n\n  // Constrain Choice Controls\n  private _preventActivation: boolean = false;\n  private _constrainChoice: boolean = false;\n\n  // Rollup Controls\n  private _rollupObjectiveSatisfied: boolean = true;\n  private _rollupProgressCompletion: boolean = true;\n  private _objectiveMeasureWeight: number = 1.0;\n\n  /**\n   * Constructor for SequencingControls\n   */\n  constructor() {\n    super(\"sequencingControls\");\n  }\n\n  /**\n   * Reset the sequencing controls to their default values\n   */\n  reset() {\n    this._initialized = false;\n    this._enabled = true;\n    this._choiceExit = true;\n    this._flow = false;\n    this._forwardOnly = false;\n    this._useCurrentAttemptObjectiveInfo = true;\n    this._useCurrentAttemptProgressInfo = true;\n    this._preventActivation = false;\n    this._constrainChoice = false;\n    this._rollupObjectiveSatisfied = true;\n    this._rollupProgressCompletion = true;\n    this._objectiveMeasureWeight = 1.0;\n  }\n\n  /**\n   * Getter for enabled\n   * @return {boolean}\n   */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  /**\n   * Setter for enabled\n   * @param {boolean} enabled\n   */\n  set enabled(enabled: boolean) {\n    this._enabled = enabled;\n  }\n\n  /**\n   * Getter for choiceExit\n   * @return {boolean}\n   */\n  get choiceExit(): boolean {\n    return this._choiceExit;\n  }\n\n  /**\n   * Setter for choiceExit\n   * @param {boolean} choiceExit\n   */\n  set choiceExit(choiceExit: boolean) {\n    this._choiceExit = choiceExit;\n  }\n\n  /**\n   * Getter for flow\n   * @return {boolean}\n   */\n  get flow(): boolean {\n    return this._flow;\n  }\n\n  /**\n   * Setter for flow\n   * @param {boolean} flow\n   */\n  set flow(flow: boolean) {\n    this._flow = flow;\n  }\n\n  /**\n   * Getter for forwardOnly\n   * @return {boolean}\n   */\n  get forwardOnly(): boolean {\n    return this._forwardOnly;\n  }\n\n  /**\n   * Setter for forwardOnly\n   * @param {boolean} forwardOnly\n   */\n  set forwardOnly(forwardOnly: boolean) {\n    this._forwardOnly = forwardOnly;\n  }\n\n  /**\n   * Getter for useCurrentAttemptObjectiveInfo\n   * @return {boolean}\n   */\n  get useCurrentAttemptObjectiveInfo(): boolean {\n    return this._useCurrentAttemptObjectiveInfo;\n  }\n\n  /**\n   * Setter for useCurrentAttemptObjectiveInfo\n   * @param {boolean} useCurrentAttemptObjectiveInfo\n   */\n  set useCurrentAttemptObjectiveInfo(useCurrentAttemptObjectiveInfo: boolean) {\n    this._useCurrentAttemptObjectiveInfo = useCurrentAttemptObjectiveInfo;\n  }\n\n  /**\n   * Getter for useCurrentAttemptProgressInfo\n   * @return {boolean}\n   */\n  get useCurrentAttemptProgressInfo(): boolean {\n    return this._useCurrentAttemptProgressInfo;\n  }\n\n  /**\n   * Setter for useCurrentAttemptProgressInfo\n   * @param {boolean} useCurrentAttemptProgressInfo\n   */\n  set useCurrentAttemptProgressInfo(useCurrentAttemptProgressInfo: boolean) {\n    this._useCurrentAttemptProgressInfo = useCurrentAttemptProgressInfo;\n  }\n\n  /**\n   * Getter for preventActivation\n   * @return {boolean}\n   */\n  get preventActivation(): boolean {\n    return this._preventActivation;\n  }\n\n  /**\n   * Setter for preventActivation\n   * @param {boolean} preventActivation\n   */\n  set preventActivation(preventActivation: boolean) {\n    this._preventActivation = preventActivation;\n  }\n\n  /**\n   * Getter for constrainChoice\n   * @return {boolean}\n   */\n  get constrainChoice(): boolean {\n    return this._constrainChoice;\n  }\n\n  /**\n   * Setter for constrainChoice\n   * @param {boolean} constrainChoice\n   */\n  set constrainChoice(constrainChoice: boolean) {\n    this._constrainChoice = constrainChoice;\n  }\n\n  /**\n   * Getter for rollupObjectiveSatisfied\n   * @return {boolean}\n   */\n  get rollupObjectiveSatisfied(): boolean {\n    return this._rollupObjectiveSatisfied;\n  }\n\n  /**\n   * Setter for rollupObjectiveSatisfied\n   * @param {boolean} rollupObjectiveSatisfied\n   */\n  set rollupObjectiveSatisfied(rollupObjectiveSatisfied: boolean) {\n    this._rollupObjectiveSatisfied = rollupObjectiveSatisfied;\n  }\n\n  /**\n   * Getter for rollupProgressCompletion\n   * @return {boolean}\n   */\n  get rollupProgressCompletion(): boolean {\n    return this._rollupProgressCompletion;\n  }\n\n  /**\n   * Setter for rollupProgressCompletion\n   * @param {boolean} rollupProgressCompletion\n   */\n  set rollupProgressCompletion(rollupProgressCompletion: boolean) {\n    this._rollupProgressCompletion = rollupProgressCompletion;\n  }\n\n  /**\n   * Getter for objectiveMeasureWeight\n   * @return {number}\n   */\n  get objectiveMeasureWeight(): number {\n    return this._objectiveMeasureWeight;\n  }\n\n  /**\n   * Setter for objectiveMeasureWeight\n   * @param {number} objectiveMeasureWeight\n   */\n  set objectiveMeasureWeight(objectiveMeasureWeight: number) {\n    if (objectiveMeasureWeight >= 0 && objectiveMeasureWeight <= 1) {\n      this._objectiveMeasureWeight = objectiveMeasureWeight;\n    }\n  }\n\n  /**\n   * Check if choice navigation is allowed\n   * @return {boolean} - True if choice navigation is allowed, false otherwise\n   */\n  isChoiceNavigationAllowed(): boolean {\n    return this._enabled && !this._constrainChoice;\n  }\n\n  /**\n   * Check if flow navigation is allowed\n   * @return {boolean} - True if flow navigation is allowed, false otherwise\n   */\n  isFlowNavigationAllowed(): boolean {\n    return this._enabled && this._flow;\n  }\n\n  /**\n   * Check if forward navigation is allowed\n   * @return {boolean} - True if forward navigation is allowed, false otherwise\n   */\n  isForwardNavigationAllowed(): boolean {\n    return this._enabled && (!this._forwardOnly || this._flow);\n  }\n\n  /**\n   * Check if backward navigation is allowed\n   * @return {boolean} - True if backward navigation is allowed, false otherwise\n   */\n  isBackwardNavigationAllowed(): boolean {\n    return this._enabled && !this._forwardOnly;\n  }\n\n  /**\n   * toJSON for SequencingControls\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      enabled: this._enabled,\n      choiceExit: this._choiceExit,\n      flow: this._flow,\n      forwardOnly: this._forwardOnly,\n      useCurrentAttemptObjectiveInfo: this._useCurrentAttemptObjectiveInfo,\n      useCurrentAttemptProgressInfo: this._useCurrentAttemptProgressInfo,\n      preventActivation: this._preventActivation,\n      constrainChoice: this._constrainChoice,\n      rollupObjectiveSatisfied: this._rollupObjectiveSatisfied,\n      rollupProgressCompletion: this._rollupProgressCompletion,\n      objectiveMeasureWeight: this._objectiveMeasureWeight,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import { BaseCMI } from \"../../common/base_cmi\";\nimport { Activity } from \"./activity\";\nimport { ActivityTree } from \"./activity_tree\";\nimport { RuleActionType, SequencingRules } from \"./sequencing_rules\";\nimport { SequencingControls } from \"./sequencing_controls\";\nimport { RollupRules } from \"./rollup_rules\";\nimport { ADLNav } from \"../adl\";\nimport { Scorm2004ValidationError } from \"../../../exceptions/scorm2004_exceptions\";\nimport { scorm2004_errors } from \"../../../constants/error_codes\";\n\n/**\n * Class representing SCORM 2004 sequencing\n */\nexport class Sequencing extends BaseCMI {\n  private _activityTree: ActivityTree;\n  private _sequencingRules: SequencingRules;\n  private _sequencingControls: SequencingControls;\n  private _rollupRules: RollupRules;\n  private _adlNav: ADLNav | null = null;\n\n  /**\n   * Constructor for Sequencing\n   */\n  constructor() {\n    super(\"sequencing\");\n    this._activityTree = new ActivityTree();\n    this._sequencingRules = new SequencingRules();\n    this._sequencingControls = new SequencingControls();\n    this._rollupRules = new RollupRules();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  override initialize() {\n    super.initialize();\n    this._activityTree.initialize();\n    this._sequencingRules.initialize();\n    this._sequencingControls.initialize();\n    this._rollupRules.initialize();\n  }\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset() {\n    this._initialized = false;\n    this._activityTree.reset();\n    this._sequencingRules.reset();\n    this._sequencingControls.reset();\n    this._rollupRules.reset();\n  }\n\n  /**\n   * Getter for activityTree\n   * @return {ActivityTree}\n   */\n  get activityTree(): ActivityTree {\n    return this._activityTree;\n  }\n\n  /**\n   * Setter for activityTree\n   * @param {ActivityTree} activityTree\n   */\n  set activityTree(activityTree: ActivityTree) {\n    if (!(activityTree instanceof ActivityTree)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".activityTree\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._activityTree = activityTree;\n  }\n\n  /**\n   * Getter for sequencingRules\n   * @return {SequencingRules}\n   */\n  get sequencingRules(): SequencingRules {\n    return this._sequencingRules;\n  }\n\n  /**\n   * Setter for sequencingRules\n   * @param {SequencingRules} sequencingRules\n   */\n  set sequencingRules(sequencingRules: SequencingRules) {\n    if (!(sequencingRules instanceof SequencingRules)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".sequencingRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._sequencingRules = sequencingRules;\n  }\n\n  /**\n   * Getter for sequencingControls\n   * @return {SequencingControls}\n   */\n  get sequencingControls(): SequencingControls {\n    return this._sequencingControls;\n  }\n\n  /**\n   * Setter for sequencingControls\n   * @param {SequencingControls} sequencingControls\n   */\n  set sequencingControls(sequencingControls: SequencingControls) {\n    if (!(sequencingControls instanceof SequencingControls)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".sequencingControls\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._sequencingControls = sequencingControls;\n  }\n\n  /**\n   * Getter for rollupRules\n   * @return {RollupRules}\n   */\n  get rollupRules(): RollupRules {\n    return this._rollupRules;\n  }\n\n  /**\n   * Setter for rollupRules\n   * @param {RollupRules} rollupRules\n   */\n  set rollupRules(rollupRules: RollupRules) {\n    if (!(rollupRules instanceof RollupRules)) {\n      throw new Scorm2004ValidationError(\n        this._cmi_element + \".rollupRules\",\n        scorm2004_errors.TYPE_MISMATCH,\n      );\n    }\n    this._rollupRules = rollupRules;\n  }\n\n  /**\n   * Getter for adlNav\n   * @return {ADLNav | null}\n   */\n  get adlNav(): ADLNav | null {\n    return this._adlNav;\n  }\n\n  /**\n   * Setter for adlNav\n   * @param {ADLNav | null} adlNav\n   */\n  set adlNav(adlNav: ADLNav | null) {\n    this._adlNav = adlNav;\n  }\n\n  /**\n   * Process navigation request\n   * @param {string} request - The navigation request\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processNavigationRequest(request: string): boolean {\n    if (!this._adlNav) {\n      return false;\n    }\n\n    // Set the navigation request\n    this._adlNav.request = request;\n\n    // Get the current activity\n    const currentActivity = this._activityTree.currentActivity;\n    if (!currentActivity) {\n      return false;\n    }\n\n    // Evaluate pre-condition rules\n    const preConditionAction = this._sequencingRules.evaluatePreConditionRules(currentActivity);\n    if (preConditionAction) {\n      // Handle pre-condition action\n      switch (preConditionAction) {\n        case RuleActionType.SKIP:\n          // Skip this activity\n          return false;\n        case RuleActionType.DISABLED:\n          // Disable this activity\n          return false;\n        case RuleActionType.HIDE_FROM_CHOICE:\n          // Hide this activity from choice\n          return false;\n        case RuleActionType.STOP_FORWARD_TRAVERSAL:\n          // Stop forward traversal\n          return false;\n        default:\n          break;\n      }\n    }\n\n    // Process the navigation request based on the request type\n    switch (request) {\n      case \"continue\":\n        return this.processContinueRequest(currentActivity);\n      case \"previous\":\n        return this.processPreviousRequest(currentActivity);\n      case \"choice\":\n        // Choice navigation would require additional parameters\n        return false;\n      case \"exit\":\n        return this.processExitRequest(currentActivity);\n      case \"exitAll\":\n        return this.processExitAllRequest();\n      case \"abandon\":\n        return this.processAbandonRequest(currentActivity);\n      case \"abandonAll\":\n        return this.processAbandonAllRequest();\n      case \"suspendAll\":\n        return this.processSuspendAllRequest(currentActivity);\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Process continue request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processContinueRequest(currentActivity: Activity): boolean {\n    // Check if continue is allowed\n    if (!this._sequencingControls.isForwardNavigationAllowed()) {\n      return false;\n    }\n\n    // Get the next activity\n    const nextActivity = this._activityTree.getNextSibling(currentActivity);\n    if (!nextActivity) {\n      return false;\n    }\n\n    // Evaluate exit condition rules\n    const exitConditionAction = this._sequencingRules.evaluateExitConditionRules(currentActivity);\n    if (exitConditionAction) {\n      // Handle exit condition action\n      switch (exitConditionAction) {\n        case RuleActionType.EXIT_PARENT: {\n          // Exit to parent\n          const parent = currentActivity.parent;\n          if (parent) {\n            this._activityTree.currentActivity = parent;\n            return true;\n          }\n          return false;\n        }\n        case RuleActionType.EXIT_ALL:\n          // Exit all\n          this._activityTree.currentActivity = null;\n          return true;\n        default:\n          break;\n      }\n    }\n\n    // Set the next activity as current\n    this._activityTree.currentActivity = nextActivity;\n\n    // Evaluate post-condition rules\n    const postConditionAction = this._sequencingRules.evaluatePostConditionRules(nextActivity);\n    if (postConditionAction) {\n      // Handle post-condition action\n      switch (postConditionAction) {\n        case RuleActionType.RETRY:\n          // Retry this activity\n          nextActivity.incrementAttemptCount();\n          return true;\n        case RuleActionType.RETRY_ALL:\n          // Retry all activities\n          this._activityTree.getAllActivities().forEach((activity) => {\n            activity.incrementAttemptCount();\n          });\n          return true;\n        case RuleActionType.CONTINUE:\n          // Continue to next activity\n          return this.processContinueRequest(nextActivity);\n        case RuleActionType.PREVIOUS:\n          // Go to previous activity\n          return this.processPreviousRequest(nextActivity);\n        case RuleActionType.EXIT:\n          // Exit this activity\n          this._activityTree.currentActivity = currentActivity;\n          return true;\n        default:\n          break;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Process previous request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processPreviousRequest(currentActivity: Activity): boolean {\n    // Check if backward navigation is allowed\n    if (!this._sequencingControls.isBackwardNavigationAllowed()) {\n      return false;\n    }\n\n    // Get the previous activity\n    const previousActivity = this._activityTree.getPreviousSibling(currentActivity);\n    if (!previousActivity) {\n      return false;\n    }\n\n    // Evaluate exit condition rules\n    const exitConditionAction = this._sequencingRules.evaluateExitConditionRules(currentActivity);\n    if (exitConditionAction) {\n      // Handle exit condition action\n      switch (exitConditionAction) {\n        case RuleActionType.EXIT_PARENT: {\n          // Exit to parent\n          const parent = currentActivity.parent;\n          if (parent) {\n            this._activityTree.currentActivity = parent;\n            return true;\n          }\n          return false;\n        }\n        case RuleActionType.EXIT_ALL:\n          // Exit all\n          this._activityTree.currentActivity = null;\n          return true;\n        default:\n          break;\n      }\n    }\n\n    // Set the previous activity as current\n    this._activityTree.currentActivity = previousActivity;\n\n    // Evaluate post-condition rules\n    const postConditionAction = this._sequencingRules.evaluatePostConditionRules(previousActivity);\n    if (postConditionAction) {\n      // Handle post-condition action\n      switch (postConditionAction) {\n        case RuleActionType.RETRY:\n          // Retry this activity\n          previousActivity.incrementAttemptCount();\n          return true;\n        case RuleActionType.RETRY_ALL:\n          // Retry all activities\n          this._activityTree.getAllActivities().forEach((activity) => {\n            activity.incrementAttemptCount();\n          });\n          return true;\n        case RuleActionType.CONTINUE:\n          // Continue to next activity\n          return this.processContinueRequest(previousActivity);\n        case RuleActionType.PREVIOUS:\n          // Go to previous activity\n          return this.processPreviousRequest(previousActivity);\n        case RuleActionType.EXIT:\n          // Exit this activity\n          this._activityTree.currentActivity = currentActivity;\n          return true;\n        default:\n          break;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Process exit request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processExitRequest(currentActivity: Activity): boolean {\n    // Check if exit is allowed\n    if (!this._sequencingControls.choiceExit) {\n      return false;\n    }\n\n    // Get the parent activity\n    const parent = currentActivity.parent;\n    if (!parent) {\n      return false;\n    }\n\n    // Set the parent activity as current\n    this._activityTree.currentActivity = parent;\n\n    return true;\n  }\n\n  /**\n   * Process exit all request\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processExitAllRequest(): boolean {\n    // Check if exit is allowed\n    if (!this._sequencingControls.choiceExit) {\n      return false;\n    }\n\n    // Set no activity as current\n    this._activityTree.currentActivity = null;\n\n    return true;\n  }\n\n  /**\n   * Process abandon request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processAbandonRequest(currentActivity: Activity): boolean {\n    // Get the parent activity\n    const parent = currentActivity.parent;\n    if (!parent) {\n      return false;\n    }\n\n    // Set the parent activity as current without processing exit rules\n    this._activityTree.currentActivity = parent;\n\n    return true;\n  }\n\n  /**\n   * Process abandon all request\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processAbandonAllRequest(): boolean {\n    // Set no activity as current without processing exit rules\n    this._activityTree.currentActivity = null;\n\n    return true;\n  }\n\n  /**\n   * Process suspend all request\n   * @param {Activity} currentActivity - The current activity\n   * @return {boolean} - True if the request is valid, false otherwise\n   */\n  processSuspendAllRequest(currentActivity: Activity): boolean {\n    // Set the current activity as suspended\n    this._activityTree.suspendedActivity = currentActivity;\n    this._activityTree.currentActivity = null;\n\n    return true;\n  }\n\n  /**\n   * Process rollup for the entire activity tree\n   */\n  processRollup(): void {\n    // Get the root activity\n    const root = this._activityTree.root;\n    if (!root) {\n      return;\n    }\n\n    // Process rollup from the bottom up\n    this._processRollupRecursive(root);\n  }\n\n  /**\n   * Process rollup recursively\n   * @param {Activity} activity - The activity to process rollup for\n   * @private\n   */\n  private _processRollupRecursive(activity: Activity): void {\n    // Process rollup for children first\n    for (const child of activity.children) {\n      this._processRollupRecursive(child);\n    }\n\n    // Process rollup for this activity\n    this._rollupRules.processRollup(activity);\n  }\n\n  /**\n   * toJSON for Sequencing\n   * @return {object}\n   */\n  toJSON(): object {\n    this.jsonString = true;\n    const result = {\n      activityTree: this._activityTree,\n      sequencingRules: this._sequencingRules,\n      sequencingControls: this._sequencingControls,\n      rollupRules: this._rollupRules,\n    };\n    this.jsonString = false;\n    return result;\n  }\n}\n","import BaseAPI from \"./BaseAPI\";\nimport { CMI } from \"./cmi/scorm2004/cmi\";\nimport * as Utilities from \"./utilities\";\nimport { StringKeyMap, stringMatches } from \"./utilities\";\nimport { global_constants, scorm2004_constants } from \"./constants/api_constants\";\nimport { scorm2004_errors } from \"./constants/error_codes\";\nimport { CMIObjectivesObject } from \"./cmi/scorm2004/objectives\";\nimport { ADL, ADLDataObject } from \"./cmi/scorm2004/adl\";\nimport { CommitObject, ResultObject, ScoreObject, Settings } from \"./types/api_types\";\nimport {\n  ActivitySettings,\n  RollupRuleSettings,\n  RollupRulesSettings,\n  SequencingControlsSettings,\n  SequencingRuleSettings,\n  SequencingRulesSettings,\n  SequencingSettings\n} from \"./types/sequencing_types\";\nimport { RuleCondition, SequencingRule } from \"./cmi/scorm2004/sequencing/sequencing_rules\";\nimport { RollupCondition, RollupRule } from \"./cmi/scorm2004/sequencing/rollup_rules\";\nimport { scorm2004_regex } from \"./constants/regex\"; // Import functions from extracted modules\nimport { BaseCMI } from \"./cmi/common/base_cmi\";\nimport {\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject\n} from \"./cmi/scorm2004/interactions\";\nimport { CMIArray } from \"./cmi/common/array\";\nimport { CorrectResponses, ResponseType } from \"./constants/response_constants\";\nimport { CMICommentsObject } from \"./cmi/scorm2004/comments\";\nimport ValidLanguages from \"./constants/language_constants\";\nimport { CompletionStatus, SuccessStatus } from \"./constants/enums\";\nimport { Sequencing } from \"./cmi/scorm2004/sequencing/sequencing\";\nimport { Activity } from \"./cmi/scorm2004/sequencing/activity\";\n\n/**\n * API class for SCORM 2004\n */\nclass Scorm2004API extends BaseAPI {\n  private _version: string = \"1.0\";\n  private _globalObjectives: CMIObjectivesObject[] = [];\n  private _sequencing: Sequencing;\n  private _extractedScoItemIds: string[] = [];\n\n  /**\n   * Constructor for SCORM 2004 API\n   * @param {Settings} settings\n   */\n  constructor(settings?: Settings) {\n    if (settings) {\n      if (settings.mastery_override === undefined) {\n        settings.mastery_override = false;\n      }\n    }\n\n    super(scorm2004_errors, settings);\n\n    this.cmi = new CMI();\n    this.adl = new ADL();\n    this._sequencing = new Sequencing();\n\n    // Connect the sequencing object to the ADL's sequencing property\n    // The Sequencing object is used for both configuration and runtime navigation processing\n    // It needs to be attached to the ADL object for runtime navigation requests (adl.nav.request)\n    this.adl.sequencing = this._sequencing;\n\n    // Configure sequencing if settings are provided\n    if (settings?.sequencing) {\n      this.configureSequencing(settings.sequencing);\n    }\n\n    // Rename functions to match 2004 Spec and expose to modules\n    this.Initialize = this.lmsInitialize;\n    this.Terminate = this.lmsFinish;\n    this.GetValue = this.lmsGetValue;\n    this.SetValue = this.lmsSetValue;\n    this.Commit = this.lmsCommit;\n    this.GetLastError = this.lmsGetLastError;\n    this.GetErrorString = this.lmsGetErrorString;\n    this.GetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  public cmi: CMI;\n  public adl: ADL;\n\n  public Initialize: () => string;\n  public Terminate: () => string;\n  public GetValue: (CMIElement: string) => string;\n  public SetValue: (CMIElement: string, value: any) => string;\n  public Commit: () => string;\n  public GetLastError: () => string;\n  public GetErrorString: (CMIErrorCode: string | number) => string;\n  public GetDiagnostic: (CMIErrorCode: string | number) => string;\n\n  /**\n   * Called when the API needs to be reset\n   */\n  reset(settings?: Settings) {\n    this.commonReset(settings);\n\n    this.cmi?.reset();\n    this.adl?.reset();\n    this._sequencing?.reset();\n  }\n\n  /**\n   * Getter for _version\n   * @return {string}\n   */\n  get version(): string {\n    return this._version;\n  }\n\n  /**\n   * Getter for _globalObjectives\n   */\n  get globalObjectives(): CMIObjectivesObject[] {\n    return this._globalObjectives;\n  }\n\n  /**\n   * Initialize function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize(): string {\n    this.cmi.initialize();\n    return this.initialize(\n      \"Initialize\",\n      \"LMS was already initialized!\",\n      \"LMS is already finished!\",\n    );\n  }\n\n  /**\n   * Terminate function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish(): string {\n    (async () => {\n      await this.internalFinish();\n    })();\n    return global_constants.SCORM_TRUE;\n  }\n\n  async internalFinish(): Promise<string> {\n    const result = await this.terminate(\"Terminate\", true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      if (this.adl.nav.request !== \"_none_\") {\n        const navActions: { [key: string]: string } = {\n          continue: \"SequenceNext\",\n          previous: \"SequencePrevious\",\n          choice: \"SequenceChoice\",\n          jump: \"SequenceJump\",\n          exit: \"SequenceExit\",\n          exitAll: \"SequenceExitAll\",\n          abandon: \"SequenceAbandon\",\n          abandonAll: \"SequenceAbandonAll\",\n        };\n\n        let request = this.adl.nav.request;\n        const choiceJumpRegex = new RegExp(scorm2004_regex.NAVEvent);\n        const matches = request.match(choiceJumpRegex);\n        let target = \"\";\n        if (matches) {\n          if (matches.groups?.choice_target) {\n            target = matches.groups?.choice_target;\n            request = \"choice\";\n          } else if (matches.groups?.jump_target) {\n            target = matches.groups?.jump_target;\n            request = \"jump\";\n          }\n        }\n        const action = navActions[request];\n        if (action) {\n          this.processListeners(action, \"adl.nav.request\", target);\n        }\n      } else if (this.settings.autoProgress) {\n        this.processListeners(\"SequenceNext\", undefined, \"next\");\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * GetValue function from SCORM 2004 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement: string): string {\n    const adlNavRequestRegex =\n      \"^adl\\\\.nav\\\\.request_valid\\\\.(choice|jump)\\\\.{target=\\\\S{0,}([a-zA-Z0-9-_]+)}$\";\n    if (stringMatches(CMIElement, adlNavRequestRegex)) {\n      const matches = CMIElement.match(adlNavRequestRegex);\n      if (matches) {\n        const request = matches[1];\n        const target = matches[2].replace(/{target=/g, \"\").replace(/}/g, \"\");\n        if (request === \"choice\" || request === \"jump\") {\n          if (this.settings.scoItemIdValidator) {\n            return String(this.settings.scoItemIdValidator(target));\n          }\n          // If we have extracted IDs from sequencing, use those exclusively\n          if (this._extractedScoItemIds.length > 0) {\n            return String(this._extractedScoItemIds.includes(target));\n          }\n          // Otherwise use the scoItemIds from settings\n          return String(this.settings?.scoItemIds?.includes(target));\n        }\n      }\n    }\n    return this.getValue(\"GetValue\", true, CMIElement);\n  }\n\n  /**\n   * SetValue function from SCORM 2004 Spec\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement: string, value: any): string {\n    // Proceed with regular setting for non-objective elements or fallback behavior\n    return this.setValue(\"SetValue\", \"Commit\", true, CMIElement, value);\n  }\n\n  /**\n   * Commit function from SCORM 2004 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit(): string {\n    if (this.settings.asyncCommit) {\n      this.scheduleCommit(500, \"Commit\");\n    } else {\n      (async () => {\n        await this.commit(\"Commit\", false);\n      })();\n    }\n    return global_constants.SCORM_TRUE;\n  }\n\n  /**\n   * GetLastError function from SCORM 2004 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError(): string {\n    return this.getLastError(\"GetLastError\");\n  }\n\n  /**\n   * GetErrorString function from SCORM 2004 Spec\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode: string | number): string {\n    return this.getErrorString(\"GetErrorString\", CMIErrorCode);\n  }\n\n  /**\n   * GetDiagnostic function from SCORM 2004 Spec\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode: string | number): string {\n    return this.getDiagnostic(\"GetDiagnostic\", CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object - delegates to CMIValueHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  override setCMIValue(CMIElement: string, value: any): string {\n    // Check if we're updating a global or local objective\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      const parts = CMIElement.split(\".\");\n      const index = Number(parts[2]);\n      const element_base = `cmi.objectives.${index}`;\n\n      let objective_id;\n      const setting_id = stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\\\\.id\");\n\n      if (setting_id) {\n        // If we're setting the objective ID, capture it directly\n        objective_id = value;\n      } else {\n        // Find existing objective ID if available\n        const objective = this.cmi.objectives.findObjectiveByIndex(index);\n        objective_id = objective ? objective.id : undefined;\n      }\n\n      // Check if the objective ID matches a global objective\n      const is_global = objective_id && this.settings.globalObjectiveIds?.includes(objective_id);\n\n      if (is_global) {\n        // Locate or create an entry in _globalObjectives for the global objective\n        let global_index = this._globalObjectives.findIndex((obj) => obj.id === objective_id);\n\n        if (global_index === -1) {\n          global_index = this._globalObjectives.length;\n          const newGlobalObjective = new CMIObjectivesObject();\n          newGlobalObjective.id = objective_id;\n          this._globalObjectives.push(newGlobalObjective);\n        }\n\n        // Update the global objective\n        const global_element = CMIElement.replace(\n          element_base,\n          `_globalObjectives.${global_index}`,\n        );\n        this._commonSetCMIValue(\"SetGlobalObjectiveValue\", true, global_element, value);\n      }\n    }\n    return this._commonSetCMIValue(\"SetValue\", true, CMIElement, value);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array - delegates to CMIElementHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {BaseCMI|null}\n   */\n  getChildElement(CMIElement: string, value: any, foundFirstIndex: boolean): BaseCMI | null {\n    if (stringMatches(CMIElement, \"cmi\\\\.objectives\\\\.\\\\d+\")) {\n      return new CMIObjectivesObject();\n    }\n\n    if (foundFirstIndex) {\n      if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+\")) {\n        return this.createCorrectResponsesObject(CMIElement, value);\n      } else if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+\")) {\n        return new CMIInteractionsObjectivesObject();\n      }\n    } else if (stringMatches(CMIElement, \"cmi\\\\.interactions\\\\.\\\\d+\")) {\n      return new CMIInteractionsObject();\n    }\n\n    if (stringMatches(CMIElement, \"cmi\\\\.comments_from_learner\\\\.\\\\d+\")) {\n      return new CMICommentsObject();\n    } else if (stringMatches(CMIElement, \"cmi\\\\.comments_from_lms\\\\.\\\\d+\")) {\n      return new CMICommentsObject(true);\n    }\n\n    if (stringMatches(CMIElement, \"adl\\\\.data\\\\.\\\\d+\")) {\n      return new ADLDataObject();\n    }\n\n    return null;\n  }\n\n  /**\n   * Creates a correct responses object for an interaction - delegates to CMIElementHandlerModule\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {BaseCMI|null}\n   */\n  private createCorrectResponsesObject(CMIElement: string, value: any): BaseCMI | null {\n    const parts = CMIElement.split(\".\");\n    const index = Number(parts[2]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    if (this.isInitialized()) {\n      if (typeof interaction === \"undefined\" || !interaction.type) {\n        this.throwSCORMError(CMIElement, scorm2004_errors.DEPENDENCY_NOT_ESTABLISHED, CMIElement);\n        return null;\n      } else {\n        this.checkDuplicateChoiceResponse(CMIElement, interaction, value);\n        const response_type = CorrectResponses[interaction.type];\n        if (response_type) {\n          this.checkValidResponseType(CMIElement, response_type, value, interaction.type);\n        } else {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.GENERAL_SET_FAILURE,\n            `Incorrect Response Type: ${interaction.type}`,\n          );\n          return null;\n        }\n      }\n    }\n\n    if (this.lastErrorCode === \"0\") {\n      return new CMIInteractionsCorrectResponsesObject(interaction);\n    }\n\n    return null;\n  }\n\n  /**\n   * Checks for valid response types - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {ResponseType} response_type\n   * @param {any} value\n   * @param {string} interaction_type\n   */\n  checkValidResponseType(\n    CMIElement: string,\n    response_type: ResponseType,\n    value: any,\n    interaction_type: string,\n  ) {\n    let nodes = [];\n    if (response_type?.delimiter) {\n      nodes = String(value).split(response_type.delimiter);\n    } else {\n      nodes[0] = value;\n    }\n\n    if (nodes.length > 0 && nodes.length <= response_type.max) {\n      this.checkCorrectResponseValue(CMIElement, interaction_type, nodes, value);\n    } else if (nodes.length > response_type.max) {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.GENERAL_SET_FAILURE,\n        `Data Model Element Pattern Too Long: ${value}`,\n      );\n    }\n  }\n\n  /**\n   * Checks for duplicate 'choice' responses - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {CMIInteractionsObject} interaction\n   * @param {any} value\n   */\n  checkDuplicateChoiceResponse(CMIElement: string, interaction: CMIInteractionsObject, value: any) {\n    const interaction_count = interaction.correct_responses._count;\n    if (interaction.type === \"choice\") {\n      for (let i = 0; i < interaction_count && this.lastErrorCode === \"0\"; i++) {\n        const response = interaction.correct_responses.childArray[i];\n        if (response.pattern === value) {\n          this.throwSCORMError(CMIElement, scorm2004_errors.GENERAL_SET_FAILURE, `${value}`);\n        }\n      }\n    }\n  }\n\n  /**\n   * Validate correct response - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {*} value\n   */\n  validateCorrectResponse(CMIElement: string, value: any) {\n    const parts = CMIElement.split(\".\");\n    const index = Number(parts[2]);\n    const pattern_index = Number(parts[4]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    const interaction_count = interaction.correct_responses._count;\n    this.checkDuplicateChoiceResponse(CMIElement, interaction, value);\n\n    const response_type = CorrectResponses[interaction.type];\n    if (typeof response_type.limit === \"undefined\" || interaction_count <= response_type.limit) {\n      this.checkValidResponseType(CMIElement, response_type, value, interaction.type);\n\n      if (\n        (this.lastErrorCode === \"0\" &&\n          (!response_type.duplicate ||\n            !this.checkDuplicatedPattern(interaction.correct_responses, pattern_index, value))) ||\n        (this.lastErrorCode === \"0\" && value === \"\")\n      ) {\n        // do nothing, we want the inverse\n      } else {\n        if (this.lastErrorCode === \"0\") {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.GENERAL_SET_FAILURE,\n            `Data Model Element Pattern Already Exists: ${CMIElement} - ${value}`,\n          );\n        }\n      }\n    } else {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.GENERAL_SET_FAILURE,\n        `Data Model Element Collection Limit Reached: ${CMIElement} - ${value}`,\n      );\n    }\n  }\n\n  /**\n   * Gets a value from the CMI Object - delegates to CMIValueHandlerModule\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  override getCMIValue(CMIElement: string): any {\n    return this._commonGetCMIValue(\"GetValue\", true, CMIElement);\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {(string|number)} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  override getLmsErrorMessageDetails(errorNumber: string | number, detail: boolean): string {\n    let basicMessage = \"\";\n    let detailMessage = \"\";\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (scorm2004_constants.error_descriptions[errorNumber]) {\n      basicMessage = scorm2004_constants.error_descriptions[errorNumber].basicMessage;\n      detailMessage = scorm2004_constants.error_descriptions[errorNumber].detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Check to see if a correct_response value has been duplicated - delegates to ValidationModule\n   * @param {CMIArray} correct_response\n   * @param {number} current_index\n   * @param {*} value\n   * @return {boolean}\n   */\n  checkDuplicatedPattern(correct_response: CMIArray, current_index: number, value: any): boolean {\n    let found = false;\n    const count = correct_response._count;\n    for (let i = 0; i < count && !found; i++) {\n      if (i !== current_index && correct_response.childArray[i] === value) {\n        found = true;\n      }\n    }\n    return found;\n  }\n\n  /**\n   * Checks for a valid correct_response value - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {string} interaction_type\n   * @param {Array} nodes\n   * @param {*} value\n   */\n  checkCorrectResponseValue(\n    CMIElement: string,\n    interaction_type: string,\n    nodes: Array<any>,\n    value: any,\n  ) {\n    const response = CorrectResponses[interaction_type];\n    if (!response) {\n      this.throwSCORMError(\n        CMIElement,\n        scorm2004_errors.TYPE_MISMATCH,\n        `Incorrect Response Type: ${interaction_type}`,\n      );\n      return;\n    }\n    const formatRegex = new RegExp(response.format);\n    for (let i = 0; i < nodes.length && this.lastErrorCode === \"0\"; i++) {\n      if (interaction_type.match(\"^(fill-in|long-fill-in|matching|performance|sequencing)$\")) {\n        nodes[i] = this.removeCorrectResponsePrefixes(CMIElement, nodes[i]);\n      }\n\n      if (response?.delimiter2) {\n        const values = nodes[i].split(response.delimiter2);\n        if (values.length === 2) {\n          const matches = values[0].match(formatRegex);\n          if (!matches) {\n            this.throwSCORMError(\n              CMIElement,\n              scorm2004_errors.TYPE_MISMATCH,\n              `${interaction_type}: ${value}`,\n            );\n          } else {\n            if (!response.format2 || !values[1].match(new RegExp(response.format2))) {\n              this.throwSCORMError(\n                CMIElement,\n                scorm2004_errors.TYPE_MISMATCH,\n                `${interaction_type}: ${value}`,\n              );\n            }\n          }\n        } else {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.TYPE_MISMATCH,\n            `${interaction_type}: ${value}`,\n          );\n        }\n      } else {\n        const matches = nodes[i].match(formatRegex);\n        if ((!matches && value !== \"\") || (!matches && interaction_type === \"true-false\")) {\n          this.throwSCORMError(\n            CMIElement,\n            scorm2004_errors.TYPE_MISMATCH,\n            `${interaction_type}: ${value}`,\n          );\n        } else {\n          if (interaction_type === \"numeric\" && nodes.length > 1) {\n            if (Number(nodes[0]) > Number(nodes[1])) {\n              this.throwSCORMError(\n                CMIElement,\n                scorm2004_errors.TYPE_MISMATCH,\n                `${interaction_type}: ${value}`,\n              );\n            }\n          } else {\n            if (nodes[i] !== \"\" && response.unique) {\n              for (let j = 0; j < i && this.lastErrorCode === \"0\"; j++) {\n                if (nodes[i] === nodes[j]) {\n                  this.throwSCORMError(\n                    CMIElement,\n                    scorm2004_errors.TYPE_MISMATCH,\n                    `${interaction_type}: ${value}`,\n                  );\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove prefixes from correct_response - delegates to ValidationModule\n   * @param {string} CMIElement\n   * @param {string} node\n   * @return {*}\n   */\n  removeCorrectResponsePrefixes(CMIElement: string, node: string): any {\n    let seenOrder = false;\n    let seenCase = false;\n    let seenLang = false;\n\n    const prefixRegex = new RegExp(\"^({(lang|case_matters|order_matters)=([^}]+)})\");\n    let matches = node.match(prefixRegex);\n    let langMatches = null;\n    while (matches) {\n      switch (matches[2]) {\n        case \"lang\":\n          langMatches = node.match(scorm2004_regex.CMILangcr);\n          if (langMatches) {\n            const lang = langMatches[3];\n            if (lang !== undefined && lang.length > 0) {\n              if (!ValidLanguages.includes(lang.toLowerCase())) {\n                this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n              }\n            }\n          }\n          seenLang = true;\n          break;\n        case \"case_matters\":\n          if (!seenLang && !seenOrder && !seenCase) {\n            if (matches[3] !== \"true\" && matches[3] !== \"false\") {\n              this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n            }\n          }\n\n          seenCase = true;\n          break;\n        case \"order_matters\":\n          if (!seenCase && !seenLang && !seenOrder) {\n            if (matches[3] !== \"true\" && matches[3] !== \"false\") {\n              this.throwSCORMError(CMIElement, scorm2004_errors.TYPE_MISMATCH, `${node}`);\n            }\n          }\n\n          seenOrder = true;\n          break;\n      }\n      node = node.substring(matches[1].length);\n      matches = node.match(prefixRegex);\n    }\n\n    return node;\n  }\n\n  /**\n   * Replace the whole API with another\n   * @param {Scorm2004API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI: Scorm2004API) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.adl = newAPI.adl;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit - delegates to DataSerializationModule\n   *\n   * @param {boolean} terminateCommit\n   * @return {object|Array}\n   */\n  renderCommitCMI(terminateCommit: boolean): StringKeyMap | Array<any> {\n    const cmiExport: StringKeyMap = this.renderCMIToJSONObject();\n\n    if (terminateCommit) {\n      (cmiExport.cmi as any).total_time = (this.cmi as any).getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened: StringKeyMap = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case \"flattened\":\n        return Utilities.flatten(cmiExport);\n      case \"params\":\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case \"json\":\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit - delegates to DataSerializationModule\n   * @param {boolean} terminateCommit\n   * @return {CommitObject}\n   */\n  renderCommitObject(terminateCommit: boolean): CommitObject {\n    const cmiExport = this.renderCommitCMI(terminateCommit);\n    const totalTimeDuration = this.cmi.getCurrentTotalTime();\n    const totalTimeSeconds = Utilities.getDurationAsSeconds(\n      totalTimeDuration,\n      scorm2004_regex.CMITimespan,\n    );\n\n    let completionStatus = CompletionStatus.UNKNOWN;\n    let successStatus = SuccessStatus.UNKNOWN;\n    if (this.cmi.completion_status) {\n      if (this.cmi.completion_status === \"completed\") {\n        completionStatus = CompletionStatus.COMPLETED;\n      } else if (this.cmi.completion_status === \"incomplete\") {\n        completionStatus = CompletionStatus.INCOMPLETE;\n      }\n    }\n    if (this.cmi.success_status) {\n      if (this.cmi.success_status === \"passed\") {\n        successStatus = SuccessStatus.PASSED;\n      } else if (this.cmi.success_status === \"failed\") {\n        successStatus = SuccessStatus.FAILED;\n      }\n    }\n\n    const score = this.cmi.score;\n    const scoreObject: ScoreObject = {};\n    if (score) {\n      if (!Number.isNaN(Number.parseFloat(score.raw))) {\n        scoreObject.raw = Number.parseFloat(score.raw);\n      }\n      if (!Number.isNaN(Number.parseFloat(score.min))) {\n        scoreObject.min = Number.parseFloat(score.min);\n      }\n      if (!Number.isNaN(Number.parseFloat(score.max))) {\n        scoreObject.max = Number.parseFloat(score.max);\n      }\n      if (!Number.isNaN(Number.parseFloat(score.scaled))) {\n        scoreObject.scaled = Number.parseFloat(score.scaled);\n      }\n    }\n\n    const commitObject: CommitObject = {\n      completionStatus: completionStatus,\n      successStatus: successStatus,\n      totalTimeSeconds: totalTimeSeconds,\n      runtimeData: cmiExport as StringKeyMap,\n    };\n    if (scoreObject) {\n      commitObject.score = scoreObject;\n    }\n    return commitObject;\n  }\n\n  /**\n   * Attempts to store the data to the LMS - delegates to DataSerializationModule\n   *\n   * @param {boolean} terminateCommit\n   * @return {ResultObject}\n   */\n  async storeData(terminateCommit: boolean): Promise<ResultObject> {\n    if (terminateCommit) {\n      if (this.cmi.mode === \"normal\") {\n        if (this.cmi.credit === \"credit\") {\n          if (this.cmi.completion_threshold && this.cmi.progress_measure) {\n            if (this.cmi.progress_measure >= this.cmi.completion_threshold) {\n              this.cmi.completion_status = \"completed\";\n            } else {\n              this.cmi.completion_status = \"incomplete\";\n            }\n          }\n          if (this.cmi.scaled_passing_score && this.cmi.score.scaled) {\n            if (this.cmi.score.scaled >= this.cmi.scaled_passing_score) {\n              this.cmi.success_status = \"passed\";\n            } else {\n              this.cmi.success_status = \"failed\";\n            }\n          }\n        }\n      }\n    }\n\n    let navRequest = false;\n    if (\n      this.adl.nav.request !==\n        ((this.startingData?.adl as StringKeyMap)?.nav as StringKeyMap)?.request &&\n      this.adl.nav.request !== \"_none_\"\n    ) {\n      navRequest = true;\n    }\n\n    const commitObject = this.getCommitObject(terminateCommit);\n    if (typeof this.settings.lmsCommitUrl === \"string\") {\n      const result = await this.processHttpRequest(\n        this.settings.lmsCommitUrl,\n        {\n          commitObject: commitObject,\n        },\n        terminateCommit,\n      );\n\n      // Check if this is a sequencing call, and then call the necessary JS\n      if (\n        navRequest &&\n        result.navRequest !== undefined &&\n        result.navRequest !== \"\" &&\n        typeof result.navRequest === \"string\"\n      ) {\n        Function(`\"use strict\";(() => { ${result.navRequest} })()`)();\n      } else if (result?.navRequest && !navRequest) {\n        if (\n          typeof result.navRequest === \"object\" &&\n          Object.hasOwnProperty.call(result.navRequest, \"name\")\n        ) {\n          this.processListeners(result.navRequest.name as string, result.navRequest.data as string);\n        }\n      }\n\n      return result;\n    }\n\n    return {\n      result: \"true\",\n      errorCode: 0,\n    };\n  }\n\n  /**\n   * Configure sequencing based on provided settings\n   * @param {SequencingSettings} sequencingSettings - The sequencing settings\n   */\n  private configureSequencing(sequencingSettings: SequencingSettings): void {\n    // Configure activity tree\n    if (sequencingSettings.activityTree) {\n      this.configureActivityTree(sequencingSettings.activityTree);\n    }\n\n    // Configure sequencing rules\n    if (sequencingSettings.sequencingRules) {\n      this.configureSequencingRules(sequencingSettings.sequencingRules);\n    }\n\n    // Configure sequencing controls\n    if (sequencingSettings.sequencingControls) {\n      this.configureSequencingControls(sequencingSettings.sequencingControls);\n    }\n\n    // Configure rollup rules\n    if (sequencingSettings.rollupRules) {\n      this.configureRollupRules(sequencingSettings.rollupRules);\n    }\n  }\n\n  /**\n   * Configure activity tree based on provided settings\n   * @param {ActivitySettings} activityTreeSettings - The activity tree settings\n   */\n  private configureActivityTree(activityTreeSettings: ActivitySettings): void {\n    // Create root activity\n    const rootActivity = this.createActivity(activityTreeSettings);\n\n    // Create activity tree\n    const activityTree = this._sequencing.activityTree;\n    activityTree.root = rootActivity;\n\n    // Extract activity IDs for use as scoItemIds\n    this._extractedScoItemIds = this.extractActivityIds(rootActivity);\n  }\n\n  /**\n   * Extract all activity IDs from an activity and its children\n   * @param {Activity} activity - The activity to extract IDs from\n   * @return {string[]} - Array of activity IDs\n   */\n  private extractActivityIds(activity: Activity): string[] {\n    const ids = [activity.id];\n\n    // Recursively extract IDs from children\n    for (const child of activity.children) {\n      ids.push(...this.extractActivityIds(child));\n    }\n\n    return ids;\n  }\n\n  /**\n   * Create an activity from settings\n   * @param {ActivitySettings} activitySettings - The activity settings\n   * @return {Activity} - The created activity\n   */\n  private createActivity(activitySettings: ActivitySettings): Activity {\n    // Create activity\n    const activity = new Activity(activitySettings.id, activitySettings.title);\n\n    // Set activity properties\n    if (activitySettings.isVisible !== undefined) {\n      activity.isVisible = activitySettings.isVisible;\n    }\n    if (activitySettings.isActive !== undefined) {\n      activity.isActive = activitySettings.isActive;\n    }\n    if (activitySettings.isSuspended !== undefined) {\n      activity.isSuspended = activitySettings.isSuspended;\n    }\n    if (activitySettings.isCompleted !== undefined) {\n      activity.isCompleted = activitySettings.isCompleted;\n    }\n\n    // Create child activities\n    if (activitySettings.children) {\n      for (const childSettings of activitySettings.children) {\n        const childActivity = this.createActivity(childSettings);\n        activity.addChild(childActivity);\n      }\n    }\n\n    return activity;\n  }\n\n  /**\n   * Configure sequencing rules based on provided settings\n   * @param {SequencingRulesSettings} sequencingRulesSettings - The sequencing rules settings\n   */\n  private configureSequencingRules(sequencingRulesSettings: SequencingRulesSettings): void {\n    const sequencingRules = this._sequencing.sequencingRules;\n\n    // Configure pre-condition rules\n    if (sequencingRulesSettings.preConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.preConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addPreConditionRule(rule);\n      }\n    }\n\n    // Configure exit condition rules\n    if (sequencingRulesSettings.exitConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.exitConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addExitConditionRule(rule);\n      }\n    }\n\n    // Configure post-condition rules\n    if (sequencingRulesSettings.postConditionRules) {\n      for (const ruleSettings of sequencingRulesSettings.postConditionRules) {\n        const rule = this.createSequencingRule(ruleSettings);\n        sequencingRules.addPostConditionRule(rule);\n      }\n    }\n  }\n\n  /**\n   * Create a sequencing rule from settings\n   * @param {SequencingRuleSettings} ruleSettings - The sequencing rule settings\n   * @return {SequencingRule} - The created sequencing rule\n   */\n  private createSequencingRule(ruleSettings: SequencingRuleSettings): SequencingRule {\n    // Create rule\n    const rule = new SequencingRule(ruleSettings.action, ruleSettings.conditionCombination);\n\n    // Add conditions\n    for (const conditionSettings of ruleSettings.conditions) {\n      const condition = new RuleCondition(\n        conditionSettings.condition,\n        conditionSettings.operator,\n        new Map(Object.entries(conditionSettings.parameters || {})),\n      );\n      rule.addCondition(condition);\n    }\n\n    return rule;\n  }\n\n  /**\n   * Configure sequencing controls based on provided settings\n   * @param {SequencingControlsSettings} sequencingControlsSettings - The sequencing controls settings\n   */\n  private configureSequencingControls(\n    sequencingControlsSettings: SequencingControlsSettings,\n  ): void {\n    const sequencingControls = this._sequencing.sequencingControls;\n\n    // Set sequencing control properties\n    if (sequencingControlsSettings.enabled !== undefined) {\n      sequencingControls.enabled = sequencingControlsSettings.enabled;\n    }\n    if (sequencingControlsSettings.choiceExit !== undefined) {\n      sequencingControls.choiceExit = sequencingControlsSettings.choiceExit;\n    }\n    if (sequencingControlsSettings.flow !== undefined) {\n      sequencingControls.flow = sequencingControlsSettings.flow;\n    }\n    if (sequencingControlsSettings.forwardOnly !== undefined) {\n      sequencingControls.forwardOnly = sequencingControlsSettings.forwardOnly;\n    }\n    if (sequencingControlsSettings.useCurrentAttemptObjectiveInfo !== undefined) {\n      sequencingControls.useCurrentAttemptObjectiveInfo =\n        sequencingControlsSettings.useCurrentAttemptObjectiveInfo;\n    }\n    if (sequencingControlsSettings.useCurrentAttemptProgressInfo !== undefined) {\n      sequencingControls.useCurrentAttemptProgressInfo =\n        sequencingControlsSettings.useCurrentAttemptProgressInfo;\n    }\n    if (sequencingControlsSettings.preventActivation !== undefined) {\n      sequencingControls.preventActivation = sequencingControlsSettings.preventActivation;\n    }\n    if (sequencingControlsSettings.constrainChoice !== undefined) {\n      sequencingControls.constrainChoice = sequencingControlsSettings.constrainChoice;\n    }\n    if (sequencingControlsSettings.rollupObjectiveSatisfied !== undefined) {\n      sequencingControls.rollupObjectiveSatisfied =\n        sequencingControlsSettings.rollupObjectiveSatisfied;\n    }\n    if (sequencingControlsSettings.rollupProgressCompletion !== undefined) {\n      sequencingControls.rollupProgressCompletion =\n        sequencingControlsSettings.rollupProgressCompletion;\n    }\n    if (sequencingControlsSettings.objectiveMeasureWeight !== undefined) {\n      sequencingControls.objectiveMeasureWeight = sequencingControlsSettings.objectiveMeasureWeight;\n    }\n  }\n\n  /**\n   * Configure rollup rules based on provided settings\n   * @param {RollupRulesSettings} rollupRulesSettings - The rollup rules settings\n   */\n  private configureRollupRules(rollupRulesSettings: RollupRulesSettings): void {\n    const rollupRules = this._sequencing.rollupRules;\n\n    // Configure rollup rules\n    if (rollupRulesSettings.rules) {\n      for (const ruleSettings of rollupRulesSettings.rules) {\n        const rule = this.createRollupRule(ruleSettings);\n        rollupRules.addRule(rule);\n      }\n    }\n  }\n\n  /**\n   * Create a rollup rule from settings\n   * @param {RollupRuleSettings} ruleSettings - The rollup rule settings\n   * @return {RollupRule} - The created rollup rule\n   */\n  private createRollupRule(ruleSettings: RollupRuleSettings): RollupRule {\n    // Create rule\n    const rule = new RollupRule(\n      ruleSettings.action,\n      ruleSettings.consideration,\n      ruleSettings.minimumCount,\n      ruleSettings.minimumPercent,\n    );\n\n    // Add conditions\n    for (const conditionSettings of ruleSettings.conditions) {\n      const condition = new RollupCondition(\n        conditionSettings.condition,\n        new Map(Object.entries(conditionSettings.parameters || {})),\n      );\n      rule.addCondition(condition);\n    }\n\n    return rule;\n  }\n}\n\nexport default Scorm2004API;\n"],"names":["scorm2004_constants","cmi_children","comments_children","score_children","objectives_children","correct_responses_children","student_preference_children","interactions_children","adl_data_children","error_descriptions","basicMessage","detailMessage","designations","D","H","M","S","getSecondsAsISODuration","memoize","seconds","duration","remainder","Object","entries","forEach","_ref","designationsKey","current_seconds","value","Math","floor","num","String","indexOf","parts","split","length","countDecimals","toFixed","includes","getDurationAsSeconds","durationRegex","RegExp","match","years","_","days","hours","minutes","exec","result","toString","flatten","data","recurse","cur","prop","Array","isArray","item","i","keys","filter","p","prototype","hasOwnProperty","call","isEmpty","stringMatches","str","tester","fn","keyFn","cache","Map","_len","arguments","args","_key","key","JSON","stringify","has","get","set","LogLevelEnum","DEBUG","INFO","WARN","ERROR","NONE","DefaultSettings","autocommit","autocommitSeconds","asyncCommit","sendFullCommit","lmsCommitUrl","dataCommitFormat","commitRequestDataType","autoProgress","logLevel","selfReportSessionTime","alwaysSendTotalTime","renderCommonCommitFields","strict_errors","xhrHeaders","xhrWithCredentials","fetchMode","responseHandler","async","response","httpResult","json","text","responseText","parse","e","errorCode","status","requestHandler","commitObject","onLogMessage","defaultLogHandler","scoItemIds","scoItemIdValidator","globalObjectiveIds","enableOfflineSupport","courseId","syncOnInitialize","syncOnTerminate","maxSyncAttempts","messageLevel","logMessage","console","error","warn","info","debug","log","ScheduledCommit","constructor","API","when","callback","this","_cancelled","_API","_timeout","setTimeout","wrapper","bind","_callback","cancel","clearTimeout","commit","HttpService","settings","error_codes","processHttpRequest","url","params","apiLog","processListeners","undefined","genericError","GENERAL","performFetch","then","transformResponse","process","init","method","mode","body","join","headers","keepalive","credentials","fetch","updateSettings","EventService","listenerMap","listenerCount","parseListenerName","listenerName","listenerSplit","functionName","CMIElement","replace","on","listenerFunctions","listenerFunction","parsedListener","listeners","push","off","removeIndex","findIndex","obj","splice","delete","clear","newListeners","listener","listenerHasCMIElement","CMIElementsMatch","endsWith","prefix","slice","startsWith","reset","SerializationService","loadFromFlattenedJSON","setCMIValue","isNotInitialized","setStartingData","int_pattern","obj_pattern","interactions","objectives","others","intMatch","index","field","objMatch","sort","a","b","localeCompare","processItems","items","loadFromJSON","pattern","regex","from","m","unflatten","currentCMIElement","tempCMIElement","renderCMIToJSONString","cmi","k","v","renderCMIToJSONObject","getCommitObject","terminateCommit","renderCommitObject","renderCommitCMI","apiLogLevel","shouldTerminateCommit","BaseScormValidationError","Error","super","_errorCode","setPrototypeOf","ValidationError","errorMessage","detailedMessage","_detailedMessage","message","_errorMessage","LoggingService","_logLevel","_logHandler","getInstance","_instance","setLogLevel","level","getLogLevel","setLogHandler","handler","shouldLog","getNumericLevel","getLoggingService","ErrorHandlingService","errorCodes","getLmsErrorMessageDetails","loggingService","_lastErrorCode","_errorCodes","_apiLog","_getLmsErrorMessageDetails","_loggingService","lastErrorCode","throwSCORMError","errorNumber","formattedMessage","clearSCORMError","success","handleValueAccessException","returnValue","validationError","errorType","name","stack","errorDetails","jsonError","OfflineStorageService","storeName","syncQueue","isOnline","navigator","onLine","syncInProgress","window","addEventListener","handleOnlineStatusChange","wasOnline","syncOfflineData","storeOffline","commitData","queueItem","id","Date","now","random","substr","timestamp","syncAttempts","currentQueue","getFromStorage","saveToStorage","getOfflineData","remainingQueue","sendDataToLMS","processedData","isDeviceOnline","storedData","localStorage","getItem","setItem","hasPendingOfflineData","some","BaseCMI","cmi_element","jsonString","_initialized","_cmi_element","initialized","start_time","_start_time","initialize","setStartTime","getTime","BaseRootCMI","global_errors","INITIALIZATION_FAILED","INITIALIZED","TERMINATED","TERMINATION_FAILURE","TERMINATION_BEFORE_INIT","MULTIPLE_TERMINATION","RETRIEVE_BEFORE_INIT","RETRIEVE_AFTER_TERM","STORE_BEFORE_INIT","STORE_AFTER_TERM","COMMIT_BEFORE_INIT","COMMIT_AFTER_TERM","ARGUMENT_ERROR","CHILDREN_ERROR","COUNT_ERROR","GENERAL_GET_FAILURE","GENERAL_SET_FAILURE","GENERAL_COMMIT_FAILURE","UNDEFINED_DATA_MODEL","UNIMPLEMENTED_ELEMENT","VALUE_NOT_INITIALIZED","INVALID_SET_VALUE","READ_ONLY_ELEMENT","WRITE_ONLY_ELEMENT","TYPE_MISMATCH","VALUE_OUT_OF_RANGE","DEPENDENCY_NOT_ESTABLISHED","scorm12_errors","scorm2004_errors","MULTIPLE_TERMINATIONS","CMIArray","__children","children","_errorClass","errorClass","childArray","wipe","_children","_count","toJSON","BaseAPI","httpService","eventService","serializationService","cmiDataService","errorHandlingService","offlineStorageService","_settings","_courseId","TypeError","currentState","_error_codes","_httpService","_eventService","element","_serializationService","_errorHandlingService","detail","createErrorHandlingService","_offlineStorageService","offlineData","runtimeData","catch","commonReset","clearScheduledCommit","startingData","callbackName","initializeMessage","terminationMessage","isInitialized","isTerminated","hasPendingData","syncSuccess","messageString","padEnd","formatMessage","previousSettings","terminate","checkTerminated","checkState","storeData","getValue","getCMIValue","setValue","commitCallback","scheduleCommit","getLastError","getErrorString","CMIErrorCode","getDiagnostic","beforeInitError","afterTermError","_errorNumber","_CMIElement","_value","_commonSetCMIValue","methodName","scorm2004","structure","refObject","foundFirstIndex","invalidErrorMessage","invalidErrorCode","idx","attribute","substring","_checkObjectHasProperty","validateCorrectResponse","parseInt","isNaN","newChild","getChildElement","_commonGetCMIValue","uninitializedErrorMessage","_isTargetValid","immediate","StringKeyMap","getOwnPropertyDescriptor","getPrototypeOf","Scorm2004ValidationError","checkValidFormat","regexPattern","allowEmptyString","formatRegex","matches","checkValidRange","rangePattern","ranges","check2004ValidFormat","check2004ValidRange","scorm2004_regex","CMILearnerPreference","_audio_level","_language","_delivery_speed","_audio_captioning","audio_level","language","delivery_speed","audio_captioning","LearnerResponses","format","max","delimiter","unique","choice","matching","format2","delimiter2","performance","sequencing","likert","numeric","other","CorrectResponses","duplicate","limit","delimiter3","CMIInteractions","CMIInteractionsObject","_id","_type","_timestamp","_weighting","_learner_response","_result","_latency","_description","correct_responses","type","weighting","learner_response","nodes","response_type","values","j","latency","description","CMIInteractionsObjectivesObject","CMIInteractionsCorrectResponsesObject","parent","_pattern","_parent","interactionType","isValid","Scorm12ValidationError","check12ValidFormat","check12ValidRange","validationService","validateScore","decimalRegex","scoreRange","invalidTypeCode","invalidRangeCode","validateScorm12Audio","validateScorm12Language","validateScorm12Speed","validateScorm12Text","validateReadOnly","CMIScore","_raw","_min","__score_range","score_range","_max","__invalid_error_code","__invalid_type_code","__invalid_range_code","__decimal_regex","__error_class","raw","min","Scorm2004CMIScore","_scaled","scaled","CMICommentsFromLMS","CMICommentsFromLearner","CMICommentsObject","readOnlyAfterInit","_comment","_location","_readOnlyAfterInit","comment","location","CMIObjectives","findObjectiveById","find","objective","findObjectiveByIndex","setObjectiveByIndex","CMIObjectivesObject","_success_status","_completion_status","_progress_measure","score","success_status","completion_status","progress_measure","CMIMetadata","__version","_version","CMILearner","_learner_id","_learner_name","learner_id","learner_name","CMIStatus","CMISession","_entry","_exit","_session_time","_total_time","entry","exit","session_time","total_time","getCurrentTotalTime","sessionTime","startTime","Util","first","second","CMIContent","_launch_data","_suspend_data","launch_data","suspend_data","CMISettings","_credit","_mode","_time_limit_action","_max_time_allowed","credit","time_limit_action","max_time_allowed","CMIThresholds","_scaled_passing_score","_completion_threshold","scaled_passing_score","completion_threshold","CMI","metadata","learner","session","content","thresholds","learner_preference","comments_from_learner","comments_from_lms","ADL","ADLData","_sequencing","nav","ADLNav","adlNav","_request","request_valid","ADLNavRequestValid","request","processNavigationRequest","ADLDataObject","_store","store","_continue","_previous","_choice","_jump","continue","previous","jump","RuleActionType","RuleCondition","condition","operator","parameters","_condition","_operator","_parameters","evaluate","activity","successStatus","objectiveMeasureStatus","greaterThanValue","objectiveNormalizedMeasure","lessThanValue","isCompleted","completionStatus","attemptCount","attemptLimit","fromEntries","SequencingRule","action","conditionCombination","_conditions","_action","_conditionCombination","conditions","addCondition","removeCondition","every","SequencingRules","_preConditionRules","_exitConditionRules","_postConditionRules","preConditionRules","addPreConditionRule","rule","exitConditionRules","addExitConditionRule","postConditionRules","addPostConditionRule","evaluatePreConditionRules","evaluateExitConditionRules","evaluatePostConditionRules","RollupCondition","RollupRule","consideration","minimumCount","minimumPercent","_consideration","_minimumCount","_minimumPercent","matchingChildren","child","RollupRules","_rules","rules","addRule","removeRule","processRollup","completionRollup","successRollup","_defaultCompletionRollup","_defaultSuccessRollup","ValidLanguages","Activity","title","_title","_isVisible","_isActive","_isSuspended","_isCompleted","_completionStatus","_successStatus","_attemptCount","_attemptCompletionAmount","_attemptAbsoluteDuration","_attemptExperiencedDuration","_activityAbsoluteDuration","_activityExperiencedDuration","_objectiveSatisfiedStatus","_objectiveMeasureStatus","_objectiveNormalizedMeasure","addChild","removeChild","isVisible","isActive","isSuspended","incrementAttemptCount","attemptCompletionAmount","attemptAbsoluteDuration","attemptExperiencedDuration","activityAbsoluteDuration","activityExperiencedDuration","objectiveSatisfiedStatus","map","ActivityTree","_root","_currentActivity","_suspendedActivity","_activities","root","_addActivitiesToMap","currentActivity","suspendedActivity","getActivity","getAllActivities","getParent","getChildren","getSiblings","getNextSibling","siblings","getPreviousSibling","getFirstChild","getLastChild","getCommonAncestor","activity1","activity2","path1","current","unshift","SequencingControls","_enabled","_choiceExit","_flow","_forwardOnly","_useCurrentAttemptObjectiveInfo","_useCurrentAttemptProgressInfo","_preventActivation","_constrainChoice","_rollupObjectiveSatisfied","_rollupProgressCompletion","_objectiveMeasureWeight","enabled","choiceExit","flow","forwardOnly","useCurrentAttemptObjectiveInfo","useCurrentAttemptProgressInfo","preventActivation","constrainChoice","rollupObjectiveSatisfied","rollupProgressCompletion","objectiveMeasureWeight","isChoiceNavigationAllowed","isFlowNavigationAllowed","isForwardNavigationAllowed","isBackwardNavigationAllowed","Sequencing","_adlNav","_activityTree","_sequencingRules","_sequencingControls","_rollupRules","activityTree","sequencingRules","sequencingControls","rollupRules","preConditionAction","SKIP","DISABLED","HIDE_FROM_CHOICE","STOP_FORWARD_TRAVERSAL","processContinueRequest","processPreviousRequest","processExitRequest","processExitAllRequest","processAbandonRequest","processAbandonAllRequest","processSuspendAllRequest","nextActivity","exitConditionAction","EXIT_PARENT","EXIT_ALL","postConditionAction","RETRY","RETRY_ALL","CONTINUE","PREVIOUS","EXIT","previousActivity","_processRollupRecursive","mastery_override","_globalObjectives","_extractedScoItemIds","adl","configureSequencing","Initialize","lmsInitialize","Terminate","lmsFinish","GetValue","lmsGetValue","SetValue","lmsSetValue","Commit","lmsCommit","GetLastError","lmsGetLastError","GetErrorString","lmsGetErrorString","GetDiagnostic","lmsGetDiagnostic","version","globalObjectives","internalFinish","navActions","exitAll","abandon","abandonAll","choiceJumpRegex","target","groups","choice_target","jump_target","adlNavRequestRegex","element_base","objective_id","global_index","newGlobalObjective","global_element","createCorrectResponsesObject","interaction","checkDuplicateChoiceResponse","checkValidResponseType","interaction_type","checkCorrectResponseValue","interaction_count","pattern_index","checkDuplicatedPattern","correct_response","current_index","found","count","removeCorrectResponsePrefixes","node","seenOrder","seenCase","seenLang","prefixRegex","langMatches","lang","toLowerCase","replaceWithAnotherScormAPI","newAPI","cmiExport","flattened","Utilities","totalTimeDuration","totalTimeSeconds","scoreObject","Number","parseFloat","navRequest","Function","sequencingSettings","configureActivityTree","configureSequencingRules","configureSequencingControls","configureRollupRules","activityTreeSettings","rootActivity","createActivity","extractActivityIds","ids","activitySettings","childSettings","childActivity","sequencingRulesSettings","ruleSettings","createSequencingRule","conditionSettings","sequencingControlsSettings","rollupRulesSettings","createRollupRule"],"mappings":"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"}